// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendFsk($0, $1, $2, $3, $4, $5); },
 function($0, $1, $2, $3, $4, $5) { window.MbedJSHal.lora.sendLoRa($0, $1, $2, $3, $4, $5); },
 function() { return Date.now(); },
 function() { return Math.random() * 0x8000000 | 0; },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0) { window.MbedJSHal.lora.init($0); },
 function($0, $1) { MbedJSHal.gpio.init_in($0, $1, 3); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); },
 function($0, $1, $2) { MbedJSHal.gpio.init_out($0, $1, $2); },
 function($0, $1, $2, $3, $4) { MbedJSHal.gpio.init_inout($0, $1, $2, $3, $4); },
 function($0, $1) { MbedJSHal.gpio.irq_init($0, $1); },
 function($0, $1) { MbedJSHal.gpio.irq_free($0); },
 function($0, $1, $2) { MbedJSHal.gpio.irq_set($0, $1, $2); },
 function($0) { window.MbedJSHal.timers.ticker_detach($0); },
 function($0, $1) { window.MbedJSHal.timers.ticker_setup($0, $1); },
 function($0, $1, $2) { window.MbedJSHal.sht31.init($0, $1, $2); },
 function($0) { return window.MbedJSHal.sht31.read_temperature($0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiiiiii(code, a0, a1, a2, a3, a4, a5) {
  return ASM_CONSTS[code](a0, a1, a2, a3, a4, a5);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 25376;
/* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_main_cpp() } });


memoryInitializer = "lorawan.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  var _llvm_ceil_f64=Math_ceil;

  var _llvm_floor_f64=Math_floor;

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  function _pthread_cond_timedwait() { return 0; }

  function _pthread_cond_wait() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 

  function _sleep_manager_lock_deep_sleep_internal() {
  Module['printErr']('missing function: sleep_manager_lock_deep_sleep_internal'); abort(-1);
  }

  function _sleep_manager_unlock_deep_sleep_internal() {
  Module['printErr']('missing function: sleep_manager_unlock_deep_sleep_internal'); abort(-1);
  }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0", "_ccm_ctx_alloc", "_gcm_ctx_alloc", "_aes_ctx_alloc", "_us_ticker_read", "_us_ticker_get_info", "0", "0"];
var debug_table_ii = ["0", "__ZN16SX1276_LoRaRadio6randomEv", "__ZN16SX1276_LoRaRadio10get_statusEv", "__ZN16LoRaWANInterface7connectEv", "__ZN16LoRaWANInterface10disconnectEv", "__ZN16LoRaWANInterface22add_link_check_requestEv", "__ZN16LoRaWANInterface24enable_adaptive_datarateEv", "__ZN16LoRaWANInterface25disable_adaptive_datarateEv", "__ZN16LoRaWANInterface19remove_channel_planEv", "__ZN16LoRaWANInterface14cancel_sendingEv", "___stdio_close", "__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16SX1276_LoRaRadio18check_rf_frequencyEj", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE", "__ZN16LoRaWANInterface7connectERK15lorawan_connect", "__ZN16LoRaWANInterface12set_datarateEh", "__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan", "__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan", "__ZN16LoRaWANInterface14remove_channelEh", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t", "__ZN16LoRaWANInterface16set_device_classE14device_class_t", "__ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata", "__ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata", "__ZN16LoRaWANInterface20get_backoff_metadataERi", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s", "__ZN7LoRaPHY16get_alternate_DREh", "__ZN7LoRaPHY14remove_channelEh", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t", "__ZN7LoRaPHY25accept_tx_param_setup_reqEhh", "__ZN7LoRaPHY18dl_channel_requestEhj", "__ZN7LoRaPHY11add_channelEPK16channel_params_th", "__ZN7LoRaPHY15apply_DR_offsetEaa", "__ZNK7LoRaPHY25verify_frequency_for_bandEjh", "_ccm_aes_setkey_wrap", "_gcm_aes_setkey_wrap", "_aes_setkey_enc_wrap", "_aes_setkey_dec_wrap", "_memset", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_get_pkcs_padding", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj", "_aes_crypt_ecb_wrap", "0"];
var debug_table_iiiiii = ["0", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj", "__ZN16LoRaWANInterface4sendEhPKhti", "__ZN16LoRaWANInterface7receiveEhPhti", "__ZN16LoRaWANInterface7receiveEPhtRhRi", "__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_", "0", "0"];
var debug_table_iiiiiii = ["0", "__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_", "_aes_crypt_cbc_wrap", "0"];
var debug_table_iiiiiiii = ["0", "_aes_crypt_ctr_wrap"];
var debug_table_v = ["0", "___cxa_pure_virtual", "_us_ticker_init", "_us_ticker_disable_interrupt", "_us_ticker_clear_interrupt", "_us_ticker_fire_interrupt", "__ZL25default_terminate_handlerv", "__ZL12send_messagev", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN16SX1276_LoRaRadio11radio_resetEv", "__ZN16SX1276_LoRaRadio5sleepEv", "__ZN16SX1276_LoRaRadio7standbyEv", "__ZN16SX1276_LoRaRadio9start_cadEv", "__ZN16SX1276_LoRaRadio4lockEv", "__ZN16SX1276_LoRaRadio6unlockEv", "__ZN16SX1276_LoRaRadioD2Ev", "__ZN16SX1276_LoRaRadioD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv", "__ZN4mbed11InterruptInD2Ev", "__ZN4mbed11InterruptInD0Ev", "__ZN4mbed7TimeoutD2Ev", "__ZN4mbed7TimeoutD0Ev", "__ZN4mbed7Timeout7handlerEv", "__ZN4mbed10TimerEventD2Ev", "__ZN4mbed10TimerEventD0Ev", "_mbed_trace_default_print", "__ZN16LoRaWANInterface25remove_link_check_requestEv", "__ZN16LoRaWANInterfaceD2Ev", "__ZN16LoRaWANInterfaceD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv", "__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv", "__ZN7LoRaPHYD2Ev", "__ZN7LoRaPHYD0Ev", "__ZN7LoRaPHY24restore_default_channelsEv", "__ZN12LoRaPHYEU868D2Ev", "__ZN12LoRaPHYEU868D0Ev", "_ccm_ctx_free", "_gcm_ctx_free", "_aes_ctx_free", "_us_ticker_set_interrupt", "__ZN4mbed6TickerD2Ev", "__ZN4mbed6TickerD0Ev", "__ZN4mbed6Ticker7handlerEv", "__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb", "__ZN16SX1276_LoRaRadio4sendEPhh__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_54", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_55", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_56", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_57", "__ZN16SX1276_LoRaRadio7receiveEj__async_cb_58", "__ZN16SX1276_LoRaRadio6randomEv__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_186", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_182", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_183", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_185", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_184", "__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_181", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_237", "__ZN16SX1276_LoRaRadioD2Ev__async_cb", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_297", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_291", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_296", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_292", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_295", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_293", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_294", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_303", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_302", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_301", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_300", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_299", "__ZN16SX1276_LoRaRadioD2Ev__async_cb_298", "__ZN16SX1276_LoRaRadioD0Ev__async_cb", "__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_387", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_388", "__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_389", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb", "__ZN16SX1276_LoRaRadio11tx_done_irqEv", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_136", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_137", "__ZN16SX1276_LoRaRadio8transmitEj__async_cb_138", "__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_66", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_65", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_64", "__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb", "__ZN4mbed11InterruptInD2Ev__async_cb_40", "__ZN4mbed11InterruptInD0Ev__async_cb", "__ZN4mbed11InterruptInD0Ev__async_cb_1", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_233", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_227", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_228", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_229", "__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_230", "__ZN4mbed7TimeoutD2Ev__async_cb", "__ZN4mbed7TimeoutD2Ev__async_cb_364", "__ZN4mbed7TimeoutD0Ev__async_cb", "__ZN4mbed7TimeoutD0Ev__async_cb_371", "__ZN4mbed7Timeout7handlerEv__async_cb", "__ZN4mbed7Timeout7handlerEv__async_cb_383", "__ZN4mbed7Timeout7handlerEv__async_cb_381", "__ZN4mbed7Timeout7handlerEv__async_cb_382", "__ZN4mbed5TimerC2Ev__async_cb", "__ZN4mbed5Timer5startEv__async_cb", "__ZN4mbed5Timer7read_msEv__async_cb", "__ZN4mbed10TimerEventD2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj", "__ZN4mbed10TimerEventC2Ev__async_cb", "__ZN4mbed10TimerEvent3irqEj__async_cb", "__ZN6events10EventQueue8dispatchEi__async_cb", "__ZN6events10EventQueue6cancelEi__async_cb", "_equeue_alloc__async_cb", "_equeue_dealloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_equeue_cancel__async_cb", "_equeue_dispatch__async_cb", "_equeue_dispatch__async_cb_74", "_equeue_dispatch__async_cb_72", "_equeue_dispatch__async_cb_73", "_equeue_dispatch__async_cb_75", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_205", "_mbed_vtracef__async_cb_195", "_mbed_vtracef__async_cb_196", "_mbed_vtracef__async_cb_197", "_mbed_vtracef__async_cb_204", "_mbed_vtracef__async_cb_198", "_mbed_vtracef__async_cb_203", "_mbed_vtracef__async_cb_199", "_mbed_vtracef__async_cb_200", "_mbed_vtracef__async_cb_201", "_mbed_vtracef__async_cb_202", "__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb", "__ZN16LoRaWANInterface7connectEv__async_cb", "__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb", "__ZN16LoRaWANInterface10disconnectEv__async_cb", "__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb", "__ZN16LoRaWANInterface19remove_channel_planEv__async_cb", "__ZN16LoRaWANInterface14remove_channelEh__async_cb", "__ZN16LoRaWANInterface4sendEhPKhti__async_cb", "__ZN16LoRaWANInterface7receiveEhPhti__async_cb", "__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb", "__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb", "__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb", "__ZN16LoRaWANInterface14cancel_sendingEv__async_cb", "__ZN16LoRaWANInterfaceD2Ev__async_cb", "__ZN16LoRaWANInterfaceD0Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb", "__ZN12LoRaWANStackD2Ev__async_cb_261", "__ZN12LoRaWANStackD2Ev__async_cb_262", "__ZN12LoRaWANStackD2Ev__async_cb_264", "__ZN12LoRaWANStackD2Ev__async_cb_263", "__ZN12radio_eventsD2Ev__async_cb", "__ZN12radio_eventsD2Ev__async_cb_274", "__ZN12radio_eventsD2Ev__async_cb_275", "__ZN12radio_eventsD2Ev__async_cb_276", "__ZN12radio_eventsD2Ev__async_cb_277", "__ZN12radio_eventsD2Ev__async_cb_278", "__ZN12radio_eventsD2Ev__async_cb_279", "__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_243", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_244", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_245", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_246", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_247", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_248", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_249", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_250", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_251", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_252", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_253", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_254", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_255", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_256", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_257", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_258", "__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_259", "__ZN12LoRaWANStack20process_transmissionEv", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_352", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_357", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_358", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_316", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_317", "__ZN12LoRaWANStack28process_transmission_timeoutEv", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_335", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_215", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb", "__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_216", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_223", "__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_222", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_173", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_178", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_174", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_177", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_175", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_176", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_235", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_98", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_97", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_99", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_96", "__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_100", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_11", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_10", "__ZN12LoRaWANStack26process_status_check_stateEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_50", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_43", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_53", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_44", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_49", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_45", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_52", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_46", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_48", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_47", "__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_51", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_146", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_139", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_149", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_140", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_145", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_141", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_148", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_142", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_144", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_143", "__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_147", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_161", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_166", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_162", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_165", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_163", "__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_164", "__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_129", "__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb", "__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_392", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_386", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_385", "__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_384", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_365", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_286", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_290", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_289", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_288", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_287", "__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_285", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_267", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_272", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_268", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_271", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_269", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_270", "__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_354", "__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_341", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_337", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_345", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_340", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_338", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_342", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_339", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_344", "__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_343", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_322", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_321", "__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_323", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_310", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_315", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_311", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_314", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_312", "__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_313", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_225", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_224", "__ZN12LoRaWANStack23process_connected_stateEv__async_cb_226", "__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_214", "__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb", "__ZN12LoRaWANStack20process_transmissionEv__async_cb_234", "__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_78", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_77", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_61", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_60", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_62", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_59", "__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_63", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_17", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_18", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_19", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_20", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_21", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_22", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_24", "__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_23", "__ZN12LoRaWANStack7connectEv__async_cb", "__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb", "__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb", "__ZN12LoRaWANStack16remove_a_channelEh__async_cb", "__ZN12LoRaWANStack17drop_channel_listEv__async_cb", "__ZN12LoRaWANStack12stop_sendingEv__async_cb", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_372", "__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb", "__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb", "__ZN12LoRaWANStack8shutdownEv__async_cb", "__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv", "__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_334", "__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb", "__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb", "__ZN7LoRaMacD2Ev__async_cb", "__ZN7LoRaMacD2Ev__async_cb_305", "__ZN7LoRaMacD2Ev__async_cb_306", "__ZN7LoRaMacD2Ev__async_cb_307", "__ZN7LoRaMacD2Ev__async_cb_308", "__ZN7LoRaMacD2Ev__async_cb_309", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_126", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_128", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_125", "__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_127", "__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_151", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_153", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_152", "__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_2", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_5", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_3", "__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_4", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_42", "__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_41", "__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_94", "__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_95", "__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_93", "__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_92", "__ZN7LoRaMac16on_radio_tx_doneEj__async_cb", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_106", "__ZN7LoRaMac15open_rx2_windowEv__async_cb_105", "__ZN7LoRaMac15open_rx2_windowEv__async_cb", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_404", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_406", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_405", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_403", "__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_416", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_415", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_414", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb", "__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_413", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_407", "__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_408", "__ZN7LoRaMac24continue_joining_processEv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_374", "__ZN7LoRaMac21handle_retransmissionEv__async_cb_373", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_369", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_367", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_368", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb", "__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_366", "__ZN7LoRaMac11schedule_txEv__async_cb", "__ZN7LoRaMac11schedule_txEv__async_cb_402", "__ZN7LoRaMac11schedule_txEv__async_cb_401", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb", "__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_336", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_320", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_318", "__ZN7LoRaMac15open_rx1_windowEv__async_cb_319", "__ZN7LoRaMac15open_rx1_windowEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_350", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_348", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_347", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_346", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_349", "__ZN7LoRaMac13clear_tx_pipeEv__async_cb_241", "__ZN7LoRaMac13clear_tx_pipeEv__async_cb", "__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb", "__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb", "__ZN7LoRaMac15send_ongoing_txEv__async_cb_206", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_187", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_190", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_189", "__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_188", "__ZN7LoRaMac4joinEb__async_cb", "__ZN7LoRaMac4joinEb__async_cb_130", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_115", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_117", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_118", "__ZN7LoRaMac23on_backoff_timer_expiryEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_114", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb", "__ZN7LoRaMac15open_rx1_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_113", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_108", "__ZN7LoRaMac15open_rx2_windowEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_112", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_109", "__ZN7LoRaMac26on_ack_timeout_timer_eventEv", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_111", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_110", "__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_116", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb", "__ZN7LoRaMac10disconnectEv__async_cb_9", "__ZN7LoRaMac10disconnectEv__async_cb_8", "__ZN7LoRaMac10disconnectEv__async_cb_7", "__ZN7LoRaMac10disconnectEv__async_cb_6", "__ZN7LoRaMac10disconnectEv__async_cb", "__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb", "__ZN7LoRaMac19remove_channel_planEv__async_cb", "__ZN7LoRaMac21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb", "__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_351", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb", "__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_355", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_217", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_218", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_219", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_220", "__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_221", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb", "__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_180", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_159", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_158", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_157", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_156", "__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_160", "__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb", "__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_70", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_69", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_68", "__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_71", "__ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb", "__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_409", "__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_410", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_390", "__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_391", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_393", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_394", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_395", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_396", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_397", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_398", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_399", "__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_400", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_375", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_376", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_377", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_378", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_379", "__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_380", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb", "__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb_359", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb", "__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_333", "__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_239", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_240", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_171", "__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_172", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_154", "__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_155", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_131", "__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_132", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_122", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_123", "__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_124", "__ZN7LoRaPHY13get_radio_rngEv__async_cb", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_119", "__ZN7LoRaPHY13get_radio_rngEv__async_cb_120", "__ZN7LoRaPHY11handle_sendEPhh__async_cb", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_101", "__ZN7LoRaPHY11handle_sendEPhh__async_cb_102", "__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb", "__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_273", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_283", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_280", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_282", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_281", "__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_284", "__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb", "_mbedtls_aes_free__async_cb", "_mbedtls_aes_setkey_dec__async_cb", "_mbedtls_ccm_setkey__async_cb_412", "_mbedtls_ccm_setkey__async_cb_411", "_mbedtls_ccm_setkey__async_cb", "_mbedtls_ccm_free__async_cb_429", "_mbedtls_ccm_free__async_cb", "_mbedtls_cipher_free__async_cb_104", "_mbedtls_cipher_free__async_cb", "_mbedtls_cipher_free__async_cb_103", "_mbedtls_cipher_setup__async_cb", "_mbedtls_cipher_setkey__async_cb", "_mbedtls_cipher_setkey__async_cb_150", "_mbedtls_cipher_update__async_cb", "_mbedtls_cipher_update__async_cb_170", "_mbedtls_cipher_update__async_cb_167", "_mbedtls_cipher_update__async_cb_168", "_mbedtls_cipher_update__async_cb_169", "_ccm_aes_setkey_wrap__async_cb", "_ccm_ctx_free__async_cb", "_gcm_aes_setkey_wrap__async_cb", "_gcm_ctx_free__async_cb", "_aes_setkey_dec_wrap__async_cb", "_aes_ctx_free__async_cb", "_mbedtls_cipher_cmac_starts__async_cb_304", "_mbedtls_cipher_cmac_starts__async_cb", "_mbedtls_cipher_cmac_update__async_cb_266", "_mbedtls_cipher_cmac_update__async_cb_265", "_mbedtls_cipher_cmac_update__async_cb", "_mbedtls_cipher_cmac_finish__async_cb_330", "_mbedtls_cipher_cmac_finish__async_cb_329", "_mbedtls_cipher_cmac_finish__async_cb_328", "_mbedtls_cipher_cmac_finish__async_cb_332", "_mbedtls_cipher_cmac_finish__async_cb_327", "_mbedtls_cipher_cmac_finish__async_cb_331", "_mbedtls_cipher_cmac_finish__async_cb_326", "_mbedtls_cipher_cmac_finish__async_cb_325", "_mbedtls_cipher_cmac_finish__async_cb_324", "_mbedtls_cipher_cmac_finish__async_cb", "_mbedtls_gcm_setkey__async_cb_362", "_mbedtls_gcm_setkey__async_cb_361", "_mbedtls_gcm_setkey__async_cb_360", "_mbedtls_gcm_setkey__async_cb", "_mbedtls_gcm_update__async_cb", "_mbedtls_gcm_free__async_cb_370", "_mbedtls_gcm_free__async_cb", "_mbedtls_platform_zeroize__async_cb", "_ticker_set_handler__async_cb", "_initialize__async_cb", "_initialize__async_cb_423", "_initialize__async_cb_428", "_initialize__async_cb_427", "_initialize__async_cb_424", "_initialize__async_cb_425", "_initialize__async_cb_426", "_schedule_interrupt__async_cb", "_schedule_interrupt__async_cb_417", "_schedule_interrupt__async_cb_418", "_schedule_interrupt__async_cb_419", "_schedule_interrupt__async_cb_420", "_schedule_interrupt__async_cb_421", "_schedule_interrupt__async_cb_422", "_ticker_remove_event__async_cb", "_ticker_read_us__async_cb_67", "_ticker_read_us__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_39", "_mbed_die__async_cb_38", "_mbed_die__async_cb_37", "_mbed_die__async_cb_36", "_mbed_die__async_cb_35", "_mbed_die__async_cb_34", "_mbed_die__async_cb_33", "_mbed_die__async_cb_32", "_mbed_die__async_cb_31", "_mbed_die__async_cb_30", "_mbed_die__async_cb_29", "_mbed_die__async_cb_28", "_mbed_die__async_cb_27", "_mbed_die__async_cb_26", "_mbed_die__async_cb_25", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_135", "_mbed_error_vfprintf__async_cb_134", "_handle_interrupt_in__async_cb", "_serial_putc__async_cb_238", "_serial_putc__async_cb", "__ZN4mbed6TickerD2Ev__async_cb", "__ZN4mbed6TickerD2Ev__async_cb_260", "__ZN4mbed6TickerD0Ev__async_cb", "__ZN4mbed6TickerD0Ev__async_cb_353", "__ZN4mbed6Ticker7handlerEv__async_cb", "_invoke_ticker__async_cb_356", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "__GLOBAL__sub_I_main_cpp__async_cb", "_main__async_cb_87", "_main__async_cb_86", "_main__async_cb_85", "_main__async_cb_91", "__ZN6events5EventIFvvEE10event_dtorIPS1_EEvPNS2_5eventE", "_main__async_cb_90", "_main__async_cb", "_main__async_cb_79", "_main__async_cb_89", "__ZL18lora_event_handler11lora_events", "_main__async_cb_80", "_main__async_cb_81", "_main__async_cb_82", "_main__async_cb_84", "_main__async_cb_83", "_main__async_cb_88", "__ZL12send_messagev__async_cb", "__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb_76", "__ZN6events10EventQueue13function_dtorINS0_9context00IPFvvEEEEEvPv", "__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv", "__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_16", "__ZL18lora_event_handler11lora_events__async_cb_15", "__ZL18lora_event_handler11lora_events__async_cb_14", "__ZL18lora_event_handler11lora_events__async_cb_13", "__ZL18lora_event_handler11lora_events__async_cb", "__ZL18lora_event_handler11lora_events__async_cb_12", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb", "__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb_121", "__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb_207", "__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv__async_cb", "_putc__async_cb_107", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_210", "_fflush__async_cb_209", "_fflush__async_cb_211", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_212", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_putchar__async_cb", "_fputc__async_cb_208", "_fputc__async_cb", "_puts__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_231", "_abort_message__async_cb", "_abort_message__async_cb_179", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_242", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_363", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_133", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_232", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_194", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_193", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_192", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_191", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_213", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16SX1276_LoRaRadio10init_radioEP12radio_events", "__ZN16SX1276_LoRaRadio7receiveEj", "__ZN16SX1276_LoRaRadio11set_channelEj", "__ZN16SX1276_LoRaRadio18set_public_networkEb", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv", "__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb", "__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveIN6events5EventIS1_EEEEvPvPKv", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_", "__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv", "__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event", "__ZN12LoRaWANStack25process_reception_timeoutEb"];
var debug_table_viii = ["0", "__ZN16SX1276_LoRaRadio4sendEPhh", "__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh", "__ZN7LoRaPHY13apply_cf_listEPKhh", "__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj", "_add_pkcs_padding", "0", "0"];
var debug_table_viiii = ["0", "__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat", "__ZN7LoRaPHY16set_last_tx_doneEhbj", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa", "__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa", "__ZN12LoRaWANStack17process_receptionEPKhtsa"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
var debug_table_viiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj"];
var debug_table_viiiiiiiiiiiiiii = ["0", "__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_iiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiiiiiiiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiiiiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiiiiiiiiiii: " + debug_table_viiiiiiiiiiiiii[x] + "  v: " + debug_table_v[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  iii: " + debug_table_iii[x] + "  iiiiiiii: " + debug_table_iiiiiiii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    return Module["dynCall_iiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14) {
  try {
    Module["dynCall_viiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15) {
  try {
    Module["dynCall_viiiiiiiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9,a10,a11,a12,a13,a14,a15);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_iiiiiiii": nullFunc_iiiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_viiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiii, "nullFunc_viiiiiiiiiiiiiii": nullFunc_viiiiiiiiiiiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_iiiiiiii": invoke_iiiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_viiiiiiiiiiiiii": invoke_viiiiiiiiiiiiii, "invoke_viiiiiiiiiiiiiii": invoke_viiiiiiiiiiiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_emscripten_asm_const_iiiiiii": _emscripten_asm_const_iiiiiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_ceil_f64": _llvm_ceil_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_cond_timedwait": _pthread_cond_timedwait, "_pthread_cond_wait": _pthread_cond_wait, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "_sleep_manager_lock_deep_sleep_internal": _sleep_manager_lock_deep_sleep_internal, "_sleep_manager_unlock_deep_sleep_internal": _sleep_manager_unlock_deep_sleep_internal, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_iiiiiiii=env.nullFunc_iiiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_viiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiii;
  var nullFunc_viiiiiiiiiiiiiii=env.nullFunc_viiiiiiiiiiiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_iiiiiiii=env.invoke_iiiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_viiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiii;
  var invoke_viiiiiiiiiiiiiii=env.invoke_viiiiiiiiiiiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _emscripten_asm_const_iiiiiii=env._emscripten_asm_const_iiiiiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_ceil_f64=env._llvm_ceil_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_cond_timedwait=env._pthread_cond_timedwait;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var _sleep_manager_lock_deep_sleep_internal=env._sleep_manager_lock_deep_sleep_internal;
  var _sleep_manager_unlock_deep_sleep_internal=env._sleep_manager_unlock_deep_sleep_internal;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_221($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $665 = 0, $666 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11271
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11273
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11275
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11277
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11279
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11281
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11283
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11285
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11287
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11289
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11291
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11293
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11295
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11297
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11299
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11301
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11303
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11305
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11307
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11309
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 11311
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 11313
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 11315
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 11317
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 11319
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 11321
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 11323
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 11325
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 11327
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 11329
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 11331
 $62 = HEAP8[$0 + 124 >> 0] | 0; //@line 11333
 $64 = HEAP32[$0 + 128 >> 2] | 0; //@line 11335
 $66 = HEAP8[$0 + 132 >> 0] | 0; //@line 11337
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 11339
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 11341
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 11343
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 11345
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 11347
 $78 = HEAP8[$0 + 156 >> 0] | 0; //@line 11349
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 11351
 $82 = HEAP8[$0 + 164 >> 0] | 0; //@line 11353
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 11355
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 11357
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 11359
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 11361
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 11363
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 11365
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 11367
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 11369
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 11371
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 11373
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 11375
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 11377
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 11379
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 11381
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 11383
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 11385
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 11387
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 11389
 $665 = HEAP8[$92 >> 0] | 0; //@line 11393
 $666 = $665 & 255; //@line 11394
 if ((128 - (HEAPU8[$60 >> 0] | 0) | 0) > ($666 | 0)) {
  HEAP8[$72 + 4 + $666 >> 0] = 10; //@line 11399
  HEAP8[$92 >> 0] = $665 + 2 << 24 >> 24; //@line 11401
  HEAP8[($665 + 1 & 255) + ($72 + 4) >> 0] = $AsyncRetVal; //@line 11404
  HEAP8[$112 >> 0] = 1; //@line 11405
  HEAP8[$86 >> 0] = 1; //@line 11406
  $$0$be = $66; //@line 11407
  $$0107$be = 0; //@line 11407
 } else {
  $$0$be = $66; //@line 11409
  $$0107$be = -1010; //@line 11409
 }
 L4 : while (1) {
  if (($$0$be & 255) >= ($62 & 255)) {
   label = 32; //@line 11414
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 11418
  switch (HEAP8[$68 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 11423
    break L4;
    break;
   }
  case 5:
   {
    label = 9; //@line 11428
    break L4;
    break;
   }
  case 7:
   {
    label = 18; //@line 11433
    break L4;
    break;
   }
  case 9:
   {
    label = 24; //@line 11438
    break L4;
    break;
   }
  case 10:
   {
    label = 27; //@line 11443
    break L4;
    break;
   }
  case 2:
   {
    HEAP32[$106 >> 2] = 0; //@line 11448
    HEAP8[$64 >> 0] = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 11453
    HEAP8[$80 >> 0] = HEAP8[$68 + ($$0$be + 2 & 255) >> 0] | 0; //@line 11458
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 11459
    continue L4;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 11464
    $207 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 11467
    HEAP8[$40 >> 0] = $207; //@line 11468
    HEAP16[$36 >> 1] = 1 << ($207 & 255); //@line 11472
    $214 = HEAP8[$92 >> 0] | 0; //@line 11476
    $215 = $214 & 255; //@line 11477
    if ((128 - (HEAPU8[$60 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 11480
     $$0107$be = -1010; //@line 11480
     continue L4;
    }
    HEAP8[$92 >> 0] = $214 + 1 << 24 >> 24; //@line 11485
    HEAP8[$72 + 4 + $215 >> 0] = 4; //@line 11486
    HEAP8[$86 >> 0] = 1; //@line 11487
    $$0$be = $204; //@line 11488
    $$0107$be = 0; //@line 11488
    continue L4;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$110 >> 2] | 0; //@line 11493
    if ($311 | 0) {
     label = 13; //@line 11496
     break L4;
    }
    $377 = HEAP8[$92 >> 0] | 0; //@line 11502
    $378 = $377 & 255; //@line 11503
    if ((128 - (HEAPU8[$60 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 11507
     $$0107$be = -1010; //@line 11507
     continue L4;
    }
    HEAP8[$72 + 4 + $378 >> 0] = 6; //@line 11512
    HEAP8[($377 + 1 & 255) + ($72 + 4) >> 0] = -1; //@line 11516
    HEAP8[$92 >> 0] = $377 + 3 << 24 >> 24; //@line 11518
    HEAP8[($377 + 2 & 255) + ($72 + 4) >> 0] = $82; //@line 11521
    HEAP8[$86 >> 0] = 1; //@line 11522
    $$0$be = $119; //@line 11523
    $$0107$be = 0; //@line 11523
    continue L4;
    break;
   }
  case 8:
   {
    $481 = $$0$be + 2 << 24 >> 24; //@line 11528
    $485 = HEAP8[$68 + ($119 & 255) >> 0] & 15; //@line 11532
    $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 11537
    HEAP32[$14 >> 2] = $489; //@line 11538
    HEAP32[$4 >> 2] = $489 + 1e3; //@line 11540
    $494 = HEAP8[$92 >> 0] | 0; //@line 11544
    $495 = $494 & 255; //@line 11545
    if ((128 - (HEAPU8[$60 >> 0] | 0) | 0) <= ($495 | 0)) {
     $$0$be = $481; //@line 11548
     $$0107$be = -1010; //@line 11548
     continue L4;
    }
    HEAP8[$92 >> 0] = $494 + 1 << 24 >> 24; //@line 11553
    HEAP8[$72 + 4 + $495 >> 0] = 8; //@line 11554
    HEAP8[$112 >> 0] = 1; //@line 11555
    HEAP8[$86 >> 0] = 1; //@line 11556
    $$0$be = $481; //@line 11557
    $$0107$be = 0; //@line 11557
    continue L4;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 11562
    $$0107$be = -1013; //@line 11562
    continue L4;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$76 >> 0] = 0; //@line 11568
  HEAP8[$44 >> 0] = 0; //@line 11569
  HEAP8[$22 >> 0] = 0; //@line 11570
  HEAP8[$26 >> 0] = 0; //@line 11571
  $130 = $119 & 255; //@line 11572
  $131 = $130 + -1 | 0; //@line 11573
  HEAP32[$84 >> 2] = $68 + $131; //@line 11575
  HEAP8[$38 >> 0] = $32 - $131; //@line 11578
  HEAP8[$52 >> 0] = HEAP8[$46 >> 0] | 0; //@line 11580
  HEAP8[$6 >> 0] = HEAP8[$56 >> 0] | 0; //@line 11582
  HEAP8[$18 >> 0] = HEAP8[$12 >> 0] | 0; //@line 11584
  HEAP8[$98 >> 0] = HEAP8[$24 >> 0] | 0; //@line 11586
  HEAP8[$104 >> 0] = HEAP8[$114 >> 0] | 0; //@line 11588
  $142 = HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] | 0; //@line 11591
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 11592
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($94, $88, $76, $44, $22, $26) | 0; //@line 11593
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 11596
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 11597
   HEAP32[$144 >> 2] = $2; //@line 11598
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 11599
   HEAP32[$145 >> 2] = $4; //@line 11600
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 11601
   HEAP32[$146 >> 2] = $6; //@line 11602
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 11603
   HEAP32[$147 >> 2] = $8; //@line 11604
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 11605
   HEAP32[$148 >> 2] = $10; //@line 11606
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 11607
   HEAP32[$149 >> 2] = $12; //@line 11608
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 11609
   HEAP32[$150 >> 2] = $14; //@line 11610
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 11611
   HEAP32[$151 >> 2] = $16; //@line 11612
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 11613
   HEAP32[$152 >> 2] = $18; //@line 11614
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 11615
   HEAP32[$153 >> 2] = $20; //@line 11616
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 11617
   HEAP32[$154 >> 2] = $22; //@line 11618
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 11619
   HEAP32[$155 >> 2] = $24; //@line 11620
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 11621
   HEAP32[$156 >> 2] = $26; //@line 11622
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 11623
   HEAP32[$157 >> 2] = $28; //@line 11624
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 11625
   HEAP32[$158 >> 2] = $30; //@line 11626
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 11627
   HEAP32[$159 >> 2] = $32; //@line 11628
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 11629
   HEAP32[$160 >> 2] = $34; //@line 11630
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 11631
   HEAP32[$161 >> 2] = $36; //@line 11632
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 11633
   HEAP32[$162 >> 2] = $38; //@line 11634
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 11635
   HEAP32[$163 >> 2] = $40; //@line 11636
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 11637
   HEAP32[$164 >> 2] = $42; //@line 11638
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 11639
   HEAP32[$165 >> 2] = $44; //@line 11640
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 11641
   HEAP32[$166 >> 2] = $46; //@line 11642
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 11643
   HEAP32[$167 >> 2] = $130; //@line 11644
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 11645
   HEAP32[$168 >> 2] = $48; //@line 11646
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 11647
   HEAP32[$169 >> 2] = $50; //@line 11648
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 11649
   HEAP32[$170 >> 2] = $52; //@line 11650
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 11651
   HEAP32[$171 >> 2] = $54; //@line 11652
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 11653
   HEAP32[$172 >> 2] = $56; //@line 11654
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 11655
   HEAP32[$173 >> 2] = $58; //@line 11656
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 11657
   HEAP32[$174 >> 2] = $60; //@line 11658
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 11659
   HEAP8[$175 >> 0] = $62; //@line 11660
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 11661
   HEAP32[$176 >> 2] = $64; //@line 11662
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 11663
   HEAP32[$177 >> 2] = $68; //@line 11664
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 11665
   HEAP32[$178 >> 2] = $70; //@line 11666
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 11667
   HEAP32[$179 >> 2] = $72; //@line 11668
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 11669
   HEAP32[$180 >> 2] = $74; //@line 11670
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 11671
   HEAP32[$181 >> 2] = $76; //@line 11672
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 11673
   HEAP8[$182 >> 0] = $78; //@line 11674
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 11675
   HEAP32[$183 >> 2] = $80; //@line 11676
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 11677
   HEAP8[$184 >> 0] = $82; //@line 11678
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 11679
   HEAP32[$185 >> 2] = $84; //@line 11680
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 11681
   HEAP32[$186 >> 2] = $86; //@line 11682
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 11683
   HEAP32[$187 >> 2] = $88; //@line 11684
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 11685
   HEAP32[$188 >> 2] = $90; //@line 11686
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 11687
   HEAP32[$189 >> 2] = $92; //@line 11688
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 11689
   HEAP32[$190 >> 2] = $94; //@line 11690
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 11691
   HEAP32[$191 >> 2] = $96; //@line 11692
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 11693
   HEAP32[$192 >> 2] = $98; //@line 11694
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 11695
   HEAP32[$193 >> 2] = $100; //@line 11696
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 11697
   HEAP32[$194 >> 2] = $$0107$be; //@line 11698
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 11699
   HEAP32[$195 >> 2] = $102; //@line 11700
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 11701
   HEAP32[$196 >> 2] = $104; //@line 11702
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 11703
   HEAP32[$197 >> 2] = $106; //@line 11704
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 11705
   HEAP32[$198 >> 2] = $108; //@line 11706
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 11707
   HEAP32[$199 >> 2] = $110; //@line 11708
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 11709
   HEAP32[$200 >> 2] = $112; //@line 11710
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 11711
   HEAP32[$201 >> 2] = $114; //@line 11712
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 11713
   HEAP32[$202 >> 2] = $116; //@line 11714
   sp = STACKTOP; //@line 11715
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 11719
  ___async_unwind = 0; //@line 11720
  HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 11721
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 11722
  HEAP32[$144 >> 2] = $2; //@line 11723
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 11724
  HEAP32[$145 >> 2] = $4; //@line 11725
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 11726
  HEAP32[$146 >> 2] = $6; //@line 11727
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 11728
  HEAP32[$147 >> 2] = $8; //@line 11729
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 11730
  HEAP32[$148 >> 2] = $10; //@line 11731
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 11732
  HEAP32[$149 >> 2] = $12; //@line 11733
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 11734
  HEAP32[$150 >> 2] = $14; //@line 11735
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 11736
  HEAP32[$151 >> 2] = $16; //@line 11737
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 11738
  HEAP32[$152 >> 2] = $18; //@line 11739
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 11740
  HEAP32[$153 >> 2] = $20; //@line 11741
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 11742
  HEAP32[$154 >> 2] = $22; //@line 11743
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 11744
  HEAP32[$155 >> 2] = $24; //@line 11745
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 11746
  HEAP32[$156 >> 2] = $26; //@line 11747
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 11748
  HEAP32[$157 >> 2] = $28; //@line 11749
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 11750
  HEAP32[$158 >> 2] = $30; //@line 11751
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 11752
  HEAP32[$159 >> 2] = $32; //@line 11753
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 11754
  HEAP32[$160 >> 2] = $34; //@line 11755
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 11756
  HEAP32[$161 >> 2] = $36; //@line 11757
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 11758
  HEAP32[$162 >> 2] = $38; //@line 11759
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 11760
  HEAP32[$163 >> 2] = $40; //@line 11761
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 11762
  HEAP32[$164 >> 2] = $42; //@line 11763
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 11764
  HEAP32[$165 >> 2] = $44; //@line 11765
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 11766
  HEAP32[$166 >> 2] = $46; //@line 11767
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 11768
  HEAP32[$167 >> 2] = $130; //@line 11769
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 11770
  HEAP32[$168 >> 2] = $48; //@line 11771
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 11772
  HEAP32[$169 >> 2] = $50; //@line 11773
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 11774
  HEAP32[$170 >> 2] = $52; //@line 11775
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 11776
  HEAP32[$171 >> 2] = $54; //@line 11777
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 11778
  HEAP32[$172 >> 2] = $56; //@line 11779
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 11780
  HEAP32[$173 >> 2] = $58; //@line 11781
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 11782
  HEAP32[$174 >> 2] = $60; //@line 11783
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 11784
  HEAP8[$175 >> 0] = $62; //@line 11785
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 11786
  HEAP32[$176 >> 2] = $64; //@line 11787
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 11788
  HEAP32[$177 >> 2] = $68; //@line 11789
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 11790
  HEAP32[$178 >> 2] = $70; //@line 11791
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 11792
  HEAP32[$179 >> 2] = $72; //@line 11793
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 11794
  HEAP32[$180 >> 2] = $74; //@line 11795
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 11796
  HEAP32[$181 >> 2] = $76; //@line 11797
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 11798
  HEAP8[$182 >> 0] = $78; //@line 11799
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 11800
  HEAP32[$183 >> 2] = $80; //@line 11801
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 11802
  HEAP8[$184 >> 0] = $82; //@line 11803
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 11804
  HEAP32[$185 >> 2] = $84; //@line 11805
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 11806
  HEAP32[$186 >> 2] = $86; //@line 11807
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 11808
  HEAP32[$187 >> 2] = $88; //@line 11809
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 11810
  HEAP32[$188 >> 2] = $90; //@line 11811
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 11812
  HEAP32[$189 >> 2] = $92; //@line 11813
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 11814
  HEAP32[$190 >> 2] = $94; //@line 11815
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 11816
  HEAP32[$191 >> 2] = $96; //@line 11817
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 11818
  HEAP32[$192 >> 2] = $98; //@line 11819
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 11820
  HEAP32[$193 >> 2] = $100; //@line 11821
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 11822
  HEAP32[$194 >> 2] = $$0107$be; //@line 11823
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 11824
  HEAP32[$195 >> 2] = $102; //@line 11825
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 11826
  HEAP32[$196 >> 2] = $104; //@line 11827
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 11828
  HEAP32[$197 >> 2] = $106; //@line 11829
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 11830
  HEAP32[$198 >> 2] = $108; //@line 11831
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 11832
  HEAP32[$199 >> 2] = $110; //@line 11833
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 11834
  HEAP32[$200 >> 2] = $112; //@line 11835
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 11836
  HEAP32[$201 >> 2] = $114; //@line 11837
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 11838
  HEAP32[$202 >> 2] = $116; //@line 11839
  sp = STACKTOP; //@line 11840
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 11846
  HEAP8[$50 >> 0] = ($221 & 255) >>> 4 & 7; //@line 11851
  HEAP8[$58 >> 0] = $221 & 15; //@line 11853
  $240 = $$0$be + 5 << 24 >> 24; //@line 11867
  HEAP32[$16 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 11875
  $250 = HEAP32[(HEAP32[$8 >> 2] | 0) + 40 >> 2] | 0; //@line 11878
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 11879
  $251 = FUNCTION_TABLE_iii[$250 & 31]($94, $2) | 0; //@line 11880
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 11883
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 11884
   HEAP32[$252 >> 2] = $2; //@line 11885
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 11886
   HEAP32[$253 >> 2] = $4; //@line 11887
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 11888
   HEAP32[$254 >> 2] = $6; //@line 11889
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 11890
   HEAP32[$255 >> 2] = $8; //@line 11891
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 11892
   HEAP32[$256 >> 2] = $10; //@line 11893
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 11894
   HEAP32[$257 >> 2] = $12; //@line 11895
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 11896
   HEAP32[$258 >> 2] = $14; //@line 11897
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 11898
   HEAP32[$259 >> 2] = $16; //@line 11899
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 11900
   HEAP32[$260 >> 2] = $18; //@line 11901
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 11902
   HEAP32[$261 >> 2] = $20; //@line 11903
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 11904
   HEAP32[$262 >> 2] = $22; //@line 11905
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 11906
   HEAP32[$263 >> 2] = $24; //@line 11907
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 11908
   HEAP32[$264 >> 2] = $26; //@line 11909
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 11910
   HEAP32[$265 >> 2] = $28; //@line 11911
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 11912
   HEAP32[$266 >> 2] = $30; //@line 11913
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 11914
   HEAP32[$267 >> 2] = $32; //@line 11915
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 11916
   HEAP32[$268 >> 2] = $34; //@line 11917
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 11918
   HEAP32[$269 >> 2] = $36; //@line 11919
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 11920
   HEAP32[$270 >> 2] = $38; //@line 11921
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 11922
   HEAP32[$271 >> 2] = $40; //@line 11923
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 11924
   HEAP8[$272 >> 0] = $240; //@line 11925
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 11926
   HEAP32[$273 >> 2] = $42; //@line 11927
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 11928
   HEAP32[$274 >> 2] = $44; //@line 11929
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 11930
   HEAP32[$275 >> 2] = $46; //@line 11931
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 11932
   HEAP32[$276 >> 2] = $48; //@line 11933
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 11934
   HEAP32[$277 >> 2] = $50; //@line 11935
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 11936
   HEAP32[$278 >> 2] = $52; //@line 11937
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 11938
   HEAP32[$279 >> 2] = $54; //@line 11939
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 11940
   HEAP32[$280 >> 2] = $56; //@line 11941
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 11942
   HEAP32[$281 >> 2] = $58; //@line 11943
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 11944
   HEAP32[$282 >> 2] = $60; //@line 11945
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 11946
   HEAP8[$283 >> 0] = $62; //@line 11947
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 11948
   HEAP32[$284 >> 2] = $64; //@line 11949
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 11950
   HEAP32[$285 >> 2] = $68; //@line 11951
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 11952
   HEAP32[$286 >> 2] = $70; //@line 11953
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 11954
   HEAP32[$287 >> 2] = $72; //@line 11955
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 11956
   HEAP32[$288 >> 2] = $74; //@line 11957
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 11958
   HEAP32[$289 >> 2] = $76; //@line 11959
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 11960
   HEAP8[$290 >> 0] = $78; //@line 11961
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 11962
   HEAP32[$291 >> 2] = $80; //@line 11963
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 11964
   HEAP8[$292 >> 0] = $82; //@line 11965
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 11966
   HEAP32[$293 >> 2] = $84; //@line 11967
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 11968
   HEAP32[$294 >> 2] = $86; //@line 11969
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 11970
   HEAP32[$295 >> 2] = $88; //@line 11971
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 11972
   HEAP32[$296 >> 2] = $90; //@line 11973
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 11974
   HEAP32[$297 >> 2] = $92; //@line 11975
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 11976
   HEAP32[$298 >> 2] = $94; //@line 11977
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 11978
   HEAP32[$299 >> 2] = $96; //@line 11979
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 11980
   HEAP32[$300 >> 2] = $98; //@line 11981
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 11982
   HEAP32[$301 >> 2] = $100; //@line 11983
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 11984
   HEAP32[$302 >> 2] = $102; //@line 11985
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 11986
   HEAP32[$303 >> 2] = $104; //@line 11987
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 11988
   HEAP32[$304 >> 2] = $106; //@line 11989
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 11990
   HEAP32[$305 >> 2] = $108; //@line 11991
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 11992
   HEAP32[$306 >> 2] = $110; //@line 11993
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 11994
   HEAP32[$307 >> 2] = $112; //@line 11995
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 11996
   HEAP32[$308 >> 2] = $114; //@line 11997
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 11998
   HEAP32[$309 >> 2] = $116; //@line 11999
   sp = STACKTOP; //@line 12000
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 12004
  ___async_unwind = 0; //@line 12005
  HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 12006
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 12007
  HEAP32[$252 >> 2] = $2; //@line 12008
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 12009
  HEAP32[$253 >> 2] = $4; //@line 12010
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 12011
  HEAP32[$254 >> 2] = $6; //@line 12012
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 12013
  HEAP32[$255 >> 2] = $8; //@line 12014
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 12015
  HEAP32[$256 >> 2] = $10; //@line 12016
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 12017
  HEAP32[$257 >> 2] = $12; //@line 12018
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 12019
  HEAP32[$258 >> 2] = $14; //@line 12020
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 12021
  HEAP32[$259 >> 2] = $16; //@line 12022
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 12023
  HEAP32[$260 >> 2] = $18; //@line 12024
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 12025
  HEAP32[$261 >> 2] = $20; //@line 12026
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 12027
  HEAP32[$262 >> 2] = $22; //@line 12028
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 12029
  HEAP32[$263 >> 2] = $24; //@line 12030
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 12031
  HEAP32[$264 >> 2] = $26; //@line 12032
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 12033
  HEAP32[$265 >> 2] = $28; //@line 12034
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 12035
  HEAP32[$266 >> 2] = $30; //@line 12036
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 12037
  HEAP32[$267 >> 2] = $32; //@line 12038
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 12039
  HEAP32[$268 >> 2] = $34; //@line 12040
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 12041
  HEAP32[$269 >> 2] = $36; //@line 12042
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 12043
  HEAP32[$270 >> 2] = $38; //@line 12044
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 12045
  HEAP32[$271 >> 2] = $40; //@line 12046
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 12047
  HEAP8[$272 >> 0] = $240; //@line 12048
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 12049
  HEAP32[$273 >> 2] = $42; //@line 12050
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 12051
  HEAP32[$274 >> 2] = $44; //@line 12052
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 12053
  HEAP32[$275 >> 2] = $46; //@line 12054
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 12055
  HEAP32[$276 >> 2] = $48; //@line 12056
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 12057
  HEAP32[$277 >> 2] = $50; //@line 12058
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 12059
  HEAP32[$278 >> 2] = $52; //@line 12060
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 12061
  HEAP32[$279 >> 2] = $54; //@line 12062
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 12063
  HEAP32[$280 >> 2] = $56; //@line 12064
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 12065
  HEAP32[$281 >> 2] = $58; //@line 12066
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 12067
  HEAP32[$282 >> 2] = $60; //@line 12068
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 12069
  HEAP8[$283 >> 0] = $62; //@line 12070
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 12071
  HEAP32[$284 >> 2] = $64; //@line 12072
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 12073
  HEAP32[$285 >> 2] = $68; //@line 12074
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 12075
  HEAP32[$286 >> 2] = $70; //@line 12076
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 12077
  HEAP32[$287 >> 2] = $72; //@line 12078
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 12079
  HEAP32[$288 >> 2] = $74; //@line 12080
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 12081
  HEAP32[$289 >> 2] = $76; //@line 12082
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 12083
  HEAP8[$290 >> 0] = $78; //@line 12084
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 12085
  HEAP32[$291 >> 2] = $80; //@line 12086
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 12087
  HEAP8[$292 >> 0] = $82; //@line 12088
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 12089
  HEAP32[$293 >> 2] = $84; //@line 12090
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 12091
  HEAP32[$294 >> 2] = $86; //@line 12092
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 12093
  HEAP32[$295 >> 2] = $88; //@line 12094
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 12095
  HEAP32[$296 >> 2] = $90; //@line 12096
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 12097
  HEAP32[$297 >> 2] = $92; //@line 12098
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 12099
  HEAP32[$298 >> 2] = $94; //@line 12100
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 12101
  HEAP32[$299 >> 2] = $96; //@line 12102
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 12103
  HEAP32[$300 >> 2] = $98; //@line 12104
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 12105
  HEAP32[$301 >> 2] = $100; //@line 12106
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 12107
  HEAP32[$302 >> 2] = $102; //@line 12108
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 12109
  HEAP32[$303 >> 2] = $104; //@line 12110
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 12111
  HEAP32[$304 >> 2] = $106; //@line 12112
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 12113
  HEAP32[$305 >> 2] = $108; //@line 12114
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 12115
  HEAP32[$306 >> 2] = $110; //@line 12116
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 12117
  HEAP32[$307 >> 2] = $112; //@line 12118
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 12119
  HEAP32[$308 >> 2] = $114; //@line 12120
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 12121
  HEAP32[$309 >> 2] = $116; //@line 12122
  sp = STACKTOP; //@line 12123
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 12127
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 12128
  $314 = FUNCTION_TABLE_ii[$313 & 15]($96) | 0; //@line 12129
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 12132
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 12133
   HEAP32[$315 >> 2] = $2; //@line 12134
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 12135
   HEAP32[$316 >> 2] = $4; //@line 12136
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 12137
   HEAP32[$317 >> 2] = $6; //@line 12138
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 12139
   HEAP32[$318 >> 2] = $8; //@line 12140
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 12141
   HEAP32[$319 >> 2] = $10; //@line 12142
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 12143
   HEAP32[$320 >> 2] = $12; //@line 12144
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 12145
   HEAP32[$321 >> 2] = $14; //@line 12146
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 12147
   HEAP32[$322 >> 2] = $16; //@line 12148
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 12149
   HEAP32[$323 >> 2] = $18; //@line 12150
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 12151
   HEAP32[$324 >> 2] = $20; //@line 12152
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 12153
   HEAP32[$325 >> 2] = $22; //@line 12154
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 12155
   HEAP32[$326 >> 2] = $24; //@line 12156
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 12157
   HEAP32[$327 >> 2] = $26; //@line 12158
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 12159
   HEAP32[$328 >> 2] = $28; //@line 12160
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 12161
   HEAP32[$329 >> 2] = $30; //@line 12162
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 12163
   HEAP32[$330 >> 2] = $32; //@line 12164
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 12165
   HEAP32[$331 >> 2] = $34; //@line 12166
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 12167
   HEAP32[$332 >> 2] = $36; //@line 12168
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 12169
   HEAP32[$333 >> 2] = $38; //@line 12170
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 12171
   HEAP32[$334 >> 2] = $40; //@line 12172
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 12173
   HEAP32[$335 >> 2] = $42; //@line 12174
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 12175
   HEAP32[$336 >> 2] = $44; //@line 12176
   $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 12177
   HEAP32[$337 >> 2] = $46; //@line 12178
   $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 12179
   HEAP32[$338 >> 2] = $48; //@line 12180
   $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 12181
   HEAP32[$339 >> 2] = $50; //@line 12182
   $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 12183
   HEAP32[$340 >> 2] = $52; //@line 12184
   $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 12185
   HEAP8[$341 >> 0] = $119; //@line 12186
   $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 12187
   HEAP32[$342 >> 2] = $54; //@line 12188
   $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 12189
   HEAP32[$343 >> 2] = $56; //@line 12190
   $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 12191
   HEAP32[$344 >> 2] = $58; //@line 12192
   $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 12193
   HEAP32[$345 >> 2] = $60; //@line 12194
   $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 12195
   HEAP8[$346 >> 0] = $62; //@line 12196
   $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 12197
   HEAP32[$347 >> 2] = $64; //@line 12198
   $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 12199
   HEAP32[$348 >> 2] = $68; //@line 12200
   $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 12201
   HEAP32[$349 >> 2] = $70; //@line 12202
   $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 12203
   HEAP32[$350 >> 2] = $72; //@line 12204
   $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 12205
   HEAP32[$351 >> 2] = $74; //@line 12206
   $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 12207
   HEAP32[$352 >> 2] = $76; //@line 12208
   $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 12209
   HEAP8[$353 >> 0] = $78; //@line 12210
   $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 12211
   HEAP32[$354 >> 2] = $80; //@line 12212
   $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 12213
   HEAP8[$355 >> 0] = $82; //@line 12214
   $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 12215
   HEAP32[$356 >> 2] = $84; //@line 12216
   $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 12217
   HEAP32[$357 >> 2] = $86; //@line 12218
   $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 12219
   HEAP32[$358 >> 2] = $88; //@line 12220
   $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 12221
   HEAP32[$359 >> 2] = $90; //@line 12222
   $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 12223
   HEAP32[$360 >> 2] = $92; //@line 12224
   $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 12225
   HEAP32[$361 >> 2] = $94; //@line 12226
   $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 12227
   HEAP32[$362 >> 2] = $96; //@line 12228
   $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 12229
   HEAP32[$363 >> 2] = $98; //@line 12230
   $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 12231
   HEAP32[$364 >> 2] = $100; //@line 12232
   $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 12233
   HEAP32[$365 >> 2] = $102; //@line 12234
   $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 12235
   HEAP32[$366 >> 2] = $104; //@line 12236
   $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 12237
   HEAP32[$367 >> 2] = $106; //@line 12238
   $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 12239
   HEAP32[$368 >> 2] = $108; //@line 12240
   $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 12241
   HEAP32[$369 >> 2] = $110; //@line 12242
   $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 12243
   HEAP32[$370 >> 2] = $112; //@line 12244
   $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 12245
   HEAP32[$371 >> 2] = $114; //@line 12246
   $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 12247
   HEAP32[$372 >> 2] = $116; //@line 12248
   sp = STACKTOP; //@line 12249
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 12253
  ___async_unwind = 0; //@line 12254
  HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 12255
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 12256
  HEAP32[$315 >> 2] = $2; //@line 12257
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 12258
  HEAP32[$316 >> 2] = $4; //@line 12259
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 12260
  HEAP32[$317 >> 2] = $6; //@line 12261
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 12262
  HEAP32[$318 >> 2] = $8; //@line 12263
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 12264
  HEAP32[$319 >> 2] = $10; //@line 12265
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 12266
  HEAP32[$320 >> 2] = $12; //@line 12267
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 12268
  HEAP32[$321 >> 2] = $14; //@line 12269
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 12270
  HEAP32[$322 >> 2] = $16; //@line 12271
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 12272
  HEAP32[$323 >> 2] = $18; //@line 12273
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 12274
  HEAP32[$324 >> 2] = $20; //@line 12275
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 12276
  HEAP32[$325 >> 2] = $22; //@line 12277
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 12278
  HEAP32[$326 >> 2] = $24; //@line 12279
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 12280
  HEAP32[$327 >> 2] = $26; //@line 12281
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 12282
  HEAP32[$328 >> 2] = $28; //@line 12283
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 12284
  HEAP32[$329 >> 2] = $30; //@line 12285
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 12286
  HEAP32[$330 >> 2] = $32; //@line 12287
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 12288
  HEAP32[$331 >> 2] = $34; //@line 12289
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 12290
  HEAP32[$332 >> 2] = $36; //@line 12291
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 12292
  HEAP32[$333 >> 2] = $38; //@line 12293
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 12294
  HEAP32[$334 >> 2] = $40; //@line 12295
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 12296
  HEAP32[$335 >> 2] = $42; //@line 12297
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 12298
  HEAP32[$336 >> 2] = $44; //@line 12299
  $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 12300
  HEAP32[$337 >> 2] = $46; //@line 12301
  $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 12302
  HEAP32[$338 >> 2] = $48; //@line 12303
  $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 12304
  HEAP32[$339 >> 2] = $50; //@line 12305
  $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 12306
  HEAP32[$340 >> 2] = $52; //@line 12307
  $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 12308
  HEAP8[$341 >> 0] = $119; //@line 12309
  $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 12310
  HEAP32[$342 >> 2] = $54; //@line 12311
  $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 12312
  HEAP32[$343 >> 2] = $56; //@line 12313
  $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 12314
  HEAP32[$344 >> 2] = $58; //@line 12315
  $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 12316
  HEAP32[$345 >> 2] = $60; //@line 12317
  $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 12318
  HEAP8[$346 >> 0] = $62; //@line 12319
  $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 12320
  HEAP32[$347 >> 2] = $64; //@line 12321
  $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 12322
  HEAP32[$348 >> 2] = $68; //@line 12323
  $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 12324
  HEAP32[$349 >> 2] = $70; //@line 12325
  $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 12326
  HEAP32[$350 >> 2] = $72; //@line 12327
  $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 12328
  HEAP32[$351 >> 2] = $74; //@line 12329
  $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 12330
  HEAP32[$352 >> 2] = $76; //@line 12331
  $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 12332
  HEAP8[$353 >> 0] = $78; //@line 12333
  $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 12334
  HEAP32[$354 >> 2] = $80; //@line 12335
  $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 12336
  HEAP8[$355 >> 0] = $82; //@line 12337
  $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 12338
  HEAP32[$356 >> 2] = $84; //@line 12339
  $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 12340
  HEAP32[$357 >> 2] = $86; //@line 12341
  $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 12342
  HEAP32[$358 >> 2] = $88; //@line 12343
  $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 12344
  HEAP32[$359 >> 2] = $90; //@line 12345
  $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 12346
  HEAP32[$360 >> 2] = $92; //@line 12347
  $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 12348
  HEAP32[$361 >> 2] = $94; //@line 12349
  $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 12350
  HEAP32[$362 >> 2] = $96; //@line 12351
  $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 12352
  HEAP32[$363 >> 2] = $98; //@line 12353
  $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 12354
  HEAP32[$364 >> 2] = $100; //@line 12355
  $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 12356
  HEAP32[$365 >> 2] = $102; //@line 12357
  $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 12358
  HEAP32[$366 >> 2] = $104; //@line 12359
  $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 12360
  HEAP32[$367 >> 2] = $106; //@line 12361
  $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 12362
  HEAP32[$368 >> 2] = $108; //@line 12363
  $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 12364
  HEAP32[$369 >> 2] = $110; //@line 12365
  $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 12366
  HEAP32[$370 >> 2] = $112; //@line 12367
  $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 12368
  HEAP32[$371 >> 2] = $114; //@line 12369
  $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 12370
  HEAP32[$372 >> 2] = $116; //@line 12371
  sp = STACKTOP; //@line 12372
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 12379
  HEAP32[$42 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 12400
  HEAP32[$34 >> 2] = 0; //@line 12401
  $413 = $$0$be + 6 << 24 >> 24; //@line 12402
  HEAP8[$54 >> 0] = HEAP8[$68 + ($$0$be + 5 & 255) >> 0] | 0; //@line 12406
  $419 = HEAP32[(HEAP32[$48 >> 2] | 0) + 8 >> 2] | 0; //@line 12409
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 12410
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($94, $392, $10) | 0; //@line 12411
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 12414
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 12415
   HEAP32[$421 >> 2] = $2; //@line 12416
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 12417
   HEAP32[$422 >> 2] = $4; //@line 12418
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 12419
   HEAP32[$423 >> 2] = $6; //@line 12420
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 12421
   HEAP32[$424 >> 2] = $8; //@line 12422
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 12423
   HEAP32[$425 >> 2] = $10; //@line 12424
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 12425
   HEAP32[$426 >> 2] = $12; //@line 12426
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 12427
   HEAP32[$427 >> 2] = $14; //@line 12428
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 12429
   HEAP32[$428 >> 2] = $16; //@line 12430
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 12431
   HEAP32[$429 >> 2] = $18; //@line 12432
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 12433
   HEAP32[$430 >> 2] = $20; //@line 12434
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 12435
   HEAP32[$431 >> 2] = $22; //@line 12436
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 12437
   HEAP32[$432 >> 2] = $24; //@line 12438
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 12439
   HEAP32[$433 >> 2] = $26; //@line 12440
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 12441
   HEAP32[$434 >> 2] = $28; //@line 12442
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 12443
   HEAP32[$435 >> 2] = $30; //@line 12444
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 12445
   HEAP32[$436 >> 2] = $32; //@line 12446
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 12447
   HEAP32[$437 >> 2] = $34; //@line 12448
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 12449
   HEAP32[$438 >> 2] = $36; //@line 12450
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 12451
   HEAP32[$439 >> 2] = $38; //@line 12452
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 12453
   HEAP32[$440 >> 2] = $40; //@line 12454
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 12455
   HEAP32[$441 >> 2] = $42; //@line 12456
   $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 12457
   HEAP32[$442 >> 2] = $44; //@line 12458
   $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 12459
   HEAP32[$443 >> 2] = $46; //@line 12460
   $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 12461
   HEAP32[$444 >> 2] = $48; //@line 12462
   $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 12463
   HEAP32[$445 >> 2] = $50; //@line 12464
   $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 12465
   HEAP32[$446 >> 2] = $52; //@line 12466
   $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 12467
   HEAP32[$447 >> 2] = $54; //@line 12468
   $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 12469
   HEAP8[$448 >> 0] = $413; //@line 12470
   $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 12471
   HEAP32[$449 >> 2] = $56; //@line 12472
   $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 12473
   HEAP32[$450 >> 2] = $58; //@line 12474
   $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 12475
   HEAP32[$451 >> 2] = $60; //@line 12476
   $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 12477
   HEAP8[$452 >> 0] = $62; //@line 12478
   $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 12479
   HEAP32[$453 >> 2] = $64; //@line 12480
   $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 12481
   HEAP32[$454 >> 2] = $68; //@line 12482
   $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 12483
   HEAP32[$455 >> 2] = $70; //@line 12484
   $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 12485
   HEAP32[$456 >> 2] = $72; //@line 12486
   $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 12487
   HEAP32[$457 >> 2] = $74; //@line 12488
   $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 12489
   HEAP32[$458 >> 2] = $76; //@line 12490
   $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 12491
   HEAP8[$459 >> 0] = $78; //@line 12492
   $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 12493
   HEAP32[$460 >> 2] = $80; //@line 12494
   $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 12495
   HEAP8[$461 >> 0] = $82; //@line 12496
   $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 12497
   HEAP32[$462 >> 2] = $84; //@line 12498
   $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 12499
   HEAP32[$463 >> 2] = $86; //@line 12500
   $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 12501
   HEAP32[$464 >> 2] = $88; //@line 12502
   $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 12503
   HEAP32[$465 >> 2] = $90; //@line 12504
   $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 12505
   HEAP32[$466 >> 2] = $92; //@line 12506
   $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 12507
   HEAP32[$467 >> 2] = $94; //@line 12508
   $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 12509
   HEAP32[$468 >> 2] = $96; //@line 12510
   $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 12511
   HEAP32[$469 >> 2] = $98; //@line 12512
   $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 12513
   HEAP32[$470 >> 2] = $100; //@line 12514
   $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 12515
   HEAP32[$471 >> 2] = $102; //@line 12516
   $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 12517
   HEAP32[$472 >> 2] = $104; //@line 12518
   $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 12519
   HEAP32[$473 >> 2] = $106; //@line 12520
   $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 12521
   HEAP32[$474 >> 2] = $108; //@line 12522
   $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 12523
   HEAP32[$475 >> 2] = $110; //@line 12524
   $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 12525
   HEAP32[$476 >> 2] = $112; //@line 12526
   $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 12527
   HEAP32[$477 >> 2] = $114; //@line 12528
   $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 12529
   HEAP32[$478 >> 2] = $116; //@line 12530
   sp = STACKTOP; //@line 12531
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 12535
  ___async_unwind = 0; //@line 12536
  HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 12537
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 12538
  HEAP32[$421 >> 2] = $2; //@line 12539
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 12540
  HEAP32[$422 >> 2] = $4; //@line 12541
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 12542
  HEAP32[$423 >> 2] = $6; //@line 12543
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 12544
  HEAP32[$424 >> 2] = $8; //@line 12545
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 12546
  HEAP32[$425 >> 2] = $10; //@line 12547
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 12548
  HEAP32[$426 >> 2] = $12; //@line 12549
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 12550
  HEAP32[$427 >> 2] = $14; //@line 12551
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 12552
  HEAP32[$428 >> 2] = $16; //@line 12553
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 12554
  HEAP32[$429 >> 2] = $18; //@line 12555
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 12556
  HEAP32[$430 >> 2] = $20; //@line 12557
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 12558
  HEAP32[$431 >> 2] = $22; //@line 12559
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 12560
  HEAP32[$432 >> 2] = $24; //@line 12561
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 12562
  HEAP32[$433 >> 2] = $26; //@line 12563
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 12564
  HEAP32[$434 >> 2] = $28; //@line 12565
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 12566
  HEAP32[$435 >> 2] = $30; //@line 12567
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 12568
  HEAP32[$436 >> 2] = $32; //@line 12569
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 12570
  HEAP32[$437 >> 2] = $34; //@line 12571
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 12572
  HEAP32[$438 >> 2] = $36; //@line 12573
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 12574
  HEAP32[$439 >> 2] = $38; //@line 12575
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 12576
  HEAP32[$440 >> 2] = $40; //@line 12577
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 12578
  HEAP32[$441 >> 2] = $42; //@line 12579
  $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 12580
  HEAP32[$442 >> 2] = $44; //@line 12581
  $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 12582
  HEAP32[$443 >> 2] = $46; //@line 12583
  $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 12584
  HEAP32[$444 >> 2] = $48; //@line 12585
  $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 12586
  HEAP32[$445 >> 2] = $50; //@line 12587
  $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 12588
  HEAP32[$446 >> 2] = $52; //@line 12589
  $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 12590
  HEAP32[$447 >> 2] = $54; //@line 12591
  $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 12592
  HEAP8[$448 >> 0] = $413; //@line 12593
  $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 12594
  HEAP32[$449 >> 2] = $56; //@line 12595
  $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 12596
  HEAP32[$450 >> 2] = $58; //@line 12597
  $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 12598
  HEAP32[$451 >> 2] = $60; //@line 12599
  $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 12600
  HEAP8[$452 >> 0] = $62; //@line 12601
  $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 12602
  HEAP32[$453 >> 2] = $64; //@line 12603
  $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 12604
  HEAP32[$454 >> 2] = $68; //@line 12605
  $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 12606
  HEAP32[$455 >> 2] = $70; //@line 12607
  $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 12608
  HEAP32[$456 >> 2] = $72; //@line 12609
  $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 12610
  HEAP32[$457 >> 2] = $74; //@line 12611
  $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 12612
  HEAP32[$458 >> 2] = $76; //@line 12613
  $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 12614
  HEAP8[$459 >> 0] = $78; //@line 12615
  $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 12616
  HEAP32[$460 >> 2] = $80; //@line 12617
  $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 12618
  HEAP8[$461 >> 0] = $82; //@line 12619
  $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 12620
  HEAP32[$462 >> 2] = $84; //@line 12621
  $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 12622
  HEAP32[$463 >> 2] = $86; //@line 12623
  $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 12624
  HEAP32[$464 >> 2] = $88; //@line 12625
  $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 12626
  HEAP32[$465 >> 2] = $90; //@line 12627
  $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 12628
  HEAP32[$466 >> 2] = $92; //@line 12629
  $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 12630
  HEAP32[$467 >> 2] = $94; //@line 12631
  $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 12632
  HEAP32[$468 >> 2] = $96; //@line 12633
  $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 12634
  HEAP32[$469 >> 2] = $98; //@line 12635
  $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 12636
  HEAP32[$470 >> 2] = $100; //@line 12637
  $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 12638
  HEAP32[$471 >> 2] = $102; //@line 12639
  $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 12640
  HEAP32[$472 >> 2] = $104; //@line 12641
  $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 12642
  HEAP32[$473 >> 2] = $106; //@line 12643
  $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 12644
  HEAP32[$474 >> 2] = $108; //@line 12645
  $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 12646
  HEAP32[$475 >> 2] = $110; //@line 12647
  $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 12648
  HEAP32[$476 >> 2] = $112; //@line 12649
  $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 12650
  HEAP32[$477 >> 2] = $114; //@line 12651
  $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 12652
  HEAP32[$478 >> 2] = $116; //@line 12653
  sp = STACKTOP; //@line 12654
  return;
 } else if ((label | 0) == 24) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 12658
  $503 = HEAPU8[$68 + ($119 & 255) >> 0] | 0; //@line 12662
  $505 = $503 >>> 5 & 1; //@line 12665
  $507 = $503 >>> 4 & 1; //@line 12668
  $510 = HEAP32[(HEAP32[$28 >> 2] | 0) + 44 >> 2] | 0; //@line 12671
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 12672
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($94, $507, $505) | 0; //@line 12673
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 12676
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 12677
   HEAP32[$512 >> 2] = $2; //@line 12678
   $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 12679
   HEAP32[$513 >> 2] = $4; //@line 12680
   $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 12681
   HEAP32[$514 >> 2] = $6; //@line 12682
   $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 12683
   HEAP32[$515 >> 2] = $8; //@line 12684
   $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 12685
   HEAP32[$516 >> 2] = $10; //@line 12686
   $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 12687
   HEAP32[$517 >> 2] = $12; //@line 12688
   $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 12689
   HEAP32[$518 >> 2] = $14; //@line 12690
   $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 12691
   HEAP32[$519 >> 2] = $16; //@line 12692
   $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 12693
   HEAP32[$520 >> 2] = $18; //@line 12694
   $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 12695
   HEAP32[$521 >> 2] = $20; //@line 12696
   $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 12697
   HEAP32[$522 >> 2] = $22; //@line 12698
   $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 12699
   HEAP32[$523 >> 2] = $24; //@line 12700
   $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 12701
   HEAP32[$524 >> 2] = $26; //@line 12702
   $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 12703
   HEAP32[$525 >> 2] = $28; //@line 12704
   $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 12705
   HEAP32[$526 >> 2] = $30; //@line 12706
   $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 12707
   HEAP32[$527 >> 2] = $32; //@line 12708
   $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 12709
   HEAP32[$528 >> 2] = $34; //@line 12710
   $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 12711
   HEAP32[$529 >> 2] = $36; //@line 12712
   $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 12713
   HEAP32[$530 >> 2] = $38; //@line 12714
   $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 12715
   HEAP32[$531 >> 2] = $40; //@line 12716
   $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 12717
   HEAP32[$532 >> 2] = $42; //@line 12718
   $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 12719
   HEAP32[$533 >> 2] = $44; //@line 12720
   $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 12721
   HEAP32[$534 >> 2] = $46; //@line 12722
   $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 12723
   HEAP8[$535 >> 0] = $507; //@line 12724
   $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 12725
   HEAP32[$536 >> 2] = $48; //@line 12726
   $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 12727
   HEAP32[$537 >> 2] = $50; //@line 12728
   $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 12729
   HEAP32[$538 >> 2] = $52; //@line 12730
   $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 12731
   HEAP32[$539 >> 2] = $54; //@line 12732
   $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 12733
   HEAP32[$540 >> 2] = $56; //@line 12734
   $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 12735
   HEAP32[$541 >> 2] = $58; //@line 12736
   $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 12737
   HEAP32[$542 >> 2] = $60; //@line 12738
   $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 12739
   HEAP8[$543 >> 0] = $62; //@line 12740
   $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 12741
   HEAP32[$544 >> 2] = $64; //@line 12742
   $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 12743
   HEAP32[$545 >> 2] = $68; //@line 12744
   $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 12745
   HEAP32[$546 >> 2] = $70; //@line 12746
   $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 12747
   HEAP32[$547 >> 2] = $72; //@line 12748
   $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 12749
   HEAP32[$548 >> 2] = $74; //@line 12750
   $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 12751
   HEAP32[$549 >> 2] = $76; //@line 12752
   $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 12753
   HEAP8[$550 >> 0] = $78; //@line 12754
   $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 12755
   HEAP32[$551 >> 2] = $80; //@line 12756
   $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 12757
   HEAP8[$552 >> 0] = $82; //@line 12758
   $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 12759
   HEAP32[$553 >> 2] = $84; //@line 12760
   $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 12761
   HEAP32[$554 >> 2] = $86; //@line 12762
   $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 12763
   HEAP32[$555 >> 2] = $88; //@line 12764
   $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 12765
   HEAP32[$556 >> 2] = $90; //@line 12766
   $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 12767
   HEAP32[$557 >> 2] = $92; //@line 12768
   $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 12769
   HEAP32[$558 >> 2] = $94; //@line 12770
   $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 12771
   HEAP32[$559 >> 2] = $96; //@line 12772
   $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 12773
   HEAP8[$560 >> 0] = $499; //@line 12774
   $561 = $ReallocAsyncCtx5 + 197 | 0; //@line 12775
   HEAP8[$561 >> 0] = $505; //@line 12776
   $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 12777
   HEAP32[$562 >> 2] = $98; //@line 12778
   $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 12779
   HEAP32[$563 >> 2] = $100; //@line 12780
   $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 12781
   HEAP32[$564 >> 2] = $503; //@line 12782
   $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 12783
   HEAP32[$565 >> 2] = $$0107$be; //@line 12784
   $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 12785
   HEAP32[$566 >> 2] = $102; //@line 12786
   $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 12787
   HEAP32[$567 >> 2] = $104; //@line 12788
   $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 12789
   HEAP32[$568 >> 2] = $106; //@line 12790
   $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 12791
   HEAP32[$569 >> 2] = $108; //@line 12792
   $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 12793
   HEAP32[$570 >> 2] = $110; //@line 12794
   $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 12795
   HEAP32[$571 >> 2] = $112; //@line 12796
   $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 12797
   HEAP32[$572 >> 2] = $114; //@line 12798
   $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 12799
   HEAP32[$573 >> 2] = $116; //@line 12800
   sp = STACKTOP; //@line 12801
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 12806
  ___async_unwind = 0; //@line 12807
  HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 12808
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 12809
  HEAP32[$512 >> 2] = $2; //@line 12810
  $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 12811
  HEAP32[$513 >> 2] = $4; //@line 12812
  $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 12813
  HEAP32[$514 >> 2] = $6; //@line 12814
  $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 12815
  HEAP32[$515 >> 2] = $8; //@line 12816
  $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 12817
  HEAP32[$516 >> 2] = $10; //@line 12818
  $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 12819
  HEAP32[$517 >> 2] = $12; //@line 12820
  $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 12821
  HEAP32[$518 >> 2] = $14; //@line 12822
  $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 12823
  HEAP32[$519 >> 2] = $16; //@line 12824
  $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 12825
  HEAP32[$520 >> 2] = $18; //@line 12826
  $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 12827
  HEAP32[$521 >> 2] = $20; //@line 12828
  $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 12829
  HEAP32[$522 >> 2] = $22; //@line 12830
  $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 12831
  HEAP32[$523 >> 2] = $24; //@line 12832
  $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 12833
  HEAP32[$524 >> 2] = $26; //@line 12834
  $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 12835
  HEAP32[$525 >> 2] = $28; //@line 12836
  $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 12837
  HEAP32[$526 >> 2] = $30; //@line 12838
  $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 12839
  HEAP32[$527 >> 2] = $32; //@line 12840
  $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 12841
  HEAP32[$528 >> 2] = $34; //@line 12842
  $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 12843
  HEAP32[$529 >> 2] = $36; //@line 12844
  $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 12845
  HEAP32[$530 >> 2] = $38; //@line 12846
  $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 12847
  HEAP32[$531 >> 2] = $40; //@line 12848
  $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 12849
  HEAP32[$532 >> 2] = $42; //@line 12850
  $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 12851
  HEAP32[$533 >> 2] = $44; //@line 12852
  $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 12853
  HEAP32[$534 >> 2] = $46; //@line 12854
  $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 12855
  HEAP8[$535 >> 0] = $507; //@line 12856
  $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 12857
  HEAP32[$536 >> 2] = $48; //@line 12858
  $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 12859
  HEAP32[$537 >> 2] = $50; //@line 12860
  $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 12861
  HEAP32[$538 >> 2] = $52; //@line 12862
  $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 12863
  HEAP32[$539 >> 2] = $54; //@line 12864
  $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 12865
  HEAP32[$540 >> 2] = $56; //@line 12866
  $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 12867
  HEAP32[$541 >> 2] = $58; //@line 12868
  $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 12869
  HEAP32[$542 >> 2] = $60; //@line 12870
  $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 12871
  HEAP8[$543 >> 0] = $62; //@line 12872
  $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 12873
  HEAP32[$544 >> 2] = $64; //@line 12874
  $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 12875
  HEAP32[$545 >> 2] = $68; //@line 12876
  $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 12877
  HEAP32[$546 >> 2] = $70; //@line 12878
  $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 12879
  HEAP32[$547 >> 2] = $72; //@line 12880
  $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 12881
  HEAP32[$548 >> 2] = $74; //@line 12882
  $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 12883
  HEAP32[$549 >> 2] = $76; //@line 12884
  $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 12885
  HEAP8[$550 >> 0] = $78; //@line 12886
  $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 12887
  HEAP32[$551 >> 2] = $80; //@line 12888
  $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 12889
  HEAP8[$552 >> 0] = $82; //@line 12890
  $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 12891
  HEAP32[$553 >> 2] = $84; //@line 12892
  $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 12893
  HEAP32[$554 >> 2] = $86; //@line 12894
  $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 12895
  HEAP32[$555 >> 2] = $88; //@line 12896
  $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 12897
  HEAP32[$556 >> 2] = $90; //@line 12898
  $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 12899
  HEAP32[$557 >> 2] = $92; //@line 12900
  $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 12901
  HEAP32[$558 >> 2] = $94; //@line 12902
  $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 12903
  HEAP32[$559 >> 2] = $96; //@line 12904
  $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 12905
  HEAP8[$560 >> 0] = $499; //@line 12906
  $561 = $ReallocAsyncCtx5 + 197 | 0; //@line 12907
  HEAP8[$561 >> 0] = $505; //@line 12908
  $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 12909
  HEAP32[$562 >> 2] = $98; //@line 12910
  $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 12911
  HEAP32[$563 >> 2] = $100; //@line 12912
  $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 12913
  HEAP32[$564 >> 2] = $503; //@line 12914
  $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 12915
  HEAP32[$565 >> 2] = $$0107$be; //@line 12916
  $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 12917
  HEAP32[$566 >> 2] = $102; //@line 12918
  $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 12919
  HEAP32[$567 >> 2] = $104; //@line 12920
  $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 12921
  HEAP32[$568 >> 2] = $106; //@line 12922
  $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 12923
  HEAP32[$569 >> 2] = $108; //@line 12924
  $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 12925
  HEAP32[$570 >> 2] = $110; //@line 12926
  $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 12927
  HEAP32[$571 >> 2] = $112; //@line 12928
  $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 12929
  HEAP32[$572 >> 2] = $114; //@line 12930
  $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 12931
  HEAP32[$573 >> 2] = $116; //@line 12932
  sp = STACKTOP; //@line 12933
  return;
 } else if ((label | 0) == 27) {
  $578 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 12940
  $591 = $$0$be + 5 << 24 >> 24; //@line 12953
  $598 = (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 12960
  $601 = HEAP32[(HEAP32[$116 >> 2] | 0) + 48 >> 2] | 0; //@line 12963
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 12964
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($94, $578, $598) | 0; //@line 12965
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 12968
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 12969
   HEAP32[$603 >> 2] = $2; //@line 12970
   $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 12971
   HEAP32[$604 >> 2] = $4; //@line 12972
   $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 12973
   HEAP32[$605 >> 2] = $6; //@line 12974
   $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 12975
   HEAP32[$606 >> 2] = $8; //@line 12976
   $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 12977
   HEAP32[$607 >> 2] = $10; //@line 12978
   $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 12979
   HEAP32[$608 >> 2] = $12; //@line 12980
   $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 12981
   HEAP32[$609 >> 2] = $14; //@line 12982
   $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 12983
   HEAP32[$610 >> 2] = $16; //@line 12984
   $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 12985
   HEAP32[$611 >> 2] = $18; //@line 12986
   $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 12987
   HEAP32[$612 >> 2] = $20; //@line 12988
   $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 12989
   HEAP32[$613 >> 2] = $22; //@line 12990
   $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 12991
   HEAP32[$614 >> 2] = $24; //@line 12992
   $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 12993
   HEAP32[$615 >> 2] = $26; //@line 12994
   $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 12995
   HEAP32[$616 >> 2] = $28; //@line 12996
   $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 12997
   HEAP32[$617 >> 2] = $30; //@line 12998
   $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 12999
   HEAP32[$618 >> 2] = $32; //@line 13000
   $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 13001
   HEAP32[$619 >> 2] = $34; //@line 13002
   $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 13003
   HEAP32[$620 >> 2] = $36; //@line 13004
   $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 13005
   HEAP32[$621 >> 2] = $38; //@line 13006
   $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 13007
   HEAP32[$622 >> 2] = $40; //@line 13008
   $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 13009
   HEAP32[$623 >> 2] = $42; //@line 13010
   $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 13011
   HEAP32[$624 >> 2] = $44; //@line 13012
   $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 13013
   HEAP32[$625 >> 2] = $46; //@line 13014
   $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 13015
   HEAP32[$626 >> 2] = $48; //@line 13016
   $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 13017
   HEAP32[$627 >> 2] = $50; //@line 13018
   $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 13019
   HEAP32[$628 >> 2] = $52; //@line 13020
   $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 13021
   HEAP32[$629 >> 2] = $54; //@line 13022
   $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 13023
   HEAP32[$630 >> 2] = $56; //@line 13024
   $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 13025
   HEAP32[$631 >> 2] = $58; //@line 13026
   $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 13027
   HEAP32[$632 >> 2] = $60; //@line 13028
   $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 13029
   HEAP8[$633 >> 0] = $62; //@line 13030
   $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 13031
   HEAP32[$634 >> 2] = $64; //@line 13032
   $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 13033
   HEAP8[$635 >> 0] = $591; //@line 13034
   $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 13035
   HEAP32[$636 >> 2] = $68; //@line 13036
   $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 13037
   HEAP32[$637 >> 2] = $70; //@line 13038
   $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 13039
   HEAP32[$638 >> 2] = $72; //@line 13040
   $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 13041
   HEAP32[$639 >> 2] = $74; //@line 13042
   $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 13043
   HEAP32[$640 >> 2] = $76; //@line 13044
   $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 13045
   HEAP8[$641 >> 0] = $78; //@line 13046
   $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 13047
   HEAP32[$642 >> 2] = $80; //@line 13048
   $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 13049
   HEAP8[$643 >> 0] = $82; //@line 13050
   $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 13051
   HEAP32[$644 >> 2] = $84; //@line 13052
   $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 13053
   HEAP32[$645 >> 2] = $86; //@line 13054
   $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 13055
   HEAP32[$646 >> 2] = $88; //@line 13056
   $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 13057
   HEAP32[$647 >> 2] = $90; //@line 13058
   $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 13059
   HEAP32[$648 >> 2] = $92; //@line 13060
   $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 13061
   HEAP32[$649 >> 2] = $94; //@line 13062
   $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 13063
   HEAP32[$650 >> 2] = $96; //@line 13064
   $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 13065
   HEAP32[$651 >> 2] = $98; //@line 13066
   $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 13067
   HEAP32[$652 >> 2] = $100; //@line 13068
   $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 13069
   HEAP32[$653 >> 2] = $102; //@line 13070
   $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 13071
   HEAP32[$654 >> 2] = $104; //@line 13072
   $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 13073
   HEAP32[$655 >> 2] = $106; //@line 13074
   $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 13075
   HEAP32[$656 >> 2] = $108; //@line 13076
   $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 13077
   HEAP32[$657 >> 2] = $110; //@line 13078
   $658 = $ReallocAsyncCtx6 + 224 | 0; //@line 13079
   HEAP32[$658 >> 2] = $112; //@line 13080
   $659 = $ReallocAsyncCtx6 + 228 | 0; //@line 13081
   HEAP32[$659 >> 2] = $114; //@line 13082
   $660 = $ReallocAsyncCtx6 + 232 | 0; //@line 13083
   HEAP32[$660 >> 2] = $116; //@line 13084
   sp = STACKTOP; //@line 13085
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 13089
  ___async_unwind = 0; //@line 13090
  HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 13091
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 13092
  HEAP32[$603 >> 2] = $2; //@line 13093
  $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 13094
  HEAP32[$604 >> 2] = $4; //@line 13095
  $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 13096
  HEAP32[$605 >> 2] = $6; //@line 13097
  $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 13098
  HEAP32[$606 >> 2] = $8; //@line 13099
  $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 13100
  HEAP32[$607 >> 2] = $10; //@line 13101
  $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 13102
  HEAP32[$608 >> 2] = $12; //@line 13103
  $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 13104
  HEAP32[$609 >> 2] = $14; //@line 13105
  $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 13106
  HEAP32[$610 >> 2] = $16; //@line 13107
  $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 13108
  HEAP32[$611 >> 2] = $18; //@line 13109
  $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 13110
  HEAP32[$612 >> 2] = $20; //@line 13111
  $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 13112
  HEAP32[$613 >> 2] = $22; //@line 13113
  $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 13114
  HEAP32[$614 >> 2] = $24; //@line 13115
  $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 13116
  HEAP32[$615 >> 2] = $26; //@line 13117
  $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 13118
  HEAP32[$616 >> 2] = $28; //@line 13119
  $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 13120
  HEAP32[$617 >> 2] = $30; //@line 13121
  $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 13122
  HEAP32[$618 >> 2] = $32; //@line 13123
  $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 13124
  HEAP32[$619 >> 2] = $34; //@line 13125
  $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 13126
  HEAP32[$620 >> 2] = $36; //@line 13127
  $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 13128
  HEAP32[$621 >> 2] = $38; //@line 13129
  $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 13130
  HEAP32[$622 >> 2] = $40; //@line 13131
  $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 13132
  HEAP32[$623 >> 2] = $42; //@line 13133
  $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 13134
  HEAP32[$624 >> 2] = $44; //@line 13135
  $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 13136
  HEAP32[$625 >> 2] = $46; //@line 13137
  $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 13138
  HEAP32[$626 >> 2] = $48; //@line 13139
  $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 13140
  HEAP32[$627 >> 2] = $50; //@line 13141
  $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 13142
  HEAP32[$628 >> 2] = $52; //@line 13143
  $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 13144
  HEAP32[$629 >> 2] = $54; //@line 13145
  $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 13146
  HEAP32[$630 >> 2] = $56; //@line 13147
  $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 13148
  HEAP32[$631 >> 2] = $58; //@line 13149
  $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 13150
  HEAP32[$632 >> 2] = $60; //@line 13151
  $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 13152
  HEAP8[$633 >> 0] = $62; //@line 13153
  $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 13154
  HEAP32[$634 >> 2] = $64; //@line 13155
  $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 13156
  HEAP8[$635 >> 0] = $591; //@line 13157
  $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 13158
  HEAP32[$636 >> 2] = $68; //@line 13159
  $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 13160
  HEAP32[$637 >> 2] = $70; //@line 13161
  $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 13162
  HEAP32[$638 >> 2] = $72; //@line 13163
  $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 13164
  HEAP32[$639 >> 2] = $74; //@line 13165
  $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 13166
  HEAP32[$640 >> 2] = $76; //@line 13167
  $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 13168
  HEAP8[$641 >> 0] = $78; //@line 13169
  $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 13170
  HEAP32[$642 >> 2] = $80; //@line 13171
  $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 13172
  HEAP8[$643 >> 0] = $82; //@line 13173
  $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 13174
  HEAP32[$644 >> 2] = $84; //@line 13175
  $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 13176
  HEAP32[$645 >> 2] = $86; //@line 13177
  $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 13178
  HEAP32[$646 >> 2] = $88; //@line 13179
  $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 13180
  HEAP32[$647 >> 2] = $90; //@line 13181
  $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 13182
  HEAP32[$648 >> 2] = $92; //@line 13183
  $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 13184
  HEAP32[$649 >> 2] = $94; //@line 13185
  $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 13186
  HEAP32[$650 >> 2] = $96; //@line 13187
  $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 13188
  HEAP32[$651 >> 2] = $98; //@line 13189
  $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 13190
  HEAP32[$652 >> 2] = $100; //@line 13191
  $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 13192
  HEAP32[$653 >> 2] = $102; //@line 13193
  $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 13194
  HEAP32[$654 >> 2] = $104; //@line 13195
  $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 13196
  HEAP32[$655 >> 2] = $106; //@line 13197
  $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 13198
  HEAP32[$656 >> 2] = $108; //@line 13199
  $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 13200
  HEAP32[$657 >> 2] = $110; //@line 13201
  $658 = $ReallocAsyncCtx6 + 224 | 0; //@line 13202
  HEAP32[$658 >> 2] = $112; //@line 13203
  $659 = $ReallocAsyncCtx6 + 228 | 0; //@line 13204
  HEAP32[$659 >> 2] = $114; //@line 13205
  $660 = $ReallocAsyncCtx6 + 232 | 0; //@line 13206
  HEAP32[$660 >> 2] = $116; //@line 13207
  sp = STACKTOP; //@line 13208
  return;
 } else if ((label | 0) == 32) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 13213
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_220($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $127 = 0, $138 = 0, $139 = 0, $14 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $212 = 0, $215 = 0, $22 = 0, $222 = 0, $223 = 0, $229 = 0, $24 = 0, $248 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $319 = 0, $32 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $385 = 0, $386 = 0, $4 = 0, $40 = 0, $400 = 0, $42 = 0, $421 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $489 = 0, $493 = 0, $497 = 0, $50 = 0, $502 = 0, $503 = 0, $507 = 0, $511 = 0, $513 = 0, $515 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $583 = 0, $590 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $611 = 0, $618 = 0, $62 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9273
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9275
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9277
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9279
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9281
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9283
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9285
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9287
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9289
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9291
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9293
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9295
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9297
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9299
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9301
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9303
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9305
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9307
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9309
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9311
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9313
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9315
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9317
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9319
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 9323
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 9325
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 9327
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 9329
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 9331
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 9333
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 9335
 $64 = HEAP8[$0 + 128 >> 0] | 0; //@line 9337
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 9339
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 9341
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 9343
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 9345
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 9347
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 9349
 $78 = HEAP8[$0 + 156 >> 0] | 0; //@line 9351
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 9353
 $82 = HEAP8[$0 + 164 >> 0] | 0; //@line 9355
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 9357
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 9359
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 9361
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 9363
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 9365
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 9367
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 9369
 $98 = HEAP8[$0 + 196 >> 0] | 0; //@line 9371
 $100 = HEAP8[$0 + 197 >> 0] | 0; //@line 9373
 $102 = HEAP32[$0 + 200 >> 2] | 0; //@line 9375
 $104 = HEAP32[$0 + 204 >> 2] | 0; //@line 9377
 $108 = HEAP32[$0 + 212 >> 2] | 0; //@line 9381
 $110 = HEAP32[$0 + 216 >> 2] | 0; //@line 9383
 $112 = HEAP32[$0 + 220 >> 2] | 0; //@line 9385
 $114 = HEAP32[$0 + 224 >> 2] | 0; //@line 9387
 $116 = HEAP32[$0 + 228 >> 2] | 0; //@line 9389
 $118 = HEAP32[$0 + 232 >> 2] | 0; //@line 9391
 $120 = HEAP32[$0 + 236 >> 2] | 0; //@line 9393
 $122 = HEAP32[$0 + 240 >> 2] | 0; //@line 9395
 $124 = HEAP32[$0 + 244 >> 2] | 0; //@line 9397
 if (HEAP8[___async_retval >> 0] & 1) {
  $583 = HEAP32[$0 + 208 >> 2] & 15; //@line 9402
  HEAP8[$58 >> 0] = HEAP8[$0 + 96 >> 0] | 0; //@line 9403
  HEAP8[$20 >> 0] = $100; //@line 9404
  HEAPF32[$116 >> 2] = +(HEAPU8[13381 + $583 >> 0] | 0); //@line 9408
  $590 = HEAP8[$92 >> 0] | 0; //@line 9412
  $591 = $590 & 255; //@line 9413
  if ((128 - (HEAPU8[$62 >> 0] | 0) | 0) > ($591 | 0)) {
   HEAP8[$92 >> 0] = $590 + 1 << 24 >> 24; //@line 9418
   HEAP8[$72 + 4 + $591 >> 0] = 9; //@line 9419
   HEAP8[$86 >> 0] = 1; //@line 9420
   $$0$be = $98; //@line 9421
   $$0107$be = 0; //@line 9421
  } else {
   $$0$be = $98; //@line 9423
   $$0107$be = -1010; //@line 9423
  }
 } else {
  $$0$be = $98; //@line 9426
  $$0107$be = $108; //@line 9426
 }
 L5 : while (1) {
  if (($$0$be & 255) >= ($64 & 255)) {
   label = 33; //@line 9431
   break;
  }
  $127 = $$0$be + 1 << 24 >> 24; //@line 9435
  switch (HEAP8[$68 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 9440
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 9445
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 9450
    break L5;
    break;
   }
  case 9:
   {
    label = 24; //@line 9455
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 9460
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$114 >> 2] = 0; //@line 9465
    HEAP8[$66 >> 0] = HEAP8[$68 + ($127 & 255) >> 0] | 0; //@line 9470
    HEAP8[$80 >> 0] = HEAP8[$68 + ($$0$be + 2 & 255) >> 0] | 0; //@line 9475
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 9476
    continue L5;
    break;
   }
  case 4:
   {
    $212 = $$0$be + 2 << 24 >> 24; //@line 9481
    $215 = HEAP8[$68 + ($127 & 255) >> 0] | 0; //@line 9484
    HEAP8[$40 >> 0] = $215; //@line 9485
    HEAP16[$36 >> 1] = 1 << ($215 & 255); //@line 9489
    $222 = HEAP8[$92 >> 0] | 0; //@line 9493
    $223 = $222 & 255; //@line 9494
    if ((128 - (HEAPU8[$62 >> 0] | 0) | 0) <= ($223 | 0)) {
     $$0$be = $212; //@line 9497
     $$0107$be = -1010; //@line 9497
     continue L5;
    }
    HEAP8[$92 >> 0] = $222 + 1 << 24 >> 24; //@line 9502
    HEAP8[$72 + 4 + $223 >> 0] = 4; //@line 9503
    HEAP8[$86 >> 0] = 1; //@line 9504
    $$0$be = $212; //@line 9505
    $$0107$be = 0; //@line 9505
    continue L5;
    break;
   }
  case 6:
   {
    $319 = HEAP32[$118 >> 2] | 0; //@line 9510
    if ($319 | 0) {
     label = 13; //@line 9513
     break L5;
    }
    $385 = HEAP8[$92 >> 0] | 0; //@line 9519
    $386 = $385 & 255; //@line 9520
    if ((128 - (HEAPU8[$62 >> 0] | 0) - $386 | 0) <= 2) {
     $$0$be = $127; //@line 9524
     $$0107$be = -1010; //@line 9524
     continue L5;
    }
    HEAP8[$72 + 4 + $386 >> 0] = 6; //@line 9529
    HEAP8[($385 + 1 & 255) + ($72 + 4) >> 0] = -1; //@line 9533
    HEAP8[$92 >> 0] = $385 + 3 << 24 >> 24; //@line 9535
    HEAP8[($385 + 2 & 255) + ($72 + 4) >> 0] = $82; //@line 9538
    HEAP8[$86 >> 0] = 1; //@line 9539
    $$0$be = $127; //@line 9540
    $$0107$be = 0; //@line 9540
    continue L5;
    break;
   }
  case 8:
   {
    $489 = $$0$be + 2 << 24 >> 24; //@line 9545
    $493 = HEAP8[$68 + ($127 & 255) >> 0] & 15; //@line 9549
    $497 = ($493 + ($493 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 9554
    HEAP32[$14 >> 2] = $497; //@line 9555
    HEAP32[$4 >> 2] = $497 + 1e3; //@line 9557
    $502 = HEAP8[$92 >> 0] | 0; //@line 9561
    $503 = $502 & 255; //@line 9562
    if ((128 - (HEAPU8[$62 >> 0] | 0) | 0) <= ($503 | 0)) {
     $$0$be = $489; //@line 9565
     $$0107$be = -1010; //@line 9565
     continue L5;
    }
    HEAP8[$92 >> 0] = $502 + 1 << 24 >> 24; //@line 9570
    HEAP8[$72 + 4 + $503 >> 0] = 8; //@line 9571
    HEAP8[$120 >> 0] = 1; //@line 9572
    HEAP8[$86 >> 0] = 1; //@line 9573
    $$0$be = $489; //@line 9574
    $$0107$be = 0; //@line 9574
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $127; //@line 9579
    $$0107$be = -1013; //@line 9579
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$76 >> 0] = 0; //@line 9585
  HEAP8[$44 >> 0] = 0; //@line 9586
  HEAP8[$22 >> 0] = 0; //@line 9587
  HEAP8[$26 >> 0] = 0; //@line 9588
  $138 = $127 & 255; //@line 9589
  $139 = $138 + -1 | 0; //@line 9590
  HEAP32[$84 >> 2] = $68 + $139; //@line 9592
  HEAP8[$38 >> 0] = $32 - $139; //@line 9595
  HEAP8[$54 >> 0] = HEAP8[$46 >> 0] | 0; //@line 9597
  HEAP8[$6 >> 0] = HEAP8[$58 >> 0] | 0; //@line 9599
  HEAP8[$18 >> 0] = HEAP8[$12 >> 0] | 0; //@line 9601
  HEAP8[$102 >> 0] = HEAP8[$24 >> 0] | 0; //@line 9603
  HEAP8[$112 >> 0] = HEAP8[$122 >> 0] | 0; //@line 9605
  $150 = HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] | 0; //@line 9608
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 9609
  $151 = FUNCTION_TABLE_iiiiiii[$150 & 3]($94, $88, $76, $44, $22, $26) | 0; //@line 9610
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 9613
   $152 = $ReallocAsyncCtx + 4 | 0; //@line 9614
   HEAP32[$152 >> 2] = $2; //@line 9615
   $153 = $ReallocAsyncCtx + 8 | 0; //@line 9616
   HEAP32[$153 >> 2] = $4; //@line 9617
   $154 = $ReallocAsyncCtx + 12 | 0; //@line 9618
   HEAP32[$154 >> 2] = $6; //@line 9619
   $155 = $ReallocAsyncCtx + 16 | 0; //@line 9620
   HEAP32[$155 >> 2] = $8; //@line 9621
   $156 = $ReallocAsyncCtx + 20 | 0; //@line 9622
   HEAP32[$156 >> 2] = $10; //@line 9623
   $157 = $ReallocAsyncCtx + 24 | 0; //@line 9624
   HEAP32[$157 >> 2] = $12; //@line 9625
   $158 = $ReallocAsyncCtx + 28 | 0; //@line 9626
   HEAP32[$158 >> 2] = $14; //@line 9627
   $159 = $ReallocAsyncCtx + 32 | 0; //@line 9628
   HEAP32[$159 >> 2] = $16; //@line 9629
   $160 = $ReallocAsyncCtx + 36 | 0; //@line 9630
   HEAP32[$160 >> 2] = $18; //@line 9631
   $161 = $ReallocAsyncCtx + 40 | 0; //@line 9632
   HEAP32[$161 >> 2] = $20; //@line 9633
   $162 = $ReallocAsyncCtx + 44 | 0; //@line 9634
   HEAP32[$162 >> 2] = $22; //@line 9635
   $163 = $ReallocAsyncCtx + 48 | 0; //@line 9636
   HEAP32[$163 >> 2] = $24; //@line 9637
   $164 = $ReallocAsyncCtx + 52 | 0; //@line 9638
   HEAP32[$164 >> 2] = $26; //@line 9639
   $165 = $ReallocAsyncCtx + 56 | 0; //@line 9640
   HEAP32[$165 >> 2] = $28; //@line 9641
   $166 = $ReallocAsyncCtx + 60 | 0; //@line 9642
   HEAP32[$166 >> 2] = $30; //@line 9643
   $167 = $ReallocAsyncCtx + 64 | 0; //@line 9644
   HEAP32[$167 >> 2] = $32; //@line 9645
   $168 = $ReallocAsyncCtx + 68 | 0; //@line 9646
   HEAP32[$168 >> 2] = $34; //@line 9647
   $169 = $ReallocAsyncCtx + 72 | 0; //@line 9648
   HEAP32[$169 >> 2] = $36; //@line 9649
   $170 = $ReallocAsyncCtx + 76 | 0; //@line 9650
   HEAP32[$170 >> 2] = $38; //@line 9651
   $171 = $ReallocAsyncCtx + 80 | 0; //@line 9652
   HEAP32[$171 >> 2] = $40; //@line 9653
   $172 = $ReallocAsyncCtx + 84 | 0; //@line 9654
   HEAP32[$172 >> 2] = $42; //@line 9655
   $173 = $ReallocAsyncCtx + 88 | 0; //@line 9656
   HEAP32[$173 >> 2] = $44; //@line 9657
   $174 = $ReallocAsyncCtx + 92 | 0; //@line 9658
   HEAP32[$174 >> 2] = $46; //@line 9659
   $175 = $ReallocAsyncCtx + 96 | 0; //@line 9660
   HEAP32[$175 >> 2] = $138; //@line 9661
   $176 = $ReallocAsyncCtx + 100 | 0; //@line 9662
   HEAP32[$176 >> 2] = $50; //@line 9663
   $177 = $ReallocAsyncCtx + 104 | 0; //@line 9664
   HEAP32[$177 >> 2] = $52; //@line 9665
   $178 = $ReallocAsyncCtx + 108 | 0; //@line 9666
   HEAP32[$178 >> 2] = $54; //@line 9667
   $179 = $ReallocAsyncCtx + 112 | 0; //@line 9668
   HEAP32[$179 >> 2] = $56; //@line 9669
   $180 = $ReallocAsyncCtx + 116 | 0; //@line 9670
   HEAP32[$180 >> 2] = $58; //@line 9671
   $181 = $ReallocAsyncCtx + 120 | 0; //@line 9672
   HEAP32[$181 >> 2] = $60; //@line 9673
   $182 = $ReallocAsyncCtx + 124 | 0; //@line 9674
   HEAP32[$182 >> 2] = $62; //@line 9675
   $183 = $ReallocAsyncCtx + 128 | 0; //@line 9676
   HEAP8[$183 >> 0] = $64; //@line 9677
   $184 = $ReallocAsyncCtx + 132 | 0; //@line 9678
   HEAP32[$184 >> 2] = $66; //@line 9679
   $185 = $ReallocAsyncCtx + 136 | 0; //@line 9680
   HEAP32[$185 >> 2] = $68; //@line 9681
   $186 = $ReallocAsyncCtx + 140 | 0; //@line 9682
   HEAP32[$186 >> 2] = $70; //@line 9683
   $187 = $ReallocAsyncCtx + 144 | 0; //@line 9684
   HEAP32[$187 >> 2] = $72; //@line 9685
   $188 = $ReallocAsyncCtx + 148 | 0; //@line 9686
   HEAP32[$188 >> 2] = $74; //@line 9687
   $189 = $ReallocAsyncCtx + 152 | 0; //@line 9688
   HEAP32[$189 >> 2] = $76; //@line 9689
   $190 = $ReallocAsyncCtx + 156 | 0; //@line 9690
   HEAP8[$190 >> 0] = $78; //@line 9691
   $191 = $ReallocAsyncCtx + 160 | 0; //@line 9692
   HEAP32[$191 >> 2] = $80; //@line 9693
   $192 = $ReallocAsyncCtx + 164 | 0; //@line 9694
   HEAP8[$192 >> 0] = $82; //@line 9695
   $193 = $ReallocAsyncCtx + 168 | 0; //@line 9696
   HEAP32[$193 >> 2] = $84; //@line 9697
   $194 = $ReallocAsyncCtx + 172 | 0; //@line 9698
   HEAP32[$194 >> 2] = $86; //@line 9699
   $195 = $ReallocAsyncCtx + 176 | 0; //@line 9700
   HEAP32[$195 >> 2] = $88; //@line 9701
   $196 = $ReallocAsyncCtx + 180 | 0; //@line 9702
   HEAP32[$196 >> 2] = $90; //@line 9703
   $197 = $ReallocAsyncCtx + 184 | 0; //@line 9704
   HEAP32[$197 >> 2] = $92; //@line 9705
   $198 = $ReallocAsyncCtx + 188 | 0; //@line 9706
   HEAP32[$198 >> 2] = $94; //@line 9707
   $199 = $ReallocAsyncCtx + 192 | 0; //@line 9708
   HEAP32[$199 >> 2] = $96; //@line 9709
   $200 = $ReallocAsyncCtx + 196 | 0; //@line 9710
   HEAP32[$200 >> 2] = $102; //@line 9711
   $201 = $ReallocAsyncCtx + 200 | 0; //@line 9712
   HEAP32[$201 >> 2] = $104; //@line 9713
   $202 = $ReallocAsyncCtx + 204 | 0; //@line 9714
   HEAP32[$202 >> 2] = $$0107$be; //@line 9715
   $203 = $ReallocAsyncCtx + 208 | 0; //@line 9716
   HEAP32[$203 >> 2] = $110; //@line 9717
   $204 = $ReallocAsyncCtx + 212 | 0; //@line 9718
   HEAP32[$204 >> 2] = $112; //@line 9719
   $205 = $ReallocAsyncCtx + 216 | 0; //@line 9720
   HEAP32[$205 >> 2] = $114; //@line 9721
   $206 = $ReallocAsyncCtx + 220 | 0; //@line 9722
   HEAP32[$206 >> 2] = $116; //@line 9723
   $207 = $ReallocAsyncCtx + 224 | 0; //@line 9724
   HEAP32[$207 >> 2] = $118; //@line 9725
   $208 = $ReallocAsyncCtx + 228 | 0; //@line 9726
   HEAP32[$208 >> 2] = $120; //@line 9727
   $209 = $ReallocAsyncCtx + 232 | 0; //@line 9728
   HEAP32[$209 >> 2] = $122; //@line 9729
   $210 = $ReallocAsyncCtx + 236 | 0; //@line 9730
   HEAP32[$210 >> 2] = $124; //@line 9731
   sp = STACKTOP; //@line 9732
   return;
  }
  HEAP8[___async_retval >> 0] = $151; //@line 9736
  ___async_unwind = 0; //@line 9737
  HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 9738
  $152 = $ReallocAsyncCtx + 4 | 0; //@line 9739
  HEAP32[$152 >> 2] = $2; //@line 9740
  $153 = $ReallocAsyncCtx + 8 | 0; //@line 9741
  HEAP32[$153 >> 2] = $4; //@line 9742
  $154 = $ReallocAsyncCtx + 12 | 0; //@line 9743
  HEAP32[$154 >> 2] = $6; //@line 9744
  $155 = $ReallocAsyncCtx + 16 | 0; //@line 9745
  HEAP32[$155 >> 2] = $8; //@line 9746
  $156 = $ReallocAsyncCtx + 20 | 0; //@line 9747
  HEAP32[$156 >> 2] = $10; //@line 9748
  $157 = $ReallocAsyncCtx + 24 | 0; //@line 9749
  HEAP32[$157 >> 2] = $12; //@line 9750
  $158 = $ReallocAsyncCtx + 28 | 0; //@line 9751
  HEAP32[$158 >> 2] = $14; //@line 9752
  $159 = $ReallocAsyncCtx + 32 | 0; //@line 9753
  HEAP32[$159 >> 2] = $16; //@line 9754
  $160 = $ReallocAsyncCtx + 36 | 0; //@line 9755
  HEAP32[$160 >> 2] = $18; //@line 9756
  $161 = $ReallocAsyncCtx + 40 | 0; //@line 9757
  HEAP32[$161 >> 2] = $20; //@line 9758
  $162 = $ReallocAsyncCtx + 44 | 0; //@line 9759
  HEAP32[$162 >> 2] = $22; //@line 9760
  $163 = $ReallocAsyncCtx + 48 | 0; //@line 9761
  HEAP32[$163 >> 2] = $24; //@line 9762
  $164 = $ReallocAsyncCtx + 52 | 0; //@line 9763
  HEAP32[$164 >> 2] = $26; //@line 9764
  $165 = $ReallocAsyncCtx + 56 | 0; //@line 9765
  HEAP32[$165 >> 2] = $28; //@line 9766
  $166 = $ReallocAsyncCtx + 60 | 0; //@line 9767
  HEAP32[$166 >> 2] = $30; //@line 9768
  $167 = $ReallocAsyncCtx + 64 | 0; //@line 9769
  HEAP32[$167 >> 2] = $32; //@line 9770
  $168 = $ReallocAsyncCtx + 68 | 0; //@line 9771
  HEAP32[$168 >> 2] = $34; //@line 9772
  $169 = $ReallocAsyncCtx + 72 | 0; //@line 9773
  HEAP32[$169 >> 2] = $36; //@line 9774
  $170 = $ReallocAsyncCtx + 76 | 0; //@line 9775
  HEAP32[$170 >> 2] = $38; //@line 9776
  $171 = $ReallocAsyncCtx + 80 | 0; //@line 9777
  HEAP32[$171 >> 2] = $40; //@line 9778
  $172 = $ReallocAsyncCtx + 84 | 0; //@line 9779
  HEAP32[$172 >> 2] = $42; //@line 9780
  $173 = $ReallocAsyncCtx + 88 | 0; //@line 9781
  HEAP32[$173 >> 2] = $44; //@line 9782
  $174 = $ReallocAsyncCtx + 92 | 0; //@line 9783
  HEAP32[$174 >> 2] = $46; //@line 9784
  $175 = $ReallocAsyncCtx + 96 | 0; //@line 9785
  HEAP32[$175 >> 2] = $138; //@line 9786
  $176 = $ReallocAsyncCtx + 100 | 0; //@line 9787
  HEAP32[$176 >> 2] = $50; //@line 9788
  $177 = $ReallocAsyncCtx + 104 | 0; //@line 9789
  HEAP32[$177 >> 2] = $52; //@line 9790
  $178 = $ReallocAsyncCtx + 108 | 0; //@line 9791
  HEAP32[$178 >> 2] = $54; //@line 9792
  $179 = $ReallocAsyncCtx + 112 | 0; //@line 9793
  HEAP32[$179 >> 2] = $56; //@line 9794
  $180 = $ReallocAsyncCtx + 116 | 0; //@line 9795
  HEAP32[$180 >> 2] = $58; //@line 9796
  $181 = $ReallocAsyncCtx + 120 | 0; //@line 9797
  HEAP32[$181 >> 2] = $60; //@line 9798
  $182 = $ReallocAsyncCtx + 124 | 0; //@line 9799
  HEAP32[$182 >> 2] = $62; //@line 9800
  $183 = $ReallocAsyncCtx + 128 | 0; //@line 9801
  HEAP8[$183 >> 0] = $64; //@line 9802
  $184 = $ReallocAsyncCtx + 132 | 0; //@line 9803
  HEAP32[$184 >> 2] = $66; //@line 9804
  $185 = $ReallocAsyncCtx + 136 | 0; //@line 9805
  HEAP32[$185 >> 2] = $68; //@line 9806
  $186 = $ReallocAsyncCtx + 140 | 0; //@line 9807
  HEAP32[$186 >> 2] = $70; //@line 9808
  $187 = $ReallocAsyncCtx + 144 | 0; //@line 9809
  HEAP32[$187 >> 2] = $72; //@line 9810
  $188 = $ReallocAsyncCtx + 148 | 0; //@line 9811
  HEAP32[$188 >> 2] = $74; //@line 9812
  $189 = $ReallocAsyncCtx + 152 | 0; //@line 9813
  HEAP32[$189 >> 2] = $76; //@line 9814
  $190 = $ReallocAsyncCtx + 156 | 0; //@line 9815
  HEAP8[$190 >> 0] = $78; //@line 9816
  $191 = $ReallocAsyncCtx + 160 | 0; //@line 9817
  HEAP32[$191 >> 2] = $80; //@line 9818
  $192 = $ReallocAsyncCtx + 164 | 0; //@line 9819
  HEAP8[$192 >> 0] = $82; //@line 9820
  $193 = $ReallocAsyncCtx + 168 | 0; //@line 9821
  HEAP32[$193 >> 2] = $84; //@line 9822
  $194 = $ReallocAsyncCtx + 172 | 0; //@line 9823
  HEAP32[$194 >> 2] = $86; //@line 9824
  $195 = $ReallocAsyncCtx + 176 | 0; //@line 9825
  HEAP32[$195 >> 2] = $88; //@line 9826
  $196 = $ReallocAsyncCtx + 180 | 0; //@line 9827
  HEAP32[$196 >> 2] = $90; //@line 9828
  $197 = $ReallocAsyncCtx + 184 | 0; //@line 9829
  HEAP32[$197 >> 2] = $92; //@line 9830
  $198 = $ReallocAsyncCtx + 188 | 0; //@line 9831
  HEAP32[$198 >> 2] = $94; //@line 9832
  $199 = $ReallocAsyncCtx + 192 | 0; //@line 9833
  HEAP32[$199 >> 2] = $96; //@line 9834
  $200 = $ReallocAsyncCtx + 196 | 0; //@line 9835
  HEAP32[$200 >> 2] = $102; //@line 9836
  $201 = $ReallocAsyncCtx + 200 | 0; //@line 9837
  HEAP32[$201 >> 2] = $104; //@line 9838
  $202 = $ReallocAsyncCtx + 204 | 0; //@line 9839
  HEAP32[$202 >> 2] = $$0107$be; //@line 9840
  $203 = $ReallocAsyncCtx + 208 | 0; //@line 9841
  HEAP32[$203 >> 2] = $110; //@line 9842
  $204 = $ReallocAsyncCtx + 212 | 0; //@line 9843
  HEAP32[$204 >> 2] = $112; //@line 9844
  $205 = $ReallocAsyncCtx + 216 | 0; //@line 9845
  HEAP32[$205 >> 2] = $114; //@line 9846
  $206 = $ReallocAsyncCtx + 220 | 0; //@line 9847
  HEAP32[$206 >> 2] = $116; //@line 9848
  $207 = $ReallocAsyncCtx + 224 | 0; //@line 9849
  HEAP32[$207 >> 2] = $118; //@line 9850
  $208 = $ReallocAsyncCtx + 228 | 0; //@line 9851
  HEAP32[$208 >> 2] = $120; //@line 9852
  $209 = $ReallocAsyncCtx + 232 | 0; //@line 9853
  HEAP32[$209 >> 2] = $122; //@line 9854
  $210 = $ReallocAsyncCtx + 236 | 0; //@line 9855
  HEAP32[$210 >> 2] = $124; //@line 9856
  sp = STACKTOP; //@line 9857
  return;
 } else if ((label | 0) == 9) {
  $229 = HEAP8[$68 + ($127 & 255) >> 0] | 0; //@line 9863
  HEAP8[$52 >> 0] = ($229 & 255) >>> 4 & 7; //@line 9868
  HEAP8[$60 >> 0] = $229 & 15; //@line 9870
  $248 = $$0$be + 5 << 24 >> 24; //@line 9884
  HEAP32[$16 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 9892
  $258 = HEAP32[(HEAP32[$8 >> 2] | 0) + 40 >> 2] | 0; //@line 9895
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 9896
  $259 = FUNCTION_TABLE_iii[$258 & 31]($94, $2) | 0; //@line 9897
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 9900
   $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 9901
   HEAP32[$260 >> 2] = $2; //@line 9902
   $261 = $ReallocAsyncCtx2 + 8 | 0; //@line 9903
   HEAP32[$261 >> 2] = $4; //@line 9904
   $262 = $ReallocAsyncCtx2 + 12 | 0; //@line 9905
   HEAP32[$262 >> 2] = $6; //@line 9906
   $263 = $ReallocAsyncCtx2 + 16 | 0; //@line 9907
   HEAP32[$263 >> 2] = $8; //@line 9908
   $264 = $ReallocAsyncCtx2 + 20 | 0; //@line 9909
   HEAP32[$264 >> 2] = $10; //@line 9910
   $265 = $ReallocAsyncCtx2 + 24 | 0; //@line 9911
   HEAP32[$265 >> 2] = $12; //@line 9912
   $266 = $ReallocAsyncCtx2 + 28 | 0; //@line 9913
   HEAP32[$266 >> 2] = $14; //@line 9914
   $267 = $ReallocAsyncCtx2 + 32 | 0; //@line 9915
   HEAP32[$267 >> 2] = $16; //@line 9916
   $268 = $ReallocAsyncCtx2 + 36 | 0; //@line 9917
   HEAP32[$268 >> 2] = $18; //@line 9918
   $269 = $ReallocAsyncCtx2 + 40 | 0; //@line 9919
   HEAP32[$269 >> 2] = $20; //@line 9920
   $270 = $ReallocAsyncCtx2 + 44 | 0; //@line 9921
   HEAP32[$270 >> 2] = $22; //@line 9922
   $271 = $ReallocAsyncCtx2 + 48 | 0; //@line 9923
   HEAP32[$271 >> 2] = $24; //@line 9924
   $272 = $ReallocAsyncCtx2 + 52 | 0; //@line 9925
   HEAP32[$272 >> 2] = $26; //@line 9926
   $273 = $ReallocAsyncCtx2 + 56 | 0; //@line 9927
   HEAP32[$273 >> 2] = $28; //@line 9928
   $274 = $ReallocAsyncCtx2 + 60 | 0; //@line 9929
   HEAP32[$274 >> 2] = $30; //@line 9930
   $275 = $ReallocAsyncCtx2 + 64 | 0; //@line 9931
   HEAP32[$275 >> 2] = $32; //@line 9932
   $276 = $ReallocAsyncCtx2 + 68 | 0; //@line 9933
   HEAP32[$276 >> 2] = $34; //@line 9934
   $277 = $ReallocAsyncCtx2 + 72 | 0; //@line 9935
   HEAP32[$277 >> 2] = $36; //@line 9936
   $278 = $ReallocAsyncCtx2 + 76 | 0; //@line 9937
   HEAP32[$278 >> 2] = $38; //@line 9938
   $279 = $ReallocAsyncCtx2 + 80 | 0; //@line 9939
   HEAP32[$279 >> 2] = $40; //@line 9940
   $280 = $ReallocAsyncCtx2 + 84 | 0; //@line 9941
   HEAP8[$280 >> 0] = $248; //@line 9942
   $281 = $ReallocAsyncCtx2 + 88 | 0; //@line 9943
   HEAP32[$281 >> 2] = $42; //@line 9944
   $282 = $ReallocAsyncCtx2 + 92 | 0; //@line 9945
   HEAP32[$282 >> 2] = $44; //@line 9946
   $283 = $ReallocAsyncCtx2 + 96 | 0; //@line 9947
   HEAP32[$283 >> 2] = $46; //@line 9948
   $284 = $ReallocAsyncCtx2 + 100 | 0; //@line 9949
   HEAP32[$284 >> 2] = $50; //@line 9950
   $285 = $ReallocAsyncCtx2 + 104 | 0; //@line 9951
   HEAP32[$285 >> 2] = $52; //@line 9952
   $286 = $ReallocAsyncCtx2 + 108 | 0; //@line 9953
   HEAP32[$286 >> 2] = $54; //@line 9954
   $287 = $ReallocAsyncCtx2 + 112 | 0; //@line 9955
   HEAP32[$287 >> 2] = $56; //@line 9956
   $288 = $ReallocAsyncCtx2 + 116 | 0; //@line 9957
   HEAP32[$288 >> 2] = $58; //@line 9958
   $289 = $ReallocAsyncCtx2 + 120 | 0; //@line 9959
   HEAP32[$289 >> 2] = $60; //@line 9960
   $290 = $ReallocAsyncCtx2 + 124 | 0; //@line 9961
   HEAP32[$290 >> 2] = $62; //@line 9962
   $291 = $ReallocAsyncCtx2 + 128 | 0; //@line 9963
   HEAP8[$291 >> 0] = $64; //@line 9964
   $292 = $ReallocAsyncCtx2 + 132 | 0; //@line 9965
   HEAP32[$292 >> 2] = $66; //@line 9966
   $293 = $ReallocAsyncCtx2 + 136 | 0; //@line 9967
   HEAP32[$293 >> 2] = $68; //@line 9968
   $294 = $ReallocAsyncCtx2 + 140 | 0; //@line 9969
   HEAP32[$294 >> 2] = $70; //@line 9970
   $295 = $ReallocAsyncCtx2 + 144 | 0; //@line 9971
   HEAP32[$295 >> 2] = $72; //@line 9972
   $296 = $ReallocAsyncCtx2 + 148 | 0; //@line 9973
   HEAP32[$296 >> 2] = $74; //@line 9974
   $297 = $ReallocAsyncCtx2 + 152 | 0; //@line 9975
   HEAP32[$297 >> 2] = $76; //@line 9976
   $298 = $ReallocAsyncCtx2 + 156 | 0; //@line 9977
   HEAP8[$298 >> 0] = $78; //@line 9978
   $299 = $ReallocAsyncCtx2 + 160 | 0; //@line 9979
   HEAP32[$299 >> 2] = $80; //@line 9980
   $300 = $ReallocAsyncCtx2 + 164 | 0; //@line 9981
   HEAP8[$300 >> 0] = $82; //@line 9982
   $301 = $ReallocAsyncCtx2 + 168 | 0; //@line 9983
   HEAP32[$301 >> 2] = $84; //@line 9984
   $302 = $ReallocAsyncCtx2 + 172 | 0; //@line 9985
   HEAP32[$302 >> 2] = $86; //@line 9986
   $303 = $ReallocAsyncCtx2 + 176 | 0; //@line 9987
   HEAP32[$303 >> 2] = $88; //@line 9988
   $304 = $ReallocAsyncCtx2 + 180 | 0; //@line 9989
   HEAP32[$304 >> 2] = $90; //@line 9990
   $305 = $ReallocAsyncCtx2 + 184 | 0; //@line 9991
   HEAP32[$305 >> 2] = $92; //@line 9992
   $306 = $ReallocAsyncCtx2 + 188 | 0; //@line 9993
   HEAP32[$306 >> 2] = $94; //@line 9994
   $307 = $ReallocAsyncCtx2 + 192 | 0; //@line 9995
   HEAP32[$307 >> 2] = $96; //@line 9996
   $308 = $ReallocAsyncCtx2 + 196 | 0; //@line 9997
   HEAP32[$308 >> 2] = $102; //@line 9998
   $309 = $ReallocAsyncCtx2 + 200 | 0; //@line 9999
   HEAP32[$309 >> 2] = $104; //@line 10000
   $310 = $ReallocAsyncCtx2 + 204 | 0; //@line 10001
   HEAP32[$310 >> 2] = $110; //@line 10002
   $311 = $ReallocAsyncCtx2 + 208 | 0; //@line 10003
   HEAP32[$311 >> 2] = $112; //@line 10004
   $312 = $ReallocAsyncCtx2 + 212 | 0; //@line 10005
   HEAP32[$312 >> 2] = $114; //@line 10006
   $313 = $ReallocAsyncCtx2 + 216 | 0; //@line 10007
   HEAP32[$313 >> 2] = $116; //@line 10008
   $314 = $ReallocAsyncCtx2 + 220 | 0; //@line 10009
   HEAP32[$314 >> 2] = $118; //@line 10010
   $315 = $ReallocAsyncCtx2 + 224 | 0; //@line 10011
   HEAP32[$315 >> 2] = $120; //@line 10012
   $316 = $ReallocAsyncCtx2 + 228 | 0; //@line 10013
   HEAP32[$316 >> 2] = $122; //@line 10014
   $317 = $ReallocAsyncCtx2 + 232 | 0; //@line 10015
   HEAP32[$317 >> 2] = $124; //@line 10016
   sp = STACKTOP; //@line 10017
   return;
  }
  HEAP8[___async_retval >> 0] = $259; //@line 10021
  ___async_unwind = 0; //@line 10022
  HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 10023
  $260 = $ReallocAsyncCtx2 + 4 | 0; //@line 10024
  HEAP32[$260 >> 2] = $2; //@line 10025
  $261 = $ReallocAsyncCtx2 + 8 | 0; //@line 10026
  HEAP32[$261 >> 2] = $4; //@line 10027
  $262 = $ReallocAsyncCtx2 + 12 | 0; //@line 10028
  HEAP32[$262 >> 2] = $6; //@line 10029
  $263 = $ReallocAsyncCtx2 + 16 | 0; //@line 10030
  HEAP32[$263 >> 2] = $8; //@line 10031
  $264 = $ReallocAsyncCtx2 + 20 | 0; //@line 10032
  HEAP32[$264 >> 2] = $10; //@line 10033
  $265 = $ReallocAsyncCtx2 + 24 | 0; //@line 10034
  HEAP32[$265 >> 2] = $12; //@line 10035
  $266 = $ReallocAsyncCtx2 + 28 | 0; //@line 10036
  HEAP32[$266 >> 2] = $14; //@line 10037
  $267 = $ReallocAsyncCtx2 + 32 | 0; //@line 10038
  HEAP32[$267 >> 2] = $16; //@line 10039
  $268 = $ReallocAsyncCtx2 + 36 | 0; //@line 10040
  HEAP32[$268 >> 2] = $18; //@line 10041
  $269 = $ReallocAsyncCtx2 + 40 | 0; //@line 10042
  HEAP32[$269 >> 2] = $20; //@line 10043
  $270 = $ReallocAsyncCtx2 + 44 | 0; //@line 10044
  HEAP32[$270 >> 2] = $22; //@line 10045
  $271 = $ReallocAsyncCtx2 + 48 | 0; //@line 10046
  HEAP32[$271 >> 2] = $24; //@line 10047
  $272 = $ReallocAsyncCtx2 + 52 | 0; //@line 10048
  HEAP32[$272 >> 2] = $26; //@line 10049
  $273 = $ReallocAsyncCtx2 + 56 | 0; //@line 10050
  HEAP32[$273 >> 2] = $28; //@line 10051
  $274 = $ReallocAsyncCtx2 + 60 | 0; //@line 10052
  HEAP32[$274 >> 2] = $30; //@line 10053
  $275 = $ReallocAsyncCtx2 + 64 | 0; //@line 10054
  HEAP32[$275 >> 2] = $32; //@line 10055
  $276 = $ReallocAsyncCtx2 + 68 | 0; //@line 10056
  HEAP32[$276 >> 2] = $34; //@line 10057
  $277 = $ReallocAsyncCtx2 + 72 | 0; //@line 10058
  HEAP32[$277 >> 2] = $36; //@line 10059
  $278 = $ReallocAsyncCtx2 + 76 | 0; //@line 10060
  HEAP32[$278 >> 2] = $38; //@line 10061
  $279 = $ReallocAsyncCtx2 + 80 | 0; //@line 10062
  HEAP32[$279 >> 2] = $40; //@line 10063
  $280 = $ReallocAsyncCtx2 + 84 | 0; //@line 10064
  HEAP8[$280 >> 0] = $248; //@line 10065
  $281 = $ReallocAsyncCtx2 + 88 | 0; //@line 10066
  HEAP32[$281 >> 2] = $42; //@line 10067
  $282 = $ReallocAsyncCtx2 + 92 | 0; //@line 10068
  HEAP32[$282 >> 2] = $44; //@line 10069
  $283 = $ReallocAsyncCtx2 + 96 | 0; //@line 10070
  HEAP32[$283 >> 2] = $46; //@line 10071
  $284 = $ReallocAsyncCtx2 + 100 | 0; //@line 10072
  HEAP32[$284 >> 2] = $50; //@line 10073
  $285 = $ReallocAsyncCtx2 + 104 | 0; //@line 10074
  HEAP32[$285 >> 2] = $52; //@line 10075
  $286 = $ReallocAsyncCtx2 + 108 | 0; //@line 10076
  HEAP32[$286 >> 2] = $54; //@line 10077
  $287 = $ReallocAsyncCtx2 + 112 | 0; //@line 10078
  HEAP32[$287 >> 2] = $56; //@line 10079
  $288 = $ReallocAsyncCtx2 + 116 | 0; //@line 10080
  HEAP32[$288 >> 2] = $58; //@line 10081
  $289 = $ReallocAsyncCtx2 + 120 | 0; //@line 10082
  HEAP32[$289 >> 2] = $60; //@line 10083
  $290 = $ReallocAsyncCtx2 + 124 | 0; //@line 10084
  HEAP32[$290 >> 2] = $62; //@line 10085
  $291 = $ReallocAsyncCtx2 + 128 | 0; //@line 10086
  HEAP8[$291 >> 0] = $64; //@line 10087
  $292 = $ReallocAsyncCtx2 + 132 | 0; //@line 10088
  HEAP32[$292 >> 2] = $66; //@line 10089
  $293 = $ReallocAsyncCtx2 + 136 | 0; //@line 10090
  HEAP32[$293 >> 2] = $68; //@line 10091
  $294 = $ReallocAsyncCtx2 + 140 | 0; //@line 10092
  HEAP32[$294 >> 2] = $70; //@line 10093
  $295 = $ReallocAsyncCtx2 + 144 | 0; //@line 10094
  HEAP32[$295 >> 2] = $72; //@line 10095
  $296 = $ReallocAsyncCtx2 + 148 | 0; //@line 10096
  HEAP32[$296 >> 2] = $74; //@line 10097
  $297 = $ReallocAsyncCtx2 + 152 | 0; //@line 10098
  HEAP32[$297 >> 2] = $76; //@line 10099
  $298 = $ReallocAsyncCtx2 + 156 | 0; //@line 10100
  HEAP8[$298 >> 0] = $78; //@line 10101
  $299 = $ReallocAsyncCtx2 + 160 | 0; //@line 10102
  HEAP32[$299 >> 2] = $80; //@line 10103
  $300 = $ReallocAsyncCtx2 + 164 | 0; //@line 10104
  HEAP8[$300 >> 0] = $82; //@line 10105
  $301 = $ReallocAsyncCtx2 + 168 | 0; //@line 10106
  HEAP32[$301 >> 2] = $84; //@line 10107
  $302 = $ReallocAsyncCtx2 + 172 | 0; //@line 10108
  HEAP32[$302 >> 2] = $86; //@line 10109
  $303 = $ReallocAsyncCtx2 + 176 | 0; //@line 10110
  HEAP32[$303 >> 2] = $88; //@line 10111
  $304 = $ReallocAsyncCtx2 + 180 | 0; //@line 10112
  HEAP32[$304 >> 2] = $90; //@line 10113
  $305 = $ReallocAsyncCtx2 + 184 | 0; //@line 10114
  HEAP32[$305 >> 2] = $92; //@line 10115
  $306 = $ReallocAsyncCtx2 + 188 | 0; //@line 10116
  HEAP32[$306 >> 2] = $94; //@line 10117
  $307 = $ReallocAsyncCtx2 + 192 | 0; //@line 10118
  HEAP32[$307 >> 2] = $96; //@line 10119
  $308 = $ReallocAsyncCtx2 + 196 | 0; //@line 10120
  HEAP32[$308 >> 2] = $102; //@line 10121
  $309 = $ReallocAsyncCtx2 + 200 | 0; //@line 10122
  HEAP32[$309 >> 2] = $104; //@line 10123
  $310 = $ReallocAsyncCtx2 + 204 | 0; //@line 10124
  HEAP32[$310 >> 2] = $110; //@line 10125
  $311 = $ReallocAsyncCtx2 + 208 | 0; //@line 10126
  HEAP32[$311 >> 2] = $112; //@line 10127
  $312 = $ReallocAsyncCtx2 + 212 | 0; //@line 10128
  HEAP32[$312 >> 2] = $114; //@line 10129
  $313 = $ReallocAsyncCtx2 + 216 | 0; //@line 10130
  HEAP32[$313 >> 2] = $116; //@line 10131
  $314 = $ReallocAsyncCtx2 + 220 | 0; //@line 10132
  HEAP32[$314 >> 2] = $118; //@line 10133
  $315 = $ReallocAsyncCtx2 + 224 | 0; //@line 10134
  HEAP32[$315 >> 2] = $120; //@line 10135
  $316 = $ReallocAsyncCtx2 + 228 | 0; //@line 10136
  HEAP32[$316 >> 2] = $122; //@line 10137
  $317 = $ReallocAsyncCtx2 + 232 | 0; //@line 10138
  HEAP32[$317 >> 2] = $124; //@line 10139
  sp = STACKTOP; //@line 10140
  return;
 } else if ((label | 0) == 13) {
  $321 = HEAP32[$319 >> 2] | 0; //@line 10144
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 10145
  $322 = FUNCTION_TABLE_ii[$321 & 15]($96) | 0; //@line 10146
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 10149
   $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 10150
   HEAP32[$323 >> 2] = $2; //@line 10151
   $324 = $ReallocAsyncCtx3 + 8 | 0; //@line 10152
   HEAP32[$324 >> 2] = $4; //@line 10153
   $325 = $ReallocAsyncCtx3 + 12 | 0; //@line 10154
   HEAP32[$325 >> 2] = $6; //@line 10155
   $326 = $ReallocAsyncCtx3 + 16 | 0; //@line 10156
   HEAP32[$326 >> 2] = $8; //@line 10157
   $327 = $ReallocAsyncCtx3 + 20 | 0; //@line 10158
   HEAP32[$327 >> 2] = $10; //@line 10159
   $328 = $ReallocAsyncCtx3 + 24 | 0; //@line 10160
   HEAP32[$328 >> 2] = $12; //@line 10161
   $329 = $ReallocAsyncCtx3 + 28 | 0; //@line 10162
   HEAP32[$329 >> 2] = $14; //@line 10163
   $330 = $ReallocAsyncCtx3 + 32 | 0; //@line 10164
   HEAP32[$330 >> 2] = $16; //@line 10165
   $331 = $ReallocAsyncCtx3 + 36 | 0; //@line 10166
   HEAP32[$331 >> 2] = $18; //@line 10167
   $332 = $ReallocAsyncCtx3 + 40 | 0; //@line 10168
   HEAP32[$332 >> 2] = $20; //@line 10169
   $333 = $ReallocAsyncCtx3 + 44 | 0; //@line 10170
   HEAP32[$333 >> 2] = $22; //@line 10171
   $334 = $ReallocAsyncCtx3 + 48 | 0; //@line 10172
   HEAP32[$334 >> 2] = $24; //@line 10173
   $335 = $ReallocAsyncCtx3 + 52 | 0; //@line 10174
   HEAP32[$335 >> 2] = $26; //@line 10175
   $336 = $ReallocAsyncCtx3 + 56 | 0; //@line 10176
   HEAP32[$336 >> 2] = $28; //@line 10177
   $337 = $ReallocAsyncCtx3 + 60 | 0; //@line 10178
   HEAP32[$337 >> 2] = $30; //@line 10179
   $338 = $ReallocAsyncCtx3 + 64 | 0; //@line 10180
   HEAP32[$338 >> 2] = $32; //@line 10181
   $339 = $ReallocAsyncCtx3 + 68 | 0; //@line 10182
   HEAP32[$339 >> 2] = $34; //@line 10183
   $340 = $ReallocAsyncCtx3 + 72 | 0; //@line 10184
   HEAP32[$340 >> 2] = $36; //@line 10185
   $341 = $ReallocAsyncCtx3 + 76 | 0; //@line 10186
   HEAP32[$341 >> 2] = $38; //@line 10187
   $342 = $ReallocAsyncCtx3 + 80 | 0; //@line 10188
   HEAP32[$342 >> 2] = $40; //@line 10189
   $343 = $ReallocAsyncCtx3 + 84 | 0; //@line 10190
   HEAP32[$343 >> 2] = $42; //@line 10191
   $344 = $ReallocAsyncCtx3 + 88 | 0; //@line 10192
   HEAP32[$344 >> 2] = $44; //@line 10193
   $345 = $ReallocAsyncCtx3 + 92 | 0; //@line 10194
   HEAP32[$345 >> 2] = $46; //@line 10195
   $346 = $ReallocAsyncCtx3 + 96 | 0; //@line 10196
   HEAP32[$346 >> 2] = $50; //@line 10197
   $347 = $ReallocAsyncCtx3 + 100 | 0; //@line 10198
   HEAP32[$347 >> 2] = $52; //@line 10199
   $348 = $ReallocAsyncCtx3 + 104 | 0; //@line 10200
   HEAP32[$348 >> 2] = $54; //@line 10201
   $349 = $ReallocAsyncCtx3 + 108 | 0; //@line 10202
   HEAP8[$349 >> 0] = $127; //@line 10203
   $350 = $ReallocAsyncCtx3 + 112 | 0; //@line 10204
   HEAP32[$350 >> 2] = $56; //@line 10205
   $351 = $ReallocAsyncCtx3 + 116 | 0; //@line 10206
   HEAP32[$351 >> 2] = $58; //@line 10207
   $352 = $ReallocAsyncCtx3 + 120 | 0; //@line 10208
   HEAP32[$352 >> 2] = $60; //@line 10209
   $353 = $ReallocAsyncCtx3 + 124 | 0; //@line 10210
   HEAP32[$353 >> 2] = $62; //@line 10211
   $354 = $ReallocAsyncCtx3 + 128 | 0; //@line 10212
   HEAP8[$354 >> 0] = $64; //@line 10213
   $355 = $ReallocAsyncCtx3 + 132 | 0; //@line 10214
   HEAP32[$355 >> 2] = $66; //@line 10215
   $356 = $ReallocAsyncCtx3 + 136 | 0; //@line 10216
   HEAP32[$356 >> 2] = $68; //@line 10217
   $357 = $ReallocAsyncCtx3 + 140 | 0; //@line 10218
   HEAP32[$357 >> 2] = $70; //@line 10219
   $358 = $ReallocAsyncCtx3 + 144 | 0; //@line 10220
   HEAP32[$358 >> 2] = $72; //@line 10221
   $359 = $ReallocAsyncCtx3 + 148 | 0; //@line 10222
   HEAP32[$359 >> 2] = $74; //@line 10223
   $360 = $ReallocAsyncCtx3 + 152 | 0; //@line 10224
   HEAP32[$360 >> 2] = $76; //@line 10225
   $361 = $ReallocAsyncCtx3 + 156 | 0; //@line 10226
   HEAP8[$361 >> 0] = $78; //@line 10227
   $362 = $ReallocAsyncCtx3 + 160 | 0; //@line 10228
   HEAP32[$362 >> 2] = $80; //@line 10229
   $363 = $ReallocAsyncCtx3 + 164 | 0; //@line 10230
   HEAP8[$363 >> 0] = $82; //@line 10231
   $364 = $ReallocAsyncCtx3 + 168 | 0; //@line 10232
   HEAP32[$364 >> 2] = $84; //@line 10233
   $365 = $ReallocAsyncCtx3 + 172 | 0; //@line 10234
   HEAP32[$365 >> 2] = $86; //@line 10235
   $366 = $ReallocAsyncCtx3 + 176 | 0; //@line 10236
   HEAP32[$366 >> 2] = $88; //@line 10237
   $367 = $ReallocAsyncCtx3 + 180 | 0; //@line 10238
   HEAP32[$367 >> 2] = $90; //@line 10239
   $368 = $ReallocAsyncCtx3 + 184 | 0; //@line 10240
   HEAP32[$368 >> 2] = $92; //@line 10241
   $369 = $ReallocAsyncCtx3 + 188 | 0; //@line 10242
   HEAP32[$369 >> 2] = $94; //@line 10243
   $370 = $ReallocAsyncCtx3 + 192 | 0; //@line 10244
   HEAP32[$370 >> 2] = $96; //@line 10245
   $371 = $ReallocAsyncCtx3 + 196 | 0; //@line 10246
   HEAP32[$371 >> 2] = $102; //@line 10247
   $372 = $ReallocAsyncCtx3 + 200 | 0; //@line 10248
   HEAP32[$372 >> 2] = $104; //@line 10249
   $373 = $ReallocAsyncCtx3 + 204 | 0; //@line 10250
   HEAP32[$373 >> 2] = $110; //@line 10251
   $374 = $ReallocAsyncCtx3 + 208 | 0; //@line 10252
   HEAP32[$374 >> 2] = $112; //@line 10253
   $375 = $ReallocAsyncCtx3 + 212 | 0; //@line 10254
   HEAP32[$375 >> 2] = $114; //@line 10255
   $376 = $ReallocAsyncCtx3 + 216 | 0; //@line 10256
   HEAP32[$376 >> 2] = $116; //@line 10257
   $377 = $ReallocAsyncCtx3 + 220 | 0; //@line 10258
   HEAP32[$377 >> 2] = $118; //@line 10259
   $378 = $ReallocAsyncCtx3 + 224 | 0; //@line 10260
   HEAP32[$378 >> 2] = $120; //@line 10261
   $379 = $ReallocAsyncCtx3 + 228 | 0; //@line 10262
   HEAP32[$379 >> 2] = $122; //@line 10263
   $380 = $ReallocAsyncCtx3 + 232 | 0; //@line 10264
   HEAP32[$380 >> 2] = $124; //@line 10265
   sp = STACKTOP; //@line 10266
   return;
  }
  HEAP8[___async_retval >> 0] = $322; //@line 10270
  ___async_unwind = 0; //@line 10271
  HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 10272
  $323 = $ReallocAsyncCtx3 + 4 | 0; //@line 10273
  HEAP32[$323 >> 2] = $2; //@line 10274
  $324 = $ReallocAsyncCtx3 + 8 | 0; //@line 10275
  HEAP32[$324 >> 2] = $4; //@line 10276
  $325 = $ReallocAsyncCtx3 + 12 | 0; //@line 10277
  HEAP32[$325 >> 2] = $6; //@line 10278
  $326 = $ReallocAsyncCtx3 + 16 | 0; //@line 10279
  HEAP32[$326 >> 2] = $8; //@line 10280
  $327 = $ReallocAsyncCtx3 + 20 | 0; //@line 10281
  HEAP32[$327 >> 2] = $10; //@line 10282
  $328 = $ReallocAsyncCtx3 + 24 | 0; //@line 10283
  HEAP32[$328 >> 2] = $12; //@line 10284
  $329 = $ReallocAsyncCtx3 + 28 | 0; //@line 10285
  HEAP32[$329 >> 2] = $14; //@line 10286
  $330 = $ReallocAsyncCtx3 + 32 | 0; //@line 10287
  HEAP32[$330 >> 2] = $16; //@line 10288
  $331 = $ReallocAsyncCtx3 + 36 | 0; //@line 10289
  HEAP32[$331 >> 2] = $18; //@line 10290
  $332 = $ReallocAsyncCtx3 + 40 | 0; //@line 10291
  HEAP32[$332 >> 2] = $20; //@line 10292
  $333 = $ReallocAsyncCtx3 + 44 | 0; //@line 10293
  HEAP32[$333 >> 2] = $22; //@line 10294
  $334 = $ReallocAsyncCtx3 + 48 | 0; //@line 10295
  HEAP32[$334 >> 2] = $24; //@line 10296
  $335 = $ReallocAsyncCtx3 + 52 | 0; //@line 10297
  HEAP32[$335 >> 2] = $26; //@line 10298
  $336 = $ReallocAsyncCtx3 + 56 | 0; //@line 10299
  HEAP32[$336 >> 2] = $28; //@line 10300
  $337 = $ReallocAsyncCtx3 + 60 | 0; //@line 10301
  HEAP32[$337 >> 2] = $30; //@line 10302
  $338 = $ReallocAsyncCtx3 + 64 | 0; //@line 10303
  HEAP32[$338 >> 2] = $32; //@line 10304
  $339 = $ReallocAsyncCtx3 + 68 | 0; //@line 10305
  HEAP32[$339 >> 2] = $34; //@line 10306
  $340 = $ReallocAsyncCtx3 + 72 | 0; //@line 10307
  HEAP32[$340 >> 2] = $36; //@line 10308
  $341 = $ReallocAsyncCtx3 + 76 | 0; //@line 10309
  HEAP32[$341 >> 2] = $38; //@line 10310
  $342 = $ReallocAsyncCtx3 + 80 | 0; //@line 10311
  HEAP32[$342 >> 2] = $40; //@line 10312
  $343 = $ReallocAsyncCtx3 + 84 | 0; //@line 10313
  HEAP32[$343 >> 2] = $42; //@line 10314
  $344 = $ReallocAsyncCtx3 + 88 | 0; //@line 10315
  HEAP32[$344 >> 2] = $44; //@line 10316
  $345 = $ReallocAsyncCtx3 + 92 | 0; //@line 10317
  HEAP32[$345 >> 2] = $46; //@line 10318
  $346 = $ReallocAsyncCtx3 + 96 | 0; //@line 10319
  HEAP32[$346 >> 2] = $50; //@line 10320
  $347 = $ReallocAsyncCtx3 + 100 | 0; //@line 10321
  HEAP32[$347 >> 2] = $52; //@line 10322
  $348 = $ReallocAsyncCtx3 + 104 | 0; //@line 10323
  HEAP32[$348 >> 2] = $54; //@line 10324
  $349 = $ReallocAsyncCtx3 + 108 | 0; //@line 10325
  HEAP8[$349 >> 0] = $127; //@line 10326
  $350 = $ReallocAsyncCtx3 + 112 | 0; //@line 10327
  HEAP32[$350 >> 2] = $56; //@line 10328
  $351 = $ReallocAsyncCtx3 + 116 | 0; //@line 10329
  HEAP32[$351 >> 2] = $58; //@line 10330
  $352 = $ReallocAsyncCtx3 + 120 | 0; //@line 10331
  HEAP32[$352 >> 2] = $60; //@line 10332
  $353 = $ReallocAsyncCtx3 + 124 | 0; //@line 10333
  HEAP32[$353 >> 2] = $62; //@line 10334
  $354 = $ReallocAsyncCtx3 + 128 | 0; //@line 10335
  HEAP8[$354 >> 0] = $64; //@line 10336
  $355 = $ReallocAsyncCtx3 + 132 | 0; //@line 10337
  HEAP32[$355 >> 2] = $66; //@line 10338
  $356 = $ReallocAsyncCtx3 + 136 | 0; //@line 10339
  HEAP32[$356 >> 2] = $68; //@line 10340
  $357 = $ReallocAsyncCtx3 + 140 | 0; //@line 10341
  HEAP32[$357 >> 2] = $70; //@line 10342
  $358 = $ReallocAsyncCtx3 + 144 | 0; //@line 10343
  HEAP32[$358 >> 2] = $72; //@line 10344
  $359 = $ReallocAsyncCtx3 + 148 | 0; //@line 10345
  HEAP32[$359 >> 2] = $74; //@line 10346
  $360 = $ReallocAsyncCtx3 + 152 | 0; //@line 10347
  HEAP32[$360 >> 2] = $76; //@line 10348
  $361 = $ReallocAsyncCtx3 + 156 | 0; //@line 10349
  HEAP8[$361 >> 0] = $78; //@line 10350
  $362 = $ReallocAsyncCtx3 + 160 | 0; //@line 10351
  HEAP32[$362 >> 2] = $80; //@line 10352
  $363 = $ReallocAsyncCtx3 + 164 | 0; //@line 10353
  HEAP8[$363 >> 0] = $82; //@line 10354
  $364 = $ReallocAsyncCtx3 + 168 | 0; //@line 10355
  HEAP32[$364 >> 2] = $84; //@line 10356
  $365 = $ReallocAsyncCtx3 + 172 | 0; //@line 10357
  HEAP32[$365 >> 2] = $86; //@line 10358
  $366 = $ReallocAsyncCtx3 + 176 | 0; //@line 10359
  HEAP32[$366 >> 2] = $88; //@line 10360
  $367 = $ReallocAsyncCtx3 + 180 | 0; //@line 10361
  HEAP32[$367 >> 2] = $90; //@line 10362
  $368 = $ReallocAsyncCtx3 + 184 | 0; //@line 10363
  HEAP32[$368 >> 2] = $92; //@line 10364
  $369 = $ReallocAsyncCtx3 + 188 | 0; //@line 10365
  HEAP32[$369 >> 2] = $94; //@line 10366
  $370 = $ReallocAsyncCtx3 + 192 | 0; //@line 10367
  HEAP32[$370 >> 2] = $96; //@line 10368
  $371 = $ReallocAsyncCtx3 + 196 | 0; //@line 10369
  HEAP32[$371 >> 2] = $102; //@line 10370
  $372 = $ReallocAsyncCtx3 + 200 | 0; //@line 10371
  HEAP32[$372 >> 2] = $104; //@line 10372
  $373 = $ReallocAsyncCtx3 + 204 | 0; //@line 10373
  HEAP32[$373 >> 2] = $110; //@line 10374
  $374 = $ReallocAsyncCtx3 + 208 | 0; //@line 10375
  HEAP32[$374 >> 2] = $112; //@line 10376
  $375 = $ReallocAsyncCtx3 + 212 | 0; //@line 10377
  HEAP32[$375 >> 2] = $114; //@line 10378
  $376 = $ReallocAsyncCtx3 + 216 | 0; //@line 10379
  HEAP32[$376 >> 2] = $116; //@line 10380
  $377 = $ReallocAsyncCtx3 + 220 | 0; //@line 10381
  HEAP32[$377 >> 2] = $118; //@line 10382
  $378 = $ReallocAsyncCtx3 + 224 | 0; //@line 10383
  HEAP32[$378 >> 2] = $120; //@line 10384
  $379 = $ReallocAsyncCtx3 + 228 | 0; //@line 10385
  HEAP32[$379 >> 2] = $122; //@line 10386
  $380 = $ReallocAsyncCtx3 + 232 | 0; //@line 10387
  HEAP32[$380 >> 2] = $124; //@line 10388
  sp = STACKTOP; //@line 10389
  return;
 } else if ((label | 0) == 18) {
  $400 = HEAP8[$68 + ($127 & 255) >> 0] | 0; //@line 10396
  HEAP32[$42 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 10417
  HEAP32[$34 >> 2] = 0; //@line 10418
  $421 = $$0$be + 6 << 24 >> 24; //@line 10419
  HEAP8[$56 >> 0] = HEAP8[$68 + ($$0$be + 5 & 255) >> 0] | 0; //@line 10423
  $427 = HEAP32[(HEAP32[$50 >> 2] | 0) + 8 >> 2] | 0; //@line 10426
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 10427
  $428 = FUNCTION_TABLE_iiii[$427 & 31]($94, $400, $10) | 0; //@line 10428
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 10431
   $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 10432
   HEAP32[$429 >> 2] = $2; //@line 10433
   $430 = $ReallocAsyncCtx4 + 8 | 0; //@line 10434
   HEAP32[$430 >> 2] = $4; //@line 10435
   $431 = $ReallocAsyncCtx4 + 12 | 0; //@line 10436
   HEAP32[$431 >> 2] = $6; //@line 10437
   $432 = $ReallocAsyncCtx4 + 16 | 0; //@line 10438
   HEAP32[$432 >> 2] = $8; //@line 10439
   $433 = $ReallocAsyncCtx4 + 20 | 0; //@line 10440
   HEAP32[$433 >> 2] = $10; //@line 10441
   $434 = $ReallocAsyncCtx4 + 24 | 0; //@line 10442
   HEAP32[$434 >> 2] = $12; //@line 10443
   $435 = $ReallocAsyncCtx4 + 28 | 0; //@line 10444
   HEAP32[$435 >> 2] = $14; //@line 10445
   $436 = $ReallocAsyncCtx4 + 32 | 0; //@line 10446
   HEAP32[$436 >> 2] = $16; //@line 10447
   $437 = $ReallocAsyncCtx4 + 36 | 0; //@line 10448
   HEAP32[$437 >> 2] = $18; //@line 10449
   $438 = $ReallocAsyncCtx4 + 40 | 0; //@line 10450
   HEAP32[$438 >> 2] = $20; //@line 10451
   $439 = $ReallocAsyncCtx4 + 44 | 0; //@line 10452
   HEAP32[$439 >> 2] = $22; //@line 10453
   $440 = $ReallocAsyncCtx4 + 48 | 0; //@line 10454
   HEAP32[$440 >> 2] = $24; //@line 10455
   $441 = $ReallocAsyncCtx4 + 52 | 0; //@line 10456
   HEAP32[$441 >> 2] = $26; //@line 10457
   $442 = $ReallocAsyncCtx4 + 56 | 0; //@line 10458
   HEAP32[$442 >> 2] = $28; //@line 10459
   $443 = $ReallocAsyncCtx4 + 60 | 0; //@line 10460
   HEAP32[$443 >> 2] = $30; //@line 10461
   $444 = $ReallocAsyncCtx4 + 64 | 0; //@line 10462
   HEAP32[$444 >> 2] = $32; //@line 10463
   $445 = $ReallocAsyncCtx4 + 68 | 0; //@line 10464
   HEAP32[$445 >> 2] = $34; //@line 10465
   $446 = $ReallocAsyncCtx4 + 72 | 0; //@line 10466
   HEAP32[$446 >> 2] = $36; //@line 10467
   $447 = $ReallocAsyncCtx4 + 76 | 0; //@line 10468
   HEAP32[$447 >> 2] = $38; //@line 10469
   $448 = $ReallocAsyncCtx4 + 80 | 0; //@line 10470
   HEAP32[$448 >> 2] = $40; //@line 10471
   $449 = $ReallocAsyncCtx4 + 84 | 0; //@line 10472
   HEAP32[$449 >> 2] = $42; //@line 10473
   $450 = $ReallocAsyncCtx4 + 88 | 0; //@line 10474
   HEAP32[$450 >> 2] = $44; //@line 10475
   $451 = $ReallocAsyncCtx4 + 92 | 0; //@line 10476
   HEAP32[$451 >> 2] = $46; //@line 10477
   $452 = $ReallocAsyncCtx4 + 96 | 0; //@line 10478
   HEAP32[$452 >> 2] = $50; //@line 10479
   $453 = $ReallocAsyncCtx4 + 100 | 0; //@line 10480
   HEAP32[$453 >> 2] = $52; //@line 10481
   $454 = $ReallocAsyncCtx4 + 104 | 0; //@line 10482
   HEAP32[$454 >> 2] = $54; //@line 10483
   $455 = $ReallocAsyncCtx4 + 108 | 0; //@line 10484
   HEAP32[$455 >> 2] = $56; //@line 10485
   $456 = $ReallocAsyncCtx4 + 112 | 0; //@line 10486
   HEAP8[$456 >> 0] = $421; //@line 10487
   $457 = $ReallocAsyncCtx4 + 116 | 0; //@line 10488
   HEAP32[$457 >> 2] = $58; //@line 10489
   $458 = $ReallocAsyncCtx4 + 120 | 0; //@line 10490
   HEAP32[$458 >> 2] = $60; //@line 10491
   $459 = $ReallocAsyncCtx4 + 124 | 0; //@line 10492
   HEAP32[$459 >> 2] = $62; //@line 10493
   $460 = $ReallocAsyncCtx4 + 128 | 0; //@line 10494
   HEAP8[$460 >> 0] = $64; //@line 10495
   $461 = $ReallocAsyncCtx4 + 132 | 0; //@line 10496
   HEAP32[$461 >> 2] = $66; //@line 10497
   $462 = $ReallocAsyncCtx4 + 136 | 0; //@line 10498
   HEAP32[$462 >> 2] = $68; //@line 10499
   $463 = $ReallocAsyncCtx4 + 140 | 0; //@line 10500
   HEAP32[$463 >> 2] = $70; //@line 10501
   $464 = $ReallocAsyncCtx4 + 144 | 0; //@line 10502
   HEAP32[$464 >> 2] = $72; //@line 10503
   $465 = $ReallocAsyncCtx4 + 148 | 0; //@line 10504
   HEAP32[$465 >> 2] = $74; //@line 10505
   $466 = $ReallocAsyncCtx4 + 152 | 0; //@line 10506
   HEAP32[$466 >> 2] = $76; //@line 10507
   $467 = $ReallocAsyncCtx4 + 156 | 0; //@line 10508
   HEAP8[$467 >> 0] = $78; //@line 10509
   $468 = $ReallocAsyncCtx4 + 160 | 0; //@line 10510
   HEAP32[$468 >> 2] = $80; //@line 10511
   $469 = $ReallocAsyncCtx4 + 164 | 0; //@line 10512
   HEAP8[$469 >> 0] = $82; //@line 10513
   $470 = $ReallocAsyncCtx4 + 168 | 0; //@line 10514
   HEAP32[$470 >> 2] = $84; //@line 10515
   $471 = $ReallocAsyncCtx4 + 172 | 0; //@line 10516
   HEAP32[$471 >> 2] = $86; //@line 10517
   $472 = $ReallocAsyncCtx4 + 176 | 0; //@line 10518
   HEAP32[$472 >> 2] = $88; //@line 10519
   $473 = $ReallocAsyncCtx4 + 180 | 0; //@line 10520
   HEAP32[$473 >> 2] = $90; //@line 10521
   $474 = $ReallocAsyncCtx4 + 184 | 0; //@line 10522
   HEAP32[$474 >> 2] = $92; //@line 10523
   $475 = $ReallocAsyncCtx4 + 188 | 0; //@line 10524
   HEAP32[$475 >> 2] = $94; //@line 10525
   $476 = $ReallocAsyncCtx4 + 192 | 0; //@line 10526
   HEAP32[$476 >> 2] = $96; //@line 10527
   $477 = $ReallocAsyncCtx4 + 196 | 0; //@line 10528
   HEAP32[$477 >> 2] = $102; //@line 10529
   $478 = $ReallocAsyncCtx4 + 200 | 0; //@line 10530
   HEAP32[$478 >> 2] = $104; //@line 10531
   $479 = $ReallocAsyncCtx4 + 204 | 0; //@line 10532
   HEAP32[$479 >> 2] = $110; //@line 10533
   $480 = $ReallocAsyncCtx4 + 208 | 0; //@line 10534
   HEAP32[$480 >> 2] = $112; //@line 10535
   $481 = $ReallocAsyncCtx4 + 212 | 0; //@line 10536
   HEAP32[$481 >> 2] = $114; //@line 10537
   $482 = $ReallocAsyncCtx4 + 216 | 0; //@line 10538
   HEAP32[$482 >> 2] = $116; //@line 10539
   $483 = $ReallocAsyncCtx4 + 220 | 0; //@line 10540
   HEAP32[$483 >> 2] = $118; //@line 10541
   $484 = $ReallocAsyncCtx4 + 224 | 0; //@line 10542
   HEAP32[$484 >> 2] = $120; //@line 10543
   $485 = $ReallocAsyncCtx4 + 228 | 0; //@line 10544
   HEAP32[$485 >> 2] = $122; //@line 10545
   $486 = $ReallocAsyncCtx4 + 232 | 0; //@line 10546
   HEAP32[$486 >> 2] = $124; //@line 10547
   sp = STACKTOP; //@line 10548
   return;
  }
  HEAP8[___async_retval >> 0] = $428; //@line 10552
  ___async_unwind = 0; //@line 10553
  HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 10554
  $429 = $ReallocAsyncCtx4 + 4 | 0; //@line 10555
  HEAP32[$429 >> 2] = $2; //@line 10556
  $430 = $ReallocAsyncCtx4 + 8 | 0; //@line 10557
  HEAP32[$430 >> 2] = $4; //@line 10558
  $431 = $ReallocAsyncCtx4 + 12 | 0; //@line 10559
  HEAP32[$431 >> 2] = $6; //@line 10560
  $432 = $ReallocAsyncCtx4 + 16 | 0; //@line 10561
  HEAP32[$432 >> 2] = $8; //@line 10562
  $433 = $ReallocAsyncCtx4 + 20 | 0; //@line 10563
  HEAP32[$433 >> 2] = $10; //@line 10564
  $434 = $ReallocAsyncCtx4 + 24 | 0; //@line 10565
  HEAP32[$434 >> 2] = $12; //@line 10566
  $435 = $ReallocAsyncCtx4 + 28 | 0; //@line 10567
  HEAP32[$435 >> 2] = $14; //@line 10568
  $436 = $ReallocAsyncCtx4 + 32 | 0; //@line 10569
  HEAP32[$436 >> 2] = $16; //@line 10570
  $437 = $ReallocAsyncCtx4 + 36 | 0; //@line 10571
  HEAP32[$437 >> 2] = $18; //@line 10572
  $438 = $ReallocAsyncCtx4 + 40 | 0; //@line 10573
  HEAP32[$438 >> 2] = $20; //@line 10574
  $439 = $ReallocAsyncCtx4 + 44 | 0; //@line 10575
  HEAP32[$439 >> 2] = $22; //@line 10576
  $440 = $ReallocAsyncCtx4 + 48 | 0; //@line 10577
  HEAP32[$440 >> 2] = $24; //@line 10578
  $441 = $ReallocAsyncCtx4 + 52 | 0; //@line 10579
  HEAP32[$441 >> 2] = $26; //@line 10580
  $442 = $ReallocAsyncCtx4 + 56 | 0; //@line 10581
  HEAP32[$442 >> 2] = $28; //@line 10582
  $443 = $ReallocAsyncCtx4 + 60 | 0; //@line 10583
  HEAP32[$443 >> 2] = $30; //@line 10584
  $444 = $ReallocAsyncCtx4 + 64 | 0; //@line 10585
  HEAP32[$444 >> 2] = $32; //@line 10586
  $445 = $ReallocAsyncCtx4 + 68 | 0; //@line 10587
  HEAP32[$445 >> 2] = $34; //@line 10588
  $446 = $ReallocAsyncCtx4 + 72 | 0; //@line 10589
  HEAP32[$446 >> 2] = $36; //@line 10590
  $447 = $ReallocAsyncCtx4 + 76 | 0; //@line 10591
  HEAP32[$447 >> 2] = $38; //@line 10592
  $448 = $ReallocAsyncCtx4 + 80 | 0; //@line 10593
  HEAP32[$448 >> 2] = $40; //@line 10594
  $449 = $ReallocAsyncCtx4 + 84 | 0; //@line 10595
  HEAP32[$449 >> 2] = $42; //@line 10596
  $450 = $ReallocAsyncCtx4 + 88 | 0; //@line 10597
  HEAP32[$450 >> 2] = $44; //@line 10598
  $451 = $ReallocAsyncCtx4 + 92 | 0; //@line 10599
  HEAP32[$451 >> 2] = $46; //@line 10600
  $452 = $ReallocAsyncCtx4 + 96 | 0; //@line 10601
  HEAP32[$452 >> 2] = $50; //@line 10602
  $453 = $ReallocAsyncCtx4 + 100 | 0; //@line 10603
  HEAP32[$453 >> 2] = $52; //@line 10604
  $454 = $ReallocAsyncCtx4 + 104 | 0; //@line 10605
  HEAP32[$454 >> 2] = $54; //@line 10606
  $455 = $ReallocAsyncCtx4 + 108 | 0; //@line 10607
  HEAP32[$455 >> 2] = $56; //@line 10608
  $456 = $ReallocAsyncCtx4 + 112 | 0; //@line 10609
  HEAP8[$456 >> 0] = $421; //@line 10610
  $457 = $ReallocAsyncCtx4 + 116 | 0; //@line 10611
  HEAP32[$457 >> 2] = $58; //@line 10612
  $458 = $ReallocAsyncCtx4 + 120 | 0; //@line 10613
  HEAP32[$458 >> 2] = $60; //@line 10614
  $459 = $ReallocAsyncCtx4 + 124 | 0; //@line 10615
  HEAP32[$459 >> 2] = $62; //@line 10616
  $460 = $ReallocAsyncCtx4 + 128 | 0; //@line 10617
  HEAP8[$460 >> 0] = $64; //@line 10618
  $461 = $ReallocAsyncCtx4 + 132 | 0; //@line 10619
  HEAP32[$461 >> 2] = $66; //@line 10620
  $462 = $ReallocAsyncCtx4 + 136 | 0; //@line 10621
  HEAP32[$462 >> 2] = $68; //@line 10622
  $463 = $ReallocAsyncCtx4 + 140 | 0; //@line 10623
  HEAP32[$463 >> 2] = $70; //@line 10624
  $464 = $ReallocAsyncCtx4 + 144 | 0; //@line 10625
  HEAP32[$464 >> 2] = $72; //@line 10626
  $465 = $ReallocAsyncCtx4 + 148 | 0; //@line 10627
  HEAP32[$465 >> 2] = $74; //@line 10628
  $466 = $ReallocAsyncCtx4 + 152 | 0; //@line 10629
  HEAP32[$466 >> 2] = $76; //@line 10630
  $467 = $ReallocAsyncCtx4 + 156 | 0; //@line 10631
  HEAP8[$467 >> 0] = $78; //@line 10632
  $468 = $ReallocAsyncCtx4 + 160 | 0; //@line 10633
  HEAP32[$468 >> 2] = $80; //@line 10634
  $469 = $ReallocAsyncCtx4 + 164 | 0; //@line 10635
  HEAP8[$469 >> 0] = $82; //@line 10636
  $470 = $ReallocAsyncCtx4 + 168 | 0; //@line 10637
  HEAP32[$470 >> 2] = $84; //@line 10638
  $471 = $ReallocAsyncCtx4 + 172 | 0; //@line 10639
  HEAP32[$471 >> 2] = $86; //@line 10640
  $472 = $ReallocAsyncCtx4 + 176 | 0; //@line 10641
  HEAP32[$472 >> 2] = $88; //@line 10642
  $473 = $ReallocAsyncCtx4 + 180 | 0; //@line 10643
  HEAP32[$473 >> 2] = $90; //@line 10644
  $474 = $ReallocAsyncCtx4 + 184 | 0; //@line 10645
  HEAP32[$474 >> 2] = $92; //@line 10646
  $475 = $ReallocAsyncCtx4 + 188 | 0; //@line 10647
  HEAP32[$475 >> 2] = $94; //@line 10648
  $476 = $ReallocAsyncCtx4 + 192 | 0; //@line 10649
  HEAP32[$476 >> 2] = $96; //@line 10650
  $477 = $ReallocAsyncCtx4 + 196 | 0; //@line 10651
  HEAP32[$477 >> 2] = $102; //@line 10652
  $478 = $ReallocAsyncCtx4 + 200 | 0; //@line 10653
  HEAP32[$478 >> 2] = $104; //@line 10654
  $479 = $ReallocAsyncCtx4 + 204 | 0; //@line 10655
  HEAP32[$479 >> 2] = $110; //@line 10656
  $480 = $ReallocAsyncCtx4 + 208 | 0; //@line 10657
  HEAP32[$480 >> 2] = $112; //@line 10658
  $481 = $ReallocAsyncCtx4 + 212 | 0; //@line 10659
  HEAP32[$481 >> 2] = $114; //@line 10660
  $482 = $ReallocAsyncCtx4 + 216 | 0; //@line 10661
  HEAP32[$482 >> 2] = $116; //@line 10662
  $483 = $ReallocAsyncCtx4 + 220 | 0; //@line 10663
  HEAP32[$483 >> 2] = $118; //@line 10664
  $484 = $ReallocAsyncCtx4 + 224 | 0; //@line 10665
  HEAP32[$484 >> 2] = $120; //@line 10666
  $485 = $ReallocAsyncCtx4 + 228 | 0; //@line 10667
  HEAP32[$485 >> 2] = $122; //@line 10668
  $486 = $ReallocAsyncCtx4 + 232 | 0; //@line 10669
  HEAP32[$486 >> 2] = $124; //@line 10670
  sp = STACKTOP; //@line 10671
  return;
 } else if ((label | 0) == 24) {
  $507 = $$0$be + 2 << 24 >> 24; //@line 10675
  $511 = HEAPU8[$68 + ($127 & 255) >> 0] | 0; //@line 10679
  $513 = $511 >>> 5 & 1; //@line 10682
  $515 = $511 >>> 4 & 1; //@line 10685
  $518 = HEAP32[(HEAP32[$28 >> 2] | 0) + 44 >> 2] | 0; //@line 10688
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 10689
  $519 = FUNCTION_TABLE_iiii[$518 & 31]($94, $515, $513) | 0; //@line 10690
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 10693
   $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 10694
   HEAP32[$520 >> 2] = $2; //@line 10695
   $521 = $ReallocAsyncCtx5 + 8 | 0; //@line 10696
   HEAP32[$521 >> 2] = $4; //@line 10697
   $522 = $ReallocAsyncCtx5 + 12 | 0; //@line 10698
   HEAP32[$522 >> 2] = $6; //@line 10699
   $523 = $ReallocAsyncCtx5 + 16 | 0; //@line 10700
   HEAP32[$523 >> 2] = $8; //@line 10701
   $524 = $ReallocAsyncCtx5 + 20 | 0; //@line 10702
   HEAP32[$524 >> 2] = $10; //@line 10703
   $525 = $ReallocAsyncCtx5 + 24 | 0; //@line 10704
   HEAP32[$525 >> 2] = $12; //@line 10705
   $526 = $ReallocAsyncCtx5 + 28 | 0; //@line 10706
   HEAP32[$526 >> 2] = $14; //@line 10707
   $527 = $ReallocAsyncCtx5 + 32 | 0; //@line 10708
   HEAP32[$527 >> 2] = $16; //@line 10709
   $528 = $ReallocAsyncCtx5 + 36 | 0; //@line 10710
   HEAP32[$528 >> 2] = $18; //@line 10711
   $529 = $ReallocAsyncCtx5 + 40 | 0; //@line 10712
   HEAP32[$529 >> 2] = $20; //@line 10713
   $530 = $ReallocAsyncCtx5 + 44 | 0; //@line 10714
   HEAP32[$530 >> 2] = $22; //@line 10715
   $531 = $ReallocAsyncCtx5 + 48 | 0; //@line 10716
   HEAP32[$531 >> 2] = $24; //@line 10717
   $532 = $ReallocAsyncCtx5 + 52 | 0; //@line 10718
   HEAP32[$532 >> 2] = $26; //@line 10719
   $533 = $ReallocAsyncCtx5 + 56 | 0; //@line 10720
   HEAP32[$533 >> 2] = $28; //@line 10721
   $534 = $ReallocAsyncCtx5 + 60 | 0; //@line 10722
   HEAP32[$534 >> 2] = $30; //@line 10723
   $535 = $ReallocAsyncCtx5 + 64 | 0; //@line 10724
   HEAP32[$535 >> 2] = $32; //@line 10725
   $536 = $ReallocAsyncCtx5 + 68 | 0; //@line 10726
   HEAP32[$536 >> 2] = $34; //@line 10727
   $537 = $ReallocAsyncCtx5 + 72 | 0; //@line 10728
   HEAP32[$537 >> 2] = $36; //@line 10729
   $538 = $ReallocAsyncCtx5 + 76 | 0; //@line 10730
   HEAP32[$538 >> 2] = $38; //@line 10731
   $539 = $ReallocAsyncCtx5 + 80 | 0; //@line 10732
   HEAP32[$539 >> 2] = $40; //@line 10733
   $540 = $ReallocAsyncCtx5 + 84 | 0; //@line 10734
   HEAP32[$540 >> 2] = $42; //@line 10735
   $541 = $ReallocAsyncCtx5 + 88 | 0; //@line 10736
   HEAP32[$541 >> 2] = $44; //@line 10737
   $542 = $ReallocAsyncCtx5 + 92 | 0; //@line 10738
   HEAP32[$542 >> 2] = $46; //@line 10739
   $543 = $ReallocAsyncCtx5 + 96 | 0; //@line 10740
   HEAP8[$543 >> 0] = $515; //@line 10741
   $544 = $ReallocAsyncCtx5 + 100 | 0; //@line 10742
   HEAP32[$544 >> 2] = $50; //@line 10743
   $545 = $ReallocAsyncCtx5 + 104 | 0; //@line 10744
   HEAP32[$545 >> 2] = $52; //@line 10745
   $546 = $ReallocAsyncCtx5 + 108 | 0; //@line 10746
   HEAP32[$546 >> 2] = $54; //@line 10747
   $547 = $ReallocAsyncCtx5 + 112 | 0; //@line 10748
   HEAP32[$547 >> 2] = $56; //@line 10749
   $548 = $ReallocAsyncCtx5 + 116 | 0; //@line 10750
   HEAP32[$548 >> 2] = $58; //@line 10751
   $549 = $ReallocAsyncCtx5 + 120 | 0; //@line 10752
   HEAP32[$549 >> 2] = $60; //@line 10753
   $550 = $ReallocAsyncCtx5 + 124 | 0; //@line 10754
   HEAP32[$550 >> 2] = $62; //@line 10755
   $551 = $ReallocAsyncCtx5 + 128 | 0; //@line 10756
   HEAP8[$551 >> 0] = $64; //@line 10757
   $552 = $ReallocAsyncCtx5 + 132 | 0; //@line 10758
   HEAP32[$552 >> 2] = $66; //@line 10759
   $553 = $ReallocAsyncCtx5 + 136 | 0; //@line 10760
   HEAP32[$553 >> 2] = $68; //@line 10761
   $554 = $ReallocAsyncCtx5 + 140 | 0; //@line 10762
   HEAP32[$554 >> 2] = $70; //@line 10763
   $555 = $ReallocAsyncCtx5 + 144 | 0; //@line 10764
   HEAP32[$555 >> 2] = $72; //@line 10765
   $556 = $ReallocAsyncCtx5 + 148 | 0; //@line 10766
   HEAP32[$556 >> 2] = $74; //@line 10767
   $557 = $ReallocAsyncCtx5 + 152 | 0; //@line 10768
   HEAP32[$557 >> 2] = $76; //@line 10769
   $558 = $ReallocAsyncCtx5 + 156 | 0; //@line 10770
   HEAP8[$558 >> 0] = $78; //@line 10771
   $559 = $ReallocAsyncCtx5 + 160 | 0; //@line 10772
   HEAP32[$559 >> 2] = $80; //@line 10773
   $560 = $ReallocAsyncCtx5 + 164 | 0; //@line 10774
   HEAP8[$560 >> 0] = $82; //@line 10775
   $561 = $ReallocAsyncCtx5 + 168 | 0; //@line 10776
   HEAP32[$561 >> 2] = $84; //@line 10777
   $562 = $ReallocAsyncCtx5 + 172 | 0; //@line 10778
   HEAP32[$562 >> 2] = $86; //@line 10779
   $563 = $ReallocAsyncCtx5 + 176 | 0; //@line 10780
   HEAP32[$563 >> 2] = $88; //@line 10781
   $564 = $ReallocAsyncCtx5 + 180 | 0; //@line 10782
   HEAP32[$564 >> 2] = $90; //@line 10783
   $565 = $ReallocAsyncCtx5 + 184 | 0; //@line 10784
   HEAP32[$565 >> 2] = $92; //@line 10785
   $566 = $ReallocAsyncCtx5 + 188 | 0; //@line 10786
   HEAP32[$566 >> 2] = $94; //@line 10787
   $567 = $ReallocAsyncCtx5 + 192 | 0; //@line 10788
   HEAP32[$567 >> 2] = $96; //@line 10789
   $568 = $ReallocAsyncCtx5 + 196 | 0; //@line 10790
   HEAP8[$568 >> 0] = $507; //@line 10791
   $569 = $ReallocAsyncCtx5 + 197 | 0; //@line 10792
   HEAP8[$569 >> 0] = $513; //@line 10793
   $570 = $ReallocAsyncCtx5 + 200 | 0; //@line 10794
   HEAP32[$570 >> 2] = $102; //@line 10795
   $571 = $ReallocAsyncCtx5 + 204 | 0; //@line 10796
   HEAP32[$571 >> 2] = $104; //@line 10797
   $572 = $ReallocAsyncCtx5 + 208 | 0; //@line 10798
   HEAP32[$572 >> 2] = $511; //@line 10799
   $573 = $ReallocAsyncCtx5 + 212 | 0; //@line 10800
   HEAP32[$573 >> 2] = $$0107$be; //@line 10801
   $574 = $ReallocAsyncCtx5 + 216 | 0; //@line 10802
   HEAP32[$574 >> 2] = $110; //@line 10803
   $575 = $ReallocAsyncCtx5 + 220 | 0; //@line 10804
   HEAP32[$575 >> 2] = $112; //@line 10805
   $576 = $ReallocAsyncCtx5 + 224 | 0; //@line 10806
   HEAP32[$576 >> 2] = $114; //@line 10807
   $577 = $ReallocAsyncCtx5 + 228 | 0; //@line 10808
   HEAP32[$577 >> 2] = $116; //@line 10809
   $578 = $ReallocAsyncCtx5 + 232 | 0; //@line 10810
   HEAP32[$578 >> 2] = $118; //@line 10811
   $579 = $ReallocAsyncCtx5 + 236 | 0; //@line 10812
   HEAP32[$579 >> 2] = $120; //@line 10813
   $580 = $ReallocAsyncCtx5 + 240 | 0; //@line 10814
   HEAP32[$580 >> 2] = $122; //@line 10815
   $581 = $ReallocAsyncCtx5 + 244 | 0; //@line 10816
   HEAP32[$581 >> 2] = $124; //@line 10817
   sp = STACKTOP; //@line 10818
   return;
  }
  HEAP8[___async_retval >> 0] = $519 & 1; //@line 10823
  ___async_unwind = 0; //@line 10824
  HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 10825
  $520 = $ReallocAsyncCtx5 + 4 | 0; //@line 10826
  HEAP32[$520 >> 2] = $2; //@line 10827
  $521 = $ReallocAsyncCtx5 + 8 | 0; //@line 10828
  HEAP32[$521 >> 2] = $4; //@line 10829
  $522 = $ReallocAsyncCtx5 + 12 | 0; //@line 10830
  HEAP32[$522 >> 2] = $6; //@line 10831
  $523 = $ReallocAsyncCtx5 + 16 | 0; //@line 10832
  HEAP32[$523 >> 2] = $8; //@line 10833
  $524 = $ReallocAsyncCtx5 + 20 | 0; //@line 10834
  HEAP32[$524 >> 2] = $10; //@line 10835
  $525 = $ReallocAsyncCtx5 + 24 | 0; //@line 10836
  HEAP32[$525 >> 2] = $12; //@line 10837
  $526 = $ReallocAsyncCtx5 + 28 | 0; //@line 10838
  HEAP32[$526 >> 2] = $14; //@line 10839
  $527 = $ReallocAsyncCtx5 + 32 | 0; //@line 10840
  HEAP32[$527 >> 2] = $16; //@line 10841
  $528 = $ReallocAsyncCtx5 + 36 | 0; //@line 10842
  HEAP32[$528 >> 2] = $18; //@line 10843
  $529 = $ReallocAsyncCtx5 + 40 | 0; //@line 10844
  HEAP32[$529 >> 2] = $20; //@line 10845
  $530 = $ReallocAsyncCtx5 + 44 | 0; //@line 10846
  HEAP32[$530 >> 2] = $22; //@line 10847
  $531 = $ReallocAsyncCtx5 + 48 | 0; //@line 10848
  HEAP32[$531 >> 2] = $24; //@line 10849
  $532 = $ReallocAsyncCtx5 + 52 | 0; //@line 10850
  HEAP32[$532 >> 2] = $26; //@line 10851
  $533 = $ReallocAsyncCtx5 + 56 | 0; //@line 10852
  HEAP32[$533 >> 2] = $28; //@line 10853
  $534 = $ReallocAsyncCtx5 + 60 | 0; //@line 10854
  HEAP32[$534 >> 2] = $30; //@line 10855
  $535 = $ReallocAsyncCtx5 + 64 | 0; //@line 10856
  HEAP32[$535 >> 2] = $32; //@line 10857
  $536 = $ReallocAsyncCtx5 + 68 | 0; //@line 10858
  HEAP32[$536 >> 2] = $34; //@line 10859
  $537 = $ReallocAsyncCtx5 + 72 | 0; //@line 10860
  HEAP32[$537 >> 2] = $36; //@line 10861
  $538 = $ReallocAsyncCtx5 + 76 | 0; //@line 10862
  HEAP32[$538 >> 2] = $38; //@line 10863
  $539 = $ReallocAsyncCtx5 + 80 | 0; //@line 10864
  HEAP32[$539 >> 2] = $40; //@line 10865
  $540 = $ReallocAsyncCtx5 + 84 | 0; //@line 10866
  HEAP32[$540 >> 2] = $42; //@line 10867
  $541 = $ReallocAsyncCtx5 + 88 | 0; //@line 10868
  HEAP32[$541 >> 2] = $44; //@line 10869
  $542 = $ReallocAsyncCtx5 + 92 | 0; //@line 10870
  HEAP32[$542 >> 2] = $46; //@line 10871
  $543 = $ReallocAsyncCtx5 + 96 | 0; //@line 10872
  HEAP8[$543 >> 0] = $515; //@line 10873
  $544 = $ReallocAsyncCtx5 + 100 | 0; //@line 10874
  HEAP32[$544 >> 2] = $50; //@line 10875
  $545 = $ReallocAsyncCtx5 + 104 | 0; //@line 10876
  HEAP32[$545 >> 2] = $52; //@line 10877
  $546 = $ReallocAsyncCtx5 + 108 | 0; //@line 10878
  HEAP32[$546 >> 2] = $54; //@line 10879
  $547 = $ReallocAsyncCtx5 + 112 | 0; //@line 10880
  HEAP32[$547 >> 2] = $56; //@line 10881
  $548 = $ReallocAsyncCtx5 + 116 | 0; //@line 10882
  HEAP32[$548 >> 2] = $58; //@line 10883
  $549 = $ReallocAsyncCtx5 + 120 | 0; //@line 10884
  HEAP32[$549 >> 2] = $60; //@line 10885
  $550 = $ReallocAsyncCtx5 + 124 | 0; //@line 10886
  HEAP32[$550 >> 2] = $62; //@line 10887
  $551 = $ReallocAsyncCtx5 + 128 | 0; //@line 10888
  HEAP8[$551 >> 0] = $64; //@line 10889
  $552 = $ReallocAsyncCtx5 + 132 | 0; //@line 10890
  HEAP32[$552 >> 2] = $66; //@line 10891
  $553 = $ReallocAsyncCtx5 + 136 | 0; //@line 10892
  HEAP32[$553 >> 2] = $68; //@line 10893
  $554 = $ReallocAsyncCtx5 + 140 | 0; //@line 10894
  HEAP32[$554 >> 2] = $70; //@line 10895
  $555 = $ReallocAsyncCtx5 + 144 | 0; //@line 10896
  HEAP32[$555 >> 2] = $72; //@line 10897
  $556 = $ReallocAsyncCtx5 + 148 | 0; //@line 10898
  HEAP32[$556 >> 2] = $74; //@line 10899
  $557 = $ReallocAsyncCtx5 + 152 | 0; //@line 10900
  HEAP32[$557 >> 2] = $76; //@line 10901
  $558 = $ReallocAsyncCtx5 + 156 | 0; //@line 10902
  HEAP8[$558 >> 0] = $78; //@line 10903
  $559 = $ReallocAsyncCtx5 + 160 | 0; //@line 10904
  HEAP32[$559 >> 2] = $80; //@line 10905
  $560 = $ReallocAsyncCtx5 + 164 | 0; //@line 10906
  HEAP8[$560 >> 0] = $82; //@line 10907
  $561 = $ReallocAsyncCtx5 + 168 | 0; //@line 10908
  HEAP32[$561 >> 2] = $84; //@line 10909
  $562 = $ReallocAsyncCtx5 + 172 | 0; //@line 10910
  HEAP32[$562 >> 2] = $86; //@line 10911
  $563 = $ReallocAsyncCtx5 + 176 | 0; //@line 10912
  HEAP32[$563 >> 2] = $88; //@line 10913
  $564 = $ReallocAsyncCtx5 + 180 | 0; //@line 10914
  HEAP32[$564 >> 2] = $90; //@line 10915
  $565 = $ReallocAsyncCtx5 + 184 | 0; //@line 10916
  HEAP32[$565 >> 2] = $92; //@line 10917
  $566 = $ReallocAsyncCtx5 + 188 | 0; //@line 10918
  HEAP32[$566 >> 2] = $94; //@line 10919
  $567 = $ReallocAsyncCtx5 + 192 | 0; //@line 10920
  HEAP32[$567 >> 2] = $96; //@line 10921
  $568 = $ReallocAsyncCtx5 + 196 | 0; //@line 10922
  HEAP8[$568 >> 0] = $507; //@line 10923
  $569 = $ReallocAsyncCtx5 + 197 | 0; //@line 10924
  HEAP8[$569 >> 0] = $513; //@line 10925
  $570 = $ReallocAsyncCtx5 + 200 | 0; //@line 10926
  HEAP32[$570 >> 2] = $102; //@line 10927
  $571 = $ReallocAsyncCtx5 + 204 | 0; //@line 10928
  HEAP32[$571 >> 2] = $104; //@line 10929
  $572 = $ReallocAsyncCtx5 + 208 | 0; //@line 10930
  HEAP32[$572 >> 2] = $511; //@line 10931
  $573 = $ReallocAsyncCtx5 + 212 | 0; //@line 10932
  HEAP32[$573 >> 2] = $$0107$be; //@line 10933
  $574 = $ReallocAsyncCtx5 + 216 | 0; //@line 10934
  HEAP32[$574 >> 2] = $110; //@line 10935
  $575 = $ReallocAsyncCtx5 + 220 | 0; //@line 10936
  HEAP32[$575 >> 2] = $112; //@line 10937
  $576 = $ReallocAsyncCtx5 + 224 | 0; //@line 10938
  HEAP32[$576 >> 2] = $114; //@line 10939
  $577 = $ReallocAsyncCtx5 + 228 | 0; //@line 10940
  HEAP32[$577 >> 2] = $116; //@line 10941
  $578 = $ReallocAsyncCtx5 + 232 | 0; //@line 10942
  HEAP32[$578 >> 2] = $118; //@line 10943
  $579 = $ReallocAsyncCtx5 + 236 | 0; //@line 10944
  HEAP32[$579 >> 2] = $120; //@line 10945
  $580 = $ReallocAsyncCtx5 + 240 | 0; //@line 10946
  HEAP32[$580 >> 2] = $122; //@line 10947
  $581 = $ReallocAsyncCtx5 + 244 | 0; //@line 10948
  HEAP32[$581 >> 2] = $124; //@line 10949
  sp = STACKTOP; //@line 10950
  return;
 } else if ((label | 0) == 30) {
  $598 = HEAP8[$68 + ($127 & 255) >> 0] | 0; //@line 10957
  $611 = $$0$be + 5 << 24 >> 24; //@line 10970
  $618 = (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 10977
  $621 = HEAP32[(HEAP32[$124 >> 2] | 0) + 48 >> 2] | 0; //@line 10980
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 10981
  $622 = FUNCTION_TABLE_iiii[$621 & 31]($94, $598, $618) | 0; //@line 10982
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 10985
   $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 10986
   HEAP32[$623 >> 2] = $2; //@line 10987
   $624 = $ReallocAsyncCtx6 + 8 | 0; //@line 10988
   HEAP32[$624 >> 2] = $4; //@line 10989
   $625 = $ReallocAsyncCtx6 + 12 | 0; //@line 10990
   HEAP32[$625 >> 2] = $6; //@line 10991
   $626 = $ReallocAsyncCtx6 + 16 | 0; //@line 10992
   HEAP32[$626 >> 2] = $8; //@line 10993
   $627 = $ReallocAsyncCtx6 + 20 | 0; //@line 10994
   HEAP32[$627 >> 2] = $10; //@line 10995
   $628 = $ReallocAsyncCtx6 + 24 | 0; //@line 10996
   HEAP32[$628 >> 2] = $12; //@line 10997
   $629 = $ReallocAsyncCtx6 + 28 | 0; //@line 10998
   HEAP32[$629 >> 2] = $14; //@line 10999
   $630 = $ReallocAsyncCtx6 + 32 | 0; //@line 11000
   HEAP32[$630 >> 2] = $16; //@line 11001
   $631 = $ReallocAsyncCtx6 + 36 | 0; //@line 11002
   HEAP32[$631 >> 2] = $18; //@line 11003
   $632 = $ReallocAsyncCtx6 + 40 | 0; //@line 11004
   HEAP32[$632 >> 2] = $20; //@line 11005
   $633 = $ReallocAsyncCtx6 + 44 | 0; //@line 11006
   HEAP32[$633 >> 2] = $22; //@line 11007
   $634 = $ReallocAsyncCtx6 + 48 | 0; //@line 11008
   HEAP32[$634 >> 2] = $24; //@line 11009
   $635 = $ReallocAsyncCtx6 + 52 | 0; //@line 11010
   HEAP32[$635 >> 2] = $26; //@line 11011
   $636 = $ReallocAsyncCtx6 + 56 | 0; //@line 11012
   HEAP32[$636 >> 2] = $28; //@line 11013
   $637 = $ReallocAsyncCtx6 + 60 | 0; //@line 11014
   HEAP32[$637 >> 2] = $30; //@line 11015
   $638 = $ReallocAsyncCtx6 + 64 | 0; //@line 11016
   HEAP32[$638 >> 2] = $32; //@line 11017
   $639 = $ReallocAsyncCtx6 + 68 | 0; //@line 11018
   HEAP32[$639 >> 2] = $34; //@line 11019
   $640 = $ReallocAsyncCtx6 + 72 | 0; //@line 11020
   HEAP32[$640 >> 2] = $36; //@line 11021
   $641 = $ReallocAsyncCtx6 + 76 | 0; //@line 11022
   HEAP32[$641 >> 2] = $38; //@line 11023
   $642 = $ReallocAsyncCtx6 + 80 | 0; //@line 11024
   HEAP32[$642 >> 2] = $40; //@line 11025
   $643 = $ReallocAsyncCtx6 + 84 | 0; //@line 11026
   HEAP32[$643 >> 2] = $42; //@line 11027
   $644 = $ReallocAsyncCtx6 + 88 | 0; //@line 11028
   HEAP32[$644 >> 2] = $44; //@line 11029
   $645 = $ReallocAsyncCtx6 + 92 | 0; //@line 11030
   HEAP32[$645 >> 2] = $46; //@line 11031
   $646 = $ReallocAsyncCtx6 + 96 | 0; //@line 11032
   HEAP32[$646 >> 2] = $50; //@line 11033
   $647 = $ReallocAsyncCtx6 + 100 | 0; //@line 11034
   HEAP32[$647 >> 2] = $52; //@line 11035
   $648 = $ReallocAsyncCtx6 + 104 | 0; //@line 11036
   HEAP32[$648 >> 2] = $54; //@line 11037
   $649 = $ReallocAsyncCtx6 + 108 | 0; //@line 11038
   HEAP32[$649 >> 2] = $56; //@line 11039
   $650 = $ReallocAsyncCtx6 + 112 | 0; //@line 11040
   HEAP32[$650 >> 2] = $58; //@line 11041
   $651 = $ReallocAsyncCtx6 + 116 | 0; //@line 11042
   HEAP32[$651 >> 2] = $60; //@line 11043
   $652 = $ReallocAsyncCtx6 + 120 | 0; //@line 11044
   HEAP32[$652 >> 2] = $62; //@line 11045
   $653 = $ReallocAsyncCtx6 + 124 | 0; //@line 11046
   HEAP8[$653 >> 0] = $64; //@line 11047
   $654 = $ReallocAsyncCtx6 + 128 | 0; //@line 11048
   HEAP32[$654 >> 2] = $66; //@line 11049
   $655 = $ReallocAsyncCtx6 + 132 | 0; //@line 11050
   HEAP8[$655 >> 0] = $611; //@line 11051
   $656 = $ReallocAsyncCtx6 + 136 | 0; //@line 11052
   HEAP32[$656 >> 2] = $68; //@line 11053
   $657 = $ReallocAsyncCtx6 + 140 | 0; //@line 11054
   HEAP32[$657 >> 2] = $70; //@line 11055
   $658 = $ReallocAsyncCtx6 + 144 | 0; //@line 11056
   HEAP32[$658 >> 2] = $72; //@line 11057
   $659 = $ReallocAsyncCtx6 + 148 | 0; //@line 11058
   HEAP32[$659 >> 2] = $74; //@line 11059
   $660 = $ReallocAsyncCtx6 + 152 | 0; //@line 11060
   HEAP32[$660 >> 2] = $76; //@line 11061
   $661 = $ReallocAsyncCtx6 + 156 | 0; //@line 11062
   HEAP8[$661 >> 0] = $78; //@line 11063
   $662 = $ReallocAsyncCtx6 + 160 | 0; //@line 11064
   HEAP32[$662 >> 2] = $80; //@line 11065
   $663 = $ReallocAsyncCtx6 + 164 | 0; //@line 11066
   HEAP8[$663 >> 0] = $82; //@line 11067
   $664 = $ReallocAsyncCtx6 + 168 | 0; //@line 11068
   HEAP32[$664 >> 2] = $84; //@line 11069
   $665 = $ReallocAsyncCtx6 + 172 | 0; //@line 11070
   HEAP32[$665 >> 2] = $86; //@line 11071
   $666 = $ReallocAsyncCtx6 + 176 | 0; //@line 11072
   HEAP32[$666 >> 2] = $88; //@line 11073
   $667 = $ReallocAsyncCtx6 + 180 | 0; //@line 11074
   HEAP32[$667 >> 2] = $90; //@line 11075
   $668 = $ReallocAsyncCtx6 + 184 | 0; //@line 11076
   HEAP32[$668 >> 2] = $92; //@line 11077
   $669 = $ReallocAsyncCtx6 + 188 | 0; //@line 11078
   HEAP32[$669 >> 2] = $94; //@line 11079
   $670 = $ReallocAsyncCtx6 + 192 | 0; //@line 11080
   HEAP32[$670 >> 2] = $96; //@line 11081
   $671 = $ReallocAsyncCtx6 + 196 | 0; //@line 11082
   HEAP32[$671 >> 2] = $102; //@line 11083
   $672 = $ReallocAsyncCtx6 + 200 | 0; //@line 11084
   HEAP32[$672 >> 2] = $104; //@line 11085
   $673 = $ReallocAsyncCtx6 + 204 | 0; //@line 11086
   HEAP32[$673 >> 2] = $110; //@line 11087
   $674 = $ReallocAsyncCtx6 + 208 | 0; //@line 11088
   HEAP32[$674 >> 2] = $112; //@line 11089
   $675 = $ReallocAsyncCtx6 + 212 | 0; //@line 11090
   HEAP32[$675 >> 2] = $114; //@line 11091
   $676 = $ReallocAsyncCtx6 + 216 | 0; //@line 11092
   HEAP32[$676 >> 2] = $116; //@line 11093
   $677 = $ReallocAsyncCtx6 + 220 | 0; //@line 11094
   HEAP32[$677 >> 2] = $118; //@line 11095
   $678 = $ReallocAsyncCtx6 + 224 | 0; //@line 11096
   HEAP32[$678 >> 2] = $120; //@line 11097
   $679 = $ReallocAsyncCtx6 + 228 | 0; //@line 11098
   HEAP32[$679 >> 2] = $122; //@line 11099
   $680 = $ReallocAsyncCtx6 + 232 | 0; //@line 11100
   HEAP32[$680 >> 2] = $124; //@line 11101
   sp = STACKTOP; //@line 11102
   return;
  }
  HEAP8[___async_retval >> 0] = $622; //@line 11106
  ___async_unwind = 0; //@line 11107
  HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 11108
  $623 = $ReallocAsyncCtx6 + 4 | 0; //@line 11109
  HEAP32[$623 >> 2] = $2; //@line 11110
  $624 = $ReallocAsyncCtx6 + 8 | 0; //@line 11111
  HEAP32[$624 >> 2] = $4; //@line 11112
  $625 = $ReallocAsyncCtx6 + 12 | 0; //@line 11113
  HEAP32[$625 >> 2] = $6; //@line 11114
  $626 = $ReallocAsyncCtx6 + 16 | 0; //@line 11115
  HEAP32[$626 >> 2] = $8; //@line 11116
  $627 = $ReallocAsyncCtx6 + 20 | 0; //@line 11117
  HEAP32[$627 >> 2] = $10; //@line 11118
  $628 = $ReallocAsyncCtx6 + 24 | 0; //@line 11119
  HEAP32[$628 >> 2] = $12; //@line 11120
  $629 = $ReallocAsyncCtx6 + 28 | 0; //@line 11121
  HEAP32[$629 >> 2] = $14; //@line 11122
  $630 = $ReallocAsyncCtx6 + 32 | 0; //@line 11123
  HEAP32[$630 >> 2] = $16; //@line 11124
  $631 = $ReallocAsyncCtx6 + 36 | 0; //@line 11125
  HEAP32[$631 >> 2] = $18; //@line 11126
  $632 = $ReallocAsyncCtx6 + 40 | 0; //@line 11127
  HEAP32[$632 >> 2] = $20; //@line 11128
  $633 = $ReallocAsyncCtx6 + 44 | 0; //@line 11129
  HEAP32[$633 >> 2] = $22; //@line 11130
  $634 = $ReallocAsyncCtx6 + 48 | 0; //@line 11131
  HEAP32[$634 >> 2] = $24; //@line 11132
  $635 = $ReallocAsyncCtx6 + 52 | 0; //@line 11133
  HEAP32[$635 >> 2] = $26; //@line 11134
  $636 = $ReallocAsyncCtx6 + 56 | 0; //@line 11135
  HEAP32[$636 >> 2] = $28; //@line 11136
  $637 = $ReallocAsyncCtx6 + 60 | 0; //@line 11137
  HEAP32[$637 >> 2] = $30; //@line 11138
  $638 = $ReallocAsyncCtx6 + 64 | 0; //@line 11139
  HEAP32[$638 >> 2] = $32; //@line 11140
  $639 = $ReallocAsyncCtx6 + 68 | 0; //@line 11141
  HEAP32[$639 >> 2] = $34; //@line 11142
  $640 = $ReallocAsyncCtx6 + 72 | 0; //@line 11143
  HEAP32[$640 >> 2] = $36; //@line 11144
  $641 = $ReallocAsyncCtx6 + 76 | 0; //@line 11145
  HEAP32[$641 >> 2] = $38; //@line 11146
  $642 = $ReallocAsyncCtx6 + 80 | 0; //@line 11147
  HEAP32[$642 >> 2] = $40; //@line 11148
  $643 = $ReallocAsyncCtx6 + 84 | 0; //@line 11149
  HEAP32[$643 >> 2] = $42; //@line 11150
  $644 = $ReallocAsyncCtx6 + 88 | 0; //@line 11151
  HEAP32[$644 >> 2] = $44; //@line 11152
  $645 = $ReallocAsyncCtx6 + 92 | 0; //@line 11153
  HEAP32[$645 >> 2] = $46; //@line 11154
  $646 = $ReallocAsyncCtx6 + 96 | 0; //@line 11155
  HEAP32[$646 >> 2] = $50; //@line 11156
  $647 = $ReallocAsyncCtx6 + 100 | 0; //@line 11157
  HEAP32[$647 >> 2] = $52; //@line 11158
  $648 = $ReallocAsyncCtx6 + 104 | 0; //@line 11159
  HEAP32[$648 >> 2] = $54; //@line 11160
  $649 = $ReallocAsyncCtx6 + 108 | 0; //@line 11161
  HEAP32[$649 >> 2] = $56; //@line 11162
  $650 = $ReallocAsyncCtx6 + 112 | 0; //@line 11163
  HEAP32[$650 >> 2] = $58; //@line 11164
  $651 = $ReallocAsyncCtx6 + 116 | 0; //@line 11165
  HEAP32[$651 >> 2] = $60; //@line 11166
  $652 = $ReallocAsyncCtx6 + 120 | 0; //@line 11167
  HEAP32[$652 >> 2] = $62; //@line 11168
  $653 = $ReallocAsyncCtx6 + 124 | 0; //@line 11169
  HEAP8[$653 >> 0] = $64; //@line 11170
  $654 = $ReallocAsyncCtx6 + 128 | 0; //@line 11171
  HEAP32[$654 >> 2] = $66; //@line 11172
  $655 = $ReallocAsyncCtx6 + 132 | 0; //@line 11173
  HEAP8[$655 >> 0] = $611; //@line 11174
  $656 = $ReallocAsyncCtx6 + 136 | 0; //@line 11175
  HEAP32[$656 >> 2] = $68; //@line 11176
  $657 = $ReallocAsyncCtx6 + 140 | 0; //@line 11177
  HEAP32[$657 >> 2] = $70; //@line 11178
  $658 = $ReallocAsyncCtx6 + 144 | 0; //@line 11179
  HEAP32[$658 >> 2] = $72; //@line 11180
  $659 = $ReallocAsyncCtx6 + 148 | 0; //@line 11181
  HEAP32[$659 >> 2] = $74; //@line 11182
  $660 = $ReallocAsyncCtx6 + 152 | 0; //@line 11183
  HEAP32[$660 >> 2] = $76; //@line 11184
  $661 = $ReallocAsyncCtx6 + 156 | 0; //@line 11185
  HEAP8[$661 >> 0] = $78; //@line 11186
  $662 = $ReallocAsyncCtx6 + 160 | 0; //@line 11187
  HEAP32[$662 >> 2] = $80; //@line 11188
  $663 = $ReallocAsyncCtx6 + 164 | 0; //@line 11189
  HEAP8[$663 >> 0] = $82; //@line 11190
  $664 = $ReallocAsyncCtx6 + 168 | 0; //@line 11191
  HEAP32[$664 >> 2] = $84; //@line 11192
  $665 = $ReallocAsyncCtx6 + 172 | 0; //@line 11193
  HEAP32[$665 >> 2] = $86; //@line 11194
  $666 = $ReallocAsyncCtx6 + 176 | 0; //@line 11195
  HEAP32[$666 >> 2] = $88; //@line 11196
  $667 = $ReallocAsyncCtx6 + 180 | 0; //@line 11197
  HEAP32[$667 >> 2] = $90; //@line 11198
  $668 = $ReallocAsyncCtx6 + 184 | 0; //@line 11199
  HEAP32[$668 >> 2] = $92; //@line 11200
  $669 = $ReallocAsyncCtx6 + 188 | 0; //@line 11201
  HEAP32[$669 >> 2] = $94; //@line 11202
  $670 = $ReallocAsyncCtx6 + 192 | 0; //@line 11203
  HEAP32[$670 >> 2] = $96; //@line 11204
  $671 = $ReallocAsyncCtx6 + 196 | 0; //@line 11205
  HEAP32[$671 >> 2] = $102; //@line 11206
  $672 = $ReallocAsyncCtx6 + 200 | 0; //@line 11207
  HEAP32[$672 >> 2] = $104; //@line 11208
  $673 = $ReallocAsyncCtx6 + 204 | 0; //@line 11209
  HEAP32[$673 >> 2] = $110; //@line 11210
  $674 = $ReallocAsyncCtx6 + 208 | 0; //@line 11211
  HEAP32[$674 >> 2] = $112; //@line 11212
  $675 = $ReallocAsyncCtx6 + 212 | 0; //@line 11213
  HEAP32[$675 >> 2] = $114; //@line 11214
  $676 = $ReallocAsyncCtx6 + 216 | 0; //@line 11215
  HEAP32[$676 >> 2] = $116; //@line 11216
  $677 = $ReallocAsyncCtx6 + 220 | 0; //@line 11217
  HEAP32[$677 >> 2] = $118; //@line 11218
  $678 = $ReallocAsyncCtx6 + 224 | 0; //@line 11219
  HEAP32[$678 >> 2] = $120; //@line 11220
  $679 = $ReallocAsyncCtx6 + 228 | 0; //@line 11221
  HEAP32[$679 >> 2] = $122; //@line 11222
  $680 = $ReallocAsyncCtx6 + 232 | 0; //@line 11223
  HEAP32[$680 >> 2] = $124; //@line 11224
  sp = STACKTOP; //@line 11225
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 11230
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i = 0, $$0107$be = 0, $$0109129 = 0, $$1$lcssa = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $132 = 0, $133 = 0, $14 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $211 = 0, $214 = 0, $219 = 0, $22 = 0, $220 = 0, $226 = 0, $230 = 0, $233 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $26 = 0, $266 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $337 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $4 = 0, $40 = 0, $403 = 0, $404 = 0, $418 = 0, $42 = 0, $439 = 0, $44 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $507 = 0, $511 = 0, $515 = 0, $52 = 0, $520 = 0, $521 = 0, $525 = 0, $529 = 0, $531 = 0, $533 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $604 = 0, $617 = 0, $62 = 0, $624 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $689 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1307
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1309
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1311
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1313
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1315
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1317
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1319
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1321
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1323
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1325
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1327
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1329
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 1331
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 1333
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 1335
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 1337
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 1339
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 1341
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 1343
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 1345
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 1347
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 1349
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 1351
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 1353
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 1355
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 1357
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 1359
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 1361
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 1363
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 1365
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 1367
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 1369
 $64 = HEAP8[$0 + 128 >> 0] | 0; //@line 1371
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 1373
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 1375
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 1377
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 1379
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 1381
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 1383
 $78 = HEAP8[$0 + 156 >> 0] | 0; //@line 1385
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 1387
 $82 = HEAP8[$0 + 164 >> 0] | 0; //@line 1389
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 1391
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 1393
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 1395
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 1397
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 1399
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 1401
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 1403
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 1405
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 1407
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 1409
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 1411
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 1413
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 1415
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 1417
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 1419
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 1421
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 1423
 $118 = HEAP32[$0 + 236 >> 2] | 0; //@line 1425
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 1427
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$12 >> 0] = HEAP8[$76 >> 0] | 0; //@line 1432
  HEAP8[$24 >> 0] = HEAP8[$44 >> 0] | 0; //@line 1434
  HEAP8[$116 >> 0] = HEAP8[$22 >> 0] | 0; //@line 1436
 }
 $211 = HEAP8[$26 >> 0] | 0; //@line 1438
 if (($211 & 255) > 4) {
  $div = ($211 & 255) / 5 | 0; //@line 1441
  $214 = 128 - (HEAPU8[$62 >> 0] | 0) | 0; //@line 1445
  $$0109129 = 0; //@line 1446
  $220 = HEAP8[$92 >> 0] | 0; //@line 1446
  while (1) {
   $219 = $220 & 255; //@line 1448
   if (($214 - $219 | 0) > 1) {
    $226 = $220 + 2 << 24 >> 24; //@line 1455
    HEAP8[$72 + 4 + $219 >> 0] = 3; //@line 1457
    HEAP8[$92 >> 0] = $226; //@line 1458
    HEAP8[($220 + 1 & 255) + ($72 + 4) >> 0] = $AsyncRetVal; //@line 1459
    HEAP8[$86 >> 0] = 1; //@line 1460
    $$0$i = 0; //@line 1461
    $689 = $226; //@line 1461
   } else {
    $$0$i = -1010; //@line 1463
    $689 = $220; //@line 1463
   }
   $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 1465
   if (($$0109129 & 255) >= ($div & 255)) {
    $$1$lcssa = $$0$i; //@line 1470
    break;
   } else {
    $220 = $689; //@line 1468
   }
  }
 } else {
  $$1$lcssa = $102; //@line 1475
 }
 $$0$be = $48 + 255 + ($211 & 255) & 255; //@line 1481
 $$0107$be = $$1$lcssa; //@line 1481
 L13 : while (1) {
  if (($$0$be & 255) >= ($64 & 255)) {
   label = 38; //@line 1485
   break;
  }
  $121 = $$0$be + 1 << 24 >> 24; //@line 1489
  switch (HEAP8[$68 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 1494
    break L13;
    break;
   }
  case 5:
   {
    label = 17; //@line 1499
    break L13;
    break;
   }
  case 7:
   {
    label = 26; //@line 1504
    break L13;
    break;
   }
  case 9:
   {
    label = 32; //@line 1509
    break L13;
    break;
   }
  case 10:
   {
    label = 35; //@line 1514
    break L13;
    break;
   }
  case 2:
   {
    HEAP32[$108 >> 2] = 0; //@line 1519
    HEAP8[$66 >> 0] = HEAP8[$68 + ($121 & 255) >> 0] | 0; //@line 1524
    HEAP8[$80 >> 0] = HEAP8[$68 + ($$0$be + 2 & 255) >> 0] | 0; //@line 1529
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 1530
    continue L13;
    break;
   }
  case 4:
   {
    $230 = $$0$be + 2 << 24 >> 24; //@line 1535
    $233 = HEAP8[$68 + ($121 & 255) >> 0] | 0; //@line 1538
    HEAP8[$40 >> 0] = $233; //@line 1539
    HEAP16[$36 >> 1] = 1 << ($233 & 255); //@line 1543
    $240 = HEAP8[$92 >> 0] | 0; //@line 1547
    $241 = $240 & 255; //@line 1548
    if ((128 - (HEAPU8[$62 >> 0] | 0) | 0) <= ($241 | 0)) {
     $$0$be = $230; //@line 1551
     $$0107$be = -1010; //@line 1551
     continue L13;
    }
    HEAP8[$92 >> 0] = $240 + 1 << 24 >> 24; //@line 1556
    HEAP8[$72 + 4 + $241 >> 0] = 4; //@line 1557
    HEAP8[$86 >> 0] = 1; //@line 1558
    $$0$be = $230; //@line 1559
    $$0107$be = 0; //@line 1559
    continue L13;
    break;
   }
  case 6:
   {
    $337 = HEAP32[$112 >> 2] | 0; //@line 1564
    if ($337 | 0) {
     label = 21; //@line 1567
     break L13;
    }
    $403 = HEAP8[$92 >> 0] | 0; //@line 1573
    $404 = $403 & 255; //@line 1574
    if ((128 - (HEAPU8[$62 >> 0] | 0) - $404 | 0) <= 2) {
     $$0$be = $121; //@line 1578
     $$0107$be = -1010; //@line 1578
     continue L13;
    }
    HEAP8[$72 + 4 + $404 >> 0] = 6; //@line 1583
    HEAP8[($403 + 1 & 255) + ($72 + 4) >> 0] = -1; //@line 1587
    HEAP8[$92 >> 0] = $403 + 3 << 24 >> 24; //@line 1589
    HEAP8[($403 + 2 & 255) + ($72 + 4) >> 0] = $82; //@line 1592
    HEAP8[$86 >> 0] = 1; //@line 1593
    $$0$be = $121; //@line 1594
    $$0107$be = 0; //@line 1594
    continue L13;
    break;
   }
  case 8:
   {
    $507 = $$0$be + 2 << 24 >> 24; //@line 1599
    $511 = HEAP8[$68 + ($121 & 255) >> 0] & 15; //@line 1603
    $515 = ($511 + ($511 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 1608
    HEAP32[$14 >> 2] = $515; //@line 1609
    HEAP32[$4 >> 2] = $515 + 1e3; //@line 1611
    $520 = HEAP8[$92 >> 0] | 0; //@line 1615
    $521 = $520 & 255; //@line 1616
    if ((128 - (HEAPU8[$62 >> 0] | 0) | 0) <= ($521 | 0)) {
     $$0$be = $507; //@line 1619
     $$0107$be = -1010; //@line 1619
     continue L13;
    }
    HEAP8[$92 >> 0] = $520 + 1 << 24 >> 24; //@line 1624
    HEAP8[$72 + 4 + $521 >> 0] = 8; //@line 1625
    HEAP8[$114 >> 0] = 1; //@line 1626
    HEAP8[$86 >> 0] = 1; //@line 1627
    $$0$be = $507; //@line 1628
    $$0107$be = 0; //@line 1628
    continue L13;
    break;
   }
  default:
   {
    $$0$be = $121; //@line 1633
    $$0107$be = -1013; //@line 1633
    continue L13;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$76 >> 0] = 0; //@line 1639
  HEAP8[$44 >> 0] = 0; //@line 1640
  HEAP8[$22 >> 0] = 0; //@line 1641
  HEAP8[$26 >> 0] = 0; //@line 1642
  $132 = $121 & 255; //@line 1643
  $133 = $132 + -1 | 0; //@line 1644
  HEAP32[$84 >> 2] = $68 + $133; //@line 1646
  HEAP8[$38 >> 0] = $32 - $133; //@line 1649
  HEAP8[$54 >> 0] = HEAP8[$46 >> 0] | 0; //@line 1651
  HEAP8[$6 >> 0] = HEAP8[$58 >> 0] | 0; //@line 1653
  HEAP8[$18 >> 0] = HEAP8[$12 >> 0] | 0; //@line 1655
  HEAP8[$98 >> 0] = HEAP8[$24 >> 0] | 0; //@line 1657
  HEAP8[$106 >> 0] = HEAP8[$116 >> 0] | 0; //@line 1659
  $144 = HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] | 0; //@line 1662
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 1663
  $145 = FUNCTION_TABLE_iiiiiii[$144 & 3]($94, $88, $76, $44, $22, $26) | 0; //@line 1664
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 1667
   $146 = $ReallocAsyncCtx + 4 | 0; //@line 1668
   HEAP32[$146 >> 2] = $2; //@line 1669
   $147 = $ReallocAsyncCtx + 8 | 0; //@line 1670
   HEAP32[$147 >> 2] = $4; //@line 1671
   $148 = $ReallocAsyncCtx + 12 | 0; //@line 1672
   HEAP32[$148 >> 2] = $6; //@line 1673
   $149 = $ReallocAsyncCtx + 16 | 0; //@line 1674
   HEAP32[$149 >> 2] = $8; //@line 1675
   $150 = $ReallocAsyncCtx + 20 | 0; //@line 1676
   HEAP32[$150 >> 2] = $10; //@line 1677
   $151 = $ReallocAsyncCtx + 24 | 0; //@line 1678
   HEAP32[$151 >> 2] = $12; //@line 1679
   $152 = $ReallocAsyncCtx + 28 | 0; //@line 1680
   HEAP32[$152 >> 2] = $14; //@line 1681
   $153 = $ReallocAsyncCtx + 32 | 0; //@line 1682
   HEAP32[$153 >> 2] = $16; //@line 1683
   $154 = $ReallocAsyncCtx + 36 | 0; //@line 1684
   HEAP32[$154 >> 2] = $18; //@line 1685
   $155 = $ReallocAsyncCtx + 40 | 0; //@line 1686
   HEAP32[$155 >> 2] = $20; //@line 1687
   $156 = $ReallocAsyncCtx + 44 | 0; //@line 1688
   HEAP32[$156 >> 2] = $22; //@line 1689
   $157 = $ReallocAsyncCtx + 48 | 0; //@line 1690
   HEAP32[$157 >> 2] = $24; //@line 1691
   $158 = $ReallocAsyncCtx + 52 | 0; //@line 1692
   HEAP32[$158 >> 2] = $26; //@line 1693
   $159 = $ReallocAsyncCtx + 56 | 0; //@line 1694
   HEAP32[$159 >> 2] = $28; //@line 1695
   $160 = $ReallocAsyncCtx + 60 | 0; //@line 1696
   HEAP32[$160 >> 2] = $30; //@line 1697
   $161 = $ReallocAsyncCtx + 64 | 0; //@line 1698
   HEAP32[$161 >> 2] = $32; //@line 1699
   $162 = $ReallocAsyncCtx + 68 | 0; //@line 1700
   HEAP32[$162 >> 2] = $34; //@line 1701
   $163 = $ReallocAsyncCtx + 72 | 0; //@line 1702
   HEAP32[$163 >> 2] = $36; //@line 1703
   $164 = $ReallocAsyncCtx + 76 | 0; //@line 1704
   HEAP32[$164 >> 2] = $38; //@line 1705
   $165 = $ReallocAsyncCtx + 80 | 0; //@line 1706
   HEAP32[$165 >> 2] = $40; //@line 1707
   $166 = $ReallocAsyncCtx + 84 | 0; //@line 1708
   HEAP32[$166 >> 2] = $42; //@line 1709
   $167 = $ReallocAsyncCtx + 88 | 0; //@line 1710
   HEAP32[$167 >> 2] = $44; //@line 1711
   $168 = $ReallocAsyncCtx + 92 | 0; //@line 1712
   HEAP32[$168 >> 2] = $46; //@line 1713
   $169 = $ReallocAsyncCtx + 96 | 0; //@line 1714
   HEAP32[$169 >> 2] = $132; //@line 1715
   $170 = $ReallocAsyncCtx + 100 | 0; //@line 1716
   HEAP32[$170 >> 2] = $50; //@line 1717
   $171 = $ReallocAsyncCtx + 104 | 0; //@line 1718
   HEAP32[$171 >> 2] = $52; //@line 1719
   $172 = $ReallocAsyncCtx + 108 | 0; //@line 1720
   HEAP32[$172 >> 2] = $54; //@line 1721
   $173 = $ReallocAsyncCtx + 112 | 0; //@line 1722
   HEAP32[$173 >> 2] = $56; //@line 1723
   $174 = $ReallocAsyncCtx + 116 | 0; //@line 1724
   HEAP32[$174 >> 2] = $58; //@line 1725
   $175 = $ReallocAsyncCtx + 120 | 0; //@line 1726
   HEAP32[$175 >> 2] = $60; //@line 1727
   $176 = $ReallocAsyncCtx + 124 | 0; //@line 1728
   HEAP32[$176 >> 2] = $62; //@line 1729
   $177 = $ReallocAsyncCtx + 128 | 0; //@line 1730
   HEAP8[$177 >> 0] = $64; //@line 1731
   $178 = $ReallocAsyncCtx + 132 | 0; //@line 1732
   HEAP32[$178 >> 2] = $66; //@line 1733
   $179 = $ReallocAsyncCtx + 136 | 0; //@line 1734
   HEAP32[$179 >> 2] = $68; //@line 1735
   $180 = $ReallocAsyncCtx + 140 | 0; //@line 1736
   HEAP32[$180 >> 2] = $70; //@line 1737
   $181 = $ReallocAsyncCtx + 144 | 0; //@line 1738
   HEAP32[$181 >> 2] = $72; //@line 1739
   $182 = $ReallocAsyncCtx + 148 | 0; //@line 1740
   HEAP32[$182 >> 2] = $74; //@line 1741
   $183 = $ReallocAsyncCtx + 152 | 0; //@line 1742
   HEAP32[$183 >> 2] = $76; //@line 1743
   $184 = $ReallocAsyncCtx + 156 | 0; //@line 1744
   HEAP8[$184 >> 0] = $78; //@line 1745
   $185 = $ReallocAsyncCtx + 160 | 0; //@line 1746
   HEAP32[$185 >> 2] = $80; //@line 1747
   $186 = $ReallocAsyncCtx + 164 | 0; //@line 1748
   HEAP8[$186 >> 0] = $82; //@line 1749
   $187 = $ReallocAsyncCtx + 168 | 0; //@line 1750
   HEAP32[$187 >> 2] = $84; //@line 1751
   $188 = $ReallocAsyncCtx + 172 | 0; //@line 1752
   HEAP32[$188 >> 2] = $86; //@line 1753
   $189 = $ReallocAsyncCtx + 176 | 0; //@line 1754
   HEAP32[$189 >> 2] = $88; //@line 1755
   $190 = $ReallocAsyncCtx + 180 | 0; //@line 1756
   HEAP32[$190 >> 2] = $90; //@line 1757
   $191 = $ReallocAsyncCtx + 184 | 0; //@line 1758
   HEAP32[$191 >> 2] = $92; //@line 1759
   $192 = $ReallocAsyncCtx + 188 | 0; //@line 1760
   HEAP32[$192 >> 2] = $94; //@line 1761
   $193 = $ReallocAsyncCtx + 192 | 0; //@line 1762
   HEAP32[$193 >> 2] = $96; //@line 1763
   $194 = $ReallocAsyncCtx + 196 | 0; //@line 1764
   HEAP32[$194 >> 2] = $98; //@line 1765
   $195 = $ReallocAsyncCtx + 200 | 0; //@line 1766
   HEAP32[$195 >> 2] = $100; //@line 1767
   $196 = $ReallocAsyncCtx + 204 | 0; //@line 1768
   HEAP32[$196 >> 2] = $$0107$be; //@line 1769
   $197 = $ReallocAsyncCtx + 208 | 0; //@line 1770
   HEAP32[$197 >> 2] = $104; //@line 1771
   $198 = $ReallocAsyncCtx + 212 | 0; //@line 1772
   HEAP32[$198 >> 2] = $106; //@line 1773
   $199 = $ReallocAsyncCtx + 216 | 0; //@line 1774
   HEAP32[$199 >> 2] = $108; //@line 1775
   $200 = $ReallocAsyncCtx + 220 | 0; //@line 1776
   HEAP32[$200 >> 2] = $110; //@line 1777
   $201 = $ReallocAsyncCtx + 224 | 0; //@line 1778
   HEAP32[$201 >> 2] = $112; //@line 1779
   $202 = $ReallocAsyncCtx + 228 | 0; //@line 1780
   HEAP32[$202 >> 2] = $114; //@line 1781
   $203 = $ReallocAsyncCtx + 232 | 0; //@line 1782
   HEAP32[$203 >> 2] = $116; //@line 1783
   $204 = $ReallocAsyncCtx + 236 | 0; //@line 1784
   HEAP32[$204 >> 2] = $118; //@line 1785
   sp = STACKTOP; //@line 1786
   return;
  }
  HEAP8[___async_retval >> 0] = $145; //@line 1790
  ___async_unwind = 0; //@line 1791
  HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 1792
  $146 = $ReallocAsyncCtx + 4 | 0; //@line 1793
  HEAP32[$146 >> 2] = $2; //@line 1794
  $147 = $ReallocAsyncCtx + 8 | 0; //@line 1795
  HEAP32[$147 >> 2] = $4; //@line 1796
  $148 = $ReallocAsyncCtx + 12 | 0; //@line 1797
  HEAP32[$148 >> 2] = $6; //@line 1798
  $149 = $ReallocAsyncCtx + 16 | 0; //@line 1799
  HEAP32[$149 >> 2] = $8; //@line 1800
  $150 = $ReallocAsyncCtx + 20 | 0; //@line 1801
  HEAP32[$150 >> 2] = $10; //@line 1802
  $151 = $ReallocAsyncCtx + 24 | 0; //@line 1803
  HEAP32[$151 >> 2] = $12; //@line 1804
  $152 = $ReallocAsyncCtx + 28 | 0; //@line 1805
  HEAP32[$152 >> 2] = $14; //@line 1806
  $153 = $ReallocAsyncCtx + 32 | 0; //@line 1807
  HEAP32[$153 >> 2] = $16; //@line 1808
  $154 = $ReallocAsyncCtx + 36 | 0; //@line 1809
  HEAP32[$154 >> 2] = $18; //@line 1810
  $155 = $ReallocAsyncCtx + 40 | 0; //@line 1811
  HEAP32[$155 >> 2] = $20; //@line 1812
  $156 = $ReallocAsyncCtx + 44 | 0; //@line 1813
  HEAP32[$156 >> 2] = $22; //@line 1814
  $157 = $ReallocAsyncCtx + 48 | 0; //@line 1815
  HEAP32[$157 >> 2] = $24; //@line 1816
  $158 = $ReallocAsyncCtx + 52 | 0; //@line 1817
  HEAP32[$158 >> 2] = $26; //@line 1818
  $159 = $ReallocAsyncCtx + 56 | 0; //@line 1819
  HEAP32[$159 >> 2] = $28; //@line 1820
  $160 = $ReallocAsyncCtx + 60 | 0; //@line 1821
  HEAP32[$160 >> 2] = $30; //@line 1822
  $161 = $ReallocAsyncCtx + 64 | 0; //@line 1823
  HEAP32[$161 >> 2] = $32; //@line 1824
  $162 = $ReallocAsyncCtx + 68 | 0; //@line 1825
  HEAP32[$162 >> 2] = $34; //@line 1826
  $163 = $ReallocAsyncCtx + 72 | 0; //@line 1827
  HEAP32[$163 >> 2] = $36; //@line 1828
  $164 = $ReallocAsyncCtx + 76 | 0; //@line 1829
  HEAP32[$164 >> 2] = $38; //@line 1830
  $165 = $ReallocAsyncCtx + 80 | 0; //@line 1831
  HEAP32[$165 >> 2] = $40; //@line 1832
  $166 = $ReallocAsyncCtx + 84 | 0; //@line 1833
  HEAP32[$166 >> 2] = $42; //@line 1834
  $167 = $ReallocAsyncCtx + 88 | 0; //@line 1835
  HEAP32[$167 >> 2] = $44; //@line 1836
  $168 = $ReallocAsyncCtx + 92 | 0; //@line 1837
  HEAP32[$168 >> 2] = $46; //@line 1838
  $169 = $ReallocAsyncCtx + 96 | 0; //@line 1839
  HEAP32[$169 >> 2] = $132; //@line 1840
  $170 = $ReallocAsyncCtx + 100 | 0; //@line 1841
  HEAP32[$170 >> 2] = $50; //@line 1842
  $171 = $ReallocAsyncCtx + 104 | 0; //@line 1843
  HEAP32[$171 >> 2] = $52; //@line 1844
  $172 = $ReallocAsyncCtx + 108 | 0; //@line 1845
  HEAP32[$172 >> 2] = $54; //@line 1846
  $173 = $ReallocAsyncCtx + 112 | 0; //@line 1847
  HEAP32[$173 >> 2] = $56; //@line 1848
  $174 = $ReallocAsyncCtx + 116 | 0; //@line 1849
  HEAP32[$174 >> 2] = $58; //@line 1850
  $175 = $ReallocAsyncCtx + 120 | 0; //@line 1851
  HEAP32[$175 >> 2] = $60; //@line 1852
  $176 = $ReallocAsyncCtx + 124 | 0; //@line 1853
  HEAP32[$176 >> 2] = $62; //@line 1854
  $177 = $ReallocAsyncCtx + 128 | 0; //@line 1855
  HEAP8[$177 >> 0] = $64; //@line 1856
  $178 = $ReallocAsyncCtx + 132 | 0; //@line 1857
  HEAP32[$178 >> 2] = $66; //@line 1858
  $179 = $ReallocAsyncCtx + 136 | 0; //@line 1859
  HEAP32[$179 >> 2] = $68; //@line 1860
  $180 = $ReallocAsyncCtx + 140 | 0; //@line 1861
  HEAP32[$180 >> 2] = $70; //@line 1862
  $181 = $ReallocAsyncCtx + 144 | 0; //@line 1863
  HEAP32[$181 >> 2] = $72; //@line 1864
  $182 = $ReallocAsyncCtx + 148 | 0; //@line 1865
  HEAP32[$182 >> 2] = $74; //@line 1866
  $183 = $ReallocAsyncCtx + 152 | 0; //@line 1867
  HEAP32[$183 >> 2] = $76; //@line 1868
  $184 = $ReallocAsyncCtx + 156 | 0; //@line 1869
  HEAP8[$184 >> 0] = $78; //@line 1870
  $185 = $ReallocAsyncCtx + 160 | 0; //@line 1871
  HEAP32[$185 >> 2] = $80; //@line 1872
  $186 = $ReallocAsyncCtx + 164 | 0; //@line 1873
  HEAP8[$186 >> 0] = $82; //@line 1874
  $187 = $ReallocAsyncCtx + 168 | 0; //@line 1875
  HEAP32[$187 >> 2] = $84; //@line 1876
  $188 = $ReallocAsyncCtx + 172 | 0; //@line 1877
  HEAP32[$188 >> 2] = $86; //@line 1878
  $189 = $ReallocAsyncCtx + 176 | 0; //@line 1879
  HEAP32[$189 >> 2] = $88; //@line 1880
  $190 = $ReallocAsyncCtx + 180 | 0; //@line 1881
  HEAP32[$190 >> 2] = $90; //@line 1882
  $191 = $ReallocAsyncCtx + 184 | 0; //@line 1883
  HEAP32[$191 >> 2] = $92; //@line 1884
  $192 = $ReallocAsyncCtx + 188 | 0; //@line 1885
  HEAP32[$192 >> 2] = $94; //@line 1886
  $193 = $ReallocAsyncCtx + 192 | 0; //@line 1887
  HEAP32[$193 >> 2] = $96; //@line 1888
  $194 = $ReallocAsyncCtx + 196 | 0; //@line 1889
  HEAP32[$194 >> 2] = $98; //@line 1890
  $195 = $ReallocAsyncCtx + 200 | 0; //@line 1891
  HEAP32[$195 >> 2] = $100; //@line 1892
  $196 = $ReallocAsyncCtx + 204 | 0; //@line 1893
  HEAP32[$196 >> 2] = $$0107$be; //@line 1894
  $197 = $ReallocAsyncCtx + 208 | 0; //@line 1895
  HEAP32[$197 >> 2] = $104; //@line 1896
  $198 = $ReallocAsyncCtx + 212 | 0; //@line 1897
  HEAP32[$198 >> 2] = $106; //@line 1898
  $199 = $ReallocAsyncCtx + 216 | 0; //@line 1899
  HEAP32[$199 >> 2] = $108; //@line 1900
  $200 = $ReallocAsyncCtx + 220 | 0; //@line 1901
  HEAP32[$200 >> 2] = $110; //@line 1902
  $201 = $ReallocAsyncCtx + 224 | 0; //@line 1903
  HEAP32[$201 >> 2] = $112; //@line 1904
  $202 = $ReallocAsyncCtx + 228 | 0; //@line 1905
  HEAP32[$202 >> 2] = $114; //@line 1906
  $203 = $ReallocAsyncCtx + 232 | 0; //@line 1907
  HEAP32[$203 >> 2] = $116; //@line 1908
  $204 = $ReallocAsyncCtx + 236 | 0; //@line 1909
  HEAP32[$204 >> 2] = $118; //@line 1910
  sp = STACKTOP; //@line 1911
  return;
 } else if ((label | 0) == 17) {
  $247 = HEAP8[$68 + ($121 & 255) >> 0] | 0; //@line 1917
  HEAP8[$52 >> 0] = ($247 & 255) >>> 4 & 7; //@line 1922
  HEAP8[$60 >> 0] = $247 & 15; //@line 1924
  $266 = $$0$be + 5 << 24 >> 24; //@line 1938
  HEAP32[$16 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 1946
  $276 = HEAP32[(HEAP32[$8 >> 2] | 0) + 40 >> 2] | 0; //@line 1949
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 1950
  $277 = FUNCTION_TABLE_iii[$276 & 31]($94, $2) | 0; //@line 1951
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 1954
   $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 1955
   HEAP32[$278 >> 2] = $2; //@line 1956
   $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 1957
   HEAP32[$279 >> 2] = $4; //@line 1958
   $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 1959
   HEAP32[$280 >> 2] = $6; //@line 1960
   $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 1961
   HEAP32[$281 >> 2] = $8; //@line 1962
   $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 1963
   HEAP32[$282 >> 2] = $10; //@line 1964
   $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 1965
   HEAP32[$283 >> 2] = $12; //@line 1966
   $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 1967
   HEAP32[$284 >> 2] = $14; //@line 1968
   $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 1969
   HEAP32[$285 >> 2] = $16; //@line 1970
   $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 1971
   HEAP32[$286 >> 2] = $18; //@line 1972
   $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 1973
   HEAP32[$287 >> 2] = $20; //@line 1974
   $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 1975
   HEAP32[$288 >> 2] = $22; //@line 1976
   $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 1977
   HEAP32[$289 >> 2] = $24; //@line 1978
   $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 1979
   HEAP32[$290 >> 2] = $26; //@line 1980
   $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 1981
   HEAP32[$291 >> 2] = $28; //@line 1982
   $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 1983
   HEAP32[$292 >> 2] = $30; //@line 1984
   $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 1985
   HEAP32[$293 >> 2] = $32; //@line 1986
   $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 1987
   HEAP32[$294 >> 2] = $34; //@line 1988
   $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 1989
   HEAP32[$295 >> 2] = $36; //@line 1990
   $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 1991
   HEAP32[$296 >> 2] = $38; //@line 1992
   $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 1993
   HEAP32[$297 >> 2] = $40; //@line 1994
   $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 1995
   HEAP8[$298 >> 0] = $266; //@line 1996
   $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 1997
   HEAP32[$299 >> 2] = $42; //@line 1998
   $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 1999
   HEAP32[$300 >> 2] = $44; //@line 2000
   $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 2001
   HEAP32[$301 >> 2] = $46; //@line 2002
   $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 2003
   HEAP32[$302 >> 2] = $50; //@line 2004
   $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 2005
   HEAP32[$303 >> 2] = $52; //@line 2006
   $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 2007
   HEAP32[$304 >> 2] = $54; //@line 2008
   $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 2009
   HEAP32[$305 >> 2] = $56; //@line 2010
   $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 2011
   HEAP32[$306 >> 2] = $58; //@line 2012
   $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 2013
   HEAP32[$307 >> 2] = $60; //@line 2014
   $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 2015
   HEAP32[$308 >> 2] = $62; //@line 2016
   $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 2017
   HEAP8[$309 >> 0] = $64; //@line 2018
   $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 2019
   HEAP32[$310 >> 2] = $66; //@line 2020
   $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 2021
   HEAP32[$311 >> 2] = $68; //@line 2022
   $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 2023
   HEAP32[$312 >> 2] = $70; //@line 2024
   $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 2025
   HEAP32[$313 >> 2] = $72; //@line 2026
   $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 2027
   HEAP32[$314 >> 2] = $74; //@line 2028
   $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 2029
   HEAP32[$315 >> 2] = $76; //@line 2030
   $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 2031
   HEAP8[$316 >> 0] = $78; //@line 2032
   $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 2033
   HEAP32[$317 >> 2] = $80; //@line 2034
   $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 2035
   HEAP8[$318 >> 0] = $82; //@line 2036
   $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 2037
   HEAP32[$319 >> 2] = $84; //@line 2038
   $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 2039
   HEAP32[$320 >> 2] = $86; //@line 2040
   $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 2041
   HEAP32[$321 >> 2] = $88; //@line 2042
   $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 2043
   HEAP32[$322 >> 2] = $90; //@line 2044
   $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 2045
   HEAP32[$323 >> 2] = $92; //@line 2046
   $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 2047
   HEAP32[$324 >> 2] = $94; //@line 2048
   $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 2049
   HEAP32[$325 >> 2] = $96; //@line 2050
   $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 2051
   HEAP32[$326 >> 2] = $98; //@line 2052
   $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 2053
   HEAP32[$327 >> 2] = $100; //@line 2054
   $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 2055
   HEAP32[$328 >> 2] = $104; //@line 2056
   $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 2057
   HEAP32[$329 >> 2] = $106; //@line 2058
   $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 2059
   HEAP32[$330 >> 2] = $108; //@line 2060
   $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 2061
   HEAP32[$331 >> 2] = $110; //@line 2062
   $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 2063
   HEAP32[$332 >> 2] = $112; //@line 2064
   $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 2065
   HEAP32[$333 >> 2] = $114; //@line 2066
   $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 2067
   HEAP32[$334 >> 2] = $116; //@line 2068
   $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 2069
   HEAP32[$335 >> 2] = $118; //@line 2070
   sp = STACKTOP; //@line 2071
   return;
  }
  HEAP8[___async_retval >> 0] = $277; //@line 2075
  ___async_unwind = 0; //@line 2076
  HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 2077
  $278 = $ReallocAsyncCtx2 + 4 | 0; //@line 2078
  HEAP32[$278 >> 2] = $2; //@line 2079
  $279 = $ReallocAsyncCtx2 + 8 | 0; //@line 2080
  HEAP32[$279 >> 2] = $4; //@line 2081
  $280 = $ReallocAsyncCtx2 + 12 | 0; //@line 2082
  HEAP32[$280 >> 2] = $6; //@line 2083
  $281 = $ReallocAsyncCtx2 + 16 | 0; //@line 2084
  HEAP32[$281 >> 2] = $8; //@line 2085
  $282 = $ReallocAsyncCtx2 + 20 | 0; //@line 2086
  HEAP32[$282 >> 2] = $10; //@line 2087
  $283 = $ReallocAsyncCtx2 + 24 | 0; //@line 2088
  HEAP32[$283 >> 2] = $12; //@line 2089
  $284 = $ReallocAsyncCtx2 + 28 | 0; //@line 2090
  HEAP32[$284 >> 2] = $14; //@line 2091
  $285 = $ReallocAsyncCtx2 + 32 | 0; //@line 2092
  HEAP32[$285 >> 2] = $16; //@line 2093
  $286 = $ReallocAsyncCtx2 + 36 | 0; //@line 2094
  HEAP32[$286 >> 2] = $18; //@line 2095
  $287 = $ReallocAsyncCtx2 + 40 | 0; //@line 2096
  HEAP32[$287 >> 2] = $20; //@line 2097
  $288 = $ReallocAsyncCtx2 + 44 | 0; //@line 2098
  HEAP32[$288 >> 2] = $22; //@line 2099
  $289 = $ReallocAsyncCtx2 + 48 | 0; //@line 2100
  HEAP32[$289 >> 2] = $24; //@line 2101
  $290 = $ReallocAsyncCtx2 + 52 | 0; //@line 2102
  HEAP32[$290 >> 2] = $26; //@line 2103
  $291 = $ReallocAsyncCtx2 + 56 | 0; //@line 2104
  HEAP32[$291 >> 2] = $28; //@line 2105
  $292 = $ReallocAsyncCtx2 + 60 | 0; //@line 2106
  HEAP32[$292 >> 2] = $30; //@line 2107
  $293 = $ReallocAsyncCtx2 + 64 | 0; //@line 2108
  HEAP32[$293 >> 2] = $32; //@line 2109
  $294 = $ReallocAsyncCtx2 + 68 | 0; //@line 2110
  HEAP32[$294 >> 2] = $34; //@line 2111
  $295 = $ReallocAsyncCtx2 + 72 | 0; //@line 2112
  HEAP32[$295 >> 2] = $36; //@line 2113
  $296 = $ReallocAsyncCtx2 + 76 | 0; //@line 2114
  HEAP32[$296 >> 2] = $38; //@line 2115
  $297 = $ReallocAsyncCtx2 + 80 | 0; //@line 2116
  HEAP32[$297 >> 2] = $40; //@line 2117
  $298 = $ReallocAsyncCtx2 + 84 | 0; //@line 2118
  HEAP8[$298 >> 0] = $266; //@line 2119
  $299 = $ReallocAsyncCtx2 + 88 | 0; //@line 2120
  HEAP32[$299 >> 2] = $42; //@line 2121
  $300 = $ReallocAsyncCtx2 + 92 | 0; //@line 2122
  HEAP32[$300 >> 2] = $44; //@line 2123
  $301 = $ReallocAsyncCtx2 + 96 | 0; //@line 2124
  HEAP32[$301 >> 2] = $46; //@line 2125
  $302 = $ReallocAsyncCtx2 + 100 | 0; //@line 2126
  HEAP32[$302 >> 2] = $50; //@line 2127
  $303 = $ReallocAsyncCtx2 + 104 | 0; //@line 2128
  HEAP32[$303 >> 2] = $52; //@line 2129
  $304 = $ReallocAsyncCtx2 + 108 | 0; //@line 2130
  HEAP32[$304 >> 2] = $54; //@line 2131
  $305 = $ReallocAsyncCtx2 + 112 | 0; //@line 2132
  HEAP32[$305 >> 2] = $56; //@line 2133
  $306 = $ReallocAsyncCtx2 + 116 | 0; //@line 2134
  HEAP32[$306 >> 2] = $58; //@line 2135
  $307 = $ReallocAsyncCtx2 + 120 | 0; //@line 2136
  HEAP32[$307 >> 2] = $60; //@line 2137
  $308 = $ReallocAsyncCtx2 + 124 | 0; //@line 2138
  HEAP32[$308 >> 2] = $62; //@line 2139
  $309 = $ReallocAsyncCtx2 + 128 | 0; //@line 2140
  HEAP8[$309 >> 0] = $64; //@line 2141
  $310 = $ReallocAsyncCtx2 + 132 | 0; //@line 2142
  HEAP32[$310 >> 2] = $66; //@line 2143
  $311 = $ReallocAsyncCtx2 + 136 | 0; //@line 2144
  HEAP32[$311 >> 2] = $68; //@line 2145
  $312 = $ReallocAsyncCtx2 + 140 | 0; //@line 2146
  HEAP32[$312 >> 2] = $70; //@line 2147
  $313 = $ReallocAsyncCtx2 + 144 | 0; //@line 2148
  HEAP32[$313 >> 2] = $72; //@line 2149
  $314 = $ReallocAsyncCtx2 + 148 | 0; //@line 2150
  HEAP32[$314 >> 2] = $74; //@line 2151
  $315 = $ReallocAsyncCtx2 + 152 | 0; //@line 2152
  HEAP32[$315 >> 2] = $76; //@line 2153
  $316 = $ReallocAsyncCtx2 + 156 | 0; //@line 2154
  HEAP8[$316 >> 0] = $78; //@line 2155
  $317 = $ReallocAsyncCtx2 + 160 | 0; //@line 2156
  HEAP32[$317 >> 2] = $80; //@line 2157
  $318 = $ReallocAsyncCtx2 + 164 | 0; //@line 2158
  HEAP8[$318 >> 0] = $82; //@line 2159
  $319 = $ReallocAsyncCtx2 + 168 | 0; //@line 2160
  HEAP32[$319 >> 2] = $84; //@line 2161
  $320 = $ReallocAsyncCtx2 + 172 | 0; //@line 2162
  HEAP32[$320 >> 2] = $86; //@line 2163
  $321 = $ReallocAsyncCtx2 + 176 | 0; //@line 2164
  HEAP32[$321 >> 2] = $88; //@line 2165
  $322 = $ReallocAsyncCtx2 + 180 | 0; //@line 2166
  HEAP32[$322 >> 2] = $90; //@line 2167
  $323 = $ReallocAsyncCtx2 + 184 | 0; //@line 2168
  HEAP32[$323 >> 2] = $92; //@line 2169
  $324 = $ReallocAsyncCtx2 + 188 | 0; //@line 2170
  HEAP32[$324 >> 2] = $94; //@line 2171
  $325 = $ReallocAsyncCtx2 + 192 | 0; //@line 2172
  HEAP32[$325 >> 2] = $96; //@line 2173
  $326 = $ReallocAsyncCtx2 + 196 | 0; //@line 2174
  HEAP32[$326 >> 2] = $98; //@line 2175
  $327 = $ReallocAsyncCtx2 + 200 | 0; //@line 2176
  HEAP32[$327 >> 2] = $100; //@line 2177
  $328 = $ReallocAsyncCtx2 + 204 | 0; //@line 2178
  HEAP32[$328 >> 2] = $104; //@line 2179
  $329 = $ReallocAsyncCtx2 + 208 | 0; //@line 2180
  HEAP32[$329 >> 2] = $106; //@line 2181
  $330 = $ReallocAsyncCtx2 + 212 | 0; //@line 2182
  HEAP32[$330 >> 2] = $108; //@line 2183
  $331 = $ReallocAsyncCtx2 + 216 | 0; //@line 2184
  HEAP32[$331 >> 2] = $110; //@line 2185
  $332 = $ReallocAsyncCtx2 + 220 | 0; //@line 2186
  HEAP32[$332 >> 2] = $112; //@line 2187
  $333 = $ReallocAsyncCtx2 + 224 | 0; //@line 2188
  HEAP32[$333 >> 2] = $114; //@line 2189
  $334 = $ReallocAsyncCtx2 + 228 | 0; //@line 2190
  HEAP32[$334 >> 2] = $116; //@line 2191
  $335 = $ReallocAsyncCtx2 + 232 | 0; //@line 2192
  HEAP32[$335 >> 2] = $118; //@line 2193
  sp = STACKTOP; //@line 2194
  return;
 } else if ((label | 0) == 21) {
  $339 = HEAP32[$337 >> 2] | 0; //@line 2198
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 2199
  $340 = FUNCTION_TABLE_ii[$339 & 15]($96) | 0; //@line 2200
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 2203
   $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 2204
   HEAP32[$341 >> 2] = $2; //@line 2205
   $342 = $ReallocAsyncCtx3 + 8 | 0; //@line 2206
   HEAP32[$342 >> 2] = $4; //@line 2207
   $343 = $ReallocAsyncCtx3 + 12 | 0; //@line 2208
   HEAP32[$343 >> 2] = $6; //@line 2209
   $344 = $ReallocAsyncCtx3 + 16 | 0; //@line 2210
   HEAP32[$344 >> 2] = $8; //@line 2211
   $345 = $ReallocAsyncCtx3 + 20 | 0; //@line 2212
   HEAP32[$345 >> 2] = $10; //@line 2213
   $346 = $ReallocAsyncCtx3 + 24 | 0; //@line 2214
   HEAP32[$346 >> 2] = $12; //@line 2215
   $347 = $ReallocAsyncCtx3 + 28 | 0; //@line 2216
   HEAP32[$347 >> 2] = $14; //@line 2217
   $348 = $ReallocAsyncCtx3 + 32 | 0; //@line 2218
   HEAP32[$348 >> 2] = $16; //@line 2219
   $349 = $ReallocAsyncCtx3 + 36 | 0; //@line 2220
   HEAP32[$349 >> 2] = $18; //@line 2221
   $350 = $ReallocAsyncCtx3 + 40 | 0; //@line 2222
   HEAP32[$350 >> 2] = $20; //@line 2223
   $351 = $ReallocAsyncCtx3 + 44 | 0; //@line 2224
   HEAP32[$351 >> 2] = $22; //@line 2225
   $352 = $ReallocAsyncCtx3 + 48 | 0; //@line 2226
   HEAP32[$352 >> 2] = $24; //@line 2227
   $353 = $ReallocAsyncCtx3 + 52 | 0; //@line 2228
   HEAP32[$353 >> 2] = $26; //@line 2229
   $354 = $ReallocAsyncCtx3 + 56 | 0; //@line 2230
   HEAP32[$354 >> 2] = $28; //@line 2231
   $355 = $ReallocAsyncCtx3 + 60 | 0; //@line 2232
   HEAP32[$355 >> 2] = $30; //@line 2233
   $356 = $ReallocAsyncCtx3 + 64 | 0; //@line 2234
   HEAP32[$356 >> 2] = $32; //@line 2235
   $357 = $ReallocAsyncCtx3 + 68 | 0; //@line 2236
   HEAP32[$357 >> 2] = $34; //@line 2237
   $358 = $ReallocAsyncCtx3 + 72 | 0; //@line 2238
   HEAP32[$358 >> 2] = $36; //@line 2239
   $359 = $ReallocAsyncCtx3 + 76 | 0; //@line 2240
   HEAP32[$359 >> 2] = $38; //@line 2241
   $360 = $ReallocAsyncCtx3 + 80 | 0; //@line 2242
   HEAP32[$360 >> 2] = $40; //@line 2243
   $361 = $ReallocAsyncCtx3 + 84 | 0; //@line 2244
   HEAP32[$361 >> 2] = $42; //@line 2245
   $362 = $ReallocAsyncCtx3 + 88 | 0; //@line 2246
   HEAP32[$362 >> 2] = $44; //@line 2247
   $363 = $ReallocAsyncCtx3 + 92 | 0; //@line 2248
   HEAP32[$363 >> 2] = $46; //@line 2249
   $364 = $ReallocAsyncCtx3 + 96 | 0; //@line 2250
   HEAP32[$364 >> 2] = $50; //@line 2251
   $365 = $ReallocAsyncCtx3 + 100 | 0; //@line 2252
   HEAP32[$365 >> 2] = $52; //@line 2253
   $366 = $ReallocAsyncCtx3 + 104 | 0; //@line 2254
   HEAP32[$366 >> 2] = $54; //@line 2255
   $367 = $ReallocAsyncCtx3 + 108 | 0; //@line 2256
   HEAP8[$367 >> 0] = $121; //@line 2257
   $368 = $ReallocAsyncCtx3 + 112 | 0; //@line 2258
   HEAP32[$368 >> 2] = $56; //@line 2259
   $369 = $ReallocAsyncCtx3 + 116 | 0; //@line 2260
   HEAP32[$369 >> 2] = $58; //@line 2261
   $370 = $ReallocAsyncCtx3 + 120 | 0; //@line 2262
   HEAP32[$370 >> 2] = $60; //@line 2263
   $371 = $ReallocAsyncCtx3 + 124 | 0; //@line 2264
   HEAP32[$371 >> 2] = $62; //@line 2265
   $372 = $ReallocAsyncCtx3 + 128 | 0; //@line 2266
   HEAP8[$372 >> 0] = $64; //@line 2267
   $373 = $ReallocAsyncCtx3 + 132 | 0; //@line 2268
   HEAP32[$373 >> 2] = $66; //@line 2269
   $374 = $ReallocAsyncCtx3 + 136 | 0; //@line 2270
   HEAP32[$374 >> 2] = $68; //@line 2271
   $375 = $ReallocAsyncCtx3 + 140 | 0; //@line 2272
   HEAP32[$375 >> 2] = $70; //@line 2273
   $376 = $ReallocAsyncCtx3 + 144 | 0; //@line 2274
   HEAP32[$376 >> 2] = $72; //@line 2275
   $377 = $ReallocAsyncCtx3 + 148 | 0; //@line 2276
   HEAP32[$377 >> 2] = $74; //@line 2277
   $378 = $ReallocAsyncCtx3 + 152 | 0; //@line 2278
   HEAP32[$378 >> 2] = $76; //@line 2279
   $379 = $ReallocAsyncCtx3 + 156 | 0; //@line 2280
   HEAP8[$379 >> 0] = $78; //@line 2281
   $380 = $ReallocAsyncCtx3 + 160 | 0; //@line 2282
   HEAP32[$380 >> 2] = $80; //@line 2283
   $381 = $ReallocAsyncCtx3 + 164 | 0; //@line 2284
   HEAP8[$381 >> 0] = $82; //@line 2285
   $382 = $ReallocAsyncCtx3 + 168 | 0; //@line 2286
   HEAP32[$382 >> 2] = $84; //@line 2287
   $383 = $ReallocAsyncCtx3 + 172 | 0; //@line 2288
   HEAP32[$383 >> 2] = $86; //@line 2289
   $384 = $ReallocAsyncCtx3 + 176 | 0; //@line 2290
   HEAP32[$384 >> 2] = $88; //@line 2291
   $385 = $ReallocAsyncCtx3 + 180 | 0; //@line 2292
   HEAP32[$385 >> 2] = $90; //@line 2293
   $386 = $ReallocAsyncCtx3 + 184 | 0; //@line 2294
   HEAP32[$386 >> 2] = $92; //@line 2295
   $387 = $ReallocAsyncCtx3 + 188 | 0; //@line 2296
   HEAP32[$387 >> 2] = $94; //@line 2297
   $388 = $ReallocAsyncCtx3 + 192 | 0; //@line 2298
   HEAP32[$388 >> 2] = $96; //@line 2299
   $389 = $ReallocAsyncCtx3 + 196 | 0; //@line 2300
   HEAP32[$389 >> 2] = $98; //@line 2301
   $390 = $ReallocAsyncCtx3 + 200 | 0; //@line 2302
   HEAP32[$390 >> 2] = $100; //@line 2303
   $391 = $ReallocAsyncCtx3 + 204 | 0; //@line 2304
   HEAP32[$391 >> 2] = $104; //@line 2305
   $392 = $ReallocAsyncCtx3 + 208 | 0; //@line 2306
   HEAP32[$392 >> 2] = $106; //@line 2307
   $393 = $ReallocAsyncCtx3 + 212 | 0; //@line 2308
   HEAP32[$393 >> 2] = $108; //@line 2309
   $394 = $ReallocAsyncCtx3 + 216 | 0; //@line 2310
   HEAP32[$394 >> 2] = $110; //@line 2311
   $395 = $ReallocAsyncCtx3 + 220 | 0; //@line 2312
   HEAP32[$395 >> 2] = $112; //@line 2313
   $396 = $ReallocAsyncCtx3 + 224 | 0; //@line 2314
   HEAP32[$396 >> 2] = $114; //@line 2315
   $397 = $ReallocAsyncCtx3 + 228 | 0; //@line 2316
   HEAP32[$397 >> 2] = $116; //@line 2317
   $398 = $ReallocAsyncCtx3 + 232 | 0; //@line 2318
   HEAP32[$398 >> 2] = $118; //@line 2319
   sp = STACKTOP; //@line 2320
   return;
  }
  HEAP8[___async_retval >> 0] = $340; //@line 2324
  ___async_unwind = 0; //@line 2325
  HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 2326
  $341 = $ReallocAsyncCtx3 + 4 | 0; //@line 2327
  HEAP32[$341 >> 2] = $2; //@line 2328
  $342 = $ReallocAsyncCtx3 + 8 | 0; //@line 2329
  HEAP32[$342 >> 2] = $4; //@line 2330
  $343 = $ReallocAsyncCtx3 + 12 | 0; //@line 2331
  HEAP32[$343 >> 2] = $6; //@line 2332
  $344 = $ReallocAsyncCtx3 + 16 | 0; //@line 2333
  HEAP32[$344 >> 2] = $8; //@line 2334
  $345 = $ReallocAsyncCtx3 + 20 | 0; //@line 2335
  HEAP32[$345 >> 2] = $10; //@line 2336
  $346 = $ReallocAsyncCtx3 + 24 | 0; //@line 2337
  HEAP32[$346 >> 2] = $12; //@line 2338
  $347 = $ReallocAsyncCtx3 + 28 | 0; //@line 2339
  HEAP32[$347 >> 2] = $14; //@line 2340
  $348 = $ReallocAsyncCtx3 + 32 | 0; //@line 2341
  HEAP32[$348 >> 2] = $16; //@line 2342
  $349 = $ReallocAsyncCtx3 + 36 | 0; //@line 2343
  HEAP32[$349 >> 2] = $18; //@line 2344
  $350 = $ReallocAsyncCtx3 + 40 | 0; //@line 2345
  HEAP32[$350 >> 2] = $20; //@line 2346
  $351 = $ReallocAsyncCtx3 + 44 | 0; //@line 2347
  HEAP32[$351 >> 2] = $22; //@line 2348
  $352 = $ReallocAsyncCtx3 + 48 | 0; //@line 2349
  HEAP32[$352 >> 2] = $24; //@line 2350
  $353 = $ReallocAsyncCtx3 + 52 | 0; //@line 2351
  HEAP32[$353 >> 2] = $26; //@line 2352
  $354 = $ReallocAsyncCtx3 + 56 | 0; //@line 2353
  HEAP32[$354 >> 2] = $28; //@line 2354
  $355 = $ReallocAsyncCtx3 + 60 | 0; //@line 2355
  HEAP32[$355 >> 2] = $30; //@line 2356
  $356 = $ReallocAsyncCtx3 + 64 | 0; //@line 2357
  HEAP32[$356 >> 2] = $32; //@line 2358
  $357 = $ReallocAsyncCtx3 + 68 | 0; //@line 2359
  HEAP32[$357 >> 2] = $34; //@line 2360
  $358 = $ReallocAsyncCtx3 + 72 | 0; //@line 2361
  HEAP32[$358 >> 2] = $36; //@line 2362
  $359 = $ReallocAsyncCtx3 + 76 | 0; //@line 2363
  HEAP32[$359 >> 2] = $38; //@line 2364
  $360 = $ReallocAsyncCtx3 + 80 | 0; //@line 2365
  HEAP32[$360 >> 2] = $40; //@line 2366
  $361 = $ReallocAsyncCtx3 + 84 | 0; //@line 2367
  HEAP32[$361 >> 2] = $42; //@line 2368
  $362 = $ReallocAsyncCtx3 + 88 | 0; //@line 2369
  HEAP32[$362 >> 2] = $44; //@line 2370
  $363 = $ReallocAsyncCtx3 + 92 | 0; //@line 2371
  HEAP32[$363 >> 2] = $46; //@line 2372
  $364 = $ReallocAsyncCtx3 + 96 | 0; //@line 2373
  HEAP32[$364 >> 2] = $50; //@line 2374
  $365 = $ReallocAsyncCtx3 + 100 | 0; //@line 2375
  HEAP32[$365 >> 2] = $52; //@line 2376
  $366 = $ReallocAsyncCtx3 + 104 | 0; //@line 2377
  HEAP32[$366 >> 2] = $54; //@line 2378
  $367 = $ReallocAsyncCtx3 + 108 | 0; //@line 2379
  HEAP8[$367 >> 0] = $121; //@line 2380
  $368 = $ReallocAsyncCtx3 + 112 | 0; //@line 2381
  HEAP32[$368 >> 2] = $56; //@line 2382
  $369 = $ReallocAsyncCtx3 + 116 | 0; //@line 2383
  HEAP32[$369 >> 2] = $58; //@line 2384
  $370 = $ReallocAsyncCtx3 + 120 | 0; //@line 2385
  HEAP32[$370 >> 2] = $60; //@line 2386
  $371 = $ReallocAsyncCtx3 + 124 | 0; //@line 2387
  HEAP32[$371 >> 2] = $62; //@line 2388
  $372 = $ReallocAsyncCtx3 + 128 | 0; //@line 2389
  HEAP8[$372 >> 0] = $64; //@line 2390
  $373 = $ReallocAsyncCtx3 + 132 | 0; //@line 2391
  HEAP32[$373 >> 2] = $66; //@line 2392
  $374 = $ReallocAsyncCtx3 + 136 | 0; //@line 2393
  HEAP32[$374 >> 2] = $68; //@line 2394
  $375 = $ReallocAsyncCtx3 + 140 | 0; //@line 2395
  HEAP32[$375 >> 2] = $70; //@line 2396
  $376 = $ReallocAsyncCtx3 + 144 | 0; //@line 2397
  HEAP32[$376 >> 2] = $72; //@line 2398
  $377 = $ReallocAsyncCtx3 + 148 | 0; //@line 2399
  HEAP32[$377 >> 2] = $74; //@line 2400
  $378 = $ReallocAsyncCtx3 + 152 | 0; //@line 2401
  HEAP32[$378 >> 2] = $76; //@line 2402
  $379 = $ReallocAsyncCtx3 + 156 | 0; //@line 2403
  HEAP8[$379 >> 0] = $78; //@line 2404
  $380 = $ReallocAsyncCtx3 + 160 | 0; //@line 2405
  HEAP32[$380 >> 2] = $80; //@line 2406
  $381 = $ReallocAsyncCtx3 + 164 | 0; //@line 2407
  HEAP8[$381 >> 0] = $82; //@line 2408
  $382 = $ReallocAsyncCtx3 + 168 | 0; //@line 2409
  HEAP32[$382 >> 2] = $84; //@line 2410
  $383 = $ReallocAsyncCtx3 + 172 | 0; //@line 2411
  HEAP32[$383 >> 2] = $86; //@line 2412
  $384 = $ReallocAsyncCtx3 + 176 | 0; //@line 2413
  HEAP32[$384 >> 2] = $88; //@line 2414
  $385 = $ReallocAsyncCtx3 + 180 | 0; //@line 2415
  HEAP32[$385 >> 2] = $90; //@line 2416
  $386 = $ReallocAsyncCtx3 + 184 | 0; //@line 2417
  HEAP32[$386 >> 2] = $92; //@line 2418
  $387 = $ReallocAsyncCtx3 + 188 | 0; //@line 2419
  HEAP32[$387 >> 2] = $94; //@line 2420
  $388 = $ReallocAsyncCtx3 + 192 | 0; //@line 2421
  HEAP32[$388 >> 2] = $96; //@line 2422
  $389 = $ReallocAsyncCtx3 + 196 | 0; //@line 2423
  HEAP32[$389 >> 2] = $98; //@line 2424
  $390 = $ReallocAsyncCtx3 + 200 | 0; //@line 2425
  HEAP32[$390 >> 2] = $100; //@line 2426
  $391 = $ReallocAsyncCtx3 + 204 | 0; //@line 2427
  HEAP32[$391 >> 2] = $104; //@line 2428
  $392 = $ReallocAsyncCtx3 + 208 | 0; //@line 2429
  HEAP32[$392 >> 2] = $106; //@line 2430
  $393 = $ReallocAsyncCtx3 + 212 | 0; //@line 2431
  HEAP32[$393 >> 2] = $108; //@line 2432
  $394 = $ReallocAsyncCtx3 + 216 | 0; //@line 2433
  HEAP32[$394 >> 2] = $110; //@line 2434
  $395 = $ReallocAsyncCtx3 + 220 | 0; //@line 2435
  HEAP32[$395 >> 2] = $112; //@line 2436
  $396 = $ReallocAsyncCtx3 + 224 | 0; //@line 2437
  HEAP32[$396 >> 2] = $114; //@line 2438
  $397 = $ReallocAsyncCtx3 + 228 | 0; //@line 2439
  HEAP32[$397 >> 2] = $116; //@line 2440
  $398 = $ReallocAsyncCtx3 + 232 | 0; //@line 2441
  HEAP32[$398 >> 2] = $118; //@line 2442
  sp = STACKTOP; //@line 2443
  return;
 } else if ((label | 0) == 26) {
  $418 = HEAP8[$68 + ($121 & 255) >> 0] | 0; //@line 2450
  HEAP32[$42 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 2471
  HEAP32[$34 >> 2] = 0; //@line 2472
  $439 = $$0$be + 6 << 24 >> 24; //@line 2473
  HEAP8[$56 >> 0] = HEAP8[$68 + ($$0$be + 5 & 255) >> 0] | 0; //@line 2477
  $445 = HEAP32[(HEAP32[$50 >> 2] | 0) + 8 >> 2] | 0; //@line 2480
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 2481
  $446 = FUNCTION_TABLE_iiii[$445 & 31]($94, $418, $10) | 0; //@line 2482
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 2485
   $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 2486
   HEAP32[$447 >> 2] = $2; //@line 2487
   $448 = $ReallocAsyncCtx4 + 8 | 0; //@line 2488
   HEAP32[$448 >> 2] = $4; //@line 2489
   $449 = $ReallocAsyncCtx4 + 12 | 0; //@line 2490
   HEAP32[$449 >> 2] = $6; //@line 2491
   $450 = $ReallocAsyncCtx4 + 16 | 0; //@line 2492
   HEAP32[$450 >> 2] = $8; //@line 2493
   $451 = $ReallocAsyncCtx4 + 20 | 0; //@line 2494
   HEAP32[$451 >> 2] = $10; //@line 2495
   $452 = $ReallocAsyncCtx4 + 24 | 0; //@line 2496
   HEAP32[$452 >> 2] = $12; //@line 2497
   $453 = $ReallocAsyncCtx4 + 28 | 0; //@line 2498
   HEAP32[$453 >> 2] = $14; //@line 2499
   $454 = $ReallocAsyncCtx4 + 32 | 0; //@line 2500
   HEAP32[$454 >> 2] = $16; //@line 2501
   $455 = $ReallocAsyncCtx4 + 36 | 0; //@line 2502
   HEAP32[$455 >> 2] = $18; //@line 2503
   $456 = $ReallocAsyncCtx4 + 40 | 0; //@line 2504
   HEAP32[$456 >> 2] = $20; //@line 2505
   $457 = $ReallocAsyncCtx4 + 44 | 0; //@line 2506
   HEAP32[$457 >> 2] = $22; //@line 2507
   $458 = $ReallocAsyncCtx4 + 48 | 0; //@line 2508
   HEAP32[$458 >> 2] = $24; //@line 2509
   $459 = $ReallocAsyncCtx4 + 52 | 0; //@line 2510
   HEAP32[$459 >> 2] = $26; //@line 2511
   $460 = $ReallocAsyncCtx4 + 56 | 0; //@line 2512
   HEAP32[$460 >> 2] = $28; //@line 2513
   $461 = $ReallocAsyncCtx4 + 60 | 0; //@line 2514
   HEAP32[$461 >> 2] = $30; //@line 2515
   $462 = $ReallocAsyncCtx4 + 64 | 0; //@line 2516
   HEAP32[$462 >> 2] = $32; //@line 2517
   $463 = $ReallocAsyncCtx4 + 68 | 0; //@line 2518
   HEAP32[$463 >> 2] = $34; //@line 2519
   $464 = $ReallocAsyncCtx4 + 72 | 0; //@line 2520
   HEAP32[$464 >> 2] = $36; //@line 2521
   $465 = $ReallocAsyncCtx4 + 76 | 0; //@line 2522
   HEAP32[$465 >> 2] = $38; //@line 2523
   $466 = $ReallocAsyncCtx4 + 80 | 0; //@line 2524
   HEAP32[$466 >> 2] = $40; //@line 2525
   $467 = $ReallocAsyncCtx4 + 84 | 0; //@line 2526
   HEAP32[$467 >> 2] = $42; //@line 2527
   $468 = $ReallocAsyncCtx4 + 88 | 0; //@line 2528
   HEAP32[$468 >> 2] = $44; //@line 2529
   $469 = $ReallocAsyncCtx4 + 92 | 0; //@line 2530
   HEAP32[$469 >> 2] = $46; //@line 2531
   $470 = $ReallocAsyncCtx4 + 96 | 0; //@line 2532
   HEAP32[$470 >> 2] = $50; //@line 2533
   $471 = $ReallocAsyncCtx4 + 100 | 0; //@line 2534
   HEAP32[$471 >> 2] = $52; //@line 2535
   $472 = $ReallocAsyncCtx4 + 104 | 0; //@line 2536
   HEAP32[$472 >> 2] = $54; //@line 2537
   $473 = $ReallocAsyncCtx4 + 108 | 0; //@line 2538
   HEAP32[$473 >> 2] = $56; //@line 2539
   $474 = $ReallocAsyncCtx4 + 112 | 0; //@line 2540
   HEAP8[$474 >> 0] = $439; //@line 2541
   $475 = $ReallocAsyncCtx4 + 116 | 0; //@line 2542
   HEAP32[$475 >> 2] = $58; //@line 2543
   $476 = $ReallocAsyncCtx4 + 120 | 0; //@line 2544
   HEAP32[$476 >> 2] = $60; //@line 2545
   $477 = $ReallocAsyncCtx4 + 124 | 0; //@line 2546
   HEAP32[$477 >> 2] = $62; //@line 2547
   $478 = $ReallocAsyncCtx4 + 128 | 0; //@line 2548
   HEAP8[$478 >> 0] = $64; //@line 2549
   $479 = $ReallocAsyncCtx4 + 132 | 0; //@line 2550
   HEAP32[$479 >> 2] = $66; //@line 2551
   $480 = $ReallocAsyncCtx4 + 136 | 0; //@line 2552
   HEAP32[$480 >> 2] = $68; //@line 2553
   $481 = $ReallocAsyncCtx4 + 140 | 0; //@line 2554
   HEAP32[$481 >> 2] = $70; //@line 2555
   $482 = $ReallocAsyncCtx4 + 144 | 0; //@line 2556
   HEAP32[$482 >> 2] = $72; //@line 2557
   $483 = $ReallocAsyncCtx4 + 148 | 0; //@line 2558
   HEAP32[$483 >> 2] = $74; //@line 2559
   $484 = $ReallocAsyncCtx4 + 152 | 0; //@line 2560
   HEAP32[$484 >> 2] = $76; //@line 2561
   $485 = $ReallocAsyncCtx4 + 156 | 0; //@line 2562
   HEAP8[$485 >> 0] = $78; //@line 2563
   $486 = $ReallocAsyncCtx4 + 160 | 0; //@line 2564
   HEAP32[$486 >> 2] = $80; //@line 2565
   $487 = $ReallocAsyncCtx4 + 164 | 0; //@line 2566
   HEAP8[$487 >> 0] = $82; //@line 2567
   $488 = $ReallocAsyncCtx4 + 168 | 0; //@line 2568
   HEAP32[$488 >> 2] = $84; //@line 2569
   $489 = $ReallocAsyncCtx4 + 172 | 0; //@line 2570
   HEAP32[$489 >> 2] = $86; //@line 2571
   $490 = $ReallocAsyncCtx4 + 176 | 0; //@line 2572
   HEAP32[$490 >> 2] = $88; //@line 2573
   $491 = $ReallocAsyncCtx4 + 180 | 0; //@line 2574
   HEAP32[$491 >> 2] = $90; //@line 2575
   $492 = $ReallocAsyncCtx4 + 184 | 0; //@line 2576
   HEAP32[$492 >> 2] = $92; //@line 2577
   $493 = $ReallocAsyncCtx4 + 188 | 0; //@line 2578
   HEAP32[$493 >> 2] = $94; //@line 2579
   $494 = $ReallocAsyncCtx4 + 192 | 0; //@line 2580
   HEAP32[$494 >> 2] = $96; //@line 2581
   $495 = $ReallocAsyncCtx4 + 196 | 0; //@line 2582
   HEAP32[$495 >> 2] = $98; //@line 2583
   $496 = $ReallocAsyncCtx4 + 200 | 0; //@line 2584
   HEAP32[$496 >> 2] = $100; //@line 2585
   $497 = $ReallocAsyncCtx4 + 204 | 0; //@line 2586
   HEAP32[$497 >> 2] = $104; //@line 2587
   $498 = $ReallocAsyncCtx4 + 208 | 0; //@line 2588
   HEAP32[$498 >> 2] = $106; //@line 2589
   $499 = $ReallocAsyncCtx4 + 212 | 0; //@line 2590
   HEAP32[$499 >> 2] = $108; //@line 2591
   $500 = $ReallocAsyncCtx4 + 216 | 0; //@line 2592
   HEAP32[$500 >> 2] = $110; //@line 2593
   $501 = $ReallocAsyncCtx4 + 220 | 0; //@line 2594
   HEAP32[$501 >> 2] = $112; //@line 2595
   $502 = $ReallocAsyncCtx4 + 224 | 0; //@line 2596
   HEAP32[$502 >> 2] = $114; //@line 2597
   $503 = $ReallocAsyncCtx4 + 228 | 0; //@line 2598
   HEAP32[$503 >> 2] = $116; //@line 2599
   $504 = $ReallocAsyncCtx4 + 232 | 0; //@line 2600
   HEAP32[$504 >> 2] = $118; //@line 2601
   sp = STACKTOP; //@line 2602
   return;
  }
  HEAP8[___async_retval >> 0] = $446; //@line 2606
  ___async_unwind = 0; //@line 2607
  HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 2608
  $447 = $ReallocAsyncCtx4 + 4 | 0; //@line 2609
  HEAP32[$447 >> 2] = $2; //@line 2610
  $448 = $ReallocAsyncCtx4 + 8 | 0; //@line 2611
  HEAP32[$448 >> 2] = $4; //@line 2612
  $449 = $ReallocAsyncCtx4 + 12 | 0; //@line 2613
  HEAP32[$449 >> 2] = $6; //@line 2614
  $450 = $ReallocAsyncCtx4 + 16 | 0; //@line 2615
  HEAP32[$450 >> 2] = $8; //@line 2616
  $451 = $ReallocAsyncCtx4 + 20 | 0; //@line 2617
  HEAP32[$451 >> 2] = $10; //@line 2618
  $452 = $ReallocAsyncCtx4 + 24 | 0; //@line 2619
  HEAP32[$452 >> 2] = $12; //@line 2620
  $453 = $ReallocAsyncCtx4 + 28 | 0; //@line 2621
  HEAP32[$453 >> 2] = $14; //@line 2622
  $454 = $ReallocAsyncCtx4 + 32 | 0; //@line 2623
  HEAP32[$454 >> 2] = $16; //@line 2624
  $455 = $ReallocAsyncCtx4 + 36 | 0; //@line 2625
  HEAP32[$455 >> 2] = $18; //@line 2626
  $456 = $ReallocAsyncCtx4 + 40 | 0; //@line 2627
  HEAP32[$456 >> 2] = $20; //@line 2628
  $457 = $ReallocAsyncCtx4 + 44 | 0; //@line 2629
  HEAP32[$457 >> 2] = $22; //@line 2630
  $458 = $ReallocAsyncCtx4 + 48 | 0; //@line 2631
  HEAP32[$458 >> 2] = $24; //@line 2632
  $459 = $ReallocAsyncCtx4 + 52 | 0; //@line 2633
  HEAP32[$459 >> 2] = $26; //@line 2634
  $460 = $ReallocAsyncCtx4 + 56 | 0; //@line 2635
  HEAP32[$460 >> 2] = $28; //@line 2636
  $461 = $ReallocAsyncCtx4 + 60 | 0; //@line 2637
  HEAP32[$461 >> 2] = $30; //@line 2638
  $462 = $ReallocAsyncCtx4 + 64 | 0; //@line 2639
  HEAP32[$462 >> 2] = $32; //@line 2640
  $463 = $ReallocAsyncCtx4 + 68 | 0; //@line 2641
  HEAP32[$463 >> 2] = $34; //@line 2642
  $464 = $ReallocAsyncCtx4 + 72 | 0; //@line 2643
  HEAP32[$464 >> 2] = $36; //@line 2644
  $465 = $ReallocAsyncCtx4 + 76 | 0; //@line 2645
  HEAP32[$465 >> 2] = $38; //@line 2646
  $466 = $ReallocAsyncCtx4 + 80 | 0; //@line 2647
  HEAP32[$466 >> 2] = $40; //@line 2648
  $467 = $ReallocAsyncCtx4 + 84 | 0; //@line 2649
  HEAP32[$467 >> 2] = $42; //@line 2650
  $468 = $ReallocAsyncCtx4 + 88 | 0; //@line 2651
  HEAP32[$468 >> 2] = $44; //@line 2652
  $469 = $ReallocAsyncCtx4 + 92 | 0; //@line 2653
  HEAP32[$469 >> 2] = $46; //@line 2654
  $470 = $ReallocAsyncCtx4 + 96 | 0; //@line 2655
  HEAP32[$470 >> 2] = $50; //@line 2656
  $471 = $ReallocAsyncCtx4 + 100 | 0; //@line 2657
  HEAP32[$471 >> 2] = $52; //@line 2658
  $472 = $ReallocAsyncCtx4 + 104 | 0; //@line 2659
  HEAP32[$472 >> 2] = $54; //@line 2660
  $473 = $ReallocAsyncCtx4 + 108 | 0; //@line 2661
  HEAP32[$473 >> 2] = $56; //@line 2662
  $474 = $ReallocAsyncCtx4 + 112 | 0; //@line 2663
  HEAP8[$474 >> 0] = $439; //@line 2664
  $475 = $ReallocAsyncCtx4 + 116 | 0; //@line 2665
  HEAP32[$475 >> 2] = $58; //@line 2666
  $476 = $ReallocAsyncCtx4 + 120 | 0; //@line 2667
  HEAP32[$476 >> 2] = $60; //@line 2668
  $477 = $ReallocAsyncCtx4 + 124 | 0; //@line 2669
  HEAP32[$477 >> 2] = $62; //@line 2670
  $478 = $ReallocAsyncCtx4 + 128 | 0; //@line 2671
  HEAP8[$478 >> 0] = $64; //@line 2672
  $479 = $ReallocAsyncCtx4 + 132 | 0; //@line 2673
  HEAP32[$479 >> 2] = $66; //@line 2674
  $480 = $ReallocAsyncCtx4 + 136 | 0; //@line 2675
  HEAP32[$480 >> 2] = $68; //@line 2676
  $481 = $ReallocAsyncCtx4 + 140 | 0; //@line 2677
  HEAP32[$481 >> 2] = $70; //@line 2678
  $482 = $ReallocAsyncCtx4 + 144 | 0; //@line 2679
  HEAP32[$482 >> 2] = $72; //@line 2680
  $483 = $ReallocAsyncCtx4 + 148 | 0; //@line 2681
  HEAP32[$483 >> 2] = $74; //@line 2682
  $484 = $ReallocAsyncCtx4 + 152 | 0; //@line 2683
  HEAP32[$484 >> 2] = $76; //@line 2684
  $485 = $ReallocAsyncCtx4 + 156 | 0; //@line 2685
  HEAP8[$485 >> 0] = $78; //@line 2686
  $486 = $ReallocAsyncCtx4 + 160 | 0; //@line 2687
  HEAP32[$486 >> 2] = $80; //@line 2688
  $487 = $ReallocAsyncCtx4 + 164 | 0; //@line 2689
  HEAP8[$487 >> 0] = $82; //@line 2690
  $488 = $ReallocAsyncCtx4 + 168 | 0; //@line 2691
  HEAP32[$488 >> 2] = $84; //@line 2692
  $489 = $ReallocAsyncCtx4 + 172 | 0; //@line 2693
  HEAP32[$489 >> 2] = $86; //@line 2694
  $490 = $ReallocAsyncCtx4 + 176 | 0; //@line 2695
  HEAP32[$490 >> 2] = $88; //@line 2696
  $491 = $ReallocAsyncCtx4 + 180 | 0; //@line 2697
  HEAP32[$491 >> 2] = $90; //@line 2698
  $492 = $ReallocAsyncCtx4 + 184 | 0; //@line 2699
  HEAP32[$492 >> 2] = $92; //@line 2700
  $493 = $ReallocAsyncCtx4 + 188 | 0; //@line 2701
  HEAP32[$493 >> 2] = $94; //@line 2702
  $494 = $ReallocAsyncCtx4 + 192 | 0; //@line 2703
  HEAP32[$494 >> 2] = $96; //@line 2704
  $495 = $ReallocAsyncCtx4 + 196 | 0; //@line 2705
  HEAP32[$495 >> 2] = $98; //@line 2706
  $496 = $ReallocAsyncCtx4 + 200 | 0; //@line 2707
  HEAP32[$496 >> 2] = $100; //@line 2708
  $497 = $ReallocAsyncCtx4 + 204 | 0; //@line 2709
  HEAP32[$497 >> 2] = $104; //@line 2710
  $498 = $ReallocAsyncCtx4 + 208 | 0; //@line 2711
  HEAP32[$498 >> 2] = $106; //@line 2712
  $499 = $ReallocAsyncCtx4 + 212 | 0; //@line 2713
  HEAP32[$499 >> 2] = $108; //@line 2714
  $500 = $ReallocAsyncCtx4 + 216 | 0; //@line 2715
  HEAP32[$500 >> 2] = $110; //@line 2716
  $501 = $ReallocAsyncCtx4 + 220 | 0; //@line 2717
  HEAP32[$501 >> 2] = $112; //@line 2718
  $502 = $ReallocAsyncCtx4 + 224 | 0; //@line 2719
  HEAP32[$502 >> 2] = $114; //@line 2720
  $503 = $ReallocAsyncCtx4 + 228 | 0; //@line 2721
  HEAP32[$503 >> 2] = $116; //@line 2722
  $504 = $ReallocAsyncCtx4 + 232 | 0; //@line 2723
  HEAP32[$504 >> 2] = $118; //@line 2724
  sp = STACKTOP; //@line 2725
  return;
 } else if ((label | 0) == 32) {
  $525 = $$0$be + 2 << 24 >> 24; //@line 2729
  $529 = HEAPU8[$68 + ($121 & 255) >> 0] | 0; //@line 2733
  $531 = $529 >>> 5 & 1; //@line 2736
  $533 = $529 >>> 4 & 1; //@line 2739
  $536 = HEAP32[(HEAP32[$28 >> 2] | 0) + 44 >> 2] | 0; //@line 2742
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 2743
  $537 = FUNCTION_TABLE_iiii[$536 & 31]($94, $533, $531) | 0; //@line 2744
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 2747
   $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 2748
   HEAP32[$538 >> 2] = $2; //@line 2749
   $539 = $ReallocAsyncCtx5 + 8 | 0; //@line 2750
   HEAP32[$539 >> 2] = $4; //@line 2751
   $540 = $ReallocAsyncCtx5 + 12 | 0; //@line 2752
   HEAP32[$540 >> 2] = $6; //@line 2753
   $541 = $ReallocAsyncCtx5 + 16 | 0; //@line 2754
   HEAP32[$541 >> 2] = $8; //@line 2755
   $542 = $ReallocAsyncCtx5 + 20 | 0; //@line 2756
   HEAP32[$542 >> 2] = $10; //@line 2757
   $543 = $ReallocAsyncCtx5 + 24 | 0; //@line 2758
   HEAP32[$543 >> 2] = $12; //@line 2759
   $544 = $ReallocAsyncCtx5 + 28 | 0; //@line 2760
   HEAP32[$544 >> 2] = $14; //@line 2761
   $545 = $ReallocAsyncCtx5 + 32 | 0; //@line 2762
   HEAP32[$545 >> 2] = $16; //@line 2763
   $546 = $ReallocAsyncCtx5 + 36 | 0; //@line 2764
   HEAP32[$546 >> 2] = $18; //@line 2765
   $547 = $ReallocAsyncCtx5 + 40 | 0; //@line 2766
   HEAP32[$547 >> 2] = $20; //@line 2767
   $548 = $ReallocAsyncCtx5 + 44 | 0; //@line 2768
   HEAP32[$548 >> 2] = $22; //@line 2769
   $549 = $ReallocAsyncCtx5 + 48 | 0; //@line 2770
   HEAP32[$549 >> 2] = $24; //@line 2771
   $550 = $ReallocAsyncCtx5 + 52 | 0; //@line 2772
   HEAP32[$550 >> 2] = $26; //@line 2773
   $551 = $ReallocAsyncCtx5 + 56 | 0; //@line 2774
   HEAP32[$551 >> 2] = $28; //@line 2775
   $552 = $ReallocAsyncCtx5 + 60 | 0; //@line 2776
   HEAP32[$552 >> 2] = $30; //@line 2777
   $553 = $ReallocAsyncCtx5 + 64 | 0; //@line 2778
   HEAP32[$553 >> 2] = $32; //@line 2779
   $554 = $ReallocAsyncCtx5 + 68 | 0; //@line 2780
   HEAP32[$554 >> 2] = $34; //@line 2781
   $555 = $ReallocAsyncCtx5 + 72 | 0; //@line 2782
   HEAP32[$555 >> 2] = $36; //@line 2783
   $556 = $ReallocAsyncCtx5 + 76 | 0; //@line 2784
   HEAP32[$556 >> 2] = $38; //@line 2785
   $557 = $ReallocAsyncCtx5 + 80 | 0; //@line 2786
   HEAP32[$557 >> 2] = $40; //@line 2787
   $558 = $ReallocAsyncCtx5 + 84 | 0; //@line 2788
   HEAP32[$558 >> 2] = $42; //@line 2789
   $559 = $ReallocAsyncCtx5 + 88 | 0; //@line 2790
   HEAP32[$559 >> 2] = $44; //@line 2791
   $560 = $ReallocAsyncCtx5 + 92 | 0; //@line 2792
   HEAP32[$560 >> 2] = $46; //@line 2793
   $561 = $ReallocAsyncCtx5 + 96 | 0; //@line 2794
   HEAP8[$561 >> 0] = $533; //@line 2795
   $562 = $ReallocAsyncCtx5 + 100 | 0; //@line 2796
   HEAP32[$562 >> 2] = $50; //@line 2797
   $563 = $ReallocAsyncCtx5 + 104 | 0; //@line 2798
   HEAP32[$563 >> 2] = $52; //@line 2799
   $564 = $ReallocAsyncCtx5 + 108 | 0; //@line 2800
   HEAP32[$564 >> 2] = $54; //@line 2801
   $565 = $ReallocAsyncCtx5 + 112 | 0; //@line 2802
   HEAP32[$565 >> 2] = $56; //@line 2803
   $566 = $ReallocAsyncCtx5 + 116 | 0; //@line 2804
   HEAP32[$566 >> 2] = $58; //@line 2805
   $567 = $ReallocAsyncCtx5 + 120 | 0; //@line 2806
   HEAP32[$567 >> 2] = $60; //@line 2807
   $568 = $ReallocAsyncCtx5 + 124 | 0; //@line 2808
   HEAP32[$568 >> 2] = $62; //@line 2809
   $569 = $ReallocAsyncCtx5 + 128 | 0; //@line 2810
   HEAP8[$569 >> 0] = $64; //@line 2811
   $570 = $ReallocAsyncCtx5 + 132 | 0; //@line 2812
   HEAP32[$570 >> 2] = $66; //@line 2813
   $571 = $ReallocAsyncCtx5 + 136 | 0; //@line 2814
   HEAP32[$571 >> 2] = $68; //@line 2815
   $572 = $ReallocAsyncCtx5 + 140 | 0; //@line 2816
   HEAP32[$572 >> 2] = $70; //@line 2817
   $573 = $ReallocAsyncCtx5 + 144 | 0; //@line 2818
   HEAP32[$573 >> 2] = $72; //@line 2819
   $574 = $ReallocAsyncCtx5 + 148 | 0; //@line 2820
   HEAP32[$574 >> 2] = $74; //@line 2821
   $575 = $ReallocAsyncCtx5 + 152 | 0; //@line 2822
   HEAP32[$575 >> 2] = $76; //@line 2823
   $576 = $ReallocAsyncCtx5 + 156 | 0; //@line 2824
   HEAP8[$576 >> 0] = $78; //@line 2825
   $577 = $ReallocAsyncCtx5 + 160 | 0; //@line 2826
   HEAP32[$577 >> 2] = $80; //@line 2827
   $578 = $ReallocAsyncCtx5 + 164 | 0; //@line 2828
   HEAP8[$578 >> 0] = $82; //@line 2829
   $579 = $ReallocAsyncCtx5 + 168 | 0; //@line 2830
   HEAP32[$579 >> 2] = $84; //@line 2831
   $580 = $ReallocAsyncCtx5 + 172 | 0; //@line 2832
   HEAP32[$580 >> 2] = $86; //@line 2833
   $581 = $ReallocAsyncCtx5 + 176 | 0; //@line 2834
   HEAP32[$581 >> 2] = $88; //@line 2835
   $582 = $ReallocAsyncCtx5 + 180 | 0; //@line 2836
   HEAP32[$582 >> 2] = $90; //@line 2837
   $583 = $ReallocAsyncCtx5 + 184 | 0; //@line 2838
   HEAP32[$583 >> 2] = $92; //@line 2839
   $584 = $ReallocAsyncCtx5 + 188 | 0; //@line 2840
   HEAP32[$584 >> 2] = $94; //@line 2841
   $585 = $ReallocAsyncCtx5 + 192 | 0; //@line 2842
   HEAP32[$585 >> 2] = $96; //@line 2843
   $586 = $ReallocAsyncCtx5 + 196 | 0; //@line 2844
   HEAP8[$586 >> 0] = $525; //@line 2845
   $587 = $ReallocAsyncCtx5 + 197 | 0; //@line 2846
   HEAP8[$587 >> 0] = $531; //@line 2847
   $588 = $ReallocAsyncCtx5 + 200 | 0; //@line 2848
   HEAP32[$588 >> 2] = $98; //@line 2849
   $589 = $ReallocAsyncCtx5 + 204 | 0; //@line 2850
   HEAP32[$589 >> 2] = $100; //@line 2851
   $590 = $ReallocAsyncCtx5 + 208 | 0; //@line 2852
   HEAP32[$590 >> 2] = $529; //@line 2853
   $591 = $ReallocAsyncCtx5 + 212 | 0; //@line 2854
   HEAP32[$591 >> 2] = $$0107$be; //@line 2855
   $592 = $ReallocAsyncCtx5 + 216 | 0; //@line 2856
   HEAP32[$592 >> 2] = $104; //@line 2857
   $593 = $ReallocAsyncCtx5 + 220 | 0; //@line 2858
   HEAP32[$593 >> 2] = $106; //@line 2859
   $594 = $ReallocAsyncCtx5 + 224 | 0; //@line 2860
   HEAP32[$594 >> 2] = $108; //@line 2861
   $595 = $ReallocAsyncCtx5 + 228 | 0; //@line 2862
   HEAP32[$595 >> 2] = $110; //@line 2863
   $596 = $ReallocAsyncCtx5 + 232 | 0; //@line 2864
   HEAP32[$596 >> 2] = $112; //@line 2865
   $597 = $ReallocAsyncCtx5 + 236 | 0; //@line 2866
   HEAP32[$597 >> 2] = $114; //@line 2867
   $598 = $ReallocAsyncCtx5 + 240 | 0; //@line 2868
   HEAP32[$598 >> 2] = $116; //@line 2869
   $599 = $ReallocAsyncCtx5 + 244 | 0; //@line 2870
   HEAP32[$599 >> 2] = $118; //@line 2871
   sp = STACKTOP; //@line 2872
   return;
  }
  HEAP8[___async_retval >> 0] = $537 & 1; //@line 2877
  ___async_unwind = 0; //@line 2878
  HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 2879
  $538 = $ReallocAsyncCtx5 + 4 | 0; //@line 2880
  HEAP32[$538 >> 2] = $2; //@line 2881
  $539 = $ReallocAsyncCtx5 + 8 | 0; //@line 2882
  HEAP32[$539 >> 2] = $4; //@line 2883
  $540 = $ReallocAsyncCtx5 + 12 | 0; //@line 2884
  HEAP32[$540 >> 2] = $6; //@line 2885
  $541 = $ReallocAsyncCtx5 + 16 | 0; //@line 2886
  HEAP32[$541 >> 2] = $8; //@line 2887
  $542 = $ReallocAsyncCtx5 + 20 | 0; //@line 2888
  HEAP32[$542 >> 2] = $10; //@line 2889
  $543 = $ReallocAsyncCtx5 + 24 | 0; //@line 2890
  HEAP32[$543 >> 2] = $12; //@line 2891
  $544 = $ReallocAsyncCtx5 + 28 | 0; //@line 2892
  HEAP32[$544 >> 2] = $14; //@line 2893
  $545 = $ReallocAsyncCtx5 + 32 | 0; //@line 2894
  HEAP32[$545 >> 2] = $16; //@line 2895
  $546 = $ReallocAsyncCtx5 + 36 | 0; //@line 2896
  HEAP32[$546 >> 2] = $18; //@line 2897
  $547 = $ReallocAsyncCtx5 + 40 | 0; //@line 2898
  HEAP32[$547 >> 2] = $20; //@line 2899
  $548 = $ReallocAsyncCtx5 + 44 | 0; //@line 2900
  HEAP32[$548 >> 2] = $22; //@line 2901
  $549 = $ReallocAsyncCtx5 + 48 | 0; //@line 2902
  HEAP32[$549 >> 2] = $24; //@line 2903
  $550 = $ReallocAsyncCtx5 + 52 | 0; //@line 2904
  HEAP32[$550 >> 2] = $26; //@line 2905
  $551 = $ReallocAsyncCtx5 + 56 | 0; //@line 2906
  HEAP32[$551 >> 2] = $28; //@line 2907
  $552 = $ReallocAsyncCtx5 + 60 | 0; //@line 2908
  HEAP32[$552 >> 2] = $30; //@line 2909
  $553 = $ReallocAsyncCtx5 + 64 | 0; //@line 2910
  HEAP32[$553 >> 2] = $32; //@line 2911
  $554 = $ReallocAsyncCtx5 + 68 | 0; //@line 2912
  HEAP32[$554 >> 2] = $34; //@line 2913
  $555 = $ReallocAsyncCtx5 + 72 | 0; //@line 2914
  HEAP32[$555 >> 2] = $36; //@line 2915
  $556 = $ReallocAsyncCtx5 + 76 | 0; //@line 2916
  HEAP32[$556 >> 2] = $38; //@line 2917
  $557 = $ReallocAsyncCtx5 + 80 | 0; //@line 2918
  HEAP32[$557 >> 2] = $40; //@line 2919
  $558 = $ReallocAsyncCtx5 + 84 | 0; //@line 2920
  HEAP32[$558 >> 2] = $42; //@line 2921
  $559 = $ReallocAsyncCtx5 + 88 | 0; //@line 2922
  HEAP32[$559 >> 2] = $44; //@line 2923
  $560 = $ReallocAsyncCtx5 + 92 | 0; //@line 2924
  HEAP32[$560 >> 2] = $46; //@line 2925
  $561 = $ReallocAsyncCtx5 + 96 | 0; //@line 2926
  HEAP8[$561 >> 0] = $533; //@line 2927
  $562 = $ReallocAsyncCtx5 + 100 | 0; //@line 2928
  HEAP32[$562 >> 2] = $50; //@line 2929
  $563 = $ReallocAsyncCtx5 + 104 | 0; //@line 2930
  HEAP32[$563 >> 2] = $52; //@line 2931
  $564 = $ReallocAsyncCtx5 + 108 | 0; //@line 2932
  HEAP32[$564 >> 2] = $54; //@line 2933
  $565 = $ReallocAsyncCtx5 + 112 | 0; //@line 2934
  HEAP32[$565 >> 2] = $56; //@line 2935
  $566 = $ReallocAsyncCtx5 + 116 | 0; //@line 2936
  HEAP32[$566 >> 2] = $58; //@line 2937
  $567 = $ReallocAsyncCtx5 + 120 | 0; //@line 2938
  HEAP32[$567 >> 2] = $60; //@line 2939
  $568 = $ReallocAsyncCtx5 + 124 | 0; //@line 2940
  HEAP32[$568 >> 2] = $62; //@line 2941
  $569 = $ReallocAsyncCtx5 + 128 | 0; //@line 2942
  HEAP8[$569 >> 0] = $64; //@line 2943
  $570 = $ReallocAsyncCtx5 + 132 | 0; //@line 2944
  HEAP32[$570 >> 2] = $66; //@line 2945
  $571 = $ReallocAsyncCtx5 + 136 | 0; //@line 2946
  HEAP32[$571 >> 2] = $68; //@line 2947
  $572 = $ReallocAsyncCtx5 + 140 | 0; //@line 2948
  HEAP32[$572 >> 2] = $70; //@line 2949
  $573 = $ReallocAsyncCtx5 + 144 | 0; //@line 2950
  HEAP32[$573 >> 2] = $72; //@line 2951
  $574 = $ReallocAsyncCtx5 + 148 | 0; //@line 2952
  HEAP32[$574 >> 2] = $74; //@line 2953
  $575 = $ReallocAsyncCtx5 + 152 | 0; //@line 2954
  HEAP32[$575 >> 2] = $76; //@line 2955
  $576 = $ReallocAsyncCtx5 + 156 | 0; //@line 2956
  HEAP8[$576 >> 0] = $78; //@line 2957
  $577 = $ReallocAsyncCtx5 + 160 | 0; //@line 2958
  HEAP32[$577 >> 2] = $80; //@line 2959
  $578 = $ReallocAsyncCtx5 + 164 | 0; //@line 2960
  HEAP8[$578 >> 0] = $82; //@line 2961
  $579 = $ReallocAsyncCtx5 + 168 | 0; //@line 2962
  HEAP32[$579 >> 2] = $84; //@line 2963
  $580 = $ReallocAsyncCtx5 + 172 | 0; //@line 2964
  HEAP32[$580 >> 2] = $86; //@line 2965
  $581 = $ReallocAsyncCtx5 + 176 | 0; //@line 2966
  HEAP32[$581 >> 2] = $88; //@line 2967
  $582 = $ReallocAsyncCtx5 + 180 | 0; //@line 2968
  HEAP32[$582 >> 2] = $90; //@line 2969
  $583 = $ReallocAsyncCtx5 + 184 | 0; //@line 2970
  HEAP32[$583 >> 2] = $92; //@line 2971
  $584 = $ReallocAsyncCtx5 + 188 | 0; //@line 2972
  HEAP32[$584 >> 2] = $94; //@line 2973
  $585 = $ReallocAsyncCtx5 + 192 | 0; //@line 2974
  HEAP32[$585 >> 2] = $96; //@line 2975
  $586 = $ReallocAsyncCtx5 + 196 | 0; //@line 2976
  HEAP8[$586 >> 0] = $525; //@line 2977
  $587 = $ReallocAsyncCtx5 + 197 | 0; //@line 2978
  HEAP8[$587 >> 0] = $531; //@line 2979
  $588 = $ReallocAsyncCtx5 + 200 | 0; //@line 2980
  HEAP32[$588 >> 2] = $98; //@line 2981
  $589 = $ReallocAsyncCtx5 + 204 | 0; //@line 2982
  HEAP32[$589 >> 2] = $100; //@line 2983
  $590 = $ReallocAsyncCtx5 + 208 | 0; //@line 2984
  HEAP32[$590 >> 2] = $529; //@line 2985
  $591 = $ReallocAsyncCtx5 + 212 | 0; //@line 2986
  HEAP32[$591 >> 2] = $$0107$be; //@line 2987
  $592 = $ReallocAsyncCtx5 + 216 | 0; //@line 2988
  HEAP32[$592 >> 2] = $104; //@line 2989
  $593 = $ReallocAsyncCtx5 + 220 | 0; //@line 2990
  HEAP32[$593 >> 2] = $106; //@line 2991
  $594 = $ReallocAsyncCtx5 + 224 | 0; //@line 2992
  HEAP32[$594 >> 2] = $108; //@line 2993
  $595 = $ReallocAsyncCtx5 + 228 | 0; //@line 2994
  HEAP32[$595 >> 2] = $110; //@line 2995
  $596 = $ReallocAsyncCtx5 + 232 | 0; //@line 2996
  HEAP32[$596 >> 2] = $112; //@line 2997
  $597 = $ReallocAsyncCtx5 + 236 | 0; //@line 2998
  HEAP32[$597 >> 2] = $114; //@line 2999
  $598 = $ReallocAsyncCtx5 + 240 | 0; //@line 3000
  HEAP32[$598 >> 2] = $116; //@line 3001
  $599 = $ReallocAsyncCtx5 + 244 | 0; //@line 3002
  HEAP32[$599 >> 2] = $118; //@line 3003
  sp = STACKTOP; //@line 3004
  return;
 } else if ((label | 0) == 35) {
  $604 = HEAP8[$68 + ($121 & 255) >> 0] | 0; //@line 3011
  $617 = $$0$be + 5 << 24 >> 24; //@line 3024
  $624 = (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 3031
  $627 = HEAP32[(HEAP32[$118 >> 2] | 0) + 48 >> 2] | 0; //@line 3034
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 3035
  $628 = FUNCTION_TABLE_iiii[$627 & 31]($94, $604, $624) | 0; //@line 3036
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 3039
   $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 3040
   HEAP32[$629 >> 2] = $2; //@line 3041
   $630 = $ReallocAsyncCtx6 + 8 | 0; //@line 3042
   HEAP32[$630 >> 2] = $4; //@line 3043
   $631 = $ReallocAsyncCtx6 + 12 | 0; //@line 3044
   HEAP32[$631 >> 2] = $6; //@line 3045
   $632 = $ReallocAsyncCtx6 + 16 | 0; //@line 3046
   HEAP32[$632 >> 2] = $8; //@line 3047
   $633 = $ReallocAsyncCtx6 + 20 | 0; //@line 3048
   HEAP32[$633 >> 2] = $10; //@line 3049
   $634 = $ReallocAsyncCtx6 + 24 | 0; //@line 3050
   HEAP32[$634 >> 2] = $12; //@line 3051
   $635 = $ReallocAsyncCtx6 + 28 | 0; //@line 3052
   HEAP32[$635 >> 2] = $14; //@line 3053
   $636 = $ReallocAsyncCtx6 + 32 | 0; //@line 3054
   HEAP32[$636 >> 2] = $16; //@line 3055
   $637 = $ReallocAsyncCtx6 + 36 | 0; //@line 3056
   HEAP32[$637 >> 2] = $18; //@line 3057
   $638 = $ReallocAsyncCtx6 + 40 | 0; //@line 3058
   HEAP32[$638 >> 2] = $20; //@line 3059
   $639 = $ReallocAsyncCtx6 + 44 | 0; //@line 3060
   HEAP32[$639 >> 2] = $22; //@line 3061
   $640 = $ReallocAsyncCtx6 + 48 | 0; //@line 3062
   HEAP32[$640 >> 2] = $24; //@line 3063
   $641 = $ReallocAsyncCtx6 + 52 | 0; //@line 3064
   HEAP32[$641 >> 2] = $26; //@line 3065
   $642 = $ReallocAsyncCtx6 + 56 | 0; //@line 3066
   HEAP32[$642 >> 2] = $28; //@line 3067
   $643 = $ReallocAsyncCtx6 + 60 | 0; //@line 3068
   HEAP32[$643 >> 2] = $30; //@line 3069
   $644 = $ReallocAsyncCtx6 + 64 | 0; //@line 3070
   HEAP32[$644 >> 2] = $32; //@line 3071
   $645 = $ReallocAsyncCtx6 + 68 | 0; //@line 3072
   HEAP32[$645 >> 2] = $34; //@line 3073
   $646 = $ReallocAsyncCtx6 + 72 | 0; //@line 3074
   HEAP32[$646 >> 2] = $36; //@line 3075
   $647 = $ReallocAsyncCtx6 + 76 | 0; //@line 3076
   HEAP32[$647 >> 2] = $38; //@line 3077
   $648 = $ReallocAsyncCtx6 + 80 | 0; //@line 3078
   HEAP32[$648 >> 2] = $40; //@line 3079
   $649 = $ReallocAsyncCtx6 + 84 | 0; //@line 3080
   HEAP32[$649 >> 2] = $42; //@line 3081
   $650 = $ReallocAsyncCtx6 + 88 | 0; //@line 3082
   HEAP32[$650 >> 2] = $44; //@line 3083
   $651 = $ReallocAsyncCtx6 + 92 | 0; //@line 3084
   HEAP32[$651 >> 2] = $46; //@line 3085
   $652 = $ReallocAsyncCtx6 + 96 | 0; //@line 3086
   HEAP32[$652 >> 2] = $50; //@line 3087
   $653 = $ReallocAsyncCtx6 + 100 | 0; //@line 3088
   HEAP32[$653 >> 2] = $52; //@line 3089
   $654 = $ReallocAsyncCtx6 + 104 | 0; //@line 3090
   HEAP32[$654 >> 2] = $54; //@line 3091
   $655 = $ReallocAsyncCtx6 + 108 | 0; //@line 3092
   HEAP32[$655 >> 2] = $56; //@line 3093
   $656 = $ReallocAsyncCtx6 + 112 | 0; //@line 3094
   HEAP32[$656 >> 2] = $58; //@line 3095
   $657 = $ReallocAsyncCtx6 + 116 | 0; //@line 3096
   HEAP32[$657 >> 2] = $60; //@line 3097
   $658 = $ReallocAsyncCtx6 + 120 | 0; //@line 3098
   HEAP32[$658 >> 2] = $62; //@line 3099
   $659 = $ReallocAsyncCtx6 + 124 | 0; //@line 3100
   HEAP8[$659 >> 0] = $64; //@line 3101
   $660 = $ReallocAsyncCtx6 + 128 | 0; //@line 3102
   HEAP32[$660 >> 2] = $66; //@line 3103
   $661 = $ReallocAsyncCtx6 + 132 | 0; //@line 3104
   HEAP8[$661 >> 0] = $617; //@line 3105
   $662 = $ReallocAsyncCtx6 + 136 | 0; //@line 3106
   HEAP32[$662 >> 2] = $68; //@line 3107
   $663 = $ReallocAsyncCtx6 + 140 | 0; //@line 3108
   HEAP32[$663 >> 2] = $70; //@line 3109
   $664 = $ReallocAsyncCtx6 + 144 | 0; //@line 3110
   HEAP32[$664 >> 2] = $72; //@line 3111
   $665 = $ReallocAsyncCtx6 + 148 | 0; //@line 3112
   HEAP32[$665 >> 2] = $74; //@line 3113
   $666 = $ReallocAsyncCtx6 + 152 | 0; //@line 3114
   HEAP32[$666 >> 2] = $76; //@line 3115
   $667 = $ReallocAsyncCtx6 + 156 | 0; //@line 3116
   HEAP8[$667 >> 0] = $78; //@line 3117
   $668 = $ReallocAsyncCtx6 + 160 | 0; //@line 3118
   HEAP32[$668 >> 2] = $80; //@line 3119
   $669 = $ReallocAsyncCtx6 + 164 | 0; //@line 3120
   HEAP8[$669 >> 0] = $82; //@line 3121
   $670 = $ReallocAsyncCtx6 + 168 | 0; //@line 3122
   HEAP32[$670 >> 2] = $84; //@line 3123
   $671 = $ReallocAsyncCtx6 + 172 | 0; //@line 3124
   HEAP32[$671 >> 2] = $86; //@line 3125
   $672 = $ReallocAsyncCtx6 + 176 | 0; //@line 3126
   HEAP32[$672 >> 2] = $88; //@line 3127
   $673 = $ReallocAsyncCtx6 + 180 | 0; //@line 3128
   HEAP32[$673 >> 2] = $90; //@line 3129
   $674 = $ReallocAsyncCtx6 + 184 | 0; //@line 3130
   HEAP32[$674 >> 2] = $92; //@line 3131
   $675 = $ReallocAsyncCtx6 + 188 | 0; //@line 3132
   HEAP32[$675 >> 2] = $94; //@line 3133
   $676 = $ReallocAsyncCtx6 + 192 | 0; //@line 3134
   HEAP32[$676 >> 2] = $96; //@line 3135
   $677 = $ReallocAsyncCtx6 + 196 | 0; //@line 3136
   HEAP32[$677 >> 2] = $98; //@line 3137
   $678 = $ReallocAsyncCtx6 + 200 | 0; //@line 3138
   HEAP32[$678 >> 2] = $100; //@line 3139
   $679 = $ReallocAsyncCtx6 + 204 | 0; //@line 3140
   HEAP32[$679 >> 2] = $104; //@line 3141
   $680 = $ReallocAsyncCtx6 + 208 | 0; //@line 3142
   HEAP32[$680 >> 2] = $106; //@line 3143
   $681 = $ReallocAsyncCtx6 + 212 | 0; //@line 3144
   HEAP32[$681 >> 2] = $108; //@line 3145
   $682 = $ReallocAsyncCtx6 + 216 | 0; //@line 3146
   HEAP32[$682 >> 2] = $110; //@line 3147
   $683 = $ReallocAsyncCtx6 + 220 | 0; //@line 3148
   HEAP32[$683 >> 2] = $112; //@line 3149
   $684 = $ReallocAsyncCtx6 + 224 | 0; //@line 3150
   HEAP32[$684 >> 2] = $114; //@line 3151
   $685 = $ReallocAsyncCtx6 + 228 | 0; //@line 3152
   HEAP32[$685 >> 2] = $116; //@line 3153
   $686 = $ReallocAsyncCtx6 + 232 | 0; //@line 3154
   HEAP32[$686 >> 2] = $118; //@line 3155
   sp = STACKTOP; //@line 3156
   return;
  }
  HEAP8[___async_retval >> 0] = $628; //@line 3160
  ___async_unwind = 0; //@line 3161
  HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 3162
  $629 = $ReallocAsyncCtx6 + 4 | 0; //@line 3163
  HEAP32[$629 >> 2] = $2; //@line 3164
  $630 = $ReallocAsyncCtx6 + 8 | 0; //@line 3165
  HEAP32[$630 >> 2] = $4; //@line 3166
  $631 = $ReallocAsyncCtx6 + 12 | 0; //@line 3167
  HEAP32[$631 >> 2] = $6; //@line 3168
  $632 = $ReallocAsyncCtx6 + 16 | 0; //@line 3169
  HEAP32[$632 >> 2] = $8; //@line 3170
  $633 = $ReallocAsyncCtx6 + 20 | 0; //@line 3171
  HEAP32[$633 >> 2] = $10; //@line 3172
  $634 = $ReallocAsyncCtx6 + 24 | 0; //@line 3173
  HEAP32[$634 >> 2] = $12; //@line 3174
  $635 = $ReallocAsyncCtx6 + 28 | 0; //@line 3175
  HEAP32[$635 >> 2] = $14; //@line 3176
  $636 = $ReallocAsyncCtx6 + 32 | 0; //@line 3177
  HEAP32[$636 >> 2] = $16; //@line 3178
  $637 = $ReallocAsyncCtx6 + 36 | 0; //@line 3179
  HEAP32[$637 >> 2] = $18; //@line 3180
  $638 = $ReallocAsyncCtx6 + 40 | 0; //@line 3181
  HEAP32[$638 >> 2] = $20; //@line 3182
  $639 = $ReallocAsyncCtx6 + 44 | 0; //@line 3183
  HEAP32[$639 >> 2] = $22; //@line 3184
  $640 = $ReallocAsyncCtx6 + 48 | 0; //@line 3185
  HEAP32[$640 >> 2] = $24; //@line 3186
  $641 = $ReallocAsyncCtx6 + 52 | 0; //@line 3187
  HEAP32[$641 >> 2] = $26; //@line 3188
  $642 = $ReallocAsyncCtx6 + 56 | 0; //@line 3189
  HEAP32[$642 >> 2] = $28; //@line 3190
  $643 = $ReallocAsyncCtx6 + 60 | 0; //@line 3191
  HEAP32[$643 >> 2] = $30; //@line 3192
  $644 = $ReallocAsyncCtx6 + 64 | 0; //@line 3193
  HEAP32[$644 >> 2] = $32; //@line 3194
  $645 = $ReallocAsyncCtx6 + 68 | 0; //@line 3195
  HEAP32[$645 >> 2] = $34; //@line 3196
  $646 = $ReallocAsyncCtx6 + 72 | 0; //@line 3197
  HEAP32[$646 >> 2] = $36; //@line 3198
  $647 = $ReallocAsyncCtx6 + 76 | 0; //@line 3199
  HEAP32[$647 >> 2] = $38; //@line 3200
  $648 = $ReallocAsyncCtx6 + 80 | 0; //@line 3201
  HEAP32[$648 >> 2] = $40; //@line 3202
  $649 = $ReallocAsyncCtx6 + 84 | 0; //@line 3203
  HEAP32[$649 >> 2] = $42; //@line 3204
  $650 = $ReallocAsyncCtx6 + 88 | 0; //@line 3205
  HEAP32[$650 >> 2] = $44; //@line 3206
  $651 = $ReallocAsyncCtx6 + 92 | 0; //@line 3207
  HEAP32[$651 >> 2] = $46; //@line 3208
  $652 = $ReallocAsyncCtx6 + 96 | 0; //@line 3209
  HEAP32[$652 >> 2] = $50; //@line 3210
  $653 = $ReallocAsyncCtx6 + 100 | 0; //@line 3211
  HEAP32[$653 >> 2] = $52; //@line 3212
  $654 = $ReallocAsyncCtx6 + 104 | 0; //@line 3213
  HEAP32[$654 >> 2] = $54; //@line 3214
  $655 = $ReallocAsyncCtx6 + 108 | 0; //@line 3215
  HEAP32[$655 >> 2] = $56; //@line 3216
  $656 = $ReallocAsyncCtx6 + 112 | 0; //@line 3217
  HEAP32[$656 >> 2] = $58; //@line 3218
  $657 = $ReallocAsyncCtx6 + 116 | 0; //@line 3219
  HEAP32[$657 >> 2] = $60; //@line 3220
  $658 = $ReallocAsyncCtx6 + 120 | 0; //@line 3221
  HEAP32[$658 >> 2] = $62; //@line 3222
  $659 = $ReallocAsyncCtx6 + 124 | 0; //@line 3223
  HEAP8[$659 >> 0] = $64; //@line 3224
  $660 = $ReallocAsyncCtx6 + 128 | 0; //@line 3225
  HEAP32[$660 >> 2] = $66; //@line 3226
  $661 = $ReallocAsyncCtx6 + 132 | 0; //@line 3227
  HEAP8[$661 >> 0] = $617; //@line 3228
  $662 = $ReallocAsyncCtx6 + 136 | 0; //@line 3229
  HEAP32[$662 >> 2] = $68; //@line 3230
  $663 = $ReallocAsyncCtx6 + 140 | 0; //@line 3231
  HEAP32[$663 >> 2] = $70; //@line 3232
  $664 = $ReallocAsyncCtx6 + 144 | 0; //@line 3233
  HEAP32[$664 >> 2] = $72; //@line 3234
  $665 = $ReallocAsyncCtx6 + 148 | 0; //@line 3235
  HEAP32[$665 >> 2] = $74; //@line 3236
  $666 = $ReallocAsyncCtx6 + 152 | 0; //@line 3237
  HEAP32[$666 >> 2] = $76; //@line 3238
  $667 = $ReallocAsyncCtx6 + 156 | 0; //@line 3239
  HEAP8[$667 >> 0] = $78; //@line 3240
  $668 = $ReallocAsyncCtx6 + 160 | 0; //@line 3241
  HEAP32[$668 >> 2] = $80; //@line 3242
  $669 = $ReallocAsyncCtx6 + 164 | 0; //@line 3243
  HEAP8[$669 >> 0] = $82; //@line 3244
  $670 = $ReallocAsyncCtx6 + 168 | 0; //@line 3245
  HEAP32[$670 >> 2] = $84; //@line 3246
  $671 = $ReallocAsyncCtx6 + 172 | 0; //@line 3247
  HEAP32[$671 >> 2] = $86; //@line 3248
  $672 = $ReallocAsyncCtx6 + 176 | 0; //@line 3249
  HEAP32[$672 >> 2] = $88; //@line 3250
  $673 = $ReallocAsyncCtx6 + 180 | 0; //@line 3251
  HEAP32[$673 >> 2] = $90; //@line 3252
  $674 = $ReallocAsyncCtx6 + 184 | 0; //@line 3253
  HEAP32[$674 >> 2] = $92; //@line 3254
  $675 = $ReallocAsyncCtx6 + 188 | 0; //@line 3255
  HEAP32[$675 >> 2] = $94; //@line 3256
  $676 = $ReallocAsyncCtx6 + 192 | 0; //@line 3257
  HEAP32[$676 >> 2] = $96; //@line 3258
  $677 = $ReallocAsyncCtx6 + 196 | 0; //@line 3259
  HEAP32[$677 >> 2] = $98; //@line 3260
  $678 = $ReallocAsyncCtx6 + 200 | 0; //@line 3261
  HEAP32[$678 >> 2] = $100; //@line 3262
  $679 = $ReallocAsyncCtx6 + 204 | 0; //@line 3263
  HEAP32[$679 >> 2] = $104; //@line 3264
  $680 = $ReallocAsyncCtx6 + 208 | 0; //@line 3265
  HEAP32[$680 >> 2] = $106; //@line 3266
  $681 = $ReallocAsyncCtx6 + 212 | 0; //@line 3267
  HEAP32[$681 >> 2] = $108; //@line 3268
  $682 = $ReallocAsyncCtx6 + 216 | 0; //@line 3269
  HEAP32[$682 >> 2] = $110; //@line 3270
  $683 = $ReallocAsyncCtx6 + 220 | 0; //@line 3271
  HEAP32[$683 >> 2] = $112; //@line 3272
  $684 = $ReallocAsyncCtx6 + 224 | 0; //@line 3273
  HEAP32[$684 >> 2] = $114; //@line 3274
  $685 = $ReallocAsyncCtx6 + 228 | 0; //@line 3275
  HEAP32[$685 >> 2] = $116; //@line 3276
  $686 = $ReallocAsyncCtx6 + 232 | 0; //@line 3277
  HEAP32[$686 >> 2] = $118; //@line 3278
  sp = STACKTOP; //@line 3279
  return;
 } else if ((label | 0) == 38) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 3284
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_217($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i116 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $319 = 0, $32 = 0, $320 = 0, $328 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $394 = 0, $395 = 0, $4 = 0, $40 = 0, $409 = 0, $42 = 0, $430 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $498 = 0, $50 = 0, $502 = 0, $506 = 0, $511 = 0, $512 = 0, $516 = 0, $52 = 0, $520 = 0, $522 = 0, $524 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $590 = 0, $595 = 0, $6 = 0, $60 = 0, $608 = 0, $615 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3326
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3328
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3330
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3332
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3334
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3336
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3338
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3340
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3342
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3344
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3346
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3348
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3350
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 3352
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 3354
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 3356
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 3358
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 3360
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 3362
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 3364
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 3366
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 3368
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 3370
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 3372
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 3374
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 3376
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 3378
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 3380
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 3382
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 3384
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 3386
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 3388
 $64 = HEAP8[$0 + 128 >> 0] | 0; //@line 3390
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 3392
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 3394
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 3396
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 3398
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 3400
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 3402
 $78 = HEAP8[$0 + 156 >> 0] | 0; //@line 3404
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 3406
 $82 = HEAP8[$0 + 164 >> 0] | 0; //@line 3408
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 3410
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 3412
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 3414
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 3416
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 3418
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 3420
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 3422
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 3424
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 3426
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 3428
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 3430
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 3432
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 3434
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 3436
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 3438
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 3440
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 3442
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 3444
 if (($AsyncRetVal & 7) == 7) {
  HEAP8[$30 >> 0] = HEAP8[$60 >> 0] | 0; //@line 3449
  HEAP32[$102 >> 2] = HEAP32[$16 >> 2]; //@line 3451
  HEAP8[$100 >> 0] = HEAP8[$52 >> 0] | 0; //@line 3453
 }
 $319 = HEAP8[$92 >> 0] | 0; //@line 3458
 $320 = $319 & 255; //@line 3459
 if ((128 - (HEAPU8[$62 >> 0] | 0) - $320 | 0) > 1) {
  HEAP8[$72 + 4 + $320 >> 0] = 5; //@line 3465
  HEAP8[$92 >> 0] = $319 + 2 << 24 >> 24; //@line 3467
  HEAP8[($319 + 1 & 255) + ($72 + 4) >> 0] = $AsyncRetVal; //@line 3470
  HEAP8[$112 >> 0] = 1; //@line 3471
  HEAP8[$86 >> 0] = 1; //@line 3472
  $$0$i116 = 0; //@line 3473
 } else {
  $$0$i116 = -1010; //@line 3475
 }
 $$0$be = $42; //@line 3477
 $$0107$be = $$0$i116; //@line 3477
 L8 : while (1) {
  if (($$0$be & 255) >= ($64 & 255)) {
   label = 35; //@line 3481
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 3485
  switch (HEAP8[$68 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 3490
    break L8;
    break;
   }
  case 5:
   {
    label = 9; //@line 3495
    break L8;
    break;
   }
  case 7:
   {
    label = 23; //@line 3500
    break L8;
    break;
   }
  case 9:
   {
    label = 29; //@line 3505
    break L8;
    break;
   }
  case 10:
   {
    label = 32; //@line 3510
    break L8;
    break;
   }
  case 2:
   {
    HEAP32[$106 >> 2] = 0; //@line 3515
    HEAP8[$66 >> 0] = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 3520
    HEAP8[$80 >> 0] = HEAP8[$68 + ($$0$be + 2 & 255) >> 0] | 0; //@line 3525
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 3526
    continue L8;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 3531
    $207 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 3534
    HEAP8[$40 >> 0] = $207; //@line 3535
    HEAP16[$36 >> 1] = 1 << ($207 & 255); //@line 3539
    $214 = HEAP8[$92 >> 0] | 0; //@line 3543
    $215 = $214 & 255; //@line 3544
    if ((128 - (HEAPU8[$62 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 3547
     $$0107$be = -1010; //@line 3547
     continue L8;
    }
    HEAP8[$92 >> 0] = $214 + 1 << 24 >> 24; //@line 3552
    HEAP8[$72 + 4 + $215 >> 0] = 4; //@line 3553
    HEAP8[$86 >> 0] = 1; //@line 3554
    $$0$be = $204; //@line 3555
    $$0107$be = 0; //@line 3555
    continue L8;
    break;
   }
  case 6:
   {
    $328 = HEAP32[$110 >> 2] | 0; //@line 3560
    if ($328 | 0) {
     label = 18; //@line 3563
     break L8;
    }
    $394 = HEAP8[$92 >> 0] | 0; //@line 3569
    $395 = $394 & 255; //@line 3570
    if ((128 - (HEAPU8[$62 >> 0] | 0) - $395 | 0) <= 2) {
     $$0$be = $119; //@line 3574
     $$0107$be = -1010; //@line 3574
     continue L8;
    }
    HEAP8[$72 + 4 + $395 >> 0] = 6; //@line 3579
    HEAP8[($394 + 1 & 255) + ($72 + 4) >> 0] = -1; //@line 3583
    HEAP8[$92 >> 0] = $394 + 3 << 24 >> 24; //@line 3585
    HEAP8[($394 + 2 & 255) + ($72 + 4) >> 0] = $82; //@line 3588
    HEAP8[$86 >> 0] = 1; //@line 3589
    $$0$be = $119; //@line 3590
    $$0107$be = 0; //@line 3590
    continue L8;
    break;
   }
  case 8:
   {
    $498 = $$0$be + 2 << 24 >> 24; //@line 3595
    $502 = HEAP8[$68 + ($119 & 255) >> 0] & 15; //@line 3599
    $506 = ($502 + ($502 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 3604
    HEAP32[$14 >> 2] = $506; //@line 3605
    HEAP32[$4 >> 2] = $506 + 1e3; //@line 3607
    $511 = HEAP8[$92 >> 0] | 0; //@line 3611
    $512 = $511 & 255; //@line 3612
    if ((128 - (HEAPU8[$62 >> 0] | 0) | 0) <= ($512 | 0)) {
     $$0$be = $498; //@line 3615
     $$0107$be = -1010; //@line 3615
     continue L8;
    }
    HEAP8[$92 >> 0] = $511 + 1 << 24 >> 24; //@line 3620
    HEAP8[$72 + 4 + $512 >> 0] = 8; //@line 3621
    HEAP8[$112 >> 0] = 1; //@line 3622
    HEAP8[$86 >> 0] = 1; //@line 3623
    $$0$be = $498; //@line 3624
    $$0107$be = 0; //@line 3624
    continue L8;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 3629
    $$0107$be = -1013; //@line 3629
    continue L8;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$76 >> 0] = 0; //@line 3635
  HEAP8[$46 >> 0] = 0; //@line 3636
  HEAP8[$22 >> 0] = 0; //@line 3637
  HEAP8[$26 >> 0] = 0; //@line 3638
  $130 = $119 & 255; //@line 3639
  $131 = $130 + -1 | 0; //@line 3640
  HEAP32[$84 >> 2] = $68 + $131; //@line 3642
  HEAP8[$38 >> 0] = $32 - $131; //@line 3645
  HEAP8[$54 >> 0] = HEAP8[$48 >> 0] | 0; //@line 3647
  HEAP8[$6 >> 0] = HEAP8[$58 >> 0] | 0; //@line 3649
  HEAP8[$18 >> 0] = HEAP8[$12 >> 0] | 0; //@line 3651
  HEAP8[$98 >> 0] = HEAP8[$24 >> 0] | 0; //@line 3653
  HEAP8[$104 >> 0] = HEAP8[$114 >> 0] | 0; //@line 3655
  $142 = HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] | 0; //@line 3658
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 3659
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($94, $88, $76, $46, $22, $26) | 0; //@line 3660
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 3663
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 3664
   HEAP32[$144 >> 2] = $2; //@line 3665
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 3666
   HEAP32[$145 >> 2] = $4; //@line 3667
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 3668
   HEAP32[$146 >> 2] = $6; //@line 3669
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 3670
   HEAP32[$147 >> 2] = $8; //@line 3671
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 3672
   HEAP32[$148 >> 2] = $10; //@line 3673
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 3674
   HEAP32[$149 >> 2] = $12; //@line 3675
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 3676
   HEAP32[$150 >> 2] = $14; //@line 3677
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 3678
   HEAP32[$151 >> 2] = $16; //@line 3679
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 3680
   HEAP32[$152 >> 2] = $18; //@line 3681
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 3682
   HEAP32[$153 >> 2] = $20; //@line 3683
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 3684
   HEAP32[$154 >> 2] = $22; //@line 3685
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 3686
   HEAP32[$155 >> 2] = $24; //@line 3687
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 3688
   HEAP32[$156 >> 2] = $26; //@line 3689
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 3690
   HEAP32[$157 >> 2] = $28; //@line 3691
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 3692
   HEAP32[$158 >> 2] = $30; //@line 3693
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 3694
   HEAP32[$159 >> 2] = $32; //@line 3695
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 3696
   HEAP32[$160 >> 2] = $34; //@line 3697
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 3698
   HEAP32[$161 >> 2] = $36; //@line 3699
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 3700
   HEAP32[$162 >> 2] = $38; //@line 3701
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 3702
   HEAP32[$163 >> 2] = $40; //@line 3703
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 3704
   HEAP32[$164 >> 2] = $44; //@line 3705
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 3706
   HEAP32[$165 >> 2] = $46; //@line 3707
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 3708
   HEAP32[$166 >> 2] = $48; //@line 3709
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 3710
   HEAP32[$167 >> 2] = $130; //@line 3711
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 3712
   HEAP32[$168 >> 2] = $50; //@line 3713
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 3714
   HEAP32[$169 >> 2] = $52; //@line 3715
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 3716
   HEAP32[$170 >> 2] = $54; //@line 3717
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 3718
   HEAP32[$171 >> 2] = $56; //@line 3719
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 3720
   HEAP32[$172 >> 2] = $58; //@line 3721
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 3722
   HEAP32[$173 >> 2] = $60; //@line 3723
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 3724
   HEAP32[$174 >> 2] = $62; //@line 3725
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 3726
   HEAP8[$175 >> 0] = $64; //@line 3727
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 3728
   HEAP32[$176 >> 2] = $66; //@line 3729
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 3730
   HEAP32[$177 >> 2] = $68; //@line 3731
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 3732
   HEAP32[$178 >> 2] = $70; //@line 3733
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 3734
   HEAP32[$179 >> 2] = $72; //@line 3735
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 3736
   HEAP32[$180 >> 2] = $74; //@line 3737
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 3738
   HEAP32[$181 >> 2] = $76; //@line 3739
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 3740
   HEAP8[$182 >> 0] = $78; //@line 3741
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 3742
   HEAP32[$183 >> 2] = $80; //@line 3743
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 3744
   HEAP8[$184 >> 0] = $82; //@line 3745
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 3746
   HEAP32[$185 >> 2] = $84; //@line 3747
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 3748
   HEAP32[$186 >> 2] = $86; //@line 3749
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 3750
   HEAP32[$187 >> 2] = $88; //@line 3751
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 3752
   HEAP32[$188 >> 2] = $90; //@line 3753
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 3754
   HEAP32[$189 >> 2] = $92; //@line 3755
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 3756
   HEAP32[$190 >> 2] = $94; //@line 3757
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 3758
   HEAP32[$191 >> 2] = $96; //@line 3759
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 3760
   HEAP32[$192 >> 2] = $98; //@line 3761
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 3762
   HEAP32[$193 >> 2] = $100; //@line 3763
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 3764
   HEAP32[$194 >> 2] = $$0107$be; //@line 3765
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 3766
   HEAP32[$195 >> 2] = $102; //@line 3767
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 3768
   HEAP32[$196 >> 2] = $104; //@line 3769
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 3770
   HEAP32[$197 >> 2] = $106; //@line 3771
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 3772
   HEAP32[$198 >> 2] = $108; //@line 3773
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 3774
   HEAP32[$199 >> 2] = $110; //@line 3775
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 3776
   HEAP32[$200 >> 2] = $112; //@line 3777
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 3778
   HEAP32[$201 >> 2] = $114; //@line 3779
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 3780
   HEAP32[$202 >> 2] = $116; //@line 3781
   sp = STACKTOP; //@line 3782
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 3786
  ___async_unwind = 0; //@line 3787
  HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 3788
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 3789
  HEAP32[$144 >> 2] = $2; //@line 3790
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 3791
  HEAP32[$145 >> 2] = $4; //@line 3792
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 3793
  HEAP32[$146 >> 2] = $6; //@line 3794
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 3795
  HEAP32[$147 >> 2] = $8; //@line 3796
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 3797
  HEAP32[$148 >> 2] = $10; //@line 3798
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 3799
  HEAP32[$149 >> 2] = $12; //@line 3800
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 3801
  HEAP32[$150 >> 2] = $14; //@line 3802
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 3803
  HEAP32[$151 >> 2] = $16; //@line 3804
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 3805
  HEAP32[$152 >> 2] = $18; //@line 3806
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 3807
  HEAP32[$153 >> 2] = $20; //@line 3808
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 3809
  HEAP32[$154 >> 2] = $22; //@line 3810
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 3811
  HEAP32[$155 >> 2] = $24; //@line 3812
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 3813
  HEAP32[$156 >> 2] = $26; //@line 3814
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 3815
  HEAP32[$157 >> 2] = $28; //@line 3816
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 3817
  HEAP32[$158 >> 2] = $30; //@line 3818
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 3819
  HEAP32[$159 >> 2] = $32; //@line 3820
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 3821
  HEAP32[$160 >> 2] = $34; //@line 3822
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 3823
  HEAP32[$161 >> 2] = $36; //@line 3824
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 3825
  HEAP32[$162 >> 2] = $38; //@line 3826
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 3827
  HEAP32[$163 >> 2] = $40; //@line 3828
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 3829
  HEAP32[$164 >> 2] = $44; //@line 3830
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 3831
  HEAP32[$165 >> 2] = $46; //@line 3832
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 3833
  HEAP32[$166 >> 2] = $48; //@line 3834
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 3835
  HEAP32[$167 >> 2] = $130; //@line 3836
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 3837
  HEAP32[$168 >> 2] = $50; //@line 3838
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 3839
  HEAP32[$169 >> 2] = $52; //@line 3840
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 3841
  HEAP32[$170 >> 2] = $54; //@line 3842
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 3843
  HEAP32[$171 >> 2] = $56; //@line 3844
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 3845
  HEAP32[$172 >> 2] = $58; //@line 3846
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 3847
  HEAP32[$173 >> 2] = $60; //@line 3848
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 3849
  HEAP32[$174 >> 2] = $62; //@line 3850
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 3851
  HEAP8[$175 >> 0] = $64; //@line 3852
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 3853
  HEAP32[$176 >> 2] = $66; //@line 3854
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 3855
  HEAP32[$177 >> 2] = $68; //@line 3856
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 3857
  HEAP32[$178 >> 2] = $70; //@line 3858
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 3859
  HEAP32[$179 >> 2] = $72; //@line 3860
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 3861
  HEAP32[$180 >> 2] = $74; //@line 3862
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 3863
  HEAP32[$181 >> 2] = $76; //@line 3864
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 3865
  HEAP8[$182 >> 0] = $78; //@line 3866
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 3867
  HEAP32[$183 >> 2] = $80; //@line 3868
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 3869
  HEAP8[$184 >> 0] = $82; //@line 3870
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 3871
  HEAP32[$185 >> 2] = $84; //@line 3872
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 3873
  HEAP32[$186 >> 2] = $86; //@line 3874
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 3875
  HEAP32[$187 >> 2] = $88; //@line 3876
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 3877
  HEAP32[$188 >> 2] = $90; //@line 3878
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 3879
  HEAP32[$189 >> 2] = $92; //@line 3880
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 3881
  HEAP32[$190 >> 2] = $94; //@line 3882
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 3883
  HEAP32[$191 >> 2] = $96; //@line 3884
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 3885
  HEAP32[$192 >> 2] = $98; //@line 3886
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 3887
  HEAP32[$193 >> 2] = $100; //@line 3888
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 3889
  HEAP32[$194 >> 2] = $$0107$be; //@line 3890
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 3891
  HEAP32[$195 >> 2] = $102; //@line 3892
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 3893
  HEAP32[$196 >> 2] = $104; //@line 3894
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 3895
  HEAP32[$197 >> 2] = $106; //@line 3896
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 3897
  HEAP32[$198 >> 2] = $108; //@line 3898
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 3899
  HEAP32[$199 >> 2] = $110; //@line 3900
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 3901
  HEAP32[$200 >> 2] = $112; //@line 3902
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 3903
  HEAP32[$201 >> 2] = $114; //@line 3904
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 3905
  HEAP32[$202 >> 2] = $116; //@line 3906
  sp = STACKTOP; //@line 3907
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 3913
  HEAP8[$52 >> 0] = ($221 & 255) >>> 4 & 7; //@line 3918
  HEAP8[$60 >> 0] = $221 & 15; //@line 3920
  $240 = $$0$be + 5 << 24 >> 24; //@line 3934
  HEAP32[$16 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 3942
  $250 = HEAP32[(HEAP32[$8 >> 2] | 0) + 40 >> 2] | 0; //@line 3945
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 3946
  $251 = FUNCTION_TABLE_iii[$250 & 31]($94, $2) | 0; //@line 3947
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 3950
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 3951
   HEAP32[$252 >> 2] = $2; //@line 3952
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 3953
   HEAP32[$253 >> 2] = $4; //@line 3954
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 3955
   HEAP32[$254 >> 2] = $6; //@line 3956
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 3957
   HEAP32[$255 >> 2] = $8; //@line 3958
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 3959
   HEAP32[$256 >> 2] = $10; //@line 3960
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 3961
   HEAP32[$257 >> 2] = $12; //@line 3962
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 3963
   HEAP32[$258 >> 2] = $14; //@line 3964
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 3965
   HEAP32[$259 >> 2] = $16; //@line 3966
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 3967
   HEAP32[$260 >> 2] = $18; //@line 3968
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 3969
   HEAP32[$261 >> 2] = $20; //@line 3970
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 3971
   HEAP32[$262 >> 2] = $22; //@line 3972
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 3973
   HEAP32[$263 >> 2] = $24; //@line 3974
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 3975
   HEAP32[$264 >> 2] = $26; //@line 3976
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 3977
   HEAP32[$265 >> 2] = $28; //@line 3978
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 3979
   HEAP32[$266 >> 2] = $30; //@line 3980
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 3981
   HEAP32[$267 >> 2] = $32; //@line 3982
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 3983
   HEAP32[$268 >> 2] = $34; //@line 3984
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 3985
   HEAP32[$269 >> 2] = $36; //@line 3986
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 3987
   HEAP32[$270 >> 2] = $38; //@line 3988
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 3989
   HEAP32[$271 >> 2] = $40; //@line 3990
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 3991
   HEAP8[$272 >> 0] = $240; //@line 3992
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 3993
   HEAP32[$273 >> 2] = $44; //@line 3994
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 3995
   HEAP32[$274 >> 2] = $46; //@line 3996
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 3997
   HEAP32[$275 >> 2] = $48; //@line 3998
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 3999
   HEAP32[$276 >> 2] = $50; //@line 4000
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 4001
   HEAP32[$277 >> 2] = $52; //@line 4002
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 4003
   HEAP32[$278 >> 2] = $54; //@line 4004
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 4005
   HEAP32[$279 >> 2] = $56; //@line 4006
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 4007
   HEAP32[$280 >> 2] = $58; //@line 4008
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 4009
   HEAP32[$281 >> 2] = $60; //@line 4010
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 4011
   HEAP32[$282 >> 2] = $62; //@line 4012
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 4013
   HEAP8[$283 >> 0] = $64; //@line 4014
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 4015
   HEAP32[$284 >> 2] = $66; //@line 4016
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 4017
   HEAP32[$285 >> 2] = $68; //@line 4018
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 4019
   HEAP32[$286 >> 2] = $70; //@line 4020
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 4021
   HEAP32[$287 >> 2] = $72; //@line 4022
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 4023
   HEAP32[$288 >> 2] = $74; //@line 4024
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 4025
   HEAP32[$289 >> 2] = $76; //@line 4026
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 4027
   HEAP8[$290 >> 0] = $78; //@line 4028
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 4029
   HEAP32[$291 >> 2] = $80; //@line 4030
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 4031
   HEAP8[$292 >> 0] = $82; //@line 4032
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 4033
   HEAP32[$293 >> 2] = $84; //@line 4034
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 4035
   HEAP32[$294 >> 2] = $86; //@line 4036
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 4037
   HEAP32[$295 >> 2] = $88; //@line 4038
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 4039
   HEAP32[$296 >> 2] = $90; //@line 4040
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 4041
   HEAP32[$297 >> 2] = $92; //@line 4042
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 4043
   HEAP32[$298 >> 2] = $94; //@line 4044
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 4045
   HEAP32[$299 >> 2] = $96; //@line 4046
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 4047
   HEAP32[$300 >> 2] = $98; //@line 4048
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 4049
   HEAP32[$301 >> 2] = $100; //@line 4050
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 4051
   HEAP32[$302 >> 2] = $102; //@line 4052
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 4053
   HEAP32[$303 >> 2] = $104; //@line 4054
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 4055
   HEAP32[$304 >> 2] = $106; //@line 4056
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 4057
   HEAP32[$305 >> 2] = $108; //@line 4058
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 4059
   HEAP32[$306 >> 2] = $110; //@line 4060
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 4061
   HEAP32[$307 >> 2] = $112; //@line 4062
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 4063
   HEAP32[$308 >> 2] = $114; //@line 4064
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 4065
   HEAP32[$309 >> 2] = $116; //@line 4066
   sp = STACKTOP; //@line 4067
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 4071
  ___async_unwind = 0; //@line 4072
  HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 4073
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 4074
  HEAP32[$252 >> 2] = $2; //@line 4075
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 4076
  HEAP32[$253 >> 2] = $4; //@line 4077
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 4078
  HEAP32[$254 >> 2] = $6; //@line 4079
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 4080
  HEAP32[$255 >> 2] = $8; //@line 4081
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 4082
  HEAP32[$256 >> 2] = $10; //@line 4083
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 4084
  HEAP32[$257 >> 2] = $12; //@line 4085
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 4086
  HEAP32[$258 >> 2] = $14; //@line 4087
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 4088
  HEAP32[$259 >> 2] = $16; //@line 4089
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 4090
  HEAP32[$260 >> 2] = $18; //@line 4091
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 4092
  HEAP32[$261 >> 2] = $20; //@line 4093
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 4094
  HEAP32[$262 >> 2] = $22; //@line 4095
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 4096
  HEAP32[$263 >> 2] = $24; //@line 4097
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 4098
  HEAP32[$264 >> 2] = $26; //@line 4099
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 4100
  HEAP32[$265 >> 2] = $28; //@line 4101
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 4102
  HEAP32[$266 >> 2] = $30; //@line 4103
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 4104
  HEAP32[$267 >> 2] = $32; //@line 4105
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 4106
  HEAP32[$268 >> 2] = $34; //@line 4107
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 4108
  HEAP32[$269 >> 2] = $36; //@line 4109
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 4110
  HEAP32[$270 >> 2] = $38; //@line 4111
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 4112
  HEAP32[$271 >> 2] = $40; //@line 4113
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 4114
  HEAP8[$272 >> 0] = $240; //@line 4115
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 4116
  HEAP32[$273 >> 2] = $44; //@line 4117
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 4118
  HEAP32[$274 >> 2] = $46; //@line 4119
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 4120
  HEAP32[$275 >> 2] = $48; //@line 4121
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 4122
  HEAP32[$276 >> 2] = $50; //@line 4123
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 4124
  HEAP32[$277 >> 2] = $52; //@line 4125
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 4126
  HEAP32[$278 >> 2] = $54; //@line 4127
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 4128
  HEAP32[$279 >> 2] = $56; //@line 4129
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 4130
  HEAP32[$280 >> 2] = $58; //@line 4131
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 4132
  HEAP32[$281 >> 2] = $60; //@line 4133
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 4134
  HEAP32[$282 >> 2] = $62; //@line 4135
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 4136
  HEAP8[$283 >> 0] = $64; //@line 4137
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 4138
  HEAP32[$284 >> 2] = $66; //@line 4139
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 4140
  HEAP32[$285 >> 2] = $68; //@line 4141
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 4142
  HEAP32[$286 >> 2] = $70; //@line 4143
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 4144
  HEAP32[$287 >> 2] = $72; //@line 4145
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 4146
  HEAP32[$288 >> 2] = $74; //@line 4147
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 4148
  HEAP32[$289 >> 2] = $76; //@line 4149
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 4150
  HEAP8[$290 >> 0] = $78; //@line 4151
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 4152
  HEAP32[$291 >> 2] = $80; //@line 4153
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 4154
  HEAP8[$292 >> 0] = $82; //@line 4155
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 4156
  HEAP32[$293 >> 2] = $84; //@line 4157
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 4158
  HEAP32[$294 >> 2] = $86; //@line 4159
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 4160
  HEAP32[$295 >> 2] = $88; //@line 4161
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 4162
  HEAP32[$296 >> 2] = $90; //@line 4163
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 4164
  HEAP32[$297 >> 2] = $92; //@line 4165
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 4166
  HEAP32[$298 >> 2] = $94; //@line 4167
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 4168
  HEAP32[$299 >> 2] = $96; //@line 4169
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 4170
  HEAP32[$300 >> 2] = $98; //@line 4171
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 4172
  HEAP32[$301 >> 2] = $100; //@line 4173
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 4174
  HEAP32[$302 >> 2] = $102; //@line 4175
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 4176
  HEAP32[$303 >> 2] = $104; //@line 4177
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 4178
  HEAP32[$304 >> 2] = $106; //@line 4179
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 4180
  HEAP32[$305 >> 2] = $108; //@line 4181
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 4182
  HEAP32[$306 >> 2] = $110; //@line 4183
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 4184
  HEAP32[$307 >> 2] = $112; //@line 4185
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 4186
  HEAP32[$308 >> 2] = $114; //@line 4187
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 4188
  HEAP32[$309 >> 2] = $116; //@line 4189
  sp = STACKTOP; //@line 4190
  return;
 } else if ((label | 0) == 18) {
  $330 = HEAP32[$328 >> 2] | 0; //@line 4194
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 4195
  $331 = FUNCTION_TABLE_ii[$330 & 15]($96) | 0; //@line 4196
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 4199
   $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 4200
   HEAP32[$332 >> 2] = $2; //@line 4201
   $333 = $ReallocAsyncCtx3 + 8 | 0; //@line 4202
   HEAP32[$333 >> 2] = $4; //@line 4203
   $334 = $ReallocAsyncCtx3 + 12 | 0; //@line 4204
   HEAP32[$334 >> 2] = $6; //@line 4205
   $335 = $ReallocAsyncCtx3 + 16 | 0; //@line 4206
   HEAP32[$335 >> 2] = $8; //@line 4207
   $336 = $ReallocAsyncCtx3 + 20 | 0; //@line 4208
   HEAP32[$336 >> 2] = $10; //@line 4209
   $337 = $ReallocAsyncCtx3 + 24 | 0; //@line 4210
   HEAP32[$337 >> 2] = $12; //@line 4211
   $338 = $ReallocAsyncCtx3 + 28 | 0; //@line 4212
   HEAP32[$338 >> 2] = $14; //@line 4213
   $339 = $ReallocAsyncCtx3 + 32 | 0; //@line 4214
   HEAP32[$339 >> 2] = $16; //@line 4215
   $340 = $ReallocAsyncCtx3 + 36 | 0; //@line 4216
   HEAP32[$340 >> 2] = $18; //@line 4217
   $341 = $ReallocAsyncCtx3 + 40 | 0; //@line 4218
   HEAP32[$341 >> 2] = $20; //@line 4219
   $342 = $ReallocAsyncCtx3 + 44 | 0; //@line 4220
   HEAP32[$342 >> 2] = $22; //@line 4221
   $343 = $ReallocAsyncCtx3 + 48 | 0; //@line 4222
   HEAP32[$343 >> 2] = $24; //@line 4223
   $344 = $ReallocAsyncCtx3 + 52 | 0; //@line 4224
   HEAP32[$344 >> 2] = $26; //@line 4225
   $345 = $ReallocAsyncCtx3 + 56 | 0; //@line 4226
   HEAP32[$345 >> 2] = $28; //@line 4227
   $346 = $ReallocAsyncCtx3 + 60 | 0; //@line 4228
   HEAP32[$346 >> 2] = $30; //@line 4229
   $347 = $ReallocAsyncCtx3 + 64 | 0; //@line 4230
   HEAP32[$347 >> 2] = $32; //@line 4231
   $348 = $ReallocAsyncCtx3 + 68 | 0; //@line 4232
   HEAP32[$348 >> 2] = $34; //@line 4233
   $349 = $ReallocAsyncCtx3 + 72 | 0; //@line 4234
   HEAP32[$349 >> 2] = $36; //@line 4235
   $350 = $ReallocAsyncCtx3 + 76 | 0; //@line 4236
   HEAP32[$350 >> 2] = $38; //@line 4237
   $351 = $ReallocAsyncCtx3 + 80 | 0; //@line 4238
   HEAP32[$351 >> 2] = $40; //@line 4239
   $352 = $ReallocAsyncCtx3 + 84 | 0; //@line 4240
   HEAP32[$352 >> 2] = $44; //@line 4241
   $353 = $ReallocAsyncCtx3 + 88 | 0; //@line 4242
   HEAP32[$353 >> 2] = $46; //@line 4243
   $354 = $ReallocAsyncCtx3 + 92 | 0; //@line 4244
   HEAP32[$354 >> 2] = $48; //@line 4245
   $355 = $ReallocAsyncCtx3 + 96 | 0; //@line 4246
   HEAP32[$355 >> 2] = $50; //@line 4247
   $356 = $ReallocAsyncCtx3 + 100 | 0; //@line 4248
   HEAP32[$356 >> 2] = $52; //@line 4249
   $357 = $ReallocAsyncCtx3 + 104 | 0; //@line 4250
   HEAP32[$357 >> 2] = $54; //@line 4251
   $358 = $ReallocAsyncCtx3 + 108 | 0; //@line 4252
   HEAP8[$358 >> 0] = $119; //@line 4253
   $359 = $ReallocAsyncCtx3 + 112 | 0; //@line 4254
   HEAP32[$359 >> 2] = $56; //@line 4255
   $360 = $ReallocAsyncCtx3 + 116 | 0; //@line 4256
   HEAP32[$360 >> 2] = $58; //@line 4257
   $361 = $ReallocAsyncCtx3 + 120 | 0; //@line 4258
   HEAP32[$361 >> 2] = $60; //@line 4259
   $362 = $ReallocAsyncCtx3 + 124 | 0; //@line 4260
   HEAP32[$362 >> 2] = $62; //@line 4261
   $363 = $ReallocAsyncCtx3 + 128 | 0; //@line 4262
   HEAP8[$363 >> 0] = $64; //@line 4263
   $364 = $ReallocAsyncCtx3 + 132 | 0; //@line 4264
   HEAP32[$364 >> 2] = $66; //@line 4265
   $365 = $ReallocAsyncCtx3 + 136 | 0; //@line 4266
   HEAP32[$365 >> 2] = $68; //@line 4267
   $366 = $ReallocAsyncCtx3 + 140 | 0; //@line 4268
   HEAP32[$366 >> 2] = $70; //@line 4269
   $367 = $ReallocAsyncCtx3 + 144 | 0; //@line 4270
   HEAP32[$367 >> 2] = $72; //@line 4271
   $368 = $ReallocAsyncCtx3 + 148 | 0; //@line 4272
   HEAP32[$368 >> 2] = $74; //@line 4273
   $369 = $ReallocAsyncCtx3 + 152 | 0; //@line 4274
   HEAP32[$369 >> 2] = $76; //@line 4275
   $370 = $ReallocAsyncCtx3 + 156 | 0; //@line 4276
   HEAP8[$370 >> 0] = $78; //@line 4277
   $371 = $ReallocAsyncCtx3 + 160 | 0; //@line 4278
   HEAP32[$371 >> 2] = $80; //@line 4279
   $372 = $ReallocAsyncCtx3 + 164 | 0; //@line 4280
   HEAP8[$372 >> 0] = $82; //@line 4281
   $373 = $ReallocAsyncCtx3 + 168 | 0; //@line 4282
   HEAP32[$373 >> 2] = $84; //@line 4283
   $374 = $ReallocAsyncCtx3 + 172 | 0; //@line 4284
   HEAP32[$374 >> 2] = $86; //@line 4285
   $375 = $ReallocAsyncCtx3 + 176 | 0; //@line 4286
   HEAP32[$375 >> 2] = $88; //@line 4287
   $376 = $ReallocAsyncCtx3 + 180 | 0; //@line 4288
   HEAP32[$376 >> 2] = $90; //@line 4289
   $377 = $ReallocAsyncCtx3 + 184 | 0; //@line 4290
   HEAP32[$377 >> 2] = $92; //@line 4291
   $378 = $ReallocAsyncCtx3 + 188 | 0; //@line 4292
   HEAP32[$378 >> 2] = $94; //@line 4293
   $379 = $ReallocAsyncCtx3 + 192 | 0; //@line 4294
   HEAP32[$379 >> 2] = $96; //@line 4295
   $380 = $ReallocAsyncCtx3 + 196 | 0; //@line 4296
   HEAP32[$380 >> 2] = $98; //@line 4297
   $381 = $ReallocAsyncCtx3 + 200 | 0; //@line 4298
   HEAP32[$381 >> 2] = $100; //@line 4299
   $382 = $ReallocAsyncCtx3 + 204 | 0; //@line 4300
   HEAP32[$382 >> 2] = $102; //@line 4301
   $383 = $ReallocAsyncCtx3 + 208 | 0; //@line 4302
   HEAP32[$383 >> 2] = $104; //@line 4303
   $384 = $ReallocAsyncCtx3 + 212 | 0; //@line 4304
   HEAP32[$384 >> 2] = $106; //@line 4305
   $385 = $ReallocAsyncCtx3 + 216 | 0; //@line 4306
   HEAP32[$385 >> 2] = $108; //@line 4307
   $386 = $ReallocAsyncCtx3 + 220 | 0; //@line 4308
   HEAP32[$386 >> 2] = $110; //@line 4309
   $387 = $ReallocAsyncCtx3 + 224 | 0; //@line 4310
   HEAP32[$387 >> 2] = $112; //@line 4311
   $388 = $ReallocAsyncCtx3 + 228 | 0; //@line 4312
   HEAP32[$388 >> 2] = $114; //@line 4313
   $389 = $ReallocAsyncCtx3 + 232 | 0; //@line 4314
   HEAP32[$389 >> 2] = $116; //@line 4315
   sp = STACKTOP; //@line 4316
   return;
  }
  HEAP8[___async_retval >> 0] = $331; //@line 4320
  ___async_unwind = 0; //@line 4321
  HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 4322
  $332 = $ReallocAsyncCtx3 + 4 | 0; //@line 4323
  HEAP32[$332 >> 2] = $2; //@line 4324
  $333 = $ReallocAsyncCtx3 + 8 | 0; //@line 4325
  HEAP32[$333 >> 2] = $4; //@line 4326
  $334 = $ReallocAsyncCtx3 + 12 | 0; //@line 4327
  HEAP32[$334 >> 2] = $6; //@line 4328
  $335 = $ReallocAsyncCtx3 + 16 | 0; //@line 4329
  HEAP32[$335 >> 2] = $8; //@line 4330
  $336 = $ReallocAsyncCtx3 + 20 | 0; //@line 4331
  HEAP32[$336 >> 2] = $10; //@line 4332
  $337 = $ReallocAsyncCtx3 + 24 | 0; //@line 4333
  HEAP32[$337 >> 2] = $12; //@line 4334
  $338 = $ReallocAsyncCtx3 + 28 | 0; //@line 4335
  HEAP32[$338 >> 2] = $14; //@line 4336
  $339 = $ReallocAsyncCtx3 + 32 | 0; //@line 4337
  HEAP32[$339 >> 2] = $16; //@line 4338
  $340 = $ReallocAsyncCtx3 + 36 | 0; //@line 4339
  HEAP32[$340 >> 2] = $18; //@line 4340
  $341 = $ReallocAsyncCtx3 + 40 | 0; //@line 4341
  HEAP32[$341 >> 2] = $20; //@line 4342
  $342 = $ReallocAsyncCtx3 + 44 | 0; //@line 4343
  HEAP32[$342 >> 2] = $22; //@line 4344
  $343 = $ReallocAsyncCtx3 + 48 | 0; //@line 4345
  HEAP32[$343 >> 2] = $24; //@line 4346
  $344 = $ReallocAsyncCtx3 + 52 | 0; //@line 4347
  HEAP32[$344 >> 2] = $26; //@line 4348
  $345 = $ReallocAsyncCtx3 + 56 | 0; //@line 4349
  HEAP32[$345 >> 2] = $28; //@line 4350
  $346 = $ReallocAsyncCtx3 + 60 | 0; //@line 4351
  HEAP32[$346 >> 2] = $30; //@line 4352
  $347 = $ReallocAsyncCtx3 + 64 | 0; //@line 4353
  HEAP32[$347 >> 2] = $32; //@line 4354
  $348 = $ReallocAsyncCtx3 + 68 | 0; //@line 4355
  HEAP32[$348 >> 2] = $34; //@line 4356
  $349 = $ReallocAsyncCtx3 + 72 | 0; //@line 4357
  HEAP32[$349 >> 2] = $36; //@line 4358
  $350 = $ReallocAsyncCtx3 + 76 | 0; //@line 4359
  HEAP32[$350 >> 2] = $38; //@line 4360
  $351 = $ReallocAsyncCtx3 + 80 | 0; //@line 4361
  HEAP32[$351 >> 2] = $40; //@line 4362
  $352 = $ReallocAsyncCtx3 + 84 | 0; //@line 4363
  HEAP32[$352 >> 2] = $44; //@line 4364
  $353 = $ReallocAsyncCtx3 + 88 | 0; //@line 4365
  HEAP32[$353 >> 2] = $46; //@line 4366
  $354 = $ReallocAsyncCtx3 + 92 | 0; //@line 4367
  HEAP32[$354 >> 2] = $48; //@line 4368
  $355 = $ReallocAsyncCtx3 + 96 | 0; //@line 4369
  HEAP32[$355 >> 2] = $50; //@line 4370
  $356 = $ReallocAsyncCtx3 + 100 | 0; //@line 4371
  HEAP32[$356 >> 2] = $52; //@line 4372
  $357 = $ReallocAsyncCtx3 + 104 | 0; //@line 4373
  HEAP32[$357 >> 2] = $54; //@line 4374
  $358 = $ReallocAsyncCtx3 + 108 | 0; //@line 4375
  HEAP8[$358 >> 0] = $119; //@line 4376
  $359 = $ReallocAsyncCtx3 + 112 | 0; //@line 4377
  HEAP32[$359 >> 2] = $56; //@line 4378
  $360 = $ReallocAsyncCtx3 + 116 | 0; //@line 4379
  HEAP32[$360 >> 2] = $58; //@line 4380
  $361 = $ReallocAsyncCtx3 + 120 | 0; //@line 4381
  HEAP32[$361 >> 2] = $60; //@line 4382
  $362 = $ReallocAsyncCtx3 + 124 | 0; //@line 4383
  HEAP32[$362 >> 2] = $62; //@line 4384
  $363 = $ReallocAsyncCtx3 + 128 | 0; //@line 4385
  HEAP8[$363 >> 0] = $64; //@line 4386
  $364 = $ReallocAsyncCtx3 + 132 | 0; //@line 4387
  HEAP32[$364 >> 2] = $66; //@line 4388
  $365 = $ReallocAsyncCtx3 + 136 | 0; //@line 4389
  HEAP32[$365 >> 2] = $68; //@line 4390
  $366 = $ReallocAsyncCtx3 + 140 | 0; //@line 4391
  HEAP32[$366 >> 2] = $70; //@line 4392
  $367 = $ReallocAsyncCtx3 + 144 | 0; //@line 4393
  HEAP32[$367 >> 2] = $72; //@line 4394
  $368 = $ReallocAsyncCtx3 + 148 | 0; //@line 4395
  HEAP32[$368 >> 2] = $74; //@line 4396
  $369 = $ReallocAsyncCtx3 + 152 | 0; //@line 4397
  HEAP32[$369 >> 2] = $76; //@line 4398
  $370 = $ReallocAsyncCtx3 + 156 | 0; //@line 4399
  HEAP8[$370 >> 0] = $78; //@line 4400
  $371 = $ReallocAsyncCtx3 + 160 | 0; //@line 4401
  HEAP32[$371 >> 2] = $80; //@line 4402
  $372 = $ReallocAsyncCtx3 + 164 | 0; //@line 4403
  HEAP8[$372 >> 0] = $82; //@line 4404
  $373 = $ReallocAsyncCtx3 + 168 | 0; //@line 4405
  HEAP32[$373 >> 2] = $84; //@line 4406
  $374 = $ReallocAsyncCtx3 + 172 | 0; //@line 4407
  HEAP32[$374 >> 2] = $86; //@line 4408
  $375 = $ReallocAsyncCtx3 + 176 | 0; //@line 4409
  HEAP32[$375 >> 2] = $88; //@line 4410
  $376 = $ReallocAsyncCtx3 + 180 | 0; //@line 4411
  HEAP32[$376 >> 2] = $90; //@line 4412
  $377 = $ReallocAsyncCtx3 + 184 | 0; //@line 4413
  HEAP32[$377 >> 2] = $92; //@line 4414
  $378 = $ReallocAsyncCtx3 + 188 | 0; //@line 4415
  HEAP32[$378 >> 2] = $94; //@line 4416
  $379 = $ReallocAsyncCtx3 + 192 | 0; //@line 4417
  HEAP32[$379 >> 2] = $96; //@line 4418
  $380 = $ReallocAsyncCtx3 + 196 | 0; //@line 4419
  HEAP32[$380 >> 2] = $98; //@line 4420
  $381 = $ReallocAsyncCtx3 + 200 | 0; //@line 4421
  HEAP32[$381 >> 2] = $100; //@line 4422
  $382 = $ReallocAsyncCtx3 + 204 | 0; //@line 4423
  HEAP32[$382 >> 2] = $102; //@line 4424
  $383 = $ReallocAsyncCtx3 + 208 | 0; //@line 4425
  HEAP32[$383 >> 2] = $104; //@line 4426
  $384 = $ReallocAsyncCtx3 + 212 | 0; //@line 4427
  HEAP32[$384 >> 2] = $106; //@line 4428
  $385 = $ReallocAsyncCtx3 + 216 | 0; //@line 4429
  HEAP32[$385 >> 2] = $108; //@line 4430
  $386 = $ReallocAsyncCtx3 + 220 | 0; //@line 4431
  HEAP32[$386 >> 2] = $110; //@line 4432
  $387 = $ReallocAsyncCtx3 + 224 | 0; //@line 4433
  HEAP32[$387 >> 2] = $112; //@line 4434
  $388 = $ReallocAsyncCtx3 + 228 | 0; //@line 4435
  HEAP32[$388 >> 2] = $114; //@line 4436
  $389 = $ReallocAsyncCtx3 + 232 | 0; //@line 4437
  HEAP32[$389 >> 2] = $116; //@line 4438
  sp = STACKTOP; //@line 4439
  return;
 } else if ((label | 0) == 23) {
  $409 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 4446
  HEAP32[$44 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 4467
  HEAP32[$34 >> 2] = 0; //@line 4468
  $430 = $$0$be + 6 << 24 >> 24; //@line 4469
  HEAP8[$56 >> 0] = HEAP8[$68 + ($$0$be + 5 & 255) >> 0] | 0; //@line 4473
  $436 = HEAP32[(HEAP32[$50 >> 2] | 0) + 8 >> 2] | 0; //@line 4476
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 4477
  $437 = FUNCTION_TABLE_iiii[$436 & 31]($94, $409, $10) | 0; //@line 4478
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 4481
   $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 4482
   HEAP32[$438 >> 2] = $2; //@line 4483
   $439 = $ReallocAsyncCtx4 + 8 | 0; //@line 4484
   HEAP32[$439 >> 2] = $4; //@line 4485
   $440 = $ReallocAsyncCtx4 + 12 | 0; //@line 4486
   HEAP32[$440 >> 2] = $6; //@line 4487
   $441 = $ReallocAsyncCtx4 + 16 | 0; //@line 4488
   HEAP32[$441 >> 2] = $8; //@line 4489
   $442 = $ReallocAsyncCtx4 + 20 | 0; //@line 4490
   HEAP32[$442 >> 2] = $10; //@line 4491
   $443 = $ReallocAsyncCtx4 + 24 | 0; //@line 4492
   HEAP32[$443 >> 2] = $12; //@line 4493
   $444 = $ReallocAsyncCtx4 + 28 | 0; //@line 4494
   HEAP32[$444 >> 2] = $14; //@line 4495
   $445 = $ReallocAsyncCtx4 + 32 | 0; //@line 4496
   HEAP32[$445 >> 2] = $16; //@line 4497
   $446 = $ReallocAsyncCtx4 + 36 | 0; //@line 4498
   HEAP32[$446 >> 2] = $18; //@line 4499
   $447 = $ReallocAsyncCtx4 + 40 | 0; //@line 4500
   HEAP32[$447 >> 2] = $20; //@line 4501
   $448 = $ReallocAsyncCtx4 + 44 | 0; //@line 4502
   HEAP32[$448 >> 2] = $22; //@line 4503
   $449 = $ReallocAsyncCtx4 + 48 | 0; //@line 4504
   HEAP32[$449 >> 2] = $24; //@line 4505
   $450 = $ReallocAsyncCtx4 + 52 | 0; //@line 4506
   HEAP32[$450 >> 2] = $26; //@line 4507
   $451 = $ReallocAsyncCtx4 + 56 | 0; //@line 4508
   HEAP32[$451 >> 2] = $28; //@line 4509
   $452 = $ReallocAsyncCtx4 + 60 | 0; //@line 4510
   HEAP32[$452 >> 2] = $30; //@line 4511
   $453 = $ReallocAsyncCtx4 + 64 | 0; //@line 4512
   HEAP32[$453 >> 2] = $32; //@line 4513
   $454 = $ReallocAsyncCtx4 + 68 | 0; //@line 4514
   HEAP32[$454 >> 2] = $34; //@line 4515
   $455 = $ReallocAsyncCtx4 + 72 | 0; //@line 4516
   HEAP32[$455 >> 2] = $36; //@line 4517
   $456 = $ReallocAsyncCtx4 + 76 | 0; //@line 4518
   HEAP32[$456 >> 2] = $38; //@line 4519
   $457 = $ReallocAsyncCtx4 + 80 | 0; //@line 4520
   HEAP32[$457 >> 2] = $40; //@line 4521
   $458 = $ReallocAsyncCtx4 + 84 | 0; //@line 4522
   HEAP32[$458 >> 2] = $44; //@line 4523
   $459 = $ReallocAsyncCtx4 + 88 | 0; //@line 4524
   HEAP32[$459 >> 2] = $46; //@line 4525
   $460 = $ReallocAsyncCtx4 + 92 | 0; //@line 4526
   HEAP32[$460 >> 2] = $48; //@line 4527
   $461 = $ReallocAsyncCtx4 + 96 | 0; //@line 4528
   HEAP32[$461 >> 2] = $50; //@line 4529
   $462 = $ReallocAsyncCtx4 + 100 | 0; //@line 4530
   HEAP32[$462 >> 2] = $52; //@line 4531
   $463 = $ReallocAsyncCtx4 + 104 | 0; //@line 4532
   HEAP32[$463 >> 2] = $54; //@line 4533
   $464 = $ReallocAsyncCtx4 + 108 | 0; //@line 4534
   HEAP32[$464 >> 2] = $56; //@line 4535
   $465 = $ReallocAsyncCtx4 + 112 | 0; //@line 4536
   HEAP8[$465 >> 0] = $430; //@line 4537
   $466 = $ReallocAsyncCtx4 + 116 | 0; //@line 4538
   HEAP32[$466 >> 2] = $58; //@line 4539
   $467 = $ReallocAsyncCtx4 + 120 | 0; //@line 4540
   HEAP32[$467 >> 2] = $60; //@line 4541
   $468 = $ReallocAsyncCtx4 + 124 | 0; //@line 4542
   HEAP32[$468 >> 2] = $62; //@line 4543
   $469 = $ReallocAsyncCtx4 + 128 | 0; //@line 4544
   HEAP8[$469 >> 0] = $64; //@line 4545
   $470 = $ReallocAsyncCtx4 + 132 | 0; //@line 4546
   HEAP32[$470 >> 2] = $66; //@line 4547
   $471 = $ReallocAsyncCtx4 + 136 | 0; //@line 4548
   HEAP32[$471 >> 2] = $68; //@line 4549
   $472 = $ReallocAsyncCtx4 + 140 | 0; //@line 4550
   HEAP32[$472 >> 2] = $70; //@line 4551
   $473 = $ReallocAsyncCtx4 + 144 | 0; //@line 4552
   HEAP32[$473 >> 2] = $72; //@line 4553
   $474 = $ReallocAsyncCtx4 + 148 | 0; //@line 4554
   HEAP32[$474 >> 2] = $74; //@line 4555
   $475 = $ReallocAsyncCtx4 + 152 | 0; //@line 4556
   HEAP32[$475 >> 2] = $76; //@line 4557
   $476 = $ReallocAsyncCtx4 + 156 | 0; //@line 4558
   HEAP8[$476 >> 0] = $78; //@line 4559
   $477 = $ReallocAsyncCtx4 + 160 | 0; //@line 4560
   HEAP32[$477 >> 2] = $80; //@line 4561
   $478 = $ReallocAsyncCtx4 + 164 | 0; //@line 4562
   HEAP8[$478 >> 0] = $82; //@line 4563
   $479 = $ReallocAsyncCtx4 + 168 | 0; //@line 4564
   HEAP32[$479 >> 2] = $84; //@line 4565
   $480 = $ReallocAsyncCtx4 + 172 | 0; //@line 4566
   HEAP32[$480 >> 2] = $86; //@line 4567
   $481 = $ReallocAsyncCtx4 + 176 | 0; //@line 4568
   HEAP32[$481 >> 2] = $88; //@line 4569
   $482 = $ReallocAsyncCtx4 + 180 | 0; //@line 4570
   HEAP32[$482 >> 2] = $90; //@line 4571
   $483 = $ReallocAsyncCtx4 + 184 | 0; //@line 4572
   HEAP32[$483 >> 2] = $92; //@line 4573
   $484 = $ReallocAsyncCtx4 + 188 | 0; //@line 4574
   HEAP32[$484 >> 2] = $94; //@line 4575
   $485 = $ReallocAsyncCtx4 + 192 | 0; //@line 4576
   HEAP32[$485 >> 2] = $96; //@line 4577
   $486 = $ReallocAsyncCtx4 + 196 | 0; //@line 4578
   HEAP32[$486 >> 2] = $98; //@line 4579
   $487 = $ReallocAsyncCtx4 + 200 | 0; //@line 4580
   HEAP32[$487 >> 2] = $100; //@line 4581
   $488 = $ReallocAsyncCtx4 + 204 | 0; //@line 4582
   HEAP32[$488 >> 2] = $102; //@line 4583
   $489 = $ReallocAsyncCtx4 + 208 | 0; //@line 4584
   HEAP32[$489 >> 2] = $104; //@line 4585
   $490 = $ReallocAsyncCtx4 + 212 | 0; //@line 4586
   HEAP32[$490 >> 2] = $106; //@line 4587
   $491 = $ReallocAsyncCtx4 + 216 | 0; //@line 4588
   HEAP32[$491 >> 2] = $108; //@line 4589
   $492 = $ReallocAsyncCtx4 + 220 | 0; //@line 4590
   HEAP32[$492 >> 2] = $110; //@line 4591
   $493 = $ReallocAsyncCtx4 + 224 | 0; //@line 4592
   HEAP32[$493 >> 2] = $112; //@line 4593
   $494 = $ReallocAsyncCtx4 + 228 | 0; //@line 4594
   HEAP32[$494 >> 2] = $114; //@line 4595
   $495 = $ReallocAsyncCtx4 + 232 | 0; //@line 4596
   HEAP32[$495 >> 2] = $116; //@line 4597
   sp = STACKTOP; //@line 4598
   return;
  }
  HEAP8[___async_retval >> 0] = $437; //@line 4602
  ___async_unwind = 0; //@line 4603
  HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 4604
  $438 = $ReallocAsyncCtx4 + 4 | 0; //@line 4605
  HEAP32[$438 >> 2] = $2; //@line 4606
  $439 = $ReallocAsyncCtx4 + 8 | 0; //@line 4607
  HEAP32[$439 >> 2] = $4; //@line 4608
  $440 = $ReallocAsyncCtx4 + 12 | 0; //@line 4609
  HEAP32[$440 >> 2] = $6; //@line 4610
  $441 = $ReallocAsyncCtx4 + 16 | 0; //@line 4611
  HEAP32[$441 >> 2] = $8; //@line 4612
  $442 = $ReallocAsyncCtx4 + 20 | 0; //@line 4613
  HEAP32[$442 >> 2] = $10; //@line 4614
  $443 = $ReallocAsyncCtx4 + 24 | 0; //@line 4615
  HEAP32[$443 >> 2] = $12; //@line 4616
  $444 = $ReallocAsyncCtx4 + 28 | 0; //@line 4617
  HEAP32[$444 >> 2] = $14; //@line 4618
  $445 = $ReallocAsyncCtx4 + 32 | 0; //@line 4619
  HEAP32[$445 >> 2] = $16; //@line 4620
  $446 = $ReallocAsyncCtx4 + 36 | 0; //@line 4621
  HEAP32[$446 >> 2] = $18; //@line 4622
  $447 = $ReallocAsyncCtx4 + 40 | 0; //@line 4623
  HEAP32[$447 >> 2] = $20; //@line 4624
  $448 = $ReallocAsyncCtx4 + 44 | 0; //@line 4625
  HEAP32[$448 >> 2] = $22; //@line 4626
  $449 = $ReallocAsyncCtx4 + 48 | 0; //@line 4627
  HEAP32[$449 >> 2] = $24; //@line 4628
  $450 = $ReallocAsyncCtx4 + 52 | 0; //@line 4629
  HEAP32[$450 >> 2] = $26; //@line 4630
  $451 = $ReallocAsyncCtx4 + 56 | 0; //@line 4631
  HEAP32[$451 >> 2] = $28; //@line 4632
  $452 = $ReallocAsyncCtx4 + 60 | 0; //@line 4633
  HEAP32[$452 >> 2] = $30; //@line 4634
  $453 = $ReallocAsyncCtx4 + 64 | 0; //@line 4635
  HEAP32[$453 >> 2] = $32; //@line 4636
  $454 = $ReallocAsyncCtx4 + 68 | 0; //@line 4637
  HEAP32[$454 >> 2] = $34; //@line 4638
  $455 = $ReallocAsyncCtx4 + 72 | 0; //@line 4639
  HEAP32[$455 >> 2] = $36; //@line 4640
  $456 = $ReallocAsyncCtx4 + 76 | 0; //@line 4641
  HEAP32[$456 >> 2] = $38; //@line 4642
  $457 = $ReallocAsyncCtx4 + 80 | 0; //@line 4643
  HEAP32[$457 >> 2] = $40; //@line 4644
  $458 = $ReallocAsyncCtx4 + 84 | 0; //@line 4645
  HEAP32[$458 >> 2] = $44; //@line 4646
  $459 = $ReallocAsyncCtx4 + 88 | 0; //@line 4647
  HEAP32[$459 >> 2] = $46; //@line 4648
  $460 = $ReallocAsyncCtx4 + 92 | 0; //@line 4649
  HEAP32[$460 >> 2] = $48; //@line 4650
  $461 = $ReallocAsyncCtx4 + 96 | 0; //@line 4651
  HEAP32[$461 >> 2] = $50; //@line 4652
  $462 = $ReallocAsyncCtx4 + 100 | 0; //@line 4653
  HEAP32[$462 >> 2] = $52; //@line 4654
  $463 = $ReallocAsyncCtx4 + 104 | 0; //@line 4655
  HEAP32[$463 >> 2] = $54; //@line 4656
  $464 = $ReallocAsyncCtx4 + 108 | 0; //@line 4657
  HEAP32[$464 >> 2] = $56; //@line 4658
  $465 = $ReallocAsyncCtx4 + 112 | 0; //@line 4659
  HEAP8[$465 >> 0] = $430; //@line 4660
  $466 = $ReallocAsyncCtx4 + 116 | 0; //@line 4661
  HEAP32[$466 >> 2] = $58; //@line 4662
  $467 = $ReallocAsyncCtx4 + 120 | 0; //@line 4663
  HEAP32[$467 >> 2] = $60; //@line 4664
  $468 = $ReallocAsyncCtx4 + 124 | 0; //@line 4665
  HEAP32[$468 >> 2] = $62; //@line 4666
  $469 = $ReallocAsyncCtx4 + 128 | 0; //@line 4667
  HEAP8[$469 >> 0] = $64; //@line 4668
  $470 = $ReallocAsyncCtx4 + 132 | 0; //@line 4669
  HEAP32[$470 >> 2] = $66; //@line 4670
  $471 = $ReallocAsyncCtx4 + 136 | 0; //@line 4671
  HEAP32[$471 >> 2] = $68; //@line 4672
  $472 = $ReallocAsyncCtx4 + 140 | 0; //@line 4673
  HEAP32[$472 >> 2] = $70; //@line 4674
  $473 = $ReallocAsyncCtx4 + 144 | 0; //@line 4675
  HEAP32[$473 >> 2] = $72; //@line 4676
  $474 = $ReallocAsyncCtx4 + 148 | 0; //@line 4677
  HEAP32[$474 >> 2] = $74; //@line 4678
  $475 = $ReallocAsyncCtx4 + 152 | 0; //@line 4679
  HEAP32[$475 >> 2] = $76; //@line 4680
  $476 = $ReallocAsyncCtx4 + 156 | 0; //@line 4681
  HEAP8[$476 >> 0] = $78; //@line 4682
  $477 = $ReallocAsyncCtx4 + 160 | 0; //@line 4683
  HEAP32[$477 >> 2] = $80; //@line 4684
  $478 = $ReallocAsyncCtx4 + 164 | 0; //@line 4685
  HEAP8[$478 >> 0] = $82; //@line 4686
  $479 = $ReallocAsyncCtx4 + 168 | 0; //@line 4687
  HEAP32[$479 >> 2] = $84; //@line 4688
  $480 = $ReallocAsyncCtx4 + 172 | 0; //@line 4689
  HEAP32[$480 >> 2] = $86; //@line 4690
  $481 = $ReallocAsyncCtx4 + 176 | 0; //@line 4691
  HEAP32[$481 >> 2] = $88; //@line 4692
  $482 = $ReallocAsyncCtx4 + 180 | 0; //@line 4693
  HEAP32[$482 >> 2] = $90; //@line 4694
  $483 = $ReallocAsyncCtx4 + 184 | 0; //@line 4695
  HEAP32[$483 >> 2] = $92; //@line 4696
  $484 = $ReallocAsyncCtx4 + 188 | 0; //@line 4697
  HEAP32[$484 >> 2] = $94; //@line 4698
  $485 = $ReallocAsyncCtx4 + 192 | 0; //@line 4699
  HEAP32[$485 >> 2] = $96; //@line 4700
  $486 = $ReallocAsyncCtx4 + 196 | 0; //@line 4701
  HEAP32[$486 >> 2] = $98; //@line 4702
  $487 = $ReallocAsyncCtx4 + 200 | 0; //@line 4703
  HEAP32[$487 >> 2] = $100; //@line 4704
  $488 = $ReallocAsyncCtx4 + 204 | 0; //@line 4705
  HEAP32[$488 >> 2] = $102; //@line 4706
  $489 = $ReallocAsyncCtx4 + 208 | 0; //@line 4707
  HEAP32[$489 >> 2] = $104; //@line 4708
  $490 = $ReallocAsyncCtx4 + 212 | 0; //@line 4709
  HEAP32[$490 >> 2] = $106; //@line 4710
  $491 = $ReallocAsyncCtx4 + 216 | 0; //@line 4711
  HEAP32[$491 >> 2] = $108; //@line 4712
  $492 = $ReallocAsyncCtx4 + 220 | 0; //@line 4713
  HEAP32[$492 >> 2] = $110; //@line 4714
  $493 = $ReallocAsyncCtx4 + 224 | 0; //@line 4715
  HEAP32[$493 >> 2] = $112; //@line 4716
  $494 = $ReallocAsyncCtx4 + 228 | 0; //@line 4717
  HEAP32[$494 >> 2] = $114; //@line 4718
  $495 = $ReallocAsyncCtx4 + 232 | 0; //@line 4719
  HEAP32[$495 >> 2] = $116; //@line 4720
  sp = STACKTOP; //@line 4721
  return;
 } else if ((label | 0) == 29) {
  $516 = $$0$be + 2 << 24 >> 24; //@line 4725
  $520 = HEAPU8[$68 + ($119 & 255) >> 0] | 0; //@line 4729
  $522 = $520 >>> 5 & 1; //@line 4732
  $524 = $520 >>> 4 & 1; //@line 4735
  $527 = HEAP32[(HEAP32[$28 >> 2] | 0) + 44 >> 2] | 0; //@line 4738
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 4739
  $528 = FUNCTION_TABLE_iiii[$527 & 31]($94, $524, $522) | 0; //@line 4740
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 4743
   $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 4744
   HEAP32[$529 >> 2] = $2; //@line 4745
   $530 = $ReallocAsyncCtx5 + 8 | 0; //@line 4746
   HEAP32[$530 >> 2] = $4; //@line 4747
   $531 = $ReallocAsyncCtx5 + 12 | 0; //@line 4748
   HEAP32[$531 >> 2] = $6; //@line 4749
   $532 = $ReallocAsyncCtx5 + 16 | 0; //@line 4750
   HEAP32[$532 >> 2] = $8; //@line 4751
   $533 = $ReallocAsyncCtx5 + 20 | 0; //@line 4752
   HEAP32[$533 >> 2] = $10; //@line 4753
   $534 = $ReallocAsyncCtx5 + 24 | 0; //@line 4754
   HEAP32[$534 >> 2] = $12; //@line 4755
   $535 = $ReallocAsyncCtx5 + 28 | 0; //@line 4756
   HEAP32[$535 >> 2] = $14; //@line 4757
   $536 = $ReallocAsyncCtx5 + 32 | 0; //@line 4758
   HEAP32[$536 >> 2] = $16; //@line 4759
   $537 = $ReallocAsyncCtx5 + 36 | 0; //@line 4760
   HEAP32[$537 >> 2] = $18; //@line 4761
   $538 = $ReallocAsyncCtx5 + 40 | 0; //@line 4762
   HEAP32[$538 >> 2] = $20; //@line 4763
   $539 = $ReallocAsyncCtx5 + 44 | 0; //@line 4764
   HEAP32[$539 >> 2] = $22; //@line 4765
   $540 = $ReallocAsyncCtx5 + 48 | 0; //@line 4766
   HEAP32[$540 >> 2] = $24; //@line 4767
   $541 = $ReallocAsyncCtx5 + 52 | 0; //@line 4768
   HEAP32[$541 >> 2] = $26; //@line 4769
   $542 = $ReallocAsyncCtx5 + 56 | 0; //@line 4770
   HEAP32[$542 >> 2] = $28; //@line 4771
   $543 = $ReallocAsyncCtx5 + 60 | 0; //@line 4772
   HEAP32[$543 >> 2] = $30; //@line 4773
   $544 = $ReallocAsyncCtx5 + 64 | 0; //@line 4774
   HEAP32[$544 >> 2] = $32; //@line 4775
   $545 = $ReallocAsyncCtx5 + 68 | 0; //@line 4776
   HEAP32[$545 >> 2] = $34; //@line 4777
   $546 = $ReallocAsyncCtx5 + 72 | 0; //@line 4778
   HEAP32[$546 >> 2] = $36; //@line 4779
   $547 = $ReallocAsyncCtx5 + 76 | 0; //@line 4780
   HEAP32[$547 >> 2] = $38; //@line 4781
   $548 = $ReallocAsyncCtx5 + 80 | 0; //@line 4782
   HEAP32[$548 >> 2] = $40; //@line 4783
   $549 = $ReallocAsyncCtx5 + 84 | 0; //@line 4784
   HEAP32[$549 >> 2] = $44; //@line 4785
   $550 = $ReallocAsyncCtx5 + 88 | 0; //@line 4786
   HEAP32[$550 >> 2] = $46; //@line 4787
   $551 = $ReallocAsyncCtx5 + 92 | 0; //@line 4788
   HEAP32[$551 >> 2] = $48; //@line 4789
   $552 = $ReallocAsyncCtx5 + 96 | 0; //@line 4790
   HEAP8[$552 >> 0] = $524; //@line 4791
   $553 = $ReallocAsyncCtx5 + 100 | 0; //@line 4792
   HEAP32[$553 >> 2] = $50; //@line 4793
   $554 = $ReallocAsyncCtx5 + 104 | 0; //@line 4794
   HEAP32[$554 >> 2] = $52; //@line 4795
   $555 = $ReallocAsyncCtx5 + 108 | 0; //@line 4796
   HEAP32[$555 >> 2] = $54; //@line 4797
   $556 = $ReallocAsyncCtx5 + 112 | 0; //@line 4798
   HEAP32[$556 >> 2] = $56; //@line 4799
   $557 = $ReallocAsyncCtx5 + 116 | 0; //@line 4800
   HEAP32[$557 >> 2] = $58; //@line 4801
   $558 = $ReallocAsyncCtx5 + 120 | 0; //@line 4802
   HEAP32[$558 >> 2] = $60; //@line 4803
   $559 = $ReallocAsyncCtx5 + 124 | 0; //@line 4804
   HEAP32[$559 >> 2] = $62; //@line 4805
   $560 = $ReallocAsyncCtx5 + 128 | 0; //@line 4806
   HEAP8[$560 >> 0] = $64; //@line 4807
   $561 = $ReallocAsyncCtx5 + 132 | 0; //@line 4808
   HEAP32[$561 >> 2] = $66; //@line 4809
   $562 = $ReallocAsyncCtx5 + 136 | 0; //@line 4810
   HEAP32[$562 >> 2] = $68; //@line 4811
   $563 = $ReallocAsyncCtx5 + 140 | 0; //@line 4812
   HEAP32[$563 >> 2] = $70; //@line 4813
   $564 = $ReallocAsyncCtx5 + 144 | 0; //@line 4814
   HEAP32[$564 >> 2] = $72; //@line 4815
   $565 = $ReallocAsyncCtx5 + 148 | 0; //@line 4816
   HEAP32[$565 >> 2] = $74; //@line 4817
   $566 = $ReallocAsyncCtx5 + 152 | 0; //@line 4818
   HEAP32[$566 >> 2] = $76; //@line 4819
   $567 = $ReallocAsyncCtx5 + 156 | 0; //@line 4820
   HEAP8[$567 >> 0] = $78; //@line 4821
   $568 = $ReallocAsyncCtx5 + 160 | 0; //@line 4822
   HEAP32[$568 >> 2] = $80; //@line 4823
   $569 = $ReallocAsyncCtx5 + 164 | 0; //@line 4824
   HEAP8[$569 >> 0] = $82; //@line 4825
   $570 = $ReallocAsyncCtx5 + 168 | 0; //@line 4826
   HEAP32[$570 >> 2] = $84; //@line 4827
   $571 = $ReallocAsyncCtx5 + 172 | 0; //@line 4828
   HEAP32[$571 >> 2] = $86; //@line 4829
   $572 = $ReallocAsyncCtx5 + 176 | 0; //@line 4830
   HEAP32[$572 >> 2] = $88; //@line 4831
   $573 = $ReallocAsyncCtx5 + 180 | 0; //@line 4832
   HEAP32[$573 >> 2] = $90; //@line 4833
   $574 = $ReallocAsyncCtx5 + 184 | 0; //@line 4834
   HEAP32[$574 >> 2] = $92; //@line 4835
   $575 = $ReallocAsyncCtx5 + 188 | 0; //@line 4836
   HEAP32[$575 >> 2] = $94; //@line 4837
   $576 = $ReallocAsyncCtx5 + 192 | 0; //@line 4838
   HEAP32[$576 >> 2] = $96; //@line 4839
   $577 = $ReallocAsyncCtx5 + 196 | 0; //@line 4840
   HEAP8[$577 >> 0] = $516; //@line 4841
   $578 = $ReallocAsyncCtx5 + 197 | 0; //@line 4842
   HEAP8[$578 >> 0] = $522; //@line 4843
   $579 = $ReallocAsyncCtx5 + 200 | 0; //@line 4844
   HEAP32[$579 >> 2] = $98; //@line 4845
   $580 = $ReallocAsyncCtx5 + 204 | 0; //@line 4846
   HEAP32[$580 >> 2] = $100; //@line 4847
   $581 = $ReallocAsyncCtx5 + 208 | 0; //@line 4848
   HEAP32[$581 >> 2] = $520; //@line 4849
   $582 = $ReallocAsyncCtx5 + 212 | 0; //@line 4850
   HEAP32[$582 >> 2] = $$0107$be; //@line 4851
   $583 = $ReallocAsyncCtx5 + 216 | 0; //@line 4852
   HEAP32[$583 >> 2] = $102; //@line 4853
   $584 = $ReallocAsyncCtx5 + 220 | 0; //@line 4854
   HEAP32[$584 >> 2] = $104; //@line 4855
   $585 = $ReallocAsyncCtx5 + 224 | 0; //@line 4856
   HEAP32[$585 >> 2] = $106; //@line 4857
   $586 = $ReallocAsyncCtx5 + 228 | 0; //@line 4858
   HEAP32[$586 >> 2] = $108; //@line 4859
   $587 = $ReallocAsyncCtx5 + 232 | 0; //@line 4860
   HEAP32[$587 >> 2] = $110; //@line 4861
   $588 = $ReallocAsyncCtx5 + 236 | 0; //@line 4862
   HEAP32[$588 >> 2] = $112; //@line 4863
   $589 = $ReallocAsyncCtx5 + 240 | 0; //@line 4864
   HEAP32[$589 >> 2] = $114; //@line 4865
   $590 = $ReallocAsyncCtx5 + 244 | 0; //@line 4866
   HEAP32[$590 >> 2] = $116; //@line 4867
   sp = STACKTOP; //@line 4868
   return;
  }
  HEAP8[___async_retval >> 0] = $528 & 1; //@line 4873
  ___async_unwind = 0; //@line 4874
  HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 4875
  $529 = $ReallocAsyncCtx5 + 4 | 0; //@line 4876
  HEAP32[$529 >> 2] = $2; //@line 4877
  $530 = $ReallocAsyncCtx5 + 8 | 0; //@line 4878
  HEAP32[$530 >> 2] = $4; //@line 4879
  $531 = $ReallocAsyncCtx5 + 12 | 0; //@line 4880
  HEAP32[$531 >> 2] = $6; //@line 4881
  $532 = $ReallocAsyncCtx5 + 16 | 0; //@line 4882
  HEAP32[$532 >> 2] = $8; //@line 4883
  $533 = $ReallocAsyncCtx5 + 20 | 0; //@line 4884
  HEAP32[$533 >> 2] = $10; //@line 4885
  $534 = $ReallocAsyncCtx5 + 24 | 0; //@line 4886
  HEAP32[$534 >> 2] = $12; //@line 4887
  $535 = $ReallocAsyncCtx5 + 28 | 0; //@line 4888
  HEAP32[$535 >> 2] = $14; //@line 4889
  $536 = $ReallocAsyncCtx5 + 32 | 0; //@line 4890
  HEAP32[$536 >> 2] = $16; //@line 4891
  $537 = $ReallocAsyncCtx5 + 36 | 0; //@line 4892
  HEAP32[$537 >> 2] = $18; //@line 4893
  $538 = $ReallocAsyncCtx5 + 40 | 0; //@line 4894
  HEAP32[$538 >> 2] = $20; //@line 4895
  $539 = $ReallocAsyncCtx5 + 44 | 0; //@line 4896
  HEAP32[$539 >> 2] = $22; //@line 4897
  $540 = $ReallocAsyncCtx5 + 48 | 0; //@line 4898
  HEAP32[$540 >> 2] = $24; //@line 4899
  $541 = $ReallocAsyncCtx5 + 52 | 0; //@line 4900
  HEAP32[$541 >> 2] = $26; //@line 4901
  $542 = $ReallocAsyncCtx5 + 56 | 0; //@line 4902
  HEAP32[$542 >> 2] = $28; //@line 4903
  $543 = $ReallocAsyncCtx5 + 60 | 0; //@line 4904
  HEAP32[$543 >> 2] = $30; //@line 4905
  $544 = $ReallocAsyncCtx5 + 64 | 0; //@line 4906
  HEAP32[$544 >> 2] = $32; //@line 4907
  $545 = $ReallocAsyncCtx5 + 68 | 0; //@line 4908
  HEAP32[$545 >> 2] = $34; //@line 4909
  $546 = $ReallocAsyncCtx5 + 72 | 0; //@line 4910
  HEAP32[$546 >> 2] = $36; //@line 4911
  $547 = $ReallocAsyncCtx5 + 76 | 0; //@line 4912
  HEAP32[$547 >> 2] = $38; //@line 4913
  $548 = $ReallocAsyncCtx5 + 80 | 0; //@line 4914
  HEAP32[$548 >> 2] = $40; //@line 4915
  $549 = $ReallocAsyncCtx5 + 84 | 0; //@line 4916
  HEAP32[$549 >> 2] = $44; //@line 4917
  $550 = $ReallocAsyncCtx5 + 88 | 0; //@line 4918
  HEAP32[$550 >> 2] = $46; //@line 4919
  $551 = $ReallocAsyncCtx5 + 92 | 0; //@line 4920
  HEAP32[$551 >> 2] = $48; //@line 4921
  $552 = $ReallocAsyncCtx5 + 96 | 0; //@line 4922
  HEAP8[$552 >> 0] = $524; //@line 4923
  $553 = $ReallocAsyncCtx5 + 100 | 0; //@line 4924
  HEAP32[$553 >> 2] = $50; //@line 4925
  $554 = $ReallocAsyncCtx5 + 104 | 0; //@line 4926
  HEAP32[$554 >> 2] = $52; //@line 4927
  $555 = $ReallocAsyncCtx5 + 108 | 0; //@line 4928
  HEAP32[$555 >> 2] = $54; //@line 4929
  $556 = $ReallocAsyncCtx5 + 112 | 0; //@line 4930
  HEAP32[$556 >> 2] = $56; //@line 4931
  $557 = $ReallocAsyncCtx5 + 116 | 0; //@line 4932
  HEAP32[$557 >> 2] = $58; //@line 4933
  $558 = $ReallocAsyncCtx5 + 120 | 0; //@line 4934
  HEAP32[$558 >> 2] = $60; //@line 4935
  $559 = $ReallocAsyncCtx5 + 124 | 0; //@line 4936
  HEAP32[$559 >> 2] = $62; //@line 4937
  $560 = $ReallocAsyncCtx5 + 128 | 0; //@line 4938
  HEAP8[$560 >> 0] = $64; //@line 4939
  $561 = $ReallocAsyncCtx5 + 132 | 0; //@line 4940
  HEAP32[$561 >> 2] = $66; //@line 4941
  $562 = $ReallocAsyncCtx5 + 136 | 0; //@line 4942
  HEAP32[$562 >> 2] = $68; //@line 4943
  $563 = $ReallocAsyncCtx5 + 140 | 0; //@line 4944
  HEAP32[$563 >> 2] = $70; //@line 4945
  $564 = $ReallocAsyncCtx5 + 144 | 0; //@line 4946
  HEAP32[$564 >> 2] = $72; //@line 4947
  $565 = $ReallocAsyncCtx5 + 148 | 0; //@line 4948
  HEAP32[$565 >> 2] = $74; //@line 4949
  $566 = $ReallocAsyncCtx5 + 152 | 0; //@line 4950
  HEAP32[$566 >> 2] = $76; //@line 4951
  $567 = $ReallocAsyncCtx5 + 156 | 0; //@line 4952
  HEAP8[$567 >> 0] = $78; //@line 4953
  $568 = $ReallocAsyncCtx5 + 160 | 0; //@line 4954
  HEAP32[$568 >> 2] = $80; //@line 4955
  $569 = $ReallocAsyncCtx5 + 164 | 0; //@line 4956
  HEAP8[$569 >> 0] = $82; //@line 4957
  $570 = $ReallocAsyncCtx5 + 168 | 0; //@line 4958
  HEAP32[$570 >> 2] = $84; //@line 4959
  $571 = $ReallocAsyncCtx5 + 172 | 0; //@line 4960
  HEAP32[$571 >> 2] = $86; //@line 4961
  $572 = $ReallocAsyncCtx5 + 176 | 0; //@line 4962
  HEAP32[$572 >> 2] = $88; //@line 4963
  $573 = $ReallocAsyncCtx5 + 180 | 0; //@line 4964
  HEAP32[$573 >> 2] = $90; //@line 4965
  $574 = $ReallocAsyncCtx5 + 184 | 0; //@line 4966
  HEAP32[$574 >> 2] = $92; //@line 4967
  $575 = $ReallocAsyncCtx5 + 188 | 0; //@line 4968
  HEAP32[$575 >> 2] = $94; //@line 4969
  $576 = $ReallocAsyncCtx5 + 192 | 0; //@line 4970
  HEAP32[$576 >> 2] = $96; //@line 4971
  $577 = $ReallocAsyncCtx5 + 196 | 0; //@line 4972
  HEAP8[$577 >> 0] = $516; //@line 4973
  $578 = $ReallocAsyncCtx5 + 197 | 0; //@line 4974
  HEAP8[$578 >> 0] = $522; //@line 4975
  $579 = $ReallocAsyncCtx5 + 200 | 0; //@line 4976
  HEAP32[$579 >> 2] = $98; //@line 4977
  $580 = $ReallocAsyncCtx5 + 204 | 0; //@line 4978
  HEAP32[$580 >> 2] = $100; //@line 4979
  $581 = $ReallocAsyncCtx5 + 208 | 0; //@line 4980
  HEAP32[$581 >> 2] = $520; //@line 4981
  $582 = $ReallocAsyncCtx5 + 212 | 0; //@line 4982
  HEAP32[$582 >> 2] = $$0107$be; //@line 4983
  $583 = $ReallocAsyncCtx5 + 216 | 0; //@line 4984
  HEAP32[$583 >> 2] = $102; //@line 4985
  $584 = $ReallocAsyncCtx5 + 220 | 0; //@line 4986
  HEAP32[$584 >> 2] = $104; //@line 4987
  $585 = $ReallocAsyncCtx5 + 224 | 0; //@line 4988
  HEAP32[$585 >> 2] = $106; //@line 4989
  $586 = $ReallocAsyncCtx5 + 228 | 0; //@line 4990
  HEAP32[$586 >> 2] = $108; //@line 4991
  $587 = $ReallocAsyncCtx5 + 232 | 0; //@line 4992
  HEAP32[$587 >> 2] = $110; //@line 4993
  $588 = $ReallocAsyncCtx5 + 236 | 0; //@line 4994
  HEAP32[$588 >> 2] = $112; //@line 4995
  $589 = $ReallocAsyncCtx5 + 240 | 0; //@line 4996
  HEAP32[$589 >> 2] = $114; //@line 4997
  $590 = $ReallocAsyncCtx5 + 244 | 0; //@line 4998
  HEAP32[$590 >> 2] = $116; //@line 4999
  sp = STACKTOP; //@line 5000
  return;
 } else if ((label | 0) == 32) {
  $595 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 5007
  $608 = $$0$be + 5 << 24 >> 24; //@line 5020
  $615 = (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 5027
  $618 = HEAP32[(HEAP32[$116 >> 2] | 0) + 48 >> 2] | 0; //@line 5030
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 5031
  $619 = FUNCTION_TABLE_iiii[$618 & 31]($94, $595, $615) | 0; //@line 5032
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 5035
   $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 5036
   HEAP32[$620 >> 2] = $2; //@line 5037
   $621 = $ReallocAsyncCtx6 + 8 | 0; //@line 5038
   HEAP32[$621 >> 2] = $4; //@line 5039
   $622 = $ReallocAsyncCtx6 + 12 | 0; //@line 5040
   HEAP32[$622 >> 2] = $6; //@line 5041
   $623 = $ReallocAsyncCtx6 + 16 | 0; //@line 5042
   HEAP32[$623 >> 2] = $8; //@line 5043
   $624 = $ReallocAsyncCtx6 + 20 | 0; //@line 5044
   HEAP32[$624 >> 2] = $10; //@line 5045
   $625 = $ReallocAsyncCtx6 + 24 | 0; //@line 5046
   HEAP32[$625 >> 2] = $12; //@line 5047
   $626 = $ReallocAsyncCtx6 + 28 | 0; //@line 5048
   HEAP32[$626 >> 2] = $14; //@line 5049
   $627 = $ReallocAsyncCtx6 + 32 | 0; //@line 5050
   HEAP32[$627 >> 2] = $16; //@line 5051
   $628 = $ReallocAsyncCtx6 + 36 | 0; //@line 5052
   HEAP32[$628 >> 2] = $18; //@line 5053
   $629 = $ReallocAsyncCtx6 + 40 | 0; //@line 5054
   HEAP32[$629 >> 2] = $20; //@line 5055
   $630 = $ReallocAsyncCtx6 + 44 | 0; //@line 5056
   HEAP32[$630 >> 2] = $22; //@line 5057
   $631 = $ReallocAsyncCtx6 + 48 | 0; //@line 5058
   HEAP32[$631 >> 2] = $24; //@line 5059
   $632 = $ReallocAsyncCtx6 + 52 | 0; //@line 5060
   HEAP32[$632 >> 2] = $26; //@line 5061
   $633 = $ReallocAsyncCtx6 + 56 | 0; //@line 5062
   HEAP32[$633 >> 2] = $28; //@line 5063
   $634 = $ReallocAsyncCtx6 + 60 | 0; //@line 5064
   HEAP32[$634 >> 2] = $30; //@line 5065
   $635 = $ReallocAsyncCtx6 + 64 | 0; //@line 5066
   HEAP32[$635 >> 2] = $32; //@line 5067
   $636 = $ReallocAsyncCtx6 + 68 | 0; //@line 5068
   HEAP32[$636 >> 2] = $34; //@line 5069
   $637 = $ReallocAsyncCtx6 + 72 | 0; //@line 5070
   HEAP32[$637 >> 2] = $36; //@line 5071
   $638 = $ReallocAsyncCtx6 + 76 | 0; //@line 5072
   HEAP32[$638 >> 2] = $38; //@line 5073
   $639 = $ReallocAsyncCtx6 + 80 | 0; //@line 5074
   HEAP32[$639 >> 2] = $40; //@line 5075
   $640 = $ReallocAsyncCtx6 + 84 | 0; //@line 5076
   HEAP32[$640 >> 2] = $44; //@line 5077
   $641 = $ReallocAsyncCtx6 + 88 | 0; //@line 5078
   HEAP32[$641 >> 2] = $46; //@line 5079
   $642 = $ReallocAsyncCtx6 + 92 | 0; //@line 5080
   HEAP32[$642 >> 2] = $48; //@line 5081
   $643 = $ReallocAsyncCtx6 + 96 | 0; //@line 5082
   HEAP32[$643 >> 2] = $50; //@line 5083
   $644 = $ReallocAsyncCtx6 + 100 | 0; //@line 5084
   HEAP32[$644 >> 2] = $52; //@line 5085
   $645 = $ReallocAsyncCtx6 + 104 | 0; //@line 5086
   HEAP32[$645 >> 2] = $54; //@line 5087
   $646 = $ReallocAsyncCtx6 + 108 | 0; //@line 5088
   HEAP32[$646 >> 2] = $56; //@line 5089
   $647 = $ReallocAsyncCtx6 + 112 | 0; //@line 5090
   HEAP32[$647 >> 2] = $58; //@line 5091
   $648 = $ReallocAsyncCtx6 + 116 | 0; //@line 5092
   HEAP32[$648 >> 2] = $60; //@line 5093
   $649 = $ReallocAsyncCtx6 + 120 | 0; //@line 5094
   HEAP32[$649 >> 2] = $62; //@line 5095
   $650 = $ReallocAsyncCtx6 + 124 | 0; //@line 5096
   HEAP8[$650 >> 0] = $64; //@line 5097
   $651 = $ReallocAsyncCtx6 + 128 | 0; //@line 5098
   HEAP32[$651 >> 2] = $66; //@line 5099
   $652 = $ReallocAsyncCtx6 + 132 | 0; //@line 5100
   HEAP8[$652 >> 0] = $608; //@line 5101
   $653 = $ReallocAsyncCtx6 + 136 | 0; //@line 5102
   HEAP32[$653 >> 2] = $68; //@line 5103
   $654 = $ReallocAsyncCtx6 + 140 | 0; //@line 5104
   HEAP32[$654 >> 2] = $70; //@line 5105
   $655 = $ReallocAsyncCtx6 + 144 | 0; //@line 5106
   HEAP32[$655 >> 2] = $72; //@line 5107
   $656 = $ReallocAsyncCtx6 + 148 | 0; //@line 5108
   HEAP32[$656 >> 2] = $74; //@line 5109
   $657 = $ReallocAsyncCtx6 + 152 | 0; //@line 5110
   HEAP32[$657 >> 2] = $76; //@line 5111
   $658 = $ReallocAsyncCtx6 + 156 | 0; //@line 5112
   HEAP8[$658 >> 0] = $78; //@line 5113
   $659 = $ReallocAsyncCtx6 + 160 | 0; //@line 5114
   HEAP32[$659 >> 2] = $80; //@line 5115
   $660 = $ReallocAsyncCtx6 + 164 | 0; //@line 5116
   HEAP8[$660 >> 0] = $82; //@line 5117
   $661 = $ReallocAsyncCtx6 + 168 | 0; //@line 5118
   HEAP32[$661 >> 2] = $84; //@line 5119
   $662 = $ReallocAsyncCtx6 + 172 | 0; //@line 5120
   HEAP32[$662 >> 2] = $86; //@line 5121
   $663 = $ReallocAsyncCtx6 + 176 | 0; //@line 5122
   HEAP32[$663 >> 2] = $88; //@line 5123
   $664 = $ReallocAsyncCtx6 + 180 | 0; //@line 5124
   HEAP32[$664 >> 2] = $90; //@line 5125
   $665 = $ReallocAsyncCtx6 + 184 | 0; //@line 5126
   HEAP32[$665 >> 2] = $92; //@line 5127
   $666 = $ReallocAsyncCtx6 + 188 | 0; //@line 5128
   HEAP32[$666 >> 2] = $94; //@line 5129
   $667 = $ReallocAsyncCtx6 + 192 | 0; //@line 5130
   HEAP32[$667 >> 2] = $96; //@line 5131
   $668 = $ReallocAsyncCtx6 + 196 | 0; //@line 5132
   HEAP32[$668 >> 2] = $98; //@line 5133
   $669 = $ReallocAsyncCtx6 + 200 | 0; //@line 5134
   HEAP32[$669 >> 2] = $100; //@line 5135
   $670 = $ReallocAsyncCtx6 + 204 | 0; //@line 5136
   HEAP32[$670 >> 2] = $102; //@line 5137
   $671 = $ReallocAsyncCtx6 + 208 | 0; //@line 5138
   HEAP32[$671 >> 2] = $104; //@line 5139
   $672 = $ReallocAsyncCtx6 + 212 | 0; //@line 5140
   HEAP32[$672 >> 2] = $106; //@line 5141
   $673 = $ReallocAsyncCtx6 + 216 | 0; //@line 5142
   HEAP32[$673 >> 2] = $108; //@line 5143
   $674 = $ReallocAsyncCtx6 + 220 | 0; //@line 5144
   HEAP32[$674 >> 2] = $110; //@line 5145
   $675 = $ReallocAsyncCtx6 + 224 | 0; //@line 5146
   HEAP32[$675 >> 2] = $112; //@line 5147
   $676 = $ReallocAsyncCtx6 + 228 | 0; //@line 5148
   HEAP32[$676 >> 2] = $114; //@line 5149
   $677 = $ReallocAsyncCtx6 + 232 | 0; //@line 5150
   HEAP32[$677 >> 2] = $116; //@line 5151
   sp = STACKTOP; //@line 5152
   return;
  }
  HEAP8[___async_retval >> 0] = $619; //@line 5156
  ___async_unwind = 0; //@line 5157
  HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 5158
  $620 = $ReallocAsyncCtx6 + 4 | 0; //@line 5159
  HEAP32[$620 >> 2] = $2; //@line 5160
  $621 = $ReallocAsyncCtx6 + 8 | 0; //@line 5161
  HEAP32[$621 >> 2] = $4; //@line 5162
  $622 = $ReallocAsyncCtx6 + 12 | 0; //@line 5163
  HEAP32[$622 >> 2] = $6; //@line 5164
  $623 = $ReallocAsyncCtx6 + 16 | 0; //@line 5165
  HEAP32[$623 >> 2] = $8; //@line 5166
  $624 = $ReallocAsyncCtx6 + 20 | 0; //@line 5167
  HEAP32[$624 >> 2] = $10; //@line 5168
  $625 = $ReallocAsyncCtx6 + 24 | 0; //@line 5169
  HEAP32[$625 >> 2] = $12; //@line 5170
  $626 = $ReallocAsyncCtx6 + 28 | 0; //@line 5171
  HEAP32[$626 >> 2] = $14; //@line 5172
  $627 = $ReallocAsyncCtx6 + 32 | 0; //@line 5173
  HEAP32[$627 >> 2] = $16; //@line 5174
  $628 = $ReallocAsyncCtx6 + 36 | 0; //@line 5175
  HEAP32[$628 >> 2] = $18; //@line 5176
  $629 = $ReallocAsyncCtx6 + 40 | 0; //@line 5177
  HEAP32[$629 >> 2] = $20; //@line 5178
  $630 = $ReallocAsyncCtx6 + 44 | 0; //@line 5179
  HEAP32[$630 >> 2] = $22; //@line 5180
  $631 = $ReallocAsyncCtx6 + 48 | 0; //@line 5181
  HEAP32[$631 >> 2] = $24; //@line 5182
  $632 = $ReallocAsyncCtx6 + 52 | 0; //@line 5183
  HEAP32[$632 >> 2] = $26; //@line 5184
  $633 = $ReallocAsyncCtx6 + 56 | 0; //@line 5185
  HEAP32[$633 >> 2] = $28; //@line 5186
  $634 = $ReallocAsyncCtx6 + 60 | 0; //@line 5187
  HEAP32[$634 >> 2] = $30; //@line 5188
  $635 = $ReallocAsyncCtx6 + 64 | 0; //@line 5189
  HEAP32[$635 >> 2] = $32; //@line 5190
  $636 = $ReallocAsyncCtx6 + 68 | 0; //@line 5191
  HEAP32[$636 >> 2] = $34; //@line 5192
  $637 = $ReallocAsyncCtx6 + 72 | 0; //@line 5193
  HEAP32[$637 >> 2] = $36; //@line 5194
  $638 = $ReallocAsyncCtx6 + 76 | 0; //@line 5195
  HEAP32[$638 >> 2] = $38; //@line 5196
  $639 = $ReallocAsyncCtx6 + 80 | 0; //@line 5197
  HEAP32[$639 >> 2] = $40; //@line 5198
  $640 = $ReallocAsyncCtx6 + 84 | 0; //@line 5199
  HEAP32[$640 >> 2] = $44; //@line 5200
  $641 = $ReallocAsyncCtx6 + 88 | 0; //@line 5201
  HEAP32[$641 >> 2] = $46; //@line 5202
  $642 = $ReallocAsyncCtx6 + 92 | 0; //@line 5203
  HEAP32[$642 >> 2] = $48; //@line 5204
  $643 = $ReallocAsyncCtx6 + 96 | 0; //@line 5205
  HEAP32[$643 >> 2] = $50; //@line 5206
  $644 = $ReallocAsyncCtx6 + 100 | 0; //@line 5207
  HEAP32[$644 >> 2] = $52; //@line 5208
  $645 = $ReallocAsyncCtx6 + 104 | 0; //@line 5209
  HEAP32[$645 >> 2] = $54; //@line 5210
  $646 = $ReallocAsyncCtx6 + 108 | 0; //@line 5211
  HEAP32[$646 >> 2] = $56; //@line 5212
  $647 = $ReallocAsyncCtx6 + 112 | 0; //@line 5213
  HEAP32[$647 >> 2] = $58; //@line 5214
  $648 = $ReallocAsyncCtx6 + 116 | 0; //@line 5215
  HEAP32[$648 >> 2] = $60; //@line 5216
  $649 = $ReallocAsyncCtx6 + 120 | 0; //@line 5217
  HEAP32[$649 >> 2] = $62; //@line 5218
  $650 = $ReallocAsyncCtx6 + 124 | 0; //@line 5219
  HEAP8[$650 >> 0] = $64; //@line 5220
  $651 = $ReallocAsyncCtx6 + 128 | 0; //@line 5221
  HEAP32[$651 >> 2] = $66; //@line 5222
  $652 = $ReallocAsyncCtx6 + 132 | 0; //@line 5223
  HEAP8[$652 >> 0] = $608; //@line 5224
  $653 = $ReallocAsyncCtx6 + 136 | 0; //@line 5225
  HEAP32[$653 >> 2] = $68; //@line 5226
  $654 = $ReallocAsyncCtx6 + 140 | 0; //@line 5227
  HEAP32[$654 >> 2] = $70; //@line 5228
  $655 = $ReallocAsyncCtx6 + 144 | 0; //@line 5229
  HEAP32[$655 >> 2] = $72; //@line 5230
  $656 = $ReallocAsyncCtx6 + 148 | 0; //@line 5231
  HEAP32[$656 >> 2] = $74; //@line 5232
  $657 = $ReallocAsyncCtx6 + 152 | 0; //@line 5233
  HEAP32[$657 >> 2] = $76; //@line 5234
  $658 = $ReallocAsyncCtx6 + 156 | 0; //@line 5235
  HEAP8[$658 >> 0] = $78; //@line 5236
  $659 = $ReallocAsyncCtx6 + 160 | 0; //@line 5237
  HEAP32[$659 >> 2] = $80; //@line 5238
  $660 = $ReallocAsyncCtx6 + 164 | 0; //@line 5239
  HEAP8[$660 >> 0] = $82; //@line 5240
  $661 = $ReallocAsyncCtx6 + 168 | 0; //@line 5241
  HEAP32[$661 >> 2] = $84; //@line 5242
  $662 = $ReallocAsyncCtx6 + 172 | 0; //@line 5243
  HEAP32[$662 >> 2] = $86; //@line 5244
  $663 = $ReallocAsyncCtx6 + 176 | 0; //@line 5245
  HEAP32[$663 >> 2] = $88; //@line 5246
  $664 = $ReallocAsyncCtx6 + 180 | 0; //@line 5247
  HEAP32[$664 >> 2] = $90; //@line 5248
  $665 = $ReallocAsyncCtx6 + 184 | 0; //@line 5249
  HEAP32[$665 >> 2] = $92; //@line 5250
  $666 = $ReallocAsyncCtx6 + 188 | 0; //@line 5251
  HEAP32[$666 >> 2] = $94; //@line 5252
  $667 = $ReallocAsyncCtx6 + 192 | 0; //@line 5253
  HEAP32[$667 >> 2] = $96; //@line 5254
  $668 = $ReallocAsyncCtx6 + 196 | 0; //@line 5255
  HEAP32[$668 >> 2] = $98; //@line 5256
  $669 = $ReallocAsyncCtx6 + 200 | 0; //@line 5257
  HEAP32[$669 >> 2] = $100; //@line 5258
  $670 = $ReallocAsyncCtx6 + 204 | 0; //@line 5259
  HEAP32[$670 >> 2] = $102; //@line 5260
  $671 = $ReallocAsyncCtx6 + 208 | 0; //@line 5261
  HEAP32[$671 >> 2] = $104; //@line 5262
  $672 = $ReallocAsyncCtx6 + 212 | 0; //@line 5263
  HEAP32[$672 >> 2] = $106; //@line 5264
  $673 = $ReallocAsyncCtx6 + 216 | 0; //@line 5265
  HEAP32[$673 >> 2] = $108; //@line 5266
  $674 = $ReallocAsyncCtx6 + 220 | 0; //@line 5267
  HEAP32[$674 >> 2] = $110; //@line 5268
  $675 = $ReallocAsyncCtx6 + 224 | 0; //@line 5269
  HEAP32[$675 >> 2] = $112; //@line 5270
  $676 = $ReallocAsyncCtx6 + 228 | 0; //@line 5271
  HEAP32[$676 >> 2] = $114; //@line 5272
  $677 = $ReallocAsyncCtx6 + 232 | 0; //@line 5273
  HEAP32[$677 >> 2] = $116; //@line 5274
  sp = STACKTOP; //@line 5275
  return;
 } else if ((label | 0) == 35) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 5280
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_219($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0$i118 = 0, $$0107$be = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $483 = 0, $484 = 0, $493 = 0, $497 = 0, $50 = 0, $501 = 0, $506 = 0, $507 = 0, $511 = 0, $515 = 0, $517 = 0, $519 = 0, $52 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $590 = 0, $6 = 0, $60 = 0, $603 = 0, $610 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $670 = 0, $671 = 0, $672 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7288
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7290
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7292
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7294
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7296
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7298
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7300
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7302
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7304
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7306
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7308
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7310
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7312
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7314
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7316
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7318
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 7320
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 7322
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 7324
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 7326
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 7328
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 7330
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 7332
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 7334
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 7336
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 7338
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 7340
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 7342
 $56 = HEAP8[$0 + 112 >> 0] | 0; //@line 7344
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 7346
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 7348
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 7350
 $64 = HEAP8[$0 + 128 >> 0] | 0; //@line 7352
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 7354
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 7356
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 7358
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 7360
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 7362
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 7364
 $78 = HEAP8[$0 + 156 >> 0] | 0; //@line 7366
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 7368
 $82 = HEAP8[$0 + 164 >> 0] | 0; //@line 7370
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 7372
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 7374
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 7376
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 7378
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 7380
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 7382
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 7384
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 7386
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 7388
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 7390
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 7392
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 7394
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 7396
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 7398
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 7400
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 7402
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 7404
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 7406
 $483 = HEAP8[$92 >> 0] | 0; //@line 7410
 $484 = $483 & 255; //@line 7411
 if ((128 - (HEAPU8[$62 >> 0] | 0) - $484 | 0) > 1) {
  HEAP8[$72 + 4 + $484 >> 0] = 7; //@line 7420
  HEAP8[$92 >> 0] = $483 + 2 << 24 >> 24; //@line 7421
  HEAP8[($483 + 1 & 255) + ($72 + 4) >> 0] = $AsyncRetVal; //@line 7422
  HEAP8[$86 >> 0] = 1; //@line 7423
  $$0$i118 = 0; //@line 7424
 } else {
  $$0$i118 = -1010; //@line 7426
 }
 $$0$be = $56; //@line 7428
 $$0107$be = $$0$i118; //@line 7428
 L5 : while (1) {
  if (($$0$be & 255) >= ($64 & 255)) {
   label = 33; //@line 7432
   break;
  }
  $119 = $$0$be + 1 << 24 >> 24; //@line 7436
  switch (HEAP8[$68 + ($$0$be & 255) >> 0] | 0) {
  case 3:
   {
    label = 4; //@line 7441
    break L5;
    break;
   }
  case 5:
   {
    label = 9; //@line 7446
    break L5;
    break;
   }
  case 7:
   {
    label = 18; //@line 7451
    break L5;
    break;
   }
  case 9:
   {
    label = 27; //@line 7456
    break L5;
    break;
   }
  case 10:
   {
    label = 30; //@line 7461
    break L5;
    break;
   }
  case 2:
   {
    HEAP32[$106 >> 2] = 0; //@line 7466
    HEAP8[$66 >> 0] = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 7471
    HEAP8[$80 >> 0] = HEAP8[$68 + ($$0$be + 2 & 255) >> 0] | 0; //@line 7476
    $$0$be = $$0$be + 3 << 24 >> 24; //@line 7477
    continue L5;
    break;
   }
  case 4:
   {
    $204 = $$0$be + 2 << 24 >> 24; //@line 7482
    $207 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 7485
    HEAP8[$40 >> 0] = $207; //@line 7486
    HEAP16[$36 >> 1] = 1 << ($207 & 255); //@line 7490
    $214 = HEAP8[$92 >> 0] | 0; //@line 7494
    $215 = $214 & 255; //@line 7495
    if ((128 - (HEAPU8[$62 >> 0] | 0) | 0) <= ($215 | 0)) {
     $$0$be = $204; //@line 7498
     $$0107$be = -1010; //@line 7498
     continue L5;
    }
    HEAP8[$92 >> 0] = $214 + 1 << 24 >> 24; //@line 7503
    HEAP8[$72 + 4 + $215 >> 0] = 4; //@line 7504
    HEAP8[$86 >> 0] = 1; //@line 7505
    $$0$be = $204; //@line 7506
    $$0107$be = 0; //@line 7506
    continue L5;
    break;
   }
  case 6:
   {
    $311 = HEAP32[$110 >> 2] | 0; //@line 7511
    if ($311 | 0) {
     label = 13; //@line 7514
     break L5;
    }
    $377 = HEAP8[$92 >> 0] | 0; //@line 7520
    $378 = $377 & 255; //@line 7521
    if ((128 - (HEAPU8[$62 >> 0] | 0) - $378 | 0) <= 2) {
     $$0$be = $119; //@line 7525
     $$0107$be = -1010; //@line 7525
     continue L5;
    }
    HEAP8[$72 + 4 + $378 >> 0] = 6; //@line 7530
    HEAP8[($377 + 1 & 255) + ($72 + 4) >> 0] = -1; //@line 7534
    HEAP8[$92 >> 0] = $377 + 3 << 24 >> 24; //@line 7536
    HEAP8[($377 + 2 & 255) + ($72 + 4) >> 0] = $82; //@line 7539
    HEAP8[$86 >> 0] = 1; //@line 7540
    $$0$be = $119; //@line 7541
    $$0107$be = 0; //@line 7541
    continue L5;
    break;
   }
  case 8:
   {
    $493 = $$0$be + 2 << 24 >> 24; //@line 7546
    $497 = HEAP8[$68 + ($119 & 255) >> 0] & 15; //@line 7550
    $501 = ($497 + ($497 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 7555
    HEAP32[$14 >> 2] = $501; //@line 7556
    HEAP32[$4 >> 2] = $501 + 1e3; //@line 7558
    $506 = HEAP8[$92 >> 0] | 0; //@line 7562
    $507 = $506 & 255; //@line 7563
    if ((128 - (HEAPU8[$62 >> 0] | 0) | 0) <= ($507 | 0)) {
     $$0$be = $493; //@line 7566
     $$0107$be = -1010; //@line 7566
     continue L5;
    }
    HEAP8[$92 >> 0] = $506 + 1 << 24 >> 24; //@line 7571
    HEAP8[$72 + 4 + $507 >> 0] = 8; //@line 7572
    HEAP8[$112 >> 0] = 1; //@line 7573
    HEAP8[$86 >> 0] = 1; //@line 7574
    $$0$be = $493; //@line 7575
    $$0107$be = 0; //@line 7575
    continue L5;
    break;
   }
  default:
   {
    $$0$be = $119; //@line 7580
    $$0107$be = -1013; //@line 7580
    continue L5;
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$76 >> 0] = 0; //@line 7586
  HEAP8[$44 >> 0] = 0; //@line 7587
  HEAP8[$22 >> 0] = 0; //@line 7588
  HEAP8[$26 >> 0] = 0; //@line 7589
  $130 = $119 & 255; //@line 7590
  $131 = $130 + -1 | 0; //@line 7591
  HEAP32[$84 >> 2] = $68 + $131; //@line 7593
  HEAP8[$38 >> 0] = $32 - $131; //@line 7596
  HEAP8[$52 >> 0] = HEAP8[$46 >> 0] | 0; //@line 7598
  HEAP8[$6 >> 0] = HEAP8[$58 >> 0] | 0; //@line 7600
  HEAP8[$18 >> 0] = HEAP8[$12 >> 0] | 0; //@line 7602
  HEAP8[$98 >> 0] = HEAP8[$24 >> 0] | 0; //@line 7604
  HEAP8[$104 >> 0] = HEAP8[$114 >> 0] | 0; //@line 7606
  $142 = HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] | 0; //@line 7609
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 7610
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($94, $88, $76, $44, $22, $26) | 0; //@line 7611
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 7614
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 7615
   HEAP32[$144 >> 2] = $2; //@line 7616
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 7617
   HEAP32[$145 >> 2] = $4; //@line 7618
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 7619
   HEAP32[$146 >> 2] = $6; //@line 7620
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 7621
   HEAP32[$147 >> 2] = $8; //@line 7622
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 7623
   HEAP32[$148 >> 2] = $10; //@line 7624
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 7625
   HEAP32[$149 >> 2] = $12; //@line 7626
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 7627
   HEAP32[$150 >> 2] = $14; //@line 7628
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 7629
   HEAP32[$151 >> 2] = $16; //@line 7630
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 7631
   HEAP32[$152 >> 2] = $18; //@line 7632
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 7633
   HEAP32[$153 >> 2] = $20; //@line 7634
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 7635
   HEAP32[$154 >> 2] = $22; //@line 7636
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 7637
   HEAP32[$155 >> 2] = $24; //@line 7638
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 7639
   HEAP32[$156 >> 2] = $26; //@line 7640
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 7641
   HEAP32[$157 >> 2] = $28; //@line 7642
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 7643
   HEAP32[$158 >> 2] = $30; //@line 7644
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 7645
   HEAP32[$159 >> 2] = $32; //@line 7646
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 7647
   HEAP32[$160 >> 2] = $34; //@line 7648
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 7649
   HEAP32[$161 >> 2] = $36; //@line 7650
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 7651
   HEAP32[$162 >> 2] = $38; //@line 7652
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 7653
   HEAP32[$163 >> 2] = $40; //@line 7654
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 7655
   HEAP32[$164 >> 2] = $42; //@line 7656
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 7657
   HEAP32[$165 >> 2] = $44; //@line 7658
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 7659
   HEAP32[$166 >> 2] = $46; //@line 7660
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 7661
   HEAP32[$167 >> 2] = $130; //@line 7662
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 7663
   HEAP32[$168 >> 2] = $48; //@line 7664
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 7665
   HEAP32[$169 >> 2] = $50; //@line 7666
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 7667
   HEAP32[$170 >> 2] = $52; //@line 7668
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 7669
   HEAP32[$171 >> 2] = $54; //@line 7670
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 7671
   HEAP32[$172 >> 2] = $58; //@line 7672
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 7673
   HEAP32[$173 >> 2] = $60; //@line 7674
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 7675
   HEAP32[$174 >> 2] = $62; //@line 7676
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 7677
   HEAP8[$175 >> 0] = $64; //@line 7678
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 7679
   HEAP32[$176 >> 2] = $66; //@line 7680
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 7681
   HEAP32[$177 >> 2] = $68; //@line 7682
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 7683
   HEAP32[$178 >> 2] = $70; //@line 7684
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 7685
   HEAP32[$179 >> 2] = $72; //@line 7686
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 7687
   HEAP32[$180 >> 2] = $74; //@line 7688
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 7689
   HEAP32[$181 >> 2] = $76; //@line 7690
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 7691
   HEAP8[$182 >> 0] = $78; //@line 7692
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 7693
   HEAP32[$183 >> 2] = $80; //@line 7694
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 7695
   HEAP8[$184 >> 0] = $82; //@line 7696
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 7697
   HEAP32[$185 >> 2] = $84; //@line 7698
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 7699
   HEAP32[$186 >> 2] = $86; //@line 7700
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 7701
   HEAP32[$187 >> 2] = $88; //@line 7702
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 7703
   HEAP32[$188 >> 2] = $90; //@line 7704
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 7705
   HEAP32[$189 >> 2] = $92; //@line 7706
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 7707
   HEAP32[$190 >> 2] = $94; //@line 7708
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 7709
   HEAP32[$191 >> 2] = $96; //@line 7710
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 7711
   HEAP32[$192 >> 2] = $98; //@line 7712
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 7713
   HEAP32[$193 >> 2] = $100; //@line 7714
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 7715
   HEAP32[$194 >> 2] = $$0107$be; //@line 7716
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 7717
   HEAP32[$195 >> 2] = $102; //@line 7718
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 7719
   HEAP32[$196 >> 2] = $104; //@line 7720
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 7721
   HEAP32[$197 >> 2] = $106; //@line 7722
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 7723
   HEAP32[$198 >> 2] = $108; //@line 7724
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 7725
   HEAP32[$199 >> 2] = $110; //@line 7726
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 7727
   HEAP32[$200 >> 2] = $112; //@line 7728
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 7729
   HEAP32[$201 >> 2] = $114; //@line 7730
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 7731
   HEAP32[$202 >> 2] = $116; //@line 7732
   sp = STACKTOP; //@line 7733
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 7737
  ___async_unwind = 0; //@line 7738
  HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 7739
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 7740
  HEAP32[$144 >> 2] = $2; //@line 7741
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 7742
  HEAP32[$145 >> 2] = $4; //@line 7743
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 7744
  HEAP32[$146 >> 2] = $6; //@line 7745
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 7746
  HEAP32[$147 >> 2] = $8; //@line 7747
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 7748
  HEAP32[$148 >> 2] = $10; //@line 7749
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 7750
  HEAP32[$149 >> 2] = $12; //@line 7751
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 7752
  HEAP32[$150 >> 2] = $14; //@line 7753
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 7754
  HEAP32[$151 >> 2] = $16; //@line 7755
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 7756
  HEAP32[$152 >> 2] = $18; //@line 7757
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 7758
  HEAP32[$153 >> 2] = $20; //@line 7759
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 7760
  HEAP32[$154 >> 2] = $22; //@line 7761
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 7762
  HEAP32[$155 >> 2] = $24; //@line 7763
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 7764
  HEAP32[$156 >> 2] = $26; //@line 7765
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 7766
  HEAP32[$157 >> 2] = $28; //@line 7767
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 7768
  HEAP32[$158 >> 2] = $30; //@line 7769
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 7770
  HEAP32[$159 >> 2] = $32; //@line 7771
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 7772
  HEAP32[$160 >> 2] = $34; //@line 7773
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 7774
  HEAP32[$161 >> 2] = $36; //@line 7775
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 7776
  HEAP32[$162 >> 2] = $38; //@line 7777
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 7778
  HEAP32[$163 >> 2] = $40; //@line 7779
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 7780
  HEAP32[$164 >> 2] = $42; //@line 7781
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 7782
  HEAP32[$165 >> 2] = $44; //@line 7783
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 7784
  HEAP32[$166 >> 2] = $46; //@line 7785
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 7786
  HEAP32[$167 >> 2] = $130; //@line 7787
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 7788
  HEAP32[$168 >> 2] = $48; //@line 7789
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 7790
  HEAP32[$169 >> 2] = $50; //@line 7791
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 7792
  HEAP32[$170 >> 2] = $52; //@line 7793
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 7794
  HEAP32[$171 >> 2] = $54; //@line 7795
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 7796
  HEAP32[$172 >> 2] = $58; //@line 7797
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 7798
  HEAP32[$173 >> 2] = $60; //@line 7799
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 7800
  HEAP32[$174 >> 2] = $62; //@line 7801
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 7802
  HEAP8[$175 >> 0] = $64; //@line 7803
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 7804
  HEAP32[$176 >> 2] = $66; //@line 7805
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 7806
  HEAP32[$177 >> 2] = $68; //@line 7807
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 7808
  HEAP32[$178 >> 2] = $70; //@line 7809
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 7810
  HEAP32[$179 >> 2] = $72; //@line 7811
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 7812
  HEAP32[$180 >> 2] = $74; //@line 7813
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 7814
  HEAP32[$181 >> 2] = $76; //@line 7815
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 7816
  HEAP8[$182 >> 0] = $78; //@line 7817
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 7818
  HEAP32[$183 >> 2] = $80; //@line 7819
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 7820
  HEAP8[$184 >> 0] = $82; //@line 7821
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 7822
  HEAP32[$185 >> 2] = $84; //@line 7823
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 7824
  HEAP32[$186 >> 2] = $86; //@line 7825
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 7826
  HEAP32[$187 >> 2] = $88; //@line 7827
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 7828
  HEAP32[$188 >> 2] = $90; //@line 7829
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 7830
  HEAP32[$189 >> 2] = $92; //@line 7831
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 7832
  HEAP32[$190 >> 2] = $94; //@line 7833
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 7834
  HEAP32[$191 >> 2] = $96; //@line 7835
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 7836
  HEAP32[$192 >> 2] = $98; //@line 7837
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 7838
  HEAP32[$193 >> 2] = $100; //@line 7839
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 7840
  HEAP32[$194 >> 2] = $$0107$be; //@line 7841
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 7842
  HEAP32[$195 >> 2] = $102; //@line 7843
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 7844
  HEAP32[$196 >> 2] = $104; //@line 7845
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 7846
  HEAP32[$197 >> 2] = $106; //@line 7847
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 7848
  HEAP32[$198 >> 2] = $108; //@line 7849
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 7850
  HEAP32[$199 >> 2] = $110; //@line 7851
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 7852
  HEAP32[$200 >> 2] = $112; //@line 7853
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 7854
  HEAP32[$201 >> 2] = $114; //@line 7855
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 7856
  HEAP32[$202 >> 2] = $116; //@line 7857
  sp = STACKTOP; //@line 7858
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 7864
  HEAP8[$50 >> 0] = ($221 & 255) >>> 4 & 7; //@line 7869
  HEAP8[$60 >> 0] = $221 & 15; //@line 7871
  $240 = $$0$be + 5 << 24 >> 24; //@line 7885
  HEAP32[$16 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 7893
  $250 = HEAP32[(HEAP32[$8 >> 2] | 0) + 40 >> 2] | 0; //@line 7896
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 7897
  $251 = FUNCTION_TABLE_iii[$250 & 31]($94, $2) | 0; //@line 7898
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 7901
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 7902
   HEAP32[$252 >> 2] = $2; //@line 7903
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 7904
   HEAP32[$253 >> 2] = $4; //@line 7905
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 7906
   HEAP32[$254 >> 2] = $6; //@line 7907
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 7908
   HEAP32[$255 >> 2] = $8; //@line 7909
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 7910
   HEAP32[$256 >> 2] = $10; //@line 7911
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 7912
   HEAP32[$257 >> 2] = $12; //@line 7913
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 7914
   HEAP32[$258 >> 2] = $14; //@line 7915
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 7916
   HEAP32[$259 >> 2] = $16; //@line 7917
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 7918
   HEAP32[$260 >> 2] = $18; //@line 7919
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 7920
   HEAP32[$261 >> 2] = $20; //@line 7921
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 7922
   HEAP32[$262 >> 2] = $22; //@line 7923
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 7924
   HEAP32[$263 >> 2] = $24; //@line 7925
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 7926
   HEAP32[$264 >> 2] = $26; //@line 7927
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 7928
   HEAP32[$265 >> 2] = $28; //@line 7929
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 7930
   HEAP32[$266 >> 2] = $30; //@line 7931
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 7932
   HEAP32[$267 >> 2] = $32; //@line 7933
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 7934
   HEAP32[$268 >> 2] = $34; //@line 7935
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 7936
   HEAP32[$269 >> 2] = $36; //@line 7937
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 7938
   HEAP32[$270 >> 2] = $38; //@line 7939
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 7940
   HEAP32[$271 >> 2] = $40; //@line 7941
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 7942
   HEAP8[$272 >> 0] = $240; //@line 7943
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 7944
   HEAP32[$273 >> 2] = $42; //@line 7945
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 7946
   HEAP32[$274 >> 2] = $44; //@line 7947
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 7948
   HEAP32[$275 >> 2] = $46; //@line 7949
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 7950
   HEAP32[$276 >> 2] = $48; //@line 7951
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 7952
   HEAP32[$277 >> 2] = $50; //@line 7953
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 7954
   HEAP32[$278 >> 2] = $52; //@line 7955
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 7956
   HEAP32[$279 >> 2] = $54; //@line 7957
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 7958
   HEAP32[$280 >> 2] = $58; //@line 7959
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 7960
   HEAP32[$281 >> 2] = $60; //@line 7961
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 7962
   HEAP32[$282 >> 2] = $62; //@line 7963
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 7964
   HEAP8[$283 >> 0] = $64; //@line 7965
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 7966
   HEAP32[$284 >> 2] = $66; //@line 7967
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 7968
   HEAP32[$285 >> 2] = $68; //@line 7969
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 7970
   HEAP32[$286 >> 2] = $70; //@line 7971
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 7972
   HEAP32[$287 >> 2] = $72; //@line 7973
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 7974
   HEAP32[$288 >> 2] = $74; //@line 7975
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 7976
   HEAP32[$289 >> 2] = $76; //@line 7977
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 7978
   HEAP8[$290 >> 0] = $78; //@line 7979
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 7980
   HEAP32[$291 >> 2] = $80; //@line 7981
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 7982
   HEAP8[$292 >> 0] = $82; //@line 7983
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 7984
   HEAP32[$293 >> 2] = $84; //@line 7985
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 7986
   HEAP32[$294 >> 2] = $86; //@line 7987
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 7988
   HEAP32[$295 >> 2] = $88; //@line 7989
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 7990
   HEAP32[$296 >> 2] = $90; //@line 7991
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 7992
   HEAP32[$297 >> 2] = $92; //@line 7993
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 7994
   HEAP32[$298 >> 2] = $94; //@line 7995
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 7996
   HEAP32[$299 >> 2] = $96; //@line 7997
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 7998
   HEAP32[$300 >> 2] = $98; //@line 7999
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 8000
   HEAP32[$301 >> 2] = $100; //@line 8001
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 8002
   HEAP32[$302 >> 2] = $102; //@line 8003
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 8004
   HEAP32[$303 >> 2] = $104; //@line 8005
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 8006
   HEAP32[$304 >> 2] = $106; //@line 8007
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 8008
   HEAP32[$305 >> 2] = $108; //@line 8009
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 8010
   HEAP32[$306 >> 2] = $110; //@line 8011
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 8012
   HEAP32[$307 >> 2] = $112; //@line 8013
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 8014
   HEAP32[$308 >> 2] = $114; //@line 8015
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 8016
   HEAP32[$309 >> 2] = $116; //@line 8017
   sp = STACKTOP; //@line 8018
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 8022
  ___async_unwind = 0; //@line 8023
  HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 8024
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 8025
  HEAP32[$252 >> 2] = $2; //@line 8026
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 8027
  HEAP32[$253 >> 2] = $4; //@line 8028
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 8029
  HEAP32[$254 >> 2] = $6; //@line 8030
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 8031
  HEAP32[$255 >> 2] = $8; //@line 8032
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 8033
  HEAP32[$256 >> 2] = $10; //@line 8034
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 8035
  HEAP32[$257 >> 2] = $12; //@line 8036
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 8037
  HEAP32[$258 >> 2] = $14; //@line 8038
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 8039
  HEAP32[$259 >> 2] = $16; //@line 8040
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 8041
  HEAP32[$260 >> 2] = $18; //@line 8042
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 8043
  HEAP32[$261 >> 2] = $20; //@line 8044
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 8045
  HEAP32[$262 >> 2] = $22; //@line 8046
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 8047
  HEAP32[$263 >> 2] = $24; //@line 8048
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 8049
  HEAP32[$264 >> 2] = $26; //@line 8050
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 8051
  HEAP32[$265 >> 2] = $28; //@line 8052
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 8053
  HEAP32[$266 >> 2] = $30; //@line 8054
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 8055
  HEAP32[$267 >> 2] = $32; //@line 8056
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 8057
  HEAP32[$268 >> 2] = $34; //@line 8058
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 8059
  HEAP32[$269 >> 2] = $36; //@line 8060
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 8061
  HEAP32[$270 >> 2] = $38; //@line 8062
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 8063
  HEAP32[$271 >> 2] = $40; //@line 8064
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 8065
  HEAP8[$272 >> 0] = $240; //@line 8066
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 8067
  HEAP32[$273 >> 2] = $42; //@line 8068
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 8069
  HEAP32[$274 >> 2] = $44; //@line 8070
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 8071
  HEAP32[$275 >> 2] = $46; //@line 8072
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 8073
  HEAP32[$276 >> 2] = $48; //@line 8074
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 8075
  HEAP32[$277 >> 2] = $50; //@line 8076
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 8077
  HEAP32[$278 >> 2] = $52; //@line 8078
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 8079
  HEAP32[$279 >> 2] = $54; //@line 8080
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 8081
  HEAP32[$280 >> 2] = $58; //@line 8082
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 8083
  HEAP32[$281 >> 2] = $60; //@line 8084
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 8085
  HEAP32[$282 >> 2] = $62; //@line 8086
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 8087
  HEAP8[$283 >> 0] = $64; //@line 8088
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 8089
  HEAP32[$284 >> 2] = $66; //@line 8090
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 8091
  HEAP32[$285 >> 2] = $68; //@line 8092
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 8093
  HEAP32[$286 >> 2] = $70; //@line 8094
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 8095
  HEAP32[$287 >> 2] = $72; //@line 8096
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 8097
  HEAP32[$288 >> 2] = $74; //@line 8098
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 8099
  HEAP32[$289 >> 2] = $76; //@line 8100
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 8101
  HEAP8[$290 >> 0] = $78; //@line 8102
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 8103
  HEAP32[$291 >> 2] = $80; //@line 8104
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 8105
  HEAP8[$292 >> 0] = $82; //@line 8106
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 8107
  HEAP32[$293 >> 2] = $84; //@line 8108
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 8109
  HEAP32[$294 >> 2] = $86; //@line 8110
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 8111
  HEAP32[$295 >> 2] = $88; //@line 8112
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 8113
  HEAP32[$296 >> 2] = $90; //@line 8114
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 8115
  HEAP32[$297 >> 2] = $92; //@line 8116
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 8117
  HEAP32[$298 >> 2] = $94; //@line 8118
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 8119
  HEAP32[$299 >> 2] = $96; //@line 8120
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 8121
  HEAP32[$300 >> 2] = $98; //@line 8122
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 8123
  HEAP32[$301 >> 2] = $100; //@line 8124
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 8125
  HEAP32[$302 >> 2] = $102; //@line 8126
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 8127
  HEAP32[$303 >> 2] = $104; //@line 8128
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 8129
  HEAP32[$304 >> 2] = $106; //@line 8130
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 8131
  HEAP32[$305 >> 2] = $108; //@line 8132
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 8133
  HEAP32[$306 >> 2] = $110; //@line 8134
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 8135
  HEAP32[$307 >> 2] = $112; //@line 8136
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 8137
  HEAP32[$308 >> 2] = $114; //@line 8138
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 8139
  HEAP32[$309 >> 2] = $116; //@line 8140
  sp = STACKTOP; //@line 8141
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 8145
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 8146
  $314 = FUNCTION_TABLE_ii[$313 & 15]($96) | 0; //@line 8147
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 8150
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 8151
   HEAP32[$315 >> 2] = $2; //@line 8152
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 8153
   HEAP32[$316 >> 2] = $4; //@line 8154
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 8155
   HEAP32[$317 >> 2] = $6; //@line 8156
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 8157
   HEAP32[$318 >> 2] = $8; //@line 8158
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 8159
   HEAP32[$319 >> 2] = $10; //@line 8160
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 8161
   HEAP32[$320 >> 2] = $12; //@line 8162
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 8163
   HEAP32[$321 >> 2] = $14; //@line 8164
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 8165
   HEAP32[$322 >> 2] = $16; //@line 8166
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 8167
   HEAP32[$323 >> 2] = $18; //@line 8168
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 8169
   HEAP32[$324 >> 2] = $20; //@line 8170
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 8171
   HEAP32[$325 >> 2] = $22; //@line 8172
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 8173
   HEAP32[$326 >> 2] = $24; //@line 8174
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 8175
   HEAP32[$327 >> 2] = $26; //@line 8176
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 8177
   HEAP32[$328 >> 2] = $28; //@line 8178
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 8179
   HEAP32[$329 >> 2] = $30; //@line 8180
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 8181
   HEAP32[$330 >> 2] = $32; //@line 8182
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 8183
   HEAP32[$331 >> 2] = $34; //@line 8184
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 8185
   HEAP32[$332 >> 2] = $36; //@line 8186
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 8187
   HEAP32[$333 >> 2] = $38; //@line 8188
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 8189
   HEAP32[$334 >> 2] = $40; //@line 8190
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 8191
   HEAP32[$335 >> 2] = $42; //@line 8192
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 8193
   HEAP32[$336 >> 2] = $44; //@line 8194
   $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 8195
   HEAP32[$337 >> 2] = $46; //@line 8196
   $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 8197
   HEAP32[$338 >> 2] = $48; //@line 8198
   $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 8199
   HEAP32[$339 >> 2] = $50; //@line 8200
   $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 8201
   HEAP32[$340 >> 2] = $52; //@line 8202
   $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 8203
   HEAP8[$341 >> 0] = $119; //@line 8204
   $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 8205
   HEAP32[$342 >> 2] = $54; //@line 8206
   $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 8207
   HEAP32[$343 >> 2] = $58; //@line 8208
   $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 8209
   HEAP32[$344 >> 2] = $60; //@line 8210
   $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 8211
   HEAP32[$345 >> 2] = $62; //@line 8212
   $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 8213
   HEAP8[$346 >> 0] = $64; //@line 8214
   $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 8215
   HEAP32[$347 >> 2] = $66; //@line 8216
   $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 8217
   HEAP32[$348 >> 2] = $68; //@line 8218
   $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 8219
   HEAP32[$349 >> 2] = $70; //@line 8220
   $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 8221
   HEAP32[$350 >> 2] = $72; //@line 8222
   $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 8223
   HEAP32[$351 >> 2] = $74; //@line 8224
   $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 8225
   HEAP32[$352 >> 2] = $76; //@line 8226
   $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 8227
   HEAP8[$353 >> 0] = $78; //@line 8228
   $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 8229
   HEAP32[$354 >> 2] = $80; //@line 8230
   $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 8231
   HEAP8[$355 >> 0] = $82; //@line 8232
   $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 8233
   HEAP32[$356 >> 2] = $84; //@line 8234
   $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 8235
   HEAP32[$357 >> 2] = $86; //@line 8236
   $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 8237
   HEAP32[$358 >> 2] = $88; //@line 8238
   $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 8239
   HEAP32[$359 >> 2] = $90; //@line 8240
   $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 8241
   HEAP32[$360 >> 2] = $92; //@line 8242
   $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 8243
   HEAP32[$361 >> 2] = $94; //@line 8244
   $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 8245
   HEAP32[$362 >> 2] = $96; //@line 8246
   $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 8247
   HEAP32[$363 >> 2] = $98; //@line 8248
   $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 8249
   HEAP32[$364 >> 2] = $100; //@line 8250
   $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 8251
   HEAP32[$365 >> 2] = $102; //@line 8252
   $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 8253
   HEAP32[$366 >> 2] = $104; //@line 8254
   $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 8255
   HEAP32[$367 >> 2] = $106; //@line 8256
   $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 8257
   HEAP32[$368 >> 2] = $108; //@line 8258
   $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 8259
   HEAP32[$369 >> 2] = $110; //@line 8260
   $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 8261
   HEAP32[$370 >> 2] = $112; //@line 8262
   $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 8263
   HEAP32[$371 >> 2] = $114; //@line 8264
   $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 8265
   HEAP32[$372 >> 2] = $116; //@line 8266
   sp = STACKTOP; //@line 8267
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 8271
  ___async_unwind = 0; //@line 8272
  HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 8273
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 8274
  HEAP32[$315 >> 2] = $2; //@line 8275
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 8276
  HEAP32[$316 >> 2] = $4; //@line 8277
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 8278
  HEAP32[$317 >> 2] = $6; //@line 8279
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 8280
  HEAP32[$318 >> 2] = $8; //@line 8281
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 8282
  HEAP32[$319 >> 2] = $10; //@line 8283
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 8284
  HEAP32[$320 >> 2] = $12; //@line 8285
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 8286
  HEAP32[$321 >> 2] = $14; //@line 8287
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 8288
  HEAP32[$322 >> 2] = $16; //@line 8289
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 8290
  HEAP32[$323 >> 2] = $18; //@line 8291
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 8292
  HEAP32[$324 >> 2] = $20; //@line 8293
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 8294
  HEAP32[$325 >> 2] = $22; //@line 8295
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 8296
  HEAP32[$326 >> 2] = $24; //@line 8297
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 8298
  HEAP32[$327 >> 2] = $26; //@line 8299
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 8300
  HEAP32[$328 >> 2] = $28; //@line 8301
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 8302
  HEAP32[$329 >> 2] = $30; //@line 8303
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 8304
  HEAP32[$330 >> 2] = $32; //@line 8305
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 8306
  HEAP32[$331 >> 2] = $34; //@line 8307
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 8308
  HEAP32[$332 >> 2] = $36; //@line 8309
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 8310
  HEAP32[$333 >> 2] = $38; //@line 8311
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 8312
  HEAP32[$334 >> 2] = $40; //@line 8313
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 8314
  HEAP32[$335 >> 2] = $42; //@line 8315
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 8316
  HEAP32[$336 >> 2] = $44; //@line 8317
  $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 8318
  HEAP32[$337 >> 2] = $46; //@line 8319
  $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 8320
  HEAP32[$338 >> 2] = $48; //@line 8321
  $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 8322
  HEAP32[$339 >> 2] = $50; //@line 8323
  $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 8324
  HEAP32[$340 >> 2] = $52; //@line 8325
  $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 8326
  HEAP8[$341 >> 0] = $119; //@line 8327
  $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 8328
  HEAP32[$342 >> 2] = $54; //@line 8329
  $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 8330
  HEAP32[$343 >> 2] = $58; //@line 8331
  $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 8332
  HEAP32[$344 >> 2] = $60; //@line 8333
  $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 8334
  HEAP32[$345 >> 2] = $62; //@line 8335
  $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 8336
  HEAP8[$346 >> 0] = $64; //@line 8337
  $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 8338
  HEAP32[$347 >> 2] = $66; //@line 8339
  $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 8340
  HEAP32[$348 >> 2] = $68; //@line 8341
  $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 8342
  HEAP32[$349 >> 2] = $70; //@line 8343
  $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 8344
  HEAP32[$350 >> 2] = $72; //@line 8345
  $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 8346
  HEAP32[$351 >> 2] = $74; //@line 8347
  $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 8348
  HEAP32[$352 >> 2] = $76; //@line 8349
  $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 8350
  HEAP8[$353 >> 0] = $78; //@line 8351
  $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 8352
  HEAP32[$354 >> 2] = $80; //@line 8353
  $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 8354
  HEAP8[$355 >> 0] = $82; //@line 8355
  $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 8356
  HEAP32[$356 >> 2] = $84; //@line 8357
  $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 8358
  HEAP32[$357 >> 2] = $86; //@line 8359
  $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 8360
  HEAP32[$358 >> 2] = $88; //@line 8361
  $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 8362
  HEAP32[$359 >> 2] = $90; //@line 8363
  $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 8364
  HEAP32[$360 >> 2] = $92; //@line 8365
  $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 8366
  HEAP32[$361 >> 2] = $94; //@line 8367
  $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 8368
  HEAP32[$362 >> 2] = $96; //@line 8369
  $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 8370
  HEAP32[$363 >> 2] = $98; //@line 8371
  $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 8372
  HEAP32[$364 >> 2] = $100; //@line 8373
  $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 8374
  HEAP32[$365 >> 2] = $102; //@line 8375
  $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 8376
  HEAP32[$366 >> 2] = $104; //@line 8377
  $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 8378
  HEAP32[$367 >> 2] = $106; //@line 8379
  $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 8380
  HEAP32[$368 >> 2] = $108; //@line 8381
  $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 8382
  HEAP32[$369 >> 2] = $110; //@line 8383
  $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 8384
  HEAP32[$370 >> 2] = $112; //@line 8385
  $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 8386
  HEAP32[$371 >> 2] = $114; //@line 8387
  $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 8388
  HEAP32[$372 >> 2] = $116; //@line 8389
  sp = STACKTOP; //@line 8390
  return;
 } else if ((label | 0) == 18) {
  $392 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 8397
  HEAP32[$42 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 8418
  HEAP32[$34 >> 2] = 0; //@line 8419
  $413 = $$0$be + 6 << 24 >> 24; //@line 8420
  HEAP8[$54 >> 0] = HEAP8[$68 + ($$0$be + 5 & 255) >> 0] | 0; //@line 8424
  $419 = HEAP32[(HEAP32[$48 >> 2] | 0) + 8 >> 2] | 0; //@line 8427
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 8428
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($94, $392, $10) | 0; //@line 8429
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 8432
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 8433
   HEAP32[$421 >> 2] = $2; //@line 8434
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 8435
   HEAP32[$422 >> 2] = $4; //@line 8436
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 8437
   HEAP32[$423 >> 2] = $6; //@line 8438
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 8439
   HEAP32[$424 >> 2] = $8; //@line 8440
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 8441
   HEAP32[$425 >> 2] = $10; //@line 8442
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 8443
   HEAP32[$426 >> 2] = $12; //@line 8444
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 8445
   HEAP32[$427 >> 2] = $14; //@line 8446
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 8447
   HEAP32[$428 >> 2] = $16; //@line 8448
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 8449
   HEAP32[$429 >> 2] = $18; //@line 8450
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 8451
   HEAP32[$430 >> 2] = $20; //@line 8452
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 8453
   HEAP32[$431 >> 2] = $22; //@line 8454
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 8455
   HEAP32[$432 >> 2] = $24; //@line 8456
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 8457
   HEAP32[$433 >> 2] = $26; //@line 8458
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 8459
   HEAP32[$434 >> 2] = $28; //@line 8460
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 8461
   HEAP32[$435 >> 2] = $30; //@line 8462
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 8463
   HEAP32[$436 >> 2] = $32; //@line 8464
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 8465
   HEAP32[$437 >> 2] = $34; //@line 8466
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 8467
   HEAP32[$438 >> 2] = $36; //@line 8468
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 8469
   HEAP32[$439 >> 2] = $38; //@line 8470
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 8471
   HEAP32[$440 >> 2] = $40; //@line 8472
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 8473
   HEAP32[$441 >> 2] = $42; //@line 8474
   $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 8475
   HEAP32[$442 >> 2] = $44; //@line 8476
   $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 8477
   HEAP32[$443 >> 2] = $46; //@line 8478
   $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 8479
   HEAP32[$444 >> 2] = $48; //@line 8480
   $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 8481
   HEAP32[$445 >> 2] = $50; //@line 8482
   $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 8483
   HEAP32[$446 >> 2] = $52; //@line 8484
   $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 8485
   HEAP32[$447 >> 2] = $54; //@line 8486
   $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 8487
   HEAP8[$448 >> 0] = $413; //@line 8488
   $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 8489
   HEAP32[$449 >> 2] = $58; //@line 8490
   $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 8491
   HEAP32[$450 >> 2] = $60; //@line 8492
   $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 8493
   HEAP32[$451 >> 2] = $62; //@line 8494
   $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 8495
   HEAP8[$452 >> 0] = $64; //@line 8496
   $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 8497
   HEAP32[$453 >> 2] = $66; //@line 8498
   $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 8499
   HEAP32[$454 >> 2] = $68; //@line 8500
   $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 8501
   HEAP32[$455 >> 2] = $70; //@line 8502
   $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 8503
   HEAP32[$456 >> 2] = $72; //@line 8504
   $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 8505
   HEAP32[$457 >> 2] = $74; //@line 8506
   $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 8507
   HEAP32[$458 >> 2] = $76; //@line 8508
   $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 8509
   HEAP8[$459 >> 0] = $78; //@line 8510
   $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 8511
   HEAP32[$460 >> 2] = $80; //@line 8512
   $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 8513
   HEAP8[$461 >> 0] = $82; //@line 8514
   $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 8515
   HEAP32[$462 >> 2] = $84; //@line 8516
   $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 8517
   HEAP32[$463 >> 2] = $86; //@line 8518
   $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 8519
   HEAP32[$464 >> 2] = $88; //@line 8520
   $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 8521
   HEAP32[$465 >> 2] = $90; //@line 8522
   $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 8523
   HEAP32[$466 >> 2] = $92; //@line 8524
   $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 8525
   HEAP32[$467 >> 2] = $94; //@line 8526
   $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 8527
   HEAP32[$468 >> 2] = $96; //@line 8528
   $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 8529
   HEAP32[$469 >> 2] = $98; //@line 8530
   $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 8531
   HEAP32[$470 >> 2] = $100; //@line 8532
   $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 8533
   HEAP32[$471 >> 2] = $102; //@line 8534
   $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 8535
   HEAP32[$472 >> 2] = $104; //@line 8536
   $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 8537
   HEAP32[$473 >> 2] = $106; //@line 8538
   $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 8539
   HEAP32[$474 >> 2] = $108; //@line 8540
   $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 8541
   HEAP32[$475 >> 2] = $110; //@line 8542
   $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 8543
   HEAP32[$476 >> 2] = $112; //@line 8544
   $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 8545
   HEAP32[$477 >> 2] = $114; //@line 8546
   $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 8547
   HEAP32[$478 >> 2] = $116; //@line 8548
   sp = STACKTOP; //@line 8549
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 8553
  ___async_unwind = 0; //@line 8554
  HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 8555
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 8556
  HEAP32[$421 >> 2] = $2; //@line 8557
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 8558
  HEAP32[$422 >> 2] = $4; //@line 8559
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 8560
  HEAP32[$423 >> 2] = $6; //@line 8561
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 8562
  HEAP32[$424 >> 2] = $8; //@line 8563
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 8564
  HEAP32[$425 >> 2] = $10; //@line 8565
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 8566
  HEAP32[$426 >> 2] = $12; //@line 8567
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 8568
  HEAP32[$427 >> 2] = $14; //@line 8569
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 8570
  HEAP32[$428 >> 2] = $16; //@line 8571
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 8572
  HEAP32[$429 >> 2] = $18; //@line 8573
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 8574
  HEAP32[$430 >> 2] = $20; //@line 8575
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 8576
  HEAP32[$431 >> 2] = $22; //@line 8577
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 8578
  HEAP32[$432 >> 2] = $24; //@line 8579
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 8580
  HEAP32[$433 >> 2] = $26; //@line 8581
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 8582
  HEAP32[$434 >> 2] = $28; //@line 8583
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 8584
  HEAP32[$435 >> 2] = $30; //@line 8585
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 8586
  HEAP32[$436 >> 2] = $32; //@line 8587
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 8588
  HEAP32[$437 >> 2] = $34; //@line 8589
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 8590
  HEAP32[$438 >> 2] = $36; //@line 8591
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 8592
  HEAP32[$439 >> 2] = $38; //@line 8593
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 8594
  HEAP32[$440 >> 2] = $40; //@line 8595
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 8596
  HEAP32[$441 >> 2] = $42; //@line 8597
  $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 8598
  HEAP32[$442 >> 2] = $44; //@line 8599
  $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 8600
  HEAP32[$443 >> 2] = $46; //@line 8601
  $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 8602
  HEAP32[$444 >> 2] = $48; //@line 8603
  $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 8604
  HEAP32[$445 >> 2] = $50; //@line 8605
  $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 8606
  HEAP32[$446 >> 2] = $52; //@line 8607
  $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 8608
  HEAP32[$447 >> 2] = $54; //@line 8609
  $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 8610
  HEAP8[$448 >> 0] = $413; //@line 8611
  $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 8612
  HEAP32[$449 >> 2] = $58; //@line 8613
  $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 8614
  HEAP32[$450 >> 2] = $60; //@line 8615
  $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 8616
  HEAP32[$451 >> 2] = $62; //@line 8617
  $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 8618
  HEAP8[$452 >> 0] = $64; //@line 8619
  $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 8620
  HEAP32[$453 >> 2] = $66; //@line 8621
  $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 8622
  HEAP32[$454 >> 2] = $68; //@line 8623
  $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 8624
  HEAP32[$455 >> 2] = $70; //@line 8625
  $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 8626
  HEAP32[$456 >> 2] = $72; //@line 8627
  $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 8628
  HEAP32[$457 >> 2] = $74; //@line 8629
  $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 8630
  HEAP32[$458 >> 2] = $76; //@line 8631
  $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 8632
  HEAP8[$459 >> 0] = $78; //@line 8633
  $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 8634
  HEAP32[$460 >> 2] = $80; //@line 8635
  $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 8636
  HEAP8[$461 >> 0] = $82; //@line 8637
  $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 8638
  HEAP32[$462 >> 2] = $84; //@line 8639
  $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 8640
  HEAP32[$463 >> 2] = $86; //@line 8641
  $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 8642
  HEAP32[$464 >> 2] = $88; //@line 8643
  $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 8644
  HEAP32[$465 >> 2] = $90; //@line 8645
  $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 8646
  HEAP32[$466 >> 2] = $92; //@line 8647
  $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 8648
  HEAP32[$467 >> 2] = $94; //@line 8649
  $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 8650
  HEAP32[$468 >> 2] = $96; //@line 8651
  $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 8652
  HEAP32[$469 >> 2] = $98; //@line 8653
  $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 8654
  HEAP32[$470 >> 2] = $100; //@line 8655
  $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 8656
  HEAP32[$471 >> 2] = $102; //@line 8657
  $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 8658
  HEAP32[$472 >> 2] = $104; //@line 8659
  $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 8660
  HEAP32[$473 >> 2] = $106; //@line 8661
  $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 8662
  HEAP32[$474 >> 2] = $108; //@line 8663
  $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 8664
  HEAP32[$475 >> 2] = $110; //@line 8665
  $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 8666
  HEAP32[$476 >> 2] = $112; //@line 8667
  $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 8668
  HEAP32[$477 >> 2] = $114; //@line 8669
  $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 8670
  HEAP32[$478 >> 2] = $116; //@line 8671
  sp = STACKTOP; //@line 8672
  return;
 } else if ((label | 0) == 27) {
  $511 = $$0$be + 2 << 24 >> 24; //@line 8676
  $515 = HEAPU8[$68 + ($119 & 255) >> 0] | 0; //@line 8680
  $517 = $515 >>> 5 & 1; //@line 8683
  $519 = $515 >>> 4 & 1; //@line 8686
  $522 = HEAP32[(HEAP32[$28 >> 2] | 0) + 44 >> 2] | 0; //@line 8689
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 8690
  $523 = FUNCTION_TABLE_iiii[$522 & 31]($94, $519, $517) | 0; //@line 8691
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 8694
   $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 8695
   HEAP32[$524 >> 2] = $2; //@line 8696
   $525 = $ReallocAsyncCtx5 + 8 | 0; //@line 8697
   HEAP32[$525 >> 2] = $4; //@line 8698
   $526 = $ReallocAsyncCtx5 + 12 | 0; //@line 8699
   HEAP32[$526 >> 2] = $6; //@line 8700
   $527 = $ReallocAsyncCtx5 + 16 | 0; //@line 8701
   HEAP32[$527 >> 2] = $8; //@line 8702
   $528 = $ReallocAsyncCtx5 + 20 | 0; //@line 8703
   HEAP32[$528 >> 2] = $10; //@line 8704
   $529 = $ReallocAsyncCtx5 + 24 | 0; //@line 8705
   HEAP32[$529 >> 2] = $12; //@line 8706
   $530 = $ReallocAsyncCtx5 + 28 | 0; //@line 8707
   HEAP32[$530 >> 2] = $14; //@line 8708
   $531 = $ReallocAsyncCtx5 + 32 | 0; //@line 8709
   HEAP32[$531 >> 2] = $16; //@line 8710
   $532 = $ReallocAsyncCtx5 + 36 | 0; //@line 8711
   HEAP32[$532 >> 2] = $18; //@line 8712
   $533 = $ReallocAsyncCtx5 + 40 | 0; //@line 8713
   HEAP32[$533 >> 2] = $20; //@line 8714
   $534 = $ReallocAsyncCtx5 + 44 | 0; //@line 8715
   HEAP32[$534 >> 2] = $22; //@line 8716
   $535 = $ReallocAsyncCtx5 + 48 | 0; //@line 8717
   HEAP32[$535 >> 2] = $24; //@line 8718
   $536 = $ReallocAsyncCtx5 + 52 | 0; //@line 8719
   HEAP32[$536 >> 2] = $26; //@line 8720
   $537 = $ReallocAsyncCtx5 + 56 | 0; //@line 8721
   HEAP32[$537 >> 2] = $28; //@line 8722
   $538 = $ReallocAsyncCtx5 + 60 | 0; //@line 8723
   HEAP32[$538 >> 2] = $30; //@line 8724
   $539 = $ReallocAsyncCtx5 + 64 | 0; //@line 8725
   HEAP32[$539 >> 2] = $32; //@line 8726
   $540 = $ReallocAsyncCtx5 + 68 | 0; //@line 8727
   HEAP32[$540 >> 2] = $34; //@line 8728
   $541 = $ReallocAsyncCtx5 + 72 | 0; //@line 8729
   HEAP32[$541 >> 2] = $36; //@line 8730
   $542 = $ReallocAsyncCtx5 + 76 | 0; //@line 8731
   HEAP32[$542 >> 2] = $38; //@line 8732
   $543 = $ReallocAsyncCtx5 + 80 | 0; //@line 8733
   HEAP32[$543 >> 2] = $40; //@line 8734
   $544 = $ReallocAsyncCtx5 + 84 | 0; //@line 8735
   HEAP32[$544 >> 2] = $42; //@line 8736
   $545 = $ReallocAsyncCtx5 + 88 | 0; //@line 8737
   HEAP32[$545 >> 2] = $44; //@line 8738
   $546 = $ReallocAsyncCtx5 + 92 | 0; //@line 8739
   HEAP32[$546 >> 2] = $46; //@line 8740
   $547 = $ReallocAsyncCtx5 + 96 | 0; //@line 8741
   HEAP8[$547 >> 0] = $519; //@line 8742
   $548 = $ReallocAsyncCtx5 + 100 | 0; //@line 8743
   HEAP32[$548 >> 2] = $48; //@line 8744
   $549 = $ReallocAsyncCtx5 + 104 | 0; //@line 8745
   HEAP32[$549 >> 2] = $50; //@line 8746
   $550 = $ReallocAsyncCtx5 + 108 | 0; //@line 8747
   HEAP32[$550 >> 2] = $52; //@line 8748
   $551 = $ReallocAsyncCtx5 + 112 | 0; //@line 8749
   HEAP32[$551 >> 2] = $54; //@line 8750
   $552 = $ReallocAsyncCtx5 + 116 | 0; //@line 8751
   HEAP32[$552 >> 2] = $58; //@line 8752
   $553 = $ReallocAsyncCtx5 + 120 | 0; //@line 8753
   HEAP32[$553 >> 2] = $60; //@line 8754
   $554 = $ReallocAsyncCtx5 + 124 | 0; //@line 8755
   HEAP32[$554 >> 2] = $62; //@line 8756
   $555 = $ReallocAsyncCtx5 + 128 | 0; //@line 8757
   HEAP8[$555 >> 0] = $64; //@line 8758
   $556 = $ReallocAsyncCtx5 + 132 | 0; //@line 8759
   HEAP32[$556 >> 2] = $66; //@line 8760
   $557 = $ReallocAsyncCtx5 + 136 | 0; //@line 8761
   HEAP32[$557 >> 2] = $68; //@line 8762
   $558 = $ReallocAsyncCtx5 + 140 | 0; //@line 8763
   HEAP32[$558 >> 2] = $70; //@line 8764
   $559 = $ReallocAsyncCtx5 + 144 | 0; //@line 8765
   HEAP32[$559 >> 2] = $72; //@line 8766
   $560 = $ReallocAsyncCtx5 + 148 | 0; //@line 8767
   HEAP32[$560 >> 2] = $74; //@line 8768
   $561 = $ReallocAsyncCtx5 + 152 | 0; //@line 8769
   HEAP32[$561 >> 2] = $76; //@line 8770
   $562 = $ReallocAsyncCtx5 + 156 | 0; //@line 8771
   HEAP8[$562 >> 0] = $78; //@line 8772
   $563 = $ReallocAsyncCtx5 + 160 | 0; //@line 8773
   HEAP32[$563 >> 2] = $80; //@line 8774
   $564 = $ReallocAsyncCtx5 + 164 | 0; //@line 8775
   HEAP8[$564 >> 0] = $82; //@line 8776
   $565 = $ReallocAsyncCtx5 + 168 | 0; //@line 8777
   HEAP32[$565 >> 2] = $84; //@line 8778
   $566 = $ReallocAsyncCtx5 + 172 | 0; //@line 8779
   HEAP32[$566 >> 2] = $86; //@line 8780
   $567 = $ReallocAsyncCtx5 + 176 | 0; //@line 8781
   HEAP32[$567 >> 2] = $88; //@line 8782
   $568 = $ReallocAsyncCtx5 + 180 | 0; //@line 8783
   HEAP32[$568 >> 2] = $90; //@line 8784
   $569 = $ReallocAsyncCtx5 + 184 | 0; //@line 8785
   HEAP32[$569 >> 2] = $92; //@line 8786
   $570 = $ReallocAsyncCtx5 + 188 | 0; //@line 8787
   HEAP32[$570 >> 2] = $94; //@line 8788
   $571 = $ReallocAsyncCtx5 + 192 | 0; //@line 8789
   HEAP32[$571 >> 2] = $96; //@line 8790
   $572 = $ReallocAsyncCtx5 + 196 | 0; //@line 8791
   HEAP8[$572 >> 0] = $511; //@line 8792
   $573 = $ReallocAsyncCtx5 + 197 | 0; //@line 8793
   HEAP8[$573 >> 0] = $517; //@line 8794
   $574 = $ReallocAsyncCtx5 + 200 | 0; //@line 8795
   HEAP32[$574 >> 2] = $98; //@line 8796
   $575 = $ReallocAsyncCtx5 + 204 | 0; //@line 8797
   HEAP32[$575 >> 2] = $100; //@line 8798
   $576 = $ReallocAsyncCtx5 + 208 | 0; //@line 8799
   HEAP32[$576 >> 2] = $515; //@line 8800
   $577 = $ReallocAsyncCtx5 + 212 | 0; //@line 8801
   HEAP32[$577 >> 2] = $$0107$be; //@line 8802
   $578 = $ReallocAsyncCtx5 + 216 | 0; //@line 8803
   HEAP32[$578 >> 2] = $102; //@line 8804
   $579 = $ReallocAsyncCtx5 + 220 | 0; //@line 8805
   HEAP32[$579 >> 2] = $104; //@line 8806
   $580 = $ReallocAsyncCtx5 + 224 | 0; //@line 8807
   HEAP32[$580 >> 2] = $106; //@line 8808
   $581 = $ReallocAsyncCtx5 + 228 | 0; //@line 8809
   HEAP32[$581 >> 2] = $108; //@line 8810
   $582 = $ReallocAsyncCtx5 + 232 | 0; //@line 8811
   HEAP32[$582 >> 2] = $110; //@line 8812
   $583 = $ReallocAsyncCtx5 + 236 | 0; //@line 8813
   HEAP32[$583 >> 2] = $112; //@line 8814
   $584 = $ReallocAsyncCtx5 + 240 | 0; //@line 8815
   HEAP32[$584 >> 2] = $114; //@line 8816
   $585 = $ReallocAsyncCtx5 + 244 | 0; //@line 8817
   HEAP32[$585 >> 2] = $116; //@line 8818
   sp = STACKTOP; //@line 8819
   return;
  }
  HEAP8[___async_retval >> 0] = $523 & 1; //@line 8824
  ___async_unwind = 0; //@line 8825
  HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 8826
  $524 = $ReallocAsyncCtx5 + 4 | 0; //@line 8827
  HEAP32[$524 >> 2] = $2; //@line 8828
  $525 = $ReallocAsyncCtx5 + 8 | 0; //@line 8829
  HEAP32[$525 >> 2] = $4; //@line 8830
  $526 = $ReallocAsyncCtx5 + 12 | 0; //@line 8831
  HEAP32[$526 >> 2] = $6; //@line 8832
  $527 = $ReallocAsyncCtx5 + 16 | 0; //@line 8833
  HEAP32[$527 >> 2] = $8; //@line 8834
  $528 = $ReallocAsyncCtx5 + 20 | 0; //@line 8835
  HEAP32[$528 >> 2] = $10; //@line 8836
  $529 = $ReallocAsyncCtx5 + 24 | 0; //@line 8837
  HEAP32[$529 >> 2] = $12; //@line 8838
  $530 = $ReallocAsyncCtx5 + 28 | 0; //@line 8839
  HEAP32[$530 >> 2] = $14; //@line 8840
  $531 = $ReallocAsyncCtx5 + 32 | 0; //@line 8841
  HEAP32[$531 >> 2] = $16; //@line 8842
  $532 = $ReallocAsyncCtx5 + 36 | 0; //@line 8843
  HEAP32[$532 >> 2] = $18; //@line 8844
  $533 = $ReallocAsyncCtx5 + 40 | 0; //@line 8845
  HEAP32[$533 >> 2] = $20; //@line 8846
  $534 = $ReallocAsyncCtx5 + 44 | 0; //@line 8847
  HEAP32[$534 >> 2] = $22; //@line 8848
  $535 = $ReallocAsyncCtx5 + 48 | 0; //@line 8849
  HEAP32[$535 >> 2] = $24; //@line 8850
  $536 = $ReallocAsyncCtx5 + 52 | 0; //@line 8851
  HEAP32[$536 >> 2] = $26; //@line 8852
  $537 = $ReallocAsyncCtx5 + 56 | 0; //@line 8853
  HEAP32[$537 >> 2] = $28; //@line 8854
  $538 = $ReallocAsyncCtx5 + 60 | 0; //@line 8855
  HEAP32[$538 >> 2] = $30; //@line 8856
  $539 = $ReallocAsyncCtx5 + 64 | 0; //@line 8857
  HEAP32[$539 >> 2] = $32; //@line 8858
  $540 = $ReallocAsyncCtx5 + 68 | 0; //@line 8859
  HEAP32[$540 >> 2] = $34; //@line 8860
  $541 = $ReallocAsyncCtx5 + 72 | 0; //@line 8861
  HEAP32[$541 >> 2] = $36; //@line 8862
  $542 = $ReallocAsyncCtx5 + 76 | 0; //@line 8863
  HEAP32[$542 >> 2] = $38; //@line 8864
  $543 = $ReallocAsyncCtx5 + 80 | 0; //@line 8865
  HEAP32[$543 >> 2] = $40; //@line 8866
  $544 = $ReallocAsyncCtx5 + 84 | 0; //@line 8867
  HEAP32[$544 >> 2] = $42; //@line 8868
  $545 = $ReallocAsyncCtx5 + 88 | 0; //@line 8869
  HEAP32[$545 >> 2] = $44; //@line 8870
  $546 = $ReallocAsyncCtx5 + 92 | 0; //@line 8871
  HEAP32[$546 >> 2] = $46; //@line 8872
  $547 = $ReallocAsyncCtx5 + 96 | 0; //@line 8873
  HEAP8[$547 >> 0] = $519; //@line 8874
  $548 = $ReallocAsyncCtx5 + 100 | 0; //@line 8875
  HEAP32[$548 >> 2] = $48; //@line 8876
  $549 = $ReallocAsyncCtx5 + 104 | 0; //@line 8877
  HEAP32[$549 >> 2] = $50; //@line 8878
  $550 = $ReallocAsyncCtx5 + 108 | 0; //@line 8879
  HEAP32[$550 >> 2] = $52; //@line 8880
  $551 = $ReallocAsyncCtx5 + 112 | 0; //@line 8881
  HEAP32[$551 >> 2] = $54; //@line 8882
  $552 = $ReallocAsyncCtx5 + 116 | 0; //@line 8883
  HEAP32[$552 >> 2] = $58; //@line 8884
  $553 = $ReallocAsyncCtx5 + 120 | 0; //@line 8885
  HEAP32[$553 >> 2] = $60; //@line 8886
  $554 = $ReallocAsyncCtx5 + 124 | 0; //@line 8887
  HEAP32[$554 >> 2] = $62; //@line 8888
  $555 = $ReallocAsyncCtx5 + 128 | 0; //@line 8889
  HEAP8[$555 >> 0] = $64; //@line 8890
  $556 = $ReallocAsyncCtx5 + 132 | 0; //@line 8891
  HEAP32[$556 >> 2] = $66; //@line 8892
  $557 = $ReallocAsyncCtx5 + 136 | 0; //@line 8893
  HEAP32[$557 >> 2] = $68; //@line 8894
  $558 = $ReallocAsyncCtx5 + 140 | 0; //@line 8895
  HEAP32[$558 >> 2] = $70; //@line 8896
  $559 = $ReallocAsyncCtx5 + 144 | 0; //@line 8897
  HEAP32[$559 >> 2] = $72; //@line 8898
  $560 = $ReallocAsyncCtx5 + 148 | 0; //@line 8899
  HEAP32[$560 >> 2] = $74; //@line 8900
  $561 = $ReallocAsyncCtx5 + 152 | 0; //@line 8901
  HEAP32[$561 >> 2] = $76; //@line 8902
  $562 = $ReallocAsyncCtx5 + 156 | 0; //@line 8903
  HEAP8[$562 >> 0] = $78; //@line 8904
  $563 = $ReallocAsyncCtx5 + 160 | 0; //@line 8905
  HEAP32[$563 >> 2] = $80; //@line 8906
  $564 = $ReallocAsyncCtx5 + 164 | 0; //@line 8907
  HEAP8[$564 >> 0] = $82; //@line 8908
  $565 = $ReallocAsyncCtx5 + 168 | 0; //@line 8909
  HEAP32[$565 >> 2] = $84; //@line 8910
  $566 = $ReallocAsyncCtx5 + 172 | 0; //@line 8911
  HEAP32[$566 >> 2] = $86; //@line 8912
  $567 = $ReallocAsyncCtx5 + 176 | 0; //@line 8913
  HEAP32[$567 >> 2] = $88; //@line 8914
  $568 = $ReallocAsyncCtx5 + 180 | 0; //@line 8915
  HEAP32[$568 >> 2] = $90; //@line 8916
  $569 = $ReallocAsyncCtx5 + 184 | 0; //@line 8917
  HEAP32[$569 >> 2] = $92; //@line 8918
  $570 = $ReallocAsyncCtx5 + 188 | 0; //@line 8919
  HEAP32[$570 >> 2] = $94; //@line 8920
  $571 = $ReallocAsyncCtx5 + 192 | 0; //@line 8921
  HEAP32[$571 >> 2] = $96; //@line 8922
  $572 = $ReallocAsyncCtx5 + 196 | 0; //@line 8923
  HEAP8[$572 >> 0] = $511; //@line 8924
  $573 = $ReallocAsyncCtx5 + 197 | 0; //@line 8925
  HEAP8[$573 >> 0] = $517; //@line 8926
  $574 = $ReallocAsyncCtx5 + 200 | 0; //@line 8927
  HEAP32[$574 >> 2] = $98; //@line 8928
  $575 = $ReallocAsyncCtx5 + 204 | 0; //@line 8929
  HEAP32[$575 >> 2] = $100; //@line 8930
  $576 = $ReallocAsyncCtx5 + 208 | 0; //@line 8931
  HEAP32[$576 >> 2] = $515; //@line 8932
  $577 = $ReallocAsyncCtx5 + 212 | 0; //@line 8933
  HEAP32[$577 >> 2] = $$0107$be; //@line 8934
  $578 = $ReallocAsyncCtx5 + 216 | 0; //@line 8935
  HEAP32[$578 >> 2] = $102; //@line 8936
  $579 = $ReallocAsyncCtx5 + 220 | 0; //@line 8937
  HEAP32[$579 >> 2] = $104; //@line 8938
  $580 = $ReallocAsyncCtx5 + 224 | 0; //@line 8939
  HEAP32[$580 >> 2] = $106; //@line 8940
  $581 = $ReallocAsyncCtx5 + 228 | 0; //@line 8941
  HEAP32[$581 >> 2] = $108; //@line 8942
  $582 = $ReallocAsyncCtx5 + 232 | 0; //@line 8943
  HEAP32[$582 >> 2] = $110; //@line 8944
  $583 = $ReallocAsyncCtx5 + 236 | 0; //@line 8945
  HEAP32[$583 >> 2] = $112; //@line 8946
  $584 = $ReallocAsyncCtx5 + 240 | 0; //@line 8947
  HEAP32[$584 >> 2] = $114; //@line 8948
  $585 = $ReallocAsyncCtx5 + 244 | 0; //@line 8949
  HEAP32[$585 >> 2] = $116; //@line 8950
  sp = STACKTOP; //@line 8951
  return;
 } else if ((label | 0) == 30) {
  $590 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 8958
  $603 = $$0$be + 5 << 24 >> 24; //@line 8971
  $610 = (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 8978
  $613 = HEAP32[(HEAP32[$116 >> 2] | 0) + 48 >> 2] | 0; //@line 8981
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 8982
  $614 = FUNCTION_TABLE_iiii[$613 & 31]($94, $590, $610) | 0; //@line 8983
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 8986
   $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 8987
   HEAP32[$615 >> 2] = $2; //@line 8988
   $616 = $ReallocAsyncCtx6 + 8 | 0; //@line 8989
   HEAP32[$616 >> 2] = $4; //@line 8990
   $617 = $ReallocAsyncCtx6 + 12 | 0; //@line 8991
   HEAP32[$617 >> 2] = $6; //@line 8992
   $618 = $ReallocAsyncCtx6 + 16 | 0; //@line 8993
   HEAP32[$618 >> 2] = $8; //@line 8994
   $619 = $ReallocAsyncCtx6 + 20 | 0; //@line 8995
   HEAP32[$619 >> 2] = $10; //@line 8996
   $620 = $ReallocAsyncCtx6 + 24 | 0; //@line 8997
   HEAP32[$620 >> 2] = $12; //@line 8998
   $621 = $ReallocAsyncCtx6 + 28 | 0; //@line 8999
   HEAP32[$621 >> 2] = $14; //@line 9000
   $622 = $ReallocAsyncCtx6 + 32 | 0; //@line 9001
   HEAP32[$622 >> 2] = $16; //@line 9002
   $623 = $ReallocAsyncCtx6 + 36 | 0; //@line 9003
   HEAP32[$623 >> 2] = $18; //@line 9004
   $624 = $ReallocAsyncCtx6 + 40 | 0; //@line 9005
   HEAP32[$624 >> 2] = $20; //@line 9006
   $625 = $ReallocAsyncCtx6 + 44 | 0; //@line 9007
   HEAP32[$625 >> 2] = $22; //@line 9008
   $626 = $ReallocAsyncCtx6 + 48 | 0; //@line 9009
   HEAP32[$626 >> 2] = $24; //@line 9010
   $627 = $ReallocAsyncCtx6 + 52 | 0; //@line 9011
   HEAP32[$627 >> 2] = $26; //@line 9012
   $628 = $ReallocAsyncCtx6 + 56 | 0; //@line 9013
   HEAP32[$628 >> 2] = $28; //@line 9014
   $629 = $ReallocAsyncCtx6 + 60 | 0; //@line 9015
   HEAP32[$629 >> 2] = $30; //@line 9016
   $630 = $ReallocAsyncCtx6 + 64 | 0; //@line 9017
   HEAP32[$630 >> 2] = $32; //@line 9018
   $631 = $ReallocAsyncCtx6 + 68 | 0; //@line 9019
   HEAP32[$631 >> 2] = $34; //@line 9020
   $632 = $ReallocAsyncCtx6 + 72 | 0; //@line 9021
   HEAP32[$632 >> 2] = $36; //@line 9022
   $633 = $ReallocAsyncCtx6 + 76 | 0; //@line 9023
   HEAP32[$633 >> 2] = $38; //@line 9024
   $634 = $ReallocAsyncCtx6 + 80 | 0; //@line 9025
   HEAP32[$634 >> 2] = $40; //@line 9026
   $635 = $ReallocAsyncCtx6 + 84 | 0; //@line 9027
   HEAP32[$635 >> 2] = $42; //@line 9028
   $636 = $ReallocAsyncCtx6 + 88 | 0; //@line 9029
   HEAP32[$636 >> 2] = $44; //@line 9030
   $637 = $ReallocAsyncCtx6 + 92 | 0; //@line 9031
   HEAP32[$637 >> 2] = $46; //@line 9032
   $638 = $ReallocAsyncCtx6 + 96 | 0; //@line 9033
   HEAP32[$638 >> 2] = $48; //@line 9034
   $639 = $ReallocAsyncCtx6 + 100 | 0; //@line 9035
   HEAP32[$639 >> 2] = $50; //@line 9036
   $640 = $ReallocAsyncCtx6 + 104 | 0; //@line 9037
   HEAP32[$640 >> 2] = $52; //@line 9038
   $641 = $ReallocAsyncCtx6 + 108 | 0; //@line 9039
   HEAP32[$641 >> 2] = $54; //@line 9040
   $642 = $ReallocAsyncCtx6 + 112 | 0; //@line 9041
   HEAP32[$642 >> 2] = $58; //@line 9042
   $643 = $ReallocAsyncCtx6 + 116 | 0; //@line 9043
   HEAP32[$643 >> 2] = $60; //@line 9044
   $644 = $ReallocAsyncCtx6 + 120 | 0; //@line 9045
   HEAP32[$644 >> 2] = $62; //@line 9046
   $645 = $ReallocAsyncCtx6 + 124 | 0; //@line 9047
   HEAP8[$645 >> 0] = $64; //@line 9048
   $646 = $ReallocAsyncCtx6 + 128 | 0; //@line 9049
   HEAP32[$646 >> 2] = $66; //@line 9050
   $647 = $ReallocAsyncCtx6 + 132 | 0; //@line 9051
   HEAP8[$647 >> 0] = $603; //@line 9052
   $648 = $ReallocAsyncCtx6 + 136 | 0; //@line 9053
   HEAP32[$648 >> 2] = $68; //@line 9054
   $649 = $ReallocAsyncCtx6 + 140 | 0; //@line 9055
   HEAP32[$649 >> 2] = $70; //@line 9056
   $650 = $ReallocAsyncCtx6 + 144 | 0; //@line 9057
   HEAP32[$650 >> 2] = $72; //@line 9058
   $651 = $ReallocAsyncCtx6 + 148 | 0; //@line 9059
   HEAP32[$651 >> 2] = $74; //@line 9060
   $652 = $ReallocAsyncCtx6 + 152 | 0; //@line 9061
   HEAP32[$652 >> 2] = $76; //@line 9062
   $653 = $ReallocAsyncCtx6 + 156 | 0; //@line 9063
   HEAP8[$653 >> 0] = $78; //@line 9064
   $654 = $ReallocAsyncCtx6 + 160 | 0; //@line 9065
   HEAP32[$654 >> 2] = $80; //@line 9066
   $655 = $ReallocAsyncCtx6 + 164 | 0; //@line 9067
   HEAP8[$655 >> 0] = $82; //@line 9068
   $656 = $ReallocAsyncCtx6 + 168 | 0; //@line 9069
   HEAP32[$656 >> 2] = $84; //@line 9070
   $657 = $ReallocAsyncCtx6 + 172 | 0; //@line 9071
   HEAP32[$657 >> 2] = $86; //@line 9072
   $658 = $ReallocAsyncCtx6 + 176 | 0; //@line 9073
   HEAP32[$658 >> 2] = $88; //@line 9074
   $659 = $ReallocAsyncCtx6 + 180 | 0; //@line 9075
   HEAP32[$659 >> 2] = $90; //@line 9076
   $660 = $ReallocAsyncCtx6 + 184 | 0; //@line 9077
   HEAP32[$660 >> 2] = $92; //@line 9078
   $661 = $ReallocAsyncCtx6 + 188 | 0; //@line 9079
   HEAP32[$661 >> 2] = $94; //@line 9080
   $662 = $ReallocAsyncCtx6 + 192 | 0; //@line 9081
   HEAP32[$662 >> 2] = $96; //@line 9082
   $663 = $ReallocAsyncCtx6 + 196 | 0; //@line 9083
   HEAP32[$663 >> 2] = $98; //@line 9084
   $664 = $ReallocAsyncCtx6 + 200 | 0; //@line 9085
   HEAP32[$664 >> 2] = $100; //@line 9086
   $665 = $ReallocAsyncCtx6 + 204 | 0; //@line 9087
   HEAP32[$665 >> 2] = $102; //@line 9088
   $666 = $ReallocAsyncCtx6 + 208 | 0; //@line 9089
   HEAP32[$666 >> 2] = $104; //@line 9090
   $667 = $ReallocAsyncCtx6 + 212 | 0; //@line 9091
   HEAP32[$667 >> 2] = $106; //@line 9092
   $668 = $ReallocAsyncCtx6 + 216 | 0; //@line 9093
   HEAP32[$668 >> 2] = $108; //@line 9094
   $669 = $ReallocAsyncCtx6 + 220 | 0; //@line 9095
   HEAP32[$669 >> 2] = $110; //@line 9096
   $670 = $ReallocAsyncCtx6 + 224 | 0; //@line 9097
   HEAP32[$670 >> 2] = $112; //@line 9098
   $671 = $ReallocAsyncCtx6 + 228 | 0; //@line 9099
   HEAP32[$671 >> 2] = $114; //@line 9100
   $672 = $ReallocAsyncCtx6 + 232 | 0; //@line 9101
   HEAP32[$672 >> 2] = $116; //@line 9102
   sp = STACKTOP; //@line 9103
   return;
  }
  HEAP8[___async_retval >> 0] = $614; //@line 9107
  ___async_unwind = 0; //@line 9108
  HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 9109
  $615 = $ReallocAsyncCtx6 + 4 | 0; //@line 9110
  HEAP32[$615 >> 2] = $2; //@line 9111
  $616 = $ReallocAsyncCtx6 + 8 | 0; //@line 9112
  HEAP32[$616 >> 2] = $4; //@line 9113
  $617 = $ReallocAsyncCtx6 + 12 | 0; //@line 9114
  HEAP32[$617 >> 2] = $6; //@line 9115
  $618 = $ReallocAsyncCtx6 + 16 | 0; //@line 9116
  HEAP32[$618 >> 2] = $8; //@line 9117
  $619 = $ReallocAsyncCtx6 + 20 | 0; //@line 9118
  HEAP32[$619 >> 2] = $10; //@line 9119
  $620 = $ReallocAsyncCtx6 + 24 | 0; //@line 9120
  HEAP32[$620 >> 2] = $12; //@line 9121
  $621 = $ReallocAsyncCtx6 + 28 | 0; //@line 9122
  HEAP32[$621 >> 2] = $14; //@line 9123
  $622 = $ReallocAsyncCtx6 + 32 | 0; //@line 9124
  HEAP32[$622 >> 2] = $16; //@line 9125
  $623 = $ReallocAsyncCtx6 + 36 | 0; //@line 9126
  HEAP32[$623 >> 2] = $18; //@line 9127
  $624 = $ReallocAsyncCtx6 + 40 | 0; //@line 9128
  HEAP32[$624 >> 2] = $20; //@line 9129
  $625 = $ReallocAsyncCtx6 + 44 | 0; //@line 9130
  HEAP32[$625 >> 2] = $22; //@line 9131
  $626 = $ReallocAsyncCtx6 + 48 | 0; //@line 9132
  HEAP32[$626 >> 2] = $24; //@line 9133
  $627 = $ReallocAsyncCtx6 + 52 | 0; //@line 9134
  HEAP32[$627 >> 2] = $26; //@line 9135
  $628 = $ReallocAsyncCtx6 + 56 | 0; //@line 9136
  HEAP32[$628 >> 2] = $28; //@line 9137
  $629 = $ReallocAsyncCtx6 + 60 | 0; //@line 9138
  HEAP32[$629 >> 2] = $30; //@line 9139
  $630 = $ReallocAsyncCtx6 + 64 | 0; //@line 9140
  HEAP32[$630 >> 2] = $32; //@line 9141
  $631 = $ReallocAsyncCtx6 + 68 | 0; //@line 9142
  HEAP32[$631 >> 2] = $34; //@line 9143
  $632 = $ReallocAsyncCtx6 + 72 | 0; //@line 9144
  HEAP32[$632 >> 2] = $36; //@line 9145
  $633 = $ReallocAsyncCtx6 + 76 | 0; //@line 9146
  HEAP32[$633 >> 2] = $38; //@line 9147
  $634 = $ReallocAsyncCtx6 + 80 | 0; //@line 9148
  HEAP32[$634 >> 2] = $40; //@line 9149
  $635 = $ReallocAsyncCtx6 + 84 | 0; //@line 9150
  HEAP32[$635 >> 2] = $42; //@line 9151
  $636 = $ReallocAsyncCtx6 + 88 | 0; //@line 9152
  HEAP32[$636 >> 2] = $44; //@line 9153
  $637 = $ReallocAsyncCtx6 + 92 | 0; //@line 9154
  HEAP32[$637 >> 2] = $46; //@line 9155
  $638 = $ReallocAsyncCtx6 + 96 | 0; //@line 9156
  HEAP32[$638 >> 2] = $48; //@line 9157
  $639 = $ReallocAsyncCtx6 + 100 | 0; //@line 9158
  HEAP32[$639 >> 2] = $50; //@line 9159
  $640 = $ReallocAsyncCtx6 + 104 | 0; //@line 9160
  HEAP32[$640 >> 2] = $52; //@line 9161
  $641 = $ReallocAsyncCtx6 + 108 | 0; //@line 9162
  HEAP32[$641 >> 2] = $54; //@line 9163
  $642 = $ReallocAsyncCtx6 + 112 | 0; //@line 9164
  HEAP32[$642 >> 2] = $58; //@line 9165
  $643 = $ReallocAsyncCtx6 + 116 | 0; //@line 9166
  HEAP32[$643 >> 2] = $60; //@line 9167
  $644 = $ReallocAsyncCtx6 + 120 | 0; //@line 9168
  HEAP32[$644 >> 2] = $62; //@line 9169
  $645 = $ReallocAsyncCtx6 + 124 | 0; //@line 9170
  HEAP8[$645 >> 0] = $64; //@line 9171
  $646 = $ReallocAsyncCtx6 + 128 | 0; //@line 9172
  HEAP32[$646 >> 2] = $66; //@line 9173
  $647 = $ReallocAsyncCtx6 + 132 | 0; //@line 9174
  HEAP8[$647 >> 0] = $603; //@line 9175
  $648 = $ReallocAsyncCtx6 + 136 | 0; //@line 9176
  HEAP32[$648 >> 2] = $68; //@line 9177
  $649 = $ReallocAsyncCtx6 + 140 | 0; //@line 9178
  HEAP32[$649 >> 2] = $70; //@line 9179
  $650 = $ReallocAsyncCtx6 + 144 | 0; //@line 9180
  HEAP32[$650 >> 2] = $72; //@line 9181
  $651 = $ReallocAsyncCtx6 + 148 | 0; //@line 9182
  HEAP32[$651 >> 2] = $74; //@line 9183
  $652 = $ReallocAsyncCtx6 + 152 | 0; //@line 9184
  HEAP32[$652 >> 2] = $76; //@line 9185
  $653 = $ReallocAsyncCtx6 + 156 | 0; //@line 9186
  HEAP8[$653 >> 0] = $78; //@line 9187
  $654 = $ReallocAsyncCtx6 + 160 | 0; //@line 9188
  HEAP32[$654 >> 2] = $80; //@line 9189
  $655 = $ReallocAsyncCtx6 + 164 | 0; //@line 9190
  HEAP8[$655 >> 0] = $82; //@line 9191
  $656 = $ReallocAsyncCtx6 + 168 | 0; //@line 9192
  HEAP32[$656 >> 2] = $84; //@line 9193
  $657 = $ReallocAsyncCtx6 + 172 | 0; //@line 9194
  HEAP32[$657 >> 2] = $86; //@line 9195
  $658 = $ReallocAsyncCtx6 + 176 | 0; //@line 9196
  HEAP32[$658 >> 2] = $88; //@line 9197
  $659 = $ReallocAsyncCtx6 + 180 | 0; //@line 9198
  HEAP32[$659 >> 2] = $90; //@line 9199
  $660 = $ReallocAsyncCtx6 + 184 | 0; //@line 9200
  HEAP32[$660 >> 2] = $92; //@line 9201
  $661 = $ReallocAsyncCtx6 + 188 | 0; //@line 9202
  HEAP32[$661 >> 2] = $94; //@line 9203
  $662 = $ReallocAsyncCtx6 + 192 | 0; //@line 9204
  HEAP32[$662 >> 2] = $96; //@line 9205
  $663 = $ReallocAsyncCtx6 + 196 | 0; //@line 9206
  HEAP32[$663 >> 2] = $98; //@line 9207
  $664 = $ReallocAsyncCtx6 + 200 | 0; //@line 9208
  HEAP32[$664 >> 2] = $100; //@line 9209
  $665 = $ReallocAsyncCtx6 + 204 | 0; //@line 9210
  HEAP32[$665 >> 2] = $102; //@line 9211
  $666 = $ReallocAsyncCtx6 + 208 | 0; //@line 9212
  HEAP32[$666 >> 2] = $104; //@line 9213
  $667 = $ReallocAsyncCtx6 + 212 | 0; //@line 9214
  HEAP32[$667 >> 2] = $106; //@line 9215
  $668 = $ReallocAsyncCtx6 + 216 | 0; //@line 9216
  HEAP32[$668 >> 2] = $108; //@line 9217
  $669 = $ReallocAsyncCtx6 + 220 | 0; //@line 9218
  HEAP32[$669 >> 2] = $110; //@line 9219
  $670 = $ReallocAsyncCtx6 + 224 | 0; //@line 9220
  HEAP32[$670 >> 2] = $112; //@line 9221
  $671 = $ReallocAsyncCtx6 + 228 | 0; //@line 9222
  HEAP32[$671 >> 2] = $114; //@line 9223
  $672 = $ReallocAsyncCtx6 + 232 | 0; //@line 9224
  HEAP32[$672 >> 2] = $116; //@line 9225
  sp = STACKTOP; //@line 9226
  return;
 } else if ((label | 0) == 33) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 9231
  return;
 }
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_218($0) {
 $0 = $0 | 0;
 var $$0$be = 0, $$0107$be = 0, $$0111 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $106 = 0, $108 = 0, $110 = 0, $112 = 0, $114 = 0, $116 = 0, $119 = 0, $12 = 0, $130 = 0, $131 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $207 = 0, $214 = 0, $215 = 0, $22 = 0, $221 = 0, $24 = 0, $240 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $311 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $370 = 0, $371 = 0, $372 = 0, $377 = 0, $378 = 0, $38 = 0, $392 = 0, $4 = 0, $40 = 0, $413 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $48 = 0, $481 = 0, $485 = 0, $489 = 0, $494 = 0, $495 = 0, $499 = 0, $50 = 0, $503 = 0, $505 = 0, $507 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $578 = 0, $58 = 0, $591 = 0, $598 = 0, $6 = 0, $60 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $80 = 0, $82 = 0, $84 = 0, $86 = 0, $88 = 0, $90 = 0, $92 = 0, $94 = 0, $96 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5321
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5323
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5325
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5327
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5329
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5331
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5333
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5335
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5337
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5339
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 5341
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 5343
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 5345
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 5347
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 5349
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 5351
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 5353
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 5355
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 5357
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 5359
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 5361
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 5363
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 5365
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 5367
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 5369
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 5371
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 5373
 $56 = HEAP32[$0 + 112 >> 2] | 0; //@line 5377
 $58 = HEAP32[$0 + 116 >> 2] | 0; //@line 5379
 $60 = HEAP32[$0 + 120 >> 2] | 0; //@line 5381
 $62 = HEAP32[$0 + 124 >> 2] | 0; //@line 5383
 $64 = HEAP8[$0 + 128 >> 0] | 0; //@line 5385
 $66 = HEAP32[$0 + 132 >> 2] | 0; //@line 5387
 $68 = HEAP32[$0 + 136 >> 2] | 0; //@line 5389
 $70 = HEAP32[$0 + 140 >> 2] | 0; //@line 5391
 $72 = HEAP32[$0 + 144 >> 2] | 0; //@line 5393
 $74 = HEAP32[$0 + 148 >> 2] | 0; //@line 5395
 $76 = HEAP32[$0 + 152 >> 2] | 0; //@line 5397
 $78 = HEAP8[$0 + 156 >> 0] | 0; //@line 5399
 $80 = HEAP32[$0 + 160 >> 2] | 0; //@line 5401
 $82 = HEAP8[$0 + 164 >> 0] | 0; //@line 5403
 $84 = HEAP32[$0 + 168 >> 2] | 0; //@line 5405
 $86 = HEAP32[$0 + 172 >> 2] | 0; //@line 5407
 $88 = HEAP32[$0 + 176 >> 2] | 0; //@line 5409
 $90 = HEAP32[$0 + 180 >> 2] | 0; //@line 5411
 $92 = HEAP32[$0 + 184 >> 2] | 0; //@line 5413
 $94 = HEAP32[$0 + 188 >> 2] | 0; //@line 5415
 $96 = HEAP32[$0 + 192 >> 2] | 0; //@line 5417
 $98 = HEAP32[$0 + 196 >> 2] | 0; //@line 5419
 $100 = HEAP32[$0 + 200 >> 2] | 0; //@line 5421
 $102 = HEAP32[$0 + 204 >> 2] | 0; //@line 5423
 $104 = HEAP32[$0 + 208 >> 2] | 0; //@line 5425
 $106 = HEAP32[$0 + 212 >> 2] | 0; //@line 5427
 $108 = HEAP32[$0 + 216 >> 2] | 0; //@line 5429
 $110 = HEAP32[$0 + 220 >> 2] | 0; //@line 5431
 $112 = HEAP32[$0 + 224 >> 2] | 0; //@line 5433
 $114 = HEAP32[$0 + 228 >> 2] | 0; //@line 5435
 $116 = HEAP32[$0 + 232 >> 2] | 0; //@line 5437
 $$0111 = HEAP8[___async_retval >> 0] | 0; //@line 5440
 $$reg2mem$0 = HEAP8[$0 + 108 >> 0] | 0; //@line 5440
 L2 : while (1) {
  $377 = HEAP8[$92 >> 0] | 0; //@line 5445
  $378 = $377 & 255; //@line 5446
  if ((128 - (HEAPU8[$62 >> 0] | 0) - $378 | 0) > 2) {
   HEAP8[$72 + 4 + $378 >> 0] = 6; //@line 5452
   HEAP8[($377 + 1 & 255) + ($72 + 4) >> 0] = $$0111; //@line 5456
   HEAP8[$92 >> 0] = $377 + 3 << 24 >> 24; //@line 5458
   HEAP8[($377 + 2 & 255) + ($72 + 4) >> 0] = $82; //@line 5461
   HEAP8[$86 >> 0] = 1; //@line 5462
   $$0$be = $$reg2mem$0; //@line 5463
   $$0107$be = 0; //@line 5463
  } else {
   $$0$be = $$reg2mem$0; //@line 5465
   $$0107$be = -1010; //@line 5465
  }
  L6 : while (1) {
   if (($$0$be & 255) >= ($64 & 255)) {
    label = 31; //@line 5470
    break L2;
   }
   $119 = $$0$be + 1 << 24 >> 24; //@line 5474
   switch (HEAP8[$68 + ($$0$be & 255) >> 0] | 0) {
   case 3:
    {
     label = 4; //@line 5479
     break L2;
     break;
    }
   case 5:
    {
     label = 9; //@line 5484
     break L2;
     break;
    }
   case 7:
    {
     label = 19; //@line 5489
     break L2;
     break;
    }
   case 9:
    {
     label = 25; //@line 5494
     break L2;
     break;
    }
   case 10:
    {
     label = 28; //@line 5499
     break L2;
     break;
    }
   case 6:
    {
     break L6;
     break;
    }
   case 2:
    {
     HEAP32[$106 >> 2] = 0; //@line 5508
     HEAP8[$66 >> 0] = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 5513
     HEAP8[$80 >> 0] = HEAP8[$68 + ($$0$be + 2 & 255) >> 0] | 0; //@line 5518
     $$0$be = $$0$be + 3 << 24 >> 24; //@line 5519
     continue L6;
     break;
    }
   case 4:
    {
     $204 = $$0$be + 2 << 24 >> 24; //@line 5524
     $207 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 5527
     HEAP8[$40 >> 0] = $207; //@line 5528
     HEAP16[$36 >> 1] = 1 << ($207 & 255); //@line 5532
     $214 = HEAP8[$92 >> 0] | 0; //@line 5536
     $215 = $214 & 255; //@line 5537
     if ((128 - (HEAPU8[$62 >> 0] | 0) | 0) <= ($215 | 0)) {
      $$0$be = $204; //@line 5540
      $$0107$be = -1010; //@line 5540
      continue L6;
     }
     HEAP8[$92 >> 0] = $214 + 1 << 24 >> 24; //@line 5545
     HEAP8[$72 + 4 + $215 >> 0] = 4; //@line 5546
     HEAP8[$86 >> 0] = 1; //@line 5547
     $$0$be = $204; //@line 5548
     $$0107$be = 0; //@line 5548
     continue L6;
     break;
    }
   case 8:
    {
     $481 = $$0$be + 2 << 24 >> 24; //@line 5553
     $485 = HEAP8[$68 + ($119 & 255) >> 0] & 15; //@line 5557
     $489 = ($485 + ($485 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 5562
     HEAP32[$14 >> 2] = $489; //@line 5563
     HEAP32[$4 >> 2] = $489 + 1e3; //@line 5565
     $494 = HEAP8[$92 >> 0] | 0; //@line 5569
     $495 = $494 & 255; //@line 5570
     if ((128 - (HEAPU8[$62 >> 0] | 0) | 0) <= ($495 | 0)) {
      $$0$be = $481; //@line 5573
      $$0107$be = -1010; //@line 5573
      continue L6;
     }
     HEAP8[$92 >> 0] = $494 + 1 << 24 >> 24; //@line 5578
     HEAP8[$72 + 4 + $495 >> 0] = 8; //@line 5579
     HEAP8[$112 >> 0] = 1; //@line 5580
     HEAP8[$86 >> 0] = 1; //@line 5581
     $$0$be = $481; //@line 5582
     $$0107$be = 0; //@line 5582
     continue L6;
     break;
    }
   default:
    {
     $$0$be = $119; //@line 5587
     $$0107$be = -1013; //@line 5587
     continue L6;
    }
   }
  }
  $311 = HEAP32[$110 >> 2] | 0; //@line 5592
  if (!$311) {
   $$0111 = -1; //@line 5595
   $$reg2mem$0 = $119; //@line 5595
  } else {
   label = 13; //@line 5597
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP8[$76 >> 0] = 0; //@line 5602
  HEAP8[$44 >> 0] = 0; //@line 5603
  HEAP8[$22 >> 0] = 0; //@line 5604
  HEAP8[$26 >> 0] = 0; //@line 5605
  $130 = $119 & 255; //@line 5606
  $131 = $130 + -1 | 0; //@line 5607
  HEAP32[$84 >> 2] = $68 + $131; //@line 5609
  HEAP8[$38 >> 0] = $32 - $131; //@line 5612
  HEAP8[$52 >> 0] = HEAP8[$46 >> 0] | 0; //@line 5614
  HEAP8[$6 >> 0] = HEAP8[$58 >> 0] | 0; //@line 5616
  HEAP8[$18 >> 0] = HEAP8[$12 >> 0] | 0; //@line 5618
  HEAP8[$98 >> 0] = HEAP8[$24 >> 0] | 0; //@line 5620
  HEAP8[$104 >> 0] = HEAP8[$114 >> 0] | 0; //@line 5622
  $142 = HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] | 0; //@line 5625
  $ReallocAsyncCtx = _emscripten_realloc_async_context(240) | 0; //@line 5626
  $143 = FUNCTION_TABLE_iiiiiii[$142 & 3]($94, $88, $76, $44, $22, $26) | 0; //@line 5627
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 5630
   $144 = $ReallocAsyncCtx + 4 | 0; //@line 5631
   HEAP32[$144 >> 2] = $2; //@line 5632
   $145 = $ReallocAsyncCtx + 8 | 0; //@line 5633
   HEAP32[$145 >> 2] = $4; //@line 5634
   $146 = $ReallocAsyncCtx + 12 | 0; //@line 5635
   HEAP32[$146 >> 2] = $6; //@line 5636
   $147 = $ReallocAsyncCtx + 16 | 0; //@line 5637
   HEAP32[$147 >> 2] = $8; //@line 5638
   $148 = $ReallocAsyncCtx + 20 | 0; //@line 5639
   HEAP32[$148 >> 2] = $10; //@line 5640
   $149 = $ReallocAsyncCtx + 24 | 0; //@line 5641
   HEAP32[$149 >> 2] = $12; //@line 5642
   $150 = $ReallocAsyncCtx + 28 | 0; //@line 5643
   HEAP32[$150 >> 2] = $14; //@line 5644
   $151 = $ReallocAsyncCtx + 32 | 0; //@line 5645
   HEAP32[$151 >> 2] = $16; //@line 5646
   $152 = $ReallocAsyncCtx + 36 | 0; //@line 5647
   HEAP32[$152 >> 2] = $18; //@line 5648
   $153 = $ReallocAsyncCtx + 40 | 0; //@line 5649
   HEAP32[$153 >> 2] = $20; //@line 5650
   $154 = $ReallocAsyncCtx + 44 | 0; //@line 5651
   HEAP32[$154 >> 2] = $22; //@line 5652
   $155 = $ReallocAsyncCtx + 48 | 0; //@line 5653
   HEAP32[$155 >> 2] = $24; //@line 5654
   $156 = $ReallocAsyncCtx + 52 | 0; //@line 5655
   HEAP32[$156 >> 2] = $26; //@line 5656
   $157 = $ReallocAsyncCtx + 56 | 0; //@line 5657
   HEAP32[$157 >> 2] = $28; //@line 5658
   $158 = $ReallocAsyncCtx + 60 | 0; //@line 5659
   HEAP32[$158 >> 2] = $30; //@line 5660
   $159 = $ReallocAsyncCtx + 64 | 0; //@line 5661
   HEAP32[$159 >> 2] = $32; //@line 5662
   $160 = $ReallocAsyncCtx + 68 | 0; //@line 5663
   HEAP32[$160 >> 2] = $34; //@line 5664
   $161 = $ReallocAsyncCtx + 72 | 0; //@line 5665
   HEAP32[$161 >> 2] = $36; //@line 5666
   $162 = $ReallocAsyncCtx + 76 | 0; //@line 5667
   HEAP32[$162 >> 2] = $38; //@line 5668
   $163 = $ReallocAsyncCtx + 80 | 0; //@line 5669
   HEAP32[$163 >> 2] = $40; //@line 5670
   $164 = $ReallocAsyncCtx + 84 | 0; //@line 5671
   HEAP32[$164 >> 2] = $42; //@line 5672
   $165 = $ReallocAsyncCtx + 88 | 0; //@line 5673
   HEAP32[$165 >> 2] = $44; //@line 5674
   $166 = $ReallocAsyncCtx + 92 | 0; //@line 5675
   HEAP32[$166 >> 2] = $46; //@line 5676
   $167 = $ReallocAsyncCtx + 96 | 0; //@line 5677
   HEAP32[$167 >> 2] = $130; //@line 5678
   $168 = $ReallocAsyncCtx + 100 | 0; //@line 5679
   HEAP32[$168 >> 2] = $48; //@line 5680
   $169 = $ReallocAsyncCtx + 104 | 0; //@line 5681
   HEAP32[$169 >> 2] = $50; //@line 5682
   $170 = $ReallocAsyncCtx + 108 | 0; //@line 5683
   HEAP32[$170 >> 2] = $52; //@line 5684
   $171 = $ReallocAsyncCtx + 112 | 0; //@line 5685
   HEAP32[$171 >> 2] = $56; //@line 5686
   $172 = $ReallocAsyncCtx + 116 | 0; //@line 5687
   HEAP32[$172 >> 2] = $58; //@line 5688
   $173 = $ReallocAsyncCtx + 120 | 0; //@line 5689
   HEAP32[$173 >> 2] = $60; //@line 5690
   $174 = $ReallocAsyncCtx + 124 | 0; //@line 5691
   HEAP32[$174 >> 2] = $62; //@line 5692
   $175 = $ReallocAsyncCtx + 128 | 0; //@line 5693
   HEAP8[$175 >> 0] = $64; //@line 5694
   $176 = $ReallocAsyncCtx + 132 | 0; //@line 5695
   HEAP32[$176 >> 2] = $66; //@line 5696
   $177 = $ReallocAsyncCtx + 136 | 0; //@line 5697
   HEAP32[$177 >> 2] = $68; //@line 5698
   $178 = $ReallocAsyncCtx + 140 | 0; //@line 5699
   HEAP32[$178 >> 2] = $70; //@line 5700
   $179 = $ReallocAsyncCtx + 144 | 0; //@line 5701
   HEAP32[$179 >> 2] = $72; //@line 5702
   $180 = $ReallocAsyncCtx + 148 | 0; //@line 5703
   HEAP32[$180 >> 2] = $74; //@line 5704
   $181 = $ReallocAsyncCtx + 152 | 0; //@line 5705
   HEAP32[$181 >> 2] = $76; //@line 5706
   $182 = $ReallocAsyncCtx + 156 | 0; //@line 5707
   HEAP8[$182 >> 0] = $78; //@line 5708
   $183 = $ReallocAsyncCtx + 160 | 0; //@line 5709
   HEAP32[$183 >> 2] = $80; //@line 5710
   $184 = $ReallocAsyncCtx + 164 | 0; //@line 5711
   HEAP8[$184 >> 0] = $82; //@line 5712
   $185 = $ReallocAsyncCtx + 168 | 0; //@line 5713
   HEAP32[$185 >> 2] = $84; //@line 5714
   $186 = $ReallocAsyncCtx + 172 | 0; //@line 5715
   HEAP32[$186 >> 2] = $86; //@line 5716
   $187 = $ReallocAsyncCtx + 176 | 0; //@line 5717
   HEAP32[$187 >> 2] = $88; //@line 5718
   $188 = $ReallocAsyncCtx + 180 | 0; //@line 5719
   HEAP32[$188 >> 2] = $90; //@line 5720
   $189 = $ReallocAsyncCtx + 184 | 0; //@line 5721
   HEAP32[$189 >> 2] = $92; //@line 5722
   $190 = $ReallocAsyncCtx + 188 | 0; //@line 5723
   HEAP32[$190 >> 2] = $94; //@line 5724
   $191 = $ReallocAsyncCtx + 192 | 0; //@line 5725
   HEAP32[$191 >> 2] = $96; //@line 5726
   $192 = $ReallocAsyncCtx + 196 | 0; //@line 5727
   HEAP32[$192 >> 2] = $98; //@line 5728
   $193 = $ReallocAsyncCtx + 200 | 0; //@line 5729
   HEAP32[$193 >> 2] = $100; //@line 5730
   $194 = $ReallocAsyncCtx + 204 | 0; //@line 5731
   HEAP32[$194 >> 2] = $$0107$be; //@line 5732
   $195 = $ReallocAsyncCtx + 208 | 0; //@line 5733
   HEAP32[$195 >> 2] = $102; //@line 5734
   $196 = $ReallocAsyncCtx + 212 | 0; //@line 5735
   HEAP32[$196 >> 2] = $104; //@line 5736
   $197 = $ReallocAsyncCtx + 216 | 0; //@line 5737
   HEAP32[$197 >> 2] = $106; //@line 5738
   $198 = $ReallocAsyncCtx + 220 | 0; //@line 5739
   HEAP32[$198 >> 2] = $108; //@line 5740
   $199 = $ReallocAsyncCtx + 224 | 0; //@line 5741
   HEAP32[$199 >> 2] = $110; //@line 5742
   $200 = $ReallocAsyncCtx + 228 | 0; //@line 5743
   HEAP32[$200 >> 2] = $112; //@line 5744
   $201 = $ReallocAsyncCtx + 232 | 0; //@line 5745
   HEAP32[$201 >> 2] = $114; //@line 5746
   $202 = $ReallocAsyncCtx + 236 | 0; //@line 5747
   HEAP32[$202 >> 2] = $116; //@line 5748
   sp = STACKTOP; //@line 5749
   return;
  }
  HEAP8[___async_retval >> 0] = $143; //@line 5753
  ___async_unwind = 0; //@line 5754
  HEAP32[$ReallocAsyncCtx >> 2] = 488; //@line 5755
  $144 = $ReallocAsyncCtx + 4 | 0; //@line 5756
  HEAP32[$144 >> 2] = $2; //@line 5757
  $145 = $ReallocAsyncCtx + 8 | 0; //@line 5758
  HEAP32[$145 >> 2] = $4; //@line 5759
  $146 = $ReallocAsyncCtx + 12 | 0; //@line 5760
  HEAP32[$146 >> 2] = $6; //@line 5761
  $147 = $ReallocAsyncCtx + 16 | 0; //@line 5762
  HEAP32[$147 >> 2] = $8; //@line 5763
  $148 = $ReallocAsyncCtx + 20 | 0; //@line 5764
  HEAP32[$148 >> 2] = $10; //@line 5765
  $149 = $ReallocAsyncCtx + 24 | 0; //@line 5766
  HEAP32[$149 >> 2] = $12; //@line 5767
  $150 = $ReallocAsyncCtx + 28 | 0; //@line 5768
  HEAP32[$150 >> 2] = $14; //@line 5769
  $151 = $ReallocAsyncCtx + 32 | 0; //@line 5770
  HEAP32[$151 >> 2] = $16; //@line 5771
  $152 = $ReallocAsyncCtx + 36 | 0; //@line 5772
  HEAP32[$152 >> 2] = $18; //@line 5773
  $153 = $ReallocAsyncCtx + 40 | 0; //@line 5774
  HEAP32[$153 >> 2] = $20; //@line 5775
  $154 = $ReallocAsyncCtx + 44 | 0; //@line 5776
  HEAP32[$154 >> 2] = $22; //@line 5777
  $155 = $ReallocAsyncCtx + 48 | 0; //@line 5778
  HEAP32[$155 >> 2] = $24; //@line 5779
  $156 = $ReallocAsyncCtx + 52 | 0; //@line 5780
  HEAP32[$156 >> 2] = $26; //@line 5781
  $157 = $ReallocAsyncCtx + 56 | 0; //@line 5782
  HEAP32[$157 >> 2] = $28; //@line 5783
  $158 = $ReallocAsyncCtx + 60 | 0; //@line 5784
  HEAP32[$158 >> 2] = $30; //@line 5785
  $159 = $ReallocAsyncCtx + 64 | 0; //@line 5786
  HEAP32[$159 >> 2] = $32; //@line 5787
  $160 = $ReallocAsyncCtx + 68 | 0; //@line 5788
  HEAP32[$160 >> 2] = $34; //@line 5789
  $161 = $ReallocAsyncCtx + 72 | 0; //@line 5790
  HEAP32[$161 >> 2] = $36; //@line 5791
  $162 = $ReallocAsyncCtx + 76 | 0; //@line 5792
  HEAP32[$162 >> 2] = $38; //@line 5793
  $163 = $ReallocAsyncCtx + 80 | 0; //@line 5794
  HEAP32[$163 >> 2] = $40; //@line 5795
  $164 = $ReallocAsyncCtx + 84 | 0; //@line 5796
  HEAP32[$164 >> 2] = $42; //@line 5797
  $165 = $ReallocAsyncCtx + 88 | 0; //@line 5798
  HEAP32[$165 >> 2] = $44; //@line 5799
  $166 = $ReallocAsyncCtx + 92 | 0; //@line 5800
  HEAP32[$166 >> 2] = $46; //@line 5801
  $167 = $ReallocAsyncCtx + 96 | 0; //@line 5802
  HEAP32[$167 >> 2] = $130; //@line 5803
  $168 = $ReallocAsyncCtx + 100 | 0; //@line 5804
  HEAP32[$168 >> 2] = $48; //@line 5805
  $169 = $ReallocAsyncCtx + 104 | 0; //@line 5806
  HEAP32[$169 >> 2] = $50; //@line 5807
  $170 = $ReallocAsyncCtx + 108 | 0; //@line 5808
  HEAP32[$170 >> 2] = $52; //@line 5809
  $171 = $ReallocAsyncCtx + 112 | 0; //@line 5810
  HEAP32[$171 >> 2] = $56; //@line 5811
  $172 = $ReallocAsyncCtx + 116 | 0; //@line 5812
  HEAP32[$172 >> 2] = $58; //@line 5813
  $173 = $ReallocAsyncCtx + 120 | 0; //@line 5814
  HEAP32[$173 >> 2] = $60; //@line 5815
  $174 = $ReallocAsyncCtx + 124 | 0; //@line 5816
  HEAP32[$174 >> 2] = $62; //@line 5817
  $175 = $ReallocAsyncCtx + 128 | 0; //@line 5818
  HEAP8[$175 >> 0] = $64; //@line 5819
  $176 = $ReallocAsyncCtx + 132 | 0; //@line 5820
  HEAP32[$176 >> 2] = $66; //@line 5821
  $177 = $ReallocAsyncCtx + 136 | 0; //@line 5822
  HEAP32[$177 >> 2] = $68; //@line 5823
  $178 = $ReallocAsyncCtx + 140 | 0; //@line 5824
  HEAP32[$178 >> 2] = $70; //@line 5825
  $179 = $ReallocAsyncCtx + 144 | 0; //@line 5826
  HEAP32[$179 >> 2] = $72; //@line 5827
  $180 = $ReallocAsyncCtx + 148 | 0; //@line 5828
  HEAP32[$180 >> 2] = $74; //@line 5829
  $181 = $ReallocAsyncCtx + 152 | 0; //@line 5830
  HEAP32[$181 >> 2] = $76; //@line 5831
  $182 = $ReallocAsyncCtx + 156 | 0; //@line 5832
  HEAP8[$182 >> 0] = $78; //@line 5833
  $183 = $ReallocAsyncCtx + 160 | 0; //@line 5834
  HEAP32[$183 >> 2] = $80; //@line 5835
  $184 = $ReallocAsyncCtx + 164 | 0; //@line 5836
  HEAP8[$184 >> 0] = $82; //@line 5837
  $185 = $ReallocAsyncCtx + 168 | 0; //@line 5838
  HEAP32[$185 >> 2] = $84; //@line 5839
  $186 = $ReallocAsyncCtx + 172 | 0; //@line 5840
  HEAP32[$186 >> 2] = $86; //@line 5841
  $187 = $ReallocAsyncCtx + 176 | 0; //@line 5842
  HEAP32[$187 >> 2] = $88; //@line 5843
  $188 = $ReallocAsyncCtx + 180 | 0; //@line 5844
  HEAP32[$188 >> 2] = $90; //@line 5845
  $189 = $ReallocAsyncCtx + 184 | 0; //@line 5846
  HEAP32[$189 >> 2] = $92; //@line 5847
  $190 = $ReallocAsyncCtx + 188 | 0; //@line 5848
  HEAP32[$190 >> 2] = $94; //@line 5849
  $191 = $ReallocAsyncCtx + 192 | 0; //@line 5850
  HEAP32[$191 >> 2] = $96; //@line 5851
  $192 = $ReallocAsyncCtx + 196 | 0; //@line 5852
  HEAP32[$192 >> 2] = $98; //@line 5853
  $193 = $ReallocAsyncCtx + 200 | 0; //@line 5854
  HEAP32[$193 >> 2] = $100; //@line 5855
  $194 = $ReallocAsyncCtx + 204 | 0; //@line 5856
  HEAP32[$194 >> 2] = $$0107$be; //@line 5857
  $195 = $ReallocAsyncCtx + 208 | 0; //@line 5858
  HEAP32[$195 >> 2] = $102; //@line 5859
  $196 = $ReallocAsyncCtx + 212 | 0; //@line 5860
  HEAP32[$196 >> 2] = $104; //@line 5861
  $197 = $ReallocAsyncCtx + 216 | 0; //@line 5862
  HEAP32[$197 >> 2] = $106; //@line 5863
  $198 = $ReallocAsyncCtx + 220 | 0; //@line 5864
  HEAP32[$198 >> 2] = $108; //@line 5865
  $199 = $ReallocAsyncCtx + 224 | 0; //@line 5866
  HEAP32[$199 >> 2] = $110; //@line 5867
  $200 = $ReallocAsyncCtx + 228 | 0; //@line 5868
  HEAP32[$200 >> 2] = $112; //@line 5869
  $201 = $ReallocAsyncCtx + 232 | 0; //@line 5870
  HEAP32[$201 >> 2] = $114; //@line 5871
  $202 = $ReallocAsyncCtx + 236 | 0; //@line 5872
  HEAP32[$202 >> 2] = $116; //@line 5873
  sp = STACKTOP; //@line 5874
  return;
 } else if ((label | 0) == 9) {
  $221 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 5880
  HEAP8[$50 >> 0] = ($221 & 255) >>> 4 & 7; //@line 5885
  HEAP8[$60 >> 0] = $221 & 15; //@line 5887
  $240 = $$0$be + 5 << 24 >> 24; //@line 5901
  HEAP32[$16 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 5909
  $250 = HEAP32[(HEAP32[$8 >> 2] | 0) + 40 >> 2] | 0; //@line 5912
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(236) | 0; //@line 5913
  $251 = FUNCTION_TABLE_iii[$250 & 31]($94, $2) | 0; //@line 5914
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 5917
   $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 5918
   HEAP32[$252 >> 2] = $2; //@line 5919
   $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 5920
   HEAP32[$253 >> 2] = $4; //@line 5921
   $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 5922
   HEAP32[$254 >> 2] = $6; //@line 5923
   $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 5924
   HEAP32[$255 >> 2] = $8; //@line 5925
   $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 5926
   HEAP32[$256 >> 2] = $10; //@line 5927
   $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 5928
   HEAP32[$257 >> 2] = $12; //@line 5929
   $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 5930
   HEAP32[$258 >> 2] = $14; //@line 5931
   $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 5932
   HEAP32[$259 >> 2] = $16; //@line 5933
   $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 5934
   HEAP32[$260 >> 2] = $18; //@line 5935
   $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 5936
   HEAP32[$261 >> 2] = $20; //@line 5937
   $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 5938
   HEAP32[$262 >> 2] = $22; //@line 5939
   $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 5940
   HEAP32[$263 >> 2] = $24; //@line 5941
   $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 5942
   HEAP32[$264 >> 2] = $26; //@line 5943
   $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 5944
   HEAP32[$265 >> 2] = $28; //@line 5945
   $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 5946
   HEAP32[$266 >> 2] = $30; //@line 5947
   $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 5948
   HEAP32[$267 >> 2] = $32; //@line 5949
   $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 5950
   HEAP32[$268 >> 2] = $34; //@line 5951
   $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 5952
   HEAP32[$269 >> 2] = $36; //@line 5953
   $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 5954
   HEAP32[$270 >> 2] = $38; //@line 5955
   $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 5956
   HEAP32[$271 >> 2] = $40; //@line 5957
   $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 5958
   HEAP8[$272 >> 0] = $240; //@line 5959
   $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 5960
   HEAP32[$273 >> 2] = $42; //@line 5961
   $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 5962
   HEAP32[$274 >> 2] = $44; //@line 5963
   $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 5964
   HEAP32[$275 >> 2] = $46; //@line 5965
   $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 5966
   HEAP32[$276 >> 2] = $48; //@line 5967
   $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 5968
   HEAP32[$277 >> 2] = $50; //@line 5969
   $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 5970
   HEAP32[$278 >> 2] = $52; //@line 5971
   $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 5972
   HEAP32[$279 >> 2] = $56; //@line 5973
   $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 5974
   HEAP32[$280 >> 2] = $58; //@line 5975
   $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 5976
   HEAP32[$281 >> 2] = $60; //@line 5977
   $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 5978
   HEAP32[$282 >> 2] = $62; //@line 5979
   $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 5980
   HEAP8[$283 >> 0] = $64; //@line 5981
   $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 5982
   HEAP32[$284 >> 2] = $66; //@line 5983
   $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 5984
   HEAP32[$285 >> 2] = $68; //@line 5985
   $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 5986
   HEAP32[$286 >> 2] = $70; //@line 5987
   $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 5988
   HEAP32[$287 >> 2] = $72; //@line 5989
   $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 5990
   HEAP32[$288 >> 2] = $74; //@line 5991
   $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 5992
   HEAP32[$289 >> 2] = $76; //@line 5993
   $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 5994
   HEAP8[$290 >> 0] = $78; //@line 5995
   $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 5996
   HEAP32[$291 >> 2] = $80; //@line 5997
   $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 5998
   HEAP8[$292 >> 0] = $82; //@line 5999
   $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 6000
   HEAP32[$293 >> 2] = $84; //@line 6001
   $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 6002
   HEAP32[$294 >> 2] = $86; //@line 6003
   $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 6004
   HEAP32[$295 >> 2] = $88; //@line 6005
   $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 6006
   HEAP32[$296 >> 2] = $90; //@line 6007
   $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 6008
   HEAP32[$297 >> 2] = $92; //@line 6009
   $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 6010
   HEAP32[$298 >> 2] = $94; //@line 6011
   $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 6012
   HEAP32[$299 >> 2] = $96; //@line 6013
   $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 6014
   HEAP32[$300 >> 2] = $98; //@line 6015
   $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 6016
   HEAP32[$301 >> 2] = $100; //@line 6017
   $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 6018
   HEAP32[$302 >> 2] = $102; //@line 6019
   $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 6020
   HEAP32[$303 >> 2] = $104; //@line 6021
   $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 6022
   HEAP32[$304 >> 2] = $106; //@line 6023
   $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 6024
   HEAP32[$305 >> 2] = $108; //@line 6025
   $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 6026
   HEAP32[$306 >> 2] = $110; //@line 6027
   $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 6028
   HEAP32[$307 >> 2] = $112; //@line 6029
   $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 6030
   HEAP32[$308 >> 2] = $114; //@line 6031
   $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 6032
   HEAP32[$309 >> 2] = $116; //@line 6033
   sp = STACKTOP; //@line 6034
   return;
  }
  HEAP8[___async_retval >> 0] = $251; //@line 6038
  ___async_unwind = 0; //@line 6039
  HEAP32[$ReallocAsyncCtx2 >> 2] = 489; //@line 6040
  $252 = $ReallocAsyncCtx2 + 4 | 0; //@line 6041
  HEAP32[$252 >> 2] = $2; //@line 6042
  $253 = $ReallocAsyncCtx2 + 8 | 0; //@line 6043
  HEAP32[$253 >> 2] = $4; //@line 6044
  $254 = $ReallocAsyncCtx2 + 12 | 0; //@line 6045
  HEAP32[$254 >> 2] = $6; //@line 6046
  $255 = $ReallocAsyncCtx2 + 16 | 0; //@line 6047
  HEAP32[$255 >> 2] = $8; //@line 6048
  $256 = $ReallocAsyncCtx2 + 20 | 0; //@line 6049
  HEAP32[$256 >> 2] = $10; //@line 6050
  $257 = $ReallocAsyncCtx2 + 24 | 0; //@line 6051
  HEAP32[$257 >> 2] = $12; //@line 6052
  $258 = $ReallocAsyncCtx2 + 28 | 0; //@line 6053
  HEAP32[$258 >> 2] = $14; //@line 6054
  $259 = $ReallocAsyncCtx2 + 32 | 0; //@line 6055
  HEAP32[$259 >> 2] = $16; //@line 6056
  $260 = $ReallocAsyncCtx2 + 36 | 0; //@line 6057
  HEAP32[$260 >> 2] = $18; //@line 6058
  $261 = $ReallocAsyncCtx2 + 40 | 0; //@line 6059
  HEAP32[$261 >> 2] = $20; //@line 6060
  $262 = $ReallocAsyncCtx2 + 44 | 0; //@line 6061
  HEAP32[$262 >> 2] = $22; //@line 6062
  $263 = $ReallocAsyncCtx2 + 48 | 0; //@line 6063
  HEAP32[$263 >> 2] = $24; //@line 6064
  $264 = $ReallocAsyncCtx2 + 52 | 0; //@line 6065
  HEAP32[$264 >> 2] = $26; //@line 6066
  $265 = $ReallocAsyncCtx2 + 56 | 0; //@line 6067
  HEAP32[$265 >> 2] = $28; //@line 6068
  $266 = $ReallocAsyncCtx2 + 60 | 0; //@line 6069
  HEAP32[$266 >> 2] = $30; //@line 6070
  $267 = $ReallocAsyncCtx2 + 64 | 0; //@line 6071
  HEAP32[$267 >> 2] = $32; //@line 6072
  $268 = $ReallocAsyncCtx2 + 68 | 0; //@line 6073
  HEAP32[$268 >> 2] = $34; //@line 6074
  $269 = $ReallocAsyncCtx2 + 72 | 0; //@line 6075
  HEAP32[$269 >> 2] = $36; //@line 6076
  $270 = $ReallocAsyncCtx2 + 76 | 0; //@line 6077
  HEAP32[$270 >> 2] = $38; //@line 6078
  $271 = $ReallocAsyncCtx2 + 80 | 0; //@line 6079
  HEAP32[$271 >> 2] = $40; //@line 6080
  $272 = $ReallocAsyncCtx2 + 84 | 0; //@line 6081
  HEAP8[$272 >> 0] = $240; //@line 6082
  $273 = $ReallocAsyncCtx2 + 88 | 0; //@line 6083
  HEAP32[$273 >> 2] = $42; //@line 6084
  $274 = $ReallocAsyncCtx2 + 92 | 0; //@line 6085
  HEAP32[$274 >> 2] = $44; //@line 6086
  $275 = $ReallocAsyncCtx2 + 96 | 0; //@line 6087
  HEAP32[$275 >> 2] = $46; //@line 6088
  $276 = $ReallocAsyncCtx2 + 100 | 0; //@line 6089
  HEAP32[$276 >> 2] = $48; //@line 6090
  $277 = $ReallocAsyncCtx2 + 104 | 0; //@line 6091
  HEAP32[$277 >> 2] = $50; //@line 6092
  $278 = $ReallocAsyncCtx2 + 108 | 0; //@line 6093
  HEAP32[$278 >> 2] = $52; //@line 6094
  $279 = $ReallocAsyncCtx2 + 112 | 0; //@line 6095
  HEAP32[$279 >> 2] = $56; //@line 6096
  $280 = $ReallocAsyncCtx2 + 116 | 0; //@line 6097
  HEAP32[$280 >> 2] = $58; //@line 6098
  $281 = $ReallocAsyncCtx2 + 120 | 0; //@line 6099
  HEAP32[$281 >> 2] = $60; //@line 6100
  $282 = $ReallocAsyncCtx2 + 124 | 0; //@line 6101
  HEAP32[$282 >> 2] = $62; //@line 6102
  $283 = $ReallocAsyncCtx2 + 128 | 0; //@line 6103
  HEAP8[$283 >> 0] = $64; //@line 6104
  $284 = $ReallocAsyncCtx2 + 132 | 0; //@line 6105
  HEAP32[$284 >> 2] = $66; //@line 6106
  $285 = $ReallocAsyncCtx2 + 136 | 0; //@line 6107
  HEAP32[$285 >> 2] = $68; //@line 6108
  $286 = $ReallocAsyncCtx2 + 140 | 0; //@line 6109
  HEAP32[$286 >> 2] = $70; //@line 6110
  $287 = $ReallocAsyncCtx2 + 144 | 0; //@line 6111
  HEAP32[$287 >> 2] = $72; //@line 6112
  $288 = $ReallocAsyncCtx2 + 148 | 0; //@line 6113
  HEAP32[$288 >> 2] = $74; //@line 6114
  $289 = $ReallocAsyncCtx2 + 152 | 0; //@line 6115
  HEAP32[$289 >> 2] = $76; //@line 6116
  $290 = $ReallocAsyncCtx2 + 156 | 0; //@line 6117
  HEAP8[$290 >> 0] = $78; //@line 6118
  $291 = $ReallocAsyncCtx2 + 160 | 0; //@line 6119
  HEAP32[$291 >> 2] = $80; //@line 6120
  $292 = $ReallocAsyncCtx2 + 164 | 0; //@line 6121
  HEAP8[$292 >> 0] = $82; //@line 6122
  $293 = $ReallocAsyncCtx2 + 168 | 0; //@line 6123
  HEAP32[$293 >> 2] = $84; //@line 6124
  $294 = $ReallocAsyncCtx2 + 172 | 0; //@line 6125
  HEAP32[$294 >> 2] = $86; //@line 6126
  $295 = $ReallocAsyncCtx2 + 176 | 0; //@line 6127
  HEAP32[$295 >> 2] = $88; //@line 6128
  $296 = $ReallocAsyncCtx2 + 180 | 0; //@line 6129
  HEAP32[$296 >> 2] = $90; //@line 6130
  $297 = $ReallocAsyncCtx2 + 184 | 0; //@line 6131
  HEAP32[$297 >> 2] = $92; //@line 6132
  $298 = $ReallocAsyncCtx2 + 188 | 0; //@line 6133
  HEAP32[$298 >> 2] = $94; //@line 6134
  $299 = $ReallocAsyncCtx2 + 192 | 0; //@line 6135
  HEAP32[$299 >> 2] = $96; //@line 6136
  $300 = $ReallocAsyncCtx2 + 196 | 0; //@line 6137
  HEAP32[$300 >> 2] = $98; //@line 6138
  $301 = $ReallocAsyncCtx2 + 200 | 0; //@line 6139
  HEAP32[$301 >> 2] = $100; //@line 6140
  $302 = $ReallocAsyncCtx2 + 204 | 0; //@line 6141
  HEAP32[$302 >> 2] = $102; //@line 6142
  $303 = $ReallocAsyncCtx2 + 208 | 0; //@line 6143
  HEAP32[$303 >> 2] = $104; //@line 6144
  $304 = $ReallocAsyncCtx2 + 212 | 0; //@line 6145
  HEAP32[$304 >> 2] = $106; //@line 6146
  $305 = $ReallocAsyncCtx2 + 216 | 0; //@line 6147
  HEAP32[$305 >> 2] = $108; //@line 6148
  $306 = $ReallocAsyncCtx2 + 220 | 0; //@line 6149
  HEAP32[$306 >> 2] = $110; //@line 6150
  $307 = $ReallocAsyncCtx2 + 224 | 0; //@line 6151
  HEAP32[$307 >> 2] = $112; //@line 6152
  $308 = $ReallocAsyncCtx2 + 228 | 0; //@line 6153
  HEAP32[$308 >> 2] = $114; //@line 6154
  $309 = $ReallocAsyncCtx2 + 232 | 0; //@line 6155
  HEAP32[$309 >> 2] = $116; //@line 6156
  sp = STACKTOP; //@line 6157
  return;
 } else if ((label | 0) == 13) {
  $313 = HEAP32[$311 >> 2] | 0; //@line 6161
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(236) | 0; //@line 6162
  $314 = FUNCTION_TABLE_ii[$313 & 15]($96) | 0; //@line 6163
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 6166
   $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 6167
   HEAP32[$315 >> 2] = $2; //@line 6168
   $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 6169
   HEAP32[$316 >> 2] = $4; //@line 6170
   $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 6171
   HEAP32[$317 >> 2] = $6; //@line 6172
   $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 6173
   HEAP32[$318 >> 2] = $8; //@line 6174
   $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 6175
   HEAP32[$319 >> 2] = $10; //@line 6176
   $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 6177
   HEAP32[$320 >> 2] = $12; //@line 6178
   $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 6179
   HEAP32[$321 >> 2] = $14; //@line 6180
   $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 6181
   HEAP32[$322 >> 2] = $16; //@line 6182
   $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 6183
   HEAP32[$323 >> 2] = $18; //@line 6184
   $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 6185
   HEAP32[$324 >> 2] = $20; //@line 6186
   $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 6187
   HEAP32[$325 >> 2] = $22; //@line 6188
   $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 6189
   HEAP32[$326 >> 2] = $24; //@line 6190
   $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 6191
   HEAP32[$327 >> 2] = $26; //@line 6192
   $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 6193
   HEAP32[$328 >> 2] = $28; //@line 6194
   $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 6195
   HEAP32[$329 >> 2] = $30; //@line 6196
   $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 6197
   HEAP32[$330 >> 2] = $32; //@line 6198
   $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 6199
   HEAP32[$331 >> 2] = $34; //@line 6200
   $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 6201
   HEAP32[$332 >> 2] = $36; //@line 6202
   $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 6203
   HEAP32[$333 >> 2] = $38; //@line 6204
   $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 6205
   HEAP32[$334 >> 2] = $40; //@line 6206
   $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 6207
   HEAP32[$335 >> 2] = $42; //@line 6208
   $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 6209
   HEAP32[$336 >> 2] = $44; //@line 6210
   $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 6211
   HEAP32[$337 >> 2] = $46; //@line 6212
   $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 6213
   HEAP32[$338 >> 2] = $48; //@line 6214
   $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 6215
   HEAP32[$339 >> 2] = $50; //@line 6216
   $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 6217
   HEAP32[$340 >> 2] = $52; //@line 6218
   $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 6219
   HEAP8[$341 >> 0] = $119; //@line 6220
   $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 6221
   HEAP32[$342 >> 2] = $56; //@line 6222
   $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 6223
   HEAP32[$343 >> 2] = $58; //@line 6224
   $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 6225
   HEAP32[$344 >> 2] = $60; //@line 6226
   $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 6227
   HEAP32[$345 >> 2] = $62; //@line 6228
   $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 6229
   HEAP8[$346 >> 0] = $64; //@line 6230
   $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 6231
   HEAP32[$347 >> 2] = $66; //@line 6232
   $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 6233
   HEAP32[$348 >> 2] = $68; //@line 6234
   $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 6235
   HEAP32[$349 >> 2] = $70; //@line 6236
   $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 6237
   HEAP32[$350 >> 2] = $72; //@line 6238
   $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 6239
   HEAP32[$351 >> 2] = $74; //@line 6240
   $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 6241
   HEAP32[$352 >> 2] = $76; //@line 6242
   $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 6243
   HEAP8[$353 >> 0] = $78; //@line 6244
   $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 6245
   HEAP32[$354 >> 2] = $80; //@line 6246
   $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 6247
   HEAP8[$355 >> 0] = $82; //@line 6248
   $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 6249
   HEAP32[$356 >> 2] = $84; //@line 6250
   $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 6251
   HEAP32[$357 >> 2] = $86; //@line 6252
   $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 6253
   HEAP32[$358 >> 2] = $88; //@line 6254
   $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 6255
   HEAP32[$359 >> 2] = $90; //@line 6256
   $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 6257
   HEAP32[$360 >> 2] = $92; //@line 6258
   $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 6259
   HEAP32[$361 >> 2] = $94; //@line 6260
   $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 6261
   HEAP32[$362 >> 2] = $96; //@line 6262
   $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 6263
   HEAP32[$363 >> 2] = $98; //@line 6264
   $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 6265
   HEAP32[$364 >> 2] = $100; //@line 6266
   $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 6267
   HEAP32[$365 >> 2] = $102; //@line 6268
   $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 6269
   HEAP32[$366 >> 2] = $104; //@line 6270
   $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 6271
   HEAP32[$367 >> 2] = $106; //@line 6272
   $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 6273
   HEAP32[$368 >> 2] = $108; //@line 6274
   $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 6275
   HEAP32[$369 >> 2] = $110; //@line 6276
   $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 6277
   HEAP32[$370 >> 2] = $112; //@line 6278
   $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 6279
   HEAP32[$371 >> 2] = $114; //@line 6280
   $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 6281
   HEAP32[$372 >> 2] = $116; //@line 6282
   sp = STACKTOP; //@line 6283
   return;
  }
  HEAP8[___async_retval >> 0] = $314; //@line 6287
  ___async_unwind = 0; //@line 6288
  HEAP32[$ReallocAsyncCtx3 >> 2] = 490; //@line 6289
  $315 = $ReallocAsyncCtx3 + 4 | 0; //@line 6290
  HEAP32[$315 >> 2] = $2; //@line 6291
  $316 = $ReallocAsyncCtx3 + 8 | 0; //@line 6292
  HEAP32[$316 >> 2] = $4; //@line 6293
  $317 = $ReallocAsyncCtx3 + 12 | 0; //@line 6294
  HEAP32[$317 >> 2] = $6; //@line 6295
  $318 = $ReallocAsyncCtx3 + 16 | 0; //@line 6296
  HEAP32[$318 >> 2] = $8; //@line 6297
  $319 = $ReallocAsyncCtx3 + 20 | 0; //@line 6298
  HEAP32[$319 >> 2] = $10; //@line 6299
  $320 = $ReallocAsyncCtx3 + 24 | 0; //@line 6300
  HEAP32[$320 >> 2] = $12; //@line 6301
  $321 = $ReallocAsyncCtx3 + 28 | 0; //@line 6302
  HEAP32[$321 >> 2] = $14; //@line 6303
  $322 = $ReallocAsyncCtx3 + 32 | 0; //@line 6304
  HEAP32[$322 >> 2] = $16; //@line 6305
  $323 = $ReallocAsyncCtx3 + 36 | 0; //@line 6306
  HEAP32[$323 >> 2] = $18; //@line 6307
  $324 = $ReallocAsyncCtx3 + 40 | 0; //@line 6308
  HEAP32[$324 >> 2] = $20; //@line 6309
  $325 = $ReallocAsyncCtx3 + 44 | 0; //@line 6310
  HEAP32[$325 >> 2] = $22; //@line 6311
  $326 = $ReallocAsyncCtx3 + 48 | 0; //@line 6312
  HEAP32[$326 >> 2] = $24; //@line 6313
  $327 = $ReallocAsyncCtx3 + 52 | 0; //@line 6314
  HEAP32[$327 >> 2] = $26; //@line 6315
  $328 = $ReallocAsyncCtx3 + 56 | 0; //@line 6316
  HEAP32[$328 >> 2] = $28; //@line 6317
  $329 = $ReallocAsyncCtx3 + 60 | 0; //@line 6318
  HEAP32[$329 >> 2] = $30; //@line 6319
  $330 = $ReallocAsyncCtx3 + 64 | 0; //@line 6320
  HEAP32[$330 >> 2] = $32; //@line 6321
  $331 = $ReallocAsyncCtx3 + 68 | 0; //@line 6322
  HEAP32[$331 >> 2] = $34; //@line 6323
  $332 = $ReallocAsyncCtx3 + 72 | 0; //@line 6324
  HEAP32[$332 >> 2] = $36; //@line 6325
  $333 = $ReallocAsyncCtx3 + 76 | 0; //@line 6326
  HEAP32[$333 >> 2] = $38; //@line 6327
  $334 = $ReallocAsyncCtx3 + 80 | 0; //@line 6328
  HEAP32[$334 >> 2] = $40; //@line 6329
  $335 = $ReallocAsyncCtx3 + 84 | 0; //@line 6330
  HEAP32[$335 >> 2] = $42; //@line 6331
  $336 = $ReallocAsyncCtx3 + 88 | 0; //@line 6332
  HEAP32[$336 >> 2] = $44; //@line 6333
  $337 = $ReallocAsyncCtx3 + 92 | 0; //@line 6334
  HEAP32[$337 >> 2] = $46; //@line 6335
  $338 = $ReallocAsyncCtx3 + 96 | 0; //@line 6336
  HEAP32[$338 >> 2] = $48; //@line 6337
  $339 = $ReallocAsyncCtx3 + 100 | 0; //@line 6338
  HEAP32[$339 >> 2] = $50; //@line 6339
  $340 = $ReallocAsyncCtx3 + 104 | 0; //@line 6340
  HEAP32[$340 >> 2] = $52; //@line 6341
  $341 = $ReallocAsyncCtx3 + 108 | 0; //@line 6342
  HEAP8[$341 >> 0] = $119; //@line 6343
  $342 = $ReallocAsyncCtx3 + 112 | 0; //@line 6344
  HEAP32[$342 >> 2] = $56; //@line 6345
  $343 = $ReallocAsyncCtx3 + 116 | 0; //@line 6346
  HEAP32[$343 >> 2] = $58; //@line 6347
  $344 = $ReallocAsyncCtx3 + 120 | 0; //@line 6348
  HEAP32[$344 >> 2] = $60; //@line 6349
  $345 = $ReallocAsyncCtx3 + 124 | 0; //@line 6350
  HEAP32[$345 >> 2] = $62; //@line 6351
  $346 = $ReallocAsyncCtx3 + 128 | 0; //@line 6352
  HEAP8[$346 >> 0] = $64; //@line 6353
  $347 = $ReallocAsyncCtx3 + 132 | 0; //@line 6354
  HEAP32[$347 >> 2] = $66; //@line 6355
  $348 = $ReallocAsyncCtx3 + 136 | 0; //@line 6356
  HEAP32[$348 >> 2] = $68; //@line 6357
  $349 = $ReallocAsyncCtx3 + 140 | 0; //@line 6358
  HEAP32[$349 >> 2] = $70; //@line 6359
  $350 = $ReallocAsyncCtx3 + 144 | 0; //@line 6360
  HEAP32[$350 >> 2] = $72; //@line 6361
  $351 = $ReallocAsyncCtx3 + 148 | 0; //@line 6362
  HEAP32[$351 >> 2] = $74; //@line 6363
  $352 = $ReallocAsyncCtx3 + 152 | 0; //@line 6364
  HEAP32[$352 >> 2] = $76; //@line 6365
  $353 = $ReallocAsyncCtx3 + 156 | 0; //@line 6366
  HEAP8[$353 >> 0] = $78; //@line 6367
  $354 = $ReallocAsyncCtx3 + 160 | 0; //@line 6368
  HEAP32[$354 >> 2] = $80; //@line 6369
  $355 = $ReallocAsyncCtx3 + 164 | 0; //@line 6370
  HEAP8[$355 >> 0] = $82; //@line 6371
  $356 = $ReallocAsyncCtx3 + 168 | 0; //@line 6372
  HEAP32[$356 >> 2] = $84; //@line 6373
  $357 = $ReallocAsyncCtx3 + 172 | 0; //@line 6374
  HEAP32[$357 >> 2] = $86; //@line 6375
  $358 = $ReallocAsyncCtx3 + 176 | 0; //@line 6376
  HEAP32[$358 >> 2] = $88; //@line 6377
  $359 = $ReallocAsyncCtx3 + 180 | 0; //@line 6378
  HEAP32[$359 >> 2] = $90; //@line 6379
  $360 = $ReallocAsyncCtx3 + 184 | 0; //@line 6380
  HEAP32[$360 >> 2] = $92; //@line 6381
  $361 = $ReallocAsyncCtx3 + 188 | 0; //@line 6382
  HEAP32[$361 >> 2] = $94; //@line 6383
  $362 = $ReallocAsyncCtx3 + 192 | 0; //@line 6384
  HEAP32[$362 >> 2] = $96; //@line 6385
  $363 = $ReallocAsyncCtx3 + 196 | 0; //@line 6386
  HEAP32[$363 >> 2] = $98; //@line 6387
  $364 = $ReallocAsyncCtx3 + 200 | 0; //@line 6388
  HEAP32[$364 >> 2] = $100; //@line 6389
  $365 = $ReallocAsyncCtx3 + 204 | 0; //@line 6390
  HEAP32[$365 >> 2] = $102; //@line 6391
  $366 = $ReallocAsyncCtx3 + 208 | 0; //@line 6392
  HEAP32[$366 >> 2] = $104; //@line 6393
  $367 = $ReallocAsyncCtx3 + 212 | 0; //@line 6394
  HEAP32[$367 >> 2] = $106; //@line 6395
  $368 = $ReallocAsyncCtx3 + 216 | 0; //@line 6396
  HEAP32[$368 >> 2] = $108; //@line 6397
  $369 = $ReallocAsyncCtx3 + 220 | 0; //@line 6398
  HEAP32[$369 >> 2] = $110; //@line 6399
  $370 = $ReallocAsyncCtx3 + 224 | 0; //@line 6400
  HEAP32[$370 >> 2] = $112; //@line 6401
  $371 = $ReallocAsyncCtx3 + 228 | 0; //@line 6402
  HEAP32[$371 >> 2] = $114; //@line 6403
  $372 = $ReallocAsyncCtx3 + 232 | 0; //@line 6404
  HEAP32[$372 >> 2] = $116; //@line 6405
  sp = STACKTOP; //@line 6406
  return;
 } else if ((label | 0) == 19) {
  $392 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 6413
  HEAP32[$42 >> 2] = (HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16 | (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0])) * 100; //@line 6434
  HEAP32[$34 >> 2] = 0; //@line 6435
  $413 = $$0$be + 6 << 24 >> 24; //@line 6436
  HEAP8[$56 >> 0] = HEAP8[$68 + ($$0$be + 5 & 255) >> 0] | 0; //@line 6440
  $419 = HEAP32[(HEAP32[$48 >> 2] | 0) + 8 >> 2] | 0; //@line 6443
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(236) | 0; //@line 6444
  $420 = FUNCTION_TABLE_iiii[$419 & 31]($94, $392, $10) | 0; //@line 6445
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 6448
   $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 6449
   HEAP32[$421 >> 2] = $2; //@line 6450
   $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 6451
   HEAP32[$422 >> 2] = $4; //@line 6452
   $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 6453
   HEAP32[$423 >> 2] = $6; //@line 6454
   $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 6455
   HEAP32[$424 >> 2] = $8; //@line 6456
   $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 6457
   HEAP32[$425 >> 2] = $10; //@line 6458
   $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 6459
   HEAP32[$426 >> 2] = $12; //@line 6460
   $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 6461
   HEAP32[$427 >> 2] = $14; //@line 6462
   $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 6463
   HEAP32[$428 >> 2] = $16; //@line 6464
   $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 6465
   HEAP32[$429 >> 2] = $18; //@line 6466
   $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 6467
   HEAP32[$430 >> 2] = $20; //@line 6468
   $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 6469
   HEAP32[$431 >> 2] = $22; //@line 6470
   $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 6471
   HEAP32[$432 >> 2] = $24; //@line 6472
   $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 6473
   HEAP32[$433 >> 2] = $26; //@line 6474
   $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 6475
   HEAP32[$434 >> 2] = $28; //@line 6476
   $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 6477
   HEAP32[$435 >> 2] = $30; //@line 6478
   $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 6479
   HEAP32[$436 >> 2] = $32; //@line 6480
   $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 6481
   HEAP32[$437 >> 2] = $34; //@line 6482
   $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 6483
   HEAP32[$438 >> 2] = $36; //@line 6484
   $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 6485
   HEAP32[$439 >> 2] = $38; //@line 6486
   $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 6487
   HEAP32[$440 >> 2] = $40; //@line 6488
   $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 6489
   HEAP32[$441 >> 2] = $42; //@line 6490
   $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 6491
   HEAP32[$442 >> 2] = $44; //@line 6492
   $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 6493
   HEAP32[$443 >> 2] = $46; //@line 6494
   $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 6495
   HEAP32[$444 >> 2] = $48; //@line 6496
   $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 6497
   HEAP32[$445 >> 2] = $50; //@line 6498
   $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 6499
   HEAP32[$446 >> 2] = $52; //@line 6500
   $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 6501
   HEAP32[$447 >> 2] = $56; //@line 6502
   $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 6503
   HEAP8[$448 >> 0] = $413; //@line 6504
   $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 6505
   HEAP32[$449 >> 2] = $58; //@line 6506
   $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 6507
   HEAP32[$450 >> 2] = $60; //@line 6508
   $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 6509
   HEAP32[$451 >> 2] = $62; //@line 6510
   $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 6511
   HEAP8[$452 >> 0] = $64; //@line 6512
   $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 6513
   HEAP32[$453 >> 2] = $66; //@line 6514
   $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 6515
   HEAP32[$454 >> 2] = $68; //@line 6516
   $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 6517
   HEAP32[$455 >> 2] = $70; //@line 6518
   $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 6519
   HEAP32[$456 >> 2] = $72; //@line 6520
   $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 6521
   HEAP32[$457 >> 2] = $74; //@line 6522
   $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 6523
   HEAP32[$458 >> 2] = $76; //@line 6524
   $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 6525
   HEAP8[$459 >> 0] = $78; //@line 6526
   $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 6527
   HEAP32[$460 >> 2] = $80; //@line 6528
   $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 6529
   HEAP8[$461 >> 0] = $82; //@line 6530
   $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 6531
   HEAP32[$462 >> 2] = $84; //@line 6532
   $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 6533
   HEAP32[$463 >> 2] = $86; //@line 6534
   $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 6535
   HEAP32[$464 >> 2] = $88; //@line 6536
   $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 6537
   HEAP32[$465 >> 2] = $90; //@line 6538
   $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 6539
   HEAP32[$466 >> 2] = $92; //@line 6540
   $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 6541
   HEAP32[$467 >> 2] = $94; //@line 6542
   $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 6543
   HEAP32[$468 >> 2] = $96; //@line 6544
   $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 6545
   HEAP32[$469 >> 2] = $98; //@line 6546
   $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 6547
   HEAP32[$470 >> 2] = $100; //@line 6548
   $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 6549
   HEAP32[$471 >> 2] = $102; //@line 6550
   $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 6551
   HEAP32[$472 >> 2] = $104; //@line 6552
   $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 6553
   HEAP32[$473 >> 2] = $106; //@line 6554
   $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 6555
   HEAP32[$474 >> 2] = $108; //@line 6556
   $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 6557
   HEAP32[$475 >> 2] = $110; //@line 6558
   $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 6559
   HEAP32[$476 >> 2] = $112; //@line 6560
   $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 6561
   HEAP32[$477 >> 2] = $114; //@line 6562
   $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 6563
   HEAP32[$478 >> 2] = $116; //@line 6564
   sp = STACKTOP; //@line 6565
   return;
  }
  HEAP8[___async_retval >> 0] = $420; //@line 6569
  ___async_unwind = 0; //@line 6570
  HEAP32[$ReallocAsyncCtx4 >> 2] = 491; //@line 6571
  $421 = $ReallocAsyncCtx4 + 4 | 0; //@line 6572
  HEAP32[$421 >> 2] = $2; //@line 6573
  $422 = $ReallocAsyncCtx4 + 8 | 0; //@line 6574
  HEAP32[$422 >> 2] = $4; //@line 6575
  $423 = $ReallocAsyncCtx4 + 12 | 0; //@line 6576
  HEAP32[$423 >> 2] = $6; //@line 6577
  $424 = $ReallocAsyncCtx4 + 16 | 0; //@line 6578
  HEAP32[$424 >> 2] = $8; //@line 6579
  $425 = $ReallocAsyncCtx4 + 20 | 0; //@line 6580
  HEAP32[$425 >> 2] = $10; //@line 6581
  $426 = $ReallocAsyncCtx4 + 24 | 0; //@line 6582
  HEAP32[$426 >> 2] = $12; //@line 6583
  $427 = $ReallocAsyncCtx4 + 28 | 0; //@line 6584
  HEAP32[$427 >> 2] = $14; //@line 6585
  $428 = $ReallocAsyncCtx4 + 32 | 0; //@line 6586
  HEAP32[$428 >> 2] = $16; //@line 6587
  $429 = $ReallocAsyncCtx4 + 36 | 0; //@line 6588
  HEAP32[$429 >> 2] = $18; //@line 6589
  $430 = $ReallocAsyncCtx4 + 40 | 0; //@line 6590
  HEAP32[$430 >> 2] = $20; //@line 6591
  $431 = $ReallocAsyncCtx4 + 44 | 0; //@line 6592
  HEAP32[$431 >> 2] = $22; //@line 6593
  $432 = $ReallocAsyncCtx4 + 48 | 0; //@line 6594
  HEAP32[$432 >> 2] = $24; //@line 6595
  $433 = $ReallocAsyncCtx4 + 52 | 0; //@line 6596
  HEAP32[$433 >> 2] = $26; //@line 6597
  $434 = $ReallocAsyncCtx4 + 56 | 0; //@line 6598
  HEAP32[$434 >> 2] = $28; //@line 6599
  $435 = $ReallocAsyncCtx4 + 60 | 0; //@line 6600
  HEAP32[$435 >> 2] = $30; //@line 6601
  $436 = $ReallocAsyncCtx4 + 64 | 0; //@line 6602
  HEAP32[$436 >> 2] = $32; //@line 6603
  $437 = $ReallocAsyncCtx4 + 68 | 0; //@line 6604
  HEAP32[$437 >> 2] = $34; //@line 6605
  $438 = $ReallocAsyncCtx4 + 72 | 0; //@line 6606
  HEAP32[$438 >> 2] = $36; //@line 6607
  $439 = $ReallocAsyncCtx4 + 76 | 0; //@line 6608
  HEAP32[$439 >> 2] = $38; //@line 6609
  $440 = $ReallocAsyncCtx4 + 80 | 0; //@line 6610
  HEAP32[$440 >> 2] = $40; //@line 6611
  $441 = $ReallocAsyncCtx4 + 84 | 0; //@line 6612
  HEAP32[$441 >> 2] = $42; //@line 6613
  $442 = $ReallocAsyncCtx4 + 88 | 0; //@line 6614
  HEAP32[$442 >> 2] = $44; //@line 6615
  $443 = $ReallocAsyncCtx4 + 92 | 0; //@line 6616
  HEAP32[$443 >> 2] = $46; //@line 6617
  $444 = $ReallocAsyncCtx4 + 96 | 0; //@line 6618
  HEAP32[$444 >> 2] = $48; //@line 6619
  $445 = $ReallocAsyncCtx4 + 100 | 0; //@line 6620
  HEAP32[$445 >> 2] = $50; //@line 6621
  $446 = $ReallocAsyncCtx4 + 104 | 0; //@line 6622
  HEAP32[$446 >> 2] = $52; //@line 6623
  $447 = $ReallocAsyncCtx4 + 108 | 0; //@line 6624
  HEAP32[$447 >> 2] = $56; //@line 6625
  $448 = $ReallocAsyncCtx4 + 112 | 0; //@line 6626
  HEAP8[$448 >> 0] = $413; //@line 6627
  $449 = $ReallocAsyncCtx4 + 116 | 0; //@line 6628
  HEAP32[$449 >> 2] = $58; //@line 6629
  $450 = $ReallocAsyncCtx4 + 120 | 0; //@line 6630
  HEAP32[$450 >> 2] = $60; //@line 6631
  $451 = $ReallocAsyncCtx4 + 124 | 0; //@line 6632
  HEAP32[$451 >> 2] = $62; //@line 6633
  $452 = $ReallocAsyncCtx4 + 128 | 0; //@line 6634
  HEAP8[$452 >> 0] = $64; //@line 6635
  $453 = $ReallocAsyncCtx4 + 132 | 0; //@line 6636
  HEAP32[$453 >> 2] = $66; //@line 6637
  $454 = $ReallocAsyncCtx4 + 136 | 0; //@line 6638
  HEAP32[$454 >> 2] = $68; //@line 6639
  $455 = $ReallocAsyncCtx4 + 140 | 0; //@line 6640
  HEAP32[$455 >> 2] = $70; //@line 6641
  $456 = $ReallocAsyncCtx4 + 144 | 0; //@line 6642
  HEAP32[$456 >> 2] = $72; //@line 6643
  $457 = $ReallocAsyncCtx4 + 148 | 0; //@line 6644
  HEAP32[$457 >> 2] = $74; //@line 6645
  $458 = $ReallocAsyncCtx4 + 152 | 0; //@line 6646
  HEAP32[$458 >> 2] = $76; //@line 6647
  $459 = $ReallocAsyncCtx4 + 156 | 0; //@line 6648
  HEAP8[$459 >> 0] = $78; //@line 6649
  $460 = $ReallocAsyncCtx4 + 160 | 0; //@line 6650
  HEAP32[$460 >> 2] = $80; //@line 6651
  $461 = $ReallocAsyncCtx4 + 164 | 0; //@line 6652
  HEAP8[$461 >> 0] = $82; //@line 6653
  $462 = $ReallocAsyncCtx4 + 168 | 0; //@line 6654
  HEAP32[$462 >> 2] = $84; //@line 6655
  $463 = $ReallocAsyncCtx4 + 172 | 0; //@line 6656
  HEAP32[$463 >> 2] = $86; //@line 6657
  $464 = $ReallocAsyncCtx4 + 176 | 0; //@line 6658
  HEAP32[$464 >> 2] = $88; //@line 6659
  $465 = $ReallocAsyncCtx4 + 180 | 0; //@line 6660
  HEAP32[$465 >> 2] = $90; //@line 6661
  $466 = $ReallocAsyncCtx4 + 184 | 0; //@line 6662
  HEAP32[$466 >> 2] = $92; //@line 6663
  $467 = $ReallocAsyncCtx4 + 188 | 0; //@line 6664
  HEAP32[$467 >> 2] = $94; //@line 6665
  $468 = $ReallocAsyncCtx4 + 192 | 0; //@line 6666
  HEAP32[$468 >> 2] = $96; //@line 6667
  $469 = $ReallocAsyncCtx4 + 196 | 0; //@line 6668
  HEAP32[$469 >> 2] = $98; //@line 6669
  $470 = $ReallocAsyncCtx4 + 200 | 0; //@line 6670
  HEAP32[$470 >> 2] = $100; //@line 6671
  $471 = $ReallocAsyncCtx4 + 204 | 0; //@line 6672
  HEAP32[$471 >> 2] = $102; //@line 6673
  $472 = $ReallocAsyncCtx4 + 208 | 0; //@line 6674
  HEAP32[$472 >> 2] = $104; //@line 6675
  $473 = $ReallocAsyncCtx4 + 212 | 0; //@line 6676
  HEAP32[$473 >> 2] = $106; //@line 6677
  $474 = $ReallocAsyncCtx4 + 216 | 0; //@line 6678
  HEAP32[$474 >> 2] = $108; //@line 6679
  $475 = $ReallocAsyncCtx4 + 220 | 0; //@line 6680
  HEAP32[$475 >> 2] = $110; //@line 6681
  $476 = $ReallocAsyncCtx4 + 224 | 0; //@line 6682
  HEAP32[$476 >> 2] = $112; //@line 6683
  $477 = $ReallocAsyncCtx4 + 228 | 0; //@line 6684
  HEAP32[$477 >> 2] = $114; //@line 6685
  $478 = $ReallocAsyncCtx4 + 232 | 0; //@line 6686
  HEAP32[$478 >> 2] = $116; //@line 6687
  sp = STACKTOP; //@line 6688
  return;
 } else if ((label | 0) == 25) {
  $499 = $$0$be + 2 << 24 >> 24; //@line 6692
  $503 = HEAPU8[$68 + ($119 & 255) >> 0] | 0; //@line 6696
  $505 = $503 >>> 5 & 1; //@line 6699
  $507 = $503 >>> 4 & 1; //@line 6702
  $510 = HEAP32[(HEAP32[$28 >> 2] | 0) + 44 >> 2] | 0; //@line 6705
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(248) | 0; //@line 6706
  $511 = FUNCTION_TABLE_iiii[$510 & 31]($94, $507, $505) | 0; //@line 6707
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 6710
   $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 6711
   HEAP32[$512 >> 2] = $2; //@line 6712
   $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 6713
   HEAP32[$513 >> 2] = $4; //@line 6714
   $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 6715
   HEAP32[$514 >> 2] = $6; //@line 6716
   $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 6717
   HEAP32[$515 >> 2] = $8; //@line 6718
   $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 6719
   HEAP32[$516 >> 2] = $10; //@line 6720
   $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 6721
   HEAP32[$517 >> 2] = $12; //@line 6722
   $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 6723
   HEAP32[$518 >> 2] = $14; //@line 6724
   $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 6725
   HEAP32[$519 >> 2] = $16; //@line 6726
   $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 6727
   HEAP32[$520 >> 2] = $18; //@line 6728
   $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 6729
   HEAP32[$521 >> 2] = $20; //@line 6730
   $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 6731
   HEAP32[$522 >> 2] = $22; //@line 6732
   $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 6733
   HEAP32[$523 >> 2] = $24; //@line 6734
   $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 6735
   HEAP32[$524 >> 2] = $26; //@line 6736
   $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 6737
   HEAP32[$525 >> 2] = $28; //@line 6738
   $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 6739
   HEAP32[$526 >> 2] = $30; //@line 6740
   $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 6741
   HEAP32[$527 >> 2] = $32; //@line 6742
   $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 6743
   HEAP32[$528 >> 2] = $34; //@line 6744
   $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 6745
   HEAP32[$529 >> 2] = $36; //@line 6746
   $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 6747
   HEAP32[$530 >> 2] = $38; //@line 6748
   $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 6749
   HEAP32[$531 >> 2] = $40; //@line 6750
   $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 6751
   HEAP32[$532 >> 2] = $42; //@line 6752
   $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 6753
   HEAP32[$533 >> 2] = $44; //@line 6754
   $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 6755
   HEAP32[$534 >> 2] = $46; //@line 6756
   $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 6757
   HEAP8[$535 >> 0] = $507; //@line 6758
   $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 6759
   HEAP32[$536 >> 2] = $48; //@line 6760
   $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 6761
   HEAP32[$537 >> 2] = $50; //@line 6762
   $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 6763
   HEAP32[$538 >> 2] = $52; //@line 6764
   $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 6765
   HEAP32[$539 >> 2] = $56; //@line 6766
   $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 6767
   HEAP32[$540 >> 2] = $58; //@line 6768
   $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 6769
   HEAP32[$541 >> 2] = $60; //@line 6770
   $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 6771
   HEAP32[$542 >> 2] = $62; //@line 6772
   $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 6773
   HEAP8[$543 >> 0] = $64; //@line 6774
   $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 6775
   HEAP32[$544 >> 2] = $66; //@line 6776
   $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 6777
   HEAP32[$545 >> 2] = $68; //@line 6778
   $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 6779
   HEAP32[$546 >> 2] = $70; //@line 6780
   $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 6781
   HEAP32[$547 >> 2] = $72; //@line 6782
   $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 6783
   HEAP32[$548 >> 2] = $74; //@line 6784
   $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 6785
   HEAP32[$549 >> 2] = $76; //@line 6786
   $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 6787
   HEAP8[$550 >> 0] = $78; //@line 6788
   $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 6789
   HEAP32[$551 >> 2] = $80; //@line 6790
   $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 6791
   HEAP8[$552 >> 0] = $82; //@line 6792
   $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 6793
   HEAP32[$553 >> 2] = $84; //@line 6794
   $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 6795
   HEAP32[$554 >> 2] = $86; //@line 6796
   $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 6797
   HEAP32[$555 >> 2] = $88; //@line 6798
   $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 6799
   HEAP32[$556 >> 2] = $90; //@line 6800
   $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 6801
   HEAP32[$557 >> 2] = $92; //@line 6802
   $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 6803
   HEAP32[$558 >> 2] = $94; //@line 6804
   $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 6805
   HEAP32[$559 >> 2] = $96; //@line 6806
   $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 6807
   HEAP8[$560 >> 0] = $499; //@line 6808
   $561 = $ReallocAsyncCtx5 + 197 | 0; //@line 6809
   HEAP8[$561 >> 0] = $505; //@line 6810
   $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 6811
   HEAP32[$562 >> 2] = $98; //@line 6812
   $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 6813
   HEAP32[$563 >> 2] = $100; //@line 6814
   $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 6815
   HEAP32[$564 >> 2] = $503; //@line 6816
   $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 6817
   HEAP32[$565 >> 2] = $$0107$be; //@line 6818
   $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 6819
   HEAP32[$566 >> 2] = $102; //@line 6820
   $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 6821
   HEAP32[$567 >> 2] = $104; //@line 6822
   $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 6823
   HEAP32[$568 >> 2] = $106; //@line 6824
   $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 6825
   HEAP32[$569 >> 2] = $108; //@line 6826
   $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 6827
   HEAP32[$570 >> 2] = $110; //@line 6828
   $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 6829
   HEAP32[$571 >> 2] = $112; //@line 6830
   $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 6831
   HEAP32[$572 >> 2] = $114; //@line 6832
   $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 6833
   HEAP32[$573 >> 2] = $116; //@line 6834
   sp = STACKTOP; //@line 6835
   return;
  }
  HEAP8[___async_retval >> 0] = $511 & 1; //@line 6840
  ___async_unwind = 0; //@line 6841
  HEAP32[$ReallocAsyncCtx5 >> 2] = 492; //@line 6842
  $512 = $ReallocAsyncCtx5 + 4 | 0; //@line 6843
  HEAP32[$512 >> 2] = $2; //@line 6844
  $513 = $ReallocAsyncCtx5 + 8 | 0; //@line 6845
  HEAP32[$513 >> 2] = $4; //@line 6846
  $514 = $ReallocAsyncCtx5 + 12 | 0; //@line 6847
  HEAP32[$514 >> 2] = $6; //@line 6848
  $515 = $ReallocAsyncCtx5 + 16 | 0; //@line 6849
  HEAP32[$515 >> 2] = $8; //@line 6850
  $516 = $ReallocAsyncCtx5 + 20 | 0; //@line 6851
  HEAP32[$516 >> 2] = $10; //@line 6852
  $517 = $ReallocAsyncCtx5 + 24 | 0; //@line 6853
  HEAP32[$517 >> 2] = $12; //@line 6854
  $518 = $ReallocAsyncCtx5 + 28 | 0; //@line 6855
  HEAP32[$518 >> 2] = $14; //@line 6856
  $519 = $ReallocAsyncCtx5 + 32 | 0; //@line 6857
  HEAP32[$519 >> 2] = $16; //@line 6858
  $520 = $ReallocAsyncCtx5 + 36 | 0; //@line 6859
  HEAP32[$520 >> 2] = $18; //@line 6860
  $521 = $ReallocAsyncCtx5 + 40 | 0; //@line 6861
  HEAP32[$521 >> 2] = $20; //@line 6862
  $522 = $ReallocAsyncCtx5 + 44 | 0; //@line 6863
  HEAP32[$522 >> 2] = $22; //@line 6864
  $523 = $ReallocAsyncCtx5 + 48 | 0; //@line 6865
  HEAP32[$523 >> 2] = $24; //@line 6866
  $524 = $ReallocAsyncCtx5 + 52 | 0; //@line 6867
  HEAP32[$524 >> 2] = $26; //@line 6868
  $525 = $ReallocAsyncCtx5 + 56 | 0; //@line 6869
  HEAP32[$525 >> 2] = $28; //@line 6870
  $526 = $ReallocAsyncCtx5 + 60 | 0; //@line 6871
  HEAP32[$526 >> 2] = $30; //@line 6872
  $527 = $ReallocAsyncCtx5 + 64 | 0; //@line 6873
  HEAP32[$527 >> 2] = $32; //@line 6874
  $528 = $ReallocAsyncCtx5 + 68 | 0; //@line 6875
  HEAP32[$528 >> 2] = $34; //@line 6876
  $529 = $ReallocAsyncCtx5 + 72 | 0; //@line 6877
  HEAP32[$529 >> 2] = $36; //@line 6878
  $530 = $ReallocAsyncCtx5 + 76 | 0; //@line 6879
  HEAP32[$530 >> 2] = $38; //@line 6880
  $531 = $ReallocAsyncCtx5 + 80 | 0; //@line 6881
  HEAP32[$531 >> 2] = $40; //@line 6882
  $532 = $ReallocAsyncCtx5 + 84 | 0; //@line 6883
  HEAP32[$532 >> 2] = $42; //@line 6884
  $533 = $ReallocAsyncCtx5 + 88 | 0; //@line 6885
  HEAP32[$533 >> 2] = $44; //@line 6886
  $534 = $ReallocAsyncCtx5 + 92 | 0; //@line 6887
  HEAP32[$534 >> 2] = $46; //@line 6888
  $535 = $ReallocAsyncCtx5 + 96 | 0; //@line 6889
  HEAP8[$535 >> 0] = $507; //@line 6890
  $536 = $ReallocAsyncCtx5 + 100 | 0; //@line 6891
  HEAP32[$536 >> 2] = $48; //@line 6892
  $537 = $ReallocAsyncCtx5 + 104 | 0; //@line 6893
  HEAP32[$537 >> 2] = $50; //@line 6894
  $538 = $ReallocAsyncCtx5 + 108 | 0; //@line 6895
  HEAP32[$538 >> 2] = $52; //@line 6896
  $539 = $ReallocAsyncCtx5 + 112 | 0; //@line 6897
  HEAP32[$539 >> 2] = $56; //@line 6898
  $540 = $ReallocAsyncCtx5 + 116 | 0; //@line 6899
  HEAP32[$540 >> 2] = $58; //@line 6900
  $541 = $ReallocAsyncCtx5 + 120 | 0; //@line 6901
  HEAP32[$541 >> 2] = $60; //@line 6902
  $542 = $ReallocAsyncCtx5 + 124 | 0; //@line 6903
  HEAP32[$542 >> 2] = $62; //@line 6904
  $543 = $ReallocAsyncCtx5 + 128 | 0; //@line 6905
  HEAP8[$543 >> 0] = $64; //@line 6906
  $544 = $ReallocAsyncCtx5 + 132 | 0; //@line 6907
  HEAP32[$544 >> 2] = $66; //@line 6908
  $545 = $ReallocAsyncCtx5 + 136 | 0; //@line 6909
  HEAP32[$545 >> 2] = $68; //@line 6910
  $546 = $ReallocAsyncCtx5 + 140 | 0; //@line 6911
  HEAP32[$546 >> 2] = $70; //@line 6912
  $547 = $ReallocAsyncCtx5 + 144 | 0; //@line 6913
  HEAP32[$547 >> 2] = $72; //@line 6914
  $548 = $ReallocAsyncCtx5 + 148 | 0; //@line 6915
  HEAP32[$548 >> 2] = $74; //@line 6916
  $549 = $ReallocAsyncCtx5 + 152 | 0; //@line 6917
  HEAP32[$549 >> 2] = $76; //@line 6918
  $550 = $ReallocAsyncCtx5 + 156 | 0; //@line 6919
  HEAP8[$550 >> 0] = $78; //@line 6920
  $551 = $ReallocAsyncCtx5 + 160 | 0; //@line 6921
  HEAP32[$551 >> 2] = $80; //@line 6922
  $552 = $ReallocAsyncCtx5 + 164 | 0; //@line 6923
  HEAP8[$552 >> 0] = $82; //@line 6924
  $553 = $ReallocAsyncCtx5 + 168 | 0; //@line 6925
  HEAP32[$553 >> 2] = $84; //@line 6926
  $554 = $ReallocAsyncCtx5 + 172 | 0; //@line 6927
  HEAP32[$554 >> 2] = $86; //@line 6928
  $555 = $ReallocAsyncCtx5 + 176 | 0; //@line 6929
  HEAP32[$555 >> 2] = $88; //@line 6930
  $556 = $ReallocAsyncCtx5 + 180 | 0; //@line 6931
  HEAP32[$556 >> 2] = $90; //@line 6932
  $557 = $ReallocAsyncCtx5 + 184 | 0; //@line 6933
  HEAP32[$557 >> 2] = $92; //@line 6934
  $558 = $ReallocAsyncCtx5 + 188 | 0; //@line 6935
  HEAP32[$558 >> 2] = $94; //@line 6936
  $559 = $ReallocAsyncCtx5 + 192 | 0; //@line 6937
  HEAP32[$559 >> 2] = $96; //@line 6938
  $560 = $ReallocAsyncCtx5 + 196 | 0; //@line 6939
  HEAP8[$560 >> 0] = $499; //@line 6940
  $561 = $ReallocAsyncCtx5 + 197 | 0; //@line 6941
  HEAP8[$561 >> 0] = $505; //@line 6942
  $562 = $ReallocAsyncCtx5 + 200 | 0; //@line 6943
  HEAP32[$562 >> 2] = $98; //@line 6944
  $563 = $ReallocAsyncCtx5 + 204 | 0; //@line 6945
  HEAP32[$563 >> 2] = $100; //@line 6946
  $564 = $ReallocAsyncCtx5 + 208 | 0; //@line 6947
  HEAP32[$564 >> 2] = $503; //@line 6948
  $565 = $ReallocAsyncCtx5 + 212 | 0; //@line 6949
  HEAP32[$565 >> 2] = $$0107$be; //@line 6950
  $566 = $ReallocAsyncCtx5 + 216 | 0; //@line 6951
  HEAP32[$566 >> 2] = $102; //@line 6952
  $567 = $ReallocAsyncCtx5 + 220 | 0; //@line 6953
  HEAP32[$567 >> 2] = $104; //@line 6954
  $568 = $ReallocAsyncCtx5 + 224 | 0; //@line 6955
  HEAP32[$568 >> 2] = $106; //@line 6956
  $569 = $ReallocAsyncCtx5 + 228 | 0; //@line 6957
  HEAP32[$569 >> 2] = $108; //@line 6958
  $570 = $ReallocAsyncCtx5 + 232 | 0; //@line 6959
  HEAP32[$570 >> 2] = $110; //@line 6960
  $571 = $ReallocAsyncCtx5 + 236 | 0; //@line 6961
  HEAP32[$571 >> 2] = $112; //@line 6962
  $572 = $ReallocAsyncCtx5 + 240 | 0; //@line 6963
  HEAP32[$572 >> 2] = $114; //@line 6964
  $573 = $ReallocAsyncCtx5 + 244 | 0; //@line 6965
  HEAP32[$573 >> 2] = $116; //@line 6966
  sp = STACKTOP; //@line 6967
  return;
 } else if ((label | 0) == 28) {
  $578 = HEAP8[$68 + ($119 & 255) >> 0] | 0; //@line 6974
  $591 = $$0$be + 5 << 24 >> 24; //@line 6987
  $598 = (HEAPU8[$68 + ($$0$be + 3 & 255) >> 0] << 8 | HEAPU8[$68 + ($$0$be + 2 & 255) >> 0] | HEAPU8[$68 + ($$0$be + 4 & 255) >> 0] << 16) * 100 | 0; //@line 6994
  $601 = HEAP32[(HEAP32[$116 >> 2] | 0) + 48 >> 2] | 0; //@line 6997
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(236) | 0; //@line 6998
  $602 = FUNCTION_TABLE_iiii[$601 & 31]($94, $578, $598) | 0; //@line 6999
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 7002
   $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 7003
   HEAP32[$603 >> 2] = $2; //@line 7004
   $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 7005
   HEAP32[$604 >> 2] = $4; //@line 7006
   $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 7007
   HEAP32[$605 >> 2] = $6; //@line 7008
   $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 7009
   HEAP32[$606 >> 2] = $8; //@line 7010
   $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 7011
   HEAP32[$607 >> 2] = $10; //@line 7012
   $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 7013
   HEAP32[$608 >> 2] = $12; //@line 7014
   $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 7015
   HEAP32[$609 >> 2] = $14; //@line 7016
   $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 7017
   HEAP32[$610 >> 2] = $16; //@line 7018
   $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 7019
   HEAP32[$611 >> 2] = $18; //@line 7020
   $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 7021
   HEAP32[$612 >> 2] = $20; //@line 7022
   $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 7023
   HEAP32[$613 >> 2] = $22; //@line 7024
   $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 7025
   HEAP32[$614 >> 2] = $24; //@line 7026
   $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 7027
   HEAP32[$615 >> 2] = $26; //@line 7028
   $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 7029
   HEAP32[$616 >> 2] = $28; //@line 7030
   $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 7031
   HEAP32[$617 >> 2] = $30; //@line 7032
   $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 7033
   HEAP32[$618 >> 2] = $32; //@line 7034
   $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 7035
   HEAP32[$619 >> 2] = $34; //@line 7036
   $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 7037
   HEAP32[$620 >> 2] = $36; //@line 7038
   $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 7039
   HEAP32[$621 >> 2] = $38; //@line 7040
   $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 7041
   HEAP32[$622 >> 2] = $40; //@line 7042
   $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 7043
   HEAP32[$623 >> 2] = $42; //@line 7044
   $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 7045
   HEAP32[$624 >> 2] = $44; //@line 7046
   $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 7047
   HEAP32[$625 >> 2] = $46; //@line 7048
   $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 7049
   HEAP32[$626 >> 2] = $48; //@line 7050
   $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 7051
   HEAP32[$627 >> 2] = $50; //@line 7052
   $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 7053
   HEAP32[$628 >> 2] = $52; //@line 7054
   $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 7055
   HEAP32[$629 >> 2] = $56; //@line 7056
   $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 7057
   HEAP32[$630 >> 2] = $58; //@line 7058
   $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 7059
   HEAP32[$631 >> 2] = $60; //@line 7060
   $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 7061
   HEAP32[$632 >> 2] = $62; //@line 7062
   $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 7063
   HEAP8[$633 >> 0] = $64; //@line 7064
   $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 7065
   HEAP32[$634 >> 2] = $66; //@line 7066
   $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 7067
   HEAP8[$635 >> 0] = $591; //@line 7068
   $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 7069
   HEAP32[$636 >> 2] = $68; //@line 7070
   $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 7071
   HEAP32[$637 >> 2] = $70; //@line 7072
   $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 7073
   HEAP32[$638 >> 2] = $72; //@line 7074
   $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 7075
   HEAP32[$639 >> 2] = $74; //@line 7076
   $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 7077
   HEAP32[$640 >> 2] = $76; //@line 7078
   $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 7079
   HEAP8[$641 >> 0] = $78; //@line 7080
   $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 7081
   HEAP32[$642 >> 2] = $80; //@line 7082
   $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 7083
   HEAP8[$643 >> 0] = $82; //@line 7084
   $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 7085
   HEAP32[$644 >> 2] = $84; //@line 7086
   $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 7087
   HEAP32[$645 >> 2] = $86; //@line 7088
   $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 7089
   HEAP32[$646 >> 2] = $88; //@line 7090
   $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 7091
   HEAP32[$647 >> 2] = $90; //@line 7092
   $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 7093
   HEAP32[$648 >> 2] = $92; //@line 7094
   $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 7095
   HEAP32[$649 >> 2] = $94; //@line 7096
   $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 7097
   HEAP32[$650 >> 2] = $96; //@line 7098
   $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 7099
   HEAP32[$651 >> 2] = $98; //@line 7100
   $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 7101
   HEAP32[$652 >> 2] = $100; //@line 7102
   $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 7103
   HEAP32[$653 >> 2] = $102; //@line 7104
   $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 7105
   HEAP32[$654 >> 2] = $104; //@line 7106
   $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 7107
   HEAP32[$655 >> 2] = $106; //@line 7108
   $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 7109
   HEAP32[$656 >> 2] = $108; //@line 7110
   $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 7111
   HEAP32[$657 >> 2] = $110; //@line 7112
   $658 = $ReallocAsyncCtx6 + 224 | 0; //@line 7113
   HEAP32[$658 >> 2] = $112; //@line 7114
   $659 = $ReallocAsyncCtx6 + 228 | 0; //@line 7115
   HEAP32[$659 >> 2] = $114; //@line 7116
   $660 = $ReallocAsyncCtx6 + 232 | 0; //@line 7117
   HEAP32[$660 >> 2] = $116; //@line 7118
   sp = STACKTOP; //@line 7119
   return;
  }
  HEAP8[___async_retval >> 0] = $602; //@line 7123
  ___async_unwind = 0; //@line 7124
  HEAP32[$ReallocAsyncCtx6 >> 2] = 493; //@line 7125
  $603 = $ReallocAsyncCtx6 + 4 | 0; //@line 7126
  HEAP32[$603 >> 2] = $2; //@line 7127
  $604 = $ReallocAsyncCtx6 + 8 | 0; //@line 7128
  HEAP32[$604 >> 2] = $4; //@line 7129
  $605 = $ReallocAsyncCtx6 + 12 | 0; //@line 7130
  HEAP32[$605 >> 2] = $6; //@line 7131
  $606 = $ReallocAsyncCtx6 + 16 | 0; //@line 7132
  HEAP32[$606 >> 2] = $8; //@line 7133
  $607 = $ReallocAsyncCtx6 + 20 | 0; //@line 7134
  HEAP32[$607 >> 2] = $10; //@line 7135
  $608 = $ReallocAsyncCtx6 + 24 | 0; //@line 7136
  HEAP32[$608 >> 2] = $12; //@line 7137
  $609 = $ReallocAsyncCtx6 + 28 | 0; //@line 7138
  HEAP32[$609 >> 2] = $14; //@line 7139
  $610 = $ReallocAsyncCtx6 + 32 | 0; //@line 7140
  HEAP32[$610 >> 2] = $16; //@line 7141
  $611 = $ReallocAsyncCtx6 + 36 | 0; //@line 7142
  HEAP32[$611 >> 2] = $18; //@line 7143
  $612 = $ReallocAsyncCtx6 + 40 | 0; //@line 7144
  HEAP32[$612 >> 2] = $20; //@line 7145
  $613 = $ReallocAsyncCtx6 + 44 | 0; //@line 7146
  HEAP32[$613 >> 2] = $22; //@line 7147
  $614 = $ReallocAsyncCtx6 + 48 | 0; //@line 7148
  HEAP32[$614 >> 2] = $24; //@line 7149
  $615 = $ReallocAsyncCtx6 + 52 | 0; //@line 7150
  HEAP32[$615 >> 2] = $26; //@line 7151
  $616 = $ReallocAsyncCtx6 + 56 | 0; //@line 7152
  HEAP32[$616 >> 2] = $28; //@line 7153
  $617 = $ReallocAsyncCtx6 + 60 | 0; //@line 7154
  HEAP32[$617 >> 2] = $30; //@line 7155
  $618 = $ReallocAsyncCtx6 + 64 | 0; //@line 7156
  HEAP32[$618 >> 2] = $32; //@line 7157
  $619 = $ReallocAsyncCtx6 + 68 | 0; //@line 7158
  HEAP32[$619 >> 2] = $34; //@line 7159
  $620 = $ReallocAsyncCtx6 + 72 | 0; //@line 7160
  HEAP32[$620 >> 2] = $36; //@line 7161
  $621 = $ReallocAsyncCtx6 + 76 | 0; //@line 7162
  HEAP32[$621 >> 2] = $38; //@line 7163
  $622 = $ReallocAsyncCtx6 + 80 | 0; //@line 7164
  HEAP32[$622 >> 2] = $40; //@line 7165
  $623 = $ReallocAsyncCtx6 + 84 | 0; //@line 7166
  HEAP32[$623 >> 2] = $42; //@line 7167
  $624 = $ReallocAsyncCtx6 + 88 | 0; //@line 7168
  HEAP32[$624 >> 2] = $44; //@line 7169
  $625 = $ReallocAsyncCtx6 + 92 | 0; //@line 7170
  HEAP32[$625 >> 2] = $46; //@line 7171
  $626 = $ReallocAsyncCtx6 + 96 | 0; //@line 7172
  HEAP32[$626 >> 2] = $48; //@line 7173
  $627 = $ReallocAsyncCtx6 + 100 | 0; //@line 7174
  HEAP32[$627 >> 2] = $50; //@line 7175
  $628 = $ReallocAsyncCtx6 + 104 | 0; //@line 7176
  HEAP32[$628 >> 2] = $52; //@line 7177
  $629 = $ReallocAsyncCtx6 + 108 | 0; //@line 7178
  HEAP32[$629 >> 2] = $56; //@line 7179
  $630 = $ReallocAsyncCtx6 + 112 | 0; //@line 7180
  HEAP32[$630 >> 2] = $58; //@line 7181
  $631 = $ReallocAsyncCtx6 + 116 | 0; //@line 7182
  HEAP32[$631 >> 2] = $60; //@line 7183
  $632 = $ReallocAsyncCtx6 + 120 | 0; //@line 7184
  HEAP32[$632 >> 2] = $62; //@line 7185
  $633 = $ReallocAsyncCtx6 + 124 | 0; //@line 7186
  HEAP8[$633 >> 0] = $64; //@line 7187
  $634 = $ReallocAsyncCtx6 + 128 | 0; //@line 7188
  HEAP32[$634 >> 2] = $66; //@line 7189
  $635 = $ReallocAsyncCtx6 + 132 | 0; //@line 7190
  HEAP8[$635 >> 0] = $591; //@line 7191
  $636 = $ReallocAsyncCtx6 + 136 | 0; //@line 7192
  HEAP32[$636 >> 2] = $68; //@line 7193
  $637 = $ReallocAsyncCtx6 + 140 | 0; //@line 7194
  HEAP32[$637 >> 2] = $70; //@line 7195
  $638 = $ReallocAsyncCtx6 + 144 | 0; //@line 7196
  HEAP32[$638 >> 2] = $72; //@line 7197
  $639 = $ReallocAsyncCtx6 + 148 | 0; //@line 7198
  HEAP32[$639 >> 2] = $74; //@line 7199
  $640 = $ReallocAsyncCtx6 + 152 | 0; //@line 7200
  HEAP32[$640 >> 2] = $76; //@line 7201
  $641 = $ReallocAsyncCtx6 + 156 | 0; //@line 7202
  HEAP8[$641 >> 0] = $78; //@line 7203
  $642 = $ReallocAsyncCtx6 + 160 | 0; //@line 7204
  HEAP32[$642 >> 2] = $80; //@line 7205
  $643 = $ReallocAsyncCtx6 + 164 | 0; //@line 7206
  HEAP8[$643 >> 0] = $82; //@line 7207
  $644 = $ReallocAsyncCtx6 + 168 | 0; //@line 7208
  HEAP32[$644 >> 2] = $84; //@line 7209
  $645 = $ReallocAsyncCtx6 + 172 | 0; //@line 7210
  HEAP32[$645 >> 2] = $86; //@line 7211
  $646 = $ReallocAsyncCtx6 + 176 | 0; //@line 7212
  HEAP32[$646 >> 2] = $88; //@line 7213
  $647 = $ReallocAsyncCtx6 + 180 | 0; //@line 7214
  HEAP32[$647 >> 2] = $90; //@line 7215
  $648 = $ReallocAsyncCtx6 + 184 | 0; //@line 7216
  HEAP32[$648 >> 2] = $92; //@line 7217
  $649 = $ReallocAsyncCtx6 + 188 | 0; //@line 7218
  HEAP32[$649 >> 2] = $94; //@line 7219
  $650 = $ReallocAsyncCtx6 + 192 | 0; //@line 7220
  HEAP32[$650 >> 2] = $96; //@line 7221
  $651 = $ReallocAsyncCtx6 + 196 | 0; //@line 7222
  HEAP32[$651 >> 2] = $98; //@line 7223
  $652 = $ReallocAsyncCtx6 + 200 | 0; //@line 7224
  HEAP32[$652 >> 2] = $100; //@line 7225
  $653 = $ReallocAsyncCtx6 + 204 | 0; //@line 7226
  HEAP32[$653 >> 2] = $102; //@line 7227
  $654 = $ReallocAsyncCtx6 + 208 | 0; //@line 7228
  HEAP32[$654 >> 2] = $104; //@line 7229
  $655 = $ReallocAsyncCtx6 + 212 | 0; //@line 7230
  HEAP32[$655 >> 2] = $106; //@line 7231
  $656 = $ReallocAsyncCtx6 + 216 | 0; //@line 7232
  HEAP32[$656 >> 2] = $108; //@line 7233
  $657 = $ReallocAsyncCtx6 + 220 | 0; //@line 7234
  HEAP32[$657 >> 2] = $110; //@line 7235
  $658 = $ReallocAsyncCtx6 + 224 | 0; //@line 7236
  HEAP32[$658 >> 2] = $112; //@line 7237
  $659 = $ReallocAsyncCtx6 + 228 | 0; //@line 7238
  HEAP32[$659 >> 2] = $114; //@line 7239
  $660 = $ReallocAsyncCtx6 + 232 | 0; //@line 7240
  HEAP32[$660 >> 2] = $116; //@line 7241
  sp = STACKTOP; //@line 7242
  return;
 } else if ((label | 0) == 31) {
  HEAP32[___async_retval >> 2] = $$0107$be; //@line 7247
  return;
 }
}
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 8254
 STACKTOP = STACKTOP + 16 | 0; //@line 8255
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8255
 $1 = sp; //@line 8256
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 8263
   $7 = $6 >>> 3; //@line 8264
   $8 = HEAP32[5928] | 0; //@line 8265
   $9 = $8 >>> $7; //@line 8266
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 8272
    $16 = 23752 + ($14 << 1 << 2) | 0; //@line 8274
    $17 = $16 + 8 | 0; //@line 8275
    $18 = HEAP32[$17 >> 2] | 0; //@line 8276
    $19 = $18 + 8 | 0; //@line 8277
    $20 = HEAP32[$19 >> 2] | 0; //@line 8278
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[5928] = $8 & ~(1 << $14); //@line 8285
     } else {
      if ((HEAP32[5932] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 8290
      }
      $27 = $20 + 12 | 0; //@line 8293
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 8297
       HEAP32[$17 >> 2] = $20; //@line 8298
       break;
      } else {
       _abort(); //@line 8301
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 8306
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 8309
    $34 = $18 + $30 + 4 | 0; //@line 8311
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 8314
    $$0 = $19; //@line 8315
    STACKTOP = sp; //@line 8316
    return $$0 | 0; //@line 8316
   }
   $37 = HEAP32[5930] | 0; //@line 8318
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 8324
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 8327
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 8330
     $49 = $47 >>> 12 & 16; //@line 8332
     $50 = $47 >>> $49; //@line 8333
     $52 = $50 >>> 5 & 8; //@line 8335
     $54 = $50 >>> $52; //@line 8337
     $56 = $54 >>> 2 & 4; //@line 8339
     $58 = $54 >>> $56; //@line 8341
     $60 = $58 >>> 1 & 2; //@line 8343
     $62 = $58 >>> $60; //@line 8345
     $64 = $62 >>> 1 & 1; //@line 8347
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 8350
     $69 = 23752 + ($67 << 1 << 2) | 0; //@line 8352
     $70 = $69 + 8 | 0; //@line 8353
     $71 = HEAP32[$70 >> 2] | 0; //@line 8354
     $72 = $71 + 8 | 0; //@line 8355
     $73 = HEAP32[$72 >> 2] | 0; //@line 8356
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 8362
       HEAP32[5928] = $77; //@line 8363
       $98 = $77; //@line 8364
      } else {
       if ((HEAP32[5932] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 8369
       }
       $80 = $73 + 12 | 0; //@line 8372
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 8376
        HEAP32[$70 >> 2] = $73; //@line 8377
        $98 = $8; //@line 8378
        break;
       } else {
        _abort(); //@line 8381
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 8386
     $84 = $83 - $6 | 0; //@line 8387
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 8390
     $87 = $71 + $6 | 0; //@line 8391
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 8394
     HEAP32[$71 + $83 >> 2] = $84; //@line 8396
     if ($37 | 0) {
      $92 = HEAP32[5933] | 0; //@line 8399
      $93 = $37 >>> 3; //@line 8400
      $95 = 23752 + ($93 << 1 << 2) | 0; //@line 8402
      $96 = 1 << $93; //@line 8403
      if (!($98 & $96)) {
       HEAP32[5928] = $98 | $96; //@line 8408
       $$0199 = $95; //@line 8410
       $$pre$phiZ2D = $95 + 8 | 0; //@line 8410
      } else {
       $101 = $95 + 8 | 0; //@line 8412
       $102 = HEAP32[$101 >> 2] | 0; //@line 8413
       if ((HEAP32[5932] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 8417
       } else {
        $$0199 = $102; //@line 8420
        $$pre$phiZ2D = $101; //@line 8420
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 8423
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 8425
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 8427
      HEAP32[$92 + 12 >> 2] = $95; //@line 8429
     }
     HEAP32[5930] = $84; //@line 8431
     HEAP32[5933] = $87; //@line 8432
     $$0 = $72; //@line 8433
     STACKTOP = sp; //@line 8434
     return $$0 | 0; //@line 8434
    }
    $108 = HEAP32[5929] | 0; //@line 8436
    if (!$108) {
     $$0197 = $6; //@line 8439
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 8443
     $114 = $112 >>> 12 & 16; //@line 8445
     $115 = $112 >>> $114; //@line 8446
     $117 = $115 >>> 5 & 8; //@line 8448
     $119 = $115 >>> $117; //@line 8450
     $121 = $119 >>> 2 & 4; //@line 8452
     $123 = $119 >>> $121; //@line 8454
     $125 = $123 >>> 1 & 2; //@line 8456
     $127 = $123 >>> $125; //@line 8458
     $129 = $127 >>> 1 & 1; //@line 8460
     $134 = HEAP32[24016 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 8465
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 8469
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8475
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 8478
      $$0193$lcssa$i = $138; //@line 8478
     } else {
      $$01926$i = $134; //@line 8480
      $$01935$i = $138; //@line 8480
      $146 = $143; //@line 8480
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 8485
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 8486
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 8487
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 8488
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8494
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 8497
        $$0193$lcssa$i = $$$0193$i; //@line 8497
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 8500
        $$01935$i = $$$0193$i; //@line 8500
       }
      }
     }
     $157 = HEAP32[5932] | 0; //@line 8504
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 8507
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 8510
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 8513
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 8517
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 8519
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 8523
       $176 = HEAP32[$175 >> 2] | 0; //@line 8524
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 8527
        $179 = HEAP32[$178 >> 2] | 0; //@line 8528
        if (!$179) {
         $$3$i = 0; //@line 8531
         break;
        } else {
         $$1196$i = $179; //@line 8534
         $$1198$i = $178; //@line 8534
        }
       } else {
        $$1196$i = $176; //@line 8537
        $$1198$i = $175; //@line 8537
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 8540
        $182 = HEAP32[$181 >> 2] | 0; //@line 8541
        if ($182 | 0) {
         $$1196$i = $182; //@line 8544
         $$1198$i = $181; //@line 8544
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 8547
        $185 = HEAP32[$184 >> 2] | 0; //@line 8548
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 8553
         $$1198$i = $184; //@line 8553
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 8558
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 8561
        $$3$i = $$1196$i; //@line 8562
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 8567
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 8570
       }
       $169 = $167 + 12 | 0; //@line 8573
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 8577
       }
       $172 = $164 + 8 | 0; //@line 8580
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 8584
        HEAP32[$172 >> 2] = $167; //@line 8585
        $$3$i = $164; //@line 8586
        break;
       } else {
        _abort(); //@line 8589
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 8598
       $191 = 24016 + ($190 << 2) | 0; //@line 8599
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 8604
         if (!$$3$i) {
          HEAP32[5929] = $108 & ~(1 << $190); //@line 8610
          break L73;
         }
        } else {
         if ((HEAP32[5932] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 8617
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 8625
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[5932] | 0; //@line 8635
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 8638
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 8642
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 8644
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 8650
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 8654
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 8656
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 8662
       if ($214 | 0) {
        if ((HEAP32[5932] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 8668
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 8672
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 8674
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 8682
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 8685
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 8687
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 8690
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 8694
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 8697
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 8699
      if ($37 | 0) {
       $234 = HEAP32[5933] | 0; //@line 8702
       $235 = $37 >>> 3; //@line 8703
       $237 = 23752 + ($235 << 1 << 2) | 0; //@line 8705
       $238 = 1 << $235; //@line 8706
       if (!($8 & $238)) {
        HEAP32[5928] = $8 | $238; //@line 8711
        $$0189$i = $237; //@line 8713
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 8713
       } else {
        $242 = $237 + 8 | 0; //@line 8715
        $243 = HEAP32[$242 >> 2] | 0; //@line 8716
        if ((HEAP32[5932] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 8720
        } else {
         $$0189$i = $243; //@line 8723
         $$pre$phi$iZ2D = $242; //@line 8723
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 8726
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 8728
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 8730
       HEAP32[$234 + 12 >> 2] = $237; //@line 8732
      }
      HEAP32[5930] = $$0193$lcssa$i; //@line 8734
      HEAP32[5933] = $159; //@line 8735
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 8738
     STACKTOP = sp; //@line 8739
     return $$0 | 0; //@line 8739
    }
   } else {
    $$0197 = $6; //@line 8742
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 8747
   } else {
    $251 = $0 + 11 | 0; //@line 8749
    $252 = $251 & -8; //@line 8750
    $253 = HEAP32[5929] | 0; //@line 8751
    if (!$253) {
     $$0197 = $252; //@line 8754
    } else {
     $255 = 0 - $252 | 0; //@line 8756
     $256 = $251 >>> 8; //@line 8757
     if (!$256) {
      $$0358$i = 0; //@line 8760
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 8764
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 8768
       $262 = $256 << $261; //@line 8769
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 8772
       $267 = $262 << $265; //@line 8774
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 8777
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 8782
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 8788
      }
     }
     $282 = HEAP32[24016 + ($$0358$i << 2) >> 2] | 0; //@line 8792
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 8796
       $$3$i203 = 0; //@line 8796
       $$3350$i = $255; //@line 8796
       label = 81; //@line 8797
      } else {
       $$0342$i = 0; //@line 8804
       $$0347$i = $255; //@line 8804
       $$0353$i = $282; //@line 8804
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 8804
       $$0362$i = 0; //@line 8804
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 8809
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 8814
          $$435113$i = 0; //@line 8814
          $$435712$i = $$0353$i; //@line 8814
          label = 85; //@line 8815
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 8818
          $$1348$i = $292; //@line 8818
         }
        } else {
         $$1343$i = $$0342$i; //@line 8821
         $$1348$i = $$0347$i; //@line 8821
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 8824
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 8827
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 8831
        $302 = ($$0353$i | 0) == 0; //@line 8832
        if ($302) {
         $$2355$i = $$1363$i; //@line 8837
         $$3$i203 = $$1343$i; //@line 8837
         $$3350$i = $$1348$i; //@line 8837
         label = 81; //@line 8838
         break;
        } else {
         $$0342$i = $$1343$i; //@line 8841
         $$0347$i = $$1348$i; //@line 8841
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 8841
         $$0362$i = $$1363$i; //@line 8841
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 8851
       $309 = $253 & ($306 | 0 - $306); //@line 8854
       if (!$309) {
        $$0197 = $252; //@line 8857
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 8862
       $315 = $313 >>> 12 & 16; //@line 8864
       $316 = $313 >>> $315; //@line 8865
       $318 = $316 >>> 5 & 8; //@line 8867
       $320 = $316 >>> $318; //@line 8869
       $322 = $320 >>> 2 & 4; //@line 8871
       $324 = $320 >>> $322; //@line 8873
       $326 = $324 >>> 1 & 2; //@line 8875
       $328 = $324 >>> $326; //@line 8877
       $330 = $328 >>> 1 & 1; //@line 8879
       $$4$ph$i = 0; //@line 8885
       $$4357$ph$i = HEAP32[24016 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 8885
      } else {
       $$4$ph$i = $$3$i203; //@line 8887
       $$4357$ph$i = $$2355$i; //@line 8887
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 8891
       $$4351$lcssa$i = $$3350$i; //@line 8891
      } else {
       $$414$i = $$4$ph$i; //@line 8893
       $$435113$i = $$3350$i; //@line 8893
       $$435712$i = $$4357$ph$i; //@line 8893
       label = 85; //@line 8894
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 8899
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 8903
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 8904
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 8905
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 8906
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 8912
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 8915
        $$4351$lcssa$i = $$$4351$i; //@line 8915
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 8918
        $$435113$i = $$$4351$i; //@line 8918
        label = 85; //@line 8919
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 8925
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[5930] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[5932] | 0; //@line 8931
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 8934
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 8937
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 8940
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 8944
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 8946
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 8950
         $371 = HEAP32[$370 >> 2] | 0; //@line 8951
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 8954
          $374 = HEAP32[$373 >> 2] | 0; //@line 8955
          if (!$374) {
           $$3372$i = 0; //@line 8958
           break;
          } else {
           $$1370$i = $374; //@line 8961
           $$1374$i = $373; //@line 8961
          }
         } else {
          $$1370$i = $371; //@line 8964
          $$1374$i = $370; //@line 8964
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 8967
          $377 = HEAP32[$376 >> 2] | 0; //@line 8968
          if ($377 | 0) {
           $$1370$i = $377; //@line 8971
           $$1374$i = $376; //@line 8971
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 8974
          $380 = HEAP32[$379 >> 2] | 0; //@line 8975
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 8980
           $$1374$i = $379; //@line 8980
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 8985
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 8988
          $$3372$i = $$1370$i; //@line 8989
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 8994
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 8997
         }
         $364 = $362 + 12 | 0; //@line 9000
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 9004
         }
         $367 = $359 + 8 | 0; //@line 9007
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 9011
          HEAP32[$367 >> 2] = $362; //@line 9012
          $$3372$i = $359; //@line 9013
          break;
         } else {
          _abort(); //@line 9016
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 9024
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 9027
         $386 = 24016 + ($385 << 2) | 0; //@line 9028
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 9033
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 9038
            HEAP32[5929] = $391; //@line 9039
            $475 = $391; //@line 9040
            break L164;
           }
          } else {
           if ((HEAP32[5932] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 9047
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 9055
            if (!$$3372$i) {
             $475 = $253; //@line 9058
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[5932] | 0; //@line 9066
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 9069
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 9073
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 9075
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 9081
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 9085
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 9087
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 9093
         if (!$409) {
          $475 = $253; //@line 9096
         } else {
          if ((HEAP32[5932] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 9101
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 9105
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 9107
           $475 = $253; //@line 9108
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 9117
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 9120
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 9122
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 9125
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 9129
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 9132
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 9134
         $428 = $$4351$lcssa$i >>> 3; //@line 9135
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 23752 + ($428 << 1 << 2) | 0; //@line 9139
          $432 = HEAP32[5928] | 0; //@line 9140
          $433 = 1 << $428; //@line 9141
          if (!($432 & $433)) {
           HEAP32[5928] = $432 | $433; //@line 9146
           $$0368$i = $431; //@line 9148
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 9148
          } else {
           $437 = $431 + 8 | 0; //@line 9150
           $438 = HEAP32[$437 >> 2] | 0; //@line 9151
           if ((HEAP32[5932] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 9155
           } else {
            $$0368$i = $438; //@line 9158
            $$pre$phi$i211Z2D = $437; //@line 9158
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 9161
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 9163
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 9165
          HEAP32[$354 + 12 >> 2] = $431; //@line 9167
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 9170
         if (!$444) {
          $$0361$i = 0; //@line 9173
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 9177
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 9181
           $450 = $444 << $449; //@line 9182
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 9185
           $455 = $450 << $453; //@line 9187
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 9190
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 9195
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 9201
          }
         }
         $469 = 24016 + ($$0361$i << 2) | 0; //@line 9204
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 9206
         $471 = $354 + 16 | 0; //@line 9207
         HEAP32[$471 + 4 >> 2] = 0; //@line 9209
         HEAP32[$471 >> 2] = 0; //@line 9210
         $473 = 1 << $$0361$i; //@line 9211
         if (!($475 & $473)) {
          HEAP32[5929] = $475 | $473; //@line 9216
          HEAP32[$469 >> 2] = $354; //@line 9217
          HEAP32[$354 + 24 >> 2] = $469; //@line 9219
          HEAP32[$354 + 12 >> 2] = $354; //@line 9221
          HEAP32[$354 + 8 >> 2] = $354; //@line 9223
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 9232
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 9232
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 9239
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 9243
          $494 = HEAP32[$492 >> 2] | 0; //@line 9245
          if (!$494) {
           label = 136; //@line 9248
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 9251
           $$0345$i = $494; //@line 9251
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[5932] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 9258
          } else {
           HEAP32[$492 >> 2] = $354; //@line 9261
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 9263
           HEAP32[$354 + 12 >> 2] = $354; //@line 9265
           HEAP32[$354 + 8 >> 2] = $354; //@line 9267
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 9272
          $502 = HEAP32[$501 >> 2] | 0; //@line 9273
          $503 = HEAP32[5932] | 0; //@line 9274
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 9280
           HEAP32[$501 >> 2] = $354; //@line 9281
           HEAP32[$354 + 8 >> 2] = $502; //@line 9283
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 9285
           HEAP32[$354 + 24 >> 2] = 0; //@line 9287
           break;
          } else {
           _abort(); //@line 9290
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 9297
       STACKTOP = sp; //@line 9298
       return $$0 | 0; //@line 9298
      } else {
       $$0197 = $252; //@line 9300
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[5930] | 0; //@line 9307
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 9310
  $515 = HEAP32[5933] | 0; //@line 9311
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 9314
   HEAP32[5933] = $517; //@line 9315
   HEAP32[5930] = $514; //@line 9316
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 9319
   HEAP32[$515 + $512 >> 2] = $514; //@line 9321
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 9324
  } else {
   HEAP32[5930] = 0; //@line 9326
   HEAP32[5933] = 0; //@line 9327
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 9330
   $526 = $515 + $512 + 4 | 0; //@line 9332
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 9335
  }
  $$0 = $515 + 8 | 0; //@line 9338
  STACKTOP = sp; //@line 9339
  return $$0 | 0; //@line 9339
 }
 $530 = HEAP32[5931] | 0; //@line 9341
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 9344
  HEAP32[5931] = $532; //@line 9345
  $533 = HEAP32[5934] | 0; //@line 9346
  $534 = $533 + $$0197 | 0; //@line 9347
  HEAP32[5934] = $534; //@line 9348
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 9351
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 9354
  $$0 = $533 + 8 | 0; //@line 9356
  STACKTOP = sp; //@line 9357
  return $$0 | 0; //@line 9357
 }
 if (!(HEAP32[6046] | 0)) {
  HEAP32[6048] = 4096; //@line 9362
  HEAP32[6047] = 4096; //@line 9363
  HEAP32[6049] = -1; //@line 9364
  HEAP32[6050] = -1; //@line 9365
  HEAP32[6051] = 0; //@line 9366
  HEAP32[6039] = 0; //@line 9367
  HEAP32[6046] = $1 & -16 ^ 1431655768; //@line 9371
  $548 = 4096; //@line 9372
 } else {
  $548 = HEAP32[6048] | 0; //@line 9375
 }
 $545 = $$0197 + 48 | 0; //@line 9377
 $546 = $$0197 + 47 | 0; //@line 9378
 $547 = $548 + $546 | 0; //@line 9379
 $549 = 0 - $548 | 0; //@line 9380
 $550 = $547 & $549; //@line 9381
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 9384
  STACKTOP = sp; //@line 9385
  return $$0 | 0; //@line 9385
 }
 $552 = HEAP32[6038] | 0; //@line 9387
 if ($552 | 0) {
  $554 = HEAP32[6036] | 0; //@line 9390
  $555 = $554 + $550 | 0; //@line 9391
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 9396
   STACKTOP = sp; //@line 9397
   return $$0 | 0; //@line 9397
  }
 }
 L244 : do {
  if (!(HEAP32[6039] & 4)) {
   $561 = HEAP32[5934] | 0; //@line 9405
   L246 : do {
    if (!$561) {
     label = 163; //@line 9409
    } else {
     $$0$i$i = 24160; //@line 9411
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 9413
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 9416
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 9425
      if (!$570) {
       label = 163; //@line 9428
       break L246;
      } else {
       $$0$i$i = $570; //@line 9431
      }
     }
     $595 = $547 - $530 & $549; //@line 9435
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 9438
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 9446
       } else {
        $$723947$i = $595; //@line 9448
        $$748$i = $597; //@line 9448
        label = 180; //@line 9449
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 9453
       $$2253$ph$i = $595; //@line 9453
       label = 171; //@line 9454
      }
     } else {
      $$2234243136$i = 0; //@line 9457
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 9463
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 9466
     } else {
      $574 = $572; //@line 9468
      $575 = HEAP32[6047] | 0; //@line 9469
      $576 = $575 + -1 | 0; //@line 9470
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 9478
      $584 = HEAP32[6036] | 0; //@line 9479
      $585 = $$$i + $584 | 0; //@line 9480
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[6038] | 0; //@line 9485
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 9492
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 9496
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 9499
        $$748$i = $572; //@line 9499
        label = 180; //@line 9500
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 9503
        $$2253$ph$i = $$$i; //@line 9503
        label = 171; //@line 9504
       }
      } else {
       $$2234243136$i = 0; //@line 9507
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 9514
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 9523
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 9526
       $$748$i = $$2247$ph$i; //@line 9526
       label = 180; //@line 9527
       break L244;
      }
     }
     $607 = HEAP32[6048] | 0; //@line 9531
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 9535
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 9538
      $$748$i = $$2247$ph$i; //@line 9538
      label = 180; //@line 9539
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 9545
      $$2234243136$i = 0; //@line 9546
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 9550
      $$748$i = $$2247$ph$i; //@line 9550
      label = 180; //@line 9551
      break L244;
     }
    }
   } while (0);
   HEAP32[6039] = HEAP32[6039] | 4; //@line 9558
   $$4236$i = $$2234243136$i; //@line 9559
   label = 178; //@line 9560
  } else {
   $$4236$i = 0; //@line 9562
   label = 178; //@line 9563
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 9569
   $621 = _sbrk(0) | 0; //@line 9570
   $627 = $621 - $620 | 0; //@line 9578
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 9580
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 9588
    $$748$i = $620; //@line 9588
    label = 180; //@line 9589
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[6036] | 0) + $$723947$i | 0; //@line 9595
  HEAP32[6036] = $633; //@line 9596
  if ($633 >>> 0 > (HEAP32[6037] | 0) >>> 0) {
   HEAP32[6037] = $633; //@line 9600
  }
  $636 = HEAP32[5934] | 0; //@line 9602
  do {
   if (!$636) {
    $638 = HEAP32[5932] | 0; //@line 9606
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[5932] = $$748$i; //@line 9611
    }
    HEAP32[6040] = $$748$i; //@line 9613
    HEAP32[6041] = $$723947$i; //@line 9614
    HEAP32[6043] = 0; //@line 9615
    HEAP32[5937] = HEAP32[6046]; //@line 9617
    HEAP32[5936] = -1; //@line 9618
    HEAP32[5941] = 23752; //@line 9619
    HEAP32[5940] = 23752; //@line 9620
    HEAP32[5943] = 23760; //@line 9621
    HEAP32[5942] = 23760; //@line 9622
    HEAP32[5945] = 23768; //@line 9623
    HEAP32[5944] = 23768; //@line 9624
    HEAP32[5947] = 23776; //@line 9625
    HEAP32[5946] = 23776; //@line 9626
    HEAP32[5949] = 23784; //@line 9627
    HEAP32[5948] = 23784; //@line 9628
    HEAP32[5951] = 23792; //@line 9629
    HEAP32[5950] = 23792; //@line 9630
    HEAP32[5953] = 23800; //@line 9631
    HEAP32[5952] = 23800; //@line 9632
    HEAP32[5955] = 23808; //@line 9633
    HEAP32[5954] = 23808; //@line 9634
    HEAP32[5957] = 23816; //@line 9635
    HEAP32[5956] = 23816; //@line 9636
    HEAP32[5959] = 23824; //@line 9637
    HEAP32[5958] = 23824; //@line 9638
    HEAP32[5961] = 23832; //@line 9639
    HEAP32[5960] = 23832; //@line 9640
    HEAP32[5963] = 23840; //@line 9641
    HEAP32[5962] = 23840; //@line 9642
    HEAP32[5965] = 23848; //@line 9643
    HEAP32[5964] = 23848; //@line 9644
    HEAP32[5967] = 23856; //@line 9645
    HEAP32[5966] = 23856; //@line 9646
    HEAP32[5969] = 23864; //@line 9647
    HEAP32[5968] = 23864; //@line 9648
    HEAP32[5971] = 23872; //@line 9649
    HEAP32[5970] = 23872; //@line 9650
    HEAP32[5973] = 23880; //@line 9651
    HEAP32[5972] = 23880; //@line 9652
    HEAP32[5975] = 23888; //@line 9653
    HEAP32[5974] = 23888; //@line 9654
    HEAP32[5977] = 23896; //@line 9655
    HEAP32[5976] = 23896; //@line 9656
    HEAP32[5979] = 23904; //@line 9657
    HEAP32[5978] = 23904; //@line 9658
    HEAP32[5981] = 23912; //@line 9659
    HEAP32[5980] = 23912; //@line 9660
    HEAP32[5983] = 23920; //@line 9661
    HEAP32[5982] = 23920; //@line 9662
    HEAP32[5985] = 23928; //@line 9663
    HEAP32[5984] = 23928; //@line 9664
    HEAP32[5987] = 23936; //@line 9665
    HEAP32[5986] = 23936; //@line 9666
    HEAP32[5989] = 23944; //@line 9667
    HEAP32[5988] = 23944; //@line 9668
    HEAP32[5991] = 23952; //@line 9669
    HEAP32[5990] = 23952; //@line 9670
    HEAP32[5993] = 23960; //@line 9671
    HEAP32[5992] = 23960; //@line 9672
    HEAP32[5995] = 23968; //@line 9673
    HEAP32[5994] = 23968; //@line 9674
    HEAP32[5997] = 23976; //@line 9675
    HEAP32[5996] = 23976; //@line 9676
    HEAP32[5999] = 23984; //@line 9677
    HEAP32[5998] = 23984; //@line 9678
    HEAP32[6001] = 23992; //@line 9679
    HEAP32[6e3] = 23992; //@line 9680
    HEAP32[6003] = 24e3; //@line 9681
    HEAP32[6002] = 24e3; //@line 9682
    $642 = $$723947$i + -40 | 0; //@line 9683
    $644 = $$748$i + 8 | 0; //@line 9685
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 9690
    $650 = $$748$i + $649 | 0; //@line 9691
    $651 = $642 - $649 | 0; //@line 9692
    HEAP32[5934] = $650; //@line 9693
    HEAP32[5931] = $651; //@line 9694
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 9697
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 9700
    HEAP32[5935] = HEAP32[6050]; //@line 9702
   } else {
    $$024367$i = 24160; //@line 9704
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 9706
     $658 = $$024367$i + 4 | 0; //@line 9707
     $659 = HEAP32[$658 >> 2] | 0; //@line 9708
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 9712
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 9716
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 9721
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 9735
       $673 = (HEAP32[5931] | 0) + $$723947$i | 0; //@line 9737
       $675 = $636 + 8 | 0; //@line 9739
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 9744
       $681 = $636 + $680 | 0; //@line 9745
       $682 = $673 - $680 | 0; //@line 9746
       HEAP32[5934] = $681; //@line 9747
       HEAP32[5931] = $682; //@line 9748
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 9751
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 9754
       HEAP32[5935] = HEAP32[6050]; //@line 9756
       break;
      }
     }
    }
    $688 = HEAP32[5932] | 0; //@line 9761
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[5932] = $$748$i; //@line 9764
     $753 = $$748$i; //@line 9765
    } else {
     $753 = $688; //@line 9767
    }
    $690 = $$748$i + $$723947$i | 0; //@line 9769
    $$124466$i = 24160; //@line 9770
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 9775
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 9779
     if (!$694) {
      $$0$i$i$i = 24160; //@line 9782
      break;
     } else {
      $$124466$i = $694; //@line 9785
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 9794
      $700 = $$124466$i + 4 | 0; //@line 9795
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 9798
      $704 = $$748$i + 8 | 0; //@line 9800
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 9806
      $712 = $690 + 8 | 0; //@line 9808
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 9814
      $722 = $710 + $$0197 | 0; //@line 9818
      $723 = $718 - $710 - $$0197 | 0; //@line 9819
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 9822
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[5931] | 0) + $723 | 0; //@line 9827
        HEAP32[5931] = $728; //@line 9828
        HEAP32[5934] = $722; //@line 9829
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 9832
       } else {
        if ((HEAP32[5933] | 0) == ($718 | 0)) {
         $734 = (HEAP32[5930] | 0) + $723 | 0; //@line 9838
         HEAP32[5930] = $734; //@line 9839
         HEAP32[5933] = $722; //@line 9840
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 9843
         HEAP32[$722 + $734 >> 2] = $734; //@line 9845
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 9849
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 9853
         $743 = $739 >>> 3; //@line 9854
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 9859
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 9861
           $750 = 23752 + ($743 << 1 << 2) | 0; //@line 9863
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 9869
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 9878
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[5928] = HEAP32[5928] & ~(1 << $743); //@line 9888
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 9895
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 9899
             }
             $764 = $748 + 8 | 0; //@line 9902
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 9906
              break;
             }
             _abort(); //@line 9909
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 9914
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 9915
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 9918
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 9920
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 9924
             $783 = $782 + 4 | 0; //@line 9925
             $784 = HEAP32[$783 >> 2] | 0; //@line 9926
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 9929
              if (!$786) {
               $$3$i$i = 0; //@line 9932
               break;
              } else {
               $$1291$i$i = $786; //@line 9935
               $$1293$i$i = $782; //@line 9935
              }
             } else {
              $$1291$i$i = $784; //@line 9938
              $$1293$i$i = $783; //@line 9938
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 9941
              $789 = HEAP32[$788 >> 2] | 0; //@line 9942
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 9945
               $$1293$i$i = $788; //@line 9945
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 9948
              $792 = HEAP32[$791 >> 2] | 0; //@line 9949
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 9954
               $$1293$i$i = $791; //@line 9954
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 9959
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 9962
              $$3$i$i = $$1291$i$i; //@line 9963
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 9968
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 9971
             }
             $776 = $774 + 12 | 0; //@line 9974
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 9978
             }
             $779 = $771 + 8 | 0; //@line 9981
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 9985
              HEAP32[$779 >> 2] = $774; //@line 9986
              $$3$i$i = $771; //@line 9987
              break;
             } else {
              _abort(); //@line 9990
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 10000
           $798 = 24016 + ($797 << 2) | 0; //@line 10001
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 10006
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[5929] = HEAP32[5929] & ~(1 << $797); //@line 10015
             break L311;
            } else {
             if ((HEAP32[5932] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 10021
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 10029
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[5932] | 0; //@line 10039
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 10042
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 10046
           $815 = $718 + 16 | 0; //@line 10047
           $816 = HEAP32[$815 >> 2] | 0; //@line 10048
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 10054
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 10058
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 10060
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 10066
           if (!$822) {
            break;
           }
           if ((HEAP32[5932] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 10074
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 10078
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 10080
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 10087
         $$0287$i$i = $742 + $723 | 0; //@line 10087
        } else {
         $$0$i17$i = $718; //@line 10089
         $$0287$i$i = $723; //@line 10089
        }
        $830 = $$0$i17$i + 4 | 0; //@line 10091
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 10094
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 10097
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 10099
        $836 = $$0287$i$i >>> 3; //@line 10100
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 23752 + ($836 << 1 << 2) | 0; //@line 10104
         $840 = HEAP32[5928] | 0; //@line 10105
         $841 = 1 << $836; //@line 10106
         do {
          if (!($840 & $841)) {
           HEAP32[5928] = $840 | $841; //@line 10112
           $$0295$i$i = $839; //@line 10114
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 10114
          } else {
           $845 = $839 + 8 | 0; //@line 10116
           $846 = HEAP32[$845 >> 2] | 0; //@line 10117
           if ((HEAP32[5932] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 10121
            $$pre$phi$i19$iZ2D = $845; //@line 10121
            break;
           }
           _abort(); //@line 10124
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 10128
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 10130
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 10132
         HEAP32[$722 + 12 >> 2] = $839; //@line 10134
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 10137
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 10141
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 10145
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 10150
          $858 = $852 << $857; //@line 10151
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 10154
          $863 = $858 << $861; //@line 10156
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 10159
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 10164
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 10170
         }
        } while (0);
        $877 = 24016 + ($$0296$i$i << 2) | 0; //@line 10173
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 10175
        $879 = $722 + 16 | 0; //@line 10176
        HEAP32[$879 + 4 >> 2] = 0; //@line 10178
        HEAP32[$879 >> 2] = 0; //@line 10179
        $881 = HEAP32[5929] | 0; //@line 10180
        $882 = 1 << $$0296$i$i; //@line 10181
        if (!($881 & $882)) {
         HEAP32[5929] = $881 | $882; //@line 10186
         HEAP32[$877 >> 2] = $722; //@line 10187
         HEAP32[$722 + 24 >> 2] = $877; //@line 10189
         HEAP32[$722 + 12 >> 2] = $722; //@line 10191
         HEAP32[$722 + 8 >> 2] = $722; //@line 10193
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 10202
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 10202
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 10209
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 10213
         $902 = HEAP32[$900 >> 2] | 0; //@line 10215
         if (!$902) {
          label = 260; //@line 10218
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 10221
          $$0289$i$i = $902; //@line 10221
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[5932] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 10228
         } else {
          HEAP32[$900 >> 2] = $722; //@line 10231
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 10233
          HEAP32[$722 + 12 >> 2] = $722; //@line 10235
          HEAP32[$722 + 8 >> 2] = $722; //@line 10237
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 10242
         $910 = HEAP32[$909 >> 2] | 0; //@line 10243
         $911 = HEAP32[5932] | 0; //@line 10244
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 10250
          HEAP32[$909 >> 2] = $722; //@line 10251
          HEAP32[$722 + 8 >> 2] = $910; //@line 10253
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 10255
          HEAP32[$722 + 24 >> 2] = 0; //@line 10257
          break;
         } else {
          _abort(); //@line 10260
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 10267
      STACKTOP = sp; //@line 10268
      return $$0 | 0; //@line 10268
     } else {
      $$0$i$i$i = 24160; //@line 10270
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 10274
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 10279
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 10287
    }
    $927 = $923 + -47 | 0; //@line 10289
    $929 = $927 + 8 | 0; //@line 10291
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 10297
    $936 = $636 + 16 | 0; //@line 10298
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 10300
    $939 = $938 + 8 | 0; //@line 10301
    $940 = $938 + 24 | 0; //@line 10302
    $941 = $$723947$i + -40 | 0; //@line 10303
    $943 = $$748$i + 8 | 0; //@line 10305
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 10310
    $949 = $$748$i + $948 | 0; //@line 10311
    $950 = $941 - $948 | 0; //@line 10312
    HEAP32[5934] = $949; //@line 10313
    HEAP32[5931] = $950; //@line 10314
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 10317
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 10320
    HEAP32[5935] = HEAP32[6050]; //@line 10322
    $956 = $938 + 4 | 0; //@line 10323
    HEAP32[$956 >> 2] = 27; //@line 10324
    HEAP32[$939 >> 2] = HEAP32[6040]; //@line 10325
    HEAP32[$939 + 4 >> 2] = HEAP32[6041]; //@line 10325
    HEAP32[$939 + 8 >> 2] = HEAP32[6042]; //@line 10325
    HEAP32[$939 + 12 >> 2] = HEAP32[6043]; //@line 10325
    HEAP32[6040] = $$748$i; //@line 10326
    HEAP32[6041] = $$723947$i; //@line 10327
    HEAP32[6043] = 0; //@line 10328
    HEAP32[6042] = $939; //@line 10329
    $958 = $940; //@line 10330
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 10332
     HEAP32[$958 >> 2] = 7; //@line 10333
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 10346
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 10349
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 10352
     HEAP32[$938 >> 2] = $964; //@line 10353
     $969 = $964 >>> 3; //@line 10354
     if ($964 >>> 0 < 256) {
      $972 = 23752 + ($969 << 1 << 2) | 0; //@line 10358
      $973 = HEAP32[5928] | 0; //@line 10359
      $974 = 1 << $969; //@line 10360
      if (!($973 & $974)) {
       HEAP32[5928] = $973 | $974; //@line 10365
       $$0211$i$i = $972; //@line 10367
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 10367
      } else {
       $978 = $972 + 8 | 0; //@line 10369
       $979 = HEAP32[$978 >> 2] | 0; //@line 10370
       if ((HEAP32[5932] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 10374
       } else {
        $$0211$i$i = $979; //@line 10377
        $$pre$phi$i$iZ2D = $978; //@line 10377
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 10380
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 10382
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 10384
      HEAP32[$636 + 12 >> 2] = $972; //@line 10386
      break;
     }
     $985 = $964 >>> 8; //@line 10389
     if (!$985) {
      $$0212$i$i = 0; //@line 10392
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 10396
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 10400
       $991 = $985 << $990; //@line 10401
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 10404
       $996 = $991 << $994; //@line 10406
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 10409
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 10414
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 10420
      }
     }
     $1010 = 24016 + ($$0212$i$i << 2) | 0; //@line 10423
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 10425
     HEAP32[$636 + 20 >> 2] = 0; //@line 10427
     HEAP32[$936 >> 2] = 0; //@line 10428
     $1013 = HEAP32[5929] | 0; //@line 10429
     $1014 = 1 << $$0212$i$i; //@line 10430
     if (!($1013 & $1014)) {
      HEAP32[5929] = $1013 | $1014; //@line 10435
      HEAP32[$1010 >> 2] = $636; //@line 10436
      HEAP32[$636 + 24 >> 2] = $1010; //@line 10438
      HEAP32[$636 + 12 >> 2] = $636; //@line 10440
      HEAP32[$636 + 8 >> 2] = $636; //@line 10442
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 10451
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 10451
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 10458
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 10462
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 10464
      if (!$1034) {
       label = 286; //@line 10467
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 10470
       $$0207$i$i = $1034; //@line 10470
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[5932] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 10477
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 10480
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 10482
       HEAP32[$636 + 12 >> 2] = $636; //@line 10484
       HEAP32[$636 + 8 >> 2] = $636; //@line 10486
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 10491
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 10492
      $1043 = HEAP32[5932] | 0; //@line 10493
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 10499
       HEAP32[$1041 >> 2] = $636; //@line 10500
       HEAP32[$636 + 8 >> 2] = $1042; //@line 10502
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 10504
       HEAP32[$636 + 24 >> 2] = 0; //@line 10506
       break;
      } else {
       _abort(); //@line 10509
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[5931] | 0; //@line 10516
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 10519
   HEAP32[5931] = $1054; //@line 10520
   $1055 = HEAP32[5934] | 0; //@line 10521
   $1056 = $1055 + $$0197 | 0; //@line 10522
   HEAP32[5934] = $1056; //@line 10523
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 10526
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 10529
   $$0 = $1055 + 8 | 0; //@line 10531
   STACKTOP = sp; //@line 10532
   return $$0 | 0; //@line 10532
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 10536
 $$0 = 0; //@line 10537
 STACKTOP = sp; //@line 10538
 return $$0 | 0; //@line 10538
}
function __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($0, $1, $2, $3, $4, $5, $6, $7) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 var $$0$be = 0, $$0$i = 0, $$0$i116 = 0, $$0$i118 = 0, $$0107$be = 0, $$0107$lcssa = 0, $$0107131 = 0, $$0109129 = 0, $$0111 = 0, $$0132 = 0, $$1$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $137 = 0, $140 = 0, $145 = 0, $146 = 0, $15 = 0, $152 = 0, $156 = 0, $159 = 0, $16 = 0, $166 = 0, $167 = 0, $17 = 0, $173 = 0, $18 = 0, $19 = 0, $192 = 0, $20 = 0, $202 = 0, $203 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $270 = 0, $271 = 0, $279 = 0, $28 = 0, $281 = 0, $282 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $344 = 0, $345 = 0, $35 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $380 = 0, $386 = 0, $387 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $449 = 0, $45 = 0, $450 = 0, $459 = 0, $46 = 0, $463 = 0, $467 = 0, $472 = 0, $473 = 0, $477 = 0, $48 = 0, $481 = 0, $483 = 0, $485 = 0, $488 = 0, $489 = 0, $559 = 0, $560 = 0, $567 = 0, $580 = 0, $587 = 0, $59 = 0, $590 = 0, $591 = 0, $60 = 0, $653 = 0, $654 = 0, $661 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $div = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17606
 STACKTOP = STACKTOP + 16 | 0; //@line 17607
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17607
 $8 = sp; //@line 17608
 $9 = sp + 15 | 0; //@line 17609
 $10 = sp + 14 | 0; //@line 17610
 $11 = sp + 13 | 0; //@line 17611
 $12 = sp + 12 | 0; //@line 17612
 $13 = $3 & 255; //@line 17613
 if (($2 & 255) >= ($3 & 255)) {
  $$0107$lcssa = 0; //@line 17616
  STACKTOP = sp; //@line 17617
  return $$0107$lcssa | 0; //@line 17617
 }
 $15 = $5 + 8 | 0; //@line 17619
 $16 = $5 + 16 | 0; //@line 17620
 $17 = $5 + 17 | 0; //@line 17621
 $18 = $8 + 4 | 0; //@line 17622
 $19 = $6 + 60 | 0; //@line 17623
 $20 = $8 + 6 | 0; //@line 17624
 $21 = $6 + 44 | 0; //@line 17625
 $22 = $8 + 5 | 0; //@line 17626
 $23 = $6 + 1 | 0; //@line 17627
 $24 = $8 + 7 | 0; //@line 17628
 $25 = $8 + 8 | 0; //@line 17629
 $26 = $6 + 32 | 0; //@line 17630
 $27 = $8 + 9 | 0; //@line 17631
 $28 = $0 + 3 | 0; //@line 17632
 $29 = $0 + 2 | 0; //@line 17633
 $30 = $6 + 56 | 0; //@line 17634
 $31 = $6 + 58 | 0; //@line 17635
 $32 = $8 + 1 | 0; //@line 17636
 $33 = $8 + 4 | 0; //@line 17637
 $34 = $6 + 40 | 0; //@line 17638
 $35 = $6 + 36 | 0; //@line 17639
 $36 = $6 + 33 | 0; //@line 17640
 $37 = $0 + 1 | 0; //@line 17641
 $38 = $0 + 272 | 0; //@line 17642
 $39 = $4 & 63; //@line 17643
 $40 = $0 + 260 | 0; //@line 17644
 $41 = $8 + 4 | 0; //@line 17645
 $42 = $8 + 8 | 0; //@line 17646
 $43 = $6 + 16 | 0; //@line 17647
 $44 = $6 + 20 | 0; //@line 17648
 $45 = $6 + 45 | 0; //@line 17649
 $46 = $6 + 48 | 0; //@line 17650
 $$0107131 = 0; //@line 17651
 $$0132 = $2; //@line 17651
 L4 : while (1) {
  $48 = $$0132 + 1 << 24 >> 24; //@line 17654
  switch (HEAP8[$1 + ($$0132 & 255) >> 0] | 0) {
  case 2:
   {
    HEAP32[$15 >> 2] = 0; //@line 17659
    HEAP8[$16 >> 0] = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17664
    HEAP8[$17 >> 0] = HEAP8[$1 + ($$0132 + 2 & 255) >> 0] | 0; //@line 17669
    $$0$be = $$0132 + 3 << 24 >> 24; //@line 17670
    $$0107$be = $$0107131; //@line 17670
    break;
   }
  case 3:
   {
    HEAP8[$9 >> 0] = 0; //@line 17674
    HEAP8[$10 >> 0] = 0; //@line 17675
    HEAP8[$11 >> 0] = 0; //@line 17676
    HEAP8[$12 >> 0] = 0; //@line 17677
    $59 = $48 & 255; //@line 17678
    $60 = $59 + -1 | 0; //@line 17679
    HEAP32[$8 >> 2] = $1 + $60; //@line 17681
    HEAP8[$18 >> 0] = $13 - $60; //@line 17684
    HEAP8[$20 >> 0] = HEAP8[$19 >> 0] | 0; //@line 17686
    HEAP8[$22 >> 0] = HEAP8[$21 >> 0] | 0; //@line 17688
    HEAP8[$24 >> 0] = HEAP8[$23 >> 0] | 0; //@line 17690
    HEAP8[$25 >> 0] = HEAP8[$6 >> 0] | 0; //@line 17692
    HEAP8[$27 >> 0] = HEAP8[$26 >> 0] | 0; //@line 17694
    $71 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 17697
    $AsyncCtx = _emscripten_alloc_async_context(240, sp) | 0; //@line 17698
    $72 = FUNCTION_TABLE_iiiiiii[$71 & 3]($7, $8, $9, $10, $11, $12) | 0; //@line 17699
    if (___async) {
     label = 6; //@line 17702
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17705
    if (($72 & 7) == 7) {
     HEAP8[$23 >> 0] = HEAP8[$9 >> 0] | 0; //@line 17710
     HEAP8[$6 >> 0] = HEAP8[$10 >> 0] | 0; //@line 17712
     HEAP8[$26 >> 0] = HEAP8[$11 >> 0] | 0; //@line 17714
    }
    $137 = HEAP8[$12 >> 0] | 0; //@line 17716
    if (($137 & 255) > 4) {
     $div = ($137 & 255) / 5 | 0; //@line 17719
     $140 = 128 - (HEAPU8[$28 >> 0] | 0) | 0; //@line 17723
     $$0109129 = 0; //@line 17724
     $146 = HEAP8[$29 >> 0] | 0; //@line 17724
     while (1) {
      $145 = $146 & 255; //@line 17726
      if (($140 - $145 | 0) > 1) {
       $152 = $146 + 2 << 24 >> 24; //@line 17733
       HEAP8[$0 + 4 + $145 >> 0] = 3; //@line 17735
       HEAP8[$29 >> 0] = $152; //@line 17736
       HEAP8[($146 + 1 & 255) + ($0 + 4) >> 0] = $72; //@line 17737
       HEAP8[$0 >> 0] = 1; //@line 17738
       $$0$i = 0; //@line 17739
       $661 = $152; //@line 17739
      } else {
       $$0$i = -1010; //@line 17741
       $661 = $146; //@line 17741
      }
      $$0109129 = $$0109129 + 1 << 24 >> 24; //@line 17743
      if (($$0109129 & 255) >= ($div & 255)) {
       $$1$lcssa = $$0$i; //@line 17748
       break;
      } else {
       $146 = $661; //@line 17746
      }
     }
    } else {
     $$1$lcssa = $$0107131; //@line 17753
    }
    $$0$be = $59 + 255 + ($137 & 255) & 255; //@line 17759
    $$0107$be = $$1$lcssa; //@line 17759
    break;
   }
  case 4:
   {
    $156 = $$0132 + 2 << 24 >> 24; //@line 17763
    $159 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17766
    HEAP8[$30 >> 0] = $159; //@line 17767
    HEAP16[$31 >> 1] = 1 << ($159 & 255); //@line 17771
    $166 = HEAP8[$29 >> 0] | 0; //@line 17775
    $167 = $166 & 255; //@line 17776
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($167 | 0)) {
     HEAP8[$29 >> 0] = $166 + 1 << 24 >> 24; //@line 17781
     HEAP8[$0 + 4 + $167 >> 0] = 4; //@line 17782
     HEAP8[$0 >> 0] = 1; //@line 17783
     $$0$be = $156; //@line 17784
     $$0107$be = 0; //@line 17784
    } else {
     $$0$be = $156; //@line 17786
     $$0107$be = -1010; //@line 17786
    }
    break;
   }
  case 5:
   {
    $173 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17793
    HEAP8[$32 >> 0] = ($173 & 255) >>> 4 & 7; //@line 17798
    HEAP8[$8 >> 0] = $173 & 15; //@line 17800
    $192 = $$0132 + 5 << 24 >> 24; //@line 17814
    HEAP32[$33 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 17822
    $202 = HEAP32[(HEAP32[$7 >> 2] | 0) + 40 >> 2] | 0; //@line 17825
    $AsyncCtx3 = _emscripten_alloc_async_context(236, sp) | 0; //@line 17826
    $203 = FUNCTION_TABLE_iii[$202 & 31]($7, $8) | 0; //@line 17827
    if (___async) {
     label = 18; //@line 17830
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17833
    if (($203 & 7) == 7) {
     HEAP8[$34 >> 0] = HEAP8[$8 >> 0] | 0; //@line 17838
     HEAP32[$35 >> 2] = HEAP32[$33 >> 2]; //@line 17840
     HEAP8[$36 >> 0] = HEAP8[$32 >> 0] | 0; //@line 17842
    }
    $270 = HEAP8[$29 >> 0] | 0; //@line 17847
    $271 = $270 & 255; //@line 17848
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $271 | 0) > 1) {
     HEAP8[$0 + 4 + $271 >> 0] = 5; //@line 17854
     HEAP8[$29 >> 0] = $270 + 2 << 24 >> 24; //@line 17856
     HEAP8[($270 + 1 & 255) + ($0 + 4) >> 0] = $203; //@line 17859
     HEAP8[$37 >> 0] = 1; //@line 17860
     HEAP8[$0 >> 0] = 1; //@line 17861
     $$0$i116 = 0; //@line 17862
    } else {
     $$0$i116 = -1010; //@line 17864
    }
    $$0$be = $192; //@line 17866
    $$0107$be = $$0$i116; //@line 17866
    break;
   }
  case 6:
   {
    $279 = HEAP32[$38 >> 2] | 0; //@line 17870
    if (!$279) {
     $$0111 = -1; //@line 17873
    } else {
     $281 = HEAP32[$279 >> 2] | 0; //@line 17875
     $AsyncCtx6 = _emscripten_alloc_async_context(236, sp) | 0; //@line 17876
     $282 = FUNCTION_TABLE_ii[$281 & 15]($40) | 0; //@line 17877
     if (___async) {
      label = 26; //@line 17880
      break L4;
     }
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 17883
     $$0111 = $282; //@line 17884
    }
    $344 = HEAP8[$29 >> 0] | 0; //@line 17889
    $345 = $344 & 255; //@line 17890
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $345 | 0) > 2) {
     HEAP8[$0 + 4 + $345 >> 0] = 6; //@line 17896
     HEAP8[($344 + 1 & 255) + ($0 + 4) >> 0] = $$0111; //@line 17900
     HEAP8[$29 >> 0] = $344 + 3 << 24 >> 24; //@line 17902
     HEAP8[($344 + 2 & 255) + ($0 + 4) >> 0] = $39; //@line 17905
     HEAP8[$0 >> 0] = 1; //@line 17906
     $$0$be = $48; //@line 17907
     $$0107$be = 0; //@line 17907
    } else {
     $$0$be = $48; //@line 17909
     $$0107$be = -1010; //@line 17909
    }
    break;
   }
  case 7:
   {
    $359 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 17917
    HEAP32[$8 >> 2] = (HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16 | (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0])) * 100; //@line 17938
    HEAP32[$41 >> 2] = 0; //@line 17939
    $380 = $$0132 + 6 << 24 >> 24; //@line 17940
    HEAP8[$42 >> 0] = HEAP8[$1 + ($$0132 + 5 & 255) >> 0] | 0; //@line 17944
    $386 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 17947
    $AsyncCtx10 = _emscripten_alloc_async_context(236, sp) | 0; //@line 17948
    $387 = FUNCTION_TABLE_iiii[$386 & 31]($7, $359, $8) | 0; //@line 17949
    if (___async) {
     label = 31; //@line 17952
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 17955
    $449 = HEAP8[$29 >> 0] | 0; //@line 17959
    $450 = $449 & 255; //@line 17960
    if ((128 - (HEAPU8[$28 >> 0] | 0) - $450 | 0) > 1) {
     HEAP8[$0 + 4 + $450 >> 0] = 7; //@line 17969
     HEAP8[$29 >> 0] = $449 + 2 << 24 >> 24; //@line 17970
     HEAP8[($449 + 1 & 255) + ($0 + 4) >> 0] = $387; //@line 17971
     HEAP8[$0 >> 0] = 1; //@line 17972
     $$0$i118 = 0; //@line 17973
    } else {
     $$0$i118 = -1010; //@line 17975
    }
    $$0$be = $380; //@line 17977
    $$0107$be = $$0$i118; //@line 17977
    break;
   }
  case 8:
   {
    $459 = $$0132 + 2 << 24 >> 24; //@line 17981
    $463 = HEAP8[$1 + ($48 & 255) >> 0] & 15; //@line 17985
    $467 = ($463 + ($463 << 24 >> 24 == 0 & 1) & 255) * 1e3 | 0; //@line 17990
    HEAP32[$43 >> 2] = $467; //@line 17991
    HEAP32[$44 >> 2] = $467 + 1e3; //@line 17993
    $472 = HEAP8[$29 >> 0] | 0; //@line 17997
    $473 = $472 & 255; //@line 17998
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($473 | 0)) {
     HEAP8[$29 >> 0] = $472 + 1 << 24 >> 24; //@line 18003
     HEAP8[$0 + 4 + $473 >> 0] = 8; //@line 18004
     HEAP8[$37 >> 0] = 1; //@line 18005
     HEAP8[$0 >> 0] = 1; //@line 18006
     $$0$be = $459; //@line 18007
     $$0107$be = 0; //@line 18007
    } else {
     $$0$be = $459; //@line 18009
     $$0107$be = -1010; //@line 18009
    }
    break;
   }
  case 9:
   {
    $477 = $$0132 + 2 << 24 >> 24; //@line 18014
    $481 = HEAPU8[$1 + ($48 & 255) >> 0] | 0; //@line 18018
    $483 = $481 >>> 5 & 1; //@line 18021
    $485 = $481 >>> 4 & 1; //@line 18024
    $488 = HEAP32[(HEAP32[$7 >> 2] | 0) + 44 >> 2] | 0; //@line 18027
    $AsyncCtx14 = _emscripten_alloc_async_context(248, sp) | 0; //@line 18028
    $489 = FUNCTION_TABLE_iiii[$488 & 31]($7, $485, $483) | 0; //@line 18029
    if (___async) {
     label = 39; //@line 18032
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 18035
    if ($489) {
     HEAP8[$21 >> 0] = $485; //@line 18038
     HEAP8[$45 >> 0] = $483; //@line 18039
     HEAPF32[$46 >> 2] = +(HEAPU8[13381 + ($481 & 15) >> 0] | 0); //@line 18043
     $559 = HEAP8[$29 >> 0] | 0; //@line 18047
     $560 = $559 & 255; //@line 18048
     if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($560 | 0)) {
      HEAP8[$29 >> 0] = $559 + 1 << 24 >> 24; //@line 18053
      HEAP8[$0 + 4 + $560 >> 0] = 9; //@line 18054
      HEAP8[$0 >> 0] = 1; //@line 18055
      $$0$be = $477; //@line 18056
      $$0107$be = 0; //@line 18056
     } else {
      $$0$be = $477; //@line 18058
      $$0107$be = -1010; //@line 18058
     }
    } else {
     $$0$be = $477; //@line 18061
     $$0107$be = $$0107131; //@line 18061
    }
    break;
   }
  case 10:
   {
    $567 = HEAP8[$1 + ($48 & 255) >> 0] | 0; //@line 18069
    $580 = $$0132 + 5 << 24 >> 24; //@line 18082
    $587 = (HEAPU8[$1 + ($$0132 + 3 & 255) >> 0] << 8 | HEAPU8[$1 + ($$0132 + 2 & 255) >> 0] | HEAPU8[$1 + ($$0132 + 4 & 255) >> 0] << 16) * 100 | 0; //@line 18089
    $590 = HEAP32[(HEAP32[$7 >> 2] | 0) + 48 >> 2] | 0; //@line 18092
    $AsyncCtx18 = _emscripten_alloc_async_context(236, sp) | 0; //@line 18093
    $591 = FUNCTION_TABLE_iiii[$590 & 31]($7, $567, $587) | 0; //@line 18094
    if (___async) {
     label = 44; //@line 18097
     break L4;
    }
    _emscripten_free_async_context($AsyncCtx18 | 0); //@line 18100
    $653 = HEAP8[$29 >> 0] | 0; //@line 18104
    $654 = $653 & 255; //@line 18105
    if ((128 - (HEAPU8[$28 >> 0] | 0) | 0) > ($654 | 0)) {
     HEAP8[$0 + 4 + $654 >> 0] = 10; //@line 18110
     HEAP8[$29 >> 0] = $653 + 2 << 24 >> 24; //@line 18112
     HEAP8[($653 + 1 & 255) + ($0 + 4) >> 0] = $591; //@line 18115
     HEAP8[$37 >> 0] = 1; //@line 18116
     HEAP8[$0 >> 0] = 1; //@line 18117
     $$0$be = $580; //@line 18118
     $$0107$be = 0; //@line 18118
    } else {
     $$0$be = $580; //@line 18120
     $$0107$be = -1010; //@line 18120
    }
    break;
   }
  default:
   {
    $$0$be = $48; //@line 18125
    $$0107$be = -1013; //@line 18125
   }
  }
  if (($$0$be & 255) < ($3 & 255)) {
   $$0107131 = $$0107$be; //@line 18130
   $$0132 = $$0$be; //@line 18130
  } else {
   $$0107$lcssa = $$0107$be; //@line 18132
   label = 47; //@line 18133
   break;
  }
 }
 if ((label | 0) == 6) {
  HEAP32[$AsyncCtx >> 2] = 488; //@line 18138
  HEAP32[$AsyncCtx + 4 >> 2] = $8; //@line 18140
  HEAP32[$AsyncCtx + 8 >> 2] = $44; //@line 18142
  HEAP32[$AsyncCtx + 12 >> 2] = $22; //@line 18144
  HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 18146
  HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 18148
  HEAP32[$AsyncCtx + 24 >> 2] = $23; //@line 18150
  HEAP32[$AsyncCtx + 28 >> 2] = $43; //@line 18152
  HEAP32[$AsyncCtx + 32 >> 2] = $33; //@line 18154
  HEAP32[$AsyncCtx + 36 >> 2] = $24; //@line 18156
  HEAP32[$AsyncCtx + 40 >> 2] = $45; //@line 18158
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 18160
  HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 18162
  HEAP32[$AsyncCtx + 52 >> 2] = $12; //@line 18164
  HEAP32[$AsyncCtx + 56 >> 2] = $7; //@line 18166
  HEAP32[$AsyncCtx + 60 >> 2] = $34; //@line 18168
  HEAP32[$AsyncCtx + 64 >> 2] = $13; //@line 18170
  HEAP32[$AsyncCtx + 68 >> 2] = $41; //@line 18172
  HEAP32[$AsyncCtx + 72 >> 2] = $31; //@line 18174
  HEAP32[$AsyncCtx + 76 >> 2] = $18; //@line 18176
  HEAP32[$AsyncCtx + 80 >> 2] = $30; //@line 18178
  HEAP32[$AsyncCtx + 84 >> 2] = $8; //@line 18180
  HEAP32[$AsyncCtx + 88 >> 2] = $10; //@line 18182
  HEAP32[$AsyncCtx + 92 >> 2] = $19; //@line 18184
  HEAP32[$AsyncCtx + 96 >> 2] = $59; //@line 18186
  HEAP32[$AsyncCtx + 100 >> 2] = $7; //@line 18188
  HEAP32[$AsyncCtx + 104 >> 2] = $32; //@line 18190
  HEAP32[$AsyncCtx + 108 >> 2] = $20; //@line 18192
  HEAP32[$AsyncCtx + 112 >> 2] = $42; //@line 18194
  HEAP32[$AsyncCtx + 116 >> 2] = $21; //@line 18196
  HEAP32[$AsyncCtx + 120 >> 2] = $8; //@line 18198
  HEAP32[$AsyncCtx + 124 >> 2] = $28; //@line 18200
  HEAP8[$AsyncCtx + 128 >> 0] = $3; //@line 18202
  HEAP32[$AsyncCtx + 132 >> 2] = $16; //@line 18204
  HEAP32[$AsyncCtx + 136 >> 2] = $1; //@line 18206
  HEAP32[$AsyncCtx + 140 >> 2] = $7; //@line 18208
  HEAP32[$AsyncCtx + 144 >> 2] = $0; //@line 18210
  HEAP32[$AsyncCtx + 148 >> 2] = $8; //@line 18212
  HEAP32[$AsyncCtx + 152 >> 2] = $9; //@line 18214
  HEAP8[$AsyncCtx + 156 >> 0] = $2; //@line 18216
  HEAP32[$AsyncCtx + 160 >> 2] = $17; //@line 18218
  HEAP8[$AsyncCtx + 164 >> 0] = $39; //@line 18220
  HEAP32[$AsyncCtx + 168 >> 2] = $8; //@line 18222
  HEAP32[$AsyncCtx + 172 >> 2] = $0; //@line 18224
  HEAP32[$AsyncCtx + 176 >> 2] = $8; //@line 18226
  HEAP32[$AsyncCtx + 180 >> 2] = $8; //@line 18228
  HEAP32[$AsyncCtx + 184 >> 2] = $29; //@line 18230
  HEAP32[$AsyncCtx + 188 >> 2] = $7; //@line 18232
  HEAP32[$AsyncCtx + 192 >> 2] = $40; //@line 18234
  HEAP32[$AsyncCtx + 196 >> 2] = $25; //@line 18236
  HEAP32[$AsyncCtx + 200 >> 2] = $36; //@line 18238
  HEAP32[$AsyncCtx + 204 >> 2] = $$0107131; //@line 18240
  HEAP32[$AsyncCtx + 208 >> 2] = $35; //@line 18242
  HEAP32[$AsyncCtx + 212 >> 2] = $27; //@line 18244
  HEAP32[$AsyncCtx + 216 >> 2] = $15; //@line 18246
  HEAP32[$AsyncCtx + 220 >> 2] = $46; //@line 18248
  HEAP32[$AsyncCtx + 224 >> 2] = $38; //@line 18250
  HEAP32[$AsyncCtx + 228 >> 2] = $37; //@line 18252
  HEAP32[$AsyncCtx + 232 >> 2] = $26; //@line 18254
  HEAP32[$AsyncCtx + 236 >> 2] = $7; //@line 18256
  sp = STACKTOP; //@line 18257
  STACKTOP = sp; //@line 18258
  return 0; //@line 18258
 } else if ((label | 0) == 18) {
  HEAP32[$AsyncCtx3 >> 2] = 489; //@line 18261
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 18263
  HEAP32[$AsyncCtx3 + 8 >> 2] = $44; //@line 18265
  HEAP32[$AsyncCtx3 + 12 >> 2] = $22; //@line 18267
  HEAP32[$AsyncCtx3 + 16 >> 2] = $7; //@line 18269
  HEAP32[$AsyncCtx3 + 20 >> 2] = $8; //@line 18271
  HEAP32[$AsyncCtx3 + 24 >> 2] = $23; //@line 18273
  HEAP32[$AsyncCtx3 + 28 >> 2] = $43; //@line 18275
  HEAP32[$AsyncCtx3 + 32 >> 2] = $33; //@line 18277
  HEAP32[$AsyncCtx3 + 36 >> 2] = $24; //@line 18279
  HEAP32[$AsyncCtx3 + 40 >> 2] = $45; //@line 18281
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 18283
  HEAP32[$AsyncCtx3 + 48 >> 2] = $6; //@line 18285
  HEAP32[$AsyncCtx3 + 52 >> 2] = $12; //@line 18287
  HEAP32[$AsyncCtx3 + 56 >> 2] = $7; //@line 18289
  HEAP32[$AsyncCtx3 + 60 >> 2] = $34; //@line 18291
  HEAP32[$AsyncCtx3 + 64 >> 2] = $13; //@line 18293
  HEAP32[$AsyncCtx3 + 68 >> 2] = $41; //@line 18295
  HEAP32[$AsyncCtx3 + 72 >> 2] = $31; //@line 18297
  HEAP32[$AsyncCtx3 + 76 >> 2] = $18; //@line 18299
  HEAP32[$AsyncCtx3 + 80 >> 2] = $30; //@line 18301
  HEAP8[$AsyncCtx3 + 84 >> 0] = $192; //@line 18303
  HEAP32[$AsyncCtx3 + 88 >> 2] = $8; //@line 18305
  HEAP32[$AsyncCtx3 + 92 >> 2] = $10; //@line 18307
  HEAP32[$AsyncCtx3 + 96 >> 2] = $19; //@line 18309
  HEAP32[$AsyncCtx3 + 100 >> 2] = $7; //@line 18311
  HEAP32[$AsyncCtx3 + 104 >> 2] = $32; //@line 18313
  HEAP32[$AsyncCtx3 + 108 >> 2] = $20; //@line 18315
  HEAP32[$AsyncCtx3 + 112 >> 2] = $42; //@line 18317
  HEAP32[$AsyncCtx3 + 116 >> 2] = $21; //@line 18319
  HEAP32[$AsyncCtx3 + 120 >> 2] = $8; //@line 18321
  HEAP32[$AsyncCtx3 + 124 >> 2] = $28; //@line 18323
  HEAP8[$AsyncCtx3 + 128 >> 0] = $3; //@line 18325
  HEAP32[$AsyncCtx3 + 132 >> 2] = $16; //@line 18327
  HEAP32[$AsyncCtx3 + 136 >> 2] = $1; //@line 18329
  HEAP32[$AsyncCtx3 + 140 >> 2] = $7; //@line 18331
  HEAP32[$AsyncCtx3 + 144 >> 2] = $0; //@line 18333
  HEAP32[$AsyncCtx3 + 148 >> 2] = $8; //@line 18335
  HEAP32[$AsyncCtx3 + 152 >> 2] = $9; //@line 18337
  HEAP8[$AsyncCtx3 + 156 >> 0] = $2; //@line 18339
  HEAP32[$AsyncCtx3 + 160 >> 2] = $17; //@line 18341
  HEAP8[$AsyncCtx3 + 164 >> 0] = $39; //@line 18343
  HEAP32[$AsyncCtx3 + 168 >> 2] = $8; //@line 18345
  HEAP32[$AsyncCtx3 + 172 >> 2] = $0; //@line 18347
  HEAP32[$AsyncCtx3 + 176 >> 2] = $8; //@line 18349
  HEAP32[$AsyncCtx3 + 180 >> 2] = $8; //@line 18351
  HEAP32[$AsyncCtx3 + 184 >> 2] = $29; //@line 18353
  HEAP32[$AsyncCtx3 + 188 >> 2] = $7; //@line 18355
  HEAP32[$AsyncCtx3 + 192 >> 2] = $40; //@line 18357
  HEAP32[$AsyncCtx3 + 196 >> 2] = $25; //@line 18359
  HEAP32[$AsyncCtx3 + 200 >> 2] = $36; //@line 18361
  HEAP32[$AsyncCtx3 + 204 >> 2] = $35; //@line 18363
  HEAP32[$AsyncCtx3 + 208 >> 2] = $27; //@line 18365
  HEAP32[$AsyncCtx3 + 212 >> 2] = $15; //@line 18367
  HEAP32[$AsyncCtx3 + 216 >> 2] = $46; //@line 18369
  HEAP32[$AsyncCtx3 + 220 >> 2] = $38; //@line 18371
  HEAP32[$AsyncCtx3 + 224 >> 2] = $37; //@line 18373
  HEAP32[$AsyncCtx3 + 228 >> 2] = $26; //@line 18375
  HEAP32[$AsyncCtx3 + 232 >> 2] = $7; //@line 18377
  sp = STACKTOP; //@line 18378
  STACKTOP = sp; //@line 18379
  return 0; //@line 18379
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx6 >> 2] = 490; //@line 18382
  HEAP32[$AsyncCtx6 + 4 >> 2] = $8; //@line 18384
  HEAP32[$AsyncCtx6 + 8 >> 2] = $44; //@line 18386
  HEAP32[$AsyncCtx6 + 12 >> 2] = $22; //@line 18388
  HEAP32[$AsyncCtx6 + 16 >> 2] = $7; //@line 18390
  HEAP32[$AsyncCtx6 + 20 >> 2] = $8; //@line 18392
  HEAP32[$AsyncCtx6 + 24 >> 2] = $23; //@line 18394
  HEAP32[$AsyncCtx6 + 28 >> 2] = $43; //@line 18396
  HEAP32[$AsyncCtx6 + 32 >> 2] = $33; //@line 18398
  HEAP32[$AsyncCtx6 + 36 >> 2] = $24; //@line 18400
  HEAP32[$AsyncCtx6 + 40 >> 2] = $45; //@line 18402
  HEAP32[$AsyncCtx6 + 44 >> 2] = $11; //@line 18404
  HEAP32[$AsyncCtx6 + 48 >> 2] = $6; //@line 18406
  HEAP32[$AsyncCtx6 + 52 >> 2] = $12; //@line 18408
  HEAP32[$AsyncCtx6 + 56 >> 2] = $7; //@line 18410
  HEAP32[$AsyncCtx6 + 60 >> 2] = $34; //@line 18412
  HEAP32[$AsyncCtx6 + 64 >> 2] = $13; //@line 18414
  HEAP32[$AsyncCtx6 + 68 >> 2] = $41; //@line 18416
  HEAP32[$AsyncCtx6 + 72 >> 2] = $31; //@line 18418
  HEAP32[$AsyncCtx6 + 76 >> 2] = $18; //@line 18420
  HEAP32[$AsyncCtx6 + 80 >> 2] = $30; //@line 18422
  HEAP32[$AsyncCtx6 + 84 >> 2] = $8; //@line 18424
  HEAP32[$AsyncCtx6 + 88 >> 2] = $10; //@line 18426
  HEAP32[$AsyncCtx6 + 92 >> 2] = $19; //@line 18428
  HEAP32[$AsyncCtx6 + 96 >> 2] = $7; //@line 18430
  HEAP32[$AsyncCtx6 + 100 >> 2] = $32; //@line 18432
  HEAP32[$AsyncCtx6 + 104 >> 2] = $20; //@line 18434
  HEAP8[$AsyncCtx6 + 108 >> 0] = $48; //@line 18436
  HEAP32[$AsyncCtx6 + 112 >> 2] = $42; //@line 18438
  HEAP32[$AsyncCtx6 + 116 >> 2] = $21; //@line 18440
  HEAP32[$AsyncCtx6 + 120 >> 2] = $8; //@line 18442
  HEAP32[$AsyncCtx6 + 124 >> 2] = $28; //@line 18444
  HEAP8[$AsyncCtx6 + 128 >> 0] = $3; //@line 18446
  HEAP32[$AsyncCtx6 + 132 >> 2] = $16; //@line 18448
  HEAP32[$AsyncCtx6 + 136 >> 2] = $1; //@line 18450
  HEAP32[$AsyncCtx6 + 140 >> 2] = $7; //@line 18452
  HEAP32[$AsyncCtx6 + 144 >> 2] = $0; //@line 18454
  HEAP32[$AsyncCtx6 + 148 >> 2] = $8; //@line 18456
  HEAP32[$AsyncCtx6 + 152 >> 2] = $9; //@line 18458
  HEAP8[$AsyncCtx6 + 156 >> 0] = $2; //@line 18460
  HEAP32[$AsyncCtx6 + 160 >> 2] = $17; //@line 18462
  HEAP8[$AsyncCtx6 + 164 >> 0] = $39; //@line 18464
  HEAP32[$AsyncCtx6 + 168 >> 2] = $8; //@line 18466
  HEAP32[$AsyncCtx6 + 172 >> 2] = $0; //@line 18468
  HEAP32[$AsyncCtx6 + 176 >> 2] = $8; //@line 18470
  HEAP32[$AsyncCtx6 + 180 >> 2] = $8; //@line 18472
  HEAP32[$AsyncCtx6 + 184 >> 2] = $29; //@line 18474
  HEAP32[$AsyncCtx6 + 188 >> 2] = $7; //@line 18476
  HEAP32[$AsyncCtx6 + 192 >> 2] = $40; //@line 18478
  HEAP32[$AsyncCtx6 + 196 >> 2] = $25; //@line 18480
  HEAP32[$AsyncCtx6 + 200 >> 2] = $36; //@line 18482
  HEAP32[$AsyncCtx6 + 204 >> 2] = $35; //@line 18484
  HEAP32[$AsyncCtx6 + 208 >> 2] = $27; //@line 18486
  HEAP32[$AsyncCtx6 + 212 >> 2] = $15; //@line 18488
  HEAP32[$AsyncCtx6 + 216 >> 2] = $46; //@line 18490
  HEAP32[$AsyncCtx6 + 220 >> 2] = $38; //@line 18492
  HEAP32[$AsyncCtx6 + 224 >> 2] = $37; //@line 18494
  HEAP32[$AsyncCtx6 + 228 >> 2] = $26; //@line 18496
  HEAP32[$AsyncCtx6 + 232 >> 2] = $7; //@line 18498
  sp = STACKTOP; //@line 18499
  STACKTOP = sp; //@line 18500
  return 0; //@line 18500
 } else if ((label | 0) == 31) {
  HEAP32[$AsyncCtx10 >> 2] = 491; //@line 18503
  HEAP32[$AsyncCtx10 + 4 >> 2] = $8; //@line 18505
  HEAP32[$AsyncCtx10 + 8 >> 2] = $44; //@line 18507
  HEAP32[$AsyncCtx10 + 12 >> 2] = $22; //@line 18509
  HEAP32[$AsyncCtx10 + 16 >> 2] = $7; //@line 18511
  HEAP32[$AsyncCtx10 + 20 >> 2] = $8; //@line 18513
  HEAP32[$AsyncCtx10 + 24 >> 2] = $23; //@line 18515
  HEAP32[$AsyncCtx10 + 28 >> 2] = $43; //@line 18517
  HEAP32[$AsyncCtx10 + 32 >> 2] = $33; //@line 18519
  HEAP32[$AsyncCtx10 + 36 >> 2] = $24; //@line 18521
  HEAP32[$AsyncCtx10 + 40 >> 2] = $45; //@line 18523
  HEAP32[$AsyncCtx10 + 44 >> 2] = $11; //@line 18525
  HEAP32[$AsyncCtx10 + 48 >> 2] = $6; //@line 18527
  HEAP32[$AsyncCtx10 + 52 >> 2] = $12; //@line 18529
  HEAP32[$AsyncCtx10 + 56 >> 2] = $7; //@line 18531
  HEAP32[$AsyncCtx10 + 60 >> 2] = $34; //@line 18533
  HEAP32[$AsyncCtx10 + 64 >> 2] = $13; //@line 18535
  HEAP32[$AsyncCtx10 + 68 >> 2] = $41; //@line 18537
  HEAP32[$AsyncCtx10 + 72 >> 2] = $31; //@line 18539
  HEAP32[$AsyncCtx10 + 76 >> 2] = $18; //@line 18541
  HEAP32[$AsyncCtx10 + 80 >> 2] = $30; //@line 18543
  HEAP32[$AsyncCtx10 + 84 >> 2] = $8; //@line 18545
  HEAP32[$AsyncCtx10 + 88 >> 2] = $10; //@line 18547
  HEAP32[$AsyncCtx10 + 92 >> 2] = $19; //@line 18549
  HEAP32[$AsyncCtx10 + 96 >> 2] = $7; //@line 18551
  HEAP32[$AsyncCtx10 + 100 >> 2] = $32; //@line 18553
  HEAP32[$AsyncCtx10 + 104 >> 2] = $20; //@line 18555
  HEAP32[$AsyncCtx10 + 108 >> 2] = $42; //@line 18557
  HEAP8[$AsyncCtx10 + 112 >> 0] = $380; //@line 18559
  HEAP32[$AsyncCtx10 + 116 >> 2] = $21; //@line 18561
  HEAP32[$AsyncCtx10 + 120 >> 2] = $8; //@line 18563
  HEAP32[$AsyncCtx10 + 124 >> 2] = $28; //@line 18565
  HEAP8[$AsyncCtx10 + 128 >> 0] = $3; //@line 18567
  HEAP32[$AsyncCtx10 + 132 >> 2] = $16; //@line 18569
  HEAP32[$AsyncCtx10 + 136 >> 2] = $1; //@line 18571
  HEAP32[$AsyncCtx10 + 140 >> 2] = $7; //@line 18573
  HEAP32[$AsyncCtx10 + 144 >> 2] = $0; //@line 18575
  HEAP32[$AsyncCtx10 + 148 >> 2] = $8; //@line 18577
  HEAP32[$AsyncCtx10 + 152 >> 2] = $9; //@line 18579
  HEAP8[$AsyncCtx10 + 156 >> 0] = $2; //@line 18581
  HEAP32[$AsyncCtx10 + 160 >> 2] = $17; //@line 18583
  HEAP8[$AsyncCtx10 + 164 >> 0] = $39; //@line 18585
  HEAP32[$AsyncCtx10 + 168 >> 2] = $8; //@line 18587
  HEAP32[$AsyncCtx10 + 172 >> 2] = $0; //@line 18589
  HEAP32[$AsyncCtx10 + 176 >> 2] = $8; //@line 18591
  HEAP32[$AsyncCtx10 + 180 >> 2] = $8; //@line 18593
  HEAP32[$AsyncCtx10 + 184 >> 2] = $29; //@line 18595
  HEAP32[$AsyncCtx10 + 188 >> 2] = $7; //@line 18597
  HEAP32[$AsyncCtx10 + 192 >> 2] = $40; //@line 18599
  HEAP32[$AsyncCtx10 + 196 >> 2] = $25; //@line 18601
  HEAP32[$AsyncCtx10 + 200 >> 2] = $36; //@line 18603
  HEAP32[$AsyncCtx10 + 204 >> 2] = $35; //@line 18605
  HEAP32[$AsyncCtx10 + 208 >> 2] = $27; //@line 18607
  HEAP32[$AsyncCtx10 + 212 >> 2] = $15; //@line 18609
  HEAP32[$AsyncCtx10 + 216 >> 2] = $46; //@line 18611
  HEAP32[$AsyncCtx10 + 220 >> 2] = $38; //@line 18613
  HEAP32[$AsyncCtx10 + 224 >> 2] = $37; //@line 18615
  HEAP32[$AsyncCtx10 + 228 >> 2] = $26; //@line 18617
  HEAP32[$AsyncCtx10 + 232 >> 2] = $7; //@line 18619
  sp = STACKTOP; //@line 18620
  STACKTOP = sp; //@line 18621
  return 0; //@line 18621
 } else if ((label | 0) == 39) {
  HEAP32[$AsyncCtx14 >> 2] = 492; //@line 18624
  HEAP32[$AsyncCtx14 + 4 >> 2] = $8; //@line 18626
  HEAP32[$AsyncCtx14 + 8 >> 2] = $44; //@line 18628
  HEAP32[$AsyncCtx14 + 12 >> 2] = $22; //@line 18630
  HEAP32[$AsyncCtx14 + 16 >> 2] = $7; //@line 18632
  HEAP32[$AsyncCtx14 + 20 >> 2] = $8; //@line 18634
  HEAP32[$AsyncCtx14 + 24 >> 2] = $23; //@line 18636
  HEAP32[$AsyncCtx14 + 28 >> 2] = $43; //@line 18638
  HEAP32[$AsyncCtx14 + 32 >> 2] = $33; //@line 18640
  HEAP32[$AsyncCtx14 + 36 >> 2] = $24; //@line 18642
  HEAP32[$AsyncCtx14 + 40 >> 2] = $45; //@line 18644
  HEAP32[$AsyncCtx14 + 44 >> 2] = $11; //@line 18646
  HEAP32[$AsyncCtx14 + 48 >> 2] = $6; //@line 18648
  HEAP32[$AsyncCtx14 + 52 >> 2] = $12; //@line 18650
  HEAP32[$AsyncCtx14 + 56 >> 2] = $7; //@line 18652
  HEAP32[$AsyncCtx14 + 60 >> 2] = $34; //@line 18654
  HEAP32[$AsyncCtx14 + 64 >> 2] = $13; //@line 18656
  HEAP32[$AsyncCtx14 + 68 >> 2] = $41; //@line 18658
  HEAP32[$AsyncCtx14 + 72 >> 2] = $31; //@line 18660
  HEAP32[$AsyncCtx14 + 76 >> 2] = $18; //@line 18662
  HEAP32[$AsyncCtx14 + 80 >> 2] = $30; //@line 18664
  HEAP32[$AsyncCtx14 + 84 >> 2] = $8; //@line 18666
  HEAP32[$AsyncCtx14 + 88 >> 2] = $10; //@line 18668
  HEAP32[$AsyncCtx14 + 92 >> 2] = $19; //@line 18670
  HEAP8[$AsyncCtx14 + 96 >> 0] = $485; //@line 18672
  HEAP32[$AsyncCtx14 + 100 >> 2] = $7; //@line 18674
  HEAP32[$AsyncCtx14 + 104 >> 2] = $32; //@line 18676
  HEAP32[$AsyncCtx14 + 108 >> 2] = $20; //@line 18678
  HEAP32[$AsyncCtx14 + 112 >> 2] = $42; //@line 18680
  HEAP32[$AsyncCtx14 + 116 >> 2] = $21; //@line 18682
  HEAP32[$AsyncCtx14 + 120 >> 2] = $8; //@line 18684
  HEAP32[$AsyncCtx14 + 124 >> 2] = $28; //@line 18686
  HEAP8[$AsyncCtx14 + 128 >> 0] = $3; //@line 18688
  HEAP32[$AsyncCtx14 + 132 >> 2] = $16; //@line 18690
  HEAP32[$AsyncCtx14 + 136 >> 2] = $1; //@line 18692
  HEAP32[$AsyncCtx14 + 140 >> 2] = $7; //@line 18694
  HEAP32[$AsyncCtx14 + 144 >> 2] = $0; //@line 18696
  HEAP32[$AsyncCtx14 + 148 >> 2] = $8; //@line 18698
  HEAP32[$AsyncCtx14 + 152 >> 2] = $9; //@line 18700
  HEAP8[$AsyncCtx14 + 156 >> 0] = $2; //@line 18702
  HEAP32[$AsyncCtx14 + 160 >> 2] = $17; //@line 18704
  HEAP8[$AsyncCtx14 + 164 >> 0] = $39; //@line 18706
  HEAP32[$AsyncCtx14 + 168 >> 2] = $8; //@line 18708
  HEAP32[$AsyncCtx14 + 172 >> 2] = $0; //@line 18710
  HEAP32[$AsyncCtx14 + 176 >> 2] = $8; //@line 18712
  HEAP32[$AsyncCtx14 + 180 >> 2] = $8; //@line 18714
  HEAP32[$AsyncCtx14 + 184 >> 2] = $29; //@line 18716
  HEAP32[$AsyncCtx14 + 188 >> 2] = $7; //@line 18718
  HEAP32[$AsyncCtx14 + 192 >> 2] = $40; //@line 18720
  HEAP8[$AsyncCtx14 + 196 >> 0] = $477; //@line 18722
  HEAP8[$AsyncCtx14 + 197 >> 0] = $483; //@line 18724
  HEAP32[$AsyncCtx14 + 200 >> 2] = $25; //@line 18726
  HEAP32[$AsyncCtx14 + 204 >> 2] = $36; //@line 18728
  HEAP32[$AsyncCtx14 + 208 >> 2] = $481; //@line 18730
  HEAP32[$AsyncCtx14 + 212 >> 2] = $$0107131; //@line 18732
  HEAP32[$AsyncCtx14 + 216 >> 2] = $35; //@line 18734
  HEAP32[$AsyncCtx14 + 220 >> 2] = $27; //@line 18736
  HEAP32[$AsyncCtx14 + 224 >> 2] = $15; //@line 18738
  HEAP32[$AsyncCtx14 + 228 >> 2] = $46; //@line 18740
  HEAP32[$AsyncCtx14 + 232 >> 2] = $38; //@line 18742
  HEAP32[$AsyncCtx14 + 236 >> 2] = $37; //@line 18744
  HEAP32[$AsyncCtx14 + 240 >> 2] = $26; //@line 18746
  HEAP32[$AsyncCtx14 + 244 >> 2] = $7; //@line 18748
  sp = STACKTOP; //@line 18749
  STACKTOP = sp; //@line 18750
  return 0; //@line 18750
 } else if ((label | 0) == 44) {
  HEAP32[$AsyncCtx18 >> 2] = 493; //@line 18753
  HEAP32[$AsyncCtx18 + 4 >> 2] = $8; //@line 18755
  HEAP32[$AsyncCtx18 + 8 >> 2] = $44; //@line 18757
  HEAP32[$AsyncCtx18 + 12 >> 2] = $22; //@line 18759
  HEAP32[$AsyncCtx18 + 16 >> 2] = $7; //@line 18761
  HEAP32[$AsyncCtx18 + 20 >> 2] = $8; //@line 18763
  HEAP32[$AsyncCtx18 + 24 >> 2] = $23; //@line 18765
  HEAP32[$AsyncCtx18 + 28 >> 2] = $43; //@line 18767
  HEAP32[$AsyncCtx18 + 32 >> 2] = $33; //@line 18769
  HEAP32[$AsyncCtx18 + 36 >> 2] = $24; //@line 18771
  HEAP32[$AsyncCtx18 + 40 >> 2] = $45; //@line 18773
  HEAP32[$AsyncCtx18 + 44 >> 2] = $11; //@line 18775
  HEAP32[$AsyncCtx18 + 48 >> 2] = $6; //@line 18777
  HEAP32[$AsyncCtx18 + 52 >> 2] = $12; //@line 18779
  HEAP32[$AsyncCtx18 + 56 >> 2] = $7; //@line 18781
  HEAP32[$AsyncCtx18 + 60 >> 2] = $34; //@line 18783
  HEAP32[$AsyncCtx18 + 64 >> 2] = $13; //@line 18785
  HEAP32[$AsyncCtx18 + 68 >> 2] = $41; //@line 18787
  HEAP32[$AsyncCtx18 + 72 >> 2] = $31; //@line 18789
  HEAP32[$AsyncCtx18 + 76 >> 2] = $18; //@line 18791
  HEAP32[$AsyncCtx18 + 80 >> 2] = $30; //@line 18793
  HEAP32[$AsyncCtx18 + 84 >> 2] = $8; //@line 18795
  HEAP32[$AsyncCtx18 + 88 >> 2] = $10; //@line 18797
  HEAP32[$AsyncCtx18 + 92 >> 2] = $19; //@line 18799
  HEAP32[$AsyncCtx18 + 96 >> 2] = $7; //@line 18801
  HEAP32[$AsyncCtx18 + 100 >> 2] = $32; //@line 18803
  HEAP32[$AsyncCtx18 + 104 >> 2] = $20; //@line 18805
  HEAP32[$AsyncCtx18 + 108 >> 2] = $42; //@line 18807
  HEAP32[$AsyncCtx18 + 112 >> 2] = $21; //@line 18809
  HEAP32[$AsyncCtx18 + 116 >> 2] = $8; //@line 18811
  HEAP32[$AsyncCtx18 + 120 >> 2] = $28; //@line 18813
  HEAP8[$AsyncCtx18 + 124 >> 0] = $3; //@line 18815
  HEAP32[$AsyncCtx18 + 128 >> 2] = $16; //@line 18817
  HEAP8[$AsyncCtx18 + 132 >> 0] = $580; //@line 18819
  HEAP32[$AsyncCtx18 + 136 >> 2] = $1; //@line 18821
  HEAP32[$AsyncCtx18 + 140 >> 2] = $7; //@line 18823
  HEAP32[$AsyncCtx18 + 144 >> 2] = $0; //@line 18825
  HEAP32[$AsyncCtx18 + 148 >> 2] = $8; //@line 18827
  HEAP32[$AsyncCtx18 + 152 >> 2] = $9; //@line 18829
  HEAP8[$AsyncCtx18 + 156 >> 0] = $2; //@line 18831
  HEAP32[$AsyncCtx18 + 160 >> 2] = $17; //@line 18833
  HEAP8[$AsyncCtx18 + 164 >> 0] = $39; //@line 18835
  HEAP32[$AsyncCtx18 + 168 >> 2] = $8; //@line 18837
  HEAP32[$AsyncCtx18 + 172 >> 2] = $0; //@line 18839
  HEAP32[$AsyncCtx18 + 176 >> 2] = $8; //@line 18841
  HEAP32[$AsyncCtx18 + 180 >> 2] = $8; //@line 18843
  HEAP32[$AsyncCtx18 + 184 >> 2] = $29; //@line 18845
  HEAP32[$AsyncCtx18 + 188 >> 2] = $7; //@line 18847
  HEAP32[$AsyncCtx18 + 192 >> 2] = $40; //@line 18849
  HEAP32[$AsyncCtx18 + 196 >> 2] = $25; //@line 18851
  HEAP32[$AsyncCtx18 + 200 >> 2] = $36; //@line 18853
  HEAP32[$AsyncCtx18 + 204 >> 2] = $35; //@line 18855
  HEAP32[$AsyncCtx18 + 208 >> 2] = $27; //@line 18857
  HEAP32[$AsyncCtx18 + 212 >> 2] = $15; //@line 18859
  HEAP32[$AsyncCtx18 + 216 >> 2] = $46; //@line 18861
  HEAP32[$AsyncCtx18 + 220 >> 2] = $38; //@line 18863
  HEAP32[$AsyncCtx18 + 224 >> 2] = $37; //@line 18865
  HEAP32[$AsyncCtx18 + 228 >> 2] = $26; //@line 18867
  HEAP32[$AsyncCtx18 + 232 >> 2] = $7; //@line 18869
  sp = STACKTOP; //@line 18870
  STACKTOP = sp; //@line 18871
  return 0; //@line 18871
 } else if ((label | 0) == 47) {
  STACKTOP = sp; //@line 18874
  return $$0107$lcssa | 0; //@line 18874
 }
 return 0; //@line 18876
}
function _equeue_dispatch__async_cb_75($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$067 = 0, $$06992 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val11 = 0, $$expand_i1_val13 = 0, $$expand_i1_val9 = 0, $$sink$in$i$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $12 = 0, $127 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $16 = 0, $165 = 0, $166 = 0, $168 = 0, $171 = 0, $173 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $190 = 0, $193 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $4 = 0, $44 = 0, $45 = 0, $48 = 0, $54 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $93 = 0, $95 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 24479
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24481
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24483
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24485
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 24488
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24490
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24492
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24494
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24496
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24498
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24500
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24502
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24504
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24506
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24508
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24510
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24512
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 24514
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 24516
 _equeue_mutex_lock($20); //@line 24517
 HEAP8[$28 >> 0] = (HEAPU8[$28 >> 0] | 0) + 1; //@line 24522
 if (((HEAP32[$30 >> 2] | 0) - $36 | 0) < 1) {
  HEAP32[$30 >> 2] = $36; //@line 24527
 }
 $44 = HEAP32[$32 >> 2] | 0; //@line 24529
 HEAP32[$34 >> 2] = $44; //@line 24530
 $45 = $44; //@line 24531
 L6 : do {
  if (!$44) {
   $$04055$i = $16; //@line 24535
   $54 = $45; //@line 24535
   label = 8; //@line 24536
  } else {
   $$04063$i = $16; //@line 24538
   $48 = $45; //@line 24538
   do {
    if (((HEAP32[$48 + 20 >> 2] | 0) - $36 | 0) >= 1) {
     $$04055$i = $$04063$i; //@line 24545
     $54 = $48; //@line 24545
     label = 8; //@line 24546
     break L6;
    }
    $$04063$i = $48 + 8 | 0; //@line 24549
    $48 = HEAP32[$$04063$i >> 2] | 0; //@line 24550
   } while (($48 | 0) != 0);
   HEAP32[$2 >> 2] = 0; //@line 24558
   $$0405571$i = $$04063$i; //@line 24559
  }
 } while (0);
 if ((label | 0) == 8) {
  HEAP32[$2 >> 2] = $54; //@line 24563
  if (!$54) {
   $$0405571$i = $$04055$i; //@line 24566
  } else {
   HEAP32[$54 + 16 >> 2] = $2; //@line 24569
   $$0405571$i = $$04055$i; //@line 24570
  }
 }
 HEAP32[$$0405571$i >> 2] = 0; //@line 24573
 _equeue_mutex_unlock($20); //@line 24574
 $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = HEAP32[$16 >> 2] | 0; //@line 24575
 L15 : do {
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74; //@line 24580
   $$04258$i = $16; //@line 24580
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 24582
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 24583
    $$03956$i = 0; //@line 24584
    $$057$i = $$04159$i$looptemp; //@line 24584
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 24587
     $63 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 24589
     if (!$63) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 24594
      $$057$i = $63; //@line 24594
      $$03956$i = $$03956$i$phi; //@line 24594
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 24597
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = HEAP32[$16 >> 2] | 0; //@line 24605
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 | 0) {
    $$06992 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75; //@line 24608
    while (1) {
     $66 = $$06992 + 8 | 0; //@line 24610
     $67 = HEAP32[$66 >> 2] | 0; //@line 24611
     $69 = HEAP32[$$06992 + 32 >> 2] | 0; //@line 24613
     if ($69 | 0) {
      label = 17; //@line 24616
      break;
     }
     $93 = HEAP32[$$06992 + 24 >> 2] | 0; //@line 24620
     if (($93 | 0) > -1) {
      label = 21; //@line 24623
      break;
     }
     $117 = $$06992 + 4 | 0; //@line 24627
     $118 = HEAP8[$117 >> 0] | 0; //@line 24628
     HEAP8[$117 >> 0] = (($118 + 1 & 255) << HEAP32[$12 >> 2] | 0) == 0 ? 1 : ($118 & 255) + 1 & 255; //@line 24637
     $127 = HEAP32[$$06992 + 28 >> 2] | 0; //@line 24639
     if ($127 | 0) {
      label = 25; //@line 24642
      break;
     }
     _equeue_mutex_lock($4); //@line 24645
     $150 = HEAP32[$10 >> 2] | 0; //@line 24646
     L28 : do {
      if (!$150) {
       $$02329$i$i = $10; //@line 24650
       label = 34; //@line 24651
      } else {
       $152 = HEAP32[$$06992 >> 2] | 0; //@line 24653
       $$025$i$i = $10; //@line 24654
       $154 = $150; //@line 24654
       while (1) {
        $153 = HEAP32[$154 >> 2] | 0; //@line 24656
        if ($153 >>> 0 >= $152 >>> 0) {
         break;
        }
        $156 = $154 + 8 | 0; //@line 24661
        $157 = HEAP32[$156 >> 2] | 0; //@line 24662
        if (!$157) {
         $$02329$i$i = $156; //@line 24665
         label = 34; //@line 24666
         break L28;
        } else {
         $$025$i$i = $156; //@line 24669
         $154 = $157; //@line 24669
        }
       }
       if (($153 | 0) == ($152 | 0)) {
        HEAP32[$$06992 + 12 >> 2] = $154; //@line 24675
        $$02330$i$i = $$025$i$i; //@line 24678
        $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 24678
       } else {
        $$02329$i$i = $$025$i$i; //@line 24680
        label = 34; //@line 24681
       }
      }
     } while (0);
     if ((label | 0) == 34) {
      label = 0; //@line 24686
      HEAP32[$$06992 + 12 >> 2] = 0; //@line 24688
      $$02330$i$i = $$02329$i$i; //@line 24689
      $$sink$in$i$i = $$02329$i$i; //@line 24689
     }
     HEAP32[$66 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 24692
     HEAP32[$$02330$i$i >> 2] = $$06992; //@line 24693
     _equeue_mutex_unlock($4); //@line 24694
     if (!$67) {
      break L15;
     } else {
      $$06992 = $67; //@line 24699
     }
    }
    if ((label | 0) == 17) {
     $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 24704
     FUNCTION_TABLE_vi[$69 & 1023]($$06992 + 36 | 0); //@line 24705
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 24708
      $72 = $ReallocAsyncCtx + 4 | 0; //@line 24709
      HEAP32[$72 >> 2] = $67; //@line 24710
      $73 = $ReallocAsyncCtx + 8 | 0; //@line 24711
      HEAP32[$73 >> 2] = $2; //@line 24712
      $74 = $ReallocAsyncCtx + 12 | 0; //@line 24713
      HEAP32[$74 >> 2] = $66; //@line 24714
      $75 = $ReallocAsyncCtx + 16 | 0; //@line 24715
      HEAP32[$75 >> 2] = $$06992; //@line 24716
      $76 = $ReallocAsyncCtx + 20 | 0; //@line 24717
      HEAP32[$76 >> 2] = $4; //@line 24718
      $77 = $ReallocAsyncCtx + 24 | 0; //@line 24719
      HEAP32[$77 >> 2] = $6; //@line 24720
      $78 = $ReallocAsyncCtx + 28 | 0; //@line 24721
      $$expand_i1_val = $8 & 1; //@line 24722
      HEAP8[$78 >> 0] = $$expand_i1_val; //@line 24723
      $79 = $ReallocAsyncCtx + 32 | 0; //@line 24724
      HEAP32[$79 >> 2] = $10; //@line 24725
      $80 = $ReallocAsyncCtx + 36 | 0; //@line 24726
      HEAP32[$80 >> 2] = $12; //@line 24727
      $81 = $ReallocAsyncCtx + 40 | 0; //@line 24728
      HEAP32[$81 >> 2] = $14; //@line 24729
      $82 = $ReallocAsyncCtx + 44 | 0; //@line 24730
      HEAP32[$82 >> 2] = $16; //@line 24731
      $83 = $ReallocAsyncCtx + 48 | 0; //@line 24732
      HEAP32[$83 >> 2] = $18; //@line 24733
      $84 = $ReallocAsyncCtx + 52 | 0; //@line 24734
      HEAP32[$84 >> 2] = $20; //@line 24735
      $85 = $ReallocAsyncCtx + 56 | 0; //@line 24736
      HEAP32[$85 >> 2] = $22; //@line 24737
      $86 = $ReallocAsyncCtx + 60 | 0; //@line 24738
      HEAP32[$86 >> 2] = $24; //@line 24739
      $87 = $ReallocAsyncCtx + 64 | 0; //@line 24740
      HEAP32[$87 >> 2] = $26; //@line 24741
      $88 = $ReallocAsyncCtx + 68 | 0; //@line 24742
      HEAP32[$88 >> 2] = $28; //@line 24743
      $89 = $ReallocAsyncCtx + 72 | 0; //@line 24744
      HEAP32[$89 >> 2] = $30; //@line 24745
      $90 = $ReallocAsyncCtx + 76 | 0; //@line 24746
      HEAP32[$90 >> 2] = $32; //@line 24747
      $91 = $ReallocAsyncCtx + 80 | 0; //@line 24748
      HEAP32[$91 >> 2] = $34; //@line 24749
      sp = STACKTOP; //@line 24750
      return;
     }
     ___async_unwind = 0; //@line 24753
     HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 24754
     $72 = $ReallocAsyncCtx + 4 | 0; //@line 24755
     HEAP32[$72 >> 2] = $67; //@line 24756
     $73 = $ReallocAsyncCtx + 8 | 0; //@line 24757
     HEAP32[$73 >> 2] = $2; //@line 24758
     $74 = $ReallocAsyncCtx + 12 | 0; //@line 24759
     HEAP32[$74 >> 2] = $66; //@line 24760
     $75 = $ReallocAsyncCtx + 16 | 0; //@line 24761
     HEAP32[$75 >> 2] = $$06992; //@line 24762
     $76 = $ReallocAsyncCtx + 20 | 0; //@line 24763
     HEAP32[$76 >> 2] = $4; //@line 24764
     $77 = $ReallocAsyncCtx + 24 | 0; //@line 24765
     HEAP32[$77 >> 2] = $6; //@line 24766
     $78 = $ReallocAsyncCtx + 28 | 0; //@line 24767
     $$expand_i1_val = $8 & 1; //@line 24768
     HEAP8[$78 >> 0] = $$expand_i1_val; //@line 24769
     $79 = $ReallocAsyncCtx + 32 | 0; //@line 24770
     HEAP32[$79 >> 2] = $10; //@line 24771
     $80 = $ReallocAsyncCtx + 36 | 0; //@line 24772
     HEAP32[$80 >> 2] = $12; //@line 24773
     $81 = $ReallocAsyncCtx + 40 | 0; //@line 24774
     HEAP32[$81 >> 2] = $14; //@line 24775
     $82 = $ReallocAsyncCtx + 44 | 0; //@line 24776
     HEAP32[$82 >> 2] = $16; //@line 24777
     $83 = $ReallocAsyncCtx + 48 | 0; //@line 24778
     HEAP32[$83 >> 2] = $18; //@line 24779
     $84 = $ReallocAsyncCtx + 52 | 0; //@line 24780
     HEAP32[$84 >> 2] = $20; //@line 24781
     $85 = $ReallocAsyncCtx + 56 | 0; //@line 24782
     HEAP32[$85 >> 2] = $22; //@line 24783
     $86 = $ReallocAsyncCtx + 60 | 0; //@line 24784
     HEAP32[$86 >> 2] = $24; //@line 24785
     $87 = $ReallocAsyncCtx + 64 | 0; //@line 24786
     HEAP32[$87 >> 2] = $26; //@line 24787
     $88 = $ReallocAsyncCtx + 68 | 0; //@line 24788
     HEAP32[$88 >> 2] = $28; //@line 24789
     $89 = $ReallocAsyncCtx + 72 | 0; //@line 24790
     HEAP32[$89 >> 2] = $30; //@line 24791
     $90 = $ReallocAsyncCtx + 76 | 0; //@line 24792
     HEAP32[$90 >> 2] = $32; //@line 24793
     $91 = $ReallocAsyncCtx + 80 | 0; //@line 24794
     HEAP32[$91 >> 2] = $34; //@line 24795
     sp = STACKTOP; //@line 24796
     return;
    } else if ((label | 0) == 21) {
     $95 = $$06992 + 20 | 0; //@line 24800
     HEAP32[$95 >> 2] = (HEAP32[$95 >> 2] | 0) + $93; //@line 24803
     $98 = _equeue_tick() | 0; //@line 24804
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 24805
     _equeue_enqueue($14, $$06992, $98) | 0; //@line 24806
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 24809
      $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 24810
      HEAP32[$99 >> 2] = $67; //@line 24811
      $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 24812
      HEAP32[$100 >> 2] = $2; //@line 24813
      $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 24814
      HEAP32[$101 >> 2] = $4; //@line 24815
      $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 24816
      HEAP32[$102 >> 2] = $6; //@line 24817
      $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 24818
      $$expand_i1_val9 = $8 & 1; //@line 24819
      HEAP8[$103 >> 0] = $$expand_i1_val9; //@line 24820
      $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 24821
      HEAP32[$104 >> 2] = $10; //@line 24822
      $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 24823
      HEAP32[$105 >> 2] = $12; //@line 24824
      $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 24825
      HEAP32[$106 >> 2] = $14; //@line 24826
      $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 24827
      HEAP32[$107 >> 2] = $16; //@line 24828
      $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 24829
      HEAP32[$108 >> 2] = $18; //@line 24830
      $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 24831
      HEAP32[$109 >> 2] = $20; //@line 24832
      $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 24833
      HEAP32[$110 >> 2] = $22; //@line 24834
      $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 24835
      HEAP32[$111 >> 2] = $24; //@line 24836
      $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 24837
      HEAP32[$112 >> 2] = $26; //@line 24838
      $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 24839
      HEAP32[$113 >> 2] = $28; //@line 24840
      $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 24841
      HEAP32[$114 >> 2] = $30; //@line 24842
      $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 24843
      HEAP32[$115 >> 2] = $32; //@line 24844
      $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 24845
      HEAP32[$116 >> 2] = $34; //@line 24846
      sp = STACKTOP; //@line 24847
      return;
     }
     ___async_unwind = 0; //@line 24850
     HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 24851
     $99 = $ReallocAsyncCtx4 + 4 | 0; //@line 24852
     HEAP32[$99 >> 2] = $67; //@line 24853
     $100 = $ReallocAsyncCtx4 + 8 | 0; //@line 24854
     HEAP32[$100 >> 2] = $2; //@line 24855
     $101 = $ReallocAsyncCtx4 + 12 | 0; //@line 24856
     HEAP32[$101 >> 2] = $4; //@line 24857
     $102 = $ReallocAsyncCtx4 + 16 | 0; //@line 24858
     HEAP32[$102 >> 2] = $6; //@line 24859
     $103 = $ReallocAsyncCtx4 + 20 | 0; //@line 24860
     $$expand_i1_val9 = $8 & 1; //@line 24861
     HEAP8[$103 >> 0] = $$expand_i1_val9; //@line 24862
     $104 = $ReallocAsyncCtx4 + 24 | 0; //@line 24863
     HEAP32[$104 >> 2] = $10; //@line 24864
     $105 = $ReallocAsyncCtx4 + 28 | 0; //@line 24865
     HEAP32[$105 >> 2] = $12; //@line 24866
     $106 = $ReallocAsyncCtx4 + 32 | 0; //@line 24867
     HEAP32[$106 >> 2] = $14; //@line 24868
     $107 = $ReallocAsyncCtx4 + 36 | 0; //@line 24869
     HEAP32[$107 >> 2] = $16; //@line 24870
     $108 = $ReallocAsyncCtx4 + 40 | 0; //@line 24871
     HEAP32[$108 >> 2] = $18; //@line 24872
     $109 = $ReallocAsyncCtx4 + 44 | 0; //@line 24873
     HEAP32[$109 >> 2] = $20; //@line 24874
     $110 = $ReallocAsyncCtx4 + 48 | 0; //@line 24875
     HEAP32[$110 >> 2] = $22; //@line 24876
     $111 = $ReallocAsyncCtx4 + 52 | 0; //@line 24877
     HEAP32[$111 >> 2] = $24; //@line 24878
     $112 = $ReallocAsyncCtx4 + 56 | 0; //@line 24879
     HEAP32[$112 >> 2] = $26; //@line 24880
     $113 = $ReallocAsyncCtx4 + 60 | 0; //@line 24881
     HEAP32[$113 >> 2] = $28; //@line 24882
     $114 = $ReallocAsyncCtx4 + 64 | 0; //@line 24883
     HEAP32[$114 >> 2] = $30; //@line 24884
     $115 = $ReallocAsyncCtx4 + 68 | 0; //@line 24885
     HEAP32[$115 >> 2] = $32; //@line 24886
     $116 = $ReallocAsyncCtx4 + 72 | 0; //@line 24887
     HEAP32[$116 >> 2] = $34; //@line 24888
     sp = STACKTOP; //@line 24889
     return;
    } else if ((label | 0) == 25) {
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 24894
     FUNCTION_TABLE_vi[$127 & 1023]($$06992 + 36 | 0); //@line 24895
     if (___async) {
      HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 24898
      $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 24899
      HEAP32[$130 >> 2] = $67; //@line 24900
      $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 24901
      HEAP32[$131 >> 2] = $2; //@line 24902
      $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 24903
      HEAP32[$132 >> 2] = $66; //@line 24904
      $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 24905
      HEAP32[$133 >> 2] = $$06992; //@line 24906
      $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 24907
      HEAP32[$134 >> 2] = $4; //@line 24908
      $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 24909
      HEAP32[$135 >> 2] = $6; //@line 24910
      $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 24911
      $$expand_i1_val11 = $8 & 1; //@line 24912
      HEAP8[$136 >> 0] = $$expand_i1_val11; //@line 24913
      $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 24914
      HEAP32[$137 >> 2] = $10; //@line 24915
      $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 24916
      HEAP32[$138 >> 2] = $12; //@line 24917
      $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 24918
      HEAP32[$139 >> 2] = $14; //@line 24919
      $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 24920
      HEAP32[$140 >> 2] = $16; //@line 24921
      $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 24922
      HEAP32[$141 >> 2] = $18; //@line 24923
      $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 24924
      HEAP32[$142 >> 2] = $20; //@line 24925
      $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 24926
      HEAP32[$143 >> 2] = $22; //@line 24927
      $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 24928
      HEAP32[$144 >> 2] = $24; //@line 24929
      $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 24930
      HEAP32[$145 >> 2] = $26; //@line 24931
      $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 24932
      HEAP32[$146 >> 2] = $28; //@line 24933
      $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 24934
      HEAP32[$147 >> 2] = $30; //@line 24935
      $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 24936
      HEAP32[$148 >> 2] = $32; //@line 24937
      $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 24938
      HEAP32[$149 >> 2] = $34; //@line 24939
      sp = STACKTOP; //@line 24940
      return;
     }
     ___async_unwind = 0; //@line 24943
     HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 24944
     $130 = $ReallocAsyncCtx2 + 4 | 0; //@line 24945
     HEAP32[$130 >> 2] = $67; //@line 24946
     $131 = $ReallocAsyncCtx2 + 8 | 0; //@line 24947
     HEAP32[$131 >> 2] = $2; //@line 24948
     $132 = $ReallocAsyncCtx2 + 12 | 0; //@line 24949
     HEAP32[$132 >> 2] = $66; //@line 24950
     $133 = $ReallocAsyncCtx2 + 16 | 0; //@line 24951
     HEAP32[$133 >> 2] = $$06992; //@line 24952
     $134 = $ReallocAsyncCtx2 + 20 | 0; //@line 24953
     HEAP32[$134 >> 2] = $4; //@line 24954
     $135 = $ReallocAsyncCtx2 + 24 | 0; //@line 24955
     HEAP32[$135 >> 2] = $6; //@line 24956
     $136 = $ReallocAsyncCtx2 + 28 | 0; //@line 24957
     $$expand_i1_val11 = $8 & 1; //@line 24958
     HEAP8[$136 >> 0] = $$expand_i1_val11; //@line 24959
     $137 = $ReallocAsyncCtx2 + 32 | 0; //@line 24960
     HEAP32[$137 >> 2] = $10; //@line 24961
     $138 = $ReallocAsyncCtx2 + 36 | 0; //@line 24962
     HEAP32[$138 >> 2] = $12; //@line 24963
     $139 = $ReallocAsyncCtx2 + 40 | 0; //@line 24964
     HEAP32[$139 >> 2] = $14; //@line 24965
     $140 = $ReallocAsyncCtx2 + 44 | 0; //@line 24966
     HEAP32[$140 >> 2] = $16; //@line 24967
     $141 = $ReallocAsyncCtx2 + 48 | 0; //@line 24968
     HEAP32[$141 >> 2] = $18; //@line 24969
     $142 = $ReallocAsyncCtx2 + 52 | 0; //@line 24970
     HEAP32[$142 >> 2] = $20; //@line 24971
     $143 = $ReallocAsyncCtx2 + 56 | 0; //@line 24972
     HEAP32[$143 >> 2] = $22; //@line 24973
     $144 = $ReallocAsyncCtx2 + 60 | 0; //@line 24974
     HEAP32[$144 >> 2] = $24; //@line 24975
     $145 = $ReallocAsyncCtx2 + 64 | 0; //@line 24976
     HEAP32[$145 >> 2] = $26; //@line 24977
     $146 = $ReallocAsyncCtx2 + 68 | 0; //@line 24978
     HEAP32[$146 >> 2] = $28; //@line 24979
     $147 = $ReallocAsyncCtx2 + 72 | 0; //@line 24980
     HEAP32[$147 >> 2] = $30; //@line 24981
     $148 = $ReallocAsyncCtx2 + 76 | 0; //@line 24982
     HEAP32[$148 >> 2] = $32; //@line 24983
     $149 = $ReallocAsyncCtx2 + 80 | 0; //@line 24984
     HEAP32[$149 >> 2] = $34; //@line 24985
     sp = STACKTOP; //@line 24986
     return;
    }
   }
  }
 } while (0);
 $165 = _equeue_tick() | 0; //@line 24992
 if ($8) {
  $166 = $6 - $165 | 0; //@line 24994
  if (($166 | 0) < 1) {
   $168 = $14 + 40 | 0; //@line 24997
   if (HEAP32[$168 >> 2] | 0) {
    _equeue_mutex_lock($20); //@line 25001
    $171 = HEAP32[$168 >> 2] | 0; //@line 25002
    if ($171 | 0) {
     $173 = HEAP32[$2 >> 2] | 0; //@line 25005
     if ($173 | 0) {
      $176 = HEAP32[$14 + 44 >> 2] | 0; //@line 25009
      $179 = (HEAP32[$173 + 20 >> 2] | 0) - $165 | 0; //@line 25012
      $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 25016
      FUNCTION_TABLE_vii[$171 & 15]($176, $179 & ~($179 >> 31)); //@line 25017
      if (___async) {
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 25020
       $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 25021
       HEAP32[$183 >> 2] = $26; //@line 25022
       $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 25023
       HEAP32[$184 >> 2] = $20; //@line 25024
       $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 25025
       HEAP32[$185 >> 2] = $22; //@line 25026
       sp = STACKTOP; //@line 25027
       return;
      }
      ___async_unwind = 0; //@line 25030
      HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 25031
      $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 25032
      HEAP32[$183 >> 2] = $26; //@line 25033
      $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 25034
      HEAP32[$184 >> 2] = $20; //@line 25035
      $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 25036
      HEAP32[$185 >> 2] = $22; //@line 25037
      sp = STACKTOP; //@line 25038
      return;
     }
    }
    HEAP8[$26 >> 0] = 1; //@line 25042
    _equeue_mutex_unlock($20); //@line 25043
   }
   HEAP8[$22 >> 0] = 0; //@line 25045
   return;
  } else {
   $$067 = $166; //@line 25048
  }
 } else {
  $$067 = -1; //@line 25051
 }
 _equeue_mutex_lock($20); //@line 25053
 $186 = HEAP32[$2 >> 2] | 0; //@line 25054
 if (!$186) {
  $$2 = $$067; //@line 25057
 } else {
  $190 = (HEAP32[$186 + 20 >> 2] | 0) - $165 | 0; //@line 25061
  $193 = $190 & ~($190 >> 31); //@line 25064
  $$2 = $193 >>> 0 < $$067 >>> 0 ? $193 : $$067; //@line 25067
 }
 _equeue_mutex_unlock($20); //@line 25069
 _equeue_sema_wait($24, $$2) | 0; //@line 25070
 do {
  if (HEAP8[$22 >> 0] | 0) {
   _equeue_mutex_lock($20); //@line 25075
   if (!(HEAP8[$22 >> 0] | 0)) {
    _equeue_mutex_unlock($20); //@line 25079
    break;
   }
   HEAP8[$22 >> 0] = 0; //@line 25082
   _equeue_mutex_unlock($20); //@line 25083
   return;
  }
 } while (0);
 $199 = _equeue_tick() | 0; //@line 25087
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 25088
 _wait_ms(20); //@line 25089
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 25092
  $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 25093
  HEAP32[$200 >> 2] = $2; //@line 25094
  $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 25095
  HEAP32[$201 >> 2] = $4; //@line 25096
  $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 25097
  HEAP32[$202 >> 2] = $6; //@line 25098
  $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 25099
  $$expand_i1_val13 = $8 & 1; //@line 25100
  HEAP8[$203 >> 0] = $$expand_i1_val13; //@line 25101
  $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 25102
  HEAP32[$204 >> 2] = $10; //@line 25103
  $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 25104
  HEAP32[$205 >> 2] = $12; //@line 25105
  $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 25106
  HEAP32[$206 >> 2] = $14; //@line 25107
  $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 25108
  HEAP32[$207 >> 2] = $16; //@line 25109
  $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 25110
  HEAP32[$208 >> 2] = $18; //@line 25111
  $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 25112
  HEAP32[$209 >> 2] = $20; //@line 25113
  $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 25114
  HEAP32[$210 >> 2] = $22; //@line 25115
  $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 25116
  HEAP32[$211 >> 2] = $24; //@line 25117
  $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 25118
  HEAP32[$212 >> 2] = $26; //@line 25119
  $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 25120
  HEAP32[$213 >> 2] = $28; //@line 25121
  $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 25122
  HEAP32[$214 >> 2] = $30; //@line 25123
  $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 25124
  HEAP32[$215 >> 2] = $32; //@line 25125
  $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 25126
  HEAP32[$216 >> 2] = $34; //@line 25127
  $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 25128
  HEAP32[$217 >> 2] = $199; //@line 25129
  sp = STACKTOP; //@line 25130
  return;
 }
 ___async_unwind = 0; //@line 25133
 HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 25134
 $200 = $ReallocAsyncCtx5 + 4 | 0; //@line 25135
 HEAP32[$200 >> 2] = $2; //@line 25136
 $201 = $ReallocAsyncCtx5 + 8 | 0; //@line 25137
 HEAP32[$201 >> 2] = $4; //@line 25138
 $202 = $ReallocAsyncCtx5 + 12 | 0; //@line 25139
 HEAP32[$202 >> 2] = $6; //@line 25140
 $203 = $ReallocAsyncCtx5 + 16 | 0; //@line 25141
 $$expand_i1_val13 = $8 & 1; //@line 25142
 HEAP8[$203 >> 0] = $$expand_i1_val13; //@line 25143
 $204 = $ReallocAsyncCtx5 + 20 | 0; //@line 25144
 HEAP32[$204 >> 2] = $10; //@line 25145
 $205 = $ReallocAsyncCtx5 + 24 | 0; //@line 25146
 HEAP32[$205 >> 2] = $12; //@line 25147
 $206 = $ReallocAsyncCtx5 + 28 | 0; //@line 25148
 HEAP32[$206 >> 2] = $14; //@line 25149
 $207 = $ReallocAsyncCtx5 + 32 | 0; //@line 25150
 HEAP32[$207 >> 2] = $16; //@line 25151
 $208 = $ReallocAsyncCtx5 + 36 | 0; //@line 25152
 HEAP32[$208 >> 2] = $18; //@line 25153
 $209 = $ReallocAsyncCtx5 + 40 | 0; //@line 25154
 HEAP32[$209 >> 2] = $20; //@line 25155
 $210 = $ReallocAsyncCtx5 + 44 | 0; //@line 25156
 HEAP32[$210 >> 2] = $22; //@line 25157
 $211 = $ReallocAsyncCtx5 + 48 | 0; //@line 25158
 HEAP32[$211 >> 2] = $24; //@line 25159
 $212 = $ReallocAsyncCtx5 + 52 | 0; //@line 25160
 HEAP32[$212 >> 2] = $26; //@line 25161
 $213 = $ReallocAsyncCtx5 + 56 | 0; //@line 25162
 HEAP32[$213 >> 2] = $28; //@line 25163
 $214 = $ReallocAsyncCtx5 + 60 | 0; //@line 25164
 HEAP32[$214 >> 2] = $30; //@line 25165
 $215 = $ReallocAsyncCtx5 + 64 | 0; //@line 25166
 HEAP32[$215 >> 2] = $32; //@line 25167
 $216 = $ReallocAsyncCtx5 + 68 | 0; //@line 25168
 HEAP32[$216 >> 2] = $34; //@line 25169
 $217 = $ReallocAsyncCtx5 + 72 | 0; //@line 25170
 HEAP32[$217 >> 2] = $199; //@line 25171
 sp = STACKTOP; //@line 25172
 return;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14296
 STACKTOP = STACKTOP + 560 | 0; //@line 14297
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 14297
 $6 = sp + 8 | 0; //@line 14298
 $7 = sp; //@line 14299
 $8 = sp + 524 | 0; //@line 14300
 $9 = $8; //@line 14301
 $10 = sp + 512 | 0; //@line 14302
 HEAP32[$7 >> 2] = 0; //@line 14303
 $11 = $10 + 12 | 0; //@line 14304
 ___DOUBLE_BITS_677($1) | 0; //@line 14305
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 14310
  $$0520 = 1; //@line 14310
  $$0521 = 16283; //@line 14310
 } else {
  $$0471 = $1; //@line 14321
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 14321
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 16284 : 16289 : 16286; //@line 14321
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 14323
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 14332
   $31 = $$0520 + 3 | 0; //@line 14337
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 14339
   _out_670($0, $$0521, $$0520); //@line 14340
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 16310 : 16314 : $27 ? 16302 : 16306, 3); //@line 14341
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 14343
   $$sink560 = $31; //@line 14344
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 14347
   $36 = $35 != 0.0; //@line 14348
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 14352
   }
   $39 = $5 | 32; //@line 14354
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 14357
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 14360
    $44 = $$0520 | 2; //@line 14361
    $46 = 12 - $3 | 0; //@line 14363
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 14368
     } else {
      $$0509585 = 8.0; //@line 14370
      $$1508586 = $46; //@line 14370
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 14372
       $$0509585 = $$0509585 * 16.0; //@line 14373
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 14388
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 14393
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 14398
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 14401
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14404
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 14407
     HEAP8[$68 >> 0] = 48; //@line 14408
     $$0511 = $68; //@line 14409
    } else {
     $$0511 = $66; //@line 14411
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 14418
    $76 = $$0511 + -2 | 0; //@line 14421
    HEAP8[$76 >> 0] = $5 + 15; //@line 14422
    $77 = ($3 | 0) < 1; //@line 14423
    $79 = ($4 & 8 | 0) == 0; //@line 14425
    $$0523 = $8; //@line 14426
    $$2473 = $$1472; //@line 14426
    while (1) {
     $80 = ~~$$2473; //@line 14428
     $86 = $$0523 + 1 | 0; //@line 14434
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[16318 + $80 >> 0]; //@line 14435
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 14438
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 14447
      } else {
       HEAP8[$86 >> 0] = 46; //@line 14450
       $$1524 = $$0523 + 2 | 0; //@line 14451
      }
     } else {
      $$1524 = $86; //@line 14454
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 14458
     }
    }
    $$pre693 = $$1524; //@line 14464
    if (!$3) {
     label = 24; //@line 14466
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 14474
      $$sink = $3 + 2 | 0; //@line 14474
     } else {
      label = 24; //@line 14476
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 14480
     $$pre$phi691Z2D = $101; //@line 14481
     $$sink = $101; //@line 14481
    }
    $104 = $11 - $76 | 0; //@line 14485
    $106 = $104 + $44 + $$sink | 0; //@line 14487
    _pad_676($0, 32, $2, $106, $4); //@line 14488
    _out_670($0, $$0521$, $44); //@line 14489
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 14491
    _out_670($0, $8, $$pre$phi691Z2D); //@line 14492
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 14494
    _out_670($0, $76, $104); //@line 14495
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 14497
    $$sink560 = $106; //@line 14498
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 14502
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 14506
    HEAP32[$7 >> 2] = $113; //@line 14507
    $$3 = $35 * 268435456.0; //@line 14508
    $$pr = $113; //@line 14508
   } else {
    $$3 = $35; //@line 14511
    $$pr = HEAP32[$7 >> 2] | 0; //@line 14511
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 14515
   $$0498 = $$561; //@line 14516
   $$4 = $$3; //@line 14516
   do {
    $116 = ~~$$4 >>> 0; //@line 14518
    HEAP32[$$0498 >> 2] = $116; //@line 14519
    $$0498 = $$0498 + 4 | 0; //@line 14520
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 14523
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 14533
    $$1499662 = $$0498; //@line 14533
    $124 = $$pr; //@line 14533
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 14536
     $$0488655 = $$1499662 + -4 | 0; //@line 14537
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 14540
     } else {
      $$0488657 = $$0488655; //@line 14542
      $$0497656 = 0; //@line 14542
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 14545
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 14547
       $131 = tempRet0; //@line 14548
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14549
       HEAP32[$$0488657 >> 2] = $132; //@line 14551
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 14552
       $$0488657 = $$0488657 + -4 | 0; //@line 14554
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 14564
      } else {
       $138 = $$1482663 + -4 | 0; //@line 14566
       HEAP32[$138 >> 2] = $$0497656; //@line 14567
       $$2483$ph = $138; //@line 14568
      }
     }
     $$2500 = $$1499662; //@line 14571
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 14577
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 14581
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 14587
     HEAP32[$7 >> 2] = $144; //@line 14588
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 14591
      $$1499662 = $$2500; //@line 14591
      $124 = $144; //@line 14591
     } else {
      $$1482$lcssa = $$2483$ph; //@line 14593
      $$1499$lcssa = $$2500; //@line 14593
      $$pr566 = $144; //@line 14593
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 14598
    $$1499$lcssa = $$0498; //@line 14598
    $$pr566 = $$pr; //@line 14598
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 14604
    $150 = ($39 | 0) == 102; //@line 14605
    $$3484650 = $$1482$lcssa; //@line 14606
    $$3501649 = $$1499$lcssa; //@line 14606
    $152 = $$pr566; //@line 14606
    while (1) {
     $151 = 0 - $152 | 0; //@line 14608
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 14610
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 14614
      $161 = 1e9 >>> $154; //@line 14615
      $$0487644 = 0; //@line 14616
      $$1489643 = $$3484650; //@line 14616
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 14618
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 14622
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 14623
       $$1489643 = $$1489643 + 4 | 0; //@line 14624
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14635
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 14638
       $$4502 = $$3501649; //@line 14638
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 14641
       $$$3484700 = $$$3484; //@line 14642
       $$4502 = $$3501649 + 4 | 0; //@line 14642
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 14649
      $$4502 = $$3501649; //@line 14649
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 14651
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 14658
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 14660
     HEAP32[$7 >> 2] = $152; //@line 14661
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 14666
      $$3501$lcssa = $$$4502; //@line 14666
      break;
     } else {
      $$3484650 = $$$3484700; //@line 14664
      $$3501649 = $$$4502; //@line 14664
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 14671
    $$3501$lcssa = $$1499$lcssa; //@line 14671
   }
   $185 = $$561; //@line 14674
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 14679
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 14680
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 14683
    } else {
     $$0514639 = $189; //@line 14685
     $$0530638 = 10; //@line 14685
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 14687
      $193 = $$0514639 + 1 | 0; //@line 14688
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 14691
       break;
      } else {
       $$0514639 = $193; //@line 14694
      }
     }
    }
   } else {
    $$1515 = 0; //@line 14699
   }
   $198 = ($39 | 0) == 103; //@line 14704
   $199 = ($$540 | 0) != 0; //@line 14705
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 14708
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 14717
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 14720
    $213 = ($209 | 0) % 9 | 0; //@line 14721
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 14724
     $$1531632 = 10; //@line 14724
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 14727
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 14730
       $$1531632 = $215; //@line 14730
      } else {
       $$1531$lcssa = $215; //@line 14732
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 14737
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 14739
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 14740
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 14743
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 14746
     $$4518 = $$1515; //@line 14746
     $$8 = $$3484$lcssa; //@line 14746
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 14751
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 14752
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 14757
     if (!$$0520) {
      $$1467 = $$$564; //@line 14760
      $$1469 = $$543; //@line 14760
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 14763
      $$1467 = $230 ? -$$$564 : $$$564; //@line 14768
      $$1469 = $230 ? -$$543 : $$543; //@line 14768
     }
     $233 = $217 - $218 | 0; //@line 14770
     HEAP32[$212 >> 2] = $233; //@line 14771
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 14775
      HEAP32[$212 >> 2] = $236; //@line 14776
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 14779
       $$sink547625 = $212; //@line 14779
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 14781
        HEAP32[$$sink547625 >> 2] = 0; //@line 14782
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 14785
         HEAP32[$240 >> 2] = 0; //@line 14786
         $$6 = $240; //@line 14787
        } else {
         $$6 = $$5486626; //@line 14789
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 14792
        HEAP32[$238 >> 2] = $242; //@line 14793
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 14796
         $$sink547625 = $238; //@line 14796
        } else {
         $$5486$lcssa = $$6; //@line 14798
         $$sink547$lcssa = $238; //@line 14798
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 14803
       $$sink547$lcssa = $212; //@line 14803
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 14808
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 14809
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 14812
       $$4518 = $247; //@line 14812
       $$8 = $$5486$lcssa; //@line 14812
      } else {
       $$2516621 = $247; //@line 14814
       $$2532620 = 10; //@line 14814
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 14816
        $251 = $$2516621 + 1 | 0; //@line 14817
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 14820
         $$4518 = $251; //@line 14820
         $$8 = $$5486$lcssa; //@line 14820
         break;
        } else {
         $$2516621 = $251; //@line 14823
        }
       }
      }
     } else {
      $$4492 = $212; //@line 14828
      $$4518 = $$1515; //@line 14828
      $$8 = $$3484$lcssa; //@line 14828
     }
    }
    $253 = $$4492 + 4 | 0; //@line 14831
    $$5519$ph = $$4518; //@line 14834
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 14834
    $$9$ph = $$8; //@line 14834
   } else {
    $$5519$ph = $$1515; //@line 14836
    $$7505$ph = $$3501$lcssa; //@line 14836
    $$9$ph = $$3484$lcssa; //@line 14836
   }
   $$7505 = $$7505$ph; //@line 14838
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 14842
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 14845
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 14849
    } else {
     $$lcssa675 = 1; //@line 14851
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 14855
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 14860
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 14868
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 14868
     } else {
      $$0479 = $5 + -2 | 0; //@line 14872
      $$2476 = $$540$ + -1 | 0; //@line 14872
     }
     $267 = $4 & 8; //@line 14874
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 14879
       if (!$270) {
        $$2529 = 9; //@line 14882
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 14887
         $$3533616 = 10; //@line 14887
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 14889
          $275 = $$1528617 + 1 | 0; //@line 14890
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 14896
           break;
          } else {
           $$1528617 = $275; //@line 14894
          }
         }
        } else {
         $$2529 = 0; //@line 14901
        }
       }
      } else {
       $$2529 = 9; //@line 14905
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 14913
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 14915
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 14917
       $$1480 = $$0479; //@line 14920
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 14920
       $$pre$phi698Z2D = 0; //@line 14920
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 14924
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 14926
       $$1480 = $$0479; //@line 14929
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 14929
       $$pre$phi698Z2D = 0; //@line 14929
       break;
      }
     } else {
      $$1480 = $$0479; //@line 14933
      $$3477 = $$2476; //@line 14933
      $$pre$phi698Z2D = $267; //@line 14933
     }
    } else {
     $$1480 = $5; //@line 14937
     $$3477 = $$540; //@line 14937
     $$pre$phi698Z2D = $4 & 8; //@line 14937
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 14940
   $294 = ($292 | 0) != 0 & 1; //@line 14942
   $296 = ($$1480 | 32 | 0) == 102; //@line 14944
   if ($296) {
    $$2513 = 0; //@line 14948
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 14948
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 14951
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 14954
    $304 = $11; //@line 14955
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 14960
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 14962
      HEAP8[$308 >> 0] = 48; //@line 14963
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 14968
      } else {
       $$1512$lcssa = $308; //@line 14970
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 14975
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 14982
    $318 = $$1512$lcssa + -2 | 0; //@line 14984
    HEAP8[$318 >> 0] = $$1480; //@line 14985
    $$2513 = $318; //@line 14988
    $$pn = $304 - $318 | 0; //@line 14988
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 14993
   _pad_676($0, 32, $2, $323, $4); //@line 14994
   _out_670($0, $$0521, $$0520); //@line 14995
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 14997
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 15000
    $326 = $8 + 9 | 0; //@line 15001
    $327 = $326; //@line 15002
    $328 = $8 + 8 | 0; //@line 15003
    $$5493600 = $$0496$$9; //@line 15004
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 15007
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 15012
       $$1465 = $328; //@line 15013
      } else {
       $$1465 = $330; //@line 15015
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 15022
       $$0464597 = $330; //@line 15023
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 15025
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 15028
        } else {
         $$1465 = $335; //@line 15030
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 15035
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 15040
     $$5493600 = $$5493600 + 4 | 0; //@line 15041
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 16334, 1); //@line 15051
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 15057
     $$6494592 = $$5493600; //@line 15057
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 15060
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 15065
       $$0463587 = $347; //@line 15066
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 15068
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 15071
        } else {
         $$0463$lcssa = $351; //@line 15073
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 15078
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 15082
      $$6494592 = $$6494592 + 4 | 0; //@line 15083
      $356 = $$4478593 + -9 | 0; //@line 15084
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 15091
       break;
      } else {
       $$4478593 = $356; //@line 15089
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 15096
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 15099
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 15102
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 15105
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 15106
     $365 = $363; //@line 15107
     $366 = 0 - $9 | 0; //@line 15108
     $367 = $8 + 8 | 0; //@line 15109
     $$5605 = $$3477; //@line 15110
     $$7495604 = $$9$ph; //@line 15110
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 15113
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 15116
       $$0 = $367; //@line 15117
      } else {
       $$0 = $369; //@line 15119
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 15124
        _out_670($0, $$0, 1); //@line 15125
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 15129
         break;
        }
        _out_670($0, 16334, 1); //@line 15132
        $$2 = $375; //@line 15133
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 15137
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 15142
        $$1601 = $$0; //@line 15143
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 15145
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 15148
         } else {
          $$2 = $373; //@line 15150
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 15157
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 15160
      $381 = $$5605 - $378 | 0; //@line 15161
      $$7495604 = $$7495604 + 4 | 0; //@line 15162
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 15169
       break;
      } else {
       $$5605 = $381; //@line 15167
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 15174
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 15177
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 15181
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 15184
   $$sink560 = $323; //@line 15185
  }
 } while (0);
 STACKTOP = sp; //@line 15190
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 15190
}
function _equeue_dispatch__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$06992$reg2mem$0 = 0, $$06992$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem10$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22600
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22604
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22610
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22612
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 22615
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22617
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22619
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22621
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22623
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22625
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22627
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22629
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22631
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22633
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22635
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22637
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 22639
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 22641
 $$06992$reg2mem$0 = HEAP32[$0 + 16 >> 2] | 0; //@line 22642
 $$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 22642
 $$reg2mem10$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 22642
 while (1) {
  $68 = HEAP32[$$06992$reg2mem$0 + 24 >> 2] | 0; //@line 22645
  if (($68 | 0) > -1) {
   label = 8; //@line 22648
   break;
  }
  $92 = $$06992$reg2mem$0 + 4 | 0; //@line 22652
  $93 = HEAP8[$92 >> 0] | 0; //@line 22653
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$18 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 22662
  $102 = HEAP32[$$06992$reg2mem$0 + 28 >> 2] | 0; //@line 22664
  if ($102 | 0) {
   label = 12; //@line 22667
   break;
  }
  _equeue_mutex_lock($10); //@line 22670
  $125 = HEAP32[$16 >> 2] | 0; //@line 22671
  L6 : do {
   if (!$125) {
    $$02329$i$i = $16; //@line 22675
    label = 21; //@line 22676
   } else {
    $127 = HEAP32[$$06992$reg2mem$0 >> 2] | 0; //@line 22678
    $$025$i$i = $16; //@line 22679
    $129 = $125; //@line 22679
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 22681
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 22686
     $132 = HEAP32[$131 >> 2] | 0; //@line 22687
     if (!$132) {
      $$02329$i$i = $131; //@line 22690
      label = 21; //@line 22691
      break L6;
     } else {
      $$025$i$i = $131; //@line 22694
      $129 = $132; //@line 22694
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06992$reg2mem$0 + 12 >> 2] = $129; //@line 22700
     $$02330$i$i = $$025$i$i; //@line 22703
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 22703
    } else {
     $$02329$i$i = $$025$i$i; //@line 22705
     label = 21; //@line 22706
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 22711
   HEAP32[$$06992$reg2mem$0 + 12 >> 2] = 0; //@line 22713
   $$02330$i$i = $$02329$i$i; //@line 22714
   $$sink$in$i$i = $$02329$i$i; //@line 22714
  }
  HEAP32[$$reg2mem10$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 22717
  HEAP32[$$02330$i$i >> 2] = $$06992$reg2mem$0; //@line 22718
  _equeue_mutex_unlock($10); //@line 22719
  if (!$$reg2mem$0) {
   label = 24; //@line 22722
   break;
  }
  $41 = $$reg2mem$0 + 8 | 0; //@line 22725
  $42 = HEAP32[$41 >> 2] | 0; //@line 22726
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 22728
  if (!$44) {
   $$06992$reg2mem$0$phi = $$reg2mem$0; //@line 22731
   $$reg2mem$0 = $42; //@line 22731
   $$reg2mem10$0 = $41; //@line 22731
   $$06992$reg2mem$0 = $$06992$reg2mem$0$phi; //@line 22731
  } else {
   label = 3; //@line 22733
   break;
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 22739
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 22740
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 22743
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 22744
   HEAP32[$47 >> 2] = $42; //@line 22745
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 22746
   HEAP32[$48 >> 2] = $4; //@line 22747
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 22748
   HEAP32[$49 >> 2] = $41; //@line 22749
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 22750
   HEAP32[$50 >> 2] = $$reg2mem$0; //@line 22751
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 22752
   HEAP32[$51 >> 2] = $10; //@line 22753
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 22754
   HEAP32[$52 >> 2] = $12; //@line 22755
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 22756
   $$expand_i1_val = $14 & 1; //@line 22757
   HEAP8[$53 >> 0] = $$expand_i1_val; //@line 22758
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 22759
   HEAP32[$54 >> 2] = $16; //@line 22760
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 22761
   HEAP32[$55 >> 2] = $18; //@line 22762
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 22763
   HEAP32[$56 >> 2] = $20; //@line 22764
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 22765
   HEAP32[$57 >> 2] = $22; //@line 22766
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 22767
   HEAP32[$58 >> 2] = $24; //@line 22768
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 22769
   HEAP32[$59 >> 2] = $26; //@line 22770
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 22771
   HEAP32[$60 >> 2] = $28; //@line 22772
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 22773
   HEAP32[$61 >> 2] = $30; //@line 22774
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 22775
   HEAP32[$62 >> 2] = $32; //@line 22776
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 22777
   HEAP32[$63 >> 2] = $34; //@line 22778
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 22779
   HEAP32[$64 >> 2] = $36; //@line 22780
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 22781
   HEAP32[$65 >> 2] = $38; //@line 22782
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 22783
   HEAP32[$66 >> 2] = $40; //@line 22784
   sp = STACKTOP; //@line 22785
   return;
  }
  ___async_unwind = 0; //@line 22788
  HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 22789
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 22790
  HEAP32[$47 >> 2] = $42; //@line 22791
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 22792
  HEAP32[$48 >> 2] = $4; //@line 22793
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 22794
  HEAP32[$49 >> 2] = $41; //@line 22795
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 22796
  HEAP32[$50 >> 2] = $$reg2mem$0; //@line 22797
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 22798
  HEAP32[$51 >> 2] = $10; //@line 22799
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 22800
  HEAP32[$52 >> 2] = $12; //@line 22801
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 22802
  $$expand_i1_val = $14 & 1; //@line 22803
  HEAP8[$53 >> 0] = $$expand_i1_val; //@line 22804
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 22805
  HEAP32[$54 >> 2] = $16; //@line 22806
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 22807
  HEAP32[$55 >> 2] = $18; //@line 22808
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 22809
  HEAP32[$56 >> 2] = $20; //@line 22810
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 22811
  HEAP32[$57 >> 2] = $22; //@line 22812
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 22813
  HEAP32[$58 >> 2] = $24; //@line 22814
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 22815
  HEAP32[$59 >> 2] = $26; //@line 22816
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 22817
  HEAP32[$60 >> 2] = $28; //@line 22818
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 22819
  HEAP32[$61 >> 2] = $30; //@line 22820
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 22821
  HEAP32[$62 >> 2] = $32; //@line 22822
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 22823
  HEAP32[$63 >> 2] = $34; //@line 22824
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 22825
  HEAP32[$64 >> 2] = $36; //@line 22826
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 22827
  HEAP32[$65 >> 2] = $38; //@line 22828
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 22829
  HEAP32[$66 >> 2] = $40; //@line 22830
  sp = STACKTOP; //@line 22831
  return;
 } else if ((label | 0) == 8) {
  $70 = $$06992$reg2mem$0 + 20 | 0; //@line 22835
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 22838
  $73 = _equeue_tick() | 0; //@line 22839
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 22840
  _equeue_enqueue($20, $$06992$reg2mem$0, $73) | 0; //@line 22841
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 22844
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 22845
   HEAP32[$74 >> 2] = $$reg2mem$0; //@line 22846
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 22847
   HEAP32[$75 >> 2] = $4; //@line 22848
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 22849
   HEAP32[$76 >> 2] = $10; //@line 22850
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 22851
   HEAP32[$77 >> 2] = $12; //@line 22852
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 22853
   $$expand_i1_val31 = $14 & 1; //@line 22854
   HEAP8[$78 >> 0] = $$expand_i1_val31; //@line 22855
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 22856
   HEAP32[$79 >> 2] = $16; //@line 22857
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 22858
   HEAP32[$80 >> 2] = $18; //@line 22859
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 22860
   HEAP32[$81 >> 2] = $20; //@line 22861
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 22862
   HEAP32[$82 >> 2] = $22; //@line 22863
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 22864
   HEAP32[$83 >> 2] = $24; //@line 22865
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 22866
   HEAP32[$84 >> 2] = $26; //@line 22867
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 22868
   HEAP32[$85 >> 2] = $28; //@line 22869
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 22870
   HEAP32[$86 >> 2] = $30; //@line 22871
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 22872
   HEAP32[$87 >> 2] = $32; //@line 22873
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 22874
   HEAP32[$88 >> 2] = $34; //@line 22875
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 22876
   HEAP32[$89 >> 2] = $36; //@line 22877
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 22878
   HEAP32[$90 >> 2] = $38; //@line 22879
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 22880
   HEAP32[$91 >> 2] = $40; //@line 22881
   sp = STACKTOP; //@line 22882
   return;
  }
  ___async_unwind = 0; //@line 22885
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 22886
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 22887
  HEAP32[$74 >> 2] = $$reg2mem$0; //@line 22888
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 22889
  HEAP32[$75 >> 2] = $4; //@line 22890
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 22891
  HEAP32[$76 >> 2] = $10; //@line 22892
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 22893
  HEAP32[$77 >> 2] = $12; //@line 22894
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 22895
  $$expand_i1_val31 = $14 & 1; //@line 22896
  HEAP8[$78 >> 0] = $$expand_i1_val31; //@line 22897
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 22898
  HEAP32[$79 >> 2] = $16; //@line 22899
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 22900
  HEAP32[$80 >> 2] = $18; //@line 22901
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 22902
  HEAP32[$81 >> 2] = $20; //@line 22903
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 22904
  HEAP32[$82 >> 2] = $22; //@line 22905
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 22906
  HEAP32[$83 >> 2] = $24; //@line 22907
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 22908
  HEAP32[$84 >> 2] = $26; //@line 22909
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 22910
  HEAP32[$85 >> 2] = $28; //@line 22911
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 22912
  HEAP32[$86 >> 2] = $30; //@line 22913
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 22914
  HEAP32[$87 >> 2] = $32; //@line 22915
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 22916
  HEAP32[$88 >> 2] = $34; //@line 22917
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 22918
  HEAP32[$89 >> 2] = $36; //@line 22919
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 22920
  HEAP32[$90 >> 2] = $38; //@line 22921
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 22922
  HEAP32[$91 >> 2] = $40; //@line 22923
  sp = STACKTOP; //@line 22924
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 22929
  FUNCTION_TABLE_vi[$102 & 1023]($$06992$reg2mem$0 + 36 | 0); //@line 22930
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 22933
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 22934
   HEAP32[$105 >> 2] = $$reg2mem$0; //@line 22935
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 22936
   HEAP32[$106 >> 2] = $4; //@line 22937
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 22938
   HEAP32[$107 >> 2] = $$reg2mem10$0; //@line 22939
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 22940
   HEAP32[$108 >> 2] = $$06992$reg2mem$0; //@line 22941
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 22942
   HEAP32[$109 >> 2] = $10; //@line 22943
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 22944
   HEAP32[$110 >> 2] = $12; //@line 22945
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 22946
   $$expand_i1_val33 = $14 & 1; //@line 22947
   HEAP8[$111 >> 0] = $$expand_i1_val33; //@line 22948
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 22949
   HEAP32[$112 >> 2] = $16; //@line 22950
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 22951
   HEAP32[$113 >> 2] = $18; //@line 22952
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 22953
   HEAP32[$114 >> 2] = $20; //@line 22954
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 22955
   HEAP32[$115 >> 2] = $22; //@line 22956
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 22957
   HEAP32[$116 >> 2] = $24; //@line 22958
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 22959
   HEAP32[$117 >> 2] = $26; //@line 22960
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 22961
   HEAP32[$118 >> 2] = $28; //@line 22962
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 22963
   HEAP32[$119 >> 2] = $30; //@line 22964
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 22965
   HEAP32[$120 >> 2] = $32; //@line 22966
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 22967
   HEAP32[$121 >> 2] = $34; //@line 22968
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 22969
   HEAP32[$122 >> 2] = $36; //@line 22970
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 22971
   HEAP32[$123 >> 2] = $38; //@line 22972
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 22973
   HEAP32[$124 >> 2] = $40; //@line 22974
   sp = STACKTOP; //@line 22975
   return;
  }
  ___async_unwind = 0; //@line 22978
  HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 22979
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 22980
  HEAP32[$105 >> 2] = $$reg2mem$0; //@line 22981
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 22982
  HEAP32[$106 >> 2] = $4; //@line 22983
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 22984
  HEAP32[$107 >> 2] = $$reg2mem10$0; //@line 22985
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 22986
  HEAP32[$108 >> 2] = $$06992$reg2mem$0; //@line 22987
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 22988
  HEAP32[$109 >> 2] = $10; //@line 22989
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 22990
  HEAP32[$110 >> 2] = $12; //@line 22991
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 22992
  $$expand_i1_val33 = $14 & 1; //@line 22993
  HEAP8[$111 >> 0] = $$expand_i1_val33; //@line 22994
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 22995
  HEAP32[$112 >> 2] = $16; //@line 22996
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 22997
  HEAP32[$113 >> 2] = $18; //@line 22998
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 22999
  HEAP32[$114 >> 2] = $20; //@line 23000
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 23001
  HEAP32[$115 >> 2] = $22; //@line 23002
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 23003
  HEAP32[$116 >> 2] = $24; //@line 23004
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 23005
  HEAP32[$117 >> 2] = $26; //@line 23006
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 23007
  HEAP32[$118 >> 2] = $28; //@line 23008
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 23009
  HEAP32[$119 >> 2] = $30; //@line 23010
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 23011
  HEAP32[$120 >> 2] = $32; //@line 23012
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 23013
  HEAP32[$121 >> 2] = $34; //@line 23014
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 23015
  HEAP32[$122 >> 2] = $36; //@line 23016
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 23017
  HEAP32[$123 >> 2] = $38; //@line 23018
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 23019
  HEAP32[$124 >> 2] = $40; //@line 23020
  sp = STACKTOP; //@line 23021
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 23025
  if ($14) {
   $141 = $12 - $140 | 0; //@line 23027
   if (($141 | 0) < 1) {
    $143 = $20 + 40 | 0; //@line 23030
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($26); //@line 23034
     $146 = HEAP32[$143 >> 2] | 0; //@line 23035
     if ($146 | 0) {
      $148 = HEAP32[$4 >> 2] | 0; //@line 23038
      if ($148 | 0) {
       $151 = HEAP32[$20 + 44 >> 2] | 0; //@line 23042
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 23045
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 23049
       FUNCTION_TABLE_vii[$146 & 15]($151, $154 & ~($154 >> 31)); //@line 23050
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 23053
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 23054
        HEAP32[$158 >> 2] = $32; //@line 23055
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 23056
        HEAP32[$159 >> 2] = $26; //@line 23057
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 23058
        HEAP32[$160 >> 2] = $28; //@line 23059
        sp = STACKTOP; //@line 23060
        return;
       }
       ___async_unwind = 0; //@line 23063
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 23064
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 23065
       HEAP32[$158 >> 2] = $32; //@line 23066
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 23067
       HEAP32[$159 >> 2] = $26; //@line 23068
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 23069
       HEAP32[$160 >> 2] = $28; //@line 23070
       sp = STACKTOP; //@line 23071
       return;
      }
     }
     HEAP8[$32 >> 0] = 1; //@line 23075
     _equeue_mutex_unlock($26); //@line 23076
    }
    HEAP8[$28 >> 0] = 0; //@line 23078
    return;
   } else {
    $$067 = $141; //@line 23081
   }
  } else {
   $$067 = -1; //@line 23084
  }
  _equeue_mutex_lock($26); //@line 23086
  $161 = HEAP32[$4 >> 2] | 0; //@line 23087
  if (!$161) {
   $$2 = $$067; //@line 23090
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 23094
   $168 = $165 & ~($165 >> 31); //@line 23097
   $$2 = $168 >>> 0 < $$067 >>> 0 ? $168 : $$067; //@line 23100
  }
  _equeue_mutex_unlock($26); //@line 23102
  _equeue_sema_wait($30, $$2) | 0; //@line 23103
  do {
   if (HEAP8[$28 >> 0] | 0) {
    _equeue_mutex_lock($26); //@line 23108
    if (!(HEAP8[$28 >> 0] | 0)) {
     _equeue_mutex_unlock($26); //@line 23112
     break;
    }
    HEAP8[$28 >> 0] = 0; //@line 23115
    _equeue_mutex_unlock($26); //@line 23116
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 23120
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 23121
  _wait_ms(20); //@line 23122
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 23125
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 23126
   HEAP32[$175 >> 2] = $4; //@line 23127
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 23128
   HEAP32[$176 >> 2] = $10; //@line 23129
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 23130
   HEAP32[$177 >> 2] = $12; //@line 23131
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 23132
   $$expand_i1_val35 = $14 & 1; //@line 23133
   HEAP8[$178 >> 0] = $$expand_i1_val35; //@line 23134
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 23135
   HEAP32[$179 >> 2] = $16; //@line 23136
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 23137
   HEAP32[$180 >> 2] = $18; //@line 23138
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 23139
   HEAP32[$181 >> 2] = $20; //@line 23140
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 23141
   HEAP32[$182 >> 2] = $22; //@line 23142
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 23143
   HEAP32[$183 >> 2] = $24; //@line 23144
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 23145
   HEAP32[$184 >> 2] = $26; //@line 23146
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 23147
   HEAP32[$185 >> 2] = $28; //@line 23148
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 23149
   HEAP32[$186 >> 2] = $30; //@line 23150
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 23151
   HEAP32[$187 >> 2] = $32; //@line 23152
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 23153
   HEAP32[$188 >> 2] = $34; //@line 23154
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 23155
   HEAP32[$189 >> 2] = $36; //@line 23156
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 23157
   HEAP32[$190 >> 2] = $38; //@line 23158
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 23159
   HEAP32[$191 >> 2] = $40; //@line 23160
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 23161
   HEAP32[$192 >> 2] = $174; //@line 23162
   sp = STACKTOP; //@line 23163
   return;
  }
  ___async_unwind = 0; //@line 23166
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 23167
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 23168
  HEAP32[$175 >> 2] = $4; //@line 23169
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 23170
  HEAP32[$176 >> 2] = $10; //@line 23171
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 23172
  HEAP32[$177 >> 2] = $12; //@line 23173
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 23174
  $$expand_i1_val35 = $14 & 1; //@line 23175
  HEAP8[$178 >> 0] = $$expand_i1_val35; //@line 23176
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 23177
  HEAP32[$179 >> 2] = $16; //@line 23178
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 23179
  HEAP32[$180 >> 2] = $18; //@line 23180
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 23181
  HEAP32[$181 >> 2] = $20; //@line 23182
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 23183
  HEAP32[$182 >> 2] = $22; //@line 23184
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 23185
  HEAP32[$183 >> 2] = $24; //@line 23186
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 23187
  HEAP32[$184 >> 2] = $26; //@line 23188
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 23189
  HEAP32[$185 >> 2] = $28; //@line 23190
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 23191
  HEAP32[$186 >> 2] = $30; //@line 23192
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 23193
  HEAP32[$187 >> 2] = $32; //@line 23194
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 23195
  HEAP32[$188 >> 2] = $34; //@line 23196
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 23197
  HEAP32[$189 >> 2] = $36; //@line 23198
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 23199
  HEAP32[$190 >> 2] = $38; //@line 23200
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 23201
  HEAP32[$191 >> 2] = $40; //@line 23202
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 23203
  HEAP32[$192 >> 2] = $174; //@line 23204
  sp = STACKTOP; //@line 23205
  return;
 }
}
function _equeue_dispatch__async_cb_72($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$06992$reg2mem$0 = 0, $$06992$reg2mem$0$phi = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val31 = 0, $$expand_i1_val33 = 0, $$expand_i1_val35 = 0, $$reg2mem$0 = 0, $$reg2mem10$0 = 0, $$sink$in$i$i = 0, $10 = 0, $102 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $14 = 0, $140 = 0, $141 = 0, $143 = 0, $146 = 0, $148 = 0, $151 = 0, $154 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $165 = 0, $168 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23223
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23227
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23233
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23235
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 23238
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23240
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23242
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23244
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23246
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23248
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23250
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23252
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23254
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23256
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 23258
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 23260
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 23262
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 23264
 $$06992$reg2mem$0 = HEAP32[$0 + 16 >> 2] | 0; //@line 23265
 $$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 23265
 $$reg2mem10$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 23265
 while (1) {
  _equeue_mutex_lock($10); //@line 23267
  $125 = HEAP32[$16 >> 2] | 0; //@line 23268
  L4 : do {
   if (!$125) {
    $$02329$i$i = $16; //@line 23272
    label = 21; //@line 23273
   } else {
    $127 = HEAP32[$$06992$reg2mem$0 >> 2] | 0; //@line 23275
    $$025$i$i = $16; //@line 23276
    $129 = $125; //@line 23276
    while (1) {
     $128 = HEAP32[$129 >> 2] | 0; //@line 23278
     if ($128 >>> 0 >= $127 >>> 0) {
      break;
     }
     $131 = $129 + 8 | 0; //@line 23283
     $132 = HEAP32[$131 >> 2] | 0; //@line 23284
     if (!$132) {
      $$02329$i$i = $131; //@line 23287
      label = 21; //@line 23288
      break L4;
     } else {
      $$025$i$i = $131; //@line 23291
      $129 = $132; //@line 23291
     }
    }
    if (($128 | 0) == ($127 | 0)) {
     HEAP32[$$06992$reg2mem$0 + 12 >> 2] = $129; //@line 23297
     $$02330$i$i = $$025$i$i; //@line 23300
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 23300
    } else {
     $$02329$i$i = $$025$i$i; //@line 23302
     label = 21; //@line 23303
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 23308
   HEAP32[$$06992$reg2mem$0 + 12 >> 2] = 0; //@line 23310
   $$02330$i$i = $$02329$i$i; //@line 23311
   $$sink$in$i$i = $$02329$i$i; //@line 23311
  }
  HEAP32[$$reg2mem10$0 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 23314
  HEAP32[$$02330$i$i >> 2] = $$06992$reg2mem$0; //@line 23315
  _equeue_mutex_unlock($10); //@line 23316
  if (!$$reg2mem$0) {
   label = 24; //@line 23319
   break;
  }
  $$reg2mem10$0 = $$reg2mem$0 + 8 | 0; //@line 23322
  $42 = HEAP32[$$reg2mem10$0 >> 2] | 0; //@line 23323
  $44 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 23325
  if ($44 | 0) {
   label = 3; //@line 23328
   break;
  }
  $68 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 23332
  if (($68 | 0) > -1) {
   label = 7; //@line 23335
   break;
  }
  $92 = $$reg2mem$0 + 4 | 0; //@line 23339
  $93 = HEAP8[$92 >> 0] | 0; //@line 23340
  HEAP8[$92 >> 0] = (($93 + 1 & 255) << HEAP32[$18 >> 2] | 0) == 0 ? 1 : ($93 & 255) + 1 & 255; //@line 23349
  $102 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 23351
  if ($102 | 0) {
   label = 11; //@line 23356
   break;
  } else {
   $$06992$reg2mem$0$phi = $$reg2mem$0; //@line 23354
   $$reg2mem$0 = $42; //@line 23354
   $$06992$reg2mem$0 = $$06992$reg2mem$0$phi; //@line 23354
  }
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 23362
  FUNCTION_TABLE_vi[$44 & 1023]($$reg2mem$0 + 36 | 0); //@line 23363
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 23366
   $47 = $ReallocAsyncCtx + 4 | 0; //@line 23367
   HEAP32[$47 >> 2] = $42; //@line 23368
   $48 = $ReallocAsyncCtx + 8 | 0; //@line 23369
   HEAP32[$48 >> 2] = $4; //@line 23370
   $49 = $ReallocAsyncCtx + 12 | 0; //@line 23371
   HEAP32[$49 >> 2] = $$reg2mem10$0; //@line 23372
   $50 = $ReallocAsyncCtx + 16 | 0; //@line 23373
   HEAP32[$50 >> 2] = $$reg2mem$0; //@line 23374
   $51 = $ReallocAsyncCtx + 20 | 0; //@line 23375
   HEAP32[$51 >> 2] = $10; //@line 23376
   $52 = $ReallocAsyncCtx + 24 | 0; //@line 23377
   HEAP32[$52 >> 2] = $12; //@line 23378
   $53 = $ReallocAsyncCtx + 28 | 0; //@line 23379
   $$expand_i1_val = $14 & 1; //@line 23380
   HEAP8[$53 >> 0] = $$expand_i1_val; //@line 23381
   $54 = $ReallocAsyncCtx + 32 | 0; //@line 23382
   HEAP32[$54 >> 2] = $16; //@line 23383
   $55 = $ReallocAsyncCtx + 36 | 0; //@line 23384
   HEAP32[$55 >> 2] = $18; //@line 23385
   $56 = $ReallocAsyncCtx + 40 | 0; //@line 23386
   HEAP32[$56 >> 2] = $20; //@line 23387
   $57 = $ReallocAsyncCtx + 44 | 0; //@line 23388
   HEAP32[$57 >> 2] = $22; //@line 23389
   $58 = $ReallocAsyncCtx + 48 | 0; //@line 23390
   HEAP32[$58 >> 2] = $24; //@line 23391
   $59 = $ReallocAsyncCtx + 52 | 0; //@line 23392
   HEAP32[$59 >> 2] = $26; //@line 23393
   $60 = $ReallocAsyncCtx + 56 | 0; //@line 23394
   HEAP32[$60 >> 2] = $28; //@line 23395
   $61 = $ReallocAsyncCtx + 60 | 0; //@line 23396
   HEAP32[$61 >> 2] = $30; //@line 23397
   $62 = $ReallocAsyncCtx + 64 | 0; //@line 23398
   HEAP32[$62 >> 2] = $32; //@line 23399
   $63 = $ReallocAsyncCtx + 68 | 0; //@line 23400
   HEAP32[$63 >> 2] = $34; //@line 23401
   $64 = $ReallocAsyncCtx + 72 | 0; //@line 23402
   HEAP32[$64 >> 2] = $36; //@line 23403
   $65 = $ReallocAsyncCtx + 76 | 0; //@line 23404
   HEAP32[$65 >> 2] = $38; //@line 23405
   $66 = $ReallocAsyncCtx + 80 | 0; //@line 23406
   HEAP32[$66 >> 2] = $40; //@line 23407
   sp = STACKTOP; //@line 23408
   return;
  }
  ___async_unwind = 0; //@line 23411
  HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 23412
  $47 = $ReallocAsyncCtx + 4 | 0; //@line 23413
  HEAP32[$47 >> 2] = $42; //@line 23414
  $48 = $ReallocAsyncCtx + 8 | 0; //@line 23415
  HEAP32[$48 >> 2] = $4; //@line 23416
  $49 = $ReallocAsyncCtx + 12 | 0; //@line 23417
  HEAP32[$49 >> 2] = $$reg2mem10$0; //@line 23418
  $50 = $ReallocAsyncCtx + 16 | 0; //@line 23419
  HEAP32[$50 >> 2] = $$reg2mem$0; //@line 23420
  $51 = $ReallocAsyncCtx + 20 | 0; //@line 23421
  HEAP32[$51 >> 2] = $10; //@line 23422
  $52 = $ReallocAsyncCtx + 24 | 0; //@line 23423
  HEAP32[$52 >> 2] = $12; //@line 23424
  $53 = $ReallocAsyncCtx + 28 | 0; //@line 23425
  $$expand_i1_val = $14 & 1; //@line 23426
  HEAP8[$53 >> 0] = $$expand_i1_val; //@line 23427
  $54 = $ReallocAsyncCtx + 32 | 0; //@line 23428
  HEAP32[$54 >> 2] = $16; //@line 23429
  $55 = $ReallocAsyncCtx + 36 | 0; //@line 23430
  HEAP32[$55 >> 2] = $18; //@line 23431
  $56 = $ReallocAsyncCtx + 40 | 0; //@line 23432
  HEAP32[$56 >> 2] = $20; //@line 23433
  $57 = $ReallocAsyncCtx + 44 | 0; //@line 23434
  HEAP32[$57 >> 2] = $22; //@line 23435
  $58 = $ReallocAsyncCtx + 48 | 0; //@line 23436
  HEAP32[$58 >> 2] = $24; //@line 23437
  $59 = $ReallocAsyncCtx + 52 | 0; //@line 23438
  HEAP32[$59 >> 2] = $26; //@line 23439
  $60 = $ReallocAsyncCtx + 56 | 0; //@line 23440
  HEAP32[$60 >> 2] = $28; //@line 23441
  $61 = $ReallocAsyncCtx + 60 | 0; //@line 23442
  HEAP32[$61 >> 2] = $30; //@line 23443
  $62 = $ReallocAsyncCtx + 64 | 0; //@line 23444
  HEAP32[$62 >> 2] = $32; //@line 23445
  $63 = $ReallocAsyncCtx + 68 | 0; //@line 23446
  HEAP32[$63 >> 2] = $34; //@line 23447
  $64 = $ReallocAsyncCtx + 72 | 0; //@line 23448
  HEAP32[$64 >> 2] = $36; //@line 23449
  $65 = $ReallocAsyncCtx + 76 | 0; //@line 23450
  HEAP32[$65 >> 2] = $38; //@line 23451
  $66 = $ReallocAsyncCtx + 80 | 0; //@line 23452
  HEAP32[$66 >> 2] = $40; //@line 23453
  sp = STACKTOP; //@line 23454
  return;
 } else if ((label | 0) == 7) {
  $70 = $$reg2mem$0 + 20 | 0; //@line 23458
  HEAP32[$70 >> 2] = (HEAP32[$70 >> 2] | 0) + $68; //@line 23461
  $73 = _equeue_tick() | 0; //@line 23462
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 23463
  _equeue_enqueue($20, $$reg2mem$0, $73) | 0; //@line 23464
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 23467
   $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 23468
   HEAP32[$74 >> 2] = $42; //@line 23469
   $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 23470
   HEAP32[$75 >> 2] = $4; //@line 23471
   $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 23472
   HEAP32[$76 >> 2] = $10; //@line 23473
   $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 23474
   HEAP32[$77 >> 2] = $12; //@line 23475
   $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 23476
   $$expand_i1_val31 = $14 & 1; //@line 23477
   HEAP8[$78 >> 0] = $$expand_i1_val31; //@line 23478
   $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 23479
   HEAP32[$79 >> 2] = $16; //@line 23480
   $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 23481
   HEAP32[$80 >> 2] = $18; //@line 23482
   $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 23483
   HEAP32[$81 >> 2] = $20; //@line 23484
   $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 23485
   HEAP32[$82 >> 2] = $22; //@line 23486
   $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 23487
   HEAP32[$83 >> 2] = $24; //@line 23488
   $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 23489
   HEAP32[$84 >> 2] = $26; //@line 23490
   $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 23491
   HEAP32[$85 >> 2] = $28; //@line 23492
   $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 23493
   HEAP32[$86 >> 2] = $30; //@line 23494
   $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 23495
   HEAP32[$87 >> 2] = $32; //@line 23496
   $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 23497
   HEAP32[$88 >> 2] = $34; //@line 23498
   $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 23499
   HEAP32[$89 >> 2] = $36; //@line 23500
   $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 23501
   HEAP32[$90 >> 2] = $38; //@line 23502
   $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 23503
   HEAP32[$91 >> 2] = $40; //@line 23504
   sp = STACKTOP; //@line 23505
   return;
  }
  ___async_unwind = 0; //@line 23508
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 23509
  $74 = $ReallocAsyncCtx4 + 4 | 0; //@line 23510
  HEAP32[$74 >> 2] = $42; //@line 23511
  $75 = $ReallocAsyncCtx4 + 8 | 0; //@line 23512
  HEAP32[$75 >> 2] = $4; //@line 23513
  $76 = $ReallocAsyncCtx4 + 12 | 0; //@line 23514
  HEAP32[$76 >> 2] = $10; //@line 23515
  $77 = $ReallocAsyncCtx4 + 16 | 0; //@line 23516
  HEAP32[$77 >> 2] = $12; //@line 23517
  $78 = $ReallocAsyncCtx4 + 20 | 0; //@line 23518
  $$expand_i1_val31 = $14 & 1; //@line 23519
  HEAP8[$78 >> 0] = $$expand_i1_val31; //@line 23520
  $79 = $ReallocAsyncCtx4 + 24 | 0; //@line 23521
  HEAP32[$79 >> 2] = $16; //@line 23522
  $80 = $ReallocAsyncCtx4 + 28 | 0; //@line 23523
  HEAP32[$80 >> 2] = $18; //@line 23524
  $81 = $ReallocAsyncCtx4 + 32 | 0; //@line 23525
  HEAP32[$81 >> 2] = $20; //@line 23526
  $82 = $ReallocAsyncCtx4 + 36 | 0; //@line 23527
  HEAP32[$82 >> 2] = $22; //@line 23528
  $83 = $ReallocAsyncCtx4 + 40 | 0; //@line 23529
  HEAP32[$83 >> 2] = $24; //@line 23530
  $84 = $ReallocAsyncCtx4 + 44 | 0; //@line 23531
  HEAP32[$84 >> 2] = $26; //@line 23532
  $85 = $ReallocAsyncCtx4 + 48 | 0; //@line 23533
  HEAP32[$85 >> 2] = $28; //@line 23534
  $86 = $ReallocAsyncCtx4 + 52 | 0; //@line 23535
  HEAP32[$86 >> 2] = $30; //@line 23536
  $87 = $ReallocAsyncCtx4 + 56 | 0; //@line 23537
  HEAP32[$87 >> 2] = $32; //@line 23538
  $88 = $ReallocAsyncCtx4 + 60 | 0; //@line 23539
  HEAP32[$88 >> 2] = $34; //@line 23540
  $89 = $ReallocAsyncCtx4 + 64 | 0; //@line 23541
  HEAP32[$89 >> 2] = $36; //@line 23542
  $90 = $ReallocAsyncCtx4 + 68 | 0; //@line 23543
  HEAP32[$90 >> 2] = $38; //@line 23544
  $91 = $ReallocAsyncCtx4 + 72 | 0; //@line 23545
  HEAP32[$91 >> 2] = $40; //@line 23546
  sp = STACKTOP; //@line 23547
  return;
 } else if ((label | 0) == 11) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 23552
  FUNCTION_TABLE_vi[$102 & 1023]($$reg2mem$0 + 36 | 0); //@line 23553
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 23556
   $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 23557
   HEAP32[$105 >> 2] = $42; //@line 23558
   $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 23559
   HEAP32[$106 >> 2] = $4; //@line 23560
   $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 23561
   HEAP32[$107 >> 2] = $$reg2mem10$0; //@line 23562
   $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 23563
   HEAP32[$108 >> 2] = $$reg2mem$0; //@line 23564
   $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 23565
   HEAP32[$109 >> 2] = $10; //@line 23566
   $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 23567
   HEAP32[$110 >> 2] = $12; //@line 23568
   $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 23569
   $$expand_i1_val33 = $14 & 1; //@line 23570
   HEAP8[$111 >> 0] = $$expand_i1_val33; //@line 23571
   $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 23572
   HEAP32[$112 >> 2] = $16; //@line 23573
   $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 23574
   HEAP32[$113 >> 2] = $18; //@line 23575
   $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 23576
   HEAP32[$114 >> 2] = $20; //@line 23577
   $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 23578
   HEAP32[$115 >> 2] = $22; //@line 23579
   $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 23580
   HEAP32[$116 >> 2] = $24; //@line 23581
   $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 23582
   HEAP32[$117 >> 2] = $26; //@line 23583
   $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 23584
   HEAP32[$118 >> 2] = $28; //@line 23585
   $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 23586
   HEAP32[$119 >> 2] = $30; //@line 23587
   $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 23588
   HEAP32[$120 >> 2] = $32; //@line 23589
   $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 23590
   HEAP32[$121 >> 2] = $34; //@line 23591
   $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 23592
   HEAP32[$122 >> 2] = $36; //@line 23593
   $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 23594
   HEAP32[$123 >> 2] = $38; //@line 23595
   $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 23596
   HEAP32[$124 >> 2] = $40; //@line 23597
   sp = STACKTOP; //@line 23598
   return;
  }
  ___async_unwind = 0; //@line 23601
  HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 23602
  $105 = $ReallocAsyncCtx2 + 4 | 0; //@line 23603
  HEAP32[$105 >> 2] = $42; //@line 23604
  $106 = $ReallocAsyncCtx2 + 8 | 0; //@line 23605
  HEAP32[$106 >> 2] = $4; //@line 23606
  $107 = $ReallocAsyncCtx2 + 12 | 0; //@line 23607
  HEAP32[$107 >> 2] = $$reg2mem10$0; //@line 23608
  $108 = $ReallocAsyncCtx2 + 16 | 0; //@line 23609
  HEAP32[$108 >> 2] = $$reg2mem$0; //@line 23610
  $109 = $ReallocAsyncCtx2 + 20 | 0; //@line 23611
  HEAP32[$109 >> 2] = $10; //@line 23612
  $110 = $ReallocAsyncCtx2 + 24 | 0; //@line 23613
  HEAP32[$110 >> 2] = $12; //@line 23614
  $111 = $ReallocAsyncCtx2 + 28 | 0; //@line 23615
  $$expand_i1_val33 = $14 & 1; //@line 23616
  HEAP8[$111 >> 0] = $$expand_i1_val33; //@line 23617
  $112 = $ReallocAsyncCtx2 + 32 | 0; //@line 23618
  HEAP32[$112 >> 2] = $16; //@line 23619
  $113 = $ReallocAsyncCtx2 + 36 | 0; //@line 23620
  HEAP32[$113 >> 2] = $18; //@line 23621
  $114 = $ReallocAsyncCtx2 + 40 | 0; //@line 23622
  HEAP32[$114 >> 2] = $20; //@line 23623
  $115 = $ReallocAsyncCtx2 + 44 | 0; //@line 23624
  HEAP32[$115 >> 2] = $22; //@line 23625
  $116 = $ReallocAsyncCtx2 + 48 | 0; //@line 23626
  HEAP32[$116 >> 2] = $24; //@line 23627
  $117 = $ReallocAsyncCtx2 + 52 | 0; //@line 23628
  HEAP32[$117 >> 2] = $26; //@line 23629
  $118 = $ReallocAsyncCtx2 + 56 | 0; //@line 23630
  HEAP32[$118 >> 2] = $28; //@line 23631
  $119 = $ReallocAsyncCtx2 + 60 | 0; //@line 23632
  HEAP32[$119 >> 2] = $30; //@line 23633
  $120 = $ReallocAsyncCtx2 + 64 | 0; //@line 23634
  HEAP32[$120 >> 2] = $32; //@line 23635
  $121 = $ReallocAsyncCtx2 + 68 | 0; //@line 23636
  HEAP32[$121 >> 2] = $34; //@line 23637
  $122 = $ReallocAsyncCtx2 + 72 | 0; //@line 23638
  HEAP32[$122 >> 2] = $36; //@line 23639
  $123 = $ReallocAsyncCtx2 + 76 | 0; //@line 23640
  HEAP32[$123 >> 2] = $38; //@line 23641
  $124 = $ReallocAsyncCtx2 + 80 | 0; //@line 23642
  HEAP32[$124 >> 2] = $40; //@line 23643
  sp = STACKTOP; //@line 23644
  return;
 } else if ((label | 0) == 24) {
  $140 = _equeue_tick() | 0; //@line 23648
  if ($14) {
   $141 = $12 - $140 | 0; //@line 23650
   if (($141 | 0) < 1) {
    $143 = $20 + 40 | 0; //@line 23653
    if (HEAP32[$143 >> 2] | 0) {
     _equeue_mutex_lock($26); //@line 23657
     $146 = HEAP32[$143 >> 2] | 0; //@line 23658
     if ($146 | 0) {
      $148 = HEAP32[$4 >> 2] | 0; //@line 23661
      if ($148 | 0) {
       $151 = HEAP32[$20 + 44 >> 2] | 0; //@line 23665
       $154 = (HEAP32[$148 + 20 >> 2] | 0) - $140 | 0; //@line 23668
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 23672
       FUNCTION_TABLE_vii[$146 & 15]($151, $154 & ~($154 >> 31)); //@line 23673
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 23676
        $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 23677
        HEAP32[$158 >> 2] = $32; //@line 23678
        $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 23679
        HEAP32[$159 >> 2] = $26; //@line 23680
        $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 23681
        HEAP32[$160 >> 2] = $28; //@line 23682
        sp = STACKTOP; //@line 23683
        return;
       }
       ___async_unwind = 0; //@line 23686
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 23687
       $158 = $ReallocAsyncCtx3 + 4 | 0; //@line 23688
       HEAP32[$158 >> 2] = $32; //@line 23689
       $159 = $ReallocAsyncCtx3 + 8 | 0; //@line 23690
       HEAP32[$159 >> 2] = $26; //@line 23691
       $160 = $ReallocAsyncCtx3 + 12 | 0; //@line 23692
       HEAP32[$160 >> 2] = $28; //@line 23693
       sp = STACKTOP; //@line 23694
       return;
      }
     }
     HEAP8[$32 >> 0] = 1; //@line 23698
     _equeue_mutex_unlock($26); //@line 23699
    }
    HEAP8[$28 >> 0] = 0; //@line 23701
    return;
   } else {
    $$067 = $141; //@line 23704
   }
  } else {
   $$067 = -1; //@line 23707
  }
  _equeue_mutex_lock($26); //@line 23709
  $161 = HEAP32[$4 >> 2] | 0; //@line 23710
  if (!$161) {
   $$2 = $$067; //@line 23713
  } else {
   $165 = (HEAP32[$161 + 20 >> 2] | 0) - $140 | 0; //@line 23717
   $168 = $165 & ~($165 >> 31); //@line 23720
   $$2 = $168 >>> 0 < $$067 >>> 0 ? $168 : $$067; //@line 23723
  }
  _equeue_mutex_unlock($26); //@line 23725
  _equeue_sema_wait($30, $$2) | 0; //@line 23726
  do {
   if (HEAP8[$28 >> 0] | 0) {
    _equeue_mutex_lock($26); //@line 23731
    if (!(HEAP8[$28 >> 0] | 0)) {
     _equeue_mutex_unlock($26); //@line 23735
     break;
    }
    HEAP8[$28 >> 0] = 0; //@line 23738
    _equeue_mutex_unlock($26); //@line 23739
    return;
   }
  } while (0);
  $174 = _equeue_tick() | 0; //@line 23743
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 23744
  _wait_ms(20); //@line 23745
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 23748
   $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 23749
   HEAP32[$175 >> 2] = $4; //@line 23750
   $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 23751
   HEAP32[$176 >> 2] = $10; //@line 23752
   $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 23753
   HEAP32[$177 >> 2] = $12; //@line 23754
   $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 23755
   $$expand_i1_val35 = $14 & 1; //@line 23756
   HEAP8[$178 >> 0] = $$expand_i1_val35; //@line 23757
   $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 23758
   HEAP32[$179 >> 2] = $16; //@line 23759
   $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 23760
   HEAP32[$180 >> 2] = $18; //@line 23761
   $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 23762
   HEAP32[$181 >> 2] = $20; //@line 23763
   $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 23764
   HEAP32[$182 >> 2] = $22; //@line 23765
   $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 23766
   HEAP32[$183 >> 2] = $24; //@line 23767
   $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 23768
   HEAP32[$184 >> 2] = $26; //@line 23769
   $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 23770
   HEAP32[$185 >> 2] = $28; //@line 23771
   $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 23772
   HEAP32[$186 >> 2] = $30; //@line 23773
   $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 23774
   HEAP32[$187 >> 2] = $32; //@line 23775
   $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 23776
   HEAP32[$188 >> 2] = $34; //@line 23777
   $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 23778
   HEAP32[$189 >> 2] = $36; //@line 23779
   $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 23780
   HEAP32[$190 >> 2] = $38; //@line 23781
   $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 23782
   HEAP32[$191 >> 2] = $40; //@line 23783
   $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 23784
   HEAP32[$192 >> 2] = $174; //@line 23785
   sp = STACKTOP; //@line 23786
   return;
  }
  ___async_unwind = 0; //@line 23789
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 23790
  $175 = $ReallocAsyncCtx5 + 4 | 0; //@line 23791
  HEAP32[$175 >> 2] = $4; //@line 23792
  $176 = $ReallocAsyncCtx5 + 8 | 0; //@line 23793
  HEAP32[$176 >> 2] = $10; //@line 23794
  $177 = $ReallocAsyncCtx5 + 12 | 0; //@line 23795
  HEAP32[$177 >> 2] = $12; //@line 23796
  $178 = $ReallocAsyncCtx5 + 16 | 0; //@line 23797
  $$expand_i1_val35 = $14 & 1; //@line 23798
  HEAP8[$178 >> 0] = $$expand_i1_val35; //@line 23799
  $179 = $ReallocAsyncCtx5 + 20 | 0; //@line 23800
  HEAP32[$179 >> 2] = $16; //@line 23801
  $180 = $ReallocAsyncCtx5 + 24 | 0; //@line 23802
  HEAP32[$180 >> 2] = $18; //@line 23803
  $181 = $ReallocAsyncCtx5 + 28 | 0; //@line 23804
  HEAP32[$181 >> 2] = $20; //@line 23805
  $182 = $ReallocAsyncCtx5 + 32 | 0; //@line 23806
  HEAP32[$182 >> 2] = $22; //@line 23807
  $183 = $ReallocAsyncCtx5 + 36 | 0; //@line 23808
  HEAP32[$183 >> 2] = $24; //@line 23809
  $184 = $ReallocAsyncCtx5 + 40 | 0; //@line 23810
  HEAP32[$184 >> 2] = $26; //@line 23811
  $185 = $ReallocAsyncCtx5 + 44 | 0; //@line 23812
  HEAP32[$185 >> 2] = $28; //@line 23813
  $186 = $ReallocAsyncCtx5 + 48 | 0; //@line 23814
  HEAP32[$186 >> 2] = $30; //@line 23815
  $187 = $ReallocAsyncCtx5 + 52 | 0; //@line 23816
  HEAP32[$187 >> 2] = $32; //@line 23817
  $188 = $ReallocAsyncCtx5 + 56 | 0; //@line 23818
  HEAP32[$188 >> 2] = $34; //@line 23819
  $189 = $ReallocAsyncCtx5 + 60 | 0; //@line 23820
  HEAP32[$189 >> 2] = $36; //@line 23821
  $190 = $ReallocAsyncCtx5 + 64 | 0; //@line 23822
  HEAP32[$190 >> 2] = $38; //@line 23823
  $191 = $ReallocAsyncCtx5 + 68 | 0; //@line 23824
  HEAP32[$191 >> 2] = $40; //@line 23825
  $192 = $ReallocAsyncCtx5 + 72 | 0; //@line 23826
  HEAP32[$192 >> 2] = $174; //@line 23827
  sp = STACKTOP; //@line 23828
  return;
 }
}
function _equeue_dispatch__async_cb_74($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$067 = 0, $$2 = 0, $$expand_i1_val = 0, $$expand_i1_val12 = 0, $$expand_i1_val14 = 0, $$expand_i1_val16 = 0, $$reg2mem$0 = 0, $$sink$in$i$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $128 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $142 = 0, $144 = 0, $147 = 0, $150 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $164 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $98 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 23860
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23864
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23866
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23868
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 23871
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23873
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23875
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23877
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23879
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23881
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23883
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23885
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23887
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23889
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23891
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23893
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 23895
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 23897
 $$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 23898
 while (1) {
  if (!$$reg2mem$0) {
   label = 24; //@line 23902
   break;
  }
  $37 = $$reg2mem$0 + 8 | 0; //@line 23905
  $38 = HEAP32[$37 >> 2] | 0; //@line 23906
  $40 = HEAP32[$$reg2mem$0 + 32 >> 2] | 0; //@line 23908
  if ($40 | 0) {
   label = 3; //@line 23911
   break;
  }
  $64 = HEAP32[$$reg2mem$0 + 24 >> 2] | 0; //@line 23915
  if (($64 | 0) > -1) {
   label = 7; //@line 23918
   break;
  }
  $88 = $$reg2mem$0 + 4 | 0; //@line 23922
  $89 = HEAP8[$88 >> 0] | 0; //@line 23923
  HEAP8[$88 >> 0] = (($89 + 1 & 255) << HEAP32[$14 >> 2] | 0) == 0 ? 1 : ($89 & 255) + 1 & 255; //@line 23932
  $98 = HEAP32[$$reg2mem$0 + 28 >> 2] | 0; //@line 23934
  if ($98 | 0) {
   label = 12; //@line 23937
   break;
  }
  _equeue_mutex_lock($6); //@line 23940
  $121 = HEAP32[$12 >> 2] | 0; //@line 23941
  L8 : do {
   if (!$121) {
    $$02329$i$i = $12; //@line 23945
    label = 21; //@line 23946
   } else {
    $123 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 23948
    $$025$i$i = $12; //@line 23949
    $125 = $121; //@line 23949
    while (1) {
     $124 = HEAP32[$125 >> 2] | 0; //@line 23951
     if ($124 >>> 0 >= $123 >>> 0) {
      break;
     }
     $127 = $125 + 8 | 0; //@line 23956
     $128 = HEAP32[$127 >> 2] | 0; //@line 23957
     if (!$128) {
      $$02329$i$i = $127; //@line 23960
      label = 21; //@line 23961
      break L8;
     } else {
      $$025$i$i = $127; //@line 23964
      $125 = $128; //@line 23964
     }
    }
    if (($124 | 0) == ($123 | 0)) {
     HEAP32[$$reg2mem$0 + 12 >> 2] = $125; //@line 23970
     $$02330$i$i = $$025$i$i; //@line 23973
     $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 23973
    } else {
     $$02329$i$i = $$025$i$i; //@line 23975
     label = 21; //@line 23976
    }
   }
  } while (0);
  if ((label | 0) == 21) {
   label = 0; //@line 23981
   HEAP32[$$reg2mem$0 + 12 >> 2] = 0; //@line 23983
   $$02330$i$i = $$02329$i$i; //@line 23984
   $$sink$in$i$i = $$02329$i$i; //@line 23984
  }
  HEAP32[$37 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 23987
  HEAP32[$$02330$i$i >> 2] = $$reg2mem$0; //@line 23988
  _equeue_mutex_unlock($6); //@line 23989
  $$reg2mem$0 = $38; //@line 23990
 }
 if ((label | 0) == 3) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(84) | 0; //@line 23994
  FUNCTION_TABLE_vi[$40 & 1023]($$reg2mem$0 + 36 | 0); //@line 23995
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 23998
   $43 = $ReallocAsyncCtx + 4 | 0; //@line 23999
   HEAP32[$43 >> 2] = $38; //@line 24000
   $44 = $ReallocAsyncCtx + 8 | 0; //@line 24001
   HEAP32[$44 >> 2] = $4; //@line 24002
   $45 = $ReallocAsyncCtx + 12 | 0; //@line 24003
   HEAP32[$45 >> 2] = $37; //@line 24004
   $46 = $ReallocAsyncCtx + 16 | 0; //@line 24005
   HEAP32[$46 >> 2] = $$reg2mem$0; //@line 24006
   $47 = $ReallocAsyncCtx + 20 | 0; //@line 24007
   HEAP32[$47 >> 2] = $6; //@line 24008
   $48 = $ReallocAsyncCtx + 24 | 0; //@line 24009
   HEAP32[$48 >> 2] = $8; //@line 24010
   $49 = $ReallocAsyncCtx + 28 | 0; //@line 24011
   $$expand_i1_val = $10 & 1; //@line 24012
   HEAP8[$49 >> 0] = $$expand_i1_val; //@line 24013
   $50 = $ReallocAsyncCtx + 32 | 0; //@line 24014
   HEAP32[$50 >> 2] = $12; //@line 24015
   $51 = $ReallocAsyncCtx + 36 | 0; //@line 24016
   HEAP32[$51 >> 2] = $14; //@line 24017
   $52 = $ReallocAsyncCtx + 40 | 0; //@line 24018
   HEAP32[$52 >> 2] = $16; //@line 24019
   $53 = $ReallocAsyncCtx + 44 | 0; //@line 24020
   HEAP32[$53 >> 2] = $18; //@line 24021
   $54 = $ReallocAsyncCtx + 48 | 0; //@line 24022
   HEAP32[$54 >> 2] = $20; //@line 24023
   $55 = $ReallocAsyncCtx + 52 | 0; //@line 24024
   HEAP32[$55 >> 2] = $22; //@line 24025
   $56 = $ReallocAsyncCtx + 56 | 0; //@line 24026
   HEAP32[$56 >> 2] = $24; //@line 24027
   $57 = $ReallocAsyncCtx + 60 | 0; //@line 24028
   HEAP32[$57 >> 2] = $26; //@line 24029
   $58 = $ReallocAsyncCtx + 64 | 0; //@line 24030
   HEAP32[$58 >> 2] = $28; //@line 24031
   $59 = $ReallocAsyncCtx + 68 | 0; //@line 24032
   HEAP32[$59 >> 2] = $30; //@line 24033
   $60 = $ReallocAsyncCtx + 72 | 0; //@line 24034
   HEAP32[$60 >> 2] = $32; //@line 24035
   $61 = $ReallocAsyncCtx + 76 | 0; //@line 24036
   HEAP32[$61 >> 2] = $34; //@line 24037
   $62 = $ReallocAsyncCtx + 80 | 0; //@line 24038
   HEAP32[$62 >> 2] = $36; //@line 24039
   sp = STACKTOP; //@line 24040
   return;
  }
  ___async_unwind = 0; //@line 24043
  HEAP32[$ReallocAsyncCtx >> 2] = 134; //@line 24044
  $43 = $ReallocAsyncCtx + 4 | 0; //@line 24045
  HEAP32[$43 >> 2] = $38; //@line 24046
  $44 = $ReallocAsyncCtx + 8 | 0; //@line 24047
  HEAP32[$44 >> 2] = $4; //@line 24048
  $45 = $ReallocAsyncCtx + 12 | 0; //@line 24049
  HEAP32[$45 >> 2] = $37; //@line 24050
  $46 = $ReallocAsyncCtx + 16 | 0; //@line 24051
  HEAP32[$46 >> 2] = $$reg2mem$0; //@line 24052
  $47 = $ReallocAsyncCtx + 20 | 0; //@line 24053
  HEAP32[$47 >> 2] = $6; //@line 24054
  $48 = $ReallocAsyncCtx + 24 | 0; //@line 24055
  HEAP32[$48 >> 2] = $8; //@line 24056
  $49 = $ReallocAsyncCtx + 28 | 0; //@line 24057
  $$expand_i1_val = $10 & 1; //@line 24058
  HEAP8[$49 >> 0] = $$expand_i1_val; //@line 24059
  $50 = $ReallocAsyncCtx + 32 | 0; //@line 24060
  HEAP32[$50 >> 2] = $12; //@line 24061
  $51 = $ReallocAsyncCtx + 36 | 0; //@line 24062
  HEAP32[$51 >> 2] = $14; //@line 24063
  $52 = $ReallocAsyncCtx + 40 | 0; //@line 24064
  HEAP32[$52 >> 2] = $16; //@line 24065
  $53 = $ReallocAsyncCtx + 44 | 0; //@line 24066
  HEAP32[$53 >> 2] = $18; //@line 24067
  $54 = $ReallocAsyncCtx + 48 | 0; //@line 24068
  HEAP32[$54 >> 2] = $20; //@line 24069
  $55 = $ReallocAsyncCtx + 52 | 0; //@line 24070
  HEAP32[$55 >> 2] = $22; //@line 24071
  $56 = $ReallocAsyncCtx + 56 | 0; //@line 24072
  HEAP32[$56 >> 2] = $24; //@line 24073
  $57 = $ReallocAsyncCtx + 60 | 0; //@line 24074
  HEAP32[$57 >> 2] = $26; //@line 24075
  $58 = $ReallocAsyncCtx + 64 | 0; //@line 24076
  HEAP32[$58 >> 2] = $28; //@line 24077
  $59 = $ReallocAsyncCtx + 68 | 0; //@line 24078
  HEAP32[$59 >> 2] = $30; //@line 24079
  $60 = $ReallocAsyncCtx + 72 | 0; //@line 24080
  HEAP32[$60 >> 2] = $32; //@line 24081
  $61 = $ReallocAsyncCtx + 76 | 0; //@line 24082
  HEAP32[$61 >> 2] = $34; //@line 24083
  $62 = $ReallocAsyncCtx + 80 | 0; //@line 24084
  HEAP32[$62 >> 2] = $36; //@line 24085
  sp = STACKTOP; //@line 24086
  return;
 } else if ((label | 0) == 7) {
  $66 = $$reg2mem$0 + 20 | 0; //@line 24090
  HEAP32[$66 >> 2] = (HEAP32[$66 >> 2] | 0) + $64; //@line 24093
  $69 = _equeue_tick() | 0; //@line 24094
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(76) | 0; //@line 24095
  _equeue_enqueue($16, $$reg2mem$0, $69) | 0; //@line 24096
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 24099
   $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 24100
   HEAP32[$70 >> 2] = $38; //@line 24101
   $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 24102
   HEAP32[$71 >> 2] = $4; //@line 24103
   $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 24104
   HEAP32[$72 >> 2] = $6; //@line 24105
   $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 24106
   HEAP32[$73 >> 2] = $8; //@line 24107
   $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 24108
   $$expand_i1_val12 = $10 & 1; //@line 24109
   HEAP8[$74 >> 0] = $$expand_i1_val12; //@line 24110
   $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 24111
   HEAP32[$75 >> 2] = $12; //@line 24112
   $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 24113
   HEAP32[$76 >> 2] = $14; //@line 24114
   $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 24115
   HEAP32[$77 >> 2] = $16; //@line 24116
   $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 24117
   HEAP32[$78 >> 2] = $18; //@line 24118
   $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 24119
   HEAP32[$79 >> 2] = $20; //@line 24120
   $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 24121
   HEAP32[$80 >> 2] = $22; //@line 24122
   $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 24123
   HEAP32[$81 >> 2] = $24; //@line 24124
   $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 24125
   HEAP32[$82 >> 2] = $26; //@line 24126
   $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 24127
   HEAP32[$83 >> 2] = $28; //@line 24128
   $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 24129
   HEAP32[$84 >> 2] = $30; //@line 24130
   $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 24131
   HEAP32[$85 >> 2] = $32; //@line 24132
   $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 24133
   HEAP32[$86 >> 2] = $34; //@line 24134
   $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 24135
   HEAP32[$87 >> 2] = $36; //@line 24136
   sp = STACKTOP; //@line 24137
   return;
  }
  ___async_unwind = 0; //@line 24140
  HEAP32[$ReallocAsyncCtx4 >> 2] = 135; //@line 24141
  $70 = $ReallocAsyncCtx4 + 4 | 0; //@line 24142
  HEAP32[$70 >> 2] = $38; //@line 24143
  $71 = $ReallocAsyncCtx4 + 8 | 0; //@line 24144
  HEAP32[$71 >> 2] = $4; //@line 24145
  $72 = $ReallocAsyncCtx4 + 12 | 0; //@line 24146
  HEAP32[$72 >> 2] = $6; //@line 24147
  $73 = $ReallocAsyncCtx4 + 16 | 0; //@line 24148
  HEAP32[$73 >> 2] = $8; //@line 24149
  $74 = $ReallocAsyncCtx4 + 20 | 0; //@line 24150
  $$expand_i1_val12 = $10 & 1; //@line 24151
  HEAP8[$74 >> 0] = $$expand_i1_val12; //@line 24152
  $75 = $ReallocAsyncCtx4 + 24 | 0; //@line 24153
  HEAP32[$75 >> 2] = $12; //@line 24154
  $76 = $ReallocAsyncCtx4 + 28 | 0; //@line 24155
  HEAP32[$76 >> 2] = $14; //@line 24156
  $77 = $ReallocAsyncCtx4 + 32 | 0; //@line 24157
  HEAP32[$77 >> 2] = $16; //@line 24158
  $78 = $ReallocAsyncCtx4 + 36 | 0; //@line 24159
  HEAP32[$78 >> 2] = $18; //@line 24160
  $79 = $ReallocAsyncCtx4 + 40 | 0; //@line 24161
  HEAP32[$79 >> 2] = $20; //@line 24162
  $80 = $ReallocAsyncCtx4 + 44 | 0; //@line 24163
  HEAP32[$80 >> 2] = $22; //@line 24164
  $81 = $ReallocAsyncCtx4 + 48 | 0; //@line 24165
  HEAP32[$81 >> 2] = $24; //@line 24166
  $82 = $ReallocAsyncCtx4 + 52 | 0; //@line 24167
  HEAP32[$82 >> 2] = $26; //@line 24168
  $83 = $ReallocAsyncCtx4 + 56 | 0; //@line 24169
  HEAP32[$83 >> 2] = $28; //@line 24170
  $84 = $ReallocAsyncCtx4 + 60 | 0; //@line 24171
  HEAP32[$84 >> 2] = $30; //@line 24172
  $85 = $ReallocAsyncCtx4 + 64 | 0; //@line 24173
  HEAP32[$85 >> 2] = $32; //@line 24174
  $86 = $ReallocAsyncCtx4 + 68 | 0; //@line 24175
  HEAP32[$86 >> 2] = $34; //@line 24176
  $87 = $ReallocAsyncCtx4 + 72 | 0; //@line 24177
  HEAP32[$87 >> 2] = $36; //@line 24178
  sp = STACKTOP; //@line 24179
  return;
 } else if ((label | 0) == 12) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(84) | 0; //@line 24184
  FUNCTION_TABLE_vi[$98 & 1023]($$reg2mem$0 + 36 | 0); //@line 24185
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 24188
   $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 24189
   HEAP32[$101 >> 2] = $38; //@line 24190
   $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 24191
   HEAP32[$102 >> 2] = $4; //@line 24192
   $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 24193
   HEAP32[$103 >> 2] = $37; //@line 24194
   $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 24195
   HEAP32[$104 >> 2] = $$reg2mem$0; //@line 24196
   $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 24197
   HEAP32[$105 >> 2] = $6; //@line 24198
   $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 24199
   HEAP32[$106 >> 2] = $8; //@line 24200
   $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 24201
   $$expand_i1_val14 = $10 & 1; //@line 24202
   HEAP8[$107 >> 0] = $$expand_i1_val14; //@line 24203
   $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 24204
   HEAP32[$108 >> 2] = $12; //@line 24205
   $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 24206
   HEAP32[$109 >> 2] = $14; //@line 24207
   $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 24208
   HEAP32[$110 >> 2] = $16; //@line 24209
   $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 24210
   HEAP32[$111 >> 2] = $18; //@line 24211
   $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 24212
   HEAP32[$112 >> 2] = $20; //@line 24213
   $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 24214
   HEAP32[$113 >> 2] = $22; //@line 24215
   $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 24216
   HEAP32[$114 >> 2] = $24; //@line 24217
   $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 24218
   HEAP32[$115 >> 2] = $26; //@line 24219
   $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 24220
   HEAP32[$116 >> 2] = $28; //@line 24221
   $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 24222
   HEAP32[$117 >> 2] = $30; //@line 24223
   $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 24224
   HEAP32[$118 >> 2] = $32; //@line 24225
   $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 24226
   HEAP32[$119 >> 2] = $34; //@line 24227
   $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 24228
   HEAP32[$120 >> 2] = $36; //@line 24229
   sp = STACKTOP; //@line 24230
   return;
  }
  ___async_unwind = 0; //@line 24233
  HEAP32[$ReallocAsyncCtx2 >> 2] = 136; //@line 24234
  $101 = $ReallocAsyncCtx2 + 4 | 0; //@line 24235
  HEAP32[$101 >> 2] = $38; //@line 24236
  $102 = $ReallocAsyncCtx2 + 8 | 0; //@line 24237
  HEAP32[$102 >> 2] = $4; //@line 24238
  $103 = $ReallocAsyncCtx2 + 12 | 0; //@line 24239
  HEAP32[$103 >> 2] = $37; //@line 24240
  $104 = $ReallocAsyncCtx2 + 16 | 0; //@line 24241
  HEAP32[$104 >> 2] = $$reg2mem$0; //@line 24242
  $105 = $ReallocAsyncCtx2 + 20 | 0; //@line 24243
  HEAP32[$105 >> 2] = $6; //@line 24244
  $106 = $ReallocAsyncCtx2 + 24 | 0; //@line 24245
  HEAP32[$106 >> 2] = $8; //@line 24246
  $107 = $ReallocAsyncCtx2 + 28 | 0; //@line 24247
  $$expand_i1_val14 = $10 & 1; //@line 24248
  HEAP8[$107 >> 0] = $$expand_i1_val14; //@line 24249
  $108 = $ReallocAsyncCtx2 + 32 | 0; //@line 24250
  HEAP32[$108 >> 2] = $12; //@line 24251
  $109 = $ReallocAsyncCtx2 + 36 | 0; //@line 24252
  HEAP32[$109 >> 2] = $14; //@line 24253
  $110 = $ReallocAsyncCtx2 + 40 | 0; //@line 24254
  HEAP32[$110 >> 2] = $16; //@line 24255
  $111 = $ReallocAsyncCtx2 + 44 | 0; //@line 24256
  HEAP32[$111 >> 2] = $18; //@line 24257
  $112 = $ReallocAsyncCtx2 + 48 | 0; //@line 24258
  HEAP32[$112 >> 2] = $20; //@line 24259
  $113 = $ReallocAsyncCtx2 + 52 | 0; //@line 24260
  HEAP32[$113 >> 2] = $22; //@line 24261
  $114 = $ReallocAsyncCtx2 + 56 | 0; //@line 24262
  HEAP32[$114 >> 2] = $24; //@line 24263
  $115 = $ReallocAsyncCtx2 + 60 | 0; //@line 24264
  HEAP32[$115 >> 2] = $26; //@line 24265
  $116 = $ReallocAsyncCtx2 + 64 | 0; //@line 24266
  HEAP32[$116 >> 2] = $28; //@line 24267
  $117 = $ReallocAsyncCtx2 + 68 | 0; //@line 24268
  HEAP32[$117 >> 2] = $30; //@line 24269
  $118 = $ReallocAsyncCtx2 + 72 | 0; //@line 24270
  HEAP32[$118 >> 2] = $32; //@line 24271
  $119 = $ReallocAsyncCtx2 + 76 | 0; //@line 24272
  HEAP32[$119 >> 2] = $34; //@line 24273
  $120 = $ReallocAsyncCtx2 + 80 | 0; //@line 24274
  HEAP32[$120 >> 2] = $36; //@line 24275
  sp = STACKTOP; //@line 24276
  return;
 } else if ((label | 0) == 24) {
  $136 = _equeue_tick() | 0; //@line 24280
  if ($10) {
   $137 = $8 - $136 | 0; //@line 24282
   if (($137 | 0) < 1) {
    $139 = $16 + 40 | 0; //@line 24285
    if (HEAP32[$139 >> 2] | 0) {
     _equeue_mutex_lock($22); //@line 24289
     $142 = HEAP32[$139 >> 2] | 0; //@line 24290
     if ($142 | 0) {
      $144 = HEAP32[$4 >> 2] | 0; //@line 24293
      if ($144 | 0) {
       $147 = HEAP32[$16 + 44 >> 2] | 0; //@line 24297
       $150 = (HEAP32[$144 + 20 >> 2] | 0) - $136 | 0; //@line 24300
       $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 24304
       FUNCTION_TABLE_vii[$142 & 15]($147, $150 & ~($150 >> 31)); //@line 24305
       if (___async) {
        HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 24308
        $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 24309
        HEAP32[$154 >> 2] = $28; //@line 24310
        $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 24311
        HEAP32[$155 >> 2] = $22; //@line 24312
        $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 24313
        HEAP32[$156 >> 2] = $24; //@line 24314
        sp = STACKTOP; //@line 24315
        return;
       }
       ___async_unwind = 0; //@line 24318
       HEAP32[$ReallocAsyncCtx3 >> 2] = 137; //@line 24319
       $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 24320
       HEAP32[$154 >> 2] = $28; //@line 24321
       $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 24322
       HEAP32[$155 >> 2] = $22; //@line 24323
       $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 24324
       HEAP32[$156 >> 2] = $24; //@line 24325
       sp = STACKTOP; //@line 24326
       return;
      }
     }
     HEAP8[$28 >> 0] = 1; //@line 24330
     _equeue_mutex_unlock($22); //@line 24331
    }
    HEAP8[$24 >> 0] = 0; //@line 24333
    return;
   } else {
    $$067 = $137; //@line 24336
   }
  } else {
   $$067 = -1; //@line 24339
  }
  _equeue_mutex_lock($22); //@line 24341
  $157 = HEAP32[$4 >> 2] | 0; //@line 24342
  if (!$157) {
   $$2 = $$067; //@line 24345
  } else {
   $161 = (HEAP32[$157 + 20 >> 2] | 0) - $136 | 0; //@line 24349
   $164 = $161 & ~($161 >> 31); //@line 24352
   $$2 = $164 >>> 0 < $$067 >>> 0 ? $164 : $$067; //@line 24355
  }
  _equeue_mutex_unlock($22); //@line 24357
  _equeue_sema_wait($26, $$2) | 0; //@line 24358
  do {
   if (HEAP8[$24 >> 0] | 0) {
    _equeue_mutex_lock($22); //@line 24363
    if (!(HEAP8[$24 >> 0] | 0)) {
     _equeue_mutex_unlock($22); //@line 24367
     break;
    }
    HEAP8[$24 >> 0] = 0; //@line 24370
    _equeue_mutex_unlock($22); //@line 24371
    return;
   }
  } while (0);
  $170 = _equeue_tick() | 0; //@line 24375
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(76) | 0; //@line 24376
  _wait_ms(20); //@line 24377
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 24380
   $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 24381
   HEAP32[$171 >> 2] = $4; //@line 24382
   $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 24383
   HEAP32[$172 >> 2] = $6; //@line 24384
   $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 24385
   HEAP32[$173 >> 2] = $8; //@line 24386
   $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 24387
   $$expand_i1_val16 = $10 & 1; //@line 24388
   HEAP8[$174 >> 0] = $$expand_i1_val16; //@line 24389
   $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 24390
   HEAP32[$175 >> 2] = $12; //@line 24391
   $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 24392
   HEAP32[$176 >> 2] = $14; //@line 24393
   $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 24394
   HEAP32[$177 >> 2] = $16; //@line 24395
   $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 24396
   HEAP32[$178 >> 2] = $18; //@line 24397
   $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 24398
   HEAP32[$179 >> 2] = $20; //@line 24399
   $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 24400
   HEAP32[$180 >> 2] = $22; //@line 24401
   $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 24402
   HEAP32[$181 >> 2] = $24; //@line 24403
   $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 24404
   HEAP32[$182 >> 2] = $26; //@line 24405
   $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 24406
   HEAP32[$183 >> 2] = $28; //@line 24407
   $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 24408
   HEAP32[$184 >> 2] = $30; //@line 24409
   $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 24410
   HEAP32[$185 >> 2] = $32; //@line 24411
   $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 24412
   HEAP32[$186 >> 2] = $34; //@line 24413
   $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 24414
   HEAP32[$187 >> 2] = $36; //@line 24415
   $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 24416
   HEAP32[$188 >> 2] = $170; //@line 24417
   sp = STACKTOP; //@line 24418
   return;
  }
  ___async_unwind = 0; //@line 24421
  HEAP32[$ReallocAsyncCtx5 >> 2] = 138; //@line 24422
  $171 = $ReallocAsyncCtx5 + 4 | 0; //@line 24423
  HEAP32[$171 >> 2] = $4; //@line 24424
  $172 = $ReallocAsyncCtx5 + 8 | 0; //@line 24425
  HEAP32[$172 >> 2] = $6; //@line 24426
  $173 = $ReallocAsyncCtx5 + 12 | 0; //@line 24427
  HEAP32[$173 >> 2] = $8; //@line 24428
  $174 = $ReallocAsyncCtx5 + 16 | 0; //@line 24429
  $$expand_i1_val16 = $10 & 1; //@line 24430
  HEAP8[$174 >> 0] = $$expand_i1_val16; //@line 24431
  $175 = $ReallocAsyncCtx5 + 20 | 0; //@line 24432
  HEAP32[$175 >> 2] = $12; //@line 24433
  $176 = $ReallocAsyncCtx5 + 24 | 0; //@line 24434
  HEAP32[$176 >> 2] = $14; //@line 24435
  $177 = $ReallocAsyncCtx5 + 28 | 0; //@line 24436
  HEAP32[$177 >> 2] = $16; //@line 24437
  $178 = $ReallocAsyncCtx5 + 32 | 0; //@line 24438
  HEAP32[$178 >> 2] = $18; //@line 24439
  $179 = $ReallocAsyncCtx5 + 36 | 0; //@line 24440
  HEAP32[$179 >> 2] = $20; //@line 24441
  $180 = $ReallocAsyncCtx5 + 40 | 0; //@line 24442
  HEAP32[$180 >> 2] = $22; //@line 24443
  $181 = $ReallocAsyncCtx5 + 44 | 0; //@line 24444
  HEAP32[$181 >> 2] = $24; //@line 24445
  $182 = $ReallocAsyncCtx5 + 48 | 0; //@line 24446
  HEAP32[$182 >> 2] = $26; //@line 24447
  $183 = $ReallocAsyncCtx5 + 52 | 0; //@line 24448
  HEAP32[$183 >> 2] = $28; //@line 24449
  $184 = $ReallocAsyncCtx5 + 56 | 0; //@line 24450
  HEAP32[$184 >> 2] = $30; //@line 24451
  $185 = $ReallocAsyncCtx5 + 60 | 0; //@line 24452
  HEAP32[$185 >> 2] = $32; //@line 24453
  $186 = $ReallocAsyncCtx5 + 64 | 0; //@line 24454
  HEAP32[$186 >> 2] = $34; //@line 24455
  $187 = $ReallocAsyncCtx5 + 68 | 0; //@line 24456
  HEAP32[$187 >> 2] = $36; //@line 24457
  $188 = $ReallocAsyncCtx5 + 72 | 0; //@line 24458
  HEAP32[$188 >> 2] = $170; //@line 24459
  sp = STACKTOP; //@line 24460
  return;
 }
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 12868
 STACKTOP = STACKTOP + 64 | 0; //@line 12869
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 12869
 $5 = sp + 16 | 0; //@line 12870
 $6 = sp; //@line 12871
 $7 = sp + 24 | 0; //@line 12872
 $8 = sp + 8 | 0; //@line 12873
 $9 = sp + 20 | 0; //@line 12874
 HEAP32[$5 >> 2] = $1; //@line 12875
 $10 = ($0 | 0) != 0; //@line 12876
 $11 = $7 + 40 | 0; //@line 12877
 $12 = $11; //@line 12878
 $13 = $7 + 39 | 0; //@line 12879
 $14 = $8 + 4 | 0; //@line 12880
 $$0243 = 0; //@line 12881
 $$0247 = 0; //@line 12881
 $$0269 = 0; //@line 12881
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 12890
     $$1248 = -1; //@line 12891
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 12895
     break;
    }
   } else {
    $$1248 = $$0247; //@line 12899
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 12902
  $21 = HEAP8[$20 >> 0] | 0; //@line 12903
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 12906
   break;
  } else {
   $23 = $21; //@line 12909
   $25 = $20; //@line 12909
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 12914
     $27 = $25; //@line 12914
     label = 9; //@line 12915
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 12920
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 12927
   HEAP32[$5 >> 2] = $24; //@line 12928
   $23 = HEAP8[$24 >> 0] | 0; //@line 12930
   $25 = $24; //@line 12930
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 12935
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 12940
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 12943
     $27 = $27 + 2 | 0; //@line 12944
     HEAP32[$5 >> 2] = $27; //@line 12945
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 12952
      break;
     } else {
      $$0249303 = $30; //@line 12949
      label = 9; //@line 12950
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 12960
  if ($10) {
   _out_670($0, $20, $36); //@line 12962
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 12966
   $$0247 = $$1248; //@line 12966
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 12974
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 12975
  if ($43) {
   $$0253 = -1; //@line 12977
   $$1270 = $$0269; //@line 12977
   $$sink = 1; //@line 12977
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 12987
    $$1270 = 1; //@line 12987
    $$sink = 3; //@line 12987
   } else {
    $$0253 = -1; //@line 12989
    $$1270 = $$0269; //@line 12989
    $$sink = 1; //@line 12989
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 12992
  HEAP32[$5 >> 2] = $51; //@line 12993
  $52 = HEAP8[$51 >> 0] | 0; //@line 12994
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 12996
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 13003
   $$lcssa291 = $52; //@line 13003
   $$lcssa292 = $51; //@line 13003
  } else {
   $$0262309 = 0; //@line 13005
   $60 = $52; //@line 13005
   $65 = $51; //@line 13005
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 13010
    $64 = $65 + 1 | 0; //@line 13011
    HEAP32[$5 >> 2] = $64; //@line 13012
    $66 = HEAP8[$64 >> 0] | 0; //@line 13013
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 13015
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 13022
     $$lcssa291 = $66; //@line 13022
     $$lcssa292 = $64; //@line 13022
     break;
    } else {
     $$0262309 = $63; //@line 13025
     $60 = $66; //@line 13025
     $65 = $64; //@line 13025
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 13037
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 13039
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 13044
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 13049
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 13061
     $$2271 = 1; //@line 13061
     $storemerge274 = $79 + 3 | 0; //@line 13061
    } else {
     label = 23; //@line 13063
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 13067
    if ($$1270 | 0) {
     $$0 = -1; //@line 13070
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13085
     $106 = HEAP32[$105 >> 2] | 0; //@line 13086
     HEAP32[$2 >> 2] = $105 + 4; //@line 13088
     $363 = $106; //@line 13089
    } else {
     $363 = 0; //@line 13091
    }
    $$0259 = $363; //@line 13095
    $$2271 = 0; //@line 13095
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 13095
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 13097
   $109 = ($$0259 | 0) < 0; //@line 13098
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 13103
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 13103
   $$3272 = $$2271; //@line 13103
   $115 = $storemerge274; //@line 13103
  } else {
   $112 = _getint_671($5) | 0; //@line 13105
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 13108
    break;
   }
   $$1260 = $112; //@line 13112
   $$1263 = $$0262$lcssa; //@line 13112
   $$3272 = $$1270; //@line 13112
   $115 = HEAP32[$5 >> 2] | 0; //@line 13112
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 13123
     $156 = _getint_671($5) | 0; //@line 13124
     $$0254 = $156; //@line 13126
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 13126
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 13135
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 13140
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 13145
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 13152
      $144 = $125 + 4 | 0; //@line 13156
      HEAP32[$5 >> 2] = $144; //@line 13157
      $$0254 = $140; //@line 13158
      $$pre345 = $144; //@line 13158
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 13164
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13179
     $152 = HEAP32[$151 >> 2] | 0; //@line 13180
     HEAP32[$2 >> 2] = $151 + 4; //@line 13182
     $364 = $152; //@line 13183
    } else {
     $364 = 0; //@line 13185
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 13188
    HEAP32[$5 >> 2] = $154; //@line 13189
    $$0254 = $364; //@line 13190
    $$pre345 = $154; //@line 13190
   } else {
    $$0254 = -1; //@line 13192
    $$pre345 = $115; //@line 13192
   }
  } while (0);
  $$0252 = 0; //@line 13195
  $158 = $$pre345; //@line 13195
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 13202
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 13205
   HEAP32[$5 >> 2] = $158; //@line 13206
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (15802 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 13211
   $168 = $167 & 255; //@line 13212
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 13216
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 13223
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 13227
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 13231
     break L1;
    } else {
     label = 50; //@line 13234
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 13239
     $176 = $3 + ($$0253 << 3) | 0; //@line 13241
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 13246
     $182 = $6; //@line 13247
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 13249
     HEAP32[$182 + 4 >> 2] = $181; //@line 13252
     label = 50; //@line 13253
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 13257
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 13260
    $187 = HEAP32[$5 >> 2] | 0; //@line 13262
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 13266
   if ($10) {
    $187 = $158; //@line 13268
   } else {
    $$0243 = 0; //@line 13270
    $$0247 = $$1248; //@line 13270
    $$0269 = $$3272; //@line 13270
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 13276
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 13282
  $196 = $$1263 & -65537; //@line 13285
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 13286
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 13294
       $$0243 = 0; //@line 13295
       $$0247 = $$1248; //@line 13295
       $$0269 = $$3272; //@line 13295
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 13301
       $$0243 = 0; //@line 13302
       $$0247 = $$1248; //@line 13302
       $$0269 = $$3272; //@line 13302
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 13310
       HEAP32[$208 >> 2] = $$1248; //@line 13312
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 13315
       $$0243 = 0; //@line 13316
       $$0247 = $$1248; //@line 13316
       $$0269 = $$3272; //@line 13316
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 13323
       $$0243 = 0; //@line 13324
       $$0247 = $$1248; //@line 13324
       $$0269 = $$3272; //@line 13324
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 13331
       $$0243 = 0; //@line 13332
       $$0247 = $$1248; //@line 13332
       $$0269 = $$3272; //@line 13332
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 13338
       $$0243 = 0; //@line 13339
       $$0247 = $$1248; //@line 13339
       $$0269 = $$3272; //@line 13339
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 13347
       HEAP32[$220 >> 2] = $$1248; //@line 13349
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 13352
       $$0243 = 0; //@line 13353
       $$0247 = $$1248; //@line 13353
       $$0269 = $$3272; //@line 13353
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 13358
       $$0247 = $$1248; //@line 13358
       $$0269 = $$3272; //@line 13358
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 13368
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 13368
     $$3265 = $$1263$ | 8; //@line 13368
     label = 62; //@line 13369
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 13373
     $$1255 = $$0254; //@line 13373
     $$3265 = $$1263$; //@line 13373
     label = 62; //@line 13374
     break;
    }
   case 111:
    {
     $242 = $6; //@line 13378
     $244 = HEAP32[$242 >> 2] | 0; //@line 13380
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 13383
     $248 = _fmt_o($244, $247, $11) | 0; //@line 13384
     $252 = $12 - $248 | 0; //@line 13388
     $$0228 = $248; //@line 13393
     $$1233 = 0; //@line 13393
     $$1238 = 16266; //@line 13393
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 13393
     $$4266 = $$1263$; //@line 13393
     $281 = $244; //@line 13393
     $283 = $247; //@line 13393
     label = 68; //@line 13394
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 13398
     $258 = HEAP32[$256 >> 2] | 0; //@line 13400
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 13403
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 13406
      $264 = tempRet0; //@line 13407
      $265 = $6; //@line 13408
      HEAP32[$265 >> 2] = $263; //@line 13410
      HEAP32[$265 + 4 >> 2] = $264; //@line 13413
      $$0232 = 1; //@line 13414
      $$0237 = 16266; //@line 13414
      $275 = $263; //@line 13414
      $276 = $264; //@line 13414
      label = 67; //@line 13415
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 13427
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 16266 : 16268 : 16267; //@line 13427
      $275 = $258; //@line 13427
      $276 = $261; //@line 13427
      label = 67; //@line 13428
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 13434
     $$0232 = 0; //@line 13440
     $$0237 = 16266; //@line 13440
     $275 = HEAP32[$197 >> 2] | 0; //@line 13440
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 13440
     label = 67; //@line 13441
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 13452
     $$2 = $13; //@line 13453
     $$2234 = 0; //@line 13453
     $$2239 = 16266; //@line 13453
     $$2251 = $11; //@line 13453
     $$5 = 1; //@line 13453
     $$6268 = $196; //@line 13453
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 13460
     label = 72; //@line 13461
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 13465
     $$1 = $302 | 0 ? $302 : 16276; //@line 13468
     label = 72; //@line 13469
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 13479
     HEAP32[$14 >> 2] = 0; //@line 13480
     HEAP32[$6 >> 2] = $8; //@line 13481
     $$4258354 = -1; //@line 13482
     $365 = $8; //@line 13482
     label = 76; //@line 13483
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 13487
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 13490
      $$0240$lcssa356 = 0; //@line 13491
      label = 85; //@line 13492
     } else {
      $$4258354 = $$0254; //@line 13494
      $365 = $$pre348; //@line 13494
      label = 76; //@line 13495
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 13502
     $$0247 = $$1248; //@line 13502
     $$0269 = $$3272; //@line 13502
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 13507
     $$2234 = 0; //@line 13507
     $$2239 = 16266; //@line 13507
     $$2251 = $11; //@line 13507
     $$5 = $$0254; //@line 13507
     $$6268 = $$1263$; //@line 13507
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 13513
    $227 = $6; //@line 13514
    $229 = HEAP32[$227 >> 2] | 0; //@line 13516
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 13519
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 13521
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 13527
    $$0228 = $234; //@line 13532
    $$1233 = $or$cond278 ? 0 : 2; //@line 13532
    $$1238 = $or$cond278 ? 16266 : 16266 + ($$1236 >> 4) | 0; //@line 13532
    $$2256 = $$1255; //@line 13532
    $$4266 = $$3265; //@line 13532
    $281 = $229; //@line 13532
    $283 = $232; //@line 13532
    label = 68; //@line 13533
   } else if ((label | 0) == 67) {
    label = 0; //@line 13536
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 13538
    $$1233 = $$0232; //@line 13538
    $$1238 = $$0237; //@line 13538
    $$2256 = $$0254; //@line 13538
    $$4266 = $$1263$; //@line 13538
    $281 = $275; //@line 13538
    $283 = $276; //@line 13538
    label = 68; //@line 13539
   } else if ((label | 0) == 72) {
    label = 0; //@line 13542
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 13543
    $306 = ($305 | 0) == 0; //@line 13544
    $$2 = $$1; //@line 13551
    $$2234 = 0; //@line 13551
    $$2239 = 16266; //@line 13551
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 13551
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 13551
    $$6268 = $196; //@line 13551
   } else if ((label | 0) == 76) {
    label = 0; //@line 13554
    $$0229316 = $365; //@line 13555
    $$0240315 = 0; //@line 13555
    $$1244314 = 0; //@line 13555
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 13557
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 13560
      $$2245 = $$1244314; //@line 13560
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 13563
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 13569
      $$2245 = $320; //@line 13569
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 13573
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 13576
      $$0240315 = $325; //@line 13576
      $$1244314 = $320; //@line 13576
     } else {
      $$0240$lcssa = $325; //@line 13578
      $$2245 = $320; //@line 13578
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 13584
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 13587
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 13590
     label = 85; //@line 13591
    } else {
     $$1230327 = $365; //@line 13593
     $$1241326 = 0; //@line 13593
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 13595
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13598
       label = 85; //@line 13599
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 13602
      $$1241326 = $331 + $$1241326 | 0; //@line 13603
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13606
       label = 85; //@line 13607
       break L97;
      }
      _out_670($0, $9, $331); //@line 13611
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 13616
       label = 85; //@line 13617
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 13614
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 13625
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 13631
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 13633
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 13638
   $$2 = $or$cond ? $$0228 : $11; //@line 13643
   $$2234 = $$1233; //@line 13643
   $$2239 = $$1238; //@line 13643
   $$2251 = $11; //@line 13643
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 13643
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 13643
  } else if ((label | 0) == 85) {
   label = 0; //@line 13646
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 13648
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 13651
   $$0247 = $$1248; //@line 13651
   $$0269 = $$3272; //@line 13651
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 13656
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 13658
  $345 = $$$5 + $$2234 | 0; //@line 13659
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 13661
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 13662
  _out_670($0, $$2239, $$2234); //@line 13663
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 13665
  _pad_676($0, 48, $$$5, $343, 0); //@line 13666
  _out_670($0, $$2, $343); //@line 13667
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 13669
  $$0243 = $$2261; //@line 13670
  $$0247 = $$1248; //@line 13670
  $$0269 = $$3272; //@line 13670
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 13678
    } else {
     $$2242302 = 1; //@line 13680
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 13683
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 13686
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 13690
      $356 = $$2242302 + 1 | 0; //@line 13691
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 13694
      } else {
       $$2242$lcssa = $356; //@line 13696
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 13702
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 13708
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 13714
       } else {
        $$0 = 1; //@line 13716
        break;
       }
      }
     } else {
      $$0 = 1; //@line 13721
     }
    }
   } else {
    $$0 = $$1248; //@line 13725
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13729
 return $$0 | 0; //@line 13729
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4637
 STACKTOP = STACKTOP + 96 | 0; //@line 4638
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 4638
 $vararg_buffer23 = sp + 72 | 0; //@line 4639
 $vararg_buffer20 = sp + 64 | 0; //@line 4640
 $vararg_buffer18 = sp + 56 | 0; //@line 4641
 $vararg_buffer15 = sp + 48 | 0; //@line 4642
 $vararg_buffer12 = sp + 40 | 0; //@line 4643
 $vararg_buffer9 = sp + 32 | 0; //@line 4644
 $vararg_buffer6 = sp + 24 | 0; //@line 4645
 $vararg_buffer3 = sp + 16 | 0; //@line 4646
 $vararg_buffer1 = sp + 8 | 0; //@line 4647
 $vararg_buffer = sp; //@line 4648
 $4 = sp + 80 | 0; //@line 4649
 $5 = HEAP32[176] | 0; //@line 4650
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 4654
   FUNCTION_TABLE_v[$5 & 15](); //@line 4655
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 141; //@line 4658
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 4660
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 4662
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer23; //@line 4664
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer23; //@line 4666
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 4668
    HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 4670
    HEAP8[$AsyncCtx + 28 >> 0] = $0; //@line 4672
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer20; //@line 4674
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer20; //@line 4676
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer3; //@line 4678
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer3; //@line 4680
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 4682
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer12; //@line 4684
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer12; //@line 4686
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer9; //@line 4688
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer9; //@line 4690
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer18; //@line 4692
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer18; //@line 4694
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer15; //@line 4696
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer15; //@line 4698
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer1; //@line 4700
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer1; //@line 4702
    HEAP32[$AsyncCtx + 92 >> 2] = $4; //@line 4704
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer6; //@line 4706
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer6; //@line 4708
    sp = STACKTOP; //@line 4709
    STACKTOP = sp; //@line 4710
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4712
    HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 4715
    break;
   }
  }
 } while (0);
 $34 = HEAP32[167] | 0; //@line 4720
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 4724
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[164] | 0; //@line 4730
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 4737
       break;
      }
     }
     $43 = HEAP32[165] | 0; //@line 4741
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 4745
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 4750
      } else {
       label = 11; //@line 4752
      }
     }
    } else {
     label = 11; //@line 4756
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 4760
   }
   if (!((HEAP32[174] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 4772
    break;
   }
   $54 = HEAPU8[652] | 0; //@line 4776
   $55 = $0 & 255; //@line 4777
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 4782
    $$lobit = $59 >>> 6; //@line 4783
    $60 = $$lobit & 255; //@line 4784
    $64 = ($54 & 32 | 0) == 0; //@line 4788
    $65 = HEAP32[168] | 0; //@line 4789
    $66 = HEAP32[167] | 0; //@line 4790
    $67 = $0 << 24 >> 24 == 1; //@line 4791
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4795
      _vsnprintf($66, $65, $2, $3) | 0; //@line 4796
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 142; //@line 4799
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 4802
       sp = STACKTOP; //@line 4803
       STACKTOP = sp; //@line 4804
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 4806
      $69 = HEAP32[175] | 0; //@line 4807
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[174] | 0; //@line 4811
       $74 = HEAP32[167] | 0; //@line 4812
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4813
       FUNCTION_TABLE_vi[$73 & 1023]($74); //@line 4814
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 145; //@line 4817
        sp = STACKTOP; //@line 4818
        STACKTOP = sp; //@line 4819
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 4821
        break;
       }
      }
      $71 = HEAP32[167] | 0; //@line 4825
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4826
      FUNCTION_TABLE_vi[$69 & 1023]($71); //@line 4827
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 143; //@line 4830
       sp = STACKTOP; //@line 4831
       STACKTOP = sp; //@line 4832
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 4834
      $72 = HEAP32[175] | 0; //@line 4835
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4836
      FUNCTION_TABLE_vi[$72 & 1023](11766); //@line 4837
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 144; //@line 4840
       sp = STACKTOP; //@line 4841
       STACKTOP = sp; //@line 4842
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 4844
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 4851
       $$1143 = $66; //@line 4851
       $$1145 = $65; //@line 4851
       $$3154 = 0; //@line 4851
       label = 38; //@line 4852
      } else {
       if ($64) {
        $$0142 = $66; //@line 4855
        $$0144 = $65; //@line 4855
       } else {
        $76 = _snprintf($66, $65, 11768, $vararg_buffer) | 0; //@line 4857
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 4859
        $78 = ($$ | 0) > 0; //@line 4860
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 4865
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 4865
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 4869
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 11786; //@line 4875
          label = 35; //@line 4876
          break;
         }
        case 1:
         {
          $$sink = 11792; //@line 4880
          label = 35; //@line 4881
          break;
         }
        case 3:
         {
          $$sink = 11780; //@line 4885
          label = 35; //@line 4886
          break;
         }
        case 7:
         {
          $$sink = 11774; //@line 4890
          label = 35; //@line 4891
          break;
         }
        default:
         {
          $$0141 = 0; //@line 4895
          $$1152 = 0; //@line 4895
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 4899
         $$0141 = $60 & 1; //@line 4902
         $$1152 = _snprintf($$0142, $$0144, 11798, $vararg_buffer1) | 0; //@line 4902
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 4905
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 4907
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 4909
         $$1$off0 = $extract$t159; //@line 4914
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 4914
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 4914
         $$3154 = $$1152; //@line 4914
         label = 38; //@line 4915
        } else {
         $$1$off0 = $extract$t159; //@line 4917
         $$1143 = $$0142; //@line 4917
         $$1145 = $$0144; //@line 4917
         $$3154 = $$1152$; //@line 4917
         label = 38; //@line 4918
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 4931
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 4932
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 4933
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 146; //@line 4936
           HEAP32[$AsyncCtx60 + 4 >> 2] = $vararg_buffer23; //@line 4938
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer23; //@line 4940
           HEAP8[$AsyncCtx60 + 12 >> 0] = $$1$off0 & 1; //@line 4943
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer20; //@line 4945
           HEAP32[$AsyncCtx60 + 20 >> 2] = $vararg_buffer20; //@line 4947
           HEAP32[$AsyncCtx60 + 24 >> 2] = $vararg_buffer3; //@line 4949
           HEAP32[$AsyncCtx60 + 28 >> 2] = $$1143; //@line 4951
           HEAP32[$AsyncCtx60 + 32 >> 2] = $$1145; //@line 4953
           HEAP32[$AsyncCtx60 + 36 >> 2] = $vararg_buffer3; //@line 4955
           HEAP32[$AsyncCtx60 + 40 >> 2] = $4; //@line 4957
           HEAP32[$AsyncCtx60 + 44 >> 2] = $vararg_buffer12; //@line 4959
           HEAP32[$AsyncCtx60 + 48 >> 2] = $1; //@line 4961
           HEAP32[$AsyncCtx60 + 52 >> 2] = $vararg_buffer12; //@line 4963
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer9; //@line 4965
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer9; //@line 4967
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer18; //@line 4969
           HEAP32[$AsyncCtx60 + 68 >> 2] = $vararg_buffer18; //@line 4971
           HEAP32[$AsyncCtx60 + 72 >> 2] = $vararg_buffer15; //@line 4973
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer15; //@line 4975
           HEAP32[$AsyncCtx60 + 80 >> 2] = $2; //@line 4977
           HEAP32[$AsyncCtx60 + 84 >> 2] = $3; //@line 4979
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer6; //@line 4981
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer6; //@line 4983
           HEAP32[$AsyncCtx60 + 96 >> 2] = $55; //@line 4985
           HEAP32[$AsyncCtx60 + 100 >> 2] = $$3154; //@line 4987
           sp = STACKTOP; //@line 4988
           STACKTOP = sp; //@line 4989
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 4991
          $125 = HEAP32[172] | 0; //@line 4996
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 4997
          $126 = FUNCTION_TABLE_ii[$125 & 15](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 4998
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 147; //@line 5001
           HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer23; //@line 5003
           HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer23; //@line 5005
           HEAP8[$AsyncCtx38 + 12 >> 0] = $$1$off0 & 1; //@line 5008
           HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer20; //@line 5010
           HEAP32[$AsyncCtx38 + 20 >> 2] = $vararg_buffer20; //@line 5012
           HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer3; //@line 5014
           HEAP32[$AsyncCtx38 + 28 >> 2] = $$1143; //@line 5016
           HEAP32[$AsyncCtx38 + 32 >> 2] = $$1145; //@line 5018
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer3; //@line 5020
           HEAP32[$AsyncCtx38 + 40 >> 2] = $4; //@line 5022
           HEAP32[$AsyncCtx38 + 44 >> 2] = $vararg_buffer12; //@line 5024
           HEAP32[$AsyncCtx38 + 48 >> 2] = $1; //@line 5026
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer12; //@line 5028
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer9; //@line 5030
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer9; //@line 5032
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer18; //@line 5034
           HEAP32[$AsyncCtx38 + 68 >> 2] = $vararg_buffer18; //@line 5036
           HEAP32[$AsyncCtx38 + 72 >> 2] = $vararg_buffer15; //@line 5038
           HEAP32[$AsyncCtx38 + 76 >> 2] = $vararg_buffer15; //@line 5040
           HEAP32[$AsyncCtx38 + 80 >> 2] = $2; //@line 5042
           HEAP32[$AsyncCtx38 + 84 >> 2] = $3; //@line 5044
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer6; //@line 5046
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer6; //@line 5048
           HEAP32[$AsyncCtx38 + 96 >> 2] = $55; //@line 5050
           sp = STACKTOP; //@line 5051
           STACKTOP = sp; //@line 5052
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 5054
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 5055
           $151 = _snprintf($$1143, $$1145, 11798, $vararg_buffer3) | 0; //@line 5056
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 5058
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 5063
            $$3147 = $$1145 - $$10 | 0; //@line 5063
            label = 44; //@line 5064
            break;
           } else {
            $$3147168 = $$1145; //@line 5067
            $$3169 = $$1143; //@line 5067
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 5072
          $$3147 = $$1145; //@line 5072
          label = 44; //@line 5073
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 5079
          $$3169 = $$3; //@line 5079
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 5084
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 5090
          $$5156 = _snprintf($$3169, $$3147168, 11801, $vararg_buffer6) | 0; //@line 5092
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 5096
          $$5156 = _snprintf($$3169, $$3147168, 11816, $vararg_buffer9) | 0; //@line 5098
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 5102
          $$5156 = _snprintf($$3169, $$3147168, 11831, $vararg_buffer12) | 0; //@line 5104
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 5108
          $$5156 = _snprintf($$3169, $$3147168, 11846, $vararg_buffer15) | 0; //@line 5110
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 11861, $vararg_buffer18) | 0; //@line 5115
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 5119
        $168 = $$3169 + $$5156$ | 0; //@line 5121
        $169 = $$3147168 - $$5156$ | 0; //@line 5122
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5126
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 5127
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 148; //@line 5130
          HEAP32[$AsyncCtx56 + 4 >> 2] = $169; //@line 5132
          HEAP32[$AsyncCtx56 + 8 >> 2] = $168; //@line 5134
          HEAP32[$AsyncCtx56 + 12 >> 2] = $vararg_buffer23; //@line 5136
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer23; //@line 5138
          HEAP8[$AsyncCtx56 + 20 >> 0] = $$1$off0 & 1; //@line 5141
          HEAP32[$AsyncCtx56 + 24 >> 2] = $vararg_buffer20; //@line 5143
          HEAP32[$AsyncCtx56 + 28 >> 2] = $vararg_buffer20; //@line 5145
          sp = STACKTOP; //@line 5146
          STACKTOP = sp; //@line 5147
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 5149
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 5151
         $181 = $168 + $$13 | 0; //@line 5153
         $182 = $169 - $$13 | 0; //@line 5154
         if (($$13 | 0) > 0) {
          $184 = HEAP32[173] | 0; //@line 5157
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 5162
            $186 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 5163
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 149; //@line 5166
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 5168
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 5170
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 5172
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 5174
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 5177
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 5179
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 5181
             sp = STACKTOP; //@line 5182
             STACKTOP = sp; //@line 5183
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 5185
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 5186
             $194 = _snprintf($181, $182, 11798, $vararg_buffer20) | 0; //@line 5187
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 5189
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 5194
              $$6150 = $182 - $$18 | 0; //@line 5194
              $$9 = $$18; //@line 5194
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 5201
            $$6150 = $182; //@line 5201
            $$9 = $$13; //@line 5201
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 11876, $vararg_buffer23) | 0; //@line 5210
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[174] | 0; //@line 5216
      $202 = HEAP32[167] | 0; //@line 5217
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5218
      FUNCTION_TABLE_vi[$201 & 1023]($202); //@line 5219
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 150; //@line 5222
       sp = STACKTOP; //@line 5223
       STACKTOP = sp; //@line 5224
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 5226
       break;
      }
     }
    } while (0);
    HEAP32[171] = HEAP32[169]; //@line 5232
   }
  }
 } while (0);
 $204 = HEAP32[177] | 0; //@line 5236
 if (!$204) {
  STACKTOP = sp; //@line 5239
  return;
 }
 $206 = HEAP32[178] | 0; //@line 5241
 HEAP32[178] = 0; //@line 5242
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5243
 FUNCTION_TABLE_v[$204 & 15](); //@line 5244
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 151; //@line 5247
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 5249
  sp = STACKTOP; //@line 5250
  STACKTOP = sp; //@line 5251
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 5253
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 5256
 } else {
  STACKTOP = sp; //@line 5258
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 5261
  $$pre = HEAP32[177] | 0; //@line 5262
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5263
  FUNCTION_TABLE_v[$$pre & 15](); //@line 5264
  if (___async) {
   label = 70; //@line 5267
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 5270
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 5273
  } else {
   label = 72; //@line 5275
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 152; //@line 5280
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 5282
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 5284
  sp = STACKTOP; //@line 5285
  STACKTOP = sp; //@line 5286
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 5289
  return;
 }
}
function _initialize($0) {
 $0 = $0 | 0;
 var $$043 = 0, $$044 = 0, $$04750525456586062646668707274767880828486889092949698100102104106108 = 0, $$048 = 0, $1 = 0, $104 = 0, $105 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $116 = 0, $118 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $147 = 0, $149 = 0, $155 = 0, $156 = 0, $157 = 0, $166 = 0, $167 = 0, $168 = 0, $170 = 0, $174 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $184 = 0, $24 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $41 = 0, $45 = 0, $46 = 0, $53 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $70 = 0, $72 = 0, $75 = 0, $79 = 0, $80 = 0, $87 = 0, $88 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5093
 $1 = $0 + 4 | 0; //@line 5094
 if (HEAP8[(HEAP32[$1 >> 2] | 0) + 56 >> 0] | 0) {
  return;
 }
 $7 = HEAP32[HEAP32[$0 >> 2] >> 2] | 0; //@line 5103
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5104
 FUNCTION_TABLE_v[$7 & 15](); //@line 5105
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 618; //@line 5108
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5110
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5112
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5114
  sp = STACKTOP; //@line 5115
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5118
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 5121
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 5122
 $14 = FUNCTION_TABLE_i[$13 & 7]() | 0; //@line 5123
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 619; //@line 5126
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 5128
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 5130
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 5132
  sp = STACKTOP; //@line 5133
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 5136
 $18 = HEAP32[$14 >> 2] | 0; //@line 5137
 L10 : do {
  if (($18 | 0) < 32768) {
   if (($18 | 0) >= 128) {
    if (($18 | 0) < 2048) {
     switch ($18 | 0) {
     case 1024:
      {
       $$043 = 10; //@line 5147
       $$048 = $18; //@line 5147
       break L10;
       break;
      }
     case 512:
      {
       $$043 = 9; //@line 5152
       $$048 = $18; //@line 5152
       break L10;
       break;
      }
     case 256:
      {
       $$043 = 8; //@line 5157
       $$048 = $18; //@line 5157
       break L10;
       break;
      }
     case 128:
      {
       $$043 = 7; //@line 5162
       $$048 = $18; //@line 5162
       break L10;
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5167
       label = 60; //@line 5168
       break L10;
      }
     }
    }
    if (($18 | 0) < 8192) {
     switch ($18 | 0) {
     case 4096:
      {
       $$043 = 12; //@line 5177
       $$048 = $18; //@line 5177
       break L10;
       break;
      }
     case 2048:
      {
       $$043 = 11; //@line 5182
       $$048 = $18; //@line 5182
       break L10;
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5187
       label = 60; //@line 5188
       break L10;
      }
     }
    }
    if (($18 | 0) < 16384) {
     switch ($18 | 0) {
     case 8192:
      {
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5200
       label = 60; //@line 5201
       break L10;
      }
     }
     $$043 = 13; //@line 5205
     $$048 = $18; //@line 5205
     break;
    } else {
     switch ($18 | 0) {
     case 16384:
      {
       break;
      }
     default:
      {
       $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5213
       label = 60; //@line 5214
       break L10;
      }
     }
     $$043 = 14; //@line 5218
     $$048 = $18; //@line 5218
     break;
    }
   }
   if (($18 | 0) >= 8) {
    switch ($18 | 0) {
    case 64:
     {
      $$043 = 6; //@line 5226
      $$048 = $18; //@line 5226
      break L10;
      break;
     }
    case 32:
     {
      $$043 = 5; //@line 5231
      $$048 = $18; //@line 5231
      break L10;
      break;
     }
    case 16:
     {
      $$043 = 4; //@line 5236
      $$048 = $18; //@line 5236
      break L10;
      break;
     }
    case 8:
     {
      $$043 = 3; //@line 5241
      $$048 = $18; //@line 5241
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5246
      label = 60; //@line 5247
      break L10;
     }
    }
   }
   if (($18 | 0) >= 2) {
    switch ($18 | 0) {
    case 4:
     {
      $$043 = 2; //@line 5256
      $$048 = $18; //@line 5256
      break L10;
      break;
     }
    case 2:
     {
      $$043 = 1; //@line 5261
      $$048 = $18; //@line 5261
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5266
      label = 60; //@line 5267
      break L10;
     }
    }
   }
   if (($18 | 0) < 0) {
    switch ($18 | 0) {
    case -2147483648:
     {
      $$043 = 31; //@line 5276
      $$048 = -2147483648; //@line 5276
      break L10;
      break;
     }
    default:
     {
      $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5281
      label = 60; //@line 5282
      break L10;
     }
    }
   }
   switch ($18 | 0) {
   case 0:
    {
     break;
    }
   default:
    {
     $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5292
     label = 60; //@line 5293
     break L10;
    }
   }
   $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5297
   _mbed_assert_internal(14291, 14293, 41); //@line 5298
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 620; //@line 5301
    HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 5303
    HEAP32[$AsyncCtx19 + 8 >> 2] = $0; //@line 5305
    HEAP32[$AsyncCtx19 + 12 >> 2] = $0; //@line 5307
    HEAP32[$AsyncCtx19 + 16 >> 2] = $14; //@line 5309
    sp = STACKTOP; //@line 5310
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5313
    $$04750525456586062646668707274767880828486889092949698100102104106108 = 1e6; //@line 5314
    label = 60; //@line 5315
    break;
   }
  } else {
   if (($18 | 0) < 8388608) {
    if (($18 | 0) < 524288) {
     if (($18 | 0) < 131072) {
      if (($18 | 0) < 65536) {
       switch ($18 | 0) {
       case 32768:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5332
         label = 60; //@line 5333
         break L10;
        }
       }
       $$043 = 15; //@line 5337
       $$048 = $18; //@line 5337
       break;
      } else {
       switch ($18 | 0) {
       case 65536:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5345
         label = 60; //@line 5346
         break L10;
        }
       }
       $$043 = 16; //@line 5350
       $$048 = $18; //@line 5350
       break;
      }
     } else {
      if (($18 | 0) < 262144) {
       switch ($18 | 0) {
       case 131072:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5361
         label = 60; //@line 5362
         break L10;
        }
       }
       $$043 = 17; //@line 5366
       $$048 = $18; //@line 5366
       break;
      } else {
       switch ($18 | 0) {
       case 262144:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5374
         label = 60; //@line 5375
         break L10;
        }
       }
       $$043 = 18; //@line 5379
       $$048 = $18; //@line 5379
       break;
      }
     }
    } else {
     if (($18 | 0) < 2097152) {
      if (($18 | 0) < 1048576) {
       switch ($18 | 0) {
       case 524288:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5393
         label = 60; //@line 5394
         break L10;
        }
       }
       $$043 = 19; //@line 5398
       $$048 = $18; //@line 5398
       break;
      } else {
       switch ($18 | 0) {
       case 1048576:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5406
         label = 60; //@line 5407
         break L10;
        }
       }
       $$043 = 20; //@line 5411
       $$048 = $18; //@line 5411
       break;
      }
     } else {
      if (($18 | 0) < 4194304) {
       switch ($18 | 0) {
       case 2097152:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5422
         label = 60; //@line 5423
         break L10;
        }
       }
       $$043 = 21; //@line 5427
       $$048 = $18; //@line 5427
       break;
      } else {
       switch ($18 | 0) {
       case 4194304:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5435
         label = 60; //@line 5436
         break L10;
        }
       }
       $$043 = 22; //@line 5440
       $$048 = $18; //@line 5440
       break;
      }
     }
    }
   } else {
    if (($18 | 0) < 134217728) {
     if (($18 | 0) < 33554432) {
      if (($18 | 0) < 16777216) {
       switch ($18 | 0) {
       case 8388608:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5457
         label = 60; //@line 5458
         break L10;
        }
       }
       $$043 = 23; //@line 5462
       $$048 = $18; //@line 5462
       break;
      } else {
       switch ($18 | 0) {
       case 16777216:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5470
         label = 60; //@line 5471
         break L10;
        }
       }
       $$043 = 24; //@line 5475
       $$048 = $18; //@line 5475
       break;
      }
     } else {
      if (($18 | 0) < 67108864) {
       switch ($18 | 0) {
       case 33554432:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5486
         label = 60; //@line 5487
         break L10;
        }
       }
       $$043 = 25; //@line 5491
       $$048 = $18; //@line 5491
       break;
      } else {
       switch ($18 | 0) {
       case 67108864:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5499
         label = 60; //@line 5500
         break L10;
        }
       }
       $$043 = 26; //@line 5504
       $$048 = $18; //@line 5504
       break;
      }
     }
    } else {
     if (($18 | 0) < 536870912) {
      if (($18 | 0) < 268435456) {
       switch ($18 | 0) {
       case 134217728:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5518
         label = 60; //@line 5519
         break L10;
        }
       }
       $$043 = 27; //@line 5523
       $$048 = $18; //@line 5523
       break;
      } else {
       switch ($18 | 0) {
       case 268435456:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5531
         label = 60; //@line 5532
         break L10;
        }
       }
       $$043 = 28; //@line 5536
       $$048 = $18; //@line 5536
       break;
      }
     } else {
      if (($18 | 0) < 1073741824) {
       switch ($18 | 0) {
       case 536870912:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5547
         label = 60; //@line 5548
         break L10;
        }
       }
       $$043 = 29; //@line 5552
       $$048 = $18; //@line 5552
       break;
      } else {
       switch ($18 | 0) {
       case 1073741824:
        {
         break;
        }
       default:
        {
         $$04750525456586062646668707274767880828486889092949698100102104106108 = $18; //@line 5560
         label = 60; //@line 5561
         break L10;
        }
       }
       $$043 = 30; //@line 5565
       $$048 = $18; //@line 5565
       break;
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 60) {
  $$043 = 0; //@line 5574
  $$048 = $$04750525456586062646668707274767880828486889092949698100102104106108; //@line 5574
 }
 $24 = HEAP32[$14 + 4 >> 2] | 0; //@line 5577
 do {
  if (($24 + -4 | 0) >>> 0 > 28) {
   $AsyncCtx16 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5582
   _mbed_assert_internal(14291, 14293, 55); //@line 5583
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 621; //@line 5586
    HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 5588
    HEAP32[$AsyncCtx16 + 8 >> 2] = $0; //@line 5590
    HEAP32[$AsyncCtx16 + 12 >> 2] = $$048; //@line 5592
    HEAP8[$AsyncCtx16 + 16 >> 0] = $$043; //@line 5594
    HEAP32[$AsyncCtx16 + 20 >> 2] = $0; //@line 5596
    sp = STACKTOP; //@line 5597
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 5600
    $$044 = 32; //@line 5601
    break;
   }
  } else {
   $$044 = $24; //@line 5605
  }
 } while (0);
 $32 = 7 << $$044 + -4; //@line 5609
 $33 = ___muldi3($32 | 0, 0, 1e6, 0) | 0; //@line 5610
 $34 = tempRet0; //@line 5611
 $35 = _i64Add($$048 | 0, 0, -1, -1) | 0; //@line 5612
 $37 = _i64Add($35 | 0, tempRet0 | 0, $33 | 0, $34 | 0) | 0; //@line 5614
 $39 = ___udivdi3($37 | 0, tempRet0 | 0, $$048 | 0, 0) | 0; //@line 5616
 $40 = tempRet0; //@line 5617
 $41 = HEAP32[$1 >> 2] | 0; //@line 5618
 HEAP32[$41 >> 2] = 0; //@line 5619
 HEAP32[$41 + 4 >> 2] = 0; //@line 5621
 $45 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5624
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 5625
 $46 = FUNCTION_TABLE_i[$45 & 7]() | 0; //@line 5626
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 622; //@line 5629
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 5631
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$048; //@line 5633
  HEAP8[$AsyncCtx6 + 12 >> 0] = $$043; //@line 5635
  HEAP32[$AsyncCtx6 + 16 >> 2] = $$044; //@line 5637
  HEAP32[$AsyncCtx6 + 20 >> 2] = $32; //@line 5639
  $53 = $AsyncCtx6 + 24 | 0; //@line 5641
  HEAP32[$53 >> 2] = $39; //@line 5643
  HEAP32[$53 + 4 >> 2] = $40; //@line 5646
  HEAP32[$AsyncCtx6 + 32 >> 2] = $0; //@line 5648
  HEAP32[$AsyncCtx6 + 36 >> 2] = $0; //@line 5650
  sp = STACKTOP; //@line 5651
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5654
 $59 = HEAP32[$1 >> 2] | 0; //@line 5655
 $60 = $59 + 32 | 0; //@line 5656
 HEAP32[$60 >> 2] = $46; //@line 5657
 $61 = $59 + 40 | 0; //@line 5658
 $62 = $61; //@line 5659
 HEAP32[$62 >> 2] = 0; //@line 5661
 HEAP32[$62 + 4 >> 2] = 0; //@line 5664
 $66 = $59 + 8 | 0; //@line 5665
 HEAP32[$66 >> 2] = $$048; //@line 5666
 $67 = $59 + 57 | 0; //@line 5667
 HEAP8[$67 >> 0] = $$043; //@line 5668
 $68 = _bitshift64Shl(1, 0, $$044 | 0) | 0; //@line 5669
 $70 = _i64Add($68 | 0, tempRet0 | 0, -1, 0) | 0; //@line 5671
 $72 = $59 + 12 | 0; //@line 5673
 HEAP32[$72 >> 2] = $70; //@line 5674
 HEAP32[$59 + 16 >> 2] = $32; //@line 5676
 $75 = $59 + 24 | 0; //@line 5678
 HEAP32[$75 >> 2] = $39; //@line 5680
 HEAP32[$75 + 4 >> 2] = $40; //@line 5683
 $79 = $59 + 48 | 0; //@line 5684
 $80 = $79; //@line 5685
 HEAP32[$80 >> 2] = 0; //@line 5687
 HEAP32[$80 + 4 >> 2] = 0; //@line 5690
 HEAP8[$59 + 56 >> 0] = 1; //@line 5692
 $87 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5695
 $AsyncCtx9 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5696
 $88 = FUNCTION_TABLE_i[$87 & 7]() | 0; //@line 5697
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 623; //@line 5700
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 5702
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 5704
  HEAP32[$AsyncCtx9 + 12 >> 2] = $60; //@line 5706
  HEAP32[$AsyncCtx9 + 16 >> 2] = $72; //@line 5708
  HEAP32[$AsyncCtx9 + 20 >> 2] = $66; //@line 5710
  HEAP32[$AsyncCtx9 + 24 >> 2] = $79; //@line 5712
  HEAP32[$AsyncCtx9 + 28 >> 2] = $67; //@line 5714
  HEAP32[$AsyncCtx9 + 32 >> 2] = $61; //@line 5716
  sp = STACKTOP; //@line 5717
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 5720
 if (($88 | 0) != (HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] | 0)) {
  $104 = $88 - (HEAP32[$60 >> 2] | 0) & HEAP32[$72 >> 2]; //@line 5729
  HEAP32[$60 >> 2] = $88; //@line 5730
  $105 = HEAP32[$66 >> 2] | 0; //@line 5731
  do {
   if (($105 | 0) == 1e6) {
    $180 = $104; //@line 5735
    $181 = 0; //@line 5735
   } else {
    $107 = HEAP8[$67 >> 0] | 0; //@line 5737
    $109 = ___muldi3($104 | 0, 0, 1e6, 0) | 0; //@line 5739
    $110 = tempRet0; //@line 5740
    if (!($107 << 24 >> 24)) {
     $143 = ___udivdi3($109 | 0, $110 | 0, $105 | 0, 0) | 0; //@line 5742
     $144 = tempRet0; //@line 5743
     $145 = ___muldi3($143 | 0, $144 | 0, $105 | 0, 0) | 0; //@line 5744
     $147 = _i64Subtract($109 | 0, $110 | 0, $145 | 0, tempRet0 | 0) | 0; //@line 5746
     $149 = $61; //@line 5748
     $155 = _i64Add($147 | 0, tempRet0 | 0, HEAP32[$149 >> 2] | 0, HEAP32[$149 + 4 >> 2] | 0) | 0; //@line 5754
     $156 = tempRet0; //@line 5755
     $157 = $61; //@line 5756
     HEAP32[$157 >> 2] = $155; //@line 5758
     HEAP32[$157 + 4 >> 2] = $156; //@line 5761
     if ($156 >>> 0 < 0 | ($156 | 0) == 0 & $155 >>> 0 < $105 >>> 0) {
      $180 = $143; //@line 5768
      $181 = $144; //@line 5768
      break;
     }
     $166 = _i64Add($143 | 0, $144 | 0, 1, 0) | 0; //@line 5771
     $167 = tempRet0; //@line 5772
     $168 = _i64Subtract($155 | 0, $156 | 0, $105 | 0, 0) | 0; //@line 5773
     $170 = $61; //@line 5775
     HEAP32[$170 >> 2] = $168; //@line 5777
     HEAP32[$170 + 4 >> 2] = tempRet0; //@line 5780
     $180 = $166; //@line 5781
     $181 = $167; //@line 5781
     break;
    } else {
     $111 = $107 & 255; //@line 5784
     $112 = _bitshift64Lshr($109 | 0, $110 | 0, $111 | 0) | 0; //@line 5785
     $113 = tempRet0; //@line 5786
     $114 = _bitshift64Shl($112 | 0, $113 | 0, $111 | 0) | 0; //@line 5787
     $116 = _i64Subtract($109 | 0, $110 | 0, $114 | 0, tempRet0 | 0) | 0; //@line 5789
     $118 = $61; //@line 5791
     $124 = _i64Add(HEAP32[$118 >> 2] | 0, HEAP32[$118 + 4 >> 2] | 0, $116 | 0, tempRet0 | 0) | 0; //@line 5797
     $125 = tempRet0; //@line 5798
     $126 = $61; //@line 5799
     HEAP32[$126 >> 2] = $124; //@line 5801
     HEAP32[$126 + 4 >> 2] = $125; //@line 5804
     if ($125 >>> 0 < 0 | ($125 | 0) == 0 & $124 >>> 0 < $105 >>> 0) {
      $180 = $112; //@line 5811
      $181 = $113; //@line 5811
      break;
     }
     $135 = _i64Add($112 | 0, $113 | 0, 1, 0) | 0; //@line 5814
     $136 = tempRet0; //@line 5815
     $137 = _i64Subtract($124 | 0, $125 | 0, $105 | 0, 0) | 0; //@line 5816
     $139 = $61; //@line 5818
     HEAP32[$139 >> 2] = $137; //@line 5820
     HEAP32[$139 + 4 >> 2] = tempRet0; //@line 5823
     $180 = $135; //@line 5824
     $181 = $136; //@line 5824
     break;
    }
   }
  } while (0);
  $174 = $79; //@line 5829
  $182 = _i64Add(HEAP32[$174 >> 2] | 0, HEAP32[$174 + 4 >> 2] | 0, $180 | 0, $181 | 0) | 0; //@line 5835
  $184 = $79; //@line 5837
  HEAP32[$184 >> 2] = $182; //@line 5839
  HEAP32[$184 + 4 >> 2] = tempRet0; //@line 5842
 }
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5844
 _schedule_interrupt($0); //@line 5845
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 624; //@line 5848
  sp = STACKTOP; //@line 5849
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 5852
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre = 0, $$pre$i$i = 0, $$pre$i$i25 = 0, $$pre$i$i38 = 0, $$pre$i$i54 = 0, $$pre$i$i70 = 0, $$pre123 = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $10 = 0, $110 = 0, $111 = 0, $123 = 0, $124 = 0, $131 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $149 = 0, $150 = 0, $161 = 0, $162 = 0, $168 = 0, $169 = 0, $171 = 0, $172 = 0, $175 = 0, $185 = 0, $186 = 0, $196 = 0, $197 = 0, $2 = 0, $204 = 0, $209 = 0, $214 = 0, $23 = 0, $24 = 0, $3 = 0, $38 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $55 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $82 = 0, $83 = 0, $91 = 0, $92 = 0, $94 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx32 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx5 = 0, $AsyncCtx50 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6008
 STACKTOP = STACKTOP + 16 | 0; //@line 6009
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6009
 $2 = sp; //@line 6010
 $3 = $2 + 12 | 0; //@line 6011
 HEAP32[$2 >> 2] = 181; //@line 6012
 HEAP32[$2 + 4 >> 2] = 0; //@line 6014
 HEAP32[$2 + 8 >> 2] = $0; //@line 6016
 HEAP32[$3 >> 2] = 824; //@line 6017
 $4 = $0 + 2384 | 0; //@line 6018
 do {
  if (($4 | 0) == ($2 | 0)) {
   $38 = 824; //@line 6022
   label = 10; //@line 6023
  } else {
   $6 = $0 + 2396 | 0; //@line 6025
   $7 = HEAP32[$6 >> 2] | 0; //@line 6026
   if (!$7) {
    $23 = 824; //@line 6029
   } else {
    $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 6032
    $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 6033
    FUNCTION_TABLE_vi[$10 & 1023]($4); //@line 6034
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 182; //@line 6037
     HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6039
     HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 6041
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 6043
     HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 6045
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 6047
     HEAP32[$AsyncCtx + 24 >> 2] = $6; //@line 6049
     HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 6051
     HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 6053
     HEAP32[$AsyncCtx + 36 >> 2] = $3; //@line 6055
     HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 6057
     sp = STACKTOP; //@line 6058
     STACKTOP = sp; //@line 6059
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6061
    $$pre = HEAP32[$3 >> 2] | 0; //@line 6062
    if (!$$pre) {
     HEAP32[$6 >> 2] = 0; //@line 6065
     break;
    } else {
     $23 = $$pre; //@line 6068
    }
   }
   $24 = HEAP32[$23 + 4 >> 2] | 0; //@line 6072
   $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6073
   FUNCTION_TABLE_vii[$24 & 15]($4, $2); //@line 6074
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 183; //@line 6077
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 6079
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 6081
    HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 6083
    HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 6085
    HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 6087
    HEAP32[$AsyncCtx2 + 24 >> 2] = $2; //@line 6089
    HEAP32[$AsyncCtx2 + 28 >> 2] = $4; //@line 6091
    HEAP32[$AsyncCtx2 + 32 >> 2] = $3; //@line 6093
    HEAP32[$AsyncCtx2 + 36 >> 2] = $6; //@line 6095
    HEAP32[$AsyncCtx2 + 40 >> 2] = $2; //@line 6097
    sp = STACKTOP; //@line 6098
    STACKTOP = sp; //@line 6099
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6101
    $$pre$i$i = HEAP32[$3 >> 2] | 0; //@line 6102
    HEAP32[$6 >> 2] = $$pre$i$i; //@line 6104
    if (!$$pre$i$i) {
     break;
    } else {
     $38 = $$pre$i$i; //@line 6109
     label = 10; //@line 6110
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 10) {
   $39 = HEAP32[$38 + 8 >> 2] | 0; //@line 6119
   $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6120
   FUNCTION_TABLE_vi[$39 & 1023]($2); //@line 6121
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 184; //@line 6124
    HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 6126
    HEAP32[$AsyncCtx5 + 8 >> 2] = $0; //@line 6128
    HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 6130
    HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 6132
    HEAP32[$AsyncCtx5 + 20 >> 2] = $2; //@line 6134
    HEAP32[$AsyncCtx5 + 24 >> 2] = $2; //@line 6136
    HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 6138
    HEAP32[$AsyncCtx5 + 32 >> 2] = $2; //@line 6140
    sp = STACKTOP; //@line 6141
    STACKTOP = sp; //@line 6142
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 6144
    break;
   }
  }
 } while (0);
 $48 = $2 + 12 | 0; //@line 6149
 HEAP32[$2 >> 2] = 6; //@line 6150
 HEAP32[$2 + 4 >> 2] = 0; //@line 6152
 HEAP32[$2 + 8 >> 2] = $0; //@line 6154
 HEAP32[$48 >> 2] = 836; //@line 6155
 $49 = $0 + 2416 | 0; //@line 6156
 do {
  if (($49 | 0) == ($2 | 0)) {
   $82 = 836; //@line 6160
   label = 22; //@line 6161
  } else {
   $51 = $0 + 2428 | 0; //@line 6163
   $52 = HEAP32[$51 >> 2] | 0; //@line 6164
   if (!$52) {
    $68 = 836; //@line 6167
   } else {
    $55 = HEAP32[$52 + 8 >> 2] | 0; //@line 6170
    $AsyncCtx8 = _emscripten_alloc_async_context(44, sp) | 0; //@line 6171
    FUNCTION_TABLE_vi[$55 & 1023]($49); //@line 6172
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 185; //@line 6175
     HEAP32[$AsyncCtx8 + 4 >> 2] = $2; //@line 6177
     HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 6179
     HEAP32[$AsyncCtx8 + 12 >> 2] = $1; //@line 6181
     HEAP32[$AsyncCtx8 + 16 >> 2] = $2; //@line 6183
     HEAP32[$AsyncCtx8 + 20 >> 2] = $51; //@line 6185
     HEAP32[$AsyncCtx8 + 24 >> 2] = $49; //@line 6187
     HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 6189
     HEAP32[$AsyncCtx8 + 32 >> 2] = $48; //@line 6191
     HEAP32[$AsyncCtx8 + 36 >> 2] = $4; //@line 6193
     HEAP32[$AsyncCtx8 + 40 >> 2] = $2; //@line 6195
     sp = STACKTOP; //@line 6196
     STACKTOP = sp; //@line 6197
     return;
    }
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 6199
    $$pre123 = HEAP32[$48 >> 2] | 0; //@line 6200
    if (!$$pre123) {
     HEAP32[$51 >> 2] = 0; //@line 6203
     break;
    } else {
     $68 = $$pre123; //@line 6206
    }
   }
   $69 = HEAP32[$68 + 4 >> 2] | 0; //@line 6210
   $AsyncCtx11 = _emscripten_alloc_async_context(40, sp) | 0; //@line 6211
   FUNCTION_TABLE_vii[$69 & 15]($49, $2); //@line 6212
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 186; //@line 6215
    HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 6217
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 6219
    HEAP32[$AsyncCtx11 + 12 >> 2] = $1; //@line 6221
    HEAP32[$AsyncCtx11 + 16 >> 2] = $2; //@line 6223
    HEAP32[$AsyncCtx11 + 20 >> 2] = $48; //@line 6225
    HEAP32[$AsyncCtx11 + 24 >> 2] = $51; //@line 6227
    HEAP32[$AsyncCtx11 + 28 >> 2] = $4; //@line 6229
    HEAP32[$AsyncCtx11 + 32 >> 2] = $2; //@line 6231
    HEAP32[$AsyncCtx11 + 36 >> 2] = $2; //@line 6233
    sp = STACKTOP; //@line 6234
    STACKTOP = sp; //@line 6235
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6237
    $$pre$i$i25 = HEAP32[$48 >> 2] | 0; //@line 6238
    HEAP32[$51 >> 2] = $$pre$i$i25; //@line 6240
    if (!$$pre$i$i25) {
     break;
    } else {
     $82 = $$pre$i$i25; //@line 6245
     label = 22; //@line 6246
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 22) {
   $83 = HEAP32[$82 + 8 >> 2] | 0; //@line 6255
   $AsyncCtx14 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6256
   FUNCTION_TABLE_vi[$83 & 1023]($2); //@line 6257
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 187; //@line 6260
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 6262
    HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 6264
    HEAP32[$AsyncCtx14 + 12 >> 2] = $1; //@line 6266
    HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 6268
    HEAP32[$AsyncCtx14 + 20 >> 2] = $4; //@line 6270
    HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 6272
    HEAP32[$AsyncCtx14 + 28 >> 2] = $2; //@line 6274
    sp = STACKTOP; //@line 6275
    STACKTOP = sp; //@line 6276
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 6278
    break;
   }
  }
 } while (0);
 $91 = $2 + 12 | 0; //@line 6283
 HEAP32[$2 >> 2] = 188; //@line 6284
 HEAP32[$2 + 4 >> 2] = 0; //@line 6286
 HEAP32[$2 + 8 >> 2] = $0; //@line 6288
 HEAP32[$91 >> 2] = 824; //@line 6289
 $92 = $0 + 2448 | 0; //@line 6290
 do {
  if (($92 | 0) == ($2 | 0)) {
   $123 = 824; //@line 6294
   label = 34; //@line 6295
  } else {
   $94 = $0 + 2460 | 0; //@line 6297
   $95 = HEAP32[$94 >> 2] | 0; //@line 6298
   if (!$95) {
    $110 = 824; //@line 6301
   } else {
    $98 = HEAP32[$95 + 8 >> 2] | 0; //@line 6304
    $AsyncCtx17 = _emscripten_alloc_async_context(40, sp) | 0; //@line 6305
    FUNCTION_TABLE_vi[$98 & 1023]($92); //@line 6306
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 189; //@line 6309
     HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 6311
     HEAP32[$AsyncCtx17 + 8 >> 2] = $2; //@line 6313
     HEAP32[$AsyncCtx17 + 12 >> 2] = $0; //@line 6315
     HEAP32[$AsyncCtx17 + 16 >> 2] = $91; //@line 6317
     HEAP32[$AsyncCtx17 + 20 >> 2] = $94; //@line 6319
     HEAP32[$AsyncCtx17 + 24 >> 2] = $1; //@line 6321
     HEAP32[$AsyncCtx17 + 28 >> 2] = $2; //@line 6323
     HEAP32[$AsyncCtx17 + 32 >> 2] = $4; //@line 6325
     HEAP32[$AsyncCtx17 + 36 >> 2] = $92; //@line 6327
     sp = STACKTOP; //@line 6328
     STACKTOP = sp; //@line 6329
     return;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6331
    $$pre124 = HEAP32[$91 >> 2] | 0; //@line 6332
    if (!$$pre124) {
     HEAP32[$94 >> 2] = 0; //@line 6335
     break;
    } else {
     $110 = $$pre124; //@line 6338
    }
   }
   $111 = HEAP32[$110 + 4 >> 2] | 0; //@line 6342
   $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6343
   FUNCTION_TABLE_vii[$111 & 15]($92, $2); //@line 6344
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 190; //@line 6347
    HEAP32[$AsyncCtx20 + 4 >> 2] = $2; //@line 6349
    HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 6351
    HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 6353
    HEAP32[$AsyncCtx20 + 16 >> 2] = $91; //@line 6355
    HEAP32[$AsyncCtx20 + 20 >> 2] = $94; //@line 6357
    HEAP32[$AsyncCtx20 + 24 >> 2] = $1; //@line 6359
    HEAP32[$AsyncCtx20 + 28 >> 2] = $2; //@line 6361
    HEAP32[$AsyncCtx20 + 32 >> 2] = $4; //@line 6363
    sp = STACKTOP; //@line 6364
    STACKTOP = sp; //@line 6365
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 6367
    $$pre$i$i38 = HEAP32[$91 >> 2] | 0; //@line 6368
    HEAP32[$94 >> 2] = $$pre$i$i38; //@line 6370
    if (!$$pre$i$i38) {
     break;
    } else {
     $123 = $$pre$i$i38; //@line 6375
     label = 34; //@line 6376
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 34) {
   $124 = HEAP32[$123 + 8 >> 2] | 0; //@line 6385
   $AsyncCtx23 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6386
   FUNCTION_TABLE_vi[$124 & 1023]($2); //@line 6387
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 191; //@line 6390
    HEAP32[$AsyncCtx23 + 4 >> 2] = $2; //@line 6392
    HEAP32[$AsyncCtx23 + 8 >> 2] = $2; //@line 6394
    HEAP32[$AsyncCtx23 + 12 >> 2] = $0; //@line 6396
    HEAP32[$AsyncCtx23 + 16 >> 2] = $1; //@line 6398
    HEAP32[$AsyncCtx23 + 20 >> 2] = $2; //@line 6400
    HEAP32[$AsyncCtx23 + 24 >> 2] = $4; //@line 6402
    sp = STACKTOP; //@line 6403
    STACKTOP = sp; //@line 6404
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6406
    break;
   }
  }
 } while (0);
 $131 = $2 + 12 | 0; //@line 6411
 HEAP32[$2 >> 2] = 192; //@line 6412
 HEAP32[$2 + 4 >> 2] = 0; //@line 6414
 HEAP32[$2 + 8 >> 2] = $0; //@line 6416
 HEAP32[$131 >> 2] = 824; //@line 6417
 $132 = $0 + 2400 | 0; //@line 6418
 do {
  if (($132 | 0) == ($2 | 0)) {
   $161 = 824; //@line 6422
   label = 46; //@line 6423
  } else {
   $134 = $0 + 2412 | 0; //@line 6425
   $135 = HEAP32[$134 >> 2] | 0; //@line 6426
   if (!$135) {
    $149 = 824; //@line 6429
   } else {
    $138 = HEAP32[$135 + 8 >> 2] | 0; //@line 6432
    $AsyncCtx26 = _emscripten_alloc_async_context(36, sp) | 0; //@line 6433
    FUNCTION_TABLE_vi[$138 & 1023]($132); //@line 6434
    if (___async) {
     HEAP32[$AsyncCtx26 >> 2] = 193; //@line 6437
     HEAP32[$AsyncCtx26 + 4 >> 2] = $134; //@line 6439
     HEAP32[$AsyncCtx26 + 8 >> 2] = $132; //@line 6441
     HEAP32[$AsyncCtx26 + 12 >> 2] = $2; //@line 6443
     HEAP32[$AsyncCtx26 + 16 >> 2] = $131; //@line 6445
     HEAP32[$AsyncCtx26 + 20 >> 2] = $1; //@line 6447
     HEAP32[$AsyncCtx26 + 24 >> 2] = $2; //@line 6449
     HEAP32[$AsyncCtx26 + 28 >> 2] = $0; //@line 6451
     HEAP32[$AsyncCtx26 + 32 >> 2] = $4; //@line 6453
     sp = STACKTOP; //@line 6454
     STACKTOP = sp; //@line 6455
     return;
    }
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 6457
    $$pre125 = HEAP32[$131 >> 2] | 0; //@line 6458
    if (!$$pre125) {
     HEAP32[$134 >> 2] = 0; //@line 6461
     break;
    } else {
     $149 = $$pre125; //@line 6464
    }
   }
   $150 = HEAP32[$149 + 4 >> 2] | 0; //@line 6468
   $AsyncCtx29 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6469
   FUNCTION_TABLE_vii[$150 & 15]($132, $2); //@line 6470
   if (___async) {
    HEAP32[$AsyncCtx29 >> 2] = 194; //@line 6473
    HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 6475
    HEAP32[$AsyncCtx29 + 8 >> 2] = $2; //@line 6477
    HEAP32[$AsyncCtx29 + 12 >> 2] = $2; //@line 6479
    HEAP32[$AsyncCtx29 + 16 >> 2] = $0; //@line 6481
    HEAP32[$AsyncCtx29 + 20 >> 2] = $131; //@line 6483
    HEAP32[$AsyncCtx29 + 24 >> 2] = $134; //@line 6485
    HEAP32[$AsyncCtx29 + 28 >> 2] = $4; //@line 6487
    sp = STACKTOP; //@line 6488
    STACKTOP = sp; //@line 6489
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx29 | 0); //@line 6491
    $$pre$i$i54 = HEAP32[$131 >> 2] | 0; //@line 6492
    HEAP32[$134 >> 2] = $$pre$i$i54; //@line 6494
    if (!$$pre$i$i54) {
     break;
    } else {
     $161 = $$pre$i$i54; //@line 6499
     label = 46; //@line 6500
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 46) {
   $162 = HEAP32[$161 + 8 >> 2] | 0; //@line 6509
   $AsyncCtx32 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6510
   FUNCTION_TABLE_vi[$162 & 1023]($2); //@line 6511
   if (___async) {
    HEAP32[$AsyncCtx32 >> 2] = 195; //@line 6514
    HEAP32[$AsyncCtx32 + 4 >> 2] = $1; //@line 6516
    HEAP32[$AsyncCtx32 + 8 >> 2] = $2; //@line 6518
    HEAP32[$AsyncCtx32 + 12 >> 2] = $2; //@line 6520
    HEAP32[$AsyncCtx32 + 16 >> 2] = $0; //@line 6522
    HEAP32[$AsyncCtx32 + 20 >> 2] = $4; //@line 6524
    sp = STACKTOP; //@line 6525
    STACKTOP = sp; //@line 6526
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx32 | 0); //@line 6528
    break;
   }
  }
 } while (0);
 $168 = $2 + 12 | 0; //@line 6533
 HEAP32[$2 >> 2] = 196; //@line 6534
 HEAP32[$2 + 4 >> 2] = 0; //@line 6536
 HEAP32[$2 + 8 >> 2] = $0; //@line 6538
 HEAP32[$168 >> 2] = 824; //@line 6539
 $169 = $0 + 2432 | 0; //@line 6540
 do {
  if (($169 | 0) == ($2 | 0)) {
   $196 = 824; //@line 6544
   label = 58; //@line 6545
  } else {
   $171 = $0 + 2444 | 0; //@line 6547
   $172 = HEAP32[$171 >> 2] | 0; //@line 6548
   if (!$172) {
    $185 = 824; //@line 6551
   } else {
    $175 = HEAP32[$172 + 8 >> 2] | 0; //@line 6554
    $AsyncCtx35 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6555
    FUNCTION_TABLE_vi[$175 & 1023]($169); //@line 6556
    if (___async) {
     HEAP32[$AsyncCtx35 >> 2] = 197; //@line 6559
     HEAP32[$AsyncCtx35 + 4 >> 2] = $168; //@line 6561
     HEAP32[$AsyncCtx35 + 8 >> 2] = $171; //@line 6563
     HEAP32[$AsyncCtx35 + 12 >> 2] = $169; //@line 6565
     HEAP32[$AsyncCtx35 + 16 >> 2] = $2; //@line 6567
     HEAP32[$AsyncCtx35 + 20 >> 2] = $0; //@line 6569
     HEAP32[$AsyncCtx35 + 24 >> 2] = $1; //@line 6571
     HEAP32[$AsyncCtx35 + 28 >> 2] = $4; //@line 6573
     sp = STACKTOP; //@line 6574
     STACKTOP = sp; //@line 6575
     return;
    }
    _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6577
    $$pre126 = HEAP32[$168 >> 2] | 0; //@line 6578
    if (!$$pre126) {
     HEAP32[$171 >> 2] = 0; //@line 6581
     break;
    } else {
     $185 = $$pre126; //@line 6584
    }
   }
   $186 = HEAP32[$185 + 4 >> 2] | 0; //@line 6588
   $AsyncCtx38 = _emscripten_alloc_async_context(28, sp) | 0; //@line 6589
   FUNCTION_TABLE_vii[$186 & 15]($169, $2); //@line 6590
   if (___async) {
    HEAP32[$AsyncCtx38 >> 2] = 198; //@line 6593
    HEAP32[$AsyncCtx38 + 4 >> 2] = $168; //@line 6595
    HEAP32[$AsyncCtx38 + 8 >> 2] = $171; //@line 6597
    HEAP32[$AsyncCtx38 + 12 >> 2] = $2; //@line 6599
    HEAP32[$AsyncCtx38 + 16 >> 2] = $0; //@line 6601
    HEAP32[$AsyncCtx38 + 20 >> 2] = $1; //@line 6603
    HEAP32[$AsyncCtx38 + 24 >> 2] = $4; //@line 6605
    sp = STACKTOP; //@line 6606
    STACKTOP = sp; //@line 6607
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx38 | 0); //@line 6609
    $$pre$i$i70 = HEAP32[$168 >> 2] | 0; //@line 6610
    HEAP32[$171 >> 2] = $$pre$i$i70; //@line 6612
    if (!$$pre$i$i70) {
     break;
    } else {
     $196 = $$pre$i$i70; //@line 6617
     label = 58; //@line 6618
     break;
    }
   }
  }
 } while (0);
 do {
  if ((label | 0) == 58) {
   $197 = HEAP32[$196 + 8 >> 2] | 0; //@line 6627
   $AsyncCtx41 = _emscripten_alloc_async_context(20, sp) | 0; //@line 6628
   FUNCTION_TABLE_vi[$197 & 1023]($2); //@line 6629
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 199; //@line 6632
    HEAP32[$AsyncCtx41 + 4 >> 2] = $2; //@line 6634
    HEAP32[$AsyncCtx41 + 8 >> 2] = $0; //@line 6636
    HEAP32[$AsyncCtx41 + 12 >> 2] = $1; //@line 6638
    HEAP32[$AsyncCtx41 + 16 >> 2] = $4; //@line 6640
    sp = STACKTOP; //@line 6641
    STACKTOP = sp; //@line 6642
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx41 | 0); //@line 6644
    break;
   }
  }
 } while (0);
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1); //@line 6649
 $204 = HEAP32[(HEAP32[$1 >> 2] | 0) + 72 >> 2] | 0; //@line 6652
 $AsyncCtx44 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6653
 FUNCTION_TABLE_vi[$204 & 1023]($1); //@line 6654
 if (___async) {
  HEAP32[$AsyncCtx44 >> 2] = 200; //@line 6657
  HEAP32[$AsyncCtx44 + 4 >> 2] = $1; //@line 6659
  HEAP32[$AsyncCtx44 + 8 >> 2] = $4; //@line 6661
  HEAP32[$AsyncCtx44 + 12 >> 2] = $1; //@line 6663
  sp = STACKTOP; //@line 6664
  STACKTOP = sp; //@line 6665
  return;
 }
 _emscripten_free_async_context($AsyncCtx44 | 0); //@line 6667
 $209 = HEAP32[HEAP32[$1 >> 2] >> 2] | 0; //@line 6669
 $AsyncCtx47 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6670
 FUNCTION_TABLE_vii[$209 & 15]($1, $4); //@line 6671
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 201; //@line 6674
  HEAP32[$AsyncCtx47 + 4 >> 2] = $1; //@line 6676
  HEAP32[$AsyncCtx47 + 8 >> 2] = $1; //@line 6678
  sp = STACKTOP; //@line 6679
  STACKTOP = sp; //@line 6680
  return;
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6682
 $214 = HEAP32[(HEAP32[$1 >> 2] | 0) + 76 >> 2] | 0; //@line 6685
 $AsyncCtx50 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6686
 FUNCTION_TABLE_vi[$214 & 1023]($1); //@line 6687
 if (___async) {
  HEAP32[$AsyncCtx50 >> 2] = 202; //@line 6690
  sp = STACKTOP; //@line 6691
  STACKTOP = sp; //@line 6692
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx50 | 0); //@line 6694
  STACKTOP = sp; //@line 6695
  return;
 }
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 33193
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33195
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33199
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33201
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33203
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33205
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 33207
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33209
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33211
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 33213
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33215
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 33217
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 33219
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 33221
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 33223
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 33225
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 33227
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 33229
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 33231
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 33233
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 33235
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 33239
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 33241
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 33243
 HEAP32[178] = (HEAP32[178] | 0) + 1; //@line 33246
 $53 = HEAP32[167] | 0; //@line 33247
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 33251
   do {
    if ($14 << 24 >> 24 > -1 & ($12 | 0) != 0) {
     $57 = HEAP32[164] | 0; //@line 33257
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $12) | 0) {
       $$0$i = 1; //@line 33264
       break;
      }
     }
     $62 = HEAP32[165] | 0; //@line 33268
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 33272
     } else {
      if (!(_strstr($62, $12) | 0)) {
       $$0$i = 1; //@line 33277
      } else {
       label = 9; //@line 33279
      }
     }
    } else {
     label = 9; //@line 33283
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 33287
   }
   if (!((HEAP32[174] | 0) != 0 & ((($12 | 0) == 0 | (($10 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[171] = HEAP32[169]; //@line 33299
    break;
   }
   $73 = HEAPU8[652] | 0; //@line 33303
   $74 = $14 & 255; //@line 33304
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 33309
    $$lobit = $78 >>> 6; //@line 33310
    $79 = $$lobit & 255; //@line 33311
    $83 = ($73 & 32 | 0) == 0; //@line 33315
    $84 = HEAP32[168] | 0; //@line 33316
    $85 = HEAP32[167] | 0; //@line 33317
    $86 = $14 << 24 >> 24 == 1; //@line 33318
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 33321
     _vsnprintf($85, $84, $10, $24) | 0; //@line 33322
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 142; //@line 33325
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 33326
      $$expand_i1_val = $86 & 1; //@line 33327
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 33328
      sp = STACKTOP; //@line 33329
      return;
     }
     ___async_unwind = 0; //@line 33332
     HEAP32[$ReallocAsyncCtx12 >> 2] = 142; //@line 33333
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 33334
     $$expand_i1_val = $86 & 1; //@line 33335
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 33336
     sp = STACKTOP; //@line 33337
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 33343
     $$1143 = $85; //@line 33343
     $$1145 = $84; //@line 33343
     $$3154 = 0; //@line 33343
     label = 28; //@line 33344
    } else {
     if ($83) {
      $$0142 = $85; //@line 33347
      $$0144 = $84; //@line 33347
     } else {
      $89 = _snprintf($85, $84, 11768, $2) | 0; //@line 33349
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 33351
      $91 = ($$ | 0) > 0; //@line 33352
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 33357
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 33357
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 33361
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 11786; //@line 33367
        label = 25; //@line 33368
        break;
       }
      case 1:
       {
        $$sink = 11792; //@line 33372
        label = 25; //@line 33373
        break;
       }
      case 3:
       {
        $$sink = 11780; //@line 33377
        label = 25; //@line 33378
        break;
       }
      case 7:
       {
        $$sink = 11774; //@line 33382
        label = 25; //@line 33383
        break;
       }
      default:
       {
        $$0141 = 0; //@line 33387
        $$1152 = 0; //@line 33387
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$42 >> 2] = $$sink; //@line 33391
       $$0141 = $79 & 1; //@line 33394
       $$1152 = _snprintf($$0142, $$0144, 11798, $42) | 0; //@line 33394
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 33397
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 33399
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 33401
       $$1$off0 = $extract$t159; //@line 33406
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 33406
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 33406
       $$3154 = $$1152; //@line 33406
       label = 28; //@line 33407
      } else {
       $$1$off0 = $extract$t159; //@line 33409
       $$1143 = $$0142; //@line 33409
       $$1145 = $$0144; //@line 33409
       $$3154 = $$1152$; //@line 33409
       label = 28; //@line 33410
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[172] | 0) != 0) {
      HEAP32[$46 >> 2] = HEAP32[$24 >> 2]; //@line 33421
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 33422
      $108 = _vsnprintf(0, 0, $10, $46) | 0; //@line 33423
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 146; //@line 33426
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 33427
       HEAP32[$109 >> 2] = $6; //@line 33428
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 33429
       HEAP32[$110 >> 2] = $8; //@line 33430
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 33431
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 33432
       HEAP8[$111 >> 0] = $$1$off0$expand_i1_val; //@line 33433
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 33434
       HEAP32[$112 >> 2] = $16; //@line 33435
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 33436
       HEAP32[$113 >> 2] = $18; //@line 33437
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 33438
       HEAP32[$114 >> 2] = $20; //@line 33439
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 33440
       HEAP32[$115 >> 2] = $$1143; //@line 33441
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 33442
       HEAP32[$116 >> 2] = $$1145; //@line 33443
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 33444
       HEAP32[$117 >> 2] = $22; //@line 33445
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 33446
       HEAP32[$118 >> 2] = $46; //@line 33447
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 33448
       HEAP32[$119 >> 2] = $26; //@line 33449
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 33450
       HEAP32[$120 >> 2] = $12; //@line 33451
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 33452
       HEAP32[$121 >> 2] = $28; //@line 33453
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 33454
       HEAP32[$122 >> 2] = $30; //@line 33455
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 33456
       HEAP32[$123 >> 2] = $32; //@line 33457
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 33458
       HEAP32[$124 >> 2] = $34; //@line 33459
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 33460
       HEAP32[$125 >> 2] = $36; //@line 33461
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 33462
       HEAP32[$126 >> 2] = $38; //@line 33463
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 33464
       HEAP32[$127 >> 2] = $40; //@line 33465
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 33466
       HEAP32[$128 >> 2] = $10; //@line 33467
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 33468
       HEAP32[$129 >> 2] = $24; //@line 33469
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 33470
       HEAP32[$130 >> 2] = $48; //@line 33471
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 33472
       HEAP32[$131 >> 2] = $50; //@line 33473
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 33474
       HEAP32[$132 >> 2] = $74; //@line 33475
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 33476
       HEAP32[$133 >> 2] = $$3154; //@line 33477
       sp = STACKTOP; //@line 33478
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 33482
      ___async_unwind = 0; //@line 33483
      HEAP32[$ReallocAsyncCtx11 >> 2] = 146; //@line 33484
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 33485
      HEAP32[$109 >> 2] = $6; //@line 33486
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 33487
      HEAP32[$110 >> 2] = $8; //@line 33488
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 33489
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 33490
      HEAP8[$111 >> 0] = $$1$off0$expand_i1_val; //@line 33491
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 33492
      HEAP32[$112 >> 2] = $16; //@line 33493
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 33494
      HEAP32[$113 >> 2] = $18; //@line 33495
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 33496
      HEAP32[$114 >> 2] = $20; //@line 33497
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 33498
      HEAP32[$115 >> 2] = $$1143; //@line 33499
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 33500
      HEAP32[$116 >> 2] = $$1145; //@line 33501
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 33502
      HEAP32[$117 >> 2] = $22; //@line 33503
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 33504
      HEAP32[$118 >> 2] = $46; //@line 33505
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 33506
      HEAP32[$119 >> 2] = $26; //@line 33507
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 33508
      HEAP32[$120 >> 2] = $12; //@line 33509
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 33510
      HEAP32[$121 >> 2] = $28; //@line 33511
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 33512
      HEAP32[$122 >> 2] = $30; //@line 33513
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 33514
      HEAP32[$123 >> 2] = $32; //@line 33515
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 33516
      HEAP32[$124 >> 2] = $34; //@line 33517
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 33518
      HEAP32[$125 >> 2] = $36; //@line 33519
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 33520
      HEAP32[$126 >> 2] = $38; //@line 33521
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 33522
      HEAP32[$127 >> 2] = $40; //@line 33523
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 33524
      HEAP32[$128 >> 2] = $10; //@line 33525
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 33526
      HEAP32[$129 >> 2] = $24; //@line 33527
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 33528
      HEAP32[$130 >> 2] = $48; //@line 33529
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 33530
      HEAP32[$131 >> 2] = $50; //@line 33531
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 33532
      HEAP32[$132 >> 2] = $74; //@line 33533
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 33534
      HEAP32[$133 >> 2] = $$3154; //@line 33535
      sp = STACKTOP; //@line 33536
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 33541
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$48 >> 2] = $12; //@line 33547
        $$5156 = _snprintf($$1143, $$1145, 11801, $48) | 0; //@line 33549
        break;
       }
      case 1:
       {
        HEAP32[$30 >> 2] = $12; //@line 33553
        $$5156 = _snprintf($$1143, $$1145, 11816, $30) | 0; //@line 33555
        break;
       }
      case 3:
       {
        HEAP32[$26 >> 2] = $12; //@line 33559
        $$5156 = _snprintf($$1143, $$1145, 11831, $26) | 0; //@line 33561
        break;
       }
      case 7:
       {
        HEAP32[$38 >> 2] = $12; //@line 33565
        $$5156 = _snprintf($$1143, $$1145, 11846, $38) | 0; //@line 33567
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 11861, $34) | 0; //@line 33572
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 33576
      $147 = $$1143 + $$5156$ | 0; //@line 33578
      $148 = $$1145 - $$5156$ | 0; //@line 33579
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 33583
       $150 = _vsnprintf($147, $148, $10, $24) | 0; //@line 33584
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 33587
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 33588
        HEAP32[$151 >> 2] = $148; //@line 33589
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 33590
        HEAP32[$152 >> 2] = $147; //@line 33591
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 33592
        HEAP32[$153 >> 2] = $6; //@line 33593
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 33594
        HEAP32[$154 >> 2] = $8; //@line 33595
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 33596
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 33597
        HEAP8[$155 >> 0] = $$1$off0$expand_i1_val18; //@line 33598
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 33599
        HEAP32[$156 >> 2] = $16; //@line 33600
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 33601
        HEAP32[$157 >> 2] = $18; //@line 33602
        sp = STACKTOP; //@line 33603
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 33607
       ___async_unwind = 0; //@line 33608
       HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 33609
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 33610
       HEAP32[$151 >> 2] = $148; //@line 33611
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 33612
       HEAP32[$152 >> 2] = $147; //@line 33613
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 33614
       HEAP32[$153 >> 2] = $6; //@line 33615
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 33616
       HEAP32[$154 >> 2] = $8; //@line 33617
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 33618
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 33619
       HEAP8[$155 >> 0] = $$1$off0$expand_i1_val18; //@line 33620
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 33621
       HEAP32[$156 >> 2] = $16; //@line 33622
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 33623
       HEAP32[$157 >> 2] = $18; //@line 33624
       sp = STACKTOP; //@line 33625
       return;
      }
     }
    }
    $159 = HEAP32[174] | 0; //@line 33630
    $160 = HEAP32[167] | 0; //@line 33631
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 33632
    FUNCTION_TABLE_vi[$159 & 1023]($160); //@line 33633
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 33636
     sp = STACKTOP; //@line 33637
     return;
    }
    ___async_unwind = 0; //@line 33640
    HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 33641
    sp = STACKTOP; //@line 33642
    return;
   }
  }
 } while (0);
 $161 = HEAP32[177] | 0; //@line 33647
 if (!$161) {
  return;
 }
 $163 = HEAP32[178] | 0; //@line 33652
 HEAP32[178] = 0; //@line 33653
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 33654
 FUNCTION_TABLE_v[$161 & 15](); //@line 33655
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 33658
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 33659
  HEAP32[$164 >> 2] = $163; //@line 33660
  sp = STACKTOP; //@line 33661
  return;
 }
 ___async_unwind = 0; //@line 33664
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 33665
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 33666
 HEAP32[$164 >> 2] = $163; //@line 33667
 sp = STACKTOP; //@line 33668
 return;
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 10565
 $3 = HEAP32[5932] | 0; //@line 10566
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 10569
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 10573
 $7 = $6 & 3; //@line 10574
 if (($7 | 0) == 1) {
  _abort(); //@line 10577
 }
 $9 = $6 & -8; //@line 10580
 $10 = $2 + $9 | 0; //@line 10581
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 10586
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 10592
   $17 = $13 + $9 | 0; //@line 10593
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 10596
   }
   if ((HEAP32[5933] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 10602
    $106 = HEAP32[$105 >> 2] | 0; //@line 10603
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 10607
     $$1382 = $17; //@line 10607
     $114 = $16; //@line 10607
     break;
    }
    HEAP32[5930] = $17; //@line 10610
    HEAP32[$105 >> 2] = $106 & -2; //@line 10612
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 10615
    HEAP32[$16 + $17 >> 2] = $17; //@line 10617
    return;
   }
   $21 = $13 >>> 3; //@line 10620
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 10624
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 10626
    $28 = 23752 + ($21 << 1 << 2) | 0; //@line 10628
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 10633
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10640
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[5928] = HEAP32[5928] & ~(1 << $21); //@line 10650
     $$1 = $16; //@line 10651
     $$1382 = $17; //@line 10651
     $114 = $16; //@line 10651
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 10657
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 10661
     }
     $41 = $26 + 8 | 0; //@line 10664
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 10668
     } else {
      _abort(); //@line 10670
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 10675
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 10676
    $$1 = $16; //@line 10677
    $$1382 = $17; //@line 10677
    $114 = $16; //@line 10677
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 10681
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 10683
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 10687
     $60 = $59 + 4 | 0; //@line 10688
     $61 = HEAP32[$60 >> 2] | 0; //@line 10689
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 10692
      if (!$63) {
       $$3 = 0; //@line 10695
       break;
      } else {
       $$1387 = $63; //@line 10698
       $$1390 = $59; //@line 10698
      }
     } else {
      $$1387 = $61; //@line 10701
      $$1390 = $60; //@line 10701
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 10704
      $66 = HEAP32[$65 >> 2] | 0; //@line 10705
      if ($66 | 0) {
       $$1387 = $66; //@line 10708
       $$1390 = $65; //@line 10708
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 10711
      $69 = HEAP32[$68 >> 2] | 0; //@line 10712
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 10717
       $$1390 = $68; //@line 10717
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 10722
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 10725
      $$3 = $$1387; //@line 10726
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 10731
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 10734
     }
     $53 = $51 + 12 | 0; //@line 10737
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 10741
     }
     $56 = $48 + 8 | 0; //@line 10744
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 10748
      HEAP32[$56 >> 2] = $51; //@line 10749
      $$3 = $48; //@line 10750
      break;
     } else {
      _abort(); //@line 10753
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 10760
    $$1382 = $17; //@line 10760
    $114 = $16; //@line 10760
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 10763
    $75 = 24016 + ($74 << 2) | 0; //@line 10764
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 10769
      if (!$$3) {
       HEAP32[5929] = HEAP32[5929] & ~(1 << $74); //@line 10776
       $$1 = $16; //@line 10777
       $$1382 = $17; //@line 10777
       $114 = $16; //@line 10777
       break L10;
      }
     } else {
      if ((HEAP32[5932] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 10784
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 10792
       if (!$$3) {
        $$1 = $16; //@line 10795
        $$1382 = $17; //@line 10795
        $114 = $16; //@line 10795
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[5932] | 0; //@line 10803
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 10806
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 10810
    $92 = $16 + 16 | 0; //@line 10811
    $93 = HEAP32[$92 >> 2] | 0; //@line 10812
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 10818
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 10822
       HEAP32[$93 + 24 >> 2] = $$3; //@line 10824
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 10830
    if (!$99) {
     $$1 = $16; //@line 10833
     $$1382 = $17; //@line 10833
     $114 = $16; //@line 10833
    } else {
     if ((HEAP32[5932] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 10838
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 10842
      HEAP32[$99 + 24 >> 2] = $$3; //@line 10844
      $$1 = $16; //@line 10845
      $$1382 = $17; //@line 10845
      $114 = $16; //@line 10845
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 10851
   $$1382 = $9; //@line 10851
   $114 = $2; //@line 10851
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 10856
 }
 $115 = $10 + 4 | 0; //@line 10859
 $116 = HEAP32[$115 >> 2] | 0; //@line 10860
 if (!($116 & 1)) {
  _abort(); //@line 10864
 }
 if (!($116 & 2)) {
  if ((HEAP32[5934] | 0) == ($10 | 0)) {
   $124 = (HEAP32[5931] | 0) + $$1382 | 0; //@line 10874
   HEAP32[5931] = $124; //@line 10875
   HEAP32[5934] = $$1; //@line 10876
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 10879
   if (($$1 | 0) != (HEAP32[5933] | 0)) {
    return;
   }
   HEAP32[5933] = 0; //@line 10885
   HEAP32[5930] = 0; //@line 10886
   return;
  }
  if ((HEAP32[5933] | 0) == ($10 | 0)) {
   $132 = (HEAP32[5930] | 0) + $$1382 | 0; //@line 10893
   HEAP32[5930] = $132; //@line 10894
   HEAP32[5933] = $114; //@line 10895
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 10898
   HEAP32[$114 + $132 >> 2] = $132; //@line 10900
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 10904
  $138 = $116 >>> 3; //@line 10905
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 10910
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 10912
    $145 = 23752 + ($138 << 1 << 2) | 0; //@line 10914
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[5932] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 10920
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 10927
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[5928] = HEAP32[5928] & ~(1 << $138); //@line 10937
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 10943
    } else {
     if ((HEAP32[5932] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 10948
     }
     $160 = $143 + 8 | 0; //@line 10951
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 10955
     } else {
      _abort(); //@line 10957
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 10962
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 10963
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 10966
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 10968
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 10972
      $180 = $179 + 4 | 0; //@line 10973
      $181 = HEAP32[$180 >> 2] | 0; //@line 10974
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 10977
       if (!$183) {
        $$3400 = 0; //@line 10980
        break;
       } else {
        $$1398 = $183; //@line 10983
        $$1402 = $179; //@line 10983
       }
      } else {
       $$1398 = $181; //@line 10986
       $$1402 = $180; //@line 10986
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 10989
       $186 = HEAP32[$185 >> 2] | 0; //@line 10990
       if ($186 | 0) {
        $$1398 = $186; //@line 10993
        $$1402 = $185; //@line 10993
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 10996
       $189 = HEAP32[$188 >> 2] | 0; //@line 10997
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 11002
        $$1402 = $188; //@line 11002
       }
      }
      if ((HEAP32[5932] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 11008
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 11011
       $$3400 = $$1398; //@line 11012
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 11017
      if ((HEAP32[5932] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 11021
      }
      $173 = $170 + 12 | 0; //@line 11024
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 11028
      }
      $176 = $167 + 8 | 0; //@line 11031
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 11035
       HEAP32[$176 >> 2] = $170; //@line 11036
       $$3400 = $167; //@line 11037
       break;
      } else {
       _abort(); //@line 11040
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 11048
     $196 = 24016 + ($195 << 2) | 0; //@line 11049
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 11054
       if (!$$3400) {
        HEAP32[5929] = HEAP32[5929] & ~(1 << $195); //@line 11061
        break L108;
       }
      } else {
       if ((HEAP32[5932] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 11068
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 11076
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[5932] | 0; //@line 11086
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 11089
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 11093
     $213 = $10 + 16 | 0; //@line 11094
     $214 = HEAP32[$213 >> 2] | 0; //@line 11095
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 11101
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 11105
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 11107
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 11113
     if ($220 | 0) {
      if ((HEAP32[5932] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 11119
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 11123
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 11125
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 11134
  HEAP32[$114 + $137 >> 2] = $137; //@line 11136
  if (($$1 | 0) == (HEAP32[5933] | 0)) {
   HEAP32[5930] = $137; //@line 11140
   return;
  } else {
   $$2 = $137; //@line 11143
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 11147
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 11150
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 11152
  $$2 = $$1382; //@line 11153
 }
 $235 = $$2 >>> 3; //@line 11155
 if ($$2 >>> 0 < 256) {
  $238 = 23752 + ($235 << 1 << 2) | 0; //@line 11159
  $239 = HEAP32[5928] | 0; //@line 11160
  $240 = 1 << $235; //@line 11161
  if (!($239 & $240)) {
   HEAP32[5928] = $239 | $240; //@line 11166
   $$0403 = $238; //@line 11168
   $$pre$phiZ2D = $238 + 8 | 0; //@line 11168
  } else {
   $244 = $238 + 8 | 0; //@line 11170
   $245 = HEAP32[$244 >> 2] | 0; //@line 11171
   if ((HEAP32[5932] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 11175
   } else {
    $$0403 = $245; //@line 11178
    $$pre$phiZ2D = $244; //@line 11178
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 11181
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 11183
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 11185
  HEAP32[$$1 + 12 >> 2] = $238; //@line 11187
  return;
 }
 $251 = $$2 >>> 8; //@line 11190
 if (!$251) {
  $$0396 = 0; //@line 11193
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 11197
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 11201
   $257 = $251 << $256; //@line 11202
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 11205
   $262 = $257 << $260; //@line 11207
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 11210
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 11215
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 11221
  }
 }
 $276 = 24016 + ($$0396 << 2) | 0; //@line 11224
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 11226
 HEAP32[$$1 + 20 >> 2] = 0; //@line 11229
 HEAP32[$$1 + 16 >> 2] = 0; //@line 11230
 $280 = HEAP32[5929] | 0; //@line 11231
 $281 = 1 << $$0396; //@line 11232
 do {
  if (!($280 & $281)) {
   HEAP32[5929] = $280 | $281; //@line 11238
   HEAP32[$276 >> 2] = $$1; //@line 11239
   HEAP32[$$1 + 24 >> 2] = $276; //@line 11241
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 11243
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 11245
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 11253
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 11253
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 11260
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 11264
    $301 = HEAP32[$299 >> 2] | 0; //@line 11266
    if (!$301) {
     label = 121; //@line 11269
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 11272
     $$0384 = $301; //@line 11272
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[5932] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 11279
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 11282
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 11284
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 11286
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 11288
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 11293
    $309 = HEAP32[$308 >> 2] | 0; //@line 11294
    $310 = HEAP32[5932] | 0; //@line 11295
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 11301
     HEAP32[$308 >> 2] = $$1; //@line 11302
     HEAP32[$$1 + 8 >> 2] = $309; //@line 11304
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 11306
     HEAP32[$$1 + 24 >> 2] = 0; //@line 11308
     break;
    } else {
     _abort(); //@line 11311
    }
   }
  }
 } while (0);
 $319 = (HEAP32[5936] | 0) + -1 | 0; //@line 11318
 HEAP32[5936] = $319; //@line 11319
 if (!$319) {
  $$0212$in$i = 24168; //@line 11322
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 11327
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 11333
  }
 }
 HEAP32[5936] = -1; //@line 11336
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$058 = 0, $$059 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$1 = 0, $$163 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $109 = 0, $11 = 0, $115 = 0, $121 = 0, $135 = 0, $15 = 0, $156 = 0, $157 = 0, $170 = 0, $171 = 0, $172 = 0, $178 = 0, $179 = 0, $183 = 0, $185 = 0, $191 = 0, $192 = 0, $195 = 0, $197 = 0, $212 = 0, $219 = 0, $220 = 0, $221 = 0, $224 = 0, $242 = 0, $245 = 0, $246 = 0, $247 = 0, $258 = 0, $40 = 0, $6 = 0, $64 = 0, $7 = 0, $74 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $89 = 0, $9 = 0, $91 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14234
 STACKTOP = STACKTOP + 16 | 0; //@line 14235
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14235
 $vararg_buffer1 = sp + 8 | 0; //@line 14236
 $vararg_buffer = sp; //@line 14237
 $6 = sp + 12 | 0; //@line 14238
 HEAP32[$6 >> 2] = 0; //@line 14239
 $7 = $0 + 1440 | 0; //@line 14240
 $8 = $0 + 1177 | 0; //@line 14241
 HEAP8[$8 >> 0] = 0; //@line 14242
 $9 = ($4 | 0) == 0; //@line 14243
 $$ = $9 ? 0 : $5; //@line 14244
 HEAP16[$7 >> 1] = $$; //@line 14245
 $11 = $0 + 1185 | 0; //@line 14247
 HEAP8[$11 >> 0] = HEAP8[$1 >> 0] | 0; //@line 14248
 L1 : do {
  switch ((HEAPU8[$1 >> 0] | 0) >>> 5 & 7) {
  case 0:
   {
    HEAP16[$7 >> 1] = 1; //@line 14255
    $15 = HEAP32[$0 + 1708 >> 2] | 0; //@line 14258
    HEAP8[$0 + 1193 >> 0] = HEAP8[$15 >> 0] | 0; //@line 14263
    HEAP8[$0 + 1192 >> 0] = HEAP8[$15 + 1 >> 0] | 0; //@line 14267
    HEAP8[$0 + 1191 >> 0] = HEAP8[$15 + 2 >> 0] | 0; //@line 14271
    HEAP8[$0 + 1190 >> 0] = HEAP8[$15 + 3 >> 0] | 0; //@line 14275
    HEAP8[$0 + 1189 >> 0] = HEAP8[$15 + 4 >> 0] | 0; //@line 14279
    HEAP8[$0 + 1188 >> 0] = HEAP8[$15 + 5 >> 0] | 0; //@line 14283
    HEAP8[$0 + 1187 >> 0] = HEAP8[$15 + 6 >> 0] | 0; //@line 14286
    HEAP8[$0 + 1186 >> 0] = HEAP8[$15 + 7 >> 0] | 0; //@line 14288
    HEAP16[$7 >> 1] = 9; //@line 14289
    $40 = HEAP32[$0 + 1704 >> 2] | 0; //@line 14292
    HEAP8[$0 + 1201 >> 0] = HEAP8[$40 >> 0] | 0; //@line 14297
    HEAP8[$0 + 1200 >> 0] = HEAP8[$40 + 1 >> 0] | 0; //@line 14301
    HEAP8[$0 + 1199 >> 0] = HEAP8[$40 + 2 >> 0] | 0; //@line 14305
    HEAP8[$0 + 1198 >> 0] = HEAP8[$40 + 3 >> 0] | 0; //@line 14309
    HEAP8[$0 + 1197 >> 0] = HEAP8[$40 + 4 >> 0] | 0; //@line 14313
    HEAP8[$0 + 1196 >> 0] = HEAP8[$40 + 5 >> 0] | 0; //@line 14317
    HEAP8[$0 + 1195 >> 0] = HEAP8[$40 + 6 >> 0] | 0; //@line 14320
    HEAP8[$0 + 1194 >> 0] = HEAP8[$40 + 7 >> 0] | 0; //@line 14322
    HEAP16[$7 >> 1] = 17; //@line 14323
    $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14325
    $64 = __ZN7LoRaPHY13get_radio_rngEv($0 + 4 | 0) | 0; //@line 14326
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 425; //@line 14329
     HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 14331
     HEAP32[$AsyncCtx17 + 8 >> 2] = $7; //@line 14333
     HEAP32[$AsyncCtx17 + 12 >> 2] = $11; //@line 14335
     HEAP32[$AsyncCtx17 + 16 >> 2] = $6; //@line 14337
     HEAP32[$AsyncCtx17 + 20 >> 2] = $6; //@line 14339
     HEAP8[$AsyncCtx17 + 24 >> 0] = $3; //@line 14341
     HEAP32[$AsyncCtx17 + 28 >> 2] = $vararg_buffer1; //@line 14343
     HEAP32[$AsyncCtx17 + 32 >> 2] = $vararg_buffer1; //@line 14345
     sp = STACKTOP; //@line 14346
     STACKTOP = sp; //@line 14347
     return 0; //@line 14347
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 14349
    $74 = $0 + 1748 | 0; //@line 14351
    HEAP16[$74 >> 1] = $64; //@line 14352
    $76 = HEAP16[$7 >> 1] | 0; //@line 14354
    HEAP16[$7 >> 1] = $76 + 1 << 16 >> 16; //@line 14356
    HEAP8[($76 & 65535) + ($0 + 1185) >> 0] = $64; //@line 14359
    $82 = (HEAPU16[$74 >> 1] | 0) >>> 8 & 255; //@line 14362
    $83 = HEAP16[$7 >> 1] | 0; //@line 14363
    HEAP16[$7 >> 1] = $83 + 1 << 16 >> 16; //@line 14365
    HEAP8[($83 & 65535) + ($0 + 1185) >> 0] = $82; //@line 14368
    $89 = HEAP16[$7 >> 1] & 255; //@line 14371
    $91 = HEAP32[$0 + 1712 >> 2] | 0; //@line 14373
    $AsyncCtx9 = _emscripten_alloc_async_context(32, sp) | 0; //@line 14374
    $92 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0 + 756 | 0, $11, $89, $91, 128, $6) | 0; //@line 14375
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 426; //@line 14378
     HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 14380
     HEAP32[$AsyncCtx9 + 8 >> 2] = $7; //@line 14382
     HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 14384
     HEAP32[$AsyncCtx9 + 16 >> 2] = $6; //@line 14386
     HEAP8[$AsyncCtx9 + 20 >> 0] = $3; //@line 14388
     HEAP32[$AsyncCtx9 + 24 >> 2] = $vararg_buffer1; //@line 14390
     HEAP32[$AsyncCtx9 + 28 >> 2] = $vararg_buffer1; //@line 14392
     sp = STACKTOP; //@line 14393
     STACKTOP = sp; //@line 14394
     return 0; //@line 14394
    }
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 14396
    if (!$92) {
     $101 = HEAP32[$6 >> 2] | 0; //@line 14399
     $103 = HEAP16[$7 >> 1] | 0; //@line 14401
     HEAP16[$7 >> 1] = $103 + 1 << 16 >> 16; //@line 14403
     HEAP8[($103 & 65535) + ($0 + 1185) >> 0] = $101; //@line 14406
     $109 = HEAP16[$7 >> 1] | 0; //@line 14409
     HEAP16[$7 >> 1] = $109 + 1 << 16 >> 16; //@line 14411
     HEAP8[($109 & 65535) + ($0 + 1185) >> 0] = $101 >>> 8; //@line 14414
     $115 = HEAP16[$7 >> 1] | 0; //@line 14417
     HEAP16[$7 >> 1] = $115 + 1 << 16 >> 16; //@line 14419
     HEAP8[($115 & 65535) + ($0 + 1185) >> 0] = $101 >>> 16; //@line 14422
     $121 = HEAP16[$7 >> 1] | 0; //@line 14425
     HEAP16[$7 >> 1] = $121 + 1 << 16 >> 16; //@line 14427
     HEAP8[($121 & 65535) + ($0 + 1185) >> 0] = $101 >>> 24; //@line 14430
     $$163 = $3; //@line 14431
     $$3 = 0; //@line 14431
     break L1;
    } else {
     $$059 = -1014; //@line 14434
     STACKTOP = sp; //@line 14435
     return $$059 | 0; //@line 14435
    }
    break;
   }
  case 4:
   {
    HEAP8[$8 >> 0] = 1; //@line 14440
    label = 9; //@line 14441
    break;
   }
  case 2:
   {
    label = 9; //@line 14445
    break;
   }
  case 7:
   {
    if ($9 | $$ << 16 >> 16 == 0) {
     $$163 = $3; //@line 14452
     $$3 = 0; //@line 14452
    } else {
     _memcpy($0 + 1186 | 0, $4 | 0, $$ & 65535 | 0) | 0; //@line 14456
     HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 1; //@line 14461
     $$163 = $3; //@line 14462
     $$3 = 0; //@line 14462
    }
    break;
   }
  default:
   {
    $$163 = $3; //@line 14467
    $$3 = -1002; //@line 14467
   }
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   if (!(HEAP8[$0 + 2376 >> 0] | 0)) {
    $$059 = -1009; //@line 14477
    STACKTOP = sp; //@line 14478
    return $$059 | 0; //@line 14478
   }
   if (HEAP8[$0 + 1936 >> 0] | 0) {
    $AsyncCtx13 = _emscripten_alloc_async_context(56, sp) | 0; //@line 14488
    $135 = __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0 + 4 | 0, 1, $0 + 1877 | 0, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 14489
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 427; //@line 14492
     HEAP32[$AsyncCtx13 + 4 >> 2] = $6; //@line 14494
     HEAP8[$AsyncCtx13 + 8 >> 0] = $3; //@line 14496
     HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer1; //@line 14498
     HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 14500
     HEAP32[$AsyncCtx13 + 20 >> 2] = $0; //@line 14502
     HEAP32[$AsyncCtx13 + 24 >> 2] = $7; //@line 14504
     HEAP32[$AsyncCtx13 + 28 >> 2] = $11; //@line 14506
     HEAP32[$AsyncCtx13 + 32 >> 2] = $6; //@line 14508
     HEAP32[$AsyncCtx13 + 36 >> 2] = $4; //@line 14510
     HEAP32[$AsyncCtx13 + 40 >> 2] = $vararg_buffer; //@line 14512
     HEAP32[$AsyncCtx13 + 44 >> 2] = $vararg_buffer; //@line 14514
     HEAP32[$AsyncCtx13 + 48 >> 2] = $2; //@line 14516
     HEAP8[$AsyncCtx13 + 52 >> 0] = $9 & 1; //@line 14519
     sp = STACKTOP; //@line 14520
     STACKTOP = sp; //@line 14521
     return 0; //@line 14521
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 14523
    if ($135) {
     HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 64; //@line 14527
    }
   }
   if (!(HEAP8[$0 + 1178 >> 0] | 0)) {
    $$pre$phiZ2D = $2; //@line 14534
   } else {
    _mbed_tracef(16, 12709, 12889, $vararg_buffer); //@line 14536
    HEAP8[$2 >> 0] = HEAP8[$2 >> 0] | 32; //@line 14539
    $$pre$phiZ2D = $2; //@line 14540
   }
   $156 = $0 + 1756 | 0; //@line 14542
   $157 = HEAP32[$156 >> 2] | 0; //@line 14543
   HEAP8[$0 + 1186 >> 0] = $157; //@line 14546
   HEAP8[$0 + 1187 >> 0] = $157 >>> 8; //@line 14550
   HEAP8[$0 + 1188 >> 0] = $157 >>> 16; //@line 14554
   HEAP8[$0 + 1189 >> 0] = $157 >>> 24; //@line 14558
   $170 = $0 + 1190 | 0; //@line 14560
   HEAP8[$170 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 14561
   $171 = $0 + 1760 | 0; //@line 14562
   $172 = HEAP32[$171 >> 2] | 0; //@line 14563
   HEAP8[$0 + 1191 >> 0] = $172; //@line 14566
   HEAP8[$0 + 1192 >> 0] = $172 >>> 8; //@line 14570
   $178 = $0 + 476 | 0; //@line 14571
   __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($178); //@line 14572
   $179 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($178) | 0; //@line 14573
   do {
    if ($9) {
     label = 27; //@line 14576
    } else {
     if (!(HEAP16[$7 >> 1] | 0)) {
      label = 27; //@line 14581
     } else {
      if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($178) | 0)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 14585
       $$06272 = $3; //@line 14586
       $$06471 = $4; //@line 14586
       $$16670 = 8; //@line 14586
       label = 31; //@line 14587
       break;
      }
      $183 = $179 & 255; //@line 14590
      if (($179 & 255) >= 16) {
       HEAP16[$7 >> 1] = $179 & 255; //@line 14594
       $$062 = 0; //@line 14596
       $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 14596
       $$166 = 8; //@line 14596
       label = 30; //@line 14597
       break;
      }
      $185 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 14600
      $191 = ($185 & 255) + $183 & 15 | $185 & -16; //@line 14606
      HEAP8[$$pre$phiZ2D >> 0] = $191; //@line 14607
      HEAP8[$170 >> 0] = $191; //@line 14608
      $192 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 14609
      if (!($179 << 24 >> 24)) {
       __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 14612
       $$06272 = $3; //@line 14613
       $$06471 = $4; //@line 14613
       $$16670 = 8; //@line 14613
       label = 31; //@line 14614
       break;
      } else {
       $$06575 = 8; //@line 14617
       $$06874 = 0; //@line 14617
       $195 = 0; //@line 14617
       while (1) {
        $197 = $$06575 + 1 << 24 >> 24; //@line 14621
        HEAP8[($$06575 & 255) + ($0 + 1185) >> 0] = HEAP8[$192 + $195 >> 0] | 0; //@line 14624
        $$06874 = $$06874 + 1 << 16 >> 16; //@line 14625
        $195 = $$06874 & 65535; //@line 14626
        if ($195 >>> 0 >= $183 >>> 0) {
         $$062 = $3; //@line 14631
         $$064 = $4; //@line 14631
         $$166 = $197; //@line 14631
         label = 30; //@line 14632
         break;
        } else {
         $$06575 = $197; //@line 14629
        }
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 27) {
    if (!($179 << 24 >> 24)) {
     $$062 = $3; //@line 14643
     $$064 = $4; //@line 14643
     $$166 = 8; //@line 14643
     label = 30; //@line 14644
    } else {
     if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($178) | 0) {
      HEAP16[$7 >> 1] = $179 & 255; //@line 14649
      $$062 = 0; //@line 14651
      $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($178) | 0; //@line 14651
      $$166 = 8; //@line 14651
      label = 30; //@line 14652
     } else {
      $$062 = $3; //@line 14654
      $$064 = $4; //@line 14654
      $$166 = 8; //@line 14654
      label = 30; //@line 14655
     }
    }
   }
   if ((label | 0) == 30) {
    __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($178); //@line 14660
    if (!$$064) {
     $$06273 = $$062; //@line 14663
     $$1 = 0; //@line 14663
     $$267 = $$166; //@line 14663
    } else {
     $$06272 = $$062; //@line 14665
     $$06471 = $$064; //@line 14665
     $$16670 = $$166; //@line 14665
     label = 31; //@line 14666
    }
   }
   do {
    if ((label | 0) == 31) {
     if (!(HEAP16[$7 >> 1] | 0)) {
      $$06273 = $$06272; //@line 14674
      $$1 = 0; //@line 14674
      $$267 = $$16670; //@line 14674
     } else {
      $212 = $$16670 + 1 << 24 >> 24; //@line 14676
      HEAP8[($$16670 & 255) + ($0 + 1185) >> 0] = $$06272; //@line 14679
      if (!($$06272 << 24 >> 24)) {
       __ZN14LoRaMacCommand20clear_command_bufferEv($178); //@line 14683
       $$058 = $0 + 1716 | 0; //@line 14685
      } else {
       $$058 = $0 + 1732 | 0; //@line 14687
      }
      $219 = HEAP16[$7 >> 1] | 0; //@line 14690
      $220 = HEAP32[$156 >> 2] | 0; //@line 14691
      $221 = HEAP32[$171 >> 2] | 0; //@line 14692
      $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 14695
      $224 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $$06471, $219, $$058, 128, $220, 0, $221, ($212 & 255) + ($0 + 1185) | 0) | 0; //@line 14696
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 428; //@line 14699
       HEAP8[$AsyncCtx + 4 >> 0] = $$06272; //@line 14701
       HEAP8[$AsyncCtx + 5 >> 0] = $212; //@line 14703
       HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 14705
       HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 14707
       HEAP32[$AsyncCtx + 16 >> 2] = $156; //@line 14709
       HEAP32[$AsyncCtx + 20 >> 2] = $171; //@line 14711
       HEAP32[$AsyncCtx + 24 >> 2] = $11; //@line 14713
       HEAP32[$AsyncCtx + 28 >> 2] = $6; //@line 14715
       HEAP8[$AsyncCtx + 32 >> 0] = $3; //@line 14717
       HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer1; //@line 14719
       HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer1; //@line 14721
       HEAP32[$AsyncCtx + 44 >> 2] = $6; //@line 14723
       sp = STACKTOP; //@line 14724
       STACKTOP = sp; //@line 14725
       return 0; //@line 14725
      } else {
       _emscripten_free_async_context($AsyncCtx | 0); //@line 14727
       $$06273 = $$06272; //@line 14730
       $$1 = ($224 | 0) == 0 ? 0 : -1014; //@line 14730
       $$267 = $212; //@line 14730
       break;
      }
     }
    }
   } while (0);
   $242 = (HEAPU16[$7 >> 1] | 0) + ($$267 & 255) & 65535; //@line 14740
   HEAP16[$7 >> 1] = $242; //@line 14741
   $245 = HEAP32[$156 >> 2] | 0; //@line 14744
   $246 = HEAP32[$171 >> 2] | 0; //@line 14745
   $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14746
   $247 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $11, $242, $0 + 1716 | 0, 128, $245, 0, $246, $6) | 0; //@line 14747
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 429; //@line 14750
    HEAP32[$AsyncCtx5 + 4 >> 2] = $$1; //@line 14752
    HEAP32[$AsyncCtx5 + 8 >> 2] = $6; //@line 14754
    HEAP32[$AsyncCtx5 + 12 >> 2] = $7; //@line 14756
    HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 14758
    HEAP8[$AsyncCtx5 + 20 >> 0] = $3; //@line 14760
    HEAP8[$AsyncCtx5 + 21 >> 0] = $$06273; //@line 14762
    HEAP32[$AsyncCtx5 + 24 >> 2] = $vararg_buffer1; //@line 14764
    HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer1; //@line 14766
    HEAP32[$AsyncCtx5 + 32 >> 2] = $6; //@line 14768
    sp = STACKTOP; //@line 14769
    STACKTOP = sp; //@line 14770
    return 0; //@line 14770
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 14772
    $258 = HEAP32[$6 >> 2] | 0; //@line 14775
    HEAP8[(HEAPU16[$7 >> 1] | 0) + ($0 + 1185) >> 0] = $258; //@line 14780
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 1 + ($0 + 1185) >> 0] = $258 >>> 8; //@line 14787
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 2 + ($0 + 1185) >> 0] = $258 >>> 16; //@line 14794
    HEAP8[(HEAPU16[$7 >> 1] | 0) + 3 + ($0 + 1185) >> 0] = $258 >>> 24; //@line 14801
    HEAP16[$7 >> 1] = (HEAPU16[$7 >> 1] | 0) + 4; //@line 14806
    $$163 = $$06273; //@line 14807
    $$3 = ($247 | 0) == 0 ? $$1 : -1014; //@line 14807
    break;
   }
  }
 } while (0);
 HEAP32[$vararg_buffer1 >> 2] = $$163 & 255; //@line 14813
 _mbed_tracef(16, 12709, 12902, $vararg_buffer1); //@line 14814
 $$059 = $$3; //@line 14815
 STACKTOP = sp; //@line 14816
 return $$059 | 0; //@line 14816
}
function _equeue_dispatch($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$03956$i = 0, $$03956$i$phi = 0, $$04055$i = 0, $$0405571$i = 0, $$04063$i = 0, $$04159$i = 0, $$04258$i = 0, $$057$i = 0, $$067 = 0, $$06992 = 0, $$2 = 0, $$idx = 0, $$sink$in$i$i = 0, $$sroa$0$i = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = 0, $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = 0, $10 = 0, $106 = 0, $11 = 0, $12 = 0, $129 = 0, $13 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $136 = 0, $14 = 0, $144 = 0, $145 = 0, $147 = 0, $15 = 0, $150 = 0, $152 = 0, $155 = 0, $158 = 0, $165 = 0, $169 = 0, $172 = 0, $178 = 0, $2 = 0, $23 = 0, $24 = 0, $27 = 0, $33 = 0, $42 = 0, $45 = 0, $46 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $72 = 0, $74 = 0, $77 = 0, $8 = 0, $9 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$04159$i$looptemp = 0, $$04258$i$looptemp = 0;
 sp = STACKTOP; //@line 3823
 STACKTOP = STACKTOP + 16 | 0; //@line 3824
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3824
 $$sroa$0$i = sp; //@line 3825
 $2 = $0 + 184 | 0; //@line 3826
 if (!(HEAP8[$2 >> 0] | 0)) {
  HEAP8[$2 >> 0] = 1; //@line 3830
 }
 $5 = _equeue_tick() | 0; //@line 3832
 $6 = $5 + $1 | 0; //@line 3833
 $7 = $0 + 36 | 0; //@line 3834
 HEAP8[$7 >> 0] = 0; //@line 3835
 $8 = $0 + 128 | 0; //@line 3836
 $9 = $0 + 9 | 0; //@line 3837
 $10 = $0 + 4 | 0; //@line 3838
 $11 = ($1 | 0) > -1; //@line 3839
 $12 = $0 + 48 | 0; //@line 3840
 $13 = $0 + 8 | 0; //@line 3841
 $$idx = $0 + 16 | 0; //@line 3842
 $14 = $0 + 156 | 0; //@line 3843
 $15 = $0 + 24 | 0; //@line 3844
 $$0 = $5; //@line 3845
 L4 : while (1) {
  _equeue_mutex_lock($8); //@line 3847
  HEAP8[$9 >> 0] = (HEAPU8[$9 >> 0] | 0) + 1; //@line 3852
  if (((HEAP32[$10 >> 2] | 0) - $$0 | 0) < 1) {
   HEAP32[$10 >> 2] = $$0; //@line 3857
  }
  $23 = HEAP32[$0 >> 2] | 0; //@line 3859
  HEAP32[$$sroa$0$i >> 2] = $23; //@line 3860
  $24 = $23; //@line 3861
  L9 : do {
   if (!$23) {
    $$04055$i = $$sroa$0$i; //@line 3865
    $33 = $24; //@line 3865
    label = 10; //@line 3866
   } else {
    $$04063$i = $$sroa$0$i; //@line 3868
    $27 = $24; //@line 3868
    do {
     if (((HEAP32[$27 + 20 >> 2] | 0) - $$0 | 0) >= 1) {
      $$04055$i = $$04063$i; //@line 3875
      $33 = $27; //@line 3875
      label = 10; //@line 3876
      break L9;
     }
     $$04063$i = $27 + 8 | 0; //@line 3879
     $27 = HEAP32[$$04063$i >> 2] | 0; //@line 3880
    } while (($27 | 0) != 0);
    HEAP32[$0 >> 2] = 0; //@line 3888
    $$0405571$i = $$04063$i; //@line 3889
   }
  } while (0);
  if ((label | 0) == 10) {
   label = 0; //@line 3893
   HEAP32[$0 >> 2] = $33; //@line 3894
   if (!$33) {
    $$0405571$i = $$04055$i; //@line 3897
   } else {
    HEAP32[$33 + 16 >> 2] = $0; //@line 3900
    $$0405571$i = $$04055$i; //@line 3901
   }
  }
  HEAP32[$$0405571$i >> 2] = 0; //@line 3904
  _equeue_mutex_unlock($8); //@line 3905
  $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 3906
  if (!$$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74) {} else {
   $$04159$i = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$52$i74; //@line 3910
   $$04258$i = $$sroa$0$i; //@line 3910
   do {
    $$04258$i$looptemp = $$04258$i;
    $$04258$i = $$04159$i + 8 | 0; //@line 3912
    $$04159$i$looptemp = $$04159$i;
    $$04159$i = HEAP32[$$04258$i >> 2] | 0; //@line 3913
    $$03956$i = 0; //@line 3914
    $$057$i = $$04159$i$looptemp; //@line 3914
    while (1) {
     HEAP32[$$057$i + 8 >> 2] = $$03956$i; //@line 3917
     $42 = HEAP32[$$057$i + 12 >> 2] | 0; //@line 3919
     if (!$42) {
      break;
     } else {
      $$03956$i$phi = $$057$i; //@line 3924
      $$057$i = $42; //@line 3924
      $$03956$i = $$03956$i$phi; //@line 3924
     }
    }
    HEAP32[$$04258$i$looptemp >> 2] = $$057$i; //@line 3927
   } while (($$04159$i | 0) != 0);
   $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 = HEAP32[$$sroa$0$i >> 2] | 0; //@line 3935
   if ($$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75 | 0) {
    $$06992 = $$sroa$0$i$0$$sroa$0$0$$sroa$0$0$$0$4353$pre$i75; //@line 3938
    while (1) {
     $45 = $$06992 + 8 | 0; //@line 3940
     $46 = HEAP32[$45 >> 2] | 0; //@line 3941
     $48 = HEAP32[$$06992 + 32 >> 2] | 0; //@line 3943
     if ($48 | 0) {
      $AsyncCtx = _emscripten_alloc_async_context(84, sp) | 0; //@line 3947
      FUNCTION_TABLE_vi[$48 & 1023]($$06992 + 36 | 0); //@line 3948
      if (___async) {
       label = 20; //@line 3951
       break L4;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3954
     }
     $72 = HEAP32[$$06992 + 24 >> 2] | 0; //@line 3957
     if (($72 | 0) > -1) {
      $74 = $$06992 + 20 | 0; //@line 3960
      HEAP32[$74 >> 2] = (HEAP32[$74 >> 2] | 0) + $72; //@line 3963
      $77 = _equeue_tick() | 0; //@line 3964
      $AsyncCtx11 = _emscripten_alloc_async_context(76, sp) | 0; //@line 3965
      _equeue_enqueue($0, $$06992, $77) | 0; //@line 3966
      if (___async) {
       label = 24; //@line 3969
       break L4;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3972
     } else {
      $96 = $$06992 + 4 | 0; //@line 3975
      $97 = HEAP8[$96 >> 0] | 0; //@line 3976
      HEAP8[$96 >> 0] = (($97 + 1 & 255) << HEAP32[$$idx >> 2] | 0) == 0 ? 1 : ($97 & 255) + 1 & 255; //@line 3985
      $106 = HEAP32[$$06992 + 28 >> 2] | 0; //@line 3987
      if ($106 | 0) {
       $AsyncCtx3 = _emscripten_alloc_async_context(84, sp) | 0; //@line 3991
       FUNCTION_TABLE_vi[$106 & 1023]($$06992 + 36 | 0); //@line 3992
       if (___async) {
        label = 28; //@line 3995
        break L4;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3998
      }
      _equeue_mutex_lock($14); //@line 4000
      $129 = HEAP32[$15 >> 2] | 0; //@line 4001
      L40 : do {
       if (!$129) {
        $$02329$i$i = $15; //@line 4005
        label = 36; //@line 4006
       } else {
        $131 = HEAP32[$$06992 >> 2] | 0; //@line 4008
        $$025$i$i = $15; //@line 4009
        $133 = $129; //@line 4009
        while (1) {
         $132 = HEAP32[$133 >> 2] | 0; //@line 4011
         if ($132 >>> 0 >= $131 >>> 0) {
          break;
         }
         $135 = $133 + 8 | 0; //@line 4016
         $136 = HEAP32[$135 >> 2] | 0; //@line 4017
         if (!$136) {
          $$02329$i$i = $135; //@line 4020
          label = 36; //@line 4021
          break L40;
         } else {
          $$025$i$i = $135; //@line 4024
          $133 = $136; //@line 4024
         }
        }
        if (($132 | 0) == ($131 | 0)) {
         HEAP32[$$06992 + 12 >> 2] = $133; //@line 4030
         $$02330$i$i = $$025$i$i; //@line 4033
         $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 4033
        } else {
         $$02329$i$i = $$025$i$i; //@line 4035
         label = 36; //@line 4036
        }
       }
      } while (0);
      if ((label | 0) == 36) {
       label = 0; //@line 4041
       HEAP32[$$06992 + 12 >> 2] = 0; //@line 4043
       $$02330$i$i = $$02329$i$i; //@line 4044
       $$sink$in$i$i = $$02329$i$i; //@line 4044
      }
      HEAP32[$45 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 4047
      HEAP32[$$02330$i$i >> 2] = $$06992; //@line 4048
      _equeue_mutex_unlock($14); //@line 4049
     }
     if (!$46) {
      break;
     } else {
      $$06992 = $46; //@line 4055
     }
    }
   }
  }
  $144 = _equeue_tick() | 0; //@line 4060
  if ($11) {
   $145 = $6 - $144 | 0; //@line 4062
   if (($145 | 0) < 1) {
    label = 41; //@line 4065
    break;
   } else {
    $$067 = $145; //@line 4068
   }
  } else {
   $$067 = -1; //@line 4071
  }
  _equeue_mutex_lock($8); //@line 4073
  $165 = HEAP32[$0 >> 2] | 0; //@line 4074
  if (!$165) {
   $$2 = $$067; //@line 4077
  } else {
   $169 = (HEAP32[$165 + 20 >> 2] | 0) - $144 | 0; //@line 4081
   $172 = $169 & ~($169 >> 31); //@line 4084
   $$2 = $172 >>> 0 < $$067 >>> 0 ? $172 : $$067; //@line 4087
  }
  _equeue_mutex_unlock($8); //@line 4089
  _equeue_sema_wait($12, $$2) | 0; //@line 4090
  if (HEAP8[$13 >> 0] | 0) {
   _equeue_mutex_lock($8); //@line 4094
   if (HEAP8[$13 >> 0] | 0) {
    label = 53; //@line 4098
    break;
   }
   _equeue_mutex_unlock($8); //@line 4101
  }
  $178 = _equeue_tick() | 0; //@line 4103
  $AsyncCtx15 = _emscripten_alloc_async_context(76, sp) | 0; //@line 4104
  _wait_ms(20); //@line 4105
  if (___async) {
   label = 56; //@line 4108
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 4111
  $$0 = $178; //@line 4112
 }
 if ((label | 0) == 20) {
  HEAP32[$AsyncCtx >> 2] = 134; //@line 4115
  HEAP32[$AsyncCtx + 4 >> 2] = $46; //@line 4117
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 4119
  HEAP32[$AsyncCtx + 12 >> 2] = $45; //@line 4121
  HEAP32[$AsyncCtx + 16 >> 2] = $$06992; //@line 4123
  HEAP32[$AsyncCtx + 20 >> 2] = $14; //@line 4125
  HEAP32[$AsyncCtx + 24 >> 2] = $6; //@line 4127
  HEAP8[$AsyncCtx + 28 >> 0] = $11 & 1; //@line 4130
  HEAP32[$AsyncCtx + 32 >> 2] = $15; //@line 4132
  HEAP32[$AsyncCtx + 36 >> 2] = $$idx; //@line 4134
  HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 4136
  HEAP32[$AsyncCtx + 44 >> 2] = $$sroa$0$i; //@line 4138
  HEAP32[$AsyncCtx + 48 >> 2] = $$sroa$0$i; //@line 4140
  HEAP32[$AsyncCtx + 52 >> 2] = $8; //@line 4142
  HEAP32[$AsyncCtx + 56 >> 2] = $13; //@line 4144
  HEAP32[$AsyncCtx + 60 >> 2] = $12; //@line 4146
  HEAP32[$AsyncCtx + 64 >> 2] = $7; //@line 4148
  HEAP32[$AsyncCtx + 68 >> 2] = $9; //@line 4150
  HEAP32[$AsyncCtx + 72 >> 2] = $10; //@line 4152
  HEAP32[$AsyncCtx + 76 >> 2] = $0; //@line 4154
  HEAP32[$AsyncCtx + 80 >> 2] = $$sroa$0$i; //@line 4156
  sp = STACKTOP; //@line 4157
  STACKTOP = sp; //@line 4158
  return;
 } else if ((label | 0) == 24) {
  HEAP32[$AsyncCtx11 >> 2] = 135; //@line 4161
  HEAP32[$AsyncCtx11 + 4 >> 2] = $46; //@line 4163
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 4165
  HEAP32[$AsyncCtx11 + 12 >> 2] = $14; //@line 4167
  HEAP32[$AsyncCtx11 + 16 >> 2] = $6; //@line 4169
  HEAP8[$AsyncCtx11 + 20 >> 0] = $11 & 1; //@line 4172
  HEAP32[$AsyncCtx11 + 24 >> 2] = $15; //@line 4174
  HEAP32[$AsyncCtx11 + 28 >> 2] = $$idx; //@line 4176
  HEAP32[$AsyncCtx11 + 32 >> 2] = $0; //@line 4178
  HEAP32[$AsyncCtx11 + 36 >> 2] = $$sroa$0$i; //@line 4180
  HEAP32[$AsyncCtx11 + 40 >> 2] = $$sroa$0$i; //@line 4182
  HEAP32[$AsyncCtx11 + 44 >> 2] = $8; //@line 4184
  HEAP32[$AsyncCtx11 + 48 >> 2] = $13; //@line 4186
  HEAP32[$AsyncCtx11 + 52 >> 2] = $12; //@line 4188
  HEAP32[$AsyncCtx11 + 56 >> 2] = $7; //@line 4190
  HEAP32[$AsyncCtx11 + 60 >> 2] = $9; //@line 4192
  HEAP32[$AsyncCtx11 + 64 >> 2] = $10; //@line 4194
  HEAP32[$AsyncCtx11 + 68 >> 2] = $0; //@line 4196
  HEAP32[$AsyncCtx11 + 72 >> 2] = $$sroa$0$i; //@line 4198
  sp = STACKTOP; //@line 4199
  STACKTOP = sp; //@line 4200
  return;
 } else if ((label | 0) == 28) {
  HEAP32[$AsyncCtx3 >> 2] = 136; //@line 4203
  HEAP32[$AsyncCtx3 + 4 >> 2] = $46; //@line 4205
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 4207
  HEAP32[$AsyncCtx3 + 12 >> 2] = $45; //@line 4209
  HEAP32[$AsyncCtx3 + 16 >> 2] = $$06992; //@line 4211
  HEAP32[$AsyncCtx3 + 20 >> 2] = $14; //@line 4213
  HEAP32[$AsyncCtx3 + 24 >> 2] = $6; //@line 4215
  HEAP8[$AsyncCtx3 + 28 >> 0] = $11 & 1; //@line 4218
  HEAP32[$AsyncCtx3 + 32 >> 2] = $15; //@line 4220
  HEAP32[$AsyncCtx3 + 36 >> 2] = $$idx; //@line 4222
  HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 4224
  HEAP32[$AsyncCtx3 + 44 >> 2] = $$sroa$0$i; //@line 4226
  HEAP32[$AsyncCtx3 + 48 >> 2] = $$sroa$0$i; //@line 4228
  HEAP32[$AsyncCtx3 + 52 >> 2] = $8; //@line 4230
  HEAP32[$AsyncCtx3 + 56 >> 2] = $13; //@line 4232
  HEAP32[$AsyncCtx3 + 60 >> 2] = $12; //@line 4234
  HEAP32[$AsyncCtx3 + 64 >> 2] = $7; //@line 4236
  HEAP32[$AsyncCtx3 + 68 >> 2] = $9; //@line 4238
  HEAP32[$AsyncCtx3 + 72 >> 2] = $10; //@line 4240
  HEAP32[$AsyncCtx3 + 76 >> 2] = $0; //@line 4242
  HEAP32[$AsyncCtx3 + 80 >> 2] = $$sroa$0$i; //@line 4244
  sp = STACKTOP; //@line 4245
  STACKTOP = sp; //@line 4246
  return;
 } else if ((label | 0) == 41) {
  $147 = $0 + 40 | 0; //@line 4249
  if (HEAP32[$147 >> 2] | 0) {
   _equeue_mutex_lock($8); //@line 4253
   $150 = HEAP32[$147 >> 2] | 0; //@line 4254
   do {
    if ($150 | 0) {
     $152 = HEAP32[$0 >> 2] | 0; //@line 4258
     if ($152 | 0) {
      $155 = HEAP32[$0 + 44 >> 2] | 0; //@line 4262
      $158 = (HEAP32[$152 + 20 >> 2] | 0) - $144 | 0; //@line 4265
      $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 4269
      FUNCTION_TABLE_vii[$150 & 15]($155, $158 & ~($158 >> 31)); //@line 4270
      if (___async) {
       HEAP32[$AsyncCtx7 >> 2] = 137; //@line 4273
       HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 4275
       HEAP32[$AsyncCtx7 + 8 >> 2] = $8; //@line 4277
       HEAP32[$AsyncCtx7 + 12 >> 2] = $13; //@line 4279
       sp = STACKTOP; //@line 4280
       STACKTOP = sp; //@line 4281
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4283
       break;
      }
     }
    }
   } while (0);
   HEAP8[$7 >> 0] = 1; //@line 4289
   _equeue_mutex_unlock($8); //@line 4290
  }
  HEAP8[$13 >> 0] = 0; //@line 4292
  STACKTOP = sp; //@line 4293
  return;
 } else if ((label | 0) == 53) {
  HEAP8[$13 >> 0] = 0; //@line 4296
  _equeue_mutex_unlock($8); //@line 4297
  STACKTOP = sp; //@line 4298
  return;
 } else if ((label | 0) == 56) {
  HEAP32[$AsyncCtx15 >> 2] = 138; //@line 4301
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 4303
  HEAP32[$AsyncCtx15 + 8 >> 2] = $14; //@line 4305
  HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 4307
  HEAP8[$AsyncCtx15 + 16 >> 0] = $11 & 1; //@line 4310
  HEAP32[$AsyncCtx15 + 20 >> 2] = $15; //@line 4312
  HEAP32[$AsyncCtx15 + 24 >> 2] = $$idx; //@line 4314
  HEAP32[$AsyncCtx15 + 28 >> 2] = $0; //@line 4316
  HEAP32[$AsyncCtx15 + 32 >> 2] = $$sroa$0$i; //@line 4318
  HEAP32[$AsyncCtx15 + 36 >> 2] = $$sroa$0$i; //@line 4320
  HEAP32[$AsyncCtx15 + 40 >> 2] = $8; //@line 4322
  HEAP32[$AsyncCtx15 + 44 >> 2] = $13; //@line 4324
  HEAP32[$AsyncCtx15 + 48 >> 2] = $12; //@line 4326
  HEAP32[$AsyncCtx15 + 52 >> 2] = $7; //@line 4328
  HEAP32[$AsyncCtx15 + 56 >> 2] = $9; //@line 4330
  HEAP32[$AsyncCtx15 + 60 >> 2] = $10; //@line 4332
  HEAP32[$AsyncCtx15 + 64 >> 2] = $0; //@line 4334
  HEAP32[$AsyncCtx15 + 68 >> 2] = $$sroa$0$i; //@line 4336
  HEAP32[$AsyncCtx15 + 72 >> 2] = $178; //@line 4338
  sp = STACKTOP; //@line 4339
  STACKTOP = sp; //@line 4340
  return;
 }
}
function _initialize__async_cb_423($0) {
 $0 = $0 | 0;
 var $$043 = 0, $$048 = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 30902
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30904
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30906
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30908
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30910
 $8 = HEAP32[$AsyncRetVal >> 2] | 0; //@line 30911
 L2 : do {
  if (($8 | 0) < 32768) {
   if (($8 | 0) >= 128) {
    if (($8 | 0) < 2048) {
     switch ($8 | 0) {
     case 1024:
      {
       $$043 = 10; //@line 30921
       $$048 = $8; //@line 30921
       break L2;
       break;
      }
     case 512:
      {
       $$043 = 9; //@line 30926
       $$048 = $8; //@line 30926
       break L2;
       break;
      }
     case 256:
      {
       $$043 = 8; //@line 30931
       $$048 = $8; //@line 30931
       break L2;
       break;
      }
     case 128:
      {
       $$043 = 7; //@line 30936
       $$048 = $8; //@line 30936
       break L2;
       break;
      }
     default:
      {
       label = 43; //@line 30941
       break L2;
      }
     }
    }
    if (($8 | 0) < 8192) {
     switch ($8 | 0) {
     case 4096:
      {
       $$043 = 12; //@line 30950
       $$048 = $8; //@line 30950
       break L2;
       break;
      }
     case 2048:
      {
       $$043 = 11; //@line 30955
       $$048 = $8; //@line 30955
       break L2;
       break;
      }
     default:
      {
       label = 43; //@line 30960
       break L2;
      }
     }
    }
    if (($8 | 0) < 16384) {
     switch ($8 | 0) {
     case 8192:
      {
       break;
      }
     default:
      {
       label = 43; //@line 30972
       break L2;
      }
     }
     $$043 = 13; //@line 30976
     $$048 = $8; //@line 30976
     break;
    } else {
     switch ($8 | 0) {
     case 16384:
      {
       break;
      }
     default:
      {
       label = 43; //@line 30984
       break L2;
      }
     }
     $$043 = 14; //@line 30988
     $$048 = $8; //@line 30988
     break;
    }
   }
   if (($8 | 0) >= 8) {
    switch ($8 | 0) {
    case 64:
     {
      $$043 = 6; //@line 30996
      $$048 = $8; //@line 30996
      break L2;
      break;
     }
    case 32:
     {
      $$043 = 5; //@line 31001
      $$048 = $8; //@line 31001
      break L2;
      break;
     }
    case 16:
     {
      $$043 = 4; //@line 31006
      $$048 = $8; //@line 31006
      break L2;
      break;
     }
    case 8:
     {
      $$043 = 3; //@line 31011
      $$048 = $8; //@line 31011
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 31016
      break L2;
     }
    }
   }
   if (($8 | 0) >= 2) {
    switch ($8 | 0) {
    case 4:
     {
      $$043 = 2; //@line 31025
      $$048 = $8; //@line 31025
      break L2;
      break;
     }
    case 2:
     {
      $$043 = 1; //@line 31030
      $$048 = $8; //@line 31030
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 31035
      break L2;
     }
    }
   }
   if (($8 | 0) < 0) {
    switch ($8 | 0) {
    case -2147483648:
     {
      $$043 = 31; //@line 31044
      $$048 = -2147483648; //@line 31044
      break L2;
      break;
     }
    default:
     {
      label = 43; //@line 31049
      break L2;
     }
    }
   }
   switch ($8 | 0) {
   case 0:
    {
     break;
    }
   default:
    {
     label = 43; //@line 31059
     break L2;
    }
   }
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 31063
   _mbed_assert_internal(14291, 14293, 41); //@line 31064
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 620; //@line 31067
    $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 31068
    HEAP32[$9 >> 2] = $2; //@line 31069
    $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 31070
    HEAP32[$10 >> 2] = $6; //@line 31071
    $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 31072
    HEAP32[$11 >> 2] = $4; //@line 31073
    $12 = $ReallocAsyncCtx7 + 16 | 0; //@line 31074
    HEAP32[$12 >> 2] = $AsyncRetVal; //@line 31075
    sp = STACKTOP; //@line 31076
    return;
   }
   ___async_unwind = 0; //@line 31079
   HEAP32[$ReallocAsyncCtx7 >> 2] = 620; //@line 31080
   $9 = $ReallocAsyncCtx7 + 4 | 0; //@line 31081
   HEAP32[$9 >> 2] = $2; //@line 31082
   $10 = $ReallocAsyncCtx7 + 8 | 0; //@line 31083
   HEAP32[$10 >> 2] = $6; //@line 31084
   $11 = $ReallocAsyncCtx7 + 12 | 0; //@line 31085
   HEAP32[$11 >> 2] = $4; //@line 31086
   $12 = $ReallocAsyncCtx7 + 16 | 0; //@line 31087
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 31088
   sp = STACKTOP; //@line 31089
   return;
  } else {
   if (($8 | 0) < 8388608) {
    if (($8 | 0) < 524288) {
     if (($8 | 0) < 131072) {
      if (($8 | 0) < 65536) {
       switch ($8 | 0) {
       case 32768:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31105
         break L2;
        }
       }
       $$043 = 15; //@line 31109
       $$048 = $8; //@line 31109
       break;
      } else {
       switch ($8 | 0) {
       case 65536:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31117
         break L2;
        }
       }
       $$043 = 16; //@line 31121
       $$048 = $8; //@line 31121
       break;
      }
     } else {
      if (($8 | 0) < 262144) {
       switch ($8 | 0) {
       case 131072:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31132
         break L2;
        }
       }
       $$043 = 17; //@line 31136
       $$048 = $8; //@line 31136
       break;
      } else {
       switch ($8 | 0) {
       case 262144:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31144
         break L2;
        }
       }
       $$043 = 18; //@line 31148
       $$048 = $8; //@line 31148
       break;
      }
     }
    } else {
     if (($8 | 0) < 2097152) {
      if (($8 | 0) < 1048576) {
       switch ($8 | 0) {
       case 524288:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31162
         break L2;
        }
       }
       $$043 = 19; //@line 31166
       $$048 = $8; //@line 31166
       break;
      } else {
       switch ($8 | 0) {
       case 1048576:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31174
         break L2;
        }
       }
       $$043 = 20; //@line 31178
       $$048 = $8; //@line 31178
       break;
      }
     } else {
      if (($8 | 0) < 4194304) {
       switch ($8 | 0) {
       case 2097152:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31189
         break L2;
        }
       }
       $$043 = 21; //@line 31193
       $$048 = $8; //@line 31193
       break;
      } else {
       switch ($8 | 0) {
       case 4194304:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31201
         break L2;
        }
       }
       $$043 = 22; //@line 31205
       $$048 = $8; //@line 31205
       break;
      }
     }
    }
   } else {
    if (($8 | 0) < 134217728) {
     if (($8 | 0) < 33554432) {
      if (($8 | 0) < 16777216) {
       switch ($8 | 0) {
       case 8388608:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31222
         break L2;
        }
       }
       $$043 = 23; //@line 31226
       $$048 = $8; //@line 31226
       break;
      } else {
       switch ($8 | 0) {
       case 16777216:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31234
         break L2;
        }
       }
       $$043 = 24; //@line 31238
       $$048 = $8; //@line 31238
       break;
      }
     } else {
      if (($8 | 0) < 67108864) {
       switch ($8 | 0) {
       case 33554432:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31249
         break L2;
        }
       }
       $$043 = 25; //@line 31253
       $$048 = $8; //@line 31253
       break;
      } else {
       switch ($8 | 0) {
       case 67108864:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31261
         break L2;
        }
       }
       $$043 = 26; //@line 31265
       $$048 = $8; //@line 31265
       break;
      }
     }
    } else {
     if (($8 | 0) < 536870912) {
      if (($8 | 0) < 268435456) {
       switch ($8 | 0) {
       case 134217728:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31279
         break L2;
        }
       }
       $$043 = 27; //@line 31283
       $$048 = $8; //@line 31283
       break;
      } else {
       switch ($8 | 0) {
       case 268435456:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31291
         break L2;
        }
       }
       $$043 = 28; //@line 31295
       $$048 = $8; //@line 31295
       break;
      }
     } else {
      if (($8 | 0) < 1073741824) {
       switch ($8 | 0) {
       case 536870912:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31306
         break L2;
        }
       }
       $$043 = 29; //@line 31310
       $$048 = $8; //@line 31310
       break;
      } else {
       switch ($8 | 0) {
       case 1073741824:
        {
         break;
        }
       default:
        {
         label = 43; //@line 31318
         break L2;
        }
       }
       $$043 = 30; //@line 31322
       $$048 = $8; //@line 31322
       break;
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 43) {
  $$043 = 0; //@line 31331
  $$048 = $8; //@line 31331
 }
 $14 = HEAP32[$AsyncRetVal + 4 >> 2] | 0; //@line 31334
 if (($14 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 31338
  _mbed_assert_internal(14291, 14293, 55); //@line 31339
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 621; //@line 31342
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 31343
   HEAP32[$16 >> 2] = $2; //@line 31344
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 31345
   HEAP32[$17 >> 2] = $6; //@line 31346
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 31347
   HEAP32[$18 >> 2] = $$048; //@line 31348
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 31349
   HEAP8[$19 >> 0] = $$043; //@line 31350
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 31351
   HEAP32[$20 >> 2] = $4; //@line 31352
   sp = STACKTOP; //@line 31353
   return;
  }
  ___async_unwind = 0; //@line 31356
  HEAP32[$ReallocAsyncCtx6 >> 2] = 621; //@line 31357
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 31358
  HEAP32[$16 >> 2] = $2; //@line 31359
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 31360
  HEAP32[$17 >> 2] = $6; //@line 31361
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 31362
  HEAP32[$18 >> 2] = $$048; //@line 31363
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 31364
  HEAP8[$19 >> 0] = $$043; //@line 31365
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 31366
  HEAP32[$20 >> 2] = $4; //@line 31367
  sp = STACKTOP; //@line 31368
  return;
 } else {
  $22 = 7 << $14 + -4; //@line 31372
  $23 = ___muldi3($22 | 0, 0, 1e6, 0) | 0; //@line 31373
  $24 = tempRet0; //@line 31374
  $25 = _i64Add($$048 | 0, 0, -1, -1) | 0; //@line 31375
  $27 = _i64Add($25 | 0, tempRet0 | 0, $23 | 0, $24 | 0) | 0; //@line 31377
  $29 = ___udivdi3($27 | 0, tempRet0 | 0, $$048 | 0, 0) | 0; //@line 31379
  $30 = tempRet0; //@line 31380
  $31 = HEAP32[$2 >> 2] | 0; //@line 31381
  HEAP32[$31 >> 2] = 0; //@line 31382
  HEAP32[$31 + 4 >> 2] = 0; //@line 31384
  $35 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 31387
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 31388
  $36 = FUNCTION_TABLE_i[$35 & 7]() | 0; //@line 31389
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 31392
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 31393
   HEAP32[$37 >> 2] = $2; //@line 31394
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 31395
   HEAP32[$38 >> 2] = $$048; //@line 31396
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 31397
   HEAP8[$39 >> 0] = $$043; //@line 31398
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 31399
   HEAP32[$40 >> 2] = $14; //@line 31400
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 31401
   HEAP32[$41 >> 2] = $22; //@line 31402
   $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 31403
   $43 = $42; //@line 31404
   $44 = $43; //@line 31405
   HEAP32[$44 >> 2] = $29; //@line 31406
   $45 = $43 + 4 | 0; //@line 31407
   $46 = $45; //@line 31408
   HEAP32[$46 >> 2] = $30; //@line 31409
   $47 = $ReallocAsyncCtx3 + 32 | 0; //@line 31410
   HEAP32[$47 >> 2] = $4; //@line 31411
   $48 = $ReallocAsyncCtx3 + 36 | 0; //@line 31412
   HEAP32[$48 >> 2] = $6; //@line 31413
   sp = STACKTOP; //@line 31414
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 31418
  ___async_unwind = 0; //@line 31419
  HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 31420
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 31421
  HEAP32[$37 >> 2] = $2; //@line 31422
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 31423
  HEAP32[$38 >> 2] = $$048; //@line 31424
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 31425
  HEAP8[$39 >> 0] = $$043; //@line 31426
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 31427
  HEAP32[$40 >> 2] = $14; //@line 31428
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 31429
  HEAP32[$41 >> 2] = $22; //@line 31430
  $42 = $ReallocAsyncCtx3 + 24 | 0; //@line 31431
  $43 = $42; //@line 31432
  $44 = $43; //@line 31433
  HEAP32[$44 >> 2] = $29; //@line 31434
  $45 = $43 + 4 | 0; //@line 31435
  $46 = $45; //@line 31436
  HEAP32[$46 >> 2] = $30; //@line 31437
  $47 = $ReallocAsyncCtx3 + 32 | 0; //@line 31438
  HEAP32[$47 >> 2] = $4; //@line 31439
  $48 = $ReallocAsyncCtx3 + 36 | 0; //@line 31440
  HEAP32[$48 >> 2] = $6; //@line 31441
  sp = STACKTOP; //@line 31442
  return;
 }
}
function _mbedtls_cipher_cmac_finish($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$013$i = 0, $$01720$i45 = 0, $$019$i = 0, $$019$i42 = 0, $$021$i44 = 0, $$09$i = 0, $$09$i53 = 0, $$09$i58 = 0, $$sink$sink$i = 0, $105 = 0, $108 = 0, $116 = 0, $117 = 0, $12 = 0, $130 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $160 = 0, $177 = 0, $181 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $69 = 0, $7 = 0, $70 = 0, $89 = 0, $9 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx3 = 0, $AsyncCtx32 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $116$looptemp = 0;
 sp = STACKTOP; //@line 3537
 STACKTOP = STACKTOP + 80 | 0; //@line 3538
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 3538
 $2 = sp + 56 | 0; //@line 3539
 $3 = sp + 4 | 0; //@line 3540
 $4 = sp + 40 | 0; //@line 3541
 $5 = sp + 24 | 0; //@line 3542
 $6 = sp + 8 | 0; //@line 3543
 $7 = sp; //@line 3544
 if (!$0) {
  $$0 = -24832; //@line 3547
  STACKTOP = sp; //@line 3548
  return $$0 | 0; //@line 3548
 }
 $9 = HEAP32[$0 >> 2] | 0; //@line 3550
 if (!$9) {
  $$0 = -24832; //@line 3553
  STACKTOP = sp; //@line 3554
  return $$0 | 0; //@line 3554
 }
 $12 = HEAP32[$0 + 64 >> 2] | 0; //@line 3557
 if (($1 | 0) == 0 | ($12 | 0) == 0) {
  $$0 = -24832; //@line 3562
  STACKTOP = sp; //@line 3563
  return $$0 | 0; //@line 3563
 }
 $16 = HEAP32[$9 + 24 >> 2] | 0; //@line 3566
 $AsyncCtx26 = _emscripten_alloc_async_context(68, sp) | 0; //@line 3567
 _mbedtls_platform_zeroize($4, 16); //@line 3568
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 599; //@line 3571
  HEAP32[$AsyncCtx26 + 4 >> 2] = $4; //@line 3573
  HEAP32[$AsyncCtx26 + 8 >> 2] = $5; //@line 3575
  HEAP32[$AsyncCtx26 + 12 >> 2] = $4; //@line 3577
  HEAP32[$AsyncCtx26 + 16 >> 2] = $6; //@line 3579
  HEAP32[$AsyncCtx26 + 20 >> 2] = $16; //@line 3581
  HEAP32[$AsyncCtx26 + 24 >> 2] = $12; //@line 3583
  HEAP32[$AsyncCtx26 + 28 >> 2] = $5; //@line 3585
  HEAP32[$AsyncCtx26 + 32 >> 2] = $12; //@line 3587
  HEAP32[$AsyncCtx26 + 36 >> 2] = $7; //@line 3589
  HEAP32[$AsyncCtx26 + 40 >> 2] = $6; //@line 3591
  HEAP32[$AsyncCtx26 + 44 >> 2] = $1; //@line 3593
  HEAP32[$AsyncCtx26 + 48 >> 2] = $0; //@line 3595
  HEAP32[$AsyncCtx26 + 52 >> 2] = $7; //@line 3597
  HEAP32[$AsyncCtx26 + 56 >> 2] = $0; //@line 3599
  HEAP32[$AsyncCtx26 + 60 >> 2] = $3; //@line 3601
  HEAP32[$AsyncCtx26 + 64 >> 2] = $2; //@line 3603
  sp = STACKTOP; //@line 3604
  STACKTOP = sp; //@line 3605
  return 0; //@line 3605
 }
 _emscripten_free_async_context($AsyncCtx26 | 0); //@line 3607
 $AsyncCtx22 = _emscripten_alloc_async_context(68, sp) | 0; //@line 3608
 _mbedtls_platform_zeroize($5, 16); //@line 3609
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 600; //@line 3612
  HEAP32[$AsyncCtx22 + 4 >> 2] = $4; //@line 3614
  HEAP32[$AsyncCtx22 + 8 >> 2] = $5; //@line 3616
  HEAP32[$AsyncCtx22 + 12 >> 2] = $4; //@line 3618
  HEAP32[$AsyncCtx22 + 16 >> 2] = $6; //@line 3620
  HEAP32[$AsyncCtx22 + 20 >> 2] = $16; //@line 3622
  HEAP32[$AsyncCtx22 + 24 >> 2] = $12; //@line 3624
  HEAP32[$AsyncCtx22 + 28 >> 2] = $5; //@line 3626
  HEAP32[$AsyncCtx22 + 32 >> 2] = $12; //@line 3628
  HEAP32[$AsyncCtx22 + 36 >> 2] = $7; //@line 3630
  HEAP32[$AsyncCtx22 + 40 >> 2] = $6; //@line 3632
  HEAP32[$AsyncCtx22 + 44 >> 2] = $1; //@line 3634
  HEAP32[$AsyncCtx22 + 48 >> 2] = $0; //@line 3636
  HEAP32[$AsyncCtx22 + 52 >> 2] = $7; //@line 3638
  HEAP32[$AsyncCtx22 + 56 >> 2] = $0; //@line 3640
  HEAP32[$AsyncCtx22 + 60 >> 2] = $3; //@line 3642
  HEAP32[$AsyncCtx22 + 64 >> 2] = $2; //@line 3644
  sp = STACKTOP; //@line 3645
  STACKTOP = sp; //@line 3646
  return 0; //@line 3646
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 3648
 $AsyncCtx18 = _emscripten_alloc_async_context(76, sp) | 0; //@line 3649
 _mbedtls_platform_zeroize($2, 16); //@line 3650
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 601; //@line 3653
  HEAP32[$AsyncCtx18 + 4 >> 2] = $2; //@line 3655
  HEAP32[$AsyncCtx18 + 8 >> 2] = $4; //@line 3657
  HEAP32[$AsyncCtx18 + 12 >> 2] = $5; //@line 3659
  HEAP32[$AsyncCtx18 + 16 >> 2] = $4; //@line 3661
  HEAP32[$AsyncCtx18 + 20 >> 2] = $6; //@line 3663
  HEAP32[$AsyncCtx18 + 24 >> 2] = $16; //@line 3665
  HEAP32[$AsyncCtx18 + 28 >> 2] = $12; //@line 3667
  HEAP32[$AsyncCtx18 + 32 >> 2] = $5; //@line 3669
  HEAP32[$AsyncCtx18 + 36 >> 2] = $12; //@line 3671
  HEAP32[$AsyncCtx18 + 40 >> 2] = $7; //@line 3673
  HEAP32[$AsyncCtx18 + 44 >> 2] = $6; //@line 3675
  HEAP32[$AsyncCtx18 + 48 >> 2] = $3; //@line 3677
  HEAP32[$AsyncCtx18 + 52 >> 2] = $1; //@line 3679
  HEAP32[$AsyncCtx18 + 56 >> 2] = $0; //@line 3681
  HEAP32[$AsyncCtx18 + 60 >> 2] = $7; //@line 3683
  HEAP32[$AsyncCtx18 + 64 >> 2] = $0; //@line 3685
  HEAP32[$AsyncCtx18 + 68 >> 2] = $3; //@line 3687
  HEAP32[$AsyncCtx18 + 72 >> 2] = $2; //@line 3689
  sp = STACKTOP; //@line 3690
  STACKTOP = sp; //@line 3691
  return 0; //@line 3691
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 3693
 $69 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3696
 $AsyncCtx32 = _emscripten_alloc_async_context(72, sp) | 0; //@line 3697
 $70 = _mbedtls_cipher_update($0, $2, $69, $2, $3) | 0; //@line 3698
 if (___async) {
  HEAP32[$AsyncCtx32 >> 2] = 602; //@line 3701
  HEAP32[$AsyncCtx32 + 4 >> 2] = $2; //@line 3703
  HEAP32[$AsyncCtx32 + 8 >> 2] = $4; //@line 3705
  HEAP32[$AsyncCtx32 + 12 >> 2] = $5; //@line 3707
  HEAP32[$AsyncCtx32 + 16 >> 2] = $4; //@line 3709
  HEAP32[$AsyncCtx32 + 20 >> 2] = $69; //@line 3711
  HEAP32[$AsyncCtx32 + 24 >> 2] = $6; //@line 3713
  HEAP32[$AsyncCtx32 + 28 >> 2] = $16; //@line 3715
  HEAP32[$AsyncCtx32 + 32 >> 2] = $12; //@line 3717
  HEAP32[$AsyncCtx32 + 36 >> 2] = $5; //@line 3719
  HEAP32[$AsyncCtx32 + 40 >> 2] = $12; //@line 3721
  HEAP32[$AsyncCtx32 + 44 >> 2] = $7; //@line 3723
  HEAP32[$AsyncCtx32 + 48 >> 2] = $6; //@line 3725
  HEAP32[$AsyncCtx32 + 52 >> 2] = $3; //@line 3727
  HEAP32[$AsyncCtx32 + 56 >> 2] = $1; //@line 3729
  HEAP32[$AsyncCtx32 + 60 >> 2] = $0; //@line 3731
  HEAP32[$AsyncCtx32 + 64 >> 2] = $7; //@line 3733
  HEAP32[$AsyncCtx32 + 68 >> 2] = $2; //@line 3735
  sp = STACKTOP; //@line 3736
  STACKTOP = sp; //@line 3737
  return 0; //@line 3737
 }
 _emscripten_free_async_context($AsyncCtx32 | 0); //@line 3739
 L22 : do {
  if (!$70) {
   switch ($69 | 0) {
   case 16:
    {
     $$019$i42 = 135; //@line 3745
     break;
    }
   case 8:
    {
     $$019$i42 = 27; //@line 3749
     break;
    }
   default:
    {
     break L22;
    }
   }
   $89 = $69 + -1 | 0; //@line 3756
   $$01720$i45 = 0; //@line 3757
   $$021$i44 = $89; //@line 3757
   while (1) {
    $92 = HEAPU8[$2 + $$021$i44 >> 0] | 0; //@line 3761
    HEAP8[$4 + $$021$i44 >> 0] = $92 << 1 | $$01720$i45; //@line 3766
    if (($$021$i44 | 0) > 0) {
     $$01720$i45 = $92 >>> 7; //@line 3771
     $$021$i44 = $$021$i44 + -1 | 0; //@line 3771
    } else {
     break;
    }
   }
   $105 = $4 + $89 | 0; //@line 3781
   $108 = $$019$i42 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$105 >> 0] | 0); //@line 3784
   HEAP8[$105 >> 0] = $108; //@line 3786
   switch ($69 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 3789
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 3793
     break;
    }
   default:
    {
     break L22;
    }
   }
   HEAP8[$5 + $89 >> 0] = $108 << 1; //@line 3803
   if (($89 | 0) > 0) {
    $116 = $108; //@line 3807
    $117 = $69 + -2 | 0; //@line 3807
    while (1) {
     $116$looptemp = $116;
     $116 = HEAPU8[$4 + $117 >> 0] | 0; //@line 3812
     HEAP8[$5 + $117 >> 0] = $116 << 1 | $116$looptemp >>> 7; //@line 3817
     if (($117 | 0) <= 0) {
      break;
     } else {
      $117 = $117 + -1 | 0; //@line 3821
     }
    }
   }
   $130 = $5 + $89 | 0; //@line 3832
   HEAP8[$130 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$130 >> 0] | 0); //@line 3837
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(64, sp) | 0; //@line 3840
 _mbedtls_platform_zeroize($2, 16); //@line 3841
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 603; //@line 3844
  HEAP32[$AsyncCtx14 + 4 >> 2] = $6; //@line 3846
  HEAP32[$AsyncCtx14 + 8 >> 2] = $16; //@line 3848
  HEAP32[$AsyncCtx14 + 12 >> 2] = $12; //@line 3850
  HEAP32[$AsyncCtx14 + 16 >> 2] = $5; //@line 3852
  HEAP32[$AsyncCtx14 + 20 >> 2] = $12; //@line 3854
  HEAP32[$AsyncCtx14 + 24 >> 2] = $7; //@line 3856
  HEAP32[$AsyncCtx14 + 28 >> 2] = $6; //@line 3858
  HEAP32[$AsyncCtx14 + 32 >> 2] = $4; //@line 3860
  HEAP32[$AsyncCtx14 + 36 >> 2] = $3; //@line 3862
  HEAP32[$AsyncCtx14 + 40 >> 2] = $2; //@line 3864
  HEAP32[$AsyncCtx14 + 44 >> 2] = $4; //@line 3866
  HEAP32[$AsyncCtx14 + 48 >> 2] = $5; //@line 3868
  HEAP32[$AsyncCtx14 + 52 >> 2] = $1; //@line 3870
  HEAP32[$AsyncCtx14 + 56 >> 2] = $0; //@line 3872
  HEAP32[$AsyncCtx14 + 60 >> 2] = $7; //@line 3874
  sp = STACKTOP; //@line 3875
  STACKTOP = sp; //@line 3876
  return 0; //@line 3876
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 3878
 $150 = $12 + 16 | 0; //@line 3879
 $151 = $12 + 32 | 0; //@line 3880
 $152 = HEAP32[$151 >> 2] | 0; //@line 3881
 if ($152 >>> 0 < $16 >>> 0) {
  $$013$i = 0; //@line 3884
  do {
   if ($$013$i >>> 0 < $152 >>> 0) {
    $$sink$sink$i = HEAP8[$12 + 16 + $$013$i >> 0] | 0; //@line 3890
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($152 | 0) ? -128 : 0; //@line 3894
   }
   HEAP8[$6 + $$013$i >> 0] = $$sink$sink$i; //@line 3897
   $$013$i = $$013$i + 1 | 0; //@line 3898
  } while (($$013$i | 0) != ($16 | 0));
  $$09$i = 0; //@line 3901
  do {
   $160 = $6 + $$09$i | 0; //@line 3908
   HEAP8[$160 >> 0] = HEAP8[$5 + $$09$i >> 0] ^ HEAP8[$160 >> 0]; //@line 3913
   $$09$i = $$09$i + 1 | 0; //@line 3914
  } while (($$09$i | 0) != ($16 | 0));
  label = 33; //@line 3917
 } else {
  if ($16 | 0) {
   $$09$i53 = 0; //@line 3926
   do {
    HEAP8[$6 + $$09$i53 >> 0] = HEAP8[$4 + $$09$i53 >> 0] ^ HEAP8[$12 + 16 + $$09$i53 >> 0]; //@line 3934
    $$09$i53 = $$09$i53 + 1 | 0; //@line 3935
   } while (($$09$i53 | 0) != ($16 | 0));
   label = 33; //@line 3938
  }
 }
 if ((label | 0) == 33) {
  if ($16 | 0) {
   $$09$i58 = 0; //@line 3949
   do {
    $177 = $12 + $$09$i58 | 0; //@line 3953
    HEAP8[$177 >> 0] = HEAP8[$177 >> 0] ^ HEAP8[$6 + $$09$i58 >> 0]; //@line 3956
    $$09$i58 = $$09$i58 + 1 | 0; //@line 3957
   } while (($$09$i58 | 0) != ($16 | 0));
  }
 }
 $AsyncCtx29 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3967
 $181 = _mbedtls_cipher_update($0, $12, $16, $12, $7) | 0; //@line 3968
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 604; //@line 3971
  HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 3973
  HEAP32[$AsyncCtx29 + 8 >> 2] = $12; //@line 3975
  HEAP32[$AsyncCtx29 + 12 >> 2] = $16; //@line 3977
  HEAP32[$AsyncCtx29 + 16 >> 2] = $4; //@line 3979
  HEAP32[$AsyncCtx29 + 20 >> 2] = $5; //@line 3981
  HEAP32[$AsyncCtx29 + 24 >> 2] = $151; //@line 3983
  HEAP32[$AsyncCtx29 + 28 >> 2] = $150; //@line 3985
  HEAP32[$AsyncCtx29 + 32 >> 2] = $7; //@line 3987
  HEAP32[$AsyncCtx29 + 36 >> 2] = $6; //@line 3989
  sp = STACKTOP; //@line 3990
  STACKTOP = sp; //@line 3991
  return 0; //@line 3991
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 3993
 if (!$181) {
  _memcpy($1 | 0, $12 | 0, $16 | 0) | 0; //@line 3996
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 3998
 _mbedtls_platform_zeroize($4, 16); //@line 3999
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 605; //@line 4002
  HEAP32[$AsyncCtx11 + 4 >> 2] = $5; //@line 4004
  HEAP32[$AsyncCtx11 + 8 >> 2] = $151; //@line 4006
  HEAP32[$AsyncCtx11 + 12 >> 2] = $150; //@line 4008
  HEAP32[$AsyncCtx11 + 16 >> 2] = $12; //@line 4010
  HEAP32[$AsyncCtx11 + 20 >> 2] = $181; //@line 4012
  HEAP32[$AsyncCtx11 + 24 >> 2] = $7; //@line 4014
  HEAP32[$AsyncCtx11 + 28 >> 2] = $6; //@line 4016
  HEAP32[$AsyncCtx11 + 32 >> 2] = $4; //@line 4018
  sp = STACKTOP; //@line 4019
  STACKTOP = sp; //@line 4020
  return 0; //@line 4020
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4022
 $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 4023
 _mbedtls_platform_zeroize($5, 16); //@line 4024
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 606; //@line 4027
  HEAP32[$AsyncCtx7 + 4 >> 2] = $151; //@line 4029
  HEAP32[$AsyncCtx7 + 8 >> 2] = $150; //@line 4031
  HEAP32[$AsyncCtx7 + 12 >> 2] = $12; //@line 4033
  HEAP32[$AsyncCtx7 + 16 >> 2] = $181; //@line 4035
  HEAP32[$AsyncCtx7 + 20 >> 2] = $7; //@line 4037
  HEAP32[$AsyncCtx7 + 24 >> 2] = $6; //@line 4039
  HEAP32[$AsyncCtx7 + 28 >> 2] = $5; //@line 4041
  HEAP32[$AsyncCtx7 + 32 >> 2] = $4; //@line 4043
  sp = STACKTOP; //@line 4044
  STACKTOP = sp; //@line 4045
  return 0; //@line 4045
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4047
 HEAP32[$151 >> 2] = 0; //@line 4048
 $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4049
 _mbedtls_platform_zeroize($150, 16); //@line 4050
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 607; //@line 4053
  HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 4055
  HEAP32[$AsyncCtx3 + 8 >> 2] = $181; //@line 4057
  HEAP32[$AsyncCtx3 + 12 >> 2] = $7; //@line 4059
  HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 4061
  HEAP32[$AsyncCtx3 + 20 >> 2] = $5; //@line 4063
  HEAP32[$AsyncCtx3 + 24 >> 2] = $4; //@line 4065
  sp = STACKTOP; //@line 4066
  STACKTOP = sp; //@line 4067
  return 0; //@line 4067
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4069
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 4070
 _mbedtls_platform_zeroize($12, 16); //@line 4071
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 608; //@line 4074
  HEAP32[$AsyncCtx + 4 >> 2] = $181; //@line 4076
  HEAP32[$AsyncCtx + 8 >> 2] = $7; //@line 4078
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 4080
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4082
  HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 4084
  sp = STACKTOP; //@line 4085
  STACKTOP = sp; //@line 4086
  return 0; //@line 4086
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4088
 $$0 = $181; //@line 4089
 STACKTOP = sp; //@line 4090
 return $$0 | 0; //@line 4090
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $115 = 0, $12 = 0, $120 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19821
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19823
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19825
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19827
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19829
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19831
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19833
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19835
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19837
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19839
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19841
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19843
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19845
 HEAP8[$10 + 2900 >> 0] = 0; //@line 19847
 HEAP8[$10 + 2898 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 14 >> 0] | 0; //@line 19852
 HEAP16[$10 + 2896 >> 1] = HEAP16[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 24 >> 1] | 0; //@line 19857
 HEAP8[$10 + 2899 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 26 >> 0] | 0; //@line 19862
 if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac25post_process_mlme_requestEv($2); //@line 19867
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 19868
  __ZN12LoRaWANStack20mlme_confirm_handlerEv($10); //@line 19869
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 292; //@line 19872
   $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 19873
   HEAP32[$41 >> 2] = $2; //@line 19874
   $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 19875
   HEAP32[$42 >> 2] = $4; //@line 19876
   $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 19877
   HEAP32[$43 >> 2] = $6; //@line 19878
   $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 19879
   HEAP32[$44 >> 2] = $8; //@line 19880
   $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 19881
   HEAP32[$45 >> 2] = $10; //@line 19882
   $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 19883
   HEAP32[$46 >> 2] = $12; //@line 19884
   $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 19885
   HEAP32[$47 >> 2] = $14; //@line 19886
   $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 19887
   HEAP32[$48 >> 2] = $16; //@line 19888
   $49 = $ReallocAsyncCtx3 + 36 | 0; //@line 19889
   HEAP32[$49 >> 2] = $18; //@line 19890
   $50 = $ReallocAsyncCtx3 + 40 | 0; //@line 19891
   HEAP32[$50 >> 2] = $20; //@line 19892
   $51 = $ReallocAsyncCtx3 + 44 | 0; //@line 19893
   HEAP32[$51 >> 2] = $22; //@line 19894
   $52 = $ReallocAsyncCtx3 + 48 | 0; //@line 19895
   HEAP32[$52 >> 2] = $24; //@line 19896
   sp = STACKTOP; //@line 19897
   return;
  }
  ___async_unwind = 0; //@line 19900
  HEAP32[$ReallocAsyncCtx3 >> 2] = 292; //@line 19901
  $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 19902
  HEAP32[$41 >> 2] = $2; //@line 19903
  $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 19904
  HEAP32[$42 >> 2] = $4; //@line 19905
  $43 = $ReallocAsyncCtx3 + 12 | 0; //@line 19906
  HEAP32[$43 >> 2] = $6; //@line 19907
  $44 = $ReallocAsyncCtx3 + 16 | 0; //@line 19908
  HEAP32[$44 >> 2] = $8; //@line 19909
  $45 = $ReallocAsyncCtx3 + 20 | 0; //@line 19910
  HEAP32[$45 >> 2] = $10; //@line 19911
  $46 = $ReallocAsyncCtx3 + 24 | 0; //@line 19912
  HEAP32[$46 >> 2] = $12; //@line 19913
  $47 = $ReallocAsyncCtx3 + 28 | 0; //@line 19914
  HEAP32[$47 >> 2] = $14; //@line 19915
  $48 = $ReallocAsyncCtx3 + 32 | 0; //@line 19916
  HEAP32[$48 >> 2] = $16; //@line 19917
  $49 = $ReallocAsyncCtx3 + 36 | 0; //@line 19918
  HEAP32[$49 >> 2] = $18; //@line 19919
  $50 = $ReallocAsyncCtx3 + 40 | 0; //@line 19920
  HEAP32[$50 >> 2] = $20; //@line 19921
  $51 = $ReallocAsyncCtx3 + 44 | 0; //@line 19922
  HEAP32[$51 >> 2] = $22; //@line 19923
  $52 = $ReallocAsyncCtx3 + 48 | 0; //@line 19924
  HEAP32[$52 >> 2] = $24; //@line 19925
  sp = STACKTOP; //@line 19926
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 19937
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 16; //@line 19940
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 19941
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 19942
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 295; //@line 19945
   $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 19946
   HEAP32[$90 >> 2] = $2; //@line 19947
   $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 19948
   HEAP32[$91 >> 2] = $8; //@line 19949
   $92 = $ReallocAsyncCtx5 + 12 | 0; //@line 19950
   HEAP32[$92 >> 2] = $10; //@line 19951
   $93 = $ReallocAsyncCtx5 + 16 | 0; //@line 19952
   HEAP32[$93 >> 2] = $20; //@line 19953
   $94 = $ReallocAsyncCtx5 + 20 | 0; //@line 19954
   HEAP32[$94 >> 2] = $12; //@line 19955
   $95 = $ReallocAsyncCtx5 + 24 | 0; //@line 19956
   HEAP32[$95 >> 2] = $14; //@line 19957
   $96 = $ReallocAsyncCtx5 + 28 | 0; //@line 19958
   HEAP32[$96 >> 2] = $16; //@line 19959
   $97 = $ReallocAsyncCtx5 + 32 | 0; //@line 19960
   HEAP32[$97 >> 2] = $18; //@line 19961
   sp = STACKTOP; //@line 19962
   return;
  }
  ___async_unwind = 0; //@line 19965
  HEAP32[$ReallocAsyncCtx5 >> 2] = 295; //@line 19966
  $90 = $ReallocAsyncCtx5 + 4 | 0; //@line 19967
  HEAP32[$90 >> 2] = $2; //@line 19968
  $91 = $ReallocAsyncCtx5 + 8 | 0; //@line 19969
  HEAP32[$91 >> 2] = $8; //@line 19970
  $92 = $ReallocAsyncCtx5 + 12 | 0; //@line 19971
  HEAP32[$92 >> 2] = $10; //@line 19972
  $93 = $ReallocAsyncCtx5 + 16 | 0; //@line 19973
  HEAP32[$93 >> 2] = $20; //@line 19974
  $94 = $ReallocAsyncCtx5 + 20 | 0; //@line 19975
  HEAP32[$94 >> 2] = $12; //@line 19976
  $95 = $ReallocAsyncCtx5 + 24 | 0; //@line 19977
  HEAP32[$95 >> 2] = $14; //@line 19978
  $96 = $ReallocAsyncCtx5 + 28 | 0; //@line 19979
  HEAP32[$96 >> 2] = $16; //@line 19980
  $97 = $ReallocAsyncCtx5 + 32 | 0; //@line 19981
  HEAP32[$97 >> 2] = $18; //@line 19982
  sp = STACKTOP; //@line 19983
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$4 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 19995
  _mbed_tracef(16, 12021, 12232, $4); //@line 19996
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 19997
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -18 | 16; //@line 20001
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 20002
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 20003
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 293; //@line 20006
   $68 = $ReallocAsyncCtx7 + 4 | 0; //@line 20007
   HEAP32[$68 >> 2] = $2; //@line 20008
   $69 = $ReallocAsyncCtx7 + 8 | 0; //@line 20009
   HEAP32[$69 >> 2] = $8; //@line 20010
   $70 = $ReallocAsyncCtx7 + 12 | 0; //@line 20011
   HEAP32[$70 >> 2] = $10; //@line 20012
   $71 = $ReallocAsyncCtx7 + 16 | 0; //@line 20013
   HEAP32[$71 >> 2] = $20; //@line 20014
   $72 = $ReallocAsyncCtx7 + 20 | 0; //@line 20015
   HEAP32[$72 >> 2] = $12; //@line 20016
   $73 = $ReallocAsyncCtx7 + 24 | 0; //@line 20017
   HEAP32[$73 >> 2] = $14; //@line 20018
   $74 = $ReallocAsyncCtx7 + 28 | 0; //@line 20019
   HEAP32[$74 >> 2] = $16; //@line 20020
   $75 = $ReallocAsyncCtx7 + 32 | 0; //@line 20021
   HEAP32[$75 >> 2] = $18; //@line 20022
   sp = STACKTOP; //@line 20023
   return;
  }
  ___async_unwind = 0; //@line 20026
  HEAP32[$ReallocAsyncCtx7 >> 2] = 293; //@line 20027
  $68 = $ReallocAsyncCtx7 + 4 | 0; //@line 20028
  HEAP32[$68 >> 2] = $2; //@line 20029
  $69 = $ReallocAsyncCtx7 + 8 | 0; //@line 20030
  HEAP32[$69 >> 2] = $8; //@line 20031
  $70 = $ReallocAsyncCtx7 + 12 | 0; //@line 20032
  HEAP32[$70 >> 2] = $10; //@line 20033
  $71 = $ReallocAsyncCtx7 + 16 | 0; //@line 20034
  HEAP32[$71 >> 2] = $20; //@line 20035
  $72 = $ReallocAsyncCtx7 + 20 | 0; //@line 20036
  HEAP32[$72 >> 2] = $12; //@line 20037
  $73 = $ReallocAsyncCtx7 + 24 | 0; //@line 20038
  HEAP32[$73 >> 2] = $14; //@line 20039
  $74 = $ReallocAsyncCtx7 + 28 | 0; //@line 20040
  HEAP32[$74 >> 2] = $16; //@line 20041
  $75 = $ReallocAsyncCtx7 + 32 | 0; //@line 20042
  HEAP32[$75 >> 2] = $18; //@line 20043
  sp = STACKTOP; //@line 20044
  return;
 }
 if (!(__ZN7LoRaMac24continue_sending_processEv($2) | 0)) {
  _mbed_tracef(2, 12021, 12026, $22); //@line 20049
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -18 | 1; //@line 20053
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 20054
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 20055
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 294; //@line 20058
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 20059
   HEAP32[$80 >> 2] = $2; //@line 20060
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 20061
   HEAP32[$81 >> 2] = $8; //@line 20062
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 20063
   HEAP32[$82 >> 2] = $10; //@line 20064
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 20065
   HEAP32[$83 >> 2] = $20; //@line 20066
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 20067
   HEAP32[$84 >> 2] = $12; //@line 20068
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 20069
   HEAP32[$85 >> 2] = $14; //@line 20070
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 20071
   HEAP32[$86 >> 2] = $16; //@line 20072
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 20073
   HEAP32[$87 >> 2] = $18; //@line 20074
   sp = STACKTOP; //@line 20075
   return;
  }
  ___async_unwind = 0; //@line 20078
  HEAP32[$ReallocAsyncCtx6 >> 2] = 294; //@line 20079
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 20080
  HEAP32[$80 >> 2] = $2; //@line 20081
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 20082
  HEAP32[$81 >> 2] = $8; //@line 20083
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 20084
  HEAP32[$82 >> 2] = $10; //@line 20085
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 20086
  HEAP32[$83 >> 2] = $20; //@line 20087
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 20088
  HEAP32[$84 >> 2] = $12; //@line 20089
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 20090
  HEAP32[$85 >> 2] = $14; //@line 20091
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 20092
  HEAP32[$86 >> 2] = $16; //@line 20093
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 20094
  HEAP32[$87 >> 2] = $18; //@line 20095
  sp = STACKTOP; //@line 20096
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 20103
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 2; //@line 20106
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 20107
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 20108
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20111
   $103 = $ReallocAsyncCtx4 + 4 | 0; //@line 20112
   HEAP32[$103 >> 2] = $8; //@line 20113
   $104 = $ReallocAsyncCtx4 + 8 | 0; //@line 20114
   HEAP32[$104 >> 2] = $2; //@line 20115
   $105 = $ReallocAsyncCtx4 + 12 | 0; //@line 20116
   HEAP32[$105 >> 2] = $20; //@line 20117
   $106 = $ReallocAsyncCtx4 + 16 | 0; //@line 20118
   HEAP32[$106 >> 2] = $10; //@line 20119
   $107 = $ReallocAsyncCtx4 + 20 | 0; //@line 20120
   HEAP32[$107 >> 2] = $12; //@line 20121
   $108 = $ReallocAsyncCtx4 + 24 | 0; //@line 20122
   HEAP32[$108 >> 2] = $14; //@line 20123
   $109 = $ReallocAsyncCtx4 + 28 | 0; //@line 20124
   HEAP32[$109 >> 2] = $16; //@line 20125
   $110 = $ReallocAsyncCtx4 + 32 | 0; //@line 20126
   HEAP32[$110 >> 2] = $18; //@line 20127
   sp = STACKTOP; //@line 20128
   return;
  }
  ___async_unwind = 0; //@line 20131
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20132
  $103 = $ReallocAsyncCtx4 + 4 | 0; //@line 20133
  HEAP32[$103 >> 2] = $8; //@line 20134
  $104 = $ReallocAsyncCtx4 + 8 | 0; //@line 20135
  HEAP32[$104 >> 2] = $2; //@line 20136
  $105 = $ReallocAsyncCtx4 + 12 | 0; //@line 20137
  HEAP32[$105 >> 2] = $20; //@line 20138
  $106 = $ReallocAsyncCtx4 + 16 | 0; //@line 20139
  HEAP32[$106 >> 2] = $10; //@line 20140
  $107 = $ReallocAsyncCtx4 + 20 | 0; //@line 20141
  HEAP32[$107 >> 2] = $12; //@line 20142
  $108 = $ReallocAsyncCtx4 + 24 | 0; //@line 20143
  HEAP32[$108 >> 2] = $14; //@line 20144
  $109 = $ReallocAsyncCtx4 + 28 | 0; //@line 20145
  HEAP32[$109 >> 2] = $16; //@line 20146
  $110 = $ReallocAsyncCtx4 + 32 | 0; //@line 20147
  HEAP32[$110 >> 2] = $18; //@line 20148
  sp = STACKTOP; //@line 20149
  return;
 }
 if (!(HEAP32[$8 >> 2] & 1)) {
  $115 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 20157
  HEAP32[$20 >> 2] = $115 ? 5 : 2; //@line 20159
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$10 + 2911 >> 0] = 1; //@line 20167
  return;
 }
 _mbed_tracef(16, 12021, 12252, $12); //@line 20170
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 20171
 _mbed_tracef(16, 12021, 12276, $16); //@line 20172
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20173
 __ZN12LoRaWANStack23mlme_indication_handlerEv($10); //@line 20174
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20177
  $120 = $ReallocAsyncCtx2 + 4 | 0; //@line 20178
  HEAP32[$120 >> 2] = $10; //@line 20179
  sp = STACKTOP; //@line 20180
  return;
 }
 ___async_unwind = 0; //@line 20183
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20184
 $120 = $ReallocAsyncCtx2 + 4 | 0; //@line 20185
 HEAP32[$120 >> 2] = $10; //@line 20186
 sp = STACKTOP; //@line 20187
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_391($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28396
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28398
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28400
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28402
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28404
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28406
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28408
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28410
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28412
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28414
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28416
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28418
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28420
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28422
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28424
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28426
 $36 = (HEAP8[$0 + 65 >> 0] | 0) + 1 << 24 >> 24; //@line 28431
 if (($36 & 255) >= (HEAPU8[$6 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 64 >> 0] | 0) + 3 & 255; //@line 28439
 if (((HEAPU8[$4 >> 0] | 0) + (HEAPU8[$30 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 28448
  $58 = HEAPU8[$22 + ($42 + 2) >> 0] << 16 | (HEAPU8[$22 + ($42 + 1) >> 0] << 8 | HEAPU8[$22 + $42 >> 0]); //@line 28463
  $59 = $58 * 100 | 0; //@line 28464
  HEAP32[$24 >> 2] = $59; //@line 28465
  HEAP32[$26 >> 2] = 0; //@line 28466
  if ($58 | 0) {
   if (!(HEAP8[$18 >> 0] | 0)) {
    HEAP8[$12 >> 0] = -1; //@line 28473
    $91 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 28476
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(68) | 0; //@line 28477
    FUNCTION_TABLE_iiii[$91 & 31]($10, $16, $36) | 0; //@line 28478
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 515; //@line 28481
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 28482
     HEAP32[$92 >> 2] = $2; //@line 28483
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 28484
     HEAP32[$93 >> 2] = $4; //@line 28485
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 28486
     HEAP32[$94 >> 2] = $6; //@line 28487
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 28488
     HEAP32[$95 >> 2] = $8; //@line 28489
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 28490
     HEAP32[$96 >> 2] = $10; //@line 28491
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 28492
     HEAP32[$97 >> 2] = $12; //@line 28493
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 28494
     HEAP32[$98 >> 2] = $14; //@line 28495
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 28496
     HEAP32[$99 >> 2] = $16; //@line 28497
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 28498
     HEAP32[$100 >> 2] = $18; //@line 28499
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 28500
     HEAP32[$101 >> 2] = $20; //@line 28501
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 28502
     HEAP32[$102 >> 2] = $22; //@line 28503
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 28504
     HEAP32[$103 >> 2] = $24; //@line 28505
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 28506
     HEAP32[$104 >> 2] = $26; //@line 28507
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 28508
     HEAP32[$105 >> 2] = $28; //@line 28509
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 28510
     HEAP32[$106 >> 2] = $30; //@line 28511
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 28512
     HEAP8[$107 >> 0] = $43; //@line 28513
     $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 28514
     HEAP8[$108 >> 0] = $36; //@line 28515
     sp = STACKTOP; //@line 28516
     return;
    }
    ___async_unwind = 0; //@line 28519
    HEAP32[$ReallocAsyncCtx2 >> 2] = 515; //@line 28520
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 28521
    HEAP32[$92 >> 2] = $2; //@line 28522
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 28523
    HEAP32[$93 >> 2] = $4; //@line 28524
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 28525
    HEAP32[$94 >> 2] = $6; //@line 28526
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 28527
    HEAP32[$95 >> 2] = $8; //@line 28528
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 28529
    HEAP32[$96 >> 2] = $10; //@line 28530
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 28531
    HEAP32[$97 >> 2] = $12; //@line 28532
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 28533
    HEAP32[$98 >> 2] = $14; //@line 28534
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 28535
    HEAP32[$99 >> 2] = $16; //@line 28536
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 28537
    HEAP32[$100 >> 2] = $18; //@line 28538
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 28539
    HEAP32[$101 >> 2] = $20; //@line 28540
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 28541
    HEAP32[$102 >> 2] = $22; //@line 28542
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 28543
    HEAP32[$103 >> 2] = $24; //@line 28544
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 28545
    HEAP32[$104 >> 2] = $26; //@line 28546
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 28547
    HEAP32[$105 >> 2] = $28; //@line 28548
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 28549
    HEAP32[$106 >> 2] = $30; //@line 28550
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 28551
    HEAP8[$107 >> 0] = $43; //@line 28552
    $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 28553
    HEAP8[$108 >> 0] = $36; //@line 28554
    sp = STACKTOP; //@line 28555
    return;
   } else {
    $65 = HEAP32[(HEAP32[$20 >> 2] | 0) + 76 >> 2] | 0; //@line 28560
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 28562
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($10, $59, 0) | 0; //@line 28563
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 514; //@line 28566
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 28567
     HEAP32[$68 >> 2] = $2; //@line 28568
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 28569
     HEAP8[$69 >> 0] = $43; //@line 28570
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 28571
     HEAP32[$70 >> 2] = $4; //@line 28572
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 28573
     HEAP8[$71 >> 0] = $36; //@line 28574
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 28575
     HEAP32[$72 >> 2] = $6; //@line 28576
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 28577
     HEAP32[$73 >> 2] = $8; //@line 28578
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 28579
     HEAP32[$74 >> 2] = $10; //@line 28580
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 28581
     HEAP32[$75 >> 2] = 0; //@line 28582
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 28583
     HEAP32[$76 >> 2] = $12; //@line 28584
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 28585
     HEAP32[$77 >> 2] = $14; //@line 28586
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 28587
     HEAP32[$78 >> 2] = $16; //@line 28588
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 28589
     HEAP32[$79 >> 2] = $18; //@line 28590
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 28591
     HEAP32[$80 >> 2] = $20; //@line 28592
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 28593
     HEAP32[$81 >> 2] = $59; //@line 28594
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 28595
     HEAP32[$82 >> 2] = $22; //@line 28596
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 28597
     HEAP32[$83 >> 2] = $24; //@line 28598
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 28599
     HEAP32[$84 >> 2] = $26; //@line 28600
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 28601
     HEAP32[$85 >> 2] = $28; //@line 28602
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 28603
     HEAP32[$86 >> 2] = $30; //@line 28604
     sp = STACKTOP; //@line 28605
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 28610
    ___async_unwind = 0; //@line 28611
    HEAP32[$ReallocAsyncCtx >> 2] = 514; //@line 28612
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 28613
    HEAP32[$68 >> 2] = $2; //@line 28614
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 28615
    HEAP8[$69 >> 0] = $43; //@line 28616
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 28617
    HEAP32[$70 >> 2] = $4; //@line 28618
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 28619
    HEAP8[$71 >> 0] = $36; //@line 28620
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 28621
    HEAP32[$72 >> 2] = $6; //@line 28622
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 28623
    HEAP32[$73 >> 2] = $8; //@line 28624
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 28625
    HEAP32[$74 >> 2] = $10; //@line 28626
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 28627
    HEAP32[$75 >> 2] = 0; //@line 28628
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 28629
    HEAP32[$76 >> 2] = $12; //@line 28630
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 28631
    HEAP32[$77 >> 2] = $14; //@line 28632
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 28633
    HEAP32[$78 >> 2] = $16; //@line 28634
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 28635
    HEAP32[$79 >> 2] = $18; //@line 28636
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 28637
    HEAP32[$80 >> 2] = $20; //@line 28638
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 28639
    HEAP32[$81 >> 2] = $59; //@line 28640
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 28641
    HEAP32[$82 >> 2] = $22; //@line 28642
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 28643
    HEAP32[$83 >> 2] = $24; //@line 28644
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 28645
    HEAP32[$84 >> 2] = $26; //@line 28646
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 28647
    HEAP32[$85 >> 2] = $28; //@line 28648
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 28649
    HEAP32[$86 >> 2] = $30; //@line 28650
    sp = STACKTOP; //@line 28651
    return;
   }
  }
 } else {
  HEAP32[$24 >> 2] = 0; //@line 28656
  HEAP8[$28 >> 0] = 0; //@line 28657
  HEAP32[$26 >> 2] = 0; //@line 28658
 }
 $111 = HEAP32[(HEAP32[$8 >> 2] | 0) + 64 >> 2] | 0; //@line 28662
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 28663
 FUNCTION_TABLE_iii[$111 & 31]($10, $36) | 0; //@line 28664
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 516; //@line 28667
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 28668
  HEAP32[$112 >> 2] = $2; //@line 28669
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 28670
  HEAP32[$113 >> 2] = $4; //@line 28671
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 28672
  HEAP32[$114 >> 2] = $6; //@line 28673
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 28674
  HEAP32[$115 >> 2] = $8; //@line 28675
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 28676
  HEAP32[$116 >> 2] = $10; //@line 28677
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 28678
  HEAP32[$117 >> 2] = $12; //@line 28679
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 28680
  HEAP32[$118 >> 2] = $14; //@line 28681
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 28682
  HEAP32[$119 >> 2] = $16; //@line 28683
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 28684
  HEAP32[$120 >> 2] = $18; //@line 28685
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 28686
  HEAP32[$121 >> 2] = $20; //@line 28687
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 28688
  HEAP32[$122 >> 2] = $22; //@line 28689
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 28690
  HEAP32[$123 >> 2] = $24; //@line 28691
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 28692
  HEAP32[$124 >> 2] = $26; //@line 28693
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 28694
  HEAP32[$125 >> 2] = $28; //@line 28695
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 28696
  HEAP32[$126 >> 2] = $30; //@line 28697
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 28698
  HEAP8[$127 >> 0] = $43; //@line 28699
  $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 28700
  HEAP8[$128 >> 0] = $36; //@line 28701
  sp = STACKTOP; //@line 28702
  return;
 }
 ___async_unwind = 0; //@line 28705
 HEAP32[$ReallocAsyncCtx3 >> 2] = 516; //@line 28706
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 28707
 HEAP32[$112 >> 2] = $2; //@line 28708
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 28709
 HEAP32[$113 >> 2] = $4; //@line 28710
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 28711
 HEAP32[$114 >> 2] = $6; //@line 28712
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 28713
 HEAP32[$115 >> 2] = $8; //@line 28714
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 28715
 HEAP32[$116 >> 2] = $10; //@line 28716
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 28717
 HEAP32[$117 >> 2] = $12; //@line 28718
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 28719
 HEAP32[$118 >> 2] = $14; //@line 28720
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 28721
 HEAP32[$119 >> 2] = $16; //@line 28722
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 28723
 HEAP32[$120 >> 2] = $18; //@line 28724
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 28725
 HEAP32[$121 >> 2] = $20; //@line 28726
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 28727
 HEAP32[$122 >> 2] = $22; //@line 28728
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 28729
 HEAP32[$123 >> 2] = $24; //@line 28730
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 28731
 HEAP32[$124 >> 2] = $26; //@line 28732
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 28733
 HEAP32[$125 >> 2] = $28; //@line 28734
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 28735
 HEAP32[$126 >> 2] = $30; //@line 28736
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 28737
 HEAP8[$127 >> 0] = $43; //@line 28738
 $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 28739
 HEAP8[$128 >> 0] = $36; //@line 28740
 sp = STACKTOP; //@line 28741
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_390($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $36 = 0, $4 = 0, $42 = 0, $43 = 0, $58 = 0, $59 = 0, $6 = 0, $65 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28038
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28040
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28042
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28044
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28046
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28048
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28050
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28052
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28054
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28056
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 28058
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 28060
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 28062
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 28064
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 28066
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 28068
 $36 = (HEAP8[$0 + 65 >> 0] | 0) + 1 << 24 >> 24; //@line 28073
 if (($36 & 255) >= (HEAPU8[$6 >> 0] | 0)) {
  return;
 }
 $43 = (HEAPU8[$0 + 64 >> 0] | 0) + 3 & 255; //@line 28081
 if (((HEAPU8[$4 >> 0] | 0) + (HEAPU8[$30 >> 0] | 0) | 0) >>> 0 > ($36 & 255) >>> 0) {
  $42 = $43 & 255; //@line 28090
  $58 = HEAPU8[$22 + ($42 + 2) >> 0] << 16 | (HEAPU8[$22 + ($42 + 1) >> 0] << 8 | HEAPU8[$22 + $42 >> 0]); //@line 28105
  $59 = $58 * 100 | 0; //@line 28106
  HEAP32[$24 >> 2] = $59; //@line 28107
  HEAP32[$26 >> 2] = 0; //@line 28108
  if ($58 | 0) {
   if (!(HEAP8[$18 >> 0] | 0)) {
    HEAP8[$12 >> 0] = -1; //@line 28115
    $91 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 28118
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(68) | 0; //@line 28119
    FUNCTION_TABLE_iiii[$91 & 31]($10, $16, $36) | 0; //@line 28120
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 515; //@line 28123
     $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 28124
     HEAP32[$92 >> 2] = $2; //@line 28125
     $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 28126
     HEAP32[$93 >> 2] = $4; //@line 28127
     $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 28128
     HEAP32[$94 >> 2] = $6; //@line 28129
     $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 28130
     HEAP32[$95 >> 2] = $8; //@line 28131
     $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 28132
     HEAP32[$96 >> 2] = $10; //@line 28133
     $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 28134
     HEAP32[$97 >> 2] = $12; //@line 28135
     $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 28136
     HEAP32[$98 >> 2] = $14; //@line 28137
     $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 28138
     HEAP32[$99 >> 2] = $16; //@line 28139
     $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 28140
     HEAP32[$100 >> 2] = $18; //@line 28141
     $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 28142
     HEAP32[$101 >> 2] = $20; //@line 28143
     $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 28144
     HEAP32[$102 >> 2] = $22; //@line 28145
     $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 28146
     HEAP32[$103 >> 2] = $24; //@line 28147
     $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 28148
     HEAP32[$104 >> 2] = $26; //@line 28149
     $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 28150
     HEAP32[$105 >> 2] = $28; //@line 28151
     $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 28152
     HEAP32[$106 >> 2] = $30; //@line 28153
     $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 28154
     HEAP8[$107 >> 0] = $43; //@line 28155
     $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 28156
     HEAP8[$108 >> 0] = $36; //@line 28157
     sp = STACKTOP; //@line 28158
     return;
    }
    ___async_unwind = 0; //@line 28161
    HEAP32[$ReallocAsyncCtx2 >> 2] = 515; //@line 28162
    $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 28163
    HEAP32[$92 >> 2] = $2; //@line 28164
    $93 = $ReallocAsyncCtx2 + 8 | 0; //@line 28165
    HEAP32[$93 >> 2] = $4; //@line 28166
    $94 = $ReallocAsyncCtx2 + 12 | 0; //@line 28167
    HEAP32[$94 >> 2] = $6; //@line 28168
    $95 = $ReallocAsyncCtx2 + 16 | 0; //@line 28169
    HEAP32[$95 >> 2] = $8; //@line 28170
    $96 = $ReallocAsyncCtx2 + 20 | 0; //@line 28171
    HEAP32[$96 >> 2] = $10; //@line 28172
    $97 = $ReallocAsyncCtx2 + 24 | 0; //@line 28173
    HEAP32[$97 >> 2] = $12; //@line 28174
    $98 = $ReallocAsyncCtx2 + 28 | 0; //@line 28175
    HEAP32[$98 >> 2] = $14; //@line 28176
    $99 = $ReallocAsyncCtx2 + 32 | 0; //@line 28177
    HEAP32[$99 >> 2] = $16; //@line 28178
    $100 = $ReallocAsyncCtx2 + 36 | 0; //@line 28179
    HEAP32[$100 >> 2] = $18; //@line 28180
    $101 = $ReallocAsyncCtx2 + 40 | 0; //@line 28181
    HEAP32[$101 >> 2] = $20; //@line 28182
    $102 = $ReallocAsyncCtx2 + 44 | 0; //@line 28183
    HEAP32[$102 >> 2] = $22; //@line 28184
    $103 = $ReallocAsyncCtx2 + 48 | 0; //@line 28185
    HEAP32[$103 >> 2] = $24; //@line 28186
    $104 = $ReallocAsyncCtx2 + 52 | 0; //@line 28187
    HEAP32[$104 >> 2] = $26; //@line 28188
    $105 = $ReallocAsyncCtx2 + 56 | 0; //@line 28189
    HEAP32[$105 >> 2] = $28; //@line 28190
    $106 = $ReallocAsyncCtx2 + 60 | 0; //@line 28191
    HEAP32[$106 >> 2] = $30; //@line 28192
    $107 = $ReallocAsyncCtx2 + 64 | 0; //@line 28193
    HEAP8[$107 >> 0] = $43; //@line 28194
    $108 = $ReallocAsyncCtx2 + 65 | 0; //@line 28195
    HEAP8[$108 >> 0] = $36; //@line 28196
    sp = STACKTOP; //@line 28197
    return;
   } else {
    $65 = HEAP32[(HEAP32[$20 >> 2] | 0) + 76 >> 2] | 0; //@line 28202
    $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 28204
    $67 = FUNCTION_TABLE_iiii[$65 & 31]($10, $59, 0) | 0; //@line 28205
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 514; //@line 28208
     $68 = $ReallocAsyncCtx + 4 | 0; //@line 28209
     HEAP32[$68 >> 2] = $2; //@line 28210
     $69 = $ReallocAsyncCtx + 8 | 0; //@line 28211
     HEAP8[$69 >> 0] = $43; //@line 28212
     $70 = $ReallocAsyncCtx + 12 | 0; //@line 28213
     HEAP32[$70 >> 2] = $4; //@line 28214
     $71 = $ReallocAsyncCtx + 16 | 0; //@line 28215
     HEAP8[$71 >> 0] = $36; //@line 28216
     $72 = $ReallocAsyncCtx + 20 | 0; //@line 28217
     HEAP32[$72 >> 2] = $6; //@line 28218
     $73 = $ReallocAsyncCtx + 24 | 0; //@line 28219
     HEAP32[$73 >> 2] = $8; //@line 28220
     $74 = $ReallocAsyncCtx + 28 | 0; //@line 28221
     HEAP32[$74 >> 2] = $10; //@line 28222
     $75 = $ReallocAsyncCtx + 32 | 0; //@line 28223
     HEAP32[$75 >> 2] = 0; //@line 28224
     $76 = $ReallocAsyncCtx + 36 | 0; //@line 28225
     HEAP32[$76 >> 2] = $12; //@line 28226
     $77 = $ReallocAsyncCtx + 40 | 0; //@line 28227
     HEAP32[$77 >> 2] = $14; //@line 28228
     $78 = $ReallocAsyncCtx + 44 | 0; //@line 28229
     HEAP32[$78 >> 2] = $16; //@line 28230
     $79 = $ReallocAsyncCtx + 48 | 0; //@line 28231
     HEAP32[$79 >> 2] = $18; //@line 28232
     $80 = $ReallocAsyncCtx + 52 | 0; //@line 28233
     HEAP32[$80 >> 2] = $20; //@line 28234
     $81 = $ReallocAsyncCtx + 56 | 0; //@line 28235
     HEAP32[$81 >> 2] = $59; //@line 28236
     $82 = $ReallocAsyncCtx + 60 | 0; //@line 28237
     HEAP32[$82 >> 2] = $22; //@line 28238
     $83 = $ReallocAsyncCtx + 64 | 0; //@line 28239
     HEAP32[$83 >> 2] = $24; //@line 28240
     $84 = $ReallocAsyncCtx + 68 | 0; //@line 28241
     HEAP32[$84 >> 2] = $26; //@line 28242
     $85 = $ReallocAsyncCtx + 72 | 0; //@line 28243
     HEAP32[$85 >> 2] = $28; //@line 28244
     $86 = $ReallocAsyncCtx + 76 | 0; //@line 28245
     HEAP32[$86 >> 2] = $30; //@line 28246
     sp = STACKTOP; //@line 28247
     return;
    }
    HEAP8[___async_retval >> 0] = $67 & 1; //@line 28252
    ___async_unwind = 0; //@line 28253
    HEAP32[$ReallocAsyncCtx >> 2] = 514; //@line 28254
    $68 = $ReallocAsyncCtx + 4 | 0; //@line 28255
    HEAP32[$68 >> 2] = $2; //@line 28256
    $69 = $ReallocAsyncCtx + 8 | 0; //@line 28257
    HEAP8[$69 >> 0] = $43; //@line 28258
    $70 = $ReallocAsyncCtx + 12 | 0; //@line 28259
    HEAP32[$70 >> 2] = $4; //@line 28260
    $71 = $ReallocAsyncCtx + 16 | 0; //@line 28261
    HEAP8[$71 >> 0] = $36; //@line 28262
    $72 = $ReallocAsyncCtx + 20 | 0; //@line 28263
    HEAP32[$72 >> 2] = $6; //@line 28264
    $73 = $ReallocAsyncCtx + 24 | 0; //@line 28265
    HEAP32[$73 >> 2] = $8; //@line 28266
    $74 = $ReallocAsyncCtx + 28 | 0; //@line 28267
    HEAP32[$74 >> 2] = $10; //@line 28268
    $75 = $ReallocAsyncCtx + 32 | 0; //@line 28269
    HEAP32[$75 >> 2] = 0; //@line 28270
    $76 = $ReallocAsyncCtx + 36 | 0; //@line 28271
    HEAP32[$76 >> 2] = $12; //@line 28272
    $77 = $ReallocAsyncCtx + 40 | 0; //@line 28273
    HEAP32[$77 >> 2] = $14; //@line 28274
    $78 = $ReallocAsyncCtx + 44 | 0; //@line 28275
    HEAP32[$78 >> 2] = $16; //@line 28276
    $79 = $ReallocAsyncCtx + 48 | 0; //@line 28277
    HEAP32[$79 >> 2] = $18; //@line 28278
    $80 = $ReallocAsyncCtx + 52 | 0; //@line 28279
    HEAP32[$80 >> 2] = $20; //@line 28280
    $81 = $ReallocAsyncCtx + 56 | 0; //@line 28281
    HEAP32[$81 >> 2] = $59; //@line 28282
    $82 = $ReallocAsyncCtx + 60 | 0; //@line 28283
    HEAP32[$82 >> 2] = $22; //@line 28284
    $83 = $ReallocAsyncCtx + 64 | 0; //@line 28285
    HEAP32[$83 >> 2] = $24; //@line 28286
    $84 = $ReallocAsyncCtx + 68 | 0; //@line 28287
    HEAP32[$84 >> 2] = $26; //@line 28288
    $85 = $ReallocAsyncCtx + 72 | 0; //@line 28289
    HEAP32[$85 >> 2] = $28; //@line 28290
    $86 = $ReallocAsyncCtx + 76 | 0; //@line 28291
    HEAP32[$86 >> 2] = $30; //@line 28292
    sp = STACKTOP; //@line 28293
    return;
   }
  }
 } else {
  HEAP32[$24 >> 2] = 0; //@line 28298
  HEAP8[$28 >> 0] = 0; //@line 28299
  HEAP32[$26 >> 2] = 0; //@line 28300
 }
 $111 = HEAP32[(HEAP32[$8 >> 2] | 0) + 64 >> 2] | 0; //@line 28304
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(68) | 0; //@line 28305
 FUNCTION_TABLE_iii[$111 & 31]($10, $36) | 0; //@line 28306
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 516; //@line 28309
  $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 28310
  HEAP32[$112 >> 2] = $2; //@line 28311
  $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 28312
  HEAP32[$113 >> 2] = $4; //@line 28313
  $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 28314
  HEAP32[$114 >> 2] = $6; //@line 28315
  $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 28316
  HEAP32[$115 >> 2] = $8; //@line 28317
  $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 28318
  HEAP32[$116 >> 2] = $10; //@line 28319
  $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 28320
  HEAP32[$117 >> 2] = $12; //@line 28321
  $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 28322
  HEAP32[$118 >> 2] = $14; //@line 28323
  $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 28324
  HEAP32[$119 >> 2] = $16; //@line 28325
  $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 28326
  HEAP32[$120 >> 2] = $18; //@line 28327
  $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 28328
  HEAP32[$121 >> 2] = $20; //@line 28329
  $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 28330
  HEAP32[$122 >> 2] = $22; //@line 28331
  $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 28332
  HEAP32[$123 >> 2] = $24; //@line 28333
  $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 28334
  HEAP32[$124 >> 2] = $26; //@line 28335
  $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 28336
  HEAP32[$125 >> 2] = $28; //@line 28337
  $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 28338
  HEAP32[$126 >> 2] = $30; //@line 28339
  $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 28340
  HEAP8[$127 >> 0] = $43; //@line 28341
  $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 28342
  HEAP8[$128 >> 0] = $36; //@line 28343
  sp = STACKTOP; //@line 28344
  return;
 }
 ___async_unwind = 0; //@line 28347
 HEAP32[$ReallocAsyncCtx3 >> 2] = 516; //@line 28348
 $112 = $ReallocAsyncCtx3 + 4 | 0; //@line 28349
 HEAP32[$112 >> 2] = $2; //@line 28350
 $113 = $ReallocAsyncCtx3 + 8 | 0; //@line 28351
 HEAP32[$113 >> 2] = $4; //@line 28352
 $114 = $ReallocAsyncCtx3 + 12 | 0; //@line 28353
 HEAP32[$114 >> 2] = $6; //@line 28354
 $115 = $ReallocAsyncCtx3 + 16 | 0; //@line 28355
 HEAP32[$115 >> 2] = $8; //@line 28356
 $116 = $ReallocAsyncCtx3 + 20 | 0; //@line 28357
 HEAP32[$116 >> 2] = $10; //@line 28358
 $117 = $ReallocAsyncCtx3 + 24 | 0; //@line 28359
 HEAP32[$117 >> 2] = $12; //@line 28360
 $118 = $ReallocAsyncCtx3 + 28 | 0; //@line 28361
 HEAP32[$118 >> 2] = $14; //@line 28362
 $119 = $ReallocAsyncCtx3 + 32 | 0; //@line 28363
 HEAP32[$119 >> 2] = $16; //@line 28364
 $120 = $ReallocAsyncCtx3 + 36 | 0; //@line 28365
 HEAP32[$120 >> 2] = $18; //@line 28366
 $121 = $ReallocAsyncCtx3 + 40 | 0; //@line 28367
 HEAP32[$121 >> 2] = $20; //@line 28368
 $122 = $ReallocAsyncCtx3 + 44 | 0; //@line 28369
 HEAP32[$122 >> 2] = $22; //@line 28370
 $123 = $ReallocAsyncCtx3 + 48 | 0; //@line 28371
 HEAP32[$123 >> 2] = $24; //@line 28372
 $124 = $ReallocAsyncCtx3 + 52 | 0; //@line 28373
 HEAP32[$124 >> 2] = $26; //@line 28374
 $125 = $ReallocAsyncCtx3 + 56 | 0; //@line 28375
 HEAP32[$125 >> 2] = $28; //@line 28376
 $126 = $ReallocAsyncCtx3 + 60 | 0; //@line 28377
 HEAP32[$126 >> 2] = $30; //@line 28378
 $127 = $ReallocAsyncCtx3 + 64 | 0; //@line 28379
 HEAP8[$127 >> 0] = $43; //@line 28380
 $128 = $ReallocAsyncCtx3 + 65 | 0; //@line 28381
 HEAP8[$128 >> 0] = $36; //@line 28382
 sp = STACKTOP; //@line 28383
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$063 = 0, $$06370 = 0, $$06371 = 0, $$1$off0 = 0, $$160 = 0, $$162 = 0, $$164 = 0, $$pre$phi$sinkZ2D = 0, $123 = 0, $124 = 0, $125 = 0, $127 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $141 = 0, $143 = 0, $144 = 0, $149 = 0, $15 = 0, $150 = 0, $155 = 0, $156 = 0, $16 = 0, $183 = 0, $201 = 0, $203 = 0, $40 = 0, $41 = 0, $47 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx9 = 0, $addconv = 0, $sext$i = 0, $storemerge$in = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 12876
 STACKTOP = STACKTOP + 48 | 0; //@line 12877
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 12877
 $vararg_buffer5 = sp + 24 | 0; //@line 12878
 $vararg_buffer3 = sp + 16 | 0; //@line 12879
 $vararg_buffer1 = sp + 8 | 0; //@line 12880
 $7 = sp + 32 | 0; //@line 12882
 $8 = sp + 28 | 0; //@line 12883
 HEAP8[$7 >> 0] = $3; //@line 12884
 $9 = $0 + 4 | 0; //@line 12885
 $15 = __ZN7LoRaPHY15get_max_payloadEhb($9, HEAP8[$0 + 2026 >> 0] | 0, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0; //@line 12891
 $16 = $2 & 65535; //@line 12892
 $sext$i = ($16 << 16) + -851968 | 0; //@line 12894
 if (((($sext$i | 0) < 0 ? 0 : $sext$i >> 16) | 0) > ($15 & 255 | 0)) {
  _mbed_tracef(2, 12709, 12714, sp); //@line 12901
 }
 HEAP32[$8 >> 2] = 0; //@line 12903
 $40 = HEAPU8[$1 + ($3 + 1 & 255) >> 0] << 8 | HEAPU8[$1 + ($3 & 255) >> 0] | HEAPU8[$1 + ($3 + 2 & 255) >> 0] << 16; //@line 12922
 $41 = $3 + 4 << 24 >> 24; //@line 12923
 HEAP8[$7 >> 0] = $41; //@line 12924
 $47 = $40 | HEAPU8[$1 + ($3 + 3 & 255) >> 0] << 24; //@line 12930
 L4 : do {
  if (($47 | 0) == (HEAP32[$0 + 1756 >> 2] | 0)) {
   $$1$off0 = 0; //@line 12939
   $$160 = $0 + 1732 | 0; //@line 12939
   $$162 = $0 + 1716 | 0; //@line 12939
   $$164 = 0; //@line 12939
   $storemerge$in = $0 + 1764 | 0; //@line 12939
  } else {
   $$06370 = HEAP32[$0 + 1988 >> 2] | 0; //@line 12942
   L7 : do {
    if ($$06370 | 0) {
     $$06371 = $$06370; //@line 12946
     while (1) {
      if (($47 | 0) == (HEAP32[$$06371 >> 2] | 0)) {
       break;
      }
      $$063 = HEAP32[$$06371 + 40 >> 2] | 0; //@line 12954
      if (!$$063) {
       break L7;
      } else {
       $$06371 = $$063; //@line 12959
      }
     }
     $$1$off0 = 1; //@line 12965
     $$160 = $$06371 + 20 | 0; //@line 12965
     $$162 = $$06371 + 4 | 0; //@line 12965
     $$164 = $$06371; //@line 12965
     $storemerge$in = $$06371 + 36 | 0; //@line 12965
     break L4;
    }
   } while (0);
   HEAP32[$0 + 2020 >> 2] = 11; //@line 12970
   HEAP8[$0 + 2012 >> 0] = 0; //@line 12972
   STACKTOP = sp; //@line 12973
   return;
  }
 } while (0);
 HEAP32[$8 >> 2] = HEAP32[$storemerge$in >> 2]; //@line 12977
 HEAP8[$7 >> 0] = $3 + 5 << 24 >> 24; //@line 12979
 $68 = HEAP8[$1 + ($41 & 255) >> 0] | 0; //@line 12982
 $69 = $68 & 15; //@line 12983
 $addconv = $69 + 8 << 24 >> 24; //@line 12984
 $AsyncCtx9 = _emscripten_alloc_async_context(96, sp) | 0; //@line 12985
 $70 = __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $7, $47, $8, $$162) | 0; //@line 12986
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 392; //@line 12989
  HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 12991
  HEAP8[$AsyncCtx9 + 8 >> 0] = $4; //@line 12993
  HEAP32[$AsyncCtx9 + 12 >> 2] = $$164; //@line 12995
  HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer5; //@line 12997
  HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer5; //@line 12999
  HEAP32[$AsyncCtx9 + 24 >> 2] = $vararg_buffer3; //@line 13001
  HEAP32[$AsyncCtx9 + 28 >> 2] = $vararg_buffer3; //@line 13003
  HEAP8[$AsyncCtx9 + 32 >> 0] = $68; //@line 13005
  HEAP32[$AsyncCtx9 + 36 >> 2] = $1; //@line 13007
  HEAP8[$AsyncCtx9 + 40 >> 0] = $addconv; //@line 13009
  HEAP8[$AsyncCtx9 + 41 >> 0] = $6; //@line 13011
  HEAP32[$AsyncCtx9 + 44 >> 2] = $9; //@line 13013
  HEAP8[$AsyncCtx9 + 48 >> 0] = $69; //@line 13015
  HEAP16[$AsyncCtx9 + 50 >> 1] = $2; //@line 13017
  HEAP32[$AsyncCtx9 + 52 >> 2] = $$162; //@line 13019
  HEAP32[$AsyncCtx9 + 56 >> 2] = $$160; //@line 13021
  HEAP32[$AsyncCtx9 + 60 >> 2] = $47; //@line 13023
  HEAP32[$AsyncCtx9 + 64 >> 2] = $16; //@line 13025
  HEAP32[$AsyncCtx9 + 68 >> 2] = $7; //@line 13027
  HEAP8[$AsyncCtx9 + 72 >> 0] = $$1$off0 & 1; //@line 13030
  HEAP32[$AsyncCtx9 + 76 >> 2] = $8; //@line 13032
  HEAP16[$AsyncCtx9 + 80 >> 1] = $5; //@line 13034
  HEAP32[$AsyncCtx9 + 84 >> 2] = $8; //@line 13036
  HEAP32[$AsyncCtx9 + 88 >> 2] = $vararg_buffer1; //@line 13038
  HEAP32[$AsyncCtx9 + 92 >> 2] = $vararg_buffer1; //@line 13040
  sp = STACKTOP; //@line 13041
  STACKTOP = sp; //@line 13042
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 13044
 if (!$70) {
  _mbed_tracef(2, 12709, 12733, $vararg_buffer1); //@line 13046
  HEAP32[$0 + 2020 >> 2] = 12; //@line 13048
  HEAP8[$0 + 2012 >> 0] = 0; //@line 13050
  STACKTOP = sp; //@line 13051
  return;
 }
 $AsyncCtx21 = _emscripten_alloc_async_context(88, sp) | 0; //@line 13054
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 13055
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 393; //@line 13058
  HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 13060
  HEAP8[$AsyncCtx21 + 8 >> 0] = $4; //@line 13062
  HEAP32[$AsyncCtx21 + 12 >> 2] = $$164; //@line 13064
  HEAP32[$AsyncCtx21 + 16 >> 2] = $vararg_buffer5; //@line 13066
  HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer5; //@line 13068
  HEAP32[$AsyncCtx21 + 24 >> 2] = $8; //@line 13070
  HEAP32[$AsyncCtx21 + 28 >> 2] = $7; //@line 13072
  HEAP32[$AsyncCtx21 + 32 >> 2] = $1; //@line 13074
  HEAP32[$AsyncCtx21 + 36 >> 2] = $16; //@line 13076
  HEAP32[$AsyncCtx21 + 40 >> 2] = $0; //@line 13078
  HEAP32[$AsyncCtx21 + 44 >> 2] = $vararg_buffer3; //@line 13080
  HEAP32[$AsyncCtx21 + 48 >> 2] = $vararg_buffer3; //@line 13082
  HEAP8[$AsyncCtx21 + 52 >> 0] = $68; //@line 13084
  HEAP8[$AsyncCtx21 + 53 >> 0] = $addconv; //@line 13086
  HEAP8[$AsyncCtx21 + 54 >> 0] = $6; //@line 13088
  HEAP32[$AsyncCtx21 + 56 >> 2] = $9; //@line 13090
  HEAP8[$AsyncCtx21 + 60 >> 0] = $69; //@line 13092
  HEAP16[$AsyncCtx21 + 62 >> 1] = $2; //@line 13094
  HEAP32[$AsyncCtx21 + 64 >> 2] = $$162; //@line 13096
  HEAP32[$AsyncCtx21 + 68 >> 2] = $$160; //@line 13098
  HEAP32[$AsyncCtx21 + 72 >> 2] = $47; //@line 13100
  HEAP8[$AsyncCtx21 + 76 >> 0] = $$1$off0 & 1; //@line 13103
  HEAP32[$AsyncCtx21 + 80 >> 2] = $8; //@line 13105
  HEAP16[$AsyncCtx21 + 84 >> 1] = $5; //@line 13107
  sp = STACKTOP; //@line 13108
  STACKTOP = sp; //@line 13109
  return;
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 13111
 $123 = $0 + 2062 | 0; //@line 13112
 HEAP8[$123 >> 0] = 0; //@line 13113
 $124 = $0 + 2044 | 0; //@line 13114
 HEAP8[$124 >> 0] = 0; //@line 13115
 $125 = $0 + 2012 | 0; //@line 13116
 HEAP8[$125 >> 0] = 1; //@line 13117
 HEAP8[$0 + 2034 >> 0] = 0; //@line 13119
 $127 = $0 + 2020 | 0; //@line 13120
 HEAP32[$127 >> 2] = 0; //@line 13121
 HEAP8[$0 + 2024 >> 0] = $$1$off0 & 1; //@line 13124
 HEAP8[$0 + 2027 >> 0] = ($68 & 255) >>> 4 & 1; //@line 13128
 $133 = $0 + 2028 | 0; //@line 13129
 HEAP32[$133 >> 2] = 0; //@line 13130
 $134 = $0 + 2032 | 0; //@line 13131
 HEAP16[$134 >> 1] = 0; //@line 13132
 $135 = HEAP32[$8 >> 2] | 0; //@line 13133
 $136 = $0 + 2048 | 0; //@line 13134
 HEAP32[$136 >> 2] = $135; //@line 13135
 HEAP16[$0 + 2036 >> 1] = $5; //@line 13137
 HEAP8[$0 + 2038 >> 0] = $6; //@line 13139
 HEAP32[$0 + 2056 >> 2] = 0; //@line 13141
 HEAP32[$0 + 1768 >> 2] = 0; //@line 13143
 $141 = $0 + 476 | 0; //@line 13144
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($141); //@line 13145
 L25 : do {
  if ($$1$off0) {
   HEAP32[$0 + 2016 >> 2] = 2; //@line 13149
   $143 = $$164 + 36 | 0; //@line 13150
   $144 = HEAP32[$143 >> 2] | 0; //@line 13151
   if (($144 | 0) == 0 | ($144 | 0) != ($135 | 0)) {
    $$pre$phi$sinkZ2D = $143; //@line 13156
   } else {
    HEAP32[$127 >> 2] = 8; //@line 13158
    HEAP32[$136 >> 2] = $135; //@line 13159
    HEAP8[$125 >> 0] = 0; //@line 13160
    STACKTOP = sp; //@line 13161
    return;
   }
  } else {
   switch ($4 << 24 >> 24) {
   case 5:
    {
     HEAP8[$0 + 1178 >> 0] = 1; //@line 13167
     HEAP32[$0 + 2016 >> 2] = 1; //@line 13169
     $149 = $0 + 1764 | 0; //@line 13170
     $150 = HEAP32[$149 >> 2] | 0; //@line 13171
     if (($150 | 0) == 0 | ($150 | 0) != ($135 | 0)) {
      $$pre$phi$sinkZ2D = $149; //@line 13176
      break L25;
     }
     _mbed_tracef(16, 12709, 12744, $vararg_buffer3); //@line 13179
     HEAP8[$125 >> 0] = 0; //@line 13180
     HEAP32[$127 >> 2] = 8; //@line 13181
     $$pre$phi$sinkZ2D = $149; //@line 13182
     break L25;
     break;
    }
   case 3:
    {
     HEAP8[$0 + 1178 >> 0] = 0; //@line 13188
     HEAP32[$0 + 2016 >> 2] = 0; //@line 13190
     $155 = $0 + 1764 | 0; //@line 13191
     $156 = HEAP32[$155 >> 2] | 0; //@line 13192
     if (($156 | 0) == 0 | ($156 | 0) != ($135 | 0)) {
      $$pre$phi$sinkZ2D = $155; //@line 13197
      break L25;
     }
     _mbed_tracef(16, 12709, 12744, $vararg_buffer5); //@line 13200
     HEAP8[$125 >> 0] = 0; //@line 13201
     HEAP32[$127 >> 2] = 8; //@line 13202
     STACKTOP = sp; //@line 13203
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $0 + 1764 | 0; //@line 13208
     break L25;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $135; //@line 13214
 if (!(HEAP8[$0 + 1177 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($141); //@line 13219
 } else {
  if ($68 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($141); //@line 13224
   HEAP8[$123 >> 0] = 1; //@line 13225
   HEAP8[$124 >> 0] = 1; //@line 13226
  }
 }
 do {
  if (!($16 + 252 - ($addconv & 255) & 255)) {
   if ($69 << 24 >> 24) {
    $AsyncCtx13 = _emscripten_alloc_async_context(52, sp) | 0; //@line 13240
    $183 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($141, $1, 8, $addconv, $6, $0 + 2084 | 0, $0 + 1876 | 0, $9) | 0; //@line 13241
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 395; //@line 13244
     HEAP32[$AsyncCtx13 + 4 >> 2] = $141; //@line 13246
     HEAP32[$AsyncCtx13 + 8 >> 2] = $127; //@line 13248
     HEAP8[$AsyncCtx13 + 12 >> 0] = $4; //@line 13250
     HEAP32[$AsyncCtx13 + 16 >> 2] = $0; //@line 13252
     HEAP32[$AsyncCtx13 + 20 >> 2] = $7; //@line 13254
     HEAP32[$AsyncCtx13 + 24 >> 2] = $1; //@line 13256
     HEAP32[$AsyncCtx13 + 28 >> 2] = $16; //@line 13258
     HEAP32[$AsyncCtx13 + 32 >> 2] = $133; //@line 13260
     HEAP32[$AsyncCtx13 + 36 >> 2] = $134; //@line 13262
     HEAP32[$AsyncCtx13 + 40 >> 2] = $123; //@line 13264
     HEAP32[$AsyncCtx13 + 44 >> 2] = $8; //@line 13266
     HEAP32[$AsyncCtx13 + 48 >> 2] = $0; //@line 13268
     sp = STACKTOP; //@line 13269
     STACKTOP = sp; //@line 13270
     return;
    }
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 13272
    if ($183 | 0) {
     HEAP32[$127 >> 2] = 1; //@line 13275
     break;
    }
    if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($141) | 0) {
     HEAP32[$0 + 2076 >> 2] = 4; //@line 13281
     HEAP8[$0 + 2080 >> 0] = 1; //@line 13283
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($141); //@line 13284
    }
   }
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 13288
   __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $69, $$162, $$160, $47, $135, 0, $6); //@line 13289
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 394; //@line 13292
    HEAP8[$AsyncCtx + 4 >> 0] = $4; //@line 13294
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 13296
    HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 13298
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 13300
    HEAP32[$AsyncCtx + 20 >> 2] = $16; //@line 13302
    HEAP32[$AsyncCtx + 24 >> 2] = $127; //@line 13304
    HEAP32[$AsyncCtx + 28 >> 2] = $133; //@line 13306
    HEAP32[$AsyncCtx + 32 >> 2] = $134; //@line 13308
    HEAP32[$AsyncCtx + 36 >> 2] = $123; //@line 13310
    HEAP32[$AsyncCtx + 40 >> 2] = $8; //@line 13312
    HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 13314
    sp = STACKTOP; //@line 13315
    STACKTOP = sp; //@line 13316
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13318
    break;
   }
  }
 } while (0);
 if ($4 << 24 >> 24 == 7) {
  $201 = $0 + 1442 | 0; //@line 13325
  $203 = HEAPU8[$7 >> 0] | 0; //@line 13327
  _memcpy($201 | 0, $1 + $203 | 0, $16 | 0) | 0; //@line 13329
  HEAP32[$0 + 2016 >> 2] = 3; //@line 13331
  HEAP32[$127 >> 2] = 0; //@line 13332
  HEAP32[$133 >> 2] = $201; //@line 13333
  HEAP16[$134 >> 1] = $16 - $203; //@line 13336
 }
 if (!(HEAP8[$123 >> 0] | 0)) {
  STACKTOP = sp; //@line 13341
  return;
 }
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13344
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 13345
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 396; //@line 13348
  HEAP32[$AsyncCtx17 + 4 >> 2] = $8; //@line 13350
  sp = STACKTOP; //@line 13351
  STACKTOP = sp; //@line 13352
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 13354
 STACKTOP = sp; //@line 13355
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$05$i = 0, $$06$i = 0, $10 = 0, $100 = 0, $108 = 0, $116 = 0, $119 = 0, $126 = 0, $133 = 0, $136 = 0, $2 = 0, $29 = 0, $3 = 0, $4 = 0, $40 = 0, $48 = 0, $5 = 0, $66 = 0, $76 = 0, $79 = 0, $8 = 0, $88 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16358
 STACKTOP = STACKTOP + 64 | 0; //@line 16359
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16359
 $2 = sp + 48 | 0; //@line 16360
 $3 = sp + 32 | 0; //@line 16361
 $4 = sp + 16 | 0; //@line 16362
 $5 = sp; //@line 16363
 __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1); //@line 16364
 HEAP32[$0 + 1992 >> 2] = $1; //@line 16366
 $8 = $0 + 4 | 0; //@line 16368
 __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0 + 752 | 0, $8); //@line 16369
 HEAP32[$0 + 2380 >> 2] = 0; //@line 16371
 $10 = $0 + 1168 | 0; //@line 16372
 HEAP8[$0 + 1701 >> 0] = 0; //@line 16374
 HEAP8[$0 + 1700 >> 0] = 1; //@line 16376
 HEAP8[$0 + 1173 >> 0] = 0; //@line 16378
 HEAP32[$0 + 1780 >> 2] = 0; //@line 16380
 HEAP32[$0 + 1784 >> 2] = 0; //@line 16382
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 1); //@line 16383
 HEAP32[$0 + 1880 >> 2] = 10; //@line 16385
 HEAP8[$0 + 1884 >> 0] = 6; //@line 16387
 HEAP8[$0 + 1908 >> 0] = 1; //@line 16389
 HEAP8[$0 + 2376 >> 0] = 0; //@line 16391
 HEAP32[$0 + 1760 >> 2] = 0; //@line 16393
 HEAP32[$0 + 1764 >> 2] = 0; //@line 16395
 HEAP32[$0 + 1768 >> 2] = 0; //@line 16397
 HEAP8[$0 + 1184 >> 0] = 0; //@line 16399
 HEAP8[$0 + 1698 >> 0] = 1; //@line 16401
 HEAP8[$0 + 1699 >> 0] = 1; //@line 16403
 HEAP8[$0 + 1181 >> 0] = 0; //@line 16405
 HEAP8[$0 + 1932 >> 0] = 0; //@line 16407
 HEAP16[$0 + 1934 >> 1] = 1; //@line 16409
 $29 = $0 + 476 | 0; //@line 16410
 __ZN14LoRaMacCommand20clear_command_bufferEv($29); //@line 16411
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($29); //@line 16412
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($29); //@line 16413
 HEAP8[$0 + 1175 >> 0] = 1; //@line 16415
 __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($8, $10, 0); //@line 16416
 HEAP8[$0 + 1177 >> 0] = 0; //@line 16418
 HEAP8[$0 + 1178 >> 0] = 0; //@line 16420
 $$05$i = HEAP32[$0 + 1988 >> 2] | 0; //@line 16422
 if ($$05$i | 0) {
  $$06$i = $$05$i; //@line 16425
  do {
   HEAP32[$$06$i + 36 >> 2] = 0; //@line 16428
   $$06$i = HEAP32[$$06$i + 40 >> 2] | 0; //@line 16430
  } while (($$06$i | 0) != 0);
 }
 HEAP8[$0 + 1182 >> 0] = 0; //@line 16440
 HEAP8[$0 + 1183 >> 0] = 0; //@line 16442
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16443
 $40 = __ZN7LoRaPHY13get_radio_rngEv($8) | 0; //@line 16444
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 458; //@line 16447
  HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 16449
  HEAP32[$AsyncCtx27 + 8 >> 2] = $5; //@line 16451
  HEAP32[$AsyncCtx27 + 12 >> 2] = $0; //@line 16453
  HEAP32[$AsyncCtx27 + 16 >> 2] = $8; //@line 16455
  HEAP32[$AsyncCtx27 + 20 >> 2] = $2; //@line 16457
  HEAP32[$AsyncCtx27 + 24 >> 2] = $3; //@line 16459
  HEAP32[$AsyncCtx27 + 28 >> 2] = $4; //@line 16461
  sp = STACKTOP; //@line 16462
  STACKTOP = sp; //@line 16463
  return 0; //@line 16463
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 16465
 _srand($40); //@line 16466
 $48 = $0 + 1172 | 0; //@line 16467
 HEAP8[$48 >> 0] = 1; //@line 16468
 $AsyncCtx33 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16469
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 16470
 if (___async) {
  HEAP32[$AsyncCtx33 >> 2] = 459; //@line 16473
  HEAP32[$AsyncCtx33 + 4 >> 2] = $0; //@line 16475
  HEAP32[$AsyncCtx33 + 8 >> 2] = $5; //@line 16477
  HEAP32[$AsyncCtx33 + 12 >> 2] = $0; //@line 16479
  HEAP32[$AsyncCtx33 + 16 >> 2] = $48; //@line 16481
  HEAP32[$AsyncCtx33 + 20 >> 2] = $8; //@line 16483
  HEAP32[$AsyncCtx33 + 24 >> 2] = $2; //@line 16485
  HEAP32[$AsyncCtx33 + 28 >> 2] = $3; //@line 16487
  HEAP32[$AsyncCtx33 + 32 >> 2] = $4; //@line 16489
  sp = STACKTOP; //@line 16490
  STACKTOP = sp; //@line 16491
  return 0; //@line 16491
 }
 _emscripten_free_async_context($AsyncCtx33 | 0); //@line 16493
 $AsyncCtx36 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16494
 __ZN7LoRaPHY18put_radio_to_sleepEv($8); //@line 16495
 if (___async) {
  HEAP32[$AsyncCtx36 >> 2] = 460; //@line 16498
  HEAP32[$AsyncCtx36 + 4 >> 2] = $0; //@line 16500
  HEAP32[$AsyncCtx36 + 8 >> 2] = $5; //@line 16502
  HEAP32[$AsyncCtx36 + 12 >> 2] = $0; //@line 16504
  HEAP32[$AsyncCtx36 + 16 >> 2] = $48; //@line 16506
  HEAP32[$AsyncCtx36 + 20 >> 2] = $8; //@line 16508
  HEAP32[$AsyncCtx36 + 24 >> 2] = $2; //@line 16510
  HEAP32[$AsyncCtx36 + 28 >> 2] = $3; //@line 16512
  HEAP32[$AsyncCtx36 + 32 >> 2] = $4; //@line 16514
  sp = STACKTOP; //@line 16515
  STACKTOP = sp; //@line 16516
  return 0; //@line 16516
 }
 _emscripten_free_async_context($AsyncCtx36 | 0); //@line 16518
 $66 = $2 + 12 | 0; //@line 16520
 HEAP32[$2 >> 2] = 461; //@line 16521
 HEAP32[$2 + 4 >> 2] = 0; //@line 16523
 HEAP32[$2 + 8 >> 2] = $0; //@line 16525
 HEAP32[$66 >> 2] = 860; //@line 16526
 $AsyncCtx23 = _emscripten_alloc_async_context(40, sp) | 0; //@line 16527
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1796 | 0, $2); //@line 16528
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 462; //@line 16531
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 16533
  HEAP32[$AsyncCtx23 + 8 >> 2] = $5; //@line 16535
  HEAP32[$AsyncCtx23 + 12 >> 2] = $0; //@line 16537
  HEAP32[$AsyncCtx23 + 16 >> 2] = $48; //@line 16539
  HEAP32[$AsyncCtx23 + 20 >> 2] = $8; //@line 16541
  HEAP32[$AsyncCtx23 + 24 >> 2] = $66; //@line 16543
  HEAP32[$AsyncCtx23 + 28 >> 2] = $2; //@line 16545
  HEAP32[$AsyncCtx23 + 32 >> 2] = $3; //@line 16547
  HEAP32[$AsyncCtx23 + 36 >> 2] = $4; //@line 16549
  sp = STACKTOP; //@line 16550
  STACKTOP = sp; //@line 16551
  return 0; //@line 16551
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 16553
 $76 = HEAP32[$66 >> 2] | 0; //@line 16554
 do {
  if ($76 | 0) {
   $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 16559
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 16560
   FUNCTION_TABLE_vi[$79 & 1023]($2); //@line 16561
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 463; //@line 16564
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16566
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 16568
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 16570
    HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 16572
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 16574
    HEAP32[$AsyncCtx + 24 >> 2] = $48; //@line 16576
    HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 16578
    sp = STACKTOP; //@line 16579
    STACKTOP = sp; //@line 16580
    return 0; //@line 16580
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16582
    break;
   }
  }
 } while (0);
 $88 = $3 + 12 | 0; //@line 16588
 HEAP32[$3 >> 2] = 464; //@line 16589
 HEAP32[$3 + 4 >> 2] = 0; //@line 16591
 HEAP32[$3 + 8 >> 2] = $0; //@line 16593
 HEAP32[$88 >> 2] = 860; //@line 16594
 $AsyncCtx20 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16595
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1816 | 0, $3); //@line 16596
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 465; //@line 16599
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 16601
  HEAP32[$AsyncCtx20 + 8 >> 2] = $5; //@line 16603
  HEAP32[$AsyncCtx20 + 12 >> 2] = $0; //@line 16605
  HEAP32[$AsyncCtx20 + 16 >> 2] = $48; //@line 16607
  HEAP32[$AsyncCtx20 + 20 >> 2] = $8; //@line 16609
  HEAP32[$AsyncCtx20 + 24 >> 2] = $4; //@line 16611
  HEAP32[$AsyncCtx20 + 28 >> 2] = $3; //@line 16613
  HEAP32[$AsyncCtx20 + 32 >> 2] = $88; //@line 16615
  sp = STACKTOP; //@line 16616
  STACKTOP = sp; //@line 16617
  return 0; //@line 16617
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 16619
 $97 = HEAP32[$88 >> 2] | 0; //@line 16620
 do {
  if ($97 | 0) {
   $100 = HEAP32[$97 + 8 >> 2] | 0; //@line 16625
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16626
   FUNCTION_TABLE_vi[$100 & 1023]($3); //@line 16627
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 466; //@line 16630
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 16632
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 16634
    HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 16636
    HEAP32[$AsyncCtx3 + 16 >> 2] = $5; //@line 16638
    HEAP32[$AsyncCtx3 + 20 >> 2] = $48; //@line 16640
    HEAP32[$AsyncCtx3 + 24 >> 2] = $8; //@line 16642
    sp = STACKTOP; //@line 16643
    STACKTOP = sp; //@line 16644
    return 0; //@line 16644
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16646
    break;
   }
  }
 } while (0);
 $108 = $4 + 12 | 0; //@line 16652
 HEAP32[$4 >> 2] = 467; //@line 16653
 HEAP32[$4 + 4 >> 2] = 0; //@line 16655
 HEAP32[$4 + 8 >> 2] = $0; //@line 16657
 HEAP32[$108 >> 2] = 860; //@line 16658
 $AsyncCtx17 = _emscripten_alloc_async_context(32, sp) | 0; //@line 16659
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1836 | 0, $4); //@line 16660
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 468; //@line 16663
  HEAP32[$AsyncCtx17 + 4 >> 2] = $108; //@line 16665
  HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 16667
  HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 16669
  HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 16671
  HEAP32[$AsyncCtx17 + 20 >> 2] = $4; //@line 16673
  HEAP32[$AsyncCtx17 + 24 >> 2] = $48; //@line 16675
  HEAP32[$AsyncCtx17 + 28 >> 2] = $8; //@line 16677
  sp = STACKTOP; //@line 16678
  STACKTOP = sp; //@line 16679
  return 0; //@line 16679
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16681
 $116 = HEAP32[$108 >> 2] | 0; //@line 16682
 do {
  if ($116 | 0) {
   $119 = HEAP32[$116 + 8 >> 2] | 0; //@line 16687
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16688
   FUNCTION_TABLE_vi[$119 & 1023]($4); //@line 16689
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 469; //@line 16692
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 16694
    HEAP32[$AsyncCtx7 + 8 >> 2] = $5; //@line 16696
    HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 16698
    HEAP32[$AsyncCtx7 + 16 >> 2] = $48; //@line 16700
    HEAP32[$AsyncCtx7 + 20 >> 2] = $8; //@line 16702
    sp = STACKTOP; //@line 16703
    STACKTOP = sp; //@line 16704
    return 0; //@line 16704
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16706
    break;
   }
  }
 } while (0);
 $126 = $5 + 12 | 0; //@line 16712
 HEAP32[$5 >> 2] = 470; //@line 16713
 HEAP32[$5 + 4 >> 2] = 0; //@line 16715
 HEAP32[$5 + 8 >> 2] = $0; //@line 16717
 HEAP32[$126 >> 2] = 860; //@line 16718
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 16719
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $0 + 1856 | 0, $5); //@line 16720
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 471; //@line 16723
  HEAP32[$AsyncCtx14 + 4 >> 2] = $126; //@line 16725
  HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 16727
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 16729
  HEAP32[$AsyncCtx14 + 16 >> 2] = $48; //@line 16731
  HEAP32[$AsyncCtx14 + 20 >> 2] = $8; //@line 16733
  HEAP32[$AsyncCtx14 + 24 >> 2] = $5; //@line 16735
  sp = STACKTOP; //@line 16736
  STACKTOP = sp; //@line 16737
  return 0; //@line 16737
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16739
 $133 = HEAP32[$126 >> 2] | 0; //@line 16740
 do {
  if ($133 | 0) {
   $136 = HEAP32[$133 + 8 >> 2] | 0; //@line 16745
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16746
   FUNCTION_TABLE_vi[$136 & 1023]($5); //@line 16747
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 472; //@line 16750
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 16752
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 16754
    HEAP32[$AsyncCtx11 + 12 >> 2] = $48; //@line 16756
    HEAP32[$AsyncCtx11 + 16 >> 2] = $8; //@line 16758
    sp = STACKTOP; //@line 16759
    STACKTOP = sp; //@line 16760
    return 0; //@line 16760
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16762
    break;
   }
  }
 } while (0);
 HEAP32[$0 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 16769
 HEAP8[$0 + 1936 >> 0] = 1; //@line 16771
 HEAP8[$48 >> 0] = 1; //@line 16772
 $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16773
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 16774
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 473; //@line 16777
  sp = STACKTOP; //@line 16778
  STACKTOP = sp; //@line 16779
  return 0; //@line 16779
 } else {
  _emscripten_free_async_context($AsyncCtx30 | 0); //@line 16781
  STACKTOP = sp; //@line 16782
  return 0; //@line 16782
 }
 return 0; //@line 16784
}
function _main() {
 var $$0 = 0, $$1 = 0, $$pr = 0, $$pre$i$i = 0, $0 = 0, $1 = 0, $108 = 0, $119 = 0, $25 = 0, $39 = 0, $42 = 0, $50 = 0, $52 = 0, $54 = 0, $57 = 0, $66 = 0, $69 = 0, $76 = 0, $82 = 0, $86 = 0, $87 = 0, $90 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx3 = 0, $AsyncCtx33 = 0, $AsyncCtx36 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7381
 STACKTOP = STACKTOP + 48 | 0; //@line 7382
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7382
 $vararg_buffer = sp; //@line 7383
 $0 = sp + 8 | 0; //@line 7384
 $1 = sp + 24 | 0; //@line 7385
 if (!((HEAP8[24298] | HEAP8[24297] | HEAP8[24299] | HEAP8[24300] | HEAP8[24301] | HEAP8[24302] | HEAP8[24303] | HEAP8[24304]) << 24 >> 24)) {
  $AsyncCtx33 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7403
  _puts(15079) | 0; //@line 7404
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 668; //@line 7407
   sp = STACKTOP; //@line 7408
   STACKTOP = sp; //@line 7409
   return 0; //@line 7409
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 7411
  $$1 = -1; //@line 7412
  STACKTOP = sp; //@line 7413
  return $$1 | 0; //@line 7413
 }
 $AsyncCtx29 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7415
 _puts(15115) | 0; //@line 7416
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 669; //@line 7419
  HEAP32[$AsyncCtx29 + 4 >> 2] = $1; //@line 7421
  HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 7423
  HEAP32[$AsyncCtx29 + 12 >> 2] = $vararg_buffer; //@line 7425
  HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer; //@line 7427
  HEAP32[$AsyncCtx29 + 20 >> 2] = $0; //@line 7429
  sp = STACKTOP; //@line 7430
  STACKTOP = sp; //@line 7431
  return 0; //@line 7431
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 7433
 _mbed_trace_init() | 0; //@line 7434
 if (__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(20484, 20280) | 0) {
  $AsyncCtx25 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7438
  _puts(15182) | 0; //@line 7439
  if (___async) {
   HEAP32[$AsyncCtx25 >> 2] = 670; //@line 7442
   sp = STACKTOP; //@line 7443
   STACKTOP = sp; //@line 7444
   return 0; //@line 7444
  }
  _emscripten_free_async_context($AsyncCtx25 | 0); //@line 7446
  $$1 = -1; //@line 7447
  STACKTOP = sp; //@line 7448
  return $$1 | 0; //@line 7448
 }
 $AsyncCtx47 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7450
 $25 = _equeue_alloc(20280, 32) | 0; //@line 7451
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 671; //@line 7454
  HEAP32[$AsyncCtx47 + 4 >> 2] = $1; //@line 7456
  HEAP32[$AsyncCtx47 + 8 >> 2] = $vararg_buffer; //@line 7458
  HEAP32[$AsyncCtx47 + 12 >> 2] = $vararg_buffer; //@line 7460
  HEAP32[$AsyncCtx47 + 16 >> 2] = $1; //@line 7462
  HEAP32[$AsyncCtx47 + 20 >> 2] = $0; //@line 7464
  sp = STACKTOP; //@line 7465
  STACKTOP = sp; //@line 7466
  return 0; //@line 7466
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 7468
 if (!$25) {
  HEAP32[$0 >> 2] = 0; //@line 7471
  HEAP32[$0 + 4 >> 2] = 0; //@line 7471
  HEAP32[$0 + 8 >> 2] = 0; //@line 7471
  HEAP32[$0 + 12 >> 2] = 0; //@line 7471
  $50 = 1; //@line 7472
  $52 = $0; //@line 7472
 } else {
  HEAP32[$25 + 4 >> 2] = 20280; //@line 7475
  HEAP32[$25 + 8 >> 2] = 0; //@line 7477
  HEAP32[$25 + 12 >> 2] = 0; //@line 7479
  HEAP32[$25 + 16 >> 2] = -1; //@line 7481
  HEAP32[$25 + 20 >> 2] = 11; //@line 7483
  HEAP32[$25 + 24 >> 2] = 672; //@line 7485
  HEAP32[$25 + 28 >> 2] = 7; //@line 7487
  HEAP32[$25 >> 2] = 1; //@line 7488
  $39 = $0 + 4 | 0; //@line 7489
  HEAP32[$39 >> 2] = 0; //@line 7490
  HEAP32[$39 + 4 >> 2] = 0; //@line 7490
  HEAP32[$39 + 8 >> 2] = 0; //@line 7490
  HEAP32[$0 >> 2] = $25; //@line 7491
  HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1; //@line 7494
  $50 = 0; //@line 7495
  $52 = $0; //@line 7495
 }
 $42 = $0 + 12 | 0; //@line 7497
 HEAP32[$42 >> 2] = 10264; //@line 7498
 $AsyncCtx43 = _emscripten_alloc_async_context(40, sp) | 0; //@line 7499
 __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(20208, $0); //@line 7500
 if (___async) {
  HEAP32[$AsyncCtx43 >> 2] = 673; //@line 7503
  HEAP32[$AsyncCtx43 + 4 >> 2] = $25; //@line 7505
  HEAP32[$AsyncCtx43 + 8 >> 2] = $1; //@line 7507
  HEAP32[$AsyncCtx43 + 12 >> 2] = $vararg_buffer; //@line 7509
  HEAP32[$AsyncCtx43 + 16 >> 2] = $vararg_buffer; //@line 7511
  HEAP32[$AsyncCtx43 + 20 >> 2] = $1; //@line 7513
  HEAP32[$AsyncCtx43 + 24 >> 2] = $25; //@line 7515
  HEAP8[$AsyncCtx43 + 28 >> 0] = $50 & 1; //@line 7518
  HEAP32[$AsyncCtx43 + 32 >> 2] = $52; //@line 7520
  HEAP32[$AsyncCtx43 + 36 >> 2] = $42; //@line 7522
  sp = STACKTOP; //@line 7523
  STACKTOP = sp; //@line 7524
  return 0; //@line 7524
 }
 _emscripten_free_async_context($AsyncCtx43 | 0); //@line 7526
 $54 = HEAP32[$42 >> 2] | 0; //@line 7527
 do {
  if ($54 | 0) {
   $57 = HEAP32[$54 + 8 >> 2] | 0; //@line 7532
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 7533
   FUNCTION_TABLE_vi[$57 & 1023]($52); //@line 7534
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 674; //@line 7537
    HEAP32[$AsyncCtx + 4 >> 2] = $25; //@line 7539
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7541
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 7543
    HEAP8[$AsyncCtx + 16 >> 0] = $50 & 1; //@line 7546
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 7548
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 7550
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer; //@line 7552
    sp = STACKTOP; //@line 7553
    STACKTOP = sp; //@line 7554
    return 0; //@line 7554
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7556
    break;
   }
  }
 } while (0);
 do {
  if (!$50) {
   $66 = (HEAP32[$25 >> 2] | 0) + -1 | 0; //@line 7564
   HEAP32[$25 >> 2] = $66; //@line 7565
   if (!$66) {
    $69 = HEAP32[$25 + 24 >> 2] | 0; //@line 7569
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7570
    FUNCTION_TABLE_vi[$69 & 1023]($25); //@line 7571
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 675; //@line 7574
     HEAP32[$AsyncCtx3 + 4 >> 2] = $25; //@line 7576
     HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 7578
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 7580
     HEAP32[$AsyncCtx3 + 16 >> 2] = $vararg_buffer; //@line 7582
     HEAP32[$AsyncCtx3 + 20 >> 2] = $vararg_buffer; //@line 7584
     sp = STACKTOP; //@line 7585
     STACKTOP = sp; //@line 7586
     return 0; //@line 7586
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7588
    $76 = HEAP32[$25 + 4 >> 2] | 0; //@line 7590
    $AsyncCtx39 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7591
    _equeue_dealloc($76, $25); //@line 7592
    if (___async) {
     HEAP32[$AsyncCtx39 >> 2] = 676; //@line 7595
     HEAP32[$AsyncCtx39 + 4 >> 2] = $1; //@line 7597
     HEAP32[$AsyncCtx39 + 8 >> 2] = $vararg_buffer; //@line 7599
     HEAP32[$AsyncCtx39 + 12 >> 2] = $vararg_buffer; //@line 7601
     HEAP32[$AsyncCtx39 + 16 >> 2] = $1; //@line 7603
     sp = STACKTOP; //@line 7604
     STACKTOP = sp; //@line 7605
     return 0; //@line 7605
    } else {
     _emscripten_free_async_context($AsyncCtx39 | 0); //@line 7607
     break;
    }
   }
  }
 } while (0);
 $82 = $1 + 4 | 0; //@line 7614
 HEAP32[$82 >> 2] = 0; //@line 7616
 HEAP32[$82 + 4 >> 2] = 0; //@line 7619
 HEAP32[$1 >> 2] = 677; //@line 7620
 $86 = $1 + 12 | 0; //@line 7621
 HEAP32[$86 >> 2] = 10276; //@line 7622
 $87 = HEAP32[5919] | 0; //@line 7623
 if (!$87) {
  $98 = 10276; //@line 7626
  label = 34; //@line 7627
 } else {
  $90 = HEAP32[$87 + 8 >> 2] | 0; //@line 7630
  $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7631
  FUNCTION_TABLE_vi[$90 & 1023](23664); //@line 7632
  if (___async) {
   HEAP32[$AsyncCtx6 >> 2] = 678; //@line 7635
   HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 7637
   HEAP32[$AsyncCtx6 + 8 >> 2] = $86; //@line 7639
   HEAP32[$AsyncCtx6 + 12 >> 2] = $1; //@line 7641
   HEAP32[$AsyncCtx6 + 16 >> 2] = $vararg_buffer; //@line 7643
   HEAP32[$AsyncCtx6 + 20 >> 2] = $vararg_buffer; //@line 7645
   sp = STACKTOP; //@line 7646
   STACKTOP = sp; //@line 7647
   return 0; //@line 7647
  }
  _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7649
  $$pr = HEAP32[$86 >> 2] | 0; //@line 7650
  if (!$$pr) {
   HEAP32[5919] = 0; //@line 7653
  } else {
   $98 = $$pr; //@line 7655
   label = 34; //@line 7656
  }
 }
 do {
  if ((label | 0) == 34) {
   $99 = HEAP32[$98 + 4 >> 2] | 0; //@line 7662
   $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7663
   FUNCTION_TABLE_vii[$99 & 15](23664, $1); //@line 7664
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 679; //@line 7667
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 7669
    HEAP32[$AsyncCtx9 + 8 >> 2] = $86; //@line 7671
    HEAP32[$AsyncCtx9 + 12 >> 2] = $1; //@line 7673
    HEAP32[$AsyncCtx9 + 16 >> 2] = $vararg_buffer; //@line 7675
    HEAP32[$AsyncCtx9 + 20 >> 2] = $vararg_buffer; //@line 7677
    sp = STACKTOP; //@line 7678
    STACKTOP = sp; //@line 7679
    return 0; //@line 7679
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 7681
   $$pre$i$i = HEAP32[$86 >> 2] | 0; //@line 7682
   HEAP32[5919] = $$pre$i$i; //@line 7683
   if ($$pre$i$i | 0) {
    $108 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 7688
    $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7689
    FUNCTION_TABLE_vi[$108 & 1023]($1); //@line 7690
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 680; //@line 7693
     HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 7695
     HEAP32[$AsyncCtx13 + 8 >> 2] = $1; //@line 7697
     HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer; //@line 7699
     HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer; //@line 7701
     sp = STACKTOP; //@line 7702
     STACKTOP = sp; //@line 7703
     return 0; //@line 7703
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7705
     break;
    }
   }
  }
 } while (0);
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20484, 23664) | 0; //@line 7711
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20484) | 0) {
  $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7715
  _puts(15210) | 0; //@line 7716
  if (___async) {
   HEAP32[$AsyncCtx21 >> 2] = 681; //@line 7719
   sp = STACKTOP; //@line 7720
   STACKTOP = sp; //@line 7721
   return 0; //@line 7721
  }
  _emscripten_free_async_context($AsyncCtx21 | 0); //@line 7723
  $$1 = -1; //@line 7724
  STACKTOP = sp; //@line 7725
  return $$1 | 0; //@line 7725
 }
 __ZN16LoRaWANInterface12set_datarateEh(20484, 5) | 0; //@line 7727
 HEAP8[$1 >> 0] = 0; //@line 7728
 HEAP32[$1 + 4 >> 2] = 24297; //@line 7730
 HEAP32[$1 + 8 >> 2] = 24305; //@line 7732
 HEAP32[$1 + 12 >> 2] = 24313; //@line 7734
 HEAP8[$1 + 16 >> 0] = 3; //@line 7736
 $119 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20484, $1) | 0; //@line 7737
 L67 : do {
  switch ($119 | 0) {
  case 0:
  case -1016:
   {
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7741
    _puts(15273) | 0; //@line 7742
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 682; //@line 7745
     HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 7747
     sp = STACKTOP; //@line 7748
     STACKTOP = sp; //@line 7749
     return 0; //@line 7749
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 7751
    $AsyncCtx36 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7752
    __ZN6events10EventQueue8dispatchEi(20280, -1); //@line 7753
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 683; //@line 7756
     HEAP32[$AsyncCtx36 + 4 >> 2] = $1; //@line 7758
     sp = STACKTOP; //@line 7759
     STACKTOP = sp; //@line 7760
     return 0; //@line 7760
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 7762
     $$0 = 0; //@line 7763
     break L67;
    }
    break;
   }
  default:
   {
    HEAP32[$vararg_buffer >> 2] = $119; //@line 7769
    _printf(15244, $vararg_buffer) | 0; //@line 7770
    $$0 = -1; //@line 7771
   }
  }
 } while (0);
 $$1 = $$0; //@line 7775
 STACKTOP = sp; //@line 7776
 return $$1 | 0; //@line 7776
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15712
 STACKTOP = STACKTOP + 1056 | 0; //@line 15713
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 15713
 $2 = sp + 1024 | 0; //@line 15714
 $3 = sp; //@line 15715
 HEAP32[$2 >> 2] = 0; //@line 15716
 HEAP32[$2 + 4 >> 2] = 0; //@line 15716
 HEAP32[$2 + 8 >> 2] = 0; //@line 15716
 HEAP32[$2 + 12 >> 2] = 0; //@line 15716
 HEAP32[$2 + 16 >> 2] = 0; //@line 15716
 HEAP32[$2 + 20 >> 2] = 0; //@line 15716
 HEAP32[$2 + 24 >> 2] = 0; //@line 15716
 HEAP32[$2 + 28 >> 2] = 0; //@line 15716
 $4 = HEAP8[$1 >> 0] | 0; //@line 15717
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 15721
   $$0185$ph$lcssa327 = -1; //@line 15721
   $$0187219$ph325326 = 0; //@line 15721
   $$1176$ph$ph$lcssa208 = 1; //@line 15721
   $$1186$ph$lcssa = -1; //@line 15721
   label = 26; //@line 15722
  } else {
   $$0187263 = 0; //@line 15724
   $10 = $4; //@line 15724
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 15730
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 15738
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 15741
    $$0187263 = $$0187263 + 1 | 0; //@line 15742
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 15745
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 15747
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 15755
   if ($23) {
    $$0183$ph260 = 0; //@line 15757
    $$0185$ph259 = -1; //@line 15757
    $130 = 1; //@line 15757
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 15759
     $$0183$ph197$ph253 = $$0183$ph260; //@line 15759
     $131 = $130; //@line 15759
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 15761
      $132 = $131; //@line 15761
      L10 : while (1) {
       $$0179242 = 1; //@line 15763
       $25 = $132; //@line 15763
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 15767
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 15769
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 15775
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 15779
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15784
         $$0185$ph$lcssa = $$0185$ph259; //@line 15784
         break L6;
        } else {
         $25 = $27; //@line 15782
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 15788
       $132 = $37 + 1 | 0; //@line 15789
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 15794
        $$0185$ph$lcssa = $$0185$ph259; //@line 15794
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 15792
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 15799
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 15803
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 15808
       $$0185$ph$lcssa = $$0185$ph259; //@line 15808
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 15806
       $$0183$ph197$ph253 = $25; //@line 15806
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 15813
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 15818
      $$0185$ph$lcssa = $$0183$ph197248; //@line 15818
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 15816
      $$0185$ph259 = $$0183$ph197248; //@line 15816
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 15823
     $$1186$ph238 = -1; //@line 15823
     $133 = 1; //@line 15823
     while (1) {
      $$1176$ph$ph233 = 1; //@line 15825
      $$1184$ph193$ph232 = $$1184$ph239; //@line 15825
      $135 = $133; //@line 15825
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 15827
       $134 = $135; //@line 15827
       L25 : while (1) {
        $$1180222 = 1; //@line 15829
        $52 = $134; //@line 15829
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 15833
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 15835
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 15841
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 15845
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15850
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15850
          $$0187219$ph325326 = $$0187263; //@line 15850
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15850
          $$1186$ph$lcssa = $$1186$ph238; //@line 15850
          label = 26; //@line 15851
          break L1;
         } else {
          $52 = $45; //@line 15848
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 15855
        $134 = $56 + 1 | 0; //@line 15856
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15861
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15861
         $$0187219$ph325326 = $$0187263; //@line 15861
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 15861
         $$1186$ph$lcssa = $$1186$ph238; //@line 15861
         label = 26; //@line 15862
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 15859
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 15867
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 15871
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15876
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15876
        $$0187219$ph325326 = $$0187263; //@line 15876
        $$1176$ph$ph$lcssa208 = $60; //@line 15876
        $$1186$ph$lcssa = $$1186$ph238; //@line 15876
        label = 26; //@line 15877
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 15874
        $$1184$ph193$ph232 = $52; //@line 15874
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 15882
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15887
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15887
       $$0187219$ph325326 = $$0187263; //@line 15887
       $$1176$ph$ph$lcssa208 = 1; //@line 15887
       $$1186$ph$lcssa = $$1184$ph193227; //@line 15887
       label = 26; //@line 15888
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 15885
       $$1186$ph238 = $$1184$ph193227; //@line 15885
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 15893
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 15893
     $$0187219$ph325326 = $$0187263; //@line 15893
     $$1176$ph$ph$lcssa208 = 1; //@line 15893
     $$1186$ph$lcssa = -1; //@line 15893
     label = 26; //@line 15894
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 15897
    $$0185$ph$lcssa327 = -1; //@line 15897
    $$0187219$ph325326 = $$0187263; //@line 15897
    $$1176$ph$ph$lcssa208 = 1; //@line 15897
    $$1186$ph$lcssa = -1; //@line 15897
    label = 26; //@line 15898
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 15906
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 15907
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 15908
   $70 = $$1186$$0185 + 1 | 0; //@line 15910
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 15915
    $$3178 = $$1176$$0175; //@line 15915
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 15918
    $$0168 = 0; //@line 15922
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 15922
   }
   $78 = $$0187219$ph325326 | 63; //@line 15924
   $79 = $$0187219$ph325326 + -1 | 0; //@line 15925
   $80 = ($$0168 | 0) != 0; //@line 15926
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 15927
   $$0166 = $0; //@line 15928
   $$0169 = 0; //@line 15928
   $$0170 = $0; //@line 15928
   while (1) {
    $83 = $$0166; //@line 15931
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 15936
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 15940
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 15947
        break L35;
       } else {
        $$3173 = $86; //@line 15950
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 15955
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 15959
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 15971
      $$2181$sink = $$0187219$ph325326; //@line 15971
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 15976
      if ($105 | 0) {
       $$0169$be = 0; //@line 15984
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 15984
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 15988
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 15990
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 15994
       } else {
        $$3182221 = $111; //@line 15996
        $$pr = $113; //@line 15996
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 16004
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 16006
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 16009
          break L54;
         } else {
          $$3182221 = $118; //@line 16012
         }
        }
        $$0169$be = 0; //@line 16016
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 16016
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 16023
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 16026
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 16035
        $$2181$sink = $$3178; //@line 16035
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 16042
    $$0169 = $$0169$be; //@line 16042
    $$0170 = $$3173; //@line 16042
   }
  }
 } while (0);
 STACKTOP = sp; //@line 16046
 return $$3 | 0; //@line 16046
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $105 = 0, $106 = 0, $11 = 0, $110 = 0, $112 = 0, $117 = 0, $118 = 0, $121 = 0, $124 = 0, $13 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $33 = 0, $4 = 0, $41 = 0, $53 = 0, $55 = 0, $56 = 0, $6 = 0, $60 = 0, $62 = 0, $7 = 0, $71 = 0, $72 = 0, $79 = 0, $82 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx28 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7967
 STACKTOP = STACKTOP + 64 | 0; //@line 7968
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 7968
 $vararg_buffer3 = sp + 24 | 0; //@line 7969
 $vararg_buffer1 = sp + 16 | 0; //@line 7970
 $vararg_buffer = sp; //@line 7971
 $1 = sp + 40 | 0; //@line 7972
 $2 = __ZNK7LoRaMac19get_mcps_indicationEv($0) | 0; //@line 7973
 $4 = HEAP32[$2 + 8 >> 2] | 0; //@line 7975
 if ($4 | 0) {
  HEAP32[$vararg_buffer >> 2] = $4; //@line 7978
  _mbed_tracef(2, 12021, 12063, $vararg_buffer); //@line 7979
  $6 = $0 + 2512 | 0; //@line 7980
  $7 = HEAP32[$6 >> 2] | 0; //@line 7981
  do {
   if ($7 | 0) {
    $11 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7987
    $13 = HEAP32[$7 + 4 >> 2] | 0; //@line 7989
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7990
    FUNCTION_TABLE_vii[$13 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 7991
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 255; //@line 7994
     HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 7996
     HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 7998
     HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 8000
     HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 8002
     sp = STACKTOP; //@line 8003
     STACKTOP = sp; //@line 8004
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 8006
    $18 = $vararg_buffer + 12 | 0; //@line 8008
    HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 8009
    $AsyncCtx31 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8010
    $19 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($11, $vararg_buffer, 9) | 0; //@line 8011
    if (___async) {
     HEAP32[$AsyncCtx31 >> 2] = 256; //@line 8014
     HEAP32[$AsyncCtx31 + 4 >> 2] = $18; //@line 8016
     HEAP32[$AsyncCtx31 + 8 >> 2] = $vararg_buffer; //@line 8018
     sp = STACKTOP; //@line 8019
     STACKTOP = sp; //@line 8020
     return;
    }
    _emscripten_free_async_context($AsyncCtx31 | 0); //@line 8022
    $22 = HEAP32[$18 >> 2] | 0; //@line 8023
    do {
     if ($22 | 0) {
      $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 8028
      $AsyncCtx8 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8029
      FUNCTION_TABLE_vi[$25 & 1023]($vararg_buffer); //@line 8030
      if (___async) {
       HEAP32[$AsyncCtx8 >> 2] = 257; //@line 8033
       HEAP32[$AsyncCtx8 + 4 >> 2] = $19; //@line 8035
       HEAP32[$AsyncCtx8 + 8 >> 2] = $vararg_buffer; //@line 8037
       sp = STACKTOP; //@line 8038
       STACKTOP = sp; //@line 8039
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8041
       break;
      }
     }
    } while (0);
    if (!$19) {
     $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8048
     _mbed_assert_internal(11914, 11923, 778); //@line 8049
     if (___async) {
      HEAP32[$AsyncCtx43 >> 2] = 258; //@line 8052
      HEAP32[$AsyncCtx43 + 4 >> 2] = $vararg_buffer; //@line 8054
      sp = STACKTOP; //@line 8055
      STACKTOP = sp; //@line 8056
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx43 | 0); //@line 8058
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 8064
  return;
 }
 HEAP32[$0 + 2556 >> 2] = HEAP32[$2 + 36 >> 2]; //@line 8069
 $33 = $2 + 13 | 0; //@line 8070
 if ((HEAP8[$33 >> 0] | 0) == -32) {
  _mbed_tracef(8, 12021, 12101, $vararg_buffer1); //@line 8074
  STACKTOP = sp; //@line 8075
  return;
 }
 if (HEAP8[$2 + 22 >> 0] | 0) {
  HEAP32[$0 + 2836 >> 2] = 2; //@line 8082
  $41 = HEAP16[$2 + 20 >> 1] | 0; //@line 8084
  HEAP16[$0 + 2860 >> 1] = $41; //@line 8086
  HEAP8[$0 + 2853 >> 0] = HEAP8[$33 >> 0] | 0; //@line 8089
  HEAP32[$0 + 2856 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 8093
  HEAP32[$0 + 2844 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 8097
  $53 = HEAPU8[$33 >> 0] | 0; //@line 8100
  HEAP32[$vararg_buffer3 >> 2] = $41 & 65535; //@line 8101
  HEAP32[$vararg_buffer3 + 4 >> 2] = $53; //@line 8103
  _mbed_tracef(16, 12021, 12127, $vararg_buffer3); //@line 8104
  HEAP8[$0 + 2832 >> 0] = 1; //@line 8106
  $55 = $0 + 2512 | 0; //@line 8107
  $56 = HEAP32[$55 >> 2] | 0; //@line 8108
  do {
   if ($56 | 0) {
    $60 = HEAP32[$0 + 3168 >> 2] | 0; //@line 8114
    $62 = HEAP32[$56 + 4 >> 2] | 0; //@line 8116
    $AsyncCtx11 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8117
    FUNCTION_TABLE_vii[$62 & 15]($vararg_buffer3, $0 + 2500 | 0); //@line 8118
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 259; //@line 8121
     HEAP32[$AsyncCtx11 + 4 >> 2] = $vararg_buffer3; //@line 8123
     HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 8125
     HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 8127
     HEAP32[$AsyncCtx11 + 16 >> 2] = $1; //@line 8129
     HEAP32[$AsyncCtx11 + 20 >> 2] = $0; //@line 8131
     HEAP32[$AsyncCtx11 + 24 >> 2] = $55; //@line 8133
     HEAP32[$AsyncCtx11 + 28 >> 2] = $vararg_buffer3; //@line 8135
     HEAP32[$AsyncCtx11 + 32 >> 2] = $60; //@line 8137
     sp = STACKTOP; //@line 8138
     STACKTOP = sp; //@line 8139
     return;
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8141
    $71 = $vararg_buffer3 + 12 | 0; //@line 8143
    HEAP32[$71 >> 2] = HEAP32[$55 >> 2]; //@line 8144
    $AsyncCtx28 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8145
    $72 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($60, $vararg_buffer3, 7) | 0; //@line 8146
    if (___async) {
     HEAP32[$AsyncCtx28 >> 2] = 260; //@line 8149
     HEAP32[$AsyncCtx28 + 4 >> 2] = $vararg_buffer3; //@line 8151
     HEAP32[$AsyncCtx28 + 8 >> 2] = $2; //@line 8153
     HEAP32[$AsyncCtx28 + 12 >> 2] = $0; //@line 8155
     HEAP32[$AsyncCtx28 + 16 >> 2] = $1; //@line 8157
     HEAP32[$AsyncCtx28 + 20 >> 2] = $0; //@line 8159
     HEAP32[$AsyncCtx28 + 24 >> 2] = $71; //@line 8161
     sp = STACKTOP; //@line 8162
     STACKTOP = sp; //@line 8163
     return;
    }
    _emscripten_free_async_context($AsyncCtx28 | 0); //@line 8165
    $79 = HEAP32[$71 >> 2] | 0; //@line 8166
    do {
     if ($79 | 0) {
      $82 = HEAP32[$79 + 8 >> 2] | 0; //@line 8171
      $AsyncCtx15 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8172
      FUNCTION_TABLE_vi[$82 & 1023]($vararg_buffer3); //@line 8173
      if (___async) {
       HEAP32[$AsyncCtx15 >> 2] = 261; //@line 8176
       HEAP32[$AsyncCtx15 + 4 >> 2] = $vararg_buffer3; //@line 8178
       HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 8180
       HEAP32[$AsyncCtx15 + 12 >> 2] = $0; //@line 8182
       HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 8184
       HEAP32[$AsyncCtx15 + 20 >> 2] = $0; //@line 8186
       HEAP32[$AsyncCtx15 + 24 >> 2] = $72; //@line 8188
       sp = STACKTOP; //@line 8189
       STACKTOP = sp; //@line 8190
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8192
       break;
      }
     }
    } while (0);
    if (!$72) {
     $AsyncCtx39 = _emscripten_alloc_async_context(24, sp) | 0; //@line 8199
     _mbed_assert_internal(11914, 11923, 778); //@line 8200
     if (___async) {
      HEAP32[$AsyncCtx39 >> 2] = 262; //@line 8203
      HEAP32[$AsyncCtx39 + 4 >> 2] = $vararg_buffer3; //@line 8205
      HEAP32[$AsyncCtx39 + 8 >> 2] = $2; //@line 8207
      HEAP32[$AsyncCtx39 + 12 >> 2] = $0; //@line 8209
      HEAP32[$AsyncCtx39 + 16 >> 2] = $1; //@line 8211
      HEAP32[$AsyncCtx39 + 20 >> 2] = $0; //@line 8213
      sp = STACKTOP; //@line 8214
      STACKTOP = sp; //@line 8215
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx39 | 0); //@line 8217
      break;
     }
    }
   }
  } while (0);
 }
 if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
  label = 35; //@line 8227
 } else {
  if (!(HEAP8[$2 + 15 >> 0] | 0)) {
   label = 35; //@line 8233
  }
 }
 if ((label | 0) == 35) {
  if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
   STACKTOP = sp; //@line 8240
   return;
  }
  if ((HEAP32[$2 + 4 >> 2] | 0) != 1) {
   STACKTOP = sp; //@line 8246
   return;
  }
 }
 $105 = $0 + 2512 | 0; //@line 8249
 $106 = HEAP32[$105 >> 2] | 0; //@line 8250
 do {
  if ($106 | 0) {
   $110 = HEAP32[$0 + 3168 >> 2] | 0; //@line 8256
   $112 = HEAP32[$106 + 4 >> 2] | 0; //@line 8258
   $AsyncCtx18 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8259
   FUNCTION_TABLE_vii[$112 & 15]($1, $0 + 2500 | 0); //@line 8260
   if (___async) {
    HEAP32[$AsyncCtx18 >> 2] = 263; //@line 8263
    HEAP32[$AsyncCtx18 + 4 >> 2] = $105; //@line 8265
    HEAP32[$AsyncCtx18 + 8 >> 2] = $1; //@line 8267
    HEAP32[$AsyncCtx18 + 12 >> 2] = $110; //@line 8269
    HEAP32[$AsyncCtx18 + 16 >> 2] = $1; //@line 8271
    sp = STACKTOP; //@line 8272
    STACKTOP = sp; //@line 8273
    return;
   }
   _emscripten_free_async_context($AsyncCtx18 | 0); //@line 8275
   $117 = $1 + 12 | 0; //@line 8277
   HEAP32[$117 >> 2] = HEAP32[$105 >> 2]; //@line 8278
   $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8279
   $118 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($110, $1, 11) | 0; //@line 8280
   if (___async) {
    HEAP32[$AsyncCtx25 >> 2] = 264; //@line 8283
    HEAP32[$AsyncCtx25 + 4 >> 2] = $117; //@line 8285
    HEAP32[$AsyncCtx25 + 8 >> 2] = $1; //@line 8287
    sp = STACKTOP; //@line 8288
    STACKTOP = sp; //@line 8289
    return;
   }
   _emscripten_free_async_context($AsyncCtx25 | 0); //@line 8291
   $121 = HEAP32[$117 >> 2] | 0; //@line 8292
   do {
    if ($121 | 0) {
     $124 = HEAP32[$121 + 8 >> 2] | 0; //@line 8297
     $AsyncCtx22 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8298
     FUNCTION_TABLE_vi[$124 & 1023]($1); //@line 8299
     if (___async) {
      HEAP32[$AsyncCtx22 >> 2] = 265; //@line 8302
      HEAP32[$AsyncCtx22 + 4 >> 2] = $118; //@line 8304
      HEAP32[$AsyncCtx22 + 8 >> 2] = $1; //@line 8306
      sp = STACKTOP; //@line 8307
      STACKTOP = sp; //@line 8308
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx22 | 0); //@line 8310
      break;
     }
    }
   } while (0);
   if (!$118) {
    $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8317
    _mbed_assert_internal(11914, 11923, 778); //@line 8318
    if (___async) {
     HEAP32[$AsyncCtx35 >> 2] = 266; //@line 8321
     HEAP32[$AsyncCtx35 + 4 >> 2] = $1; //@line 8323
     sp = STACKTOP; //@line 8324
     STACKTOP = sp; //@line 8325
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx35 | 0); //@line 8327
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 8333
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_368($0) {
 $0 = $0 | 0;
 var $$058 = 0, $$062 = 0, $$06272 = 0, $$06273 = 0, $$064 = 0, $$06471 = 0, $$06575 = 0, $$06874 = 0, $$166 = 0, $$16670 = 0, $$267 = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $12 = 0, $121 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $35 = 0, $36 = 0, $4 = 0, $49 = 0, $50 = 0, $51 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $64 = 0, $70 = 0, $71 = 0, $74 = 0, $76 = 0, $8 = 0, $91 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 26136
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26138
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 26140
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26142
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26144
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26146
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26148
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26150
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26152
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 26154
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 26156
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 26160
 $26 = HEAP8[$0 + 52 >> 0] & 1; //@line 26163
 if (HEAP8[___async_retval >> 0] & 1) {
  HEAP8[$24 >> 0] = HEAP8[$24 >> 0] | 64; //@line 26170
 }
 if (!(HEAP8[$10 + 1178 >> 0] | 0)) {
  $$pre$phiZ2D = $24; //@line 26176
 } else {
  _mbed_tracef(16, 12709, 12889, $20); //@line 26178
  HEAP8[$24 >> 0] = HEAP8[$24 >> 0] | 32; //@line 26181
  $$pre$phiZ2D = $24; //@line 26182
 }
 $35 = $10 + 1756 | 0; //@line 26184
 $36 = HEAP32[$35 >> 2] | 0; //@line 26185
 HEAP8[$10 + 1186 >> 0] = $36; //@line 26188
 HEAP8[$10 + 1187 >> 0] = $36 >>> 8; //@line 26192
 HEAP8[$10 + 1188 >> 0] = $36 >>> 16; //@line 26196
 HEAP8[$10 + 1189 >> 0] = $36 >>> 24; //@line 26200
 $49 = $10 + 1190 | 0; //@line 26202
 HEAP8[$49 >> 0] = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 26203
 $50 = $10 + 1760 | 0; //@line 26204
 $51 = HEAP32[$50 >> 2] | 0; //@line 26205
 HEAP8[$10 + 1191 >> 0] = $51; //@line 26208
 HEAP8[$10 + 1192 >> 0] = $51 >>> 8; //@line 26212
 $57 = $10 + 476 | 0; //@line 26213
 __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($57); //@line 26214
 $58 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($57) | 0; //@line 26215
 do {
  if ($26) {
   label = 16; //@line 26218
  } else {
   if (!(HEAP16[$12 >> 1] | 0)) {
    label = 16; //@line 26223
   } else {
    if (!(__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($57) | 0)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 26227
     $$06272 = $4; //@line 26228
     $$06471 = $18; //@line 26228
     $$16670 = 8; //@line 26228
     label = 20; //@line 26229
     break;
    }
    $62 = $58 & 255; //@line 26232
    if (($58 & 255) >= 16) {
     HEAP16[$12 >> 1] = $58 & 255; //@line 26236
     $$062 = 0; //@line 26238
     $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 26238
     $$166 = 8; //@line 26238
     label = 19; //@line 26239
     break;
    }
    $64 = HEAP8[$$pre$phiZ2D >> 0] | 0; //@line 26242
    $70 = ($64 & 255) + $62 & 15 | $64 & -16; //@line 26248
    HEAP8[$$pre$phiZ2D >> 0] = $70; //@line 26249
    HEAP8[$49 >> 0] = $70; //@line 26250
    $71 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 26251
    if (!($58 << 24 >> 24)) {
     __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 26254
     $$06272 = $4; //@line 26255
     $$06471 = $18; //@line 26255
     $$16670 = 8; //@line 26255
     label = 20; //@line 26256
     break;
    } else {
     $$06575 = 8; //@line 26259
     $$06874 = 0; //@line 26259
     $74 = 0; //@line 26259
     while (1) {
      $76 = $$06575 + 1 << 24 >> 24; //@line 26263
      HEAP8[($$06575 & 255) + ($10 + 1185) >> 0] = HEAP8[$71 + $74 >> 0] | 0; //@line 26266
      $$06874 = $$06874 + 1 << 16 >> 16; //@line 26267
      $74 = $$06874 & 65535; //@line 26268
      if ($74 >>> 0 >= $62 >>> 0) {
       $$062 = $4; //@line 26273
       $$064 = $18; //@line 26273
       $$166 = $76; //@line 26273
       label = 19; //@line 26274
       break;
      } else {
       $$06575 = $76; //@line 26271
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 16) {
  if (!($58 << 24 >> 24)) {
   $$062 = $4; //@line 26285
   $$064 = $18; //@line 26285
   $$166 = 8; //@line 26285
   label = 19; //@line 26286
  } else {
   if (__ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($57) | 0) {
    HEAP16[$12 >> 1] = $58 & 255; //@line 26291
    $$062 = 0; //@line 26293
    $$064 = __ZN14LoRaMacCommand23get_mac_commands_bufferEv($57) | 0; //@line 26293
    $$166 = 8; //@line 26293
    label = 19; //@line 26294
   } else {
    $$062 = $4; //@line 26296
    $$064 = $18; //@line 26296
    $$166 = 8; //@line 26296
    label = 19; //@line 26297
   }
  }
 }
 if ((label | 0) == 19) {
  __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($57); //@line 26302
  if (!$$064) {
   $$06273 = $$062; //@line 26305
   $$267 = $$166; //@line 26305
  } else {
   $$06272 = $$062; //@line 26307
   $$06471 = $$064; //@line 26307
   $$16670 = $$166; //@line 26307
   label = 20; //@line 26308
  }
 }
 if ((label | 0) == 20) {
  if (!(HEAP16[$12 >> 1] | 0)) {
   $$06273 = $$06272; //@line 26315
   $$267 = $$16670; //@line 26315
  } else {
   $91 = $$16670 + 1 << 24 >> 24; //@line 26317
   HEAP8[($$16670 & 255) + ($10 + 1185) >> 0] = $$06272; //@line 26320
   if (!($$06272 << 24 >> 24)) {
    __ZN14LoRaMacCommand20clear_command_bufferEv($57); //@line 26324
    $$058 = $10 + 1716 | 0; //@line 26326
   } else {
    $$058 = $10 + 1732 | 0; //@line 26328
   }
   $98 = HEAP16[$12 >> 1] | 0; //@line 26331
   $99 = HEAP32[$35 >> 2] | 0; //@line 26332
   $100 = HEAP32[$50 >> 2] | 0; //@line 26333
   $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 26336
   $103 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($10 + 756 | 0, $$06471, $98, $$058, 128, $99, 0, $100, ($91 & 255) + ($10 + 1185) | 0) | 0; //@line 26337
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 428; //@line 26340
    $104 = $ReallocAsyncCtx + 4 | 0; //@line 26341
    HEAP8[$104 >> 0] = $$06272; //@line 26342
    $105 = $ReallocAsyncCtx + 5 | 0; //@line 26343
    HEAP8[$105 >> 0] = $91; //@line 26344
    $106 = $ReallocAsyncCtx + 8 | 0; //@line 26345
    HEAP32[$106 >> 2] = $12; //@line 26346
    $107 = $ReallocAsyncCtx + 12 | 0; //@line 26347
    HEAP32[$107 >> 2] = $10; //@line 26348
    $108 = $ReallocAsyncCtx + 16 | 0; //@line 26349
    HEAP32[$108 >> 2] = $35; //@line 26350
    $109 = $ReallocAsyncCtx + 20 | 0; //@line 26351
    HEAP32[$109 >> 2] = $50; //@line 26352
    $110 = $ReallocAsyncCtx + 24 | 0; //@line 26353
    HEAP32[$110 >> 2] = $14; //@line 26354
    $111 = $ReallocAsyncCtx + 28 | 0; //@line 26355
    HEAP32[$111 >> 2] = $16; //@line 26356
    $112 = $ReallocAsyncCtx + 32 | 0; //@line 26357
    HEAP8[$112 >> 0] = $4; //@line 26358
    $113 = $ReallocAsyncCtx + 36 | 0; //@line 26359
    HEAP32[$113 >> 2] = $6; //@line 26360
    $114 = $ReallocAsyncCtx + 40 | 0; //@line 26361
    HEAP32[$114 >> 2] = $8; //@line 26362
    $115 = $ReallocAsyncCtx + 44 | 0; //@line 26363
    HEAP32[$115 >> 2] = $2; //@line 26364
    sp = STACKTOP; //@line 26365
    return;
   }
   HEAP32[___async_retval >> 2] = $103; //@line 26369
   ___async_unwind = 0; //@line 26370
   HEAP32[$ReallocAsyncCtx >> 2] = 428; //@line 26371
   $104 = $ReallocAsyncCtx + 4 | 0; //@line 26372
   HEAP8[$104 >> 0] = $$06272; //@line 26373
   $105 = $ReallocAsyncCtx + 5 | 0; //@line 26374
   HEAP8[$105 >> 0] = $91; //@line 26375
   $106 = $ReallocAsyncCtx + 8 | 0; //@line 26376
   HEAP32[$106 >> 2] = $12; //@line 26377
   $107 = $ReallocAsyncCtx + 12 | 0; //@line 26378
   HEAP32[$107 >> 2] = $10; //@line 26379
   $108 = $ReallocAsyncCtx + 16 | 0; //@line 26380
   HEAP32[$108 >> 2] = $35; //@line 26381
   $109 = $ReallocAsyncCtx + 20 | 0; //@line 26382
   HEAP32[$109 >> 2] = $50; //@line 26383
   $110 = $ReallocAsyncCtx + 24 | 0; //@line 26384
   HEAP32[$110 >> 2] = $14; //@line 26385
   $111 = $ReallocAsyncCtx + 28 | 0; //@line 26386
   HEAP32[$111 >> 2] = $16; //@line 26387
   $112 = $ReallocAsyncCtx + 32 | 0; //@line 26388
   HEAP8[$112 >> 0] = $4; //@line 26389
   $113 = $ReallocAsyncCtx + 36 | 0; //@line 26390
   HEAP32[$113 >> 2] = $6; //@line 26391
   $114 = $ReallocAsyncCtx + 40 | 0; //@line 26392
   HEAP32[$114 >> 2] = $8; //@line 26393
   $115 = $ReallocAsyncCtx + 44 | 0; //@line 26394
   HEAP32[$115 >> 2] = $2; //@line 26395
   sp = STACKTOP; //@line 26396
   return;
  }
 }
 $121 = (HEAPU16[$12 >> 1] | 0) + ($$267 & 255) & 65535; //@line 26404
 HEAP16[$12 >> 1] = $121; //@line 26405
 $124 = HEAP32[$35 >> 2] | 0; //@line 26408
 $125 = HEAP32[$50 >> 2] | 0; //@line 26409
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 26410
 $126 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($10 + 756 | 0, $14, $121, $10 + 1716 | 0, 128, $124, 0, $125, $16) | 0; //@line 26411
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 429; //@line 26414
  $127 = $ReallocAsyncCtx2 + 4 | 0; //@line 26415
  HEAP32[$127 >> 2] = 0; //@line 26416
  $128 = $ReallocAsyncCtx2 + 8 | 0; //@line 26417
  HEAP32[$128 >> 2] = $16; //@line 26418
  $129 = $ReallocAsyncCtx2 + 12 | 0; //@line 26419
  HEAP32[$129 >> 2] = $12; //@line 26420
  $130 = $ReallocAsyncCtx2 + 16 | 0; //@line 26421
  HEAP32[$130 >> 2] = $10; //@line 26422
  $131 = $ReallocAsyncCtx2 + 20 | 0; //@line 26423
  HEAP8[$131 >> 0] = $4; //@line 26424
  $132 = $ReallocAsyncCtx2 + 21 | 0; //@line 26425
  HEAP8[$132 >> 0] = $$06273; //@line 26426
  $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 26427
  HEAP32[$133 >> 2] = $6; //@line 26428
  $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 26429
  HEAP32[$134 >> 2] = $8; //@line 26430
  $135 = $ReallocAsyncCtx2 + 32 | 0; //@line 26431
  HEAP32[$135 >> 2] = $2; //@line 26432
  sp = STACKTOP; //@line 26433
  return;
 }
 HEAP32[___async_retval >> 2] = $126; //@line 26437
 ___async_unwind = 0; //@line 26438
 HEAP32[$ReallocAsyncCtx2 >> 2] = 429; //@line 26439
 $127 = $ReallocAsyncCtx2 + 4 | 0; //@line 26440
 HEAP32[$127 >> 2] = 0; //@line 26441
 $128 = $ReallocAsyncCtx2 + 8 | 0; //@line 26442
 HEAP32[$128 >> 2] = $16; //@line 26443
 $129 = $ReallocAsyncCtx2 + 12 | 0; //@line 26444
 HEAP32[$129 >> 2] = $12; //@line 26445
 $130 = $ReallocAsyncCtx2 + 16 | 0; //@line 26446
 HEAP32[$130 >> 2] = $10; //@line 26447
 $131 = $ReallocAsyncCtx2 + 20 | 0; //@line 26448
 HEAP8[$131 >> 0] = $4; //@line 26449
 $132 = $ReallocAsyncCtx2 + 21 | 0; //@line 26450
 HEAP8[$132 >> 0] = $$06273; //@line 26451
 $133 = $ReallocAsyncCtx2 + 24 | 0; //@line 26452
 HEAP32[$133 >> 2] = $6; //@line 26453
 $134 = $ReallocAsyncCtx2 + 28 | 0; //@line 26454
 HEAP32[$134 >> 2] = $8; //@line 26455
 $135 = $ReallocAsyncCtx2 + 32 | 0; //@line 26456
 HEAP32[$135 >> 2] = $2; //@line 26457
 sp = STACKTOP; //@line 26458
 return;
}
function _mbedtls_gcm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$0$i = 0, $108 = 0, $110 = 0, $115 = 0, $120 = 0, $125 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $141 = 0, $143 = 0, $148 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $166 = 0, $171 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $182 = 0, $183 = 0, $184 = 0, $187 = 0, $189 = 0, $194 = 0, $198 = 0, $199 = 0, $201 = 0, $205 = 0, $206 = 0, $208 = 0, $212 = 0, $213 = 0, $215 = 0, $219 = 0, $220 = 0, $222 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $236 = 0, $240 = 0, $241 = 0, $243 = 0, $247 = 0, $248 = 0, $250 = 0, $257 = 0, $26 = 0, $264 = 0, $271 = 0, $278 = 0, $285 = 0, $292 = 0, $299 = 0, $306 = 0, $313 = 0, $32 = 0, $320 = 0, $327 = 0, $334 = 0, $341 = 0, $348 = 0, $4 = 0, $5 = 0, $54 = 0, $6 = 0, $72 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 4123
 STACKTOP = STACKTOP + 32 | 0; //@line 4124
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4124
 $4 = sp + 8 | 0; //@line 4125
 $5 = sp; //@line 4126
 $6 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 4127
 if (!$6) {
  $$0 = -20; //@line 4130
  STACKTOP = sp; //@line 4131
  return $$0 | 0; //@line 4131
 }
 if ((HEAP32[$6 + 24 >> 2] | 0) != 16) {
  $$0 = -20; //@line 4137
  STACKTOP = sp; //@line 4138
  return $$0 | 0; //@line 4138
 }
 $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4140
 _mbedtls_cipher_free($0); //@line 4141
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 609; //@line 4144
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 4146
  HEAP32[$AsyncCtx11 + 8 >> 2] = $6; //@line 4148
  HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 4150
  HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 4152
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 4154
  HEAP32[$AsyncCtx11 + 24 >> 2] = $5; //@line 4156
  HEAP32[$AsyncCtx11 + 28 >> 2] = $0; //@line 4158
  sp = STACKTOP; //@line 4159
  STACKTOP = sp; //@line 4160
  return 0; //@line 4160
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4162
 $AsyncCtx7 = _emscripten_alloc_async_context(28, sp) | 0; //@line 4163
 $18 = _mbedtls_cipher_setup($0, $6) | 0; //@line 4164
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 610; //@line 4167
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 4169
  HEAP32[$AsyncCtx7 + 8 >> 2] = $2; //@line 4171
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 4173
  HEAP32[$AsyncCtx7 + 16 >> 2] = $4; //@line 4175
  HEAP32[$AsyncCtx7 + 20 >> 2] = $5; //@line 4177
  HEAP32[$AsyncCtx7 + 24 >> 2] = $0; //@line 4179
  sp = STACKTOP; //@line 4180
  STACKTOP = sp; //@line 4181
  return 0; //@line 4181
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 4183
 if ($18 | 0) {
  $$0 = $18; //@line 4186
  STACKTOP = sp; //@line 4187
  return $$0 | 0; //@line 4187
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 4189
 $26 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 4190
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 611; //@line 4193
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 4195
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 4197
  HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 4199
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 4201
  sp = STACKTOP; //@line 4202
  STACKTOP = sp; //@line 4203
  return 0; //@line 4203
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4205
 if ($26 | 0) {
  $$0 = $26; //@line 4208
  STACKTOP = sp; //@line 4209
  return $$0 | 0; //@line 4209
 }
 HEAP32[$5 >> 2] = 0; //@line 4211
 dest = $4; //@line 4212
 stop = dest + 16 | 0; //@line 4212
 do {
  HEAP8[dest >> 0] = 0; //@line 4212
  dest = dest + 1 | 0; //@line 4212
 } while ((dest | 0) < (stop | 0));
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 4213
 $32 = _mbedtls_cipher_update($0, $4, 16, $4, $5) | 0; //@line 4214
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 612; //@line 4217
  HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 4219
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4221
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4223
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 4225
  sp = STACKTOP; //@line 4226
  STACKTOP = sp; //@line 4227
  return 0; //@line 4227
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4229
 if (!$32) {
  $54 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[$4 >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 4248
  $72 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 4266
  $90 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 4284
  $108 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 4302
  $110 = $0 + 136 | 0; //@line 4304
  HEAP32[$110 >> 2] = $108; //@line 4306
  HEAP32[$110 + 4 >> 2] = $90; //@line 4309
  $115 = $0 + 264 | 0; //@line 4311
  HEAP32[$115 >> 2] = $72; //@line 4313
  HEAP32[$115 + 4 >> 2] = $54; //@line 4316
  $120 = $0 + 200 | 0; //@line 4318
  HEAP32[$120 >> 2] = 0; //@line 4320
  HEAP32[$120 + 4 >> 2] = 0; //@line 4323
  $125 = $0 + 72 | 0; //@line 4325
  HEAP32[$125 >> 2] = 0; //@line 4327
  HEAP32[$125 + 4 >> 2] = 0; //@line 4330
  $130 = _i64Subtract(0, 0, $108 & 1 | 0, 0) | 0; //@line 4332
  $132 = _bitshift64Shl($72 | 0, 0, 63) | 0; //@line 4334
  $133 = tempRet0; //@line 4335
  $134 = _bitshift64Lshr($108 | 0, $90 | 0, 1) | 0; //@line 4336
  $136 = $134 | $132; //@line 4338
  $137 = tempRet0 | $133; //@line 4339
  $138 = _bitshift64Lshr($72 | 0, $54 | 0, 1) | 0; //@line 4340
  $139 = tempRet0; //@line 4341
  $141 = $130 & -520093696 ^ $139; //@line 4343
  $143 = $0 + 104 | 0; //@line 4345
  HEAP32[$143 >> 2] = $136; //@line 4347
  HEAP32[$143 + 4 >> 2] = $137; //@line 4350
  $148 = $0 + 232 | 0; //@line 4352
  HEAP32[$148 >> 2] = $138; //@line 4354
  HEAP32[$148 + 4 >> 2] = $141; //@line 4357
  $153 = _i64Subtract(0, 0, $134 & 1 | 0, 0) | 0; //@line 4359
  $155 = _bitshift64Shl($138 | 0, $139 | 0, 63) | 0; //@line 4361
  $156 = tempRet0; //@line 4362
  $157 = _bitshift64Lshr($136 | 0, $137 | 0, 1) | 0; //@line 4363
  $159 = $157 | $155; //@line 4365
  $160 = tempRet0 | $156; //@line 4366
  $161 = _bitshift64Lshr($138 | 0, $141 | 0, 1) | 0; //@line 4367
  $162 = tempRet0; //@line 4368
  $164 = $153 & -520093696 ^ $162; //@line 4370
  $166 = $0 + 88 | 0; //@line 4372
  HEAP32[$166 >> 2] = $159; //@line 4374
  HEAP32[$166 + 4 >> 2] = $160; //@line 4377
  $171 = $0 + 216 | 0; //@line 4379
  HEAP32[$171 >> 2] = $161; //@line 4381
  HEAP32[$171 + 4 >> 2] = $164; //@line 4384
  $176 = _i64Subtract(0, 0, $157 & 1 | 0, 0) | 0; //@line 4386
  $178 = _bitshift64Shl($161 | 0, $162 | 0, 63) | 0; //@line 4388
  $179 = tempRet0; //@line 4389
  $180 = _bitshift64Lshr($159 | 0, $160 | 0, 1) | 0; //@line 4390
  $182 = $178 | $180; //@line 4392
  $183 = $179 | tempRet0; //@line 4393
  $184 = _bitshift64Lshr($161 | 0, $164 | 0, 1) | 0; //@line 4394
  $187 = $176 & -520093696 ^ tempRet0; //@line 4397
  $189 = $0 + 80 | 0; //@line 4399
  HEAP32[$189 >> 2] = $182; //@line 4401
  HEAP32[$189 + 4 >> 2] = $183; //@line 4404
  $194 = $0 + 208 | 0; //@line 4406
  HEAP32[$194 >> 2] = $184; //@line 4408
  HEAP32[$194 + 4 >> 2] = $187; //@line 4411
  $198 = $184 ^ $161; //@line 4412
  $199 = $187 ^ $164; //@line 4413
  $201 = $0 + 224 | 0; //@line 4415
  HEAP32[$201 >> 2] = $198; //@line 4417
  HEAP32[$201 + 4 >> 2] = $199; //@line 4420
  $205 = $182 ^ $159; //@line 4421
  $206 = $183 ^ $160; //@line 4422
  $208 = $0 + 96 | 0; //@line 4424
  HEAP32[$208 >> 2] = $205; //@line 4426
  HEAP32[$208 + 4 >> 2] = $206; //@line 4429
  $212 = $184 ^ $138; //@line 4430
  $213 = $187 ^ $141; //@line 4431
  $215 = $0 + 240 | 0; //@line 4433
  HEAP32[$215 >> 2] = $212; //@line 4435
  HEAP32[$215 + 4 >> 2] = $213; //@line 4438
  $219 = $182 ^ $136; //@line 4439
  $220 = $183 ^ $137; //@line 4440
  $222 = $0 + 112 | 0; //@line 4442
  HEAP32[$222 >> 2] = $219; //@line 4444
  HEAP32[$222 + 4 >> 2] = $220; //@line 4447
  $226 = $161 ^ $138; //@line 4448
  $227 = $164 ^ $141; //@line 4449
  $229 = $0 + 248 | 0; //@line 4451
  HEAP32[$229 >> 2] = $226; //@line 4453
  HEAP32[$229 + 4 >> 2] = $227; //@line 4456
  $233 = $159 ^ $136; //@line 4457
  $234 = $160 ^ $137; //@line 4458
  $236 = $0 + 120 | 0; //@line 4460
  HEAP32[$236 >> 2] = $233; //@line 4462
  HEAP32[$236 + 4 >> 2] = $234; //@line 4465
  $240 = $198 ^ $138; //@line 4466
  $241 = $199 ^ $141; //@line 4467
  $243 = $0 + 256 | 0; //@line 4469
  HEAP32[$243 >> 2] = $240; //@line 4471
  HEAP32[$243 + 4 >> 2] = $241; //@line 4474
  $247 = $205 ^ $136; //@line 4475
  $248 = $206 ^ $137; //@line 4476
  $250 = $0 + 128 | 0; //@line 4478
  HEAP32[$250 >> 2] = $247; //@line 4480
  HEAP32[$250 + 4 >> 2] = $248; //@line 4483
  $257 = $0 + 272 | 0; //@line 4487
  HEAP32[$257 >> 2] = $184 ^ $72; //@line 4489
  HEAP32[$257 + 4 >> 2] = $187 ^ $54; //@line 4492
  $264 = $0 + 144 | 0; //@line 4496
  HEAP32[$264 >> 2] = $182 ^ $108; //@line 4498
  HEAP32[$264 + 4 >> 2] = $183 ^ $90; //@line 4501
  $271 = $0 + 280 | 0; //@line 4505
  HEAP32[$271 >> 2] = $161 ^ $72; //@line 4507
  HEAP32[$271 + 4 >> 2] = $164 ^ $54; //@line 4510
  $278 = $0 + 152 | 0; //@line 4514
  HEAP32[$278 >> 2] = $159 ^ $108; //@line 4516
  HEAP32[$278 + 4 >> 2] = $160 ^ $90; //@line 4519
  $285 = $0 + 288 | 0; //@line 4523
  HEAP32[$285 >> 2] = $198 ^ $72; //@line 4525
  HEAP32[$285 + 4 >> 2] = $199 ^ $54; //@line 4528
  $292 = $0 + 160 | 0; //@line 4532
  HEAP32[$292 >> 2] = $205 ^ $108; //@line 4534
  HEAP32[$292 + 4 >> 2] = $206 ^ $90; //@line 4537
  $299 = $0 + 296 | 0; //@line 4541
  HEAP32[$299 >> 2] = $138 ^ $72; //@line 4543
  HEAP32[$299 + 4 >> 2] = $141 ^ $54; //@line 4546
  $306 = $0 + 168 | 0; //@line 4550
  HEAP32[$306 >> 2] = $136 ^ $108; //@line 4552
  HEAP32[$306 + 4 >> 2] = $137 ^ $90; //@line 4555
  $313 = $0 + 304 | 0; //@line 4559
  HEAP32[$313 >> 2] = $212 ^ $72; //@line 4561
  HEAP32[$313 + 4 >> 2] = $213 ^ $54; //@line 4564
  $320 = $0 + 176 | 0; //@line 4568
  HEAP32[$320 >> 2] = $219 ^ $108; //@line 4570
  HEAP32[$320 + 4 >> 2] = $220 ^ $90; //@line 4573
  $327 = $0 + 312 | 0; //@line 4577
  HEAP32[$327 >> 2] = $226 ^ $72; //@line 4579
  HEAP32[$327 + 4 >> 2] = $227 ^ $54; //@line 4582
  $334 = $0 + 184 | 0; //@line 4586
  HEAP32[$334 >> 2] = $233 ^ $108; //@line 4588
  HEAP32[$334 + 4 >> 2] = $234 ^ $90; //@line 4591
  $341 = $0 + 320 | 0; //@line 4595
  HEAP32[$341 >> 2] = $240 ^ $72; //@line 4597
  HEAP32[$341 + 4 >> 2] = $241 ^ $54; //@line 4600
  $348 = $0 + 192 | 0; //@line 4604
  HEAP32[$348 >> 2] = $247 ^ $108; //@line 4606
  HEAP32[$348 + 4 >> 2] = $248 ^ $90; //@line 4609
  $$0$i = 0; //@line 4610
 } else {
  $$0$i = $32; //@line 4612
 }
 $$0 = $$0$i; //@line 4614
 STACKTOP = sp; //@line 4615
 return $$0 | 0; //@line 4615
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_5($0) {
 $0 = $0 | 0;
 var $$pre$phi$sinkZ2D = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $124 = 0, $126 = 0, $134 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $67 = 0, $69 = 0, $70 = 0, $75 = 0, $76 = 0, $8 = 0, $81 = 0, $82 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18668
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18670
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 18672
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18674
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18676
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18680
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18682
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18684
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18686
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18688
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18690
 $26 = HEAP8[$0 + 52 >> 0] | 0; //@line 18694
 $28 = HEAP8[$0 + 53 >> 0] | 0; //@line 18696
 $30 = HEAP8[$0 + 54 >> 0] | 0; //@line 18698
 $32 = HEAP32[$0 + 56 >> 2] | 0; //@line 18700
 $34 = HEAP8[$0 + 60 >> 0] | 0; //@line 18702
 $36 = HEAP16[$0 + 62 >> 1] | 0; //@line 18704
 $38 = HEAP32[$0 + 64 >> 2] | 0; //@line 18706
 $40 = HEAP32[$0 + 68 >> 2] | 0; //@line 18708
 $42 = HEAP32[$0 + 72 >> 2] | 0; //@line 18710
 $44 = HEAP8[$0 + 76 >> 0] & 1; //@line 18713
 $46 = HEAP32[$0 + 80 >> 2] | 0; //@line 18715
 $48 = HEAP16[$0 + 84 >> 1] | 0; //@line 18717
 $49 = $2 + 2062 | 0; //@line 18718
 HEAP8[$49 >> 0] = 0; //@line 18719
 $50 = $2 + 2044 | 0; //@line 18720
 HEAP8[$50 >> 0] = 0; //@line 18721
 $51 = $2 + 2012 | 0; //@line 18722
 HEAP8[$51 >> 0] = 1; //@line 18723
 HEAP8[$2 + 2034 >> 0] = 0; //@line 18725
 $53 = $2 + 2020 | 0; //@line 18726
 HEAP32[$53 >> 2] = 0; //@line 18727
 HEAP8[$2 + 2024 >> 0] = $44 & 1; //@line 18730
 HEAP8[$2 + 2027 >> 0] = ($26 & 255) >>> 4 & 1; //@line 18734
 $59 = $2 + 2028 | 0; //@line 18735
 HEAP32[$59 >> 2] = 0; //@line 18736
 $60 = $2 + 2032 | 0; //@line 18737
 HEAP16[$60 >> 1] = 0; //@line 18738
 $61 = HEAP32[$46 >> 2] | 0; //@line 18739
 $62 = $2 + 2048 | 0; //@line 18740
 HEAP32[$62 >> 2] = $61; //@line 18741
 HEAP16[$2 + 2036 >> 1] = $48; //@line 18743
 HEAP8[$2 + 2038 >> 0] = $30; //@line 18745
 HEAP32[$2 + 2056 >> 2] = 0; //@line 18747
 HEAP32[$2 + 1768 >> 2] = 0; //@line 18749
 $67 = $2 + 476 | 0; //@line 18750
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($67); //@line 18751
 L2 : do {
  if ($44) {
   HEAP32[$2 + 2016 >> 2] = 2; //@line 18755
   $69 = $6 + 36 | 0; //@line 18756
   $70 = HEAP32[$69 >> 2] | 0; //@line 18757
   if (($70 | 0) == 0 | ($70 | 0) != ($61 | 0)) {
    $$pre$phi$sinkZ2D = $69; //@line 18762
   } else {
    HEAP32[$53 >> 2] = 8; //@line 18764
    HEAP32[$62 >> 2] = $61; //@line 18765
    HEAP8[$51 >> 0] = 0; //@line 18766
    return;
   }
  } else {
   switch ($4 << 24 >> 24) {
   case 5:
    {
     HEAP8[$2 + 1178 >> 0] = 1; //@line 18773
     HEAP32[$2 + 2016 >> 2] = 1; //@line 18775
     $75 = $2 + 1764 | 0; //@line 18776
     $76 = HEAP32[$75 >> 2] | 0; //@line 18777
     if (($76 | 0) == 0 | ($76 | 0) != ($61 | 0)) {
      $$pre$phi$sinkZ2D = $75; //@line 18782
      break L2;
     }
     _mbed_tracef(16, 12709, 12744, $22); //@line 18785
     HEAP8[$51 >> 0] = 0; //@line 18786
     HEAP32[$53 >> 2] = 8; //@line 18787
     $$pre$phi$sinkZ2D = $75; //@line 18788
     break L2;
     break;
    }
   case 3:
    {
     HEAP8[$2 + 1178 >> 0] = 0; //@line 18794
     HEAP32[$2 + 2016 >> 2] = 0; //@line 18796
     $81 = $2 + 1764 | 0; //@line 18797
     $82 = HEAP32[$81 >> 2] | 0; //@line 18798
     if (($82 | 0) == 0 | ($82 | 0) != ($61 | 0)) {
      $$pre$phi$sinkZ2D = $81; //@line 18803
      break L2;
     }
     _mbed_tracef(16, 12709, 12744, $8); //@line 18806
     HEAP8[$51 >> 0] = 0; //@line 18807
     HEAP32[$53 >> 2] = 8; //@line 18808
     return;
    }
   default:
    {
     $$pre$phi$sinkZ2D = $2 + 1764 | 0; //@line 18814
     break L2;
    }
   }
  }
 } while (0);
 HEAP32[$$pre$phi$sinkZ2D >> 2] = $61; //@line 18820
 if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($67); //@line 18825
 } else {
  if ($26 & 32) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($67); //@line 18830
   HEAP8[$49 >> 0] = 1; //@line 18831
   HEAP8[$50 >> 0] = 1; //@line 18832
  }
 }
 if ($18 + 252 - ($28 & 255) & 255 | 0) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 18841
  __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($2, $16, $36, $34, $38, $40, $42, $61, 0, $30); //@line 18842
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 394; //@line 18845
   $95 = $ReallocAsyncCtx + 4 | 0; //@line 18846
   HEAP8[$95 >> 0] = $4; //@line 18847
   $96 = $ReallocAsyncCtx + 8 | 0; //@line 18848
   HEAP32[$96 >> 2] = $2; //@line 18849
   $97 = $ReallocAsyncCtx + 12 | 0; //@line 18850
   HEAP32[$97 >> 2] = $14; //@line 18851
   $98 = $ReallocAsyncCtx + 16 | 0; //@line 18852
   HEAP32[$98 >> 2] = $16; //@line 18853
   $99 = $ReallocAsyncCtx + 20 | 0; //@line 18854
   HEAP32[$99 >> 2] = $18; //@line 18855
   $100 = $ReallocAsyncCtx + 24 | 0; //@line 18856
   HEAP32[$100 >> 2] = $53; //@line 18857
   $101 = $ReallocAsyncCtx + 28 | 0; //@line 18858
   HEAP32[$101 >> 2] = $59; //@line 18859
   $102 = $ReallocAsyncCtx + 32 | 0; //@line 18860
   HEAP32[$102 >> 2] = $60; //@line 18861
   $103 = $ReallocAsyncCtx + 36 | 0; //@line 18862
   HEAP32[$103 >> 2] = $49; //@line 18863
   $104 = $ReallocAsyncCtx + 40 | 0; //@line 18864
   HEAP32[$104 >> 2] = $12; //@line 18865
   $105 = $ReallocAsyncCtx + 44 | 0; //@line 18866
   HEAP32[$105 >> 2] = $20; //@line 18867
   sp = STACKTOP; //@line 18868
   return;
  }
  ___async_unwind = 0; //@line 18871
  HEAP32[$ReallocAsyncCtx >> 2] = 394; //@line 18872
  $95 = $ReallocAsyncCtx + 4 | 0; //@line 18873
  HEAP8[$95 >> 0] = $4; //@line 18874
  $96 = $ReallocAsyncCtx + 8 | 0; //@line 18875
  HEAP32[$96 >> 2] = $2; //@line 18876
  $97 = $ReallocAsyncCtx + 12 | 0; //@line 18877
  HEAP32[$97 >> 2] = $14; //@line 18878
  $98 = $ReallocAsyncCtx + 16 | 0; //@line 18879
  HEAP32[$98 >> 2] = $16; //@line 18880
  $99 = $ReallocAsyncCtx + 20 | 0; //@line 18881
  HEAP32[$99 >> 2] = $18; //@line 18882
  $100 = $ReallocAsyncCtx + 24 | 0; //@line 18883
  HEAP32[$100 >> 2] = $53; //@line 18884
  $101 = $ReallocAsyncCtx + 28 | 0; //@line 18885
  HEAP32[$101 >> 2] = $59; //@line 18886
  $102 = $ReallocAsyncCtx + 32 | 0; //@line 18887
  HEAP32[$102 >> 2] = $60; //@line 18888
  $103 = $ReallocAsyncCtx + 36 | 0; //@line 18889
  HEAP32[$103 >> 2] = $49; //@line 18890
  $104 = $ReallocAsyncCtx + 40 | 0; //@line 18891
  HEAP32[$104 >> 2] = $12; //@line 18892
  $105 = $ReallocAsyncCtx + 44 | 0; //@line 18893
  HEAP32[$105 >> 2] = $20; //@line 18894
  sp = STACKTOP; //@line 18895
  return;
 }
 if ($34 << 24 >> 24) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 18902
  $109 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($67, $16, 8, $28, $30, $2 + 2084 | 0, $2 + 1876 | 0, $32) | 0; //@line 18903
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 395; //@line 18906
   $110 = $ReallocAsyncCtx3 + 4 | 0; //@line 18907
   HEAP32[$110 >> 2] = $67; //@line 18908
   $111 = $ReallocAsyncCtx3 + 8 | 0; //@line 18909
   HEAP32[$111 >> 2] = $53; //@line 18910
   $112 = $ReallocAsyncCtx3 + 12 | 0; //@line 18911
   HEAP8[$112 >> 0] = $4; //@line 18912
   $113 = $ReallocAsyncCtx3 + 16 | 0; //@line 18913
   HEAP32[$113 >> 2] = $2; //@line 18914
   $114 = $ReallocAsyncCtx3 + 20 | 0; //@line 18915
   HEAP32[$114 >> 2] = $14; //@line 18916
   $115 = $ReallocAsyncCtx3 + 24 | 0; //@line 18917
   HEAP32[$115 >> 2] = $16; //@line 18918
   $116 = $ReallocAsyncCtx3 + 28 | 0; //@line 18919
   HEAP32[$116 >> 2] = $18; //@line 18920
   $117 = $ReallocAsyncCtx3 + 32 | 0; //@line 18921
   HEAP32[$117 >> 2] = $59; //@line 18922
   $118 = $ReallocAsyncCtx3 + 36 | 0; //@line 18923
   HEAP32[$118 >> 2] = $60; //@line 18924
   $119 = $ReallocAsyncCtx3 + 40 | 0; //@line 18925
   HEAP32[$119 >> 2] = $49; //@line 18926
   $120 = $ReallocAsyncCtx3 + 44 | 0; //@line 18927
   HEAP32[$120 >> 2] = $12; //@line 18928
   $121 = $ReallocAsyncCtx3 + 48 | 0; //@line 18929
   HEAP32[$121 >> 2] = $20; //@line 18930
   sp = STACKTOP; //@line 18931
   return;
  }
  HEAP32[___async_retval >> 2] = $109; //@line 18935
  ___async_unwind = 0; //@line 18936
  HEAP32[$ReallocAsyncCtx3 >> 2] = 395; //@line 18937
  $110 = $ReallocAsyncCtx3 + 4 | 0; //@line 18938
  HEAP32[$110 >> 2] = $67; //@line 18939
  $111 = $ReallocAsyncCtx3 + 8 | 0; //@line 18940
  HEAP32[$111 >> 2] = $53; //@line 18941
  $112 = $ReallocAsyncCtx3 + 12 | 0; //@line 18942
  HEAP8[$112 >> 0] = $4; //@line 18943
  $113 = $ReallocAsyncCtx3 + 16 | 0; //@line 18944
  HEAP32[$113 >> 2] = $2; //@line 18945
  $114 = $ReallocAsyncCtx3 + 20 | 0; //@line 18946
  HEAP32[$114 >> 2] = $14; //@line 18947
  $115 = $ReallocAsyncCtx3 + 24 | 0; //@line 18948
  HEAP32[$115 >> 2] = $16; //@line 18949
  $116 = $ReallocAsyncCtx3 + 28 | 0; //@line 18950
  HEAP32[$116 >> 2] = $18; //@line 18951
  $117 = $ReallocAsyncCtx3 + 32 | 0; //@line 18952
  HEAP32[$117 >> 2] = $59; //@line 18953
  $118 = $ReallocAsyncCtx3 + 36 | 0; //@line 18954
  HEAP32[$118 >> 2] = $60; //@line 18955
  $119 = $ReallocAsyncCtx3 + 40 | 0; //@line 18956
  HEAP32[$119 >> 2] = $49; //@line 18957
  $120 = $ReallocAsyncCtx3 + 44 | 0; //@line 18958
  HEAP32[$120 >> 2] = $12; //@line 18959
  $121 = $ReallocAsyncCtx3 + 48 | 0; //@line 18960
  HEAP32[$121 >> 2] = $20; //@line 18961
  sp = STACKTOP; //@line 18962
  return;
 }
 if ($4 << 24 >> 24 == 7) {
  $124 = $2 + 1442 | 0; //@line 18967
  $126 = HEAPU8[$14 >> 0] | 0; //@line 18969
  _memcpy($124 | 0, $16 + $126 | 0, $18 | 0) | 0; //@line 18971
  HEAP32[$2 + 2016 >> 2] = 3; //@line 18973
  HEAP32[$53 >> 2] = 0; //@line 18974
  HEAP32[$59 >> 2] = $124; //@line 18975
  HEAP16[$60 >> 1] = $18 - $126; //@line 18978
 }
 if (!(HEAP8[$49 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 18986
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($20, $2 + 1856 | 0); //@line 18987
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 396; //@line 18990
  $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 18991
  HEAP32[$134 >> 2] = $12; //@line 18992
  sp = STACKTOP; //@line 18993
  return;
 }
 ___async_unwind = 0; //@line 18996
 HEAP32[$ReallocAsyncCtx4 >> 2] = 396; //@line 18997
 $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 18998
 HEAP32[$134 >> 2] = $12; //@line 18999
 sp = STACKTOP; //@line 19000
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_286($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $87 = 0, $92 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20208
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20210
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20212
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20216
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20218
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20220
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20222
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20224
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20226
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20228
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20230
 if (!(__ZN7LoRaMac10nwk_joinedEv($2) | 0)) {
  return;
 }
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) >> 2] | 0) != 1) {
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 20241
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 16; //@line 20244
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 20245
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 20246
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 295; //@line 20249
   $62 = $ReallocAsyncCtx5 + 4 | 0; //@line 20250
   HEAP32[$62 >> 2] = $2; //@line 20251
   $63 = $ReallocAsyncCtx5 + 8 | 0; //@line 20252
   HEAP32[$63 >> 2] = $8; //@line 20253
   $64 = $ReallocAsyncCtx5 + 12 | 0; //@line 20254
   HEAP32[$64 >> 2] = $10; //@line 20255
   $65 = $ReallocAsyncCtx5 + 16 | 0; //@line 20256
   HEAP32[$65 >> 2] = $20; //@line 20257
   $66 = $ReallocAsyncCtx5 + 20 | 0; //@line 20258
   HEAP32[$66 >> 2] = $12; //@line 20259
   $67 = $ReallocAsyncCtx5 + 24 | 0; //@line 20260
   HEAP32[$67 >> 2] = $14; //@line 20261
   $68 = $ReallocAsyncCtx5 + 28 | 0; //@line 20262
   HEAP32[$68 >> 2] = $16; //@line 20263
   $69 = $ReallocAsyncCtx5 + 32 | 0; //@line 20264
   HEAP32[$69 >> 2] = $18; //@line 20265
   sp = STACKTOP; //@line 20266
   return;
  }
  ___async_unwind = 0; //@line 20269
  HEAP32[$ReallocAsyncCtx5 >> 2] = 295; //@line 20270
  $62 = $ReallocAsyncCtx5 + 4 | 0; //@line 20271
  HEAP32[$62 >> 2] = $2; //@line 20272
  $63 = $ReallocAsyncCtx5 + 8 | 0; //@line 20273
  HEAP32[$63 >> 2] = $8; //@line 20274
  $64 = $ReallocAsyncCtx5 + 12 | 0; //@line 20275
  HEAP32[$64 >> 2] = $10; //@line 20276
  $65 = $ReallocAsyncCtx5 + 16 | 0; //@line 20277
  HEAP32[$65 >> 2] = $20; //@line 20278
  $66 = $ReallocAsyncCtx5 + 20 | 0; //@line 20279
  HEAP32[$66 >> 2] = $12; //@line 20280
  $67 = $ReallocAsyncCtx5 + 24 | 0; //@line 20281
  HEAP32[$67 >> 2] = $14; //@line 20282
  $68 = $ReallocAsyncCtx5 + 28 | 0; //@line 20283
  HEAP32[$68 >> 2] = $16; //@line 20284
  $69 = $ReallocAsyncCtx5 + 32 | 0; //@line 20285
  HEAP32[$69 >> 2] = $18; //@line 20286
  sp = STACKTOP; //@line 20287
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) + 32 >> 0] | 0) {
  HEAP32[$4 >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($2) | 0) + 11 >> 0]; //@line 20299
  _mbed_tracef(16, 12021, 12232, $4); //@line 20300
  __ZN7LoRaMac21post_process_mcps_reqEv($2); //@line 20301
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -18 | 16; //@line 20305
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 20306
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 20307
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 293; //@line 20310
   $40 = $ReallocAsyncCtx7 + 4 | 0; //@line 20311
   HEAP32[$40 >> 2] = $2; //@line 20312
   $41 = $ReallocAsyncCtx7 + 8 | 0; //@line 20313
   HEAP32[$41 >> 2] = $8; //@line 20314
   $42 = $ReallocAsyncCtx7 + 12 | 0; //@line 20315
   HEAP32[$42 >> 2] = $10; //@line 20316
   $43 = $ReallocAsyncCtx7 + 16 | 0; //@line 20317
   HEAP32[$43 >> 2] = $20; //@line 20318
   $44 = $ReallocAsyncCtx7 + 20 | 0; //@line 20319
   HEAP32[$44 >> 2] = $12; //@line 20320
   $45 = $ReallocAsyncCtx7 + 24 | 0; //@line 20321
   HEAP32[$45 >> 2] = $14; //@line 20322
   $46 = $ReallocAsyncCtx7 + 28 | 0; //@line 20323
   HEAP32[$46 >> 2] = $16; //@line 20324
   $47 = $ReallocAsyncCtx7 + 32 | 0; //@line 20325
   HEAP32[$47 >> 2] = $18; //@line 20326
   sp = STACKTOP; //@line 20327
   return;
  }
  ___async_unwind = 0; //@line 20330
  HEAP32[$ReallocAsyncCtx7 >> 2] = 293; //@line 20331
  $40 = $ReallocAsyncCtx7 + 4 | 0; //@line 20332
  HEAP32[$40 >> 2] = $2; //@line 20333
  $41 = $ReallocAsyncCtx7 + 8 | 0; //@line 20334
  HEAP32[$41 >> 2] = $8; //@line 20335
  $42 = $ReallocAsyncCtx7 + 12 | 0; //@line 20336
  HEAP32[$42 >> 2] = $10; //@line 20337
  $43 = $ReallocAsyncCtx7 + 16 | 0; //@line 20338
  HEAP32[$43 >> 2] = $20; //@line 20339
  $44 = $ReallocAsyncCtx7 + 20 | 0; //@line 20340
  HEAP32[$44 >> 2] = $12; //@line 20341
  $45 = $ReallocAsyncCtx7 + 24 | 0; //@line 20342
  HEAP32[$45 >> 2] = $14; //@line 20343
  $46 = $ReallocAsyncCtx7 + 28 | 0; //@line 20344
  HEAP32[$46 >> 2] = $16; //@line 20345
  $47 = $ReallocAsyncCtx7 + 32 | 0; //@line 20346
  HEAP32[$47 >> 2] = $18; //@line 20347
  sp = STACKTOP; //@line 20348
  return;
 }
 if (!(__ZN7LoRaMac24continue_sending_processEv($2) | 0)) {
  _mbed_tracef(2, 12021, 12026, $22); //@line 20353
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -18 | 1; //@line 20357
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 20358
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 20359
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 294; //@line 20362
   $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 20363
   HEAP32[$52 >> 2] = $2; //@line 20364
   $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 20365
   HEAP32[$53 >> 2] = $8; //@line 20366
   $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 20367
   HEAP32[$54 >> 2] = $10; //@line 20368
   $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 20369
   HEAP32[$55 >> 2] = $20; //@line 20370
   $56 = $ReallocAsyncCtx6 + 20 | 0; //@line 20371
   HEAP32[$56 >> 2] = $12; //@line 20372
   $57 = $ReallocAsyncCtx6 + 24 | 0; //@line 20373
   HEAP32[$57 >> 2] = $14; //@line 20374
   $58 = $ReallocAsyncCtx6 + 28 | 0; //@line 20375
   HEAP32[$58 >> 2] = $16; //@line 20376
   $59 = $ReallocAsyncCtx6 + 32 | 0; //@line 20377
   HEAP32[$59 >> 2] = $18; //@line 20378
   sp = STACKTOP; //@line 20379
   return;
  }
  ___async_unwind = 0; //@line 20382
  HEAP32[$ReallocAsyncCtx6 >> 2] = 294; //@line 20383
  $52 = $ReallocAsyncCtx6 + 4 | 0; //@line 20384
  HEAP32[$52 >> 2] = $2; //@line 20385
  $53 = $ReallocAsyncCtx6 + 8 | 0; //@line 20386
  HEAP32[$53 >> 2] = $8; //@line 20387
  $54 = $ReallocAsyncCtx6 + 12 | 0; //@line 20388
  HEAP32[$54 >> 2] = $10; //@line 20389
  $55 = $ReallocAsyncCtx6 + 16 | 0; //@line 20390
  HEAP32[$55 >> 2] = $20; //@line 20391
  $56 = $ReallocAsyncCtx6 + 20 | 0; //@line 20392
  HEAP32[$56 >> 2] = $12; //@line 20393
  $57 = $ReallocAsyncCtx6 + 24 | 0; //@line 20394
  HEAP32[$57 >> 2] = $14; //@line 20395
  $58 = $ReallocAsyncCtx6 + 28 | 0; //@line 20396
  HEAP32[$58 >> 2] = $16; //@line 20397
  $59 = $ReallocAsyncCtx6 + 32 | 0; //@line 20398
  HEAP32[$59 >> 2] = $18; //@line 20399
  sp = STACKTOP; //@line 20400
  return;
 }
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 20407
  HEAP32[$8 >> 2] = HEAP32[$8 >> 2] | 2; //@line 20410
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 20411
  __ZN12LoRaWANStack26process_status_check_stateEv($10); //@line 20412
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20415
   $75 = $ReallocAsyncCtx4 + 4 | 0; //@line 20416
   HEAP32[$75 >> 2] = $8; //@line 20417
   $76 = $ReallocAsyncCtx4 + 8 | 0; //@line 20418
   HEAP32[$76 >> 2] = $2; //@line 20419
   $77 = $ReallocAsyncCtx4 + 12 | 0; //@line 20420
   HEAP32[$77 >> 2] = $20; //@line 20421
   $78 = $ReallocAsyncCtx4 + 16 | 0; //@line 20422
   HEAP32[$78 >> 2] = $10; //@line 20423
   $79 = $ReallocAsyncCtx4 + 20 | 0; //@line 20424
   HEAP32[$79 >> 2] = $12; //@line 20425
   $80 = $ReallocAsyncCtx4 + 24 | 0; //@line 20426
   HEAP32[$80 >> 2] = $14; //@line 20427
   $81 = $ReallocAsyncCtx4 + 28 | 0; //@line 20428
   HEAP32[$81 >> 2] = $16; //@line 20429
   $82 = $ReallocAsyncCtx4 + 32 | 0; //@line 20430
   HEAP32[$82 >> 2] = $18; //@line 20431
   sp = STACKTOP; //@line 20432
   return;
  }
  ___async_unwind = 0; //@line 20435
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20436
  $75 = $ReallocAsyncCtx4 + 4 | 0; //@line 20437
  HEAP32[$75 >> 2] = $8; //@line 20438
  $76 = $ReallocAsyncCtx4 + 8 | 0; //@line 20439
  HEAP32[$76 >> 2] = $2; //@line 20440
  $77 = $ReallocAsyncCtx4 + 12 | 0; //@line 20441
  HEAP32[$77 >> 2] = $20; //@line 20442
  $78 = $ReallocAsyncCtx4 + 16 | 0; //@line 20443
  HEAP32[$78 >> 2] = $10; //@line 20444
  $79 = $ReallocAsyncCtx4 + 20 | 0; //@line 20445
  HEAP32[$79 >> 2] = $12; //@line 20446
  $80 = $ReallocAsyncCtx4 + 24 | 0; //@line 20447
  HEAP32[$80 >> 2] = $14; //@line 20448
  $81 = $ReallocAsyncCtx4 + 28 | 0; //@line 20449
  HEAP32[$81 >> 2] = $16; //@line 20450
  $82 = $ReallocAsyncCtx4 + 32 | 0; //@line 20451
  HEAP32[$82 >> 2] = $18; //@line 20452
  sp = STACKTOP; //@line 20453
  return;
 }
 if (!(HEAP32[$8 >> 2] & 1)) {
  $87 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 20461
  HEAP32[$20 >> 2] = $87 ? 5 : 2; //@line 20463
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$10 + 2911 >> 0] = 1; //@line 20471
  return;
 }
 _mbed_tracef(16, 12021, 12252, $12); //@line 20474
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 20475
 _mbed_tracef(16, 12021, 12276, $16); //@line 20476
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20477
 __ZN12LoRaWANStack23mlme_indication_handlerEv($10); //@line 20478
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20481
  $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 20482
  HEAP32[$92 >> 2] = $10; //@line 20483
  sp = STACKTOP; //@line 20484
  return;
 }
 ___async_unwind = 0; //@line 20487
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20488
 $92 = $ReallocAsyncCtx2 + 4 | 0; //@line 20489
 HEAP32[$92 >> 2] = $10; //@line 20490
 sp = STACKTOP; //@line 20491
 return;
}
function __ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$130$$$i = 0, $$026$$$026$i = 0, $$026$i = 0, $$028$i = 0, $$028$lcssa = 0, $$02864 = 0, $$029$be = 0, $$029$lcssa = 0, $$02963 = 0, $$1 = 0, $$2$i = 0, $$258 = 0, $$3 = 0, $$452 = 0, $$lcssa78 = 0, $$lcssa79 = 0, $$pre = 0, $$sroa$035$0$lcssa = 0, $$sroa$035$060 = 0, $$sroa$035$349 = 0, $$sroa$11$0$lcssa = 0, $$sroa$11$062 = 0, $$sroa$11$351 = 0, $$sroa$637$0$lcssa = 0, $$sroa$637$061 = 0, $$sroa$637$350 = 0, $10 = 0, $100 = 0, $101 = 0, $107 = 0, $11 = 0, $116 = 0, $12 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $135 = 0, $136 = 0, $140 = 0, $17 = 0, $18 = 0, $19 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $42 = 0, $45 = 0, $52 = 0, $66 = 0, $7 = 0, $79 = 0, $81 = 0, $9 = 0, $93 = 0, $97 = 0, $99 = 0, $indvars$iv = 0, $indvars$iv$i = 0, $indvars$iv$i31 = 0, $indvars$iv82 = 0, $not$or$cond$i$i = 0, $wide$trip$count$i = 0, label = 0;
 $7 = HEAP8[$1 + 4 >> 0] | 0; //@line 20925
 L1 : do {
  if (!($7 << 24 >> 24)) {
   $$028$lcssa = 0; //@line 20929
   $$029$lcssa = 7; //@line 20929
   $$sroa$035$0$lcssa = 0; //@line 20929
   $$sroa$11$0$lcssa = 0; //@line 20929
   $$sroa$637$0$lcssa = 0; //@line 20929
   $101 = 0; //@line 20929
  } else {
   $9 = HEAP32[$1 >> 2] | 0; //@line 20931
   $10 = $0 + 20 | 0; //@line 20932
   $11 = $0 + 124 | 0; //@line 20933
   $$02864 = 0; //@line 20934
   $$02963 = 7; //@line 20934
   $$lcssa78 = 0; //@line 20934
   $$sroa$035$060 = 0; //@line 20934
   $$sroa$11$062 = 0; //@line 20934
   $$sroa$637$061 = 0; //@line 20934
   $13 = 0; //@line 20934
   while (1) {
    $12 = $9 + $13 | 0; //@line 20936
    if ((HEAP8[$12 >> 0] | 0) != 3) {
     $$028$lcssa = $$02864; //@line 20940
     $$029$lcssa = $$02963; //@line 20940
     $$sroa$035$0$lcssa = $$sroa$035$060; //@line 20940
     $$sroa$11$0$lcssa = $$sroa$11$062; //@line 20940
     $$sroa$637$0$lcssa = $$sroa$637$061; //@line 20940
     $101 = $$lcssa78; //@line 20940
     break L1;
    }
    $17 = HEAP8[$12 + 1 >> 0] | 0; //@line 20944
    $18 = $17 & 15; //@line 20945
    $19 = ($17 & 255) >>> 4; //@line 20946
    $27 = HEAPU8[$12 + 3 >> 0] << 8 | HEAPU8[$12 + 2 >> 0]; //@line 20954
    $28 = $27 & 65535; //@line 20955
    $30 = HEAP8[$12 + 4 >> 0] | 0; //@line 20957
    $32 = ($30 & 255) >>> 4; //@line 20959
    $34 = $32 & 7; //@line 20961
    $35 = $30 & 15; //@line 20962
    $36 = $13 + 5 | 0; //@line 20963
    $37 = $36 & 255; //@line 20964
    $$1 = $28 << 16 >> 16 == 0 & $34 << 24 >> 24 == 0 ? 6 : 7; //@line 20968
    L6 : do {
     switch ($32 & 7) {
     case 6:
     case 0:
      {
       $42 = HEAP8[$10 >> 0] | 0; //@line 20974
       if (!($42 << 24 >> 24)) {
        $$029$be = $$1; //@line 20977
        $$lcssa79 = $28; //@line 20977
       } else {
        $45 = $42 & 255; //@line 20980
        if ($34 << 24 >> 24 != 6) {
         $$258 = $$1; //@line 20982
         $indvars$iv = 0; //@line 20982
         while (1) {
          if (!($27 & 1 << ($indvars$iv & 15))) {
           $$3 = $$258; //@line 20989
          } else {
           $$3 = (HEAP32[(HEAP32[$11 >> 2] | 0) + ($indvars$iv * 12 | 0) >> 2] | 0) == 0 ? $$258 & -2 : $$258; //@line 20997
          }
          $indvars$iv = $indvars$iv + 1 | 0; //@line 20999
          if ($indvars$iv >>> 0 >= $45 >>> 0) {
           $$029$be = $$3; //@line 21004
           $$lcssa79 = $28; //@line 21004
           break L6;
          } else {
           $$258 = $$3; //@line 21002
          }
         }
        }
        $$pre = HEAP32[$11 >> 2] | 0; //@line 21009
        $52 = $28; //@line 21010
        $indvars$iv82 = 0; //@line 21010
        while (1) {
         if (!(HEAP32[$$pre + ($indvars$iv82 * 12 | 0) >> 2] | 0)) {
          $140 = $52; //@line 21016
         } else {
          $140 = (1 << ($indvars$iv82 & 15) | $52 & 65535) & 65535; //@line 21023
         }
         $indvars$iv82 = $indvars$iv82 + 1 | 0; //@line 21025
         if ($indvars$iv82 >>> 0 >= $45 >>> 0) {
          $$029$be = $$1; //@line 21030
          $$lcssa79 = $140; //@line 21030
          break;
         } else {
          $52 = $140; //@line 21028
         }
        }
       }
       break;
      }
     default:
      {
       $$029$be = 6; //@line 21038
       $$lcssa79 = $28; //@line 21038
      }
     }
    } while (0);
    if (($7 & 255) > ($37 & 255)) {
     $$02864 = $37; //@line 21045
     $$02963 = $$029$be; //@line 21045
     $$lcssa78 = $$lcssa79; //@line 21045
     $$sroa$035$060 = $35; //@line 21045
     $$sroa$11$062 = $18; //@line 21045
     $$sroa$637$061 = $19; //@line 21045
     $13 = $36 & 255; //@line 21045
    } else {
     $$028$lcssa = $37; //@line 21047
     $$029$lcssa = $$029$be; //@line 21047
     $$sroa$035$0$lcssa = $35; //@line 21047
     $$sroa$11$0$lcssa = $18; //@line 21047
     $$sroa$637$0$lcssa = $19; //@line 21047
     $101 = $$lcssa79; //@line 21047
     break L1;
    }
   }
  }
 } while (0);
 $66 = $$sroa$637$0$lcssa << 24 >> 24; //@line 21053
 if (($66 | 0) < (HEAPU8[$0 + 92 >> 0] | 0)) {
  if (HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $66 >> 0] | 0) {
   $79 = HEAP8[$1 + 7 >> 0] | 0; //@line 21068
   $81 = HEAP8[$1 + 8 >> 0] | 0; //@line 21070
   if (!(HEAP8[$1 + 6 >> 0] | 0)) {
    if ($$sroa$637$0$lcssa << 24 >> 24 == 15 & $$sroa$11$0$lcssa << 24 >> 24 == 15) {
     $$026$i = $81; //@line 21079
     $$028$i = $79; //@line 21079
    } else {
     $$452 = 0; //@line 21081
     $$sroa$035$349 = HEAP8[$1 + 9 >> 0] | 0; //@line 21081
     $$sroa$11$351 = $81; //@line 21081
     $$sroa$637$350 = $79; //@line 21081
     HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21082
     HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21083
     HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21084
     HEAP8[$5 >> 0] = $$028$lcssa; //@line 21085
     return $$452 | 0; //@line 21086
    }
   } else {
    $$026$i = $$sroa$11$0$lcssa; //@line 21089
    $$028$i = $$sroa$637$0$lcssa; //@line 21089
   }
   if (!($$029$lcssa << 24 >> 24)) {
    $$452 = 0; //@line 21093
    $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 21093
    $$sroa$11$351 = $$026$i; //@line 21093
    $$sroa$637$350 = $$028$i; //@line 21093
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21094
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21095
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21096
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 21097
    return $$452 | 0; //@line 21098
   }
   $93 = HEAP32[$0 + 124 >> 2] | 0; //@line 21105
   L33 : do {
    if ($$028$i << 24 >> 24 >= (HEAP8[$0 + 26 >> 0] | 0) ? $$028$i << 24 >> 24 <= (HEAP8[$0 + 27 >> 0] | 0) : 0) {
     $97 = HEAP8[$0 + 20 >> 0] | 0; //@line 21112
     if (!($97 << 24 >> 24)) {
      label = 26; //@line 21115
     } else {
      $99 = $97 & 255; //@line 21117
      $100 = $101 & 65535; //@line 21118
      $indvars$iv$i31 = 0; //@line 21119
      while (1) {
       if (1 << ($indvars$iv$i31 & 15) & $100 | 0) {
        $107 = HEAP8[$93 + ($indvars$iv$i31 * 12 | 0) + 8 >> 0] | 0; //@line 21127
        if (($107 & 15) <= $$028$i << 24 >> 24 ? ($107 & 255) >>> 4 << 24 >> 24 >= $$028$i << 24 >> 24 : 0) {
         $125 = $$029$lcssa; //@line 21134
         break L33;
        }
       }
       $indvars$iv$i31 = $indvars$iv$i31 + 1 | 0; //@line 21138
       if ($indvars$iv$i31 >>> 0 >= $99 >>> 0) {
        label = 26; //@line 21143
        break;
       }
      }
     }
    } else {
     label = 26; //@line 21149
    }
   } while (0);
   if ((label | 0) == 26) {
    $125 = $$029$lcssa & -3; //@line 21154
   }
   $116 = HEAP8[$0 + 22 >> 0] | 0; //@line 21157
   $not$or$cond$i$i = $$026$i << 24 >> 24 >= $116 << 24 >> 24 ? $$026$i << 24 >> 24 <= (HEAP8[$0 + 21 >> 0] | 0) : 0; //@line 21162
   $123 = ($116 & 255 | 0) > ($$026$i << 24 >> 24 | 0); //@line 21165
   $$$130$$$i = $123 | $not$or$cond$i$i ? $125 : $125 & -5; //@line 21169
   $$026$$$026$i = $not$or$cond$i$i ? $$026$i : $123 ? $116 : $$026$i; //@line 21170
   $127 = $$$130$$$i << 24 >> 24 == 7; //@line 21171
   $$2$i = $$sroa$035$0$lcssa << 24 >> 24 == 0 & $127 ? 1 : $$sroa$035$0$lcssa; //@line 21174
   if (!$127) {
    $$452 = $$$130$$$i; //@line 21176
    $$sroa$035$349 = $$2$i; //@line 21176
    $$sroa$11$351 = $$026$$$026$i; //@line 21176
    $$sroa$637$350 = $$028$i; //@line 21176
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21177
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21178
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21179
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 21180
    return $$452 | 0; //@line 21181
   }
   $129 = $0 + 116 | 0; //@line 21183
   $131 = $0 + 113 | 0; //@line 21185
   _memset(HEAP32[$129 >> 2] | 0, 0, HEAPU8[$131 >> 0] << 1 | 0) | 0; //@line 21189
   $135 = HEAP32[$129 >> 2] | 0; //@line 21190
   $136 = HEAP8[$131 >> 0] | 0; //@line 21191
   if (!(($135 | 0) != 0 & $136 << 24 >> 24 != 0)) {
    $$452 = 7; //@line 21196
    $$sroa$035$349 = $$2$i; //@line 21196
    $$sroa$11$351 = $$026$$$026$i; //@line 21196
    $$sroa$637$350 = $$028$i; //@line 21196
    HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21197
    HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21198
    HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21199
    HEAP8[$5 >> 0] = $$028$lcssa; //@line 21200
    return $$452 | 0; //@line 21201
   }
   $wide$trip$count$i = $136 & 255; //@line 21203
   $indvars$iv$i = 0; //@line 21204
   do {
    HEAP16[$135 + ($indvars$iv$i << 1) >> 1] = $101; //@line 21207
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 21208
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
   $$452 = 7; //@line 21211
   $$sroa$035$349 = $$2$i; //@line 21211
   $$sroa$11$351 = $$026$$$026$i; //@line 21211
   $$sroa$637$350 = $$028$i; //@line 21211
   HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21217
   HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21218
   HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21219
   HEAP8[$5 >> 0] = $$028$lcssa; //@line 21220
   return $$452 | 0; //@line 21221
  }
 }
 $$452 = $$029$lcssa & -3; //@line 21225
 $$sroa$035$349 = $$sroa$035$0$lcssa; //@line 21225
 $$sroa$11$351 = $$sroa$11$0$lcssa; //@line 21225
 $$sroa$637$350 = $$sroa$637$0$lcssa; //@line 21225
 HEAP8[$2 >> 0] = $$sroa$637$350; //@line 21226
 HEAP8[$3 >> 0] = $$sroa$11$351; //@line 21227
 HEAP8[$4 >> 0] = $$sroa$035$349; //@line 21228
 HEAP8[$5 >> 0] = $$028$lcssa; //@line 21229
 return $$452 | 0; //@line 21230
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 32041
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 32042
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 32043
 $d_sroa_0_0_extract_trunc = $b$0; //@line 32044
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 32045
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 32046
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 32048
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 32051
    HEAP32[$rem + 4 >> 2] = 0; //@line 32052
   }
   $_0$1 = 0; //@line 32054
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 32055
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32056
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 32059
    $_0$0 = 0; //@line 32060
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32061
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 32063
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 32064
   $_0$1 = 0; //@line 32065
   $_0$0 = 0; //@line 32066
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32067
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 32070
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 32075
     HEAP32[$rem + 4 >> 2] = 0; //@line 32076
    }
    $_0$1 = 0; //@line 32078
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 32079
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32080
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 32084
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 32085
    }
    $_0$1 = 0; //@line 32087
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 32088
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32089
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 32091
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 32094
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 32095
    }
    $_0$1 = 0; //@line 32097
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 32098
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32099
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 32102
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 32104
    $58 = 31 - $51 | 0; //@line 32105
    $sr_1_ph = $57; //@line 32106
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 32107
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 32108
    $q_sroa_0_1_ph = 0; //@line 32109
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 32110
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 32114
    $_0$0 = 0; //@line 32115
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32116
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 32118
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 32119
   $_0$1 = 0; //@line 32120
   $_0$0 = 0; //@line 32121
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32122
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 32126
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 32128
     $126 = 31 - $119 | 0; //@line 32129
     $130 = $119 - 31 >> 31; //@line 32130
     $sr_1_ph = $125; //@line 32131
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 32132
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 32133
     $q_sroa_0_1_ph = 0; //@line 32134
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 32135
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 32139
     $_0$0 = 0; //@line 32140
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32141
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 32143
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 32144
    $_0$1 = 0; //@line 32145
    $_0$0 = 0; //@line 32146
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32147
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 32149
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 32152
    $89 = 64 - $88 | 0; //@line 32153
    $91 = 32 - $88 | 0; //@line 32154
    $92 = $91 >> 31; //@line 32155
    $95 = $88 - 32 | 0; //@line 32156
    $105 = $95 >> 31; //@line 32157
    $sr_1_ph = $88; //@line 32158
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 32159
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 32160
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 32161
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 32162
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 32166
    HEAP32[$rem + 4 >> 2] = 0; //@line 32167
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 32170
    $_0$0 = $a$0 | 0 | 0; //@line 32171
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32172
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 32174
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 32175
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 32176
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32177
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 32182
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 32183
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 32184
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 32185
  $carry_0_lcssa$1 = 0; //@line 32186
  $carry_0_lcssa$0 = 0; //@line 32187
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 32189
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 32190
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 32191
  $137$1 = tempRet0; //@line 32192
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 32193
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 32194
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 32195
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 32196
  $sr_1202 = $sr_1_ph; //@line 32197
  $carry_0203 = 0; //@line 32198
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 32200
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 32201
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 32202
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 32203
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 32204
   $150$1 = tempRet0; //@line 32205
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 32206
   $carry_0203 = $151$0 & 1; //@line 32207
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 32209
   $r_sroa_1_1200 = tempRet0; //@line 32210
   $sr_1202 = $sr_1202 - 1 | 0; //@line 32211
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 32223
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 32224
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 32225
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 32226
  $carry_0_lcssa$1 = 0; //@line 32227
  $carry_0_lcssa$0 = $carry_0203; //@line 32228
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 32230
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 32231
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 32234
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 32235
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 32237
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 32238
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 32239
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17637
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 17643
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 17652
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 17657
      $19 = $1 + 44 | 0; //@line 17658
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 17667
      $26 = $1 + 52 | 0; //@line 17668
      $27 = $1 + 53 | 0; //@line 17669
      $28 = $1 + 54 | 0; //@line 17670
      $29 = $0 + 8 | 0; //@line 17671
      $30 = $1 + 24 | 0; //@line 17672
      $$081$off0 = 0; //@line 17673
      $$084 = $0 + 16 | 0; //@line 17673
      $$085$off0 = 0; //@line 17673
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 17677
        label = 20; //@line 17678
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 17681
       HEAP8[$27 >> 0] = 0; //@line 17682
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 17683
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 17684
       if (___async) {
        label = 12; //@line 17687
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 17690
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 17694
        label = 20; //@line 17695
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 17702
         $$186$off0 = $$085$off0; //@line 17702
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 17711
           label = 20; //@line 17712
           break L10;
          } else {
           $$182$off0 = 1; //@line 17715
           $$186$off0 = $$085$off0; //@line 17715
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 17722
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 17729
          break L10;
         } else {
          $$182$off0 = 1; //@line 17732
          $$186$off0 = 1; //@line 17732
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 17737
       $$084 = $$084 + 8 | 0; //@line 17737
       $$085$off0 = $$186$off0; //@line 17737
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 736; //@line 17740
       HEAP32[$AsyncCtx15 + 4 >> 2] = $30; //@line 17742
       HEAP32[$AsyncCtx15 + 8 >> 2] = $2; //@line 17744
       HEAP32[$AsyncCtx15 + 12 >> 2] = $13; //@line 17746
       HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 17748
       HEAP32[$AsyncCtx15 + 20 >> 2] = $28; //@line 17750
       HEAP32[$AsyncCtx15 + 24 >> 2] = $19; //@line 17752
       HEAP32[$AsyncCtx15 + 28 >> 2] = $25; //@line 17754
       HEAP32[$AsyncCtx15 + 32 >> 2] = $26; //@line 17756
       HEAP32[$AsyncCtx15 + 36 >> 2] = $27; //@line 17758
       HEAP8[$AsyncCtx15 + 40 >> 0] = $4 & 1; //@line 17761
       HEAP32[$AsyncCtx15 + 44 >> 2] = $29; //@line 17763
       HEAP8[$AsyncCtx15 + 48 >> 0] = $$085$off0 & 1; //@line 17766
       HEAP8[$AsyncCtx15 + 49 >> 0] = $$081$off0 & 1; //@line 17769
       HEAP32[$AsyncCtx15 + 52 >> 2] = $$084; //@line 17771
       sp = STACKTOP; //@line 17772
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 17778
         $61 = $1 + 40 | 0; //@line 17779
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 17782
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 17790
           if ($$283$off0) {
            label = 25; //@line 17792
            break;
           } else {
            $69 = 4; //@line 17795
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 17802
        } else {
         $69 = 4; //@line 17804
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 17809
      }
      HEAP32[$19 >> 2] = $69; //@line 17811
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 17820
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 17825
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 17826
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17827
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 17828
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 737; //@line 17831
    HEAP32[$AsyncCtx11 + 4 >> 2] = $73; //@line 17833
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 17835
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 17837
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 17839
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4 & 1; //@line 17842
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 17844
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 17846
    sp = STACKTOP; //@line 17847
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 17850
   $81 = $0 + 24 | 0; //@line 17851
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 17855
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 17859
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 17866
       $$2 = $81; //@line 17867
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 17879
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 17880
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 17885
        $136 = $$2 + 8 | 0; //@line 17886
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 17889
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 740; //@line 17894
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 17896
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 17898
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 17900
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 17902
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 17904
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 17906
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 17908
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 17911
       sp = STACKTOP; //@line 17912
       return;
      }
      $104 = $1 + 24 | 0; //@line 17915
      $105 = $1 + 54 | 0; //@line 17916
      $$1 = $81; //@line 17917
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 17933
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 17934
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17939
       $122 = $$1 + 8 | 0; //@line 17940
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 17943
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 739; //@line 17948
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 17950
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 17952
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 17954
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 17956
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 17958
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 17960
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 17962
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 17964
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 17967
      sp = STACKTOP; //@line 17968
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 17972
    $$0 = $81; //@line 17973
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 17980
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 17981
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 17986
     $100 = $$0 + 8 | 0; //@line 17987
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 17990
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 738; //@line 17995
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 17997
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 17999
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 18001
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 18003
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 18005
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 18007
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 18010
    sp = STACKTOP; //@line 18011
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$pr = 0, $$pre = 0, $$pre16 = 0, $$pre17 = 0, $10 = 0, $101 = 0, $104 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $25 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $40 = 0, $43 = 0, $53 = 0, $54 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $8 = 0, $80 = 0, $81 = 0, $87 = 0, $90 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10760
 STACKTOP = STACKTOP + 16 | 0; //@line 10761
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10761
 $2 = sp; //@line 10762
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 10767
  STACKTOP = sp; //@line 10768
  return $$0 | 0; //@line 10768
 }
 if (!$1) {
  $$0 = -1003; //@line 10772
  STACKTOP = sp; //@line 10773
  return $$0 | 0; //@line 10773
 }
 $7 = $1 + 12 | 0; //@line 10775
 $8 = HEAP32[$7 >> 2] | 0; //@line 10776
 if (!$8) {
  $$0 = -1003; //@line 10779
  STACKTOP = sp; //@line 10780
  return $$0 | 0; //@line 10780
 }
 $10 = $0 + 2500 | 0; //@line 10782
 if (($10 | 0) != ($1 | 0)) {
  $12 = $0 + 2512 | 0; //@line 10785
  $13 = HEAP32[$12 >> 2] | 0; //@line 10786
  do {
   if (!$13) {
    $25 = $8; //@line 10790
    label = 9; //@line 10791
   } else {
    $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 10794
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 10795
    FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 10796
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 353; //@line 10799
     HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 10801
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10803
     HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 10805
     HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 10807
     HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 10809
     HEAP32[$AsyncCtx + 24 >> 2] = $7; //@line 10811
     sp = STACKTOP; //@line 10812
     STACKTOP = sp; //@line 10813
     return 0; //@line 10813
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10815
     $$pre = HEAP32[$7 >> 2] | 0; //@line 10816
     if (!$$pre) {
      $32 = 0; //@line 10819
      break;
     } else {
      $25 = $$pre; //@line 10822
      label = 9; //@line 10823
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 9) {
    $26 = HEAP32[$25 + 4 >> 2] | 0; //@line 10832
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10833
    FUNCTION_TABLE_vii[$26 & 15]($10, $1); //@line 10834
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 354; //@line 10837
     HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 10839
     HEAP32[$AsyncCtx2 + 8 >> 2] = $12; //@line 10841
     HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 10843
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 10845
     HEAP32[$AsyncCtx2 + 20 >> 2] = $7; //@line 10847
     sp = STACKTOP; //@line 10848
     STACKTOP = sp; //@line 10849
     return 0; //@line 10849
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10851
     $32 = HEAP32[$7 >> 2] | 0; //@line 10853
     break;
    }
   }
  } while (0);
  HEAP32[$12 >> 2] = $32; //@line 10858
 }
 $33 = $1 + 16 | 0; //@line 10860
 $34 = $1 + 28 | 0; //@line 10861
 $35 = HEAP32[$34 >> 2] | 0; //@line 10862
 if ($35 | 0) {
  $37 = $0 + 2516 | 0; //@line 10865
  if (($37 | 0) != ($33 | 0)) {
   $39 = $0 + 2528 | 0; //@line 10868
   $40 = HEAP32[$39 >> 2] | 0; //@line 10869
   do {
    if (!$40) {
     $53 = $35; //@line 10873
     label = 19; //@line 10874
    } else {
     $43 = HEAP32[$40 + 8 >> 2] | 0; //@line 10877
     $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10878
     FUNCTION_TABLE_vi[$43 & 1023]($37); //@line 10879
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 355; //@line 10882
      HEAP32[$AsyncCtx5 + 4 >> 2] = $37; //@line 10884
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 10886
      HEAP32[$AsyncCtx5 + 12 >> 2] = $34; //@line 10888
      HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 10890
      HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 10892
      HEAP32[$AsyncCtx5 + 24 >> 2] = $39; //@line 10894
      HEAP32[$AsyncCtx5 + 28 >> 2] = $1; //@line 10896
      sp = STACKTOP; //@line 10897
      STACKTOP = sp; //@line 10898
      return 0; //@line 10898
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10900
      $$pre16 = HEAP32[$34 >> 2] | 0; //@line 10901
      if (!$$pre16) {
       $60 = 0; //@line 10904
       break;
      } else {
       $53 = $$pre16; //@line 10907
       label = 19; //@line 10908
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 19) {
     $54 = HEAP32[$53 + 4 >> 2] | 0; //@line 10917
     $AsyncCtx8 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10918
     FUNCTION_TABLE_vii[$54 & 15]($37, $33); //@line 10919
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 356; //@line 10922
      HEAP32[$AsyncCtx8 + 4 >> 2] = $2; //@line 10924
      HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 10926
      HEAP32[$AsyncCtx8 + 12 >> 2] = $34; //@line 10928
      HEAP32[$AsyncCtx8 + 16 >> 2] = $39; //@line 10930
      HEAP32[$AsyncCtx8 + 20 >> 2] = $1; //@line 10932
      sp = STACKTOP; //@line 10933
      STACKTOP = sp; //@line 10934
      return 0; //@line 10934
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10936
      $60 = HEAP32[$34 >> 2] | 0; //@line 10938
      break;
     }
    }
   } while (0);
   HEAP32[$39 >> 2] = $60; //@line 10943
  }
 }
 $61 = $1 + 32 | 0; //@line 10946
 $62 = $1 + 44 | 0; //@line 10947
 $63 = HEAP32[$62 >> 2] | 0; //@line 10948
 if (!$63) {
  $$0 = 0; //@line 10951
  STACKTOP = sp; //@line 10952
  return $$0 | 0; //@line 10952
 }
 $65 = $0 + 2532 | 0; //@line 10954
 if (($65 | 0) == ($61 | 0)) {
  $90 = $63; //@line 10957
  $94 = $0; //@line 10957
  label = 34; //@line 10958
 } else {
  $67 = $0 + 2544 | 0; //@line 10960
  $68 = HEAP32[$67 >> 2] | 0; //@line 10961
  do {
   if (!$68) {
    $80 = $63; //@line 10965
    label = 30; //@line 10966
   } else {
    $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 10969
    $AsyncCtx11 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10970
    FUNCTION_TABLE_vi[$71 & 1023]($65); //@line 10971
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 357; //@line 10974
     HEAP32[$AsyncCtx11 + 4 >> 2] = $62; //@line 10976
     HEAP32[$AsyncCtx11 + 8 >> 2] = $67; //@line 10978
     HEAP32[$AsyncCtx11 + 12 >> 2] = $0; //@line 10980
     HEAP32[$AsyncCtx11 + 16 >> 2] = $65; //@line 10982
     HEAP32[$AsyncCtx11 + 20 >> 2] = $61; //@line 10984
     HEAP32[$AsyncCtx11 + 24 >> 2] = $2; //@line 10986
     sp = STACKTOP; //@line 10987
     STACKTOP = sp; //@line 10988
     return 0; //@line 10988
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10990
     $$pre17 = HEAP32[$62 >> 2] | 0; //@line 10991
     if (!$$pre17) {
      $87 = 0; //@line 10994
      break;
     } else {
      $80 = $$pre17; //@line 10997
      label = 30; //@line 10998
      break;
     }
    }
   }
  } while (0);
  do {
   if ((label | 0) == 30) {
    $81 = HEAP32[$80 + 4 >> 2] | 0; //@line 11007
    $AsyncCtx14 = _emscripten_alloc_async_context(24, sp) | 0; //@line 11008
    FUNCTION_TABLE_vii[$81 & 15]($65, $61); //@line 11009
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 358; //@line 11012
     HEAP32[$AsyncCtx14 + 4 >> 2] = $62; //@line 11014
     HEAP32[$AsyncCtx14 + 8 >> 2] = $67; //@line 11016
     HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 11018
     HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 11020
     HEAP32[$AsyncCtx14 + 20 >> 2] = $61; //@line 11022
     sp = STACKTOP; //@line 11023
     STACKTOP = sp; //@line 11024
     return 0; //@line 11024
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 11026
     $87 = HEAP32[$62 >> 2] | 0; //@line 11028
     break;
    }
   }
  } while (0);
  HEAP32[$67 >> 2] = $87; //@line 11033
  $$pr = HEAP32[$62 >> 2] | 0; //@line 11034
  if (!$$pr) {
   $97 = 0; //@line 11037
   $98 = $0; //@line 11037
  } else {
   $90 = $$pr; //@line 11039
   $94 = $0; //@line 11039
   label = 34; //@line 11040
  }
 }
 do {
  if ((label | 0) == 34) {
   $91 = HEAP32[$90 + 4 >> 2] | 0; //@line 11046
   $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11047
   FUNCTION_TABLE_vii[$91 & 15]($2, $61); //@line 11048
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 359; //@line 11051
    HEAP32[$AsyncCtx17 + 4 >> 2] = $62; //@line 11053
    HEAP32[$AsyncCtx17 + 8 >> 2] = $94; //@line 11055
    HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 11057
    sp = STACKTOP; //@line 11058
    STACKTOP = sp; //@line 11059
    return 0; //@line 11059
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11061
    $97 = HEAP32[$62 >> 2] | 0; //@line 11063
    $98 = $94; //@line 11063
    break;
   }
  }
 } while (0);
 $96 = $2 + 12 | 0; //@line 11068
 HEAP32[$96 >> 2] = $97; //@line 11069
 $AsyncCtx24 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11070
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($98, $2); //@line 11071
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 360; //@line 11074
  HEAP32[$AsyncCtx24 + 4 >> 2] = $96; //@line 11076
  HEAP32[$AsyncCtx24 + 8 >> 2] = $2; //@line 11078
  sp = STACKTOP; //@line 11079
  STACKTOP = sp; //@line 11080
  return 0; //@line 11080
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 11082
 $101 = HEAP32[$96 >> 2] | 0; //@line 11083
 if (!$101) {
  $$0 = 0; //@line 11086
  STACKTOP = sp; //@line 11087
  return $$0 | 0; //@line 11087
 }
 $104 = HEAP32[$101 + 8 >> 2] | 0; //@line 11090
 $AsyncCtx21 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11091
 FUNCTION_TABLE_vi[$104 & 1023]($2); //@line 11092
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 361; //@line 11095
  sp = STACKTOP; //@line 11096
  STACKTOP = sp; //@line 11097
  return 0; //@line 11097
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 11099
 $$0 = 0; //@line 11100
 STACKTOP = sp; //@line 11101
 return $$0 | 0; //@line 11101
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19332
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19334
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19336
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19338
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19340
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19342
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19344
 $$pre = HEAP32[$12 >> 2] | 0; //@line 19345
 if ($$pre | 0) {
  $15 = HEAP32[$$pre + 4 >> 2] | 0; //@line 19349
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 19350
  FUNCTION_TABLE_vii[$15 & 15]($2, $4); //@line 19351
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 354; //@line 19354
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 19355
   HEAP32[$16 >> 2] = $4; //@line 19356
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 19357
   HEAP32[$17 >> 2] = $6; //@line 19358
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 19359
   HEAP32[$18 >> 2] = $8; //@line 19360
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 19361
   HEAP32[$19 >> 2] = $10; //@line 19362
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 19363
   HEAP32[$20 >> 2] = $12; //@line 19364
   sp = STACKTOP; //@line 19365
   return;
  }
  ___async_unwind = 0; //@line 19368
  HEAP32[$ReallocAsyncCtx2 >> 2] = 354; //@line 19369
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 19370
  HEAP32[$16 >> 2] = $4; //@line 19371
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 19372
  HEAP32[$17 >> 2] = $6; //@line 19373
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 19374
  HEAP32[$18 >> 2] = $8; //@line 19375
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 19376
  HEAP32[$19 >> 2] = $10; //@line 19377
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 19378
  HEAP32[$20 >> 2] = $12; //@line 19379
  sp = STACKTOP; //@line 19380
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 19383
 $21 = $4 + 16 | 0; //@line 19384
 $22 = $4 + 28 | 0; //@line 19385
 $23 = HEAP32[$22 >> 2] | 0; //@line 19386
 if ($23 | 0) {
  $25 = $8 + 2516 | 0; //@line 19389
  if (($25 | 0) != ($21 | 0)) {
   $27 = $8 + 2528 | 0; //@line 19392
   $28 = HEAP32[$27 >> 2] | 0; //@line 19393
   if (!$28) {
    $40 = HEAP32[$23 + 4 >> 2] | 0; //@line 19397
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 19398
    FUNCTION_TABLE_vii[$40 & 15]($25, $21); //@line 19399
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 19402
     $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 19403
     HEAP32[$41 >> 2] = $10; //@line 19404
     $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 19405
     HEAP32[$42 >> 2] = $8; //@line 19406
     $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 19407
     HEAP32[$43 >> 2] = $22; //@line 19408
     $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 19409
     HEAP32[$44 >> 2] = $27; //@line 19410
     $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 19411
     HEAP32[$45 >> 2] = $4; //@line 19412
     sp = STACKTOP; //@line 19413
     return;
    }
    ___async_unwind = 0; //@line 19416
    HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 19417
    $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 19418
    HEAP32[$41 >> 2] = $10; //@line 19419
    $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 19420
    HEAP32[$42 >> 2] = $8; //@line 19421
    $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 19422
    HEAP32[$43 >> 2] = $22; //@line 19423
    $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 19424
    HEAP32[$44 >> 2] = $27; //@line 19425
    $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 19426
    HEAP32[$45 >> 2] = $4; //@line 19427
    sp = STACKTOP; //@line 19428
    return;
   } else {
    $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 19432
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 19433
    FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 19434
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 355; //@line 19437
     $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 19438
     HEAP32[$32 >> 2] = $25; //@line 19439
     $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 19440
     HEAP32[$33 >> 2] = $21; //@line 19441
     $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 19442
     HEAP32[$34 >> 2] = $22; //@line 19443
     $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 19444
     HEAP32[$35 >> 2] = $10; //@line 19445
     $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 19446
     HEAP32[$36 >> 2] = $8; //@line 19447
     $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 19448
     HEAP32[$37 >> 2] = $27; //@line 19449
     $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 19450
     HEAP32[$38 >> 2] = $4; //@line 19451
     sp = STACKTOP; //@line 19452
     return;
    }
    ___async_unwind = 0; //@line 19455
    HEAP32[$ReallocAsyncCtx3 >> 2] = 355; //@line 19456
    $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 19457
    HEAP32[$32 >> 2] = $25; //@line 19458
    $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 19459
    HEAP32[$33 >> 2] = $21; //@line 19460
    $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 19461
    HEAP32[$34 >> 2] = $22; //@line 19462
    $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 19463
    HEAP32[$35 >> 2] = $10; //@line 19464
    $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 19465
    HEAP32[$36 >> 2] = $8; //@line 19466
    $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 19467
    HEAP32[$37 >> 2] = $27; //@line 19468
    $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 19469
    HEAP32[$38 >> 2] = $4; //@line 19470
    sp = STACKTOP; //@line 19471
    return;
   }
  }
 }
 $46 = $4 + 32 | 0; //@line 19476
 $47 = $4 + 44 | 0; //@line 19477
 $48 = HEAP32[$47 >> 2] | 0; //@line 19478
 if (!$48) {
  HEAP32[___async_retval >> 2] = 0; //@line 19482
  return;
 }
 $50 = $8 + 2532 | 0; //@line 19485
 if (($50 | 0) == ($46 | 0)) {
  $71 = HEAP32[$48 + 4 >> 2] | 0; //@line 19489
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 19490
  FUNCTION_TABLE_vii[$71 & 15]($10, $46); //@line 19491
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 19494
   $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 19495
   HEAP32[$72 >> 2] = $47; //@line 19496
   $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 19497
   HEAP32[$73 >> 2] = $8; //@line 19498
   $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 19499
   HEAP32[$74 >> 2] = $10; //@line 19500
   sp = STACKTOP; //@line 19501
   return;
  }
  ___async_unwind = 0; //@line 19504
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 19505
  $72 = $ReallocAsyncCtx7 + 4 | 0; //@line 19506
  HEAP32[$72 >> 2] = $47; //@line 19507
  $73 = $ReallocAsyncCtx7 + 8 | 0; //@line 19508
  HEAP32[$73 >> 2] = $8; //@line 19509
  $74 = $ReallocAsyncCtx7 + 12 | 0; //@line 19510
  HEAP32[$74 >> 2] = $10; //@line 19511
  sp = STACKTOP; //@line 19512
  return;
 }
 $52 = $8 + 2544 | 0; //@line 19515
 $53 = HEAP32[$52 >> 2] | 0; //@line 19516
 if (!$53) {
  $64 = HEAP32[$48 + 4 >> 2] | 0; //@line 19520
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 19521
  FUNCTION_TABLE_vii[$64 & 15]($50, $46); //@line 19522
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 19525
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 19526
   HEAP32[$65 >> 2] = $47; //@line 19527
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 19528
   HEAP32[$66 >> 2] = $52; //@line 19529
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 19530
   HEAP32[$67 >> 2] = $8; //@line 19531
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 19532
   HEAP32[$68 >> 2] = $10; //@line 19533
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 19534
   HEAP32[$69 >> 2] = $46; //@line 19535
   sp = STACKTOP; //@line 19536
   return;
  }
  ___async_unwind = 0; //@line 19539
  HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 19540
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 19541
  HEAP32[$65 >> 2] = $47; //@line 19542
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 19543
  HEAP32[$66 >> 2] = $52; //@line 19544
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 19545
  HEAP32[$67 >> 2] = $8; //@line 19546
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 19547
  HEAP32[$68 >> 2] = $10; //@line 19548
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 19549
  HEAP32[$69 >> 2] = $46; //@line 19550
  sp = STACKTOP; //@line 19551
  return;
 } else {
  $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 19555
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 19556
  FUNCTION_TABLE_vi[$56 & 1023]($50); //@line 19557
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 19560
   $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 19561
   HEAP32[$57 >> 2] = $47; //@line 19562
   $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 19563
   HEAP32[$58 >> 2] = $52; //@line 19564
   $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 19565
   HEAP32[$59 >> 2] = $8; //@line 19566
   $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 19567
   HEAP32[$60 >> 2] = $50; //@line 19568
   $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 19569
   HEAP32[$61 >> 2] = $46; //@line 19570
   $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 19571
   HEAP32[$62 >> 2] = $10; //@line 19572
   sp = STACKTOP; //@line 19573
   return;
  }
  ___async_unwind = 0; //@line 19576
  HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 19577
  $57 = $ReallocAsyncCtx5 + 4 | 0; //@line 19578
  HEAP32[$57 >> 2] = $47; //@line 19579
  $58 = $ReallocAsyncCtx5 + 8 | 0; //@line 19580
  HEAP32[$58 >> 2] = $52; //@line 19581
  $59 = $ReallocAsyncCtx5 + 12 | 0; //@line 19582
  HEAP32[$59 >> 2] = $8; //@line 19583
  $60 = $ReallocAsyncCtx5 + 16 | 0; //@line 19584
  HEAP32[$60 >> 2] = $50; //@line 19585
  $61 = $ReallocAsyncCtx5 + 20 | 0; //@line 19586
  HEAP32[$61 >> 2] = $46; //@line 19587
  $62 = $ReallocAsyncCtx5 + 24 | 0; //@line 19588
  HEAP32[$62 >> 2] = $10; //@line 19589
  sp = STACKTOP; //@line 19590
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14944
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14946
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14948
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14950
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14952
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14954
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14956
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14958
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14960
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14962
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14964
 $$pre = HEAP32[$18 >> 2] | 0; //@line 14965
 if ($$pre | 0) {
  $23 = HEAP32[$$pre + 4 >> 2] | 0; //@line 14969
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 14970
  FUNCTION_TABLE_vii[$23 & 15]($8, $10); //@line 14971
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 183; //@line 14974
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 14975
   HEAP32[$24 >> 2] = $2; //@line 14976
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 14977
   HEAP32[$25 >> 2] = $4; //@line 14978
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 14979
   HEAP32[$26 >> 2] = $6; //@line 14980
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 14981
   HEAP32[$27 >> 2] = $14; //@line 14982
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 14983
   HEAP32[$28 >> 2] = $10; //@line 14984
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 14985
   HEAP32[$29 >> 2] = $16; //@line 14986
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 14987
   HEAP32[$30 >> 2] = $8; //@line 14988
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 14989
   HEAP32[$31 >> 2] = $18; //@line 14990
   $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 14991
   HEAP32[$32 >> 2] = $12; //@line 14992
   $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 14993
   HEAP32[$33 >> 2] = $20; //@line 14994
   sp = STACKTOP; //@line 14995
   return;
  }
  ___async_unwind = 0; //@line 14998
  HEAP32[$ReallocAsyncCtx2 >> 2] = 183; //@line 14999
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 15000
  HEAP32[$24 >> 2] = $2; //@line 15001
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 15002
  HEAP32[$25 >> 2] = $4; //@line 15003
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 15004
  HEAP32[$26 >> 2] = $6; //@line 15005
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 15006
  HEAP32[$27 >> 2] = $14; //@line 15007
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 15008
  HEAP32[$28 >> 2] = $10; //@line 15009
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 15010
  HEAP32[$29 >> 2] = $16; //@line 15011
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 15012
  HEAP32[$30 >> 2] = $8; //@line 15013
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 15014
  HEAP32[$31 >> 2] = $18; //@line 15015
  $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 15016
  HEAP32[$32 >> 2] = $12; //@line 15017
  $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 15018
  HEAP32[$33 >> 2] = $20; //@line 15019
  sp = STACKTOP; //@line 15020
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 15023
 $34 = $16 + 12 | 0; //@line 15024
 HEAP32[$16 >> 2] = 6; //@line 15025
 HEAP32[$16 + 4 >> 2] = 0; //@line 15027
 HEAP32[$16 + 8 >> 2] = $4; //@line 15029
 HEAP32[$34 >> 2] = 836; //@line 15030
 $35 = $4 + 2416 | 0; //@line 15031
 if (($35 | 0) == ($16 | 0)) {
  $64 = HEAP32[211] | 0; //@line 15035
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 15036
  FUNCTION_TABLE_vi[$64 & 1023]($16); //@line 15037
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15040
   $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 15041
   HEAP32[$65 >> 2] = $2; //@line 15042
   $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 15043
   HEAP32[$66 >> 2] = $4; //@line 15044
   $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 15045
   HEAP32[$67 >> 2] = $6; //@line 15046
   $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 15047
   HEAP32[$68 >> 2] = $14; //@line 15048
   $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 15049
   HEAP32[$69 >> 2] = $8; //@line 15050
   $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 15051
   HEAP32[$70 >> 2] = $16; //@line 15052
   $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 15053
   HEAP32[$71 >> 2] = $20; //@line 15054
   sp = STACKTOP; //@line 15055
   return;
  }
  ___async_unwind = 0; //@line 15058
  HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15059
  $65 = $ReallocAsyncCtx6 + 4 | 0; //@line 15060
  HEAP32[$65 >> 2] = $2; //@line 15061
  $66 = $ReallocAsyncCtx6 + 8 | 0; //@line 15062
  HEAP32[$66 >> 2] = $4; //@line 15063
  $67 = $ReallocAsyncCtx6 + 12 | 0; //@line 15064
  HEAP32[$67 >> 2] = $6; //@line 15065
  $68 = $ReallocAsyncCtx6 + 16 | 0; //@line 15066
  HEAP32[$68 >> 2] = $14; //@line 15067
  $69 = $ReallocAsyncCtx6 + 20 | 0; //@line 15068
  HEAP32[$69 >> 2] = $8; //@line 15069
  $70 = $ReallocAsyncCtx6 + 24 | 0; //@line 15070
  HEAP32[$70 >> 2] = $16; //@line 15071
  $71 = $ReallocAsyncCtx6 + 28 | 0; //@line 15072
  HEAP32[$71 >> 2] = $20; //@line 15073
  sp = STACKTOP; //@line 15074
  return;
 }
 $37 = $4 + 2428 | 0; //@line 15077
 $38 = HEAP32[$37 >> 2] | 0; //@line 15078
 if (!$38) {
  $53 = HEAP32[210] | 0; //@line 15082
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 15083
  FUNCTION_TABLE_vii[$53 & 15]($35, $16); //@line 15084
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15087
   $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 15088
   HEAP32[$54 >> 2] = $2; //@line 15089
   $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 15090
   HEAP32[$55 >> 2] = $4; //@line 15091
   $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 15092
   HEAP32[$56 >> 2] = $6; //@line 15093
   $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 15094
   HEAP32[$57 >> 2] = $14; //@line 15095
   $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 15096
   HEAP32[$58 >> 2] = $34; //@line 15097
   $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 15098
   HEAP32[$59 >> 2] = $37; //@line 15099
   $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 15100
   HEAP32[$60 >> 2] = $8; //@line 15101
   $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 15102
   HEAP32[$61 >> 2] = $16; //@line 15103
   $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 15104
   HEAP32[$62 >> 2] = $20; //@line 15105
   sp = STACKTOP; //@line 15106
   return;
  }
  ___async_unwind = 0; //@line 15109
  HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15110
  $54 = $ReallocAsyncCtx5 + 4 | 0; //@line 15111
  HEAP32[$54 >> 2] = $2; //@line 15112
  $55 = $ReallocAsyncCtx5 + 8 | 0; //@line 15113
  HEAP32[$55 >> 2] = $4; //@line 15114
  $56 = $ReallocAsyncCtx5 + 12 | 0; //@line 15115
  HEAP32[$56 >> 2] = $6; //@line 15116
  $57 = $ReallocAsyncCtx5 + 16 | 0; //@line 15117
  HEAP32[$57 >> 2] = $14; //@line 15118
  $58 = $ReallocAsyncCtx5 + 20 | 0; //@line 15119
  HEAP32[$58 >> 2] = $34; //@line 15120
  $59 = $ReallocAsyncCtx5 + 24 | 0; //@line 15121
  HEAP32[$59 >> 2] = $37; //@line 15122
  $60 = $ReallocAsyncCtx5 + 28 | 0; //@line 15123
  HEAP32[$60 >> 2] = $8; //@line 15124
  $61 = $ReallocAsyncCtx5 + 32 | 0; //@line 15125
  HEAP32[$61 >> 2] = $16; //@line 15126
  $62 = $ReallocAsyncCtx5 + 36 | 0; //@line 15127
  HEAP32[$62 >> 2] = $20; //@line 15128
  sp = STACKTOP; //@line 15129
  return;
 } else {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 15133
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 15134
  FUNCTION_TABLE_vi[$41 & 1023]($35); //@line 15135
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 15138
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 15139
   HEAP32[$42 >> 2] = $2; //@line 15140
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 15141
   HEAP32[$43 >> 2] = $4; //@line 15142
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 15143
   HEAP32[$44 >> 2] = $6; //@line 15144
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 15145
   HEAP32[$45 >> 2] = $14; //@line 15146
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 15147
   HEAP32[$46 >> 2] = $37; //@line 15148
   $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 15149
   HEAP32[$47 >> 2] = $35; //@line 15150
   $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 15151
   HEAP32[$48 >> 2] = $16; //@line 15152
   $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 15153
   HEAP32[$49 >> 2] = $34; //@line 15154
   $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 15155
   HEAP32[$50 >> 2] = $8; //@line 15156
   $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 15157
   HEAP32[$51 >> 2] = $20; //@line 15158
   sp = STACKTOP; //@line 15159
   return;
  }
  ___async_unwind = 0; //@line 15162
  HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 15163
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 15164
  HEAP32[$42 >> 2] = $2; //@line 15165
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 15166
  HEAP32[$43 >> 2] = $4; //@line 15167
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 15168
  HEAP32[$44 >> 2] = $6; //@line 15169
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 15170
  HEAP32[$45 >> 2] = $14; //@line 15171
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 15172
  HEAP32[$46 >> 2] = $37; //@line 15173
  $47 = $ReallocAsyncCtx4 + 24 | 0; //@line 15174
  HEAP32[$47 >> 2] = $35; //@line 15175
  $48 = $ReallocAsyncCtx4 + 28 | 0; //@line 15176
  HEAP32[$48 >> 2] = $16; //@line 15177
  $49 = $ReallocAsyncCtx4 + 32 | 0; //@line 15178
  HEAP32[$49 >> 2] = $34; //@line 15179
  $50 = $ReallocAsyncCtx4 + 36 | 0; //@line 15180
  HEAP32[$50 >> 2] = $8; //@line 15181
  $51 = $ReallocAsyncCtx4 + 40 | 0; //@line 15182
  HEAP32[$51 >> 2] = $20; //@line 15183
  sp = STACKTOP; //@line 15184
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 $15 = $15 | 0;
 $16 = $16 | 0;
 $17 = $17 | 0;
 $18 = $18 | 0;
 var $106 = 0, $19 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $47 = 0, $49 = 0, $62 = 0, $64 = 0, $77 = 0, $79 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1960
 HEAP32[$0 >> 2] = 496; //@line 1961
 $19 = $0 + 4 | 0; //@line 1962
 HEAP32[$19 >> 2] = 0; //@line 1963
 HEAP32[$19 + 4 >> 2] = 0; //@line 1963
 HEAP32[$19 + 8 >> 2] = 0; //@line 1963
 HEAP32[$19 + 12 >> 2] = 0; //@line 1963
 HEAP32[$19 + 16 >> 2] = 0; //@line 1963
 HEAP32[$19 + 20 >> 2] = 0; //@line 1963
 _gpio_init_out_ex($19, $4, 1); //@line 1964
 $20 = $0 + 28 | 0; //@line 1965
 HEAP32[$20 >> 2] = 0; //@line 1966
 HEAP32[$20 + 4 >> 2] = 0; //@line 1966
 HEAP32[$20 + 8 >> 2] = 0; //@line 1966
 HEAP32[$20 + 12 >> 2] = 0; //@line 1966
 HEAP32[$20 + 16 >> 2] = 0; //@line 1966
 HEAP32[$20 + 20 >> 2] = 0; //@line 1966
 _gpio_init_in($20, $5); //@line 1967
 __ZN4mbed11InterruptInC2E7PinName($0 + 52 | 0, $6); //@line 1969
 __ZN4mbed11InterruptInC2E7PinName($0 + 124 | 0, $7); //@line 1971
 __ZN4mbed11InterruptInC2E7PinName($0 + 196 | 0, $8); //@line 1973
 __ZN4mbed11InterruptInC2E7PinName($0 + 268 | 0, $9); //@line 1975
 __ZN4mbed11InterruptInC2E7PinName($0 + 340 | 0, $10); //@line 1977
 __ZN4mbed11InterruptInC2E7PinName($0 + 412 | 0, $11); //@line 1979
 $27 = $0 + 484 | 0; //@line 1980
 HEAP32[$27 >> 2] = 0; //@line 1981
 HEAP32[$27 + 4 >> 2] = 0; //@line 1981
 HEAP32[$27 + 8 >> 2] = 0; //@line 1981
 HEAP32[$27 + 12 >> 2] = 0; //@line 1981
 HEAP32[$27 + 16 >> 2] = 0; //@line 1981
 HEAP32[$27 + 20 >> 2] = 0; //@line 1981
 _gpio_init_out_ex($27, $12, 0); //@line 1982
 $28 = $0 + 508 | 0; //@line 1983
 HEAP32[$28 >> 2] = 0; //@line 1984
 HEAP32[$28 + 4 >> 2] = 0; //@line 1984
 HEAP32[$28 + 8 >> 2] = 0; //@line 1984
 HEAP32[$28 + 12 >> 2] = 0; //@line 1984
 HEAP32[$28 + 16 >> 2] = 0; //@line 1984
 HEAP32[$28 + 20 >> 2] = 0; //@line 1984
 _gpio_init_out_ex($28, $13, 0); //@line 1985
 $29 = $0 + 532 | 0; //@line 1986
 HEAP32[$29 >> 2] = 0; //@line 1987
 HEAP32[$29 + 4 >> 2] = 0; //@line 1987
 HEAP32[$29 + 8 >> 2] = 0; //@line 1987
 HEAP32[$29 + 12 >> 2] = 0; //@line 1987
 HEAP32[$29 + 16 >> 2] = 0; //@line 1987
 HEAP32[$29 + 20 >> 2] = 0; //@line 1987
 _gpio_init_out_ex($29, $14, 0); //@line 1988
 $30 = $0 + 556 | 0; //@line 1989
 HEAP32[$30 >> 2] = 0; //@line 1990
 HEAP32[$30 + 4 >> 2] = 0; //@line 1990
 HEAP32[$30 + 8 >> 2] = 0; //@line 1990
 HEAP32[$30 + 12 >> 2] = 0; //@line 1990
 HEAP32[$30 + 16 >> 2] = 0; //@line 1990
 HEAP32[$30 + 20 >> 2] = 0; //@line 1990
 _gpio_init_out_ex($30, $15, 0); //@line 1991
 $31 = $0 + 580 | 0; //@line 1992
 HEAP32[$31 >> 2] = 0; //@line 1993
 HEAP32[$31 + 4 >> 2] = 0; //@line 1993
 HEAP32[$31 + 8 >> 2] = 0; //@line 1993
 HEAP32[$31 + 12 >> 2] = 0; //@line 1993
 HEAP32[$31 + 16 >> 2] = 0; //@line 1993
 HEAP32[$31 + 20 >> 2] = 0; //@line 1993
 _gpio_init_inout($31, $16, 0, 0, 0); //@line 1994
 $32 = $0 + 604 | 0; //@line 1995
 HEAP32[$32 >> 2] = 0; //@line 1996
 HEAP32[$32 + 4 >> 2] = 0; //@line 1996
 HEAP32[$32 + 8 >> 2] = 0; //@line 1996
 HEAP32[$32 + 12 >> 2] = 0; //@line 1996
 HEAP32[$32 + 16 >> 2] = 0; //@line 1996
 HEAP32[$32 + 20 >> 2] = 0; //@line 1996
 _gpio_init_out($32, $17); //@line 1997
 $33 = $0 + 628 | 0; //@line 1998
 HEAP32[$33 >> 2] = 0; //@line 1999
 HEAP32[$33 + 4 >> 2] = 0; //@line 1999
 HEAP32[$33 + 8 >> 2] = 0; //@line 1999
 HEAP32[$33 + 12 >> 2] = 0; //@line 1999
 HEAP32[$33 + 16 >> 2] = 0; //@line 1999
 HEAP32[$33 + 20 >> 2] = 0; //@line 1999
 _gpio_init_out($33, $18); //@line 2000
 $34 = $0 + 1048 | 0; //@line 2001
 $AsyncCtx11 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2002
 __ZN4mbed10TimerEventC2Ev($34); //@line 2003
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 97; //@line 2006
  HEAP32[$AsyncCtx11 + 4 >> 2] = $34; //@line 2008
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2010
  HEAP32[$AsyncCtx11 + 12 >> 2] = $16; //@line 2012
  HEAP32[$AsyncCtx11 + 16 >> 2] = $17; //@line 2014
  HEAP32[$AsyncCtx11 + 20 >> 2] = $12; //@line 2016
  HEAP32[$AsyncCtx11 + 24 >> 2] = $13; //@line 2018
  HEAP32[$AsyncCtx11 + 28 >> 2] = $15; //@line 2020
  HEAP32[$AsyncCtx11 + 32 >> 2] = $14; //@line 2022
  HEAP32[$AsyncCtx11 + 36 >> 2] = $18; //@line 2024
  HEAP32[$AsyncCtx11 + 40 >> 2] = $10; //@line 2026
  HEAP32[$AsyncCtx11 + 44 >> 2] = $11; //@line 2028
  HEAP32[$AsyncCtx11 + 48 >> 2] = $33; //@line 2030
  sp = STACKTOP; //@line 2031
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2034
 $47 = $0 + 1088 | 0; //@line 2035
 HEAP32[$47 >> 2] = 0; //@line 2036
 HEAP32[$47 + 4 >> 2] = 0; //@line 2036
 HEAP32[$47 + 8 >> 2] = 0; //@line 2036
 HEAP32[$47 + 12 >> 2] = 0; //@line 2036
 HEAP8[$0 + 1104 >> 0] = 1; //@line 2038
 HEAP32[$34 >> 2] = 620; //@line 2039
 $49 = $0 + 1112 | 0; //@line 2040
 $AsyncCtx7 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2041
 __ZN4mbed10TimerEventC2Ev($49); //@line 2042
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 98; //@line 2045
  HEAP32[$AsyncCtx7 + 4 >> 2] = $49; //@line 2047
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2049
  HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 2051
  HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 2053
  HEAP32[$AsyncCtx7 + 20 >> 2] = $12; //@line 2055
  HEAP32[$AsyncCtx7 + 24 >> 2] = $13; //@line 2057
  HEAP32[$AsyncCtx7 + 28 >> 2] = $15; //@line 2059
  HEAP32[$AsyncCtx7 + 32 >> 2] = $14; //@line 2061
  HEAP32[$AsyncCtx7 + 36 >> 2] = $18; //@line 2063
  HEAP32[$AsyncCtx7 + 40 >> 2] = $10; //@line 2065
  HEAP32[$AsyncCtx7 + 44 >> 2] = $11; //@line 2067
  HEAP32[$AsyncCtx7 + 48 >> 2] = $33; //@line 2069
  sp = STACKTOP; //@line 2070
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2073
 $62 = $0 + 1152 | 0; //@line 2074
 HEAP32[$62 >> 2] = 0; //@line 2075
 HEAP32[$62 + 4 >> 2] = 0; //@line 2075
 HEAP32[$62 + 8 >> 2] = 0; //@line 2075
 HEAP32[$62 + 12 >> 2] = 0; //@line 2075
 HEAP8[$0 + 1168 >> 0] = 1; //@line 2077
 HEAP32[$49 >> 2] = 620; //@line 2078
 $64 = $0 + 1176 | 0; //@line 2079
 $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 2080
 __ZN4mbed10TimerEventC2Ev($64); //@line 2081
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 99; //@line 2084
  HEAP32[$AsyncCtx3 + 4 >> 2] = $64; //@line 2086
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 2088
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 2090
  HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 2092
  HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 2094
  HEAP32[$AsyncCtx3 + 24 >> 2] = $13; //@line 2096
  HEAP32[$AsyncCtx3 + 28 >> 2] = $15; //@line 2098
  HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 2100
  HEAP32[$AsyncCtx3 + 36 >> 2] = $18; //@line 2102
  HEAP32[$AsyncCtx3 + 40 >> 2] = $10; //@line 2104
  HEAP32[$AsyncCtx3 + 44 >> 2] = $11; //@line 2106
  HEAP32[$AsyncCtx3 + 48 >> 2] = $33; //@line 2108
  sp = STACKTOP; //@line 2109
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2112
 $77 = $0 + 1216 | 0; //@line 2113
 HEAP32[$77 >> 2] = 0; //@line 2114
 HEAP32[$77 + 4 >> 2] = 0; //@line 2114
 HEAP32[$77 + 8 >> 2] = 0; //@line 2114
 HEAP32[$77 + 12 >> 2] = 0; //@line 2114
 HEAP8[$0 + 1232 >> 0] = 1; //@line 2116
 HEAP32[$64 >> 2] = 620; //@line 2117
 $79 = $0 + 1240 | 0; //@line 2118
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 2119
 __ZN4mbed10TimerEventC2Ev($79); //@line 2120
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 100; //@line 2123
  HEAP32[$AsyncCtx + 4 >> 2] = $79; //@line 2125
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2127
  HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 2129
  HEAP32[$AsyncCtx + 16 >> 2] = $17; //@line 2131
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 2133
  HEAP32[$AsyncCtx + 24 >> 2] = $13; //@line 2135
  HEAP32[$AsyncCtx + 28 >> 2] = $15; //@line 2137
  HEAP32[$AsyncCtx + 32 >> 2] = $14; //@line 2139
  HEAP32[$AsyncCtx + 36 >> 2] = $18; //@line 2141
  HEAP32[$AsyncCtx + 40 >> 2] = $10; //@line 2143
  HEAP32[$AsyncCtx + 44 >> 2] = $11; //@line 2145
  HEAP32[$AsyncCtx + 48 >> 2] = $33; //@line 2147
  sp = STACKTOP; //@line 2148
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2151
 $92 = $0 + 1280 | 0; //@line 2152
 HEAP32[$92 >> 2] = 0; //@line 2153
 HEAP32[$92 + 4 >> 2] = 0; //@line 2153
 HEAP32[$92 + 8 >> 2] = 0; //@line 2153
 HEAP32[$92 + 12 >> 2] = 0; //@line 2153
 HEAP8[$0 + 1296 >> 0] = 1; //@line 2155
 HEAP32[$79 >> 2] = 620; //@line 2156
 HEAP32[$0 + 668 >> 2] = $16; //@line 2158
 HEAP32[$0 + 672 >> 2] = $17; //@line 2160
 HEAP32[$0 + 652 >> 2] = $12; //@line 2162
 HEAP32[$0 + 656 >> 2] = $13; //@line 2164
 HEAP32[$0 + 664 >> 2] = $15; //@line 2166
 HEAP32[$0 + 660 >> 2] = $14; //@line 2168
 HEAP32[$0 + 676 >> 2] = $18; //@line 2170
 HEAP32[$0 + 680 >> 2] = $10; //@line 2172
 HEAP32[$0 + 684 >> 2] = $11; //@line 2174
 HEAP32[$0 + 788 >> 2] = 0; //@line 2176
 if (($18 | 0) == -1) {
  $106 = _emscripten_asm_const_ii(5, $0 | 0) | 0; //@line 2179
  return;
 }
 _emscripten_asm_const_iii(4, HEAP32[$33 >> 2] | 0, 1) | 0; //@line 2183
 $106 = _emscripten_asm_const_ii(5, $0 | 0) | 0; //@line 2184
 return;
}
function _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$04056 = 0, $$04255 = 0, $$044 = 0, $$04554 = 0, $$14160 = 0, $$14160$us = 0, $$14359 = 0, $$14359$us = 0, $$14658 = 0, $$14658$us = 0, $10 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $127 = 0, $13 = 0, $131 = 0, $135 = 0, $139 = 0, $14 = 0, $143 = 0, $147 = 0, $15 = 0, $151 = 0, $155 = 0, $159 = 0, $16 = 0, $163 = 0, $167 = 0, $17 = 0, $171 = 0, $175 = 0, $179 = 0, $18 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1715
 STACKTOP = STACKTOP + 16 | 0; //@line 1716
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1716
 $6 = sp; //@line 1717
 if ($2 & 15 | 0) {
  $$044 = -34; //@line 1721
  STACKTOP = sp; //@line 1722
  return $$044 | 0; //@line 1722
 }
 $10 = ($2 | 0) == 0; //@line 1725
 if (!$1) {
  if ($10) {
   $$044 = 0; //@line 1728
   STACKTOP = sp; //@line 1729
   return $$044 | 0; //@line 1729
  }
  $109 = $3 + 1 | 0; //@line 1731
  $110 = $3 + 2 | 0; //@line 1732
  $111 = $3 + 3 | 0; //@line 1733
  $112 = $3 + 4 | 0; //@line 1734
  $113 = $3 + 5 | 0; //@line 1735
  $114 = $3 + 6 | 0; //@line 1736
  $115 = $3 + 7 | 0; //@line 1737
  $116 = $3 + 8 | 0; //@line 1738
  $117 = $3 + 9 | 0; //@line 1739
  $118 = $3 + 10 | 0; //@line 1740
  $119 = $3 + 11 | 0; //@line 1741
  $120 = $3 + 12 | 0; //@line 1742
  $121 = $3 + 13 | 0; //@line 1743
  $122 = $3 + 14 | 0; //@line 1744
  $123 = $3 + 15 | 0; //@line 1745
  $$04056 = $5; //@line 1746
  $$04255 = $4; //@line 1746
  $$04554 = $2; //@line 1746
  while (1) {
   dest = $6; //@line 1748
   src = $$04255; //@line 1748
   stop = dest + 16 | 0; //@line 1748
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1748
    dest = dest + 1 | 0; //@line 1748
    src = src + 1 | 0; //@line 1748
   } while ((dest | 0) < (stop | 0));
   _mbedtls_internal_aes_decrypt($0, $$04255, $$04056) | 0; //@line 1749
   HEAP8[$$04056 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$04056 >> 0]; //@line 1753
   $127 = $$04056 + 1 | 0; //@line 1754
   HEAP8[$127 >> 0] = HEAP8[$109 >> 0] ^ HEAP8[$127 >> 0]; //@line 1758
   $131 = $$04056 + 2 | 0; //@line 1759
   HEAP8[$131 >> 0] = HEAP8[$110 >> 0] ^ HEAP8[$131 >> 0]; //@line 1763
   $135 = $$04056 + 3 | 0; //@line 1764
   HEAP8[$135 >> 0] = HEAP8[$111 >> 0] ^ HEAP8[$135 >> 0]; //@line 1768
   $139 = $$04056 + 4 | 0; //@line 1769
   HEAP8[$139 >> 0] = HEAP8[$112 >> 0] ^ HEAP8[$139 >> 0]; //@line 1773
   $143 = $$04056 + 5 | 0; //@line 1774
   HEAP8[$143 >> 0] = HEAP8[$113 >> 0] ^ HEAP8[$143 >> 0]; //@line 1778
   $147 = $$04056 + 6 | 0; //@line 1779
   HEAP8[$147 >> 0] = HEAP8[$114 >> 0] ^ HEAP8[$147 >> 0]; //@line 1783
   $151 = $$04056 + 7 | 0; //@line 1784
   HEAP8[$151 >> 0] = HEAP8[$115 >> 0] ^ HEAP8[$151 >> 0]; //@line 1788
   $155 = $$04056 + 8 | 0; //@line 1789
   HEAP8[$155 >> 0] = HEAP8[$116 >> 0] ^ HEAP8[$155 >> 0]; //@line 1793
   $159 = $$04056 + 9 | 0; //@line 1794
   HEAP8[$159 >> 0] = HEAP8[$117 >> 0] ^ HEAP8[$159 >> 0]; //@line 1798
   $163 = $$04056 + 10 | 0; //@line 1799
   HEAP8[$163 >> 0] = HEAP8[$118 >> 0] ^ HEAP8[$163 >> 0]; //@line 1803
   $167 = $$04056 + 11 | 0; //@line 1804
   HEAP8[$167 >> 0] = HEAP8[$119 >> 0] ^ HEAP8[$167 >> 0]; //@line 1808
   $171 = $$04056 + 12 | 0; //@line 1809
   HEAP8[$171 >> 0] = HEAP8[$120 >> 0] ^ HEAP8[$171 >> 0]; //@line 1813
   $175 = $$04056 + 13 | 0; //@line 1814
   HEAP8[$175 >> 0] = HEAP8[$121 >> 0] ^ HEAP8[$175 >> 0]; //@line 1818
   $179 = $$04056 + 14 | 0; //@line 1819
   HEAP8[$179 >> 0] = HEAP8[$122 >> 0] ^ HEAP8[$179 >> 0]; //@line 1823
   $183 = $$04056 + 15 | 0; //@line 1824
   HEAP8[$183 >> 0] = HEAP8[$123 >> 0] ^ HEAP8[$183 >> 0]; //@line 1828
   dest = $3; //@line 1829
   src = $6; //@line 1829
   stop = dest + 16 | 0; //@line 1829
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1829
    dest = dest + 1 | 0; //@line 1829
    src = src + 1 | 0; //@line 1829
   } while ((dest | 0) < (stop | 0));
   $$04554 = $$04554 + -16 | 0; //@line 1832
   if (!$$04554) {
    $$044 = 0; //@line 1835
    break;
   } else {
    $$04056 = $$04056 + 16 | 0; //@line 1838
    $$04255 = $$04255 + 16 | 0; //@line 1838
   }
  }
  STACKTOP = sp; //@line 1841
  return $$044 | 0; //@line 1841
 }
 if ($10) {
  $$044 = 0; //@line 1844
  STACKTOP = sp; //@line 1845
  return $$044 | 0; //@line 1845
 }
 $12 = $3 + 1 | 0; //@line 1848
 $13 = $3 + 2 | 0; //@line 1849
 $14 = $3 + 3 | 0; //@line 1850
 $15 = $3 + 4 | 0; //@line 1851
 $16 = $3 + 5 | 0; //@line 1852
 $17 = $3 + 6 | 0; //@line 1853
 $18 = $3 + 7 | 0; //@line 1854
 $19 = $3 + 8 | 0; //@line 1855
 $20 = $3 + 9 | 0; //@line 1856
 $21 = $3 + 10 | 0; //@line 1857
 $22 = $3 + 11 | 0; //@line 1858
 $23 = $3 + 12 | 0; //@line 1859
 $24 = $3 + 13 | 0; //@line 1860
 $25 = $3 + 14 | 0; //@line 1861
 $26 = $3 + 15 | 0; //@line 1862
 if (($1 | 0) == 1) {
  $$14160$us = $5; //@line 1864
  $$14359$us = $4; //@line 1864
  $$14658$us = $2; //@line 1864
  while (1) {
   HEAP8[$$14160$us >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359$us >> 0]; //@line 1869
   HEAP8[$$14160$us + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359$us + 1 >> 0]; //@line 1875
   HEAP8[$$14160$us + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359$us + 2 >> 0]; //@line 1881
   HEAP8[$$14160$us + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359$us + 3 >> 0]; //@line 1887
   HEAP8[$$14160$us + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359$us + 4 >> 0]; //@line 1893
   HEAP8[$$14160$us + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359$us + 5 >> 0]; //@line 1899
   HEAP8[$$14160$us + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359$us + 6 >> 0]; //@line 1905
   HEAP8[$$14160$us + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359$us + 7 >> 0]; //@line 1911
   HEAP8[$$14160$us + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359$us + 8 >> 0]; //@line 1917
   HEAP8[$$14160$us + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359$us + 9 >> 0]; //@line 1923
   HEAP8[$$14160$us + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359$us + 10 >> 0]; //@line 1929
   HEAP8[$$14160$us + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359$us + 11 >> 0]; //@line 1935
   HEAP8[$$14160$us + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359$us + 12 >> 0]; //@line 1941
   HEAP8[$$14160$us + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359$us + 13 >> 0]; //@line 1947
   HEAP8[$$14160$us + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359$us + 14 >> 0]; //@line 1953
   HEAP8[$$14160$us + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359$us + 15 >> 0]; //@line 1959
   _mbedtls_internal_aes_encrypt($0, $$14160$us, $$14160$us) | 0; //@line 1960
   dest = $3; //@line 1961
   src = $$14160$us; //@line 1961
   stop = dest + 16 | 0; //@line 1961
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1961
    dest = dest + 1 | 0; //@line 1961
    src = src + 1 | 0; //@line 1961
   } while ((dest | 0) < (stop | 0));
   $$14658$us = $$14658$us + -16 | 0; //@line 1964
   if (!$$14658$us) {
    $$044 = 0; //@line 1967
    break;
   } else {
    $$14160$us = $$14160$us + 16 | 0; //@line 1970
    $$14359$us = $$14359$us + 16 | 0; //@line 1970
   }
  }
  STACKTOP = sp; //@line 1973
  return $$044 | 0; //@line 1973
 } else {
  $$14160 = $5; //@line 1975
  $$14359 = $4; //@line 1975
  $$14658 = $2; //@line 1975
  while (1) {
   HEAP8[$$14160 >> 0] = HEAP8[$3 >> 0] ^ HEAP8[$$14359 >> 0]; //@line 1980
   HEAP8[$$14160 + 1 >> 0] = HEAP8[$12 >> 0] ^ HEAP8[$$14359 + 1 >> 0]; //@line 1986
   HEAP8[$$14160 + 2 >> 0] = HEAP8[$13 >> 0] ^ HEAP8[$$14359 + 2 >> 0]; //@line 1992
   HEAP8[$$14160 + 3 >> 0] = HEAP8[$14 >> 0] ^ HEAP8[$$14359 + 3 >> 0]; //@line 1998
   HEAP8[$$14160 + 4 >> 0] = HEAP8[$15 >> 0] ^ HEAP8[$$14359 + 4 >> 0]; //@line 2004
   HEAP8[$$14160 + 5 >> 0] = HEAP8[$16 >> 0] ^ HEAP8[$$14359 + 5 >> 0]; //@line 2010
   HEAP8[$$14160 + 6 >> 0] = HEAP8[$17 >> 0] ^ HEAP8[$$14359 + 6 >> 0]; //@line 2016
   HEAP8[$$14160 + 7 >> 0] = HEAP8[$18 >> 0] ^ HEAP8[$$14359 + 7 >> 0]; //@line 2022
   HEAP8[$$14160 + 8 >> 0] = HEAP8[$19 >> 0] ^ HEAP8[$$14359 + 8 >> 0]; //@line 2028
   HEAP8[$$14160 + 9 >> 0] = HEAP8[$20 >> 0] ^ HEAP8[$$14359 + 9 >> 0]; //@line 2034
   HEAP8[$$14160 + 10 >> 0] = HEAP8[$21 >> 0] ^ HEAP8[$$14359 + 10 >> 0]; //@line 2040
   HEAP8[$$14160 + 11 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$$14359 + 11 >> 0]; //@line 2046
   HEAP8[$$14160 + 12 >> 0] = HEAP8[$23 >> 0] ^ HEAP8[$$14359 + 12 >> 0]; //@line 2052
   HEAP8[$$14160 + 13 >> 0] = HEAP8[$24 >> 0] ^ HEAP8[$$14359 + 13 >> 0]; //@line 2058
   HEAP8[$$14160 + 14 >> 0] = HEAP8[$25 >> 0] ^ HEAP8[$$14359 + 14 >> 0]; //@line 2064
   HEAP8[$$14160 + 15 >> 0] = HEAP8[$26 >> 0] ^ HEAP8[$$14359 + 15 >> 0]; //@line 2070
   _mbedtls_internal_aes_decrypt($0, $$14160, $$14160) | 0; //@line 2071
   dest = $3; //@line 2072
   src = $$14160; //@line 2072
   stop = dest + 16 | 0; //@line 2072
   do {
    HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 2072
    dest = dest + 1 | 0; //@line 2072
    src = src + 1 | 0; //@line 2072
   } while ((dest | 0) < (stop | 0));
   $$14658 = $$14658 + -16 | 0; //@line 2075
   if (!$$14658) {
    $$044 = 0; //@line 2078
    break;
   } else {
    $$14160 = $$14160 + 16 | 0; //@line 2081
    $$14359 = $$14359 + 16 | 0; //@line 2081
   }
  }
  STACKTOP = sp; //@line 2084
  return $$044 | 0; //@line 2084
 }
 return 0; //@line 2086
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_243($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15195
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15197
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15199
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15201
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15203
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15205
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15207
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15209
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15215
 $$pre$i$i = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 15216
 HEAP32[HEAP32[$0 + 36 >> 2] >> 2] = $$pre$i$i; //@line 15218
 if ($$pre$i$i | 0) {
  $24 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 15222
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 15223
  FUNCTION_TABLE_vi[$24 & 1023]($10); //@line 15224
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 184; //@line 15227
   $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 15228
   HEAP32[$25 >> 2] = $2; //@line 15229
   $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 15230
   HEAP32[$26 >> 2] = $4; //@line 15231
   $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 15232
   HEAP32[$27 >> 2] = $6; //@line 15233
   $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 15234
   HEAP32[$28 >> 2] = $8; //@line 15235
   $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 15236
   HEAP32[$29 >> 2] = $10; //@line 15237
   $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 15238
   HEAP32[$30 >> 2] = $12; //@line 15239
   $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 15240
   HEAP32[$31 >> 2] = $14; //@line 15241
   $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 15242
   HEAP32[$32 >> 2] = $20; //@line 15243
   sp = STACKTOP; //@line 15244
   return;
  }
  ___async_unwind = 0; //@line 15247
  HEAP32[$ReallocAsyncCtx3 >> 2] = 184; //@line 15248
  $25 = $ReallocAsyncCtx3 + 4 | 0; //@line 15249
  HEAP32[$25 >> 2] = $2; //@line 15250
  $26 = $ReallocAsyncCtx3 + 8 | 0; //@line 15251
  HEAP32[$26 >> 2] = $4; //@line 15252
  $27 = $ReallocAsyncCtx3 + 12 | 0; //@line 15253
  HEAP32[$27 >> 2] = $6; //@line 15254
  $28 = $ReallocAsyncCtx3 + 16 | 0; //@line 15255
  HEAP32[$28 >> 2] = $8; //@line 15256
  $29 = $ReallocAsyncCtx3 + 20 | 0; //@line 15257
  HEAP32[$29 >> 2] = $10; //@line 15258
  $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 15259
  HEAP32[$30 >> 2] = $12; //@line 15260
  $31 = $ReallocAsyncCtx3 + 28 | 0; //@line 15261
  HEAP32[$31 >> 2] = $14; //@line 15262
  $32 = $ReallocAsyncCtx3 + 32 | 0; //@line 15263
  HEAP32[$32 >> 2] = $20; //@line 15264
  sp = STACKTOP; //@line 15265
  return;
 }
 $33 = $12 + 12 | 0; //@line 15268
 HEAP32[$12 >> 2] = 6; //@line 15269
 HEAP32[$12 + 4 >> 2] = 0; //@line 15271
 HEAP32[$12 + 8 >> 2] = $4; //@line 15273
 HEAP32[$33 >> 2] = 836; //@line 15274
 $34 = $4 + 2416 | 0; //@line 15275
 if (($34 | 0) == ($12 | 0)) {
  $63 = HEAP32[211] | 0; //@line 15279
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 15280
  FUNCTION_TABLE_vi[$63 & 1023]($12); //@line 15281
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15284
   $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 15285
   HEAP32[$64 >> 2] = $2; //@line 15286
   $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 15287
   HEAP32[$65 >> 2] = $4; //@line 15288
   $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 15289
   HEAP32[$66 >> 2] = $6; //@line 15290
   $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 15291
   HEAP32[$67 >> 2] = $8; //@line 15292
   $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 15293
   HEAP32[$68 >> 2] = $14; //@line 15294
   $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 15295
   HEAP32[$69 >> 2] = $12; //@line 15296
   $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 15297
   HEAP32[$70 >> 2] = $20; //@line 15298
   sp = STACKTOP; //@line 15299
   return;
  }
  ___async_unwind = 0; //@line 15302
  HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15303
  $64 = $ReallocAsyncCtx6 + 4 | 0; //@line 15304
  HEAP32[$64 >> 2] = $2; //@line 15305
  $65 = $ReallocAsyncCtx6 + 8 | 0; //@line 15306
  HEAP32[$65 >> 2] = $4; //@line 15307
  $66 = $ReallocAsyncCtx6 + 12 | 0; //@line 15308
  HEAP32[$66 >> 2] = $6; //@line 15309
  $67 = $ReallocAsyncCtx6 + 16 | 0; //@line 15310
  HEAP32[$67 >> 2] = $8; //@line 15311
  $68 = $ReallocAsyncCtx6 + 20 | 0; //@line 15312
  HEAP32[$68 >> 2] = $14; //@line 15313
  $69 = $ReallocAsyncCtx6 + 24 | 0; //@line 15314
  HEAP32[$69 >> 2] = $12; //@line 15315
  $70 = $ReallocAsyncCtx6 + 28 | 0; //@line 15316
  HEAP32[$70 >> 2] = $20; //@line 15317
  sp = STACKTOP; //@line 15318
  return;
 }
 $36 = $4 + 2428 | 0; //@line 15321
 $37 = HEAP32[$36 >> 2] | 0; //@line 15322
 if (!$37) {
  $52 = HEAP32[210] | 0; //@line 15326
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 15327
  FUNCTION_TABLE_vii[$52 & 15]($34, $12); //@line 15328
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15331
   $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 15332
   HEAP32[$53 >> 2] = $2; //@line 15333
   $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 15334
   HEAP32[$54 >> 2] = $4; //@line 15335
   $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 15336
   HEAP32[$55 >> 2] = $6; //@line 15337
   $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 15338
   HEAP32[$56 >> 2] = $8; //@line 15339
   $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 15340
   HEAP32[$57 >> 2] = $33; //@line 15341
   $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 15342
   HEAP32[$58 >> 2] = $36; //@line 15343
   $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 15344
   HEAP32[$59 >> 2] = $14; //@line 15345
   $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 15346
   HEAP32[$60 >> 2] = $12; //@line 15347
   $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 15348
   HEAP32[$61 >> 2] = $20; //@line 15349
   sp = STACKTOP; //@line 15350
   return;
  }
  ___async_unwind = 0; //@line 15353
  HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15354
  $53 = $ReallocAsyncCtx5 + 4 | 0; //@line 15355
  HEAP32[$53 >> 2] = $2; //@line 15356
  $54 = $ReallocAsyncCtx5 + 8 | 0; //@line 15357
  HEAP32[$54 >> 2] = $4; //@line 15358
  $55 = $ReallocAsyncCtx5 + 12 | 0; //@line 15359
  HEAP32[$55 >> 2] = $6; //@line 15360
  $56 = $ReallocAsyncCtx5 + 16 | 0; //@line 15361
  HEAP32[$56 >> 2] = $8; //@line 15362
  $57 = $ReallocAsyncCtx5 + 20 | 0; //@line 15363
  HEAP32[$57 >> 2] = $33; //@line 15364
  $58 = $ReallocAsyncCtx5 + 24 | 0; //@line 15365
  HEAP32[$58 >> 2] = $36; //@line 15366
  $59 = $ReallocAsyncCtx5 + 28 | 0; //@line 15367
  HEAP32[$59 >> 2] = $14; //@line 15368
  $60 = $ReallocAsyncCtx5 + 32 | 0; //@line 15369
  HEAP32[$60 >> 2] = $12; //@line 15370
  $61 = $ReallocAsyncCtx5 + 36 | 0; //@line 15371
  HEAP32[$61 >> 2] = $20; //@line 15372
  sp = STACKTOP; //@line 15373
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 15377
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 15378
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 15379
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 15382
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 15383
   HEAP32[$41 >> 2] = $2; //@line 15384
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 15385
   HEAP32[$42 >> 2] = $4; //@line 15386
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 15387
   HEAP32[$43 >> 2] = $6; //@line 15388
   $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 15389
   HEAP32[$44 >> 2] = $8; //@line 15390
   $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 15391
   HEAP32[$45 >> 2] = $36; //@line 15392
   $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 15393
   HEAP32[$46 >> 2] = $34; //@line 15394
   $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 15395
   HEAP32[$47 >> 2] = $12; //@line 15396
   $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 15397
   HEAP32[$48 >> 2] = $33; //@line 15398
   $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 15399
   HEAP32[$49 >> 2] = $14; //@line 15400
   $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 15401
   HEAP32[$50 >> 2] = $20; //@line 15402
   sp = STACKTOP; //@line 15403
   return;
  }
  ___async_unwind = 0; //@line 15406
  HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 15407
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 15408
  HEAP32[$41 >> 2] = $2; //@line 15409
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 15410
  HEAP32[$42 >> 2] = $4; //@line 15411
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 15412
  HEAP32[$43 >> 2] = $6; //@line 15413
  $44 = $ReallocAsyncCtx4 + 16 | 0; //@line 15414
  HEAP32[$44 >> 2] = $8; //@line 15415
  $45 = $ReallocAsyncCtx4 + 20 | 0; //@line 15416
  HEAP32[$45 >> 2] = $36; //@line 15417
  $46 = $ReallocAsyncCtx4 + 24 | 0; //@line 15418
  HEAP32[$46 >> 2] = $34; //@line 15419
  $47 = $ReallocAsyncCtx4 + 28 | 0; //@line 15420
  HEAP32[$47 >> 2] = $12; //@line 15421
  $48 = $ReallocAsyncCtx4 + 32 | 0; //@line 15422
  HEAP32[$48 >> 2] = $33; //@line 15423
  $49 = $ReallocAsyncCtx4 + 36 | 0; //@line 15424
  HEAP32[$49 >> 2] = $14; //@line 15425
  $50 = $ReallocAsyncCtx4 + 40 | 0; //@line 15426
  HEAP32[$50 >> 2] = $20; //@line 15427
  sp = STACKTOP; //@line 15428
  return;
 }
}
function _schedule_interrupt($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $104 = 0, $109 = 0, $11 = 0, $112 = 0, $114 = 0, $117 = 0, $118 = 0, $120 = 0, $123 = 0, $131 = 0, $132 = 0, $133 = 0, $135 = 0, $137 = 0, $14 = 0, $142 = 0, $149 = 0, $153 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $170 = 0, $171 = 0, $174 = 0, $176 = 0, $178 = 0, $184 = 0, $185 = 0, $189 = 0, $19 = 0, $197 = 0, $2 = 0, $205 = 0, $208 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $74 = 0, $75 = 0, $76 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx22 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5869
 $1 = $0 + 4 | 0; //@line 5870
 $2 = HEAP32[$1 >> 2] | 0; //@line 5871
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 5874
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5875
 $6 = FUNCTION_TABLE_i[$5 & 7]() | 0; //@line 5876
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 625; //@line 5879
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 5881
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5883
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 5885
  sp = STACKTOP; //@line 5886
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5889
 $10 = HEAP32[$1 >> 2] | 0; //@line 5890
 $11 = $10 + 32 | 0; //@line 5891
 if (($6 | 0) != (HEAP32[$11 >> 2] | 0)) {
  $14 = $2 + 32 | 0; //@line 5895
  $19 = $6 - (HEAP32[$14 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 5900
  HEAP32[$14 >> 2] = $6; //@line 5901
  $21 = HEAP32[$2 + 8 >> 2] | 0; //@line 5903
  do {
   if (($21 | 0) == 1e6) {
    $100 = $19; //@line 5907
    $101 = 0; //@line 5907
   } else {
    $24 = HEAP8[$2 + 57 >> 0] | 0; //@line 5910
    $26 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 5912
    $27 = tempRet0; //@line 5913
    if (!($24 << 24 >> 24)) {
     $61 = ___udivdi3($26 | 0, $27 | 0, $21 | 0, 0) | 0; //@line 5915
     $62 = tempRet0; //@line 5916
     $63 = ___muldi3($61 | 0, $62 | 0, $21 | 0, 0) | 0; //@line 5917
     $65 = _i64Subtract($26 | 0, $27 | 0, $63 | 0, tempRet0 | 0) | 0; //@line 5919
     $67 = $2 + 40 | 0; //@line 5921
     $68 = $67; //@line 5922
     $74 = _i64Add($65 | 0, tempRet0 | 0, HEAP32[$68 >> 2] | 0, HEAP32[$68 + 4 >> 2] | 0) | 0; //@line 5928
     $75 = tempRet0; //@line 5929
     $76 = $67; //@line 5930
     HEAP32[$76 >> 2] = $74; //@line 5932
     HEAP32[$76 + 4 >> 2] = $75; //@line 5935
     if ($75 >>> 0 < 0 | ($75 | 0) == 0 & $74 >>> 0 < $21 >>> 0) {
      $100 = $61; //@line 5942
      $101 = $62; //@line 5942
      break;
     }
     $85 = _i64Add($61 | 0, $62 | 0, 1, 0) | 0; //@line 5945
     $86 = tempRet0; //@line 5946
     $87 = _i64Subtract($74 | 0, $75 | 0, $21 | 0, 0) | 0; //@line 5947
     $89 = $67; //@line 5949
     HEAP32[$89 >> 2] = $87; //@line 5951
     HEAP32[$89 + 4 >> 2] = tempRet0; //@line 5954
     $100 = $85; //@line 5955
     $101 = $86; //@line 5955
     break;
    } else {
     $28 = $24 & 255; //@line 5958
     $29 = _bitshift64Lshr($26 | 0, $27 | 0, $28 | 0) | 0; //@line 5959
     $30 = tempRet0; //@line 5960
     $31 = _bitshift64Shl($29 | 0, $30 | 0, $28 | 0) | 0; //@line 5961
     $33 = _i64Subtract($26 | 0, $27 | 0, $31 | 0, tempRet0 | 0) | 0; //@line 5963
     $35 = $2 + 40 | 0; //@line 5965
     $36 = $35; //@line 5966
     $42 = _i64Add(HEAP32[$36 >> 2] | 0, HEAP32[$36 + 4 >> 2] | 0, $33 | 0, tempRet0 | 0) | 0; //@line 5972
     $43 = tempRet0; //@line 5973
     $44 = $35; //@line 5974
     HEAP32[$44 >> 2] = $42; //@line 5976
     HEAP32[$44 + 4 >> 2] = $43; //@line 5979
     if ($43 >>> 0 < 0 | ($43 | 0) == 0 & $42 >>> 0 < $21 >>> 0) {
      $100 = $29; //@line 5986
      $101 = $30; //@line 5986
      break;
     }
     $53 = _i64Add($29 | 0, $30 | 0, 1, 0) | 0; //@line 5989
     $54 = tempRet0; //@line 5990
     $55 = _i64Subtract($42 | 0, $43 | 0, $21 | 0, 0) | 0; //@line 5991
     $57 = $35; //@line 5993
     HEAP32[$57 >> 2] = $55; //@line 5995
     HEAP32[$57 + 4 >> 2] = tempRet0; //@line 5998
     $100 = $53; //@line 5999
     $101 = $54; //@line 5999
     break;
    }
   }
  } while (0);
  $93 = $2 + 48 | 0; //@line 6004
  $94 = $93; //@line 6005
  $102 = _i64Add(HEAP32[$94 >> 2] | 0, HEAP32[$94 + 4 >> 2] | 0, $100 | 0, $101 | 0) | 0; //@line 6011
  $104 = $93; //@line 6013
  HEAP32[$104 >> 2] = $102; //@line 6015
  HEAP32[$104 + 4 >> 2] = tempRet0; //@line 6018
 }
 $109 = HEAP32[$10 + 4 >> 2] | 0; //@line 6021
 if (!$109) {
  $205 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 6031
  $208 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 6034
  $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6035
  FUNCTION_TABLE_vi[$208 & 1023]($205); //@line 6036
  if (___async) {
   HEAP32[$AsyncCtx22 >> 2] = 631; //@line 6039
   sp = STACKTOP; //@line 6040
   return;
  } else {
   _emscripten_free_async_context($AsyncCtx22 | 0); //@line 6043
   return;
  }
 }
 $112 = $10 + 48 | 0; //@line 6048
 $114 = HEAP32[$112 >> 2] | 0; //@line 6050
 $117 = HEAP32[$112 + 4 >> 2] | 0; //@line 6053
 $118 = $109; //@line 6054
 $120 = HEAP32[$118 >> 2] | 0; //@line 6056
 $123 = HEAP32[$118 + 4 >> 2] | 0; //@line 6059
 if (!($123 >>> 0 > $117 >>> 0 | ($123 | 0) == ($117 | 0) & $120 >>> 0 > $114 >>> 0)) {
  $131 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6068
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6069
  FUNCTION_TABLE_v[$131 & 15](); //@line 6070
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 626; //@line 6073
   sp = STACKTOP; //@line 6074
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6077
  return;
 }
 $132 = _i64Subtract($120 | 0, $123 | 0, $114 | 0, $117 | 0) | 0; //@line 6080
 $133 = tempRet0; //@line 6081
 $135 = HEAP32[$10 + 16 >> 2] | 0; //@line 6083
 $137 = $10 + 24 | 0; //@line 6085
 $142 = HEAP32[$137 + 4 >> 2] | 0; //@line 6090
 do {
  if ($133 >>> 0 > $142 >>> 0 | (($133 | 0) == ($142 | 0) ? $132 >>> 0 > (HEAP32[$137 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $135; //@line 6098
  } else {
   $149 = HEAP32[$10 + 8 >> 2] | 0; //@line 6101
   if (($149 | 0) == 1e6) {
    $$0$i = $135 >>> 0 < $132 >>> 0 ? $135 : $132; //@line 6106
    break;
   }
   $153 = HEAP8[$10 + 57 >> 0] | 0; //@line 6110
   if (!($153 << 24 >> 24)) {
    $161 = ___muldi3($132 | 0, $133 | 0, $149 | 0, 0) | 0; //@line 6113
    $163 = ___udivdi3($161 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6115
    $$0$i = $135 >>> 0 < $163 >>> 0 ? $135 : $163; //@line 6119
    break;
   } else {
    $156 = _bitshift64Shl($132 | 0, $133 | 0, $153 & 255 | 0) | 0; //@line 6123
    $158 = ___udivdi3($156 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 6125
    $$0$i = $135 >>> 0 < $158 >>> 0 ? $135 : $158; //@line 6129
    break;
   }
  }
 } while (0);
 $170 = (HEAP32[$11 >> 2] | 0) + $$0$i & HEAP32[$10 + 12 >> 2]; //@line 6138
 $171 = $2 + 32 | 0; //@line 6139
 $174 = HEAP32[$0 >> 2] | 0; //@line 6142
 if (($170 | 0) == (HEAP32[$171 >> 2] | 0)) {
  $176 = HEAP32[$174 + 20 >> 2] | 0; //@line 6145
  $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6146
  FUNCTION_TABLE_v[$176 & 15](); //@line 6147
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 627; //@line 6150
   sp = STACKTOP; //@line 6151
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6154
  return;
 }
 $178 = HEAP32[$174 + 16 >> 2] | 0; //@line 6158
 $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6159
 FUNCTION_TABLE_vi[$178 & 1023]($170); //@line 6160
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 628; //@line 6163
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6165
  HEAP32[$AsyncCtx11 + 8 >> 2] = $171; //@line 6167
  HEAP32[$AsyncCtx11 + 12 >> 2] = $170; //@line 6169
  sp = STACKTOP; //@line 6170
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6173
 $184 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6176
 $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6177
 $185 = FUNCTION_TABLE_i[$184 & 7]() | 0; //@line 6178
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 629; //@line 6181
  HEAP32[$AsyncCtx14 + 4 >> 2] = $171; //@line 6183
  HEAP32[$AsyncCtx14 + 8 >> 2] = $170; //@line 6185
  HEAP32[$AsyncCtx14 + 12 >> 2] = $0; //@line 6187
  sp = STACKTOP; //@line 6188
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 6191
 $189 = HEAP32[$171 >> 2] | 0; //@line 6192
 if ($170 >>> 0 > $189 >>> 0) {
  if (!($185 >>> 0 >= $170 >>> 0 | $185 >>> 0 < $189 >>> 0)) {
   return;
  }
 } else {
  if (!($185 >>> 0 >= $170 >>> 0 & $185 >>> 0 < $189 >>> 0)) {
   return;
  }
 }
 $197 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 6211
 $AsyncCtx18 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6212
 FUNCTION_TABLE_v[$197 & 15](); //@line 6213
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 630; //@line 6216
  sp = STACKTOP; //@line 6217
  return;
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 6220
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $26 = 0, $29 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $71 = 0, $76 = 0, $77 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 7674
 STACKTOP = STACKTOP + 32 | 0; //@line 7675
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7675
 $vararg_buffer = sp; //@line 7676
 $1 = sp + 16 | 0; //@line 7677
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 0; //@line 7681
 $6 = __ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0; //@line 7682
 if ($5) {
  HEAP32[$0 + 2552 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 7687
  $10 = $0 + 2512 | 0; //@line 7688
  $11 = HEAP32[$10 >> 2] | 0; //@line 7689
  do {
   if ($11 | 0) {
    $15 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7695
    $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 7697
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7698
    FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2500 | 0); //@line 7699
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 243; //@line 7702
     HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 7704
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7706
     HEAP32[$AsyncCtx + 12 >> 2] = $15; //@line 7708
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 7710
     sp = STACKTOP; //@line 7711
     STACKTOP = sp; //@line 7712
     return;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7714
    $22 = $1 + 12 | 0; //@line 7716
    HEAP32[$22 >> 2] = HEAP32[$10 >> 2]; //@line 7717
    $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7718
    $23 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($15, $1, 2) | 0; //@line 7719
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 244; //@line 7722
     HEAP32[$AsyncCtx25 + 4 >> 2] = $22; //@line 7724
     HEAP32[$AsyncCtx25 + 8 >> 2] = $1; //@line 7726
     sp = STACKTOP; //@line 7727
     STACKTOP = sp; //@line 7728
     return;
    }
    _emscripten_free_async_context($AsyncCtx25 | 0); //@line 7730
    $26 = HEAP32[$22 >> 2] | 0; //@line 7731
    do {
     if ($26 | 0) {
      $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 7736
      $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7737
      FUNCTION_TABLE_vi[$29 & 1023]($1); //@line 7738
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 245; //@line 7741
       HEAP32[$AsyncCtx2 + 4 >> 2] = $23; //@line 7743
       HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 7745
       sp = STACKTOP; //@line 7746
       STACKTOP = sp; //@line 7747
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7749
       break;
      }
     }
    } while (0);
    if (!$23) {
     $AsyncCtx37 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7756
     _mbed_assert_internal(11914, 11923, 778); //@line 7757
     if (___async) {
      HEAP32[$AsyncCtx37 >> 2] = 246; //@line 7760
      HEAP32[$AsyncCtx37 + 4 >> 2] = $1; //@line 7762
      sp = STACKTOP; //@line 7763
      STACKTOP = sp; //@line 7764
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx37 | 0); //@line 7766
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7772
  return;
 }
 HEAP32[$vararg_buffer >> 2] = HEAP32[$6 + 4 >> 2]; //@line 7776
 _mbed_tracef(2, 12021, 12161, $vararg_buffer); //@line 7777
 if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 4 >> 2] | 0) == 2) {
  $40 = $0 + 2512 | 0; //@line 7783
  $41 = HEAP32[$40 >> 2] | 0; //@line 7784
  do {
   if ($41 | 0) {
    $45 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7790
    $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 7792
    $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7793
    FUNCTION_TABLE_vii[$47 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 7794
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 247; //@line 7797
     HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 7799
     HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 7801
     HEAP32[$AsyncCtx5 + 12 >> 2] = $45; //@line 7803
     HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 7805
     sp = STACKTOP; //@line 7806
     STACKTOP = sp; //@line 7807
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7809
    $52 = $vararg_buffer + 12 | 0; //@line 7811
    HEAP32[$52 >> 2] = HEAP32[$40 >> 2]; //@line 7812
    $AsyncCtx22 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7813
    $53 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($45, $vararg_buffer, 3) | 0; //@line 7814
    if (___async) {
     HEAP32[$AsyncCtx22 >> 2] = 248; //@line 7817
     HEAP32[$AsyncCtx22 + 4 >> 2] = $52; //@line 7819
     HEAP32[$AsyncCtx22 + 8 >> 2] = $vararg_buffer; //@line 7821
     sp = STACKTOP; //@line 7822
     STACKTOP = sp; //@line 7823
     return;
    }
    _emscripten_free_async_context($AsyncCtx22 | 0); //@line 7825
    $56 = HEAP32[$52 >> 2] | 0; //@line 7826
    do {
     if ($56 | 0) {
      $59 = HEAP32[$56 + 8 >> 2] | 0; //@line 7831
      $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7832
      FUNCTION_TABLE_vi[$59 & 1023]($vararg_buffer); //@line 7833
      if (___async) {
       HEAP32[$AsyncCtx9 >> 2] = 249; //@line 7836
       HEAP32[$AsyncCtx9 + 4 >> 2] = $53; //@line 7838
       HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 7840
       sp = STACKTOP; //@line 7841
       STACKTOP = sp; //@line 7842
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx9 | 0); //@line 7844
       break;
      }
     }
    } while (0);
    if (!$53) {
     $AsyncCtx33 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7851
     _mbed_assert_internal(11914, 11923, 778); //@line 7852
     if (___async) {
      HEAP32[$AsyncCtx33 >> 2] = 250; //@line 7855
      HEAP32[$AsyncCtx33 + 4 >> 2] = $vararg_buffer; //@line 7857
      sp = STACKTOP; //@line 7858
      STACKTOP = sp; //@line 7859
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx33 | 0); //@line 7861
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7867
  return;
 } else {
  $64 = $0 + 2512 | 0; //@line 7869
  $65 = HEAP32[$64 >> 2] | 0; //@line 7870
  do {
   if ($65 | 0) {
    $69 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7876
    $71 = HEAP32[$65 + 4 >> 2] | 0; //@line 7878
    $AsyncCtx12 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7879
    FUNCTION_TABLE_vii[$71 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 7880
    if (___async) {
     HEAP32[$AsyncCtx12 >> 2] = 251; //@line 7883
     HEAP32[$AsyncCtx12 + 4 >> 2] = $64; //@line 7885
     HEAP32[$AsyncCtx12 + 8 >> 2] = $vararg_buffer; //@line 7887
     HEAP32[$AsyncCtx12 + 12 >> 2] = $69; //@line 7889
     HEAP32[$AsyncCtx12 + 16 >> 2] = $vararg_buffer; //@line 7891
     sp = STACKTOP; //@line 7892
     STACKTOP = sp; //@line 7893
     return;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7895
    $76 = $vararg_buffer + 12 | 0; //@line 7897
    HEAP32[$76 >> 2] = HEAP32[$64 >> 2]; //@line 7898
    $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7899
    $77 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($69, $vararg_buffer, 4) | 0; //@line 7900
    if (___async) {
     HEAP32[$AsyncCtx19 >> 2] = 252; //@line 7903
     HEAP32[$AsyncCtx19 + 4 >> 2] = $76; //@line 7905
     HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer; //@line 7907
     sp = STACKTOP; //@line 7908
     STACKTOP = sp; //@line 7909
     return;
    }
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7911
    $80 = HEAP32[$76 >> 2] | 0; //@line 7912
    do {
     if ($80 | 0) {
      $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 7917
      $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7918
      FUNCTION_TABLE_vi[$83 & 1023]($vararg_buffer); //@line 7919
      if (___async) {
       HEAP32[$AsyncCtx16 >> 2] = 253; //@line 7922
       HEAP32[$AsyncCtx16 + 4 >> 2] = $77; //@line 7924
       HEAP32[$AsyncCtx16 + 8 >> 2] = $vararg_buffer; //@line 7926
       sp = STACKTOP; //@line 7927
       STACKTOP = sp; //@line 7928
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx16 | 0); //@line 7930
       break;
      }
     }
    } while (0);
    if (!$77) {
     $AsyncCtx29 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7937
     _mbed_assert_internal(11914, 11923, 778); //@line 7938
     if (___async) {
      HEAP32[$AsyncCtx29 >> 2] = 254; //@line 7941
      HEAP32[$AsyncCtx29 + 4 >> 2] = $vararg_buffer; //@line 7943
      sp = STACKTOP; //@line 7944
      STACKTOP = sp; //@line 7945
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx29 | 0); //@line 7947
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 7953
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_245($0) {
 $0 = $0 | 0;
 var $$pre123 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15625
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15627
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15629
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15631
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15633
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15635
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15637
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15639
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15641
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15643
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15645
 $$pre123 = HEAP32[$16 >> 2] | 0; //@line 15646
 if ($$pre123 | 0) {
  $23 = HEAP32[$$pre123 + 4 >> 2] | 0; //@line 15650
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 15651
  FUNCTION_TABLE_vii[$23 & 15]($12, $14); //@line 15652
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15655
   $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 15656
   HEAP32[$24 >> 2] = $2; //@line 15657
   $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 15658
   HEAP32[$25 >> 2] = $4; //@line 15659
   $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 15660
   HEAP32[$26 >> 2] = $6; //@line 15661
   $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 15662
   HEAP32[$27 >> 2] = $8; //@line 15663
   $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 15664
   HEAP32[$28 >> 2] = $16; //@line 15665
   $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 15666
   HEAP32[$29 >> 2] = $10; //@line 15667
   $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 15668
   HEAP32[$30 >> 2] = $18; //@line 15669
   $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 15670
   HEAP32[$31 >> 2] = $14; //@line 15671
   $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 15672
   HEAP32[$32 >> 2] = $20; //@line 15673
   sp = STACKTOP; //@line 15674
   return;
  }
  ___async_unwind = 0; //@line 15677
  HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15678
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 15679
  HEAP32[$24 >> 2] = $2; //@line 15680
  $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 15681
  HEAP32[$25 >> 2] = $4; //@line 15682
  $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 15683
  HEAP32[$26 >> 2] = $6; //@line 15684
  $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 15685
  HEAP32[$27 >> 2] = $8; //@line 15686
  $28 = $ReallocAsyncCtx5 + 20 | 0; //@line 15687
  HEAP32[$28 >> 2] = $16; //@line 15688
  $29 = $ReallocAsyncCtx5 + 24 | 0; //@line 15689
  HEAP32[$29 >> 2] = $10; //@line 15690
  $30 = $ReallocAsyncCtx5 + 28 | 0; //@line 15691
  HEAP32[$30 >> 2] = $18; //@line 15692
  $31 = $ReallocAsyncCtx5 + 32 | 0; //@line 15693
  HEAP32[$31 >> 2] = $14; //@line 15694
  $32 = $ReallocAsyncCtx5 + 36 | 0; //@line 15695
  HEAP32[$32 >> 2] = $20; //@line 15696
  sp = STACKTOP; //@line 15697
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 15700
 $33 = $20 + 12 | 0; //@line 15701
 HEAP32[$20 >> 2] = 188; //@line 15702
 HEAP32[$20 + 4 >> 2] = 0; //@line 15704
 HEAP32[$20 + 8 >> 2] = $4; //@line 15706
 HEAP32[$33 >> 2] = 824; //@line 15707
 $34 = $4 + 2448 | 0; //@line 15708
 if (($34 | 0) == ($20 | 0)) {
  $61 = HEAP32[208] | 0; //@line 15712
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 15713
  FUNCTION_TABLE_vi[$61 & 1023]($20); //@line 15714
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 15717
   $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 15718
   HEAP32[$62 >> 2] = $20; //@line 15719
   $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 15720
   HEAP32[$63 >> 2] = $2; //@line 15721
   $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 15722
   HEAP32[$64 >> 2] = $4; //@line 15723
   $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 15724
   HEAP32[$65 >> 2] = $6; //@line 15725
   $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 15726
   HEAP32[$66 >> 2] = $8; //@line 15727
   $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 15728
   HEAP32[$67 >> 2] = $18; //@line 15729
   sp = STACKTOP; //@line 15730
   return;
  }
  ___async_unwind = 0; //@line 15733
  HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 15734
  $62 = $ReallocAsyncCtx9 + 4 | 0; //@line 15735
  HEAP32[$62 >> 2] = $20; //@line 15736
  $63 = $ReallocAsyncCtx9 + 8 | 0; //@line 15737
  HEAP32[$63 >> 2] = $2; //@line 15738
  $64 = $ReallocAsyncCtx9 + 12 | 0; //@line 15739
  HEAP32[$64 >> 2] = $4; //@line 15740
  $65 = $ReallocAsyncCtx9 + 16 | 0; //@line 15741
  HEAP32[$65 >> 2] = $6; //@line 15742
  $66 = $ReallocAsyncCtx9 + 20 | 0; //@line 15743
  HEAP32[$66 >> 2] = $8; //@line 15744
  $67 = $ReallocAsyncCtx9 + 24 | 0; //@line 15745
  HEAP32[$67 >> 2] = $18; //@line 15746
  sp = STACKTOP; //@line 15747
  return;
 }
 $36 = $4 + 2460 | 0; //@line 15750
 $37 = HEAP32[$36 >> 2] | 0; //@line 15751
 if (!$37) {
  $51 = HEAP32[207] | 0; //@line 15755
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 15756
  FUNCTION_TABLE_vii[$51 & 15]($34, $20); //@line 15757
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 15760
   $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 15761
   HEAP32[$52 >> 2] = $20; //@line 15762
   $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 15763
   HEAP32[$53 >> 2] = $2; //@line 15764
   $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 15765
   HEAP32[$54 >> 2] = $4; //@line 15766
   $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 15767
   HEAP32[$55 >> 2] = $33; //@line 15768
   $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 15769
   HEAP32[$56 >> 2] = $36; //@line 15770
   $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 15771
   HEAP32[$57 >> 2] = $6; //@line 15772
   $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 15773
   HEAP32[$58 >> 2] = $8; //@line 15774
   $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 15775
   HEAP32[$59 >> 2] = $18; //@line 15776
   sp = STACKTOP; //@line 15777
   return;
  }
  ___async_unwind = 0; //@line 15780
  HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 15781
  $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 15782
  HEAP32[$52 >> 2] = $20; //@line 15783
  $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 15784
  HEAP32[$53 >> 2] = $2; //@line 15785
  $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 15786
  HEAP32[$54 >> 2] = $4; //@line 15787
  $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 15788
  HEAP32[$55 >> 2] = $33; //@line 15789
  $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 15790
  HEAP32[$56 >> 2] = $36; //@line 15791
  $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 15792
  HEAP32[$57 >> 2] = $6; //@line 15793
  $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 15794
  HEAP32[$58 >> 2] = $8; //@line 15795
  $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 15796
  HEAP32[$59 >> 2] = $18; //@line 15797
  sp = STACKTOP; //@line 15798
  return;
 } else {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 15802
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 15803
  FUNCTION_TABLE_vi[$40 & 1023]($34); //@line 15804
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 15807
   $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 15808
   HEAP32[$41 >> 2] = $20; //@line 15809
   $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 15810
   HEAP32[$42 >> 2] = $2; //@line 15811
   $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 15812
   HEAP32[$43 >> 2] = $4; //@line 15813
   $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 15814
   HEAP32[$44 >> 2] = $33; //@line 15815
   $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 15816
   HEAP32[$45 >> 2] = $36; //@line 15817
   $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 15818
   HEAP32[$46 >> 2] = $6; //@line 15819
   $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 15820
   HEAP32[$47 >> 2] = $8; //@line 15821
   $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 15822
   HEAP32[$48 >> 2] = $18; //@line 15823
   $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 15824
   HEAP32[$49 >> 2] = $34; //@line 15825
   sp = STACKTOP; //@line 15826
   return;
  }
  ___async_unwind = 0; //@line 15829
  HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 15830
  $41 = $ReallocAsyncCtx7 + 4 | 0; //@line 15831
  HEAP32[$41 >> 2] = $20; //@line 15832
  $42 = $ReallocAsyncCtx7 + 8 | 0; //@line 15833
  HEAP32[$42 >> 2] = $2; //@line 15834
  $43 = $ReallocAsyncCtx7 + 12 | 0; //@line 15835
  HEAP32[$43 >> 2] = $4; //@line 15836
  $44 = $ReallocAsyncCtx7 + 16 | 0; //@line 15837
  HEAP32[$44 >> 2] = $33; //@line 15838
  $45 = $ReallocAsyncCtx7 + 20 | 0; //@line 15839
  HEAP32[$45 >> 2] = $36; //@line 15840
  $46 = $ReallocAsyncCtx7 + 24 | 0; //@line 15841
  HEAP32[$46 >> 2] = $6; //@line 15842
  $47 = $ReallocAsyncCtx7 + 28 | 0; //@line 15843
  HEAP32[$47 >> 2] = $8; //@line 15844
  $48 = $ReallocAsyncCtx7 + 32 | 0; //@line 15845
  HEAP32[$48 >> 2] = $18; //@line 15846
  $49 = $ReallocAsyncCtx7 + 36 | 0; //@line 15847
  HEAP32[$49 >> 2] = $34; //@line 15848
  sp = STACKTOP; //@line 15849
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $111 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx21 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, sp = 0;
 sp = STACKTOP; //@line 8919
 STACKTOP = STACKTOP + 32 | 0; //@line 8920
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8920
 $vararg_buffer5 = sp + 24 | 0; //@line 8921
 $vararg_buffer3 = sp + 16 | 0; //@line 8922
 $vararg_buffer1 = sp + 8 | 0; //@line 8923
 $vararg_buffer = sp; //@line 8924
 $5 = $0 + 2496 | 0; //@line 8925
 HEAP32[$5 >> 2] = 5; //@line 8926
 $6 = $0 + 2904 | 0; //@line 8927
 HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -3; //@line 8930
 $AsyncCtx = _emscripten_alloc_async_context(52, sp) | 0; //@line 8931
 __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4); //@line 8932
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 291; //@line 8935
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8937
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 8939
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 8941
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 8943
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 8945
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer3; //@line 8947
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer3; //@line 8949
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer5; //@line 8951
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer5; //@line 8953
  HEAP32[$AsyncCtx + 40 >> 2] = $5; //@line 8955
  HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer1; //@line 8957
  HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer1; //@line 8959
  sp = STACKTOP; //@line 8960
  STACKTOP = sp; //@line 8961
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8963
 HEAP8[$0 + 2900 >> 0] = 0; //@line 8965
 HEAP8[$0 + 2898 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 14 >> 0] | 0; //@line 8970
 HEAP16[$0 + 2896 >> 1] = HEAP16[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 24 >> 1] | 0; //@line 8975
 HEAP8[$0 + 2899 >> 0] = HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 26 >> 0] | 0; //@line 8980
 do {
  if (HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac25post_process_mlme_requestEv($0); //@line 8986
   $AsyncCtx13 = _emscripten_alloc_async_context(52, sp) | 0; //@line 8987
   __ZN12LoRaWANStack20mlme_confirm_handlerEv($0); //@line 8988
   if (___async) {
    HEAP32[$AsyncCtx13 >> 2] = 292; //@line 8991
    HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 8993
    HEAP32[$AsyncCtx13 + 8 >> 2] = $vararg_buffer; //@line 8995
    HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer; //@line 8997
    HEAP32[$AsyncCtx13 + 16 >> 2] = $6; //@line 8999
    HEAP32[$AsyncCtx13 + 20 >> 2] = $0; //@line 9001
    HEAP32[$AsyncCtx13 + 24 >> 2] = $vararg_buffer3; //@line 9003
    HEAP32[$AsyncCtx13 + 28 >> 2] = $vararg_buffer3; //@line 9005
    HEAP32[$AsyncCtx13 + 32 >> 2] = $vararg_buffer5; //@line 9007
    HEAP32[$AsyncCtx13 + 36 >> 2] = $vararg_buffer5; //@line 9009
    HEAP32[$AsyncCtx13 + 40 >> 2] = $5; //@line 9011
    HEAP32[$AsyncCtx13 + 44 >> 2] = $vararg_buffer1; //@line 9013
    HEAP32[$AsyncCtx13 + 48 >> 2] = $vararg_buffer1; //@line 9015
    sp = STACKTOP; //@line 9016
    STACKTOP = sp; //@line 9017
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx13 | 0); //@line 9019
    break;
   }
  }
 } while (0);
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  STACKTOP = sp; //@line 9026
  return;
 }
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
   if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) + 32 >> 0] | 0) {
    HEAP32[$vararg_buffer >> 2] = HEAPU8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 11 >> 0]; //@line 9042
    _mbed_tracef(16, 12021, 12232, $vararg_buffer); //@line 9043
    __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 9044
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -18 | 16; //@line 9048
    $AsyncCtx29 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9049
    __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9050
    if (___async) {
     HEAP32[$AsyncCtx29 >> 2] = 293; //@line 9053
     HEAP32[$AsyncCtx29 + 4 >> 2] = $0; //@line 9055
     HEAP32[$AsyncCtx29 + 8 >> 2] = $6; //@line 9057
     HEAP32[$AsyncCtx29 + 12 >> 2] = $0; //@line 9059
     HEAP32[$AsyncCtx29 + 16 >> 2] = $5; //@line 9061
     HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer3; //@line 9063
     HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer3; //@line 9065
     HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer5; //@line 9067
     HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer5; //@line 9069
     sp = STACKTOP; //@line 9070
     STACKTOP = sp; //@line 9071
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx29 | 0); //@line 9073
     break;
    }
   }
   if (!(__ZN7LoRaMac24continue_sending_processEv($0) | 0)) {
    _mbed_tracef(2, 12021, 12026, $vararg_buffer1); //@line 9079
    HEAP32[$6 >> 2] = HEAP32[$6 >> 2] & -18 | 1; //@line 9083
    $AsyncCtx25 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9084
    __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9085
    if (___async) {
     HEAP32[$AsyncCtx25 >> 2] = 294; //@line 9088
     HEAP32[$AsyncCtx25 + 4 >> 2] = $0; //@line 9090
     HEAP32[$AsyncCtx25 + 8 >> 2] = $6; //@line 9092
     HEAP32[$AsyncCtx25 + 12 >> 2] = $0; //@line 9094
     HEAP32[$AsyncCtx25 + 16 >> 2] = $5; //@line 9096
     HEAP32[$AsyncCtx25 + 20 >> 2] = $vararg_buffer3; //@line 9098
     HEAP32[$AsyncCtx25 + 24 >> 2] = $vararg_buffer3; //@line 9100
     HEAP32[$AsyncCtx25 + 28 >> 2] = $vararg_buffer5; //@line 9102
     HEAP32[$AsyncCtx25 + 32 >> 2] = $vararg_buffer5; //@line 9104
     sp = STACKTOP; //@line 9105
     STACKTOP = sp; //@line 9106
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx25 | 0); //@line 9108
     break;
    }
   }
  } else {
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 9113
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 16; //@line 9116
   $AsyncCtx21 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9117
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9118
   if (___async) {
    HEAP32[$AsyncCtx21 >> 2] = 295; //@line 9121
    HEAP32[$AsyncCtx21 + 4 >> 2] = $0; //@line 9123
    HEAP32[$AsyncCtx21 + 8 >> 2] = $6; //@line 9125
    HEAP32[$AsyncCtx21 + 12 >> 2] = $0; //@line 9127
    HEAP32[$AsyncCtx21 + 16 >> 2] = $5; //@line 9129
    HEAP32[$AsyncCtx21 + 20 >> 2] = $vararg_buffer3; //@line 9131
    HEAP32[$AsyncCtx21 + 24 >> 2] = $vararg_buffer3; //@line 9133
    HEAP32[$AsyncCtx21 + 28 >> 2] = $vararg_buffer5; //@line 9135
    HEAP32[$AsyncCtx21 + 32 >> 2] = $vararg_buffer5; //@line 9137
    sp = STACKTOP; //@line 9138
    STACKTOP = sp; //@line 9139
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx21 | 0); //@line 9141
    break;
   }
  }
 } while (0);
 do {
  if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($0) | 0) >> 0] | 0) {
   __ZN7LoRaMac21post_process_mcps_indEv($0); //@line 9151
   HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 2; //@line 9154
   $AsyncCtx17 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9155
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 9156
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 296; //@line 9159
    HEAP32[$AsyncCtx17 + 4 >> 2] = $6; //@line 9161
    HEAP32[$AsyncCtx17 + 8 >> 2] = $0; //@line 9163
    HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 9165
    HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 9167
    HEAP32[$AsyncCtx17 + 20 >> 2] = $vararg_buffer3; //@line 9169
    HEAP32[$AsyncCtx17 + 24 >> 2] = $vararg_buffer3; //@line 9171
    HEAP32[$AsyncCtx17 + 28 >> 2] = $vararg_buffer5; //@line 9173
    HEAP32[$AsyncCtx17 + 32 >> 2] = $vararg_buffer5; //@line 9175
    sp = STACKTOP; //@line 9176
    STACKTOP = sp; //@line 9177
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 9179
    break;
   }
  }
 } while (0);
 if (!(HEAP32[$6 >> 2] & 1)) {
  $111 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 9189
  HEAP32[$5 >> 2] = $111 ? 5 : 2; //@line 9191
 }
 do {
  if (HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) + 4 >> 0] | 0) {
   _mbed_tracef(16, 12021, 12252, $vararg_buffer3); //@line 9199
   __ZN7LoRaMac21post_process_mlme_indEv($0); //@line 9200
   _mbed_tracef(16, 12021, 12276, $vararg_buffer5); //@line 9201
   $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9202
   __ZN12LoRaWANStack23mlme_indication_handlerEv($0); //@line 9203
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 297; //@line 9206
    HEAP32[$AsyncCtx9 + 4 >> 2] = $0; //@line 9208
    sp = STACKTOP; //@line 9209
    STACKTOP = sp; //@line 9210
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9212
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 2911 >> 0] = 1; //@line 9218
 STACKTOP = sp; //@line 9219
 return;
}
function _mbedtls_cipher_update($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0121 = 0, $$0122 = 0, $$0124 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre$phi128Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $105 = 0, $114 = 0, $116 = 0, $12 = 0, $120 = 0, $17 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $33 = 0, $38 = 0, $39 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $65 = 0, $83 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2663
 if (!$0) {
  $$1 = -24832; //@line 2666
  return $$1 | 0; //@line 2667
 }
 $6 = HEAP32[$0 >> 2] | 0; //@line 2669
 if (($4 | 0) == 0 | ($6 | 0) == 0) {
  $$1 = -24832; //@line 2674
  return $$1 | 0; //@line 2675
 }
 HEAP32[$4 >> 2] = 0; //@line 2677
 $10 = HEAP32[$6 + 24 >> 2] | 0; //@line 2679
 $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 2681
 switch ($12 | 0) {
 case 1:
  {
   if (($10 | 0) != ($2 | 0)) {
    $$1 = -25216; //@line 2686
    return $$1 | 0; //@line 2687
   }
   HEAP32[$4 >> 2] = $2; //@line 2689
   $17 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 4 >> 2] | 0; //@line 2693
   $19 = HEAP32[$0 + 60 >> 2] | 0; //@line 2695
   $21 = HEAP32[$0 + 8 >> 2] | 0; //@line 2697
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2698
   $22 = FUNCTION_TABLE_iiiii[$17 & 3]($19, $21, $1, $3) | 0; //@line 2699
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 583; //@line 2702
    sp = STACKTOP; //@line 2703
    return 0; //@line 2704
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 2706
   $$1 = $22; //@line 2707
   return $$1 | 0; //@line 2708
  }
 case 6:
  {
   HEAP32[$4 >> 2] = $2; //@line 2712
   $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2714
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2715
   $25 = _mbedtls_gcm_update($24, $2, $1, $3) | 0; //@line 2716
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 584; //@line 2719
    sp = STACKTOP; //@line 2720
    return 0; //@line 2721
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 2723
   $$1 = $25; //@line 2724
   return $$1 | 0; //@line 2725
  }
 default:
  {
   if (!$10) {
    $$1 = -25472; //@line 2731
    return $$1 | 0; //@line 2732
   }
   if (($1 | 0) == ($3 | 0)) {
    if (HEAP32[$0 + 36 >> 2] | 0) {
     $$1 = -24832; //@line 2740
     return $$1 | 0; //@line 2741
    }
    if (($2 >>> 0) % ($10 >>> 0) | 0 | 0) {
     $$1 = -24832; //@line 2746
     return $$1 | 0; //@line 2747
    }
   }
   switch ($12 | 0) {
   case 2:
    {
     $33 = $0 + 8 | 0; //@line 2752
     L21 : do {
      switch (HEAP32[$33 >> 2] | 0) {
      case 0:
       {
        $38 = $0 + 36 | 0; //@line 2760
        $39 = HEAP32[$38 >> 2] | 0; //@line 2761
        $40 = $10 - $39 | 0; //@line 2762
        if (!(HEAP32[$0 + 12 >> 2] | 0)) {
         if ($40 >>> 0 > $2 >>> 0) {
          $$pre$phiZ2D = $38; //@line 2766
          $48 = $39; //@line 2766
          label = 22; //@line 2767
          break L21;
         } else {
          label = 20; //@line 2770
          break L21;
         }
        } else {
         if ($40 >>> 0 < $2 >>> 0) {
          label = 20; //@line 2776
          break L21;
         } else {
          $$pre$phiZ2D = $38; //@line 2779
          $48 = $39; //@line 2779
          label = 22; //@line 2780
          break L21;
         }
        }
        break;
       }
      case 1:
       {
        $43 = $0 + 36 | 0; //@line 2787
        $44 = HEAP32[$43 >> 2] | 0; //@line 2788
        if (($10 - $44 | 0) >>> 0 > $2 >>> 0) {
         $$pre$phiZ2D = $43; //@line 2792
         $48 = $44; //@line 2792
         label = 22; //@line 2793
        } else {
         $$pre$phi128Z2D = $43; //@line 2795
         $52 = $44; //@line 2795
        }
        break;
       }
      default:
       {
        label = 20; //@line 2800
       }
      }
     } while (0);
     if ((label | 0) == 20) {
      $$phi$trans$insert = $0 + 36 | 0; //@line 2805
      $$pre$phi128Z2D = $$phi$trans$insert; //@line 2807
      $52 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2807
     } else if ((label | 0) == 22) {
      _memcpy($0 + 20 + $48 | 0, $1 | 0, $2 | 0) | 0; //@line 2811
      HEAP32[$$pre$phiZ2D >> 2] = (HEAP32[$$pre$phiZ2D >> 2] | 0) + $2; //@line 2814
      $$1 = 0; //@line 2815
      return $$1 | 0; //@line 2816
     }
     do {
      if (!$52) {
       $$0121 = $3; //@line 2821
       $$0122 = $2; //@line 2821
       $$0124 = $1; //@line 2821
      } else {
       $53 = $10 - $52 | 0; //@line 2823
       _memcpy($0 + 20 + $52 | 0, $1 | 0, $53 | 0) | 0; //@line 2825
       $59 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2830
       $61 = HEAP32[$0 + 60 >> 2] | 0; //@line 2832
       $62 = HEAP32[$33 >> 2] | 0; //@line 2833
       $AsyncCtx3 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2836
       $65 = FUNCTION_TABLE_iiiiiii[$59 & 3]($61, $62, $10, $0 + 40 | 0, $0 + 20 | 0, $3) | 0; //@line 2837
       if (___async) {
        HEAP32[$AsyncCtx3 >> 2] = 585; //@line 2840
        HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 2842
        HEAP32[$AsyncCtx3 + 8 >> 2] = $10; //@line 2844
        HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2846
        HEAP32[$AsyncCtx3 + 16 >> 2] = $$pre$phi128Z2D; //@line 2848
        HEAP32[$AsyncCtx3 + 20 >> 2] = $1; //@line 2850
        HEAP32[$AsyncCtx3 + 24 >> 2] = $53; //@line 2852
        HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 2854
        HEAP32[$AsyncCtx3 + 32 >> 2] = $33; //@line 2856
        HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 2858
        HEAP32[$AsyncCtx3 + 40 >> 2] = $0; //@line 2860
        sp = STACKTOP; //@line 2861
        return 0; //@line 2862
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2864
       if (!$65) {
        HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $10; //@line 2869
        HEAP32[$$pre$phi128Z2D >> 2] = 0; //@line 2871
        $$0121 = $3 + $10 | 0; //@line 2874
        $$0122 = $2 - $53 | 0; //@line 2874
        $$0124 = $1 + $53 | 0; //@line 2874
        break;
       } else {
        $$1 = $65; //@line 2877
        return $$1 | 0; //@line 2878
       }
      }
     } while (0);
     if (!$$0122) {
      $$1 = 0; //@line 2884
      return $$1 | 0; //@line 2885
     }
     $83 = ($$0122 >>> 0) % ($10 >>> 0) | 0; //@line 2887
     if (!$83) {
      if (!(HEAP32[$33 >> 2] | 0)) {
       $$0 = (HEAP32[$0 + 12 >> 2] | 0) == 0 ? 0 : $10; //@line 2897
      } else {
       $$0 = 0; //@line 2899
      }
     } else {
      $$0 = $83; //@line 2902
     }
     $91 = $$0122 - $$0 | 0; //@line 2905
     _memcpy($0 + 20 | 0, $$0124 + $91 | 0, $$0 | 0) | 0; //@line 2907
     HEAP32[$$pre$phi128Z2D >> 2] = (HEAP32[$$pre$phi128Z2D >> 2] | 0) + $$0; //@line 2910
     if (!$91) {
      $$1 = 0; //@line 2913
      return $$1 | 0; //@line 2914
     }
     $100 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 2920
     $102 = HEAP32[$0 + 60 >> 2] | 0; //@line 2922
     $103 = HEAP32[$33 >> 2] | 0; //@line 2923
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2925
     $105 = FUNCTION_TABLE_iiiiiii[$100 & 3]($102, $103, $91, $0 + 40 | 0, $$0124, $$0121) | 0; //@line 2926
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 586; //@line 2929
      HEAP32[$AsyncCtx7 + 4 >> 2] = $4; //@line 2931
      HEAP32[$AsyncCtx7 + 8 >> 2] = $91; //@line 2933
      sp = STACKTOP; //@line 2934
      return 0; //@line 2935
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2937
     if ($105 | 0) {
      $$1 = $105; //@line 2940
      return $$1 | 0; //@line 2941
     }
     HEAP32[$4 >> 2] = (HEAP32[$4 >> 2] | 0) + $91; //@line 2945
     $$1 = 0; //@line 2946
     return $$1 | 0; //@line 2947
    }
   case 5:
    {
     $114 = HEAP32[(HEAP32[$6 + 28 >> 2] | 0) + 12 >> 2] | 0; //@line 2954
     $116 = HEAP32[$0 + 60 >> 2] | 0; //@line 2956
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2960
     $120 = FUNCTION_TABLE_iiiiiiii[$114 & 1]($116, $2, $0 + 36 | 0, $0 + 40 | 0, $0 + 20 | 0, $1, $3) | 0; //@line 2961
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 587; //@line 2964
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 2966
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 2968
      sp = STACKTOP; //@line 2969
      return 0; //@line 2970
     }
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2972
     if ($120 | 0) {
      $$1 = $120; //@line 2975
      return $$1 | 0; //@line 2976
     }
     HEAP32[$4 >> 2] = $2; //@line 2978
     $$1 = 0; //@line 2979
     return $$1 | 0; //@line 2980
    }
   default:
    {
     $$1 = -24704; //@line 2984
     return $$1 | 0; //@line 2985
    }
   }
  }
 }
 return 0; //@line 2990
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_246($0) {
 $0 = $0 | 0;
 var $$pre$i$i25 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15859
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15861
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15863
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15865
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15867
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15873
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15875
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15877
 $$pre$i$i25 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 15878
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i25; //@line 15880
 if ($$pre$i$i25 | 0) {
  $22 = HEAP32[$$pre$i$i25 + 8 >> 2] | 0; //@line 15884
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 15885
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 15886
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15889
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 15890
   HEAP32[$23 >> 2] = $2; //@line 15891
   $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 15892
   HEAP32[$24 >> 2] = $4; //@line 15893
   $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 15894
   HEAP32[$25 >> 2] = $6; //@line 15895
   $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 15896
   HEAP32[$26 >> 2] = $8; //@line 15897
   $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 15898
   HEAP32[$27 >> 2] = $14; //@line 15899
   $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 15900
   HEAP32[$28 >> 2] = $16; //@line 15901
   $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 15902
   HEAP32[$29 >> 2] = $18; //@line 15903
   sp = STACKTOP; //@line 15904
   return;
  }
  ___async_unwind = 0; //@line 15907
  HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15908
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 15909
  HEAP32[$23 >> 2] = $2; //@line 15910
  $24 = $ReallocAsyncCtx6 + 8 | 0; //@line 15911
  HEAP32[$24 >> 2] = $4; //@line 15912
  $25 = $ReallocAsyncCtx6 + 12 | 0; //@line 15913
  HEAP32[$25 >> 2] = $6; //@line 15914
  $26 = $ReallocAsyncCtx6 + 16 | 0; //@line 15915
  HEAP32[$26 >> 2] = $8; //@line 15916
  $27 = $ReallocAsyncCtx6 + 20 | 0; //@line 15917
  HEAP32[$27 >> 2] = $14; //@line 15918
  $28 = $ReallocAsyncCtx6 + 24 | 0; //@line 15919
  HEAP32[$28 >> 2] = $16; //@line 15920
  $29 = $ReallocAsyncCtx6 + 28 | 0; //@line 15921
  HEAP32[$29 >> 2] = $18; //@line 15922
  sp = STACKTOP; //@line 15923
  return;
 }
 $30 = $18 + 12 | 0; //@line 15926
 HEAP32[$18 >> 2] = 188; //@line 15927
 HEAP32[$18 + 4 >> 2] = 0; //@line 15929
 HEAP32[$18 + 8 >> 2] = $4; //@line 15931
 HEAP32[$30 >> 2] = 824; //@line 15932
 $31 = $4 + 2448 | 0; //@line 15933
 if (($31 | 0) == ($18 | 0)) {
  $58 = HEAP32[208] | 0; //@line 15937
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 15938
  FUNCTION_TABLE_vi[$58 & 1023]($18); //@line 15939
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 15942
   $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 15943
   HEAP32[$59 >> 2] = $18; //@line 15944
   $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 15945
   HEAP32[$60 >> 2] = $2; //@line 15946
   $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 15947
   HEAP32[$61 >> 2] = $4; //@line 15948
   $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 15949
   HEAP32[$62 >> 2] = $6; //@line 15950
   $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 15951
   HEAP32[$63 >> 2] = $8; //@line 15952
   $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 15953
   HEAP32[$64 >> 2] = $14; //@line 15954
   sp = STACKTOP; //@line 15955
   return;
  }
  ___async_unwind = 0; //@line 15958
  HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 15959
  $59 = $ReallocAsyncCtx9 + 4 | 0; //@line 15960
  HEAP32[$59 >> 2] = $18; //@line 15961
  $60 = $ReallocAsyncCtx9 + 8 | 0; //@line 15962
  HEAP32[$60 >> 2] = $2; //@line 15963
  $61 = $ReallocAsyncCtx9 + 12 | 0; //@line 15964
  HEAP32[$61 >> 2] = $4; //@line 15965
  $62 = $ReallocAsyncCtx9 + 16 | 0; //@line 15966
  HEAP32[$62 >> 2] = $6; //@line 15967
  $63 = $ReallocAsyncCtx9 + 20 | 0; //@line 15968
  HEAP32[$63 >> 2] = $8; //@line 15969
  $64 = $ReallocAsyncCtx9 + 24 | 0; //@line 15970
  HEAP32[$64 >> 2] = $14; //@line 15971
  sp = STACKTOP; //@line 15972
  return;
 }
 $33 = $4 + 2460 | 0; //@line 15975
 $34 = HEAP32[$33 >> 2] | 0; //@line 15976
 if (!$34) {
  $48 = HEAP32[207] | 0; //@line 15980
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 15981
  FUNCTION_TABLE_vii[$48 & 15]($31, $18); //@line 15982
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 15985
   $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 15986
   HEAP32[$49 >> 2] = $18; //@line 15987
   $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 15988
   HEAP32[$50 >> 2] = $2; //@line 15989
   $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 15990
   HEAP32[$51 >> 2] = $4; //@line 15991
   $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 15992
   HEAP32[$52 >> 2] = $30; //@line 15993
   $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 15994
   HEAP32[$53 >> 2] = $33; //@line 15995
   $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 15996
   HEAP32[$54 >> 2] = $6; //@line 15997
   $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 15998
   HEAP32[$55 >> 2] = $8; //@line 15999
   $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 16000
   HEAP32[$56 >> 2] = $14; //@line 16001
   sp = STACKTOP; //@line 16002
   return;
  }
  ___async_unwind = 0; //@line 16005
  HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 16006
  $49 = $ReallocAsyncCtx8 + 4 | 0; //@line 16007
  HEAP32[$49 >> 2] = $18; //@line 16008
  $50 = $ReallocAsyncCtx8 + 8 | 0; //@line 16009
  HEAP32[$50 >> 2] = $2; //@line 16010
  $51 = $ReallocAsyncCtx8 + 12 | 0; //@line 16011
  HEAP32[$51 >> 2] = $4; //@line 16012
  $52 = $ReallocAsyncCtx8 + 16 | 0; //@line 16013
  HEAP32[$52 >> 2] = $30; //@line 16014
  $53 = $ReallocAsyncCtx8 + 20 | 0; //@line 16015
  HEAP32[$53 >> 2] = $33; //@line 16016
  $54 = $ReallocAsyncCtx8 + 24 | 0; //@line 16017
  HEAP32[$54 >> 2] = $6; //@line 16018
  $55 = $ReallocAsyncCtx8 + 28 | 0; //@line 16019
  HEAP32[$55 >> 2] = $8; //@line 16020
  $56 = $ReallocAsyncCtx8 + 32 | 0; //@line 16021
  HEAP32[$56 >> 2] = $14; //@line 16022
  sp = STACKTOP; //@line 16023
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 16027
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 16028
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 16029
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 16032
   $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 16033
   HEAP32[$38 >> 2] = $18; //@line 16034
   $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 16035
   HEAP32[$39 >> 2] = $2; //@line 16036
   $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 16037
   HEAP32[$40 >> 2] = $4; //@line 16038
   $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 16039
   HEAP32[$41 >> 2] = $30; //@line 16040
   $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 16041
   HEAP32[$42 >> 2] = $33; //@line 16042
   $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 16043
   HEAP32[$43 >> 2] = $6; //@line 16044
   $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 16045
   HEAP32[$44 >> 2] = $8; //@line 16046
   $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 16047
   HEAP32[$45 >> 2] = $14; //@line 16048
   $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 16049
   HEAP32[$46 >> 2] = $31; //@line 16050
   sp = STACKTOP; //@line 16051
   return;
  }
  ___async_unwind = 0; //@line 16054
  HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 16055
  $38 = $ReallocAsyncCtx7 + 4 | 0; //@line 16056
  HEAP32[$38 >> 2] = $18; //@line 16057
  $39 = $ReallocAsyncCtx7 + 8 | 0; //@line 16058
  HEAP32[$39 >> 2] = $2; //@line 16059
  $40 = $ReallocAsyncCtx7 + 12 | 0; //@line 16060
  HEAP32[$40 >> 2] = $4; //@line 16061
  $41 = $ReallocAsyncCtx7 + 16 | 0; //@line 16062
  HEAP32[$41 >> 2] = $30; //@line 16063
  $42 = $ReallocAsyncCtx7 + 20 | 0; //@line 16064
  HEAP32[$42 >> 2] = $33; //@line 16065
  $43 = $ReallocAsyncCtx7 + 24 | 0; //@line 16066
  HEAP32[$43 >> 2] = $6; //@line 16067
  $44 = $ReallocAsyncCtx7 + 28 | 0; //@line 16068
  HEAP32[$44 >> 2] = $8; //@line 16069
  $45 = $ReallocAsyncCtx7 + 32 | 0; //@line 16070
  HEAP32[$45 >> 2] = $14; //@line 16071
  $46 = $ReallocAsyncCtx7 + 36 | 0; //@line 16072
  HEAP32[$46 >> 2] = $31; //@line 16073
  sp = STACKTOP; //@line 16074
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_17($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19600
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19602
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19606
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19608
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 19612
 $11 = $2 + 16 | 0; //@line 19613
 $12 = $2 + 28 | 0; //@line 19614
 $13 = HEAP32[$12 >> 2] | 0; //@line 19615
 if ($13 | 0) {
  $15 = $6 + 2516 | 0; //@line 19618
  if (($15 | 0) != ($11 | 0)) {
   $17 = $6 + 2528 | 0; //@line 19621
   $18 = HEAP32[$17 >> 2] | 0; //@line 19622
   if (!$18) {
    $30 = HEAP32[$13 + 4 >> 2] | 0; //@line 19626
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 19627
    FUNCTION_TABLE_vii[$30 & 15]($15, $11); //@line 19628
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 19631
     $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 19632
     HEAP32[$31 >> 2] = $8; //@line 19633
     $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 19634
     HEAP32[$32 >> 2] = $6; //@line 19635
     $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 19636
     HEAP32[$33 >> 2] = $12; //@line 19637
     $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 19638
     HEAP32[$34 >> 2] = $17; //@line 19639
     $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 19640
     HEAP32[$35 >> 2] = $2; //@line 19641
     sp = STACKTOP; //@line 19642
     return;
    }
    ___async_unwind = 0; //@line 19645
    HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 19646
    $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 19647
    HEAP32[$31 >> 2] = $8; //@line 19648
    $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 19649
    HEAP32[$32 >> 2] = $6; //@line 19650
    $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 19651
    HEAP32[$33 >> 2] = $12; //@line 19652
    $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 19653
    HEAP32[$34 >> 2] = $17; //@line 19654
    $35 = $ReallocAsyncCtx4 + 20 | 0; //@line 19655
    HEAP32[$35 >> 2] = $2; //@line 19656
    sp = STACKTOP; //@line 19657
    return;
   } else {
    $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 19661
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 19662
    FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 19663
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 355; //@line 19666
     $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 19667
     HEAP32[$22 >> 2] = $15; //@line 19668
     $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 19669
     HEAP32[$23 >> 2] = $11; //@line 19670
     $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 19671
     HEAP32[$24 >> 2] = $12; //@line 19672
     $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 19673
     HEAP32[$25 >> 2] = $8; //@line 19674
     $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 19675
     HEAP32[$26 >> 2] = $6; //@line 19676
     $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 19677
     HEAP32[$27 >> 2] = $17; //@line 19678
     $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 19679
     HEAP32[$28 >> 2] = $2; //@line 19680
     sp = STACKTOP; //@line 19681
     return;
    }
    ___async_unwind = 0; //@line 19684
    HEAP32[$ReallocAsyncCtx3 >> 2] = 355; //@line 19685
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 19686
    HEAP32[$22 >> 2] = $15; //@line 19687
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 19688
    HEAP32[$23 >> 2] = $11; //@line 19689
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 19690
    HEAP32[$24 >> 2] = $12; //@line 19691
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 19692
    HEAP32[$25 >> 2] = $8; //@line 19693
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 19694
    HEAP32[$26 >> 2] = $6; //@line 19695
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 19696
    HEAP32[$27 >> 2] = $17; //@line 19697
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 19698
    HEAP32[$28 >> 2] = $2; //@line 19699
    sp = STACKTOP; //@line 19700
    return;
   }
  }
 }
 $36 = $2 + 32 | 0; //@line 19705
 $37 = $2 + 44 | 0; //@line 19706
 $38 = HEAP32[$37 >> 2] | 0; //@line 19707
 if (!$38) {
  HEAP32[___async_retval >> 2] = 0; //@line 19711
  return;
 }
 $40 = $6 + 2532 | 0; //@line 19714
 if (($40 | 0) == ($36 | 0)) {
  $61 = HEAP32[$38 + 4 >> 2] | 0; //@line 19718
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 19719
  FUNCTION_TABLE_vii[$61 & 15]($8, $36); //@line 19720
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 19723
   $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 19724
   HEAP32[$62 >> 2] = $37; //@line 19725
   $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 19726
   HEAP32[$63 >> 2] = $6; //@line 19727
   $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 19728
   HEAP32[$64 >> 2] = $8; //@line 19729
   sp = STACKTOP; //@line 19730
   return;
  }
  ___async_unwind = 0; //@line 19733
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 19734
  $62 = $ReallocAsyncCtx7 + 4 | 0; //@line 19735
  HEAP32[$62 >> 2] = $37; //@line 19736
  $63 = $ReallocAsyncCtx7 + 8 | 0; //@line 19737
  HEAP32[$63 >> 2] = $6; //@line 19738
  $64 = $ReallocAsyncCtx7 + 12 | 0; //@line 19739
  HEAP32[$64 >> 2] = $8; //@line 19740
  sp = STACKTOP; //@line 19741
  return;
 }
 $42 = $6 + 2544 | 0; //@line 19744
 $43 = HEAP32[$42 >> 2] | 0; //@line 19745
 if (!$43) {
  $54 = HEAP32[$38 + 4 >> 2] | 0; //@line 19749
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 19750
  FUNCTION_TABLE_vii[$54 & 15]($40, $36); //@line 19751
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 19754
   $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 19755
   HEAP32[$55 >> 2] = $37; //@line 19756
   $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 19757
   HEAP32[$56 >> 2] = $42; //@line 19758
   $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 19759
   HEAP32[$57 >> 2] = $6; //@line 19760
   $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 19761
   HEAP32[$58 >> 2] = $8; //@line 19762
   $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 19763
   HEAP32[$59 >> 2] = $36; //@line 19764
   sp = STACKTOP; //@line 19765
   return;
  }
  ___async_unwind = 0; //@line 19768
  HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 19769
  $55 = $ReallocAsyncCtx6 + 4 | 0; //@line 19770
  HEAP32[$55 >> 2] = $37; //@line 19771
  $56 = $ReallocAsyncCtx6 + 8 | 0; //@line 19772
  HEAP32[$56 >> 2] = $42; //@line 19773
  $57 = $ReallocAsyncCtx6 + 12 | 0; //@line 19774
  HEAP32[$57 >> 2] = $6; //@line 19775
  $58 = $ReallocAsyncCtx6 + 16 | 0; //@line 19776
  HEAP32[$58 >> 2] = $8; //@line 19777
  $59 = $ReallocAsyncCtx6 + 20 | 0; //@line 19778
  HEAP32[$59 >> 2] = $36; //@line 19779
  sp = STACKTOP; //@line 19780
  return;
 } else {
  $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 19784
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 19785
  FUNCTION_TABLE_vi[$46 & 1023]($40); //@line 19786
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 19789
   $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 19790
   HEAP32[$47 >> 2] = $37; //@line 19791
   $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 19792
   HEAP32[$48 >> 2] = $42; //@line 19793
   $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 19794
   HEAP32[$49 >> 2] = $6; //@line 19795
   $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 19796
   HEAP32[$50 >> 2] = $40; //@line 19797
   $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 19798
   HEAP32[$51 >> 2] = $36; //@line 19799
   $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 19800
   HEAP32[$52 >> 2] = $8; //@line 19801
   sp = STACKTOP; //@line 19802
   return;
  }
  ___async_unwind = 0; //@line 19805
  HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 19806
  $47 = $ReallocAsyncCtx5 + 4 | 0; //@line 19807
  HEAP32[$47 >> 2] = $37; //@line 19808
  $48 = $ReallocAsyncCtx5 + 8 | 0; //@line 19809
  HEAP32[$48 >> 2] = $42; //@line 19810
  $49 = $ReallocAsyncCtx5 + 12 | 0; //@line 19811
  HEAP32[$49 >> 2] = $6; //@line 19812
  $50 = $ReallocAsyncCtx5 + 16 | 0; //@line 19813
  HEAP32[$50 >> 2] = $40; //@line 19814
  $51 = $ReallocAsyncCtx5 + 20 | 0; //@line 19815
  HEAP32[$51 >> 2] = $36; //@line 19816
  $52 = $ReallocAsyncCtx5 + 24 | 0; //@line 19817
  HEAP32[$52 >> 2] = $8; //@line 19818
  sp = STACKTOP; //@line 19819
  return;
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$036 = 0, $$038 = 0, $10 = 0, $104 = 0, $107 = 0, $110 = 0, $114 = 0, $117 = 0, $126 = 0, $129 = 0, $132 = 0, $134 = 0, $137 = 0, $16 = 0, $19 = 0, $20 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $41 = 0, $43 = 0, $47 = 0, $5 = 0, $52 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $7 = 0, $71 = 0, $74 = 0, $87 = 0, $90 = 0, $95 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20247
 $3 = HEAP8[$1 + 1 >> 0] | 0; //@line 20249
 $5 = HEAP32[$1 + 4 >> 2] | 0; //@line 20251
 $6 = $0 + 4 | 0; //@line 20252
 $7 = HEAP32[$6 >> 2] | 0; //@line 20253
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 72 >> 2] | 0; //@line 20256
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 20257
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 20258
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 517; //@line 20261
  HEAP8[$AsyncCtx + 4 >> 0] = $3; //@line 20263
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 20265
  HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 20267
  HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 20269
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 20271
  sp = STACKTOP; //@line 20272
  return 0; //@line 20273
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20275
 $16 = HEAP32[$6 >> 2] | 0; //@line 20276
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 40 >> 2] | 0; //@line 20279
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20280
 $20 = FUNCTION_TABLE_ii[$19 & 15]($16) | 0; //@line 20281
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 518; //@line 20284
  HEAP8[$AsyncCtx2 + 4 >> 0] = $3; //@line 20286
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 20288
  HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 20290
  HEAP32[$AsyncCtx2 + 16 >> 2] = $5; //@line 20292
  HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 20294
  sp = STACKTOP; //@line 20295
  return 0; //@line 20296
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20298
 $26 = $20 << 24 >> 24 == 0; //@line 20299
 $27 = HEAP32[$6 >> 2] | 0; //@line 20300
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 76 >> 2] | 0; //@line 20303
 $AsyncCtx5 = _emscripten_alloc_async_context(28, sp) | 0; //@line 20304
 FUNCTION_TABLE_vi[$30 & 1023]($27); //@line 20305
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 519; //@line 20308
  HEAP8[$AsyncCtx5 + 4 >> 0] = $3; //@line 20310
  HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 20312
  HEAP32[$AsyncCtx5 + 12 >> 2] = $6; //@line 20314
  HEAP32[$AsyncCtx5 + 16 >> 2] = $5; //@line 20316
  HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 20318
  HEAP8[$AsyncCtx5 + 24 >> 0] = $26 & 1; //@line 20321
  sp = STACKTOP; //@line 20322
  return 0; //@line 20323
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 20325
 if (!$26) {
  $$0 = 0; //@line 20327
  return $$0 | 0; //@line 20328
 }
 if (!(HEAP32[$1 + 20 >> 2] | 0)) {
  $41 = HEAP32[$0 + 124 >> 2] | 0; //@line 20335
  $43 = HEAPU8[$1 >> 0] | 0; //@line 20337
  $47 = HEAP32[$41 + ($43 * 12 | 0) + 4 >> 2] | 0; //@line 20341
  $$038 = ($47 | 0) == 0 ? HEAP32[$41 + ($43 * 12 | 0) >> 2] | 0 : $47; //@line 20344
 } else {
  $$038 = $5; //@line 20346
 }
 $52 = HEAP32[$0 + 96 >> 2] | 0; //@line 20351
 $54 = HEAP32[$0 + 104 >> 2] | 0; //@line 20353
 $55 = $3 & 255; //@line 20354
 $57 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $55 >> 0] | 0; //@line 20356
 $58 = HEAP32[$6 >> 2] | 0; //@line 20357
 $61 = HEAP32[(HEAP32[$58 >> 2] | 0) + 72 >> 2] | 0; //@line 20360
 $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 20361
 FUNCTION_TABLE_vi[$61 & 1023]($58); //@line 20362
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 520; //@line 20365
  HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 20367
  HEAP32[$AsyncCtx9 + 8 >> 2] = $$038; //@line 20369
  HEAP8[$AsyncCtx9 + 12 >> 0] = $3; //@line 20371
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 20373
  HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 20375
  HEAP8[$AsyncCtx9 + 24 >> 0] = $57; //@line 20377
  HEAP32[$AsyncCtx9 + 28 >> 2] = $52; //@line 20379
  HEAP32[$AsyncCtx9 + 32 >> 2] = $54; //@line 20381
  HEAP32[$AsyncCtx9 + 36 >> 2] = $55; //@line 20383
  sp = STACKTOP; //@line 20384
  return 0; //@line 20385
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 20387
 $71 = HEAP32[$6 >> 2] | 0; //@line 20388
 $74 = HEAP32[(HEAP32[$71 >> 2] | 0) + 32 >> 2] | 0; //@line 20391
 $AsyncCtx12 = _emscripten_alloc_async_context(36, sp) | 0; //@line 20392
 FUNCTION_TABLE_vii[$74 & 15]($71, $$038); //@line 20393
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 521; //@line 20396
  HEAP8[$AsyncCtx12 + 4 >> 0] = $3; //@line 20398
  HEAP32[$AsyncCtx12 + 8 >> 2] = $0; //@line 20400
  HEAP32[$AsyncCtx12 + 12 >> 2] = $6; //@line 20402
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 20404
  HEAP8[$AsyncCtx12 + 20 >> 0] = $57; //@line 20406
  HEAP32[$AsyncCtx12 + 24 >> 2] = $52; //@line 20408
  HEAP32[$AsyncCtx12 + 28 >> 2] = $54; //@line 20410
  HEAP32[$AsyncCtx12 + 32 >> 2] = $55; //@line 20412
  sp = STACKTOP; //@line 20413
  return 0; //@line 20414
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 20416
 do {
  if ($3 << 24 >> 24 == 7) {
   if (!(HEAP8[$0 + 14 >> 0] | 0)) {
    label = 19; //@line 20424
   } else {
    $87 = HEAP32[$6 >> 2] | 0; //@line 20426
    $90 = HEAP32[(HEAP32[$87 >> 2] | 0) + 16 >> 2] | 0; //@line 20429
    $95 = HEAP32[$1 + 8 >> 2] & 65535; //@line 20434
    $98 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 20437
    $AsyncCtx16 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20438
    FUNCTION_TABLE_viiiiiiiiiiiiiii[$90 & 1]($87, 0, 5e4, ($57 & 255) * 1e3 | 0, 0, 83333, 5, $95, 0, 0, 1, 0, 0, 0, $98); //@line 20439
    if (___async) {
     HEAP32[$AsyncCtx16 >> 2] = 522; //@line 20442
     HEAP32[$AsyncCtx16 + 4 >> 2] = $1; //@line 20444
     HEAP32[$AsyncCtx16 + 8 >> 2] = $52; //@line 20446
     HEAP32[$AsyncCtx16 + 12 >> 2] = $54; //@line 20448
     HEAP32[$AsyncCtx16 + 16 >> 2] = $55; //@line 20450
     HEAP32[$AsyncCtx16 + 20 >> 2] = $6; //@line 20452
     sp = STACKTOP; //@line 20453
     return 0; //@line 20454
    } else {
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 20456
     $$036 = 0; //@line 20457
     break;
    }
   }
  } else {
   label = 19; //@line 20462
  }
 } while (0);
 do {
  if ((label | 0) == 19) {
   $104 = HEAP32[$6 >> 2] | 0; //@line 20467
   $107 = HEAP32[(HEAP32[$104 >> 2] | 0) + 16 >> 2] | 0; //@line 20470
   $110 = HEAPU8[$1 + 2 >> 0] | 0; //@line 20473
   $114 = HEAP32[$1 + 8 >> 2] & 65535; //@line 20477
   $117 = (HEAP8[$1 + 18 >> 0] | 0) != 0; //@line 20480
   $AsyncCtx20 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20481
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$107 & 1]($104, 1, $110, $57 & 255, 1, 0, 8, $114, 0, 0, 0, 0, 0, 1, $117); //@line 20482
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 523; //@line 20485
    HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 20487
    HEAP32[$AsyncCtx20 + 8 >> 2] = $52; //@line 20489
    HEAP32[$AsyncCtx20 + 12 >> 2] = $54; //@line 20491
    HEAP32[$AsyncCtx20 + 16 >> 2] = $55; //@line 20493
    HEAP32[$AsyncCtx20 + 20 >> 2] = $6; //@line 20495
    sp = STACKTOP; //@line 20496
    return 0; //@line 20497
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 20499
    $$036 = 1; //@line 20500
    break;
   }
  }
 } while (0);
 $126 = HEAP32[$6 >> 2] | 0; //@line 20511
 $129 = HEAP32[(HEAP32[$126 >> 2] | 0) + 44 >> 2] | 0; //@line 20514
 $132 = (HEAPU8[((HEAP8[$1 + 17 >> 0] | 0) == 0 ? $52 : $54) + $55 >> 0] | 0) + 13 & 255; //@line 20517
 $AsyncCtx24 = _emscripten_alloc_async_context(8, sp) | 0; //@line 20518
 FUNCTION_TABLE_viii[$129 & 7]($126, $$036, $132); //@line 20519
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 524; //@line 20522
  HEAP32[$AsyncCtx24 + 4 >> 2] = $6; //@line 20524
  sp = STACKTOP; //@line 20525
  return 0; //@line 20526
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 20528
 $134 = HEAP32[$6 >> 2] | 0; //@line 20529
 $137 = HEAP32[(HEAP32[$134 >> 2] | 0) + 76 >> 2] | 0; //@line 20532
 $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 20533
 FUNCTION_TABLE_vi[$137 & 1023]($134); //@line 20534
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 525; //@line 20537
  sp = STACKTOP; //@line 20538
  return 0; //@line 20539
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 20541
 $$0 = 1; //@line 20542
 return $$0 | 0; //@line 20543
}
function _schedule_interrupt__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $100 = 0, $102 = 0, $107 = 0, $110 = 0, $112 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $121 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $140 = 0, $147 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $168 = 0, $169 = 0, $17 = 0, $172 = 0, $174 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $187 = 0, $19 = 0, $190 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $33 = 0, $34 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $59 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $87 = 0, $9 = 0, $91 = 0, $92 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30418
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30420
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30422
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30426
 $8 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 30427
 $9 = $8 + 32 | 0; //@line 30428
 if (($AsyncRetVal | 0) != (HEAP32[$9 >> 2] | 0)) {
  $12 = $2 + 32 | 0; //@line 30432
  $17 = $AsyncRetVal - (HEAP32[$12 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 30437
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 30438
  $19 = HEAP32[$2 + 8 >> 2] | 0; //@line 30440
  do {
   if (($19 | 0) == 1e6) {
    $98 = $17; //@line 30444
    $99 = 0; //@line 30444
   } else {
    $22 = HEAP8[$2 + 57 >> 0] | 0; //@line 30447
    $24 = ___muldi3($17 | 0, 0, 1e6, 0) | 0; //@line 30449
    $25 = tempRet0; //@line 30450
    if (!($22 << 24 >> 24)) {
     $59 = ___udivdi3($24 | 0, $25 | 0, $19 | 0, 0) | 0; //@line 30452
     $60 = tempRet0; //@line 30453
     $61 = ___muldi3($59 | 0, $60 | 0, $19 | 0, 0) | 0; //@line 30454
     $63 = _i64Subtract($24 | 0, $25 | 0, $61 | 0, tempRet0 | 0) | 0; //@line 30456
     $65 = $2 + 40 | 0; //@line 30458
     $66 = $65; //@line 30459
     $72 = _i64Add($63 | 0, tempRet0 | 0, HEAP32[$66 >> 2] | 0, HEAP32[$66 + 4 >> 2] | 0) | 0; //@line 30465
     $73 = tempRet0; //@line 30466
     $74 = $65; //@line 30467
     HEAP32[$74 >> 2] = $72; //@line 30469
     HEAP32[$74 + 4 >> 2] = $73; //@line 30472
     if ($73 >>> 0 < 0 | ($73 | 0) == 0 & $72 >>> 0 < $19 >>> 0) {
      $98 = $59; //@line 30479
      $99 = $60; //@line 30479
      break;
     }
     $83 = _i64Add($59 | 0, $60 | 0, 1, 0) | 0; //@line 30482
     $84 = tempRet0; //@line 30483
     $85 = _i64Subtract($72 | 0, $73 | 0, $19 | 0, 0) | 0; //@line 30484
     $87 = $65; //@line 30486
     HEAP32[$87 >> 2] = $85; //@line 30488
     HEAP32[$87 + 4 >> 2] = tempRet0; //@line 30491
     $98 = $83; //@line 30492
     $99 = $84; //@line 30492
     break;
    } else {
     $26 = $22 & 255; //@line 30495
     $27 = _bitshift64Lshr($24 | 0, $25 | 0, $26 | 0) | 0; //@line 30496
     $28 = tempRet0; //@line 30497
     $29 = _bitshift64Shl($27 | 0, $28 | 0, $26 | 0) | 0; //@line 30498
     $31 = _i64Subtract($24 | 0, $25 | 0, $29 | 0, tempRet0 | 0) | 0; //@line 30500
     $33 = $2 + 40 | 0; //@line 30502
     $34 = $33; //@line 30503
     $40 = _i64Add(HEAP32[$34 >> 2] | 0, HEAP32[$34 + 4 >> 2] | 0, $31 | 0, tempRet0 | 0) | 0; //@line 30509
     $41 = tempRet0; //@line 30510
     $42 = $33; //@line 30511
     HEAP32[$42 >> 2] = $40; //@line 30513
     HEAP32[$42 + 4 >> 2] = $41; //@line 30516
     if ($41 >>> 0 < 0 | ($41 | 0) == 0 & $40 >>> 0 < $19 >>> 0) {
      $98 = $27; //@line 30523
      $99 = $28; //@line 30523
      break;
     }
     $51 = _i64Add($27 | 0, $28 | 0, 1, 0) | 0; //@line 30526
     $52 = tempRet0; //@line 30527
     $53 = _i64Subtract($40 | 0, $41 | 0, $19 | 0, 0) | 0; //@line 30528
     $55 = $33; //@line 30530
     HEAP32[$55 >> 2] = $53; //@line 30532
     HEAP32[$55 + 4 >> 2] = tempRet0; //@line 30535
     $98 = $51; //@line 30536
     $99 = $52; //@line 30536
     break;
    }
   }
  } while (0);
  $91 = $2 + 48 | 0; //@line 30541
  $92 = $91; //@line 30542
  $100 = _i64Add(HEAP32[$92 >> 2] | 0, HEAP32[$92 + 4 >> 2] | 0, $98 | 0, $99 | 0) | 0; //@line 30548
  $102 = $91; //@line 30550
  HEAP32[$102 >> 2] = $100; //@line 30552
  HEAP32[$102 + 4 >> 2] = tempRet0; //@line 30555
 }
 $107 = HEAP32[$8 + 4 >> 2] | 0; //@line 30558
 if (!$107) {
  $187 = (HEAP32[$2 + 16 >> 2] | 0) + (HEAP32[$2 + 32 >> 2] | 0) & HEAP32[$2 + 12 >> 2]; //@line 30568
  $190 = HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] | 0; //@line 30571
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 30572
  FUNCTION_TABLE_vi[$190 & 1023]($187); //@line 30573
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 631; //@line 30576
   sp = STACKTOP; //@line 30577
   return;
  }
  ___async_unwind = 0; //@line 30580
  HEAP32[$ReallocAsyncCtx7 >> 2] = 631; //@line 30581
  sp = STACKTOP; //@line 30582
  return;
 }
 $110 = $8 + 48 | 0; //@line 30586
 $112 = HEAP32[$110 >> 2] | 0; //@line 30588
 $115 = HEAP32[$110 + 4 >> 2] | 0; //@line 30591
 $116 = $107; //@line 30592
 $118 = HEAP32[$116 >> 2] | 0; //@line 30594
 $121 = HEAP32[$116 + 4 >> 2] | 0; //@line 30597
 if (!($121 >>> 0 > $115 >>> 0 | ($121 | 0) == ($115 | 0) & $118 >>> 0 > $112 >>> 0)) {
  $129 = HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] | 0; //@line 30606
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 30607
  FUNCTION_TABLE_v[$129 & 15](); //@line 30608
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 626; //@line 30611
   sp = STACKTOP; //@line 30612
   return;
  }
  ___async_unwind = 0; //@line 30615
  HEAP32[$ReallocAsyncCtx2 >> 2] = 626; //@line 30616
  sp = STACKTOP; //@line 30617
  return;
 }
 $130 = _i64Subtract($118 | 0, $121 | 0, $112 | 0, $115 | 0) | 0; //@line 30620
 $131 = tempRet0; //@line 30621
 $133 = HEAP32[$8 + 16 >> 2] | 0; //@line 30623
 $135 = $8 + 24 | 0; //@line 30625
 $140 = HEAP32[$135 + 4 >> 2] | 0; //@line 30630
 do {
  if ($131 >>> 0 > $140 >>> 0 | (($131 | 0) == ($140 | 0) ? $130 >>> 0 > (HEAP32[$135 >> 2] | 0) >>> 0 : 0)) {
   $$0$i = $133; //@line 30638
  } else {
   $147 = HEAP32[$8 + 8 >> 2] | 0; //@line 30641
   if (($147 | 0) == 1e6) {
    $$0$i = $133 >>> 0 < $130 >>> 0 ? $133 : $130; //@line 30646
    break;
   }
   $151 = HEAP8[$8 + 57 >> 0] | 0; //@line 30650
   if (!($151 << 24 >> 24)) {
    $159 = ___muldi3($130 | 0, $131 | 0, $147 | 0, 0) | 0; //@line 30653
    $161 = ___udivdi3($159 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 30655
    $$0$i = $133 >>> 0 < $161 >>> 0 ? $133 : $161; //@line 30659
    break;
   } else {
    $154 = _bitshift64Shl($130 | 0, $131 | 0, $151 & 255 | 0) | 0; //@line 30663
    $156 = ___udivdi3($154 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 30665
    $$0$i = $133 >>> 0 < $156 >>> 0 ? $133 : $156; //@line 30669
    break;
   }
  }
 } while (0);
 $168 = (HEAP32[$9 >> 2] | 0) + $$0$i & HEAP32[$8 + 12 >> 2]; //@line 30678
 $169 = $2 + 32 | 0; //@line 30679
 $172 = HEAP32[$4 >> 2] | 0; //@line 30682
 if (($168 | 0) == (HEAP32[$169 >> 2] | 0)) {
  $174 = HEAP32[$172 + 20 >> 2] | 0; //@line 30685
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 30686
  FUNCTION_TABLE_v[$174 & 15](); //@line 30687
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 627; //@line 30690
   sp = STACKTOP; //@line 30691
   return;
  }
  ___async_unwind = 0; //@line 30694
  HEAP32[$ReallocAsyncCtx3 >> 2] = 627; //@line 30695
  sp = STACKTOP; //@line 30696
  return;
 } else {
  $176 = HEAP32[$172 + 16 >> 2] | 0; //@line 30700
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 30701
  FUNCTION_TABLE_vi[$176 & 1023]($168); //@line 30702
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 628; //@line 30705
   $177 = $ReallocAsyncCtx4 + 4 | 0; //@line 30706
   HEAP32[$177 >> 2] = $4; //@line 30707
   $178 = $ReallocAsyncCtx4 + 8 | 0; //@line 30708
   HEAP32[$178 >> 2] = $169; //@line 30709
   $179 = $ReallocAsyncCtx4 + 12 | 0; //@line 30710
   HEAP32[$179 >> 2] = $168; //@line 30711
   sp = STACKTOP; //@line 30712
   return;
  }
  ___async_unwind = 0; //@line 30715
  HEAP32[$ReallocAsyncCtx4 >> 2] = 628; //@line 30716
  $177 = $ReallocAsyncCtx4 + 4 | 0; //@line 30717
  HEAP32[$177 >> 2] = $4; //@line 30718
  $178 = $ReallocAsyncCtx4 + 8 | 0; //@line 30719
  HEAP32[$178 >> 2] = $169; //@line 30720
  $179 = $ReallocAsyncCtx4 + 12 | 0; //@line 30721
  HEAP32[$179 >> 2] = $168; //@line 30722
  sp = STACKTOP; //@line 30723
  return;
 }
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6502
 STACKTOP = STACKTOP + 32 | 0; //@line 6503
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 6503
 $0 = sp; //@line 6504
 _gpio_init_out($0, 50); //@line 6505
 while (1) {
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6508
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6509
  _wait_ms(150); //@line 6510
  if (___async) {
   label = 3; //@line 6513
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 6516
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6518
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6519
  _wait_ms(150); //@line 6520
  if (___async) {
   label = 5; //@line 6523
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 6526
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6528
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6529
  _wait_ms(150); //@line 6530
  if (___async) {
   label = 7; //@line 6533
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 6536
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6538
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6539
  _wait_ms(150); //@line 6540
  if (___async) {
   label = 9; //@line 6543
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 6546
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6548
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6549
  _wait_ms(150); //@line 6550
  if (___async) {
   label = 11; //@line 6553
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 6556
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6558
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6559
  _wait_ms(150); //@line 6560
  if (___async) {
   label = 13; //@line 6563
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 6566
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6568
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6569
  _wait_ms(150); //@line 6570
  if (___async) {
   label = 15; //@line 6573
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 6576
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6578
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6579
  _wait_ms(150); //@line 6580
  if (___async) {
   label = 17; //@line 6583
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 6586
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6588
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6589
  _wait_ms(400); //@line 6590
  if (___async) {
   label = 19; //@line 6593
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 6596
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6598
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6599
  _wait_ms(400); //@line 6600
  if (___async) {
   label = 21; //@line 6603
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 6606
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6608
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6609
  _wait_ms(400); //@line 6610
  if (___async) {
   label = 23; //@line 6613
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 6616
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6618
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6619
  _wait_ms(400); //@line 6620
  if (___async) {
   label = 25; //@line 6623
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 6626
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6628
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6629
  _wait_ms(400); //@line 6630
  if (___async) {
   label = 27; //@line 6633
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 6636
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6638
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6639
  _wait_ms(400); //@line 6640
  if (___async) {
   label = 29; //@line 6643
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6646
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 6648
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6649
  _wait_ms(400); //@line 6650
  if (___async) {
   label = 31; //@line 6653
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6656
  _emscripten_asm_const_iii(4, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 6658
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6659
  _wait_ms(400); //@line 6660
  if (___async) {
   label = 33; //@line 6663
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6666
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 636; //@line 6670
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 6672
   sp = STACKTOP; //@line 6673
   STACKTOP = sp; //@line 6674
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 637; //@line 6678
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 6680
   sp = STACKTOP; //@line 6681
   STACKTOP = sp; //@line 6682
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 638; //@line 6686
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 6688
   sp = STACKTOP; //@line 6689
   STACKTOP = sp; //@line 6690
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 639; //@line 6694
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 6696
   sp = STACKTOP; //@line 6697
   STACKTOP = sp; //@line 6698
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 640; //@line 6702
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 6704
   sp = STACKTOP; //@line 6705
   STACKTOP = sp; //@line 6706
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 641; //@line 6710
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 6712
   sp = STACKTOP; //@line 6713
   STACKTOP = sp; //@line 6714
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 642; //@line 6718
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 6720
   sp = STACKTOP; //@line 6721
   STACKTOP = sp; //@line 6722
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 643; //@line 6726
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 6728
   sp = STACKTOP; //@line 6729
   STACKTOP = sp; //@line 6730
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 644; //@line 6734
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 6736
   sp = STACKTOP; //@line 6737
   STACKTOP = sp; //@line 6738
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 645; //@line 6742
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 6744
   sp = STACKTOP; //@line 6745
   STACKTOP = sp; //@line 6746
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 646; //@line 6750
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 6752
   sp = STACKTOP; //@line 6753
   STACKTOP = sp; //@line 6754
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 647; //@line 6758
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 6760
   sp = STACKTOP; //@line 6761
   STACKTOP = sp; //@line 6762
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 648; //@line 6766
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 6768
   sp = STACKTOP; //@line 6769
   STACKTOP = sp; //@line 6770
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 649; //@line 6774
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 6776
   sp = STACKTOP; //@line 6777
   STACKTOP = sp; //@line 6778
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 650; //@line 6782
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6784
   sp = STACKTOP; //@line 6785
   STACKTOP = sp; //@line 6786
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 651; //@line 6790
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 6792
   sp = STACKTOP; //@line 6793
   STACKTOP = sp; //@line 6794
   return;
  }
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_248($0) {
 $0 = $0 | 0;
 var $$pre124 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 16256
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16258
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16260
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16262
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16264
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16266
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16268
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16270
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16272
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16274
 $$pre124 = HEAP32[$8 >> 2] | 0; //@line 16275
 if ($$pre124 | 0) {
  $21 = HEAP32[$$pre124 + 4 >> 2] | 0; //@line 16279
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 16280
  FUNCTION_TABLE_vii[$21 & 15]($18, $2); //@line 16281
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 16284
   $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 16285
   HEAP32[$22 >> 2] = $2; //@line 16286
   $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 16287
   HEAP32[$23 >> 2] = $4; //@line 16288
   $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 16289
   HEAP32[$24 >> 2] = $6; //@line 16290
   $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 16291
   HEAP32[$25 >> 2] = $8; //@line 16292
   $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 16293
   HEAP32[$26 >> 2] = $10; //@line 16294
   $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 16295
   HEAP32[$27 >> 2] = $12; //@line 16296
   $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 16297
   HEAP32[$28 >> 2] = $14; //@line 16298
   $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 16299
   HEAP32[$29 >> 2] = $16; //@line 16300
   sp = STACKTOP; //@line 16301
   return;
  }
  ___async_unwind = 0; //@line 16304
  HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 16305
  $22 = $ReallocAsyncCtx8 + 4 | 0; //@line 16306
  HEAP32[$22 >> 2] = $2; //@line 16307
  $23 = $ReallocAsyncCtx8 + 8 | 0; //@line 16308
  HEAP32[$23 >> 2] = $4; //@line 16309
  $24 = $ReallocAsyncCtx8 + 12 | 0; //@line 16310
  HEAP32[$24 >> 2] = $6; //@line 16311
  $25 = $ReallocAsyncCtx8 + 16 | 0; //@line 16312
  HEAP32[$25 >> 2] = $8; //@line 16313
  $26 = $ReallocAsyncCtx8 + 20 | 0; //@line 16314
  HEAP32[$26 >> 2] = $10; //@line 16315
  $27 = $ReallocAsyncCtx8 + 24 | 0; //@line 16316
  HEAP32[$27 >> 2] = $12; //@line 16317
  $28 = $ReallocAsyncCtx8 + 28 | 0; //@line 16318
  HEAP32[$28 >> 2] = $14; //@line 16319
  $29 = $ReallocAsyncCtx8 + 32 | 0; //@line 16320
  HEAP32[$29 >> 2] = $16; //@line 16321
  sp = STACKTOP; //@line 16322
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 16325
 $30 = $4 + 12 | 0; //@line 16326
 HEAP32[$4 >> 2] = 192; //@line 16327
 HEAP32[$4 + 4 >> 2] = 0; //@line 16329
 HEAP32[$4 + 8 >> 2] = $6; //@line 16331
 HEAP32[$30 >> 2] = 824; //@line 16332
 $31 = $6 + 2400 | 0; //@line 16333
 if (($31 | 0) == ($4 | 0)) {
  $56 = HEAP32[208] | 0; //@line 16337
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 16338
  FUNCTION_TABLE_vi[$56 & 1023]($4); //@line 16339
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16342
   $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 16343
   HEAP32[$57 >> 2] = $12; //@line 16344
   $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 16345
   HEAP32[$58 >> 2] = $4; //@line 16346
   $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 16347
   HEAP32[$59 >> 2] = $14; //@line 16348
   $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 16349
   HEAP32[$60 >> 2] = $6; //@line 16350
   $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 16351
   HEAP32[$61 >> 2] = $16; //@line 16352
   sp = STACKTOP; //@line 16353
   return;
  }
  ___async_unwind = 0; //@line 16356
  HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16357
  $57 = $ReallocAsyncCtx12 + 4 | 0; //@line 16358
  HEAP32[$57 >> 2] = $12; //@line 16359
  $58 = $ReallocAsyncCtx12 + 8 | 0; //@line 16360
  HEAP32[$58 >> 2] = $4; //@line 16361
  $59 = $ReallocAsyncCtx12 + 12 | 0; //@line 16362
  HEAP32[$59 >> 2] = $14; //@line 16363
  $60 = $ReallocAsyncCtx12 + 16 | 0; //@line 16364
  HEAP32[$60 >> 2] = $6; //@line 16365
  $61 = $ReallocAsyncCtx12 + 20 | 0; //@line 16366
  HEAP32[$61 >> 2] = $16; //@line 16367
  sp = STACKTOP; //@line 16368
  return;
 }
 $33 = $6 + 2412 | 0; //@line 16371
 $34 = HEAP32[$33 >> 2] | 0; //@line 16372
 if (!$34) {
  $47 = HEAP32[207] | 0; //@line 16376
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 16377
  FUNCTION_TABLE_vii[$47 & 15]($31, $4); //@line 16378
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16381
   $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 16382
   HEAP32[$48 >> 2] = $12; //@line 16383
   $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 16384
   HEAP32[$49 >> 2] = $4; //@line 16385
   $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 16386
   HEAP32[$50 >> 2] = $14; //@line 16387
   $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 16388
   HEAP32[$51 >> 2] = $6; //@line 16389
   $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 16390
   HEAP32[$52 >> 2] = $30; //@line 16391
   $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 16392
   HEAP32[$53 >> 2] = $33; //@line 16393
   $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 16394
   HEAP32[$54 >> 2] = $16; //@line 16395
   sp = STACKTOP; //@line 16396
   return;
  }
  ___async_unwind = 0; //@line 16399
  HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16400
  $48 = $ReallocAsyncCtx11 + 4 | 0; //@line 16401
  HEAP32[$48 >> 2] = $12; //@line 16402
  $49 = $ReallocAsyncCtx11 + 8 | 0; //@line 16403
  HEAP32[$49 >> 2] = $4; //@line 16404
  $50 = $ReallocAsyncCtx11 + 12 | 0; //@line 16405
  HEAP32[$50 >> 2] = $14; //@line 16406
  $51 = $ReallocAsyncCtx11 + 16 | 0; //@line 16407
  HEAP32[$51 >> 2] = $6; //@line 16408
  $52 = $ReallocAsyncCtx11 + 20 | 0; //@line 16409
  HEAP32[$52 >> 2] = $30; //@line 16410
  $53 = $ReallocAsyncCtx11 + 24 | 0; //@line 16411
  HEAP32[$53 >> 2] = $33; //@line 16412
  $54 = $ReallocAsyncCtx11 + 28 | 0; //@line 16413
  HEAP32[$54 >> 2] = $16; //@line 16414
  sp = STACKTOP; //@line 16415
  return;
 } else {
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 16419
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 16420
  FUNCTION_TABLE_vi[$37 & 1023]($31); //@line 16421
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16424
   $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 16425
   HEAP32[$38 >> 2] = $33; //@line 16426
   $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 16427
   HEAP32[$39 >> 2] = $31; //@line 16428
   $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 16429
   HEAP32[$40 >> 2] = $4; //@line 16430
   $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 16431
   HEAP32[$41 >> 2] = $30; //@line 16432
   $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 16433
   HEAP32[$42 >> 2] = $12; //@line 16434
   $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 16435
   HEAP32[$43 >> 2] = $14; //@line 16436
   $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 16437
   HEAP32[$44 >> 2] = $6; //@line 16438
   $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 16439
   HEAP32[$45 >> 2] = $16; //@line 16440
   sp = STACKTOP; //@line 16441
   return;
  }
  ___async_unwind = 0; //@line 16444
  HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16445
  $38 = $ReallocAsyncCtx10 + 4 | 0; //@line 16446
  HEAP32[$38 >> 2] = $33; //@line 16447
  $39 = $ReallocAsyncCtx10 + 8 | 0; //@line 16448
  HEAP32[$39 >> 2] = $31; //@line 16449
  $40 = $ReallocAsyncCtx10 + 12 | 0; //@line 16450
  HEAP32[$40 >> 2] = $4; //@line 16451
  $41 = $ReallocAsyncCtx10 + 16 | 0; //@line 16452
  HEAP32[$41 >> 2] = $30; //@line 16453
  $42 = $ReallocAsyncCtx10 + 20 | 0; //@line 16454
  HEAP32[$42 >> 2] = $12; //@line 16455
  $43 = $ReallocAsyncCtx10 + 24 | 0; //@line 16456
  HEAP32[$43 >> 2] = $14; //@line 16457
  $44 = $ReallocAsyncCtx10 + 28 | 0; //@line 16458
  HEAP32[$44 >> 2] = $6; //@line 16459
  $45 = $ReallocAsyncCtx10 + 32 | 0; //@line 16460
  HEAP32[$45 >> 2] = $16; //@line 16461
  sp = STACKTOP; //@line 16462
  return;
 }
}
function __ZN7LoRaMac11schedule_txEv($0) {
 $0 = $0 | 0;
 var $$2 = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $100 = 0, $103 = 0, $11 = 0, $115 = 0, $12 = 0, $13 = 0, $137 = 0, $14 = 0, $142 = 0, $147 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $37 = 0, $38 = 0, $39 = 0, $42 = 0, $48 = 0, $53 = 0, $55 = 0, $6 = 0, $73 = 0, $74 = 0, $76 = 0, $8 = 0, $84 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 14829
 STACKTOP = STACKTOP + 48 | 0; //@line 14830
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14830
 $vararg_buffer1 = sp + 8 | 0; //@line 14831
 $vararg_buffer = sp; //@line 14832
 $1 = sp + 40 | 0; //@line 14833
 $2 = sp + 28 | 0; //@line 14834
 $3 = sp + 24 | 0; //@line 14835
 HEAP32[$3 >> 2] = 0; //@line 14836
 switch (HEAP8[$0 + 1932 >> 0] | 0) {
 case 0:
  {
   $6 = $0 + 1784 | 0; //@line 14841
   HEAP32[$6 >> 2] = 0; //@line 14842
   $$pre$phiZ2D = $6; //@line 14843
   break;
  }
 case -1:
  {
   $$2 = -1011; //@line 14847
   STACKTOP = sp; //@line 14848
   return $$2 | 0; //@line 14848
  }
 default:
  {
   $$pre$phiZ2D = $0 + 1784 | 0; //@line 14853
  }
 }
 $8 = HEAP8[$0 + 1183 >> 0] | 0; //@line 14857
 $11 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1788 >> 2] | 0) | 0; //@line 14860
 $12 = $0 + 1179 | 0; //@line 14861
 HEAP8[$12 >> 0] = 1; //@line 14862
 $13 = $0 + 4 | 0; //@line 14863
 $14 = $0 + 2376 | 0; //@line 14864
 $20 = $0 + 1792 | 0; //@line 14870
 __ZN7LoRaPHY17calculate_backoffEbbbhjj($13, (HEAP8[$14 >> 0] | 0) != 0, (HEAP8[$0 + 1180 >> 0] | 0) != 0, 1, $8, $11, HEAP32[$20 >> 2] | 0); //@line 14872
 $22 = HEAP32[$20 >> 2] | 0; //@line 14873
 $27 = (Math_imul($22, HEAPU16[$0 + 1934 >> 1] | 0) | 0) - $22 | 0; //@line 14878
 HEAP32[$$pre$phiZ2D >> 2] = $27; //@line 14879
 HEAP32[$2 >> 2] = $27; //@line 14880
 $28 = $0 + 1877 | 0; //@line 14881
 $30 = $2 + 8 | 0; //@line 14883
 HEAP8[$30 >> 0] = HEAP8[$28 >> 0] | 0; //@line 14884
 HEAP8[$12 >> 0] = 1; //@line 14885
 HEAP8[$2 + 10 >> 0] = 1; //@line 14887
 HEAP8[$2 + 9 >> 0] = HEAP8[$14 >> 0] | 0; //@line 14890
 HEAP32[$2 + 4 >> 2] = HEAP32[$0 + 1780 >> 2]; //@line 14894
 $37 = $0 + 1182 | 0; //@line 14895
 $38 = __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($13, $2, $37, $3, $$pre$phiZ2D) | 0; //@line 14896
 switch ($38 | 0) {
 case -1020:
  {
   $39 = HEAP32[$3 >> 2] | 0; //@line 14899
   if (!$39) {
    $$2 = 0; //@line 14902
    STACKTOP = sp; //@line 14903
    return $$2 | 0; //@line 14903
   }
   HEAP32[$vararg_buffer >> 2] = $39; //@line 14905
   _mbed_tracef(16, 12709, 12831, $vararg_buffer); //@line 14906
   $42 = HEAP32[$3 >> 2] | 0; //@line 14908
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14909
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1796 | 0, $42); //@line 14910
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 430; //@line 14913
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14915
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14917
    sp = STACKTOP; //@line 14918
    STACKTOP = sp; //@line 14919
    return 0; //@line 14919
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14921
   $$2 = 0; //@line 14922
   STACKTOP = sp; //@line 14923
   return $$2 | 0; //@line 14923
  }
 case -1022:
 case -1021:
  {
   $$2 = $38; //@line 14927
   STACKTOP = sp; //@line 14928
   return $$2 | 0; //@line 14928
  }
 default:
  {
   $48 = HEAP8[$30 >> 0] | 0; //@line 14935
   HEAP32[$vararg_buffer1 >> 2] = HEAPU8[$37 >> 0]; //@line 14936
   HEAP32[$vararg_buffer1 + 4 >> 2] = $48; //@line 14938
   _mbed_tracef(16, 12709, 12867, $vararg_buffer1); //@line 14939
   $53 = $0 + 1884 | 0; //@line 14944
   $55 = $0 + 1880 | 0; //@line 14946
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, __ZN7LoRaPHY15apply_DR_offsetEaa($13, HEAP8[$28 >> 0] | 0, HEAP8[$0 + 1909 >> 0] | 0) | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1940 | 0); //@line 14949
   __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($13, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$53 >> 0] | 0, HEAP32[$55 >> 2] | 0, $0 + 1964 | 0); //@line 14955
   do {
    if (!(HEAP8[$14 >> 0] | 0)) {
     HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1900 >> 2] | 0); //@line 14966
     $$sink = $0 + 1904 | 0; //@line 14968
    } else {
     $73 = HEAP16[$0 + 1440 >> 1] | 0; //@line 14971
     $74 = HEAP8[$28 >> 0] | 0; //@line 14972
     $76 = __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0 + 476 | 0) | 0; //@line 14974
     $84 = ($76 & 255) + ($73 & 65535) & 65535; //@line 14982
     if ($84 >>> 0 < 256 & $84 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($13, $74, (HEAP8[$0 + 1173 >> 0] | 0) != 0) | 0) & 255) >>> 0) {
      HEAP32[$0 + 1772 >> 2] = (HEAP32[$0 + 1952 >> 2] | 0) + (HEAP32[$0 + 1892 >> 2] | 0); //@line 14994
      $$sink = $0 + 1896 | 0; //@line 14996
      break;
     } else {
      $$2 = -1010; //@line 14999
      STACKTOP = sp; //@line 15000
      return $$2 | 0; //@line 15000
     }
    }
   } while (0);
   HEAP32[$0 + 1776 >> 2] = (HEAP32[$0 + 1976 >> 2] | 0) + (HEAP32[$$sink >> 2] | 0); //@line 15009
   $100 = $0 + 1178 | 0; //@line 15010
   if (HEAP8[$100 >> 0] | 0) {
    HEAP8[$100 >> 0] = 0; //@line 15014
   }
   $103 = HEAP8[$37 >> 0] | 0; //@line 15016
   HEAP8[$1 >> 0] = 0; //@line 15017
   HEAP8[$vararg_buffer1 >> 0] = $103; //@line 15018
   HEAP8[$vararg_buffer1 + 1 >> 0] = HEAP8[$28 >> 0] | 0; //@line 15021
   HEAP8[$vararg_buffer1 + 2 >> 0] = HEAP8[$0 + 1876 >> 0] | 0; //@line 15025
   HEAP32[$vararg_buffer1 + 4 >> 2] = HEAP32[$0 + 1924 >> 2]; //@line 15029
   HEAP32[$vararg_buffer1 + 8 >> 2] = HEAP32[$0 + 1928 >> 2]; //@line 15033
   $115 = $0 + 1440 | 0; //@line 15034
   HEAP16[$vararg_buffer1 + 12 >> 1] = HEAP16[$115 >> 1] | 0; //@line 15037
   $AsyncCtx10 = _emscripten_alloc_async_context(48, sp) | 0; //@line 15038
   __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($13, $vararg_buffer1, $1, $20) | 0; //@line 15039
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 431; //@line 15042
    HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 15044
    HEAP32[$AsyncCtx10 + 8 >> 2] = $28; //@line 15046
    HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 15048
    HEAP8[$AsyncCtx10 + 16 >> 0] = $103; //@line 15050
    HEAP32[$AsyncCtx10 + 20 >> 2] = $20; //@line 15052
    HEAP32[$AsyncCtx10 + 24 >> 2] = $14; //@line 15054
    HEAP32[$AsyncCtx10 + 28 >> 2] = $115; //@line 15056
    HEAP32[$AsyncCtx10 + 32 >> 2] = $13; //@line 15058
    HEAP32[$AsyncCtx10 + 36 >> 2] = $vararg_buffer1; //@line 15060
    HEAP32[$AsyncCtx10 + 40 >> 2] = $3; //@line 15062
    HEAP32[$AsyncCtx10 + 44 >> 2] = $2; //@line 15064
    sp = STACKTOP; //@line 15065
    STACKTOP = sp; //@line 15066
    return 0; //@line 15066
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 15068
   HEAP32[$0 + 2092 >> 2] = 1; //@line 15070
   HEAP32[$0 + 2056 >> 2] = 1; //@line 15072
   HEAP8[$0 + 2060 >> 0] = HEAP8[$28 >> 0] | 0; //@line 15075
   HEAP8[$0 + 2061 >> 0] = HEAP8[$1 >> 0] | 0; //@line 15078
   HEAP32[$0 + 2072 >> 2] = $103 & 255; //@line 15081
   $137 = HEAP32[$20 >> 2] | 0; //@line 15082
   HEAP32[$0 + 2064 >> 2] = $137; //@line 15084
   HEAP32[$0 + 2096 >> 2] = $137; //@line 15086
   if (!(HEAP8[$14 >> 0] | 0)) {
    $142 = $0 + 1701 | 0; //@line 15090
    HEAP8[$142 >> 0] = (HEAP8[$142 >> 0] | 0) + 1 << 24 >> 24; //@line 15093
   }
   $147 = HEAP16[$115 >> 1] & 255; //@line 15097
   $AsyncCtx6 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15098
   __ZN7LoRaPHY11handle_sendEPhh($13, $0 + 1185 | 0, $147); //@line 15099
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 432; //@line 15102
    HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 15104
    HEAP32[$AsyncCtx6 + 8 >> 2] = $vararg_buffer1; //@line 15106
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 15108
    HEAP32[$AsyncCtx6 + 16 >> 2] = $2; //@line 15110
    sp = STACKTOP; //@line 15111
    STACKTOP = sp; //@line 15112
    return 0; //@line 15112
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 15114
   $$2 = 0; //@line 15115
   STACKTOP = sp; //@line 15116
   return $$2 | 0; //@line 15116
  }
 }
 return 0; //@line 15119
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_249($0) {
 $0 = $0 | 0;
 var $$pre$i$i38 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16472
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16474
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16476
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16478
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16484
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16486
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16488
 $$pre$i$i38 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 16489
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = $$pre$i$i38; //@line 16491
 if ($$pre$i$i38 | 0) {
  $20 = HEAP32[$$pre$i$i38 + 8 >> 2] | 0; //@line 16495
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 16496
  FUNCTION_TABLE_vi[$20 & 1023]($2); //@line 16497
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 16500
   $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 16501
   HEAP32[$21 >> 2] = $2; //@line 16502
   $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 16503
   HEAP32[$22 >> 2] = $4; //@line 16504
   $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 16505
   HEAP32[$23 >> 2] = $6; //@line 16506
   $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 16507
   HEAP32[$24 >> 2] = $12; //@line 16508
   $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 16509
   HEAP32[$25 >> 2] = $14; //@line 16510
   $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 16511
   HEAP32[$26 >> 2] = $16; //@line 16512
   sp = STACKTOP; //@line 16513
   return;
  }
  ___async_unwind = 0; //@line 16516
  HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 16517
  $21 = $ReallocAsyncCtx9 + 4 | 0; //@line 16518
  HEAP32[$21 >> 2] = $2; //@line 16519
  $22 = $ReallocAsyncCtx9 + 8 | 0; //@line 16520
  HEAP32[$22 >> 2] = $4; //@line 16521
  $23 = $ReallocAsyncCtx9 + 12 | 0; //@line 16522
  HEAP32[$23 >> 2] = $6; //@line 16523
  $24 = $ReallocAsyncCtx9 + 16 | 0; //@line 16524
  HEAP32[$24 >> 2] = $12; //@line 16525
  $25 = $ReallocAsyncCtx9 + 20 | 0; //@line 16526
  HEAP32[$25 >> 2] = $14; //@line 16527
  $26 = $ReallocAsyncCtx9 + 24 | 0; //@line 16528
  HEAP32[$26 >> 2] = $16; //@line 16529
  sp = STACKTOP; //@line 16530
  return;
 }
 $27 = $4 + 12 | 0; //@line 16533
 HEAP32[$4 >> 2] = 192; //@line 16534
 HEAP32[$4 + 4 >> 2] = 0; //@line 16536
 HEAP32[$4 + 8 >> 2] = $6; //@line 16538
 HEAP32[$27 >> 2] = 824; //@line 16539
 $28 = $6 + 2400 | 0; //@line 16540
 if (($28 | 0) == ($4 | 0)) {
  $53 = HEAP32[208] | 0; //@line 16544
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 16545
  FUNCTION_TABLE_vi[$53 & 1023]($4); //@line 16546
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16549
   $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 16550
   HEAP32[$54 >> 2] = $12; //@line 16551
   $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 16552
   HEAP32[$55 >> 2] = $4; //@line 16553
   $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 16554
   HEAP32[$56 >> 2] = $14; //@line 16555
   $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 16556
   HEAP32[$57 >> 2] = $6; //@line 16557
   $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 16558
   HEAP32[$58 >> 2] = $16; //@line 16559
   sp = STACKTOP; //@line 16560
   return;
  }
  ___async_unwind = 0; //@line 16563
  HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16564
  $54 = $ReallocAsyncCtx12 + 4 | 0; //@line 16565
  HEAP32[$54 >> 2] = $12; //@line 16566
  $55 = $ReallocAsyncCtx12 + 8 | 0; //@line 16567
  HEAP32[$55 >> 2] = $4; //@line 16568
  $56 = $ReallocAsyncCtx12 + 12 | 0; //@line 16569
  HEAP32[$56 >> 2] = $14; //@line 16570
  $57 = $ReallocAsyncCtx12 + 16 | 0; //@line 16571
  HEAP32[$57 >> 2] = $6; //@line 16572
  $58 = $ReallocAsyncCtx12 + 20 | 0; //@line 16573
  HEAP32[$58 >> 2] = $16; //@line 16574
  sp = STACKTOP; //@line 16575
  return;
 }
 $30 = $6 + 2412 | 0; //@line 16578
 $31 = HEAP32[$30 >> 2] | 0; //@line 16579
 if (!$31) {
  $44 = HEAP32[207] | 0; //@line 16583
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 16584
  FUNCTION_TABLE_vii[$44 & 15]($28, $4); //@line 16585
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16588
   $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 16589
   HEAP32[$45 >> 2] = $12; //@line 16590
   $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 16591
   HEAP32[$46 >> 2] = $4; //@line 16592
   $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 16593
   HEAP32[$47 >> 2] = $14; //@line 16594
   $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 16595
   HEAP32[$48 >> 2] = $6; //@line 16596
   $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 16597
   HEAP32[$49 >> 2] = $27; //@line 16598
   $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 16599
   HEAP32[$50 >> 2] = $30; //@line 16600
   $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 16601
   HEAP32[$51 >> 2] = $16; //@line 16602
   sp = STACKTOP; //@line 16603
   return;
  }
  ___async_unwind = 0; //@line 16606
  HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16607
  $45 = $ReallocAsyncCtx11 + 4 | 0; //@line 16608
  HEAP32[$45 >> 2] = $12; //@line 16609
  $46 = $ReallocAsyncCtx11 + 8 | 0; //@line 16610
  HEAP32[$46 >> 2] = $4; //@line 16611
  $47 = $ReallocAsyncCtx11 + 12 | 0; //@line 16612
  HEAP32[$47 >> 2] = $14; //@line 16613
  $48 = $ReallocAsyncCtx11 + 16 | 0; //@line 16614
  HEAP32[$48 >> 2] = $6; //@line 16615
  $49 = $ReallocAsyncCtx11 + 20 | 0; //@line 16616
  HEAP32[$49 >> 2] = $27; //@line 16617
  $50 = $ReallocAsyncCtx11 + 24 | 0; //@line 16618
  HEAP32[$50 >> 2] = $30; //@line 16619
  $51 = $ReallocAsyncCtx11 + 28 | 0; //@line 16620
  HEAP32[$51 >> 2] = $16; //@line 16621
  sp = STACKTOP; //@line 16622
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 16626
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 16627
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 16628
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16631
   $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 16632
   HEAP32[$35 >> 2] = $30; //@line 16633
   $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 16634
   HEAP32[$36 >> 2] = $28; //@line 16635
   $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 16636
   HEAP32[$37 >> 2] = $4; //@line 16637
   $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 16638
   HEAP32[$38 >> 2] = $27; //@line 16639
   $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 16640
   HEAP32[$39 >> 2] = $12; //@line 16641
   $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 16642
   HEAP32[$40 >> 2] = $14; //@line 16643
   $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 16644
   HEAP32[$41 >> 2] = $6; //@line 16645
   $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 16646
   HEAP32[$42 >> 2] = $16; //@line 16647
   sp = STACKTOP; //@line 16648
   return;
  }
  ___async_unwind = 0; //@line 16651
  HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16652
  $35 = $ReallocAsyncCtx10 + 4 | 0; //@line 16653
  HEAP32[$35 >> 2] = $30; //@line 16654
  $36 = $ReallocAsyncCtx10 + 8 | 0; //@line 16655
  HEAP32[$36 >> 2] = $28; //@line 16656
  $37 = $ReallocAsyncCtx10 + 12 | 0; //@line 16657
  HEAP32[$37 >> 2] = $4; //@line 16658
  $38 = $ReallocAsyncCtx10 + 16 | 0; //@line 16659
  HEAP32[$38 >> 2] = $27; //@line 16660
  $39 = $ReallocAsyncCtx10 + 20 | 0; //@line 16661
  HEAP32[$39 >> 2] = $12; //@line 16662
  $40 = $ReallocAsyncCtx10 + 24 | 0; //@line 16663
  HEAP32[$40 >> 2] = $14; //@line 16664
  $41 = $ReallocAsyncCtx10 + 28 | 0; //@line 16665
  HEAP32[$41 >> 2] = $6; //@line 16666
  $42 = $ReallocAsyncCtx10 + 32 | 0; //@line 16667
  HEAP32[$42 >> 2] = $16; //@line 16668
  sp = STACKTOP; //@line 16669
  return;
 }
}
function _mbedtls_gcm_setkey__async_cb($0) {
 $0 = $0 | 0;
 var $$0$i = 0, $103 = 0, $105 = 0, $106 = 0, $107 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $116 = 0, $121 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $137 = 0, $139 = 0, $144 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $155 = 0, $156 = 0, $157 = 0, $160 = 0, $162 = 0, $167 = 0, $171 = 0, $172 = 0, $174 = 0, $178 = 0, $179 = 0, $181 = 0, $185 = 0, $186 = 0, $188 = 0, $192 = 0, $193 = 0, $195 = 0, $199 = 0, $200 = 0, $202 = 0, $206 = 0, $207 = 0, $209 = 0, $213 = 0, $214 = 0, $216 = 0, $220 = 0, $221 = 0, $223 = 0, $230 = 0, $237 = 0, $244 = 0, $251 = 0, $258 = 0, $265 = 0, $27 = 0, $272 = 0, $279 = 0, $286 = 0, $293 = 0, $300 = 0, $307 = 0, $314 = 0, $321 = 0, $4 = 0, $45 = 0, $6 = 0, $63 = 0, $81 = 0, $83 = 0, $88 = 0, $93 = 0, $98 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25086
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25088
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25092
 if (!$AsyncRetVal) {
  $27 = (HEAPU8[$4 + 1 >> 0] | 0) << 16 | (HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0) << 24 | (HEAPU8[$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$4 + 3 >> 0] | 0); //@line 25111
  $45 = (HEAPU8[$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$4 + 7 >> 0] | 0); //@line 25129
  $63 = (HEAPU8[$4 + 9 >> 0] | 0) << 16 | (HEAPU8[$4 + 8 >> 0] | 0) << 24 | (HEAPU8[$4 + 10 >> 0] | 0) << 8 | (HEAPU8[$4 + 11 >> 0] | 0); //@line 25147
  $81 = (HEAPU8[$4 + 13 >> 0] | 0) << 16 | (HEAPU8[$4 + 12 >> 0] | 0) << 24 | (HEAPU8[$4 + 14 >> 0] | 0) << 8 | (HEAPU8[$4 + 15 >> 0] | 0); //@line 25165
  $83 = $6 + 136 | 0; //@line 25167
  HEAP32[$83 >> 2] = $81; //@line 25169
  HEAP32[$83 + 4 >> 2] = $63; //@line 25172
  $88 = $6 + 264 | 0; //@line 25174
  HEAP32[$88 >> 2] = $45; //@line 25176
  HEAP32[$88 + 4 >> 2] = $27; //@line 25179
  $93 = $6 + 200 | 0; //@line 25181
  HEAP32[$93 >> 2] = 0; //@line 25183
  HEAP32[$93 + 4 >> 2] = 0; //@line 25186
  $98 = $6 + 72 | 0; //@line 25188
  HEAP32[$98 >> 2] = 0; //@line 25190
  HEAP32[$98 + 4 >> 2] = 0; //@line 25193
  $103 = _i64Subtract(0, 0, $81 & 1 | 0, 0) | 0; //@line 25195
  $105 = _bitshift64Shl($45 | 0, 0, 63) | 0; //@line 25197
  $106 = tempRet0; //@line 25198
  $107 = _bitshift64Lshr($81 | 0, $63 | 0, 1) | 0; //@line 25199
  $109 = $107 | $105; //@line 25201
  $110 = tempRet0 | $106; //@line 25202
  $111 = _bitshift64Lshr($45 | 0, $27 | 0, 1) | 0; //@line 25203
  $112 = tempRet0; //@line 25204
  $114 = $103 & -520093696 ^ $112; //@line 25206
  $116 = $6 + 104 | 0; //@line 25208
  HEAP32[$116 >> 2] = $109; //@line 25210
  HEAP32[$116 + 4 >> 2] = $110; //@line 25213
  $121 = $6 + 232 | 0; //@line 25215
  HEAP32[$121 >> 2] = $111; //@line 25217
  HEAP32[$121 + 4 >> 2] = $114; //@line 25220
  $126 = _i64Subtract(0, 0, $107 & 1 | 0, 0) | 0; //@line 25222
  $128 = _bitshift64Shl($111 | 0, $112 | 0, 63) | 0; //@line 25224
  $129 = tempRet0; //@line 25225
  $130 = _bitshift64Lshr($109 | 0, $110 | 0, 1) | 0; //@line 25226
  $132 = $130 | $128; //@line 25228
  $133 = tempRet0 | $129; //@line 25229
  $134 = _bitshift64Lshr($111 | 0, $114 | 0, 1) | 0; //@line 25230
  $135 = tempRet0; //@line 25231
  $137 = $126 & -520093696 ^ $135; //@line 25233
  $139 = $6 + 88 | 0; //@line 25235
  HEAP32[$139 >> 2] = $132; //@line 25237
  HEAP32[$139 + 4 >> 2] = $133; //@line 25240
  $144 = $6 + 216 | 0; //@line 25242
  HEAP32[$144 >> 2] = $134; //@line 25244
  HEAP32[$144 + 4 >> 2] = $137; //@line 25247
  $149 = _i64Subtract(0, 0, $130 & 1 | 0, 0) | 0; //@line 25249
  $151 = _bitshift64Shl($134 | 0, $135 | 0, 63) | 0; //@line 25251
  $152 = tempRet0; //@line 25252
  $153 = _bitshift64Lshr($132 | 0, $133 | 0, 1) | 0; //@line 25253
  $155 = $151 | $153; //@line 25255
  $156 = $152 | tempRet0; //@line 25256
  $157 = _bitshift64Lshr($134 | 0, $137 | 0, 1) | 0; //@line 25257
  $160 = $149 & -520093696 ^ tempRet0; //@line 25260
  $162 = $6 + 80 | 0; //@line 25262
  HEAP32[$162 >> 2] = $155; //@line 25264
  HEAP32[$162 + 4 >> 2] = $156; //@line 25267
  $167 = $6 + 208 | 0; //@line 25269
  HEAP32[$167 >> 2] = $157; //@line 25271
  HEAP32[$167 + 4 >> 2] = $160; //@line 25274
  $171 = $157 ^ $134; //@line 25275
  $172 = $160 ^ $137; //@line 25276
  $174 = $6 + 224 | 0; //@line 25278
  HEAP32[$174 >> 2] = $171; //@line 25280
  HEAP32[$174 + 4 >> 2] = $172; //@line 25283
  $178 = $155 ^ $132; //@line 25284
  $179 = $156 ^ $133; //@line 25285
  $181 = $6 + 96 | 0; //@line 25287
  HEAP32[$181 >> 2] = $178; //@line 25289
  HEAP32[$181 + 4 >> 2] = $179; //@line 25292
  $185 = $157 ^ $111; //@line 25293
  $186 = $160 ^ $114; //@line 25294
  $188 = $6 + 240 | 0; //@line 25296
  HEAP32[$188 >> 2] = $185; //@line 25298
  HEAP32[$188 + 4 >> 2] = $186; //@line 25301
  $192 = $155 ^ $109; //@line 25302
  $193 = $156 ^ $110; //@line 25303
  $195 = $6 + 112 | 0; //@line 25305
  HEAP32[$195 >> 2] = $192; //@line 25307
  HEAP32[$195 + 4 >> 2] = $193; //@line 25310
  $199 = $134 ^ $111; //@line 25311
  $200 = $137 ^ $114; //@line 25312
  $202 = $6 + 248 | 0; //@line 25314
  HEAP32[$202 >> 2] = $199; //@line 25316
  HEAP32[$202 + 4 >> 2] = $200; //@line 25319
  $206 = $132 ^ $109; //@line 25320
  $207 = $133 ^ $110; //@line 25321
  $209 = $6 + 120 | 0; //@line 25323
  HEAP32[$209 >> 2] = $206; //@line 25325
  HEAP32[$209 + 4 >> 2] = $207; //@line 25328
  $213 = $171 ^ $111; //@line 25329
  $214 = $172 ^ $114; //@line 25330
  $216 = $6 + 256 | 0; //@line 25332
  HEAP32[$216 >> 2] = $213; //@line 25334
  HEAP32[$216 + 4 >> 2] = $214; //@line 25337
  $220 = $178 ^ $109; //@line 25338
  $221 = $179 ^ $110; //@line 25339
  $223 = $6 + 128 | 0; //@line 25341
  HEAP32[$223 >> 2] = $220; //@line 25343
  HEAP32[$223 + 4 >> 2] = $221; //@line 25346
  $230 = $6 + 272 | 0; //@line 25350
  HEAP32[$230 >> 2] = $157 ^ $45; //@line 25352
  HEAP32[$230 + 4 >> 2] = $160 ^ $27; //@line 25355
  $237 = $6 + 144 | 0; //@line 25359
  HEAP32[$237 >> 2] = $155 ^ $81; //@line 25361
  HEAP32[$237 + 4 >> 2] = $156 ^ $63; //@line 25364
  $244 = $6 + 280 | 0; //@line 25368
  HEAP32[$244 >> 2] = $134 ^ $45; //@line 25370
  HEAP32[$244 + 4 >> 2] = $137 ^ $27; //@line 25373
  $251 = $6 + 152 | 0; //@line 25377
  HEAP32[$251 >> 2] = $132 ^ $81; //@line 25379
  HEAP32[$251 + 4 >> 2] = $133 ^ $63; //@line 25382
  $258 = $6 + 288 | 0; //@line 25386
  HEAP32[$258 >> 2] = $171 ^ $45; //@line 25388
  HEAP32[$258 + 4 >> 2] = $172 ^ $27; //@line 25391
  $265 = $6 + 160 | 0; //@line 25395
  HEAP32[$265 >> 2] = $178 ^ $81; //@line 25397
  HEAP32[$265 + 4 >> 2] = $179 ^ $63; //@line 25400
  $272 = $6 + 296 | 0; //@line 25404
  HEAP32[$272 >> 2] = $111 ^ $45; //@line 25406
  HEAP32[$272 + 4 >> 2] = $114 ^ $27; //@line 25409
  $279 = $6 + 168 | 0; //@line 25413
  HEAP32[$279 >> 2] = $109 ^ $81; //@line 25415
  HEAP32[$279 + 4 >> 2] = $110 ^ $63; //@line 25418
  $286 = $6 + 304 | 0; //@line 25422
  HEAP32[$286 >> 2] = $185 ^ $45; //@line 25424
  HEAP32[$286 + 4 >> 2] = $186 ^ $27; //@line 25427
  $293 = $6 + 176 | 0; //@line 25431
  HEAP32[$293 >> 2] = $192 ^ $81; //@line 25433
  HEAP32[$293 + 4 >> 2] = $193 ^ $63; //@line 25436
  $300 = $6 + 312 | 0; //@line 25440
  HEAP32[$300 >> 2] = $199 ^ $45; //@line 25442
  HEAP32[$300 + 4 >> 2] = $200 ^ $27; //@line 25445
  $307 = $6 + 184 | 0; //@line 25449
  HEAP32[$307 >> 2] = $206 ^ $81; //@line 25451
  HEAP32[$307 + 4 >> 2] = $207 ^ $63; //@line 25454
  $314 = $6 + 320 | 0; //@line 25458
  HEAP32[$314 >> 2] = $213 ^ $45; //@line 25460
  HEAP32[$314 + 4 >> 2] = $214 ^ $27; //@line 25463
  $321 = $6 + 192 | 0; //@line 25467
  HEAP32[$321 >> 2] = $220 ^ $81; //@line 25469
  HEAP32[$321 + 4 >> 2] = $221 ^ $63; //@line 25472
  $$0$i = 0; //@line 25473
 } else {
  $$0$i = $AsyncRetVal; //@line 25475
 }
 HEAP32[___async_retval >> 2] = $$0$i; //@line 25478
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $103 = 0, $106 = 0, $107 = 0, $109 = 0, $116 = 0, $119 = 0, $12 = 0, $121 = 0, $122 = 0, $127 = 0, $130 = 0, $19 = 0, $20 = 0, $23 = 0, $25 = 0, $30 = 0, $41 = 0, $42 = 0, $43 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $7 = 0, $85 = 0, $88 = 0, $90 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx6 = 0, $switch$selectcmp$i = 0, $switch$selectcmp4$i = 0, sp = 0;
 sp = STACKTOP; //@line 20643
 $6 = $1 + 1 | 0; //@line 20646
 $7 = HEAP8[$6 >> 0] | 0; //@line 20647
 $10 = HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + ($7 << 24 >> 24) >> 0] | 0; //@line 20650
 $12 = HEAP32[$0 + 124 >> 2] | 0; //@line 20652
 $19 = $1 + 2 | 0; //@line 20659
 $20 = HEAP8[$19 >> 0] | 0; //@line 20660
 $23 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 20663
 $25 = $20 << 24 >> 24 > $23 << 24 >> 24 ? $20 : $23; //@line 20665
 HEAP8[$19 >> 0] = $25; //@line 20666
 $30 = HEAP32[(HEAP32[$0 + 80 >> 2] | 0) + (($7 & 255) << 2) >> 2] | 0; //@line 20671
 $switch$selectcmp$i = ($30 | 0) == 25e4; //@line 20672
 $switch$selectcmp4$i = ($30 | 0) == 5e5; //@line 20673
 $41 = ~~+Math_floor(+(+HEAPF32[$1 + 4 >> 2] - +($25 << 24 >> 24 << 1 >>> 0) - +HEAPF32[$1 + 8 >> 2])); //@line 20684
 $42 = $0 + 4 | 0; //@line 20685
 $43 = HEAP32[$42 >> 2] | 0; //@line 20686
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 72 >> 2] | 0; //@line 20689
 $AsyncCtx = _emscripten_alloc_async_context(44, sp) | 0; //@line 20690
 FUNCTION_TABLE_vi[$46 & 1023]($43); //@line 20691
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 526; //@line 20694
  HEAP32[$AsyncCtx + 4 >> 2] = $42; //@line 20696
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 20698
  HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 20700
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 20702
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 20704
  HEAP8[$AsyncCtx + 24 >> 0] = $switch$selectcmp$i & 1; //@line 20707
  HEAP8[$AsyncCtx + 25 >> 0] = $switch$selectcmp4$i & 1; //@line 20710
  HEAP8[$AsyncCtx + 26 >> 0] = $10; //@line 20712
  HEAP8[$AsyncCtx + 27 >> 0] = $41; //@line 20714
  HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 20716
  HEAP32[$AsyncCtx + 32 >> 2] = $3; //@line 20718
  HEAP32[$AsyncCtx + 36 >> 2] = $19; //@line 20720
  HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 20722
  sp = STACKTOP; //@line 20723
  return 0; //@line 20724
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 20726
 $60 = HEAP32[$42 >> 2] | 0; //@line 20727
 $63 = HEAP32[(HEAP32[$60 >> 2] | 0) + 32 >> 2] | 0; //@line 20730
 $67 = HEAP32[$12 + ((HEAPU8[$1 >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 20734
 $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 20735
 FUNCTION_TABLE_vii[$63 & 15]($60, $67); //@line 20736
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 527; //@line 20739
  HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 20741
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 20743
  HEAP32[$AsyncCtx2 + 12 >> 2] = $42; //@line 20745
  HEAP8[$AsyncCtx2 + 16 >> 0] = $switch$selectcmp$i & 1; //@line 20748
  HEAP8[$AsyncCtx2 + 17 >> 0] = $switch$selectcmp4$i & 1; //@line 20751
  HEAP8[$AsyncCtx2 + 18 >> 0] = $10; //@line 20753
  HEAP8[$AsyncCtx2 + 19 >> 0] = $41; //@line 20755
  HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 20757
  HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 20759
  HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 20761
  HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 20763
  sp = STACKTOP; //@line 20764
  return 0; //@line 20765
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20767
 $85 = HEAP32[$42 >> 2] | 0; //@line 20774
 $88 = HEAP32[(HEAP32[$85 >> 2] | 0) + 20 >> 2] | 0; //@line 20777
 $90 = $switch$selectcmp4$i ? 2 : $switch$selectcmp$i & 1; //@line 20779
 $91 = $10 << 24 >> 24; //@line 20780
 do {
  if ((HEAP8[$6 >> 0] | 0) == (HEAPU8[$0 + 27 >> 0] | 0)) {
   $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20784
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 0, $41, 25e3, $90, $91 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 20785
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 528; //@line 20788
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 20790
    HEAP32[$AsyncCtx6 + 8 >> 2] = $1; //@line 20792
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 20794
    HEAP32[$AsyncCtx6 + 16 >> 2] = $19; //@line 20796
    HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 20798
    sp = STACKTOP; //@line 20799
    return 0; //@line 20800
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 20802
    $$0 = 0; //@line 20803
    break;
   }
  } else {
   $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 20807
   FUNCTION_TABLE_viiiiiiiiiiiiii[$88 & 1]($85, 1, $41, 0, $90, $91, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 20808
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 529; //@line 20811
    HEAP32[$AsyncCtx10 + 4 >> 2] = $42; //@line 20813
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 20815
    HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 20817
    HEAP32[$AsyncCtx10 + 16 >> 2] = $19; //@line 20819
    HEAP32[$AsyncCtx10 + 20 >> 2] = $2; //@line 20821
    sp = STACKTOP; //@line 20822
    return 0; //@line 20823
   } else {
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 20825
    $$0 = 1; //@line 20826
    break;
   }
  }
 } while (0);
 $103 = HEAP32[$42 >> 2] | 0; //@line 20831
 $106 = HEAP32[(HEAP32[$103 >> 2] | 0) + 44 >> 2] | 0; //@line 20834
 $107 = $1 + 12 | 0; //@line 20835
 $109 = HEAP16[$107 >> 1] & 255; //@line 20837
 $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 20838
 FUNCTION_TABLE_viii[$106 & 7]($103, $$0, $109); //@line 20839
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 530; //@line 20842
  HEAP32[$AsyncCtx14 + 4 >> 2] = $42; //@line 20844
  HEAP32[$AsyncCtx14 + 8 >> 2] = $107; //@line 20846
  HEAP32[$AsyncCtx14 + 12 >> 2] = $$0; //@line 20848
  HEAP32[$AsyncCtx14 + 16 >> 2] = $3; //@line 20850
  HEAP32[$AsyncCtx14 + 20 >> 2] = $19; //@line 20852
  HEAP32[$AsyncCtx14 + 24 >> 2] = $2; //@line 20854
  sp = STACKTOP; //@line 20855
  return 0; //@line 20856
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 20858
 $116 = HEAP32[$42 >> 2] | 0; //@line 20859
 $119 = HEAP32[(HEAP32[$116 >> 2] | 0) + 52 >> 2] | 0; //@line 20862
 $121 = HEAP16[$107 >> 1] & 255; //@line 20864
 $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 20865
 $122 = FUNCTION_TABLE_iiii[$119 & 31]($116, $$0, $121) | 0; //@line 20866
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 531; //@line 20869
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 20871
  HEAP32[$AsyncCtx17 + 8 >> 2] = $42; //@line 20873
  HEAP32[$AsyncCtx17 + 12 >> 2] = $19; //@line 20875
  HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 20877
  sp = STACKTOP; //@line 20878
  return 0; //@line 20879
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 20881
 HEAP32[$3 >> 2] = $122; //@line 20882
 $127 = HEAP32[$42 >> 2] | 0; //@line 20883
 $130 = HEAP32[(HEAP32[$127 >> 2] | 0) + 76 >> 2] | 0; //@line 20886
 $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 20887
 FUNCTION_TABLE_vi[$130 & 1023]($127); //@line 20888
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 532; //@line 20891
  HEAP32[$AsyncCtx20 + 4 >> 2] = $19; //@line 20893
  HEAP32[$AsyncCtx20 + 8 >> 2] = $2; //@line 20895
  sp = STACKTOP; //@line 20896
  return 0; //@line 20897
 } else {
  _emscripten_free_async_context($AsyncCtx20 | 0); //@line 20899
  HEAP8[$2 >> 0] = HEAP8[$19 >> 0] | 0; //@line 20901
  return 1; //@line 20902
 }
 return 0; //@line 20904
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_251($0) {
 $0 = $0 | 0;
 var $$pre125 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 16837
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16839
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16841
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16843
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16845
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16847
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16849
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16851
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16853
 $$pre125 = HEAP32[$8 >> 2] | 0; //@line 16854
 if ($$pre125 | 0) {
  $19 = HEAP32[$$pre125 + 4 >> 2] | 0; //@line 16858
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 16859
  FUNCTION_TABLE_vii[$19 & 15]($4, $6); //@line 16860
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16863
   $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 16864
   HEAP32[$20 >> 2] = $10; //@line 16865
   $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 16866
   HEAP32[$21 >> 2] = $6; //@line 16867
   $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 16868
   HEAP32[$22 >> 2] = $12; //@line 16869
   $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 16870
   HEAP32[$23 >> 2] = $14; //@line 16871
   $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 16872
   HEAP32[$24 >> 2] = $8; //@line 16873
   $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 16874
   HEAP32[$25 >> 2] = $2; //@line 16875
   $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 16876
   HEAP32[$26 >> 2] = $16; //@line 16877
   sp = STACKTOP; //@line 16878
   return;
  }
  ___async_unwind = 0; //@line 16881
  HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16882
  $20 = $ReallocAsyncCtx11 + 4 | 0; //@line 16883
  HEAP32[$20 >> 2] = $10; //@line 16884
  $21 = $ReallocAsyncCtx11 + 8 | 0; //@line 16885
  HEAP32[$21 >> 2] = $6; //@line 16886
  $22 = $ReallocAsyncCtx11 + 12 | 0; //@line 16887
  HEAP32[$22 >> 2] = $12; //@line 16888
  $23 = $ReallocAsyncCtx11 + 16 | 0; //@line 16889
  HEAP32[$23 >> 2] = $14; //@line 16890
  $24 = $ReallocAsyncCtx11 + 20 | 0; //@line 16891
  HEAP32[$24 >> 2] = $8; //@line 16892
  $25 = $ReallocAsyncCtx11 + 24 | 0; //@line 16893
  HEAP32[$25 >> 2] = $2; //@line 16894
  $26 = $ReallocAsyncCtx11 + 28 | 0; //@line 16895
  HEAP32[$26 >> 2] = $16; //@line 16896
  sp = STACKTOP; //@line 16897
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 16900
 $27 = $12 + 12 | 0; //@line 16901
 HEAP32[$12 >> 2] = 196; //@line 16902
 HEAP32[$12 + 4 >> 2] = 0; //@line 16904
 HEAP32[$12 + 8 >> 2] = $14; //@line 16906
 HEAP32[$27 >> 2] = 824; //@line 16907
 $28 = $14 + 2432 | 0; //@line 16908
 if (($28 | 0) == ($12 | 0)) {
  $51 = HEAP32[208] | 0; //@line 16912
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 16913
  FUNCTION_TABLE_vi[$51 & 1023]($12); //@line 16914
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 16917
   $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 16918
   HEAP32[$52 >> 2] = $12; //@line 16919
   $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 16920
   HEAP32[$53 >> 2] = $14; //@line 16921
   $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 16922
   HEAP32[$54 >> 2] = $10; //@line 16923
   $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 16924
   HEAP32[$55 >> 2] = $16; //@line 16925
   sp = STACKTOP; //@line 16926
   return;
  }
  ___async_unwind = 0; //@line 16929
  HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 16930
  $52 = $ReallocAsyncCtx15 + 4 | 0; //@line 16931
  HEAP32[$52 >> 2] = $12; //@line 16932
  $53 = $ReallocAsyncCtx15 + 8 | 0; //@line 16933
  HEAP32[$53 >> 2] = $14; //@line 16934
  $54 = $ReallocAsyncCtx15 + 12 | 0; //@line 16935
  HEAP32[$54 >> 2] = $10; //@line 16936
  $55 = $ReallocAsyncCtx15 + 16 | 0; //@line 16937
  HEAP32[$55 >> 2] = $16; //@line 16938
  sp = STACKTOP; //@line 16939
  return;
 }
 $30 = $14 + 2444 | 0; //@line 16942
 $31 = HEAP32[$30 >> 2] | 0; //@line 16943
 if (!$31) {
  $43 = HEAP32[207] | 0; //@line 16947
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 16948
  FUNCTION_TABLE_vii[$43 & 15]($28, $12); //@line 16949
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 16952
   $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 16953
   HEAP32[$44 >> 2] = $27; //@line 16954
   $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 16955
   HEAP32[$45 >> 2] = $30; //@line 16956
   $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 16957
   HEAP32[$46 >> 2] = $12; //@line 16958
   $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 16959
   HEAP32[$47 >> 2] = $14; //@line 16960
   $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 16961
   HEAP32[$48 >> 2] = $10; //@line 16962
   $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 16963
   HEAP32[$49 >> 2] = $16; //@line 16964
   sp = STACKTOP; //@line 16965
   return;
  }
  ___async_unwind = 0; //@line 16968
  HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 16969
  $44 = $ReallocAsyncCtx14 + 4 | 0; //@line 16970
  HEAP32[$44 >> 2] = $27; //@line 16971
  $45 = $ReallocAsyncCtx14 + 8 | 0; //@line 16972
  HEAP32[$45 >> 2] = $30; //@line 16973
  $46 = $ReallocAsyncCtx14 + 12 | 0; //@line 16974
  HEAP32[$46 >> 2] = $12; //@line 16975
  $47 = $ReallocAsyncCtx14 + 16 | 0; //@line 16976
  HEAP32[$47 >> 2] = $14; //@line 16977
  $48 = $ReallocAsyncCtx14 + 20 | 0; //@line 16978
  HEAP32[$48 >> 2] = $10; //@line 16979
  $49 = $ReallocAsyncCtx14 + 24 | 0; //@line 16980
  HEAP32[$49 >> 2] = $16; //@line 16981
  sp = STACKTOP; //@line 16982
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 16986
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 16987
  FUNCTION_TABLE_vi[$34 & 1023]($28); //@line 16988
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 16991
   $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 16992
   HEAP32[$35 >> 2] = $27; //@line 16993
   $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 16994
   HEAP32[$36 >> 2] = $30; //@line 16995
   $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 16996
   HEAP32[$37 >> 2] = $28; //@line 16997
   $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 16998
   HEAP32[$38 >> 2] = $12; //@line 16999
   $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 17000
   HEAP32[$39 >> 2] = $14; //@line 17001
   $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 17002
   HEAP32[$40 >> 2] = $10; //@line 17003
   $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 17004
   HEAP32[$41 >> 2] = $16; //@line 17005
   sp = STACKTOP; //@line 17006
   return;
  }
  ___async_unwind = 0; //@line 17009
  HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 17010
  $35 = $ReallocAsyncCtx13 + 4 | 0; //@line 17011
  HEAP32[$35 >> 2] = $27; //@line 17012
  $36 = $ReallocAsyncCtx13 + 8 | 0; //@line 17013
  HEAP32[$36 >> 2] = $30; //@line 17014
  $37 = $ReallocAsyncCtx13 + 12 | 0; //@line 17015
  HEAP32[$37 >> 2] = $28; //@line 17016
  $38 = $ReallocAsyncCtx13 + 16 | 0; //@line 17017
  HEAP32[$38 >> 2] = $12; //@line 17018
  $39 = $ReallocAsyncCtx13 + 20 | 0; //@line 17019
  HEAP32[$39 >> 2] = $14; //@line 17020
  $40 = $ReallocAsyncCtx13 + 24 | 0; //@line 17021
  HEAP32[$40 >> 2] = $10; //@line 17022
  $41 = $ReallocAsyncCtx13 + 28 | 0; //@line 17023
  HEAP32[$41 >> 2] = $16; //@line 17024
  sp = STACKTOP; //@line 17025
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $15 = 0, $17 = 0, $23 = 0, $26 = 0, $29 = 0, $30 = 0, $33 = 0, $36 = 0, $5 = 0, $53 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $61 = 0, $66 = 0, $67 = 0, $70 = 0, $73 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 9557
 STACKTOP = STACKTOP + 32 | 0; //@line 9558
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9558
 $vararg_buffer = sp; //@line 9559
 $1 = sp + 16 | 0; //@line 9560
 $5 = (HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 4 >> 2] | 0) == 1; //@line 9564
 $6 = __ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0; //@line 9565
 if ($5) {
  if (HEAP32[$6 + 8 >> 2] | 0) {
   STACKTOP = sp; //@line 9571
   return;
  }
  $10 = $0 + 2528 | 0; //@line 9573
  $11 = HEAP32[$10 >> 2] | 0; //@line 9574
  if (!$11) {
   STACKTOP = sp; //@line 9577
   return;
  }
  $15 = HEAP32[$0 + 3168 >> 2] | 0; //@line 9581
  $17 = HEAP32[$11 + 4 >> 2] | 0; //@line 9583
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 9584
  FUNCTION_TABLE_vii[$17 & 15]($1, $0 + 2516 | 0); //@line 9585
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 310; //@line 9588
   HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 9590
   HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9592
   HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 9594
   HEAP32[$AsyncCtx + 16 >> 2] = $15; //@line 9596
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 9598
   sp = STACKTOP; //@line 9599
   STACKTOP = sp; //@line 9600
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9602
  $23 = $1 + 12 | 0; //@line 9604
  HEAP32[$23 >> 2] = HEAP32[$10 >> 2]; //@line 9605
  $26 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 16 >> 0] | 0; //@line 9608
  $29 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 17 >> 0] | 0; //@line 9611
  $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9612
  $30 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($15, $1, $26, $29) | 0; //@line 9613
  if (___async) {
   HEAP32[$AsyncCtx16 >> 2] = 311; //@line 9616
   HEAP32[$AsyncCtx16 + 4 >> 2] = $23; //@line 9618
   HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 9620
   sp = STACKTOP; //@line 9621
   STACKTOP = sp; //@line 9622
   return;
  }
  _emscripten_free_async_context($AsyncCtx16 | 0); //@line 9624
  $33 = HEAP32[$23 >> 2] | 0; //@line 9625
  do {
   if ($33 | 0) {
    $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 9630
    $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9631
    FUNCTION_TABLE_vi[$36 & 1023]($1); //@line 9632
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 312; //@line 9635
     HEAP32[$AsyncCtx2 + 4 >> 2] = $30; //@line 9637
     sp = STACKTOP; //@line 9638
     STACKTOP = sp; //@line 9639
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9641
     break;
    }
   }
  } while (0);
  if ($30 | 0) {
   STACKTOP = sp; //@line 9648
   return;
  }
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9650
  _mbed_assert_internal(11914, 11923, 886); //@line 9651
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 313; //@line 9654
   sp = STACKTOP; //@line 9655
   STACKTOP = sp; //@line 9656
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 9658
  STACKTOP = sp; //@line 9659
  return;
 }
 if (HEAP32[$6 + 4 >> 2] | 0) {
  STACKTOP = sp; //@line 9665
  return;
 }
 if (!(HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2] | 0)) {
  $AsyncCtx13 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9672
  __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 9673
  if (___async) {
   HEAP32[$AsyncCtx13 >> 2] = 314; //@line 9676
   sp = STACKTOP; //@line 9677
   STACKTOP = sp; //@line 9678
   return;
  }
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 9680
  STACKTOP = sp; //@line 9681
  return;
 }
 HEAP32[$vararg_buffer >> 2] = HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2]; //@line 9686
 _mbed_tracef(2, 12021, 12333, $vararg_buffer); //@line 9687
 $53 = $0 + 2496 | 0; //@line 9692
 if ((HEAP32[(__ZNK7LoRaMac21get_mlme_confirmationEv($0) | 0) + 8 >> 2] | 0) != 13) {
  HEAP32[$53 >> 2] = 4; //@line 9694
  HEAP32[$vararg_buffer >> 2] = 0; //@line 9695
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9696
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $vararg_buffer); //@line 9697
  if (___async) {
   HEAP32[$AsyncCtx23 >> 2] = 319; //@line 9700
   HEAP32[$AsyncCtx23 + 4 >> 2] = $vararg_buffer; //@line 9702
   sp = STACKTOP; //@line 9703
   STACKTOP = sp; //@line 9704
   return;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 9706
  STACKTOP = sp; //@line 9707
  return;
 }
 HEAP32[$53 >> 2] = 2; //@line 9709
 $54 = $0 + 2512 | 0; //@line 9710
 $55 = HEAP32[$54 >> 2] | 0; //@line 9711
 do {
  if ($55 | 0) {
   $59 = HEAP32[$0 + 3168 >> 2] | 0; //@line 9717
   $61 = HEAP32[$55 + 4 >> 2] | 0; //@line 9719
   $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9720
   FUNCTION_TABLE_vii[$61 & 15]($vararg_buffer, $0 + 2500 | 0); //@line 9721
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 315; //@line 9724
    HEAP32[$AsyncCtx5 + 4 >> 2] = $54; //@line 9726
    HEAP32[$AsyncCtx5 + 8 >> 2] = $vararg_buffer; //@line 9728
    HEAP32[$AsyncCtx5 + 12 >> 2] = $59; //@line 9730
    HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 9732
    sp = STACKTOP; //@line 9733
    STACKTOP = sp; //@line 9734
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9736
   $66 = $vararg_buffer + 12 | 0; //@line 9738
   HEAP32[$66 >> 2] = HEAP32[$54 >> 2]; //@line 9739
   $AsyncCtx19 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9740
   $67 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($59, $vararg_buffer, 5) | 0; //@line 9741
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 316; //@line 9744
    HEAP32[$AsyncCtx19 + 4 >> 2] = $66; //@line 9746
    HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer; //@line 9748
    sp = STACKTOP; //@line 9749
    STACKTOP = sp; //@line 9750
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 9752
   $70 = HEAP32[$66 >> 2] | 0; //@line 9753
   do {
    if ($70 | 0) {
     $73 = HEAP32[$70 + 8 >> 2] | 0; //@line 9758
     $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9759
     FUNCTION_TABLE_vi[$73 & 1023]($vararg_buffer); //@line 9760
     if (___async) {
      HEAP32[$AsyncCtx9 >> 2] = 317; //@line 9763
      HEAP32[$AsyncCtx9 + 4 >> 2] = $67; //@line 9765
      HEAP32[$AsyncCtx9 + 8 >> 2] = $vararg_buffer; //@line 9767
      sp = STACKTOP; //@line 9768
      STACKTOP = sp; //@line 9769
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9771
      break;
     }
    }
   } while (0);
   if (!$67) {
    $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9778
    _mbed_assert_internal(11914, 11923, 778); //@line 9779
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 318; //@line 9782
     HEAP32[$AsyncCtx27 + 4 >> 2] = $vararg_buffer; //@line 9784
     sp = STACKTOP; //@line 9785
     STACKTOP = sp; //@line 9786
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 9788
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 9794
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01314 = 0, $$015 = 0, $$079$i = 0, $106 = 0, $124 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $31 = 0, $34 = 0, $49 = 0, $50 = 0, $56 = 0, $58 = 0, $78 = 0, $83 = 0, $86 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19961
 STACKTOP = STACKTOP + 16 | 0; //@line 19962
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19962
 $3 = sp; //@line 19963
 if (!(HEAP8[$0 + 15 >> 0] | 0)) {
  STACKTOP = sp; //@line 19968
  return;
 }
 $16 = $3 + 8 | 0; //@line 19979
 HEAP8[$16 >> 0] = HEAPU8[$0 + 31 >> 0] << 4 | HEAPU8[$0 + 30 >> 0]; //@line 19980
 L4 : do {
  if ($2 << 24 >> 24 == 16) {
   $18 = $0 + 18 | 0; //@line 19984
   $19 = HEAP8[$18 >> 0] | 0; //@line 19985
   $20 = $0 + 20 | 0; //@line 19986
   if (($19 & 255) < (HEAPU8[$20 >> 0] | 0)) {
    $23 = $0 + 19 | 0; //@line 19990
    $24 = $3 + 4 | 0; //@line 19991
    $25 = $0 + 76 | 0; //@line 19992
    $26 = $3 + 9 | 0; //@line 19993
    $$01314 = 0; //@line 19994
    $$015 = $19; //@line 19994
    $31 = $19; //@line 19994
    L7 : while (1) {
     if ((($31 & 255) + (HEAPU8[$23 >> 0] | 0) | 0) >>> 0 > ($$015 & 255) >>> 0) {
      $34 = $$01314 & 255; //@line 20003
      $49 = HEAPU8[$1 + ($34 + 2) >> 0] << 16 | (HEAPU8[$1 + ($34 + 1) >> 0] << 8 | HEAPU8[$1 + $34 >> 0]); //@line 20018
      $50 = $49 * 100 | 0; //@line 20019
      HEAP32[$3 >> 2] = $50; //@line 20020
      HEAP32[$24 >> 2] = 0; //@line 20021
      if (!$49) {
       label = 16; //@line 20024
      } else {
       L12 : do {
        if (!(HEAP8[$25 >> 0] | 0)) {
         $83 = -1; //@line 20030
        } else {
         $$079$i = 0; //@line 20032
         while (1) {
          $56 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 20036
          $AsyncCtx = _emscripten_alloc_async_context(80, sp) | 0; //@line 20038
          $58 = FUNCTION_TABLE_iiii[$56 & 31]($0, $50, $$079$i & 255) | 0; //@line 20039
          if (___async) {
           label = 10; //@line 20042
           break L7;
          }
          _emscripten_free_async_context($AsyncCtx | 0); //@line 20045
          if ($58) {
           $83 = $$079$i; //@line 20047
           break L12;
          }
          $78 = $$079$i + 1 | 0; //@line 20050
          if (($78 | 0) < (HEAPU8[$25 >> 0] | 0)) {
           $$079$i = $78; //@line 20055
          } else {
           $83 = -1; //@line 20057
           break;
          }
         }
        }
       } while (0);
       HEAP8[$26 >> 0] = $83; //@line 20064
       $86 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 20067
       $AsyncCtx2 = _emscripten_alloc_async_context(68, sp) | 0; //@line 20068
       FUNCTION_TABLE_iiii[$86 & 31]($0, $3, $$015) | 0; //@line 20069
       if (___async) {
        label = 14; //@line 20072
        break;
       }
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 20075
      }
     } else {
      HEAP32[$3 >> 2] = 0; //@line 20078
      HEAP8[$16 >> 0] = 0; //@line 20079
      HEAP32[$24 >> 2] = 0; //@line 20080
      label = 16; //@line 20081
     }
     if ((label | 0) == 16) {
      label = 0; //@line 20084
      $106 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 20087
      $AsyncCtx5 = _emscripten_alloc_async_context(68, sp) | 0; //@line 20088
      FUNCTION_TABLE_iii[$106 & 31]($0, $$015) | 0; //@line 20089
      if (___async) {
       label = 17; //@line 20092
       break;
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 20095
     }
     $124 = $$015 + 1 << 24 >> 24; //@line 20097
     if (($124 & 255) >= (HEAPU8[$20 >> 0] | 0)) {
      break L4;
     }
     $$01314 = ($$01314 & 255) + 3 & 255; //@line 20107
     $$015 = $124; //@line 20107
     $31 = HEAP8[$18 >> 0] | 0; //@line 20107
    }
    if ((label | 0) == 10) {
     HEAP32[$AsyncCtx >> 2] = 514; //@line 20110
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 20112
     HEAP8[$AsyncCtx + 8 >> 0] = $$01314; //@line 20114
     HEAP32[$AsyncCtx + 12 >> 2] = $18; //@line 20116
     HEAP8[$AsyncCtx + 16 >> 0] = $$015; //@line 20118
     HEAP32[$AsyncCtx + 20 >> 2] = $20; //@line 20120
     HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 20122
     HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 20124
     HEAP32[$AsyncCtx + 32 >> 2] = $$079$i; //@line 20126
     HEAP32[$AsyncCtx + 36 >> 2] = $26; //@line 20128
     HEAP32[$AsyncCtx + 40 >> 2] = $0; //@line 20130
     HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 20132
     HEAP32[$AsyncCtx + 48 >> 2] = $25; //@line 20134
     HEAP32[$AsyncCtx + 52 >> 2] = $0; //@line 20136
     HEAP32[$AsyncCtx + 56 >> 2] = $50; //@line 20138
     HEAP32[$AsyncCtx + 60 >> 2] = $1; //@line 20140
     HEAP32[$AsyncCtx + 64 >> 2] = $3; //@line 20142
     HEAP32[$AsyncCtx + 68 >> 2] = $24; //@line 20144
     HEAP32[$AsyncCtx + 72 >> 2] = $16; //@line 20146
     HEAP32[$AsyncCtx + 76 >> 2] = $23; //@line 20148
     sp = STACKTOP; //@line 20149
     STACKTOP = sp; //@line 20150
     return;
    } else if ((label | 0) == 14) {
     HEAP32[$AsyncCtx2 >> 2] = 515; //@line 20153
     HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 20155
     HEAP32[$AsyncCtx2 + 8 >> 2] = $18; //@line 20157
     HEAP32[$AsyncCtx2 + 12 >> 2] = $20; //@line 20159
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 20161
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 20163
     HEAP32[$AsyncCtx2 + 24 >> 2] = $26; //@line 20165
     HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 20167
     HEAP32[$AsyncCtx2 + 32 >> 2] = $3; //@line 20169
     HEAP32[$AsyncCtx2 + 36 >> 2] = $25; //@line 20171
     HEAP32[$AsyncCtx2 + 40 >> 2] = $0; //@line 20173
     HEAP32[$AsyncCtx2 + 44 >> 2] = $1; //@line 20175
     HEAP32[$AsyncCtx2 + 48 >> 2] = $3; //@line 20177
     HEAP32[$AsyncCtx2 + 52 >> 2] = $24; //@line 20179
     HEAP32[$AsyncCtx2 + 56 >> 2] = $16; //@line 20181
     HEAP32[$AsyncCtx2 + 60 >> 2] = $23; //@line 20183
     HEAP8[$AsyncCtx2 + 64 >> 0] = $$01314; //@line 20185
     HEAP8[$AsyncCtx2 + 65 >> 0] = $$015; //@line 20187
     sp = STACKTOP; //@line 20188
     STACKTOP = sp; //@line 20189
     return;
    } else if ((label | 0) == 17) {
     HEAP32[$AsyncCtx5 >> 2] = 516; //@line 20192
     HEAP32[$AsyncCtx5 + 4 >> 2] = $3; //@line 20194
     HEAP32[$AsyncCtx5 + 8 >> 2] = $18; //@line 20196
     HEAP32[$AsyncCtx5 + 12 >> 2] = $20; //@line 20198
     HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 20200
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 20202
     HEAP32[$AsyncCtx5 + 24 >> 2] = $26; //@line 20204
     HEAP32[$AsyncCtx5 + 28 >> 2] = $0; //@line 20206
     HEAP32[$AsyncCtx5 + 32 >> 2] = $3; //@line 20208
     HEAP32[$AsyncCtx5 + 36 >> 2] = $25; //@line 20210
     HEAP32[$AsyncCtx5 + 40 >> 2] = $0; //@line 20212
     HEAP32[$AsyncCtx5 + 44 >> 2] = $1; //@line 20214
     HEAP32[$AsyncCtx5 + 48 >> 2] = $3; //@line 20216
     HEAP32[$AsyncCtx5 + 52 >> 2] = $24; //@line 20218
     HEAP32[$AsyncCtx5 + 56 >> 2] = $16; //@line 20220
     HEAP32[$AsyncCtx5 + 60 >> 2] = $23; //@line 20222
     HEAP8[$AsyncCtx5 + 64 >> 0] = $$01314; //@line 20224
     HEAP8[$AsyncCtx5 + 65 >> 0] = $$015; //@line 20226
     sp = STACKTOP; //@line 20227
     STACKTOP = sp; //@line 20228
     return;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 20233
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $13 = 0, $22 = 0, $25 = 0, $35 = 0, $36 = 0, $37 = 0, $41 = 0, $48 = 0, $51 = 0, $54 = 0, $6 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $71 = 0, $74 = 0, $78 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9233
 STACKTOP = STACKTOP + 48 | 0; //@line 9234
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9234
 $6 = sp + 16 | 0; //@line 9235
 $7 = sp; //@line 9236
 $8 = $1 + 12 | 0; //@line 9237
 $9 = HEAP32[$8 >> 2] | 0; //@line 9238
 do {
  if (!$9) {
   $11 = $7 + 12 | 0; //@line 9242
   HEAP32[$11 >> 2] = 0; //@line 9243
   $36 = 0; //@line 9244
   $48 = $11; //@line 9244
  } else {
   $13 = HEAP32[$9 + 4 >> 2] | 0; //@line 9247
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 9248
   FUNCTION_TABLE_vii[$13 & 15]($7, $1); //@line 9249
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 298; //@line 9252
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 9254
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 9256
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 9258
    HEAP16[$AsyncCtx + 16 >> 1] = $3; //@line 9260
    HEAP16[$AsyncCtx + 18 >> 1] = $4; //@line 9262
    HEAP8[$AsyncCtx + 20 >> 0] = $5; //@line 9264
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 9266
    HEAP32[$AsyncCtx + 28 >> 2] = $8; //@line 9268
    sp = STACKTOP; //@line 9269
    STACKTOP = sp; //@line 9270
    return 0; //@line 9270
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9272
   $$pre$i = HEAP32[$8 >> 2] | 0; //@line 9273
   $22 = $7 + 12 | 0; //@line 9274
   HEAP32[$22 >> 2] = $$pre$i; //@line 9275
   if (!$$pre$i) {
    $36 = 0; //@line 9278
    $48 = $22; //@line 9278
   } else {
    $25 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 9282
    $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9283
    FUNCTION_TABLE_vii[$25 & 15]($6, $7); //@line 9284
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 299; //@line 9287
     HEAP32[$AsyncCtx2 + 4 >> 2] = $7; //@line 9289
     HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 9291
     HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 9293
     HEAP32[$AsyncCtx2 + 16 >> 2] = $22; //@line 9295
     HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 9297
     HEAP16[$AsyncCtx2 + 24 >> 1] = $3; //@line 9299
     HEAP16[$AsyncCtx2 + 26 >> 1] = $4; //@line 9301
     HEAP8[$AsyncCtx2 + 28 >> 0] = $5; //@line 9303
     HEAP32[$AsyncCtx2 + 32 >> 2] = $0; //@line 9305
     sp = STACKTOP; //@line 9306
     STACKTOP = sp; //@line 9307
     return 0; //@line 9307
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9309
     $36 = HEAP32[$22 >> 2] | 0; //@line 9311
     $48 = $22; //@line 9311
     break;
    }
   }
  }
 } while (0);
 $35 = $6 + 12 | 0; //@line 9317
 HEAP32[$35 >> 2] = $36; //@line 9318
 $37 = $6 + 16 | 0; //@line 9319
 HEAP32[$37 >> 2] = $2; //@line 9320
 HEAP16[$6 + 20 >> 1] = $3; //@line 9322
 HEAP16[$6 + 22 >> 1] = $4; //@line 9324
 HEAP8[$6 + 24 >> 0] = $5; //@line 9326
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9327
 $41 = _equeue_alloc($0, 28) | 0; //@line 9328
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 300; //@line 9331
  HEAP32[$AsyncCtx18 + 4 >> 2] = $7; //@line 9333
  HEAP32[$AsyncCtx18 + 8 >> 2] = $35; //@line 9335
  HEAP32[$AsyncCtx18 + 12 >> 2] = $37; //@line 9337
  HEAP32[$AsyncCtx18 + 16 >> 2] = $0; //@line 9339
  HEAP32[$AsyncCtx18 + 20 >> 2] = $35; //@line 9341
  HEAP32[$AsyncCtx18 + 24 >> 2] = $48; //@line 9343
  HEAP32[$AsyncCtx18 + 28 >> 2] = $6; //@line 9345
  sp = STACKTOP; //@line 9346
  STACKTOP = sp; //@line 9347
  return 0; //@line 9347
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 9349
 do {
  if (!$41) {
   $$0$i = 0; //@line 9353
  } else {
   $51 = HEAP32[$35 >> 2] | 0; //@line 9355
   do {
    if (!$51) {
     $64 = 0; //@line 9359
    } else {
     $54 = HEAP32[$51 + 4 >> 2] | 0; //@line 9362
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9363
     FUNCTION_TABLE_vii[$54 & 15]($41, $6); //@line 9364
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 301; //@line 9367
      HEAP32[$AsyncCtx5 + 4 >> 2] = $35; //@line 9369
      HEAP32[$AsyncCtx5 + 8 >> 2] = $41; //@line 9371
      HEAP32[$AsyncCtx5 + 12 >> 2] = $37; //@line 9373
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 9375
      HEAP32[$AsyncCtx5 + 20 >> 2] = $35; //@line 9377
      HEAP32[$AsyncCtx5 + 24 >> 2] = $48; //@line 9379
      HEAP32[$AsyncCtx5 + 28 >> 2] = $6; //@line 9381
      HEAP32[$AsyncCtx5 + 32 >> 2] = $7; //@line 9383
      sp = STACKTOP; //@line 9384
      STACKTOP = sp; //@line 9385
      return 0; //@line 9385
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9387
      $64 = HEAP32[$35 >> 2] | 0; //@line 9389
      break;
     }
    }
   } while (0);
   HEAP32[$41 + 12 >> 2] = $64; //@line 9395
   $65 = $41 + 16 | 0; //@line 9396
   HEAP32[$65 >> 2] = HEAP32[$37 >> 2]; //@line 9397
   HEAP32[$65 + 4 >> 2] = HEAP32[$37 + 4 >> 2]; //@line 9397
   HEAP8[$65 + 8 >> 0] = HEAP8[$37 + 8 >> 0] | 0; //@line 9397
   _equeue_event_dtor($41, 302); //@line 9398
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9399
   $66 = _equeue_post($0, 303, $41) | 0; //@line 9400
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 304; //@line 9403
    HEAP32[$AsyncCtx15 + 4 >> 2] = $35; //@line 9405
    HEAP32[$AsyncCtx15 + 8 >> 2] = $48; //@line 9407
    HEAP32[$AsyncCtx15 + 12 >> 2] = $6; //@line 9409
    HEAP32[$AsyncCtx15 + 16 >> 2] = $7; //@line 9411
    sp = STACKTOP; //@line 9412
    STACKTOP = sp; //@line 9413
    return 0; //@line 9413
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 9415
    $$0$i = $66; //@line 9416
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$35 >> 2] | 0; //@line 9421
 do {
  if ($71 | 0) {
   $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 9426
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 9427
   FUNCTION_TABLE_vi[$74 & 1023]($6); //@line 9428
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 305; //@line 9431
    HEAP32[$AsyncCtx8 + 4 >> 2] = $48; //@line 9433
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 9435
    HEAP32[$AsyncCtx8 + 12 >> 2] = $7; //@line 9437
    sp = STACKTOP; //@line 9438
    STACKTOP = sp; //@line 9439
    return 0; //@line 9439
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 9441
    break;
   }
  }
 } while (0);
 $78 = HEAP32[$48 >> 2] | 0; //@line 9446
 if (!$78) {
  STACKTOP = sp; //@line 9449
  return $$0$i | 0; //@line 9449
 }
 $81 = HEAP32[$78 + 8 >> 2] | 0; //@line 9452
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9453
 FUNCTION_TABLE_vi[$81 & 1023]($7); //@line 9454
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 306; //@line 9457
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 9459
  sp = STACKTOP; //@line 9460
  STACKTOP = sp; //@line 9461
  return 0; //@line 9461
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 9463
 STACKTOP = sp; //@line 9464
 return $$0$i | 0; //@line 9464
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_244($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15438
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15440
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15442
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15444
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15446
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15450
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15452
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15454
 $17 = $12 + 12 | 0; //@line 15455
 HEAP32[$12 >> 2] = 6; //@line 15456
 HEAP32[$12 + 4 >> 2] = 0; //@line 15458
 HEAP32[$12 + 8 >> 2] = $4; //@line 15460
 HEAP32[$17 >> 2] = 836; //@line 15461
 $18 = $4 + 2416 | 0; //@line 15462
 if (($18 | 0) == ($12 | 0)) {
  $47 = HEAP32[211] | 0; //@line 15466
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 15467
  FUNCTION_TABLE_vi[$47 & 1023]($12); //@line 15468
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15471
   $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 15472
   HEAP32[$48 >> 2] = $2; //@line 15473
   $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 15474
   HEAP32[$49 >> 2] = $4; //@line 15475
   $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 15476
   HEAP32[$50 >> 2] = $6; //@line 15477
   $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 15478
   HEAP32[$51 >> 2] = $8; //@line 15479
   $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 15480
   HEAP32[$52 >> 2] = $14; //@line 15481
   $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 15482
   HEAP32[$53 >> 2] = $12; //@line 15483
   $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 15484
   HEAP32[$54 >> 2] = $16; //@line 15485
   sp = STACKTOP; //@line 15486
   return;
  }
  ___async_unwind = 0; //@line 15489
  HEAP32[$ReallocAsyncCtx6 >> 2] = 187; //@line 15490
  $48 = $ReallocAsyncCtx6 + 4 | 0; //@line 15491
  HEAP32[$48 >> 2] = $2; //@line 15492
  $49 = $ReallocAsyncCtx6 + 8 | 0; //@line 15493
  HEAP32[$49 >> 2] = $4; //@line 15494
  $50 = $ReallocAsyncCtx6 + 12 | 0; //@line 15495
  HEAP32[$50 >> 2] = $6; //@line 15496
  $51 = $ReallocAsyncCtx6 + 16 | 0; //@line 15497
  HEAP32[$51 >> 2] = $8; //@line 15498
  $52 = $ReallocAsyncCtx6 + 20 | 0; //@line 15499
  HEAP32[$52 >> 2] = $14; //@line 15500
  $53 = $ReallocAsyncCtx6 + 24 | 0; //@line 15501
  HEAP32[$53 >> 2] = $12; //@line 15502
  $54 = $ReallocAsyncCtx6 + 28 | 0; //@line 15503
  HEAP32[$54 >> 2] = $16; //@line 15504
  sp = STACKTOP; //@line 15505
  return;
 }
 $20 = $4 + 2428 | 0; //@line 15508
 $21 = HEAP32[$20 >> 2] | 0; //@line 15509
 if (!$21) {
  $36 = HEAP32[210] | 0; //@line 15513
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 15514
  FUNCTION_TABLE_vii[$36 & 15]($18, $12); //@line 15515
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15518
   $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 15519
   HEAP32[$37 >> 2] = $2; //@line 15520
   $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 15521
   HEAP32[$38 >> 2] = $4; //@line 15522
   $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 15523
   HEAP32[$39 >> 2] = $6; //@line 15524
   $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 15525
   HEAP32[$40 >> 2] = $8; //@line 15526
   $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 15527
   HEAP32[$41 >> 2] = $17; //@line 15528
   $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 15529
   HEAP32[$42 >> 2] = $20; //@line 15530
   $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 15531
   HEAP32[$43 >> 2] = $14; //@line 15532
   $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 15533
   HEAP32[$44 >> 2] = $12; //@line 15534
   $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 15535
   HEAP32[$45 >> 2] = $16; //@line 15536
   sp = STACKTOP; //@line 15537
   return;
  }
  ___async_unwind = 0; //@line 15540
  HEAP32[$ReallocAsyncCtx5 >> 2] = 186; //@line 15541
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 15542
  HEAP32[$37 >> 2] = $2; //@line 15543
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 15544
  HEAP32[$38 >> 2] = $4; //@line 15545
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 15546
  HEAP32[$39 >> 2] = $6; //@line 15547
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 15548
  HEAP32[$40 >> 2] = $8; //@line 15549
  $41 = $ReallocAsyncCtx5 + 20 | 0; //@line 15550
  HEAP32[$41 >> 2] = $17; //@line 15551
  $42 = $ReallocAsyncCtx5 + 24 | 0; //@line 15552
  HEAP32[$42 >> 2] = $20; //@line 15553
  $43 = $ReallocAsyncCtx5 + 28 | 0; //@line 15554
  HEAP32[$43 >> 2] = $14; //@line 15555
  $44 = $ReallocAsyncCtx5 + 32 | 0; //@line 15556
  HEAP32[$44 >> 2] = $12; //@line 15557
  $45 = $ReallocAsyncCtx5 + 36 | 0; //@line 15558
  HEAP32[$45 >> 2] = $16; //@line 15559
  sp = STACKTOP; //@line 15560
  return;
 } else {
  $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 15564
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(44) | 0; //@line 15565
  FUNCTION_TABLE_vi[$24 & 1023]($18); //@line 15566
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 15569
   $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 15570
   HEAP32[$25 >> 2] = $2; //@line 15571
   $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 15572
   HEAP32[$26 >> 2] = $4; //@line 15573
   $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 15574
   HEAP32[$27 >> 2] = $6; //@line 15575
   $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 15576
   HEAP32[$28 >> 2] = $8; //@line 15577
   $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 15578
   HEAP32[$29 >> 2] = $20; //@line 15579
   $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 15580
   HEAP32[$30 >> 2] = $18; //@line 15581
   $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 15582
   HEAP32[$31 >> 2] = $12; //@line 15583
   $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 15584
   HEAP32[$32 >> 2] = $17; //@line 15585
   $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 15586
   HEAP32[$33 >> 2] = $14; //@line 15587
   $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 15588
   HEAP32[$34 >> 2] = $16; //@line 15589
   sp = STACKTOP; //@line 15590
   return;
  }
  ___async_unwind = 0; //@line 15593
  HEAP32[$ReallocAsyncCtx4 >> 2] = 185; //@line 15594
  $25 = $ReallocAsyncCtx4 + 4 | 0; //@line 15595
  HEAP32[$25 >> 2] = $2; //@line 15596
  $26 = $ReallocAsyncCtx4 + 8 | 0; //@line 15597
  HEAP32[$26 >> 2] = $4; //@line 15598
  $27 = $ReallocAsyncCtx4 + 12 | 0; //@line 15599
  HEAP32[$27 >> 2] = $6; //@line 15600
  $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 15601
  HEAP32[$28 >> 2] = $8; //@line 15602
  $29 = $ReallocAsyncCtx4 + 20 | 0; //@line 15603
  HEAP32[$29 >> 2] = $20; //@line 15604
  $30 = $ReallocAsyncCtx4 + 24 | 0; //@line 15605
  HEAP32[$30 >> 2] = $18; //@line 15606
  $31 = $ReallocAsyncCtx4 + 28 | 0; //@line 15607
  HEAP32[$31 >> 2] = $12; //@line 15608
  $32 = $ReallocAsyncCtx4 + 32 | 0; //@line 15609
  HEAP32[$32 >> 2] = $17; //@line 15610
  $33 = $ReallocAsyncCtx4 + 36 | 0; //@line 15611
  HEAP32[$33 >> 2] = $14; //@line 15612
  $34 = $ReallocAsyncCtx4 + 40 | 0; //@line 15613
  HEAP32[$34 >> 2] = $16; //@line 15614
  sp = STACKTOP; //@line 15615
  return;
 }
}
function _main__async_cb_90($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $45 = 0, $46 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25948
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25950
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25952
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25954
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25956
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25958
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25960
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 25963
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25965
 $19 = HEAP32[HEAP32[$0 + 36 >> 2] >> 2] | 0; //@line 25968
 if ($19 | 0) {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 25972
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 25973
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 25974
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 674; //@line 25977
   $23 = $ReallocAsyncCtx + 4 | 0; //@line 25978
   HEAP32[$23 >> 2] = $2; //@line 25979
   $24 = $ReallocAsyncCtx + 8 | 0; //@line 25980
   HEAP32[$24 >> 2] = $10; //@line 25981
   $25 = $ReallocAsyncCtx + 12 | 0; //@line 25982
   HEAP32[$25 >> 2] = $12; //@line 25983
   $26 = $ReallocAsyncCtx + 16 | 0; //@line 25984
   $$expand_i1_val = $14 & 1; //@line 25985
   HEAP8[$26 >> 0] = $$expand_i1_val; //@line 25986
   $27 = $ReallocAsyncCtx + 20 | 0; //@line 25987
   HEAP32[$27 >> 2] = $4; //@line 25988
   $28 = $ReallocAsyncCtx + 24 | 0; //@line 25989
   HEAP32[$28 >> 2] = $6; //@line 25990
   $29 = $ReallocAsyncCtx + 28 | 0; //@line 25991
   HEAP32[$29 >> 2] = $8; //@line 25992
   sp = STACKTOP; //@line 25993
   return;
  }
  ___async_unwind = 0; //@line 25996
  HEAP32[$ReallocAsyncCtx >> 2] = 674; //@line 25997
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 25998
  HEAP32[$23 >> 2] = $2; //@line 25999
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 26000
  HEAP32[$24 >> 2] = $10; //@line 26001
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 26002
  HEAP32[$25 >> 2] = $12; //@line 26003
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 26004
  $$expand_i1_val = $14 & 1; //@line 26005
  HEAP8[$26 >> 0] = $$expand_i1_val; //@line 26006
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 26007
  HEAP32[$27 >> 2] = $4; //@line 26008
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 26009
  HEAP32[$28 >> 2] = $6; //@line 26010
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 26011
  HEAP32[$29 >> 2] = $8; //@line 26012
  sp = STACKTOP; //@line 26013
  return;
 }
 if (!$14) {
  $31 = (HEAP32[$2 >> 2] | 0) + -1 | 0; //@line 26018
  HEAP32[$2 >> 2] = $31; //@line 26019
  if (!$31) {
   $34 = HEAP32[$2 + 24 >> 2] | 0; //@line 26023
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 26024
   FUNCTION_TABLE_vi[$34 & 1023]($12); //@line 26025
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 675; //@line 26028
    $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 26029
    HEAP32[$35 >> 2] = $2; //@line 26030
    $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 26031
    HEAP32[$36 >> 2] = $10; //@line 26032
    $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 26033
    HEAP32[$37 >> 2] = $4; //@line 26034
    $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 26035
    HEAP32[$38 >> 2] = $6; //@line 26036
    $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 26037
    HEAP32[$39 >> 2] = $8; //@line 26038
    sp = STACKTOP; //@line 26039
    return;
   }
   ___async_unwind = 0; //@line 26042
   HEAP32[$ReallocAsyncCtx2 >> 2] = 675; //@line 26043
   $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 26044
   HEAP32[$35 >> 2] = $2; //@line 26045
   $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 26046
   HEAP32[$36 >> 2] = $10; //@line 26047
   $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 26048
   HEAP32[$37 >> 2] = $4; //@line 26049
   $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 26050
   HEAP32[$38 >> 2] = $6; //@line 26051
   $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 26052
   HEAP32[$39 >> 2] = $8; //@line 26053
   sp = STACKTOP; //@line 26054
   return;
  }
 }
 $41 = $10 + 4 | 0; //@line 26059
 HEAP32[$41 >> 2] = 0; //@line 26061
 HEAP32[$41 + 4 >> 2] = 0; //@line 26064
 HEAP32[$10 >> 2] = 677; //@line 26065
 $45 = $10 + 12 | 0; //@line 26066
 HEAP32[$45 >> 2] = 10276; //@line 26067
 $46 = HEAP32[5919] | 0; //@line 26068
 if (!$46) {
  $56 = HEAP32[2570] | 0; //@line 26072
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 26073
  FUNCTION_TABLE_vii[$56 & 15](23664, $10); //@line 26074
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 26077
   $57 = $ReallocAsyncCtx4 + 4 | 0; //@line 26078
   HEAP32[$57 >> 2] = $10; //@line 26079
   $58 = $ReallocAsyncCtx4 + 8 | 0; //@line 26080
   HEAP32[$58 >> 2] = $45; //@line 26081
   $59 = $ReallocAsyncCtx4 + 12 | 0; //@line 26082
   HEAP32[$59 >> 2] = $4; //@line 26083
   $60 = $ReallocAsyncCtx4 + 16 | 0; //@line 26084
   HEAP32[$60 >> 2] = $6; //@line 26085
   $61 = $ReallocAsyncCtx4 + 20 | 0; //@line 26086
   HEAP32[$61 >> 2] = $8; //@line 26087
   sp = STACKTOP; //@line 26088
   return;
  }
  ___async_unwind = 0; //@line 26091
  HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 26092
  $57 = $ReallocAsyncCtx4 + 4 | 0; //@line 26093
  HEAP32[$57 >> 2] = $10; //@line 26094
  $58 = $ReallocAsyncCtx4 + 8 | 0; //@line 26095
  HEAP32[$58 >> 2] = $45; //@line 26096
  $59 = $ReallocAsyncCtx4 + 12 | 0; //@line 26097
  HEAP32[$59 >> 2] = $4; //@line 26098
  $60 = $ReallocAsyncCtx4 + 16 | 0; //@line 26099
  HEAP32[$60 >> 2] = $6; //@line 26100
  $61 = $ReallocAsyncCtx4 + 20 | 0; //@line 26101
  HEAP32[$61 >> 2] = $8; //@line 26102
  sp = STACKTOP; //@line 26103
  return;
 } else {
  $49 = HEAP32[$46 + 8 >> 2] | 0; //@line 26107
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 26108
  FUNCTION_TABLE_vi[$49 & 1023](23664); //@line 26109
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 26112
   $50 = $ReallocAsyncCtx3 + 4 | 0; //@line 26113
   HEAP32[$50 >> 2] = $10; //@line 26114
   $51 = $ReallocAsyncCtx3 + 8 | 0; //@line 26115
   HEAP32[$51 >> 2] = $45; //@line 26116
   $52 = $ReallocAsyncCtx3 + 12 | 0; //@line 26117
   HEAP32[$52 >> 2] = $4; //@line 26118
   $53 = $ReallocAsyncCtx3 + 16 | 0; //@line 26119
   HEAP32[$53 >> 2] = $6; //@line 26120
   $54 = $ReallocAsyncCtx3 + 20 | 0; //@line 26121
   HEAP32[$54 >> 2] = $8; //@line 26122
   sp = STACKTOP; //@line 26123
   return;
  }
  ___async_unwind = 0; //@line 26126
  HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 26127
  $50 = $ReallocAsyncCtx3 + 4 | 0; //@line 26128
  HEAP32[$50 >> 2] = $10; //@line 26129
  $51 = $ReallocAsyncCtx3 + 8 | 0; //@line 26130
  HEAP32[$51 >> 2] = $45; //@line 26131
  $52 = $ReallocAsyncCtx3 + 12 | 0; //@line 26132
  HEAP32[$52 >> 2] = $4; //@line 26133
  $53 = $ReallocAsyncCtx3 + 16 | 0; //@line 26134
  HEAP32[$53 >> 2] = $6; //@line 26135
  $54 = $ReallocAsyncCtx3 + 20 | 0; //@line 26136
  HEAP32[$54 >> 2] = $8; //@line 26137
  sp = STACKTOP; //@line 26138
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_252($0) {
 $0 = $0 | 0;
 var $$pre$i$i54 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 17035
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17037
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17039
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17041
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17043
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17049
 $$pre$i$i54 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 17050
 HEAP32[HEAP32[$0 + 24 >> 2] >> 2] = $$pre$i$i54; //@line 17052
 if ($$pre$i$i54 | 0) {
  $18 = HEAP32[$$pre$i$i54 + 8 >> 2] | 0; //@line 17056
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 17057
  FUNCTION_TABLE_vi[$18 & 1023]($4); //@line 17058
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 17061
   $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 17062
   HEAP32[$19 >> 2] = $2; //@line 17063
   $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 17064
   HEAP32[$20 >> 2] = $4; //@line 17065
   $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 17066
   HEAP32[$21 >> 2] = $6; //@line 17067
   $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 17068
   HEAP32[$22 >> 2] = $8; //@line 17069
   $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 17070
   HEAP32[$23 >> 2] = $14; //@line 17071
   sp = STACKTOP; //@line 17072
   return;
  }
  ___async_unwind = 0; //@line 17075
  HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 17076
  $19 = $ReallocAsyncCtx12 + 4 | 0; //@line 17077
  HEAP32[$19 >> 2] = $2; //@line 17078
  $20 = $ReallocAsyncCtx12 + 8 | 0; //@line 17079
  HEAP32[$20 >> 2] = $4; //@line 17080
  $21 = $ReallocAsyncCtx12 + 12 | 0; //@line 17081
  HEAP32[$21 >> 2] = $6; //@line 17082
  $22 = $ReallocAsyncCtx12 + 16 | 0; //@line 17083
  HEAP32[$22 >> 2] = $8; //@line 17084
  $23 = $ReallocAsyncCtx12 + 20 | 0; //@line 17085
  HEAP32[$23 >> 2] = $14; //@line 17086
  sp = STACKTOP; //@line 17087
  return;
 }
 $24 = $6 + 12 | 0; //@line 17090
 HEAP32[$6 >> 2] = 196; //@line 17091
 HEAP32[$6 + 4 >> 2] = 0; //@line 17093
 HEAP32[$6 + 8 >> 2] = $8; //@line 17095
 HEAP32[$24 >> 2] = 824; //@line 17096
 $25 = $8 + 2432 | 0; //@line 17097
 if (($25 | 0) == ($6 | 0)) {
  $48 = HEAP32[208] | 0; //@line 17101
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 17102
  FUNCTION_TABLE_vi[$48 & 1023]($6); //@line 17103
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 17106
   $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 17107
   HEAP32[$49 >> 2] = $6; //@line 17108
   $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 17109
   HEAP32[$50 >> 2] = $8; //@line 17110
   $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 17111
   HEAP32[$51 >> 2] = $2; //@line 17112
   $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 17113
   HEAP32[$52 >> 2] = $14; //@line 17114
   sp = STACKTOP; //@line 17115
   return;
  }
  ___async_unwind = 0; //@line 17118
  HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 17119
  $49 = $ReallocAsyncCtx15 + 4 | 0; //@line 17120
  HEAP32[$49 >> 2] = $6; //@line 17121
  $50 = $ReallocAsyncCtx15 + 8 | 0; //@line 17122
  HEAP32[$50 >> 2] = $8; //@line 17123
  $51 = $ReallocAsyncCtx15 + 12 | 0; //@line 17124
  HEAP32[$51 >> 2] = $2; //@line 17125
  $52 = $ReallocAsyncCtx15 + 16 | 0; //@line 17126
  HEAP32[$52 >> 2] = $14; //@line 17127
  sp = STACKTOP; //@line 17128
  return;
 }
 $27 = $8 + 2444 | 0; //@line 17131
 $28 = HEAP32[$27 >> 2] | 0; //@line 17132
 if (!$28) {
  $40 = HEAP32[207] | 0; //@line 17136
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 17137
  FUNCTION_TABLE_vii[$40 & 15]($25, $6); //@line 17138
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 17141
   $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 17142
   HEAP32[$41 >> 2] = $24; //@line 17143
   $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 17144
   HEAP32[$42 >> 2] = $27; //@line 17145
   $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 17146
   HEAP32[$43 >> 2] = $6; //@line 17147
   $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 17148
   HEAP32[$44 >> 2] = $8; //@line 17149
   $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 17150
   HEAP32[$45 >> 2] = $2; //@line 17151
   $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 17152
   HEAP32[$46 >> 2] = $14; //@line 17153
   sp = STACKTOP; //@line 17154
   return;
  }
  ___async_unwind = 0; //@line 17157
  HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 17158
  $41 = $ReallocAsyncCtx14 + 4 | 0; //@line 17159
  HEAP32[$41 >> 2] = $24; //@line 17160
  $42 = $ReallocAsyncCtx14 + 8 | 0; //@line 17161
  HEAP32[$42 >> 2] = $27; //@line 17162
  $43 = $ReallocAsyncCtx14 + 12 | 0; //@line 17163
  HEAP32[$43 >> 2] = $6; //@line 17164
  $44 = $ReallocAsyncCtx14 + 16 | 0; //@line 17165
  HEAP32[$44 >> 2] = $8; //@line 17166
  $45 = $ReallocAsyncCtx14 + 20 | 0; //@line 17167
  HEAP32[$45 >> 2] = $2; //@line 17168
  $46 = $ReallocAsyncCtx14 + 24 | 0; //@line 17169
  HEAP32[$46 >> 2] = $14; //@line 17170
  sp = STACKTOP; //@line 17171
  return;
 } else {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 17175
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 17176
  FUNCTION_TABLE_vi[$31 & 1023]($25); //@line 17177
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 17180
   $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 17181
   HEAP32[$32 >> 2] = $24; //@line 17182
   $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 17183
   HEAP32[$33 >> 2] = $27; //@line 17184
   $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 17185
   HEAP32[$34 >> 2] = $25; //@line 17186
   $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 17187
   HEAP32[$35 >> 2] = $6; //@line 17188
   $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 17189
   HEAP32[$36 >> 2] = $8; //@line 17190
   $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 17191
   HEAP32[$37 >> 2] = $2; //@line 17192
   $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 17193
   HEAP32[$38 >> 2] = $14; //@line 17194
   sp = STACKTOP; //@line 17195
   return;
  }
  ___async_unwind = 0; //@line 17198
  HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 17199
  $32 = $ReallocAsyncCtx13 + 4 | 0; //@line 17200
  HEAP32[$32 >> 2] = $24; //@line 17201
  $33 = $ReallocAsyncCtx13 + 8 | 0; //@line 17202
  HEAP32[$33 >> 2] = $27; //@line 17203
  $34 = $ReallocAsyncCtx13 + 12 | 0; //@line 17204
  HEAP32[$34 >> 2] = $25; //@line 17205
  $35 = $ReallocAsyncCtx13 + 16 | 0; //@line 17206
  HEAP32[$35 >> 2] = $6; //@line 17207
  $36 = $ReallocAsyncCtx13 + 20 | 0; //@line 17208
  HEAP32[$36 >> 2] = $8; //@line 17209
  $37 = $ReallocAsyncCtx13 + 24 | 0; //@line 17210
  HEAP32[$37 >> 2] = $2; //@line 17211
  $38 = $ReallocAsyncCtx13 + 28 | 0; //@line 17212
  HEAP32[$38 >> 2] = $14; //@line 17213
  sp = STACKTOP; //@line 17214
  return;
 }
}
function _mbedtls_cipher_cmac_update($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$06984 = 0, $$06984$us = 0, $$070 = 0, $$073 = 0, $$09$i = 0, $$09$i75 = 0, $$1$lcssa = 0, $$174$lcssa = 0, $$17481 = 0, $$182 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $22 = 0, $26 = 0, $3 = 0, $38 = 0, $43 = 0, $46 = 0, $5 = 0, $58 = 0, $62 = 0, $66 = 0, $79 = 0, $80 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3266
 STACKTOP = STACKTOP + 16 | 0; //@line 3267
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 3267
 $3 = sp; //@line 3268
 if (!$0) {
  $$0 = -24832; //@line 3271
  STACKTOP = sp; //@line 3272
  return $$0 | 0; //@line 3272
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 3274
 if (($1 | 0) == 0 | ($5 | 0) == 0) {
  $$0 = -24832; //@line 3279
  STACKTOP = sp; //@line 3280
  return $$0 | 0; //@line 3280
 }
 $9 = HEAP32[$0 + 64 >> 2] | 0; //@line 3283
 if (!$9) {
  $$0 = -24832; //@line 3286
  STACKTOP = sp; //@line 3287
  return $$0 | 0; //@line 3287
 }
 $12 = HEAP32[$5 + 24 >> 2] | 0; //@line 3290
 $13 = $9 + 32 | 0; //@line 3291
 $14 = HEAP32[$13 >> 2] | 0; //@line 3292
 do {
  if (!$14) {
   $$070 = $1; //@line 3296
   $$073 = $2; //@line 3296
  } else {
   $16 = $12 - $14 | 0; //@line 3298
   if ($16 >>> 0 < $2 >>> 0) {
    _memcpy($9 + 16 + $14 | 0, $1 | 0, $16 | 0) | 0; //@line 3302
    if ($12 | 0) {
     $$09$i = 0; //@line 3305
     do {
      $22 = $9 + $$09$i | 0; //@line 3309
      HEAP8[$22 >> 0] = HEAP8[$22 >> 0] ^ HEAP8[$9 + 16 + $$09$i >> 0]; //@line 3312
      $$09$i = $$09$i + 1 | 0; //@line 3313
     } while (($$09$i | 0) != ($12 | 0));
    }
    $AsyncCtx5 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3322
    $26 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3323
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 596; //@line 3326
     HEAP32[$AsyncCtx5 + 4 >> 2] = $12; //@line 3328
     HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 3330
     HEAP32[$AsyncCtx5 + 12 >> 2] = $13; //@line 3332
     HEAP32[$AsyncCtx5 + 16 >> 2] = $9; //@line 3334
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 3336
     HEAP32[$AsyncCtx5 + 24 >> 2] = $9; //@line 3338
     HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 3340
     HEAP32[$AsyncCtx5 + 32 >> 2] = $1; //@line 3342
     HEAP32[$AsyncCtx5 + 36 >> 2] = $2; //@line 3344
     sp = STACKTOP; //@line 3345
     STACKTOP = sp; //@line 3346
     return 0; //@line 3346
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3348
    if (!$26) {
     $38 = $12 - (HEAP32[$13 >> 2] | 0) | 0; //@line 3352
     HEAP32[$13 >> 2] = 0; //@line 3355
     $$070 = $1 + $38 | 0; //@line 3356
     $$073 = $2 - $38 | 0; //@line 3356
     break;
    } else {
     $$0 = $26; //@line 3359
     STACKTOP = sp; //@line 3360
     return $$0 | 0; //@line 3360
    }
   } else {
    $$070 = $1; //@line 3363
    $$073 = $2; //@line 3363
   }
  }
 } while (0);
 $43 = (($12 + -1 + $$073 | 0) >>> 0) / ($12 >>> 0) | 0; //@line 3369
 L24 : do {
  if ($43 >>> 0 > 1) {
   if (!$12) {
    $$06984$us = 1; //@line 3375
    while (1) {
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3377
     $46 = _mbedtls_cipher_update($0, $9, 0, $9, $3) | 0; //@line 3378
     if (___async) {
      label = 15; //@line 3381
      break;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3384
     if ($46 | 0) {
      $$0 = $46; //@line 3387
      label = 26; //@line 3388
      break;
     }
     $58 = $$06984$us + 1 | 0; //@line 3391
     if ($58 >>> 0 < $43 >>> 0) {
      $$06984$us = $58; //@line 3394
     } else {
      $$1$lcssa = $$070; //@line 3396
      $$174$lcssa = $$073; //@line 3396
      break L24;
     }
    }
    if ((label | 0) == 15) {
     HEAP32[$AsyncCtx2 >> 2] = 597; //@line 3401
     HEAP32[$AsyncCtx2 + 4 >> 2] = $$06984$us; //@line 3403
     HEAP32[$AsyncCtx2 + 8 >> 2] = $43; //@line 3405
     HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3407
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 3409
     HEAP32[$AsyncCtx2 + 20 >> 2] = $9; //@line 3411
     HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3413
     HEAP32[$AsyncCtx2 + 28 >> 2] = $$073; //@line 3415
     HEAP32[$AsyncCtx2 + 32 >> 2] = $$070; //@line 3417
     HEAP32[$AsyncCtx2 + 36 >> 2] = $13; //@line 3419
     HEAP32[$AsyncCtx2 + 40 >> 2] = $9; //@line 3421
     sp = STACKTOP; //@line 3422
     STACKTOP = sp; //@line 3423
     return 0; //@line 3423
    } else if ((label | 0) == 26) {
     STACKTOP = sp; //@line 3426
     return $$0 | 0; //@line 3426
    }
   } else {
    $$06984 = 1; //@line 3429
    $$17481 = $$073; //@line 3429
    $$182 = $$070; //@line 3429
   }
   while (1) {
    $$09$i75 = 0; //@line 3432
    do {
     $62 = $9 + $$09$i75 | 0; //@line 3436
     HEAP8[$62 >> 0] = HEAP8[$62 >> 0] ^ HEAP8[$$182 + $$09$i75 >> 0]; //@line 3439
     $$09$i75 = $$09$i75 + 1 | 0; //@line 3440
    } while (($$09$i75 | 0) != ($12 | 0));
    $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 3448
    $66 = _mbedtls_cipher_update($0, $9, $12, $9, $3) | 0; //@line 3449
    if (___async) {
     label = 21; //@line 3452
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3455
    if ($66 | 0) {
     $$0 = $66; //@line 3458
     label = 26; //@line 3459
     break;
    }
    $79 = $$17481 - $12 | 0; //@line 3462
    $80 = $$182 + $12 | 0; //@line 3463
    $81 = $$06984 + 1 | 0; //@line 3464
    if ($81 >>> 0 < $43 >>> 0) {
     $$06984 = $81; //@line 3467
     $$17481 = $79; //@line 3467
     $$182 = $80; //@line 3467
    } else {
     $$1$lcssa = $80; //@line 3469
     $$174$lcssa = $79; //@line 3469
     break L24;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 598; //@line 3474
    HEAP32[$AsyncCtx + 4 >> 2] = $$17481; //@line 3476
    HEAP32[$AsyncCtx + 8 >> 2] = $12; //@line 3478
    HEAP32[$AsyncCtx + 12 >> 2] = $$182; //@line 3480
    HEAP32[$AsyncCtx + 16 >> 2] = $$06984; //@line 3482
    HEAP32[$AsyncCtx + 20 >> 2] = $43; //@line 3484
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 3486
    HEAP32[$AsyncCtx + 28 >> 2] = $13; //@line 3488
    HEAP32[$AsyncCtx + 32 >> 2] = $9; //@line 3490
    HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 3492
    HEAP32[$AsyncCtx + 40 >> 2] = $9; //@line 3494
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 3496
    sp = STACKTOP; //@line 3497
    STACKTOP = sp; //@line 3498
    return 0; //@line 3498
   } else if ((label | 0) == 26) {
    STACKTOP = sp; //@line 3501
    return $$0 | 0; //@line 3501
   }
  } else {
   $$1$lcssa = $$070; //@line 3504
   $$174$lcssa = $$073; //@line 3504
  }
 } while (0);
 if (!$$174$lcssa) {
  $$0 = 0; //@line 3509
  STACKTOP = sp; //@line 3510
  return $$0 | 0; //@line 3510
 }
 _memcpy((HEAP32[$13 >> 2] | 0) + ($9 + 16) | 0, $$1$lcssa | 0, $$174$lcssa | 0) | 0; //@line 3514
 HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + $$174$lcssa; //@line 3517
 $$0 = 0; //@line 3518
 STACKTOP = sp; //@line 3519
 return $$0 | 0; //@line 3519
}
function __ZN16SX1276_LoRaRadio7receiveEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $27 = 0, $3 = 0, $30 = 0, $35 = 0, $36 = 0, $39 = 0, $41 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $49 = 0, $5 = 0, $50 = 0, $53 = 0, $60 = 0, $65 = 0, $68 = 0, $73 = 0, $79 = 0, $8 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 400
 STACKTOP = STACKTOP + 48 | 0; //@line 401
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 401
 $vararg_buffer = sp; //@line 402
 $2 = sp + 24 | 0; //@line 403
 $3 = sp + 8 | 0; //@line 404
 HEAP8[$0 + 688 >> 0] = 1; //@line 406
 $5 = $0 + 783 | 0; //@line 407
 if (!(HEAP8[$5 >> 0] | 0)) {
  $41 = HEAP16[$0 + 778 >> 1] | 0; //@line 412
  do {
   if ($41 << 16 >> 16) {
    $43 = $0 + 1112 | 0; //@line 416
    $44 = $3 + 12 | 0; //@line 417
    HEAP32[$3 >> 2] = 55; //@line 418
    HEAP32[$3 + 4 >> 2] = 0; //@line 420
    HEAP32[$3 + 8 >> 2] = $0; //@line 422
    HEAP32[$44 >> 2] = 584; //@line 423
    $46 = ($41 & 65535) * 1e3 | 0; //@line 425
    $47 = $0 + 1152 | 0; //@line 426
    if (($47 | 0) != ($3 | 0)) {
     $49 = $0 + 1164 | 0; //@line 429
     $50 = HEAP32[$49 >> 2] | 0; //@line 430
     do {
      if ($50 | 0) {
       $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 435
       $AsyncCtx10 = _emscripten_alloc_async_context(40, sp) | 0; //@line 436
       FUNCTION_TABLE_vi[$53 & 1023]($47); //@line 437
       if (___async) {
        HEAP32[$AsyncCtx10 >> 2] = 56; //@line 440
        HEAP32[$AsyncCtx10 + 4 >> 2] = $44; //@line 442
        HEAP32[$AsyncCtx10 + 8 >> 2] = $49; //@line 444
        HEAP32[$AsyncCtx10 + 12 >> 2] = $47; //@line 446
        HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 448
        HEAP32[$AsyncCtx10 + 20 >> 2] = $43; //@line 450
        $60 = $AsyncCtx10 + 24 | 0; //@line 452
        HEAP32[$60 >> 2] = $46; //@line 454
        HEAP32[$60 + 4 >> 2] = 0; //@line 457
        HEAP32[$AsyncCtx10 + 32 >> 2] = $0; //@line 459
        sp = STACKTOP; //@line 460
        STACKTOP = sp; //@line 461
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx10 | 0); //@line 463
        break;
       }
      }
     } while (0);
     $65 = HEAP32[$44 >> 2] | 0; //@line 468
     do {
      if (!$65) {
       $79 = 0; //@line 472
      } else {
       $68 = HEAP32[$65 + 4 >> 2] | 0; //@line 475
       $AsyncCtx13 = _emscripten_alloc_async_context(32, sp) | 0; //@line 476
       FUNCTION_TABLE_vii[$68 & 15]($47, $3); //@line 477
       if (___async) {
        HEAP32[$AsyncCtx13 >> 2] = 57; //@line 480
        HEAP32[$AsyncCtx13 + 4 >> 2] = $44; //@line 482
        HEAP32[$AsyncCtx13 + 8 >> 2] = $49; //@line 484
        HEAP32[$AsyncCtx13 + 12 >> 2] = $43; //@line 486
        $73 = $AsyncCtx13 + 16 | 0; //@line 488
        HEAP32[$73 >> 2] = $46; //@line 490
        HEAP32[$73 + 4 >> 2] = 0; //@line 493
        HEAP32[$AsyncCtx13 + 24 >> 2] = $0; //@line 495
        HEAP32[$AsyncCtx13 + 28 >> 2] = $3; //@line 497
        sp = STACKTOP; //@line 498
        STACKTOP = sp; //@line 499
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx13 | 0); //@line 501
        $79 = HEAP32[$44 >> 2] | 0; //@line 503
        break;
       }
      }
     } while (0);
     HEAP32[$49 >> 2] = $79; //@line 508
    }
    __ZN4mbed6Ticker5setupEy($43, $46, 0); //@line 510
    $80 = HEAP32[$44 >> 2] | 0; //@line 511
    if ($80 | 0) {
     $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 515
     $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 516
     FUNCTION_TABLE_vi[$83 & 1023]($3); //@line 517
     if (___async) {
      HEAP32[$AsyncCtx17 >> 2] = 58; //@line 520
      HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 522
      sp = STACKTOP; //@line 523
      STACKTOP = sp; //@line 524
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx17 | 0); //@line 526
      break;
     }
    }
   }
  } while (0);
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 532
  STACKTOP = sp; //@line 533
  return;
 }
 $8 = _emscripten_asm_const_i(2) | 0; //@line 535
 $11 = $8 - (HEAP32[$0 + 784 >> 2] | 0) | 0; //@line 538
 HEAP8[$5 >> 0] = 0; //@line 539
 if ($11 >>> 0 > 1e3) {
  HEAP32[$vararg_buffer >> 2] = $11; //@line 542
  _mbed_tracef(4, 11105, 11110, $vararg_buffer); //@line 543
  STACKTOP = sp; //@line 544
  return;
 }
 $13 = $0 + 1112 | 0; //@line 546
 $14 = $2 + 12 | 0; //@line 547
 HEAP32[$2 >> 2] = 51; //@line 548
 HEAP32[$2 + 4 >> 2] = 0; //@line 550
 HEAP32[$2 + 8 >> 2] = $0; //@line 552
 HEAP32[$14 >> 2] = 584; //@line 553
 $15 = $0 + 1152 | 0; //@line 554
 if (($15 | 0) != ($2 | 0)) {
  $17 = $0 + 1164 | 0; //@line 557
  $18 = HEAP32[$17 >> 2] | 0; //@line 558
  do {
   if ($18 | 0) {
    $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 563
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 564
    FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 565
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 52; //@line 568
     HEAP32[$AsyncCtx + 4 >> 2] = $14; //@line 570
     HEAP32[$AsyncCtx + 8 >> 2] = $17; //@line 572
     HEAP32[$AsyncCtx + 12 >> 2] = $15; //@line 574
     HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 576
     HEAP32[$AsyncCtx + 20 >> 2] = $13; //@line 578
     sp = STACKTOP; //@line 579
     STACKTOP = sp; //@line 580
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 582
     break;
    }
   }
  } while (0);
  $27 = HEAP32[$14 >> 2] | 0; //@line 587
  do {
   if (!$27) {
    $35 = 0; //@line 591
   } else {
    $30 = HEAP32[$27 + 4 >> 2] | 0; //@line 594
    $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 595
    FUNCTION_TABLE_vii[$30 & 15]($15, $2); //@line 596
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 53; //@line 599
     HEAP32[$AsyncCtx2 + 4 >> 2] = $14; //@line 601
     HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 603
     HEAP32[$AsyncCtx2 + 12 >> 2] = $13; //@line 605
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 607
     sp = STACKTOP; //@line 608
     STACKTOP = sp; //@line 609
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 611
     $35 = HEAP32[$14 >> 2] | 0; //@line 613
     break;
    }
   }
  } while (0);
  HEAP32[$17 >> 2] = $35; //@line 618
 }
 __ZN4mbed6Ticker5setupEy($13, 2e5, 0); //@line 620
 $36 = HEAP32[$14 >> 2] | 0; //@line 621
 if (!$36) {
  STACKTOP = sp; //@line 624
  return;
 }
 $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 627
 $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 628
 FUNCTION_TABLE_vi[$39 & 1023]($2); //@line 629
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 54; //@line 632
  sp = STACKTOP; //@line 633
  STACKTOP = sp; //@line 634
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 636
 STACKTOP = sp; //@line 637
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $18 = 0, $21 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $36 = 0, $4 = 0, $43 = 0, $46 = 0, $5 = 0, $56 = 0, $59 = 0, $6 = 0, $64 = 0, $67 = 0, $7 = 0, $71 = 0, $74 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9907
 STACKTOP = STACKTOP + 48 | 0; //@line 9908
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9908
 $4 = sp + 16 | 0; //@line 9909
 $5 = sp; //@line 9910
 $6 = $1 + 12 | 0; //@line 9911
 $7 = HEAP32[$6 >> 2] | 0; //@line 9912
 do {
  if (!$7) {
   $9 = $5 + 12 | 0; //@line 9916
   HEAP32[$9 >> 2] = 0; //@line 9917
   $30 = 0; //@line 9918
   $36 = $9; //@line 9918
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 9921
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 9922
   FUNCTION_TABLE_vii[$11 & 15]($5, $1); //@line 9923
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 324; //@line 9926
    HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 9928
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 9930
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 9932
    HEAP8[$AsyncCtx + 16 >> 0] = $2; //@line 9934
    HEAP8[$AsyncCtx + 17 >> 0] = $3; //@line 9936
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 9938
    sp = STACKTOP; //@line 9939
    STACKTOP = sp; //@line 9940
    return 0; //@line 9940
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9942
   $$pre$i = HEAP32[$6 >> 2] | 0; //@line 9943
   $18 = $5 + 12 | 0; //@line 9944
   HEAP32[$18 >> 2] = $$pre$i; //@line 9945
   if (!$$pre$i) {
    $30 = 0; //@line 9948
    $36 = $18; //@line 9948
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 9952
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 9953
    FUNCTION_TABLE_vii[$21 & 15]($4, $5); //@line 9954
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 325; //@line 9957
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 9959
     HEAP32[$AsyncCtx2 + 8 >> 2] = $18; //@line 9961
     HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 9963
     HEAP8[$AsyncCtx2 + 13 >> 0] = $3; //@line 9965
     HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 9967
     HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 9969
     HEAP32[$AsyncCtx2 + 24 >> 2] = $18; //@line 9971
     sp = STACKTOP; //@line 9972
     STACKTOP = sp; //@line 9973
     return 0; //@line 9973
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9975
     $30 = HEAP32[$18 >> 2] | 0; //@line 9977
     $36 = $18; //@line 9977
     break;
    }
   }
  }
 } while (0);
 $29 = $4 + 12 | 0; //@line 9983
 HEAP32[$29 >> 2] = $30; //@line 9984
 $31 = $4 + 16 | 0; //@line 9985
 HEAP8[$31 >> 0] = $2; //@line 9986
 HEAP8[$4 + 17 >> 0] = $3; //@line 9988
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9989
 $33 = _equeue_alloc($0, 20) | 0; //@line 9990
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 326; //@line 9993
  HEAP32[$AsyncCtx18 + 4 >> 2] = $29; //@line 9995
  HEAP32[$AsyncCtx18 + 8 >> 2] = $36; //@line 9997
  HEAP32[$AsyncCtx18 + 12 >> 2] = $5; //@line 9999
  HEAP32[$AsyncCtx18 + 16 >> 2] = $29; //@line 10001
  HEAP32[$AsyncCtx18 + 20 >> 2] = $31; //@line 10003
  HEAP32[$AsyncCtx18 + 24 >> 2] = $0; //@line 10005
  HEAP32[$AsyncCtx18 + 28 >> 2] = $4; //@line 10007
  sp = STACKTOP; //@line 10008
  STACKTOP = sp; //@line 10009
  return 0; //@line 10009
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 10011
 do {
  if (!$33) {
   $$0$i = 0; //@line 10015
  } else {
   $43 = HEAP32[$29 >> 2] | 0; //@line 10017
   do {
    if (!$43) {
     $56 = 0; //@line 10021
    } else {
     $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 10024
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10025
     FUNCTION_TABLE_vii[$46 & 15]($33, $4); //@line 10026
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 327; //@line 10029
      HEAP32[$AsyncCtx5 + 4 >> 2] = $29; //@line 10031
      HEAP32[$AsyncCtx5 + 8 >> 2] = $33; //@line 10033
      HEAP32[$AsyncCtx5 + 12 >> 2] = $31; //@line 10035
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 10037
      HEAP32[$AsyncCtx5 + 20 >> 2] = $29; //@line 10039
      HEAP32[$AsyncCtx5 + 24 >> 2] = $36; //@line 10041
      HEAP32[$AsyncCtx5 + 28 >> 2] = $4; //@line 10043
      HEAP32[$AsyncCtx5 + 32 >> 2] = $5; //@line 10045
      sp = STACKTOP; //@line 10046
      STACKTOP = sp; //@line 10047
      return 0; //@line 10047
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10049
      $56 = HEAP32[$29 >> 2] | 0; //@line 10051
      break;
     }
    }
   } while (0);
   HEAP32[$33 + 12 >> 2] = $56; //@line 10057
   HEAP16[$33 + 16 >> 1] = HEAP16[$31 >> 1] | 0; //@line 10060
   _equeue_event_dtor($33, 328); //@line 10061
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10062
   $59 = _equeue_post($0, 329, $33) | 0; //@line 10063
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 330; //@line 10066
    HEAP32[$AsyncCtx15 + 4 >> 2] = $29; //@line 10068
    HEAP32[$AsyncCtx15 + 8 >> 2] = $36; //@line 10070
    HEAP32[$AsyncCtx15 + 12 >> 2] = $4; //@line 10072
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 10074
    sp = STACKTOP; //@line 10075
    STACKTOP = sp; //@line 10076
    return 0; //@line 10076
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10078
    $$0$i = $59; //@line 10079
    break;
   }
  }
 } while (0);
 $64 = HEAP32[$29 >> 2] | 0; //@line 10084
 do {
  if ($64 | 0) {
   $67 = HEAP32[$64 + 8 >> 2] | 0; //@line 10089
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10090
   FUNCTION_TABLE_vi[$67 & 1023]($4); //@line 10091
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 331; //@line 10094
    HEAP32[$AsyncCtx8 + 4 >> 2] = $36; //@line 10096
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 10098
    HEAP32[$AsyncCtx8 + 12 >> 2] = $5; //@line 10100
    sp = STACKTOP; //@line 10101
    STACKTOP = sp; //@line 10102
    return 0; //@line 10102
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10104
    break;
   }
  }
 } while (0);
 $71 = HEAP32[$36 >> 2] | 0; //@line 10109
 if (!$71) {
  STACKTOP = sp; //@line 10112
  return $$0$i | 0; //@line 10112
 }
 $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 10115
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10116
 FUNCTION_TABLE_vi[$74 & 1023]($5); //@line 10117
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 332; //@line 10120
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 10122
  sp = STACKTOP; //@line 10123
  STACKTOP = sp; //@line 10124
  return 0; //@line 10124
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 10126
 STACKTOP = sp; //@line 10127
 return $$0$i | 0; //@line 10127
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $11 = 0, $17 = 0, $18 = 0, $21 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $36 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $55 = 0, $58 = 0, $6 = 0, $63 = 0, $66 = 0, $70 = 0, $73 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 7087
 STACKTOP = STACKTOP + 48 | 0; //@line 7088
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7088
 $3 = sp + 16 | 0; //@line 7089
 $4 = sp; //@line 7090
 $5 = $1 + 12 | 0; //@line 7091
 $6 = HEAP32[$5 >> 2] | 0; //@line 7092
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 7096
   HEAP32[$8 >> 2] = 0; //@line 7097
   $29 = 0; //@line 7099
   $31 = $2 & 1; //@line 7099
   $36 = $8; //@line 7099
  } else {
   $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 7102
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7103
   FUNCTION_TABLE_vii[$11 & 15]($4, $1); //@line 7104
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 221; //@line 7107
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 7109
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 7111
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7113
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 7115
    HEAP8[$AsyncCtx + 20 >> 0] = $2 & 1; //@line 7118
    sp = STACKTOP; //@line 7119
    STACKTOP = sp; //@line 7120
    return 0; //@line 7120
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7122
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 7123
   $17 = $4 + 12 | 0; //@line 7124
   HEAP32[$17 >> 2] = $$pre$i; //@line 7125
   $18 = $2 & 1; //@line 7126
   if (!$$pre$i) {
    $29 = 0; //@line 7129
    $31 = $18; //@line 7129
    $36 = $17; //@line 7129
   } else {
    $21 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 7133
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 7134
    FUNCTION_TABLE_vii[$21 & 15]($3, $4); //@line 7135
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 222; //@line 7138
     HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 7140
     HEAP32[$AsyncCtx2 + 8 >> 2] = $4; //@line 7142
     HEAP32[$AsyncCtx2 + 12 >> 2] = $17; //@line 7144
     HEAP8[$AsyncCtx2 + 16 >> 0] = $18; //@line 7146
     HEAP32[$AsyncCtx2 + 20 >> 2] = $17; //@line 7148
     HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 7150
     sp = STACKTOP; //@line 7151
     STACKTOP = sp; //@line 7152
     return 0; //@line 7152
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7154
     $29 = HEAP32[$17 >> 2] | 0; //@line 7156
     $31 = $18; //@line 7156
     $36 = $17; //@line 7156
     break;
    }
   }
  }
 } while (0);
 $28 = $3 + 12 | 0; //@line 7162
 HEAP32[$28 >> 2] = $29; //@line 7163
 $30 = $3 + 16 | 0; //@line 7164
 HEAP8[$30 >> 0] = $31; //@line 7165
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7166
 $32 = _equeue_alloc($0, 20) | 0; //@line 7167
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 223; //@line 7170
  HEAP32[$AsyncCtx18 + 4 >> 2] = $28; //@line 7172
  HEAP32[$AsyncCtx18 + 8 >> 2] = $28; //@line 7174
  HEAP32[$AsyncCtx18 + 12 >> 2] = $36; //@line 7176
  HEAP32[$AsyncCtx18 + 16 >> 2] = $3; //@line 7178
  HEAP32[$AsyncCtx18 + 20 >> 2] = $4; //@line 7180
  HEAP32[$AsyncCtx18 + 24 >> 2] = $30; //@line 7182
  HEAP32[$AsyncCtx18 + 28 >> 2] = $0; //@line 7184
  sp = STACKTOP; //@line 7185
  STACKTOP = sp; //@line 7186
  return 0; //@line 7186
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 7188
 do {
  if (!$32) {
   $$0$i = 0; //@line 7192
  } else {
   $42 = HEAP32[$28 >> 2] | 0; //@line 7194
   do {
    if (!$42) {
     $55 = 0; //@line 7198
    } else {
     $45 = HEAP32[$42 + 4 >> 2] | 0; //@line 7201
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 7202
     FUNCTION_TABLE_vii[$45 & 15]($32, $3); //@line 7203
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 224; //@line 7206
      HEAP32[$AsyncCtx5 + 4 >> 2] = $28; //@line 7208
      HEAP32[$AsyncCtx5 + 8 >> 2] = $32; //@line 7210
      HEAP32[$AsyncCtx5 + 12 >> 2] = $30; //@line 7212
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 7214
      HEAP32[$AsyncCtx5 + 20 >> 2] = $28; //@line 7216
      HEAP32[$AsyncCtx5 + 24 >> 2] = $36; //@line 7218
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 7220
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 7222
      sp = STACKTOP; //@line 7223
      STACKTOP = sp; //@line 7224
      return 0; //@line 7224
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 7226
      $55 = HEAP32[$28 >> 2] | 0; //@line 7228
      break;
     }
    }
   } while (0);
   HEAP32[$32 + 12 >> 2] = $55; //@line 7234
   HEAP8[$32 + 16 >> 0] = HEAP8[$30 >> 0] | 0; //@line 7237
   _equeue_event_dtor($32, 225); //@line 7238
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7239
   $58 = _equeue_post($0, 226, $32) | 0; //@line 7240
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 227; //@line 7243
    HEAP32[$AsyncCtx15 + 4 >> 2] = $28; //@line 7245
    HEAP32[$AsyncCtx15 + 8 >> 2] = $36; //@line 7247
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 7249
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 7251
    sp = STACKTOP; //@line 7252
    STACKTOP = sp; //@line 7253
    return 0; //@line 7253
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 7255
    $$0$i = $58; //@line 7256
    break;
   }
  }
 } while (0);
 $63 = HEAP32[$28 >> 2] | 0; //@line 7261
 do {
  if ($63 | 0) {
   $66 = HEAP32[$63 + 8 >> 2] | 0; //@line 7266
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7267
   FUNCTION_TABLE_vi[$66 & 1023]($3); //@line 7268
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 228; //@line 7271
    HEAP32[$AsyncCtx8 + 4 >> 2] = $36; //@line 7273
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 7275
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 7277
    sp = STACKTOP; //@line 7278
    STACKTOP = sp; //@line 7279
    return 0; //@line 7279
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 7281
    break;
   }
  }
 } while (0);
 $70 = HEAP32[$36 >> 2] | 0; //@line 7286
 if (!$70) {
  STACKTOP = sp; //@line 7289
  return $$0$i | 0; //@line 7289
 }
 $73 = HEAP32[$70 + 8 >> 2] | 0; //@line 7292
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7293
 FUNCTION_TABLE_vi[$73 & 1023]($4); //@line 7294
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 229; //@line 7297
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 7299
  sp = STACKTOP; //@line 7300
  STACKTOP = sp; //@line 7301
  return 0; //@line 7301
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 7303
 STACKTOP = sp; //@line 7304
 return $$0$i | 0; //@line 7304
}
function _mbedtls_cipher_cmac_update__async_cb_266($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18071
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18073
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18075
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18077
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18079
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18081
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18083
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18085
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18087
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18089
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18091
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 18094
  $66 = ___async_retval; //@line 18095
  HEAP32[$66 >> 2] = $$0; //@line 18096
  return;
 }
 $22 = $2 - (HEAP32[$6 >> 2] | 0) | 0; //@line 18100
 $23 = $16 + $22 | 0; //@line 18101
 $24 = $18 - $22 | 0; //@line 18102
 HEAP32[$6 >> 2] = 0; //@line 18103
 $27 = (($2 + -1 + $24 | 0) >>> 0) / ($2 >>> 0) | 0; //@line 18106
 if ($27 >>> 0 <= 1) {
  if (!$24) {
   $$0 = 0; //@line 18111
   $66 = ___async_retval; //@line 18112
   HEAP32[$66 >> 2] = $$0; //@line 18113
   return;
  }
  _memcpy((HEAP32[$6 >> 2] | 0) + ($8 + 16) | 0, $23 | 0, $24 | 0) | 0; //@line 18118
  HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $24; //@line 18121
  $$0 = 0; //@line 18122
  $66 = ___async_retval; //@line 18123
  HEAP32[$66 >> 2] = $$0; //@line 18124
  return;
 }
 if (!$2) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 18129
  $30 = _mbedtls_cipher_update($10, $12, 0, $12, $14) | 0; //@line 18130
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 18133
   $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 18134
   HEAP32[$31 >> 2] = 1; //@line 18135
   $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 18136
   HEAP32[$32 >> 2] = $27; //@line 18137
   $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 18138
   HEAP32[$33 >> 2] = $4; //@line 18139
   $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 18140
   HEAP32[$34 >> 2] = $10; //@line 18141
   $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 18142
   HEAP32[$35 >> 2] = $12; //@line 18143
   $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 18144
   HEAP32[$36 >> 2] = $14; //@line 18145
   $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 18146
   HEAP32[$37 >> 2] = $24; //@line 18147
   $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 18148
   HEAP32[$38 >> 2] = $23; //@line 18149
   $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 18150
   HEAP32[$39 >> 2] = $6; //@line 18151
   $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 18152
   HEAP32[$40 >> 2] = $8; //@line 18153
   sp = STACKTOP; //@line 18154
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 18158
  ___async_unwind = 0; //@line 18159
  HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 18160
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 18161
  HEAP32[$31 >> 2] = 1; //@line 18162
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 18163
  HEAP32[$32 >> 2] = $27; //@line 18164
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 18165
  HEAP32[$33 >> 2] = $4; //@line 18166
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 18167
  HEAP32[$34 >> 2] = $10; //@line 18168
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 18169
  HEAP32[$35 >> 2] = $12; //@line 18170
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 18171
  HEAP32[$36 >> 2] = $14; //@line 18172
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 18173
  HEAP32[$37 >> 2] = $24; //@line 18174
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 18175
  HEAP32[$38 >> 2] = $23; //@line 18176
  $39 = $ReallocAsyncCtx2 + 36 | 0; //@line 18177
  HEAP32[$39 >> 2] = $6; //@line 18178
  $40 = $ReallocAsyncCtx2 + 40 | 0; //@line 18179
  HEAP32[$40 >> 2] = $8; //@line 18180
  sp = STACKTOP; //@line 18181
  return;
 }
 $$09$i75 = 0; //@line 18184
 do {
  $44 = $8 + $$09$i75 | 0; //@line 18188
  HEAP8[$44 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$23 + $$09$i75 >> 0]; //@line 18191
  $$09$i75 = $$09$i75 + 1 | 0; //@line 18192
 } while (($$09$i75 | 0) != ($2 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 18200
 $48 = _mbedtls_cipher_update($10, $12, $2, $12, $14) | 0; //@line 18201
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 18204
  $49 = $ReallocAsyncCtx + 4 | 0; //@line 18205
  HEAP32[$49 >> 2] = $24; //@line 18206
  $50 = $ReallocAsyncCtx + 8 | 0; //@line 18207
  HEAP32[$50 >> 2] = $2; //@line 18208
  $51 = $ReallocAsyncCtx + 12 | 0; //@line 18209
  HEAP32[$51 >> 2] = $23; //@line 18210
  $52 = $ReallocAsyncCtx + 16 | 0; //@line 18211
  HEAP32[$52 >> 2] = 1; //@line 18212
  $53 = $ReallocAsyncCtx + 20 | 0; //@line 18213
  HEAP32[$53 >> 2] = $27; //@line 18214
  $54 = $ReallocAsyncCtx + 24 | 0; //@line 18215
  HEAP32[$54 >> 2] = $4; //@line 18216
  $55 = $ReallocAsyncCtx + 28 | 0; //@line 18217
  HEAP32[$55 >> 2] = $6; //@line 18218
  $56 = $ReallocAsyncCtx + 32 | 0; //@line 18219
  HEAP32[$56 >> 2] = $8; //@line 18220
  $57 = $ReallocAsyncCtx + 36 | 0; //@line 18221
  HEAP32[$57 >> 2] = $10; //@line 18222
  $58 = $ReallocAsyncCtx + 40 | 0; //@line 18223
  HEAP32[$58 >> 2] = $12; //@line 18224
  $59 = $ReallocAsyncCtx + 44 | 0; //@line 18225
  HEAP32[$59 >> 2] = $14; //@line 18226
  sp = STACKTOP; //@line 18227
  return;
 }
 HEAP32[___async_retval >> 2] = $48; //@line 18231
 ___async_unwind = 0; //@line 18232
 HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 18233
 $49 = $ReallocAsyncCtx + 4 | 0; //@line 18234
 HEAP32[$49 >> 2] = $24; //@line 18235
 $50 = $ReallocAsyncCtx + 8 | 0; //@line 18236
 HEAP32[$50 >> 2] = $2; //@line 18237
 $51 = $ReallocAsyncCtx + 12 | 0; //@line 18238
 HEAP32[$51 >> 2] = $23; //@line 18239
 $52 = $ReallocAsyncCtx + 16 | 0; //@line 18240
 HEAP32[$52 >> 2] = 1; //@line 18241
 $53 = $ReallocAsyncCtx + 20 | 0; //@line 18242
 HEAP32[$53 >> 2] = $27; //@line 18243
 $54 = $ReallocAsyncCtx + 24 | 0; //@line 18244
 HEAP32[$54 >> 2] = $4; //@line 18245
 $55 = $ReallocAsyncCtx + 28 | 0; //@line 18246
 HEAP32[$55 >> 2] = $6; //@line 18247
 $56 = $ReallocAsyncCtx + 32 | 0; //@line 18248
 HEAP32[$56 >> 2] = $8; //@line 18249
 $57 = $ReallocAsyncCtx + 36 | 0; //@line 18250
 HEAP32[$57 >> 2] = $10; //@line 18251
 $58 = $ReallocAsyncCtx + 40 | 0; //@line 18252
 HEAP32[$58 >> 2] = $12; //@line 18253
 $59 = $ReallocAsyncCtx + 44 | 0; //@line 18254
 HEAP32[$59 >> 2] = $14; //@line 18255
 sp = STACKTOP; //@line 18256
 return;
}
function __ZN7LoRaPHY13apply_cf_listEPKhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $44 = 0, $45 = 0, $6 = 0, $70 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27834
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27836
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 27838
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27840
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 27842
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27844
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27846
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27848
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27850
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27852
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 27854
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 27856
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 27858
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 27860
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 27862
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 27864
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 27866
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 27868
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 27870
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 27872
 if (HEAP8[___async_retval >> 0] & 1) {
  $70 = $16; //@line 27877
 } else {
  $44 = $16 + 1 | 0; //@line 27879
  if (($44 | 0) < (HEAPU8[$24 >> 0] | 0 | 0)) {
   $42 = HEAP32[(HEAP32[$26 >> 2] | 0) + 76 >> 2] | 0; //@line 27886
   $ReallocAsyncCtx = _emscripten_realloc_async_context(80) | 0; //@line 27888
   $45 = FUNCTION_TABLE_iiii[$42 & 31]($14, $28, $44 & 255) | 0; //@line 27889
   if (!___async) {
    HEAP8[___async_retval >> 0] = $45 & 1; //@line 27894
    ___async_unwind = 0; //@line 27895
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 514; //@line 27897
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 27899
   HEAP8[$ReallocAsyncCtx + 8 >> 0] = $4; //@line 27901
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 27903
   HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 27905
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 27907
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 27909
   HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 27911
   HEAP32[$ReallocAsyncCtx + 32 >> 2] = $44; //@line 27913
   HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 27915
   HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 27917
   HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 27919
   HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 27921
   HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 27923
   HEAP32[$ReallocAsyncCtx + 56 >> 2] = $28; //@line 27925
   HEAP32[$ReallocAsyncCtx + 60 >> 2] = $30; //@line 27927
   HEAP32[$ReallocAsyncCtx + 64 >> 2] = $32; //@line 27929
   HEAP32[$ReallocAsyncCtx + 68 >> 2] = $34; //@line 27931
   HEAP32[$ReallocAsyncCtx + 72 >> 2] = $36; //@line 27933
   HEAP32[$ReallocAsyncCtx + 76 >> 2] = $38; //@line 27935
   sp = STACKTOP; //@line 27936
   return;
  } else {
   $70 = -1; //@line 27939
  }
 }
 HEAP8[$18 >> 0] = $70; //@line 27943
 $73 = HEAP32[(HEAP32[$20 >> 2] | 0) + 60 >> 2] | 0; //@line 27946
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(68) | 0; //@line 27947
 FUNCTION_TABLE_iiii[$73 & 31]($14, $22, $8) | 0; //@line 27948
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 515; //@line 27951
  $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 27952
  HEAP32[$74 >> 2] = $2; //@line 27953
  $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 27954
  HEAP32[$75 >> 2] = $6; //@line 27955
  $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 27956
  HEAP32[$76 >> 2] = $10; //@line 27957
  $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 27958
  HEAP32[$77 >> 2] = $12; //@line 27959
  $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 27960
  HEAP32[$78 >> 2] = $14; //@line 27961
  $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 27962
  HEAP32[$79 >> 2] = $18; //@line 27963
  $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 27964
  HEAP32[$80 >> 2] = $20; //@line 27965
  $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 27966
  HEAP32[$81 >> 2] = $22; //@line 27967
  $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 27968
  HEAP32[$82 >> 2] = $24; //@line 27969
  $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 27970
  HEAP32[$83 >> 2] = $26; //@line 27971
  $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 27972
  HEAP32[$84 >> 2] = $30; //@line 27973
  $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 27974
  HEAP32[$85 >> 2] = $32; //@line 27975
  $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 27976
  HEAP32[$86 >> 2] = $34; //@line 27977
  $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 27978
  HEAP32[$87 >> 2] = $36; //@line 27979
  $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 27980
  HEAP32[$88 >> 2] = $38; //@line 27981
  $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 27982
  HEAP8[$89 >> 0] = $4; //@line 27983
  $90 = $ReallocAsyncCtx2 + 65 | 0; //@line 27984
  HEAP8[$90 >> 0] = $8; //@line 27985
  sp = STACKTOP; //@line 27986
  return;
 }
 ___async_unwind = 0; //@line 27989
 HEAP32[$ReallocAsyncCtx2 >> 2] = 515; //@line 27990
 $74 = $ReallocAsyncCtx2 + 4 | 0; //@line 27991
 HEAP32[$74 >> 2] = $2; //@line 27992
 $75 = $ReallocAsyncCtx2 + 8 | 0; //@line 27993
 HEAP32[$75 >> 2] = $6; //@line 27994
 $76 = $ReallocAsyncCtx2 + 12 | 0; //@line 27995
 HEAP32[$76 >> 2] = $10; //@line 27996
 $77 = $ReallocAsyncCtx2 + 16 | 0; //@line 27997
 HEAP32[$77 >> 2] = $12; //@line 27998
 $78 = $ReallocAsyncCtx2 + 20 | 0; //@line 27999
 HEAP32[$78 >> 2] = $14; //@line 28000
 $79 = $ReallocAsyncCtx2 + 24 | 0; //@line 28001
 HEAP32[$79 >> 2] = $18; //@line 28002
 $80 = $ReallocAsyncCtx2 + 28 | 0; //@line 28003
 HEAP32[$80 >> 2] = $20; //@line 28004
 $81 = $ReallocAsyncCtx2 + 32 | 0; //@line 28005
 HEAP32[$81 >> 2] = $22; //@line 28006
 $82 = $ReallocAsyncCtx2 + 36 | 0; //@line 28007
 HEAP32[$82 >> 2] = $24; //@line 28008
 $83 = $ReallocAsyncCtx2 + 40 | 0; //@line 28009
 HEAP32[$83 >> 2] = $26; //@line 28010
 $84 = $ReallocAsyncCtx2 + 44 | 0; //@line 28011
 HEAP32[$84 >> 2] = $30; //@line 28012
 $85 = $ReallocAsyncCtx2 + 48 | 0; //@line 28013
 HEAP32[$85 >> 2] = $32; //@line 28014
 $86 = $ReallocAsyncCtx2 + 52 | 0; //@line 28015
 HEAP32[$86 >> 2] = $34; //@line 28016
 $87 = $ReallocAsyncCtx2 + 56 | 0; //@line 28017
 HEAP32[$87 >> 2] = $36; //@line 28018
 $88 = $ReallocAsyncCtx2 + 60 | 0; //@line 28019
 HEAP32[$88 >> 2] = $38; //@line 28020
 $89 = $ReallocAsyncCtx2 + 64 | 0; //@line 28021
 HEAP8[$89 >> 0] = $4; //@line 28022
 $90 = $ReallocAsyncCtx2 + 65 | 0; //@line 28023
 HEAP8[$90 >> 0] = $8; //@line 28024
 sp = STACKTOP; //@line 28025
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $13 = 0, $17 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $31 = 0, $33 = 0, $37 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx3 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1044
 HEAP32[$0 >> 2] = 496; //@line 1045
 $1 = $0 + 1240 | 0; //@line 1046
 HEAP32[$1 >> 2] = 10244; //@line 1047
 __ZN4mbed6Ticker6detachEv($1); //@line 1048
 $3 = HEAP32[$0 + 1292 >> 2] | 0; //@line 1050
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 1056
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1057
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 1280 | 0); //@line 1058
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 69; //@line 1061
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1063
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1065
    sp = STACKTOP; //@line 1066
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1069
    break;
   }
  }
 } while (0);
 $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1074
 __ZN4mbed10TimerEventD2Ev($1); //@line 1075
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 70; //@line 1078
  HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 1080
  sp = STACKTOP; //@line 1081
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 1084
 $11 = $0 + 1176 | 0; //@line 1085
 HEAP32[$11 >> 2] = 10244; //@line 1086
 __ZN4mbed6Ticker6detachEv($11); //@line 1087
 $13 = HEAP32[$0 + 1228 >> 2] | 0; //@line 1089
 do {
  if ($13 | 0) {
   $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 1095
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1096
   FUNCTION_TABLE_vi[$17 & 1023]($0 + 1216 | 0); //@line 1097
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 71; //@line 1100
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 1102
    HEAP32[$AsyncCtx3 + 8 >> 2] = $11; //@line 1104
    sp = STACKTOP; //@line 1105
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 1108
    break;
   }
  }
 } while (0);
 $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1113
 __ZN4mbed10TimerEventD2Ev($11); //@line 1114
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 72; //@line 1117
  HEAP32[$AsyncCtx20 + 4 >> 2] = $0; //@line 1119
  sp = STACKTOP; //@line 1120
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 1123
 $21 = $0 + 1112 | 0; //@line 1124
 HEAP32[$21 >> 2] = 10244; //@line 1125
 __ZN4mbed6Ticker6detachEv($21); //@line 1126
 $23 = HEAP32[$0 + 1164 >> 2] | 0; //@line 1128
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 1134
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1135
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1152 | 0); //@line 1136
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 73; //@line 1139
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 1141
    HEAP32[$AsyncCtx7 + 8 >> 2] = $21; //@line 1143
    sp = STACKTOP; //@line 1144
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 1147
    break;
   }
  }
 } while (0);
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1152
 __ZN4mbed10TimerEventD2Ev($21); //@line 1153
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 74; //@line 1156
  HEAP32[$AsyncCtx17 + 4 >> 2] = $0; //@line 1158
  sp = STACKTOP; //@line 1159
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 1162
 $31 = $0 + 1048 | 0; //@line 1163
 HEAP32[$31 >> 2] = 10244; //@line 1164
 __ZN4mbed6Ticker6detachEv($31); //@line 1165
 $33 = HEAP32[$0 + 1100 >> 2] | 0; //@line 1167
 do {
  if ($33 | 0) {
   $37 = HEAP32[$33 + 8 >> 2] | 0; //@line 1173
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1174
   FUNCTION_TABLE_vi[$37 & 1023]($0 + 1088 | 0); //@line 1175
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 75; //@line 1178
    HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 1180
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 1182
    sp = STACKTOP; //@line 1183
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 1186
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1191
 __ZN4mbed10TimerEventD2Ev($31); //@line 1192
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 76; //@line 1195
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 1197
  sp = STACKTOP; //@line 1198
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 1201
 $AsyncCtx46 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1203
 __ZN4mbed11InterruptInD2Ev($0 + 412 | 0); //@line 1204
 if (___async) {
  HEAP32[$AsyncCtx46 >> 2] = 77; //@line 1207
  HEAP32[$AsyncCtx46 + 4 >> 2] = $0; //@line 1209
  sp = STACKTOP; //@line 1210
  return;
 }
 _emscripten_free_async_context($AsyncCtx46 | 0); //@line 1213
 $AsyncCtx42 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1215
 __ZN4mbed11InterruptInD2Ev($0 + 340 | 0); //@line 1216
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 78; //@line 1219
  HEAP32[$AsyncCtx42 + 4 >> 2] = $0; //@line 1221
  sp = STACKTOP; //@line 1222
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 1225
 $AsyncCtx38 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1227
 __ZN4mbed11InterruptInD2Ev($0 + 268 | 0); //@line 1228
 if (___async) {
  HEAP32[$AsyncCtx38 >> 2] = 79; //@line 1231
  HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 1233
  sp = STACKTOP; //@line 1234
  return;
 }
 _emscripten_free_async_context($AsyncCtx38 | 0); //@line 1237
 $AsyncCtx34 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1239
 __ZN4mbed11InterruptInD2Ev($0 + 196 | 0); //@line 1240
 if (___async) {
  HEAP32[$AsyncCtx34 >> 2] = 80; //@line 1243
  HEAP32[$AsyncCtx34 + 4 >> 2] = $0; //@line 1245
  sp = STACKTOP; //@line 1246
  return;
 }
 _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1249
 $AsyncCtx30 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1251
 __ZN4mbed11InterruptInD2Ev($0 + 124 | 0); //@line 1252
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 81; //@line 1255
  HEAP32[$AsyncCtx30 + 4 >> 2] = $0; //@line 1257
  sp = STACKTOP; //@line 1258
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1261
 $AsyncCtx26 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1263
 __ZN4mbed11InterruptInD2Ev($0 + 52 | 0); //@line 1264
 if (___async) {
  HEAP32[$AsyncCtx26 >> 2] = 82; //@line 1267
  sp = STACKTOP; //@line 1268
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 1271
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$pre$i = 0, $10 = 0, $16 = 0, $19 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $31 = 0, $39 = 0, $4 = 0, $42 = 0, $5 = 0, $52 = 0, $55 = 0, $6 = 0, $60 = 0, $63 = 0, $67 = 0, $70 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8344
 STACKTOP = STACKTOP + 48 | 0; //@line 8345
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8345
 $3 = sp + 16 | 0; //@line 8346
 $4 = sp; //@line 8347
 $5 = $1 + 12 | 0; //@line 8348
 $6 = HEAP32[$5 >> 2] | 0; //@line 8349
 do {
  if (!$6) {
   $8 = $4 + 12 | 0; //@line 8353
   HEAP32[$8 >> 2] = 0; //@line 8354
   $27 = 0; //@line 8355
   $31 = $8; //@line 8355
  } else {
   $10 = HEAP32[$6 + 4 >> 2] | 0; //@line 8358
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 8359
   FUNCTION_TABLE_vii[$10 & 15]($4, $1); //@line 8360
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 267; //@line 8363
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 8365
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 8367
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 8369
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 8371
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 8373
    sp = STACKTOP; //@line 8374
    STACKTOP = sp; //@line 8375
    return 0; //@line 8375
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 8377
   $$pre$i = HEAP32[$5 >> 2] | 0; //@line 8378
   $16 = $4 + 12 | 0; //@line 8379
   HEAP32[$16 >> 2] = $$pre$i; //@line 8380
   if (!$$pre$i) {
    $27 = 0; //@line 8383
    $31 = $16; //@line 8383
   } else {
    $19 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 8387
    $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 8388
    FUNCTION_TABLE_vii[$19 & 15]($3, $4); //@line 8389
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 268; //@line 8392
     HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 8394
     HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 8396
     HEAP32[$AsyncCtx2 + 12 >> 2] = $16; //@line 8398
     HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 8400
     HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 8402
     HEAP32[$AsyncCtx2 + 24 >> 2] = $16; //@line 8404
     sp = STACKTOP; //@line 8405
     STACKTOP = sp; //@line 8406
     return 0; //@line 8406
    } else {
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8408
     $27 = HEAP32[$16 >> 2] | 0; //@line 8410
     $31 = $16; //@line 8410
     break;
    }
   }
  }
 } while (0);
 $26 = $3 + 12 | 0; //@line 8416
 HEAP32[$26 >> 2] = $27; //@line 8417
 $28 = $3 + 16 | 0; //@line 8418
 HEAP32[$28 >> 2] = $2; //@line 8419
 $AsyncCtx18 = _emscripten_alloc_async_context(32, sp) | 0; //@line 8420
 $29 = _equeue_alloc($0, 20) | 0; //@line 8421
 if (___async) {
  HEAP32[$AsyncCtx18 >> 2] = 269; //@line 8424
  HEAP32[$AsyncCtx18 + 4 >> 2] = $31; //@line 8426
  HEAP32[$AsyncCtx18 + 8 >> 2] = $4; //@line 8428
  HEAP32[$AsyncCtx18 + 12 >> 2] = $26; //@line 8430
  HEAP32[$AsyncCtx18 + 16 >> 2] = $3; //@line 8432
  HEAP32[$AsyncCtx18 + 20 >> 2] = $26; //@line 8434
  HEAP32[$AsyncCtx18 + 24 >> 2] = $28; //@line 8436
  HEAP32[$AsyncCtx18 + 28 >> 2] = $0; //@line 8438
  sp = STACKTOP; //@line 8439
  STACKTOP = sp; //@line 8440
  return 0; //@line 8440
 }
 _emscripten_free_async_context($AsyncCtx18 | 0); //@line 8442
 do {
  if (!$29) {
   $$0$i = 0; //@line 8446
  } else {
   $39 = HEAP32[$26 >> 2] | 0; //@line 8448
   do {
    if (!$39) {
     $52 = 0; //@line 8452
    } else {
     $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 8455
     $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8456
     FUNCTION_TABLE_vii[$42 & 15]($29, $3); //@line 8457
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 270; //@line 8460
      HEAP32[$AsyncCtx5 + 4 >> 2] = $26; //@line 8462
      HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 8464
      HEAP32[$AsyncCtx5 + 12 >> 2] = $28; //@line 8466
      HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 8468
      HEAP32[$AsyncCtx5 + 20 >> 2] = $26; //@line 8470
      HEAP32[$AsyncCtx5 + 24 >> 2] = $31; //@line 8472
      HEAP32[$AsyncCtx5 + 28 >> 2] = $3; //@line 8474
      HEAP32[$AsyncCtx5 + 32 >> 2] = $4; //@line 8476
      sp = STACKTOP; //@line 8477
      STACKTOP = sp; //@line 8478
      return 0; //@line 8478
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8480
      $52 = HEAP32[$26 >> 2] | 0; //@line 8482
      break;
     }
    }
   } while (0);
   HEAP32[$29 + 12 >> 2] = $52; //@line 8488
   HEAP32[$29 + 16 >> 2] = HEAP32[$28 >> 2]; //@line 8491
   _equeue_event_dtor($29, 271); //@line 8492
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8493
   $55 = _equeue_post($0, 272, $29) | 0; //@line 8494
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 273; //@line 8497
    HEAP32[$AsyncCtx15 + 4 >> 2] = $26; //@line 8499
    HEAP32[$AsyncCtx15 + 8 >> 2] = $31; //@line 8501
    HEAP32[$AsyncCtx15 + 12 >> 2] = $3; //@line 8503
    HEAP32[$AsyncCtx15 + 16 >> 2] = $4; //@line 8505
    sp = STACKTOP; //@line 8506
    STACKTOP = sp; //@line 8507
    return 0; //@line 8507
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8509
    $$0$i = $55; //@line 8510
    break;
   }
  }
 } while (0);
 $60 = HEAP32[$26 >> 2] | 0; //@line 8515
 do {
  if ($60 | 0) {
   $63 = HEAP32[$60 + 8 >> 2] | 0; //@line 8520
   $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8521
   FUNCTION_TABLE_vi[$63 & 1023]($3); //@line 8522
   if (___async) {
    HEAP32[$AsyncCtx8 >> 2] = 274; //@line 8525
    HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 8527
    HEAP32[$AsyncCtx8 + 8 >> 2] = $$0$i; //@line 8529
    HEAP32[$AsyncCtx8 + 12 >> 2] = $4; //@line 8531
    sp = STACKTOP; //@line 8532
    STACKTOP = sp; //@line 8533
    return 0; //@line 8533
   } else {
    _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8535
    break;
   }
  }
 } while (0);
 $67 = HEAP32[$31 >> 2] | 0; //@line 8540
 if (!$67) {
  STACKTOP = sp; //@line 8543
  return $$0$i | 0; //@line 8543
 }
 $70 = HEAP32[$67 + 8 >> 2] | 0; //@line 8546
 $AsyncCtx12 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8547
 FUNCTION_TABLE_vi[$70 & 1023]($4); //@line 8548
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 275; //@line 8551
  HEAP32[$AsyncCtx12 + 4 >> 2] = $$0$i; //@line 8553
  sp = STACKTOP; //@line 8554
  STACKTOP = sp; //@line 8555
  return 0; //@line 8555
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 8557
 STACKTOP = sp; //@line 8558
 return $$0$i | 0; //@line 8558
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_247($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16083
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16085
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16087
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16089
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16091
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16093
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16097
 $15 = $14 + 12 | 0; //@line 16098
 HEAP32[$14 >> 2] = 188; //@line 16099
 HEAP32[$14 + 4 >> 2] = 0; //@line 16101
 HEAP32[$14 + 8 >> 2] = $4; //@line 16103
 HEAP32[$15 >> 2] = 824; //@line 16104
 $16 = $4 + 2448 | 0; //@line 16105
 if (($16 | 0) == ($14 | 0)) {
  $43 = HEAP32[208] | 0; //@line 16109
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(28) | 0; //@line 16110
  FUNCTION_TABLE_vi[$43 & 1023]($14); //@line 16111
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 16114
   $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 16115
   HEAP32[$44 >> 2] = $14; //@line 16116
   $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 16117
   HEAP32[$45 >> 2] = $2; //@line 16118
   $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 16119
   HEAP32[$46 >> 2] = $4; //@line 16120
   $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 16121
   HEAP32[$47 >> 2] = $6; //@line 16122
   $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 16123
   HEAP32[$48 >> 2] = $8; //@line 16124
   $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 16125
   HEAP32[$49 >> 2] = $10; //@line 16126
   sp = STACKTOP; //@line 16127
   return;
  }
  ___async_unwind = 0; //@line 16130
  HEAP32[$ReallocAsyncCtx9 >> 2] = 191; //@line 16131
  $44 = $ReallocAsyncCtx9 + 4 | 0; //@line 16132
  HEAP32[$44 >> 2] = $14; //@line 16133
  $45 = $ReallocAsyncCtx9 + 8 | 0; //@line 16134
  HEAP32[$45 >> 2] = $2; //@line 16135
  $46 = $ReallocAsyncCtx9 + 12 | 0; //@line 16136
  HEAP32[$46 >> 2] = $4; //@line 16137
  $47 = $ReallocAsyncCtx9 + 16 | 0; //@line 16138
  HEAP32[$47 >> 2] = $6; //@line 16139
  $48 = $ReallocAsyncCtx9 + 20 | 0; //@line 16140
  HEAP32[$48 >> 2] = $8; //@line 16141
  $49 = $ReallocAsyncCtx9 + 24 | 0; //@line 16142
  HEAP32[$49 >> 2] = $10; //@line 16143
  sp = STACKTOP; //@line 16144
  return;
 }
 $18 = $4 + 2460 | 0; //@line 16147
 $19 = HEAP32[$18 >> 2] | 0; //@line 16148
 if (!$19) {
  $33 = HEAP32[207] | 0; //@line 16152
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 16153
  FUNCTION_TABLE_vii[$33 & 15]($16, $14); //@line 16154
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 16157
   $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 16158
   HEAP32[$34 >> 2] = $14; //@line 16159
   $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 16160
   HEAP32[$35 >> 2] = $2; //@line 16161
   $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 16162
   HEAP32[$36 >> 2] = $4; //@line 16163
   $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 16164
   HEAP32[$37 >> 2] = $15; //@line 16165
   $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 16166
   HEAP32[$38 >> 2] = $18; //@line 16167
   $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 16168
   HEAP32[$39 >> 2] = $6; //@line 16169
   $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 16170
   HEAP32[$40 >> 2] = $8; //@line 16171
   $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 16172
   HEAP32[$41 >> 2] = $10; //@line 16173
   sp = STACKTOP; //@line 16174
   return;
  }
  ___async_unwind = 0; //@line 16177
  HEAP32[$ReallocAsyncCtx8 >> 2] = 190; //@line 16178
  $34 = $ReallocAsyncCtx8 + 4 | 0; //@line 16179
  HEAP32[$34 >> 2] = $14; //@line 16180
  $35 = $ReallocAsyncCtx8 + 8 | 0; //@line 16181
  HEAP32[$35 >> 2] = $2; //@line 16182
  $36 = $ReallocAsyncCtx8 + 12 | 0; //@line 16183
  HEAP32[$36 >> 2] = $4; //@line 16184
  $37 = $ReallocAsyncCtx8 + 16 | 0; //@line 16185
  HEAP32[$37 >> 2] = $15; //@line 16186
  $38 = $ReallocAsyncCtx8 + 20 | 0; //@line 16187
  HEAP32[$38 >> 2] = $18; //@line 16188
  $39 = $ReallocAsyncCtx8 + 24 | 0; //@line 16189
  HEAP32[$39 >> 2] = $6; //@line 16190
  $40 = $ReallocAsyncCtx8 + 28 | 0; //@line 16191
  HEAP32[$40 >> 2] = $8; //@line 16192
  $41 = $ReallocAsyncCtx8 + 32 | 0; //@line 16193
  HEAP32[$41 >> 2] = $10; //@line 16194
  sp = STACKTOP; //@line 16195
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 16199
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 16200
  FUNCTION_TABLE_vi[$22 & 1023]($16); //@line 16201
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 16204
   $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 16205
   HEAP32[$23 >> 2] = $14; //@line 16206
   $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 16207
   HEAP32[$24 >> 2] = $2; //@line 16208
   $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 16209
   HEAP32[$25 >> 2] = $4; //@line 16210
   $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 16211
   HEAP32[$26 >> 2] = $15; //@line 16212
   $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 16213
   HEAP32[$27 >> 2] = $18; //@line 16214
   $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 16215
   HEAP32[$28 >> 2] = $6; //@line 16216
   $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 16217
   HEAP32[$29 >> 2] = $8; //@line 16218
   $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 16219
   HEAP32[$30 >> 2] = $10; //@line 16220
   $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 16221
   HEAP32[$31 >> 2] = $16; //@line 16222
   sp = STACKTOP; //@line 16223
   return;
  }
  ___async_unwind = 0; //@line 16226
  HEAP32[$ReallocAsyncCtx7 >> 2] = 189; //@line 16227
  $23 = $ReallocAsyncCtx7 + 4 | 0; //@line 16228
  HEAP32[$23 >> 2] = $14; //@line 16229
  $24 = $ReallocAsyncCtx7 + 8 | 0; //@line 16230
  HEAP32[$24 >> 2] = $2; //@line 16231
  $25 = $ReallocAsyncCtx7 + 12 | 0; //@line 16232
  HEAP32[$25 >> 2] = $4; //@line 16233
  $26 = $ReallocAsyncCtx7 + 16 | 0; //@line 16234
  HEAP32[$26 >> 2] = $15; //@line 16235
  $27 = $ReallocAsyncCtx7 + 20 | 0; //@line 16236
  HEAP32[$27 >> 2] = $18; //@line 16237
  $28 = $ReallocAsyncCtx7 + 24 | 0; //@line 16238
  HEAP32[$28 >> 2] = $6; //@line 16239
  $29 = $ReallocAsyncCtx7 + 28 | 0; //@line 16240
  HEAP32[$29 >> 2] = $8; //@line 16241
  $30 = $ReallocAsyncCtx7 + 32 | 0; //@line 16242
  HEAP32[$30 >> 2] = $10; //@line 16243
  $31 = $ReallocAsyncCtx7 + 36 | 0; //@line 16244
  HEAP32[$31 >> 2] = $16; //@line 16245
  sp = STACKTOP; //@line 16246
  return;
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_18($0) {
 $0 = $0 | 0;
 var $$pre16 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19829
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19831
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19833
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19835
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19837
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19839
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19841
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19843
 $$pre16 = HEAP32[$6 >> 2] | 0; //@line 19844
 if ($$pre16 | 0) {
  $17 = HEAP32[$$pre16 + 4 >> 2] | 0; //@line 19848
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 19849
  FUNCTION_TABLE_vii[$17 & 15]($2, $4); //@line 19850
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 19853
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 19854
   HEAP32[$18 >> 2] = $8; //@line 19855
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 19856
   HEAP32[$19 >> 2] = $10; //@line 19857
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 19858
   HEAP32[$20 >> 2] = $6; //@line 19859
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 19860
   HEAP32[$21 >> 2] = $12; //@line 19861
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 19862
   HEAP32[$22 >> 2] = $14; //@line 19863
   sp = STACKTOP; //@line 19864
   return;
  }
  ___async_unwind = 0; //@line 19867
  HEAP32[$ReallocAsyncCtx4 >> 2] = 356; //@line 19868
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 19869
  HEAP32[$18 >> 2] = $8; //@line 19870
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 19871
  HEAP32[$19 >> 2] = $10; //@line 19872
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 19873
  HEAP32[$20 >> 2] = $6; //@line 19874
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 19875
  HEAP32[$21 >> 2] = $12; //@line 19876
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 19877
  HEAP32[$22 >> 2] = $14; //@line 19878
  sp = STACKTOP; //@line 19879
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 19882
 $23 = $14 + 32 | 0; //@line 19883
 $24 = $14 + 44 | 0; //@line 19884
 $25 = HEAP32[$24 >> 2] | 0; //@line 19885
 if (!$25) {
  HEAP32[___async_retval >> 2] = 0; //@line 19889
  return;
 }
 $27 = $10 + 2532 | 0; //@line 19892
 if (($27 | 0) == ($23 | 0)) {
  $48 = HEAP32[$25 + 4 >> 2] | 0; //@line 19896
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 19897
  FUNCTION_TABLE_vii[$48 & 15]($8, $23); //@line 19898
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 19901
   $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 19902
   HEAP32[$49 >> 2] = $24; //@line 19903
   $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 19904
   HEAP32[$50 >> 2] = $10; //@line 19905
   $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 19906
   HEAP32[$51 >> 2] = $8; //@line 19907
   sp = STACKTOP; //@line 19908
   return;
  }
  ___async_unwind = 0; //@line 19911
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 19912
  $49 = $ReallocAsyncCtx7 + 4 | 0; //@line 19913
  HEAP32[$49 >> 2] = $24; //@line 19914
  $50 = $ReallocAsyncCtx7 + 8 | 0; //@line 19915
  HEAP32[$50 >> 2] = $10; //@line 19916
  $51 = $ReallocAsyncCtx7 + 12 | 0; //@line 19917
  HEAP32[$51 >> 2] = $8; //@line 19918
  sp = STACKTOP; //@line 19919
  return;
 }
 $29 = $10 + 2544 | 0; //@line 19922
 $30 = HEAP32[$29 >> 2] | 0; //@line 19923
 if (!$30) {
  $41 = HEAP32[$25 + 4 >> 2] | 0; //@line 19927
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 19928
  FUNCTION_TABLE_vii[$41 & 15]($27, $23); //@line 19929
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 19932
   $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 19933
   HEAP32[$42 >> 2] = $24; //@line 19934
   $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 19935
   HEAP32[$43 >> 2] = $29; //@line 19936
   $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 19937
   HEAP32[$44 >> 2] = $10; //@line 19938
   $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 19939
   HEAP32[$45 >> 2] = $8; //@line 19940
   $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 19941
   HEAP32[$46 >> 2] = $23; //@line 19942
   sp = STACKTOP; //@line 19943
   return;
  }
  ___async_unwind = 0; //@line 19946
  HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 19947
  $42 = $ReallocAsyncCtx6 + 4 | 0; //@line 19948
  HEAP32[$42 >> 2] = $24; //@line 19949
  $43 = $ReallocAsyncCtx6 + 8 | 0; //@line 19950
  HEAP32[$43 >> 2] = $29; //@line 19951
  $44 = $ReallocAsyncCtx6 + 12 | 0; //@line 19952
  HEAP32[$44 >> 2] = $10; //@line 19953
  $45 = $ReallocAsyncCtx6 + 16 | 0; //@line 19954
  HEAP32[$45 >> 2] = $8; //@line 19955
  $46 = $ReallocAsyncCtx6 + 20 | 0; //@line 19956
  HEAP32[$46 >> 2] = $23; //@line 19957
  sp = STACKTOP; //@line 19958
  return;
 } else {
  $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 19962
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 19963
  FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 19964
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 19967
   $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 19968
   HEAP32[$34 >> 2] = $24; //@line 19969
   $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 19970
   HEAP32[$35 >> 2] = $29; //@line 19971
   $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 19972
   HEAP32[$36 >> 2] = $10; //@line 19973
   $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 19974
   HEAP32[$37 >> 2] = $27; //@line 19975
   $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 19976
   HEAP32[$38 >> 2] = $23; //@line 19977
   $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 19978
   HEAP32[$39 >> 2] = $8; //@line 19979
   sp = STACKTOP; //@line 19980
   return;
  }
  ___async_unwind = 0; //@line 19983
  HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 19984
  $34 = $ReallocAsyncCtx5 + 4 | 0; //@line 19985
  HEAP32[$34 >> 2] = $24; //@line 19986
  $35 = $ReallocAsyncCtx5 + 8 | 0; //@line 19987
  HEAP32[$35 >> 2] = $29; //@line 19988
  $36 = $ReallocAsyncCtx5 + 12 | 0; //@line 19989
  HEAP32[$36 >> 2] = $10; //@line 19990
  $37 = $ReallocAsyncCtx5 + 16 | 0; //@line 19991
  HEAP32[$37 >> 2] = $27; //@line 19992
  $38 = $ReallocAsyncCtx5 + 20 | 0; //@line 19993
  HEAP32[$38 >> 2] = $23; //@line 19994
  $39 = $ReallocAsyncCtx5 + 24 | 0; //@line 19995
  HEAP32[$39 >> 2] = $8; //@line 19996
  sp = STACKTOP; //@line 19997
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_272($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18649
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18651
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18653
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18655
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18657
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18659
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18661
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18663
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18665
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$10 >> 2] | 0; //@line 18668
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 18672
   $30 = $AsyncRetVal + 16 | 0; //@line 18673
   HEAP32[$30 >> 2] = HEAP32[$6 >> 2]; //@line 18674
   HEAP32[$30 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 18674
   HEAP8[$30 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 18674
   _equeue_event_dtor($AsyncRetVal, 302); //@line 18675
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 18676
   $31 = _equeue_post($8, 303, $AsyncRetVal) | 0; //@line 18677
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 304; //@line 18680
    $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 18681
    HEAP32[$32 >> 2] = $10; //@line 18682
    $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 18683
    HEAP32[$33 >> 2] = $12; //@line 18684
    $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 18685
    HEAP32[$34 >> 2] = $14; //@line 18686
    $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 18687
    HEAP32[$35 >> 2] = $2; //@line 18688
    sp = STACKTOP; //@line 18689
    return;
   }
   HEAP32[___async_retval >> 2] = $31; //@line 18693
   ___async_unwind = 0; //@line 18694
   HEAP32[$ReallocAsyncCtx6 >> 2] = 304; //@line 18695
   $32 = $ReallocAsyncCtx6 + 4 | 0; //@line 18696
   HEAP32[$32 >> 2] = $10; //@line 18697
   $33 = $ReallocAsyncCtx6 + 8 | 0; //@line 18698
   HEAP32[$33 >> 2] = $12; //@line 18699
   $34 = $ReallocAsyncCtx6 + 12 | 0; //@line 18700
   HEAP32[$34 >> 2] = $14; //@line 18701
   $35 = $ReallocAsyncCtx6 + 16 | 0; //@line 18702
   HEAP32[$35 >> 2] = $2; //@line 18703
   sp = STACKTOP; //@line 18704
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 18708
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 18709
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $14); //@line 18710
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 301; //@line 18713
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 18714
    HEAP32[$21 >> 2] = $4; //@line 18715
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 18716
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 18717
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 18718
    HEAP32[$23 >> 2] = $6; //@line 18719
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 18720
    HEAP32[$24 >> 2] = $8; //@line 18721
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 18722
    HEAP32[$25 >> 2] = $10; //@line 18723
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 18724
    HEAP32[$26 >> 2] = $12; //@line 18725
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 18726
    HEAP32[$27 >> 2] = $14; //@line 18727
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 18728
    HEAP32[$28 >> 2] = $2; //@line 18729
    sp = STACKTOP; //@line 18730
    return;
   }
   ___async_unwind = 0; //@line 18733
   HEAP32[$ReallocAsyncCtx3 >> 2] = 301; //@line 18734
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 18735
   HEAP32[$21 >> 2] = $4; //@line 18736
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 18737
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 18738
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 18739
   HEAP32[$23 >> 2] = $6; //@line 18740
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 18741
   HEAP32[$24 >> 2] = $8; //@line 18742
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 18743
   HEAP32[$25 >> 2] = $10; //@line 18744
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 18745
   HEAP32[$26 >> 2] = $12; //@line 18746
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 18747
   HEAP32[$27 >> 2] = $14; //@line 18748
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 18749
   HEAP32[$28 >> 2] = $2; //@line 18750
   sp = STACKTOP; //@line 18751
   return;
  }
 }
 $37 = HEAP32[$10 >> 2] | 0; //@line 18755
 if ($37 | 0) {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 18759
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 18760
  FUNCTION_TABLE_vi[$40 & 1023]($14); //@line 18761
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 305; //@line 18764
   $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 18765
   HEAP32[$41 >> 2] = $12; //@line 18766
   $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 18767
   HEAP32[$42 >> 2] = 0; //@line 18768
   $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 18769
   HEAP32[$43 >> 2] = $2; //@line 18770
   sp = STACKTOP; //@line 18771
   return;
  }
  ___async_unwind = 0; //@line 18774
  HEAP32[$ReallocAsyncCtx4 >> 2] = 305; //@line 18775
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 18776
  HEAP32[$41 >> 2] = $12; //@line 18777
  $42 = $ReallocAsyncCtx4 + 8 | 0; //@line 18778
  HEAP32[$42 >> 2] = 0; //@line 18779
  $43 = $ReallocAsyncCtx4 + 12 | 0; //@line 18780
  HEAP32[$43 >> 2] = $2; //@line 18781
  sp = STACKTOP; //@line 18782
  return;
 }
 $44 = HEAP32[$12 >> 2] | 0; //@line 18785
 if (!$44) {
  HEAP32[___async_retval >> 2] = 0; //@line 18789
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 18793
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 18794
 FUNCTION_TABLE_vi[$47 & 1023]($2); //@line 18795
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 18798
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 18799
  HEAP32[$48 >> 2] = 0; //@line 18800
  sp = STACKTOP; //@line 18801
  return;
 }
 ___async_unwind = 0; //@line 18804
 HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 18805
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 18806
 HEAP32[$48 >> 2] = 0; //@line 18807
 sp = STACKTOP; //@line 18808
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32298
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32300
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32302
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32304
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32306
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32308
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32310
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32312
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32314
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 32316
 $19 = $2 + 12 | 0; //@line 32317
 $20 = HEAP32[$19 >> 2] | 0; //@line 32318
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 32322
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 32323
  FUNCTION_TABLE_vii[$23 & 15]($4, $2); //@line 32324
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 452; //@line 32327
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 32328
   HEAP32[$24 >> 2] = $19; //@line 32329
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 32330
   HEAP32[$25 >> 2] = $6; //@line 32331
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 32332
   HEAP32[$26 >> 2] = $8; //@line 32333
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 32334
   HEAP32[$27 >> 2] = $10; //@line 32335
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 32336
   HEAP32[$28 >> 2] = $12; //@line 32337
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 32338
   HEAP32[$29 >> 2] = $14; //@line 32339
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 32340
   HEAP32[$30 >> 2] = $16; //@line 32341
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 32342
   HEAP32[$31 >> 2] = $18; //@line 32343
   sp = STACKTOP; //@line 32344
   return;
  }
  ___async_unwind = 0; //@line 32347
  HEAP32[$ReallocAsyncCtx2 >> 2] = 452; //@line 32348
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 32349
  HEAP32[$24 >> 2] = $19; //@line 32350
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 32351
  HEAP32[$25 >> 2] = $6; //@line 32352
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 32353
  HEAP32[$26 >> 2] = $8; //@line 32354
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 32355
  HEAP32[$27 >> 2] = $10; //@line 32356
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 32357
  HEAP32[$28 >> 2] = $12; //@line 32358
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 32359
  HEAP32[$29 >> 2] = $14; //@line 32360
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 32361
  HEAP32[$30 >> 2] = $16; //@line 32362
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 32363
  HEAP32[$31 >> 2] = $18; //@line 32364
  sp = STACKTOP; //@line 32365
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 32368
 switch (HEAP32[$8 >> 2] | 0) {
 case 0:
  {
   _mbed_tracef(16, 12709, 13309, $10); //@line 32372
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 32374
   __ZN7LoRaPHY18put_radio_to_sleepEv($14 + 4 | 0); //@line 32375
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 453; //@line 32378
    $33 = $ReallocAsyncCtx5 + 4 | 0; //@line 32379
    HEAP32[$33 >> 2] = $8; //@line 32380
    $34 = $ReallocAsyncCtx5 + 8 | 0; //@line 32381
    HEAP32[$34 >> 2] = $16; //@line 32382
    $35 = $ReallocAsyncCtx5 + 12 | 0; //@line 32383
    HEAP32[$35 >> 2] = $18; //@line 32384
    $36 = $ReallocAsyncCtx5 + 16 | 0; //@line 32385
    HEAP32[$36 >> 2] = $14; //@line 32386
    sp = STACKTOP; //@line 32387
    return;
   }
   ___async_unwind = 0; //@line 32390
   HEAP32[$ReallocAsyncCtx5 >> 2] = 453; //@line 32391
   $33 = $ReallocAsyncCtx5 + 4 | 0; //@line 32392
   HEAP32[$33 >> 2] = $8; //@line 32393
   $34 = $ReallocAsyncCtx5 + 8 | 0; //@line 32394
   HEAP32[$34 >> 2] = $16; //@line 32395
   $35 = $ReallocAsyncCtx5 + 12 | 0; //@line 32396
   HEAP32[$35 >> 2] = $18; //@line 32397
   $36 = $ReallocAsyncCtx5 + 16 | 0; //@line 32398
   HEAP32[$36 >> 2] = $14; //@line 32399
   sp = STACKTOP; //@line 32400
   return;
  }
 case 2:
  {
   HEAP8[$14 + 1177 >> 0] = 0; //@line 32406
   $38 = $14 + 4 | 0; //@line 32407
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 32408
   __ZN7LoRaPHY18put_radio_to_sleepEv($38); //@line 32409
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 454; //@line 32412
    $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 32413
    HEAP32[$39 >> 2] = $14; //@line 32414
    $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 32415
    HEAP32[$40 >> 2] = $38; //@line 32416
    $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 32417
    HEAP32[$41 >> 2] = $8; //@line 32418
    $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 32419
    HEAP32[$42 >> 2] = $16; //@line 32420
    $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 32421
    HEAP32[$43 >> 2] = $18; //@line 32422
    sp = STACKTOP; //@line 32423
    return;
   }
   ___async_unwind = 0; //@line 32426
   HEAP32[$ReallocAsyncCtx4 >> 2] = 454; //@line 32427
   $39 = $ReallocAsyncCtx4 + 4 | 0; //@line 32428
   HEAP32[$39 >> 2] = $14; //@line 32429
   $40 = $ReallocAsyncCtx4 + 8 | 0; //@line 32430
   HEAP32[$40 >> 2] = $38; //@line 32431
   $41 = $ReallocAsyncCtx4 + 12 | 0; //@line 32432
   HEAP32[$41 >> 2] = $8; //@line 32433
   $42 = $ReallocAsyncCtx4 + 16 | 0; //@line 32434
   HEAP32[$42 >> 2] = $16; //@line 32435
   $43 = $ReallocAsyncCtx4 + 20 | 0; //@line 32436
   HEAP32[$43 >> 2] = $18; //@line 32437
   sp = STACKTOP; //@line 32438
   return;
  }
 default:
  {
   if ((HEAP32[$8 >> 2] | 0) != 2) {
    return;
   }
   _mbed_tracef(16, 12709, 13345, $16); //@line 32448
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 32449
   __ZN7LoRaMac15open_rx2_windowEv($14); //@line 32450
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 455; //@line 32453
    sp = STACKTOP; //@line 32454
    return;
   }
   ___async_unwind = 0; //@line 32457
   HEAP32[$ReallocAsyncCtx3 >> 2] = 455; //@line 32458
   sp = STACKTOP; //@line 32459
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_166($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30977
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30979
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30981
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30983
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30985
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30987
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30989
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30991
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30993
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$6 >> 2] | 0; //@line 30996
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 31000
   HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$12 >> 2]; //@line 31003
   _equeue_event_dtor($AsyncRetVal, 271); //@line 31004
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31005
   $32 = _equeue_post($14, 272, $AsyncRetVal) | 0; //@line 31006
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 273; //@line 31009
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 31010
    HEAP32[$33 >> 2] = $6; //@line 31011
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 31012
    HEAP32[$34 >> 2] = $2; //@line 31013
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 31014
    HEAP32[$35 >> 2] = $8; //@line 31015
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 31016
    HEAP32[$36 >> 2] = $4; //@line 31017
    sp = STACKTOP; //@line 31018
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 31022
   ___async_unwind = 0; //@line 31023
   HEAP32[$ReallocAsyncCtx6 >> 2] = 273; //@line 31024
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 31025
   HEAP32[$33 >> 2] = $6; //@line 31026
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 31027
   HEAP32[$34 >> 2] = $2; //@line 31028
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 31029
   HEAP32[$35 >> 2] = $8; //@line 31030
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 31031
   HEAP32[$36 >> 2] = $4; //@line 31032
   sp = STACKTOP; //@line 31033
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 31037
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 31038
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $8); //@line 31039
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 31042
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 31043
    HEAP32[$21 >> 2] = $10; //@line 31044
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 31045
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 31046
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 31047
    HEAP32[$23 >> 2] = $12; //@line 31048
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 31049
    HEAP32[$24 >> 2] = $14; //@line 31050
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 31051
    HEAP32[$25 >> 2] = $6; //@line 31052
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 31053
    HEAP32[$26 >> 2] = $2; //@line 31054
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 31055
    HEAP32[$27 >> 2] = $8; //@line 31056
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 31057
    HEAP32[$28 >> 2] = $4; //@line 31058
    sp = STACKTOP; //@line 31059
    return;
   }
   ___async_unwind = 0; //@line 31062
   HEAP32[$ReallocAsyncCtx3 >> 2] = 270; //@line 31063
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 31064
   HEAP32[$21 >> 2] = $10; //@line 31065
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 31066
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 31067
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 31068
   HEAP32[$23 >> 2] = $12; //@line 31069
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 31070
   HEAP32[$24 >> 2] = $14; //@line 31071
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 31072
   HEAP32[$25 >> 2] = $6; //@line 31073
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 31074
   HEAP32[$26 >> 2] = $2; //@line 31075
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 31076
   HEAP32[$27 >> 2] = $8; //@line 31077
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 31078
   HEAP32[$28 >> 2] = $4; //@line 31079
   sp = STACKTOP; //@line 31080
   return;
  }
 }
 $38 = HEAP32[$6 >> 2] | 0; //@line 31084
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 31088
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 31089
  FUNCTION_TABLE_vi[$41 & 1023]($8); //@line 31090
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 31093
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 31094
   HEAP32[$42 >> 2] = $2; //@line 31095
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 31096
   HEAP32[$43 >> 2] = 0; //@line 31097
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 31098
   HEAP32[$44 >> 2] = $4; //@line 31099
   sp = STACKTOP; //@line 31100
   return;
  }
  ___async_unwind = 0; //@line 31103
  HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 31104
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 31105
  HEAP32[$42 >> 2] = $2; //@line 31106
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 31107
  HEAP32[$43 >> 2] = 0; //@line 31108
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 31109
  HEAP32[$44 >> 2] = $4; //@line 31110
  sp = STACKTOP; //@line 31111
  return;
 }
 $45 = HEAP32[$2 >> 2] | 0; //@line 31114
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 31118
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 31122
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31123
 FUNCTION_TABLE_vi[$48 & 1023]($4); //@line 31124
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 31127
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 31128
  HEAP32[$49 >> 2] = 0; //@line 31129
  sp = STACKTOP; //@line 31130
  return;
 }
 ___async_unwind = 0; //@line 31133
 HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 31134
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 31135
 HEAP32[$49 >> 2] = 0; //@line 31136
 sp = STACKTOP; //@line 31137
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_315($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22113
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22115
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22117
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22119
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22121
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22123
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22125
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22127
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22129
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 22132
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 22136
   HEAP16[$AsyncRetVal + 16 >> 1] = HEAP16[$10 >> 1] | 0; //@line 22139
   _equeue_event_dtor($AsyncRetVal, 328); //@line 22140
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 22141
   $32 = _equeue_post($12, 329, $AsyncRetVal) | 0; //@line 22142
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 22145
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 22146
    HEAP32[$33 >> 2] = $8; //@line 22147
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 22148
    HEAP32[$34 >> 2] = $4; //@line 22149
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 22150
    HEAP32[$35 >> 2] = $14; //@line 22151
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 22152
    HEAP32[$36 >> 2] = $6; //@line 22153
    sp = STACKTOP; //@line 22154
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 22158
   ___async_unwind = 0; //@line 22159
   HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 22160
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 22161
   HEAP32[$33 >> 2] = $8; //@line 22162
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 22163
   HEAP32[$34 >> 2] = $4; //@line 22164
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 22165
   HEAP32[$35 >> 2] = $14; //@line 22166
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 22167
   HEAP32[$36 >> 2] = $6; //@line 22168
   sp = STACKTOP; //@line 22169
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 22173
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 22174
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $14); //@line 22175
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 327; //@line 22178
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 22179
    HEAP32[$21 >> 2] = $2; //@line 22180
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 22181
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 22182
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 22183
    HEAP32[$23 >> 2] = $10; //@line 22184
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 22185
    HEAP32[$24 >> 2] = $12; //@line 22186
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 22187
    HEAP32[$25 >> 2] = $8; //@line 22188
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 22189
    HEAP32[$26 >> 2] = $4; //@line 22190
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 22191
    HEAP32[$27 >> 2] = $14; //@line 22192
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 22193
    HEAP32[$28 >> 2] = $6; //@line 22194
    sp = STACKTOP; //@line 22195
    return;
   }
   ___async_unwind = 0; //@line 22198
   HEAP32[$ReallocAsyncCtx3 >> 2] = 327; //@line 22199
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 22200
   HEAP32[$21 >> 2] = $2; //@line 22201
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 22202
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 22203
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 22204
   HEAP32[$23 >> 2] = $10; //@line 22205
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 22206
   HEAP32[$24 >> 2] = $12; //@line 22207
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 22208
   HEAP32[$25 >> 2] = $8; //@line 22209
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 22210
   HEAP32[$26 >> 2] = $4; //@line 22211
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 22212
   HEAP32[$27 >> 2] = $14; //@line 22213
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 22214
   HEAP32[$28 >> 2] = $6; //@line 22215
   sp = STACKTOP; //@line 22216
   return;
  }
 }
 $38 = HEAP32[$8 >> 2] | 0; //@line 22220
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 22224
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22225
  FUNCTION_TABLE_vi[$41 & 1023]($14); //@line 22226
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 331; //@line 22229
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 22230
   HEAP32[$42 >> 2] = $4; //@line 22231
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 22232
   HEAP32[$43 >> 2] = 0; //@line 22233
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 22234
   HEAP32[$44 >> 2] = $6; //@line 22235
   sp = STACKTOP; //@line 22236
   return;
  }
  ___async_unwind = 0; //@line 22239
  HEAP32[$ReallocAsyncCtx4 >> 2] = 331; //@line 22240
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 22241
  HEAP32[$42 >> 2] = $4; //@line 22242
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 22243
  HEAP32[$43 >> 2] = 0; //@line 22244
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 22245
  HEAP32[$44 >> 2] = $6; //@line 22246
  sp = STACKTOP; //@line 22247
  return;
 }
 $45 = HEAP32[$4 >> 2] | 0; //@line 22250
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 22254
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 22258
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22259
 FUNCTION_TABLE_vi[$48 & 1023]($6); //@line 22260
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 22263
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 22264
  HEAP32[$49 >> 2] = 0; //@line 22265
  sp = STACKTOP; //@line 22266
  return;
 }
 ___async_unwind = 0; //@line 22269
 HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 22270
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 22271
 HEAP32[$49 >> 2] = 0; //@line 22272
 sp = STACKTOP; //@line 22273
 return;
}
function __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$046$lcssa$off0 = 0, $$04660 = 0, $$047$lcssa = 0, $$04759 = 0, $$050$lcssa = 0, $$1 = 0, $10 = 0, $101 = 0, $107 = 0, $113 = 0, $119 = 0, $12 = 0, $125 = 0, $131 = 0, $137 = 0, $143 = 0, $149 = 0, $155 = 0, $156 = 0, $157 = 0, $166 = 0, $168 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $59 = 0, $65 = 0, $71 = 0, $77 = 0, $83 = 0, $89 = 0, $9 = 0, $95 = 0, $AsyncCtx = 0, $indvars$iv = 0, $wide$trip$count = 0, sp = 0;
 sp = STACKTOP; //@line 19214
 $9 = $0 + 64 | 0; //@line 19215
 _mbedtls_aes_init($9); //@line 19216
 $10 = _mbedtls_aes_setkey_enc($9, $3, $4) | 0; //@line 19217
 L1 : do {
  if (!$10) {
   $12 = $0 + 32 | 0; //@line 19221
   HEAP8[$0 + 37 >> 0] = $6; //@line 19223
   HEAP8[$0 + 38 >> 0] = $5; //@line 19226
   HEAP8[$0 + 39 >> 0] = $5 >>> 8; //@line 19230
   HEAP8[$0 + 40 >> 0] = $5 >>> 16; //@line 19234
   HEAP8[$0 + 41 >> 0] = $5 >>> 24; //@line 19238
   HEAP8[$0 + 42 >> 0] = $7; //@line 19241
   HEAP8[$0 + 43 >> 0] = $7 >>> 8; //@line 19245
   HEAP8[$0 + 44 >> 0] = $7 >>> 16; //@line 19249
   HEAP8[$0 + 45 >> 0] = $7 >>> 24; //@line 19253
   if (($2 & 65535) > 15) {
    $38 = $0 + 47 | 0; //@line 19257
    $39 = $0 + 48 | 0; //@line 19258
    $40 = $0 + 49 | 0; //@line 19259
    $41 = $0 + 50 | 0; //@line 19260
    $42 = $0 + 51 | 0; //@line 19261
    $43 = $0 + 52 | 0; //@line 19262
    $44 = $0 + 53 | 0; //@line 19263
    $45 = $0 + 54 | 0; //@line 19264
    $46 = $0 + 55 | 0; //@line 19265
    $47 = $0 + 56 | 0; //@line 19266
    $48 = $0 + 57 | 0; //@line 19267
    $49 = $0 + 58 | 0; //@line 19268
    $50 = $0 + 59 | 0; //@line 19269
    $51 = $0 + 60 | 0; //@line 19270
    $52 = $0 + 61 | 0; //@line 19271
    $53 = $0 + 62 | 0; //@line 19272
    $54 = $0 + 63 | 0; //@line 19273
    $$04660 = 1; //@line 19274
    $$04759 = 0; //@line 19274
    $156 = $2 & 65535; //@line 19274
    while (1) {
     HEAP8[$38 >> 0] = $$04660; //@line 19277
     $$04660 = $$04660 + 1 << 16 >> 16; //@line 19278
     $57 = _mbedtls_aes_crypt_ecb($9, 1, $12, $39) | 0; //@line 19279
     if ($57 | 0) {
      $$1 = $57; //@line 19282
      break L1;
     }
     $59 = $$04759 & 255; //@line 19285
     HEAP8[$8 + $59 >> 0] = HEAP8[$39 >> 0] ^ HEAP8[$1 + $59 >> 0]; //@line 19291
     $65 = $59 + 1 | 0; //@line 19292
     HEAP8[$8 + $65 >> 0] = HEAP8[$40 >> 0] ^ HEAP8[$1 + $65 >> 0]; //@line 19298
     $71 = $59 + 2 | 0; //@line 19299
     HEAP8[$8 + $71 >> 0] = HEAP8[$41 >> 0] ^ HEAP8[$1 + $71 >> 0]; //@line 19305
     $77 = $59 + 3 | 0; //@line 19306
     HEAP8[$8 + $77 >> 0] = HEAP8[$42 >> 0] ^ HEAP8[$1 + $77 >> 0]; //@line 19312
     $83 = $59 + 4 | 0; //@line 19313
     HEAP8[$8 + $83 >> 0] = HEAP8[$43 >> 0] ^ HEAP8[$1 + $83 >> 0]; //@line 19319
     $89 = $59 + 5 | 0; //@line 19320
     HEAP8[$8 + $89 >> 0] = HEAP8[$44 >> 0] ^ HEAP8[$1 + $89 >> 0]; //@line 19326
     $95 = $59 + 6 | 0; //@line 19327
     HEAP8[$8 + $95 >> 0] = HEAP8[$45 >> 0] ^ HEAP8[$1 + $95 >> 0]; //@line 19333
     $101 = $59 + 7 | 0; //@line 19334
     HEAP8[$8 + $101 >> 0] = HEAP8[$46 >> 0] ^ HEAP8[$1 + $101 >> 0]; //@line 19340
     $107 = $59 + 8 | 0; //@line 19341
     HEAP8[$8 + $107 >> 0] = HEAP8[$47 >> 0] ^ HEAP8[$1 + $107 >> 0]; //@line 19347
     $113 = $59 + 9 | 0; //@line 19348
     HEAP8[$8 + $113 >> 0] = HEAP8[$48 >> 0] ^ HEAP8[$1 + $113 >> 0]; //@line 19354
     $119 = $59 + 10 | 0; //@line 19355
     HEAP8[$8 + $119 >> 0] = HEAP8[$49 >> 0] ^ HEAP8[$1 + $119 >> 0]; //@line 19361
     $125 = $59 + 11 | 0; //@line 19362
     HEAP8[$8 + $125 >> 0] = HEAP8[$50 >> 0] ^ HEAP8[$1 + $125 >> 0]; //@line 19368
     $131 = $59 + 12 | 0; //@line 19369
     HEAP8[$8 + $131 >> 0] = HEAP8[$51 >> 0] ^ HEAP8[$1 + $131 >> 0]; //@line 19375
     $137 = $59 + 13 | 0; //@line 19376
     HEAP8[$8 + $137 >> 0] = HEAP8[$52 >> 0] ^ HEAP8[$1 + $137 >> 0]; //@line 19382
     $143 = $59 + 14 | 0; //@line 19383
     HEAP8[$8 + $143 >> 0] = HEAP8[$53 >> 0] ^ HEAP8[$1 + $143 >> 0]; //@line 19389
     $149 = $59 + 15 | 0; //@line 19390
     HEAP8[$8 + $149 >> 0] = HEAP8[$54 >> 0] ^ HEAP8[$1 + $149 >> 0]; //@line 19396
     $155 = $156 + 65520 | 0; //@line 19397
     $157 = $155 & 65535; //@line 19398
     if (($157 & 65535) <= 15) {
      break;
     } else {
      $$04759 = $59 + 16 & 255; //@line 19404
      $156 = $155 & 65535; //@line 19404
     }
    }
    $$046$lcssa$off0 = $$04660 & 255; //@line 19412
    $$047$lcssa = $$04759 + 16 & 255; //@line 19412
    $$050$lcssa = $157; //@line 19412
   } else {
    $$046$lcssa$off0 = 1; //@line 19414
    $$047$lcssa = 0; //@line 19414
    $$050$lcssa = $2; //@line 19414
   }
   if (!($$050$lcssa << 16 >> 16)) {
    $$1 = 0; //@line 19418
   } else {
    HEAP8[$0 + 47 >> 0] = $$046$lcssa$off0; //@line 19421
    $166 = _mbedtls_aes_crypt_ecb($9, 1, $12, $0 + 48 | 0) | 0; //@line 19423
    if (!$166) {
     $wide$trip$count = $$050$lcssa & 65535; //@line 19426
     $indvars$iv = 0; //@line 19427
     do {
      $168 = $indvars$iv + $$047$lcssa | 0; //@line 19429
      HEAP8[$8 + $168 >> 0] = HEAP8[$0 + 48 + $indvars$iv >> 0] ^ HEAP8[$1 + $168 >> 0]; //@line 19436
      $indvars$iv = $indvars$iv + 1 | 0; //@line 19437
     } while (($indvars$iv | 0) != ($wide$trip$count | 0));
     $$1 = 0; //@line 19440
    } else {
     $$1 = $166; //@line 19447
    }
   }
  } else {
   $$1 = $10; //@line 19451
  }
 } while (0);
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 19454
 _mbedtls_aes_free($9); //@line 19455
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 502; //@line 19458
  HEAP32[$AsyncCtx + 4 >> 2] = $$1; //@line 19460
  sp = STACKTOP; //@line 19461
  return 0; //@line 19462
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19464
  return $$1 | 0; //@line 19465
 }
 return 0; //@line 19467
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_178($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31734
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31736
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31738
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31740
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31742
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31744
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31746
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31748
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31750
 if ($AsyncRetVal | 0) {
  $17 = HEAP32[$4 >> 2] | 0; //@line 31753
  if (!$17) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 31757
   HEAP8[$AsyncRetVal + 16 >> 0] = HEAP8[$12 >> 0] | 0; //@line 31760
   _equeue_event_dtor($AsyncRetVal, 225); //@line 31761
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31762
   $32 = _equeue_post($14, 226, $AsyncRetVal) | 0; //@line 31763
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 227; //@line 31766
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 31767
    HEAP32[$33 >> 2] = $4; //@line 31768
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 31769
    HEAP32[$34 >> 2] = $6; //@line 31770
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 31771
    HEAP32[$35 >> 2] = $8; //@line 31772
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 31773
    HEAP32[$36 >> 2] = $10; //@line 31774
    sp = STACKTOP; //@line 31775
    return;
   }
   HEAP32[___async_retval >> 2] = $32; //@line 31779
   ___async_unwind = 0; //@line 31780
   HEAP32[$ReallocAsyncCtx6 >> 2] = 227; //@line 31781
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 31782
   HEAP32[$33 >> 2] = $4; //@line 31783
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 31784
   HEAP32[$34 >> 2] = $6; //@line 31785
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 31786
   HEAP32[$35 >> 2] = $8; //@line 31787
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 31788
   HEAP32[$36 >> 2] = $10; //@line 31789
   sp = STACKTOP; //@line 31790
   return;
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 31794
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 31795
   FUNCTION_TABLE_vii[$20 & 15]($AsyncRetVal, $8); //@line 31796
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 224; //@line 31799
    $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 31800
    HEAP32[$21 >> 2] = $2; //@line 31801
    $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 31802
    HEAP32[$22 >> 2] = $AsyncRetVal; //@line 31803
    $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 31804
    HEAP32[$23 >> 2] = $12; //@line 31805
    $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 31806
    HEAP32[$24 >> 2] = $14; //@line 31807
    $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 31808
    HEAP32[$25 >> 2] = $4; //@line 31809
    $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 31810
    HEAP32[$26 >> 2] = $6; //@line 31811
    $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 31812
    HEAP32[$27 >> 2] = $8; //@line 31813
    $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 31814
    HEAP32[$28 >> 2] = $10; //@line 31815
    sp = STACKTOP; //@line 31816
    return;
   }
   ___async_unwind = 0; //@line 31819
   HEAP32[$ReallocAsyncCtx3 >> 2] = 224; //@line 31820
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 31821
   HEAP32[$21 >> 2] = $2; //@line 31822
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 31823
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 31824
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 31825
   HEAP32[$23 >> 2] = $12; //@line 31826
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 31827
   HEAP32[$24 >> 2] = $14; //@line 31828
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 31829
   HEAP32[$25 >> 2] = $4; //@line 31830
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 31831
   HEAP32[$26 >> 2] = $6; //@line 31832
   $27 = $ReallocAsyncCtx3 + 28 | 0; //@line 31833
   HEAP32[$27 >> 2] = $8; //@line 31834
   $28 = $ReallocAsyncCtx3 + 32 | 0; //@line 31835
   HEAP32[$28 >> 2] = $10; //@line 31836
   sp = STACKTOP; //@line 31837
   return;
  }
 }
 $38 = HEAP32[$4 >> 2] | 0; //@line 31841
 if ($38 | 0) {
  $41 = HEAP32[$38 + 8 >> 2] | 0; //@line 31845
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 31846
  FUNCTION_TABLE_vi[$41 & 1023]($8); //@line 31847
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 31850
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 31851
   HEAP32[$42 >> 2] = $6; //@line 31852
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 31853
   HEAP32[$43 >> 2] = 0; //@line 31854
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 31855
   HEAP32[$44 >> 2] = $10; //@line 31856
   sp = STACKTOP; //@line 31857
   return;
  }
  ___async_unwind = 0; //@line 31860
  HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 31861
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 31862
  HEAP32[$42 >> 2] = $6; //@line 31863
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 31864
  HEAP32[$43 >> 2] = 0; //@line 31865
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 31866
  HEAP32[$44 >> 2] = $10; //@line 31867
  sp = STACKTOP; //@line 31868
  return;
 }
 $45 = HEAP32[$6 >> 2] | 0; //@line 31871
 if (!$45) {
  HEAP32[___async_retval >> 2] = 0; //@line 31875
  return;
 }
 $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 31879
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31880
 FUNCTION_TABLE_vi[$48 & 1023]($10); //@line 31881
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 31884
  $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 31885
  HEAP32[$49 >> 2] = 0; //@line 31886
  sp = STACKTOP; //@line 31887
  return;
 }
 ___async_unwind = 0; //@line 31890
 HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 31891
 $49 = $ReallocAsyncCtx5 + 4 | 0; //@line 31892
 HEAP32[$49 >> 2] = 0; //@line 31893
 sp = STACKTOP; //@line 31894
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_250($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 16678
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16682
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16684
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16686
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16688
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16690
 $13 = $4 + 12 | 0; //@line 16691
 HEAP32[$4 >> 2] = 192; //@line 16692
 HEAP32[$4 + 4 >> 2] = 0; //@line 16694
 HEAP32[$4 + 8 >> 2] = $6; //@line 16696
 HEAP32[$13 >> 2] = 824; //@line 16697
 $14 = $6 + 2400 | 0; //@line 16698
 if (($14 | 0) == ($4 | 0)) {
  $39 = HEAP32[208] | 0; //@line 16702
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(24) | 0; //@line 16703
  FUNCTION_TABLE_vi[$39 & 1023]($4); //@line 16704
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16707
   $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 16708
   HEAP32[$40 >> 2] = $8; //@line 16709
   $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 16710
   HEAP32[$41 >> 2] = $4; //@line 16711
   $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 16712
   HEAP32[$42 >> 2] = $10; //@line 16713
   $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 16714
   HEAP32[$43 >> 2] = $6; //@line 16715
   $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 16716
   HEAP32[$44 >> 2] = $12; //@line 16717
   sp = STACKTOP; //@line 16718
   return;
  }
  ___async_unwind = 0; //@line 16721
  HEAP32[$ReallocAsyncCtx12 >> 2] = 195; //@line 16722
  $40 = $ReallocAsyncCtx12 + 4 | 0; //@line 16723
  HEAP32[$40 >> 2] = $8; //@line 16724
  $41 = $ReallocAsyncCtx12 + 8 | 0; //@line 16725
  HEAP32[$41 >> 2] = $4; //@line 16726
  $42 = $ReallocAsyncCtx12 + 12 | 0; //@line 16727
  HEAP32[$42 >> 2] = $10; //@line 16728
  $43 = $ReallocAsyncCtx12 + 16 | 0; //@line 16729
  HEAP32[$43 >> 2] = $6; //@line 16730
  $44 = $ReallocAsyncCtx12 + 20 | 0; //@line 16731
  HEAP32[$44 >> 2] = $12; //@line 16732
  sp = STACKTOP; //@line 16733
  return;
 }
 $16 = $6 + 2412 | 0; //@line 16736
 $17 = HEAP32[$16 >> 2] | 0; //@line 16737
 if (!$17) {
  $30 = HEAP32[207] | 0; //@line 16741
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 16742
  FUNCTION_TABLE_vii[$30 & 15]($14, $4); //@line 16743
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16746
   $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 16747
   HEAP32[$31 >> 2] = $8; //@line 16748
   $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 16749
   HEAP32[$32 >> 2] = $4; //@line 16750
   $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 16751
   HEAP32[$33 >> 2] = $10; //@line 16752
   $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 16753
   HEAP32[$34 >> 2] = $6; //@line 16754
   $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 16755
   HEAP32[$35 >> 2] = $13; //@line 16756
   $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 16757
   HEAP32[$36 >> 2] = $16; //@line 16758
   $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 16759
   HEAP32[$37 >> 2] = $12; //@line 16760
   sp = STACKTOP; //@line 16761
   return;
  }
  ___async_unwind = 0; //@line 16764
  HEAP32[$ReallocAsyncCtx11 >> 2] = 194; //@line 16765
  $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 16766
  HEAP32[$31 >> 2] = $8; //@line 16767
  $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 16768
  HEAP32[$32 >> 2] = $4; //@line 16769
  $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 16770
  HEAP32[$33 >> 2] = $10; //@line 16771
  $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 16772
  HEAP32[$34 >> 2] = $6; //@line 16773
  $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 16774
  HEAP32[$35 >> 2] = $13; //@line 16775
  $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 16776
  HEAP32[$36 >> 2] = $16; //@line 16777
  $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 16778
  HEAP32[$37 >> 2] = $12; //@line 16779
  sp = STACKTOP; //@line 16780
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 16784
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(36) | 0; //@line 16785
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 16786
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16789
   $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 16790
   HEAP32[$21 >> 2] = $16; //@line 16791
   $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 16792
   HEAP32[$22 >> 2] = $14; //@line 16793
   $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 16794
   HEAP32[$23 >> 2] = $4; //@line 16795
   $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 16796
   HEAP32[$24 >> 2] = $13; //@line 16797
   $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 16798
   HEAP32[$25 >> 2] = $8; //@line 16799
   $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 16800
   HEAP32[$26 >> 2] = $10; //@line 16801
   $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 16802
   HEAP32[$27 >> 2] = $6; //@line 16803
   $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 16804
   HEAP32[$28 >> 2] = $12; //@line 16805
   sp = STACKTOP; //@line 16806
   return;
  }
  ___async_unwind = 0; //@line 16809
  HEAP32[$ReallocAsyncCtx10 >> 2] = 193; //@line 16810
  $21 = $ReallocAsyncCtx10 + 4 | 0; //@line 16811
  HEAP32[$21 >> 2] = $16; //@line 16812
  $22 = $ReallocAsyncCtx10 + 8 | 0; //@line 16813
  HEAP32[$22 >> 2] = $14; //@line 16814
  $23 = $ReallocAsyncCtx10 + 12 | 0; //@line 16815
  HEAP32[$23 >> 2] = $4; //@line 16816
  $24 = $ReallocAsyncCtx10 + 16 | 0; //@line 16817
  HEAP32[$24 >> 2] = $13; //@line 16818
  $25 = $ReallocAsyncCtx10 + 20 | 0; //@line 16819
  HEAP32[$25 >> 2] = $8; //@line 16820
  $26 = $ReallocAsyncCtx10 + 24 | 0; //@line 16821
  HEAP32[$26 >> 2] = $10; //@line 16822
  $27 = $ReallocAsyncCtx10 + 28 | 0; //@line 16823
  HEAP32[$27 >> 2] = $6; //@line 16824
  $28 = $ReallocAsyncCtx10 + 32 | 0; //@line 16825
  HEAP32[$28 >> 2] = $12; //@line 16826
  sp = STACKTOP; //@line 16827
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb_332($0) {
 $0 = $0 | 0;
 var $$01720$i45 = 0, $$019$i = 0, $$019$i42 = 0, $$021$i44 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $40 = 0, $53 = 0, $56 = 0, $6 = 0, $64 = 0, $65 = 0, $78 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $ReallocAsyncCtx5 = 0, sp = 0, $64$looptemp = 0;
 sp = STACKTOP; //@line 23360
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23362
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23364
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23366
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23368
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23370
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23372
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23374
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23376
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23378
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23380
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23382
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23384
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23386
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23388
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23390
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23392
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 23394
 L2 : do {
  if (!(HEAP32[___async_retval >> 2] | 0)) {
   switch ($10 | 0) {
   case 16:
    {
     $$019$i42 = 135; //@line 23402
     break;
    }
   case 8:
    {
     $$019$i42 = 27; //@line 23406
     break;
    }
   default:
    {
     break L2;
    }
   }
   $37 = $10 + -1 | 0; //@line 23413
   $$01720$i45 = 0; //@line 23414
   $$021$i44 = $37; //@line 23414
   while (1) {
    $40 = HEAPU8[$34 + $$021$i44 >> 0] | 0; //@line 23418
    HEAP8[$8 + $$021$i44 >> 0] = $40 << 1 | $$01720$i45; //@line 23423
    if (($$021$i44 | 0) > 0) {
     $$01720$i45 = $40 >>> 7; //@line 23428
     $$021$i44 = $$021$i44 + -1 | 0; //@line 23428
    } else {
     break;
    }
   }
   $53 = $8 + $37 | 0; //@line 23438
   $56 = $$019$i42 & 0 - ((HEAPU8[$2 >> 0] | 0) >>> 7) ^ (HEAPU8[$53 >> 0] | 0); //@line 23441
   HEAP8[$53 >> 0] = $56; //@line 23443
   switch ($10 | 0) {
   case 16:
    {
     $$019$i = 135; //@line 23446
     break;
    }
   case 8:
    {
     $$019$i = 27; //@line 23450
     break;
    }
   default:
    {
     break L2;
    }
   }
   HEAP8[$6 + $37 >> 0] = $56 << 1; //@line 23460
   if (($37 | 0) > 0) {
    $64 = $56; //@line 23464
    $65 = $10 + -2 | 0; //@line 23464
    while (1) {
     $64$looptemp = $64;
     $64 = HEAPU8[$8 + $65 >> 0] | 0; //@line 23469
     HEAP8[$6 + $65 >> 0] = $64 << 1 | $64$looptemp >>> 7; //@line 23474
     if (($65 | 0) <= 0) {
      break;
     } else {
      $65 = $65 + -1 | 0; //@line 23478
     }
    }
   }
   $78 = $6 + $37 | 0; //@line 23489
   HEAP8[$78 >> 0] = $$019$i & 0 - ((HEAPU8[$4 >> 0] | 0) >>> 7) ^ (HEAPU8[$78 >> 0] | 0); //@line 23494
  }
 } while (0);
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 23497
 _mbedtls_platform_zeroize($2, 16); //@line 23498
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 603; //@line 23501
  $83 = $ReallocAsyncCtx5 + 4 | 0; //@line 23502
  HEAP32[$83 >> 2] = $12; //@line 23503
  $84 = $ReallocAsyncCtx5 + 8 | 0; //@line 23504
  HEAP32[$84 >> 2] = $14; //@line 23505
  $85 = $ReallocAsyncCtx5 + 12 | 0; //@line 23506
  HEAP32[$85 >> 2] = $16; //@line 23507
  $86 = $ReallocAsyncCtx5 + 16 | 0; //@line 23508
  HEAP32[$86 >> 2] = $18; //@line 23509
  $87 = $ReallocAsyncCtx5 + 20 | 0; //@line 23510
  HEAP32[$87 >> 2] = $20; //@line 23511
  $88 = $ReallocAsyncCtx5 + 24 | 0; //@line 23512
  HEAP32[$88 >> 2] = $22; //@line 23513
  $89 = $ReallocAsyncCtx5 + 28 | 0; //@line 23514
  HEAP32[$89 >> 2] = $24; //@line 23515
  $90 = $ReallocAsyncCtx5 + 32 | 0; //@line 23516
  HEAP32[$90 >> 2] = $4; //@line 23517
  $91 = $ReallocAsyncCtx5 + 36 | 0; //@line 23518
  HEAP32[$91 >> 2] = $26; //@line 23519
  $92 = $ReallocAsyncCtx5 + 40 | 0; //@line 23520
  HEAP32[$92 >> 2] = $2; //@line 23521
  $93 = $ReallocAsyncCtx5 + 44 | 0; //@line 23522
  HEAP32[$93 >> 2] = $8; //@line 23523
  $94 = $ReallocAsyncCtx5 + 48 | 0; //@line 23524
  HEAP32[$94 >> 2] = $6; //@line 23525
  $95 = $ReallocAsyncCtx5 + 52 | 0; //@line 23526
  HEAP32[$95 >> 2] = $28; //@line 23527
  $96 = $ReallocAsyncCtx5 + 56 | 0; //@line 23528
  HEAP32[$96 >> 2] = $30; //@line 23529
  $97 = $ReallocAsyncCtx5 + 60 | 0; //@line 23530
  HEAP32[$97 >> 2] = $32; //@line 23531
  sp = STACKTOP; //@line 23532
  return;
 }
 ___async_unwind = 0; //@line 23535
 HEAP32[$ReallocAsyncCtx5 >> 2] = 603; //@line 23536
 $83 = $ReallocAsyncCtx5 + 4 | 0; //@line 23537
 HEAP32[$83 >> 2] = $12; //@line 23538
 $84 = $ReallocAsyncCtx5 + 8 | 0; //@line 23539
 HEAP32[$84 >> 2] = $14; //@line 23540
 $85 = $ReallocAsyncCtx5 + 12 | 0; //@line 23541
 HEAP32[$85 >> 2] = $16; //@line 23542
 $86 = $ReallocAsyncCtx5 + 16 | 0; //@line 23543
 HEAP32[$86 >> 2] = $18; //@line 23544
 $87 = $ReallocAsyncCtx5 + 20 | 0; //@line 23545
 HEAP32[$87 >> 2] = $20; //@line 23546
 $88 = $ReallocAsyncCtx5 + 24 | 0; //@line 23547
 HEAP32[$88 >> 2] = $22; //@line 23548
 $89 = $ReallocAsyncCtx5 + 28 | 0; //@line 23549
 HEAP32[$89 >> 2] = $24; //@line 23550
 $90 = $ReallocAsyncCtx5 + 32 | 0; //@line 23551
 HEAP32[$90 >> 2] = $4; //@line 23552
 $91 = $ReallocAsyncCtx5 + 36 | 0; //@line 23553
 HEAP32[$91 >> 2] = $26; //@line 23554
 $92 = $ReallocAsyncCtx5 + 40 | 0; //@line 23555
 HEAP32[$92 >> 2] = $2; //@line 23556
 $93 = $ReallocAsyncCtx5 + 44 | 0; //@line 23557
 HEAP32[$93 >> 2] = $8; //@line 23558
 $94 = $ReallocAsyncCtx5 + 48 | 0; //@line 23559
 HEAP32[$94 >> 2] = $6; //@line 23560
 $95 = $ReallocAsyncCtx5 + 52 | 0; //@line 23561
 HEAP32[$95 >> 2] = $28; //@line 23562
 $96 = $ReallocAsyncCtx5 + 56 | 0; //@line 23563
 HEAP32[$96 >> 2] = $30; //@line 23564
 $97 = $ReallocAsyncCtx5 + 60 | 0; //@line 23565
 HEAP32[$97 >> 2] = $32; //@line 23566
 sp = STACKTOP; //@line 23567
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $118 = 0, $12 = 0, $128 = 0, $13 = 0, $132 = 0, $14 = 0, $15 = 0, $16 = 0, $29 = 0, $3 = 0, $31 = 0, $32 = 0, $7 = 0, $73 = 0, $75 = 0, $78 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12310
 STACKTOP = STACKTOP + 16 | 0; //@line 12311
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12311
 $3 = sp; //@line 12312
 HEAP32[$3 >> 2] = 0; //@line 12313
 HEAP8[$0 + 2102 >> 0] = HEAP8[$0 + 1701 >> 0] | 0; //@line 12317
 $7 = $0 + 756 | 0; //@line 12318
 $9 = $2 & 65535; //@line 12320
 $12 = $0 + 1712 | 0; //@line 12323
 $13 = HEAP32[$12 >> 2] | 0; //@line 12324
 $14 = $0 + 1442 | 0; //@line 12325
 $15 = $0 + 1443 | 0; //@line 12326
 $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 12327
 $16 = __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($7, $1 + 1 | 0, $9 + 65535 & 65535, $13, 128, $15) | 0; //@line 12328
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 382; //@line 12331
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 12333
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12335
  HEAP32[$AsyncCtx + 12 >> 2] = $9; //@line 12337
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 12339
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 12341
  HEAP32[$AsyncCtx + 24 >> 2] = $14; //@line 12343
  HEAP32[$AsyncCtx + 28 >> 2] = $12; //@line 12345
  HEAP32[$AsyncCtx + 32 >> 2] = $7; //@line 12347
  HEAP32[$AsyncCtx + 36 >> 2] = $15; //@line 12349
  sp = STACKTOP; //@line 12350
  STACKTOP = sp; //@line 12351
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12353
 if ($16 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 12357
  STACKTOP = sp; //@line 12358
  return;
 }
 HEAP8[$14 >> 0] = HEAP8[$1 >> 0] | 0; //@line 12361
 $29 = $9 + -4 | 0; //@line 12362
 $31 = HEAP32[$12 >> 2] | 0; //@line 12364
 $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12365
 $32 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($7, $14, $29 & 65535, $31, 128, $3) | 0; //@line 12366
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 383; //@line 12369
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12371
  HEAP32[$AsyncCtx7 + 8 >> 2] = $29; //@line 12373
  HEAP32[$AsyncCtx7 + 12 >> 2] = $9; //@line 12375
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 12377
  HEAP32[$AsyncCtx7 + 20 >> 2] = $3; //@line 12379
  HEAP32[$AsyncCtx7 + 24 >> 2] = $12; //@line 12381
  HEAP32[$AsyncCtx7 + 28 >> 2] = $7; //@line 12383
  HEAP32[$AsyncCtx7 + 32 >> 2] = $15; //@line 12385
  sp = STACKTOP; //@line 12386
  STACKTOP = sp; //@line 12387
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12389
 if ($32 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 12393
  STACKTOP = sp; //@line 12394
  return;
 }
 if (((HEAPU8[$9 + -3 + ($0 + 1442) >> 0] | 0) << 8 | (HEAPU8[$0 + 1442 + $29 >> 0] | 0) | (HEAPU8[$9 + -2 + ($0 + 1442) >> 0] | 0) << 16 | (HEAPU8[$9 + -1 + ($0 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$3 >> 2] | 0)) {
  HEAP32[$0 + 2092 >> 2] = 7; //@line 12421
  STACKTOP = sp; //@line 12422
  return;
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(28, sp) | 0; //@line 12425
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 12426
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 384; //@line 12429
  HEAP32[$AsyncCtx15 + 4 >> 2] = $12; //@line 12431
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 12433
  HEAP32[$AsyncCtx15 + 12 >> 2] = $7; //@line 12435
  HEAP32[$AsyncCtx15 + 16 >> 2] = $15; //@line 12437
  HEAP32[$AsyncCtx15 + 20 >> 2] = $9; //@line 12439
  HEAP32[$AsyncCtx15 + 24 >> 2] = $3; //@line 12441
  sp = STACKTOP; //@line 12442
  STACKTOP = sp; //@line 12443
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12445
 $73 = HEAP32[$12 >> 2] | 0; //@line 12446
 $75 = HEAP16[$0 + 1748 >> 1] | 0; //@line 12448
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12451
 $78 = __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($7, $73, 128, $15, $75, $0 + 1716 | 0, $0 + 1732 | 0) | 0; //@line 12452
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 385; //@line 12455
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12457
  HEAP32[$AsyncCtx3 + 8 >> 2] = $9; //@line 12459
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 12461
  sp = STACKTOP; //@line 12462
  STACKTOP = sp; //@line 12463
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12465
 if ($78 | 0) {
  HEAP32[$0 + 2092 >> 2] = 13; //@line 12469
  STACKTOP = sp; //@line 12470
  return;
 }
 HEAP32[$0 + 1752 >> 2] = (HEAPU8[$0 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1447 >> 0] | 0) << 8 | (HEAPU8[$0 + 1446 >> 0] | 0)); //@line 12486
 HEAP32[$0 + 1756 >> 2] = (HEAPU8[$0 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$0 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$0 + 1450 >> 0] | 0) << 8 | (HEAPU8[$0 + 1449 >> 0] | 0))); //@line 12506
 $118 = HEAP8[$0 + 1453 >> 0] | 0; //@line 12508
 HEAP8[$0 + 1909 >> 0] = ($118 & 255) >>> 4 & 7; //@line 12514
 HEAP8[$0 + 1916 >> 0] = $118 & 15; //@line 12517
 $128 = HEAP8[$0 + 1454 >> 0] & 15; //@line 12520
 $132 = $128 << 24 >> 24 == 0 ? 1e3 : ($128 & 255) * 1e3 | 0; //@line 12525
 HEAP32[$0 + 1892 >> 2] = $132; //@line 12526
 HEAP32[$0 + 1896 >> 2] = $132 + 1e3; //@line 12529
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12534
 __ZN7LoRaPHY13apply_cf_listEPKhh($0 + 4 | 0, $0 + 1455 | 0, $9 + 239 & 255); //@line 12535
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 386; //@line 12538
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12540
  HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 12542
  sp = STACKTOP; //@line 12543
  STACKTOP = sp; //@line 12544
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12546
 HEAP32[$0 + 2092 >> 2] = 0; //@line 12548
 HEAP8[$0 + 2376 >> 0] = 1; //@line 12550
 HEAP32[$0 + 1760 >> 2] = 0; //@line 12552
 HEAP8[$0 + 1184 >> 0] = 0; //@line 12554
 STACKTOP = sp; //@line 12555
 return;
}
function _mbedtls_gcm_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$061 = 0, $$163 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $39 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $75 = 0, $8 = 0, $84 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24297
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24299
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24301
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24303
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24305
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24307
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24309
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24311
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24313
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 24315
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 24317
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 24319
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 24321
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 24323
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 24325
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 24327
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 24329
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24331
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 24334
  $84 = ___async_retval; //@line 24335
  HEAP32[$84 >> 2] = $$0; //@line 24336
  return;
 }
 if ($2 | 0) {
  $$163 = 0; //@line 24341
  do {
   $67 = $8 + 376 + $$163 | 0; //@line 24345
   $68 = $14 + $$163 | 0; //@line 24346
   if (!(HEAP32[$18 >> 2] | 0)) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 24351
   }
   $75 = HEAP8[$68 >> 0] ^ HEAP8[$20 + $$163 >> 0]; //@line 24356
   HEAP8[$16 + $$163 >> 0] = $75; //@line 24358
   if ((HEAP32[$18 >> 2] | 0) == 1) {
    HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 24364
   }
   $$163 = $$163 + 1 | 0; //@line 24366
  } while ($$163 >>> 0 < $2 >>> 0);
 }
 _gcm_mult($8, $10, $10); //@line 24375
 $35 = $12 - $2 | 0; //@line 24376
 $51 = $14 + $2 | 0; //@line 24377
 $53 = $16 + $2 | 0; //@line 24378
 if (!$35) {
  $$0 = 0; //@line 24381
  $84 = ___async_retval; //@line 24382
  HEAP32[$84 >> 2] = $$0; //@line 24383
  return;
 }
 $36 = $35 >>> 0 < 16 ? $35 : 16; //@line 24387
 $$061 = 16; //@line 24388
 do {
  if ($$061 >>> 0 <= 12) {
   break;
  }
  $$061 = $$061 + -1 | 0; //@line 24394
  $39 = $8 + 360 + $$061 | 0; //@line 24395
  $41 = (HEAP8[$39 >> 0] | 0) + 1 << 24 >> 24; //@line 24397
  HEAP8[$39 >> 0] = $41; //@line 24398
 } while (!($41 << 24 >> 24));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(68) | 0; //@line 24406
 $43 = _mbedtls_cipher_update($28, $30, 16, $6, $32) | 0; //@line 24407
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 613; //@line 24410
  $44 = $ReallocAsyncCtx + 4 | 0; //@line 24411
  HEAP32[$44 >> 2] = $36; //@line 24412
  $45 = $ReallocAsyncCtx + 8 | 0; //@line 24413
  HEAP32[$45 >> 2] = $4; //@line 24414
  $46 = $ReallocAsyncCtx + 12 | 0; //@line 24415
  HEAP32[$46 >> 2] = $6; //@line 24416
  $47 = $ReallocAsyncCtx + 16 | 0; //@line 24417
  HEAP32[$47 >> 2] = $8; //@line 24418
  $48 = $ReallocAsyncCtx + 20 | 0; //@line 24419
  HEAP32[$48 >> 2] = $10; //@line 24420
  $49 = $ReallocAsyncCtx + 24 | 0; //@line 24421
  HEAP32[$49 >> 2] = $35; //@line 24422
  $50 = $ReallocAsyncCtx + 28 | 0; //@line 24423
  HEAP32[$50 >> 2] = $51; //@line 24424
  $52 = $ReallocAsyncCtx + 32 | 0; //@line 24425
  HEAP32[$52 >> 2] = $53; //@line 24426
  $54 = $ReallocAsyncCtx + 36 | 0; //@line 24427
  HEAP32[$54 >> 2] = $18; //@line 24428
  $55 = $ReallocAsyncCtx + 40 | 0; //@line 24429
  HEAP32[$55 >> 2] = $20; //@line 24430
  $56 = $ReallocAsyncCtx + 44 | 0; //@line 24431
  HEAP32[$56 >> 2] = $22; //@line 24432
  $57 = $ReallocAsyncCtx + 48 | 0; //@line 24433
  HEAP32[$57 >> 2] = $24; //@line 24434
  $58 = $ReallocAsyncCtx + 52 | 0; //@line 24435
  HEAP32[$58 >> 2] = $26; //@line 24436
  $59 = $ReallocAsyncCtx + 56 | 0; //@line 24437
  HEAP32[$59 >> 2] = $28; //@line 24438
  $60 = $ReallocAsyncCtx + 60 | 0; //@line 24439
  HEAP32[$60 >> 2] = $30; //@line 24440
  $61 = $ReallocAsyncCtx + 64 | 0; //@line 24441
  HEAP32[$61 >> 2] = $32; //@line 24442
  sp = STACKTOP; //@line 24443
  return;
 }
 HEAP32[___async_retval >> 2] = $43; //@line 24447
 ___async_unwind = 0; //@line 24448
 HEAP32[$ReallocAsyncCtx >> 2] = 613; //@line 24449
 $44 = $ReallocAsyncCtx + 4 | 0; //@line 24450
 HEAP32[$44 >> 2] = $36; //@line 24451
 $45 = $ReallocAsyncCtx + 8 | 0; //@line 24452
 HEAP32[$45 >> 2] = $4; //@line 24453
 $46 = $ReallocAsyncCtx + 12 | 0; //@line 24454
 HEAP32[$46 >> 2] = $6; //@line 24455
 $47 = $ReallocAsyncCtx + 16 | 0; //@line 24456
 HEAP32[$47 >> 2] = $8; //@line 24457
 $48 = $ReallocAsyncCtx + 20 | 0; //@line 24458
 HEAP32[$48 >> 2] = $10; //@line 24459
 $49 = $ReallocAsyncCtx + 24 | 0; //@line 24460
 HEAP32[$49 >> 2] = $35; //@line 24461
 $50 = $ReallocAsyncCtx + 28 | 0; //@line 24462
 HEAP32[$50 >> 2] = $51; //@line 24463
 $52 = $ReallocAsyncCtx + 32 | 0; //@line 24464
 HEAP32[$52 >> 2] = $53; //@line 24465
 $54 = $ReallocAsyncCtx + 36 | 0; //@line 24466
 HEAP32[$54 >> 2] = $18; //@line 24467
 $55 = $ReallocAsyncCtx + 40 | 0; //@line 24468
 HEAP32[$55 >> 2] = $20; //@line 24469
 $56 = $ReallocAsyncCtx + 44 | 0; //@line 24470
 HEAP32[$56 >> 2] = $22; //@line 24471
 $57 = $ReallocAsyncCtx + 48 | 0; //@line 24472
 HEAP32[$57 >> 2] = $24; //@line 24473
 $58 = $ReallocAsyncCtx + 52 | 0; //@line 24474
 HEAP32[$58 >> 2] = $26; //@line 24475
 $59 = $ReallocAsyncCtx + 56 | 0; //@line 24476
 HEAP32[$59 >> 2] = $28; //@line 24477
 $60 = $ReallocAsyncCtx + 60 | 0; //@line 24478
 HEAP32[$60 >> 2] = $30; //@line 24479
 $61 = $ReallocAsyncCtx + 64 | 0; //@line 24480
 HEAP32[$61 >> 2] = $32; //@line 24481
 sp = STACKTOP; //@line 24482
 return;
}
function _mbedtls_internal_aes_decrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 1258
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 1344
 $$0136 = $4 + 16 | 0; //@line 1344
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 1344
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 1344
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 1344
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 1344
 while (1) {
  $110 = HEAP32[1300 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[2324 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0138 >>> 24 << 2) >> 2]; //@line 1366
  $130 = HEAP32[1300 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[2324 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0140 >>> 24 << 2) >> 2]; //@line 1386
  $150 = HEAP32[1300 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[2324 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0139 >>> 24 << 2) >> 2]; //@line 1406
  $170 = HEAP32[1300 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[2324 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($$0137 >>> 24 << 2) >> 2]; //@line 1426
  $171 = $$0136 + 20 | 0; //@line 1427
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 1428
  $173 = $110 & 255; //@line 1429
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[1300 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[2324 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($170 >>> 24 << 2) >> 2]; //@line 1490
  $250 = HEAP32[1300 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[2324 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($110 >>> 24 << 2) >> 2]; //@line 1510
  $$0$in = $$0$in + -1 | 0; //@line 1511
  $$0136 = $$0136 + 32 | 0; //@line 1511
  $$0137 = HEAP32[1300 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[2324 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($130 >>> 24 << 2) >> 2]; //@line 1511
  $$0138 = HEAP32[1300 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[2324 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[3348 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[4372 + ($150 >>> 24 << 2) >> 2]; //@line 1511
  $$0139 = $250; //@line 1511
  $$0140 = $230; //@line 1511
 }
 $261 = (HEAPU8[13855 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1523
 $268 = (HEAPU8[13855 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1530
 $274 = (HEAPU8[13855 + ($130 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1536
 $276 = HEAP32[$171 >> 2] | 0; //@line 1538
 $281 = $276 ^ (HEAPU8[13855 + ($130 & 255) >> 0] | 0); //@line 1543
 $288 = (HEAPU8[13855 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1550
 $295 = (HEAPU8[13855 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1557
 $301 = (HEAPU8[13855 + ($150 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1563
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1565
 $308 = $303 ^ (HEAPU8[13855 + ($150 & 255) >> 0] | 0); //@line 1570
 $315 = (HEAPU8[13855 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1577
 $322 = (HEAPU8[13855 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1584
 $328 = (HEAPU8[13855 + ($170 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1590
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1591
 $334 = $329 ^ (HEAPU8[13855 + ($170 & 255) >> 0] | 0); //@line 1596
 $341 = (HEAPU8[13855 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1603
 $348 = (HEAPU8[13855 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1610
 $354 = (HEAPU8[13855 + ($110 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1616
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[13855 + $173 >> 0] | 0); //@line 1618
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1622
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1626
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1630
 HEAP8[$2 + 4 >> 0] = $281; //@line 1633
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1637
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1641
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1645
 HEAP8[$2 + 8 >> 0] = $308; //@line 1648
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1652
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1656
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1660
 HEAP8[$2 + 12 >> 0] = $334; //@line 1663
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1667
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1671
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1675
 return 0; //@line 1676
}
function _mbedtls_internal_aes_encrypt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$in = 0, $$0136 = 0, $$0137 = 0, $$0138 = 0, $$0139 = 0, $$0140 = 0, $110 = 0, $130 = 0, $150 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $230 = 0, $250 = 0, $261 = 0, $268 = 0, $274 = 0, $276 = 0, $281 = 0, $288 = 0, $295 = 0, $301 = 0, $303 = 0, $308 = 0, $315 = 0, $322 = 0, $328 = 0, $329 = 0, $334 = 0, $341 = 0, $348 = 0, $354 = 0, $4 = 0;
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 811
 $$0$in = HEAP32[$0 >> 2] >> 1; //@line 897
 $$0136 = $4 + 16 | 0; //@line 897
 $$0137 = ((HEAPU8[$1 + 1 >> 0] | 0) << 8 | (HEAPU8[$1 >> 0] | 0) | (HEAPU8[$1 + 2 >> 0] | 0) << 16 | (HEAPU8[$1 + 3 >> 0] | 0) << 24) ^ HEAP32[$4 >> 2]; //@line 897
 $$0138 = ((HEAPU8[$1 + 5 >> 0] | 0) << 8 | (HEAPU8[$1 + 4 >> 0] | 0) | (HEAPU8[$1 + 6 >> 0] | 0) << 16 | (HEAPU8[$1 + 7 >> 0] | 0) << 24) ^ HEAP32[$4 + 4 >> 2]; //@line 897
 $$0139 = ((HEAPU8[$1 + 13 >> 0] | 0) << 8 | (HEAPU8[$1 + 12 >> 0] | 0) | (HEAPU8[$1 + 14 >> 0] | 0) << 16 | (HEAPU8[$1 + 15 >> 0] | 0) << 24) ^ HEAP32[$4 + 12 >> 2]; //@line 897
 $$0140 = ((HEAPU8[$1 + 9 >> 0] | 0) << 8 | (HEAPU8[$1 + 8 >> 0] | 0) | (HEAPU8[$1 + 10 >> 0] | 0) << 16 | (HEAPU8[$1 + 11 >> 0] | 0) << 24) ^ HEAP32[$4 + 8 >> 2]; //@line 897
 while (1) {
  $110 = HEAP32[5396 + (($$0137 & 255) << 2) >> 2] ^ HEAP32[$$0136 >> 2] ^ HEAP32[6420 + (($$0138 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0140 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0139 >>> 24 << 2) >> 2]; //@line 919
  $130 = HEAP32[5396 + (($$0138 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 4 >> 2] ^ HEAP32[6420 + (($$0140 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0139 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0137 >>> 24 << 2) >> 2]; //@line 939
  $150 = HEAP32[5396 + (($$0140 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 8 >> 2] ^ HEAP32[6420 + (($$0139 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0137 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0138 >>> 24 << 2) >> 2]; //@line 959
  $170 = HEAP32[5396 + (($$0139 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 12 >> 2] ^ HEAP32[6420 + (($$0137 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($$0138 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($$0140 >>> 24 << 2) >> 2]; //@line 979
  $171 = $$0136 + 20 | 0; //@line 980
  $172 = HEAP32[$$0136 + 16 >> 2] | 0; //@line 981
  $173 = $110 & 255; //@line 982
  if (($$0$in | 0) <= 1) {
   break;
  }
  $230 = HEAP32[5396 + (($150 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 24 >> 2] ^ HEAP32[6420 + (($170 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($110 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($130 >>> 24 << 2) >> 2]; //@line 1043
  $250 = HEAP32[5396 + (($170 & 255) << 2) >> 2] ^ HEAP32[$$0136 + 28 >> 2] ^ HEAP32[6420 + (($110 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($130 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($150 >>> 24 << 2) >> 2]; //@line 1063
  $$0$in = $$0$in + -1 | 0; //@line 1064
  $$0136 = $$0136 + 32 | 0; //@line 1064
  $$0137 = HEAP32[5396 + ($173 << 2) >> 2] ^ $172 ^ HEAP32[6420 + (($130 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($150 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($170 >>> 24 << 2) >> 2]; //@line 1064
  $$0138 = HEAP32[5396 + (($130 & 255) << 2) >> 2] ^ HEAP32[$171 >> 2] ^ HEAP32[6420 + (($150 >>> 8 & 255) << 2) >> 2] ^ HEAP32[7444 + (($170 >>> 16 & 255) << 2) >> 2] ^ HEAP32[8468 + ($110 >>> 24 << 2) >> 2]; //@line 1064
  $$0139 = $250; //@line 1064
  $$0140 = $230; //@line 1064
 }
 $261 = (HEAPU8[13599 + ($130 >>> 8 & 255) >> 0] | 0) << 8 ^ $172; //@line 1076
 $268 = (HEAPU8[13599 + ($150 >>> 16 & 255) >> 0] | 0) << 16 ^ $172; //@line 1083
 $274 = (HEAPU8[13599 + ($170 >>> 24) >> 0] | 0) << 24 ^ $172; //@line 1089
 $276 = HEAP32[$171 >> 2] | 0; //@line 1091
 $281 = $276 ^ (HEAPU8[13599 + ($130 & 255) >> 0] | 0); //@line 1096
 $288 = (HEAPU8[13599 + ($150 >>> 8 & 255) >> 0] | 0) << 8 ^ $276; //@line 1103
 $295 = (HEAPU8[13599 + ($170 >>> 16 & 255) >> 0] | 0) << 16 ^ $276; //@line 1110
 $301 = (HEAPU8[13599 + ($110 >>> 24) >> 0] | 0) << 24 ^ $276; //@line 1116
 $303 = HEAP32[$$0136 + 24 >> 2] | 0; //@line 1118
 $308 = $303 ^ (HEAPU8[13599 + ($150 & 255) >> 0] | 0); //@line 1123
 $315 = (HEAPU8[13599 + ($170 >>> 8 & 255) >> 0] | 0) << 8 ^ $303; //@line 1130
 $322 = (HEAPU8[13599 + ($110 >>> 16 & 255) >> 0] | 0) << 16 ^ $303; //@line 1137
 $328 = (HEAPU8[13599 + ($130 >>> 24) >> 0] | 0) << 24 ^ $303; //@line 1143
 $329 = HEAP32[$$0136 + 28 >> 2] | 0; //@line 1144
 $334 = $329 ^ (HEAPU8[13599 + ($170 & 255) >> 0] | 0); //@line 1149
 $341 = (HEAPU8[13599 + ($110 >>> 8 & 255) >> 0] | 0) << 8 ^ $329; //@line 1156
 $348 = (HEAPU8[13599 + ($130 >>> 16 & 255) >> 0] | 0) << 16 ^ $329; //@line 1163
 $354 = (HEAPU8[13599 + ($150 >>> 24) >> 0] | 0) << 24 ^ $329; //@line 1169
 HEAP8[$2 >> 0] = $172 ^ (HEAPU8[13599 + $173 >> 0] | 0); //@line 1171
 HEAP8[$2 + 1 >> 0] = $261 >>> 8; //@line 1175
 HEAP8[$2 + 2 >> 0] = $268 >>> 16; //@line 1179
 HEAP8[$2 + 3 >> 0] = $274 >>> 24; //@line 1183
 HEAP8[$2 + 4 >> 0] = $281; //@line 1186
 HEAP8[$2 + 5 >> 0] = $288 >>> 8; //@line 1190
 HEAP8[$2 + 6 >> 0] = $295 >>> 16; //@line 1194
 HEAP8[$2 + 7 >> 0] = $301 >>> 24; //@line 1198
 HEAP8[$2 + 8 >> 0] = $308; //@line 1201
 HEAP8[$2 + 9 >> 0] = $315 >>> 8; //@line 1205
 HEAP8[$2 + 10 >> 0] = $322 >>> 16; //@line 1209
 HEAP8[$2 + 11 >> 0] = $328 >>> 24; //@line 1213
 HEAP8[$2 + 12 >> 0] = $334; //@line 1216
 HEAP8[$2 + 13 >> 0] = $341 >>> 8; //@line 1220
 HEAP8[$2 + 14 >> 0] = $348 >>> 16; //@line 1224
 HEAP8[$2 + 15 >> 0] = $354 >>> 24; //@line 1228
 return 0; //@line 1229
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $21 = 0, $22 = 0, $25 = 0, $3 = 0, $34 = 0, $35 = 0, $4 = 0, $42 = 0, $5 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 15958
 STACKTOP = STACKTOP + 16 | 0; //@line 15959
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15959
 $vararg_buffer1 = sp + 8 | 0; //@line 15960
 $vararg_buffer = sp; //@line 15961
 $3 = HEAP32[$1 >> 2] | 0; //@line 15962
 $4 = $0 + 2380 | 0; //@line 15963
 HEAP32[$4 >> 2] = $3; //@line 15964
 $5 = $0 + 1996 | 0; //@line 15965
 if (($5 | 0) == ($2 | 0)) {
  $35 = $3; //@line 15968
 } else {
  $7 = $0 + 2008 | 0; //@line 15970
  $8 = HEAP32[$7 >> 2] | 0; //@line 15971
  do {
   if ($8 | 0) {
    $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 15976
    $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 15977
    FUNCTION_TABLE_vi[$11 & 1023]($5); //@line 15978
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 451; //@line 15981
     HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 15983
     HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 15985
     HEAP32[$AsyncCtx + 12 >> 2] = $7; //@line 15987
     HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 15989
     HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 15991
     HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 15993
     HEAP32[$AsyncCtx + 28 >> 2] = $0; //@line 15995
     HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer1; //@line 15997
     HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer1; //@line 15999
     sp = STACKTOP; //@line 16000
     STACKTOP = sp; //@line 16001
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 16003
     break;
    }
   }
  } while (0);
  $21 = $2 + 12 | 0; //@line 16008
  $22 = HEAP32[$21 >> 2] | 0; //@line 16009
  do {
   if (!$22) {
    $34 = 0; //@line 16013
   } else {
    $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 16016
    $AsyncCtx5 = _emscripten_alloc_async_context(36, sp) | 0; //@line 16017
    FUNCTION_TABLE_vii[$25 & 15]($5, $2); //@line 16018
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 452; //@line 16021
     HEAP32[$AsyncCtx5 + 4 >> 2] = $21; //@line 16023
     HEAP32[$AsyncCtx5 + 8 >> 2] = $7; //@line 16025
     HEAP32[$AsyncCtx5 + 12 >> 2] = $4; //@line 16027
     HEAP32[$AsyncCtx5 + 16 >> 2] = $vararg_buffer; //@line 16029
     HEAP32[$AsyncCtx5 + 20 >> 2] = $vararg_buffer; //@line 16031
     HEAP32[$AsyncCtx5 + 24 >> 2] = $0; //@line 16033
     HEAP32[$AsyncCtx5 + 28 >> 2] = $vararg_buffer1; //@line 16035
     HEAP32[$AsyncCtx5 + 32 >> 2] = $vararg_buffer1; //@line 16037
     sp = STACKTOP; //@line 16038
     STACKTOP = sp; //@line 16039
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx5 | 0); //@line 16041
     $34 = HEAP32[$21 >> 2] | 0; //@line 16043
     break;
    }
   }
  } while (0);
  HEAP32[$7 >> 2] = $34; //@line 16048
  $35 = HEAP32[$4 >> 2] | 0; //@line 16050
 }
 L16 : do {
  switch ($35 | 0) {
  case 0:
   {
    _mbed_tracef(16, 12709, 13309, $vararg_buffer); //@line 16055
    $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 16057
    __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 16058
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 453; //@line 16061
     HEAP32[$AsyncCtx17 + 4 >> 2] = $4; //@line 16063
     HEAP32[$AsyncCtx17 + 8 >> 2] = $vararg_buffer1; //@line 16065
     HEAP32[$AsyncCtx17 + 12 >> 2] = $vararg_buffer1; //@line 16067
     HEAP32[$AsyncCtx17 + 16 >> 2] = $0; //@line 16069
     sp = STACKTOP; //@line 16070
     STACKTOP = sp; //@line 16071
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 16073
     break L16;
    }
    break;
   }
  case 2:
   {
    HEAP8[$0 + 1177 >> 0] = 0; //@line 16080
    $42 = $0 + 4 | 0; //@line 16081
    $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 16082
    __ZN7LoRaPHY18put_radio_to_sleepEv($42); //@line 16083
    if (___async) {
     HEAP32[$AsyncCtx13 >> 2] = 454; //@line 16086
     HEAP32[$AsyncCtx13 + 4 >> 2] = $0; //@line 16088
     HEAP32[$AsyncCtx13 + 8 >> 2] = $42; //@line 16090
     HEAP32[$AsyncCtx13 + 12 >> 2] = $4; //@line 16092
     HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 16094
     HEAP32[$AsyncCtx13 + 20 >> 2] = $vararg_buffer1; //@line 16096
     sp = STACKTOP; //@line 16097
     STACKTOP = sp; //@line 16098
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 16100
     __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($42, HEAP8[$0 + 1916 >> 0] | 0, HEAP8[$0 + 1884 >> 0] | 0, HEAP32[$0 + 1880 >> 2] | 0, $0 + 1964 | 0); //@line 16108
     break L16;
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 if ((HEAP32[$4 >> 2] | 0) != 2) {
  STACKTOP = sp; //@line 16120
  return;
 }
 _mbed_tracef(16, 12709, 13345, $vararg_buffer1); //@line 16122
 $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16123
 __ZN7LoRaMac15open_rx2_windowEv($0); //@line 16124
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 455; //@line 16127
  sp = STACKTOP; //@line 16128
  STACKTOP = sp; //@line 16129
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 16131
 STACKTOP = sp; //@line 16132
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_253($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 17223
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17225
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17229
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17231
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17233
 $11 = $6 + 12 | 0; //@line 17234
 HEAP32[$6 >> 2] = 196; //@line 17235
 HEAP32[$6 + 4 >> 2] = 0; //@line 17237
 HEAP32[$6 + 8 >> 2] = $8; //@line 17239
 HEAP32[$11 >> 2] = 824; //@line 17240
 $12 = $8 + 2432 | 0; //@line 17241
 if (($12 | 0) == ($6 | 0)) {
  $35 = HEAP32[208] | 0; //@line 17245
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 17246
  FUNCTION_TABLE_vi[$35 & 1023]($6); //@line 17247
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 17250
   $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 17251
   HEAP32[$36 >> 2] = $6; //@line 17252
   $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 17253
   HEAP32[$37 >> 2] = $8; //@line 17254
   $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 17255
   HEAP32[$38 >> 2] = $2; //@line 17256
   $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 17257
   HEAP32[$39 >> 2] = $10; //@line 17258
   sp = STACKTOP; //@line 17259
   return;
  }
  ___async_unwind = 0; //@line 17262
  HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 17263
  $36 = $ReallocAsyncCtx15 + 4 | 0; //@line 17264
  HEAP32[$36 >> 2] = $6; //@line 17265
  $37 = $ReallocAsyncCtx15 + 8 | 0; //@line 17266
  HEAP32[$37 >> 2] = $8; //@line 17267
  $38 = $ReallocAsyncCtx15 + 12 | 0; //@line 17268
  HEAP32[$38 >> 2] = $2; //@line 17269
  $39 = $ReallocAsyncCtx15 + 16 | 0; //@line 17270
  HEAP32[$39 >> 2] = $10; //@line 17271
  sp = STACKTOP; //@line 17272
  return;
 }
 $14 = $8 + 2444 | 0; //@line 17275
 $15 = HEAP32[$14 >> 2] | 0; //@line 17276
 if (!$15) {
  $27 = HEAP32[207] | 0; //@line 17280
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 17281
  FUNCTION_TABLE_vii[$27 & 15]($12, $6); //@line 17282
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 17285
   $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 17286
   HEAP32[$28 >> 2] = $11; //@line 17287
   $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 17288
   HEAP32[$29 >> 2] = $14; //@line 17289
   $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 17290
   HEAP32[$30 >> 2] = $6; //@line 17291
   $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 17292
   HEAP32[$31 >> 2] = $8; //@line 17293
   $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 17294
   HEAP32[$32 >> 2] = $2; //@line 17295
   $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 17296
   HEAP32[$33 >> 2] = $10; //@line 17297
   sp = STACKTOP; //@line 17298
   return;
  }
  ___async_unwind = 0; //@line 17301
  HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 17302
  $28 = $ReallocAsyncCtx14 + 4 | 0; //@line 17303
  HEAP32[$28 >> 2] = $11; //@line 17304
  $29 = $ReallocAsyncCtx14 + 8 | 0; //@line 17305
  HEAP32[$29 >> 2] = $14; //@line 17306
  $30 = $ReallocAsyncCtx14 + 12 | 0; //@line 17307
  HEAP32[$30 >> 2] = $6; //@line 17308
  $31 = $ReallocAsyncCtx14 + 16 | 0; //@line 17309
  HEAP32[$31 >> 2] = $8; //@line 17310
  $32 = $ReallocAsyncCtx14 + 20 | 0; //@line 17311
  HEAP32[$32 >> 2] = $2; //@line 17312
  $33 = $ReallocAsyncCtx14 + 24 | 0; //@line 17313
  HEAP32[$33 >> 2] = $10; //@line 17314
  sp = STACKTOP; //@line 17315
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 17319
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(32) | 0; //@line 17320
  FUNCTION_TABLE_vi[$18 & 1023]($12); //@line 17321
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 17324
   $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 17325
   HEAP32[$19 >> 2] = $11; //@line 17326
   $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 17327
   HEAP32[$20 >> 2] = $14; //@line 17328
   $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 17329
   HEAP32[$21 >> 2] = $12; //@line 17330
   $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 17331
   HEAP32[$22 >> 2] = $6; //@line 17332
   $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 17333
   HEAP32[$23 >> 2] = $8; //@line 17334
   $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 17335
   HEAP32[$24 >> 2] = $2; //@line 17336
   $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 17337
   HEAP32[$25 >> 2] = $10; //@line 17338
   sp = STACKTOP; //@line 17339
   return;
  }
  ___async_unwind = 0; //@line 17342
  HEAP32[$ReallocAsyncCtx13 >> 2] = 197; //@line 17343
  $19 = $ReallocAsyncCtx13 + 4 | 0; //@line 17344
  HEAP32[$19 >> 2] = $11; //@line 17345
  $20 = $ReallocAsyncCtx13 + 8 | 0; //@line 17346
  HEAP32[$20 >> 2] = $14; //@line 17347
  $21 = $ReallocAsyncCtx13 + 12 | 0; //@line 17348
  HEAP32[$21 >> 2] = $12; //@line 17349
  $22 = $ReallocAsyncCtx13 + 16 | 0; //@line 17350
  HEAP32[$22 >> 2] = $6; //@line 17351
  $23 = $ReallocAsyncCtx13 + 20 | 0; //@line 17352
  HEAP32[$23 >> 2] = $8; //@line 17353
  $24 = $ReallocAsyncCtx13 + 24 | 0; //@line 17354
  HEAP32[$24 >> 2] = $2; //@line 17355
  $25 = $ReallocAsyncCtx13 + 28 | 0; //@line 17356
  HEAP32[$25 >> 2] = $10; //@line 17357
  sp = STACKTOP; //@line 17358
  return;
 }
}
function __ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$01722$i = 0, $$01821$i = 0, $$023$i = 0, $$2$i = 0, $$220$i = 0, $$sink = 0, $10 = 0, $11 = 0, $15 = 0, $22 = 0, $23 = 0, $25 = 0, $37 = 0, $39 = 0, $40 = 0, $42 = 0, $44 = 0, $45 = 0, $47 = 0, $5 = 0, $55 = 0, $57 = 0, $7 = 0, $73 = 0, $76 = 0, $8 = 0, $89 = 0, $9 = 0, $90 = 0, $indvars$iv$i = 0, $indvars$iv$i27 = 0, $wide$trip$count$i = 0, $wide$trip$count$i25 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 21533
 STACKTOP = STACKTOP + 16 | 0; //@line 21534
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 21534
 $5 = sp; //@line 21535
 dest = $5; //@line 21536
 stop = dest + 16 | 0; //@line 21536
 do {
  HEAP8[dest >> 0] = 255; //@line 21536
  dest = dest + 1 | 0; //@line 21536
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[$0 + 72 >> 2] | 0; //@line 21538
 $8 = $0 + 116 | 0; //@line 21539
 $9 = HEAP32[$8 >> 2] | 0; //@line 21540
 $10 = $0 + 113 | 0; //@line 21541
 $11 = HEAP8[$10 >> 0] | 0; //@line 21542
 if (!((__ZN7LoRaPHY19num_active_channelsEPthh(0, $9, 0, $11) | 0) << 24 >> 24)) {
  $15 = HEAP32[$0 + 120 >> 2] | 0; //@line 21547
  if ($11 << 24 >> 24 != 0 & (($9 | 0) != 0 & ($15 | 0) != 0)) {
   $wide$trip$count$i = $11 & 255; //@line 21554
   $indvars$iv$i = 0; //@line 21555
   do {
    HEAP16[$9 + ($indvars$iv$i << 1) >> 1] = HEAP16[$15 + ($indvars$iv$i << 1) >> 1] | 0; //@line 21560
    $indvars$iv$i = $indvars$iv$i + 1 | 0; //@line 21561
   } while (($indvars$iv$i | 0) != ($wide$trip$count$i | 0));
  }
 }
 $22 = HEAP32[$1 >> 2] | 0; //@line 21571
 $23 = $0 + 8 | 0; //@line 21572
 $25 = $1 + 4 | 0; //@line 21574
 if ($22 >>> 0 > (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) >>> 0) {
  $76 = HEAP32[$1 >> 2] | 0; //@line 21579
  $$0 = -1020; //@line 21584
  $$sink = $76 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$23 >> 2] | 0, HEAP32[$25 >> 2] | 0) | 0) | 0; //@line 21584
  HEAP32[$3 >> 2] = $$sink; //@line 21585
  STACKTOP = sp; //@line 21586
  return $$0 | 0; //@line 21586
 }
 HEAP32[$4 >> 2] = 0; //@line 21588
 $37 = __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, (HEAP8[$1 + 9 >> 0] | 0) != 0, (HEAP8[$1 + 10 >> 0] | 0) != 0, $7, HEAP8[$0 + 76 >> 0] | 0) | 0; //@line 21597
 $39 = HEAP8[$1 + 8 >> 0] | 0; //@line 21599
 $40 = HEAP32[$8 >> 2] | 0; //@line 21600
 $42 = HEAP8[$0 + 20 >> 0] | 0; //@line 21602
 do {
  if ($42 << 24 >> 24) {
   $44 = $0 + 124 | 0; //@line 21606
   $45 = $0 + 72 | 0; //@line 21607
   $$01722$i = 0; //@line 21608
   $$01821$i = 0; //@line 21608
   $$023$i = 0; //@line 21608
   $47 = 0; //@line 21608
   while (1) {
    do {
     if (!(1 << ($47 & 15) & HEAPU16[$40 + ($47 >>> 4 << 1) >> 1])) {
      $$2$i = $$023$i; //@line 21620
      $$220$i = $$01821$i; //@line 21620
     } else {
      $55 = HEAP32[$44 >> 2] | 0; //@line 21622
      $57 = HEAP8[$55 + ($47 * 12 | 0) + 8 >> 0] | 0; //@line 21624
      if (($57 & 15) <= $39 << 24 >> 24 ? ($57 & 255) >>> 4 << 24 >> 24 >= $39 << 24 >> 24 : 0) {
       if (!(HEAP32[(HEAP32[$45 >> 2] | 0) + ((HEAPU8[$55 + ($47 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 12 >> 2] | 0)) {
        HEAP8[$5 + ($$023$i & 255) >> 0] = $$01722$i; //@line 21642
        $$2$i = $$023$i + 1 << 24 >> 24; //@line 21643
        $$220$i = $$01821$i; //@line 21643
        break;
       } else {
        $$2$i = $$023$i; //@line 21647
        $$220$i = $$01821$i + 1 << 24 >> 24; //@line 21647
        break;
       }
      } else {
       $$2$i = $$023$i; //@line 21651
       $$220$i = $$01821$i; //@line 21651
      }
     }
    } while (0);
    $73 = $$01722$i + 1 << 24 >> 24; //@line 21655
    if (($73 & 255) < ($42 & 255)) {
     $$01722$i = $73; //@line 21659
     $$01821$i = $$220$i; //@line 21659
     $$023$i = $$2$i; //@line 21659
     $47 = $73 & 255; //@line 21659
    } else {
     break;
    }
   }
   if (!($$2$i << 24 >> 24)) {
    if (!($$220$i << 24 >> 24)) {
     break;
    } else {
     $$0 = -1020; //@line 21670
     $$sink = $37; //@line 21670
    }
    HEAP32[$3 >> 2] = $$sink; //@line 21672
    STACKTOP = sp; //@line 21673
    return $$0 | 0; //@line 21673
   } else {
    HEAP8[$2 >> 0] = HEAP8[$5 + ((_rand() | 0) % ($$2$i & 255 | 0) | 0) >> 0] | 0; //@line 21680
    $$0 = 0; //@line 21681
    $$sink = 0; //@line 21681
    HEAP32[$3 >> 2] = $$sink; //@line 21682
    STACKTOP = sp; //@line 21683
    return $$0 | 0; //@line 21683
   }
  }
 } while (0);
 $89 = HEAP32[$0 + 120 >> 2] | 0; //@line 21688
 $90 = HEAP8[$10 >> 0] | 0; //@line 21689
 if (!(($40 | 0) != 0 & ($89 | 0) != 0 & $90 << 24 >> 24 != 0)) {
  $$0 = -1021; //@line 21696
  $$sink = 0; //@line 21696
  HEAP32[$3 >> 2] = $$sink; //@line 21697
  STACKTOP = sp; //@line 21698
  return $$0 | 0; //@line 21698
 }
 $wide$trip$count$i25 = $90 & 255; //@line 21700
 $indvars$iv$i27 = 0; //@line 21701
 do {
  HEAP16[$40 + ($indvars$iv$i27 << 1) >> 1] = HEAP16[$89 + ($indvars$iv$i27 << 1) >> 1] | 0; //@line 21706
  $indvars$iv$i27 = $indvars$iv$i27 + 1 | 0; //@line 21707
 } while (($indvars$iv$i27 | 0) != ($wide$trip$count$i25 | 0));
 $$0 = -1021; //@line 21710
 $$sink = 0; //@line 21710
 HEAP32[$3 >> 2] = $$sink; //@line 21716
 STACKTOP = sp; //@line 21717
 return $$0 | 0; //@line 21717
}
function _mbedtls_aes_setkey_enc($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0103117 = 0, $$0106 = 0, $$0112 = 0, $$1104111 = 0, $$1114 = 0, $$2105113 = 0, $$2116 = 0, $$3115 = 0, $$sink = 0, $107 = 0, $111 = 0, $115 = 0, $119 = 0, $127 = 0, $129 = 0, $158 = 0, $162 = 0, $166 = 0, $194 = 0, $198 = 0, $202 = 0, $3 = 0, $33 = 0, $35 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $76 = 0, $78 = 0, $$0112$looptemp = 0, $$1114$looptemp = 0, $$2116$looptemp = 0;
 switch ($2 | 0) {
 case 128:
  {
   $$sink = 10; //@line 248
   break;
  }
 case 192:
  {
   $$sink = 12; //@line 252
   break;
  }
 case 256:
  {
   $$sink = 14; //@line 256
   break;
  }
 default:
  {
   $$0106 = -32; //@line 260
   return $$0106 | 0; //@line 261
  }
 }
 HEAP32[$0 >> 2] = $$sink; //@line 264
 $3 = $0 + 8 | 0; //@line 265
 HEAP32[$0 + 4 >> 2] = $3; //@line 267
 $5 = $2 >>> 5; //@line 268
 $$0103117 = 0; //@line 269
 do {
  $6 = $$0103117 << 2; //@line 271
  HEAP32[$0 + 8 + ($$0103117 << 2) >> 2] = (HEAPU8[$1 + ($6 | 1) >> 0] | 0) << 8 | (HEAPU8[$1 + $6 >> 0] | 0) | (HEAPU8[$1 + ($6 | 2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($6 | 3) >> 0] | 0) << 24; //@line 294
  $$0103117 = $$0103117 + 1 | 0; //@line 295
 } while (($$0103117 | 0) != ($5 | 0));
 switch (HEAP32[$0 >> 2] | 0) {
 case 10:
  {
   $$0112 = $3; //@line 307
   $$1104111 = 0; //@line 307
   $33 = HEAP32[$3 >> 2] | 0; //@line 307
   do {
    $35 = HEAP32[$$0112 + 12 >> 2] | 0; //@line 313
    $33 = HEAP32[1260 + ($$1104111 << 2) >> 2] ^ $33 ^ (HEAPU8[13599 + ($35 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13599 + ($35 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13599 + ($35 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13599 + ($35 & 255) >> 0] | 0) << 24; //@line 338
    $$0112$looptemp = $$0112;
    $$0112 = $$0112 + 16 | 0; //@line 339
    HEAP32[$$0112 >> 2] = $33; //@line 340
    $64 = $33 ^ HEAP32[$$0112$looptemp + 4 >> 2]; //@line 343
    HEAP32[$$0112$looptemp + 20 >> 2] = $64; //@line 345
    $68 = HEAP32[$$0112$looptemp + 8 >> 2] ^ $64; //@line 348
    HEAP32[$$0112$looptemp + 24 >> 2] = $68; //@line 350
    HEAP32[$$0112$looptemp + 28 >> 2] = $35 ^ $68; //@line 353
    $$1104111 = $$1104111 + 1 | 0; //@line 354
   } while (($$1104111 | 0) != 10);
   $$0106 = 0; //@line 357
   return $$0106 | 0; //@line 363
  }
 case 12:
  {
   $$1114 = $3; //@line 368
   $$2105113 = 0; //@line 368
   $76 = HEAP32[$3 >> 2] | 0; //@line 368
   do {
    $78 = HEAP32[$$1114 + 20 >> 2] | 0; //@line 374
    $76 = HEAP32[1260 + ($$2105113 << 2) >> 2] ^ $76 ^ (HEAPU8[13599 + ($78 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13599 + ($78 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13599 + ($78 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13599 + ($78 & 255) >> 0] | 0) << 24; //@line 399
    $$1114$looptemp = $$1114;
    $$1114 = $$1114 + 24 | 0; //@line 400
    HEAP32[$$1114 >> 2] = $76; //@line 401
    $107 = $76 ^ HEAP32[$$1114$looptemp + 4 >> 2]; //@line 404
    HEAP32[$$1114$looptemp + 28 >> 2] = $107; //@line 406
    $111 = HEAP32[$$1114$looptemp + 8 >> 2] ^ $107; //@line 409
    HEAP32[$$1114$looptemp + 32 >> 2] = $111; //@line 411
    $115 = HEAP32[$$1114$looptemp + 12 >> 2] ^ $111; //@line 414
    HEAP32[$$1114$looptemp + 36 >> 2] = $115; //@line 416
    $119 = HEAP32[$$1114$looptemp + 16 >> 2] ^ $115; //@line 419
    HEAP32[$$1114$looptemp + 40 >> 2] = $119; //@line 421
    HEAP32[$$1114$looptemp + 44 >> 2] = $78 ^ $119; //@line 424
    $$2105113 = $$2105113 + 1 | 0; //@line 425
   } while (($$2105113 | 0) != 8);
   $$0106 = 0; //@line 428
   return $$0106 | 0; //@line 434
  }
 case 14:
  {
   $$2116 = $3; //@line 439
   $$3115 = 0; //@line 439
   $127 = HEAP32[$3 >> 2] | 0; //@line 439
   do {
    $129 = HEAP32[$$2116 + 28 >> 2] | 0; //@line 445
    $127 = HEAP32[1260 + ($$3115 << 2) >> 2] ^ $127 ^ (HEAPU8[13599 + ($129 >>> 8 & 255) >> 0] | 0) ^ (HEAPU8[13599 + ($129 >>> 16 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13599 + ($129 >>> 24) >> 0] | 0) << 16 ^ (HEAPU8[13599 + ($129 & 255) >> 0] | 0) << 24; //@line 470
    $$2116$looptemp = $$2116;
    $$2116 = $$2116 + 32 | 0; //@line 471
    HEAP32[$$2116 >> 2] = $127; //@line 472
    $158 = $127 ^ HEAP32[$$2116$looptemp + 4 >> 2]; //@line 475
    HEAP32[$$2116$looptemp + 36 >> 2] = $158; //@line 477
    $162 = HEAP32[$$2116$looptemp + 8 >> 2] ^ $158; //@line 480
    HEAP32[$$2116$looptemp + 40 >> 2] = $162; //@line 482
    $166 = HEAP32[$$2116$looptemp + 12 >> 2] ^ $162; //@line 485
    HEAP32[$$2116$looptemp + 44 >> 2] = $166; //@line 487
    $194 = HEAP32[$$2116$looptemp + 16 >> 2] ^ (HEAPU8[13599 + ($166 & 255) >> 0] | 0) ^ (HEAPU8[13599 + ($166 >>> 8 & 255) >> 0] | 0) << 8 ^ (HEAPU8[13599 + ($166 >>> 16 & 255) >> 0] | 0) << 16 ^ (HEAPU8[13599 + ($166 >>> 24) >> 0] | 0) << 24; //@line 514
    HEAP32[$$2116$looptemp + 48 >> 2] = $194; //@line 516
    $198 = $194 ^ HEAP32[$$2116$looptemp + 20 >> 2]; //@line 519
    HEAP32[$$2116$looptemp + 52 >> 2] = $198; //@line 521
    $202 = HEAP32[$$2116$looptemp + 24 >> 2] ^ $198; //@line 524
    HEAP32[$$2116$looptemp + 56 >> 2] = $202; //@line 526
    HEAP32[$$2116$looptemp + 60 >> 2] = $129 ^ $202; //@line 529
    $$3115 = $$3115 + 1 | 0; //@line 530
   } while (($$3115 | 0) != 7);
   $$0106 = 0; //@line 533
   return $$0106 | 0; //@line 539
  }
 default:
  {
   $$0106 = 0; //@line 543
   return $$0106 | 0; //@line 544
  }
 }
 return 0; //@line 547
}
function __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1); //@line 23199
 HEAP32[$0 >> 2] = 968; //@line 23200
 $2 = $0 + 324 | 0; //@line 23201
 HEAP32[$2 >> 2] = HEAP32[262]; //@line 23202
 HEAP32[$2 + 4 >> 2] = HEAP32[263]; //@line 23202
 HEAP32[$2 + 8 >> 2] = HEAP32[264]; //@line 23202
 HEAP32[$2 + 12 >> 2] = HEAP32[265]; //@line 23202
 HEAP32[$2 + 16 >> 2] = HEAP32[266]; //@line 23202
 HEAP32[$2 + 20 >> 2] = HEAP32[267]; //@line 23202
 $3 = $0 + 348 | 0; //@line 23203
 HEAP32[$3 >> 2] = HEAP32[268]; //@line 23204
 HEAP32[$3 + 4 >> 2] = HEAP32[269]; //@line 23204
 HEAP32[$3 + 8 >> 2] = HEAP32[270]; //@line 23204
 HEAP32[$3 + 12 >> 2] = HEAP32[271]; //@line 23204
 HEAP32[$3 + 16 >> 2] = HEAP32[272]; //@line 23204
 HEAP32[$3 + 20 >> 2] = HEAP32[273]; //@line 23204
 $4 = $0 + 372 | 0; //@line 23205
 HEAP32[$4 >> 2] = HEAP32[274]; //@line 23206
 HEAP32[$4 + 4 >> 2] = HEAP32[275]; //@line 23206
 HEAP32[$4 + 8 >> 2] = HEAP32[276]; //@line 23206
 HEAP32[$4 + 12 >> 2] = HEAP32[277]; //@line 23206
 HEAP32[$4 + 16 >> 2] = HEAP32[278]; //@line 23206
 HEAP32[$4 + 20 >> 2] = HEAP32[279]; //@line 23206
 $5 = $0 + 396 | 0; //@line 23207
 HEAP32[$5 >> 2] = HEAP32[280]; //@line 23208
 HEAP32[$5 + 4 >> 2] = HEAP32[281]; //@line 23208
 HEAP32[$5 + 8 >> 2] = HEAP32[282]; //@line 23208
 HEAP32[$5 + 12 >> 2] = HEAP32[283]; //@line 23208
 HEAP32[$5 + 16 >> 2] = HEAP32[284]; //@line 23208
 HEAP32[$5 + 20 >> 2] = HEAP32[285]; //@line 23208
 $6 = $0 + 420 | 0; //@line 23209
 HEAP32[$6 >> 2] = HEAP32[286]; //@line 23210
 HEAP32[$6 + 4 >> 2] = HEAP32[287]; //@line 23210
 HEAP32[$6 + 8 >> 2] = HEAP32[288]; //@line 23210
 HEAP32[$6 + 12 >> 2] = HEAP32[289]; //@line 23210
 HEAP32[$6 + 16 >> 2] = HEAP32[290]; //@line 23210
 HEAP32[$6 + 20 >> 2] = HEAP32[291]; //@line 23210
 $7 = $0 + 444 | 0; //@line 23211
 HEAP32[$7 >> 2] = HEAP32[292]; //@line 23212
 HEAP32[$7 + 4 >> 2] = HEAP32[293]; //@line 23212
 HEAP32[$7 + 8 >> 2] = HEAP32[294]; //@line 23212
 HEAP32[$7 + 12 >> 2] = HEAP32[295]; //@line 23212
 HEAP32[$7 + 16 >> 2] = HEAP32[296]; //@line 23212
 HEAP32[$7 + 20 >> 2] = HEAP32[297]; //@line 23212
 $8 = $0 + 132 | 0; //@line 23213
 HEAP32[$8 >> 2] = HEAP32[298]; //@line 23214
 HEAP32[$8 + 4 >> 2] = HEAP32[299]; //@line 23214
 HEAP32[$8 + 8 >> 2] = HEAP32[300]; //@line 23214
 HEAP8[$0 + 141 >> 0] = 1; //@line 23216
 $10 = $0 + 144 | 0; //@line 23217
 HEAP32[$10 >> 2] = HEAP32[301]; //@line 23218
 HEAP32[$10 + 4 >> 2] = HEAP32[302]; //@line 23218
 HEAP32[$10 + 8 >> 2] = HEAP32[303]; //@line 23218
 HEAP8[$0 + 153 >> 0] = 1; //@line 23220
 $12 = $0 + 156 | 0; //@line 23221
 HEAP32[$12 >> 2] = HEAP32[304]; //@line 23222
 HEAP32[$12 + 4 >> 2] = HEAP32[305]; //@line 23222
 HEAP32[$12 + 8 >> 2] = HEAP32[306]; //@line 23222
 HEAP8[$0 + 165 >> 0] = 1; //@line 23224
 $14 = $0 + 470 | 0; //@line 23225
 HEAP16[$14 >> 1] = 7; //@line 23226
 $15 = $0 + 468 | 0; //@line 23227
 __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $15, $14, 1); //@line 23228
 HEAP32[$0 + 124 >> 2] = $8; //@line 23230
 HEAP8[$0 + 112 >> 0] = 16; //@line 23232
 HEAP32[$0 + 116 >> 2] = $15; //@line 23234
 HEAP32[$0 + 120 >> 2] = $14; //@line 23236
 HEAP8[$0 + 113 >> 0] = 1; //@line 23238
 HEAP32[$0 + 72 >> 2] = $2; //@line 23240
 HEAP8[$0 + 76 >> 0] = 6; //@line 23242
 HEAP32[$0 + 80 >> 2] = 1228; //@line 23244
 HEAP8[$0 + 84 >> 0] = 8; //@line 23246
 HEAP32[$0 + 88 >> 2] = 13452; //@line 23248
 HEAP8[$0 + 92 >> 0] = 8; //@line 23250
 HEAP32[$0 + 96 >> 2] = 13460; //@line 23252
 HEAP8[$0 + 100 >> 0] = 8; //@line 23254
 HEAP32[$0 + 104 >> 2] = 13468; //@line 23256
 HEAP8[$0 + 108 >> 0] = 8; //@line 23258
 $31 = $0 + 128 | 0; //@line 23259
 HEAP8[$31 >> 0] = HEAP8[$31 >> 0] & -4; //@line 23262
 $34 = $0 + 12 | 0; //@line 23263
 $35 = $0 + 18 | 0; //@line 23264
 HEAP32[$34 >> 2] = 16843009; //@line 23265
 HEAP16[$34 + 4 >> 1] = 257; //@line 23265
 HEAP8[$35 >> 0] = 3; //@line 23266
 HEAP8[$0 + 20 >> 0] = 16; //@line 23268
 HEAP8[$0 + 19 >> 0] = 5; //@line 23270
 HEAP8[$0 + 26 >> 0] = 0; //@line 23272
 HEAP8[$0 + 27 >> 0] = 7; //@line 23274
 HEAP8[$0 + 28 >> 0] = 0; //@line 23276
 HEAP8[$0 + 29 >> 0] = 7; //@line 23278
 HEAP8[$0 + 30 >> 0] = 0; //@line 23280
 HEAP8[$0 + 31 >> 0] = 5; //@line 23282
 HEAP8[$0 + 32 >> 0] = 0; //@line 23284
 HEAP8[$0 + 33 >> 0] = 5; //@line 23286
 HEAP8[$0 + 34 >> 0] = 0; //@line 23288
 HEAP8[$0 + 21 >> 0] = 7; //@line 23290
 HEAP8[$0 + 22 >> 0] = 0; //@line 23292
 HEAP8[$0 + 23 >> 0] = 0; //@line 23294
 HEAPF32[$0 + 56 >> 2] = 16.0; //@line 23296
 HEAPF32[$0 + 60 >> 2] = 2.1500000953674316; //@line 23298
 HEAP8[$0 + 24 >> 0] = 64; //@line 23300
 HEAP8[$0 + 25 >> 0] = 32; //@line 23302
 HEAP16[$0 + 36 >> 1] = 3e3; //@line 23304
 HEAP16[$0 + 38 >> 1] = 1e3; //@line 23306
 HEAP16[$0 + 40 >> 1] = 2e3; //@line 23308
 HEAP16[$0 + 46 >> 1] = 7; //@line 23310
 HEAP16[$0 + 42 >> 1] = 5e3; //@line 23312
 HEAP16[$0 + 44 >> 1] = 6e3; //@line 23314
 HEAP16[$0 + 48 >> 1] = 16384; //@line 23316
 HEAP16[$0 + 50 >> 1] = 2e3; //@line 23318
 HEAP16[$0 + 52 >> 1] = 1e3; //@line 23320
 HEAP8[$0 + 64 >> 0] = 0; //@line 23322
 HEAP32[$0 + 68 >> 2] = 869525e3; //@line 23324
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_145($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $41 = 0, $45 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29735
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29737
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29739
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29741
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29743
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29745
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29749
 $14 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 29750
 if ($14 | 0) {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 29754
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(28) | 0; //@line 29755
  FUNCTION_TABLE_vi[$17 & 1023]($2); //@line 29756
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 261; //@line 29759
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 29760
   HEAP32[$18 >> 2] = $2; //@line 29761
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 29762
   HEAP32[$19 >> 2] = $4; //@line 29763
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 29764
   HEAP32[$20 >> 2] = $6; //@line 29765
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 29766
   HEAP32[$21 >> 2] = $8; //@line 29767
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 29768
   HEAP32[$22 >> 2] = $10; //@line 29769
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 29770
   HEAP32[$23 >> 2] = $AsyncRetVal; //@line 29771
   sp = STACKTOP; //@line 29772
   return;
  }
  ___async_unwind = 0; //@line 29775
  HEAP32[$ReallocAsyncCtx4 >> 2] = 261; //@line 29776
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 29777
  HEAP32[$18 >> 2] = $2; //@line 29778
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 29779
  HEAP32[$19 >> 2] = $4; //@line 29780
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 29781
  HEAP32[$20 >> 2] = $6; //@line 29782
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 29783
  HEAP32[$21 >> 2] = $8; //@line 29784
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 29785
  HEAP32[$22 >> 2] = $10; //@line 29786
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 29787
  HEAP32[$23 >> 2] = $AsyncRetVal; //@line 29788
  sp = STACKTOP; //@line 29789
  return;
 }
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 29794
  _mbed_assert_internal(11914, 11923, 778); //@line 29795
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 262; //@line 29798
   $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 29799
   HEAP32[$25 >> 2] = $2; //@line 29800
   $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 29801
   HEAP32[$26 >> 2] = $4; //@line 29802
   $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 29803
   HEAP32[$27 >> 2] = $6; //@line 29804
   $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 29805
   HEAP32[$28 >> 2] = $8; //@line 29806
   $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 29807
   HEAP32[$29 >> 2] = $10; //@line 29808
   sp = STACKTOP; //@line 29809
   return;
  }
  ___async_unwind = 0; //@line 29812
  HEAP32[$ReallocAsyncCtx11 >> 2] = 262; //@line 29813
  $25 = $ReallocAsyncCtx11 + 4 | 0; //@line 29814
  HEAP32[$25 >> 2] = $2; //@line 29815
  $26 = $ReallocAsyncCtx11 + 8 | 0; //@line 29816
  HEAP32[$26 >> 2] = $4; //@line 29817
  $27 = $ReallocAsyncCtx11 + 12 | 0; //@line 29818
  HEAP32[$27 >> 2] = $6; //@line 29819
  $28 = $ReallocAsyncCtx11 + 16 | 0; //@line 29820
  HEAP32[$28 >> 2] = $8; //@line 29821
  $29 = $ReallocAsyncCtx11 + 20 | 0; //@line 29822
  HEAP32[$29 >> 2] = $10; //@line 29823
  sp = STACKTOP; //@line 29824
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) == 2) {
  label = 13; //@line 29830
 } else {
  if (!(HEAP8[$4 + 15 >> 0] | 0)) {
   label = 13; //@line 29836
  }
 }
 if ((label | 0) == 13) {
  if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) != 2) {
   return;
  }
  if ((HEAP32[$4 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $40 = $10 + 2512 | 0; //@line 29852
 $41 = HEAP32[$40 >> 2] | 0; //@line 29853
 if (!$41) {
  return;
 }
 $45 = HEAP32[$10 + 3168 >> 2] | 0; //@line 29860
 $47 = HEAP32[$41 + 4 >> 2] | 0; //@line 29862
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 29863
 FUNCTION_TABLE_vii[$47 & 15]($8, $10 + 2500 | 0); //@line 29864
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 29867
  $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 29868
  HEAP32[$48 >> 2] = $40; //@line 29869
  $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 29870
  HEAP32[$49 >> 2] = $8; //@line 29871
  $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 29872
  HEAP32[$50 >> 2] = $45; //@line 29873
  $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 29874
  HEAP32[$51 >> 2] = $8; //@line 29875
  sp = STACKTOP; //@line 29876
  return;
 }
 ___async_unwind = 0; //@line 29879
 HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 29880
 $48 = $ReallocAsyncCtx5 + 4 | 0; //@line 29881
 HEAP32[$48 >> 2] = $40; //@line 29882
 $49 = $ReallocAsyncCtx5 + 8 | 0; //@line 29883
 HEAP32[$49 >> 2] = $8; //@line 29884
 $50 = $ReallocAsyncCtx5 + 12 | 0; //@line 29885
 HEAP32[$50 >> 2] = $45; //@line 29886
 $51 = $ReallocAsyncCtx5 + 16 | 0; //@line 29887
 HEAP32[$51 >> 2] = $8; //@line 29888
 sp = STACKTOP; //@line 29889
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i4 = 0, $$pre10 = 0, $12 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $33 = 0, $4 = 0, $41 = 0, $49 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2369
 STACKTOP = STACKTOP + 16 | 0; //@line 2370
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2370
 $2 = sp; //@line 2371
 $3 = $1 + 12 | 0; //@line 2372
 $4 = HEAP32[$3 >> 2] | 0; //@line 2373
 if ($4 | 0) {
  $6 = $0 + 56 | 0; //@line 2376
  if (($6 | 0) != ($1 | 0)) {
   $8 = $0 + 68 | 0; //@line 2379
   $9 = HEAP32[$8 >> 2] | 0; //@line 2380
   do {
    if (!$9) {
     $20 = $4; //@line 2384
     label = 7; //@line 2385
    } else {
     $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 2388
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 2389
     FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 2390
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 107; //@line 2393
      HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 2395
      HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 2397
      HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 2399
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2401
      HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 2403
      sp = STACKTOP; //@line 2404
      STACKTOP = sp; //@line 2405
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2407
      $$pre = HEAP32[$3 >> 2] | 0; //@line 2408
      if (!$$pre) {
       $25 = 0; //@line 2411
       break;
      } else {
       $20 = $$pre; //@line 2414
       label = 7; //@line 2415
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 7) {
     $21 = HEAP32[$20 + 4 >> 2] | 0; //@line 2424
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2425
     FUNCTION_TABLE_vii[$21 & 15]($6, $1); //@line 2426
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 108; //@line 2429
      HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 2431
      HEAP32[$AsyncCtx2 + 8 >> 2] = $8; //@line 2433
      HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 2435
      sp = STACKTOP; //@line 2436
      STACKTOP = sp; //@line 2437
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2439
      $25 = HEAP32[$3 >> 2] | 0; //@line 2441
      break;
     }
    }
   } while (0);
   HEAP32[$8 >> 2] = $25; //@line 2446
  }
  _gpio_irq_set($0 + 28 | 0, 2, 1); //@line 2449
  STACKTOP = sp; //@line 2450
  return;
 }
 HEAP32[$2 >> 2] = 0; //@line 2452
 HEAP32[$2 + 4 >> 2] = 0; //@line 2452
 HEAP32[$2 + 8 >> 2] = 0; //@line 2452
 HEAP32[$2 + 12 >> 2] = 0; //@line 2452
 $27 = $0 + 56 | 0; //@line 2453
 do {
  if (($27 | 0) != ($2 | 0)) {
   $29 = $0 + 68 | 0; //@line 2457
   $30 = HEAP32[$29 >> 2] | 0; //@line 2458
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 2462
    $AsyncCtx5 = _emscripten_alloc_async_context(24, sp) | 0; //@line 2463
    FUNCTION_TABLE_vi[$33 & 1023]($27); //@line 2464
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 109; //@line 2467
     HEAP32[$AsyncCtx5 + 4 >> 2] = $2; //@line 2469
     HEAP32[$AsyncCtx5 + 8 >> 2] = $29; //@line 2471
     HEAP32[$AsyncCtx5 + 12 >> 2] = $27; //@line 2473
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 2475
     HEAP32[$AsyncCtx5 + 20 >> 2] = $0; //@line 2477
     sp = STACKTOP; //@line 2478
     STACKTOP = sp; //@line 2479
     return;
    }
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 2481
    $$phi$trans$insert = $2 + 12 | 0; //@line 2482
    $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2483
    if ($$pre10 | 0) {
     $41 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 2487
     $AsyncCtx8 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2488
     FUNCTION_TABLE_vii[$41 & 15]($27, $2); //@line 2489
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 110; //@line 2492
      HEAP32[$AsyncCtx8 + 4 >> 2] = $$phi$trans$insert; //@line 2494
      HEAP32[$AsyncCtx8 + 8 >> 2] = $29; //@line 2496
      HEAP32[$AsyncCtx8 + 12 >> 2] = $2; //@line 2498
      HEAP32[$AsyncCtx8 + 16 >> 2] = $0; //@line 2500
      sp = STACKTOP; //@line 2501
      STACKTOP = sp; //@line 2502
      return;
     }
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 2504
     $$pre$i$i4 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 2505
     HEAP32[$29 >> 2] = $$pre$i$i4; //@line 2506
     if (!$$pre$i$i4) {
      break;
     }
     $49 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 2513
     $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2514
     FUNCTION_TABLE_vi[$49 & 1023]($2); //@line 2515
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 111; //@line 2518
      HEAP32[$AsyncCtx11 + 4 >> 2] = $2; //@line 2520
      HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 2522
      sp = STACKTOP; //@line 2523
      STACKTOP = sp; //@line 2524
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 2526
      break;
     }
    }
   }
   HEAP32[$29 >> 2] = 0; //@line 2531
  }
 } while (0);
 _gpio_irq_set($0 + 28 | 0, 2, 0); //@line 2535
 STACKTOP = sp; //@line 2536
 return;
}
function _ticker_read_us($0) {
 $0 = $0 | 0;
 var $100 = 0, $101 = 0, $102 = 0, $104 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $36 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $67 = 0, $68 = 0, $7 = 0, $74 = 0, $75 = 0, $76 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $93 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6282
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 6283
 _initialize($0); //@line 6284
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 633; //@line 6287
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 6289
  sp = STACKTOP; //@line 6290
  tempRet0 = 0; //@line 6291
  return 0; //@line 6292
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6294
 $2 = $0 + 4 | 0; //@line 6295
 $3 = HEAP32[$2 >> 2] | 0; //@line 6296
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 6299
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6300
 $7 = FUNCTION_TABLE_i[$6 & 7]() | 0; //@line 6301
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 634; //@line 6304
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6306
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 6308
  sp = STACKTOP; //@line 6309
  tempRet0 = 0; //@line 6310
  return 0; //@line 6311
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6313
 if (($7 | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $108 = HEAP32[$2 >> 2] | 0; //@line 6319
  $109 = $108 + 48 | 0; //@line 6320
  $110 = $109; //@line 6321
  $111 = $110; //@line 6322
  $112 = HEAP32[$111 >> 2] | 0; //@line 6323
  $113 = $110 + 4 | 0; //@line 6324
  $114 = $113; //@line 6325
  $115 = HEAP32[$114 >> 2] | 0; //@line 6326
  tempRet0 = $115; //@line 6327
  return $112 | 0; //@line 6328
 }
 $14 = $3 + 32 | 0; //@line 6330
 $19 = $7 - (HEAP32[$14 >> 2] | 0) & HEAP32[$3 + 12 >> 2]; //@line 6335
 HEAP32[$14 >> 2] = $7; //@line 6336
 $21 = HEAP32[$3 + 8 >> 2] | 0; //@line 6338
 do {
  if (($21 | 0) == 1e6) {
   $100 = $19; //@line 6342
   $101 = 0; //@line 6342
  } else {
   $24 = HEAP8[$3 + 57 >> 0] | 0; //@line 6345
   $26 = ___muldi3($19 | 0, 0, 1e6, 0) | 0; //@line 6347
   $27 = tempRet0; //@line 6348
   if (!($24 << 24 >> 24)) {
    $61 = ___udivdi3($26 | 0, $27 | 0, $21 | 0, 0) | 0; //@line 6350
    $62 = tempRet0; //@line 6351
    $63 = ___muldi3($61 | 0, $62 | 0, $21 | 0, 0) | 0; //@line 6352
    $65 = _i64Subtract($26 | 0, $27 | 0, $63 | 0, tempRet0 | 0) | 0; //@line 6354
    $67 = $3 + 40 | 0; //@line 6356
    $68 = $67; //@line 6357
    $74 = _i64Add($65 | 0, tempRet0 | 0, HEAP32[$68 >> 2] | 0, HEAP32[$68 + 4 >> 2] | 0) | 0; //@line 6363
    $75 = tempRet0; //@line 6364
    $76 = $67; //@line 6365
    HEAP32[$76 >> 2] = $74; //@line 6367
    HEAP32[$76 + 4 >> 2] = $75; //@line 6370
    if ($75 >>> 0 < 0 | ($75 | 0) == 0 & $74 >>> 0 < $21 >>> 0) {
     $100 = $61; //@line 6377
     $101 = $62; //@line 6377
     break;
    }
    $85 = _i64Add($61 | 0, $62 | 0, 1, 0) | 0; //@line 6380
    $86 = tempRet0; //@line 6381
    $87 = _i64Subtract($74 | 0, $75 | 0, $21 | 0, 0) | 0; //@line 6382
    $89 = $67; //@line 6384
    HEAP32[$89 >> 2] = $87; //@line 6386
    HEAP32[$89 + 4 >> 2] = tempRet0; //@line 6389
    $100 = $85; //@line 6390
    $101 = $86; //@line 6390
    break;
   } else {
    $28 = $24 & 255; //@line 6393
    $29 = _bitshift64Lshr($26 | 0, $27 | 0, $28 | 0) | 0; //@line 6394
    $30 = tempRet0; //@line 6395
    $31 = _bitshift64Shl($29 | 0, $30 | 0, $28 | 0) | 0; //@line 6396
    $33 = _i64Subtract($26 | 0, $27 | 0, $31 | 0, tempRet0 | 0) | 0; //@line 6398
    $35 = $3 + 40 | 0; //@line 6400
    $36 = $35; //@line 6401
    $42 = _i64Add(HEAP32[$36 >> 2] | 0, HEAP32[$36 + 4 >> 2] | 0, $33 | 0, tempRet0 | 0) | 0; //@line 6407
    $43 = tempRet0; //@line 6408
    $44 = $35; //@line 6409
    HEAP32[$44 >> 2] = $42; //@line 6411
    HEAP32[$44 + 4 >> 2] = $43; //@line 6414
    if ($43 >>> 0 < 0 | ($43 | 0) == 0 & $42 >>> 0 < $21 >>> 0) {
     $100 = $29; //@line 6421
     $101 = $30; //@line 6421
     break;
    }
    $53 = _i64Add($29 | 0, $30 | 0, 1, 0) | 0; //@line 6424
    $54 = tempRet0; //@line 6425
    $55 = _i64Subtract($42 | 0, $43 | 0, $21 | 0, 0) | 0; //@line 6426
    $57 = $35; //@line 6428
    HEAP32[$57 >> 2] = $55; //@line 6430
    HEAP32[$57 + 4 >> 2] = tempRet0; //@line 6433
    $100 = $53; //@line 6434
    $101 = $54; //@line 6434
    break;
   }
  }
 } while (0);
 $93 = $3 + 48 | 0; //@line 6439
 $94 = $93; //@line 6440
 $102 = _i64Add(HEAP32[$94 >> 2] | 0, HEAP32[$94 + 4 >> 2] | 0, $100 | 0, $101 | 0) | 0; //@line 6446
 $104 = $93; //@line 6448
 HEAP32[$104 >> 2] = $102; //@line 6450
 HEAP32[$104 + 4 >> 2] = tempRet0; //@line 6453
 $108 = HEAP32[$2 >> 2] | 0; //@line 6454
 $109 = $108 + 48 | 0; //@line 6455
 $110 = $109; //@line 6456
 $111 = $110; //@line 6457
 $112 = HEAP32[$111 >> 2] | 0; //@line 6458
 $113 = $110 + 4 | 0; //@line 6459
 $114 = $113; //@line 6460
 $115 = HEAP32[$114 >> 2] | 0; //@line 6461
 tempRet0 = $115; //@line 6462
 return $112 | 0; //@line 6463
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29090
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29092
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29094
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29096
 $8 = $2 + 1240 | 0; //@line 29099
 $10 = ((HEAP32[___async_retval >> 2] | 0) * 1e3 | 0) + 3e3 | 0; //@line 29101
 $11 = $2 + 1280 | 0; //@line 29102
 do {
  if (($11 | 0) != ($4 | 0)) {
   $13 = $2 + 1292 | 0; //@line 29106
   $14 = HEAP32[$13 >> 2] | 0; //@line 29107
   if ($14 | 0) {
    $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 29111
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 29112
    FUNCTION_TABLE_vi[$17 & 1023]($11); //@line 29113
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 93; //@line 29116
     $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 29117
     HEAP32[$18 >> 2] = $6; //@line 29118
     $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 29119
     HEAP32[$19 >> 2] = $13; //@line 29120
     $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 29121
     HEAP32[$20 >> 2] = $11; //@line 29122
     $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 29123
     HEAP32[$21 >> 2] = $4; //@line 29124
     $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 29125
     HEAP32[$22 >> 2] = $8; //@line 29126
     $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 29127
     $24 = $23; //@line 29128
     $25 = $24; //@line 29129
     HEAP32[$25 >> 2] = $10; //@line 29130
     $26 = $24 + 4 | 0; //@line 29131
     $27 = $26; //@line 29132
     HEAP32[$27 >> 2] = 0; //@line 29133
     sp = STACKTOP; //@line 29134
     return;
    }
    ___async_unwind = 0; //@line 29137
    HEAP32[$ReallocAsyncCtx2 >> 2] = 93; //@line 29138
    $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 29139
    HEAP32[$18 >> 2] = $6; //@line 29140
    $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 29141
    HEAP32[$19 >> 2] = $13; //@line 29142
    $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 29143
    HEAP32[$20 >> 2] = $11; //@line 29144
    $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 29145
    HEAP32[$21 >> 2] = $4; //@line 29146
    $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 29147
    HEAP32[$22 >> 2] = $8; //@line 29148
    $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 29149
    $24 = $23; //@line 29150
    $25 = $24; //@line 29151
    HEAP32[$25 >> 2] = $10; //@line 29152
    $26 = $24 + 4 | 0; //@line 29153
    $27 = $26; //@line 29154
    HEAP32[$27 >> 2] = 0; //@line 29155
    sp = STACKTOP; //@line 29156
    return;
   }
   $28 = HEAP32[$6 >> 2] | 0; //@line 29159
   if (!$28) {
    HEAP32[$13 >> 2] = 0; //@line 29162
    break;
   }
   $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 29166
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 29167
   FUNCTION_TABLE_vii[$31 & 15]($11, $4); //@line 29168
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 94; //@line 29171
    $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 29172
    HEAP32[$32 >> 2] = $6; //@line 29173
    $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 29174
    HEAP32[$33 >> 2] = $13; //@line 29175
    $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 29176
    HEAP32[$34 >> 2] = $8; //@line 29177
    $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 29178
    $36 = $35; //@line 29179
    $37 = $36; //@line 29180
    HEAP32[$37 >> 2] = $10; //@line 29181
    $38 = $36 + 4 | 0; //@line 29182
    $39 = $38; //@line 29183
    HEAP32[$39 >> 2] = 0; //@line 29184
    $40 = $ReallocAsyncCtx3 + 24 | 0; //@line 29185
    HEAP32[$40 >> 2] = $4; //@line 29186
    sp = STACKTOP; //@line 29187
    return;
   }
   ___async_unwind = 0; //@line 29190
   HEAP32[$ReallocAsyncCtx3 >> 2] = 94; //@line 29191
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 29192
   HEAP32[$32 >> 2] = $6; //@line 29193
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 29194
   HEAP32[$33 >> 2] = $13; //@line 29195
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 29196
   HEAP32[$34 >> 2] = $8; //@line 29197
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 29198
   $36 = $35; //@line 29199
   $37 = $36; //@line 29200
   HEAP32[$37 >> 2] = $10; //@line 29201
   $38 = $36 + 4 | 0; //@line 29202
   $39 = $38; //@line 29203
   HEAP32[$39 >> 2] = 0; //@line 29204
   $40 = $ReallocAsyncCtx3 + 24 | 0; //@line 29205
   HEAP32[$40 >> 2] = $4; //@line 29206
   sp = STACKTOP; //@line 29207
   return;
  }
 } while (0);
 __ZN4mbed6Ticker5setupEy($8, $10, 0); //@line 29211
 $41 = HEAP32[$6 >> 2] | 0; //@line 29212
 if (!$41) {
  return;
 }
 $44 = HEAP32[$41 + 8 >> 2] | 0; //@line 29218
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 29219
 FUNCTION_TABLE_vi[$44 & 1023]($4); //@line 29220
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 29223
  sp = STACKTOP; //@line 29224
  return;
 }
 ___async_unwind = 0; //@line 29227
 HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 29228
 sp = STACKTOP; //@line 29229
 return;
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25274
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25276
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25278
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25280
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25285
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25287
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25289
 if (!(HEAP8[$0 + 16 >> 0] & 1)) {
  $16 = (HEAP32[$2 >> 2] | 0) + -1 | 0; //@line 25292
  HEAP32[$2 >> 2] = $16; //@line 25293
  if (!$16) {
   $19 = HEAP32[$2 + 24 >> 2] | 0; //@line 25297
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 25298
   FUNCTION_TABLE_vi[$19 & 1023]($6); //@line 25299
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 675; //@line 25302
    $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 25303
    HEAP32[$20 >> 2] = $2; //@line 25304
    $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 25305
    HEAP32[$21 >> 2] = $4; //@line 25306
    $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 25307
    HEAP32[$22 >> 2] = $10; //@line 25308
    $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 25309
    HEAP32[$23 >> 2] = $12; //@line 25310
    $24 = $ReallocAsyncCtx2 + 20 | 0; //@line 25311
    HEAP32[$24 >> 2] = $14; //@line 25312
    sp = STACKTOP; //@line 25313
    return;
   }
   ___async_unwind = 0; //@line 25316
   HEAP32[$ReallocAsyncCtx2 >> 2] = 675; //@line 25317
   $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 25318
   HEAP32[$20 >> 2] = $2; //@line 25319
   $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 25320
   HEAP32[$21 >> 2] = $4; //@line 25321
   $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 25322
   HEAP32[$22 >> 2] = $10; //@line 25323
   $23 = $ReallocAsyncCtx2 + 16 | 0; //@line 25324
   HEAP32[$23 >> 2] = $12; //@line 25325
   $24 = $ReallocAsyncCtx2 + 20 | 0; //@line 25326
   HEAP32[$24 >> 2] = $14; //@line 25327
   sp = STACKTOP; //@line 25328
   return;
  }
 }
 $26 = $4 + 4 | 0; //@line 25333
 HEAP32[$26 >> 2] = 0; //@line 25335
 HEAP32[$26 + 4 >> 2] = 0; //@line 25338
 HEAP32[$4 >> 2] = 677; //@line 25339
 $30 = $4 + 12 | 0; //@line 25340
 HEAP32[$30 >> 2] = 10276; //@line 25341
 $31 = HEAP32[5919] | 0; //@line 25342
 if (!$31) {
  $41 = HEAP32[2570] | 0; //@line 25346
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 25347
  FUNCTION_TABLE_vii[$41 & 15](23664, $4); //@line 25348
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 25351
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 25352
   HEAP32[$42 >> 2] = $4; //@line 25353
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 25354
   HEAP32[$43 >> 2] = $30; //@line 25355
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 25356
   HEAP32[$44 >> 2] = $10; //@line 25357
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 25358
   HEAP32[$45 >> 2] = $12; //@line 25359
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 25360
   HEAP32[$46 >> 2] = $14; //@line 25361
   sp = STACKTOP; //@line 25362
   return;
  }
  ___async_unwind = 0; //@line 25365
  HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 25366
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 25367
  HEAP32[$42 >> 2] = $4; //@line 25368
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 25369
  HEAP32[$43 >> 2] = $30; //@line 25370
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 25371
  HEAP32[$44 >> 2] = $10; //@line 25372
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 25373
  HEAP32[$45 >> 2] = $12; //@line 25374
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 25375
  HEAP32[$46 >> 2] = $14; //@line 25376
  sp = STACKTOP; //@line 25377
  return;
 } else {
  $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 25381
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 25382
  FUNCTION_TABLE_vi[$34 & 1023](23664); //@line 25383
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 25386
   $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 25387
   HEAP32[$35 >> 2] = $4; //@line 25388
   $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 25389
   HEAP32[$36 >> 2] = $30; //@line 25390
   $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 25391
   HEAP32[$37 >> 2] = $10; //@line 25392
   $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 25393
   HEAP32[$38 >> 2] = $12; //@line 25394
   $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 25395
   HEAP32[$39 >> 2] = $14; //@line 25396
   sp = STACKTOP; //@line 25397
   return;
  }
  ___async_unwind = 0; //@line 25400
  HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 25401
  $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 25402
  HEAP32[$35 >> 2] = $4; //@line 25403
  $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 25404
  HEAP32[$36 >> 2] = $30; //@line 25405
  $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 25406
  HEAP32[$37 >> 2] = $10; //@line 25407
  $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 25408
  HEAP32[$38 >> 2] = $12; //@line 25409
  $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 25410
  HEAP32[$39 >> 2] = $14; //@line 25411
  sp = STACKTOP; //@line 25412
  return;
 }
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $$0 = 0, $33 = 0, $36 = 0, $37 = 0, $39 = 0, $48 = 0, $55 = 0, $62 = 0, $67 = 0, $68 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18995
 HEAP8[$0 + 5 >> 0] = $6; //@line 18997
 HEAP8[$0 + 6 >> 0] = $5; //@line 19000
 HEAP8[$0 + 7 >> 0] = $5 >>> 8; //@line 19004
 HEAP8[$0 + 8 >> 0] = $5 >>> 16; //@line 19008
 HEAP8[$0 + 9 >> 0] = $5 >>> 24; //@line 19012
 HEAP8[$0 + 10 >> 0] = $7; //@line 19015
 HEAP8[$0 + 11 >> 0] = $7 >>> 8; //@line 19019
 HEAP8[$0 + 12 >> 0] = $7 >>> 16; //@line 19023
 HEAP8[$0 + 13 >> 0] = $7 >>> 24; //@line 19027
 $33 = $2 & 255; //@line 19029
 HEAP8[$0 + 15 >> 0] = $2; //@line 19032
 $36 = $0 + 344 | 0; //@line 19033
 _mbedtls_cipher_init($36); //@line 19034
 $37 = _mbedtls_cipher_info_from_type(2) | 0; //@line 19035
 if (!$37) {
  $$0 = -24960; //@line 19038
 } else {
  $AsyncCtx15 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19040
  $39 = _mbedtls_cipher_setup($36, $37) | 0; //@line 19041
  if (___async) {
   HEAP32[$AsyncCtx15 >> 2] = 496; //@line 19044
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 19046
   HEAP32[$AsyncCtx15 + 8 >> 2] = $8; //@line 19048
   HEAP32[$AsyncCtx15 + 12 >> 2] = $36; //@line 19050
   HEAP32[$AsyncCtx15 + 16 >> 2] = $1; //@line 19052
   HEAP32[$AsyncCtx15 + 20 >> 2] = $33; //@line 19054
   HEAP32[$AsyncCtx15 + 24 >> 2] = $3; //@line 19056
   HEAP32[$AsyncCtx15 + 28 >> 2] = $4; //@line 19058
   sp = STACKTOP; //@line 19059
   return 0; //@line 19060
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19062
  if (!$39) {
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 19065
   $48 = _mbedtls_cipher_cmac_starts($36, $3, $4) | 0; //@line 19066
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 497; //@line 19069
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 19071
    HEAP32[$AsyncCtx + 8 >> 2] = $36; //@line 19073
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 19075
    HEAP32[$AsyncCtx + 16 >> 2] = $33; //@line 19077
    HEAP32[$AsyncCtx + 20 >> 2] = $8; //@line 19079
    sp = STACKTOP; //@line 19080
    return 0; //@line 19081
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 19083
   if (!$48) {
    $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 19086
    $55 = _mbedtls_cipher_cmac_update($36, $0, 16) | 0; //@line 19087
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 498; //@line 19090
     HEAP32[$AsyncCtx11 + 4 >> 2] = $36; //@line 19092
     HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 19094
     HEAP32[$AsyncCtx11 + 12 >> 2] = $33; //@line 19096
     HEAP32[$AsyncCtx11 + 16 >> 2] = $0; //@line 19098
     HEAP32[$AsyncCtx11 + 20 >> 2] = $8; //@line 19100
     sp = STACKTOP; //@line 19101
     return 0; //@line 19102
    }
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19104
    if (!$55) {
     $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19107
     $62 = _mbedtls_cipher_cmac_update($36, $1, $33) | 0; //@line 19108
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 499; //@line 19111
      HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 19113
      HEAP32[$AsyncCtx7 + 8 >> 2] = $36; //@line 19115
      HEAP32[$AsyncCtx7 + 12 >> 2] = $8; //@line 19117
      sp = STACKTOP; //@line 19118
      return 0; //@line 19119
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19121
     if (!$62) {
      $67 = $0 + 16 | 0; //@line 19124
      $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19125
      $68 = _mbedtls_cipher_cmac_finish($36, $67) | 0; //@line 19126
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 500; //@line 19129
       HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 19131
       HEAP32[$AsyncCtx3 + 8 >> 2] = $67; //@line 19133
       HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 19135
       HEAP32[$AsyncCtx3 + 16 >> 2] = $36; //@line 19137
       sp = STACKTOP; //@line 19138
       return 0; //@line 19139
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19141
      if (!$68) {
       HEAP32[$8 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$67 >> 0] | 0); //@line 19161
       $$0 = 0; //@line 19162
      } else {
       $$0 = $68; //@line 19164
      }
     } else {
      $$0 = $62; //@line 19167
     }
    } else {
     $$0 = $55; //@line 19170
    }
   } else {
    $$0 = $48; //@line 19173
   }
  } else {
   $$0 = $39; //@line 19176
  }
 }
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19179
 _mbedtls_cipher_free($36); //@line 19180
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 501; //@line 19183
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$0; //@line 19185
  sp = STACKTOP; //@line 19186
  return 0; //@line 19187
 } else {
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 19189
  return $$0 | 0; //@line 19190
 }
 return 0; //@line 19192
}
function __ZL18lora_event_handler11lora_events($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $1 = 0, $10 = 0, $15 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7885
 STACKTOP = STACKTOP + 96 | 0; //@line 7886
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 7886
 $vararg_buffer11 = sp + 32 | 0; //@line 7887
 $vararg_buffer8 = sp + 24 | 0; //@line 7888
 $vararg_buffer4 = sp + 16 | 0; //@line 7889
 $vararg_buffer1 = sp + 8 | 0; //@line 7890
 $vararg_buffer = sp; //@line 7891
 $1 = sp + 36 | 0; //@line 7892
 switch ($0 | 0) {
 case 0:
  {
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7895
   _puts(15303) | 0; //@line 7896
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 689; //@line 7899
    sp = STACKTOP; //@line 7900
    STACKTOP = sp; //@line 7901
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 7903
   STACKTOP = sp; //@line 7904
   return;
  }
 case 1:
  {
   __ZN6events10EventQueue14break_dispatchEv(20280); //@line 7908
   $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7909
   _puts(15327) | 0; //@line 7910
   if (___async) {
    HEAP32[$AsyncCtx27 >> 2] = 690; //@line 7913
    sp = STACKTOP; //@line 7914
    STACKTOP = sp; //@line 7915
    return;
   }
   _emscripten_free_async_context($AsyncCtx27 | 0); //@line 7917
   STACKTOP = sp; //@line 7918
   return;
  }
 case 2:
  {
   $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7922
   _puts(15353) | 0; //@line 7923
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 691; //@line 7926
    sp = STACKTOP; //@line 7927
    STACKTOP = sp; //@line 7928
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 7930
   STACKTOP = sp; //@line 7931
   return;
  }
 case 6:
 case 5:
 case 4:
 case 3:
  {
   HEAP32[$vararg_buffer >> 2] = $0; //@line 7935
   _printf(15384, $vararg_buffer) | 0; //@line 7936
   STACKTOP = sp; //@line 7937
   return;
  }
 case 7:
  {
   $AsyncCtx19 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7941
   _puts(15421) | 0; //@line 7942
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 692; //@line 7945
    HEAP32[$AsyncCtx19 + 4 >> 2] = $1; //@line 7947
    HEAP32[$AsyncCtx19 + 8 >> 2] = $vararg_buffer1; //@line 7949
    HEAP32[$AsyncCtx19 + 12 >> 2] = $vararg_buffer1; //@line 7951
    HEAP32[$AsyncCtx19 + 16 >> 2] = $vararg_buffer4; //@line 7953
    HEAP32[$AsyncCtx19 + 20 >> 2] = $vararg_buffer4; //@line 7955
    HEAP32[$AsyncCtx19 + 24 >> 2] = $vararg_buffer8; //@line 7957
    HEAP32[$AsyncCtx19 + 28 >> 2] = $vararg_buffer8; //@line 7959
    sp = STACKTOP; //@line 7960
    STACKTOP = sp; //@line 7961
    return;
   }
   _emscripten_free_async_context($AsyncCtx19 | 0); //@line 7963
   dest = $1; //@line 7964
   stop = dest + 50 | 0; //@line 7964
   do {
    HEAP8[dest >> 0] = 0; //@line 7964
    dest = dest + 1 | 0; //@line 7964
   } while ((dest | 0) < (stop | 0));
   $9 = __ZN16LoRaWANInterface7receiveEhPhti(20484, 15, $1, 50, 3) | 0; //@line 7965
   $10 = $9 << 16 >> 16; //@line 7966
   do {
    if ($9 << 16 >> 16 < 0) {
     HEAP32[$vararg_buffer1 >> 2] = $10; //@line 7970
     _printf(15458, $vararg_buffer1) | 0; //@line 7971
    } else {
     HEAP32[$vararg_buffer4 >> 2] = 15; //@line 7973
     HEAP32[$vararg_buffer4 + 4 >> 2] = $10; //@line 7975
     _printf(15485, $vararg_buffer4) | 0; //@line 7976
     if ($9 << 16 >> 16) {
      $$07$i = 0; //@line 7979
      $15 = 0; //@line 7979
      do {
       HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$1 + $15 >> 0]; //@line 7984
       _printf(15524, $vararg_buffer8) | 0; //@line 7985
       $$07$i = $$07$i + 1 << 24 >> 24; //@line 7986
       $15 = $$07$i & 255; //@line 7987
      } while (($15 | 0) < ($10 | 0));
     }
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7996
     _putchar(10) | 0; //@line 7997
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 693; //@line 8000
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 8002
      sp = STACKTOP; //@line 8003
      STACKTOP = sp; //@line 8004
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 8006
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 8011
   return;
  }
 case 9:
 case 8:
  {
   HEAP32[$vararg_buffer11 >> 2] = $0; //@line 8015
   _printf(15530, $vararg_buffer11) | 0; //@line 8016
   STACKTOP = sp; //@line 8017
   return;
  }
 case 10:
  {
   $AsyncCtx15 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8021
   _puts(15562) | 0; //@line 8022
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 694; //@line 8025
    sp = STACKTOP; //@line 8026
    STACKTOP = sp; //@line 8027
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8029
   STACKTOP = sp; //@line 8030
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 8034
   return;
  }
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18264
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18266
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18268
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18270
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 18272
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 18274
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 18276
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 18278
 $$pre$i = HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0; //@line 18281
 $17 = $2 + 12 | 0; //@line 18282
 HEAP32[$17 >> 2] = $$pre$i; //@line 18283
 if (!$$pre$i) {
  $30 = $4 + 12 | 0; //@line 18286
  HEAP32[$30 >> 2] = 0; //@line 18287
  $31 = $4 + 16 | 0; //@line 18288
  HEAP32[$31 >> 2] = $6; //@line 18289
  HEAP16[$4 + 20 >> 1] = $8; //@line 18291
  HEAP16[$4 + 22 >> 1] = $10; //@line 18293
  HEAP8[$4 + 24 >> 0] = $12; //@line 18295
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 18296
  $35 = _equeue_alloc($14, 28) | 0; //@line 18297
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 300; //@line 18300
   $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 18301
   HEAP32[$36 >> 2] = $2; //@line 18302
   $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 18303
   HEAP32[$37 >> 2] = $30; //@line 18304
   $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 18305
   HEAP32[$38 >> 2] = $31; //@line 18306
   $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 18307
   HEAP32[$39 >> 2] = $14; //@line 18308
   $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 18309
   HEAP32[$40 >> 2] = $30; //@line 18310
   $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 18311
   HEAP32[$41 >> 2] = $17; //@line 18312
   $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 18313
   HEAP32[$42 >> 2] = $4; //@line 18314
   sp = STACKTOP; //@line 18315
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 18319
  ___async_unwind = 0; //@line 18320
  HEAP32[$ReallocAsyncCtx7 >> 2] = 300; //@line 18321
  $36 = $ReallocAsyncCtx7 + 4 | 0; //@line 18322
  HEAP32[$36 >> 2] = $2; //@line 18323
  $37 = $ReallocAsyncCtx7 + 8 | 0; //@line 18324
  HEAP32[$37 >> 2] = $30; //@line 18325
  $38 = $ReallocAsyncCtx7 + 12 | 0; //@line 18326
  HEAP32[$38 >> 2] = $31; //@line 18327
  $39 = $ReallocAsyncCtx7 + 16 | 0; //@line 18328
  HEAP32[$39 >> 2] = $14; //@line 18329
  $40 = $ReallocAsyncCtx7 + 20 | 0; //@line 18330
  HEAP32[$40 >> 2] = $30; //@line 18331
  $41 = $ReallocAsyncCtx7 + 24 | 0; //@line 18332
  HEAP32[$41 >> 2] = $17; //@line 18333
  $42 = $ReallocAsyncCtx7 + 28 | 0; //@line 18334
  HEAP32[$42 >> 2] = $4; //@line 18335
  sp = STACKTOP; //@line 18336
  return;
 } else {
  $20 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 18341
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 18342
  FUNCTION_TABLE_vii[$20 & 15]($4, $2); //@line 18343
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 299; //@line 18346
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 18347
   HEAP32[$21 >> 2] = $2; //@line 18348
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 18349
   HEAP32[$22 >> 2] = $17; //@line 18350
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 18351
   HEAP32[$23 >> 2] = $4; //@line 18352
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 18353
   HEAP32[$24 >> 2] = $17; //@line 18354
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 18355
   HEAP32[$25 >> 2] = $6; //@line 18356
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 18357
   HEAP16[$26 >> 1] = $8; //@line 18358
   $27 = $ReallocAsyncCtx2 + 26 | 0; //@line 18359
   HEAP16[$27 >> 1] = $10; //@line 18360
   $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 18361
   HEAP8[$28 >> 0] = $12; //@line 18362
   $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 18363
   HEAP32[$29 >> 2] = $14; //@line 18364
   sp = STACKTOP; //@line 18365
   return;
  }
  ___async_unwind = 0; //@line 18368
  HEAP32[$ReallocAsyncCtx2 >> 2] = 299; //@line 18369
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 18370
  HEAP32[$21 >> 2] = $2; //@line 18371
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 18372
  HEAP32[$22 >> 2] = $17; //@line 18373
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 18374
  HEAP32[$23 >> 2] = $4; //@line 18375
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 18376
  HEAP32[$24 >> 2] = $17; //@line 18377
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 18378
  HEAP32[$25 >> 2] = $6; //@line 18379
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 18380
  HEAP16[$26 >> 1] = $8; //@line 18381
  $27 = $ReallocAsyncCtx2 + 26 | 0; //@line 18382
  HEAP16[$27 >> 1] = $10; //@line 18383
  $28 = $ReallocAsyncCtx2 + 28 | 0; //@line 18384
  HEAP8[$28 >> 0] = $12; //@line 18385
  $29 = $ReallocAsyncCtx2 + 32 | 0; //@line 18386
  HEAP32[$29 >> 2] = $14; //@line 18387
  sp = STACKTOP; //@line 18388
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $32 = 0, $39 = 0, $42 = 0, $47 = 0, $54 = 0, $55 = 0, $58 = 0, $65 = 0, $68 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1426
 STACKTOP = STACKTOP + 16 | 0; //@line 1427
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1427
 $1 = sp; //@line 1428
 $2 = $0 + 688 | 0; //@line 1429
 if ((HEAP8[$2 >> 0] | 0) != 1) {
  STACKTOP = sp; //@line 1433
  return;
 }
 do {
  if (!(HEAP8[$0 + 689 >> 0] | 0)) {
   HEAP8[$0 + 732 >> 0] = 0; //@line 1441
   HEAP8[$0 + 733 >> 0] = 0; //@line 1443
   HEAP16[$0 + 744 >> 1] = 0; //@line 1445
   HEAP16[$0 + 742 >> 1] = 0; //@line 1447
   if (!(HEAP8[$0 + 722 >> 0] | 0)) {
    HEAP8[$2 >> 0] = 0; //@line 1452
    $14 = $0 + 1176 | 0; //@line 1453
    $15 = $1 + 12 | 0; //@line 1454
    HEAP32[$1 >> 2] = 55; //@line 1455
    HEAP32[$1 + 4 >> 2] = 0; //@line 1457
    HEAP32[$1 + 8 >> 2] = $0; //@line 1459
    HEAP32[$15 >> 2] = 584; //@line 1460
    $18 = ___muldi3(HEAP32[$0 + 728 >> 2] | 0, 0, 1e3, 0) | 0; //@line 1463
    $19 = tempRet0; //@line 1464
    $20 = $0 + 1216 | 0; //@line 1465
    if (($20 | 0) != ($1 | 0)) {
     $22 = $0 + 1228 | 0; //@line 1468
     $23 = HEAP32[$22 >> 2] | 0; //@line 1469
     do {
      if ($23 | 0) {
       $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 1474
       $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 1475
       FUNCTION_TABLE_vi[$26 & 1023]($20); //@line 1476
       if (___async) {
        HEAP32[$AsyncCtx >> 2] = 86; //@line 1479
        HEAP32[$AsyncCtx + 4 >> 2] = $15; //@line 1481
        HEAP32[$AsyncCtx + 8 >> 2] = $20; //@line 1483
        HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 1485
        HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 1487
        $32 = $AsyncCtx + 24 | 0; //@line 1489
        HEAP32[$32 >> 2] = $18; //@line 1491
        HEAP32[$32 + 4 >> 2] = $19; //@line 1494
        HEAP32[$AsyncCtx + 32 >> 2] = $22; //@line 1496
        HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 1498
        HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 1500
        sp = STACKTOP; //@line 1501
        STACKTOP = sp; //@line 1502
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx | 0); //@line 1504
        break;
       }
      }
     } while (0);
     $39 = HEAP32[$15 >> 2] | 0; //@line 1509
     do {
      if (!$39) {
       $54 = 0; //@line 1513
      } else {
       $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 1516
       $AsyncCtx2 = _emscripten_alloc_async_context(40, sp) | 0; //@line 1517
       FUNCTION_TABLE_vii[$42 & 15]($20, $1); //@line 1518
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 87; //@line 1521
        HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 1523
        HEAP32[$AsyncCtx2 + 8 >> 2] = $22; //@line 1525
        HEAP32[$AsyncCtx2 + 12 >> 2] = $14; //@line 1527
        $47 = $AsyncCtx2 + 16 | 0; //@line 1529
        HEAP32[$47 >> 2] = $18; //@line 1531
        HEAP32[$47 + 4 >> 2] = $19; //@line 1534
        HEAP32[$AsyncCtx2 + 24 >> 2] = $0; //@line 1536
        HEAP32[$AsyncCtx2 + 28 >> 2] = $1; //@line 1538
        HEAP32[$AsyncCtx2 + 32 >> 2] = $2; //@line 1540
        sp = STACKTOP; //@line 1541
        STACKTOP = sp; //@line 1542
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1544
        $54 = HEAP32[$15 >> 2] | 0; //@line 1546
        break;
       }
      }
     } while (0);
     HEAP32[$22 >> 2] = $54; //@line 1551
    }
    __ZN4mbed6Ticker5setupEy($14, $18, $19); //@line 1553
    $55 = HEAP32[$15 >> 2] | 0; //@line 1554
    if ($55 | 0) {
     $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 1558
     $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 1559
     FUNCTION_TABLE_vi[$58 & 1023]($1); //@line 1560
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 88; //@line 1563
      HEAP32[$AsyncCtx6 + 4 >> 2] = $0; //@line 1565
      HEAP32[$AsyncCtx6 + 8 >> 2] = $2; //@line 1567
      sp = STACKTOP; //@line 1568
      STACKTOP = sp; //@line 1569
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 1571
      break;
     }
    }
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 770 >> 0] | 0)) {
  HEAP8[$2 >> 0] = 0; //@line 1582
 }
 $65 = HEAP32[$0 + 788 >> 2] | 0; //@line 1585
 if (!$65) {
  STACKTOP = sp; //@line 1588
  return;
 }
 $68 = HEAP32[$65 + 60 >> 2] | 0; //@line 1591
 if (!$68) {
  STACKTOP = sp; //@line 1594
  return;
 }
 $71 = HEAP32[$68 >> 2] | 0; //@line 1597
 $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1598
 FUNCTION_TABLE_vi[$71 & 1023]($65 + 48 | 0); //@line 1599
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 89; //@line 1602
  sp = STACKTOP; //@line 1603
  STACKTOP = sp; //@line 1604
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 1606
 STACKTOP = sp; //@line 1607
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_283($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19670
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19672
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19674
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19676
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19678
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19680
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19682
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19684
 if ($AsyncRetVal | 0) {
  $15 = HEAP32[$10 >> 2] | 0; //@line 19687
  if (!$15) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 19691
   _equeue_event_delay($AsyncRetVal, $4); //@line 19692
   _equeue_event_dtor($AsyncRetVal, 283); //@line 19693
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 19694
   $27 = _equeue_post($6, 284, $AsyncRetVal) | 0; //@line 19695
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 566; //@line 19698
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 19699
    HEAP32[$28 >> 2] = $8; //@line 19700
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 19701
    HEAP32[$29 >> 2] = $10; //@line 19702
    $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 19703
    HEAP32[$30 >> 2] = $12; //@line 19704
    sp = STACKTOP; //@line 19705
    return;
   }
   HEAP32[___async_retval >> 2] = $27; //@line 19709
   ___async_unwind = 0; //@line 19710
   HEAP32[$ReallocAsyncCtx4 >> 2] = 566; //@line 19711
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 19712
   HEAP32[$28 >> 2] = $8; //@line 19713
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 19714
   HEAP32[$29 >> 2] = $10; //@line 19715
   $30 = $ReallocAsyncCtx4 + 12 | 0; //@line 19716
   HEAP32[$30 >> 2] = $12; //@line 19717
   sp = STACKTOP; //@line 19718
   return;
  } else {
   $18 = HEAP32[$15 + 4 >> 2] | 0; //@line 19722
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 19723
   FUNCTION_TABLE_vii[$18 & 15]($AsyncRetVal, $12); //@line 19724
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 565; //@line 19727
    $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 19728
    HEAP32[$19 >> 2] = $2; //@line 19729
    $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 19730
    HEAP32[$20 >> 2] = $AsyncRetVal; //@line 19731
    $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 19732
    HEAP32[$21 >> 2] = $4; //@line 19733
    $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 19734
    HEAP32[$22 >> 2] = $6; //@line 19735
    $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 19736
    HEAP32[$23 >> 2] = $8; //@line 19737
    $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 19738
    HEAP32[$24 >> 2] = $10; //@line 19739
    $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 19740
    HEAP32[$25 >> 2] = $12; //@line 19741
    sp = STACKTOP; //@line 19742
    return;
   }
   ___async_unwind = 0; //@line 19745
   HEAP32[$ReallocAsyncCtx2 >> 2] = 565; //@line 19746
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 19747
   HEAP32[$19 >> 2] = $2; //@line 19748
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 19749
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 19750
   $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 19751
   HEAP32[$21 >> 2] = $4; //@line 19752
   $22 = $ReallocAsyncCtx2 + 16 | 0; //@line 19753
   HEAP32[$22 >> 2] = $6; //@line 19754
   $23 = $ReallocAsyncCtx2 + 20 | 0; //@line 19755
   HEAP32[$23 >> 2] = $8; //@line 19756
   $24 = $ReallocAsyncCtx2 + 24 | 0; //@line 19757
   HEAP32[$24 >> 2] = $10; //@line 19758
   $25 = $ReallocAsyncCtx2 + 28 | 0; //@line 19759
   HEAP32[$25 >> 2] = $12; //@line 19760
   sp = STACKTOP; //@line 19761
   return;
  }
 }
 $32 = $8 + 16 | 0; //@line 19765
 HEAP32[$32 >> 2] = 0; //@line 19766
 $33 = HEAP32[$10 >> 2] | 0; //@line 19767
 if ($33 | 0) {
  $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 19771
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 19772
  FUNCTION_TABLE_vi[$36 & 1023]($12); //@line 19773
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 567; //@line 19776
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 19777
   HEAP32[$37 >> 2] = $32; //@line 19778
   sp = STACKTOP; //@line 19779
   return;
  }
  ___async_unwind = 0; //@line 19782
  HEAP32[$ReallocAsyncCtx3 >> 2] = 567; //@line 19783
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 19784
  HEAP32[$37 >> 2] = $32; //@line 19785
  sp = STACKTOP; //@line 19786
  return;
 }
 if (0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 19793
 _mbed_assert_internal(13476, 13494, 57); //@line 19794
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 19797
  sp = STACKTOP; //@line 19798
  return;
 }
 ___async_unwind = 0; //@line 19801
 HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 19802
 sp = STACKTOP; //@line 19803
 return;
}
function _mbed_vtracef__async_cb_198($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $24 = 0, $28 = 0, $32 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 14
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 30
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 32
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 36
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 40
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 44
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 48
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 50
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 52
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 56
 HEAP32[$12 >> 2] = HEAP32[___async_retval >> 2]; //@line 59
 $50 = _snprintf($14, $16, 11798, $12) | 0; //@line 60
 $$10 = ($50 | 0) >= ($16 | 0) ? 0 : $50; //@line 62
 $53 = $14 + $$10 | 0; //@line 64
 $54 = $16 - $$10 | 0; //@line 65
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 69
   $$3169 = $53; //@line 69
   label = 4; //@line 70
  }
 } else {
  $$3147168 = $16; //@line 73
  $$3169 = $14; //@line 73
  label = 4; //@line 74
 }
 if ((label | 0) == 4) {
  $56 = $48 + -2 | 0; //@line 77
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$44 >> 2] = $24; //@line 83
    $$5156 = _snprintf($$3169, $$3147168, 11801, $44) | 0; //@line 85
    break;
   }
  case 1:
   {
    HEAP32[$28 >> 2] = $24; //@line 89
    $$5156 = _snprintf($$3169, $$3147168, 11816, $28) | 0; //@line 91
    break;
   }
  case 3:
   {
    HEAP32[$22 >> 2] = $24; //@line 95
    $$5156 = _snprintf($$3169, $$3147168, 11831, $22) | 0; //@line 97
    break;
   }
  case 7:
   {
    HEAP32[$36 >> 2] = $24; //@line 101
    $$5156 = _snprintf($$3169, $$3147168, 11846, $36) | 0; //@line 103
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 11861, $32) | 0; //@line 108
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 112
  $67 = $$3169 + $$5156$ | 0; //@line 114
  $68 = $$3147168 - $$5156$ | 0; //@line 115
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 119
   $70 = _vsnprintf($67, $68, $40, $42) | 0; //@line 120
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 123
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 124
    HEAP32[$71 >> 2] = $68; //@line 125
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 126
    HEAP32[$72 >> 2] = $67; //@line 127
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 128
    HEAP32[$73 >> 2] = $2; //@line 129
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 130
    HEAP32[$74 >> 2] = $4; //@line 131
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 132
    $$expand_i1_val = $6 & 1; //@line 133
    HEAP8[$75 >> 0] = $$expand_i1_val; //@line 134
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 135
    HEAP32[$76 >> 2] = $8; //@line 136
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 137
    HEAP32[$77 >> 2] = $10; //@line 138
    sp = STACKTOP; //@line 139
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 143
   ___async_unwind = 0; //@line 144
   HEAP32[$ReallocAsyncCtx10 >> 2] = 148; //@line 145
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 146
   HEAP32[$71 >> 2] = $68; //@line 147
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 148
   HEAP32[$72 >> 2] = $67; //@line 149
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 150
   HEAP32[$73 >> 2] = $2; //@line 151
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 152
   HEAP32[$74 >> 2] = $4; //@line 153
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 154
   $$expand_i1_val = $6 & 1; //@line 155
   HEAP8[$75 >> 0] = $$expand_i1_val; //@line 156
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 157
   HEAP32[$76 >> 2] = $8; //@line 158
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 159
   HEAP32[$77 >> 2] = $10; //@line 160
   sp = STACKTOP; //@line 161
   return;
  }
 }
 $79 = HEAP32[174] | 0; //@line 165
 $80 = HEAP32[167] | 0; //@line 166
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 167
 FUNCTION_TABLE_vi[$79 & 1023]($80); //@line 168
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 171
  sp = STACKTOP; //@line 172
  return;
 }
 ___async_unwind = 0; //@line 175
 HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 176
 sp = STACKTOP; //@line 177
 return;
}
function _ticker_read_us__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $31 = 0, $32 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $61 = 0, $63 = 0, $64 = 0, $70 = 0, $71 = 0, $72 = 0, $81 = 0, $82 = 0, $83 = 0, $85 = 0, $89 = 0, $90 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22125
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22127
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22129
 if (($AsyncRetVal | 0) == (HEAP32[(HEAP32[$2 >> 2] | 0) + 32 >> 2] | 0)) {
  $104 = HEAP32[$2 >> 2] | 0; //@line 22135
  $105 = $104 + 48 | 0; //@line 22136
  $106 = $105; //@line 22137
  $107 = $106; //@line 22138
  $108 = HEAP32[$107 >> 2] | 0; //@line 22139
  $109 = $106 + 4 | 0; //@line 22140
  $110 = $109; //@line 22141
  $111 = HEAP32[$110 >> 2] | 0; //@line 22142
  $112 = ___async_retval; //@line 22143
  $113 = $112; //@line 22144
  $114 = $113; //@line 22145
  HEAP32[$114 >> 2] = $108; //@line 22146
  $115 = $113 + 4 | 0; //@line 22147
  $116 = $115; //@line 22148
  HEAP32[$116 >> 2] = $111; //@line 22149
  return;
 }
 $10 = $4 + 32 | 0; //@line 22152
 $15 = $AsyncRetVal - (HEAP32[$10 >> 2] | 0) & HEAP32[$4 + 12 >> 2]; //@line 22157
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22158
 $17 = HEAP32[$4 + 8 >> 2] | 0; //@line 22160
 do {
  if (($17 | 0) == 1e6) {
   $96 = $15; //@line 22164
   $97 = 0; //@line 22164
  } else {
   $20 = HEAP8[$4 + 57 >> 0] | 0; //@line 22167
   $22 = ___muldi3($15 | 0, 0, 1e6, 0) | 0; //@line 22169
   $23 = tempRet0; //@line 22170
   if (!($20 << 24 >> 24)) {
    $57 = ___udivdi3($22 | 0, $23 | 0, $17 | 0, 0) | 0; //@line 22172
    $58 = tempRet0; //@line 22173
    $59 = ___muldi3($57 | 0, $58 | 0, $17 | 0, 0) | 0; //@line 22174
    $61 = _i64Subtract($22 | 0, $23 | 0, $59 | 0, tempRet0 | 0) | 0; //@line 22176
    $63 = $4 + 40 | 0; //@line 22178
    $64 = $63; //@line 22179
    $70 = _i64Add($61 | 0, tempRet0 | 0, HEAP32[$64 >> 2] | 0, HEAP32[$64 + 4 >> 2] | 0) | 0; //@line 22185
    $71 = tempRet0; //@line 22186
    $72 = $63; //@line 22187
    HEAP32[$72 >> 2] = $70; //@line 22189
    HEAP32[$72 + 4 >> 2] = $71; //@line 22192
    if ($71 >>> 0 < 0 | ($71 | 0) == 0 & $70 >>> 0 < $17 >>> 0) {
     $96 = $57; //@line 22199
     $97 = $58; //@line 22199
     break;
    }
    $81 = _i64Add($57 | 0, $58 | 0, 1, 0) | 0; //@line 22202
    $82 = tempRet0; //@line 22203
    $83 = _i64Subtract($70 | 0, $71 | 0, $17 | 0, 0) | 0; //@line 22204
    $85 = $63; //@line 22206
    HEAP32[$85 >> 2] = $83; //@line 22208
    HEAP32[$85 + 4 >> 2] = tempRet0; //@line 22211
    $96 = $81; //@line 22212
    $97 = $82; //@line 22212
    break;
   } else {
    $24 = $20 & 255; //@line 22215
    $25 = _bitshift64Lshr($22 | 0, $23 | 0, $24 | 0) | 0; //@line 22216
    $26 = tempRet0; //@line 22217
    $27 = _bitshift64Shl($25 | 0, $26 | 0, $24 | 0) | 0; //@line 22218
    $29 = _i64Subtract($22 | 0, $23 | 0, $27 | 0, tempRet0 | 0) | 0; //@line 22220
    $31 = $4 + 40 | 0; //@line 22222
    $32 = $31; //@line 22223
    $38 = _i64Add(HEAP32[$32 >> 2] | 0, HEAP32[$32 + 4 >> 2] | 0, $29 | 0, tempRet0 | 0) | 0; //@line 22229
    $39 = tempRet0; //@line 22230
    $40 = $31; //@line 22231
    HEAP32[$40 >> 2] = $38; //@line 22233
    HEAP32[$40 + 4 >> 2] = $39; //@line 22236
    if ($39 >>> 0 < 0 | ($39 | 0) == 0 & $38 >>> 0 < $17 >>> 0) {
     $96 = $25; //@line 22243
     $97 = $26; //@line 22243
     break;
    }
    $49 = _i64Add($25 | 0, $26 | 0, 1, 0) | 0; //@line 22246
    $50 = tempRet0; //@line 22247
    $51 = _i64Subtract($38 | 0, $39 | 0, $17 | 0, 0) | 0; //@line 22248
    $53 = $31; //@line 22250
    HEAP32[$53 >> 2] = $51; //@line 22252
    HEAP32[$53 + 4 >> 2] = tempRet0; //@line 22255
    $96 = $49; //@line 22256
    $97 = $50; //@line 22256
    break;
   }
  }
 } while (0);
 $89 = $4 + 48 | 0; //@line 22261
 $90 = $89; //@line 22262
 $98 = _i64Add(HEAP32[$90 >> 2] | 0, HEAP32[$90 + 4 >> 2] | 0, $96 | 0, $97 | 0) | 0; //@line 22268
 $100 = $89; //@line 22270
 HEAP32[$100 >> 2] = $98; //@line 22272
 HEAP32[$100 + 4 >> 2] = tempRet0; //@line 22275
 $104 = HEAP32[$2 >> 2] | 0; //@line 22276
 $105 = $104 + 48 | 0; //@line 22277
 $106 = $105; //@line 22278
 $107 = $106; //@line 22279
 $108 = HEAP32[$107 >> 2] | 0; //@line 22280
 $109 = $106 + 4 | 0; //@line 22281
 $110 = $109; //@line 22282
 $111 = HEAP32[$110 >> 2] | 0; //@line 22283
 $112 = ___async_retval; //@line 22284
 $113 = $112; //@line 22285
 $114 = $113; //@line 22286
 HEAP32[$114 >> 2] = $108; //@line 22287
 $115 = $113 + 4 | 0; //@line 22288
 $116 = $115; //@line 22289
 HEAP32[$116 >> 2] = $111; //@line 22290
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$off0 = 0, $10 = 0, $30 = 0, $36 = 0, $44 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 808
 STACKTOP = STACKTOP + 32 | 0; //@line 809
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 809
 $5 = sp; //@line 810
 HEAP8[$0 + 689 >> 0] = $1; //@line 813
 $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 816
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 817
 FUNCTION_TABLE_vii[$10 & 15]($0, $2); //@line 818
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 60; //@line 821
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 823
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 825
  HEAP16[$AsyncCtx + 12 >> 1] = $3; //@line 827
  HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 829
  sp = STACKTOP; //@line 830
  STACKTOP = sp; //@line 831
  return 0; //@line 831
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 833
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 834
 $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 835
 _wait_ms(1); //@line 836
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 61; //@line 839
  HEAP32[$AsyncCtx19 + 4 >> 2] = $5; //@line 841
  HEAP16[$AsyncCtx19 + 8 >> 1] = $3; //@line 843
  HEAP32[$AsyncCtx19 + 12 >> 2] = $4; //@line 845
  HEAP32[$AsyncCtx19 + 16 >> 2] = $0; //@line 847
  sp = STACKTOP; //@line 848
  STACKTOP = sp; //@line 849
  return 0; //@line 849
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 851
 $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 852
 __ZN4mbed5TimerC2Ev($5); //@line 853
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 62; //@line 856
  HEAP32[$AsyncCtx6 + 4 >> 2] = $5; //@line 858
  HEAP16[$AsyncCtx6 + 8 >> 1] = $3; //@line 860
  HEAP32[$AsyncCtx6 + 12 >> 2] = $4; //@line 862
  HEAP32[$AsyncCtx6 + 16 >> 2] = $0; //@line 864
  HEAP32[$AsyncCtx6 + 20 >> 2] = $5; //@line 866
  sp = STACKTOP; //@line 867
  STACKTOP = sp; //@line 868
  return 0; //@line 868
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 870
 $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 871
 __ZN4mbed5Timer5startEv($5); //@line 872
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 63; //@line 875
  HEAP16[$AsyncCtx9 + 4 >> 1] = $3; //@line 877
  HEAP32[$AsyncCtx9 + 8 >> 2] = $5; //@line 879
  HEAP32[$AsyncCtx9 + 12 >> 2] = $4; //@line 881
  HEAP32[$AsyncCtx9 + 16 >> 2] = $0; //@line 883
  HEAP32[$AsyncCtx9 + 20 >> 2] = $5; //@line 885
  sp = STACKTOP; //@line 886
  STACKTOP = sp; //@line 887
  return 0; //@line 887
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 889
 L13 : do {
  if ($3 << 16 >> 16 < -1) {
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 893
   $30 = __ZN4mbed5Timer7read_msEv($5) | 0; //@line 894
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 64; //@line 897
    HEAP32[$AsyncCtx15 + 4 >> 2] = $4; //@line 899
    HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 901
    HEAP32[$AsyncCtx15 + 12 >> 2] = $5; //@line 903
    HEAP32[$AsyncCtx15 + 16 >> 2] = $5; //@line 905
    sp = STACKTOP; //@line 906
    STACKTOP = sp; //@line 907
    return 0; //@line 907
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 909
    $$0$off0 = ($30 | 0) >= ($4 | 0); //@line 911
    break;
   }
  } else {
   while (1) {
    $AsyncCtx12 = _emscripten_alloc_async_context(20, sp) | 0; //@line 916
    $36 = __ZN4mbed5Timer7read_msEv($5) | 0; //@line 917
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 922
    if (($36 | 0) >= ($4 | 0)) {
     $$0$off0 = 1; //@line 925
     break L13;
    }
   }
   HEAP32[$AsyncCtx12 >> 2] = 65; //@line 929
   HEAP32[$AsyncCtx12 + 4 >> 2] = $4; //@line 931
   HEAP32[$AsyncCtx12 + 8 >> 2] = $5; //@line 933
   HEAP32[$AsyncCtx12 + 12 >> 2] = $0; //@line 935
   HEAP32[$AsyncCtx12 + 16 >> 2] = $5; //@line 937
   sp = STACKTOP; //@line 938
   STACKTOP = sp; //@line 939
   return 0; //@line 939
  }
 } while (0);
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 944
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 945
 FUNCTION_TABLE_vi[$44 & 1023]($0); //@line 946
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 66; //@line 949
  HEAP32[$AsyncCtx3 + 4 >> 2] = $5; //@line 951
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 953
  HEAP8[$AsyncCtx3 + 12 >> 0] = $$0$off0 & 1; //@line 956
  sp = STACKTOP; //@line 957
  STACKTOP = sp; //@line 958
  return 0; //@line 958
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 960
  __ZN4mbed5TimerD2Ev($5); //@line 961
  STACKTOP = sp; //@line 962
  return $$0$off0 | 0; //@line 962
 }
 return 0; //@line 964
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $16 = 0, $17 = 0, $23 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $44 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 15308
 STACKTOP = STACKTOP + 16 | 0; //@line 15309
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15309
 $vararg_buffer1 = sp + 8 | 0; //@line 15310
 $vararg_buffer = sp; //@line 15311
 $1 = $0 + 1699 | 0; //@line 15312
 if ((HEAPU8[$1 >> 0] | 0) > (HEAPU8[$0 + 1698 >> 0] | 0)) {
  if ((HEAP32[$0 + 2380 >> 2] | 0) != 2) {
   STACKTOP = sp; //@line 15322
   return;
  }
  HEAP32[$0 + 2056 >> 2] = 1; //@line 15325
  $10 = $0 + 1996 | 0; //@line 15326
  $11 = $0 + 2008 | 0; //@line 15327
  $12 = HEAP32[$11 >> 2] | 0; //@line 15328
  do {
   if (!$12) {
    $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 15332
    _mbed_assert_internal(14839, 14844, 528); //@line 15333
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 439; //@line 15336
     HEAP32[$AsyncCtx20 + 4 >> 2] = $11; //@line 15338
     HEAP32[$AsyncCtx20 + 8 >> 2] = $10; //@line 15340
     sp = STACKTOP; //@line 15341
     STACKTOP = sp; //@line 15342
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 15344
     $17 = HEAP32[$11 >> 2] | 0; //@line 15346
     break;
    }
   } else {
    $17 = $12; //@line 15350
   }
  } while (0);
  $16 = HEAP32[$17 >> 2] | 0; //@line 15353
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15354
  FUNCTION_TABLE_vi[$16 & 1023]($10); //@line 15355
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 440; //@line 15358
   sp = STACKTOP; //@line 15359
   STACKTOP = sp; //@line 15360
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15362
  STACKTOP = sp; //@line 15363
  return;
 }
 _mbed_tracef(16, 12709, 13090, $vararg_buffer); //@line 15365
 $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15367
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 15368
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 441; //@line 15371
  HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 15373
  HEAP32[$AsyncCtx13 + 8 >> 2] = $0; //@line 15375
  HEAP32[$AsyncCtx13 + 12 >> 2] = $vararg_buffer1; //@line 15377
  HEAP32[$AsyncCtx13 + 16 >> 2] = $vararg_buffer1; //@line 15379
  sp = STACKTOP; //@line 15380
  STACKTOP = sp; //@line 15381
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 15383
 $23 = HEAP8[$1 >> 0] | 0; //@line 15384
 if (!($23 & 1)) {
  $34 = $23; //@line 15388
 } else {
  if (!(HEAP8[$0 + 1936 >> 0] | 0)) {
   $34 = $23; //@line 15394
  } else {
   _mbed_tracef(16, 12709, 13124, $vararg_buffer1); //@line 15396
   $30 = $0 + 1877 | 0; //@line 15398
   HEAP8[$30 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0 + 4 | 0, HEAP8[$30 >> 0] | 0) | 0; //@line 15401
   $34 = HEAP8[$1 >> 0] | 0; //@line 15403
  }
 }
 $33 = $0 + 2063 | 0; //@line 15406
 HEAP8[$33 >> 0] = $34; //@line 15407
 $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15408
 $35 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 15409
 if (___async) {
  HEAP32[$AsyncCtx9 >> 2] = 442; //@line 15412
  HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 15414
  HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 15416
  HEAP32[$AsyncCtx9 + 12 >> 2] = $33; //@line 15418
  sp = STACKTOP; //@line 15419
  STACKTOP = sp; //@line 15420
  return;
 }
 _emscripten_free_async_context($AsyncCtx9 | 0); //@line 15422
 do {
  if ($35 | 0) {
   __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 15427
   HEAP8[$0 + 1177 >> 0] = 0; //@line 15429
   HEAP8[$0 + 2062 >> 0] = 0; //@line 15431
   HEAP8[$33 >> 0] = HEAP8[$1 >> 0] | 0; //@line 15433
   $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15434
   $44 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 15435
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 443; //@line 15438
    HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 15440
    sp = STACKTOP; //@line 15441
    STACKTOP = sp; //@line 15442
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 15444
   if ($44 | 0) {
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 15447
    _mbed_assert_internal(12936, 12964, 953); //@line 15448
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 444; //@line 15451
     HEAP32[$AsyncCtx17 + 4 >> 2] = $1; //@line 15453
     sp = STACKTOP; //@line 15454
     STACKTOP = sp; //@line 15455
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 15457
     break;
    }
   }
  }
 } while (0);
 HEAP8[$1 >> 0] = (HEAP8[$1 >> 0] | 0) + 1 << 24 >> 24; //@line 15465
 STACKTOP = sp; //@line 15466
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $15 = 0, $16 = 0, $17 = 0, $25 = 0, $28 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 8
 STACKTOP = STACKTOP + 16 | 0; //@line 9
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9
 $3 = sp; //@line 10
 $4 = HEAP32[$0 >> 2] | 0; //@line 11
 $5 = $1 + 12 | 0; //@line 12
 $6 = HEAP32[$5 >> 2] | 0; //@line 13
 do {
  if (!$6) {
   $16 = 0; //@line 17
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 20
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 21
   FUNCTION_TABLE_vii[$9 & 15]($3, $1); //@line 22
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 563; //@line 25
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 27
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 29
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 31
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 33
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 35
    sp = STACKTOP; //@line 36
    STACKTOP = sp; //@line 37
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 39
    $16 = HEAP32[$5 >> 2] | 0; //@line 41
    break;
   }
  }
 } while (0);
 $15 = $3 + 12 | 0; //@line 46
 HEAP32[$15 >> 2] = $16; //@line 47
 $AsyncCtx12 = _emscripten_alloc_async_context(28, sp) | 0; //@line 48
 $17 = _equeue_alloc($4, 16) | 0; //@line 49
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 564; //@line 52
  HEAP32[$AsyncCtx12 + 4 >> 2] = $15; //@line 54
  HEAP32[$AsyncCtx12 + 8 >> 2] = $2; //@line 56
  HEAP32[$AsyncCtx12 + 12 >> 2] = $4; //@line 58
  HEAP32[$AsyncCtx12 + 16 >> 2] = $1; //@line 60
  HEAP32[$AsyncCtx12 + 20 >> 2] = $15; //@line 62
  HEAP32[$AsyncCtx12 + 24 >> 2] = $3; //@line 64
  sp = STACKTOP; //@line 65
  STACKTOP = sp; //@line 66
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 68
 do {
  if (!$17) {
   $$0$i = 0; //@line 72
  } else {
   $25 = HEAP32[$15 >> 2] | 0; //@line 74
   do {
    if (!$25) {
     $37 = 0; //@line 78
    } else {
     $28 = HEAP32[$25 + 4 >> 2] | 0; //@line 81
     $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 82
     FUNCTION_TABLE_vii[$28 & 15]($17, $3); //@line 83
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 565; //@line 86
      HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 88
      HEAP32[$AsyncCtx2 + 8 >> 2] = $17; //@line 90
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 92
      HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 94
      HEAP32[$AsyncCtx2 + 20 >> 2] = $1; //@line 96
      HEAP32[$AsyncCtx2 + 24 >> 2] = $15; //@line 98
      HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 100
      sp = STACKTOP; //@line 101
      STACKTOP = sp; //@line 102
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 104
      $37 = HEAP32[$15 >> 2] | 0; //@line 106
      break;
     }
    }
   } while (0);
   HEAP32[$17 + 12 >> 2] = $37; //@line 112
   _equeue_event_delay($17, $2); //@line 113
   _equeue_event_dtor($17, 283); //@line 114
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 115
   $38 = _equeue_post($4, 284, $17) | 0; //@line 116
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 566; //@line 119
    HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 121
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 123
    HEAP32[$AsyncCtx9 + 12 >> 2] = $3; //@line 125
    sp = STACKTOP; //@line 126
    STACKTOP = sp; //@line 127
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 129
    $$0$i = $38; //@line 130
    break;
   }
  }
 } while (0);
 $42 = $1 + 16 | 0; //@line 135
 HEAP32[$42 >> 2] = $$0$i; //@line 136
 $43 = HEAP32[$15 >> 2] | 0; //@line 137
 do {
  if (!$43) {
   $49 = $$0$i; //@line 141
  } else {
   $46 = HEAP32[$43 + 8 >> 2] | 0; //@line 144
   $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 145
   FUNCTION_TABLE_vi[$46 & 1023]($3); //@line 146
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 567; //@line 149
    HEAP32[$AsyncCtx6 + 4 >> 2] = $42; //@line 151
    sp = STACKTOP; //@line 152
    STACKTOP = sp; //@line 153
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 155
    $49 = HEAP32[$42 >> 2] | 0; //@line 157
    break;
   }
  }
 } while (0);
 if ($49 | 0) {
  STACKTOP = sp; //@line 164
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(4, sp) | 0; //@line 166
 _mbed_assert_internal(13476, 13494, 57); //@line 167
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 568; //@line 170
  sp = STACKTOP; //@line 171
  STACKTOP = sp; //@line 172
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 174
 STACKTOP = sp; //@line 175
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_19($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20006
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20008
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20010
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20016
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 20018
 $11 = $10 + 32 | 0; //@line 20019
 $12 = $10 + 44 | 0; //@line 20020
 $13 = HEAP32[$12 >> 2] | 0; //@line 20021
 if (!$13) {
  HEAP32[___async_retval >> 2] = 0; //@line 20025
  return;
 }
 $15 = $4 + 2532 | 0; //@line 20028
 if (($15 | 0) == ($11 | 0)) {
  $36 = HEAP32[$13 + 4 >> 2] | 0; //@line 20032
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 20033
  FUNCTION_TABLE_vii[$36 & 15]($2, $11); //@line 20034
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 20037
   $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 20038
   HEAP32[$37 >> 2] = $12; //@line 20039
   $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 20040
   HEAP32[$38 >> 2] = $4; //@line 20041
   $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 20042
   HEAP32[$39 >> 2] = $2; //@line 20043
   sp = STACKTOP; //@line 20044
   return;
  }
  ___async_unwind = 0; //@line 20047
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 20048
  $37 = $ReallocAsyncCtx7 + 4 | 0; //@line 20049
  HEAP32[$37 >> 2] = $12; //@line 20050
  $38 = $ReallocAsyncCtx7 + 8 | 0; //@line 20051
  HEAP32[$38 >> 2] = $4; //@line 20052
  $39 = $ReallocAsyncCtx7 + 12 | 0; //@line 20053
  HEAP32[$39 >> 2] = $2; //@line 20054
  sp = STACKTOP; //@line 20055
  return;
 }
 $17 = $4 + 2544 | 0; //@line 20058
 $18 = HEAP32[$17 >> 2] | 0; //@line 20059
 if (!$18) {
  $29 = HEAP32[$13 + 4 >> 2] | 0; //@line 20063
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 20064
  FUNCTION_TABLE_vii[$29 & 15]($15, $11); //@line 20065
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 20068
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 20069
   HEAP32[$30 >> 2] = $12; //@line 20070
   $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 20071
   HEAP32[$31 >> 2] = $17; //@line 20072
   $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 20073
   HEAP32[$32 >> 2] = $4; //@line 20074
   $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 20075
   HEAP32[$33 >> 2] = $2; //@line 20076
   $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 20077
   HEAP32[$34 >> 2] = $11; //@line 20078
   sp = STACKTOP; //@line 20079
   return;
  }
  ___async_unwind = 0; //@line 20082
  HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 20083
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 20084
  HEAP32[$30 >> 2] = $12; //@line 20085
  $31 = $ReallocAsyncCtx6 + 8 | 0; //@line 20086
  HEAP32[$31 >> 2] = $17; //@line 20087
  $32 = $ReallocAsyncCtx6 + 12 | 0; //@line 20088
  HEAP32[$32 >> 2] = $4; //@line 20089
  $33 = $ReallocAsyncCtx6 + 16 | 0; //@line 20090
  HEAP32[$33 >> 2] = $2; //@line 20091
  $34 = $ReallocAsyncCtx6 + 20 | 0; //@line 20092
  HEAP32[$34 >> 2] = $11; //@line 20093
  sp = STACKTOP; //@line 20094
  return;
 } else {
  $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 20098
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 20099
  FUNCTION_TABLE_vi[$21 & 1023]($15); //@line 20100
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 20103
   $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 20104
   HEAP32[$22 >> 2] = $12; //@line 20105
   $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 20106
   HEAP32[$23 >> 2] = $17; //@line 20107
   $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 20108
   HEAP32[$24 >> 2] = $4; //@line 20109
   $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 20110
   HEAP32[$25 >> 2] = $15; //@line 20111
   $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 20112
   HEAP32[$26 >> 2] = $11; //@line 20113
   $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 20114
   HEAP32[$27 >> 2] = $2; //@line 20115
   sp = STACKTOP; //@line 20116
   return;
  }
  ___async_unwind = 0; //@line 20119
  HEAP32[$ReallocAsyncCtx5 >> 2] = 357; //@line 20120
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 20121
  HEAP32[$22 >> 2] = $12; //@line 20122
  $23 = $ReallocAsyncCtx5 + 8 | 0; //@line 20123
  HEAP32[$23 >> 2] = $17; //@line 20124
  $24 = $ReallocAsyncCtx5 + 12 | 0; //@line 20125
  HEAP32[$24 >> 2] = $4; //@line 20126
  $25 = $ReallocAsyncCtx5 + 16 | 0; //@line 20127
  HEAP32[$25 >> 2] = $15; //@line 20128
  $26 = $ReallocAsyncCtx5 + 20 | 0; //@line 20129
  HEAP32[$26 >> 2] = $11; //@line 20130
  $27 = $ReallocAsyncCtx5 + 24 | 0; //@line 20131
  HEAP32[$27 >> 2] = $2; //@line 20132
  sp = STACKTOP; //@line 20133
  return;
 }
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $29 = 0, $3 = 0, $32 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7433
 STACKTOP = STACKTOP + 32 | 0; //@line 7434
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7434
 $2 = sp + 8 | 0; //@line 7436
 $3 = $0 + 2496 | 0; //@line 7437
 switch (HEAP32[$3 >> 2] | 0) {
 case 3:
  {
   HEAP32[$3 >> 2] = 1; //@line 7441
   _mbed_tracef(16, 12021, 12196, sp); //@line 7442
   $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7443
   $5 = __ZN7LoRaMac4joinEb($0, 1) | 0; //@line 7444
   if (___async) {
    HEAP32[$AsyncCtx10 >> 2] = 234; //@line 7447
    HEAP32[$AsyncCtx10 + 4 >> 2] = $1; //@line 7449
    sp = STACKTOP; //@line 7450
    STACKTOP = sp; //@line 7451
    return;
   }
   _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7453
   HEAP32[$1 >> 2] = $5; //@line 7454
   STACKTOP = sp; //@line 7455
   return;
  }
 case 4:
  {
   HEAP32[$3 >> 2] = 1; //@line 7459
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7460
   $7 = __ZN7LoRaMac24continue_joining_processEv($0) | 0; //@line 7461
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 235; //@line 7464
    HEAP32[$AsyncCtx6 + 4 >> 2] = $2; //@line 7466
    HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 7468
    HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 7470
    sp = STACKTOP; //@line 7471
    STACKTOP = sp; //@line 7472
    return;
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7474
   if ($7) {
    STACKTOP = sp; //@line 7476
    return;
   }
   $11 = $0 + 2512 | 0; //@line 7478
   $12 = HEAP32[$11 >> 2] | 0; //@line 7479
   do {
    if ($12 | 0) {
     $16 = HEAP32[$0 + 3168 >> 2] | 0; //@line 7485
     $18 = HEAP32[$12 + 4 >> 2] | 0; //@line 7487
     $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 7488
     FUNCTION_TABLE_vii[$18 & 15]($2, $0 + 2500 | 0); //@line 7489
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 236; //@line 7492
      HEAP32[$AsyncCtx + 4 >> 2] = $11; //@line 7494
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 7496
      HEAP32[$AsyncCtx + 12 >> 2] = $16; //@line 7498
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7500
      HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 7502
      sp = STACKTOP; //@line 7503
      STACKTOP = sp; //@line 7504
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 7506
     $24 = $2 + 12 | 0; //@line 7508
     HEAP32[$24 >> 2] = HEAP32[$11 >> 2]; //@line 7509
     $AsyncCtx13 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7510
     $25 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($16, $2, 10) | 0; //@line 7511
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 237; //@line 7514
      HEAP32[$AsyncCtx13 + 4 >> 2] = $24; //@line 7516
      HEAP32[$AsyncCtx13 + 8 >> 2] = $2; //@line 7518
      HEAP32[$AsyncCtx13 + 12 >> 2] = $3; //@line 7520
      sp = STACKTOP; //@line 7521
      STACKTOP = sp; //@line 7522
      return;
     }
     _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7524
     $29 = HEAP32[$24 >> 2] | 0; //@line 7525
     do {
      if ($29 | 0) {
       $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 7530
       $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7531
       FUNCTION_TABLE_vi[$32 & 1023]($2); //@line 7532
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 238; //@line 7535
        HEAP32[$AsyncCtx2 + 4 >> 2] = $25; //@line 7537
        HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 7539
        HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 7541
        sp = STACKTOP; //@line 7542
        STACKTOP = sp; //@line 7543
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7545
        break;
       }
      }
     } while (0);
     if (!$25) {
      $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7552
      _mbed_assert_internal(11914, 11923, 778); //@line 7553
      if (___async) {
       HEAP32[$AsyncCtx17 >> 2] = 239; //@line 7556
       HEAP32[$AsyncCtx17 + 4 >> 2] = $2; //@line 7558
       HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 7560
       sp = STACKTOP; //@line 7561
       STACKTOP = sp; //@line 7562
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx17 | 0); //@line 7564
       break;
      }
     }
    }
   } while (0);
   HEAP32[$3 >> 2] = 2; //@line 7570
   STACKTOP = sp; //@line 7571
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 7575
   return;
  }
 }
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 var $13 = 0, $17 = 0, $18 = 0, $19 = 0, $22 = 0, $27 = 0, $28 = 0, $35 = 0, $39 = 0, $50 = 0, $56 = 0, $73 = 0, $74 = 0, $75 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12683
 $13 = HEAP8[$1 + ($3 + 8 & 255) >> 0] | 0; //@line 12687
 $17 = $3 + 9 & 255; //@line 12691
 $18 = ($2 & 65535) + 252 - $17 | 0; //@line 12692
 $19 = $18 & 255; //@line 12693
 HEAP8[$0 + 2025 >> 0] = $13; //@line 12695
 $22 = $3 << 24 >> 24 == 0; //@line 12697
 if ($13 << 24 >> 24) {
  do {
   if (!$22) {
    $50 = $0 + 476 | 0; //@line 12701
    $AsyncCtx7 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12707
    $56 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($50, $1, 8, $17 + 255 & 255, $9, $0 + 2084 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 12708
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 390; //@line 12711
     HEAP32[$AsyncCtx7 + 4 >> 2] = $50; //@line 12713
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 12715
     HEAP32[$AsyncCtx7 + 12 >> 2] = $1; //@line 12717
     HEAP32[$AsyncCtx7 + 16 >> 2] = $17; //@line 12719
     HEAP32[$AsyncCtx7 + 20 >> 2] = $18; //@line 12721
     HEAP32[$AsyncCtx7 + 24 >> 2] = $5; //@line 12723
     HEAP32[$AsyncCtx7 + 28 >> 2] = $6; //@line 12725
     HEAP32[$AsyncCtx7 + 32 >> 2] = $7; //@line 12727
     sp = STACKTOP; //@line 12728
     return;
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12731
    if (!$56) {
     if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($50) | 0)) {
      break;
     }
     HEAP32[$0 + 2076 >> 2] = 4; //@line 12739
     HEAP8[$0 + 2080 >> 0] = 1; //@line 12741
     __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($50); //@line 12742
     break;
    } else {
     HEAP32[$0 + 2020 >> 2] = 1; //@line 12746
     return;
    }
   }
  } while (0);
  $73 = $18 & 255; //@line 12754
  $74 = $0 + 1442 | 0; //@line 12755
  $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12756
  $75 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $73, $5, 128, $6, 1, $7, $74) | 0; //@line 12757
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 391; //@line 12760
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12762
   HEAP32[$AsyncCtx + 8 >> 2] = $74; //@line 12764
   HEAP16[$AsyncCtx + 12 >> 1] = $73; //@line 12766
   sp = STACKTOP; //@line 12767
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12770
  if (!$75) {
   HEAP32[$0 + 2028 >> 2] = $74; //@line 12774
   HEAP16[$0 + 2032 >> 1] = $73; //@line 12776
   HEAP8[$0 + 2034 >> 0] = 1; //@line 12778
   return;
  } else {
   HEAP32[$0 + 2020 >> 2] = 13; //@line 12782
   return;
  }
 }
 if (!$22) {
  HEAP8[$0 + 2012 >> 0] = 0; //@line 12788
  HEAP8[$0 + 2062 >> 0] = 0; //@line 12790
  HEAP8[$0 + 2044 >> 0] = 0; //@line 12792
  return;
 }
 $27 = $0 + 1442 | 0; //@line 12799
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12800
 $28 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0 + 756 | 0, $1 + $17 | 0, $18 & 255, $4, 128, $6, 1, $7, $27) | 0; //@line 12801
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 388; //@line 12804
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12806
  HEAP32[$AsyncCtx3 + 8 >> 2] = $27; //@line 12808
  HEAP8[$AsyncCtx3 + 12 >> 0] = $19; //@line 12810
  HEAP8[$AsyncCtx3 + 13 >> 0] = $9; //@line 12812
  sp = STACKTOP; //@line 12813
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12816
 if ($28 | 0) {
  HEAP32[$0 + 2020 >> 2] = 13; //@line 12820
 }
 $35 = $0 + 476 | 0; //@line 12822
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12826
 $39 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($35, $27, 0, $19, $9, $0 + 2084 | 0, $0 + 1876 | 0, $0 + 4 | 0) | 0; //@line 12827
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 389; //@line 12830
  HEAP32[$AsyncCtx11 + 4 >> 2] = $35; //@line 12832
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 12834
  sp = STACKTOP; //@line 12835
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12838
 if ($39 | 0) {
  HEAP32[$0 + 2020 >> 2] = 1; //@line 12842
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($35) | 0)) {
  return;
 }
 HEAP32[$0 + 2076 >> 2] = 4; //@line 12850
 HEAP8[$0 + 2080 >> 0] = 1; //@line 12852
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($35); //@line 12853
 return;
}
function _initialize__async_cb_428($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31828
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31830
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31832
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31834
 $10 = HEAP32[(HEAP32[$0 + 16 >> 2] | 0) + 4 >> 2] | 0; //@line 31838
 if (($10 + -4 | 0) >>> 0 > 28) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 31842
  _mbed_assert_internal(14291, 14293, 55); //@line 31843
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 621; //@line 31846
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 31847
   HEAP32[$12 >> 2] = $2; //@line 31848
   $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 31849
   HEAP32[$13 >> 2] = $4; //@line 31850
   $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 31851
   HEAP32[$14 >> 2] = 1e6; //@line 31852
   $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 31853
   HEAP8[$15 >> 0] = 0; //@line 31854
   $16 = $ReallocAsyncCtx6 + 20 | 0; //@line 31855
   HEAP32[$16 >> 2] = $6; //@line 31856
   sp = STACKTOP; //@line 31857
   return;
  }
  ___async_unwind = 0; //@line 31860
  HEAP32[$ReallocAsyncCtx6 >> 2] = 621; //@line 31861
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 31862
  HEAP32[$12 >> 2] = $2; //@line 31863
  $13 = $ReallocAsyncCtx6 + 8 | 0; //@line 31864
  HEAP32[$13 >> 2] = $4; //@line 31865
  $14 = $ReallocAsyncCtx6 + 12 | 0; //@line 31866
  HEAP32[$14 >> 2] = 1e6; //@line 31867
  $15 = $ReallocAsyncCtx6 + 16 | 0; //@line 31868
  HEAP8[$15 >> 0] = 0; //@line 31869
  $16 = $ReallocAsyncCtx6 + 20 | 0; //@line 31870
  HEAP32[$16 >> 2] = $6; //@line 31871
  sp = STACKTOP; //@line 31872
  return;
 } else {
  $18 = 7 << $10 + -4; //@line 31876
  $19 = ___muldi3($18 | 0, 0, 1e6, 0) | 0; //@line 31877
  $20 = tempRet0; //@line 31878
  $21 = _i64Add(1e6, 0, -1, -1) | 0; //@line 31879
  $23 = _i64Add($21 | 0, tempRet0 | 0, $19 | 0, $20 | 0) | 0; //@line 31881
  $25 = ___udivdi3($23 | 0, tempRet0 | 0, 1e6, 0) | 0; //@line 31883
  $26 = tempRet0; //@line 31884
  $27 = HEAP32[$2 >> 2] | 0; //@line 31885
  HEAP32[$27 >> 2] = 0; //@line 31886
  HEAP32[$27 + 4 >> 2] = 0; //@line 31888
  $31 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 31891
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 31892
  $32 = FUNCTION_TABLE_i[$31 & 7]() | 0; //@line 31893
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 31896
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 31897
   HEAP32[$33 >> 2] = $2; //@line 31898
   $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 31899
   HEAP32[$34 >> 2] = 1e6; //@line 31900
   $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 31901
   HEAP8[$35 >> 0] = 0; //@line 31902
   $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 31903
   HEAP32[$36 >> 2] = $10; //@line 31904
   $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 31905
   HEAP32[$37 >> 2] = $18; //@line 31906
   $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 31907
   $39 = $38; //@line 31908
   $40 = $39; //@line 31909
   HEAP32[$40 >> 2] = $25; //@line 31910
   $41 = $39 + 4 | 0; //@line 31911
   $42 = $41; //@line 31912
   HEAP32[$42 >> 2] = $26; //@line 31913
   $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 31914
   HEAP32[$43 >> 2] = $6; //@line 31915
   $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 31916
   HEAP32[$44 >> 2] = $4; //@line 31917
   sp = STACKTOP; //@line 31918
   return;
  }
  HEAP32[___async_retval >> 2] = $32; //@line 31922
  ___async_unwind = 0; //@line 31923
  HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 31924
  $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 31925
  HEAP32[$33 >> 2] = $2; //@line 31926
  $34 = $ReallocAsyncCtx3 + 8 | 0; //@line 31927
  HEAP32[$34 >> 2] = 1e6; //@line 31928
  $35 = $ReallocAsyncCtx3 + 12 | 0; //@line 31929
  HEAP8[$35 >> 0] = 0; //@line 31930
  $36 = $ReallocAsyncCtx3 + 16 | 0; //@line 31931
  HEAP32[$36 >> 2] = $10; //@line 31932
  $37 = $ReallocAsyncCtx3 + 20 | 0; //@line 31933
  HEAP32[$37 >> 2] = $18; //@line 31934
  $38 = $ReallocAsyncCtx3 + 24 | 0; //@line 31935
  $39 = $38; //@line 31936
  $40 = $39; //@line 31937
  HEAP32[$40 >> 2] = $25; //@line 31938
  $41 = $39 + 4 | 0; //@line 31939
  $42 = $41; //@line 31940
  HEAP32[$42 >> 2] = $26; //@line 31941
  $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 31942
  HEAP32[$43 >> 2] = $6; //@line 31943
  $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 31944
  HEAP32[$44 >> 2] = $4; //@line 31945
  sp = STACKTOP; //@line 31946
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_114($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27695
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27697
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27699
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27701
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27703
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27705
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27709
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27711
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 27713
 $19 = HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0; //@line 27714
 if (!$19) {
  $31 = $16 + 12 | 0; //@line 27718
  HEAP32[$16 >> 2] = 464; //@line 27719
  HEAP32[$16 + 4 >> 2] = 0; //@line 27721
  HEAP32[$16 + 8 >> 2] = $2; //@line 27723
  HEAP32[$31 >> 2] = 860; //@line 27724
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 27725
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1816 | 0, $16); //@line 27726
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 465; //@line 27729
   $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 27730
   HEAP32[$32 >> 2] = $2; //@line 27731
   $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 27732
   HEAP32[$33 >> 2] = $4; //@line 27733
   $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 27734
   HEAP32[$34 >> 2] = $6; //@line 27735
   $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 27736
   HEAP32[$35 >> 2] = $8; //@line 27737
   $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 27738
   HEAP32[$36 >> 2] = $10; //@line 27739
   $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 27740
   HEAP32[$37 >> 2] = $18; //@line 27741
   $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 27742
   HEAP32[$38 >> 2] = $16; //@line 27743
   $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 27744
   HEAP32[$39 >> 2] = $31; //@line 27745
   sp = STACKTOP; //@line 27746
   return;
  }
  ___async_unwind = 0; //@line 27749
  HEAP32[$ReallocAsyncCtx7 >> 2] = 465; //@line 27750
  $32 = $ReallocAsyncCtx7 + 4 | 0; //@line 27751
  HEAP32[$32 >> 2] = $2; //@line 27752
  $33 = $ReallocAsyncCtx7 + 8 | 0; //@line 27753
  HEAP32[$33 >> 2] = $4; //@line 27754
  $34 = $ReallocAsyncCtx7 + 12 | 0; //@line 27755
  HEAP32[$34 >> 2] = $6; //@line 27756
  $35 = $ReallocAsyncCtx7 + 16 | 0; //@line 27757
  HEAP32[$35 >> 2] = $8; //@line 27758
  $36 = $ReallocAsyncCtx7 + 20 | 0; //@line 27759
  HEAP32[$36 >> 2] = $10; //@line 27760
  $37 = $ReallocAsyncCtx7 + 24 | 0; //@line 27761
  HEAP32[$37 >> 2] = $18; //@line 27762
  $38 = $ReallocAsyncCtx7 + 28 | 0; //@line 27763
  HEAP32[$38 >> 2] = $16; //@line 27764
  $39 = $ReallocAsyncCtx7 + 32 | 0; //@line 27765
  HEAP32[$39 >> 2] = $31; //@line 27766
  sp = STACKTOP; //@line 27767
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 27771
  $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 27772
  FUNCTION_TABLE_vi[$22 & 1023]($14); //@line 27773
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 463; //@line 27776
   $23 = $ReallocAsyncCtx + 4 | 0; //@line 27777
   HEAP32[$23 >> 2] = $2; //@line 27778
   $24 = $ReallocAsyncCtx + 8 | 0; //@line 27779
   HEAP32[$24 >> 2] = $16; //@line 27780
   $25 = $ReallocAsyncCtx + 12 | 0; //@line 27781
   HEAP32[$25 >> 2] = $6; //@line 27782
   $26 = $ReallocAsyncCtx + 16 | 0; //@line 27783
   HEAP32[$26 >> 2] = $18; //@line 27784
   $27 = $ReallocAsyncCtx + 20 | 0; //@line 27785
   HEAP32[$27 >> 2] = $4; //@line 27786
   $28 = $ReallocAsyncCtx + 24 | 0; //@line 27787
   HEAP32[$28 >> 2] = $8; //@line 27788
   $29 = $ReallocAsyncCtx + 28 | 0; //@line 27789
   HEAP32[$29 >> 2] = $10; //@line 27790
   sp = STACKTOP; //@line 27791
   return;
  }
  ___async_unwind = 0; //@line 27794
  HEAP32[$ReallocAsyncCtx >> 2] = 463; //@line 27795
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 27796
  HEAP32[$23 >> 2] = $2; //@line 27797
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 27798
  HEAP32[$24 >> 2] = $16; //@line 27799
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 27800
  HEAP32[$25 >> 2] = $6; //@line 27801
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 27802
  HEAP32[$26 >> 2] = $18; //@line 27803
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 27804
  HEAP32[$27 >> 2] = $4; //@line 27805
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 27806
  HEAP32[$28 >> 2] = $8; //@line 27807
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 27808
  HEAP32[$29 >> 2] = $10; //@line 27809
  sp = STACKTOP; //@line 27810
  return;
 }
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $50 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27554
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27556
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27558
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27560
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27562
 $10 = $0 + 24 | 0; //@line 27564
 $12 = HEAP32[$10 >> 2] | 0; //@line 27566
 $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 27569
 $17 = HEAP32[$0 + 32 >> 2] | 0; //@line 27571
 $19 = HEAP32[$0 + 36 >> 2] | 0; //@line 27573
 $21 = HEAP32[$0 + 40 >> 2] | 0; //@line 27575
 $22 = HEAP32[$2 >> 2] | 0; //@line 27576
 if ($22 | 0) {
  $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 27580
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 27581
  FUNCTION_TABLE_vii[$25 & 15]($4, $6); //@line 27582
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 27585
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 27586
   HEAP32[$26 >> 2] = $2; //@line 27587
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 27588
   HEAP32[$27 >> 2] = $17; //@line 27589
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 27590
   HEAP32[$28 >> 2] = $8; //@line 27591
   $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 27592
   $30 = $29; //@line 27593
   $31 = $30; //@line 27594
   HEAP32[$31 >> 2] = $12; //@line 27595
   $32 = $30 + 4 | 0; //@line 27596
   $33 = $32; //@line 27597
   HEAP32[$33 >> 2] = $15; //@line 27598
   $34 = $ReallocAsyncCtx2 + 24 | 0; //@line 27599
   HEAP32[$34 >> 2] = $19; //@line 27600
   $35 = $ReallocAsyncCtx2 + 28 | 0; //@line 27601
   HEAP32[$35 >> 2] = $6; //@line 27602
   $36 = $ReallocAsyncCtx2 + 32 | 0; //@line 27603
   HEAP32[$36 >> 2] = $21; //@line 27604
   sp = STACKTOP; //@line 27605
   return;
  }
  ___async_unwind = 0; //@line 27608
  HEAP32[$ReallocAsyncCtx2 >> 2] = 87; //@line 27609
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 27610
  HEAP32[$26 >> 2] = $2; //@line 27611
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 27612
  HEAP32[$27 >> 2] = $17; //@line 27613
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 27614
  HEAP32[$28 >> 2] = $8; //@line 27615
  $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 27616
  $30 = $29; //@line 27617
  $31 = $30; //@line 27618
  HEAP32[$31 >> 2] = $12; //@line 27619
  $32 = $30 + 4 | 0; //@line 27620
  $33 = $32; //@line 27621
  HEAP32[$33 >> 2] = $15; //@line 27622
  $34 = $ReallocAsyncCtx2 + 24 | 0; //@line 27623
  HEAP32[$34 >> 2] = $19; //@line 27624
  $35 = $ReallocAsyncCtx2 + 28 | 0; //@line 27625
  HEAP32[$35 >> 2] = $6; //@line 27626
  $36 = $ReallocAsyncCtx2 + 32 | 0; //@line 27627
  HEAP32[$36 >> 2] = $21; //@line 27628
  sp = STACKTOP; //@line 27629
  return;
 }
 HEAP32[$17 >> 2] = 0; //@line 27632
 __ZN4mbed6Ticker5setupEy($8, $12, $15); //@line 27633
 $37 = HEAP32[$2 >> 2] | 0; //@line 27634
 if ($37 | 0) {
  $40 = HEAP32[$37 + 8 >> 2] | 0; //@line 27638
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27639
  FUNCTION_TABLE_vi[$40 & 1023]($6); //@line 27640
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 27643
   $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 27644
   HEAP32[$41 >> 2] = $19; //@line 27645
   $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 27646
   HEAP32[$42 >> 2] = $21; //@line 27647
   sp = STACKTOP; //@line 27648
   return;
  }
  ___async_unwind = 0; //@line 27651
  HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 27652
  $41 = $ReallocAsyncCtx3 + 4 | 0; //@line 27653
  HEAP32[$41 >> 2] = $19; //@line 27654
  $42 = $ReallocAsyncCtx3 + 8 | 0; //@line 27655
  HEAP32[$42 >> 2] = $21; //@line 27656
  sp = STACKTOP; //@line 27657
  return;
 }
 if (!(HEAP8[$19 + 770 >> 0] | 0)) {
  HEAP8[$21 >> 0] = 0; //@line 27664
 }
 $47 = HEAP32[$19 + 788 >> 2] | 0; //@line 27667
 if (!$47) {
  return;
 }
 $50 = HEAP32[$47 + 60 >> 2] | 0; //@line 27673
 if (!$50) {
  return;
 }
 $53 = HEAP32[$50 >> 2] | 0; //@line 27679
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 27680
 FUNCTION_TABLE_vi[$53 & 1023]($47 + 48 | 0); //@line 27681
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27684
  sp = STACKTOP; //@line 27685
  return;
 }
 ___async_unwind = 0; //@line 27688
 HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27689
 sp = STACKTOP; //@line 27690
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $39 = 0, $43 = 0, $46 = 0, $51 = 0, $56 = 0, $57 = 0, $60 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 1664
 STACKTOP = STACKTOP + 32 | 0; //@line 1665
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1665
 $vararg_buffer = sp; //@line 1666
 $2 = sp + 16 | 0; //@line 1667
 $7 = HEAP8[$0 + 748 >> 0] | 0; //@line 1672
 $9 = HEAP32[$0 + 752 >> 2] | 0; //@line 1674
 $11 = HEAP32[$0 + 756 >> 2] | 0; //@line 1676
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 692 >> 2]; //@line 1677
 HEAP32[$vararg_buffer + 4 >> 2] = $7; //@line 1679
 HEAP32[$vararg_buffer + 8 >> 2] = $9; //@line 1681
 HEAP32[$vararg_buffer + 12 >> 2] = $11; //@line 1683
 _mbed_tracef(16, 11105, 11291, $vararg_buffer); //@line 1684
 HEAP8[$0 + 688 >> 0] = 2; //@line 1686
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1687
 $13 = $2 + 12 | 0; //@line 1688
 HEAP32[$2 >> 2] = 91; //@line 1689
 HEAP32[$2 + 4 >> 2] = 0; //@line 1691
 HEAP32[$2 + 8 >> 2] = $0; //@line 1693
 HEAP32[$13 >> 2] = 584; //@line 1694
 $16 = HEAP32[(HEAP32[$0 >> 2] | 0) + 52 >> 2] | 0; //@line 1697
 $18 = HEAP8[$0 + 782 >> 0] | 0; //@line 1699
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 1700
 $19 = FUNCTION_TABLE_iiii[$16 & 31]($0, 1, $18) | 0; //@line 1701
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 92; //@line 1704
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1706
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 1708
  HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 1710
  sp = STACKTOP; //@line 1711
  STACKTOP = sp; //@line 1712
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1714
 $23 = $0 + 1240 | 0; //@line 1715
 $25 = ($19 * 1e3 | 0) + 3e3 | 0; //@line 1717
 $26 = $0 + 1280 | 0; //@line 1718
 if (($26 | 0) != ($2 | 0)) {
  $28 = $0 + 1292 | 0; //@line 1721
  $29 = HEAP32[$28 >> 2] | 0; //@line 1722
  do {
   if ($29 | 0) {
    $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 1727
    $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1728
    FUNCTION_TABLE_vi[$32 & 1023]($26); //@line 1729
    if (___async) {
     HEAP32[$AsyncCtx5 >> 2] = 93; //@line 1732
     HEAP32[$AsyncCtx5 + 4 >> 2] = $13; //@line 1734
     HEAP32[$AsyncCtx5 + 8 >> 2] = $28; //@line 1736
     HEAP32[$AsyncCtx5 + 12 >> 2] = $26; //@line 1738
     HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 1740
     HEAP32[$AsyncCtx5 + 20 >> 2] = $23; //@line 1742
     $39 = $AsyncCtx5 + 24 | 0; //@line 1744
     HEAP32[$39 >> 2] = $25; //@line 1746
     HEAP32[$39 + 4 >> 2] = 0; //@line 1749
     sp = STACKTOP; //@line 1750
     STACKTOP = sp; //@line 1751
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx5 | 0); //@line 1753
     break;
    }
   }
  } while (0);
  $43 = HEAP32[$13 >> 2] | 0; //@line 1758
  do {
   if (!$43) {
    $56 = 0; //@line 1762
   } else {
    $46 = HEAP32[$43 + 4 >> 2] | 0; //@line 1765
    $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 1766
    FUNCTION_TABLE_vii[$46 & 15]($26, $2); //@line 1767
    if (___async) {
     HEAP32[$AsyncCtx8 >> 2] = 94; //@line 1770
     HEAP32[$AsyncCtx8 + 4 >> 2] = $13; //@line 1772
     HEAP32[$AsyncCtx8 + 8 >> 2] = $28; //@line 1774
     HEAP32[$AsyncCtx8 + 12 >> 2] = $23; //@line 1776
     $51 = $AsyncCtx8 + 16 | 0; //@line 1778
     HEAP32[$51 >> 2] = $25; //@line 1780
     HEAP32[$51 + 4 >> 2] = 0; //@line 1783
     HEAP32[$AsyncCtx8 + 24 >> 2] = $2; //@line 1785
     sp = STACKTOP; //@line 1786
     STACKTOP = sp; //@line 1787
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx8 | 0); //@line 1789
     $56 = HEAP32[$13 >> 2] | 0; //@line 1791
     break;
    }
   }
  } while (0);
  HEAP32[$28 >> 2] = $56; //@line 1796
 }
 __ZN4mbed6Ticker5setupEy($23, $25, 0); //@line 1798
 $57 = HEAP32[$13 >> 2] | 0; //@line 1799
 if (!$57) {
  STACKTOP = sp; //@line 1802
  return;
 }
 $60 = HEAP32[$57 + 8 >> 2] | 0; //@line 1805
 $AsyncCtx12 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1806
 FUNCTION_TABLE_vi[$60 & 1023]($2); //@line 1807
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 95; //@line 1810
  sp = STACKTOP; //@line 1811
  STACKTOP = sp; //@line 1812
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 1814
 STACKTOP = sp; //@line 1815
 return;
}
function _equeue_cancel($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $$sink$in$in$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $24 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $42 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $56 = 0, $57 = 0, $59 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $70 = 0, $72 = 0, $73 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3574
 if (!$1) {
  return;
 }
 $5 = $0 + 16 | 0; //@line 3581
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3586
 $11 = $0 + 128 | 0; //@line 3587
 _equeue_mutex_lock($11); //@line 3588
 $12 = $10 + 4 | 0; //@line 3589
 $13 = HEAP8[$12 >> 0] | 0; //@line 3590
 $14 = $13 & 255; //@line 3591
 $15 = HEAP32[$5 >> 2] | 0; //@line 3592
 if (($1 >> $15 | 0) != ($14 | 0)) {
  _equeue_mutex_unlock($11); //@line 3596
  return;
 }
 HEAP32[$10 + 32 >> 2] = 0; //@line 3600
 HEAP32[$10 + 24 >> 2] = -1; //@line 3602
 $24 = (HEAP32[$10 + 20 >> 2] | 0) - (HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 3607
 do {
  if (($24 | 0) >= 0) {
   if (!$24) {
    if ((HEAP8[$10 + 5 >> 0] | 0) != (HEAP8[$0 + 9 >> 0] | 0)) {
     break;
    }
   }
   $32 = $10 + 12 | 0; //@line 3622
   $33 = HEAP32[$32 >> 2] | 0; //@line 3623
   $35 = $10 + 8 | 0; //@line 3625
   $36 = HEAP32[$35 >> 2] | 0; //@line 3626
   $37 = $33; //@line 3627
   if (!$33) {
    $44 = $10 + 16 | 0; //@line 3629
    HEAP32[HEAP32[$44 >> 2] >> 2] = $36; //@line 3631
    $46 = HEAP32[$35 >> 2] | 0; //@line 3632
    if ($46 | 0) {
     $$sink$in$in$i = $44; //@line 3635
     $49 = $46; //@line 3635
     label = 13; //@line 3636
    }
   } else {
    $38 = $33 + 8 | 0; //@line 3639
    HEAP32[$38 >> 2] = $36; //@line 3640
    if ($36 | 0) {
     HEAP32[$36 + 16 >> 2] = $38; //@line 3645
    }
    $42 = $10 + 16 | 0; //@line 3647
    HEAP32[HEAP32[$42 >> 2] >> 2] = $37; //@line 3649
    $$sink$in$in$i = $42; //@line 3651
    $49 = HEAP32[$32 >> 2] | 0; //@line 3651
    label = 13; //@line 3652
   }
   if ((label | 0) == 13) {
    HEAP32[$49 + 16 >> 2] = HEAP32[$$sink$in$in$i >> 2]; //@line 3657
   }
   HEAP8[$12 >> 0] = (($13 + 1 & 255) << $15 | 0) == 0 ? 1 : $14 + 1 & 255; //@line 3666
   _equeue_mutex_unlock($11); //@line 3667
   $56 = $10 + 36 | 0; //@line 3668
   $57 = $56 + -36 | 0; //@line 3669
   $59 = HEAP32[$56 + -8 >> 2] | 0; //@line 3671
   do {
    if ($59 | 0) {
     $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3675
     FUNCTION_TABLE_vi[$59 & 1023]($56); //@line 3676
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 133; //@line 3679
      HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3681
      HEAP32[$AsyncCtx + 8 >> 2] = $56; //@line 3683
      HEAP32[$AsyncCtx + 12 >> 2] = $57; //@line 3685
      sp = STACKTOP; //@line 3686
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 3689
      break;
     }
    }
   } while (0);
   $64 = $0 + 156 | 0; //@line 3694
   _equeue_mutex_lock($64); //@line 3695
   $65 = $0 + 24 | 0; //@line 3696
   $66 = HEAP32[$65 >> 2] | 0; //@line 3697
   L28 : do {
    if (!$66) {
     $$02329$i$i = $65; //@line 3701
     label = 24; //@line 3702
    } else {
     $68 = HEAP32[$57 >> 2] | 0; //@line 3704
     $$025$i$i = $65; //@line 3705
     $70 = $66; //@line 3705
     while (1) {
      $69 = HEAP32[$70 >> 2] | 0; //@line 3707
      if ($69 >>> 0 >= $68 >>> 0) {
       break;
      }
      $72 = $70 + 8 | 0; //@line 3712
      $73 = HEAP32[$72 >> 2] | 0; //@line 3713
      if (!$73) {
       $$02329$i$i = $72; //@line 3716
       label = 24; //@line 3717
       break L28;
      } else {
       $$025$i$i = $72; //@line 3720
       $70 = $73; //@line 3720
      }
     }
     if (($69 | 0) == ($68 | 0)) {
      HEAP32[$56 + -24 >> 2] = $70; //@line 3726
      $$02330$i$i = $$025$i$i; //@line 3729
      $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 3729
     } else {
      $$02329$i$i = $$025$i$i; //@line 3731
      label = 24; //@line 3732
     }
    }
   } while (0);
   if ((label | 0) == 24) {
    HEAP32[$56 + -24 >> 2] = 0; //@line 3738
    $$02330$i$i = $$02329$i$i; //@line 3739
    $$sink$in$i$i = $$02329$i$i; //@line 3739
   }
   HEAP32[$56 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 3743
   HEAP32[$$02330$i$i >> 2] = $57; //@line 3744
   _equeue_mutex_unlock($64); //@line 3745
   return;
  }
 } while (0);
 _equeue_mutex_unlock($11); //@line 3749
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_327($0) {
 $0 = $0 | 0;
 var $$013$i = 0, $$09$i = 0, $$09$i53 = 0, $$09$i58 = 0, $$sink$sink$i = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $41 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22871
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22873
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22875
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22877
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22879
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22881
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22883
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22885
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22887
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22893
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22895
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22897
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22899
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22901
 $31 = $6 + 16 | 0; //@line 22902
 $32 = $6 + 32 | 0; //@line 22903
 $33 = HEAP32[$32 >> 2] | 0; //@line 22904
 if ($33 >>> 0 < $4 >>> 0) {
  $$013$i = 0; //@line 22907
  do {
   if ($$013$i >>> 0 < $33 >>> 0) {
    $$sink$sink$i = HEAP8[$6 + 16 + $$013$i >> 0] | 0; //@line 22913
   } else {
    $$sink$sink$i = ($$013$i | 0) == ($33 | 0) ? -128 : 0; //@line 22917
   }
   HEAP8[$2 + $$013$i >> 0] = $$sink$sink$i; //@line 22920
   $$013$i = $$013$i + 1 | 0; //@line 22921
  } while (($$013$i | 0) != ($4 | 0));
  $$09$i = 0; //@line 22924
  do {
   $41 = $2 + $$09$i | 0; //@line 22931
   HEAP8[$41 >> 0] = HEAP8[$24 + $$09$i >> 0] ^ HEAP8[$41 >> 0]; //@line 22936
   $$09$i = $$09$i + 1 | 0; //@line 22937
  } while (($$09$i | 0) != ($4 | 0));
  label = 10; //@line 22940
 } else {
  if ($4 | 0) {
   $$09$i53 = 0; //@line 22949
   do {
    HEAP8[$2 + $$09$i53 >> 0] = HEAP8[$22 + $$09$i53 >> 0] ^ HEAP8[$6 + 16 + $$09$i53 >> 0]; //@line 22957
    $$09$i53 = $$09$i53 + 1 | 0; //@line 22958
   } while (($$09$i53 | 0) != ($4 | 0));
   label = 10; //@line 22961
  }
 }
 if ((label | 0) == 10) {
  if ($4 | 0) {
   $$09$i58 = 0; //@line 22972
   do {
    $58 = $6 + $$09$i58 | 0; //@line 22976
    HEAP8[$58 >> 0] = HEAP8[$58 >> 0] ^ HEAP8[$2 + $$09$i58 >> 0]; //@line 22979
    $$09$i58 = $$09$i58 + 1 | 0; //@line 22980
   } while (($$09$i58 | 0) != ($4 | 0));
  }
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 22990
 $62 = _mbedtls_cipher_update($28, $10, $4, $10, $30) | 0; //@line 22991
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 604; //@line 22994
  $63 = $ReallocAsyncCtx9 + 4 | 0; //@line 22995
  HEAP32[$63 >> 2] = $26; //@line 22996
  $64 = $ReallocAsyncCtx9 + 8 | 0; //@line 22997
  HEAP32[$64 >> 2] = $10; //@line 22998
  $65 = $ReallocAsyncCtx9 + 12 | 0; //@line 22999
  HEAP32[$65 >> 2] = $4; //@line 23000
  $66 = $ReallocAsyncCtx9 + 16 | 0; //@line 23001
  HEAP32[$66 >> 2] = $16; //@line 23002
  $67 = $ReallocAsyncCtx9 + 20 | 0; //@line 23003
  HEAP32[$67 >> 2] = $8; //@line 23004
  $68 = $ReallocAsyncCtx9 + 24 | 0; //@line 23005
  HEAP32[$68 >> 2] = $32; //@line 23006
  $69 = $ReallocAsyncCtx9 + 28 | 0; //@line 23007
  HEAP32[$69 >> 2] = $31; //@line 23008
  $70 = $ReallocAsyncCtx9 + 32 | 0; //@line 23009
  HEAP32[$70 >> 2] = $12; //@line 23010
  $71 = $ReallocAsyncCtx9 + 36 | 0; //@line 23011
  HEAP32[$71 >> 2] = $14; //@line 23012
  sp = STACKTOP; //@line 23013
  return;
 }
 HEAP32[___async_retval >> 2] = $62; //@line 23017
 ___async_unwind = 0; //@line 23018
 HEAP32[$ReallocAsyncCtx9 >> 2] = 604; //@line 23019
 $63 = $ReallocAsyncCtx9 + 4 | 0; //@line 23020
 HEAP32[$63 >> 2] = $26; //@line 23021
 $64 = $ReallocAsyncCtx9 + 8 | 0; //@line 23022
 HEAP32[$64 >> 2] = $10; //@line 23023
 $65 = $ReallocAsyncCtx9 + 12 | 0; //@line 23024
 HEAP32[$65 >> 2] = $4; //@line 23025
 $66 = $ReallocAsyncCtx9 + 16 | 0; //@line 23026
 HEAP32[$66 >> 2] = $16; //@line 23027
 $67 = $ReallocAsyncCtx9 + 20 | 0; //@line 23028
 HEAP32[$67 >> 2] = $8; //@line 23029
 $68 = $ReallocAsyncCtx9 + 24 | 0; //@line 23030
 HEAP32[$68 >> 2] = $32; //@line 23031
 $69 = $ReallocAsyncCtx9 + 28 | 0; //@line 23032
 HEAP32[$69 >> 2] = $31; //@line 23033
 $70 = $ReallocAsyncCtx9 + 32 | 0; //@line 23034
 HEAP32[$70 >> 2] = $12; //@line 23035
 $71 = $ReallocAsyncCtx9 + 36 | 0; //@line 23036
 HEAP32[$71 >> 2] = $14; //@line 23037
 sp = STACKTOP; //@line 23038
 return;
}
function _gcm_mult($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$07475 = 0, $100 = 0, $101 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $113 = 0, $116 = 0, $120 = 0, $126 = 0, $130 = 0, $134 = 0, $140 = 0, $144 = 0, $148 = 0, $15 = 0, $154 = 0, $158 = 0, $162 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $82 = 0, $88 = 0, $92 = 0, $94 = 0;
 $4 = HEAP8[$1 + 15 >> 0] | 0; //@line 4632
 $6 = $4 & 15; //@line 4634
 $8 = $0 + 200 + ($6 << 3) | 0; //@line 4636
 $15 = $0 + 72 + ($6 << 3) | 0; //@line 4643
 $$07475 = 15; //@line 4649
 $22 = $4; //@line 4649
 $27 = HEAP32[$15 >> 2] | 0; //@line 4649
 $28 = HEAP32[$8 >> 2] | 0; //@line 4649
 $29 = HEAP32[$8 + 4 >> 2] | 0; //@line 4649
 $32 = HEAP32[$15 + 4 >> 2] | 0; //@line 4649
 while (1) {
  if (($$07475 | 0) == 15) {
   $69 = $27; //@line 4654
   $70 = $28; //@line 4654
   $71 = $29; //@line 4654
   $74 = $32; //@line 4654
  } else {
   $25 = $22 & 15; //@line 4657
   $30 = _bitshift64Shl($28 | 0, $29 | 0, 60) | 0; //@line 4659
   $31 = tempRet0; //@line 4660
   $33 = _bitshift64Lshr($27 | 0, $32 | 0, 4) | 0; //@line 4661
   $36 = tempRet0 | $31; //@line 4664
   $37 = _bitshift64Lshr($28 | 0, $29 | 0, 4) | 0; //@line 4665
   $38 = tempRet0; //@line 4666
   $40 = 208 + (($27 & 15) << 3) | 0; //@line 4668
   $46 = _bitshift64Shl(HEAP32[$40 >> 2] | 0, HEAP32[$40 + 4 >> 2] | 0, 48) | 0; //@line 4674
   $51 = $0 + 200 + ($25 << 3) | 0; //@line 4679
   $60 = $0 + 72 + ($25 << 3) | 0; //@line 4688
   $69 = HEAP32[$60 >> 2] ^ ($33 | $30); //@line 4696
   $70 = $46 ^ $37 ^ HEAP32[$51 >> 2]; //@line 4696
   $71 = tempRet0 ^ $38 ^ HEAP32[$51 + 4 >> 2]; //@line 4696
   $74 = HEAP32[$60 + 4 >> 2] ^ $36; //@line 4696
  }
  $72 = _bitshift64Shl($70 | 0, $71 | 0, 60) | 0; //@line 4699
  $73 = tempRet0; //@line 4700
  $75 = _bitshift64Lshr($69 | 0, $74 | 0, 4) | 0; //@line 4701
  $78 = tempRet0 | $73; //@line 4704
  $79 = _bitshift64Lshr($70 | 0, $71 | 0, 4) | 0; //@line 4705
  $80 = tempRet0; //@line 4706
  $82 = 208 + (($69 & 15) << 3) | 0; //@line 4708
  $88 = _bitshift64Shl(HEAP32[$82 >> 2] | 0, HEAP32[$82 + 4 >> 2] | 0, 48) | 0; //@line 4714
  $92 = ($22 & 255) >>> 4 & 255; //@line 4718
  $94 = $0 + 200 + ($92 << 3) | 0; //@line 4720
  $100 = $88 ^ $79 ^ HEAP32[$94 >> 2]; //@line 4726
  $101 = tempRet0 ^ $80 ^ HEAP32[$94 + 4 >> 2]; //@line 4727
  $103 = $0 + 72 + ($92 << 3) | 0; //@line 4729
  $109 = HEAP32[$103 >> 2] ^ ($75 | $72); //@line 4735
  $110 = HEAP32[$103 + 4 >> 2] ^ $78; //@line 4736
  $111 = $$07475 + -1 | 0; //@line 4737
  if (($$07475 | 0) <= 0) {
   break;
  }
  $$07475 = $111; //@line 4744
  $22 = HEAP8[$1 + $111 >> 0] | 0; //@line 4744
  $27 = $109; //@line 4744
  $28 = $100; //@line 4744
  $29 = $101; //@line 4744
  $32 = $110; //@line 4744
 }
 $113 = _bitshift64Lshr($100 | 0, $101 | 0, 56) | 0; //@line 4746
 HEAP8[$2 >> 0] = $113; //@line 4749
 $116 = _bitshift64Lshr($100 | 0, $101 | 0, 48) | 0; //@line 4750
 HEAP8[$2 + 1 >> 0] = $116; //@line 4754
 $120 = _bitshift64Lshr($100 | 0, $101 | 0, 40) | 0; //@line 4755
 HEAP8[$2 + 2 >> 0] = $120; //@line 4759
 HEAP8[$2 + 3 >> 0] = $101; //@line 4762
 $126 = _bitshift64Lshr($100 | 0, $101 | 0, 24) | 0; //@line 4763
 HEAP8[$2 + 4 >> 0] = $126; //@line 4767
 $130 = _bitshift64Lshr($100 | 0, $101 | 0, 16) | 0; //@line 4768
 HEAP8[$2 + 5 >> 0] = $130; //@line 4772
 $134 = _bitshift64Lshr($100 | 0, $101 | 0, 8) | 0; //@line 4773
 HEAP8[$2 + 6 >> 0] = $134; //@line 4777
 HEAP8[$2 + 7 >> 0] = $100; //@line 4780
 $140 = _bitshift64Lshr($109 | 0, $110 | 0, 56) | 0; //@line 4781
 HEAP8[$2 + 8 >> 0] = $140; //@line 4785
 $144 = _bitshift64Lshr($109 | 0, $110 | 0, 48) | 0; //@line 4786
 HEAP8[$2 + 9 >> 0] = $144; //@line 4790
 $148 = _bitshift64Lshr($109 | 0, $110 | 0, 40) | 0; //@line 4791
 HEAP8[$2 + 10 >> 0] = $148; //@line 4795
 HEAP8[$2 + 11 >> 0] = $110; //@line 4798
 $154 = _bitshift64Lshr($109 | 0, $110 | 0, 24) | 0; //@line 4799
 HEAP8[$2 + 12 >> 0] = $154; //@line 4803
 $158 = _bitshift64Lshr($109 | 0, $110 | 0, 16) | 0; //@line 4804
 HEAP8[$2 + 13 >> 0] = $158; //@line 4808
 $162 = _bitshift64Lshr($109 | 0, $110 | 0, 8) | 0; //@line 4809
 HEAP8[$2 + 14 >> 0] = $162; //@line 4813
 HEAP8[$2 + 15 >> 0] = $109; //@line 4816
 return;
}
function _mbedtls_aes_setkey_dec($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$043$lcssa = 0, $$04352 = 0, $$04554$in = 0, $$050 = 0, $$053 = 0, $$pn$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $128 = 0, $13 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $64 = 0, $8 = 0, $96 = 0, $AsyncCtx = 0, sp = 0, $$04352$looptemp = 0;
 sp = STACKTOP; //@line 563
 STACKTOP = STACKTOP + 288 | 0; //@line 564
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 564
 $3 = sp; //@line 565
 _memset($3 | 0, 0, 280) | 0; //@line 566
 $4 = $0 + 8 | 0; //@line 567
 HEAP32[$0 + 4 >> 2] = $4; //@line 569
 $6 = _mbedtls_aes_setkey_enc($3, $1, $2) | 0; //@line 570
 if (!$6) {
  $8 = HEAP32[$3 >> 2] | 0; //@line 573
  HEAP32[$0 >> 2] = $8; //@line 574
  $10 = HEAP32[$3 + 4 >> 2] | 0; //@line 576
  $11 = $8 << 2; //@line 577
  $12 = $10 + ($11 << 2) | 0; //@line 578
  $13 = $12 + 4 | 0; //@line 579
  HEAP32[$4 >> 2] = HEAP32[$12 >> 2]; //@line 582
  $16 = $13 + 4 | 0; //@line 583
  HEAP32[$0 + 12 >> 2] = HEAP32[$13 >> 2]; //@line 586
  $19 = $16 + 4 | 0; //@line 587
  HEAP32[$0 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 590
  $22 = $19 + 4 | 0; //@line 591
  $24 = $0 + 24 | 0; //@line 593
  HEAP32[$0 + 20 >> 2] = HEAP32[$19 >> 2]; //@line 594
  $$050 = $22 + -32 | 0; //@line 595
  if (($8 | 0) > 1) {
   $26 = ~$8; //@line 598
   $31 = $11 + -4 - ($8 + (($26 | 0) > -3 ? $26 : -3) << 2) | 0; //@line 604
   $$04352 = $24; //@line 605
   $$04554$in = $8; //@line 605
   $$053 = $$050; //@line 605
   while (1) {
    $$04352$looptemp = $$04352;
    $$04352 = $$04352 + 16 | 0; //@line 608
    $32 = HEAP32[$$053 >> 2] | 0; //@line 609
    HEAP32[$$04352$looptemp >> 2] = HEAP32[2324 + ((HEAPU8[13599 + ($32 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13599 + ($32 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13599 + ($32 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13599 + ($32 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 640
    $64 = HEAP32[$$053 + 4 >> 2] | 0; //@line 642
    HEAP32[$$04352$looptemp + 4 >> 2] = HEAP32[2324 + ((HEAPU8[13599 + ($64 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13599 + ($64 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13599 + ($64 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13599 + ($64 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 673
    $96 = HEAP32[$$053 + 8 >> 2] | 0; //@line 675
    HEAP32[$$04352$looptemp + 8 >> 2] = HEAP32[2324 + ((HEAPU8[13599 + ($96 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13599 + ($96 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13599 + ($96 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13599 + ($96 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 706
    $128 = HEAP32[$$053 + 12 >> 2] | 0; //@line 708
    HEAP32[$$04352$looptemp + 12 >> 2] = HEAP32[2324 + ((HEAPU8[13599 + ($128 >>> 8 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[1300 + ((HEAPU8[13599 + ($128 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[3348 + ((HEAPU8[13599 + ($128 >>> 16 & 255) >> 0] | 0) << 2) >> 2] ^ HEAP32[4372 + ((HEAPU8[13599 + ($128 >>> 24) >> 0] | 0) << 2) >> 2]; //@line 738
    $$053 = $$053 + -16 | 0; //@line 739
    if (($$04554$in | 0) <= 2) {
     break;
    } else {
     $$04554$in = $$04554$in + -1 | 0; //@line 742
    }
   }
   $$0$lcssa = $$053; //@line 748
   $$043$lcssa = $$04352; //@line 748
   $$pn$lcssa = $10 + ($31 << 2) | 0; //@line 748
  } else {
   $$0$lcssa = $$050; //@line 750
   $$043$lcssa = $24; //@line 750
   $$pn$lcssa = $22; //@line 750
  }
  HEAP32[$$043$lcssa >> 2] = HEAP32[$$0$lcssa >> 2]; //@line 755
  HEAP32[$$043$lcssa + 4 >> 2] = HEAP32[$$pn$lcssa + -28 >> 2]; //@line 759
  HEAP32[$$043$lcssa + 8 >> 2] = HEAP32[$$pn$lcssa + -24 >> 2]; //@line 763
  HEAP32[$$043$lcssa + 12 >> 2] = HEAP32[$$pn$lcssa + -20 >> 2]; //@line 765
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 767
 _mbedtls_platform_zeroize($3, 280); //@line 768
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 571; //@line 771
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 773
  HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 775
  sp = STACKTOP; //@line 776
  STACKTOP = sp; //@line 777
  return 0; //@line 777
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 779
  STACKTOP = sp; //@line 780
  return $6 | 0; //@line 780
 }
 return 0; //@line 782
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21767
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21771
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21773
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 21775
 $10 = HEAP8[$0 + 17 >> 0] | 0; //@line 21777
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 21779
 $$pre$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21780
 $13 = $4 + 12 | 0; //@line 21781
 HEAP32[$13 >> 2] = $$pre$i; //@line 21782
 if (!$$pre$i) {
  $24 = $6 + 12 | 0; //@line 21785
  HEAP32[$24 >> 2] = 0; //@line 21786
  $25 = $6 + 16 | 0; //@line 21787
  HEAP8[$25 >> 0] = $8; //@line 21788
  HEAP8[$6 + 17 >> 0] = $10; //@line 21790
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 21791
  $27 = _equeue_alloc($12, 20) | 0; //@line 21792
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 326; //@line 21795
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 21796
   HEAP32[$28 >> 2] = $24; //@line 21797
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 21798
   HEAP32[$29 >> 2] = $13; //@line 21799
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 21800
   HEAP32[$30 >> 2] = $4; //@line 21801
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 21802
   HEAP32[$31 >> 2] = $24; //@line 21803
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 21804
   HEAP32[$32 >> 2] = $25; //@line 21805
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 21806
   HEAP32[$33 >> 2] = $12; //@line 21807
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 21808
   HEAP32[$34 >> 2] = $6; //@line 21809
   sp = STACKTOP; //@line 21810
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 21814
  ___async_unwind = 0; //@line 21815
  HEAP32[$ReallocAsyncCtx7 >> 2] = 326; //@line 21816
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 21817
  HEAP32[$28 >> 2] = $24; //@line 21818
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 21819
  HEAP32[$29 >> 2] = $13; //@line 21820
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 21821
  HEAP32[$30 >> 2] = $4; //@line 21822
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 21823
  HEAP32[$31 >> 2] = $24; //@line 21824
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 21825
  HEAP32[$32 >> 2] = $25; //@line 21826
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 21827
  HEAP32[$33 >> 2] = $12; //@line 21828
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 21829
  HEAP32[$34 >> 2] = $6; //@line 21830
  sp = STACKTOP; //@line 21831
  return;
 } else {
  $16 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 21836
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 21837
  FUNCTION_TABLE_vii[$16 & 15]($6, $4); //@line 21838
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 325; //@line 21841
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 21842
   HEAP32[$17 >> 2] = $6; //@line 21843
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 21844
   HEAP32[$18 >> 2] = $13; //@line 21845
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 21846
   HEAP8[$19 >> 0] = $8; //@line 21847
   $20 = $ReallocAsyncCtx2 + 13 | 0; //@line 21848
   HEAP8[$20 >> 0] = $10; //@line 21849
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 21850
   HEAP32[$21 >> 2] = $12; //@line 21851
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 21852
   HEAP32[$22 >> 2] = $4; //@line 21853
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 21854
   HEAP32[$23 >> 2] = $13; //@line 21855
   sp = STACKTOP; //@line 21856
   return;
  }
  ___async_unwind = 0; //@line 21859
  HEAP32[$ReallocAsyncCtx2 >> 2] = 325; //@line 21860
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 21861
  HEAP32[$17 >> 2] = $6; //@line 21862
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 21863
  HEAP32[$18 >> 2] = $13; //@line 21864
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 21865
  HEAP8[$19 >> 0] = $8; //@line 21866
  $20 = $ReallocAsyncCtx2 + 13 | 0; //@line 21867
  HEAP8[$20 >> 0] = $10; //@line 21868
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 21869
  HEAP32[$21 >> 2] = $12; //@line 21870
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 21871
  HEAP32[$22 >> 2] = $4; //@line 21872
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 21873
  HEAP32[$23 >> 2] = $13; //@line 21874
  sp = STACKTOP; //@line 21875
  return;
 }
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $26 = 0, $3 = 0, $31 = 0, $32 = 0, $35 = 0, $38 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10610
 STACKTOP = STACKTOP + 16 | 0; //@line 10611
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10611
 $2 = sp; //@line 10612
 $3 = $0 + 2496 | 0; //@line 10613
 do {
  if (HEAP32[$3 >> 2] | 0) {
   $AsyncCtx9 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10618
   __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 10619
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 347; //@line 10622
    HEAP32[$AsyncCtx9 + 4 >> 2] = $2; //@line 10624
    HEAP32[$AsyncCtx9 + 8 >> 2] = $0; //@line 10626
    HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 10628
    HEAP32[$AsyncCtx9 + 16 >> 2] = $3; //@line 10630
    HEAP32[$AsyncCtx9 + 20 >> 2] = $1; //@line 10632
    sp = STACKTOP; //@line 10633
    STACKTOP = sp; //@line 10634
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10636
    break;
   }
  }
 } while (0);
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10641
 __ZN7LoRaMac10disconnectEv($0); //@line 10642
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 348; //@line 10645
  HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 10647
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 10649
  HEAP32[$AsyncCtx5 + 12 >> 2] = $1; //@line 10651
  HEAP32[$AsyncCtx5 + 16 >> 2] = $2; //@line 10653
  sp = STACKTOP; //@line 10654
  STACKTOP = sp; //@line 10655
  return;
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10657
 HEAP8[$0 + 2548 >> 0] = 0; //@line 10659
 HEAP32[$3 >> 2] = 11; //@line 10660
 HEAP32[$1 >> 2] = -1011; //@line 10661
 $16 = $0 + 2904 | 0; //@line 10662
 HEAP32[$16 >> 2] = HEAP32[$16 >> 2] & -5; //@line 10665
 $19 = $0 + 2512 | 0; //@line 10666
 $20 = HEAP32[$19 >> 2] | 0; //@line 10667
 if (!$20) {
  STACKTOP = sp; //@line 10670
  return;
 }
 $24 = HEAP32[$0 + 3168 >> 2] | 0; //@line 10674
 $26 = HEAP32[$20 + 4 >> 2] | 0; //@line 10676
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10677
 FUNCTION_TABLE_vii[$26 & 15]($2, $0 + 2500 | 0); //@line 10678
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 349; //@line 10681
  HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 10683
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 10685
  HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 10687
  HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 10689
  sp = STACKTOP; //@line 10690
  STACKTOP = sp; //@line 10691
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10693
 $31 = $2 + 12 | 0; //@line 10695
 HEAP32[$31 >> 2] = HEAP32[$19 >> 2]; //@line 10696
 $AsyncCtx12 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10697
 $32 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($24, $2, 1) | 0; //@line 10698
 if (___async) {
  HEAP32[$AsyncCtx12 >> 2] = 350; //@line 10701
  HEAP32[$AsyncCtx12 + 4 >> 2] = $31; //@line 10703
  HEAP32[$AsyncCtx12 + 8 >> 2] = $2; //@line 10705
  sp = STACKTOP; //@line 10706
  STACKTOP = sp; //@line 10707
  return;
 }
 _emscripten_free_async_context($AsyncCtx12 | 0); //@line 10709
 $35 = HEAP32[$31 >> 2] | 0; //@line 10710
 do {
  if ($35 | 0) {
   $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 10715
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10716
   FUNCTION_TABLE_vi[$38 & 1023]($2); //@line 10717
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 351; //@line 10720
    HEAP32[$AsyncCtx2 + 4 >> 2] = $32; //@line 10722
    HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 10724
    sp = STACKTOP; //@line 10725
    STACKTOP = sp; //@line 10726
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10728
    break;
   }
  }
 } while (0);
 if ($32 | 0) {
  STACKTOP = sp; //@line 10735
  return;
 }
 $AsyncCtx16 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10737
 _mbed_assert_internal(11914, 11923, 778); //@line 10738
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 352; //@line 10741
  HEAP32[$AsyncCtx16 + 4 >> 2] = $2; //@line 10743
  sp = STACKTOP; //@line 10744
  STACKTOP = sp; //@line 10745
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 10747
 STACKTOP = sp; //@line 10748
 return;
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0$i = 0, $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $13 = 0, $26 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $40 = 0, $43 = 0, $44 = 0, $48 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11599
 STACKTOP = STACKTOP + 16 | 0; //@line 11600
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11600
 if (!(HEAP8[$0 + 2548 >> 0] | 0)) {
  $$1 = -1017; //@line 11606
  STACKTOP = sp; //@line 11607
  return $$1 | 0; //@line 11607
 }
 $9 = $0 + 2832 | 0; //@line 11609
 if (!(HEAP8[$9 >> 0] | 0)) {
  $$1 = -1001; //@line 11613
  STACKTOP = sp; //@line 11614
  return $$1 | 0; //@line 11614
 }
 if (!$1) {
  $$1 = -1003; //@line 11618
  STACKTOP = sp; //@line 11619
  return $$1 | 0; //@line 11619
 }
 $13 = $2 & 65535; //@line 11621
 if (!($2 << 16 >> 16)) {
  $$1 = -1003; //@line 11624
  STACKTOP = sp; //@line 11625
  return $$1 | 0; //@line 11625
 }
 L13 : do {
  switch (HEAP32[$0 + 2844 >> 2] | 0) {
  case 0:
   {
    $$0$i = 1; //@line 11632
    break;
   }
  case 1:
   {
    $$0$i = 2; //@line 11636
    break;
   }
  case 2:
   {
    $$0$i = 4; //@line 11640
    break;
   }
  case 3:
   {
    $$0$i = 8; //@line 11644
    break;
   }
  default:
   {
    _mbed_tracef(2, 12021, 12650, sp); //@line 11648
    $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 11649
    _mbed_assert_internal(14291, 11923, 814); //@line 11650
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 370; //@line 11653
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11655
     HEAP8[$AsyncCtx + 8 >> 0] = $5 & 1; //@line 11658
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 11660
     HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 11662
     HEAP16[$AsyncCtx + 20 >> 1] = $2; //@line 11664
     HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 11666
     HEAP32[$AsyncCtx + 28 >> 2] = $9; //@line 11668
     HEAP32[$AsyncCtx + 32 >> 2] = $13; //@line 11670
     sp = STACKTOP; //@line 11671
     STACKTOP = sp; //@line 11672
     return 0; //@line 11672
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 11674
     $$0$i = 1; //@line 11675
     break L13;
    }
   }
  }
 } while (0);
 $26 = HEAP8[$0 + 2853 >> 0] | 0; //@line 11682
 if ($5) {
  if ($26 << 24 >> 24 != (HEAP8[$3 >> 0] | 0)) {
   $$1 = -1001; //@line 11687
   STACKTOP = sp; //@line 11688
   return $$1 | 0; //@line 11688
  }
  if (!(HEAP32[$4 >> 2] & $$0$i)) {
   $$1 = -1001; //@line 11694
   STACKTOP = sp; //@line 11695
   return $$1 | 0; //@line 11695
  }
 }
 HEAP8[$3 >> 0] = $26; //@line 11698
 HEAP32[$4 >> 2] = $$0$i; //@line 11699
 $32 = $0 + 2856 | 0; //@line 11700
 $33 = HEAP32[$32 >> 2] | 0; //@line 11701
 $34 = $0 + 2860 | 0; //@line 11702
 $35 = HEAP16[$34 >> 1] | 0; //@line 11703
 $36 = $35 & 65535; //@line 11704
 $38 = $0 + 2882 | 0; //@line 11706
 $40 = (HEAP16[$38 >> 1] | 0) == 0; //@line 11708
 if (($35 & 65535) > ($2 & 65535)) {
  if ($40) {
   $43 = $0 + 2880 | 0; //@line 11713
   HEAP16[$43 >> 1] = $36 - $13; //@line 11714
   HEAP16[$38 >> 1] = $2; //@line 11715
   _memcpy($1 | 0, $33 | 0, $13 | 0) | 0; //@line 11716
   $$0$off0 = 0; //@line 11717
   $$031 = $2; //@line 11717
   $$pre$phi39Z2D = $43; //@line 11717
  } else {
   label = 19; //@line 11719
  }
 } else {
  if ($40) {
   $44 = $0 + 2880 | 0; //@line 11723
   HEAP16[$44 >> 1] = 0; //@line 11724
   HEAP16[$38 >> 1] = 0; //@line 11725
   _memcpy($1 | 0, $33 | 0, $36 | 0) | 0; //@line 11726
   $$0$off0 = 1; //@line 11727
   $$031 = $35; //@line 11727
   $$pre$phi39Z2D = $44; //@line 11727
  } else {
   label = 19; //@line 11729
  }
 }
 if ((label | 0) == 19) {
  $$0$off0 = 0; //@line 11734
  $$031 = $35; //@line 11734
  $$pre$phi39Z2D = $0 + 2880 | 0; //@line 11734
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $48 = HEAP16[$0 + 2882 >> 1] | 0; //@line 11740
  if ($48 << 16 >> 16) {
   _memcpy($1 | 0, $33 + ($48 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 11746
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 11750
  STACKTOP = sp; //@line 11751
  return $$1 | 0; //@line 11751
 }
 HEAP32[$32 >> 2] = 0; //@line 11753
 HEAP16[$34 >> 1] = 0; //@line 11754
 HEAP8[$9 >> 0] = 0; //@line 11755
 $$1 = $$031; //@line 11756
 STACKTOP = sp; //@line 11757
 return $$1 | 0; //@line 11757
}
function __ZN12radio_eventsD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18965
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18967
 $4 = HEAP32[$2 + 92 >> 2] | 0; //@line 18969
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 18974
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18975
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 80 | 0); //@line 18976
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 174; //@line 18979
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 18980
   HEAP32[$9 >> 2] = $2; //@line 18981
   sp = STACKTOP; //@line 18982
   return;
  }
  ___async_unwind = 0; //@line 18985
  HEAP32[$ReallocAsyncCtx2 >> 2] = 174; //@line 18986
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 18987
  HEAP32[$9 >> 2] = $2; //@line 18988
  sp = STACKTOP; //@line 18989
  return;
 }
 $11 = HEAP32[$2 + 76 >> 2] | 0; //@line 18993
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 18998
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 18999
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 64 | 0); //@line 19000
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 19003
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 19004
   HEAP32[$16 >> 2] = $2; //@line 19005
   sp = STACKTOP; //@line 19006
   return;
  }
  ___async_unwind = 0; //@line 19009
  HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 19010
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 19011
  HEAP32[$16 >> 2] = $2; //@line 19012
  sp = STACKTOP; //@line 19013
  return;
 }
 $18 = HEAP32[$2 + 60 >> 2] | 0; //@line 19017
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 19022
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19023
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 48 | 0); //@line 19024
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19027
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 19028
   HEAP32[$23 >> 2] = $2; //@line 19029
   sp = STACKTOP; //@line 19030
   return;
  }
  ___async_unwind = 0; //@line 19033
  HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19034
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 19035
  HEAP32[$23 >> 2] = $2; //@line 19036
  sp = STACKTOP; //@line 19037
  return;
 }
 $25 = HEAP32[$2 + 44 >> 2] | 0; //@line 19041
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 19046
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19047
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 32 | 0); //@line 19048
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19051
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 19052
   HEAP32[$30 >> 2] = $2; //@line 19053
   sp = STACKTOP; //@line 19054
   return;
  }
  ___async_unwind = 0; //@line 19057
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19058
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 19059
  HEAP32[$30 >> 2] = $2; //@line 19060
  sp = STACKTOP; //@line 19061
  return;
 }
 $32 = HEAP32[$2 + 28 >> 2] | 0; //@line 19065
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 19070
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19071
  FUNCTION_TABLE_vi[$36 & 1023]($2 + 16 | 0); //@line 19072
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19075
   $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 19076
   HEAP32[$37 >> 2] = $2; //@line 19077
   sp = STACKTOP; //@line 19078
   return;
  }
  ___async_unwind = 0; //@line 19081
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19082
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 19083
  HEAP32[$37 >> 2] = $2; //@line 19084
  sp = STACKTOP; //@line 19085
  return;
 }
 $39 = HEAP32[$2 + 12 >> 2] | 0; //@line 19089
 if (!$39) {
  return;
 }
 $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 19095
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19096
 FUNCTION_TABLE_vi[$42 & 1023]($2); //@line 19097
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19100
  sp = STACKTOP; //@line 19101
  return;
 }
 ___async_unwind = 0; //@line 19104
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19105
 sp = STACKTOP; //@line 19106
 return;
}
function _mbedtls_cipher_cmac_update__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09$i75 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $53 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17847
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17849
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17851
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17853
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17855
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17857
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17859
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17861
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17863
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17865
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17867
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17869
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17871
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 17874
  $53 = ___async_retval; //@line 17875
  HEAP32[$53 >> 2] = $$0; //@line 17876
  return;
 }
 $33 = $2 - $4 | 0; //@line 17879
 $25 = $6 + $4 | 0; //@line 17880
 $37 = $8 + 1 | 0; //@line 17881
 if ($37 >>> 0 >= $10 >>> 0) {
  if (!$33) {
   $$0 = 0; //@line 17886
   $53 = ___async_retval; //@line 17887
   HEAP32[$53 >> 2] = $$0; //@line 17888
   return;
  }
  _memcpy((HEAP32[$14 >> 2] | 0) + ($16 + 16) | 0, $25 | 0, $33 | 0) | 0; //@line 17893
  HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + $33; //@line 17896
  $$0 = 0; //@line 17897
  $53 = ___async_retval; //@line 17898
  HEAP32[$53 >> 2] = $$0; //@line 17899
  return;
 }
 $$09$i75 = 0; //@line 17902
 do {
  $27 = $16 + $$09$i75 | 0; //@line 17906
  HEAP8[$27 >> 0] = HEAP8[$27 >> 0] ^ HEAP8[$25 + $$09$i75 >> 0]; //@line 17909
  $$09$i75 = $$09$i75 + 1 | 0; //@line 17910
 } while (($$09$i75 | 0) != ($4 | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 17918
 $31 = _mbedtls_cipher_update($18, $20, $4, $20, $22) | 0; //@line 17919
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 17922
  $32 = $ReallocAsyncCtx + 4 | 0; //@line 17923
  HEAP32[$32 >> 2] = $33; //@line 17924
  $34 = $ReallocAsyncCtx + 8 | 0; //@line 17925
  HEAP32[$34 >> 2] = $4; //@line 17926
  $35 = $ReallocAsyncCtx + 12 | 0; //@line 17927
  HEAP32[$35 >> 2] = $25; //@line 17928
  $36 = $ReallocAsyncCtx + 16 | 0; //@line 17929
  HEAP32[$36 >> 2] = $37; //@line 17930
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 17931
  HEAP32[$38 >> 2] = $10; //@line 17932
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 17933
  HEAP32[$39 >> 2] = $12; //@line 17934
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 17935
  HEAP32[$40 >> 2] = $14; //@line 17936
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 17937
  HEAP32[$41 >> 2] = $16; //@line 17938
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 17939
  HEAP32[$42 >> 2] = $18; //@line 17940
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 17941
  HEAP32[$43 >> 2] = $20; //@line 17942
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 17943
  HEAP32[$44 >> 2] = $22; //@line 17944
  sp = STACKTOP; //@line 17945
  return;
 }
 HEAP32[___async_retval >> 2] = $31; //@line 17949
 ___async_unwind = 0; //@line 17950
 HEAP32[$ReallocAsyncCtx >> 2] = 598; //@line 17951
 $32 = $ReallocAsyncCtx + 4 | 0; //@line 17952
 HEAP32[$32 >> 2] = $33; //@line 17953
 $34 = $ReallocAsyncCtx + 8 | 0; //@line 17954
 HEAP32[$34 >> 2] = $4; //@line 17955
 $35 = $ReallocAsyncCtx + 12 | 0; //@line 17956
 HEAP32[$35 >> 2] = $25; //@line 17957
 $36 = $ReallocAsyncCtx + 16 | 0; //@line 17958
 HEAP32[$36 >> 2] = $37; //@line 17959
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 17960
 HEAP32[$38 >> 2] = $10; //@line 17961
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 17962
 HEAP32[$39 >> 2] = $12; //@line 17963
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 17964
 HEAP32[$40 >> 2] = $14; //@line 17965
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 17966
 HEAP32[$41 >> 2] = $16; //@line 17967
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 17968
 HEAP32[$42 >> 2] = $18; //@line 17969
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 17970
 HEAP32[$43 >> 2] = $20; //@line 17971
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 17972
 HEAP32[$44 >> 2] = $22; //@line 17973
 sp = STACKTOP; //@line 17974
 return;
}
function _mbedtls_gcm_update($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$05966 = 0, $$06065 = 0, $$061 = 0, $$06264 = 0, $$163 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $46 = 0, $5 = 0, $67 = 0, $68 = 0, $75 = 0, $83 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4829
 STACKTOP = STACKTOP + 32 | 0; //@line 4830
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4830
 $4 = sp + 8 | 0; //@line 4831
 $5 = sp; //@line 4832
 HEAP32[$5 >> 2] = 0; //@line 4833
 if ($3 >>> 0 > $2 >>> 0) {
  if (($3 - $2 | 0) >>> 0 < $1 >>> 0) {
   $$0 = -20; //@line 4841
   STACKTOP = sp; //@line 4842
   return $$0 | 0; //@line 4842
  }
 }
 $11 = $0 + 328 | 0; //@line 4845
 $12 = $11; //@line 4846
 $14 = HEAP32[$12 >> 2] | 0; //@line 4848
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 4851
 $18 = _i64Add($14 | 0, $17 | 0, $1 | 0, 0) | 0; //@line 4852
 $19 = tempRet0; //@line 4853
 if ($19 >>> 0 < $17 >>> 0 | ($19 | 0) == ($17 | 0) & $18 >>> 0 < $14 >>> 0 | ($19 >>> 0 > 15 | ($19 | 0) == 15 & $18 >>> 0 > 4294967264)) {
  $$0 = -20; //@line 4866
  STACKTOP = sp; //@line 4867
  return $$0 | 0; //@line 4867
 }
 $30 = $11; //@line 4869
 HEAP32[$30 >> 2] = $18; //@line 4871
 HEAP32[$30 + 4 >> 2] = $19; //@line 4874
 if (!$1) {
  $$0 = 0; //@line 4877
  STACKTOP = sp; //@line 4878
  return $$0 | 0; //@line 4878
 }
 $35 = $0 + 360 | 0; //@line 4880
 $36 = $0 + 376 | 0; //@line 4881
 $37 = $0 + 392 | 0; //@line 4882
 $$05966 = $3; //@line 4883
 $$06065 = $2; //@line 4883
 $$06264 = $1; //@line 4883
 while (1) {
  $39 = $$06264 >>> 0 < 16 ? $$06264 : 16; //@line 4886
  $$061 = 16; //@line 4887
  do {
   if ($$061 >>> 0 <= 12) {
    break;
   }
   $$061 = $$061 + -1 | 0; //@line 4893
   $42 = $0 + 360 + $$061 | 0; //@line 4894
   $44 = (HEAP8[$42 >> 0] | 0) + 1 << 24 >> 24; //@line 4896
   HEAP8[$42 >> 0] = $44; //@line 4897
  } while (!($44 << 24 >> 24));
  $AsyncCtx = _emscripten_alloc_async_context(68, sp) | 0; //@line 4905
  $46 = _mbedtls_cipher_update($0, $35, 16, $4, $5) | 0; //@line 4906
  if (___async) {
   label = 10; //@line 4909
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4912
  if ($46 | 0) {
   $$0 = $46; //@line 4915
   label = 19; //@line 4916
   break;
  }
  if ($39 | 0) {
   $$163 = 0; //@line 4921
   do {
    $67 = $0 + 376 + $$163 | 0; //@line 4925
    $68 = $$06065 + $$163 | 0; //@line 4926
    if (!(HEAP32[$37 >> 2] | 0)) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ HEAP8[$68 >> 0]; //@line 4931
    }
    $75 = HEAP8[$68 >> 0] ^ HEAP8[$4 + $$163 >> 0]; //@line 4936
    HEAP8[$$05966 + $$163 >> 0] = $75; //@line 4938
    if ((HEAP32[$37 >> 2] | 0) == 1) {
     HEAP8[$67 >> 0] = HEAP8[$67 >> 0] ^ $75; //@line 4944
    }
    $$163 = $$163 + 1 | 0; //@line 4946
   } while ($$163 >>> 0 < $39 >>> 0);
  }
  _gcm_mult($0, $36, $36); //@line 4955
  $83 = $$06264 - $39 | 0; //@line 4956
  if (!$83) {
   $$0 = 0; //@line 4961
   label = 19; //@line 4962
   break;
  } else {
   $$05966 = $$05966 + $39 | 0; //@line 4965
   $$06065 = $$06065 + $39 | 0; //@line 4965
   $$06264 = $83; //@line 4965
  }
 }
 if ((label | 0) == 10) {
  HEAP32[$AsyncCtx >> 2] = 613; //@line 4969
  HEAP32[$AsyncCtx + 4 >> 2] = $39; //@line 4971
  HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 4973
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 4975
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 4977
  HEAP32[$AsyncCtx + 20 >> 2] = $36; //@line 4979
  HEAP32[$AsyncCtx + 24 >> 2] = $$06264; //@line 4981
  HEAP32[$AsyncCtx + 28 >> 2] = $$06065; //@line 4983
  HEAP32[$AsyncCtx + 32 >> 2] = $$05966; //@line 4985
  HEAP32[$AsyncCtx + 36 >> 2] = $37; //@line 4987
  HEAP32[$AsyncCtx + 40 >> 2] = $4; //@line 4989
  HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 4991
  HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 4993
  HEAP32[$AsyncCtx + 52 >> 2] = $1; //@line 4995
  HEAP32[$AsyncCtx + 56 >> 2] = $0; //@line 4997
  HEAP32[$AsyncCtx + 60 >> 2] = $35; //@line 4999
  HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 5001
  sp = STACKTOP; //@line 5002
  STACKTOP = sp; //@line 5003
  return 0; //@line 5003
 } else if ((label | 0) == 19) {
  STACKTOP = sp; //@line 5006
  return $$0 | 0; //@line 5006
 }
 return 0; //@line 5008
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_194($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 33013
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 33015
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 33017
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 33019
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 33021
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 33023
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 33025
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 33027
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 33029
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 33031
 $20 = HEAP8[$0 + 40 >> 0] & 1; //@line 33034
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 33036
 $24 = HEAP8[$0 + 48 >> 0] & 1; //@line 33039
 $26 = HEAP8[$0 + 49 >> 0] & 1; //@line 33042
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 33044
 L2 : do {
  if (!(HEAP8[$10 >> 0] | 0)) {
   do {
    if (!(HEAP8[$18 >> 0] | 0)) {
     $$182$off0 = $26; //@line 33053
     $$186$off0 = $24; //@line 33053
    } else {
     if (!(HEAP8[$16 >> 0] | 0)) {
      if (!(HEAP32[$22 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $24; //@line 33062
       $$283$off0 = 1; //@line 33062
       label = 13; //@line 33063
       break L2;
      } else {
       $$182$off0 = 1; //@line 33066
       $$186$off0 = $24; //@line 33066
       break;
      }
     }
     if ((HEAP32[$2 >> 2] | 0) == 1) {
      label = 18; //@line 33073
      break L2;
     }
     if (!(HEAP32[$22 >> 2] & 2)) {
      label = 18; //@line 33080
      break L2;
     } else {
      $$182$off0 = 1; //@line 33083
      $$186$off0 = 1; //@line 33083
     }
    }
   } while (0);
   $30 = $28 + 8 | 0; //@line 33087
   if ($30 >>> 0 < $14 >>> 0) {
    HEAP8[$16 >> 0] = 0; //@line 33090
    HEAP8[$18 >> 0] = 0; //@line 33091
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 33092
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $8, $4, $4, 1, $20); //@line 33093
    if (!___async) {
     ___async_unwind = 0; //@line 33096
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 736; //@line 33098
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 33100
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 33102
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 33104
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 33106
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 33108
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 33110
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 33112
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 33114
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 33116
    HEAP8[$ReallocAsyncCtx5 + 40 >> 0] = $20 & 1; //@line 33119
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 33121
    HEAP8[$ReallocAsyncCtx5 + 48 >> 0] = $$186$off0 & 1; //@line 33124
    HEAP8[$ReallocAsyncCtx5 + 49 >> 0] = $$182$off0 & 1; //@line 33127
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 33129
    sp = STACKTOP; //@line 33130
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 33133
    $$283$off0 = $$182$off0; //@line 33133
    label = 13; //@line 33134
   }
  } else {
   $$085$off0$reg2mem$0 = $24; //@line 33137
   $$283$off0 = $26; //@line 33137
   label = 13; //@line 33138
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$6 >> 2] = $4; //@line 33144
    $59 = $8 + 40 | 0; //@line 33145
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 33148
    if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$2 >> 2] | 0) == 2) {
      HEAP8[$10 >> 0] = 1; //@line 33156
      if ($$283$off0) {
       label = 18; //@line 33158
       break;
      } else {
       $67 = 4; //@line 33161
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 33168
   } else {
    $67 = 4; //@line 33170
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 33175
 }
 HEAP32[$12 >> 2] = $67; //@line 33177
 return;
}
function _initialize__async_cb_425($0) {
 $0 = $0 | 0;
 var $10 = 0, $101 = 0, $102 = 0, $103 = 0, $105 = 0, $12 = 0, $14 = 0, $16 = 0, $25 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $70 = 0, $76 = 0, $77 = 0, $78 = 0, $87 = 0, $88 = 0, $89 = 0, $91 = 0, $95 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31572
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31576
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31578
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31582
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31584
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31586
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31588
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31590
 if (($AsyncRetVal | 0) != (HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 32 >> 2] | 0)) {
  $25 = $AsyncRetVal - (HEAP32[$6 >> 2] | 0) & HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 31599
  HEAP32[$6 >> 2] = $AsyncRetVal; //@line 31600
  $26 = HEAP32[$10 >> 2] | 0; //@line 31601
  do {
   if (($26 | 0) == 1e6) {
    $101 = $25; //@line 31605
    $102 = 0; //@line 31605
   } else {
    $28 = HEAP8[$14 >> 0] | 0; //@line 31607
    $30 = ___muldi3($25 | 0, 0, 1e6, 0) | 0; //@line 31609
    $31 = tempRet0; //@line 31610
    if (!($28 << 24 >> 24)) {
     $64 = ___udivdi3($30 | 0, $31 | 0, $26 | 0, 0) | 0; //@line 31612
     $65 = tempRet0; //@line 31613
     $66 = ___muldi3($64 | 0, $65 | 0, $26 | 0, 0) | 0; //@line 31614
     $68 = _i64Subtract($30 | 0, $31 | 0, $66 | 0, tempRet0 | 0) | 0; //@line 31616
     $70 = $16; //@line 31618
     $76 = _i64Add($68 | 0, tempRet0 | 0, HEAP32[$70 >> 2] | 0, HEAP32[$70 + 4 >> 2] | 0) | 0; //@line 31624
     $77 = tempRet0; //@line 31625
     $78 = $16; //@line 31626
     HEAP32[$78 >> 2] = $76; //@line 31628
     HEAP32[$78 + 4 >> 2] = $77; //@line 31631
     if ($77 >>> 0 < 0 | ($77 | 0) == 0 & $76 >>> 0 < $26 >>> 0) {
      $101 = $64; //@line 31638
      $102 = $65; //@line 31638
      break;
     }
     $87 = _i64Add($64 | 0, $65 | 0, 1, 0) | 0; //@line 31641
     $88 = tempRet0; //@line 31642
     $89 = _i64Subtract($76 | 0, $77 | 0, $26 | 0, 0) | 0; //@line 31643
     $91 = $16; //@line 31645
     HEAP32[$91 >> 2] = $89; //@line 31647
     HEAP32[$91 + 4 >> 2] = tempRet0; //@line 31650
     $101 = $87; //@line 31651
     $102 = $88; //@line 31651
     break;
    } else {
     $32 = $28 & 255; //@line 31654
     $33 = _bitshift64Lshr($30 | 0, $31 | 0, $32 | 0) | 0; //@line 31655
     $34 = tempRet0; //@line 31656
     $35 = _bitshift64Shl($33 | 0, $34 | 0, $32 | 0) | 0; //@line 31657
     $37 = _i64Subtract($30 | 0, $31 | 0, $35 | 0, tempRet0 | 0) | 0; //@line 31659
     $39 = $16; //@line 31661
     $45 = _i64Add(HEAP32[$39 >> 2] | 0, HEAP32[$39 + 4 >> 2] | 0, $37 | 0, tempRet0 | 0) | 0; //@line 31667
     $46 = tempRet0; //@line 31668
     $47 = $16; //@line 31669
     HEAP32[$47 >> 2] = $45; //@line 31671
     HEAP32[$47 + 4 >> 2] = $46; //@line 31674
     if ($46 >>> 0 < 0 | ($46 | 0) == 0 & $45 >>> 0 < $26 >>> 0) {
      $101 = $33; //@line 31681
      $102 = $34; //@line 31681
      break;
     }
     $56 = _i64Add($33 | 0, $34 | 0, 1, 0) | 0; //@line 31684
     $57 = tempRet0; //@line 31685
     $58 = _i64Subtract($45 | 0, $46 | 0, $26 | 0, 0) | 0; //@line 31686
     $60 = $16; //@line 31688
     HEAP32[$60 >> 2] = $58; //@line 31690
     HEAP32[$60 + 4 >> 2] = tempRet0; //@line 31693
     $101 = $56; //@line 31694
     $102 = $57; //@line 31694
     break;
    }
   }
  } while (0);
  $95 = $12; //@line 31699
  $103 = _i64Add(HEAP32[$95 >> 2] | 0, HEAP32[$95 + 4 >> 2] | 0, $101 | 0, $102 | 0) | 0; //@line 31705
  $105 = $12; //@line 31707
  HEAP32[$105 >> 2] = $103; //@line 31709
  HEAP32[$105 + 4 >> 2] = tempRet0; //@line 31712
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(4) | 0; //@line 31714
 _schedule_interrupt($4); //@line 31715
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 624; //@line 31718
  sp = STACKTOP; //@line 31719
  return;
 }
 ___async_unwind = 0; //@line 31722
 HEAP32[$ReallocAsyncCtx5 >> 2] = 624; //@line 31723
 sp = STACKTOP; //@line 31724
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_113($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27581
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27583
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27585
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27587
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27589
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27591
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27593
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27595
 $17 = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 27598
 if (!$17) {
  $28 = $12 + 12 | 0; //@line 27602
  HEAP32[$12 >> 2] = 467; //@line 27603
  HEAP32[$12 + 4 >> 2] = 0; //@line 27605
  HEAP32[$12 + 8 >> 2] = $2; //@line 27607
  HEAP32[$28 >> 2] = 860; //@line 27608
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 27609
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1836 | 0, $12); //@line 27610
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 468; //@line 27613
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 27614
   HEAP32[$29 >> 2] = $28; //@line 27615
   $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 27616
   HEAP32[$30 >> 2] = $2; //@line 27617
   $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 27618
   HEAP32[$31 >> 2] = $4; //@line 27619
   $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 27620
   HEAP32[$32 >> 2] = $6; //@line 27621
   $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 27622
   HEAP32[$33 >> 2] = $12; //@line 27623
   $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 27624
   HEAP32[$34 >> 2] = $8; //@line 27625
   $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 27626
   HEAP32[$35 >> 2] = $10; //@line 27627
   sp = STACKTOP; //@line 27628
   return;
  }
  ___async_unwind = 0; //@line 27631
  HEAP32[$ReallocAsyncCtx6 >> 2] = 468; //@line 27632
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 27633
  HEAP32[$29 >> 2] = $28; //@line 27634
  $30 = $ReallocAsyncCtx6 + 8 | 0; //@line 27635
  HEAP32[$30 >> 2] = $2; //@line 27636
  $31 = $ReallocAsyncCtx6 + 12 | 0; //@line 27637
  HEAP32[$31 >> 2] = $4; //@line 27638
  $32 = $ReallocAsyncCtx6 + 16 | 0; //@line 27639
  HEAP32[$32 >> 2] = $6; //@line 27640
  $33 = $ReallocAsyncCtx6 + 20 | 0; //@line 27641
  HEAP32[$33 >> 2] = $12; //@line 27642
  $34 = $ReallocAsyncCtx6 + 24 | 0; //@line 27643
  HEAP32[$34 >> 2] = $8; //@line 27644
  $35 = $ReallocAsyncCtx6 + 28 | 0; //@line 27645
  HEAP32[$35 >> 2] = $10; //@line 27646
  sp = STACKTOP; //@line 27647
  return;
 } else {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 27651
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 27652
  FUNCTION_TABLE_vi[$20 & 1023]($14); //@line 27653
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 466; //@line 27656
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 27657
   HEAP32[$21 >> 2] = $2; //@line 27658
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 27659
   HEAP32[$22 >> 2] = $12; //@line 27660
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 27661
   HEAP32[$23 >> 2] = $6; //@line 27662
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 27663
   HEAP32[$24 >> 2] = $4; //@line 27664
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 27665
   HEAP32[$25 >> 2] = $8; //@line 27666
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 27667
   HEAP32[$26 >> 2] = $10; //@line 27668
   sp = STACKTOP; //@line 27669
   return;
  }
  ___async_unwind = 0; //@line 27672
  HEAP32[$ReallocAsyncCtx2 >> 2] = 466; //@line 27673
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 27674
  HEAP32[$21 >> 2] = $2; //@line 27675
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 27676
  HEAP32[$22 >> 2] = $12; //@line 27677
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 27678
  HEAP32[$23 >> 2] = $6; //@line 27679
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 27680
  HEAP32[$24 >> 2] = $4; //@line 27681
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 27682
  HEAP32[$25 >> 2] = $8; //@line 27683
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 27684
  HEAP32[$26 >> 2] = $10; //@line 27685
  sp = STACKTOP; //@line 27686
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31398
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31400
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31402
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31404
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 31409
 $$pre$i = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 31410
 $11 = $4 + 12 | 0; //@line 31411
 HEAP32[$11 >> 2] = $$pre$i; //@line 31412
 $12 = $10 & 1; //@line 31413
 if (!$$pre$i) {
  $22 = $2 + 12 | 0; //@line 31416
  HEAP32[$22 >> 2] = 0; //@line 31417
  $23 = $2 + 16 | 0; //@line 31418
  HEAP8[$23 >> 0] = $12; //@line 31419
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 31420
  $24 = _equeue_alloc($6, 20) | 0; //@line 31421
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 223; //@line 31424
   $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 31425
   HEAP32[$25 >> 2] = $22; //@line 31426
   $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 31427
   HEAP32[$26 >> 2] = $22; //@line 31428
   $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 31429
   HEAP32[$27 >> 2] = $11; //@line 31430
   $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 31431
   HEAP32[$28 >> 2] = $2; //@line 31432
   $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 31433
   HEAP32[$29 >> 2] = $4; //@line 31434
   $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 31435
   HEAP32[$30 >> 2] = $23; //@line 31436
   $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 31437
   HEAP32[$31 >> 2] = $6; //@line 31438
   sp = STACKTOP; //@line 31439
   return;
  }
  HEAP32[___async_retval >> 2] = $24; //@line 31443
  ___async_unwind = 0; //@line 31444
  HEAP32[$ReallocAsyncCtx7 >> 2] = 223; //@line 31445
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 31446
  HEAP32[$25 >> 2] = $22; //@line 31447
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 31448
  HEAP32[$26 >> 2] = $22; //@line 31449
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 31450
  HEAP32[$27 >> 2] = $11; //@line 31451
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 31452
  HEAP32[$28 >> 2] = $2; //@line 31453
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 31454
  HEAP32[$29 >> 2] = $4; //@line 31455
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 31456
  HEAP32[$30 >> 2] = $23; //@line 31457
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 31458
  HEAP32[$31 >> 2] = $6; //@line 31459
  sp = STACKTOP; //@line 31460
  return;
 } else {
  $15 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 31465
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 31466
  FUNCTION_TABLE_vii[$15 & 15]($2, $4); //@line 31467
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 31470
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 31471
   HEAP32[$16 >> 2] = $2; //@line 31472
   $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 31473
   HEAP32[$17 >> 2] = $4; //@line 31474
   $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 31475
   HEAP32[$18 >> 2] = $11; //@line 31476
   $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 31477
   HEAP8[$19 >> 0] = $12; //@line 31478
   $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 31479
   HEAP32[$20 >> 2] = $11; //@line 31480
   $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 31481
   HEAP32[$21 >> 2] = $6; //@line 31482
   sp = STACKTOP; //@line 31483
   return;
  }
  ___async_unwind = 0; //@line 31486
  HEAP32[$ReallocAsyncCtx2 >> 2] = 222; //@line 31487
  $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 31488
  HEAP32[$16 >> 2] = $2; //@line 31489
  $17 = $ReallocAsyncCtx2 + 8 | 0; //@line 31490
  HEAP32[$17 >> 2] = $4; //@line 31491
  $18 = $ReallocAsyncCtx2 + 12 | 0; //@line 31492
  HEAP32[$18 >> 2] = $11; //@line 31493
  $19 = $ReallocAsyncCtx2 + 16 | 0; //@line 31494
  HEAP8[$19 >> 0] = $12; //@line 31495
  $20 = $ReallocAsyncCtx2 + 20 | 0; //@line 31496
  HEAP32[$20 >> 2] = $11; //@line 31497
  $21 = $ReallocAsyncCtx2 + 24 | 0; //@line 31498
  HEAP32[$21 >> 2] = $6; //@line 31499
  sp = STACKTOP; //@line 31500
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30643
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30645
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30647
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30651
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30653
 $$pre$i = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 30654
 $11 = $2 + 12 | 0; //@line 30655
 HEAP32[$11 >> 2] = $$pre$i; //@line 30656
 if (!$$pre$i) {
  $21 = $4 + 12 | 0; //@line 30659
  HEAP32[$21 >> 2] = 0; //@line 30660
  $22 = $4 + 16 | 0; //@line 30661
  HEAP32[$22 >> 2] = $8; //@line 30662
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 30663
  $23 = _equeue_alloc($10, 20) | 0; //@line 30664
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 30667
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 30668
   HEAP32[$24 >> 2] = $11; //@line 30669
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 30670
   HEAP32[$25 >> 2] = $2; //@line 30671
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 30672
   HEAP32[$26 >> 2] = $21; //@line 30673
   $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 30674
   HEAP32[$27 >> 2] = $4; //@line 30675
   $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 30676
   HEAP32[$28 >> 2] = $21; //@line 30677
   $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 30678
   HEAP32[$29 >> 2] = $22; //@line 30679
   $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 30680
   HEAP32[$30 >> 2] = $10; //@line 30681
   sp = STACKTOP; //@line 30682
   return;
  }
  HEAP32[___async_retval >> 2] = $23; //@line 30686
  ___async_unwind = 0; //@line 30687
  HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 30688
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 30689
  HEAP32[$24 >> 2] = $11; //@line 30690
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 30691
  HEAP32[$25 >> 2] = $2; //@line 30692
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 30693
  HEAP32[$26 >> 2] = $21; //@line 30694
  $27 = $ReallocAsyncCtx7 + 16 | 0; //@line 30695
  HEAP32[$27 >> 2] = $4; //@line 30696
  $28 = $ReallocAsyncCtx7 + 20 | 0; //@line 30697
  HEAP32[$28 >> 2] = $21; //@line 30698
  $29 = $ReallocAsyncCtx7 + 24 | 0; //@line 30699
  HEAP32[$29 >> 2] = $22; //@line 30700
  $30 = $ReallocAsyncCtx7 + 28 | 0; //@line 30701
  HEAP32[$30 >> 2] = $10; //@line 30702
  sp = STACKTOP; //@line 30703
  return;
 } else {
  $14 = HEAP32[$$pre$i + 4 >> 2] | 0; //@line 30708
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 30709
  FUNCTION_TABLE_vii[$14 & 15]($4, $2); //@line 30710
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 268; //@line 30713
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 30714
   HEAP32[$15 >> 2] = $2; //@line 30715
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 30716
   HEAP32[$16 >> 2] = $4; //@line 30717
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 30718
   HEAP32[$17 >> 2] = $11; //@line 30719
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 30720
   HEAP32[$18 >> 2] = $8; //@line 30721
   $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 30722
   HEAP32[$19 >> 2] = $10; //@line 30723
   $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 30724
   HEAP32[$20 >> 2] = $11; //@line 30725
   sp = STACKTOP; //@line 30726
   return;
  }
  ___async_unwind = 0; //@line 30729
  HEAP32[$ReallocAsyncCtx2 >> 2] = 268; //@line 30730
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 30731
  HEAP32[$15 >> 2] = $2; //@line 30732
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 30733
  HEAP32[$16 >> 2] = $4; //@line 30734
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 30735
  HEAP32[$17 >> 2] = $11; //@line 30736
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 30737
  HEAP32[$18 >> 2] = $8; //@line 30738
  $19 = $ReallocAsyncCtx2 + 20 | 0; //@line 30739
  HEAP32[$19 >> 2] = $10; //@line 30740
  $20 = $ReallocAsyncCtx2 + 24 | 0; //@line 30741
  HEAP32[$20 >> 2] = $11; //@line 30742
  sp = STACKTOP; //@line 30743
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_193($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32857
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32859
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32861
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32863
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32865
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 32868
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32870
 $15 = $12 + 24 | 0; //@line 32873
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 32878
   if (!($18 & 2)) {
    $21 = $4 + 36 | 0; //@line 32882
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $4 + 54 | 0; //@line 32889
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 32900
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 32901
      if (!___async) {
       ___async_unwind = 0; //@line 32904
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 740; //@line 32906
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 32908
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 32910
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 32912
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 32914
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $4; //@line 32916
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $6; //@line 32918
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $8; //@line 32920
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $10 & 1; //@line 32923
      sp = STACKTOP; //@line 32924
      return;
     }
     $36 = $4 + 24 | 0; //@line 32927
     $37 = $4 + 54 | 0; //@line 32928
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 32943
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 32944
     if (!___async) {
      ___async_unwind = 0; //@line 32947
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 739; //@line 32949
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 32951
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 32953
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 32955
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 32957
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 32959
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $4; //@line 32961
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 32963
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 32965
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $10 & 1; //@line 32968
     sp = STACKTOP; //@line 32969
     return;
    }
   }
   $24 = $4 + 54 | 0; //@line 32973
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 32977
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 32978
    if (!___async) {
     ___async_unwind = 0; //@line 32981
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 738; //@line 32983
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 32985
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 32987
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 32989
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $4; //@line 32991
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 32993
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 32995
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $10 & 1; //@line 32998
    sp = STACKTOP; //@line 32999
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_20($0) {
 $0 = $0 | 0;
 var $$pr = 0, $$pre17 = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20141
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20143
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20145
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20147
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20149
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20151
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20153
 $$pre17 = HEAP32[$2 >> 2] | 0; //@line 20154
 if ($$pre17 | 0) {
  $15 = HEAP32[$$pre17 + 4 >> 2] | 0; //@line 20158
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 20159
  FUNCTION_TABLE_vii[$15 & 15]($8, $10); //@line 20160
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 20163
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 20164
   HEAP32[$16 >> 2] = $2; //@line 20165
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 20166
   HEAP32[$17 >> 2] = $4; //@line 20167
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 20168
   HEAP32[$18 >> 2] = $6; //@line 20169
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 20170
   HEAP32[$19 >> 2] = $12; //@line 20171
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 20172
   HEAP32[$20 >> 2] = $10; //@line 20173
   sp = STACKTOP; //@line 20174
   return;
  }
  ___async_unwind = 0; //@line 20177
  HEAP32[$ReallocAsyncCtx6 >> 2] = 358; //@line 20178
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 20179
  HEAP32[$16 >> 2] = $2; //@line 20180
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 20181
  HEAP32[$17 >> 2] = $4; //@line 20182
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 20183
  HEAP32[$18 >> 2] = $6; //@line 20184
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 20185
  HEAP32[$19 >> 2] = $12; //@line 20186
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 20187
  HEAP32[$20 >> 2] = $10; //@line 20188
  sp = STACKTOP; //@line 20189
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 20192
 $$pr = HEAP32[$2 >> 2] | 0; //@line 20193
 if (!$$pr) {
  $27 = $12 + 12 | 0; //@line 20196
  HEAP32[$27 >> 2] = 0; //@line 20197
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 20198
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $12); //@line 20199
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 20202
   $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 20203
   HEAP32[$28 >> 2] = $27; //@line 20204
   $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 20205
   HEAP32[$29 >> 2] = $12; //@line 20206
   sp = STACKTOP; //@line 20207
   return;
  }
  ___async_unwind = 0; //@line 20210
  HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 20211
  $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 20212
  HEAP32[$28 >> 2] = $27; //@line 20213
  $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 20214
  HEAP32[$29 >> 2] = $12; //@line 20215
  sp = STACKTOP; //@line 20216
  return;
 } else {
  $23 = HEAP32[$$pr + 4 >> 2] | 0; //@line 20220
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 20221
  FUNCTION_TABLE_vii[$23 & 15]($12, $10); //@line 20222
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 20225
   $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 20226
   HEAP32[$24 >> 2] = $2; //@line 20227
   $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 20228
   HEAP32[$25 >> 2] = $6; //@line 20229
   $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 20230
   HEAP32[$26 >> 2] = $12; //@line 20231
   sp = STACKTOP; //@line 20232
   return;
  }
  ___async_unwind = 0; //@line 20235
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 20236
  $24 = $ReallocAsyncCtx7 + 4 | 0; //@line 20237
  HEAP32[$24 >> 2] = $2; //@line 20238
  $25 = $ReallocAsyncCtx7 + 8 | 0; //@line 20239
  HEAP32[$25 >> 2] = $6; //@line 20240
  $26 = $ReallocAsyncCtx7 + 12 | 0; //@line 20241
  HEAP32[$26 >> 2] = $12; //@line 20242
  sp = STACKTOP; //@line 20243
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17475
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 17480
 } else {
  $9 = $1 + 52 | 0; //@line 17482
  $10 = HEAP8[$9 >> 0] | 0; //@line 17483
  $11 = $1 + 53 | 0; //@line 17484
  $12 = HEAP8[$11 >> 0] | 0; //@line 17485
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 17488
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 17489
  HEAP8[$9 >> 0] = 0; //@line 17490
  HEAP8[$11 >> 0] = 0; //@line 17491
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 17492
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 17493
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 734; //@line 17496
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 17498
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 17500
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 17502
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 17504
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 17506
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 17508
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 17510
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 17512
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 17514
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 17516
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 17519
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 17521
   sp = STACKTOP; //@line 17522
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17525
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 17530
    $32 = $0 + 8 | 0; //@line 17531
    $33 = $1 + 54 | 0; //@line 17532
    $$0 = $0 + 24 | 0; //@line 17533
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 17566
     HEAP8[$11 >> 0] = 0; //@line 17567
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 17568
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 17569
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17574
     $62 = $$0 + 8 | 0; //@line 17575
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 17578
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 735; //@line 17583
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 17585
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 17587
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 17589
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 17591
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 17593
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 17595
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 17597
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 17599
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 17601
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 17603
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 17605
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 17607
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 17609
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 17612
    sp = STACKTOP; //@line 17613
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 17617
  HEAP8[$11 >> 0] = $12; //@line 17618
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13813
      $10 = HEAP32[$9 >> 2] | 0; //@line 13814
      HEAP32[$2 >> 2] = $9 + 4; //@line 13816
      HEAP32[$0 >> 2] = $10; //@line 13817
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13833
      $17 = HEAP32[$16 >> 2] | 0; //@line 13834
      HEAP32[$2 >> 2] = $16 + 4; //@line 13836
      $20 = $0; //@line 13839
      HEAP32[$20 >> 2] = $17; //@line 13841
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 13844
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13860
      $30 = HEAP32[$29 >> 2] | 0; //@line 13861
      HEAP32[$2 >> 2] = $29 + 4; //@line 13863
      $31 = $0; //@line 13864
      HEAP32[$31 >> 2] = $30; //@line 13866
      HEAP32[$31 + 4 >> 2] = 0; //@line 13869
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 13885
      $41 = $40; //@line 13886
      $43 = HEAP32[$41 >> 2] | 0; //@line 13888
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 13891
      HEAP32[$2 >> 2] = $40 + 8; //@line 13893
      $47 = $0; //@line 13894
      HEAP32[$47 >> 2] = $43; //@line 13896
      HEAP32[$47 + 4 >> 2] = $46; //@line 13899
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13915
      $57 = HEAP32[$56 >> 2] | 0; //@line 13916
      HEAP32[$2 >> 2] = $56 + 4; //@line 13918
      $59 = ($57 & 65535) << 16 >> 16; //@line 13920
      $62 = $0; //@line 13923
      HEAP32[$62 >> 2] = $59; //@line 13925
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 13928
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13944
      $72 = HEAP32[$71 >> 2] | 0; //@line 13945
      HEAP32[$2 >> 2] = $71 + 4; //@line 13947
      $73 = $0; //@line 13949
      HEAP32[$73 >> 2] = $72 & 65535; //@line 13951
      HEAP32[$73 + 4 >> 2] = 0; //@line 13954
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13970
      $83 = HEAP32[$82 >> 2] | 0; //@line 13971
      HEAP32[$2 >> 2] = $82 + 4; //@line 13973
      $85 = ($83 & 255) << 24 >> 24; //@line 13975
      $88 = $0; //@line 13978
      HEAP32[$88 >> 2] = $85; //@line 13980
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 13983
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 13999
      $98 = HEAP32[$97 >> 2] | 0; //@line 14000
      HEAP32[$2 >> 2] = $97 + 4; //@line 14002
      $99 = $0; //@line 14004
      HEAP32[$99 >> 2] = $98 & 255; //@line 14006
      HEAP32[$99 + 4 >> 2] = 0; //@line 14009
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 14025
      $109 = +HEAPF64[$108 >> 3]; //@line 14026
      HEAP32[$2 >> 2] = $108 + 8; //@line 14028
      HEAPF64[$0 >> 3] = $109; //@line 14029
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 14045
      $116 = +HEAPF64[$115 >> 3]; //@line 14046
      HEAP32[$2 >> 2] = $115 + 8; //@line 14048
      HEAPF64[$0 >> 3] = $116; //@line 14049
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_396($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $24 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $41 = 0, $44 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29174
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29180
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29182
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 29184
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29186
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29188
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29190
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  if (HEAP8[(HEAP32[$0 + 8 >> 2] | 0) + 14 >> 0] | 0) {
   $21 = HEAP32[$6 >> 2] | 0; //@line 29197
   $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 16 >> 2] | 0; //@line 29200
   $29 = HEAP32[$8 + 8 >> 2] & 65535; //@line 29205
   $32 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 29208
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(24) | 0; //@line 29209
   FUNCTION_TABLE_viiiiiiiiiiiiiii[$24 & 1]($21, 0, 5e4, ($10 & 255) * 1e3 | 0, 0, 83333, 5, $29, 0, 0, 1, 0, 0, 0, $32); //@line 29210
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 522; //@line 29213
    $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29214
    HEAP32[$33 >> 2] = $8; //@line 29215
    $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29216
    HEAP32[$34 >> 2] = $12; //@line 29217
    $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29218
    HEAP32[$35 >> 2] = $14; //@line 29219
    $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29220
    HEAP32[$36 >> 2] = $16; //@line 29221
    $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 29222
    HEAP32[$37 >> 2] = $6; //@line 29223
    sp = STACKTOP; //@line 29224
    return;
   }
   ___async_unwind = 0; //@line 29227
   HEAP32[$ReallocAsyncCtx6 >> 2] = 522; //@line 29228
   $33 = $ReallocAsyncCtx6 + 4 | 0; //@line 29229
   HEAP32[$33 >> 2] = $8; //@line 29230
   $34 = $ReallocAsyncCtx6 + 8 | 0; //@line 29231
   HEAP32[$34 >> 2] = $12; //@line 29232
   $35 = $ReallocAsyncCtx6 + 12 | 0; //@line 29233
   HEAP32[$35 >> 2] = $14; //@line 29234
   $36 = $ReallocAsyncCtx6 + 16 | 0; //@line 29235
   HEAP32[$36 >> 2] = $16; //@line 29236
   $37 = $ReallocAsyncCtx6 + 20 | 0; //@line 29237
   HEAP32[$37 >> 2] = $6; //@line 29238
   sp = STACKTOP; //@line 29239
   return;
  }
 }
 $38 = HEAP32[$6 >> 2] | 0; //@line 29243
 $41 = HEAP32[(HEAP32[$38 >> 2] | 0) + 16 >> 2] | 0; //@line 29246
 $44 = HEAPU8[$8 + 2 >> 0] | 0; //@line 29249
 $48 = HEAP32[$8 + 8 >> 2] & 65535; //@line 29253
 $51 = (HEAP8[$8 + 18 >> 0] | 0) != 0; //@line 29256
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(24) | 0; //@line 29257
 FUNCTION_TABLE_viiiiiiiiiiiiiii[$41 & 1]($38, 1, $44, $10 & 255, 1, 0, 8, $48, 0, 0, 0, 0, 0, 1, $51); //@line 29258
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 523; //@line 29261
  $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 29262
  HEAP32[$52 >> 2] = $8; //@line 29263
  $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 29264
  HEAP32[$53 >> 2] = $12; //@line 29265
  $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 29266
  HEAP32[$54 >> 2] = $14; //@line 29267
  $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 29268
  HEAP32[$55 >> 2] = $16; //@line 29269
  $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 29270
  HEAP32[$56 >> 2] = $6; //@line 29271
  sp = STACKTOP; //@line 29272
  return;
 }
 ___async_unwind = 0; //@line 29275
 HEAP32[$ReallocAsyncCtx7 >> 2] = 523; //@line 29276
 $52 = $ReallocAsyncCtx7 + 4 | 0; //@line 29277
 HEAP32[$52 >> 2] = $8; //@line 29278
 $53 = $ReallocAsyncCtx7 + 8 | 0; //@line 29279
 HEAP32[$53 >> 2] = $12; //@line 29280
 $54 = $ReallocAsyncCtx7 + 12 | 0; //@line 29281
 HEAP32[$54 >> 2] = $14; //@line 29282
 $55 = $ReallocAsyncCtx7 + 16 | 0; //@line 29283
 HEAP32[$55 >> 2] = $16; //@line 29284
 $56 = $ReallocAsyncCtx7 + 20 | 0; //@line 29285
 HEAP32[$56 >> 2] = $6; //@line 29286
 sp = STACKTOP; //@line 29287
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $16 = 0, $2 = 0, $20 = 0, $31 = 0, $42 = 0, $45 = 0, $51 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13436
 $2 = $0 + 2380 | 0; //@line 13437
 do {
  if ((HEAP32[$2 >> 2] | 0) == 2) {
   $AsyncCtx11 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13442
   __ZN7LoRaMac15open_rx2_windowEv($0); //@line 13443
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 400; //@line 13446
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 13448
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 13450
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 13452
    sp = STACKTOP; //@line 13453
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 13456
    break;
   }
  } else {
   $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13461
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 13462
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 401; //@line 13465
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 13467
    HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 13469
    HEAP32[$AsyncCtx15 + 12 >> 2] = $2; //@line 13471
    sp = STACKTOP; //@line 13472
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 13475
    break;
   }
  }
 } while (0);
 do {
  if (!(HEAP8[$0 + 1175 >> 0] | 0)) {
   HEAP32[$0 + 2056 >> 2] = 0; //@line 13486
   HEAP32[$0 + 2092 >> 2] = 4; //@line 13488
  } else {
   $16 = (__ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0) - $1 | 0; //@line 13491
   $20 = (HEAP32[$0 + 1772 >> 2] | 0) - $16 | 0; //@line 13495
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13496
   __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1816 | 0, $20); //@line 13497
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 402; //@line 13500
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 13502
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 13504
    HEAP32[$AsyncCtx7 + 12 >> 2] = $16; //@line 13506
    HEAP32[$AsyncCtx7 + 16 >> 2] = $0; //@line 13508
    HEAP32[$AsyncCtx7 + 20 >> 2] = $1; //@line 13510
    sp = STACKTOP; //@line 13511
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13514
   do {
    if ((HEAP32[$2 >> 2] | 0) != 2) {
     $31 = (HEAP32[$0 + 1776 >> 2] | 0) - $16 | 0; //@line 13522
     $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13523
     __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1836 | 0, $31); //@line 13524
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 403; //@line 13527
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 13529
      HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 13531
      HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 13533
      HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 13535
      sp = STACKTOP; //@line 13536
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13539
      break;
     }
    }
   } while (0);
   if (HEAP8[$0 + 1177 >> 0] | 0) {
    $42 = (HEAP32[$0 + 1776 >> 2] | 0) - $16 | 0; //@line 13551
    $45 = $42 + (__ZN7LoRaPHY15get_ack_timeoutEv($0 + 4 | 0) | 0) | 0; //@line 13554
    $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13555
    __ZN18LoRaWANTimeHandler5startER13timer_event_tj($0, $0 + 1856 | 0, $45); //@line 13556
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 404; //@line 13559
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13561
     HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 13563
     sp = STACKTOP; //@line 13564
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 13567
     break;
    }
   }
  }
 } while (0);
 $51 = HEAP8[$0 + 1182 >> 0] | 0; //@line 13574
 HEAP8[$0 + 1183 >> 0] = $51; //@line 13576
 __ZN7LoRaPHY16set_last_tx_doneEhbj($0 + 4 | 0, $51, (HEAP8[$0 + 2376 >> 0] | 0) != 0, $1); //@line 13581
 HEAP32[$0 + 1780 >> 2] = $1; //@line 13583
 return;
}
function __ZN7LoRaMac15send_ongoing_txEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15817
 STACKTOP = STACKTOP + 16 | 0; //@line 15818
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15818
 $1 = sp + 1 | 0; //@line 15819
 $2 = sp; //@line 15820
 HEAP8[$0 + 1180 >> 0] = 0; //@line 15822
 $4 = $0 + 1877 | 0; //@line 15823
 $5 = HEAP8[$4 >> 0] | 0; //@line 15824
 $6 = $0 + 4 | 0; //@line 15825
 if ($5 << 24 >> 24 > (__ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0) << 24 >> 24) {
  $21 = $5; //@line 15829
 } else {
  $21 = __ZN7LoRaPHY23get_minimum_tx_datarateEv($6) | 0; //@line 15832
 }
 HEAP8[$2 >> 0] = 0; //@line 15834
 $10 = $0 + 2052 | 0; //@line 15835
 HEAP32[$10 >> 2] = 0; //@line 15836
 HEAP32[$10 + 4 >> 2] = 0; //@line 15836
 HEAP32[$10 + 8 >> 2] = 0; //@line 15836
 HEAP32[$10 + 12 >> 2] = 0; //@line 15836
 HEAP32[$10 + 16 >> 2] = 0; //@line 15836
 HEAP32[$10 + 20 >> 2] = 0; //@line 15836
 HEAP32[$0 + 2056 >> 2] = 1; //@line 15838
 HEAP8[$0 + 1699 >> 0] = 1; //@line 15840
 $13 = $0 + 1698 | 0; //@line 15841
 HEAP8[$13 >> 0] = 1; //@line 15842
 $14 = $0 + 2108 | 0; //@line 15843
 switch (HEAP32[$14 >> 2] | 0) {
 case 0:
  {
   HEAP8[$2 >> 0] = 64; //@line 15847
   break;
  }
 case 1:
  {
   HEAP8[$2 >> 0] = -128; //@line 15851
   HEAP8[$13 >> 0] = HEAP8[$0 + 2114 >> 0] | 0; //@line 15854
   break;
  }
 case 3:
  {
   HEAP8[$2 >> 0] = -32; //@line 15858
   break;
  }
 default:
  {
   $$0 = -1002; //@line 15862
   STACKTOP = sp; //@line 15863
   return $$0 | 0; //@line 15863
  }
 }
 $18 = $0 + 1936 | 0; //@line 15866
 do {
  if (!(HEAP8[$18 >> 0] | 0)) {
   if (__ZN7LoRaPHY18verify_tx_datarateEhb($6, $21, 0) | 0) {
    HEAP8[$4 >> 0] = $21; //@line 15873
    $28 = HEAP8[$18 >> 0] << 7 & 255; //@line 15876
    break;
   } else {
    $$0 = -1003; //@line 15879
    STACKTOP = sp; //@line 15880
    return $$0 | 0; //@line 15880
   }
  } else {
   $28 = -128; //@line 15883
  }
 } while (0);
 $24 = HEAP8[$0 + 2112 >> 0] | 0; //@line 15887
 $27 = HEAP16[$0 + 2370 >> 1] | 0; //@line 15890
 HEAP8[$1 >> 0] = $28; //@line 15891
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 15892
 $29 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $1, $24, $0 + 2115 | 0, $27) | 0; //@line 15893
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 449; //@line 15896
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15898
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 15900
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 15902
  HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 15904
  sp = STACKTOP; //@line 15905
  STACKTOP = sp; //@line 15906
  return 0; //@line 15906
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15908
 if ($29 | 0) {
  $$0 = $29; //@line 15911
  STACKTOP = sp; //@line 15912
  return $$0 | 0; //@line 15912
 }
 HEAP8[$0 + 2063 >> 0] = 0; //@line 15915
 HEAP8[$0 + 2062 >> 0] = 0; //@line 15917
 HEAP32[$0 + 2068 >> 2] = HEAP32[$0 + 1760 >> 2]; //@line 15921
 $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15922
 $40 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15923
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 450; //@line 15926
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 15928
  HEAP32[$AsyncCtx2 + 8 >> 2] = $14; //@line 15930
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 15932
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 15934
  sp = STACKTOP; //@line 15935
  STACKTOP = sp; //@line 15936
  return 0; //@line 15936
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15938
 if ($40 | 0) {
  $$0 = $40; //@line 15941
  STACKTOP = sp; //@line 15942
  return $$0 | 0; //@line 15942
 }
 HEAP32[$0 + 2052 >> 2] = HEAP32[$14 >> 2]; //@line 15946
 $$0 = 0; //@line 15947
 STACKTOP = sp; //@line 15948
 return $$0 | 0; //@line 15948
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$ph = 0, $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24904
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24906
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24908
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24910
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24912
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24914
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24916
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24918
 if (HEAP8[___async_retval >> 0] & 1) {
  $$ph = $2; //@line 24923
 } else {
  $20 = $2 + 1 | 0; //@line 24925
  if (($20 | 0) < (HEAPU8[$6 >> 0] | 0 | 0)) {
   $18 = HEAP32[(HEAP32[$8 >> 2] | 0) + 76 >> 2] | 0; //@line 24932
   $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 24934
   $21 = FUNCTION_TABLE_iiii[$18 & 31]($10, $12, $20 & 255) | 0; //@line 24935
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 533; //@line 24938
    $22 = $ReallocAsyncCtx + 4 | 0; //@line 24939
    HEAP32[$22 >> 2] = $20; //@line 24940
    $23 = $ReallocAsyncCtx + 8 | 0; //@line 24941
    HEAP32[$23 >> 2] = $4; //@line 24942
    $24 = $ReallocAsyncCtx + 12 | 0; //@line 24943
    HEAP32[$24 >> 2] = $6; //@line 24944
    $25 = $ReallocAsyncCtx + 16 | 0; //@line 24945
    HEAP32[$25 >> 2] = $8; //@line 24946
    $26 = $ReallocAsyncCtx + 20 | 0; //@line 24947
    HEAP32[$26 >> 2] = $10; //@line 24948
    $27 = $ReallocAsyncCtx + 24 | 0; //@line 24949
    HEAP32[$27 >> 2] = $12; //@line 24950
    $28 = $ReallocAsyncCtx + 28 | 0; //@line 24951
    HEAP32[$28 >> 2] = $14; //@line 24952
    sp = STACKTOP; //@line 24953
    return;
   }
   HEAP8[___async_retval >> 0] = $21 & 1; //@line 24958
   ___async_unwind = 0; //@line 24959
   HEAP32[$ReallocAsyncCtx >> 2] = 533; //@line 24960
   $22 = $ReallocAsyncCtx + 4 | 0; //@line 24961
   HEAP32[$22 >> 2] = $20; //@line 24962
   $23 = $ReallocAsyncCtx + 8 | 0; //@line 24963
   HEAP32[$23 >> 2] = $4; //@line 24964
   $24 = $ReallocAsyncCtx + 12 | 0; //@line 24965
   HEAP32[$24 >> 2] = $6; //@line 24966
   $25 = $ReallocAsyncCtx + 16 | 0; //@line 24967
   HEAP32[$25 >> 2] = $8; //@line 24968
   $26 = $ReallocAsyncCtx + 20 | 0; //@line 24969
   HEAP32[$26 >> 2] = $10; //@line 24970
   $27 = $ReallocAsyncCtx + 24 | 0; //@line 24971
   HEAP32[$27 >> 2] = $12; //@line 24972
   $28 = $ReallocAsyncCtx + 28 | 0; //@line 24973
   HEAP32[$28 >> 2] = $14; //@line 24974
   sp = STACKTOP; //@line 24975
   return;
  } else {
   $$ph = -1; //@line 24978
  }
 }
 $$pre = HEAP32[$4 >> 2] | 0; //@line 24981
 $$ = ($$ph | 0) < 0 ? 6 : 7; //@line 24983
 $35 = HEAP32[$10 + 4 >> 2] | 0; //@line 24985
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 64 >> 2] | 0; //@line 24988
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 24989
 $39 = FUNCTION_TABLE_iii[$38 & 31]($35, $$pre) | 0; //@line 24990
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 534; //@line 24993
  $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 24994
  HEAP8[$40 >> 0] = $$; //@line 24995
  $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 24996
  HEAP32[$41 >> 2] = $14; //@line 24997
  $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 24998
  HEAP32[$42 >> 2] = $10; //@line 24999
  sp = STACKTOP; //@line 25000
  return;
 }
 HEAP8[___async_retval >> 0] = $39 & 1; //@line 25005
 ___async_unwind = 0; //@line 25006
 HEAP32[$ReallocAsyncCtx2 >> 2] = 534; //@line 25007
 $40 = $ReallocAsyncCtx2 + 4 | 0; //@line 25008
 HEAP8[$40 >> 0] = $$; //@line 25009
 $41 = $ReallocAsyncCtx2 + 8 | 0; //@line 25010
 HEAP32[$41 >> 2] = $14; //@line 25011
 $42 = $ReallocAsyncCtx2 + 12 | 0; //@line 25012
 HEAP32[$42 >> 2] = $10; //@line 25013
 sp = STACKTOP; //@line 25014
 return;
}
function __ZN12radio_eventsD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $44 = 0, $47 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5786
 $2 = HEAP32[$0 + 108 >> 2] | 0; //@line 5788
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 5794
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5795
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 96 | 0); //@line 5796
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 173; //@line 5799
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5801
    sp = STACKTOP; //@line 5802
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5805
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 92 >> 2] | 0; //@line 5811
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 5817
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5818
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 80 | 0); //@line 5819
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 174; //@line 5822
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5824
    sp = STACKTOP; //@line 5825
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5828
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 76 >> 2] | 0; //@line 5834
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 5840
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5841
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 64 | 0); //@line 5842
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 175; //@line 5845
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5847
    sp = STACKTOP; //@line 5848
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5851
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 60 >> 2] | 0; //@line 5857
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 5863
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5864
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 48 | 0); //@line 5865
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 176; //@line 5868
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 5870
    sp = STACKTOP; //@line 5871
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 5874
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 44 >> 2] | 0; //@line 5880
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 5886
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5887
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 32 | 0); //@line 5888
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 177; //@line 5891
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 5893
    sp = STACKTOP; //@line 5894
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 5897
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 28 >> 2] | 0; //@line 5903
 do {
  if ($37 | 0) {
   $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 5909
   $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5910
   FUNCTION_TABLE_vi[$41 & 1023]($0 + 16 | 0); //@line 5911
   if (___async) {
    HEAP32[$AsyncCtx19 >> 2] = 178; //@line 5914
    HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 5916
    sp = STACKTOP; //@line 5917
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx19 | 0); //@line 5920
    break;
   }
  }
 } while (0);
 $44 = HEAP32[$0 + 12 >> 2] | 0; //@line 5926
 if (!$44) {
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 5932
 $AsyncCtx23 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5933
 FUNCTION_TABLE_vi[$47 & 1023]($0); //@line 5934
 if (___async) {
  HEAP32[$AsyncCtx23 >> 2] = 179; //@line 5937
  sp = STACKTOP; //@line 5938
  return;
 }
 _emscripten_free_async_context($AsyncCtx23 | 0); //@line 5941
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb($0, $1, $2, $3, $trunc, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $trunc = $trunc | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $$1 = 0, $24 = 0, $25 = 0, $28 = 0, $32 = 0, $38 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11419
 STACKTOP = STACKTOP + 32 | 0; //@line 11420
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11420
 $vararg_buffer3 = sp + 16 | 0; //@line 11421
 $vararg_buffer1 = sp + 8 | 0; //@line 11422
 $vararg_buffer = sp; //@line 11423
 if (!(($2 | 0) != 0 | $4)) {
  $$1 = -1003; //@line 11427
  STACKTOP = sp; //@line 11428
  return $$1 | 0; //@line 11428
 }
 $7 = $0 + 2909 | 0; //@line 11430
 do {
  if (HEAP8[$7 >> 0] | 0) {
   if (HEAP32[$0 + 2496 >> 2] | 0) {
    HEAP8[$7 >> 0] = 1; //@line 11439
    if (!(HEAP32[$0 + 2528 >> 2] | 0)) {
     _mbed_tracef(2, 12021, 12537, $vararg_buffer); //@line 11444
     break;
    } else {
     __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 11447
     break;
    }
   }
  }
 } while (0);
 if (!(HEAP8[$0 + 2548 >> 0] | 0)) {
  $$1 = -1017; //@line 11457
  STACKTOP = sp; //@line 11458
  return $$1 | 0; //@line 11458
 }
 if (__ZN7LoRaMac10tx_ongoingEv($0) | 0) {
  $$1 = -1001; //@line 11462
  STACKTOP = sp; //@line 11463
  return $$1 | 0; //@line 11463
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  $$1 = -1009; //@line 11467
  STACKTOP = sp; //@line 11468
  return $$1 | 0; //@line 11468
 }
 if (!($1 << 24 >> 24 != 0 | $5)) {
  _mbed_tracef(2, 12021, 12594, $vararg_buffer1); //@line 11473
  $$1 = -1015; //@line 11474
  STACKTOP = sp; //@line 11475
  return $$1 | 0; //@line 11475
 }
 HEAP8[$0 + 2908 >> 0] = $1; //@line 11478
 switch ($trunc & 15) {
 case 8:
 case 2:
 case 1:
  {
   break;
  }
 default:
  {
   _mbed_tracef(2, 12021, 12631, $vararg_buffer3); //@line 11485
   $$1 = -1003; //@line 11486
   STACKTOP = sp; //@line 11487
   return $$1 | 0; //@line 11487
  }
 }
 $24 = HEAP8[$0 + 2902 >> 0] | 0; //@line 11491
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11492
 $25 = __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $trunc, $24) | 0; //@line 11493
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 368; //@line 11496
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 11498
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 11500
  sp = STACKTOP; //@line 11501
  STACKTOP = sp; //@line 11502
  return 0; //@line 11502
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11504
 $28 = $0 + 2496 | 0; //@line 11505
 switch (HEAP32[$28 >> 2] | 0) {
 case 5:
 case 2:
  {
   label = 18; //@line 11509
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2) {
    label = 18; //@line 11516
   } else {
    $$0 = -1e3; //@line 11518
   }
  }
 }
 if ((label | 0) == 18) {
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 11523
  $32 = __ZN7LoRaMac15send_ongoing_txEv($0) | 0; //@line 11524
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 369; //@line 11527
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11529
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11531
   HEAP32[$AsyncCtx + 12 >> 2] = $28; //@line 11533
   HEAP16[$AsyncCtx + 16 >> 1] = $25; //@line 11535
   sp = STACKTOP; //@line 11536
   STACKTOP = sp; //@line 11537
   return 0; //@line 11537
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11539
  if (!$32) {
   $38 = $0 + 2904 | 0; //@line 11542
   HEAP32[$38 >> 2] = HEAP32[$38 >> 2] & -18 | 1; //@line 11546
   __ZN7LoRaMac14set_tx_ongoingEb($0, 1); //@line 11547
   HEAP32[$28 >> 2] = 8; //@line 11548
   $$0 = 0; //@line 11549
  } else {
   $$0 = $32; //@line 11551
  }
 }
 $$1 = ($$0 | 0) == 0 ? $25 : $$0 & 65535; //@line 11557
 STACKTOP = sp; //@line 11558
 return $$1 | 0; //@line 11558
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_187($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32468
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32474
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32476
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32480
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32482
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32484
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 32486
 switch (HEAP32[$6 >> 2] | 0) {
 case 0:
  {
   _mbed_tracef(16, 12709, 13309, $8); //@line 32490
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 32492
   __ZN7LoRaPHY18put_radio_to_sleepEv($12 + 4 | 0); //@line 32493
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 453; //@line 32496
    $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 32497
    HEAP32[$18 >> 2] = $6; //@line 32498
    $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 32499
    HEAP32[$19 >> 2] = $14; //@line 32500
    $20 = $ReallocAsyncCtx5 + 12 | 0; //@line 32501
    HEAP32[$20 >> 2] = $16; //@line 32502
    $21 = $ReallocAsyncCtx5 + 16 | 0; //@line 32503
    HEAP32[$21 >> 2] = $12; //@line 32504
    sp = STACKTOP; //@line 32505
    return;
   }
   ___async_unwind = 0; //@line 32508
   HEAP32[$ReallocAsyncCtx5 >> 2] = 453; //@line 32509
   $18 = $ReallocAsyncCtx5 + 4 | 0; //@line 32510
   HEAP32[$18 >> 2] = $6; //@line 32511
   $19 = $ReallocAsyncCtx5 + 8 | 0; //@line 32512
   HEAP32[$19 >> 2] = $14; //@line 32513
   $20 = $ReallocAsyncCtx5 + 12 | 0; //@line 32514
   HEAP32[$20 >> 2] = $16; //@line 32515
   $21 = $ReallocAsyncCtx5 + 16 | 0; //@line 32516
   HEAP32[$21 >> 2] = $12; //@line 32517
   sp = STACKTOP; //@line 32518
   return;
  }
 case 2:
  {
   HEAP8[$12 + 1177 >> 0] = 0; //@line 32524
   $23 = $12 + 4 | 0; //@line 32525
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 32526
   __ZN7LoRaPHY18put_radio_to_sleepEv($23); //@line 32527
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 454; //@line 32530
    $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 32531
    HEAP32[$24 >> 2] = $12; //@line 32532
    $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 32533
    HEAP32[$25 >> 2] = $23; //@line 32534
    $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 32535
    HEAP32[$26 >> 2] = $6; //@line 32536
    $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 32537
    HEAP32[$27 >> 2] = $14; //@line 32538
    $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 32539
    HEAP32[$28 >> 2] = $16; //@line 32540
    sp = STACKTOP; //@line 32541
    return;
   }
   ___async_unwind = 0; //@line 32544
   HEAP32[$ReallocAsyncCtx4 >> 2] = 454; //@line 32545
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 32546
   HEAP32[$24 >> 2] = $12; //@line 32547
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 32548
   HEAP32[$25 >> 2] = $23; //@line 32549
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 32550
   HEAP32[$26 >> 2] = $6; //@line 32551
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 32552
   HEAP32[$27 >> 2] = $14; //@line 32553
   $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 32554
   HEAP32[$28 >> 2] = $16; //@line 32555
   sp = STACKTOP; //@line 32556
   return;
  }
 default:
  {
   if ((HEAP32[$6 >> 2] | 0) != 2) {
    return;
   }
   _mbed_tracef(16, 12709, 13345, $14); //@line 32566
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 32567
   __ZN7LoRaMac15open_rx2_windowEv($12); //@line 32568
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 455; //@line 32571
    sp = STACKTOP; //@line 32572
    return;
   }
   ___async_unwind = 0; //@line 32575
   HEAP32[$ReallocAsyncCtx3 >> 2] = 455; //@line 32576
   sp = STACKTOP; //@line 32577
   return;
  }
 }
}
function __ZN7LoRaMacD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21341
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21343
 $4 = HEAP32[$2 + 1868 >> 2] | 0; //@line 21345
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 21350
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 21351
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1856 | 0); //@line 21352
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 21355
   $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 21356
   HEAP32[$9 >> 2] = $2; //@line 21357
   sp = STACKTOP; //@line 21358
   return;
  }
  ___async_unwind = 0; //@line 21361
  HEAP32[$ReallocAsyncCtx2 >> 2] = 377; //@line 21362
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 21363
  HEAP32[$9 >> 2] = $2; //@line 21364
  sp = STACKTOP; //@line 21365
  return;
 }
 $11 = HEAP32[$2 + 1848 >> 2] | 0; //@line 21369
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 21374
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 21375
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1836 | 0); //@line 21376
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 378; //@line 21379
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 21380
   HEAP32[$16 >> 2] = $2; //@line 21381
   sp = STACKTOP; //@line 21382
   return;
  }
  ___async_unwind = 0; //@line 21385
  HEAP32[$ReallocAsyncCtx3 >> 2] = 378; //@line 21386
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 21387
  HEAP32[$16 >> 2] = $2; //@line 21388
  sp = STACKTOP; //@line 21389
  return;
 }
 $18 = HEAP32[$2 + 1828 >> 2] | 0; //@line 21393
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 21398
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 21399
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 1816 | 0); //@line 21400
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 21403
   $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 21404
   HEAP32[$23 >> 2] = $2; //@line 21405
   sp = STACKTOP; //@line 21406
   return;
  }
  ___async_unwind = 0; //@line 21409
  HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 21410
  $23 = $ReallocAsyncCtx4 + 4 | 0; //@line 21411
  HEAP32[$23 >> 2] = $2; //@line 21412
  sp = STACKTOP; //@line 21413
  return;
 }
 $25 = HEAP32[$2 + 1808 >> 2] | 0; //@line 21417
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 21422
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21423
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 1796 | 0); //@line 21424
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 21427
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 21428
   HEAP32[$30 >> 2] = $2; //@line 21429
   sp = STACKTOP; //@line 21430
   return;
  }
  ___async_unwind = 0; //@line 21433
  HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 21434
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 21435
  HEAP32[$30 >> 2] = $2; //@line 21436
  sp = STACKTOP; //@line 21437
  return;
 }
 $32 = HEAP32[$2 + 748 >> 2] | 0; //@line 21441
 if (!$32) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 21445
  return;
 }
 $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 21450
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21451
 FUNCTION_TABLE_vi[$36 & 1023]($2 + 736 | 0); //@line 21452
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 21455
  $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 21456
  HEAP32[$37 >> 2] = $2; //@line 21457
  sp = STACKTOP; //@line 21458
  return;
 }
 ___async_unwind = 0; //@line 21461
 HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 21462
 $37 = $ReallocAsyncCtx6 + 4 | 0; //@line 21463
 HEAP32[$37 >> 2] = $2; //@line 21464
 sp = STACKTOP; //@line 21465
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $18 = 0, $27 = 0, $32 = 0, $33 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19505
 $6 = $0 + 344 | 0; //@line 19506
 _mbedtls_cipher_init($6); //@line 19507
 $7 = _mbedtls_cipher_info_from_type(2) | 0; //@line 19508
 if (!$7) {
  $$0 = -24960; //@line 19511
 } else {
  $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19513
  $9 = _mbedtls_cipher_setup($6, $7) | 0; //@line 19514
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 504; //@line 19517
   HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 19519
   HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 19521
   HEAP32[$AsyncCtx11 + 12 >> 2] = $4; //@line 19523
   HEAP16[$AsyncCtx11 + 16 >> 1] = $2; //@line 19525
   HEAP32[$AsyncCtx11 + 20 >> 2] = $1; //@line 19527
   HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 19529
   HEAP32[$AsyncCtx11 + 28 >> 2] = $5; //@line 19531
   sp = STACKTOP; //@line 19532
   return 0; //@line 19533
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 19535
  if (!$9) {
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 19538
   $18 = _mbedtls_cipher_cmac_starts($6, $3, $4) | 0; //@line 19539
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 505; //@line 19542
    HEAP16[$AsyncCtx + 4 >> 1] = $2; //@line 19544
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 19546
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 19548
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 19550
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 19552
    sp = STACKTOP; //@line 19553
    return 0; //@line 19554
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 19556
   if (!$18) {
    $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 19561
    $27 = _mbedtls_cipher_cmac_update($6, $1, $2 & 255) | 0; //@line 19562
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 506; //@line 19565
     HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 19567
     HEAP32[$AsyncCtx7 + 8 >> 2] = $6; //@line 19569
     HEAP32[$AsyncCtx7 + 12 >> 2] = $5; //@line 19571
     sp = STACKTOP; //@line 19572
     return 0; //@line 19573
    }
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 19575
    if (!$27) {
     $32 = $0 + 16 | 0; //@line 19578
     $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 19579
     $33 = _mbedtls_cipher_cmac_finish($6, $32) | 0; //@line 19580
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 507; //@line 19583
      HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 19585
      HEAP32[$AsyncCtx3 + 8 >> 2] = $32; //@line 19587
      HEAP32[$AsyncCtx3 + 12 >> 2] = $5; //@line 19589
      HEAP32[$AsyncCtx3 + 16 >> 2] = $6; //@line 19591
      sp = STACKTOP; //@line 19592
      return 0; //@line 19593
     }
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19595
     if (!$33) {
      HEAP32[$5 >> 2] = (HEAPU8[$0 + 18 >> 0] | 0) << 16 | (HEAPU8[$0 + 19 >> 0] | 0) << 24 | (HEAPU8[$0 + 17 >> 0] | 0) << 8 | (HEAPU8[$32 >> 0] | 0); //@line 19615
      $$0 = 0; //@line 19616
     } else {
      $$0 = $33; //@line 19618
     }
    } else {
     $$0 = $27; //@line 19621
    }
   } else {
    $$0 = $18; //@line 19624
   }
  } else {
   $$0 = $9; //@line 19627
  }
 }
 $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 19630
 _mbedtls_cipher_free($6); //@line 19631
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 508; //@line 19634
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$0; //@line 19636
  sp = STACKTOP; //@line 19637
  return 0; //@line 19638
 } else {
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 19640
  return $$0 | 0; //@line 19641
 }
 return 0; //@line 19643
}
function _main__async_cb_91($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 26146
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26148
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26150
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26152
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26154
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26156
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26158
 if (!$AsyncRetVal) {
  HEAP32[$10 >> 2] = 0; //@line 26161
  HEAP32[$10 + 4 >> 2] = 0; //@line 26161
  HEAP32[$10 + 8 >> 2] = 0; //@line 26161
  HEAP32[$10 + 12 >> 2] = 0; //@line 26161
  $31 = 1; //@line 26162
  $33 = $10; //@line 26162
 } else {
  HEAP32[$AsyncRetVal + 4 >> 2] = 20280; //@line 26165
  HEAP32[$AsyncRetVal + 8 >> 2] = 0; //@line 26167
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 26169
  HEAP32[$AsyncRetVal + 16 >> 2] = -1; //@line 26171
  HEAP32[$AsyncRetVal + 20 >> 2] = 11; //@line 26173
  HEAP32[$AsyncRetVal + 24 >> 2] = 672; //@line 26175
  HEAP32[$AsyncRetVal + 28 >> 2] = 7; //@line 26177
  HEAP32[$AsyncRetVal >> 2] = 1; //@line 26178
  $20 = $10 + 4 | 0; //@line 26179
  HEAP32[$20 >> 2] = 0; //@line 26180
  HEAP32[$20 + 4 >> 2] = 0; //@line 26180
  HEAP32[$20 + 8 >> 2] = 0; //@line 26180
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 26181
  HEAP32[$AsyncRetVal >> 2] = (HEAP32[$AsyncRetVal >> 2] | 0) + 1; //@line 26184
  $31 = 0; //@line 26185
  $33 = $10; //@line 26185
 }
 $23 = $10 + 12 | 0; //@line 26187
 HEAP32[$23 >> 2] = 10264; //@line 26188
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(40) | 0; //@line 26189
 __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE(20208, $10); //@line 26190
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 673; //@line 26193
  $24 = $ReallocAsyncCtx13 + 4 | 0; //@line 26194
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 26195
  $25 = $ReallocAsyncCtx13 + 8 | 0; //@line 26196
  HEAP32[$25 >> 2] = $2; //@line 26197
  $26 = $ReallocAsyncCtx13 + 12 | 0; //@line 26198
  HEAP32[$26 >> 2] = $4; //@line 26199
  $27 = $ReallocAsyncCtx13 + 16 | 0; //@line 26200
  HEAP32[$27 >> 2] = $6; //@line 26201
  $28 = $ReallocAsyncCtx13 + 20 | 0; //@line 26202
  HEAP32[$28 >> 2] = $8; //@line 26203
  $29 = $ReallocAsyncCtx13 + 24 | 0; //@line 26204
  HEAP32[$29 >> 2] = $AsyncRetVal; //@line 26205
  $30 = $ReallocAsyncCtx13 + 28 | 0; //@line 26206
  $$expand_i1_val = $31 & 1; //@line 26207
  HEAP8[$30 >> 0] = $$expand_i1_val; //@line 26208
  $32 = $ReallocAsyncCtx13 + 32 | 0; //@line 26209
  HEAP32[$32 >> 2] = $33; //@line 26210
  $34 = $ReallocAsyncCtx13 + 36 | 0; //@line 26211
  HEAP32[$34 >> 2] = $23; //@line 26212
  sp = STACKTOP; //@line 26213
  return;
 }
 ___async_unwind = 0; //@line 26216
 HEAP32[$ReallocAsyncCtx13 >> 2] = 673; //@line 26217
 $24 = $ReallocAsyncCtx13 + 4 | 0; //@line 26218
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 26219
 $25 = $ReallocAsyncCtx13 + 8 | 0; //@line 26220
 HEAP32[$25 >> 2] = $2; //@line 26221
 $26 = $ReallocAsyncCtx13 + 12 | 0; //@line 26222
 HEAP32[$26 >> 2] = $4; //@line 26223
 $27 = $ReallocAsyncCtx13 + 16 | 0; //@line 26224
 HEAP32[$27 >> 2] = $6; //@line 26225
 $28 = $ReallocAsyncCtx13 + 20 | 0; //@line 26226
 HEAP32[$28 >> 2] = $8; //@line 26227
 $29 = $ReallocAsyncCtx13 + 24 | 0; //@line 26228
 HEAP32[$29 >> 2] = $AsyncRetVal; //@line 26229
 $30 = $ReallocAsyncCtx13 + 28 | 0; //@line 26230
 $$expand_i1_val = $31 & 1; //@line 26231
 HEAP8[$30 >> 0] = $$expand_i1_val; //@line 26232
 $32 = $ReallocAsyncCtx13 + 32 | 0; //@line 26233
 HEAP32[$32 >> 2] = $33; //@line 26234
 $34 = $ReallocAsyncCtx13 + 36 | 0; //@line 26235
 HEAP32[$34 >> 2] = $23; //@line 26236
 sp = STACKTOP; //@line 26237
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_320($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22477
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22479
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22481
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22483
 HEAP32[$2 + 1168 >> 2] = 0; //@line 22485
 $10 = $2 + 1940 | 0; //@line 22488
 HEAP8[$10 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 22489
 HEAP8[$2 + 1943 >> 0] = HEAP8[$2 + 1909 >> 0] | 0; //@line 22493
 HEAP8[$2 + 1956 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 22497
 HEAP8[$2 + 1957 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 22501
 $20 = $2 + 1958 | 0; //@line 22502
 HEAP8[$20 >> 0] = 0; //@line 22503
 HEAP32[$2 + 1960 >> 2] = 0; //@line 22505
 $25 = $2 + 4 | 0; //@line 22509
 if ((HEAP32[$2 + 2380 >> 2] | 0) == 2) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 22511
  __ZN7LoRaPHY20put_radio_to_standbyEv($25); //@line 22512
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 436; //@line 22515
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 22516
   HEAP32[$26 >> 2] = $2; //@line 22517
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 22518
   HEAP32[$27 >> 2] = $25; //@line 22519
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 22520
   HEAP32[$28 >> 2] = $10; //@line 22521
   $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 22522
   HEAP32[$29 >> 2] = $20; //@line 22523
   $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 22524
   HEAP32[$30 >> 2] = $4; //@line 22525
   $31 = $ReallocAsyncCtx2 + 24 | 0; //@line 22526
   HEAP32[$31 >> 2] = $6; //@line 22527
   sp = STACKTOP; //@line 22528
   return;
  }
  ___async_unwind = 0; //@line 22531
  HEAP32[$ReallocAsyncCtx2 >> 2] = 436; //@line 22532
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 22533
  HEAP32[$26 >> 2] = $2; //@line 22534
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 22535
  HEAP32[$27 >> 2] = $25; //@line 22536
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 22537
  HEAP32[$28 >> 2] = $10; //@line 22538
  $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 22539
  HEAP32[$29 >> 2] = $20; //@line 22540
  $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 22541
  HEAP32[$30 >> 2] = $4; //@line 22542
  $31 = $ReallocAsyncCtx2 + 24 | 0; //@line 22543
  HEAP32[$31 >> 2] = $6; //@line 22544
  sp = STACKTOP; //@line 22545
  return;
 } else {
  HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 22551
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 22552
  __ZN7LoRaPHY9rx_configEP18rx_config_params_t($25, $10) | 0; //@line 22553
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 437; //@line 22556
   $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 22557
   HEAP32[$35 >> 2] = $20; //@line 22558
   $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 22559
   HEAP32[$36 >> 2] = $2; //@line 22560
   $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 22561
   HEAP32[$37 >> 2] = $25; //@line 22562
   $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 22563
   HEAP32[$38 >> 2] = $4; //@line 22564
   $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 22565
   HEAP32[$39 >> 2] = $6; //@line 22566
   sp = STACKTOP; //@line 22567
   return;
  }
  ___async_unwind = 0; //@line 22570
  HEAP32[$ReallocAsyncCtx3 >> 2] = 437; //@line 22571
  $35 = $ReallocAsyncCtx3 + 4 | 0; //@line 22572
  HEAP32[$35 >> 2] = $20; //@line 22573
  $36 = $ReallocAsyncCtx3 + 8 | 0; //@line 22574
  HEAP32[$36 >> 2] = $2; //@line 22575
  $37 = $ReallocAsyncCtx3 + 12 | 0; //@line 22576
  HEAP32[$37 >> 2] = $25; //@line 22577
  $38 = $ReallocAsyncCtx3 + 16 | 0; //@line 22578
  HEAP32[$38 >> 2] = $4; //@line 22579
  $39 = $ReallocAsyncCtx3 + 20 | 0; //@line 22580
  HEAP32[$39 >> 2] = $6; //@line 22581
  sp = STACKTOP; //@line 22582
  return;
 }
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_112($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27477
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27481
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27483
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27485
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27487
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27489
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27491
 $15 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27492
 if (!$15) {
  $25 = $6 + 12 | 0; //@line 27496
  HEAP32[$6 >> 2] = 470; //@line 27497
  HEAP32[$6 + 4 >> 2] = 0; //@line 27499
  HEAP32[$6 + 8 >> 2] = $4; //@line 27501
  HEAP32[$25 >> 2] = 860; //@line 27502
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 27503
  __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($8, $4 + 1856 | 0, $6); //@line 27504
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 471; //@line 27507
   $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 27508
   HEAP32[$26 >> 2] = $25; //@line 27509
   $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 27510
   HEAP32[$27 >> 2] = $8; //@line 27511
   $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 27512
   HEAP32[$28 >> 2] = $4; //@line 27513
   $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 27514
   HEAP32[$29 >> 2] = $12; //@line 27515
   $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 27516
   HEAP32[$30 >> 2] = $14; //@line 27517
   $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 27518
   HEAP32[$31 >> 2] = $6; //@line 27519
   sp = STACKTOP; //@line 27520
   return;
  }
  ___async_unwind = 0; //@line 27523
  HEAP32[$ReallocAsyncCtx5 >> 2] = 471; //@line 27524
  $26 = $ReallocAsyncCtx5 + 4 | 0; //@line 27525
  HEAP32[$26 >> 2] = $25; //@line 27526
  $27 = $ReallocAsyncCtx5 + 8 | 0; //@line 27527
  HEAP32[$27 >> 2] = $8; //@line 27528
  $28 = $ReallocAsyncCtx5 + 12 | 0; //@line 27529
  HEAP32[$28 >> 2] = $4; //@line 27530
  $29 = $ReallocAsyncCtx5 + 16 | 0; //@line 27531
  HEAP32[$29 >> 2] = $12; //@line 27532
  $30 = $ReallocAsyncCtx5 + 20 | 0; //@line 27533
  HEAP32[$30 >> 2] = $14; //@line 27534
  $31 = $ReallocAsyncCtx5 + 24 | 0; //@line 27535
  HEAP32[$31 >> 2] = $6; //@line 27536
  sp = STACKTOP; //@line 27537
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 27541
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 27542
  FUNCTION_TABLE_vi[$18 & 1023]($10); //@line 27543
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 469; //@line 27546
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 27547
   HEAP32[$19 >> 2] = $4; //@line 27548
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 27549
   HEAP32[$20 >> 2] = $6; //@line 27550
   $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 27551
   HEAP32[$21 >> 2] = $8; //@line 27552
   $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 27553
   HEAP32[$22 >> 2] = $12; //@line 27554
   $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 27555
   HEAP32[$23 >> 2] = $14; //@line 27556
   sp = STACKTOP; //@line 27557
   return;
  }
  ___async_unwind = 0; //@line 27560
  HEAP32[$ReallocAsyncCtx3 >> 2] = 469; //@line 27561
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 27562
  HEAP32[$19 >> 2] = $4; //@line 27563
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 27564
  HEAP32[$20 >> 2] = $6; //@line 27565
  $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 27566
  HEAP32[$21 >> 2] = $8; //@line 27567
  $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 27568
  HEAP32[$22 >> 2] = $12; //@line 27569
  $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 27570
  HEAP32[$23 >> 2] = $14; //@line 27571
  sp = STACKTOP; //@line 27572
  return;
 }
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_290($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20784
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20786
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20788
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20790
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20792
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20794
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20796
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20798
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20800
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 20805
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 20808
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 20809
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 20810
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20813
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20814
   HEAP32[$22 >> 2] = $4; //@line 20815
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20816
   HEAP32[$23 >> 2] = $2; //@line 20817
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20818
   HEAP32[$24 >> 2] = $8; //@line 20819
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20820
   HEAP32[$25 >> 2] = $6; //@line 20821
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20822
   HEAP32[$26 >> 2] = $10; //@line 20823
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20824
   HEAP32[$27 >> 2] = $12; //@line 20825
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20826
   HEAP32[$28 >> 2] = $14; //@line 20827
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20828
   HEAP32[$29 >> 2] = $16; //@line 20829
   sp = STACKTOP; //@line 20830
   return;
  }
  ___async_unwind = 0; //@line 20833
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20834
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20835
  HEAP32[$22 >> 2] = $4; //@line 20836
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20837
  HEAP32[$23 >> 2] = $2; //@line 20838
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20839
  HEAP32[$24 >> 2] = $8; //@line 20840
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20841
  HEAP32[$25 >> 2] = $6; //@line 20842
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20843
  HEAP32[$26 >> 2] = $10; //@line 20844
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20845
  HEAP32[$27 >> 2] = $12; //@line 20846
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20847
  HEAP32[$28 >> 2] = $14; //@line 20848
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20849
  HEAP32[$29 >> 2] = $16; //@line 20850
  sp = STACKTOP; //@line 20851
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 20859
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 20861
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 20869
  return;
 }
 _mbed_tracef(16, 12021, 12252, $10); //@line 20872
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 20873
 _mbed_tracef(16, 12021, 12276, $14); //@line 20874
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20875
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 20876
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20879
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20880
  HEAP32[$39 >> 2] = $6; //@line 20881
  sp = STACKTOP; //@line 20882
  return;
 }
 ___async_unwind = 0; //@line 20885
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20886
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20887
 HEAP32[$39 >> 2] = $6; //@line 20888
 sp = STACKTOP; //@line 20889
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_289($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20671
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20673
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20675
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20677
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20679
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20681
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20683
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20685
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20687
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 20692
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 20695
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 20696
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 20697
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20700
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20701
   HEAP32[$22 >> 2] = $4; //@line 20702
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20703
   HEAP32[$23 >> 2] = $2; //@line 20704
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20705
   HEAP32[$24 >> 2] = $8; //@line 20706
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20707
   HEAP32[$25 >> 2] = $6; //@line 20708
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20709
   HEAP32[$26 >> 2] = $10; //@line 20710
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20711
   HEAP32[$27 >> 2] = $12; //@line 20712
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20713
   HEAP32[$28 >> 2] = $14; //@line 20714
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20715
   HEAP32[$29 >> 2] = $16; //@line 20716
   sp = STACKTOP; //@line 20717
   return;
  }
  ___async_unwind = 0; //@line 20720
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20721
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20722
  HEAP32[$22 >> 2] = $4; //@line 20723
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20724
  HEAP32[$23 >> 2] = $2; //@line 20725
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20726
  HEAP32[$24 >> 2] = $8; //@line 20727
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20728
  HEAP32[$25 >> 2] = $6; //@line 20729
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20730
  HEAP32[$26 >> 2] = $10; //@line 20731
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20732
  HEAP32[$27 >> 2] = $12; //@line 20733
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20734
  HEAP32[$28 >> 2] = $14; //@line 20735
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20736
  HEAP32[$29 >> 2] = $16; //@line 20737
  sp = STACKTOP; //@line 20738
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 20746
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 20748
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 20756
  return;
 }
 _mbed_tracef(16, 12021, 12252, $10); //@line 20759
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 20760
 _mbed_tracef(16, 12021, 12276, $14); //@line 20761
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20762
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 20763
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20766
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20767
  HEAP32[$39 >> 2] = $6; //@line 20768
  sp = STACKTOP; //@line 20769
  return;
 }
 ___async_unwind = 0; //@line 20772
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20773
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20774
 HEAP32[$39 >> 2] = $6; //@line 20775
 sp = STACKTOP; //@line 20776
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_288($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20558
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20560
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20562
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20564
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20566
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20568
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20570
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20572
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20574
 if (HEAP8[(__ZNK7LoRaMac19get_mcps_indicationEv($2) | 0) >> 0] | 0) {
  __ZN7LoRaMac21post_process_mcps_indEv($2); //@line 20579
  HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 2; //@line 20582
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 20583
  __ZN12LoRaWANStack26process_status_check_stateEv($6); //@line 20584
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20587
   $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20588
   HEAP32[$22 >> 2] = $4; //@line 20589
   $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20590
   HEAP32[$23 >> 2] = $2; //@line 20591
   $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20592
   HEAP32[$24 >> 2] = $8; //@line 20593
   $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20594
   HEAP32[$25 >> 2] = $6; //@line 20595
   $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20596
   HEAP32[$26 >> 2] = $10; //@line 20597
   $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20598
   HEAP32[$27 >> 2] = $12; //@line 20599
   $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20600
   HEAP32[$28 >> 2] = $14; //@line 20601
   $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20602
   HEAP32[$29 >> 2] = $16; //@line 20603
   sp = STACKTOP; //@line 20604
   return;
  }
  ___async_unwind = 0; //@line 20607
  HEAP32[$ReallocAsyncCtx4 >> 2] = 296; //@line 20608
  $22 = $ReallocAsyncCtx4 + 4 | 0; //@line 20609
  HEAP32[$22 >> 2] = $4; //@line 20610
  $23 = $ReallocAsyncCtx4 + 8 | 0; //@line 20611
  HEAP32[$23 >> 2] = $2; //@line 20612
  $24 = $ReallocAsyncCtx4 + 12 | 0; //@line 20613
  HEAP32[$24 >> 2] = $8; //@line 20614
  $25 = $ReallocAsyncCtx4 + 16 | 0; //@line 20615
  HEAP32[$25 >> 2] = $6; //@line 20616
  $26 = $ReallocAsyncCtx4 + 20 | 0; //@line 20617
  HEAP32[$26 >> 2] = $10; //@line 20618
  $27 = $ReallocAsyncCtx4 + 24 | 0; //@line 20619
  HEAP32[$27 >> 2] = $12; //@line 20620
  $28 = $ReallocAsyncCtx4 + 28 | 0; //@line 20621
  HEAP32[$28 >> 2] = $14; //@line 20622
  $29 = $ReallocAsyncCtx4 + 32 | 0; //@line 20623
  HEAP32[$29 >> 2] = $16; //@line 20624
  sp = STACKTOP; //@line 20625
  return;
 }
 if (!(HEAP32[$4 >> 2] & 1)) {
  $34 = (__ZNK7LoRaMac16get_device_classEv($2) | 0) == 2; //@line 20633
  HEAP32[$8 >> 2] = $34 ? 5 : 2; //@line 20635
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($2) | 0) + 4 >> 0] | 0)) {
  HEAP8[$6 + 2911 >> 0] = 1; //@line 20643
  return;
 }
 _mbed_tracef(16, 12021, 12252, $10); //@line 20646
 __ZN7LoRaMac21post_process_mlme_indEv($2); //@line 20647
 _mbed_tracef(16, 12021, 12276, $14); //@line 20648
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20649
 __ZN12LoRaWANStack23mlme_indication_handlerEv($6); //@line 20650
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20653
  $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20654
  HEAP32[$39 >> 2] = $6; //@line 20655
  sp = STACKTOP; //@line 20656
  return;
 }
 ___async_unwind = 0; //@line 20659
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20660
 $39 = $ReallocAsyncCtx2 + 4 | 0; //@line 20661
 HEAP32[$39 >> 2] = $6; //@line 20662
 sp = STACKTOP; //@line 20663
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 12713
 STACKTOP = STACKTOP + 224 | 0; //@line 12714
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 12714
 $3 = sp + 120 | 0; //@line 12715
 $4 = sp + 80 | 0; //@line 12716
 $5 = sp; //@line 12717
 $6 = sp + 136 | 0; //@line 12718
 dest = $4; //@line 12719
 stop = dest + 40 | 0; //@line 12719
 do {
  HEAP32[dest >> 2] = 0; //@line 12719
  dest = dest + 4 | 0; //@line 12719
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 12721
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 12725
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 12732
  } else {
   $43 = 0; //@line 12734
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 12736
  $14 = $13 & 32; //@line 12737
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 12743
  }
  $19 = $0 + 48 | 0; //@line 12745
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 12750
    $24 = HEAP32[$23 >> 2] | 0; //@line 12751
    HEAP32[$23 >> 2] = $6; //@line 12752
    $25 = $0 + 28 | 0; //@line 12753
    HEAP32[$25 >> 2] = $6; //@line 12754
    $26 = $0 + 20 | 0; //@line 12755
    HEAP32[$26 >> 2] = $6; //@line 12756
    HEAP32[$19 >> 2] = 80; //@line 12757
    $28 = $0 + 16 | 0; //@line 12759
    HEAP32[$28 >> 2] = $6 + 80; //@line 12760
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12761
    if (!$24) {
     $$1 = $29; //@line 12764
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 12767
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 12768
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 12769
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 710; //@line 12772
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 12774
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 12776
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 12778
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 12780
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 12782
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 12784
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 12786
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 12788
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 12790
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 12792
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 12794
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 12796
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 12798
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 12800
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 12802
      sp = STACKTOP; //@line 12803
      STACKTOP = sp; //@line 12804
      return 0; //@line 12804
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12806
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 12809
      HEAP32[$23 >> 2] = $24; //@line 12810
      HEAP32[$19 >> 2] = 0; //@line 12811
      HEAP32[$28 >> 2] = 0; //@line 12812
      HEAP32[$25 >> 2] = 0; //@line 12813
      HEAP32[$26 >> 2] = 0; //@line 12814
      $$1 = $$; //@line 12815
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 12821
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 12824
  HEAP32[$0 >> 2] = $51 | $14; //@line 12829
  if ($43 | 0) {
   ___unlockfile($0); //@line 12832
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 12834
 }
 STACKTOP = sp; //@line 12836
 return $$0 | 0; //@line 12836
}
function _initialize__async_cb_424($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $43 = 0, $44 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 31452
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31454
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31456
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 31458
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31460
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31462
 $12 = $0 + 24 | 0; //@line 31464
 $14 = HEAP32[$12 >> 2] | 0; //@line 31466
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 31469
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 31471
 $21 = HEAP32[$0 + 36 >> 2] | 0; //@line 31473
 $23 = HEAP32[$2 >> 2] | 0; //@line 31476
 $24 = $23 + 32 | 0; //@line 31477
 HEAP32[$24 >> 2] = HEAP32[___async_retval >> 2]; //@line 31478
 $25 = $23 + 40 | 0; //@line 31479
 $26 = $25; //@line 31480
 HEAP32[$26 >> 2] = 0; //@line 31482
 HEAP32[$26 + 4 >> 2] = 0; //@line 31485
 $30 = $23 + 8 | 0; //@line 31486
 HEAP32[$30 >> 2] = $4; //@line 31487
 $31 = $23 + 57 | 0; //@line 31488
 HEAP8[$31 >> 0] = $6; //@line 31489
 $32 = _bitshift64Shl(1, 0, $8 | 0) | 0; //@line 31490
 $34 = _i64Add($32 | 0, tempRet0 | 0, -1, 0) | 0; //@line 31492
 $36 = $23 + 12 | 0; //@line 31494
 HEAP32[$36 >> 2] = $34; //@line 31495
 HEAP32[$23 + 16 >> 2] = $10; //@line 31497
 $39 = $23 + 24 | 0; //@line 31499
 HEAP32[$39 >> 2] = $14; //@line 31501
 HEAP32[$39 + 4 >> 2] = $17; //@line 31504
 $43 = $23 + 48 | 0; //@line 31505
 $44 = $43; //@line 31506
 HEAP32[$44 >> 2] = 0; //@line 31508
 HEAP32[$44 + 4 >> 2] = 0; //@line 31511
 HEAP8[$23 + 56 >> 0] = 1; //@line 31513
 $51 = HEAP32[(HEAP32[$19 >> 2] | 0) + 4 >> 2] | 0; //@line 31516
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 31517
 $52 = FUNCTION_TABLE_i[$51 & 7]() | 0; //@line 31518
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 623; //@line 31521
  $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 31522
  HEAP32[$53 >> 2] = $2; //@line 31523
  $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 31524
  HEAP32[$54 >> 2] = $21; //@line 31525
  $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 31526
  HEAP32[$55 >> 2] = $24; //@line 31527
  $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 31528
  HEAP32[$56 >> 2] = $36; //@line 31529
  $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 31530
  HEAP32[$57 >> 2] = $30; //@line 31531
  $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 31532
  HEAP32[$58 >> 2] = $43; //@line 31533
  $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 31534
  HEAP32[$59 >> 2] = $31; //@line 31535
  $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 31536
  HEAP32[$60 >> 2] = $25; //@line 31537
  sp = STACKTOP; //@line 31538
  return;
 }
 HEAP32[___async_retval >> 2] = $52; //@line 31542
 ___async_unwind = 0; //@line 31543
 HEAP32[$ReallocAsyncCtx4 >> 2] = 623; //@line 31544
 $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 31545
 HEAP32[$53 >> 2] = $2; //@line 31546
 $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 31547
 HEAP32[$54 >> 2] = $21; //@line 31548
 $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 31549
 HEAP32[$55 >> 2] = $24; //@line 31550
 $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 31551
 HEAP32[$56 >> 2] = $36; //@line 31552
 $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 31553
 HEAP32[$57 >> 2] = $30; //@line 31554
 $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 31555
 HEAP32[$58 >> 2] = $43; //@line 31556
 $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 31557
 HEAP32[$59 >> 2] = $31; //@line 31558
 $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 31559
 HEAP32[$60 >> 2] = $25; //@line 31560
 sp = STACKTOP; //@line 31561
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_375($0) {
 $0 = $0 | 0;
 var $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $29 = 0, $32 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 26865
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26871
 $14 = HEAP8[$0 + 19 >> 0] | 0; //@line 26881
 $16 = HEAP32[$0 + 20 >> 2] | 0; //@line 26883
 $18 = HEAP32[$0 + 24 >> 2] | 0; //@line 26885
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 26887
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 26889
 $29 = HEAP32[$6 >> 2] | 0; //@line 26896
 $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 20 >> 2] | 0; //@line 26899
 $34 = HEAP8[$0 + 17 >> 0] & 1 ? 2 : HEAP8[$0 + 16 >> 0] & 1; //@line 26901
 $35 = HEAP8[$0 + 18 >> 0] | 0; //@line 26902
 if ((HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) == (HEAPU8[(HEAP32[$0 + 8 >> 2] | 0) + 27 >> 0] | 0)) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 26905
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 0, $14, 25e3, $34, $35 * 1e3 | 0, 0, 5, 0, 1, 0, 0, 0, 3e3); //@line 26906
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 528; //@line 26909
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 26910
   HEAP32[$37 >> 2] = $6; //@line 26911
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 26912
   HEAP32[$38 >> 2] = $16; //@line 26913
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 26914
   HEAP32[$39 >> 2] = $18; //@line 26915
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 26916
   HEAP32[$40 >> 2] = $20; //@line 26917
   $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 26918
   HEAP32[$41 >> 2] = $22; //@line 26919
   sp = STACKTOP; //@line 26920
   return;
  }
  ___async_unwind = 0; //@line 26923
  HEAP32[$ReallocAsyncCtx3 >> 2] = 528; //@line 26924
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 26925
  HEAP32[$37 >> 2] = $6; //@line 26926
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 26927
  HEAP32[$38 >> 2] = $16; //@line 26928
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 26929
  HEAP32[$39 >> 2] = $18; //@line 26930
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 26931
  HEAP32[$40 >> 2] = $20; //@line 26932
  $41 = $ReallocAsyncCtx3 + 20 | 0; //@line 26933
  HEAP32[$41 >> 2] = $22; //@line 26934
  sp = STACKTOP; //@line 26935
  return;
 } else {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 26938
  FUNCTION_TABLE_viiiiiiiiiiiiii[$32 & 1]($29, 1, $14, 0, $34, $35, 1, 8, 0, 1, 0, 0, 0, 3e3); //@line 26939
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 529; //@line 26942
   $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 26943
   HEAP32[$42 >> 2] = $6; //@line 26944
   $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 26945
   HEAP32[$43 >> 2] = $16; //@line 26946
   $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 26947
   HEAP32[$44 >> 2] = $18; //@line 26948
   $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 26949
   HEAP32[$45 >> 2] = $20; //@line 26950
   $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 26951
   HEAP32[$46 >> 2] = $22; //@line 26952
   sp = STACKTOP; //@line 26953
   return;
  }
  ___async_unwind = 0; //@line 26956
  HEAP32[$ReallocAsyncCtx4 >> 2] = 529; //@line 26957
  $42 = $ReallocAsyncCtx4 + 4 | 0; //@line 26958
  HEAP32[$42 >> 2] = $6; //@line 26959
  $43 = $ReallocAsyncCtx4 + 8 | 0; //@line 26960
  HEAP32[$43 >> 2] = $16; //@line 26961
  $44 = $ReallocAsyncCtx4 + 12 | 0; //@line 26962
  HEAP32[$44 >> 2] = $18; //@line 26963
  $45 = $ReallocAsyncCtx4 + 16 | 0; //@line 26964
  HEAP32[$45 >> 2] = $20; //@line 26965
  $46 = $ReallocAsyncCtx4 + 20 | 0; //@line 26966
  HEAP32[$46 >> 2] = $22; //@line 26967
  sp = STACKTOP; //@line 26968
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $14 = 0, $2 = 0, $21 = 0, $22 = 0, $27 = 0, $30 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10134
 STACKTOP = STACKTOP + 32 | 0; //@line 10135
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10135
 $1 = sp + 8 | 0; //@line 10137
 $2 = $0 + 2904 | 0; //@line 10138
 if (HEAP32[$2 >> 2] & 8 | 0) {
  _mbed_tracef(16, 12021, 12351, sp); //@line 10143
 }
 HEAP8[$0 + 2548 >> 0] = 1; //@line 10146
 $7 = $0 + 2512 | 0; //@line 10147
 $8 = HEAP32[$7 >> 2] | 0; //@line 10148
 do {
  if ($8 | 0) {
   $12 = HEAP32[$0 + 3168 >> 2] | 0; //@line 10154
   $14 = HEAP32[$8 + 4 >> 2] | 0; //@line 10156
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 10157
   FUNCTION_TABLE_vii[$14 & 15]($1, $0 + 2500 | 0); //@line 10158
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 333; //@line 10161
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 10163
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10165
    HEAP32[$AsyncCtx + 12 >> 2] = $12; //@line 10167
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 10169
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 10171
    HEAP32[$AsyncCtx + 24 >> 2] = $0; //@line 10173
    sp = STACKTOP; //@line 10174
    STACKTOP = sp; //@line 10175
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10177
   $21 = $1 + 12 | 0; //@line 10179
   HEAP32[$21 >> 2] = HEAP32[$7 >> 2]; //@line 10180
   $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10181
   $22 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($12, $1, 0) | 0; //@line 10182
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 334; //@line 10185
    HEAP32[$AsyncCtx5 + 4 >> 2] = $21; //@line 10187
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 10189
    HEAP32[$AsyncCtx5 + 12 >> 2] = $2; //@line 10191
    HEAP32[$AsyncCtx5 + 16 >> 2] = $0; //@line 10193
    sp = STACKTOP; //@line 10194
    STACKTOP = sp; //@line 10195
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10197
   $27 = HEAP32[$21 >> 2] | 0; //@line 10198
   do {
    if ($27 | 0) {
     $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 10203
     $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10204
     FUNCTION_TABLE_vi[$30 & 1023]($1); //@line 10205
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 335; //@line 10208
      HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 10210
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 10212
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 10214
      HEAP32[$AsyncCtx2 + 16 >> 2] = $0; //@line 10216
      sp = STACKTOP; //@line 10217
      STACKTOP = sp; //@line 10218
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10220
      break;
     }
    }
   } while (0);
   if (!$22) {
    $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10227
    _mbed_assert_internal(11914, 11923, 778); //@line 10228
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 336; //@line 10231
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 10233
     HEAP32[$AsyncCtx9 + 8 >> 2] = $2; //@line 10235
     HEAP32[$AsyncCtx9 + 12 >> 2] = $0; //@line 10237
     sp = STACKTOP; //@line 10238
     STACKTOP = sp; //@line 10239
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10241
     break;
    }
   }
  }
 } while (0);
 HEAP32[$2 >> 2] = HEAP32[$2 >> 2] | 4; //@line 10249
 HEAP32[$0 + 2496 >> 2] = 2; //@line 10251
 STACKTOP = sp; //@line 10252
 return;
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 17010
 STACKTOP = STACKTOP + 64 | 0; //@line 17011
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 17011
 $4 = sp; //@line 17012
 $5 = HEAP32[$0 >> 2] | 0; //@line 17013
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 17016
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 17018
 HEAP32[$4 >> 2] = $2; //@line 17019
 HEAP32[$4 + 4 >> 2] = $0; //@line 17021
 HEAP32[$4 + 8 >> 2] = $1; //@line 17023
 HEAP32[$4 + 12 >> 2] = $3; //@line 17025
 $14 = $4 + 16 | 0; //@line 17026
 $15 = $4 + 20 | 0; //@line 17027
 $16 = $4 + 24 | 0; //@line 17028
 $17 = $4 + 28 | 0; //@line 17029
 $18 = $4 + 32 | 0; //@line 17030
 $19 = $4 + 40 | 0; //@line 17031
 dest = $14; //@line 17032
 stop = dest + 36 | 0; //@line 17032
 do {
  HEAP32[dest >> 2] = 0; //@line 17032
  dest = dest + 4 | 0; //@line 17032
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 17032
 HEAP8[$14 + 38 >> 0] = 0; //@line 17032
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 17037
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 17040
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 17041
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 17042
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 726; //@line 17045
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 17047
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 17049
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 17051
    sp = STACKTOP; //@line 17052
    STACKTOP = sp; //@line 17053
    return 0; //@line 17053
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17055
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 17059
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 17063
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 17066
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 17067
   FUNCTION_TABLE_viiiii[$33 & 7]($10, $4, $8, 1, 0); //@line 17068
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 727; //@line 17071
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 17073
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 17075
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 17077
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 17079
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 17081
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 17083
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 17085
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 17087
    sp = STACKTOP; //@line 17088
    STACKTOP = sp; //@line 17089
    return 0; //@line 17089
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17091
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 17105
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 17113
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 17129
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 17134
  }
 } while (0);
 STACKTOP = sp; //@line 17137
 return $$0 | 0; //@line 17137
}
function __ZN7LoRaMacD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $30 = 0, $34 = 0, $37 = 0, $41 = 0, $43 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 12041
 $2 = HEAP32[$0 + 2008 >> 2] | 0; //@line 12043
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 12049
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12050
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 1996 | 0); //@line 12051
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 376; //@line 12054
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12056
    sp = STACKTOP; //@line 12057
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12060
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 1868 >> 2] | 0; //@line 12066
 do {
  if ($9 | 0) {
   $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 12072
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12073
   FUNCTION_TABLE_vi[$13 & 1023]($0 + 1856 | 0); //@line 12074
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 377; //@line 12077
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12079
    sp = STACKTOP; //@line 12080
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12083
    break;
   }
  }
 } while (0);
 $16 = HEAP32[$0 + 1848 >> 2] | 0; //@line 12089
 do {
  if ($16 | 0) {
   $20 = HEAP32[$16 + 8 >> 2] | 0; //@line 12095
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12096
   FUNCTION_TABLE_vi[$20 & 1023]($0 + 1836 | 0); //@line 12097
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 378; //@line 12100
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12102
    sp = STACKTOP; //@line 12103
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12106
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$0 + 1828 >> 2] | 0; //@line 12112
 do {
  if ($23 | 0) {
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 12118
   $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12119
   FUNCTION_TABLE_vi[$27 & 1023]($0 + 1816 | 0); //@line 12120
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 379; //@line 12123
    HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12125
    sp = STACKTOP; //@line 12126
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12129
    break;
   }
  }
 } while (0);
 $30 = HEAP32[$0 + 1808 >> 2] | 0; //@line 12135
 do {
  if ($30 | 0) {
   $34 = HEAP32[$30 + 8 >> 2] | 0; //@line 12141
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12142
   FUNCTION_TABLE_vi[$34 & 1023]($0 + 1796 | 0); //@line 12143
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 380; //@line 12146
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12148
    sp = STACKTOP; //@line 12149
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12152
    break;
   }
  }
 } while (0);
 $37 = HEAP32[$0 + 748 >> 2] | 0; //@line 12158
 if (!$37) {
  $43 = $0 + 4 | 0; //@line 12161
  __ZN12LoRaPHYEU868D2Ev($43); //@line 12162
  return;
 }
 $41 = HEAP32[$37 + 8 >> 2] | 0; //@line 12167
 $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12168
 FUNCTION_TABLE_vi[$41 & 1023]($0 + 736 | 0); //@line 12169
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 381; //@line 12172
  HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 12174
  sp = STACKTOP; //@line 12175
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12178
 $43 = $0 + 4 | 0; //@line 12179
 __ZN12LoRaPHYEU868D2Ev($43); //@line 12180
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_274($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19114
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19116
 $4 = HEAP32[$2 + 76 >> 2] | 0; //@line 19118
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19123
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 19124
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 64 | 0); //@line 19125
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 19128
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 19129
   HEAP32[$9 >> 2] = $2; //@line 19130
   sp = STACKTOP; //@line 19131
   return;
  }
  ___async_unwind = 0; //@line 19134
  HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 19135
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 19136
  HEAP32[$9 >> 2] = $2; //@line 19137
  sp = STACKTOP; //@line 19138
  return;
 }
 $11 = HEAP32[$2 + 60 >> 2] | 0; //@line 19142
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 19147
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19148
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 48 | 0); //@line 19149
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19152
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 19153
   HEAP32[$16 >> 2] = $2; //@line 19154
   sp = STACKTOP; //@line 19155
   return;
  }
  ___async_unwind = 0; //@line 19158
  HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19159
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 19160
  HEAP32[$16 >> 2] = $2; //@line 19161
  sp = STACKTOP; //@line 19162
  return;
 }
 $18 = HEAP32[$2 + 44 >> 2] | 0; //@line 19166
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 19171
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19172
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 32 | 0); //@line 19173
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19176
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 19177
   HEAP32[$23 >> 2] = $2; //@line 19178
   sp = STACKTOP; //@line 19179
   return;
  }
  ___async_unwind = 0; //@line 19182
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19183
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 19184
  HEAP32[$23 >> 2] = $2; //@line 19185
  sp = STACKTOP; //@line 19186
  return;
 }
 $25 = HEAP32[$2 + 28 >> 2] | 0; //@line 19190
 if ($25 | 0) {
  $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 19195
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19196
  FUNCTION_TABLE_vi[$29 & 1023]($2 + 16 | 0); //@line 19197
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19200
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 19201
   HEAP32[$30 >> 2] = $2; //@line 19202
   sp = STACKTOP; //@line 19203
   return;
  }
  ___async_unwind = 0; //@line 19206
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19207
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 19208
  HEAP32[$30 >> 2] = $2; //@line 19209
  sp = STACKTOP; //@line 19210
  return;
 }
 $32 = HEAP32[$2 + 12 >> 2] | 0; //@line 19214
 if (!$32) {
  return;
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 19220
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19221
 FUNCTION_TABLE_vi[$35 & 1023]($2); //@line 19222
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19225
  sp = STACKTOP; //@line 19226
  return;
 }
 ___async_unwind = 0; //@line 19229
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19230
 sp = STACKTOP; //@line 19231
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv($0) {
 $0 = $0 | 0;
 var $19 = 0, $24 = 0, $40 = 0, $42 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15176
 STACKTOP = STACKTOP + 16 | 0; //@line 15177
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15177
 $vararg_buffer = sp; //@line 15178
 HEAP8[$0 + 2377 >> 0] = 0; //@line 15180
 $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 15182
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 15183
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 435; //@line 15186
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 15188
  HEAP32[$AsyncCtx10 + 8 >> 2] = $vararg_buffer; //@line 15190
  HEAP32[$AsyncCtx10 + 12 >> 2] = $vararg_buffer; //@line 15192
  sp = STACKTOP; //@line 15193
  STACKTOP = sp; //@line 15194
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 15196
 HEAP32[$0 + 1168 >> 2] = 0; //@line 15198
 $9 = $0 + 1940 | 0; //@line 15201
 HEAP8[$9 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 15202
 HEAP8[$0 + 1943 >> 0] = HEAP8[$0 + 1909 >> 0] | 0; //@line 15206
 HEAP8[$0 + 1956 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 15210
 HEAP8[$0 + 1957 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 15214
 $19 = $0 + 1958 | 0; //@line 15215
 HEAP8[$19 >> 0] = 0; //@line 15216
 HEAP32[$0 + 1960 >> 2] = 0; //@line 15218
 $24 = $0 + 4 | 0; //@line 15222
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15225
   __ZN7LoRaPHY20put_radio_to_standbyEv($24); //@line 15226
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 436; //@line 15229
    HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 15231
    HEAP32[$AsyncCtx2 + 8 >> 2] = $24; //@line 15233
    HEAP32[$AsyncCtx2 + 12 >> 2] = $9; //@line 15235
    HEAP32[$AsyncCtx2 + 16 >> 2] = $19; //@line 15237
    HEAP32[$AsyncCtx2 + 20 >> 2] = $vararg_buffer; //@line 15239
    HEAP32[$AsyncCtx2 + 24 >> 2] = $vararg_buffer; //@line 15241
    sp = STACKTOP; //@line 15242
    STACKTOP = sp; //@line 15243
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 15245
    break;
   }
  }
 } while (0);
 HEAP8[$0 + 2026 >> 0] = HEAP8[$0 + 1941 >> 0] | 0; //@line 15253
 $AsyncCtx6 = _emscripten_alloc_async_context(24, sp) | 0; //@line 15254
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($24, $9) | 0; //@line 15255
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 437; //@line 15258
  HEAP32[$AsyncCtx6 + 4 >> 2] = $19; //@line 15260
  HEAP32[$AsyncCtx6 + 8 >> 2] = $0; //@line 15262
  HEAP32[$AsyncCtx6 + 12 >> 2] = $24; //@line 15264
  HEAP32[$AsyncCtx6 + 16 >> 2] = $vararg_buffer; //@line 15266
  HEAP32[$AsyncCtx6 + 20 >> 2] = $vararg_buffer; //@line 15268
  sp = STACKTOP; //@line 15269
  STACKTOP = sp; //@line 15270
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 15272
 $40 = (HEAP8[$19 >> 0] | 0) != 0; //@line 15274
 $42 = HEAP32[$0 + 1888 >> 2] | 0; //@line 15276
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 15277
 __ZN7LoRaPHY15setup_rx_windowEbj($24, $40, $42); //@line 15278
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 438; //@line 15281
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 15283
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15285
  sp = STACKTOP; //@line 15286
  STACKTOP = sp; //@line 15287
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15289
  _mbed_tracef(16, 12709, 13071, $vararg_buffer); //@line 15290
  STACKTOP = sp; //@line 15291
  return;
 }
}
function _main__async_cb_80($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25454
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25456
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25458
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25460
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25462
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25464
 $$pr = HEAP32[$4 >> 2] | 0; //@line 25465
 if ($$pr | 0) {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 25469
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 25470
  FUNCTION_TABLE_vii[$13 & 15](23664, $2); //@line 25471
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 25474
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 25475
   HEAP32[$14 >> 2] = $2; //@line 25476
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 25477
   HEAP32[$15 >> 2] = $4; //@line 25478
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 25479
   HEAP32[$16 >> 2] = $6; //@line 25480
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 25481
   HEAP32[$17 >> 2] = $8; //@line 25482
   $18 = $ReallocAsyncCtx4 + 20 | 0; //@line 25483
   HEAP32[$18 >> 2] = $10; //@line 25484
   sp = STACKTOP; //@line 25485
   return;
  }
  ___async_unwind = 0; //@line 25488
  HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 25489
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 25490
  HEAP32[$14 >> 2] = $2; //@line 25491
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 25492
  HEAP32[$15 >> 2] = $4; //@line 25493
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 25494
  HEAP32[$16 >> 2] = $6; //@line 25495
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 25496
  HEAP32[$17 >> 2] = $8; //@line 25497
  $18 = $ReallocAsyncCtx4 + 20 | 0; //@line 25498
  HEAP32[$18 >> 2] = $10; //@line 25499
  sp = STACKTOP; //@line 25500
  return;
 }
 HEAP32[5919] = 0; //@line 25503
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20484, 23664) | 0; //@line 25504
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20484) | 0) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25508
  _puts(15210) | 0; //@line 25509
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 25512
   sp = STACKTOP; //@line 25513
   return;
  }
  ___async_unwind = 0; //@line 25516
  HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 25517
  sp = STACKTOP; //@line 25518
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(20484, 5) | 0; //@line 25521
 HEAP8[$6 >> 0] = 0; //@line 25522
 HEAP32[$6 + 4 >> 2] = 24297; //@line 25524
 HEAP32[$6 + 8 >> 2] = 24305; //@line 25526
 HEAP32[$6 + 12 >> 2] = 24313; //@line 25528
 HEAP8[$6 + 16 >> 0] = 3; //@line 25530
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20484, $6) | 0; //@line 25531
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$8 >> 2] = $25; //@line 25537
   _printf(15244, $8) | 0; //@line 25538
   HEAP32[___async_retval >> 2] = -1; //@line 25540
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 25544
 _puts(15273) | 0; //@line 25545
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 25548
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 25549
  HEAP32[$26 >> 2] = $6; //@line 25550
  sp = STACKTOP; //@line 25551
  return;
 }
 ___async_unwind = 0; //@line 25554
 HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 25555
 $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 25556
 HEAP32[$26 >> 2] = $6; //@line 25557
 sp = STACKTOP; //@line 25558
 return;
}
function __ZN7LoRaMac10disconnectEv($0) {
 $0 = $0 | 0;
 var $19 = 0, $20 = 0, $22 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16838
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16840
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1796 | 0); //@line 16841
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 475; //@line 16844
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 16846
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 16848
  sp = STACKTOP; //@line 16849
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 16852
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16854
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 16855
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 476; //@line 16858
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 16860
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 16862
  sp = STACKTOP; //@line 16863
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 16866
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16868
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 16869
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 477; //@line 16872
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 16874
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 16876
  sp = STACKTOP; //@line 16877
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 16880
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 16882
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 16883
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 478; //@line 16886
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 16888
  sp = STACKTOP; //@line 16889
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16892
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16894
 __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 16895
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 479; //@line 16898
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16900
  sp = STACKTOP; //@line 16901
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16904
  HEAP8[$0 + 2376 >> 0] = 0; //@line 16906
  HEAP8[$0 + 1181 >> 0] = 0; //@line 16908
  HEAP8[$0 + 1175 >> 0] = 1; //@line 16910
  HEAP8[$0 + 1177 >> 0] = 0; //@line 16912
  HEAP8[$0 + 1178 >> 0] = 0; //@line 16914
  $19 = $0 + 476 | 0; //@line 16915
  __ZN14LoRaMacCommand20clear_command_bufferEv($19); //@line 16916
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($19); //@line 16917
  __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($19); //@line 16918
  $20 = $0 + 2052 | 0; //@line 16919
  HEAP32[$20 >> 2] = 0; //@line 16920
  HEAP32[$20 + 4 >> 2] = 0; //@line 16920
  HEAP32[$20 + 8 >> 2] = 0; //@line 16920
  HEAP32[$20 + 12 >> 2] = 0; //@line 16920
  HEAP32[$20 + 16 >> 2] = 0; //@line 16920
  HEAP32[$20 + 20 >> 2] = 0; //@line 16920
  HEAP32[$0 + 2056 >> 2] = 1; //@line 16922
  $22 = $0 + 2084 | 0; //@line 16923
  HEAP32[$22 >> 2] = 0; //@line 16924
  HEAP32[$22 + 4 >> 2] = 0; //@line 16924
  HEAP32[$22 + 8 >> 2] = 0; //@line 16924
  HEAP32[$22 + 12 >> 2] = 0; //@line 16924
  HEAP32[$22 + 16 >> 2] = 0; //@line 16924
  HEAP32[$0 + 2092 >> 2] = 1; //@line 16926
  dest = $0 + 2012 | 0; //@line 16928
  stop = dest + 40 | 0; //@line 16928
  do {
   HEAP32[dest >> 2] = 0; //@line 16928
   dest = dest + 4 | 0; //@line 16928
  } while ((dest | 0) < (stop | 0));
  HEAP32[$0 + 2020 >> 2] = 1; //@line 16930
  return;
 }
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_141($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $29 = 0, $30 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29493
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29495
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29497
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29499
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29501
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29503
 if (!(HEAP32[$0 + 24 >> 2] | 0)) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(24) | 0; //@line 29508
  _mbed_assert_internal(11914, 11923, 778); //@line 29509
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 262; //@line 29512
   $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 29513
   HEAP32[$14 >> 2] = $2; //@line 29514
   $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 29515
   HEAP32[$15 >> 2] = $4; //@line 29516
   $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 29517
   HEAP32[$16 >> 2] = $6; //@line 29518
   $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 29519
   HEAP32[$17 >> 2] = $8; //@line 29520
   $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 29521
   HEAP32[$18 >> 2] = $10; //@line 29522
   sp = STACKTOP; //@line 29523
   return;
  }
  ___async_unwind = 0; //@line 29526
  HEAP32[$ReallocAsyncCtx11 >> 2] = 262; //@line 29527
  $14 = $ReallocAsyncCtx11 + 4 | 0; //@line 29528
  HEAP32[$14 >> 2] = $2; //@line 29529
  $15 = $ReallocAsyncCtx11 + 8 | 0; //@line 29530
  HEAP32[$15 >> 2] = $4; //@line 29531
  $16 = $ReallocAsyncCtx11 + 12 | 0; //@line 29532
  HEAP32[$16 >> 2] = $6; //@line 29533
  $17 = $ReallocAsyncCtx11 + 16 | 0; //@line 29534
  HEAP32[$17 >> 2] = $8; //@line 29535
  $18 = $ReallocAsyncCtx11 + 20 | 0; //@line 29536
  HEAP32[$18 >> 2] = $10; //@line 29537
  sp = STACKTOP; //@line 29538
  return;
 }
 if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) == 2) {
  label = 10; //@line 29544
 } else {
  if (!(HEAP8[$4 + 15 >> 0] | 0)) {
   label = 10; //@line 29550
  }
 }
 if ((label | 0) == 10) {
  if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) != 2) {
   return;
  }
  if ((HEAP32[$4 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $29 = $10 + 2512 | 0; //@line 29566
 $30 = HEAP32[$29 >> 2] | 0; //@line 29567
 if (!$30) {
  return;
 }
 $34 = HEAP32[$10 + 3168 >> 2] | 0; //@line 29574
 $36 = HEAP32[$30 + 4 >> 2] | 0; //@line 29576
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 29577
 FUNCTION_TABLE_vii[$36 & 15]($8, $10 + 2500 | 0); //@line 29578
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 29581
  $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 29582
  HEAP32[$37 >> 2] = $29; //@line 29583
  $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 29584
  HEAP32[$38 >> 2] = $8; //@line 29585
  $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 29586
  HEAP32[$39 >> 2] = $34; //@line 29587
  $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 29588
  HEAP32[$40 >> 2] = $8; //@line 29589
  sp = STACKTOP; //@line 29590
  return;
 }
 ___async_unwind = 0; //@line 29593
 HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 29594
 $37 = $ReallocAsyncCtx5 + 4 | 0; //@line 29595
 HEAP32[$37 >> 2] = $29; //@line 29596
 $38 = $ReallocAsyncCtx5 + 8 | 0; //@line 29597
 HEAP32[$38 >> 2] = $8; //@line 29598
 $39 = $ReallocAsyncCtx5 + 12 | 0; //@line 29599
 HEAP32[$39 >> 2] = $34; //@line 29600
 $40 = $ReallocAsyncCtx5 + 16 | 0; //@line 29601
 HEAP32[$40 >> 2] = $8; //@line 29602
 sp = STACKTOP; //@line 29603
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $22 = 0, $29 = 0, $30 = 0, $39 = 0, $41 = 0, $49 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 13591
 STACKTOP = STACKTOP + 16 | 0; //@line 13592
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13592
 $vararg_buffer = sp; //@line 13593
 HEAP8[$0 + 2377 >> 0] = 1; //@line 13595
 $AsyncCtx7 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13597
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 13598
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 405; //@line 13601
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 13603
  HEAP32[$AsyncCtx7 + 8 >> 2] = $vararg_buffer; //@line 13605
  HEAP32[$AsyncCtx7 + 12 >> 2] = $vararg_buffer; //@line 13607
  sp = STACKTOP; //@line 13608
  STACKTOP = sp; //@line 13609
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13611
 $8 = $0 + 1964 | 0; //@line 13614
 HEAP8[$8 >> 0] = HEAP8[$0 + 1182 >> 0] | 0; //@line 13615
 $11 = $0 + 1968 | 0; //@line 13618
 HEAP32[$11 >> 2] = HEAP32[$0 + 1912 >> 2]; //@line 13619
 HEAP8[$0 + 1980 >> 0] = HEAP8[$0 + 1921 >> 0] | 0; //@line 13623
 HEAP8[$0 + 1981 >> 0] = HEAP8[$0 + 1173 >> 0] | 0; //@line 13627
 $18 = $0 + 1982 | 0; //@line 13628
 $22 = $0 + 1984 | 0; //@line 13632
 HEAP32[$22 >> 2] = HEAP8[$18 >> 0] | 0 ? 2 : 1; //@line 13633
 HEAP8[$18 >> 0] = (HEAP32[$0 + 2380 >> 2] | 0) == 2 & 1; //@line 13638
 HEAP8[$0 + 2026 >> 0] = HEAP8[$0 + 1965 >> 0] | 0; //@line 13642
 $29 = $0 + 4 | 0; //@line 13643
 $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 13644
 $30 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($29, $8) | 0; //@line 13645
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 406; //@line 13648
  HEAP32[$AsyncCtx3 + 4 >> 2] = $18; //@line 13650
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 13652
  HEAP32[$AsyncCtx3 + 12 >> 2] = $29; //@line 13654
  HEAP32[$AsyncCtx3 + 16 >> 2] = $11; //@line 13656
  HEAP32[$AsyncCtx3 + 20 >> 2] = $vararg_buffer; //@line 13658
  HEAP32[$AsyncCtx3 + 24 >> 2] = $vararg_buffer; //@line 13660
  HEAP32[$AsyncCtx3 + 28 >> 2] = $22; //@line 13662
  sp = STACKTOP; //@line 13663
  STACKTOP = sp; //@line 13664
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13666
 if (!$30) {
  $49 = HEAP32[$11 >> 2] | 0; //@line 13668
  HEAP32[$vararg_buffer >> 2] = $49; //@line 13669
  _mbed_tracef(16, 12709, 12771, $vararg_buffer); //@line 13670
  STACKTOP = sp; //@line 13671
  return;
 }
 $39 = (HEAP8[$18 >> 0] | 0) != 0; //@line 13674
 $41 = HEAP32[$0 + 1888 >> 2] | 0; //@line 13676
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 13677
 __ZN7LoRaPHY15setup_rx_windowEbj($29, $39, $41); //@line 13678
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 407; //@line 13681
  HEAP32[$AsyncCtx + 4 >> 2] = $22; //@line 13683
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 13685
  HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 13687
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer; //@line 13689
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 13691
  sp = STACKTOP; //@line 13692
  STACKTOP = sp; //@line 13693
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13695
 HEAP32[$0 + 1168 >> 2] = HEAP32[$22 >> 2]; //@line 13698
 $49 = HEAP32[$11 >> 2] | 0; //@line 13699
 HEAP32[$vararg_buffer >> 2] = $49; //@line 13700
 _mbed_tracef(16, 12709, 12771, $vararg_buffer); //@line 13701
 STACKTOP = sp; //@line 13702
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 12585
 $7 = ($2 | 0) != 0; //@line 12589
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 12593
   $$03555 = $0; //@line 12594
   $$03654 = $2; //@line 12594
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 12599
     $$036$lcssa64 = $$03654; //@line 12599
     label = 6; //@line 12600
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 12603
    $12 = $$03654 + -1 | 0; //@line 12604
    $16 = ($12 | 0) != 0; //@line 12608
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 12611
     $$03654 = $12; //@line 12611
    } else {
     $$035$lcssa = $11; //@line 12613
     $$036$lcssa = $12; //@line 12613
     $$lcssa = $16; //@line 12613
     label = 5; //@line 12614
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 12619
   $$036$lcssa = $2; //@line 12619
   $$lcssa = $7; //@line 12619
   label = 5; //@line 12620
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 12625
   $$036$lcssa64 = $$036$lcssa; //@line 12625
   label = 6; //@line 12626
  } else {
   $$2 = $$035$lcssa; //@line 12628
   $$3 = 0; //@line 12628
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 12634
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 12637
    $$3 = $$036$lcssa64; //@line 12637
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 12639
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 12643
      $$13745 = $$036$lcssa64; //@line 12643
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 12646
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 12655
       $30 = $$13745 + -4 | 0; //@line 12656
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 12659
        $$13745 = $30; //@line 12659
       } else {
        $$0$lcssa = $29; //@line 12661
        $$137$lcssa = $30; //@line 12661
        label = 11; //@line 12662
        break L11;
       }
      }
      $$140 = $$046; //@line 12666
      $$23839 = $$13745; //@line 12666
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 12668
      $$137$lcssa = $$036$lcssa64; //@line 12668
      label = 11; //@line 12669
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 12675
      $$3 = 0; //@line 12675
      break;
     } else {
      $$140 = $$0$lcssa; //@line 12678
      $$23839 = $$137$lcssa; //@line 12678
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 12685
      $$3 = $$23839; //@line 12685
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 12688
     $$23839 = $$23839 + -1 | 0; //@line 12689
     if (!$$23839) {
      $$2 = $35; //@line 12692
      $$3 = 0; //@line 12692
      break;
     } else {
      $$140 = $35; //@line 12695
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 12703
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 12356
 do {
  if (!$0) {
   do {
    if (!(HEAP32[2636] | 0)) {
     $34 = 0; //@line 12364
    } else {
     $12 = HEAP32[2636] | 0; //@line 12366
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12367
     $13 = _fflush($12) | 0; //@line 12368
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 706; //@line 12371
      sp = STACKTOP; //@line 12372
      return 0; //@line 12373
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 12375
      $34 = $13; //@line 12376
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 12382
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 12386
    } else {
     $$02327 = $$02325; //@line 12388
     $$02426 = $34; //@line 12388
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 12395
      } else {
       $28 = 0; //@line 12397
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12405
       $25 = ___fflush_unlocked($$02327) | 0; //@line 12406
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 12411
       $$1 = $25 | $$02426; //@line 12413
      } else {
       $$1 = $$02426; //@line 12415
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 12419
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 12422
      if (!$$023) {
       $$024$lcssa = $$1; //@line 12425
       break L9;
      } else {
       $$02327 = $$023; //@line 12428
       $$02426 = $$1; //@line 12428
      }
     }
     HEAP32[$AsyncCtx >> 2] = 707; //@line 12431
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 12433
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 12435
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 12437
     sp = STACKTOP; //@line 12438
     return 0; //@line 12439
    }
   } while (0);
   ___ofl_unlock(); //@line 12442
   $$0 = $$024$lcssa; //@line 12443
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 12449
    $5 = ___fflush_unlocked($0) | 0; //@line 12450
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 704; //@line 12453
     sp = STACKTOP; //@line 12454
     return 0; //@line 12455
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12457
     $$0 = $5; //@line 12458
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 12463
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12464
   $7 = ___fflush_unlocked($0) | 0; //@line 12465
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 705; //@line 12468
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 12471
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 12473
    sp = STACKTOP; //@line 12474
    return 0; //@line 12475
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12477
   if ($phitmp) {
    $$0 = $7; //@line 12479
   } else {
    ___unlockfile($0); //@line 12481
    $$0 = $7; //@line 12482
   }
  }
 } while (0);
 return $$0 | 0; //@line 12486
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23588
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23590
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23592
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23594
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23596
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23598
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 23600
 if (HEAP8[___async_retval >> 0] & 1) {
  $31 = $2; //@line 23605
 } else {
  $18 = $2 + 1 | 0; //@line 23607
  if (($18 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $16 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 23614
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 23616
   $19 = FUNCTION_TABLE_iiii[$16 & 31]($6, $8, $18 & 255) | 0; //@line 23617
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 535; //@line 23620
    $20 = $ReallocAsyncCtx + 4 | 0; //@line 23621
    HEAP32[$20 >> 2] = $18; //@line 23622
    $21 = $ReallocAsyncCtx + 8 | 0; //@line 23623
    HEAP32[$21 >> 2] = $4; //@line 23624
    $22 = $ReallocAsyncCtx + 12 | 0; //@line 23625
    HEAP32[$22 >> 2] = $6; //@line 23626
    $23 = $ReallocAsyncCtx + 16 | 0; //@line 23627
    HEAP32[$23 >> 2] = $8; //@line 23628
    $24 = $ReallocAsyncCtx + 20 | 0; //@line 23629
    HEAP32[$24 >> 2] = $10; //@line 23630
    $25 = $ReallocAsyncCtx + 24 | 0; //@line 23631
    HEAP8[$25 >> 0] = $12; //@line 23632
    sp = STACKTOP; //@line 23633
    return;
   }
   HEAP8[___async_retval >> 0] = $19 & 1; //@line 23638
   ___async_unwind = 0; //@line 23639
   HEAP32[$ReallocAsyncCtx >> 2] = 535; //@line 23640
   $20 = $ReallocAsyncCtx + 4 | 0; //@line 23641
   HEAP32[$20 >> 2] = $18; //@line 23642
   $21 = $ReallocAsyncCtx + 8 | 0; //@line 23643
   HEAP32[$21 >> 2] = $4; //@line 23644
   $22 = $ReallocAsyncCtx + 12 | 0; //@line 23645
   HEAP32[$22 >> 2] = $6; //@line 23646
   $23 = $ReallocAsyncCtx + 16 | 0; //@line 23647
   HEAP32[$23 >> 2] = $8; //@line 23648
   $24 = $ReallocAsyncCtx + 20 | 0; //@line 23649
   HEAP32[$24 >> 2] = $10; //@line 23650
   $25 = $ReallocAsyncCtx + 24 | 0; //@line 23651
   HEAP8[$25 >> 0] = $12; //@line 23652
   sp = STACKTOP; //@line 23653
   return;
  } else {
   $31 = -1; //@line 23656
  }
 }
 $34 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 23662
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 23663
 $35 = FUNCTION_TABLE_iiii[$34 & 31]($6, $8, $31 & 255) | 0; //@line 23664
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 536; //@line 23667
  $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 23668
  HEAP32[$36 >> 2] = $6; //@line 23669
  $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 23670
  HEAP8[$37 >> 0] = $12; //@line 23671
  $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 23672
  HEAP32[$38 >> 2] = $8; //@line 23673
  sp = STACKTOP; //@line 23674
  return;
 }
 HEAP8[___async_retval >> 0] = $35 & 1; //@line 23679
 ___async_unwind = 0; //@line 23680
 HEAP32[$ReallocAsyncCtx2 >> 2] = 536; //@line 23681
 $36 = $ReallocAsyncCtx2 + 4 | 0; //@line 23682
 HEAP32[$36 >> 2] = $6; //@line 23683
 $37 = $ReallocAsyncCtx2 + 8 | 0; //@line 23684
 HEAP8[$37 >> 0] = $12; //@line 23685
 $38 = $ReallocAsyncCtx2 + 12 | 0; //@line 23686
 HEAP32[$38 >> 2] = $8; //@line 23687
 sp = STACKTOP; //@line 23688
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_56($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21395
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21397
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21399
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21401
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21403
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21405
 $12 = $0 + 24 | 0; //@line 21407
 $14 = HEAP32[$12 >> 2] | 0; //@line 21409
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 21412
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 21414
 $20 = HEAP32[$2 >> 2] | 0; //@line 21415
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 21419
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(32) | 0; //@line 21420
  FUNCTION_TABLE_vii[$23 & 15]($6, $8); //@line 21421
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 57; //@line 21424
   $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 21425
   HEAP32[$24 >> 2] = $2; //@line 21426
   $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 21427
   HEAP32[$25 >> 2] = $4; //@line 21428
   $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 21429
   HEAP32[$26 >> 2] = $10; //@line 21430
   $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 21431
   $28 = $27; //@line 21432
   $29 = $28; //@line 21433
   HEAP32[$29 >> 2] = $14; //@line 21434
   $30 = $28 + 4 | 0; //@line 21435
   $31 = $30; //@line 21436
   HEAP32[$31 >> 2] = $17; //@line 21437
   $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 21438
   HEAP32[$32 >> 2] = $19; //@line 21439
   $33 = $ReallocAsyncCtx5 + 28 | 0; //@line 21440
   HEAP32[$33 >> 2] = $8; //@line 21441
   sp = STACKTOP; //@line 21442
   return;
  }
  ___async_unwind = 0; //@line 21445
  HEAP32[$ReallocAsyncCtx5 >> 2] = 57; //@line 21446
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 21447
  HEAP32[$24 >> 2] = $2; //@line 21448
  $25 = $ReallocAsyncCtx5 + 8 | 0; //@line 21449
  HEAP32[$25 >> 2] = $4; //@line 21450
  $26 = $ReallocAsyncCtx5 + 12 | 0; //@line 21451
  HEAP32[$26 >> 2] = $10; //@line 21452
  $27 = $ReallocAsyncCtx5 + 16 | 0; //@line 21453
  $28 = $27; //@line 21454
  $29 = $28; //@line 21455
  HEAP32[$29 >> 2] = $14; //@line 21456
  $30 = $28 + 4 | 0; //@line 21457
  $31 = $30; //@line 21458
  HEAP32[$31 >> 2] = $17; //@line 21459
  $32 = $ReallocAsyncCtx5 + 24 | 0; //@line 21460
  HEAP32[$32 >> 2] = $19; //@line 21461
  $33 = $ReallocAsyncCtx5 + 28 | 0; //@line 21462
  HEAP32[$33 >> 2] = $8; //@line 21463
  sp = STACKTOP; //@line 21464
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 21467
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 21468
 $34 = HEAP32[$2 >> 2] | 0; //@line 21469
 if (!$34) {
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($19); //@line 21472
  return;
 }
 $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 21476
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21477
 FUNCTION_TABLE_vi[$37 & 1023]($8); //@line 21478
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 21481
  $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 21482
  HEAP32[$38 >> 2] = $19; //@line 21483
  sp = STACKTOP; //@line 21484
  return;
 }
 ___async_unwind = 0; //@line 21487
 HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 21488
 $38 = $ReallocAsyncCtx6 + 4 | 0; //@line 21489
 HEAP32[$38 >> 2] = $19; //@line 21490
 sp = STACKTOP; //@line 21491
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_386($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27398
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27400
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27402
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27404
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27406
 if (!$AsyncRetVal) {
  $22 = HEAP32[$2 >> 2] | 0; //@line 27409
  if (!$22) {
   HEAP32[___async_retval >> 2] = 0; //@line 27413
   return;
  }
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 27417
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27418
  FUNCTION_TABLE_vi[$25 & 1023]($6); //@line 27419
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 27422
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 27423
   HEAP32[$26 >> 2] = 0; //@line 27424
   sp = STACKTOP; //@line 27425
   return;
  }
  ___async_unwind = 0; //@line 27428
  HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 27429
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 27430
  HEAP32[$26 >> 2] = 0; //@line 27431
  sp = STACKTOP; //@line 27432
  return;
 }
 $9 = HEAP32[$2 >> 2] | 0; //@line 27435
 if (!$9) {
  HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 27439
  _equeue_event_dtor($AsyncRetVal, 283); //@line 27440
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27441
  $18 = _equeue_post($4, 284, $AsyncRetVal) | 0; //@line 27442
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 27445
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 27446
   HEAP32[$19 >> 2] = $2; //@line 27447
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 27448
   HEAP32[$20 >> 2] = $6; //@line 27449
   sp = STACKTOP; //@line 27450
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 27454
  ___async_unwind = 0; //@line 27455
  HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 27456
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 27457
  HEAP32[$19 >> 2] = $2; //@line 27458
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 27459
  HEAP32[$20 >> 2] = $6; //@line 27460
  sp = STACKTOP; //@line 27461
  return;
 } else {
  $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 27465
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 27466
  FUNCTION_TABLE_vii[$12 & 15]($AsyncRetVal, $6); //@line 27467
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 27470
   $13 = $ReallocAsyncCtx + 4 | 0; //@line 27471
   HEAP32[$13 >> 2] = $2; //@line 27472
   $14 = $ReallocAsyncCtx + 8 | 0; //@line 27473
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 27474
   $15 = $ReallocAsyncCtx + 12 | 0; //@line 27475
   HEAP32[$15 >> 2] = $4; //@line 27476
   $16 = $ReallocAsyncCtx + 16 | 0; //@line 27477
   HEAP32[$16 >> 2] = $6; //@line 27478
   sp = STACKTOP; //@line 27479
   return;
  }
  ___async_unwind = 0; //@line 27482
  HEAP32[$ReallocAsyncCtx >> 2] = 282; //@line 27483
  $13 = $ReallocAsyncCtx + 4 | 0; //@line 27484
  HEAP32[$13 >> 2] = $2; //@line 27485
  $14 = $ReallocAsyncCtx + 8 | 0; //@line 27486
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 27487
  $15 = $ReallocAsyncCtx + 12 | 0; //@line 27488
  HEAP32[$15 >> 2] = $4; //@line 27489
  $16 = $ReallocAsyncCtx + 16 | 0; //@line 27490
  HEAP32[$16 >> 2] = $6; //@line 27491
  sp = STACKTOP; //@line 27492
  return;
 }
}
function __ZN7LoRaPHY19update_band_timeoffEbbP6band_th($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$060 = 0, $$060$us = 0, $$2 = 0, $$2$us = 0, $$pr$us = 0, $$sink2 = 0, $10 = 0, $20 = 0, $26 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $6 = 0, $7 = 0, $8 = 0, $indvars$iv = 0, $indvars$iv62 = 0, $wide$trip$count = 0, label = 0;
 if (!($4 << 24 >> 24)) {
  $$0$lcssa = -1; //@line 22163
  return $$0$lcssa | 0; //@line 22164
 }
 $6 = $0 + 8 | 0; //@line 22166
 $wide$trip$count = $4 & 255; //@line 22167
 if ($1) {
  $$060$us = -1; //@line 22169
  $indvars$iv = 0; //@line 22169
  while (1) {
   $7 = $3 + ($indvars$iv * 24 | 0) + 12 | 0; //@line 22171
   do {
    if ($2) {
     $8 = HEAP32[$7 >> 2] | 0; //@line 22174
     $10 = $3 + ($indvars$iv * 24 | 0) + 8 | 0; //@line 22176
     if ($8 >>> 0 <= (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) >>> 0) {
      HEAP32[$7 >> 2] = 0; //@line 22181
      $$2$us = $$060$us; //@line 22182
      break;
     }
     $$pr$us = HEAP32[$7 >> 2] | 0; //@line 22185
     if (!$$pr$us) {
      $$2$us = $$060$us; //@line 22188
     } else {
      if (($$pr$us - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0) >>> 0 < $$060$us >>> 0) {
       $20 = HEAP32[$7 >> 2] | 0; //@line 22196
       $$2$us = $20 - (__ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$10 >> 2] | 0) | 0) | 0; //@line 22201
      } else {
       $$2$us = $$060$us; //@line 22203
      }
     }
    } else {
     HEAP32[$7 >> 2] = 0; //@line 22207
     $$2$us = 0; //@line 22208
    }
   } while (0);
   $indvars$iv = $indvars$iv + 1 | 0; //@line 22211
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$0$lcssa = $$2$us; //@line 22214
    break;
   } else {
    $$060$us = $$2$us; //@line 22217
   }
  }
  return $$0$lcssa | 0; //@line 22220
 } else {
  $$060 = -1; //@line 22222
  $indvars$iv62 = 0; //@line 22222
 }
 while (1) {
  $26 = $3 + ($indvars$iv62 * 24 | 0) + 4 | 0; //@line 22226
  $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$26 >> 2] | 0) | 0; //@line 22228
  if ($2) {
   $34 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$3 + ($indvars$iv62 * 24 | 0) + 8 >> 2] | 0) | 0; //@line 22234
  } else {
   $34 = 0; //@line 22236
  }
  if ($28 >>> 0 > $34 >>> 0) {
   $$sink2 = $26; //@line 22240
   label = 17; //@line 22241
  } else {
   if ($2) {
    $$sink2 = $3 + ($indvars$iv62 * 24 | 0) + 8 | 0; //@line 22245
    label = 17; //@line 22246
   } else {
    $41 = 0; //@line 22248
   }
  }
  if ((label | 0) == 17) {
   label = 0; //@line 22252
   $41 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj(HEAP32[$6 >> 2] | 0, HEAP32[$$sink2 >> 2] | 0) | 0; //@line 22256
  }
  $38 = $3 + ($indvars$iv62 * 24 | 0) + 12 | 0; //@line 22258
  $39 = HEAP32[$38 >> 2] | 0; //@line 22259
  if ($39 >>> 0 > $41 >>> 0) {
   $42 = $39 - $41 | 0; //@line 22262
   $$2 = $42 >>> 0 < $$060 >>> 0 ? $42 : $$060; //@line 22265
  } else {
   HEAP32[$38 >> 2] = 0; //@line 22267
   $$2 = $$060; //@line 22268
  }
  $indvars$iv62 = $indvars$iv62 + 1 | 0; //@line 22270
  if (($indvars$iv62 | 0) == ($wide$trip$count | 0)) {
   $$0$lcssa = $$2; //@line 22273
   break;
  } else {
   $$060 = $$2; //@line 22276
  }
 }
 return $$0$lcssa | 0; //@line 22279
}
function _main__async_cb_89($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 25849
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25851
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25853
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25855
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25857
 $10 = $8 + 4 | 0; //@line 25859
 HEAP32[$10 >> 2] = 0; //@line 25861
 HEAP32[$10 + 4 >> 2] = 0; //@line 25864
 HEAP32[$8 >> 2] = 677; //@line 25865
 $14 = $8 + 12 | 0; //@line 25866
 HEAP32[$14 >> 2] = 10276; //@line 25867
 $15 = HEAP32[5919] | 0; //@line 25868
 if (!$15) {
  $25 = HEAP32[2570] | 0; //@line 25872
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 25873
  FUNCTION_TABLE_vii[$25 & 15](23664, $8); //@line 25874
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 25877
   $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 25878
   HEAP32[$26 >> 2] = $8; //@line 25879
   $27 = $ReallocAsyncCtx4 + 8 | 0; //@line 25880
   HEAP32[$27 >> 2] = $14; //@line 25881
   $28 = $ReallocAsyncCtx4 + 12 | 0; //@line 25882
   HEAP32[$28 >> 2] = $2; //@line 25883
   $29 = $ReallocAsyncCtx4 + 16 | 0; //@line 25884
   HEAP32[$29 >> 2] = $4; //@line 25885
   $30 = $ReallocAsyncCtx4 + 20 | 0; //@line 25886
   HEAP32[$30 >> 2] = $6; //@line 25887
   sp = STACKTOP; //@line 25888
   return;
  }
  ___async_unwind = 0; //@line 25891
  HEAP32[$ReallocAsyncCtx4 >> 2] = 679; //@line 25892
  $26 = $ReallocAsyncCtx4 + 4 | 0; //@line 25893
  HEAP32[$26 >> 2] = $8; //@line 25894
  $27 = $ReallocAsyncCtx4 + 8 | 0; //@line 25895
  HEAP32[$27 >> 2] = $14; //@line 25896
  $28 = $ReallocAsyncCtx4 + 12 | 0; //@line 25897
  HEAP32[$28 >> 2] = $2; //@line 25898
  $29 = $ReallocAsyncCtx4 + 16 | 0; //@line 25899
  HEAP32[$29 >> 2] = $4; //@line 25900
  $30 = $ReallocAsyncCtx4 + 20 | 0; //@line 25901
  HEAP32[$30 >> 2] = $6; //@line 25902
  sp = STACKTOP; //@line 25903
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 25907
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 25908
  FUNCTION_TABLE_vi[$18 & 1023](23664); //@line 25909
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 25912
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 25913
   HEAP32[$19 >> 2] = $8; //@line 25914
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 25915
   HEAP32[$20 >> 2] = $14; //@line 25916
   $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 25917
   HEAP32[$21 >> 2] = $2; //@line 25918
   $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 25919
   HEAP32[$22 >> 2] = $4; //@line 25920
   $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 25921
   HEAP32[$23 >> 2] = $6; //@line 25922
   sp = STACKTOP; //@line 25923
   return;
  }
  ___async_unwind = 0; //@line 25926
  HEAP32[$ReallocAsyncCtx3 >> 2] = 678; //@line 25927
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 25928
  HEAP32[$19 >> 2] = $8; //@line 25929
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 25930
  HEAP32[$20 >> 2] = $14; //@line 25931
  $21 = $ReallocAsyncCtx3 + 12 | 0; //@line 25932
  HEAP32[$21 >> 2] = $2; //@line 25933
  $22 = $ReallocAsyncCtx3 + 16 | 0; //@line 25934
  HEAP32[$22 >> 2] = $4; //@line 25935
  $23 = $ReallocAsyncCtx3 + 20 | 0; //@line 25936
  HEAP32[$23 >> 2] = $6; //@line 25937
  sp = STACKTOP; //@line 25938
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17192
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 17198
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 17204
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 17207
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17208
    FUNCTION_TABLE_viiiii[$53 & 7]($50, $1, $2, $3, $4); //@line 17209
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 730; //@line 17212
     sp = STACKTOP; //@line 17213
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17216
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 17224
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 17229
     $19 = $1 + 44 | 0; //@line 17230
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 17236
     HEAP8[$22 >> 0] = 0; //@line 17237
     $23 = $1 + 53 | 0; //@line 17238
     HEAP8[$23 >> 0] = 0; //@line 17239
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 17241
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 17244
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 17245
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 17246
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 729; //@line 17249
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 17251
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 17253
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 17255
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 17257
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 17259
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 17261
      sp = STACKTOP; //@line 17262
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 17265
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 17269
      label = 13; //@line 17270
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 17275
       label = 13; //@line 17276
      } else {
       $$037$off039 = 3; //@line 17278
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 17282
      $39 = $1 + 40 | 0; //@line 17283
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 17286
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 17296
        $$037$off039 = $$037$off038; //@line 17297
       } else {
        $$037$off039 = $$037$off038; //@line 17299
       }
      } else {
       $$037$off039 = $$037$off038; //@line 17302
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 17305
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 17312
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13713
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   if (!(HEAP8[$0 + 2377 >> 0] | 0)) {
    $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13723
    __ZN7LoRaMac15open_rx2_windowEv($0); //@line 13724
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 408; //@line 13727
     HEAP32[$AsyncCtx7 + 4 >> 2] = $1; //@line 13729
     HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 13731
     HEAP16[$AsyncCtx7 + 12 >> 1] = $2; //@line 13733
     HEAP16[$AsyncCtx7 + 14 >> 1] = $3; //@line 13735
     HEAP8[$AsyncCtx7 + 16 >> 0] = $4; //@line 13737
     sp = STACKTOP; //@line 13738
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13741
     break;
    }
   } else {
    label = 6; //@line 13745
   }
  } else {
   label = 6; //@line 13748
  }
 } while (0);
 do {
  if ((label | 0) == 6) {
   $AsyncCtx15 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13754
   __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 13755
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 409; //@line 13758
    HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 13760
    HEAP32[$AsyncCtx15 + 8 >> 2] = $1; //@line 13762
    HEAP16[$AsyncCtx15 + 12 >> 1] = $2; //@line 13764
    HEAP16[$AsyncCtx15 + 14 >> 1] = $3; //@line 13766
    HEAP8[$AsyncCtx15 + 16 >> 0] = $4; //@line 13768
    sp = STACKTOP; //@line 13769
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 13772
   $AsyncCtx11 = _emscripten_alloc_async_context(20, sp) | 0; //@line 13774
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 13775
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 410; //@line 13778
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 13780
    HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 13782
    HEAP16[$AsyncCtx11 + 12 >> 1] = $2; //@line 13784
    HEAP16[$AsyncCtx11 + 14 >> 1] = $3; //@line 13786
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4; //@line 13788
    sp = STACKTOP; //@line 13789
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 13792
    break;
   }
  }
 } while (0);
 $trunc = (HEAPU8[$1 >> 0] | 0) >>> 5; //@line 13798
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$0 + 2376 >> 0] | 0) {
    HEAP8[$0 + 2084 >> 0] = 0; //@line 13807
    return;
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13810
   __ZN7LoRaMac24handle_join_accept_frameEPKht($0, $1, $2); //@line 13811
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 411; //@line 13814
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 13816
    sp = STACKTOP; //@line 13817
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13820
   HEAP8[$0 + 2084 >> 0] = 1; //@line 13822
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13827
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($0, $1, $2, 1, $trunc, $3, $4); //@line 13828
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 412; //@line 13831
    sp = STACKTOP; //@line 13832
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 13835
   return;
  }
 default:
  {
   return;
  }
 }
}
function _main__async_cb_81($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25565
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25567
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25571
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25573
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25575
 $$pre$i$i = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 25576
 HEAP32[5919] = $$pre$i$i; //@line 25577
 if ($$pre$i$i | 0) {
  $14 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 25582
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 25583
  FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 25584
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 680; //@line 25587
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 25588
   HEAP32[$15 >> 2] = $2; //@line 25589
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 25590
   HEAP32[$16 >> 2] = $6; //@line 25591
   $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 25592
   HEAP32[$17 >> 2] = $8; //@line 25593
   $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 25594
   HEAP32[$18 >> 2] = $10; //@line 25595
   sp = STACKTOP; //@line 25596
   return;
  }
  ___async_unwind = 0; //@line 25599
  HEAP32[$ReallocAsyncCtx5 >> 2] = 680; //@line 25600
  $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 25601
  HEAP32[$15 >> 2] = $2; //@line 25602
  $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 25603
  HEAP32[$16 >> 2] = $6; //@line 25604
  $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 25605
  HEAP32[$17 >> 2] = $8; //@line 25606
  $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 25607
  HEAP32[$18 >> 2] = $10; //@line 25608
  sp = STACKTOP; //@line 25609
  return;
 }
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20484, 23664) | 0; //@line 25612
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20484) | 0) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25616
  _puts(15210) | 0; //@line 25617
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 25620
   sp = STACKTOP; //@line 25621
   return;
  }
  ___async_unwind = 0; //@line 25624
  HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 25625
  sp = STACKTOP; //@line 25626
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(20484, 5) | 0; //@line 25629
 HEAP8[$6 >> 0] = 0; //@line 25630
 HEAP32[$6 + 4 >> 2] = 24297; //@line 25632
 HEAP32[$6 + 8 >> 2] = 24305; //@line 25634
 HEAP32[$6 + 12 >> 2] = 24313; //@line 25636
 HEAP8[$6 + 16 >> 0] = 3; //@line 25638
 $25 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20484, $6) | 0; //@line 25639
 switch ($25 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$8 >> 2] = $25; //@line 25645
   _printf(15244, $8) | 0; //@line 25646
   HEAP32[___async_retval >> 2] = -1; //@line 25648
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 25652
 _puts(15273) | 0; //@line 25653
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 25656
  $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 25657
  HEAP32[$26 >> 2] = $6; //@line 25658
  sp = STACKTOP; //@line 25659
  return;
 }
 ___async_unwind = 0; //@line 25662
 HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 25663
 $26 = $ReallocAsyncCtx6 + 4 | 0; //@line 25664
 HEAP32[$26 >> 2] = $6; //@line 25665
 sp = STACKTOP; //@line 25666
 return;
}
function __ZN7LoRaMacC2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 __ZN18LoRaWANTimeHandlerC2Ev($0); //@line 11965
 __ZN12LoRaPHYEU868C2ER18LoRaWANTimeHandler($0 + 4 | 0, $0); //@line 11967
 __ZN14LoRaMacCommandC2Ev($0 + 476 | 0); //@line 11969
 __ZN18LoRaMacChannelPlanC2Ev($0 + 752 | 0); //@line 11971
 __ZN13LoRaMacCryptoC2Ev($0 + 756 | 0); //@line 11973
 $5 = $0 + 1796 | 0; //@line 11974
 HEAP32[$5 >> 2] = 0; //@line 11975
 HEAP32[$5 + 4 >> 2] = 0; //@line 11975
 HEAP32[$5 + 8 >> 2] = 0; //@line 11975
 HEAP32[$5 + 12 >> 2] = 0; //@line 11975
 $6 = $0 + 1816 | 0; //@line 11976
 HEAP32[$6 >> 2] = 0; //@line 11977
 HEAP32[$6 + 4 >> 2] = 0; //@line 11977
 HEAP32[$6 + 8 >> 2] = 0; //@line 11977
 HEAP32[$6 + 12 >> 2] = 0; //@line 11977
 $7 = $0 + 1836 | 0; //@line 11978
 HEAP32[$7 >> 2] = 0; //@line 11979
 HEAP32[$7 + 4 >> 2] = 0; //@line 11979
 HEAP32[$7 + 8 >> 2] = 0; //@line 11979
 HEAP32[$7 + 12 >> 2] = 0; //@line 11979
 $8 = $0 + 1856 | 0; //@line 11980
 HEAP32[$8 >> 2] = 0; //@line 11981
 HEAP32[$8 + 4 >> 2] = 0; //@line 11981
 HEAP32[$8 + 8 >> 2] = 0; //@line 11981
 HEAP32[$8 + 12 >> 2] = 0; //@line 11981
 $9 = $0 + 1992 | 0; //@line 11982
 $10 = $0 + 2012 | 0; //@line 11983
 $11 = $0 + 2052 | 0; //@line 11984
 $12 = $0 + 2084 | 0; //@line 11985
 HEAP32[$0 + 2380 >> 2] = 0; //@line 11987
 $14 = $0 + 1704 | 0; //@line 11988
 $15 = $0 + 1752 | 0; //@line 11989
 HEAP16[$0 + 1440 >> 1] = 0; //@line 11991
 HEAP8[$0 + 1697 >> 0] = 0; //@line 11993
 HEAP8[$0 + 1174 >> 0] = 0; //@line 11995
 $19 = $0 + 1175 | 0; //@line 11996
 dest = $14; //@line 11997
 stop = dest + 44 | 0; //@line 11997
 do {
  HEAP32[dest >> 2] = 0; //@line 11997
  dest = dest + 4 | 0; //@line 11997
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 44 >> 1] = 0; //@line 11997
 HEAP32[$15 >> 2] = 0; //@line 11998
 HEAP32[$15 + 4 >> 2] = 0; //@line 11998
 HEAP32[$15 + 8 >> 2] = 0; //@line 11998
 HEAP32[$15 + 12 >> 2] = 0; //@line 11998
 _memset($9 | 0, 0, 386) | 0; //@line 11999
 HEAP8[$19 >> 0] = 1; //@line 12000
 HEAP32[$0 + 1768 >> 2] = 0; //@line 12002
 HEAP8[$0 + 1177 >> 0] = 0; //@line 12004
 HEAP8[$0 + 1178 >> 0] = 0; //@line 12006
 HEAP8[$0 + 1184 >> 0] = 0; //@line 12008
 HEAP32[$0 + 1788 >> 2] = 0; //@line 12010
 HEAP8[$0 + 1698 >> 0] = 1; //@line 12012
 HEAP8[$0 + 1699 >> 0] = 1; //@line 12014
 HEAP8[$0 + 1181 >> 0] = 0; //@line 12016
 HEAP32[$0 + 1792 >> 2] = 0; //@line 12018
 HEAP32[$0 + 1988 >> 2] = 0; //@line 12020
 HEAP8[$0 + 1936 >> 0] = 0; //@line 12022
 HEAP8[$0 + 1932 >> 0] = 0; //@line 12024
 HEAP32[$11 >> 2] = 0; //@line 12025
 HEAP32[$11 + 4 >> 2] = 0; //@line 12025
 HEAP32[$11 + 8 >> 2] = 0; //@line 12025
 HEAP32[$11 + 12 >> 2] = 0; //@line 12025
 HEAP32[$11 + 16 >> 2] = 0; //@line 12025
 HEAP32[$11 + 20 >> 2] = 0; //@line 12025
 HEAP32[$0 + 2056 >> 2] = 1; //@line 12027
 HEAP32[$12 >> 2] = 0; //@line 12028
 HEAP32[$12 + 4 >> 2] = 0; //@line 12028
 HEAP32[$12 + 8 >> 2] = 0; //@line 12028
 HEAP32[$12 + 12 >> 2] = 0; //@line 12028
 HEAP32[$12 + 16 >> 2] = 0; //@line 12028
 HEAP32[$0 + 2092 >> 2] = 1; //@line 12030
 dest = $10; //@line 12031
 stop = dest + 40 | 0; //@line 12031
 do {
  HEAP32[dest >> 2] = 0; //@line 12031
  dest = dest + 4 | 0; //@line 12031
 } while ((dest | 0) < (stop | 0));
 HEAP32[$0 + 2020 >> 2] = 1; //@line 12033
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3418
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 3429
 $14 = $1 + 20 | 0; //@line 3430
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3432
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 3437
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 3441
 $24 = $0 + 128 | 0; //@line 3442
 _equeue_mutex_lock($24); //@line 3443
 $25 = HEAP32[$0 >> 2] | 0; //@line 3444
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 3448
   label = 5; //@line 3449
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 3451
   $$053 = $0; //@line 3452
   $29 = $25; //@line 3452
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 3461
    $34 = HEAP32[$33 >> 2] | 0; //@line 3462
    if (!$34) {
     $$051$ph = $33; //@line 3465
     label = 5; //@line 3466
     break L1;
    } else {
     $$053 = $33; //@line 3469
     $29 = $34; //@line 3469
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 3477
    HEAP32[$49 >> 2] = $29; //@line 3478
    HEAP32[$29 + 16 >> 2] = $49; //@line 3480
    $$0515859 = $$053; //@line 3481
    label = 11; //@line 3482
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 3486
   $43 = $1 + 8 | 0; //@line 3487
   HEAP32[$43 >> 2] = $42; //@line 3488
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 3492
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 3494
   $47 = $1 + 12 | 0; //@line 3495
   HEAP32[$47 >> 2] = $46; //@line 3496
   HEAP32[$46 + 16 >> 2] = $47; //@line 3498
   $$05157 = $$053; //@line 3499
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 3504
  $$0515859 = $$051$ph; //@line 3505
  label = 11; //@line 3506
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 3510
  $$05157 = $$0515859; //@line 3511
 }
 HEAP32[$$05157 >> 2] = $1; //@line 3513
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 3515
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 3517
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 3520
  return $13 | 0; //@line 3521
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 3527
  return $13 | 0; //@line 3528
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 3533
  return $13 | 0; //@line 3534
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 3540
  return $13 | 0; //@line 3541
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 3544
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 3546
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3550
 FUNCTION_TABLE_vii[$54 & 15]($65, $67 & ~($67 >> 31)); //@line 3551
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 132; //@line 3554
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 3556
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 3558
  sp = STACKTOP; //@line 3559
  return 0; //@line 3560
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3562
 _equeue_mutex_unlock($24); //@line 3563
 return $13 | 0; //@line 3564
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_254($0) {
 $0 = $0 | 0;
 var $$pre126 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 17366
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17368
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17370
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17372
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17374
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17376
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17378
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17380
 $$pre126 = HEAP32[$2 >> 2] | 0; //@line 17381
 if ($$pre126 | 0) {
  $17 = HEAP32[$$pre126 + 4 >> 2] | 0; //@line 17385
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(28) | 0; //@line 17386
  FUNCTION_TABLE_vii[$17 & 15]($6, $8); //@line 17387
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 17390
   $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 17391
   HEAP32[$18 >> 2] = $2; //@line 17392
   $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 17393
   HEAP32[$19 >> 2] = $4; //@line 17394
   $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 17395
   HEAP32[$20 >> 2] = $8; //@line 17396
   $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 17397
   HEAP32[$21 >> 2] = $10; //@line 17398
   $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 17399
   HEAP32[$22 >> 2] = $12; //@line 17400
   $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 17401
   HEAP32[$23 >> 2] = $14; //@line 17402
   sp = STACKTOP; //@line 17403
   return;
  }
  ___async_unwind = 0; //@line 17406
  HEAP32[$ReallocAsyncCtx14 >> 2] = 198; //@line 17407
  $18 = $ReallocAsyncCtx14 + 4 | 0; //@line 17408
  HEAP32[$18 >> 2] = $2; //@line 17409
  $19 = $ReallocAsyncCtx14 + 8 | 0; //@line 17410
  HEAP32[$19 >> 2] = $4; //@line 17411
  $20 = $ReallocAsyncCtx14 + 12 | 0; //@line 17412
  HEAP32[$20 >> 2] = $8; //@line 17413
  $21 = $ReallocAsyncCtx14 + 16 | 0; //@line 17414
  HEAP32[$21 >> 2] = $10; //@line 17415
  $22 = $ReallocAsyncCtx14 + 20 | 0; //@line 17416
  HEAP32[$22 >> 2] = $12; //@line 17417
  $23 = $ReallocAsyncCtx14 + 24 | 0; //@line 17418
  HEAP32[$23 >> 2] = $14; //@line 17419
  sp = STACKTOP; //@line 17420
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 17423
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($10, $12); //@line 17424
 $26 = HEAP32[(HEAP32[$12 >> 2] | 0) + 72 >> 2] | 0; //@line 17427
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 17428
 FUNCTION_TABLE_vi[$26 & 1023]($12); //@line 17429
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17432
  $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 17433
  HEAP32[$27 >> 2] = $12; //@line 17434
  $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 17435
  HEAP32[$28 >> 2] = $14; //@line 17436
  $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 17437
  HEAP32[$29 >> 2] = $12; //@line 17438
  sp = STACKTOP; //@line 17439
  return;
 }
 ___async_unwind = 0; //@line 17442
 HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17443
 $27 = $ReallocAsyncCtx16 + 4 | 0; //@line 17444
 HEAP32[$27 >> 2] = $12; //@line 17445
 $28 = $ReallocAsyncCtx16 + 8 | 0; //@line 17446
 HEAP32[$28 >> 2] = $14; //@line 17447
 $29 = $ReallocAsyncCtx16 + 12 | 0; //@line 17448
 HEAP32[$29 >> 2] = $12; //@line 17449
 sp = STACKTOP; //@line 17450
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$unpack10 = 0, $10 = 0, $13 = 0, $19 = 0, $20 = 0, $23 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 8683
 STACKTOP = STACKTOP + 16 | 0; //@line 8684
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8684
 $3 = sp; //@line 8685
 $$unpack10 = HEAP32[$2 + 4 >> 2] | 0; //@line 8688
 $4 = $3 + 12 | 0; //@line 8689
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 8690
 HEAP32[$3 + 4 >> 2] = $$unpack10; //@line 8692
 HEAP32[$3 + 8 >> 2] = $1; //@line 8694
 HEAP32[$4 >> 2] = 824; //@line 8695
 $AsyncCtx8 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8696
 $5 = _equeue_alloc($0, 16) | 0; //@line 8697
 if (___async) {
  HEAP32[$AsyncCtx8 >> 2] = 281; //@line 8700
  HEAP32[$AsyncCtx8 + 4 >> 2] = $4; //@line 8702
  HEAP32[$AsyncCtx8 + 8 >> 2] = $0; //@line 8704
  HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 8706
  sp = STACKTOP; //@line 8707
  STACKTOP = sp; //@line 8708
  return 0; //@line 8708
 }
 _emscripten_free_async_context($AsyncCtx8 | 0); //@line 8710
 do {
  if (!$5) {
   $$0$i = 0; //@line 8714
  } else {
   $10 = HEAP32[$4 >> 2] | 0; //@line 8716
   do {
    if (!$10) {
     $19 = 0; //@line 8720
    } else {
     $13 = HEAP32[$10 + 4 >> 2] | 0; //@line 8723
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 8724
     FUNCTION_TABLE_vii[$13 & 15]($5, $3); //@line 8725
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 282; //@line 8728
      HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 8730
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 8732
      HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 8734
      HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 8736
      sp = STACKTOP; //@line 8737
      STACKTOP = sp; //@line 8738
      return 0; //@line 8738
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 8740
      $19 = HEAP32[$4 >> 2] | 0; //@line 8742
      break;
     }
    }
   } while (0);
   HEAP32[$5 + 12 >> 2] = $19; //@line 8748
   _equeue_event_dtor($5, 283); //@line 8749
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8750
   $20 = _equeue_post($0, 284, $5) | 0; //@line 8751
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 285; //@line 8754
    HEAP32[$AsyncCtx5 + 4 >> 2] = $4; //@line 8756
    HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 8758
    sp = STACKTOP; //@line 8759
    STACKTOP = sp; //@line 8760
    return 0; //@line 8760
   } else {
    _emscripten_free_async_context($AsyncCtx5 | 0); //@line 8762
    $$0$i = $20; //@line 8763
    break;
   }
  }
 } while (0);
 $23 = HEAP32[$4 >> 2] | 0; //@line 8768
 if (!$23) {
  STACKTOP = sp; //@line 8771
  return $$0$i | 0; //@line 8771
 }
 $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 8774
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 8775
 FUNCTION_TABLE_vi[$26 & 1023]($3); //@line 8776
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 286; //@line 8779
  HEAP32[$AsyncCtx2 + 4 >> 2] = $$0$i; //@line 8781
  sp = STACKTOP; //@line 8782
  STACKTOP = sp; //@line 8783
  return 0; //@line 8783
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8785
 STACKTOP = sp; //@line 8786
 return $$0$i | 0; //@line 8786
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_2($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18444
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18446
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 18448
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18450
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18452
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18454
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18456
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18458
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 18460
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18462
 $20 = HEAP8[$0 + 40 >> 0] | 0; //@line 18464
 $22 = HEAP8[$0 + 41 >> 0] | 0; //@line 18466
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 18468
 $26 = HEAP8[$0 + 48 >> 0] | 0; //@line 18470
 $28 = HEAP16[$0 + 50 >> 1] | 0; //@line 18472
 $30 = HEAP32[$0 + 52 >> 2] | 0; //@line 18474
 $32 = HEAP32[$0 + 56 >> 2] | 0; //@line 18476
 $34 = HEAP32[$0 + 60 >> 2] | 0; //@line 18478
 $36 = HEAP32[$0 + 64 >> 2] | 0; //@line 18480
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 18482
 $40 = HEAP8[$0 + 72 >> 0] & 1; //@line 18485
 $42 = HEAP32[$0 + 76 >> 2] | 0; //@line 18487
 $44 = HEAP16[$0 + 80 >> 1] | 0; //@line 18489
 $46 = HEAP32[$0 + 84 >> 2] | 0; //@line 18491
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  _mbed_tracef(2, 12709, 12733, HEAP32[$0 + 88 >> 2] | 0); //@line 18500
  HEAP32[$2 + 2020 >> 2] = 12; //@line 18502
  HEAP8[$2 + 2012 >> 0] = 0; //@line 18504
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(88) | 0; //@line 18508
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 18509
 if (!___async) {
  ___async_unwind = 0; //@line 18512
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 393; //@line 18514
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 18516
 HEAP8[$ReallocAsyncCtx5 + 8 >> 0] = $4; //@line 18518
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 18520
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 18522
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 18524
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $46; //@line 18526
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $38; //@line 18528
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 18530
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $36; //@line 18532
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $2; //@line 18534
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $12; //@line 18536
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $14; //@line 18538
 HEAP8[$ReallocAsyncCtx5 + 52 >> 0] = $16; //@line 18540
 HEAP8[$ReallocAsyncCtx5 + 53 >> 0] = $20; //@line 18542
 HEAP8[$ReallocAsyncCtx5 + 54 >> 0] = $22; //@line 18544
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $24; //@line 18546
 HEAP8[$ReallocAsyncCtx5 + 60 >> 0] = $26; //@line 18548
 HEAP16[$ReallocAsyncCtx5 + 62 >> 1] = $28; //@line 18550
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $30; //@line 18552
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $32; //@line 18554
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $34; //@line 18556
 HEAP8[$ReallocAsyncCtx5 + 76 >> 0] = $40 & 1; //@line 18559
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $42; //@line 18561
 HEAP16[$ReallocAsyncCtx5 + 84 >> 1] = $44; //@line 18563
 sp = STACKTOP; //@line 18564
 return;
}
function _mbed_vtracef__async_cb_203($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 337
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 339
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 343
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 345
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 348
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 350
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 352
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 354
 $$13 = ($AsyncRetVal | 0) >= ($2 | 0) ? 0 : $AsyncRetVal; //@line 356
 $18 = (HEAP32[$0 + 8 >> 2] | 0) + $$13 | 0; //@line 358
 $19 = $2 - $$13 | 0; //@line 359
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[173] | 0; //@line 363
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $10 ^ 1) {
     break;
    }
    _snprintf($18, $19, 11876, $6) | 0; //@line 375
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 378
   $23 = FUNCTION_TABLE_i[$21 & 7]() | 0; //@line 379
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 149; //@line 382
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 383
    HEAP32[$24 >> 2] = $12; //@line 384
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 385
    HEAP32[$25 >> 2] = $18; //@line 386
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 387
    HEAP32[$26 >> 2] = $19; //@line 388
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 389
    HEAP32[$27 >> 2] = $14; //@line 390
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 391
    $$expand_i1_val = $10 & 1; //@line 392
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 393
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 394
    HEAP32[$29 >> 2] = $6; //@line 395
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 396
    HEAP32[$30 >> 2] = $8; //@line 397
    sp = STACKTOP; //@line 398
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 402
   ___async_unwind = 0; //@line 403
   HEAP32[$ReallocAsyncCtx6 >> 2] = 149; //@line 404
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 405
   HEAP32[$24 >> 2] = $12; //@line 406
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 407
   HEAP32[$25 >> 2] = $18; //@line 408
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 409
   HEAP32[$26 >> 2] = $19; //@line 410
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 411
   HEAP32[$27 >> 2] = $14; //@line 412
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 413
   $$expand_i1_val = $10 & 1; //@line 414
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 415
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 416
   HEAP32[$29 >> 2] = $6; //@line 417
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 418
   HEAP32[$30 >> 2] = $8; //@line 419
   sp = STACKTOP; //@line 420
   return;
  }
 } while (0);
 $34 = HEAP32[174] | 0; //@line 424
 $35 = HEAP32[167] | 0; //@line 425
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 426
 FUNCTION_TABLE_vi[$34 & 1023]($35); //@line 427
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 430
  sp = STACKTOP; //@line 431
  return;
 }
 ___async_unwind = 0; //@line 434
 HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 435
 sp = STACKTOP; //@line 436
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 16504
 STACKTOP = STACKTOP + 48 | 0; //@line 16505
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 16505
 $vararg_buffer10 = sp + 32 | 0; //@line 16506
 $vararg_buffer7 = sp + 24 | 0; //@line 16507
 $vararg_buffer3 = sp + 16 | 0; //@line 16508
 $vararg_buffer = sp; //@line 16509
 $0 = sp + 36 | 0; //@line 16510
 $1 = ___cxa_get_globals_fast() | 0; //@line 16511
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 16514
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 16519
   $9 = HEAP32[$7 >> 2] | 0; //@line 16521
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 16524
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 18364; //@line 16530
    _abort_message(18314, $vararg_buffer7); //@line 16531
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 16540
   } else {
    $22 = $3 + 80 | 0; //@line 16542
   }
   HEAP32[$0 >> 2] = $22; //@line 16544
   $23 = HEAP32[$3 >> 2] | 0; //@line 16545
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 16547
   $28 = HEAP32[(HEAP32[94] | 0) + 16 >> 2] | 0; //@line 16550
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 16551
   $29 = FUNCTION_TABLE_iiii[$28 & 31](376, $23, $0) | 0; //@line 16552
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 720; //@line 16555
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16557
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 16559
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 16561
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 16563
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 16565
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 16567
    sp = STACKTOP; //@line 16568
    STACKTOP = sp; //@line 16569
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 16571
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 18364; //@line 16573
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 16575
    _abort_message(18273, $vararg_buffer3); //@line 16576
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 16579
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 16582
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16583
   $40 = FUNCTION_TABLE_ii[$39 & 15]($36) | 0; //@line 16584
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 721; //@line 16587
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 16589
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 16591
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 16593
    sp = STACKTOP; //@line 16594
    STACKTOP = sp; //@line 16595
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 16597
    HEAP32[$vararg_buffer >> 2] = 18364; //@line 16598
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 16600
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 16602
    _abort_message(18228, $vararg_buffer); //@line 16603
   }
  }
 }
 _abort_message(18352, $vararg_buffer10); //@line 16608
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$$125$off0 = 0, $$026 = 0, $$4$off0 = 0, $$5$off039 = 0, $$5$off040$ph = 0, $11 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $21 = 0, $37 = 0, $43 = 0, $44 = 0, $45 = 0, $50 = 0, $52 = 0, $6 = 0, $62 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21728
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$026 = -1003; //@line 21733
  return $$026 | 0; //@line 21734
 }
 $6 = $2 & 255; //@line 21736
 if ((HEAPU8[$0 + 20 >> 0] | 0) <= ($2 & 255)) {
  $$026 = -1003; //@line 21741
  return $$026 | 0; //@line 21742
 }
 $11 = HEAP8[$1 + 8 >> 0] | 0; //@line 21745
 $12 = $11 & 15; //@line 21746
 $14 = HEAP8[$0 + 26 >> 0] | 0; //@line 21748
 $16 = HEAP8[$0 + 27 >> 0] | 0; //@line 21750
 $19 = ($11 & 255) >>> 4; //@line 21754
 $21 = $19 << 24 >> 24 <= $16 << 24 >> 24; //@line 21756
 $$$125$off0 = ($12 & 255) > ($19 & 255) | (($12 << 24 >> 24 < $14 << 24 >> 24 ? 1 : $12 << 24 >> 24 > $16 << 24 >> 24) | $19 << 24 >> 24 >= $14 << 24 >> 24 & $21 ^ 1); //@line 21761
 if ((HEAPU8[$0 + 18 >> 0] | 0) > ($2 & 255)) {
  $$4$off0 = ($12 & 255) > ($14 & 255) | $$$125$off0 | $21 & $19 << 24 >> 24 >= (HEAP8[$0 + 31 >> 0] | 0) ^ 1; //@line 21773
  if ((HEAP32[$1 >> 2] | 0) == (HEAP32[(HEAP32[$0 + 124 >> 2] | 0) + ($6 * 12 | 0) >> 2] | 0)) {
   $$5$off039 = $$4$off0; //@line 21781
   label = 5; //@line 21782
  } else {
   $$5$off040$ph = $$4$off0; //@line 21784
  }
 } else {
  $$5$off039 = $$$125$off0; //@line 21787
  label = 5; //@line 21788
 }
 if ((label | 0) == 5) {
  $37 = HEAP8[$1 + 9 >> 0] | 0; //@line 21792
  if (($37 & 255) < (HEAPU8[$0 + 76 >> 0] | 0)) {
   $43 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21799
   $44 = HEAP32[$1 >> 2] | 0; //@line 21800
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 21801
   $45 = FUNCTION_TABLE_iiii[$43 & 31]($0, $44, $37) | 0; //@line 21802
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 537; //@line 21805
    HEAP8[$AsyncCtx + 4 >> 0] = $$5$off039 & 1; //@line 21808
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 21810
    HEAP32[$AsyncCtx + 12 >> 2] = $6; //@line 21812
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 21814
    sp = STACKTOP; //@line 21815
    return 0; //@line 21816
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 21818
   if ($45) {
    if ($$5$off039) {
     $$026 = $$5$off039 ? -1005 : -1004; //@line 21822
     return $$026 | 0; //@line 21823
    }
    $50 = $0 + 124 | 0; //@line 21825
    $52 = (HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 21827
    HEAP32[$52 >> 2] = HEAP32[$1 >> 2]; //@line 21828
    HEAP32[$52 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 21828
    HEAP32[$52 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 21828
    HEAP8[(HEAP32[$50 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$1 + 9 >> 0] | 0; //@line 21833
    $62 = (HEAP32[$0 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 21839
    HEAP16[$62 >> 1] = 1 << ($6 & 15) | HEAPU16[$62 >> 1]; //@line 21844
    $$026 = 0; //@line 21845
    return $$026 | 0; //@line 21846
   } else {
    $$5$off040$ph = $$5$off039; //@line 21848
   }
  } else {
   $$5$off040$ph = $$5$off039; //@line 21851
  }
 }
 $$026 = $$5$off040$ph ? -1006 : -1004; //@line 21855
 return $$026 | 0; //@line 21856
}
function __ZN18LoRaMacChannelPlan11remove_planEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $32 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $indvars$iv = 0, $indvars$iv$next = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17220
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $39 = -1002; //@line 17224
  return $39 | 0; //@line 17225
 }
 $4 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17228
 $6 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 17230
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 1) | 0; //@line 17232
 if (!($4 << 24 >> 24)) {
  $39 = 0; //@line 17235
  return $39 | 0; //@line 17236
 }
 $10 = $4 & 255; //@line 17238
 $indvars$iv = 0; //@line 17239
 while (1) {
  if (!(__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0)) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $6, $indvars$iv) | 0) {
    if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
     $39 = -1002; //@line 17250
     label = 15; //@line 17251
     break;
    }
    if ($indvars$iv >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) >>> 0) {
     $39 = -1003; //@line 17259
     label = 15; //@line 17260
     break;
    }
    $21 = HEAP32[$0 >> 2] | 0; //@line 17263
    $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 17266
    $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 17268
    $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv & 255) | 0; //@line 17269
    if (___async) {
     label = 9; //@line 17272
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17275
    if (!$26) {
     $39 = -1003; //@line 17277
     label = 15; //@line 17278
     break;
    }
    $32 = HEAP32[$0 >> 2] | 0; //@line 17281
    $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 17282
    __ZN7LoRaPHY18put_radio_to_sleepEv($32); //@line 17283
    if (___async) {
     label = 12; //@line 17286
     break;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 17289
   }
  }
  $indvars$iv$next = $indvars$iv + 1 | 0; //@line 17292
  if ($indvars$iv$next >>> 0 < $10 >>> 0) {
   $indvars$iv = $indvars$iv$next; //@line 17295
  } else {
   $39 = 0; //@line 17297
   label = 15; //@line 17298
   break;
  }
 }
 if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 484; //@line 17303
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17305
  HEAP32[$AsyncCtx + 8 >> 2] = $indvars$iv; //@line 17307
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 17309
  HEAP32[$AsyncCtx + 16 >> 2] = $8; //@line 17311
  HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 17313
  sp = STACKTOP; //@line 17314
  return 0; //@line 17315
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx2 >> 2] = 485; //@line 17318
  HEAP32[$AsyncCtx2 + 4 >> 2] = $indvars$iv; //@line 17320
  HEAP32[$AsyncCtx2 + 8 >> 2] = $10; //@line 17322
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 17324
  HEAP32[$AsyncCtx2 + 16 >> 2] = $8; //@line 17326
  HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 17328
  sp = STACKTOP; //@line 17329
  return 0; //@line 17330
 } else if ((label | 0) == 15) {
  return $39 | 0; //@line 17333
 }
 return 0; //@line 17335
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb($0) {
 $0 = $0 | 0;
 var $$69 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25902
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 25904
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 25908
 $8 = HEAP32[$0 + 12 >> 2] | 0; //@line 25910
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 25912
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 25914
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 25916
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 25918
 $18 = HEAP8[$0 + 32 >> 0] | 0; //@line 25920
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 25922
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 25924
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 25926
 $$69 = (HEAP32[___async_retval >> 2] | 0) == 0 ? 0 : -1014; //@line 25930
 $31 = (HEAPU16[$6 >> 1] | 0) + (HEAPU8[$0 + 5 >> 0] | 0) & 65535; //@line 25935
 HEAP16[$6 >> 1] = $31; //@line 25936
 $34 = HEAP32[$10 >> 2] | 0; //@line 25939
 $35 = HEAP32[$12 >> 2] | 0; //@line 25940
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 25941
 $36 = __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($8 + 756 | 0, $14, $31, $8 + 1716 | 0, 128, $34, 0, $35, $16) | 0; //@line 25942
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 429; //@line 25945
  $37 = $ReallocAsyncCtx2 + 4 | 0; //@line 25946
  HEAP32[$37 >> 2] = $$69; //@line 25947
  $38 = $ReallocAsyncCtx2 + 8 | 0; //@line 25948
  HEAP32[$38 >> 2] = $16; //@line 25949
  $39 = $ReallocAsyncCtx2 + 12 | 0; //@line 25950
  HEAP32[$39 >> 2] = $6; //@line 25951
  $40 = $ReallocAsyncCtx2 + 16 | 0; //@line 25952
  HEAP32[$40 >> 2] = $8; //@line 25953
  $41 = $ReallocAsyncCtx2 + 20 | 0; //@line 25954
  HEAP8[$41 >> 0] = $18; //@line 25955
  $42 = $ReallocAsyncCtx2 + 21 | 0; //@line 25956
  HEAP8[$42 >> 0] = $2; //@line 25957
  $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 25958
  HEAP32[$43 >> 2] = $20; //@line 25959
  $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 25960
  HEAP32[$44 >> 2] = $22; //@line 25961
  $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 25962
  HEAP32[$45 >> 2] = $24; //@line 25963
  sp = STACKTOP; //@line 25964
  return;
 }
 HEAP32[___async_retval >> 2] = $36; //@line 25968
 ___async_unwind = 0; //@line 25969
 HEAP32[$ReallocAsyncCtx2 >> 2] = 429; //@line 25970
 $37 = $ReallocAsyncCtx2 + 4 | 0; //@line 25971
 HEAP32[$37 >> 2] = $$69; //@line 25972
 $38 = $ReallocAsyncCtx2 + 8 | 0; //@line 25973
 HEAP32[$38 >> 2] = $16; //@line 25974
 $39 = $ReallocAsyncCtx2 + 12 | 0; //@line 25975
 HEAP32[$39 >> 2] = $6; //@line 25976
 $40 = $ReallocAsyncCtx2 + 16 | 0; //@line 25977
 HEAP32[$40 >> 2] = $8; //@line 25978
 $41 = $ReallocAsyncCtx2 + 20 | 0; //@line 25979
 HEAP8[$41 >> 0] = $18; //@line 25980
 $42 = $ReallocAsyncCtx2 + 21 | 0; //@line 25981
 HEAP8[$42 >> 0] = $2; //@line 25982
 $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 25983
 HEAP32[$43 >> 2] = $20; //@line 25984
 $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 25985
 HEAP32[$44 >> 2] = $22; //@line 25986
 $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 25987
 HEAP32[$45 >> 2] = $24; //@line 25988
 sp = STACKTOP; //@line 25989
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_394($0) {
 $0 = $0 | 0;
 var $$038 = 0, $10 = 0, $17 = 0, $19 = 0, $2 = 0, $23 = 0, $28 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29015
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 29017
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29019
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29021
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29023
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29025
 if (!(HEAP8[$0 + 24 >> 0] & 1)) {
  HEAP8[___async_retval >> 0] = 0; //@line 29032
  return;
 }
 if (!(HEAP32[$4 + 20 >> 2] | 0)) {
  $17 = HEAP32[$10 + 124 >> 2] | 0; //@line 29040
  $19 = HEAPU8[$4 >> 0] | 0; //@line 29042
  $23 = HEAP32[$17 + ($19 * 12 | 0) + 4 >> 2] | 0; //@line 29046
  $$038 = ($23 | 0) == 0 ? HEAP32[$17 + ($19 * 12 | 0) >> 2] | 0 : $23; //@line 29049
 } else {
  $$038 = $8; //@line 29051
 }
 $28 = HEAP32[$10 + 96 >> 2] | 0; //@line 29056
 $30 = HEAP32[$10 + 104 >> 2] | 0; //@line 29058
 $31 = $2 & 255; //@line 29059
 $33 = HEAP8[(HEAP32[$10 + 88 >> 2] | 0) + $31 >> 0] | 0; //@line 29061
 $34 = HEAP32[$6 >> 2] | 0; //@line 29062
 $37 = HEAP32[(HEAP32[$34 >> 2] | 0) + 72 >> 2] | 0; //@line 29065
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 29066
 FUNCTION_TABLE_vi[$37 & 1023]($34); //@line 29067
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 520; //@line 29070
  $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 29071
  HEAP32[$38 >> 2] = $6; //@line 29072
  $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 29073
  HEAP32[$39 >> 2] = $$038; //@line 29074
  $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 29075
  HEAP8[$40 >> 0] = $2; //@line 29076
  $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 29077
  HEAP32[$41 >> 2] = $10; //@line 29078
  $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 29079
  HEAP32[$42 >> 2] = $4; //@line 29080
  $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 29081
  HEAP8[$43 >> 0] = $33; //@line 29082
  $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 29083
  HEAP32[$44 >> 2] = $28; //@line 29084
  $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 29085
  HEAP32[$45 >> 2] = $30; //@line 29086
  $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 29087
  HEAP32[$46 >> 2] = $31; //@line 29088
  sp = STACKTOP; //@line 29089
  return;
 }
 ___async_unwind = 0; //@line 29092
 HEAP32[$ReallocAsyncCtx4 >> 2] = 520; //@line 29093
 $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 29094
 HEAP32[$38 >> 2] = $6; //@line 29095
 $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 29096
 HEAP32[$39 >> 2] = $$038; //@line 29097
 $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 29098
 HEAP8[$40 >> 0] = $2; //@line 29099
 $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 29100
 HEAP32[$41 >> 2] = $10; //@line 29101
 $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 29102
 HEAP32[$42 >> 2] = $4; //@line 29103
 $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 29104
 HEAP8[$43 >> 0] = $33; //@line 29105
 $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 29106
 HEAP32[$44 >> 2] = $28; //@line 29107
 $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 29108
 HEAP32[$45 >> 2] = $30; //@line 29109
 $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 29110
 HEAP32[$46 >> 2] = $31; //@line 29111
 sp = STACKTOP; //@line 29112
 return;
}
function _mbed_vtracef__async_cb_204($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 446
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 448
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 450
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 453
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 455
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 457
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 459
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 461
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 463
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 465
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 467
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 469
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 471
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 473
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 475
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 477
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 479
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 481
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 483
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 485
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 487
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 489
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 491
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 493
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 495
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 497
 $55 = ($50 | 0 ? 4 : 0) + $50 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 503
 $56 = HEAP32[172] | 0; //@line 504
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 505
 $57 = FUNCTION_TABLE_ii[$56 & 15]($55) | 0; //@line 506
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 510
  ___async_unwind = 0; //@line 511
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 147; //@line 513
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 515
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 517
 HEAP8[$ReallocAsyncCtx5 + 12 >> 0] = $6 & 1; //@line 520
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 522
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 524
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 526
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 528
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 530
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 532
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 534
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 536
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 538
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $26; //@line 540
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $28; //@line 542
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $30; //@line 544
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $32; //@line 546
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $34; //@line 548
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $36; //@line 550
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $38; //@line 552
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $40; //@line 554
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $42; //@line 556
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $44; //@line 558
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $46; //@line 560
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $48; //@line 562
 sp = STACKTOP; //@line 563
 return;
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_409($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $34 = 0, $38 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30000
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30002
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30004
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30006
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 30008
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30010
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30012
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30014
 if (HEAP8[___async_retval >> 0] & 1) {
  $34 = $2; //@line 30019
 } else {
  $20 = $2 + 1 | 0; //@line 30021
  if (($20 | 0) < (HEAPU8[$10 >> 0] | 0 | 0)) {
   $18 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 30028
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 30030
   $21 = FUNCTION_TABLE_iiii[$18 & 31]($6, $14, $20 & 255) | 0; //@line 30031
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 512; //@line 30034
    $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 30035
    HEAP32[$22 >> 2] = $20; //@line 30036
    $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 30037
    HEAP32[$23 >> 2] = $4; //@line 30038
    $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 30039
    HEAP32[$24 >> 2] = $6; //@line 30040
    $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 30041
    HEAP8[$25 >> 0] = $8; //@line 30042
    $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 30043
    HEAP32[$26 >> 2] = $10; //@line 30044
    $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 30045
    HEAP32[$27 >> 2] = $12; //@line 30046
    $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 30047
    HEAP32[$28 >> 2] = $14; //@line 30048
    sp = STACKTOP; //@line 30049
    return;
   }
   HEAP8[___async_retval >> 0] = $21 & 1; //@line 30054
   ___async_unwind = 0; //@line 30055
   HEAP32[$ReallocAsyncCtx3 >> 2] = 512; //@line 30056
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 30057
   HEAP32[$22 >> 2] = $20; //@line 30058
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 30059
   HEAP32[$23 >> 2] = $4; //@line 30060
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 30061
   HEAP32[$24 >> 2] = $6; //@line 30062
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 30063
   HEAP8[$25 >> 0] = $8; //@line 30064
   $26 = $ReallocAsyncCtx3 + 20 | 0; //@line 30065
   HEAP32[$26 >> 2] = $10; //@line 30066
   $27 = $ReallocAsyncCtx3 + 24 | 0; //@line 30067
   HEAP32[$27 >> 2] = $12; //@line 30068
   $28 = $ReallocAsyncCtx3 + 28 | 0; //@line 30069
   HEAP32[$28 >> 2] = $14; //@line 30070
   sp = STACKTOP; //@line 30071
   return;
  } else {
   $34 = -1; //@line 30074
  }
 }
 HEAP8[$4 + 9 >> 0] = $34; //@line 30079
 $38 = HEAP32[(HEAP32[$6 >> 2] | 0) + 60 >> 2] | 0; //@line 30082
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 30083
 $39 = FUNCTION_TABLE_iiii[$38 & 31]($6, $4, $8) | 0; //@line 30084
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 513; //@line 30087
  sp = STACKTOP; //@line 30088
  return;
 }
 HEAP32[___async_retval >> 2] = $39; //@line 30092
 ___async_unwind = 0; //@line 30093
 HEAP32[$ReallocAsyncCtx4 >> 2] = 513; //@line 30094
 sp = STACKTOP; //@line 30095
 return;
}
function _initialize__async_cb_427($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31738
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31740
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31742
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31744
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 31746
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31748
 $12 = 7 << 32 + -4; //@line 31750
 $13 = ___muldi3($12 | 0, 0, 1e6, 0) | 0; //@line 31751
 $14 = tempRet0; //@line 31752
 $15 = _i64Add($6 | 0, 0, -1, -1) | 0; //@line 31753
 $17 = _i64Add($15 | 0, tempRet0 | 0, $13 | 0, $14 | 0) | 0; //@line 31755
 $19 = ___udivdi3($17 | 0, tempRet0 | 0, $6 | 0, 0) | 0; //@line 31757
 $20 = tempRet0; //@line 31758
 $21 = HEAP32[$2 >> 2] | 0; //@line 31759
 HEAP32[$21 >> 2] = 0; //@line 31760
 HEAP32[$21 + 4 >> 2] = 0; //@line 31762
 $25 = HEAP32[(HEAP32[$10 >> 2] | 0) + 4 >> 2] | 0; //@line 31765
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 31766
 $26 = FUNCTION_TABLE_i[$25 & 7]() | 0; //@line 31767
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 31770
  $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 31771
  HEAP32[$27 >> 2] = $2; //@line 31772
  $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 31773
  HEAP32[$28 >> 2] = $6; //@line 31774
  $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 31775
  HEAP8[$29 >> 0] = $8; //@line 31776
  $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 31777
  HEAP32[$30 >> 2] = 32; //@line 31778
  $31 = $ReallocAsyncCtx3 + 20 | 0; //@line 31779
  HEAP32[$31 >> 2] = $12; //@line 31780
  $32 = $ReallocAsyncCtx3 + 24 | 0; //@line 31781
  $33 = $32; //@line 31782
  $34 = $33; //@line 31783
  HEAP32[$34 >> 2] = $19; //@line 31784
  $35 = $33 + 4 | 0; //@line 31785
  $36 = $35; //@line 31786
  HEAP32[$36 >> 2] = $20; //@line 31787
  $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 31788
  HEAP32[$37 >> 2] = $10; //@line 31789
  $38 = $ReallocAsyncCtx3 + 36 | 0; //@line 31790
  HEAP32[$38 >> 2] = $4; //@line 31791
  sp = STACKTOP; //@line 31792
  return;
 }
 HEAP32[___async_retval >> 2] = $26; //@line 31796
 ___async_unwind = 0; //@line 31797
 HEAP32[$ReallocAsyncCtx3 >> 2] = 622; //@line 31798
 $27 = $ReallocAsyncCtx3 + 4 | 0; //@line 31799
 HEAP32[$27 >> 2] = $2; //@line 31800
 $28 = $ReallocAsyncCtx3 + 8 | 0; //@line 31801
 HEAP32[$28 >> 2] = $6; //@line 31802
 $29 = $ReallocAsyncCtx3 + 12 | 0; //@line 31803
 HEAP8[$29 >> 0] = $8; //@line 31804
 $30 = $ReallocAsyncCtx3 + 16 | 0; //@line 31805
 HEAP32[$30 >> 2] = 32; //@line 31806
 $31 = $ReallocAsyncCtx3 + 20 | 0; //@line 31807
 HEAP32[$31 >> 2] = $12; //@line 31808
 $32 = $ReallocAsyncCtx3 + 24 | 0; //@line 31809
 $33 = $32; //@line 31810
 $34 = $33; //@line 31811
 HEAP32[$34 >> 2] = $19; //@line 31812
 $35 = $33 + 4 | 0; //@line 31813
 $36 = $35; //@line 31814
 HEAP32[$36 >> 2] = $20; //@line 31815
 $37 = $ReallocAsyncCtx3 + 32 | 0; //@line 31816
 HEAP32[$37 >> 2] = $10; //@line 31817
 $38 = $ReallocAsyncCtx3 + 36 | 0; //@line 31818
 HEAP32[$38 >> 2] = $4; //@line 31819
 sp = STACKTOP; //@line 31820
 return;
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28867
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28869
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28871
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28873
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[5049] | 0)) {
  _serial_init(20200, 2, 3); //@line 28881
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 28883
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28889
  _serial_putc(20200, $9 << 24 >> 24); //@line 28890
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 28893
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 28894
   HEAP32[$18 >> 2] = 0; //@line 28895
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 28896
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 28897
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 28898
   HEAP32[$20 >> 2] = $2; //@line 28899
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 28900
   HEAP8[$21 >> 0] = $9; //@line 28901
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 28902
   HEAP32[$22 >> 2] = $4; //@line 28903
   sp = STACKTOP; //@line 28904
   return;
  }
  ___async_unwind = 0; //@line 28907
  HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 28908
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 28909
  HEAP32[$18 >> 2] = 0; //@line 28910
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 28911
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 28912
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 28913
  HEAP32[$20 >> 2] = $2; //@line 28914
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 28915
  HEAP8[$21 >> 0] = $9; //@line 28916
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 28917
  HEAP32[$22 >> 2] = $4; //@line 28918
  sp = STACKTOP; //@line 28919
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 28922
  _serial_putc(20200, 13); //@line 28923
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 28926
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 28927
   HEAP8[$12 >> 0] = $9; //@line 28928
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 28929
   HEAP32[$13 >> 2] = 0; //@line 28930
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 28931
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 28932
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 28933
   HEAP32[$15 >> 2] = $2; //@line 28934
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 28935
   HEAP32[$16 >> 2] = $4; //@line 28936
   sp = STACKTOP; //@line 28937
   return;
  }
  ___async_unwind = 0; //@line 28940
  HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 28941
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 28942
  HEAP8[$12 >> 0] = $9; //@line 28943
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 28944
  HEAP32[$13 >> 2] = 0; //@line 28945
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 28946
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 28947
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 28948
  HEAP32[$15 >> 2] = $2; //@line 28949
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 28950
  HEAP32[$16 >> 2] = $4; //@line 28951
  sp = STACKTOP; //@line 28952
  return;
 }
}
function _mbed_error_vfprintf__async_cb_134($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28960
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28964
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28966
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28970
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 28971
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 28977
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28983
  _serial_putc(20200, $13 << 24 >> 24); //@line 28984
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 28987
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 28988
   HEAP32[$22 >> 2] = $12; //@line 28989
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 28990
   HEAP32[$23 >> 2] = $4; //@line 28991
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 28992
   HEAP32[$24 >> 2] = $6; //@line 28993
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 28994
   HEAP8[$25 >> 0] = $13; //@line 28995
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 28996
   HEAP32[$26 >> 2] = $10; //@line 28997
   sp = STACKTOP; //@line 28998
   return;
  }
  ___async_unwind = 0; //@line 29001
  HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 29002
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 29003
  HEAP32[$22 >> 2] = $12; //@line 29004
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 29005
  HEAP32[$23 >> 2] = $4; //@line 29006
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 29007
  HEAP32[$24 >> 2] = $6; //@line 29008
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 29009
  HEAP8[$25 >> 0] = $13; //@line 29010
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 29011
  HEAP32[$26 >> 2] = $10; //@line 29012
  sp = STACKTOP; //@line 29013
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 29016
  _serial_putc(20200, 13); //@line 29017
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 29020
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 29021
   HEAP8[$16 >> 0] = $13; //@line 29022
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 29023
   HEAP32[$17 >> 2] = $12; //@line 29024
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 29025
   HEAP32[$18 >> 2] = $4; //@line 29026
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 29027
   HEAP32[$19 >> 2] = $6; //@line 29028
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 29029
   HEAP32[$20 >> 2] = $10; //@line 29030
   sp = STACKTOP; //@line 29031
   return;
  }
  ___async_unwind = 0; //@line 29034
  HEAP32[$ReallocAsyncCtx3 >> 2] = 654; //@line 29035
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 29036
  HEAP8[$16 >> 0] = $13; //@line 29037
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 29038
  HEAP32[$17 >> 2] = $12; //@line 29039
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 29040
  HEAP32[$18 >> 2] = $4; //@line 29041
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 29042
  HEAP32[$19 >> 2] = $6; //@line 29043
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 29044
  HEAP32[$20 >> 2] = $10; //@line 29045
  sp = STACKTOP; //@line 29046
  return;
 }
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb_351($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $indvars$iv$reg2mem$0 = 0, label = 0, sp = 0, $indvars$iv$reg2mem$0$looptemp = 0;
 sp = STACKTOP; //@line 24534
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24538
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24540
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24542
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24544
 $indvars$iv$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 24545
 while (1) {
  $indvars$iv$reg2mem$0$looptemp = $indvars$iv$reg2mem$0;
  $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0 + 1 | 0; //@line 24547
  if ($indvars$iv$reg2mem$0 >>> 0 >= $4 >>> 0) {
   $35 = 0; //@line 24550
   label = 11; //@line 24551
   break;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $8, $indvars$iv$reg2mem$0) | 0) {
   $indvars$iv$reg2mem$0 = $indvars$iv$reg2mem$0; //@line 24557
   continue;
  }
  if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$6 >> 2] | 0, $10, $indvars$iv$reg2mem$0) | 0) {
   break;
  }
 }
 if ((label | 0) == 11) {
  $34 = ___async_retval; //@line 24569
  HEAP32[$34 >> 2] = $35; //@line 24570
  return;
 }
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$6 >> 2] | 0) | 0)) {
  $35 = -1002; //@line 24576
  $34 = ___async_retval; //@line 24577
  HEAP32[$34 >> 2] = $35; //@line 24578
  return;
 }
 if ($indvars$iv$reg2mem$0 >>> 0 >= ((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$6 >> 2] | 0) | 0) & 255) >>> 0) {
  $35 = -1003; //@line 24586
  $34 = ___async_retval; //@line 24587
  HEAP32[$34 >> 2] = $35; //@line 24588
  return;
 }
 $21 = HEAP32[$6 >> 2] | 0; //@line 24591
 $24 = HEAP32[(HEAP32[$21 >> 2] | 0) + 64 >> 2] | 0; //@line 24594
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 24596
 $26 = FUNCTION_TABLE_iii[$24 & 31]($21, $indvars$iv$reg2mem$0 & 255) | 0; //@line 24597
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 484; //@line 24600
  $27 = $ReallocAsyncCtx + 4 | 0; //@line 24601
  HEAP32[$27 >> 2] = $6; //@line 24602
  $28 = $ReallocAsyncCtx + 8 | 0; //@line 24603
  HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 24604
  $29 = $ReallocAsyncCtx + 12 | 0; //@line 24605
  HEAP32[$29 >> 2] = $4; //@line 24606
  $30 = $ReallocAsyncCtx + 16 | 0; //@line 24607
  HEAP32[$30 >> 2] = $8; //@line 24608
  $31 = $ReallocAsyncCtx + 20 | 0; //@line 24609
  HEAP32[$31 >> 2] = $10; //@line 24610
  sp = STACKTOP; //@line 24611
  return;
 }
 HEAP8[___async_retval >> 0] = $26 & 1; //@line 24616
 ___async_unwind = 0; //@line 24617
 HEAP32[$ReallocAsyncCtx >> 2] = 484; //@line 24618
 $27 = $ReallocAsyncCtx + 4 | 0; //@line 24619
 HEAP32[$27 >> 2] = $6; //@line 24620
 $28 = $ReallocAsyncCtx + 8 | 0; //@line 24621
 HEAP32[$28 >> 2] = $indvars$iv$reg2mem$0; //@line 24622
 $29 = $ReallocAsyncCtx + 12 | 0; //@line 24623
 HEAP32[$29 >> 2] = $4; //@line 24624
 $30 = $ReallocAsyncCtx + 16 | 0; //@line 24625
 HEAP32[$30 >> 2] = $8; //@line 24626
 $31 = $ReallocAsyncCtx + 20 | 0; //@line 24627
 HEAP32[$31 >> 2] = $10; //@line 24628
 sp = STACKTOP; //@line 24629
 return;
}
function __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $$0$$sroa_idx14 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19698
 STACKTOP = STACKTOP + 16 | 0; //@line 19699
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 19699
 $7 = sp; //@line 19700
 $8 = $0 + 64 | 0; //@line 19701
 _mbedtls_aes_init($8); //@line 19702
 $9 = _mbedtls_aes_setkey_enc($8, $1, $2) | 0; //@line 19703
 if (!$9) {
  $11 = $7 + 9 | 0; //@line 19706
  HEAP8[$11 >> 0] = 0; //@line 19707
  HEAP8[$11 + 1 >> 0] = 0; //@line 19707
  HEAP8[$11 + 2 >> 0] = 0; //@line 19707
  HEAP8[$11 + 3 >> 0] = 0; //@line 19707
  HEAP8[$11 + 4 >> 0] = 0; //@line 19707
  HEAP8[$11 + 5 >> 0] = 0; //@line 19707
  HEAP8[$11 + 6 >> 0] = 0; //@line 19707
  HEAP8[$7 >> 0] = 1; //@line 19708
  $12 = $7 + 1 | 0; //@line 19709
  HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19710
  HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 19710
  HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 19710
  HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 19710
  HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 19710
  HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 19710
  $$0$$sroa_idx14 = $7 + 7 | 0; //@line 19711
  HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 19712
  HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 19712
  $13 = _mbedtls_aes_crypt_ecb($8, 1, $7, $5) | 0; //@line 19713
  if (!$13) {
   $15 = $7 + 9 | 0; //@line 19716
   HEAP8[$15 >> 0] = 0; //@line 19717
   HEAP8[$15 + 1 >> 0] = 0; //@line 19717
   HEAP8[$15 + 2 >> 0] = 0; //@line 19717
   HEAP8[$15 + 3 >> 0] = 0; //@line 19717
   HEAP8[$15 + 4 >> 0] = 0; //@line 19717
   HEAP8[$15 + 5 >> 0] = 0; //@line 19717
   HEAP8[$15 + 6 >> 0] = 0; //@line 19717
   HEAP8[$7 >> 0] = 2; //@line 19718
   HEAP8[$12 >> 0] = HEAP8[$3 >> 0] | 0; //@line 19719
   HEAP8[$12 + 1 >> 0] = HEAP8[$3 + 1 >> 0] | 0; //@line 19719
   HEAP8[$12 + 2 >> 0] = HEAP8[$3 + 2 >> 0] | 0; //@line 19719
   HEAP8[$12 + 3 >> 0] = HEAP8[$3 + 3 >> 0] | 0; //@line 19719
   HEAP8[$12 + 4 >> 0] = HEAP8[$3 + 4 >> 0] | 0; //@line 19719
   HEAP8[$12 + 5 >> 0] = HEAP8[$3 + 5 >> 0] | 0; //@line 19719
   HEAP8[$$0$$sroa_idx14 >> 0] = $4; //@line 19720
   HEAP8[$$0$$sroa_idx14 + 1 >> 0] = $4 >> 8; //@line 19720
   $$0 = _mbedtls_aes_crypt_ecb($8, 1, $7, $6) | 0; //@line 19722
  } else {
   $$0 = $13; //@line 19724
  }
 } else {
  $$0 = $9; //@line 19727
 }
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 19729
 _mbedtls_aes_free($8); //@line 19730
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 510; //@line 19733
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 19735
  HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 19737
  sp = STACKTOP; //@line 19738
  STACKTOP = sp; //@line 19739
  return 0; //@line 19739
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19741
  STACKTOP = sp; //@line 19742
  return $$0 | 0; //@line 19742
 }
 return 0; //@line 19744
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11397
 STACKTOP = STACKTOP + 48 | 0; //@line 11398
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11398
 $vararg_buffer3 = sp + 16 | 0; //@line 11399
 $vararg_buffer = sp; //@line 11400
 $3 = sp + 32 | 0; //@line 11401
 $4 = $0 + 28 | 0; //@line 11402
 $5 = HEAP32[$4 >> 2] | 0; //@line 11403
 HEAP32[$3 >> 2] = $5; //@line 11404
 $7 = $0 + 20 | 0; //@line 11406
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 11408
 HEAP32[$3 + 4 >> 2] = $9; //@line 11409
 HEAP32[$3 + 8 >> 2] = $1; //@line 11411
 HEAP32[$3 + 12 >> 2] = $2; //@line 11413
 $12 = $9 + $2 | 0; //@line 11414
 $13 = $0 + 60 | 0; //@line 11415
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 11418
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 11420
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 11422
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 11424
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 11428
  } else {
   $$04756 = 2; //@line 11430
   $$04855 = $12; //@line 11430
   $$04954 = $3; //@line 11430
   $27 = $17; //@line 11430
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 11436
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 11438
    $38 = $27 >>> 0 > $37 >>> 0; //@line 11439
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 11441
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 11443
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 11445
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 11448
    $44 = $$150 + 4 | 0; //@line 11449
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 11452
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 11455
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 11457
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 11459
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 11461
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 11464
     break L1;
    } else {
     $$04756 = $$1; //@line 11467
     $$04954 = $$150; //@line 11467
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 11471
   HEAP32[$4 >> 2] = 0; //@line 11472
   HEAP32[$7 >> 2] = 0; //@line 11473
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 11476
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 11479
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 11484
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 11490
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11495
  $25 = $20; //@line 11496
  HEAP32[$4 >> 2] = $25; //@line 11497
  HEAP32[$7 >> 2] = $25; //@line 11498
  $$051 = $2; //@line 11499
 }
 STACKTOP = sp; //@line 11501
 return $$051 | 0; //@line 11501
}
function __ZN7LoRaMacD2Ev__async_cb_305($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $30 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21473
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21475
 $4 = HEAP32[$2 + 1848 >> 2] | 0; //@line 21477
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 21482
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 21483
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1836 | 0); //@line 21484
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 378; //@line 21487
   $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 21488
   HEAP32[$9 >> 2] = $2; //@line 21489
   sp = STACKTOP; //@line 21490
   return;
  }
  ___async_unwind = 0; //@line 21493
  HEAP32[$ReallocAsyncCtx3 >> 2] = 378; //@line 21494
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 21495
  HEAP32[$9 >> 2] = $2; //@line 21496
  sp = STACKTOP; //@line 21497
  return;
 }
 $11 = HEAP32[$2 + 1828 >> 2] | 0; //@line 21501
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 21506
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 21507
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1816 | 0); //@line 21508
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 21511
   $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 21512
   HEAP32[$16 >> 2] = $2; //@line 21513
   sp = STACKTOP; //@line 21514
   return;
  }
  ___async_unwind = 0; //@line 21517
  HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 21518
  $16 = $ReallocAsyncCtx4 + 4 | 0; //@line 21519
  HEAP32[$16 >> 2] = $2; //@line 21520
  sp = STACKTOP; //@line 21521
  return;
 }
 $18 = HEAP32[$2 + 1808 >> 2] | 0; //@line 21525
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 21530
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21531
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 1796 | 0); //@line 21532
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 21535
   $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 21536
   HEAP32[$23 >> 2] = $2; //@line 21537
   sp = STACKTOP; //@line 21538
   return;
  }
  ___async_unwind = 0; //@line 21541
  HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 21542
  $23 = $ReallocAsyncCtx5 + 4 | 0; //@line 21543
  HEAP32[$23 >> 2] = $2; //@line 21544
  sp = STACKTOP; //@line 21545
  return;
 }
 $25 = HEAP32[$2 + 748 >> 2] | 0; //@line 21549
 if (!$25) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 21553
  return;
 }
 $29 = HEAP32[$25 + 8 >> 2] | 0; //@line 21558
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21559
 FUNCTION_TABLE_vi[$29 & 1023]($2 + 736 | 0); //@line 21560
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 21563
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 21564
  HEAP32[$30 >> 2] = $2; //@line 21565
  sp = STACKTOP; //@line 21566
  return;
 }
 ___async_unwind = 0; //@line 21569
 HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 21570
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 21571
 HEAP32[$30 >> 2] = $2; //@line 21572
 sp = STACKTOP; //@line 21573
 return;
}
function __ZN12LoRaWANStack20process_transmissionEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $28 = 0, $32 = 0, $33 = 0, $35 = 0, $43 = 0, $AsyncCtx = 0, $AsyncCtx5 = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 10381
 STACKTOP = STACKTOP + 16 | 0; //@line 10382
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10382
 $vararg_buffer1 = sp + 8 | 0; //@line 10383
 _mbed_tracef(16, 12021, 12371, sp); //@line 10385
 $2 = HEAP32[$0 + 3172 >> 2] | 0; //@line 10387
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10388
 __ZN7LoRaMac16on_radio_tx_doneEj($0, $2); //@line 10389
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 341; //@line 10392
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 10394
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 10396
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 10398
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer1; //@line 10400
  sp = STACKTOP; //@line 10401
  STACKTOP = sp; //@line 10402
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10404
 HEAP8[$0 + 2895 >> 0] = 0; //@line 10406
 HEAP32[$0 + 2888 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 20 >> 2]; //@line 10411
 HEAP8[$0 + 2893 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 8 >> 0] | 0; //@line 10416
 HEAP8[$0 + 2892 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 9 >> 0] | 0; //@line 10421
 HEAP32[$0 + 2884 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 12 >> 2]; //@line 10426
 HEAP8[$0 + 2894 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) + 11 >> 0] | 0; //@line 10431
 $28 = $0 + 2496 | 0; //@line 10432
 switch (HEAP32[$28 >> 2] | 0) {
 case 1:
  {
   HEAP32[$28 >> 2] = 4; //@line 10436
   STACKTOP = sp; //@line 10437
   return;
  }
 case 8:
  {
   $32 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1; //@line 10443
   $33 = $0 + 2904 | 0; //@line 10444
   $35 = HEAP32[$33 >> 2] & -18; //@line 10446
   if ($32) {
    HEAP32[$33 >> 2] = $35 | 1; //@line 10449
    _mbed_tracef(16, 12021, 12394, $vararg_buffer1); //@line 10450
    HEAP32[$28 >> 2] = 9; //@line 10451
    STACKTOP = sp; //@line 10452
    return;
   }
   HEAP32[$33 >> 2] = $35 | 16; //@line 10455
   if ((__ZNK7LoRaMac16get_device_classEv($0) | 0) != 2) {
    STACKTOP = sp; //@line 10459
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 10461
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10462
   __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 10463
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 342; //@line 10466
    HEAP32[$AsyncCtx5 + 4 >> 2] = $0; //@line 10468
    HEAP32[$AsyncCtx5 + 8 >> 2] = $28; //@line 10470
    sp = STACKTOP; //@line 10471
    STACKTOP = sp; //@line 10472
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 10474
   $43 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 10476
   HEAP32[$28 >> 2] = $43 ? 5 : 2; //@line 10478
   STACKTOP = sp; //@line 10479
   return;
  }
 default:
  {
   STACKTOP = sp; //@line 10483
   return;
  }
 }
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_369($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $27 = 0, $28 = 0, $34 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26466
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26468
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26470
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26472
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26474
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26476
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 26478
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26480
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 26482
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26484
 $19 = $2 + 1748 | 0; //@line 26486
 HEAP16[$19 >> 1] = $AsyncRetVal; //@line 26487
 $21 = HEAP16[$4 >> 1] | 0; //@line 26489
 HEAP16[$4 >> 1] = $21 + 1 << 16 >> 16; //@line 26491
 HEAP8[($21 & 65535) + ($2 + 1185) >> 0] = $AsyncRetVal; //@line 26494
 $27 = (HEAPU16[$19 >> 1] | 0) >>> 8 & 255; //@line 26497
 $28 = HEAP16[$4 >> 1] | 0; //@line 26498
 HEAP16[$4 >> 1] = $28 + 1 << 16 >> 16; //@line 26500
 HEAP8[($28 & 65535) + ($2 + 1185) >> 0] = $27; //@line 26503
 $34 = HEAP16[$4 >> 1] & 255; //@line 26506
 $36 = HEAP32[$2 + 1712 >> 2] | 0; //@line 26508
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 26509
 $37 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($2 + 756 | 0, $6, $34, $36, 128, $8) | 0; //@line 26510
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 426; //@line 26513
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 26514
  HEAP32[$38 >> 2] = $8; //@line 26515
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 26516
  HEAP32[$39 >> 2] = $4; //@line 26517
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 26518
  HEAP32[$40 >> 2] = $2; //@line 26519
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 26520
  HEAP32[$41 >> 2] = $10; //@line 26521
  $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 26522
  HEAP8[$42 >> 0] = $12; //@line 26523
  $43 = $ReallocAsyncCtx3 + 24 | 0; //@line 26524
  HEAP32[$43 >> 2] = $14; //@line 26525
  $44 = $ReallocAsyncCtx3 + 28 | 0; //@line 26526
  HEAP32[$44 >> 2] = $16; //@line 26527
  sp = STACKTOP; //@line 26528
  return;
 }
 HEAP32[___async_retval >> 2] = $37; //@line 26532
 ___async_unwind = 0; //@line 26533
 HEAP32[$ReallocAsyncCtx3 >> 2] = 426; //@line 26534
 $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 26535
 HEAP32[$38 >> 2] = $8; //@line 26536
 $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 26537
 HEAP32[$39 >> 2] = $4; //@line 26538
 $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 26539
 HEAP32[$40 >> 2] = $2; //@line 26540
 $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 26541
 HEAP32[$41 >> 2] = $10; //@line 26542
 $42 = $ReallocAsyncCtx3 + 20 | 0; //@line 26543
 HEAP8[$42 >> 0] = $12; //@line 26544
 $43 = $ReallocAsyncCtx3 + 24 | 0; //@line 26545
 HEAP32[$43 >> 2] = $14; //@line 26546
 $44 = $ReallocAsyncCtx3 + 28 | 0; //@line 26547
 HEAP32[$44 >> 2] = $16; //@line 26548
 sp = STACKTOP; //@line 26549
 return;
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $19 = 0, $20 = 0, $32 = 0, $48 = 0, $53 = 0, $55 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, sp = 0;
 sp = STACKTOP; //@line 15619
 STACKTOP = STACKTOP + 32 | 0; //@line 15620
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15620
 $vararg_buffer2 = sp + 8 | 0; //@line 15621
 $vararg_buffer = sp; //@line 15622
 HEAP8[$0 + 2105 >> 0] = $1; //@line 15624
 $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 15626
 $8 = __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $3 & 255) | 0; //@line 15627
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 447; //@line 15630
  HEAP16[$AsyncCtx + 4 >> 1] = $3; //@line 15632
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15634
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 15636
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 15638
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15640
  HEAP8[$AsyncCtx + 24 >> 0] = $4; //@line 15642
  HEAP8[$AsyncCtx + 25 >> 0] = $1; //@line 15644
  HEAP8[$AsyncCtx + 26 >> 0] = $5; //@line 15646
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer2; //@line 15648
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer2; //@line 15650
  sp = STACKTOP; //@line 15651
  STACKTOP = sp; //@line 15652
  return 0; //@line 15652
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15654
 $19 = $8 & 255; //@line 15655
 $20 = $3 & 65535; //@line 15656
 if ($20 >>> 0 > $19 >>> 0) {
  HEAP32[$vararg_buffer >> 2] = $20; //@line 15659
  HEAP32[$vararg_buffer + 4 >> 2] = $19; //@line 15661
  _mbed_tracef(8, 12709, 13218, $vararg_buffer); //@line 15662
  HEAP16[$0 + 2372 >> 1] = $20 - $19; //@line 15666
  HEAP16[$0 + 2370 >> 1] = $8 & 255; //@line 15669
  _memcpy($0 + 2115 | 0, $2 | 0, $19 | 0) | 0; //@line 15671
 } else {
  HEAP16[$0 + 2370 >> 1] = $3; //@line 15674
  HEAP16[$0 + 2372 >> 1] = 0; //@line 15676
  if ($3 << 16 >> 16) {
   _memcpy($0 + 2115 | 0, $2 | 0, $20 | 0) | 0; //@line 15680
  }
 }
 $32 = $4 & 255; //@line 15683
 if ($32 & 1 | 0) {
  HEAP32[$0 + 2108 >> 2] = 0; //@line 15688
  HEAP8[$0 + 2112 >> 0] = $1; //@line 15690
  HEAP8[$0 + 2114 >> 0] = 1; //@line 15692
 }
 if ($32 & 2 | 0) {
  HEAP32[$0 + 2108 >> 2] = 1; //@line 15698
  HEAP8[$0 + 2112 >> 0] = $1; //@line 15700
  HEAP8[$0 + 2114 >> 0] = $5; //@line 15702
 }
 if (!($32 & 8)) {
  $55 = HEAP8[$0 + 2112 >> 0] | 0; //@line 15709
 } else {
  HEAP32[$0 + 2108 >> 2] = 3; //@line 15712
  HEAP8[$0 + 2112 >> 0] = $1; //@line 15714
  HEAP8[$0 + 2114 >> 0] = 1; //@line 15716
  $55 = $1; //@line 15717
 }
 $48 = $0 + 2370 | 0; //@line 15719
 $53 = HEAPU16[$0 + 2372 >> 1] | 0; //@line 15724
 HEAP32[$vararg_buffer2 >> 2] = HEAPU16[$48 >> 1]; //@line 15726
 HEAP32[$vararg_buffer2 + 4 >> 2] = $53; //@line 15728
 HEAP32[$vararg_buffer2 + 8 >> 2] = $55 & 255; //@line 15730
 _mbed_tracef(8, 12709, 13273, $vararg_buffer2); //@line 15731
 STACKTOP = sp; //@line 15733
 return HEAP16[$48 >> 1] | 0; //@line 15733
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$013 = 0, $$079$i = 0, $10 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $27 = 0, $32 = 0, $36 = 0, $37 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19769
 if (!(HEAP8[$0 + 16 >> 0] | 0)) {
  $$013 = 0; //@line 19774
  return $$013 | 0; //@line 19775
 }
 $6 = HEAP32[$2 >> 2] | 0; //@line 19777
 if (!$6) {
  $10 = HEAP32[(HEAP32[$0 >> 2] | 0) + 64 >> 2] | 0; //@line 19782
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19783
  $11 = FUNCTION_TABLE_iii[$10 & 31]($0, $1) | 0; //@line 19784
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 511; //@line 19787
   sp = STACKTOP; //@line 19788
   return 0; //@line 19789
  } else {
   _emscripten_free_async_context($AsyncCtx | 0); //@line 19791
   return ($11 ? 3 : 0) | 0; //@line 19793
  }
 }
 $12 = $0 + 76 | 0; //@line 19796
 L10 : do {
  if (!(HEAP8[$12 >> 0] | 0)) {
   $32 = -1; //@line 19801
  } else {
   $$079$i = 0; //@line 19803
   while (1) {
    $17 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 19807
    $AsyncCtx3 = _emscripten_alloc_async_context(32, sp) | 0; //@line 19809
    $19 = FUNCTION_TABLE_iiii[$17 & 31]($0, $6, $$079$i & 255) | 0; //@line 19810
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 19815
    if ($19) {
     $32 = $$079$i; //@line 19817
     break L10;
    }
    $27 = $$079$i + 1 | 0; //@line 19820
    if (($27 | 0) < (HEAPU8[$12 >> 0] | 0)) {
     $$079$i = $27; //@line 19825
    } else {
     $32 = -1; //@line 19827
     break L10;
    }
   }
   HEAP32[$AsyncCtx3 >> 2] = 512; //@line 19831
   HEAP32[$AsyncCtx3 + 4 >> 2] = $$079$i; //@line 19833
   HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 19835
   HEAP32[$AsyncCtx3 + 12 >> 2] = $0; //@line 19837
   HEAP8[$AsyncCtx3 + 16 >> 0] = $1; //@line 19839
   HEAP32[$AsyncCtx3 + 20 >> 2] = $12; //@line 19841
   HEAP32[$AsyncCtx3 + 24 >> 2] = $0; //@line 19843
   HEAP32[$AsyncCtx3 + 28 >> 2] = $6; //@line 19845
   sp = STACKTOP; //@line 19846
   return 0; //@line 19847
  }
 } while (0);
 HEAP8[$2 + 9 >> 0] = $32; //@line 19852
 $36 = HEAP32[(HEAP32[$0 >> 2] | 0) + 60 >> 2] | 0; //@line 19855
 $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 19856
 $37 = FUNCTION_TABLE_iiii[$36 & 31]($0, $2, $1) | 0; //@line 19857
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 513; //@line 19860
  sp = STACKTOP; //@line 19861
  return 0; //@line 19862
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 19864
 switch ($37 | 0) {
 case -1004:
  {
   $$013 = 2; //@line 19867
   return $$013 | 0; //@line 19868
  }
 case -1005:
  {
   $$013 = 1; //@line 19872
   return $$013 | 0; //@line 19873
  }
 case -1006:
  {
   $$013 = 0; //@line 19877
   return $$013 | 0; //@line 19878
  }
 case 0:
  {
   $$013 = 3; //@line 19882
   return $$013 | 0; //@line 19883
  }
 default:
  {
   $$013 = 0; //@line 19887
   return $$013 | 0; //@line 19888
  }
 }
 return 0; //@line 19891
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $21 = 0, $24 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9800
 STACKTOP = STACKTOP + 32 | 0; //@line 9801
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9801
 $1 = sp + 8 | 0; //@line 9803
 if ((HEAP32[(__ZNK7LoRaMac19get_mlme_indicationEv($0) | 0) >> 2] | 0) != 4) {
  _mbed_tracef(2, 12021, 12303, sp); //@line 9808
  STACKTOP = sp; //@line 9809
  return;
 }
 $5 = $0 + 2512 | 0; //@line 9811
 $6 = HEAP32[$5 >> 2] | 0; //@line 9812
 do {
  if ($6 | 0) {
   $10 = HEAP32[$0 + 3168 >> 2] | 0; //@line 9818
   $12 = HEAP32[$6 + 4 >> 2] | 0; //@line 9820
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9821
   FUNCTION_TABLE_vii[$12 & 15]($1, $0 + 2500 | 0); //@line 9822
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 320; //@line 9825
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 9827
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9829
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 9831
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9833
    sp = STACKTOP; //@line 9834
    STACKTOP = sp; //@line 9835
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9837
   $17 = $1 + 12 | 0; //@line 9839
   HEAP32[$17 >> 2] = HEAP32[$5 >> 2]; //@line 9840
   $AsyncCtx5 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9841
   $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($10, $1, 11) | 0; //@line 9842
   if (___async) {
    HEAP32[$AsyncCtx5 >> 2] = 321; //@line 9845
    HEAP32[$AsyncCtx5 + 4 >> 2] = $17; //@line 9847
    HEAP32[$AsyncCtx5 + 8 >> 2] = $1; //@line 9849
    sp = STACKTOP; //@line 9850
    STACKTOP = sp; //@line 9851
    return;
   }
   _emscripten_free_async_context($AsyncCtx5 | 0); //@line 9853
   $21 = HEAP32[$17 >> 2] | 0; //@line 9854
   do {
    if ($21 | 0) {
     $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 9859
     $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9860
     FUNCTION_TABLE_vi[$24 & 1023]($1); //@line 9861
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 322; //@line 9864
      HEAP32[$AsyncCtx2 + 4 >> 2] = $18; //@line 9866
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9868
      sp = STACKTOP; //@line 9869
      STACKTOP = sp; //@line 9870
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9872
      break;
     }
    }
   } while (0);
   if (!$18) {
    $AsyncCtx9 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9879
    _mbed_assert_internal(11914, 11923, 778); //@line 9880
    if (___async) {
     HEAP32[$AsyncCtx9 >> 2] = 323; //@line 9883
     HEAP32[$AsyncCtx9 + 4 >> 2] = $1; //@line 9885
     sp = STACKTOP; //@line 9886
     STACKTOP = sp; //@line 9887
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 9889
     break;
    }
   }
  }
 } while (0);
 STACKTOP = sp; //@line 9895
 return;
}
function __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $21 = 0, $22 = 0, $25 = 0, $27 = 0, $30 = 0, $32 = 0, $35 = 0, $4 = 0, $5 = 0, $7 = 0, dest = 0, src = 0, stop = 0;
 if (!$1) {
  HEAP32[$0 + 1752 >> 2] = 0; //@line 16160
  HEAP32[$0 + 1756 >> 2] = 0; //@line 16162
  dest = $0 + 1716 | 0; //@line 16164
  stop = dest + 32 | 0; //@line 16164
  do {
   HEAP8[dest >> 0] = 0; //@line 16164
   dest = dest + 1 | 0; //@line 16164
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 16165
  return $$0 | 0; //@line 16166
 }
 $4 = $1 + 4 | 0; //@line 16168
 if ($2) {
  $5 = HEAP32[$4 >> 2] | 0; //@line 16170
  if (!$5) {
   $$0 = -1003; //@line 16173
   return $$0 | 0; //@line 16174
  }
  $7 = $1 + 8 | 0; //@line 16176
  if (!(HEAP32[$7 >> 2] | 0)) {
   $$0 = -1003; //@line 16180
   return $$0 | 0; //@line 16181
  }
  $10 = $1 + 12 | 0; //@line 16183
  if (!(HEAP32[$10 >> 2] | 0)) {
   $$0 = -1003; //@line 16187
   return $$0 | 0; //@line 16188
  }
  $13 = $1 + 16 | 0; //@line 16190
  if (!(HEAP8[$13 >> 0] | 0)) {
   $$0 = -1003; //@line 16194
   return $$0 | 0; //@line 16195
  }
  HEAP32[$0 + 1704 >> 2] = $5; //@line 16198
  HEAP32[$0 + 1708 >> 2] = HEAP32[$7 >> 2]; //@line 16201
  HEAP32[$0 + 1712 >> 2] = HEAP32[$10 >> 2]; //@line 16204
  $21 = HEAP8[$13 >> 0] | 0; //@line 16205
  $22 = $0 + 1700 | 0; //@line 16206
  HEAP8[$22 >> 0] = $21; //@line 16207
  $25 = __ZN7LoRaPHY21verify_nb_join_trialsEh($0 + 4 | 0, HEAP8[$13 >> 0] | 0) | 0; //@line 16210
  HEAP8[$22 >> 0] = $25 ? $21 : 12; //@line 16212
  HEAP8[$0 + 1701 >> 0] = 0; //@line 16214
  $$0 = 0; //@line 16215
  return $$0 | 0; //@line 16216
 } else {
  $27 = $1 + 8 | 0; //@line 16218
  if (!(HEAP32[$27 >> 2] | 0)) {
   $$0 = -1003; //@line 16222
   return $$0 | 0; //@line 16223
  }
  $30 = HEAP32[$4 >> 2] | 0; //@line 16225
  if (!$30) {
   $$0 = -1003; //@line 16228
   return $$0 | 0; //@line 16229
  }
  $32 = $1 + 12 | 0; //@line 16231
  if (!(HEAP32[$32 >> 2] | 0)) {
   $$0 = -1003; //@line 16235
   return $$0 | 0; //@line 16236
  }
  $35 = $1 + 16 | 0; //@line 16238
  if (!(HEAP32[$35 >> 2] | 0)) {
   $$0 = -1003; //@line 16242
   return $$0 | 0; //@line 16243
  }
  HEAP32[$0 + 1752 >> 2] = $30; //@line 16246
  HEAP32[$0 + 1756 >> 2] = HEAP32[$27 >> 2]; //@line 16249
  dest = $0 + 1716 | 0; //@line 16252
  src = HEAP32[$32 >> 2] | 0; //@line 16252
  stop = dest + 16 | 0; //@line 16252
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 16252
   dest = dest + 1 | 0; //@line 16252
   src = src + 1 | 0; //@line 16252
  } while ((dest | 0) < (stop | 0));
  dest = $0 + 1732 | 0; //@line 16255
  src = HEAP32[$35 >> 2] | 0; //@line 16255
  stop = dest + 16 | 0; //@line 16255
  do {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 16255
   dest = dest + 1 | 0; //@line 16255
   src = src + 1 | 0; //@line 16255
  } while ((dest | 0) < (stop | 0));
  $$0 = 0; //@line 16256
  return $$0 | 0; //@line 16257
 }
 return 0; //@line 16259
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$ = 0, $$079$i = 0, $$1 = 0, $$1$ = 0, $$ph = 0, $11 = 0, $19 = 0, $2 = 0, $24 = 0, $26 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 21239
 $2 = $1 + 4 | 0; //@line 21240
 $3 = HEAP32[$2 >> 2] | 0; //@line 21241
 $4 = $0 + 76 | 0; //@line 21242
 do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   $24 = -1; //@line 21247
   $30 = $3; //@line 21247
  } else {
   $$079$i = 0; //@line 21249
   while (1) {
    $9 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21253
    $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 21255
    $11 = FUNCTION_TABLE_iiii[$9 & 31]($0, $3, $$079$i & 255) | 0; //@line 21256
    if (___async) {
     label = 4; //@line 21259
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 21262
    if ($11) {
     $$ph = $$079$i; //@line 21264
     label = 7; //@line 21265
     break;
    }
    $19 = $$079$i + 1 | 0; //@line 21268
    if (($19 | 0) < (HEAPU8[$4 >> 0] | 0)) {
     $$079$i = $19; //@line 21273
    } else {
     $$ph = -1; //@line 21275
     label = 7; //@line 21276
     break;
    }
   }
   if ((label | 0) == 4) {
    HEAP32[$AsyncCtx >> 2] = 533; //@line 21281
    HEAP32[$AsyncCtx + 4 >> 2] = $$079$i; //@line 21283
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 21285
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 21287
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 21289
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 21291
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 21293
    HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 21295
    sp = STACKTOP; //@line 21296
    return 0; //@line 21297
   } else if ((label | 0) == 7) {
    $24 = $$ph; //@line 21301
    $30 = HEAP32[$2 >> 2] | 0; //@line 21301
    break;
   }
  }
 } while (0);
 $$ = ($24 | 0) < 0 ? 6 : 7; //@line 21307
 $26 = HEAP32[$0 + 4 >> 2] | 0; //@line 21309
 $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 64 >> 2] | 0; //@line 21312
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 21313
 $31 = FUNCTION_TABLE_iii[$29 & 31]($26, $30) | 0; //@line 21314
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 534; //@line 21317
  HEAP8[$AsyncCtx2 + 4 >> 0] = $$; //@line 21319
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 21321
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 21323
  sp = STACKTOP; //@line 21324
  return 0; //@line 21325
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21327
  $$1 = $31 ? $$ : 6; //@line 21328
  $35 = HEAP8[$1 >> 0] | 0; //@line 21329
  $$1$ = ($35 << 24 >> 24 >= (HEAP8[$0 + 28 >> 0] | 0) ? $35 << 24 >> 24 <= (HEAP8[$0 + 29 >> 0] | 0) : 0) ? $$1 : $$1 & 5; //@line 21338
  $44 = HEAP8[$1 + 1 >> 0] | 0; //@line 21340
  return (($44 << 24 >> 24 >= (HEAP8[$0 + 32 >> 0] | 0) ? $44 << 24 >> 24 <= (HEAP8[$0 + 33 >> 0] | 0) : 0) ? $$1$ : $$1$ & 3) | 0; //@line 21350
 }
 return 0; //@line 21352
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_136($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29236
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29238
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29240
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29242
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29244
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29246
 $12 = $0 + 24 | 0; //@line 29248
 $14 = HEAP32[$12 >> 2] | 0; //@line 29250
 $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 29253
 $18 = HEAP32[$2 >> 2] | 0; //@line 29254
 if ($18 | 0) {
  $21 = HEAP32[$18 + 4 >> 2] | 0; //@line 29258
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 29259
  FUNCTION_TABLE_vii[$21 & 15]($6, $8); //@line 29260
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 94; //@line 29263
   $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 29264
   HEAP32[$22 >> 2] = $2; //@line 29265
   $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 29266
   HEAP32[$23 >> 2] = $4; //@line 29267
   $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 29268
   HEAP32[$24 >> 2] = $10; //@line 29269
   $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 29270
   $26 = $25; //@line 29271
   $27 = $26; //@line 29272
   HEAP32[$27 >> 2] = $14; //@line 29273
   $28 = $26 + 4 | 0; //@line 29274
   $29 = $28; //@line 29275
   HEAP32[$29 >> 2] = $17; //@line 29276
   $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 29277
   HEAP32[$30 >> 2] = $8; //@line 29278
   sp = STACKTOP; //@line 29279
   return;
  }
  ___async_unwind = 0; //@line 29282
  HEAP32[$ReallocAsyncCtx3 >> 2] = 94; //@line 29283
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 29284
  HEAP32[$22 >> 2] = $2; //@line 29285
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 29286
  HEAP32[$23 >> 2] = $4; //@line 29287
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 29288
  HEAP32[$24 >> 2] = $10; //@line 29289
  $25 = $ReallocAsyncCtx3 + 16 | 0; //@line 29290
  $26 = $25; //@line 29291
  $27 = $26; //@line 29292
  HEAP32[$27 >> 2] = $14; //@line 29293
  $28 = $26 + 4 | 0; //@line 29294
  $29 = $28; //@line 29295
  HEAP32[$29 >> 2] = $17; //@line 29296
  $30 = $ReallocAsyncCtx3 + 24 | 0; //@line 29297
  HEAP32[$30 >> 2] = $8; //@line 29298
  sp = STACKTOP; //@line 29299
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 29302
 __ZN4mbed6Ticker5setupEy($10, $14, $17); //@line 29303
 $31 = HEAP32[$2 >> 2] | 0; //@line 29304
 if (!$31) {
  return;
 }
 $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 29310
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 29311
 FUNCTION_TABLE_vi[$34 & 1023]($8); //@line 29312
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 29315
  sp = STACKTOP; //@line 29316
  return;
 }
 ___async_unwind = 0; //@line 29319
 HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 29320
 sp = STACKTOP; //@line 29321
 return;
}
function __ZN4mbed7Timeout7handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $12 = 0, $13 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $25 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2627
 STACKTOP = STACKTOP + 16 | 0; //@line 2628
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2628
 $1 = sp; //@line 2629
 $2 = $0 + 52 | 0; //@line 2630
 $3 = HEAP32[$2 >> 2] | 0; //@line 2631
 do {
  if (!$3) {
   $13 = 0; //@line 2635
  } else {
   $7 = HEAP32[$3 + 4 >> 2] | 0; //@line 2639
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 2640
   FUNCTION_TABLE_vii[$7 & 15]($1, $0 + 40 | 0); //@line 2641
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 116; //@line 2644
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 2646
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2648
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 2650
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 2652
    sp = STACKTOP; //@line 2653
    STACKTOP = sp; //@line 2654
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2656
    $13 = HEAP32[$2 >> 2] | 0; //@line 2658
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 2663
 HEAP32[$12 >> 2] = $13; //@line 2664
 __ZN4mbed6Ticker6detachEv($0); //@line 2665
 $14 = HEAP32[$12 >> 2] | 0; //@line 2666
 do {
  if (!$14) {
   $AsyncCtx9 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2670
   _mbed_assert_internal(14839, 14844, 528); //@line 2671
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 117; //@line 2674
    HEAP32[$AsyncCtx9 + 4 >> 2] = $12; //@line 2676
    HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 2678
    sp = STACKTOP; //@line 2679
    STACKTOP = sp; //@line 2680
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 2682
    $19 = HEAP32[$12 >> 2] | 0; //@line 2684
    break;
   }
  } else {
   $19 = $14; //@line 2688
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 2691
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2692
 FUNCTION_TABLE_vi[$18 & 1023]($1); //@line 2693
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 118; //@line 2696
  HEAP32[$AsyncCtx2 + 4 >> 2] = $12; //@line 2698
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 2700
  sp = STACKTOP; //@line 2701
  STACKTOP = sp; //@line 2702
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2704
 $22 = HEAP32[$12 >> 2] | 0; //@line 2705
 if (!$22) {
  STACKTOP = sp; //@line 2708
  return;
 }
 $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 2711
 $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2712
 FUNCTION_TABLE_vi[$25 & 1023]($1); //@line 2713
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 119; //@line 2716
  HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 2718
  sp = STACKTOP; //@line 2719
  STACKTOP = sp; //@line 2720
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2722
 STACKTOP = sp; //@line 2723
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_255($0) {
 $0 = $0 | 0;
 var $$pre$i$i70 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 17457
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17463
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17465
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17467
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17469
 $$pre$i$i70 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17470
 $13 = $$pre$i$i70; //@line 17471
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i70; //@line 17472
 if (!$$pre$i$i70) {
  __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($8, $10); //@line 17475
  $23 = HEAP32[(HEAP32[$10 >> 2] | 0) + 72 >> 2] | 0; //@line 17478
  $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 17479
  FUNCTION_TABLE_vi[$23 & 1023]($10); //@line 17480
  if (___async) {
   HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17483
   $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 17484
   HEAP32[$24 >> 2] = $10; //@line 17485
   $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 17486
   HEAP32[$25 >> 2] = $12; //@line 17487
   $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 17488
   HEAP32[$26 >> 2] = $10; //@line 17489
   sp = STACKTOP; //@line 17490
   return;
  }
  ___async_unwind = 0; //@line 17493
  HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17494
  $24 = $ReallocAsyncCtx16 + 4 | 0; //@line 17495
  HEAP32[$24 >> 2] = $10; //@line 17496
  $25 = $ReallocAsyncCtx16 + 8 | 0; //@line 17497
  HEAP32[$25 >> 2] = $12; //@line 17498
  $26 = $ReallocAsyncCtx16 + 12 | 0; //@line 17499
  HEAP32[$26 >> 2] = $10; //@line 17500
  sp = STACKTOP; //@line 17501
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 17505
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(20) | 0; //@line 17506
  FUNCTION_TABLE_vi[$16 & 1023]($6); //@line 17507
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 17510
   $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 17511
   HEAP32[$17 >> 2] = $6; //@line 17512
   $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 17513
   HEAP32[$18 >> 2] = $8; //@line 17514
   $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 17515
   HEAP32[$19 >> 2] = $10; //@line 17516
   $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 17517
   HEAP32[$20 >> 2] = $12; //@line 17518
   sp = STACKTOP; //@line 17519
   return;
  }
  ___async_unwind = 0; //@line 17522
  HEAP32[$ReallocAsyncCtx15 >> 2] = 199; //@line 17523
  $17 = $ReallocAsyncCtx15 + 4 | 0; //@line 17524
  HEAP32[$17 >> 2] = $6; //@line 17525
  $18 = $ReallocAsyncCtx15 + 8 | 0; //@line 17526
  HEAP32[$18 >> 2] = $8; //@line 17527
  $19 = $ReallocAsyncCtx15 + 12 | 0; //@line 17528
  HEAP32[$19 >> 2] = $10; //@line 17529
  $20 = $ReallocAsyncCtx15 + 16 | 0; //@line 17530
  HEAP32[$20 >> 2] = $12; //@line 17531
  sp = STACKTOP; //@line 17532
  return;
 }
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv($0) {
 $0 = $0 | 0;
 var $15 = 0, $30 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 13858
 $AsyncCtx15 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13860
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1816 | 0); //@line 13861
 if (___async) {
  HEAP32[$AsyncCtx15 >> 2] = 413; //@line 13864
  HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 13866
  HEAP32[$AsyncCtx15 + 8 >> 2] = $0; //@line 13868
  sp = STACKTOP; //@line 13869
  return;
 }
 _emscripten_free_async_context($AsyncCtx15 | 0); //@line 13872
 $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13874
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 13875
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 414; //@line 13878
  HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 13880
  HEAP32[$AsyncCtx11 + 8 >> 2] = $0; //@line 13882
  sp = STACKTOP; //@line 13883
  return;
 }
 _emscripten_free_async_context($AsyncCtx11 | 0); //@line 13886
 $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13888
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 13889
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 415; //@line 13892
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 13894
  sp = STACKTOP; //@line 13895
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13898
 do {
  if ((HEAP32[$0 + 2380 >> 2] | 0) == 2) {
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13904
   __ZN7LoRaMac15open_rx2_windowEv($0); //@line 13905
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 416; //@line 13908
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13910
    sp = STACKTOP; //@line 13911
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13914
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13919
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 13920
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 417; //@line 13923
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 13925
    sp = STACKTOP; //@line 13926
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13929
    break;
   }
  }
 } while (0);
 $15 = $0 + 2056 | 0; //@line 13934
 HEAP32[$15 >> 2] = 2; //@line 13935
 HEAP32[$0 + 2092 >> 2] = 2; //@line 13937
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 13939
 HEAP8[$0 + 2063 >> 0] = HEAP8[$0 + 1699 >> 0] | 0; //@line 13943
 HEAP8[$0 + 2062 >> 0] = 0; //@line 13945
 HEAP32[$0 + 2064 >> 2] = 0; //@line 13947
 HEAP8[$0 + 1180 >> 0] = 0; //@line 13949
 HEAP32[$15 >> 2] = 0; //@line 13950
 if ((HEAP32[$0 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $30 = $0 + 1760 | 0; //@line 13963
 HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 13966
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEj__async_cb_93($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26324
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26328
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26330
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26332
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26334
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  $16 = (HEAP32[$4 + 1776 >> 2] | 0) - $6 | 0; //@line 26341
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 26342
  __ZN18LoRaWANTimeHandler5startER13timer_event_tj($8, $4 + 1836 | 0, $16); //@line 26343
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 403; //@line 26346
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 26347
   HEAP32[$17 >> 2] = $4; //@line 26348
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 26349
   HEAP32[$18 >> 2] = $10; //@line 26350
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 26351
   HEAP32[$19 >> 2] = $6; //@line 26352
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 26353
   HEAP32[$20 >> 2] = $8; //@line 26354
   sp = STACKTOP; //@line 26355
   return;
  }
  ___async_unwind = 0; //@line 26358
  HEAP32[$ReallocAsyncCtx2 >> 2] = 403; //@line 26359
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 26360
  HEAP32[$17 >> 2] = $4; //@line 26361
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 26362
  HEAP32[$18 >> 2] = $10; //@line 26363
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 26364
  HEAP32[$19 >> 2] = $6; //@line 26365
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 26366
  HEAP32[$20 >> 2] = $8; //@line 26367
  sp = STACKTOP; //@line 26368
  return;
 }
 if (!(HEAP8[$4 + 1177 >> 0] | 0)) {
  $34 = HEAP8[$4 + 1182 >> 0] | 0; //@line 26376
  HEAP8[$4 + 1183 >> 0] = $34; //@line 26378
  __ZN7LoRaPHY16set_last_tx_doneEhbj($4 + 4 | 0, $34, (HEAP8[$4 + 2376 >> 0] | 0) != 0, $10); //@line 26383
  HEAP32[$4 + 1780 >> 2] = $10; //@line 26385
  return;
 }
 $27 = (HEAP32[$4 + 1776 >> 2] | 0) - $6 | 0; //@line 26391
 $30 = $27 + (__ZN7LoRaPHY15get_ack_timeoutEv($4 + 4 | 0) | 0) | 0; //@line 26394
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 26395
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($8, $4 + 1856 | 0, $30); //@line 26396
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 404; //@line 26399
  $31 = $ReallocAsyncCtx + 4 | 0; //@line 26400
  HEAP32[$31 >> 2] = $4; //@line 26401
  $32 = $ReallocAsyncCtx + 8 | 0; //@line 26402
  HEAP32[$32 >> 2] = $10; //@line 26403
  sp = STACKTOP; //@line 26404
  return;
 }
 ___async_unwind = 0; //@line 26407
 HEAP32[$ReallocAsyncCtx >> 2] = 404; //@line 26408
 $31 = $ReallocAsyncCtx + 4 | 0; //@line 26409
 HEAP32[$31 >> 2] = $4; //@line 26410
 $32 = $ReallocAsyncCtx + 8 | 0; //@line 26411
 HEAP32[$32 >> 2] = $10; //@line 26412
 sp = STACKTOP; //@line 26413
 return;
}
function _mbedtls_cipher_update__async_cb_167($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$1 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $37 = 0, $4 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $53 = 0, $55 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31156
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31158
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31160
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31162
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31164
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31166
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31168
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31170
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31172
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 31174
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 31176
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31178
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 31181
  $55 = ___async_retval; //@line 31182
  HEAP32[$55 >> 2] = $$1; //@line 31183
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 31188
 $25 = $6 + $4 | 0; //@line 31189
 HEAP32[$8 >> 2] = 0; //@line 31190
 $26 = $10 + $12 | 0; //@line 31191
 $27 = $14 - $12 | 0; //@line 31192
 if (!$27) {
  $$1 = 0; //@line 31195
  $55 = ___async_retval; //@line 31196
  HEAP32[$55 >> 2] = $$1; //@line 31197
  return;
 }
 $29 = ($27 >>> 0) % ($4 >>> 0) | 0; //@line 31200
 if (!$29) {
  if (!(HEAP32[$16 >> 2] | 0)) {
   $$0 = (HEAP32[$18 + 12 >> 2] | 0) == 0 ? 0 : $4; //@line 31210
  } else {
   $$0 = 0; //@line 31212
  }
 } else {
  $$0 = $29; //@line 31215
 }
 $37 = $27 - $$0 | 0; //@line 31218
 _memcpy($18 + 20 | 0, $26 + $37 | 0, $$0 | 0) | 0; //@line 31220
 HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + $$0; //@line 31223
 if (!$37) {
  $$1 = 0; //@line 31226
  $55 = ___async_retval; //@line 31227
  HEAP32[$55 >> 2] = $$1; //@line 31228
  return;
 }
 $46 = HEAP32[(HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0) + 8 >> 2] | 0; //@line 31235
 $48 = HEAP32[$18 + 60 >> 2] | 0; //@line 31237
 $49 = HEAP32[$16 >> 2] | 0; //@line 31238
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 31240
 $51 = FUNCTION_TABLE_iiiiiii[$46 & 3]($48, $49, $37, $18 + 40 | 0, $26, $25) | 0; //@line 31241
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 586; //@line 31244
  $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 31245
  HEAP32[$52 >> 2] = $2; //@line 31246
  $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 31247
  HEAP32[$53 >> 2] = $37; //@line 31248
  sp = STACKTOP; //@line 31249
  return;
 }
 HEAP32[___async_retval >> 2] = $51; //@line 31253
 ___async_unwind = 0; //@line 31254
 HEAP32[$ReallocAsyncCtx3 >> 2] = 586; //@line 31255
 $52 = $ReallocAsyncCtx3 + 4 | 0; //@line 31256
 HEAP32[$52 >> 2] = $2; //@line 31257
 $53 = $ReallocAsyncCtx3 + 8 | 0; //@line 31258
 HEAP32[$53 >> 2] = $37; //@line 31259
 sp = STACKTOP; //@line 31260
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_275($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19238
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19240
 $4 = HEAP32[$2 + 60 >> 2] | 0; //@line 19242
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19247
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19248
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 48 | 0); //@line 19249
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19252
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 19253
   HEAP32[$9 >> 2] = $2; //@line 19254
   sp = STACKTOP; //@line 19255
   return;
  }
  ___async_unwind = 0; //@line 19258
  HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 19259
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 19260
  HEAP32[$9 >> 2] = $2; //@line 19261
  sp = STACKTOP; //@line 19262
  return;
 }
 $11 = HEAP32[$2 + 44 >> 2] | 0; //@line 19266
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 19271
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19272
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 32 | 0); //@line 19273
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19276
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 19277
   HEAP32[$16 >> 2] = $2; //@line 19278
   sp = STACKTOP; //@line 19279
   return;
  }
  ___async_unwind = 0; //@line 19282
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19283
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 19284
  HEAP32[$16 >> 2] = $2; //@line 19285
  sp = STACKTOP; //@line 19286
  return;
 }
 $18 = HEAP32[$2 + 28 >> 2] | 0; //@line 19290
 if ($18 | 0) {
  $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 19295
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19296
  FUNCTION_TABLE_vi[$22 & 1023]($2 + 16 | 0); //@line 19297
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19300
   $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 19301
   HEAP32[$23 >> 2] = $2; //@line 19302
   sp = STACKTOP; //@line 19303
   return;
  }
  ___async_unwind = 0; //@line 19306
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19307
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 19308
  HEAP32[$23 >> 2] = $2; //@line 19309
  sp = STACKTOP; //@line 19310
  return;
 }
 $25 = HEAP32[$2 + 12 >> 2] | 0; //@line 19314
 if (!$25) {
  return;
 }
 $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 19320
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19321
 FUNCTION_TABLE_vi[$28 & 1023]($2); //@line 19322
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19325
  sp = STACKTOP; //@line 19326
  return;
 }
 ___async_unwind = 0; //@line 19329
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19330
 sp = STACKTOP; //@line 19331
 return;
}
function __ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb($0) {
 $0 = $0 | 0;
 var $$0$off0 = 0, $$031 = 0, $$1 = 0, $$pre$phi39Z2D = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $30 = 0, $32 = 0, $35 = 0, $36 = 0, $40 = 0, $45 = 0, $6 = 0, $8 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28751
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28756
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28758
 $10 = HEAP16[$0 + 20 >> 1] | 0; //@line 28760
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28762
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28764
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28766
 $18 = HEAP8[$2 + 2853 >> 0] | 0; //@line 28768
 if (HEAP8[$0 + 8 >> 0] & 1) {
  if ($18 << 24 >> 24 != (HEAP8[$6 >> 0] | 0)) {
   $$1 = -1001; //@line 28773
   $45 = ___async_retval; //@line 28774
   HEAP16[$45 >> 1] = $$1; //@line 28775
   return;
  }
  if (!(HEAP32[$8 >> 2] & 1)) {
   $$1 = -1001; //@line 28782
   $45 = ___async_retval; //@line 28783
   HEAP16[$45 >> 1] = $$1; //@line 28784
   return;
  }
 }
 HEAP8[$6 >> 0] = $18; //@line 28788
 HEAP32[$8 >> 2] = 1; //@line 28789
 $24 = $2 + 2856 | 0; //@line 28790
 $25 = HEAP32[$24 >> 2] | 0; //@line 28791
 $26 = $2 + 2860 | 0; //@line 28792
 $27 = HEAP16[$26 >> 1] | 0; //@line 28793
 $28 = $27 & 65535; //@line 28794
 $30 = $2 + 2882 | 0; //@line 28796
 $32 = (HEAP16[$30 >> 1] | 0) == 0; //@line 28798
 if (($27 & 65535) > ($10 & 65535)) {
  if ($32) {
   $35 = $2 + 2880 | 0; //@line 28803
   HEAP16[$35 >> 1] = $28 - $16; //@line 28804
   HEAP16[$30 >> 1] = $10; //@line 28805
   _memcpy($12 | 0, $25 | 0, $16 | 0) | 0; //@line 28806
   $$0$off0 = 0; //@line 28807
   $$031 = $10; //@line 28807
   $$pre$phi39Z2D = $35; //@line 28807
  } else {
   label = 10; //@line 28809
  }
 } else {
  if ($32) {
   $36 = $2 + 2880 | 0; //@line 28813
   HEAP16[$36 >> 1] = 0; //@line 28814
   HEAP16[$30 >> 1] = 0; //@line 28815
   _memcpy($12 | 0, $25 | 0, $28 | 0) | 0; //@line 28816
   $$0$off0 = 1; //@line 28817
   $$031 = $27; //@line 28817
   $$pre$phi39Z2D = $36; //@line 28817
  } else {
   label = 10; //@line 28819
  }
 }
 if ((label | 0) == 10) {
  $$0$off0 = 0; //@line 28824
  $$031 = $27; //@line 28824
  $$pre$phi39Z2D = $2 + 2880 | 0; //@line 28824
 }
 if (HEAP16[$$pre$phi39Z2D >> 1] | 0) {
  $40 = HEAP16[$2 + 2882 >> 1] | 0; //@line 28830
  if ($40 << 16 >> 16) {
   _memcpy($12 | 0, $25 + ($40 & 65535) | 0, $$031 & 65535 | 0) | 0; //@line 28836
  }
 }
 if (!$$0$off0) {
  $$1 = $$031; //@line 28840
  $45 = ___async_retval; //@line 28841
  HEAP16[$45 >> 1] = $$1; //@line 28842
  return;
 }
 HEAP32[$24 >> 2] = 0; //@line 28845
 HEAP16[$26 >> 1] = 0; //@line 28846
 HEAP8[$14 >> 0] = 0; //@line 28847
 $$1 = $$031; //@line 28848
 $45 = ___async_retval; //@line 28849
 HEAP16[$45 >> 1] = $$1; //@line 28850
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$i = 0, $1 = 0, $2 = 0, $21 = 0, $28 = 0, $31 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14121
 STACKTOP = STACKTOP + 16 | 0; //@line 14122
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14122
 $vararg_buffer = sp; //@line 14123
 $1 = sp + 5 | 0; //@line 14124
 $2 = sp + 4 | 0; //@line 14125
 if (!(HEAP8[$0 + 2376 >> 0] | 0)) {
  if (!(HEAP32[$0 + 2088 >> 2] | 0)) {
   HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 14142
   HEAP8[$1 >> 0] = 0; //@line 14143
   HEAP8[$2 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 14147
   HEAP8[$0 + 1180 >> 0] = 1; //@line 14149
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 14150
   $21 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $1, $2, 0, 0, 0) | 0; //@line 14151
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 422; //@line 14154
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14156
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14158
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 14160
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 14162
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 14164
    sp = STACKTOP; //@line 14165
    STACKTOP = sp; //@line 14166
    return 0; //@line 14166
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14168
   do {
    if (!$21) {
     $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 14172
     $28 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14173
     if (___async) {
      HEAP32[$AsyncCtx7 >> 2] = 423; //@line 14176
      HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 14178
      HEAP32[$AsyncCtx7 + 8 >> 2] = $1; //@line 14180
      sp = STACKTOP; //@line 14181
      STACKTOP = sp; //@line 14182
      return 0; //@line 14182
     } else {
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14184
      $$0$i = $28; //@line 14185
      break;
     }
    } else {
     HEAP32[$vararg_buffer >> 2] = $21; //@line 14189
     _mbed_tracef(2, 12709, 12806, $vararg_buffer); //@line 14190
     $$0$i = $21; //@line 14191
    }
   } while (0);
   $$0 = $$0$i; //@line 14194
   STACKTOP = sp; //@line 14195
   return $$0 | 0; //@line 14195
  }
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14198
 $31 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 14199
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 424; //@line 14202
  sp = STACKTOP; //@line 14203
  STACKTOP = sp; //@line 14204
  return 0; //@line 14204
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14206
 $$0 = $31; //@line 14207
 STACKTOP = sp; //@line 14208
 return $$0 | 0; //@line 14208
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_184($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 32150
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32152
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32154
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32156
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32158
 if ((HEAP32[___async_retval >> 2] | 0) < ($2 | 0)) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 32163
  $10 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 32164
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 65; //@line 32167
   $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 32168
   HEAP32[$11 >> 2] = $2; //@line 32169
   $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 32170
   HEAP32[$12 >> 2] = $4; //@line 32171
   $13 = $ReallocAsyncCtx5 + 12 | 0; //@line 32172
   HEAP32[$13 >> 2] = $6; //@line 32173
   $14 = $ReallocAsyncCtx5 + 16 | 0; //@line 32174
   HEAP32[$14 >> 2] = $8; //@line 32175
   sp = STACKTOP; //@line 32176
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 32180
  ___async_unwind = 0; //@line 32181
  HEAP32[$ReallocAsyncCtx5 >> 2] = 65; //@line 32182
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 32183
  HEAP32[$11 >> 2] = $2; //@line 32184
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 32185
  HEAP32[$12 >> 2] = $4; //@line 32186
  $13 = $ReallocAsyncCtx5 + 12 | 0; //@line 32187
  HEAP32[$13 >> 2] = $6; //@line 32188
  $14 = $ReallocAsyncCtx5 + 16 | 0; //@line 32189
  HEAP32[$14 >> 2] = $8; //@line 32190
  sp = STACKTOP; //@line 32191
  return;
 } else {
  $19 = HEAP32[(HEAP32[$6 >> 2] | 0) + 8 >> 2] | 0; //@line 32196
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 32197
  FUNCTION_TABLE_vi[$19 & 1023]($6); //@line 32198
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 32201
   $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 32202
   HEAP32[$20 >> 2] = $4; //@line 32203
   $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 32204
   HEAP32[$21 >> 2] = $8; //@line 32205
   $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 32206
   $$expand_i1_val = 1; //@line 32207
   HEAP8[$22 >> 0] = $$expand_i1_val; //@line 32208
   sp = STACKTOP; //@line 32209
   return;
  }
  ___async_unwind = 0; //@line 32212
  HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 32213
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 32214
  HEAP32[$20 >> 2] = $4; //@line 32215
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 32216
  HEAP32[$21 >> 2] = $8; //@line 32217
  $22 = $ReallocAsyncCtx2 + 12 | 0; //@line 32218
  $$expand_i1_val = 1; //@line 32219
  HEAP8[$22 >> 0] = $$expand_i1_val; //@line 32220
  sp = STACKTOP; //@line 32221
  return;
 }
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$026 = 0, $10 = 0, $15 = 0, $21 = 0.0, $24 = 0.0, $27 = 0, $34 = 0, $35 = 0, $38 = 0, $43 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21915
 $6 = HEAP32[$0 + 124 >> 2] | 0; //@line 21919
 $7 = $1 + 2 | 0; //@line 21920
 $8 = HEAP8[$7 >> 0] | 0; //@line 21921
 $10 = HEAPU8[$1 >> 0] | 0; //@line 21923
 $15 = HEAP8[(HEAP32[$0 + 72 >> 2] | 0) + ((HEAPU8[$6 + ($10 * 12 | 0) + 9 >> 0] | 0) * 24 | 0) + 2 >> 0] | 0; //@line 21928
 if ($8 << 24 >> 24 > $15 << 24 >> 24) {
  HEAP8[$7 >> 0] = $15; //@line 21931
  $27 = $15; //@line 21932
 } else {
  $27 = $8; //@line 21934
 }
 if (!$2) {
  $$0 = HEAP32[$6 + ($10 * 12 | 0) >> 2] | 0; //@line 21940
 } else {
  $$0 = $2; //@line 21942
 }
 $21 = +HEAPF32[$1 + 4 >> 2]; //@line 21945
 if ($21 > 0.0) {
  $24 = +HEAPF32[$1 + 8 >> 2]; //@line 21949
  if ($24 > 0.0) {
   $$026 = ~~+Math_floor(+($21 - +($27 << 24 >> 24 << 1 >>> 0) - $24)); //@line 21959
  } else {
   $$026 = $27; //@line 21961
  }
 } else {
  $$026 = $27; //@line 21964
 }
 $34 = $0 + 4 | 0; //@line 21966
 $35 = HEAP32[$34 >> 2] | 0; //@line 21967
 $38 = HEAP32[(HEAP32[$35 >> 2] | 0) + 72 >> 2] | 0; //@line 21970
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 21971
 FUNCTION_TABLE_vi[$38 & 1023]($35); //@line 21972
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 538; //@line 21975
  HEAP32[$AsyncCtx + 4 >> 2] = $34; //@line 21977
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 21979
  HEAP32[$AsyncCtx + 12 >> 2] = $$0; //@line 21981
  HEAP8[$AsyncCtx + 16 >> 0] = $$026; //@line 21983
  sp = STACKTOP; //@line 21984
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 21987
 $43 = HEAP32[$34 >> 2] | 0; //@line 21988
 $46 = HEAP32[(HEAP32[$43 >> 2] | 0) + 68 >> 2] | 0; //@line 21991
 $48 = HEAP16[$1 + 12 >> 1] | 0; //@line 21993
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 21994
 FUNCTION_TABLE_viiii[$46 & 7]($43, $$0, $$026, $48); //@line 21995
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 539; //@line 21998
  HEAP32[$AsyncCtx2 + 4 >> 2] = $34; //@line 22000
  sp = STACKTOP; //@line 22001
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22004
 $50 = HEAP32[$34 >> 2] | 0; //@line 22005
 $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 76 >> 2] | 0; //@line 22008
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22009
 FUNCTION_TABLE_vi[$53 & 1023]($50); //@line 22010
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 540; //@line 22013
  sp = STACKTOP; //@line 22014
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22017
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_225($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13423
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13427
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13429
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13431
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13433
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13434
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 13438
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 13439
  FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 13440
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 335; //@line 13443
   $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 13444
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 13445
   $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 13446
   HEAP32[$15 >> 2] = $4; //@line 13447
   $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 13448
   HEAP32[$16 >> 2] = $6; //@line 13449
   $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 13450
   HEAP32[$17 >> 2] = $8; //@line 13451
   sp = STACKTOP; //@line 13452
   return;
  }
  ___async_unwind = 0; //@line 13455
  HEAP32[$ReallocAsyncCtx2 >> 2] = 335; //@line 13456
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 13457
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 13458
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 13459
  HEAP32[$15 >> 2] = $4; //@line 13460
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 13461
  HEAP32[$16 >> 2] = $6; //@line 13462
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 13463
  HEAP32[$17 >> 2] = $8; //@line 13464
  sp = STACKTOP; //@line 13465
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 13472
  HEAP32[$8 + 2496 >> 2] = 2; //@line 13474
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 13477
 _mbed_assert_internal(11914, 11923, 778); //@line 13478
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 336; //@line 13481
  $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 13482
  HEAP32[$19 >> 2] = $4; //@line 13483
  $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 13484
  HEAP32[$20 >> 2] = $6; //@line 13485
  $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 13486
  HEAP32[$21 >> 2] = $8; //@line 13487
  sp = STACKTOP; //@line 13488
  return;
 }
 ___async_unwind = 0; //@line 13491
 HEAP32[$ReallocAsyncCtx4 >> 2] = 336; //@line 13492
 $19 = $ReallocAsyncCtx4 + 4 | 0; //@line 13493
 HEAP32[$19 >> 2] = $4; //@line 13494
 $20 = $ReallocAsyncCtx4 + 8 | 0; //@line 13495
 HEAP32[$20 >> 2] = $6; //@line 13496
 $21 = $ReallocAsyncCtx4 + 12 | 0; //@line 13497
 HEAP32[$21 >> 2] = $8; //@line 13498
 sp = STACKTOP; //@line 13499
 return;
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$1$i$i = 0, $$1$lcssa$i$i = 0, $$18$i$i = 0, $$19$i$i = 0, $11 = 0, $14 = 0, $22 = 0, $28 = 0, $34 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $47 = 0, $60 = 0, $63 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23017
 $7 = HEAPU8[$0 + 24 >> 0] | 0; //@line 23020
 $8 = $0 + 25 | 0; //@line 23021
 $11 = (HEAPU8[$8 >> 0] | 0) + $7 | 0; //@line 23024
 $14 = $0 + 26 | 0; //@line 23027
 if ((HEAP8[$2 >> 0] | 0) == (HEAPU8[$14 >> 0] | 0)) {
  HEAP32[$4 >> 2] = 0; //@line 23032
  $$0 = 0; //@line 23033
  return $$0 | 0; //@line 23034
 }
 if ((HEAP32[$4 >> 2] | 0) >>> 0 < $7 >>> 0) {
  $$0 = 0; //@line 23039
  return $$0 | 0; //@line 23040
 }
 HEAP8[$3 >> 0] = HEAP8[$0 + 22 >> 0] | 0; //@line 23044
 $22 = HEAP32[$4 >> 2] | 0; //@line 23045
 if ($22 >>> 0 < $11 >>> 0) {
  $$0 = 1; //@line 23048
  return $$0 | 0; //@line 23049
 }
 if ((($22 >>> 0) % ((HEAPU8[$8 >> 0] | 0) >>> 0) | 0 | 0) != 1) {
  $$0 = 1; //@line 23056
  return $$0 | 0; //@line 23057
 }
 $28 = HEAP8[$2 >> 0] | 0; //@line 23059
 $34 = $0 + 88 | 0; //@line 23067
 $35 = $28 & 255; //@line 23068
 $36 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $14 : $0 + 35 | 0) >> 0] | 0; //@line 23069
 $$18$i$i = ($35 | 0) == ($36 | 0) ? $28 : $35 + 255 & 255; //@line 23073
 L14 : do {
  if (($$18$i$i & 255 | 0) == ($36 | 0)) {
   $$1$lcssa$i$i = $$18$i$i; //@line 23078
  } else {
   $44 = HEAPU8[$0 + 92 >> 0] | 0; //@line 23082
   $$19$i$i = $$18$i$i; //@line 23083
   while (1) {
    $45 = $$19$i$i << 24 >> 24; //@line 23085
    if (($45 | 0) < ($44 | 0)) {
     if (HEAP8[(HEAP32[$34 >> 2] | 0) + $45 >> 0] | 0) {
      $$1$lcssa$i$i = $$19$i$i; //@line 23093
      break L14;
     }
    }
    $47 = $$19$i$i & 255; //@line 23097
    $$1$i$i = ($47 | 0) == ($36 | 0) ? $$19$i$i : $47 + 255 & 255; //@line 23101
    if (($$1$i$i & 255 | 0) == ($36 | 0)) {
     $$1$lcssa$i$i = $$1$i$i; //@line 23105
     break;
    } else {
     $$19$i$i = $$1$i$i; //@line 23108
    }
   }
  }
 } while (0);
 HEAP8[$2 >> 0] = $$1$lcssa$i$i; //@line 23113
 $60 = ($$1$lcssa$i$i << 24 >> 24 | 0) != (HEAPU8[$14 >> 0] | 0); //@line 23117
 if ($60 | $1 ^ 1) {
  $$0 = $60; //@line 23121
  return $$0 | 0; //@line 23122
 }
 $63 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 23126
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 23127
 FUNCTION_TABLE_vi[$63 & 1023]($0); //@line 23128
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 560; //@line 23131
  sp = STACKTOP; //@line 23132
  return 0; //@line 23133
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 23135
 $$0 = 0; //@line 23136
 return $$0 | 0; //@line 23137
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 6826
 STACKTOP = STACKTOP + 128 | 0; //@line 6827
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 6827
 $2 = sp; //@line 6828
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6829
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 6830
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 653; //@line 6833
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 6835
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 6837
  sp = STACKTOP; //@line 6838
  STACKTOP = sp; //@line 6839
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6841
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 6844
  return;
 }
 if (!(HEAP32[5049] | 0)) {
  _serial_init(20200, 2, 3); //@line 6849
  $$01213 = 0; //@line 6850
  $$014 = 0; //@line 6850
 } else {
  $$01213 = 0; //@line 6852
  $$014 = 0; //@line 6852
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 6856
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6861
   _serial_putc(20200, 13); //@line 6862
   if (___async) {
    label = 8; //@line 6865
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6868
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 6871
  _serial_putc(20200, $$01213 << 24 >> 24); //@line 6872
  if (___async) {
   label = 11; //@line 6875
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6878
  $24 = $$014 + 1 | 0; //@line 6879
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 6882
   break;
  } else {
   $$014 = $24; //@line 6885
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 654; //@line 6889
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 6891
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 6893
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 6895
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 6897
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 6899
  sp = STACKTOP; //@line 6900
  STACKTOP = sp; //@line 6901
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 655; //@line 6904
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 6906
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 6908
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 6910
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 6912
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 6914
  sp = STACKTOP; //@line 6915
  STACKTOP = sp; //@line 6916
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 6919
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_232($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13941
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13945
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13947
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 13949
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13951
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 13953
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13955
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13957
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13959
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13961
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 13964
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13966
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 13970
   $27 = $6 + 24 | 0; //@line 13971
   $28 = $4 + 8 | 0; //@line 13972
   $29 = $6 + 54 | 0; //@line 13973
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 14003
    HEAP8[$14 >> 0] = 0; //@line 14004
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 14005
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 14006
    if (!___async) {
     ___async_unwind = 0; //@line 14009
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 735; //@line 14011
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 14013
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 14015
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 14017
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 14019
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 14021
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 14023
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 14025
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 14027
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 14029
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 14031
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 14033
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 14035
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 14037
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 14040
    sp = STACKTOP; //@line 14041
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 14046
 HEAP8[$14 >> 0] = $12; //@line 14047
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_106($0) {
 $0 = $0 | 0;
 var $12 = 0, $19 = 0, $2 = 0, $23 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27023
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27025
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27027
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27029
 $9 = $2 + 1964 | 0; //@line 27032
 HEAP8[$9 >> 0] = HEAP8[$2 + 1182 >> 0] | 0; //@line 27033
 $12 = $2 + 1968 | 0; //@line 27036
 HEAP32[$12 >> 2] = HEAP32[$2 + 1912 >> 2]; //@line 27037
 HEAP8[$2 + 1980 >> 0] = HEAP8[$2 + 1921 >> 0] | 0; //@line 27041
 HEAP8[$2 + 1981 >> 0] = HEAP8[$2 + 1173 >> 0] | 0; //@line 27045
 $19 = $2 + 1982 | 0; //@line 27046
 $23 = $2 + 1984 | 0; //@line 27050
 HEAP32[$23 >> 2] = HEAP8[$19 >> 0] | 0 ? 2 : 1; //@line 27051
 HEAP8[$19 >> 0] = (HEAP32[$2 + 2380 >> 2] | 0) == 2 & 1; //@line 27056
 HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1965 >> 0] | 0; //@line 27060
 $30 = $2 + 4 | 0; //@line 27061
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 27062
 $31 = __ZN7LoRaPHY9rx_configEP18rx_config_params_t($30, $9) | 0; //@line 27063
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 406; //@line 27066
  $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 27067
  HEAP32[$32 >> 2] = $19; //@line 27068
  $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 27069
  HEAP32[$33 >> 2] = $2; //@line 27070
  $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 27071
  HEAP32[$34 >> 2] = $30; //@line 27072
  $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 27073
  HEAP32[$35 >> 2] = $12; //@line 27074
  $36 = $ReallocAsyncCtx2 + 20 | 0; //@line 27075
  HEAP32[$36 >> 2] = $4; //@line 27076
  $37 = $ReallocAsyncCtx2 + 24 | 0; //@line 27077
  HEAP32[$37 >> 2] = $6; //@line 27078
  $38 = $ReallocAsyncCtx2 + 28 | 0; //@line 27079
  HEAP32[$38 >> 2] = $23; //@line 27080
  sp = STACKTOP; //@line 27081
  return;
 }
 HEAP8[___async_retval >> 0] = $31 & 1; //@line 27086
 ___async_unwind = 0; //@line 27087
 HEAP32[$ReallocAsyncCtx2 >> 2] = 406; //@line 27088
 $32 = $ReallocAsyncCtx2 + 4 | 0; //@line 27089
 HEAP32[$32 >> 2] = $19; //@line 27090
 $33 = $ReallocAsyncCtx2 + 8 | 0; //@line 27091
 HEAP32[$33 >> 2] = $2; //@line 27092
 $34 = $ReallocAsyncCtx2 + 12 | 0; //@line 27093
 HEAP32[$34 >> 2] = $30; //@line 27094
 $35 = $ReallocAsyncCtx2 + 16 | 0; //@line 27095
 HEAP32[$35 >> 2] = $12; //@line 27096
 $36 = $ReallocAsyncCtx2 + 20 | 0; //@line 27097
 HEAP32[$36 >> 2] = $4; //@line 27098
 $37 = $ReallocAsyncCtx2 + 24 | 0; //@line 27099
 HEAP32[$37 >> 2] = $6; //@line 27100
 $38 = $ReallocAsyncCtx2 + 28 | 0; //@line 27101
 HEAP32[$38 >> 2] = $23; //@line 27102
 sp = STACKTOP; //@line 27103
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13825
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13829
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13831
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 13833
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13835
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 13837
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13839
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13841
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13843
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13845
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13847
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13849
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13851
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 13854
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 13855
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 13888
    HEAP8[$14 >> 0] = 0; //@line 13889
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 13890
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 13891
    if (!___async) {
     ___async_unwind = 0; //@line 13894
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 735; //@line 13896
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 13898
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 13900
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 13902
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 13904
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 13906
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 13908
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 13910
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 13912
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 13914
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 13916
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 13918
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 13920
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 13922
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 13925
    sp = STACKTOP; //@line 13926
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 13931
 HEAP8[$14 >> 0] = $12; //@line 13932
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 32348
 }
 ret = dest | 0; //@line 32351
 dest_end = dest + num | 0; //@line 32352
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 32356
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 32357
   dest = dest + 1 | 0; //@line 32358
   src = src + 1 | 0; //@line 32359
   num = num - 1 | 0; //@line 32360
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 32362
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 32363
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 32365
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 32366
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 32367
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 32368
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 32369
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 32370
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 32371
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 32372
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 32373
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 32374
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 32375
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 32376
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 32377
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 32378
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 32379
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 32380
   dest = dest + 64 | 0; //@line 32381
   src = src + 64 | 0; //@line 32382
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 32385
   dest = dest + 4 | 0; //@line 32386
   src = src + 4 | 0; //@line 32387
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 32391
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 32393
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 32394
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 32395
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 32396
   dest = dest + 4 | 0; //@line 32397
   src = src + 4 | 0; //@line 32398
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 32403
  dest = dest + 1 | 0; //@line 32404
  src = src + 1 | 0; //@line 32405
 }
 return ret | 0; //@line 32407
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $2 = 0, $20 = 0, $22 = 0, $28 = 0, $34 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13975
 $2 = $0 + 2380 | 0; //@line 13976
 do {
  if ((HEAP32[$2 >> 2] | 0) == 2) {
   if (!(HEAP8[$0 + 2377 >> 0] | 0)) {
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13985
    __ZN7LoRaMac15open_rx2_windowEv($0); //@line 13986
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 418; //@line 13989
     HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13991
     HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 13994
     HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 13996
     sp = STACKTOP; //@line 13997
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14000
     break;
    }
   } else {
    label = 6; //@line 14004
   }
  } else {
   label = 6; //@line 14007
  }
 } while (0);
 do {
  if ((label | 0) == 6) {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14013
   __ZN7LoRaPHY18put_radio_to_sleepEv($0 + 4 | 0); //@line 14014
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 419; //@line 14017
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 14019
    HEAP8[$AsyncCtx3 + 8 >> 0] = $1 & 1; //@line 14022
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 14024
    sp = STACKTOP; //@line 14025
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14028
    break;
   }
  }
 } while (0);
 $20 = (HEAP8[$0 + 1177 >> 0] | 0) != 0; //@line 14038
 if (HEAP32[$0 + 1168 >> 2] | 0) {
  if ($20) {
   $34 = $1 ? 4 : 6; //@line 14042
   HEAP32[$0 + 2056 >> 2] = $34; //@line 14043
   $$pre$phi6Z2D = $34; //@line 14044
  } else {
   $$pre$phi6Z2D = $1 ? 4 : 6; //@line 14047
  }
  HEAP32[$0 + 2092 >> 2] = $$pre$phi6Z2D; //@line 14050
  return;
 }
 if ($20) {
  $22 = $1 ? 3 : 5; //@line 14055
  HEAP32[$0 + 2056 >> 2] = $22; //@line 14056
  $$pre$phiZ2D = $22; //@line 14057
 } else {
  $$pre$phiZ2D = $1 ? 3 : 5; //@line 14060
 }
 HEAP32[$0 + 2092 >> 2] = $$pre$phiZ2D; //@line 14063
 if ((HEAP32[$2 >> 2] | 0) == 2) {
  return;
 }
 $28 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, HEAP32[$0 + 1780 >> 2] | 0) | 0; //@line 14071
 if ($28 >>> 0 < (HEAP32[$0 + 1776 >> 2] | 0) >>> 0) {
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14079
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1836 | 0); //@line 14080
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 420; //@line 14083
  sp = STACKTOP; //@line 14084
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 14087
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_267($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18396
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18398
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18402
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18404
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18406
 $12 = HEAP16[$0 + 24 >> 1] | 0; //@line 18408
 $14 = HEAP16[$0 + 26 >> 1] | 0; //@line 18410
 $16 = HEAP8[$0 + 28 >> 0] | 0; //@line 18412
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 18414
 $19 = $6 + 12 | 0; //@line 18416
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2]; //@line 18417
 $20 = $6 + 16 | 0; //@line 18418
 HEAP32[$20 >> 2] = $10; //@line 18419
 HEAP16[$6 + 20 >> 1] = $12; //@line 18421
 HEAP16[$6 + 22 >> 1] = $14; //@line 18423
 HEAP8[$6 + 24 >> 0] = $16; //@line 18425
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 18426
 $24 = _equeue_alloc($18, 28) | 0; //@line 18427
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 300; //@line 18430
  $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 18431
  HEAP32[$25 >> 2] = $2; //@line 18432
  $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 18433
  HEAP32[$26 >> 2] = $19; //@line 18434
  $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 18435
  HEAP32[$27 >> 2] = $20; //@line 18436
  $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 18437
  HEAP32[$28 >> 2] = $18; //@line 18438
  $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 18439
  HEAP32[$29 >> 2] = $19; //@line 18440
  $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 18441
  HEAP32[$30 >> 2] = $8; //@line 18442
  $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 18443
  HEAP32[$31 >> 2] = $6; //@line 18444
  sp = STACKTOP; //@line 18445
  return;
 }
 HEAP32[___async_retval >> 2] = $24; //@line 18449
 ___async_unwind = 0; //@line 18450
 HEAP32[$ReallocAsyncCtx7 >> 2] = 300; //@line 18451
 $25 = $ReallocAsyncCtx7 + 4 | 0; //@line 18452
 HEAP32[$25 >> 2] = $2; //@line 18453
 $26 = $ReallocAsyncCtx7 + 8 | 0; //@line 18454
 HEAP32[$26 >> 2] = $19; //@line 18455
 $27 = $ReallocAsyncCtx7 + 12 | 0; //@line 18456
 HEAP32[$27 >> 2] = $20; //@line 18457
 $28 = $ReallocAsyncCtx7 + 16 | 0; //@line 18458
 HEAP32[$28 >> 2] = $18; //@line 18459
 $29 = $ReallocAsyncCtx7 + 20 | 0; //@line 18460
 HEAP32[$29 >> 2] = $19; //@line 18461
 $30 = $ReallocAsyncCtx7 + 24 | 0; //@line 18462
 HEAP32[$30 >> 2] = $8; //@line 18463
 $31 = $ReallocAsyncCtx7 + 28 | 0; //@line 18464
 HEAP32[$31 >> 2] = $6; //@line 18465
 sp = STACKTOP; //@line 18466
 return;
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3184
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 3190
   _wait_ms(10); //@line 3191
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 129; //@line 3194
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 3196
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3198
    sp = STACKTOP; //@line 3199
    return 0; //@line 3200
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3202
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 3208
 $9 = $0 + 156 | 0; //@line 3209
 _equeue_mutex_lock($9); //@line 3210
 $10 = $0 + 24 | 0; //@line 3211
 $11 = HEAP32[$10 >> 2] | 0; //@line 3212
 L7 : do {
  if (!$11) {
   label = 11; //@line 3216
  } else {
   $$03842$i = $10; //@line 3218
   $14 = $11; //@line 3218
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 3225
    $21 = HEAP32[$20 >> 2] | 0; //@line 3226
    if (!$21) {
     label = 11; //@line 3229
     break L7;
    } else {
     $$03842$i = $20; //@line 3232
     $14 = $21; //@line 3232
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 3236
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 3239
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 3241
    $$038$sink$i = $17 + 8 | 0; //@line 3243
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 3247
   _equeue_mutex_unlock($9); //@line 3248
   $$1$i9 = $14; //@line 3249
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 3254
   $24 = HEAP32[$23 >> 2] | 0; //@line 3255
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 3258
    $$0 = 0; //@line 3259
    return $$0 | 0; //@line 3260
   } else {
    $26 = $0 + 32 | 0; //@line 3262
    $27 = HEAP32[$26 >> 2] | 0; //@line 3263
    HEAP32[$26 >> 2] = $27 + $8; //@line 3265
    HEAP32[$23 >> 2] = $24 - $8; //@line 3267
    HEAP32[$27 >> 2] = $8; //@line 3268
    HEAP8[$27 + 4 >> 0] = 1; //@line 3270
    _equeue_mutex_unlock($9); //@line 3271
    if (!$27) {
     $$0 = 0; //@line 3274
    } else {
     $$1$i9 = $27; //@line 3276
     break;
    }
    return $$0 | 0; //@line 3279
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 3284
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 3286
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 3288
 $$0 = $$1$i9 + 36 | 0; //@line 3290
 return $$0 | 0; //@line 3291
}
function __ZN12LoRaWANStack25process_reception_timeoutEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6997
 STACKTOP = STACKTOP + 16 | 0; //@line 6998
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6998
 $vararg_buffer = sp; //@line 6999
 $2 = sp + 4 | 0; //@line 7000
 $3 = __ZN7LoRaMac16get_current_slotEv($0) | 0; //@line 7001
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 7002
 __ZN7LoRaMac19on_radio_rx_timeoutEb($0, $1); //@line 7003
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 218; //@line 7006
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 7008
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 7010
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 7012
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 7014
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 7016
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 7018
  sp = STACKTOP; //@line 7019
  STACKTOP = sp; //@line 7020
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7022
 if (($3 | 0) != 1) {
  STACKTOP = sp; //@line 7025
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($0) | 0)) {
  HEAP32[$2 >> 2] = 0; //@line 7029
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7030
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $2); //@line 7031
  if (___async) {
   HEAP32[$AsyncCtx7 >> 2] = 219; //@line 7034
   HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 7036
   sp = STACKTOP; //@line 7037
   STACKTOP = sp; //@line 7038
   return;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7040
  STACKTOP = sp; //@line 7041
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($0); //@line 7043
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($0) | 0) >> 2] | 0) == 1) {
   if (__ZN7LoRaMac24continue_sending_processEv($0) | 0) {
    STACKTOP = sp; //@line 7051
    return;
   } else {
    _mbed_tracef(2, 12021, 12026, $vararg_buffer); //@line 7053
    break;
   }
  }
 } while (0);
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7058
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 7059
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 220; //@line 7062
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 7064
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 7066
  sp = STACKTOP; //@line 7067
  STACKTOP = sp; //@line 7068
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7070
 $20 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 7072
 HEAP32[$0 + 2496 >> 2] = $20 ? 5 : 2; //@line 7075
 STACKTOP = sp; //@line 7076
 return;
}
function __ZN7LoRaMac4joinEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$0$i = 0, $2 = 0, $20 = 0, $27 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 16266
 STACKTOP = STACKTOP + 16 | 0; //@line 16267
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16267
 $vararg_buffer = sp; //@line 16268
 $2 = sp + 5 | 0; //@line 16269
 $3 = sp + 4 | 0; //@line 16270
 if (!$1) {
  HEAP8[$0 + 2376 >> 0] = 1; //@line 16273
  $$0 = 0; //@line 16274
  STACKTOP = sp; //@line 16275
  return $$0 | 0; //@line 16275
 }
 $5 = $0 + 2084 | 0; //@line 16277
 HEAP32[$5 >> 2] = 0; //@line 16278
 HEAP32[$5 + 4 >> 2] = 0; //@line 16278
 HEAP32[$5 + 8 >> 2] = 0; //@line 16278
 HEAP32[$5 + 12 >> 2] = 0; //@line 16278
 HEAP32[$5 + 16 >> 2] = 0; //@line 16278
 HEAP32[$0 + 2092 >> 2] = 1; //@line 16280
 HEAP32[$0 + 2088 >> 2] = 0; //@line 16282
 HEAP8[$0 + 1877 >> 0] = __ZN7LoRaPHY16get_alternate_DREh($0 + 4 | 0, (HEAPU8[$0 + 1701 >> 0] | 0) + 1 & 255) | 0; //@line 16291
 HEAP8[$2 >> 0] = 0; //@line 16292
 HEAP8[$3 >> 0] = HEAP8[$0 + 1936 >> 0] << 7; //@line 16296
 HEAP8[$0 + 1180 >> 0] = 1; //@line 16298
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16299
 $20 = __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt($0, $2, $3, 0, 0, 0) | 0; //@line 16300
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 456; //@line 16303
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 16305
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 16307
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 16309
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 16311
  HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 16313
  sp = STACKTOP; //@line 16314
  STACKTOP = sp; //@line 16315
  return 0; //@line 16315
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16317
 do {
  if (!$20) {
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 16321
   $27 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 16322
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 457; //@line 16325
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 16327
    HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 16329
    sp = STACKTOP; //@line 16330
    STACKTOP = sp; //@line 16331
    return 0; //@line 16331
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16333
    $$0$i = $27; //@line 16334
    break;
   }
  } else {
   HEAP32[$vararg_buffer >> 2] = $20; //@line 16338
   _mbed_tracef(2, 12709, 12806, $vararg_buffer); //@line 16339
   $$0$i = $20; //@line 16340
  }
 } while (0);
 $$0 = $$0$i; //@line 16343
 STACKTOP = sp; //@line 16344
 return $$0 | 0; //@line 16344
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1_($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$ = 0, $$0 = 0, $12 = 0, $20 = 0, $21 = 0, $22 = 0, $43 = 0, $44 = 0, $47 = 0, $48 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12569
 STACKTOP = STACKTOP + 16 | 0; //@line 12570
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12570
 $7 = sp; //@line 12571
 HEAP32[$7 >> 2] = 0; //@line 12572
 $8 = HEAP8[$3 >> 0] | 0; //@line 12573
 $9 = $8 + 1 << 24 >> 24; //@line 12574
 HEAP8[$3 >> 0] = $9; //@line 12575
 $12 = HEAP8[$1 + ($8 & 255) >> 0] | 0; //@line 12578
 HEAP8[$3 >> 0] = $8 + 2 << 24 >> 24; //@line 12580
 $20 = (HEAPU8[$1 + ($9 & 255) >> 0] | 0) << 8 | $12 & 255; //@line 12587
 $21 = $2 & 65535; //@line 12588
 $22 = $21 + -4 | 0; //@line 12589
 $43 = (HEAPU8[$1 + ($21 + -3) >> 0] | 0) << 8 | (HEAPU8[$1 + $22 >> 0] | 0) | (HEAPU8[$1 + ($21 + -2) >> 0] | 0) << 16 | (HEAPU8[$1 + ($21 + -1) >> 0] | 0) << 24; //@line 12610
 $44 = HEAP32[$5 >> 2] | 0; //@line 12611
 $47 = $20 - $44 & 65535; //@line 12614
 $48 = $47 + $44 | 0; //@line 12615
 $$ = $20 >>> 0 < ($44 & 65535) >>> 0 ? $48 + 65536 | 0 : $48; //@line 12618
 HEAP32[$5 >> 2] = $$; //@line 12619
 $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 12622
 __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj($0 + 756 | 0, $1, $22 & 65535, $6, 128, $4, 1, $$, $7) | 0; //@line 12623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 387; //@line 12626
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 12628
  HEAP32[$AsyncCtx + 8 >> 2] = $43; //@line 12630
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 12632
  HEAP32[$AsyncCtx + 16 >> 2] = $47; //@line 12634
  HEAP32[$AsyncCtx + 20 >> 2] = $7; //@line 12636
  HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 12638
  sp = STACKTOP; //@line 12639
  STACKTOP = sp; //@line 12640
  return 0; //@line 12640
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12642
 if (($43 | 0) != (HEAP32[$7 >> 2] | 0)) {
  HEAP32[$0 + 2020 >> 2] = 12; //@line 12647
  $$0 = 0; //@line 12648
  STACKTOP = sp; //@line 12649
  return $$0 | 0; //@line 12649
 }
 if ($47 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 12656
  STACKTOP = sp; //@line 12657
  return $$0 | 0; //@line 12657
 }
 HEAP32[$0 + 2020 >> 2] = 10; //@line 12660
 HEAP32[$0 + 2048 >> 2] = HEAP32[$5 >> 2]; //@line 12663
 $$0 = 0; //@line 12664
 STACKTOP = sp; //@line 12665
 return $$0 | 0; //@line 12665
}
function __ZN12LoRaWANStackD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $19 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5682
 $1 = $0 + 2500 | 0; //@line 5683
 $3 = HEAP32[$0 + 2544 >> 2] | 0; //@line 5685
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 5691
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5692
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 2532 | 0); //@line 5693
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 168; //@line 5696
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5698
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5700
    sp = STACKTOP; //@line 5701
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5704
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 2528 >> 2] | 0; //@line 5710
 do {
  if ($11 | 0) {
   $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 5716
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5717
   FUNCTION_TABLE_vi[$15 & 1023]($0 + 2516 | 0); //@line 5718
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 169; //@line 5721
    HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5723
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 5725
    sp = STACKTOP; //@line 5726
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5729
    break;
   }
  }
 } while (0);
 $19 = HEAP32[$0 + 2512 >> 2] | 0; //@line 5735
 do {
  if ($19 | 0) {
   $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 5740
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5741
   FUNCTION_TABLE_vi[$22 & 1023]($1); //@line 5742
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 170; //@line 5745
    HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5747
    sp = STACKTOP; //@line 5748
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5751
    break;
   }
  }
 } while (0);
 $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5757
 __ZN12radio_eventsD2Ev($0 + 2384 | 0); //@line 5758
 if (___async) {
  HEAP32[$AsyncCtx14 >> 2] = 171; //@line 5761
  HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 5763
  sp = STACKTOP; //@line 5764
  return;
 }
 _emscripten_free_async_context($AsyncCtx14 | 0); //@line 5767
 $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5768
 __ZN7LoRaMacD2Ev($0); //@line 5769
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 172; //@line 5772
  sp = STACKTOP; //@line 5773
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx10 | 0); //@line 5776
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb_328($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 23047
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23049
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23051
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23053
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23055
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23057
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23059
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23061
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23063
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23065
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23067
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23069
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23071
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23073
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23075
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23077
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 23081
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 23083
 $39 = HEAP32[(HEAP32[HEAP32[$0 + 64 >> 2] >> 2] | 0) + 24 >> 2] | 0; //@line 23086
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(72) | 0; //@line 23087
 $40 = _mbedtls_cipher_update($28, $2, $39, $2, $34) | 0; //@line 23088
 if (!___async) {
  HEAP32[___async_retval >> 2] = $40; //@line 23092
  ___async_unwind = 0; //@line 23093
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 602; //@line 23095
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 23097
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 23099
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $6; //@line 23101
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $8; //@line 23103
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $39; //@line 23105
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $10; //@line 23107
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $12; //@line 23109
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $14; //@line 23111
 HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $16; //@line 23113
 HEAP32[$ReallocAsyncCtx10 + 40 >> 2] = $18; //@line 23115
 HEAP32[$ReallocAsyncCtx10 + 44 >> 2] = $20; //@line 23117
 HEAP32[$ReallocAsyncCtx10 + 48 >> 2] = $22; //@line 23119
 HEAP32[$ReallocAsyncCtx10 + 52 >> 2] = $24; //@line 23121
 HEAP32[$ReallocAsyncCtx10 + 56 >> 2] = $26; //@line 23123
 HEAP32[$ReallocAsyncCtx10 + 60 >> 2] = $28; //@line 23125
 HEAP32[$ReallocAsyncCtx10 + 64 >> 2] = $30; //@line 23127
 HEAP32[$ReallocAsyncCtx10 + 68 >> 2] = $36; //@line 23129
 sp = STACKTOP; //@line 23130
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEhj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$079$i = 0, $$1 = 0, $11 = 0, $13 = 0, $20 = 0, $25 = 0, $28 = 0, $29 = 0, $34 = 0, $35 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21386
 if (!(HEAP8[$0 + 17 >> 0] | 0)) {
  $$0 = 0; //@line 21391
  return $$0 | 0; //@line 21392
 }
 $6 = $0 + 76 | 0; //@line 21394
 L4 : do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $25 = -1; //@line 21399
  } else {
   $$079$i = 0; //@line 21401
   while (1) {
    $11 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21405
    $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 21407
    $13 = FUNCTION_TABLE_iiii[$11 & 31]($0, $2, $$079$i & 255) | 0; //@line 21408
    if (___async) {
     break;
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 21413
    if ($13) {
     $25 = $$079$i; //@line 21415
     break L4;
    }
    $20 = $$079$i + 1 | 0; //@line 21418
    if (($20 | 0) < (HEAPU8[$6 >> 0] | 0)) {
     $$079$i = $20; //@line 21423
    } else {
     $25 = -1; //@line 21425
     break L4;
    }
   }
   HEAP32[$AsyncCtx >> 2] = 535; //@line 21429
   HEAP32[$AsyncCtx + 4 >> 2] = $$079$i; //@line 21431
   HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 21433
   HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 21435
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 21437
   HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 21439
   HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 21441
   sp = STACKTOP; //@line 21442
   return 0; //@line 21443
  }
 } while (0);
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 76 >> 2] | 0; //@line 21449
 $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 21450
 $29 = FUNCTION_TABLE_iiii[$28 & 31]($0, $2, $25 & 255) | 0; //@line 21451
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 536; //@line 21454
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 21456
  HEAP8[$AsyncCtx2 + 8 >> 0] = $1; //@line 21458
  HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 21460
  sp = STACKTOP; //@line 21461
  return 0; //@line 21462
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 21464
 $$ = $29 ? 3 : 2; //@line 21465
 $34 = HEAP32[$0 + 124 >> 2] | 0; //@line 21467
 $35 = $1 & 255; //@line 21468
 $$1 = (HEAP32[$34 + ($35 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 21473
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 21476
  return $$0 | 0; //@line 21477
 }
 HEAP32[$34 + ($35 * 12 | 0) + 4 >> 2] = $2; //@line 21480
 $$0 = 3; //@line 21481
 return $$0 | 0; //@line 21482
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_126($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 28370
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28374
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28376
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28378
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28380
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28382
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28384
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28386
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2092 >> 2] = 13; //@line 28392
  return;
 }
 if (((HEAPU8[$6 + -3 + ($2 + 1442) >> 0] | 0) << 8 | (HEAPU8[$2 + 1442 + $4 >> 0] | 0) | (HEAPU8[$6 + -2 + ($2 + 1442) >> 0] | 0) << 16 | (HEAPU8[$6 + -1 + ($2 + 1442) >> 0] | 0) << 24 | 0) != (HEAP32[$8 >> 2] | 0)) {
  HEAP32[$2 + 2092 >> 2] = 7; //@line 28420
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 28424
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 28425
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 384; //@line 28428
  $44 = $ReallocAsyncCtx5 + 4 | 0; //@line 28429
  HEAP32[$44 >> 2] = $12; //@line 28430
  $45 = $ReallocAsyncCtx5 + 8 | 0; //@line 28431
  HEAP32[$45 >> 2] = $2; //@line 28432
  $46 = $ReallocAsyncCtx5 + 12 | 0; //@line 28433
  HEAP32[$46 >> 2] = $14; //@line 28434
  $47 = $ReallocAsyncCtx5 + 16 | 0; //@line 28435
  HEAP32[$47 >> 2] = $16; //@line 28436
  $48 = $ReallocAsyncCtx5 + 20 | 0; //@line 28437
  HEAP32[$48 >> 2] = $6; //@line 28438
  $49 = $ReallocAsyncCtx5 + 24 | 0; //@line 28439
  HEAP32[$49 >> 2] = $10; //@line 28440
  sp = STACKTOP; //@line 28441
  return;
 }
 ___async_unwind = 0; //@line 28444
 HEAP32[$ReallocAsyncCtx5 >> 2] = 384; //@line 28445
 $44 = $ReallocAsyncCtx5 + 4 | 0; //@line 28446
 HEAP32[$44 >> 2] = $12; //@line 28447
 $45 = $ReallocAsyncCtx5 + 8 | 0; //@line 28448
 HEAP32[$45 >> 2] = $2; //@line 28449
 $46 = $ReallocAsyncCtx5 + 12 | 0; //@line 28450
 HEAP32[$46 >> 2] = $14; //@line 28451
 $47 = $ReallocAsyncCtx5 + 16 | 0; //@line 28452
 HEAP32[$47 >> 2] = $16; //@line 28453
 $48 = $ReallocAsyncCtx5 + 20 | 0; //@line 28454
 HEAP32[$48 >> 2] = $6; //@line 28455
 $49 = $ReallocAsyncCtx5 + 24 | 0; //@line 28456
 HEAP32[$49 >> 2] = $10; //@line 28457
 sp = STACKTOP; //@line 28458
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_402($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $31 = 0, $36 = 0, $4 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29445
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29447
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29449
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29451
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 29453
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29455
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 29457
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29459
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29461
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29463
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 29465
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 29467
 HEAP32[$2 + 2092 >> 2] = 1; //@line 29469
 HEAP32[$2 + 2056 >> 2] = 1; //@line 29471
 HEAP8[$2 + 2060 >> 0] = HEAP8[$4 >> 0] | 0; //@line 29474
 HEAP8[$2 + 2061 >> 0] = HEAP8[$6 >> 0] | 0; //@line 29477
 HEAP32[$2 + 2072 >> 2] = $8 & 255; //@line 29480
 $31 = HEAP32[$10 >> 2] | 0; //@line 29481
 HEAP32[$2 + 2064 >> 2] = $31; //@line 29483
 HEAP32[$2 + 2096 >> 2] = $31; //@line 29485
 if (!(HEAP8[$12 >> 0] | 0)) {
  $36 = $2 + 1701 | 0; //@line 29489
  HEAP8[$36 >> 0] = (HEAP8[$36 >> 0] | 0) + 1 << 24 >> 24; //@line 29492
 }
 $41 = HEAP16[$14 >> 1] & 255; //@line 29496
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 29497
 __ZN7LoRaPHY11handle_sendEPhh($16, $2 + 1185 | 0, $41); //@line 29498
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 432; //@line 29501
  $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 29502
  HEAP32[$42 >> 2] = $6; //@line 29503
  $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 29504
  HEAP32[$43 >> 2] = $18; //@line 29505
  $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 29506
  HEAP32[$44 >> 2] = $20; //@line 29507
  $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 29508
  HEAP32[$45 >> 2] = $22; //@line 29509
  sp = STACKTOP; //@line 29510
  return;
 }
 ___async_unwind = 0; //@line 29513
 HEAP32[$ReallocAsyncCtx2 >> 2] = 432; //@line 29514
 $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 29515
 HEAP32[$42 >> 2] = $6; //@line 29516
 $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 29517
 HEAP32[$43 >> 2] = $18; //@line 29518
 $44 = $ReallocAsyncCtx2 + 12 | 0; //@line 29519
 HEAP32[$44 >> 2] = $20; //@line 29520
 $45 = $ReallocAsyncCtx2 + 16 | 0; //@line 29521
 HEAP32[$45 >> 2] = $22; //@line 29522
 sp = STACKTOP; //@line 29523
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16693
 STACKTOP = STACKTOP + 64 | 0; //@line 16694
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 16694
 $3 = sp; //@line 16695
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 16698
 } else {
  if (!$1) {
   $$2 = 0; //@line 16702
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 16704
   $6 = ___dynamic_cast($1, 400, 384, 0) | 0; //@line 16705
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 724; //@line 16708
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 16710
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 16712
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 16714
    sp = STACKTOP; //@line 16715
    STACKTOP = sp; //@line 16716
    return 0; //@line 16716
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16718
   if (!$6) {
    $$2 = 0; //@line 16721
   } else {
    dest = $3 + 4 | 0; //@line 16724
    stop = dest + 52 | 0; //@line 16724
    do {
     HEAP32[dest >> 2] = 0; //@line 16724
     dest = dest + 4 | 0; //@line 16724
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 16725
    HEAP32[$3 + 8 >> 2] = $0; //@line 16727
    HEAP32[$3 + 12 >> 2] = -1; //@line 16729
    HEAP32[$3 + 48 >> 2] = 1; //@line 16731
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 16734
    $18 = HEAP32[$2 >> 2] | 0; //@line 16735
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 16736
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 16737
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 725; //@line 16740
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16742
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 16744
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 16746
     sp = STACKTOP; //@line 16747
     STACKTOP = sp; //@line 16748
     return 0; //@line 16748
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16750
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 16757
     $$0 = 1; //@line 16758
    } else {
     $$0 = 0; //@line 16760
    }
    $$2 = $$0; //@line 16762
   }
  }
 }
 STACKTOP = sp; //@line 16766
 return $$2 | 0; //@line 16766
}
function __ZN12LoRaWANStackD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17672
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17674
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17676
 $6 = HEAP32[$2 + 2528 >> 2] | 0; //@line 17678
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 17683
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 17684
  FUNCTION_TABLE_vi[$10 & 1023]($2 + 2516 | 0); //@line 17685
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 169; //@line 17688
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 17689
   HEAP32[$11 >> 2] = $2; //@line 17690
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 17691
   HEAP32[$12 >> 2] = $4; //@line 17692
   sp = STACKTOP; //@line 17693
   return;
  }
  ___async_unwind = 0; //@line 17696
  HEAP32[$ReallocAsyncCtx2 >> 2] = 169; //@line 17697
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 17698
  HEAP32[$11 >> 2] = $2; //@line 17699
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 17700
  HEAP32[$12 >> 2] = $4; //@line 17701
  sp = STACKTOP; //@line 17702
  return;
 }
 $14 = HEAP32[$2 + 2512 >> 2] | 0; //@line 17706
 if (!$14) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17710
  __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 17711
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 17714
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 17715
   HEAP32[$20 >> 2] = $2; //@line 17716
   sp = STACKTOP; //@line 17717
   return;
  }
  ___async_unwind = 0; //@line 17720
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 17721
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 17722
  HEAP32[$20 >> 2] = $2; //@line 17723
  sp = STACKTOP; //@line 17724
  return;
 } else {
  $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 17728
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17729
  FUNCTION_TABLE_vi[$17 & 1023]($4); //@line 17730
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 170; //@line 17733
   $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 17734
   HEAP32[$18 >> 2] = $2; //@line 17735
   sp = STACKTOP; //@line 17736
   return;
  }
  ___async_unwind = 0; //@line 17739
  HEAP32[$ReallocAsyncCtx3 >> 2] = 170; //@line 17740
  $18 = $ReallocAsyncCtx3 + 4 | 0; //@line 17741
  HEAP32[$18 >> 2] = $2; //@line 17742
  sp = STACKTOP; //@line 17743
  return;
 }
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $21 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6746
 STACKTOP = STACKTOP + 16 | 0; //@line 6747
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6747
 $5 = sp; //@line 6748
 $6 = $0 + 2911 | 0; //@line 6749
 if (($2 & 65535) > 255 | (HEAP8[$6 >> 0] | 0) == 0) {
  STACKTOP = sp; //@line 6755
  return;
 }
 HEAP8[$6 >> 0] = 0; //@line 6758
 $11 = $0 + 2912 | 0; //@line 6759
 _memcpy($11 | 0, $1 | 0, $2 & 65535 | 0) | 0; //@line 6760
 $13 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6762
 $14 = $5 + 12 | 0; //@line 6763
 HEAP32[$5 >> 2] = 7; //@line 6764
 HEAP32[$5 + 4 >> 2] = 0; //@line 6766
 HEAP32[$5 + 8 >> 2] = $0; //@line 6768
 HEAP32[$14 >> 2] = 836; //@line 6769
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6770
 $15 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3_($13, $5, $11, $2, $3, $4) | 0; //@line 6771
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 206; //@line 6774
  HEAP32[$AsyncCtx3 + 4 >> 2] = $14; //@line 6776
  HEAP32[$AsyncCtx3 + 8 >> 2] = $5; //@line 6778
  sp = STACKTOP; //@line 6779
  STACKTOP = sp; //@line 6780
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6782
 $18 = HEAP32[$14 >> 2] | 0; //@line 6783
 do {
  if ($18 | 0) {
   $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 6788
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6789
   FUNCTION_TABLE_vi[$21 & 1023]($5); //@line 6790
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 207; //@line 6793
    HEAP32[$AsyncCtx + 4 >> 2] = $5; //@line 6795
    HEAP32[$AsyncCtx + 8 >> 2] = $15; //@line 6797
    sp = STACKTOP; //@line 6798
    STACKTOP = sp; //@line 6799
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6801
    break;
   }
  }
 } while (0);
 if ($15 | 0) {
  STACKTOP = sp; //@line 6808
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6810
 _mbed_assert_internal(11914, 11923, 525); //@line 6811
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 208; //@line 6814
  sp = STACKTOP; //@line 6815
  STACKTOP = sp; //@line 6816
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6818
 STACKTOP = sp; //@line 6819
 return;
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $30 = 0, $34 = 0, $35 = 0, $37 = 0, $4 = 0, $42 = 0, $43 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14105
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14107
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14109
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14111
 HEAP8[$2 + 2895 >> 0] = 0; //@line 14115
 HEAP32[$2 + 2888 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 20 >> 2]; //@line 14120
 HEAP8[$2 + 2893 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 8 >> 0] | 0; //@line 14125
 HEAP8[$2 + 2892 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 9 >> 0] | 0; //@line 14130
 HEAP32[$2 + 2884 >> 2] = HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 12 >> 2]; //@line 14135
 HEAP8[$2 + 2894 >> 0] = HEAP8[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) + 11 >> 0] | 0; //@line 14140
 $30 = $2 + 2496 | 0; //@line 14141
 switch (HEAP32[$30 >> 2] | 0) {
 case 1:
  {
   HEAP32[$30 >> 2] = 4; //@line 14145
   return;
  }
 case 8:
  {
   $34 = (HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) >> 2] | 0) == 1; //@line 14152
   $35 = $2 + 2904 | 0; //@line 14153
   $37 = HEAP32[$35 >> 2] & -18; //@line 14155
   if ($34) {
    HEAP32[$35 >> 2] = $37 | 1; //@line 14158
    _mbed_tracef(16, 12021, 12394, $6); //@line 14159
    HEAP32[$30 >> 2] = 9; //@line 14160
    return;
   }
   HEAP32[$35 >> 2] = $37 | 16; //@line 14164
   if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
    return;
   }
   __ZN7LoRaMac21post_process_mcps_reqEv($4); //@line 14170
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 14171
   __ZN12LoRaWANStack26process_status_check_stateEv($2); //@line 14172
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 342; //@line 14175
    $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 14176
    HEAP32[$42 >> 2] = $4; //@line 14177
    $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 14178
    HEAP32[$43 >> 2] = $30; //@line 14179
    sp = STACKTOP; //@line 14180
    return;
   }
   ___async_unwind = 0; //@line 14183
   HEAP32[$ReallocAsyncCtx2 >> 2] = 342; //@line 14184
   $42 = $ReallocAsyncCtx2 + 4 | 0; //@line 14185
   HEAP32[$42 >> 2] = $4; //@line 14186
   $43 = $ReallocAsyncCtx2 + 8 | 0; //@line 14187
   HEAP32[$43 >> 2] = $30; //@line 14188
   sp = STACKTOP; //@line 14189
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_21($0) {
 $0 = $0 | 0;
 var $$pr = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20251
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20253
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20257
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20259
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20261
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 20263
 $$pr = HEAP32[$2 >> 2] | 0; //@line 20264
 if (!$$pr) {
  $17 = $8 + 12 | 0; //@line 20267
  HEAP32[$17 >> 2] = 0; //@line 20268
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 20269
  __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $8); //@line 20270
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 20273
   $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 20274
   HEAP32[$18 >> 2] = $17; //@line 20275
   $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 20276
   HEAP32[$19 >> 2] = $8; //@line 20277
   sp = STACKTOP; //@line 20278
   return;
  }
  ___async_unwind = 0; //@line 20281
  HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 20282
  $18 = $ReallocAsyncCtx9 + 4 | 0; //@line 20283
  HEAP32[$18 >> 2] = $17; //@line 20284
  $19 = $ReallocAsyncCtx9 + 8 | 0; //@line 20285
  HEAP32[$19 >> 2] = $8; //@line 20286
  sp = STACKTOP; //@line 20287
  return;
 } else {
  $13 = HEAP32[$$pr + 4 >> 2] | 0; //@line 20291
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 20292
  FUNCTION_TABLE_vii[$13 & 15]($8, $10); //@line 20293
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 20296
   $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 20297
   HEAP32[$14 >> 2] = $2; //@line 20298
   $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 20299
   HEAP32[$15 >> 2] = $6; //@line 20300
   $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 20301
   HEAP32[$16 >> 2] = $8; //@line 20302
   sp = STACKTOP; //@line 20303
   return;
  }
  ___async_unwind = 0; //@line 20306
  HEAP32[$ReallocAsyncCtx7 >> 2] = 359; //@line 20307
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 20308
  HEAP32[$14 >> 2] = $2; //@line 20309
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 20310
  HEAP32[$15 >> 2] = $6; //@line 20311
  $16 = $ReallocAsyncCtx7 + 12 | 0; //@line 20312
  HEAP32[$16 >> 2] = $8; //@line 20313
  sp = STACKTOP; //@line 20314
  return;
 }
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 16118
 STACKTOP = STACKTOP + 128 | 0; //@line 16119
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 16119
 $4 = sp + 124 | 0; //@line 16120
 $5 = sp; //@line 16121
 dest = $5; //@line 16122
 src = 10792; //@line 16122
 stop = dest + 124 | 0; //@line 16122
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 16122
  dest = dest + 4 | 0; //@line 16122
  src = src + 4 | 0; //@line 16122
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 16128
   $$015 = 1; //@line 16128
   label = 4; //@line 16129
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 16132
   $$0 = -1; //@line 16133
  }
 } else {
  $$014 = $0; //@line 16136
  $$015 = $1; //@line 16136
  label = 4; //@line 16137
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 16141
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 16143
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 16145
  $14 = $5 + 20 | 0; //@line 16146
  HEAP32[$14 >> 2] = $$014; //@line 16147
  HEAP32[$5 + 44 >> 2] = $$014; //@line 16149
  $16 = $$014 + $$$015 | 0; //@line 16150
  $17 = $5 + 16 | 0; //@line 16151
  HEAP32[$17 >> 2] = $16; //@line 16152
  HEAP32[$5 + 28 >> 2] = $16; //@line 16154
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 16155
  $19 = _vfprintf($5, $2, $3) | 0; //@line 16156
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 712; //@line 16159
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 16161
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 16163
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 16165
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 16167
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 16169
   sp = STACKTOP; //@line 16170
   STACKTOP = sp; //@line 16171
   return 0; //@line 16171
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16173
  if (!$$$015) {
   $$0 = $19; //@line 16176
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 16178
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 16183
   $$0 = $19; //@line 16184
  }
 }
 STACKTOP = sp; //@line 16187
 return $$0 | 0; //@line 16187
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14332
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 14334
 $7 = $4 + 156 | 0; //@line 14335
 _equeue_mutex_lock($7); //@line 14336
 $8 = $4 + 24 | 0; //@line 14337
 $9 = HEAP32[$8 >> 2] | 0; //@line 14338
 L3 : do {
  if (!$9) {
   label = 9; //@line 14342
  } else {
   $$03842$i = $8; //@line 14344
   $12 = $9; //@line 14344
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 14351
    $19 = HEAP32[$18 >> 2] | 0; //@line 14352
    if (!$19) {
     label = 9; //@line 14355
     break L3;
    } else {
     $$03842$i = $18; //@line 14358
     $12 = $19; //@line 14358
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 14362
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 14365
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 14367
    $$038$sink$i = $15 + 8 | 0; //@line 14369
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 14373
   _equeue_mutex_unlock($7); //@line 14374
   $$1$i9 = $12; //@line 14375
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 14380
   $22 = HEAP32[$21 >> 2] | 0; //@line 14381
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 14384
    $$0 = 0; //@line 14385
    $34 = ___async_retval; //@line 14386
    HEAP32[$34 >> 2] = $$0; //@line 14387
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 14390
    $25 = HEAP32[$24 >> 2] | 0; //@line 14391
    HEAP32[$24 >> 2] = $25 + $6; //@line 14393
    HEAP32[$21 >> 2] = $22 - $6; //@line 14395
    HEAP32[$25 >> 2] = $6; //@line 14396
    HEAP8[$25 + 4 >> 0] = 1; //@line 14398
    _equeue_mutex_unlock($7); //@line 14399
    if (!$25) {
     $$0 = 0; //@line 14402
    } else {
     $$1$i9 = $25; //@line 14404
     break;
    }
    $34 = ___async_retval; //@line 14407
    HEAP32[$34 >> 2] = $$0; //@line 14408
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 14414
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 14416
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 14418
 $$0 = $$1$i9 + 36 | 0; //@line 14420
 $34 = ___async_retval; //@line 14421
 HEAP32[$34 >> 2] = $$0; //@line 14422
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18025
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 18031
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 18035
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 18036
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 18037
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 18038
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 741; //@line 18041
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 18043
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 18045
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 18047
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 18049
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 18051
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 18053
    sp = STACKTOP; //@line 18054
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18057
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 18061
    $$0 = $0 + 24 | 0; //@line 18062
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 18064
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 18065
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 18070
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 18076
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 18079
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 742; //@line 18084
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 18086
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 18088
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 18090
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 18092
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 18094
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 18096
    sp = STACKTOP; //@line 18097
    return;
   }
  }
 } while (0);
 return;
}
function _equeue_dealloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$02329$i = 0, $$02330$i = 0, $$025$i = 0, $$sink$in$i = 0, $$sink21$i = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $25 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3298
 $2 = $1 + -36 | 0; //@line 3299
 $4 = HEAP32[$1 + -8 >> 2] | 0; //@line 3301
 do {
  if ($4 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 3305
   FUNCTION_TABLE_vi[$4 & 1023]($1); //@line 3306
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 130; //@line 3309
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3311
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 3313
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 3315
    sp = STACKTOP; //@line 3316
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3319
    break;
   }
  }
 } while (0);
 $9 = $0 + 156 | 0; //@line 3324
 _equeue_mutex_lock($9); //@line 3325
 $10 = $0 + 24 | 0; //@line 3326
 $11 = HEAP32[$10 >> 2] | 0; //@line 3327
 L7 : do {
  if (!$11) {
   $$02329$i = $10; //@line 3331
  } else {
   $13 = HEAP32[$2 >> 2] | 0; //@line 3333
   $$025$i = $10; //@line 3334
   $15 = $11; //@line 3334
   while (1) {
    $14 = HEAP32[$15 >> 2] | 0; //@line 3336
    if ($14 >>> 0 >= $13 >>> 0) {
     break;
    }
    $17 = $15 + 8 | 0; //@line 3341
    $18 = HEAP32[$17 >> 2] | 0; //@line 3342
    if (!$18) {
     $$02329$i = $17; //@line 3345
     break L7;
    } else {
     $$025$i = $17; //@line 3348
     $15 = $18; //@line 3348
    }
   }
   if (($14 | 0) == ($13 | 0)) {
    HEAP32[$1 + -24 >> 2] = $15; //@line 3354
    $$02330$i = $$025$i; //@line 3357
    $$sink$in$i = (HEAP32[$$025$i >> 2] | 0) + 8 | 0; //@line 3357
    $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 3358
    $25 = $1 + -28 | 0; //@line 3359
    HEAP32[$25 >> 2] = $$sink21$i; //@line 3360
    HEAP32[$$02330$i >> 2] = $2; //@line 3361
    _equeue_mutex_unlock($9); //@line 3362
    return;
   } else {
    $$02329$i = $$025$i; //@line 3365
   }
  }
 } while (0);
 HEAP32[$1 + -24 >> 2] = 0; //@line 3370
 $$02330$i = $$02329$i; //@line 3371
 $$sink$in$i = $$02329$i; //@line 3371
 $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 3372
 $25 = $1 + -28 | 0; //@line 3373
 HEAP32[$25 >> 2] = $$sink21$i; //@line 3374
 HEAP32[$$02330$i >> 2] = $2; //@line 3375
 _equeue_mutex_unlock($9); //@line 3376
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_306($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21580
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21582
 $4 = HEAP32[$2 + 1828 >> 2] | 0; //@line 21584
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 21589
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 21590
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1816 | 0); //@line 21591
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 21594
   $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 21595
   HEAP32[$9 >> 2] = $2; //@line 21596
   sp = STACKTOP; //@line 21597
   return;
  }
  ___async_unwind = 0; //@line 21600
  HEAP32[$ReallocAsyncCtx4 >> 2] = 379; //@line 21601
  $9 = $ReallocAsyncCtx4 + 4 | 0; //@line 21602
  HEAP32[$9 >> 2] = $2; //@line 21603
  sp = STACKTOP; //@line 21604
  return;
 }
 $11 = HEAP32[$2 + 1808 >> 2] | 0; //@line 21608
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 21613
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21614
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 1796 | 0); //@line 21615
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 21618
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 21619
   HEAP32[$16 >> 2] = $2; //@line 21620
   sp = STACKTOP; //@line 21621
   return;
  }
  ___async_unwind = 0; //@line 21624
  HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 21625
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 21626
  HEAP32[$16 >> 2] = $2; //@line 21627
  sp = STACKTOP; //@line 21628
  return;
 }
 $18 = HEAP32[$2 + 748 >> 2] | 0; //@line 21632
 if (!$18) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 21636
  return;
 }
 $22 = HEAP32[$18 + 8 >> 2] | 0; //@line 21641
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21642
 FUNCTION_TABLE_vi[$22 & 1023]($2 + 736 | 0); //@line 21643
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 21646
  $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 21647
  HEAP32[$23 >> 2] = $2; //@line 21648
  sp = STACKTOP; //@line 21649
  return;
 }
 ___async_unwind = 0; //@line 21652
 HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 21653
 $23 = $ReallocAsyncCtx6 + 4 | 0; //@line 21654
 HEAP32[$23 >> 2] = $2; //@line 21655
 sp = STACKTOP; //@line 21656
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $2 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx4 = 0, $AsyncCtx8 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 10535
 STACKTOP = STACKTOP + 16 | 0; //@line 10536
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10536
 $vararg_buffer1 = sp + 8 | 0; //@line 10537
 $vararg_buffer = sp; //@line 10538
 $2 = $0 + 2496 | 0; //@line 10539
 switch (HEAP32[$2 >> 2] | 0) {
 case 11:
 case 2:
  {
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = -1e3; //@line 10546
   STACKTOP = sp; //@line 10547
   return;
  }
 }
 $5 = HEAP32[$0 + 2904 >> 2] | 0; //@line 10551
 if ($5 & 4 | 0) {
  _mbed_tracef(16, 12021, 12430, $vararg_buffer); //@line 10555
  HEAP32[$1 >> 2] = 0; //@line 10556
  STACKTOP = sp; //@line 10557
  return;
 }
 HEAP32[$2 >> 2] = 3; //@line 10559
 if ($5 & 8 | 0) {
  $AsyncCtx8 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10563
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($0, $1); //@line 10564
  if (___async) {
   HEAP32[$AsyncCtx8 >> 2] = 344; //@line 10567
   sp = STACKTOP; //@line 10568
   STACKTOP = sp; //@line 10569
   return;
  }
  _emscripten_free_async_context($AsyncCtx8 | 0); //@line 10571
  STACKTOP = sp; //@line 10572
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10574
 $10 = __ZN7LoRaMac4joinEb($0, 0) | 0; //@line 10575
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 345; //@line 10578
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 10580
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 10582
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer1; //@line 10584
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 10586
  sp = STACKTOP; //@line 10587
  STACKTOP = sp; //@line 10588
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10590
 HEAP32[$1 >> 2] = $10; //@line 10591
 _mbed_tracef(16, 12021, 12448, $vararg_buffer1); //@line 10592
 $AsyncCtx4 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10593
 __ZN12LoRaWANStack23process_connected_stateEv($0); //@line 10594
 if (___async) {
  HEAP32[$AsyncCtx4 >> 2] = 346; //@line 10597
  sp = STACKTOP; //@line 10598
  STACKTOP = sp; //@line 10599
  return;
 }
 _emscripten_free_async_context($AsyncCtx4 | 0); //@line 10601
 STACKTOP = sp; //@line 10602
 return;
}
function _mbedtls_cipher_cmac_update__async_cb_265($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17982
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17984
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17986
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17988
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17990
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17992
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17994
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17996
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17998
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18000
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18002
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18004
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 18007
  $42 = ___async_retval; //@line 18008
  HEAP32[$42 >> 2] = $$0; //@line 18009
  return;
 }
 $24 = $2 + 1 | 0; //@line 18012
 if ($24 >>> 0 < $4 >>> 0) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 18015
  $22 = _mbedtls_cipher_update($8, $10, 0, $10, $12) | 0; //@line 18016
  if (!___async) {
   HEAP32[___async_retval >> 2] = $22; //@line 18020
   ___async_unwind = 0; //@line 18021
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 597; //@line 18023
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $24; //@line 18025
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 18027
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 18029
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 18031
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 18033
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 18035
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 18037
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 18039
  HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 18041
  HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 18043
  sp = STACKTOP; //@line 18044
  return;
 }
 if (!$14) {
  $$0 = 0; //@line 18049
  $42 = ___async_retval; //@line 18050
  HEAP32[$42 >> 2] = $$0; //@line 18051
  return;
 }
 _memcpy((HEAP32[$18 >> 2] | 0) + ($20 + 16) | 0, $16 | 0, $14 | 0) | 0; //@line 18056
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + $14; //@line 18059
 $$0 = 0; //@line 18060
 $42 = ___async_retval; //@line 18061
 HEAP32[$42 >> 2] = $$0; //@line 18062
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_329($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23138
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23140
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23142
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23144
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23146
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23148
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23150
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23152
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23154
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23156
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23158
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23160
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23162
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23164
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23166
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23168
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23170
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(76) | 0; //@line 23171
 _mbedtls_platform_zeroize($32, 16); //@line 23172
 if (!___async) {
  ___async_unwind = 0; //@line 23175
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 601; //@line 23177
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $32; //@line 23179
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $2; //@line 23181
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $4; //@line 23183
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $6; //@line 23185
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $8; //@line 23187
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $10; //@line 23189
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $12; //@line 23191
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $14; //@line 23193
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $16; //@line 23195
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $18; //@line 23197
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $20; //@line 23199
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $30; //@line 23201
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $22; //@line 23203
 HEAP32[$ReallocAsyncCtx6 + 56 >> 2] = $24; //@line 23205
 HEAP32[$ReallocAsyncCtx6 + 60 >> 2] = $26; //@line 23207
 HEAP32[$ReallocAsyncCtx6 + 64 >> 2] = $28; //@line 23209
 HEAP32[$ReallocAsyncCtx6 + 68 >> 2] = $30; //@line 23211
 HEAP32[$ReallocAsyncCtx6 + 72 >> 2] = $32; //@line 23213
 sp = STACKTOP; //@line 23214
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_271($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18577
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18581
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18583
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18585
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18587
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18588
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 18592
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 18593
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 18594
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 305; //@line 18597
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 18598
   HEAP32[$14 >> 2] = $4; //@line 18599
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 18600
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 18601
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 18602
   HEAP32[$16 >> 2] = $8; //@line 18603
   sp = STACKTOP; //@line 18604
   return;
  }
  ___async_unwind = 0; //@line 18607
  HEAP32[$ReallocAsyncCtx4 >> 2] = 305; //@line 18608
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 18609
  HEAP32[$14 >> 2] = $4; //@line 18610
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 18611
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 18612
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 18613
  HEAP32[$16 >> 2] = $8; //@line 18614
  sp = STACKTOP; //@line 18615
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 18618
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 18622
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 18626
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 18627
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 18628
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 18631
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 18632
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 18633
  sp = STACKTOP; //@line 18634
  return;
 }
 ___async_unwind = 0; //@line 18637
 HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 18638
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 18639
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 18640
 sp = STACKTOP; //@line 18641
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_165($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30904
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30908
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30910
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30912
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30914
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30915
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 30919
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 30920
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 30921
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 30924
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 30925
   HEAP32[$14 >> 2] = $4; //@line 30926
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 30927
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 30928
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 30929
   HEAP32[$16 >> 2] = $8; //@line 30930
   sp = STACKTOP; //@line 30931
   return;
  }
  ___async_unwind = 0; //@line 30934
  HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 30935
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 30936
  HEAP32[$14 >> 2] = $4; //@line 30937
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 30938
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 30939
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 30940
  HEAP32[$16 >> 2] = $8; //@line 30941
  sp = STACKTOP; //@line 30942
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 30945
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 30949
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 30953
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30954
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 30955
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 30958
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 30959
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 30960
  sp = STACKTOP; //@line 30961
  return;
 }
 ___async_unwind = 0; //@line 30964
 HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 30965
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 30966
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 30967
 sp = STACKTOP; //@line 30968
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_314($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22040
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22044
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22046
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22048
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22050
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22051
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 22055
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 22056
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 22057
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 331; //@line 22060
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 22061
   HEAP32[$14 >> 2] = $4; //@line 22062
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 22063
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 22064
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 22065
   HEAP32[$16 >> 2] = $8; //@line 22066
   sp = STACKTOP; //@line 22067
   return;
  }
  ___async_unwind = 0; //@line 22070
  HEAP32[$ReallocAsyncCtx4 >> 2] = 331; //@line 22071
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 22072
  HEAP32[$14 >> 2] = $4; //@line 22073
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 22074
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 22075
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 22076
  HEAP32[$16 >> 2] = $8; //@line 22077
  sp = STACKTOP; //@line 22078
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 22081
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 22085
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 22089
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22090
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 22091
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 22094
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 22095
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 22096
  sp = STACKTOP; //@line 22097
  return;
 }
 ___async_unwind = 0; //@line 22100
 HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 22101
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 22102
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 22103
 sp = STACKTOP; //@line 22104
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_111($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27406
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27410
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27412
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27414
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27416
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27418
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27419
 if (!$13) {
  HEAP32[$6 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv($4) | 0; //@line 27424
  HEAP8[$6 + 1936 >> 0] = 1; //@line 27426
  HEAP8[$8 >> 0] = 1; //@line 27427
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 27428
  __ZN7LoRaPHY25setup_public_network_modeEb($10, 1); //@line 27429
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 473; //@line 27432
   sp = STACKTOP; //@line 27433
   return;
  }
  ___async_unwind = 0; //@line 27436
  HEAP32[$ReallocAsyncCtx10 >> 2] = 473; //@line 27437
  sp = STACKTOP; //@line 27438
  return;
 } else {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 27442
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 27443
  FUNCTION_TABLE_vi[$16 & 1023]($12); //@line 27444
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 472; //@line 27447
   $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 27448
   HEAP32[$17 >> 2] = $4; //@line 27449
   $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 27450
   HEAP32[$18 >> 2] = $6; //@line 27451
   $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 27452
   HEAP32[$19 >> 2] = $8; //@line 27453
   $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 27454
   HEAP32[$20 >> 2] = $10; //@line 27455
   sp = STACKTOP; //@line 27456
   return;
  }
  ___async_unwind = 0; //@line 27459
  HEAP32[$ReallocAsyncCtx4 >> 2] = 472; //@line 27460
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 27461
  HEAP32[$17 >> 2] = $4; //@line 27462
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 27463
  HEAP32[$18 >> 2] = $6; //@line 27464
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 27465
  HEAP32[$19 >> 2] = $8; //@line 27466
  $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 27467
  HEAP32[$20 >> 2] = $10; //@line 27468
  sp = STACKTOP; //@line 27469
  return;
 }
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 12107
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 12110
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 12113
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 12116
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 12122
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 12131
     $24 = $13 >>> 2; //@line 12132
     $$090 = 0; //@line 12133
     $$094 = $7; //@line 12133
     while (1) {
      $25 = $$094 >>> 1; //@line 12135
      $26 = $$090 + $25 | 0; //@line 12136
      $27 = $26 << 1; //@line 12137
      $28 = $27 + $23 | 0; //@line 12138
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 12141
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 12145
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 12151
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 12159
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 12163
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 12169
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 12174
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 12177
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 12177
      }
     }
     $46 = $27 + $24 | 0; //@line 12180
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 12183
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 12187
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 12199
     } else {
      $$4 = 0; //@line 12201
     }
    } else {
     $$4 = 0; //@line 12204
    }
   } else {
    $$4 = 0; //@line 12207
   }
  } else {
   $$4 = 0; //@line 12210
  }
 } while (0);
 return $$4 | 0; //@line 12213
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_177($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31661
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31665
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31667
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31669
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31671
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31672
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 31676
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 31677
  FUNCTION_TABLE_vi[$13 & 1023]($6); //@line 31678
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 31681
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 31682
   HEAP32[$14 >> 2] = $4; //@line 31683
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 31684
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 31685
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 31686
   HEAP32[$16 >> 2] = $8; //@line 31687
   sp = STACKTOP; //@line 31688
   return;
  }
  ___async_unwind = 0; //@line 31691
  HEAP32[$ReallocAsyncCtx4 >> 2] = 228; //@line 31692
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 31693
  HEAP32[$14 >> 2] = $4; //@line 31694
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 31695
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 31696
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 31697
  HEAP32[$16 >> 2] = $8; //@line 31698
  sp = STACKTOP; //@line 31699
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 31702
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 31706
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 31710
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31711
 FUNCTION_TABLE_vi[$20 & 1023]($8); //@line 31712
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 31715
  $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 31716
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 31717
  sp = STACKTOP; //@line 31718
  return;
 }
 ___async_unwind = 0; //@line 31721
 HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 31722
 $21 = $ReallocAsyncCtx5 + 4 | 0; //@line 31723
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 31724
 sp = STACKTOP; //@line 31725
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_99($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26720
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26724
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26726
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26728
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26729
 if ($8 | 0) {
  $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 26733
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 26734
  FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 26735
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 238; //@line 26738
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 26739
   HEAP32[$12 >> 2] = $AsyncRetVal; //@line 26740
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 26741
   HEAP32[$13 >> 2] = $4; //@line 26742
   $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 26743
   HEAP32[$14 >> 2] = $6; //@line 26744
   sp = STACKTOP; //@line 26745
   return;
  }
  ___async_unwind = 0; //@line 26748
  HEAP32[$ReallocAsyncCtx2 >> 2] = 238; //@line 26749
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 26750
  HEAP32[$12 >> 2] = $AsyncRetVal; //@line 26751
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 26752
  HEAP32[$13 >> 2] = $4; //@line 26753
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 26754
  HEAP32[$14 >> 2] = $6; //@line 26755
  sp = STACKTOP; //@line 26756
  return;
 }
 if ($AsyncRetVal | 0) {
  HEAP32[$6 >> 2] = 2; //@line 26761
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 26764
 _mbed_assert_internal(11914, 11923, 778); //@line 26765
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 239; //@line 26768
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 26769
  HEAP32[$16 >> 2] = $4; //@line 26770
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 26771
  HEAP32[$17 >> 2] = $6; //@line 26772
  sp = STACKTOP; //@line 26773
  return;
 }
 ___async_unwind = 0; //@line 26776
 HEAP32[$ReallocAsyncCtx6 >> 2] = 239; //@line 26777
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 26778
 HEAP32[$16 >> 2] = $4; //@line 26779
 $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 26780
 HEAP32[$17 >> 2] = $6; //@line 26781
 sp = STACKTOP; //@line 26782
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_69($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22453
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22455
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22457
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22459
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22461
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 22464
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 22465
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 22466
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 507; //@line 22469
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 22470
   HEAP32[$11 >> 2] = $2; //@line 22471
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 22472
   HEAP32[$12 >> 2] = $9; //@line 22473
   $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 22474
   HEAP32[$13 >> 2] = $6; //@line 22475
   $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 22476
   HEAP32[$14 >> 2] = $4; //@line 22477
   sp = STACKTOP; //@line 22478
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 22482
  ___async_unwind = 0; //@line 22483
  HEAP32[$ReallocAsyncCtx2 >> 2] = 507; //@line 22484
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 22485
  HEAP32[$11 >> 2] = $2; //@line 22486
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 22487
  HEAP32[$12 >> 2] = $9; //@line 22488
  $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 22489
  HEAP32[$13 >> 2] = $6; //@line 22490
  $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 22491
  HEAP32[$14 >> 2] = $4; //@line 22492
  sp = STACKTOP; //@line 22493
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22496
  _mbedtls_cipher_free($4); //@line 22497
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 22500
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 22501
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 22502
   sp = STACKTOP; //@line 22503
   return;
  }
  ___async_unwind = 0; //@line 22506
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 22507
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 22508
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 22509
  sp = STACKTOP; //@line 22510
  return;
 }
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25627
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25631
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25633
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25635
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25637
 $12 = (HEAP8[$0 + 4 >> 0] | 0) + 1 << 24 >> 24; //@line 25639
 if ($AsyncRetVal | 0) {
  $30 = $AsyncRetVal; //@line 25641
  $29 = ___async_retval; //@line 25642
  HEAP32[$29 >> 2] = $30; //@line 25643
  return;
 }
 if (($12 & 255) >= (HEAPU8[$4 >> 0] | 0)) {
  $30 = 0; //@line 25649
  $29 = ___async_retval; //@line 25650
  HEAP32[$29 >> 2] = $30; //@line 25651
  return;
 }
 $13 = $12 & 255; //@line 25654
 $14 = HEAP32[$6 >> 2] | 0; //@line 25655
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 25658
 $18 = HEAP32[$8 >> 2] | 0; //@line 25659
 $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 25662
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 25663
 $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 25664
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 483; //@line 25667
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 25668
  HEAP8[$23 >> 0] = $12; //@line 25669
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 25670
  HEAP32[$24 >> 2] = $4; //@line 25671
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 25672
  HEAP32[$25 >> 2] = $6; //@line 25673
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 25674
  HEAP32[$26 >> 2] = $8; //@line 25675
  sp = STACKTOP; //@line 25676
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 25680
 ___async_unwind = 0; //@line 25681
 HEAP32[$ReallocAsyncCtx >> 2] = 483; //@line 25682
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 25683
 HEAP8[$23 >> 0] = $12; //@line 25684
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 25685
 HEAP32[$24 >> 2] = $4; //@line 25686
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 25687
 HEAP32[$25 >> 2] = $6; //@line 25688
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 25689
 HEAP32[$26 >> 2] = $8; //@line 25690
 sp = STACKTOP; //@line 25691
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21282
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21284
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21286
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21288
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21290
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21292
 $11 = HEAP32[$2 >> 2] | 0; //@line 21293
 if ($11 | 0) {
  $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 21297
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 21298
  FUNCTION_TABLE_vii[$14 & 15]($6, $8); //@line 21299
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 21302
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 21303
   HEAP32[$15 >> 2] = $2; //@line 21304
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 21305
   HEAP32[$16 >> 2] = $4; //@line 21306
   $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 21307
   HEAP32[$17 >> 2] = $10; //@line 21308
   $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 21309
   HEAP32[$18 >> 2] = $8; //@line 21310
   sp = STACKTOP; //@line 21311
   return;
  }
  ___async_unwind = 0; //@line 21314
  HEAP32[$ReallocAsyncCtx2 >> 2] = 53; //@line 21315
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 21316
  HEAP32[$15 >> 2] = $2; //@line 21317
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 21318
  HEAP32[$16 >> 2] = $4; //@line 21319
  $17 = $ReallocAsyncCtx2 + 12 | 0; //@line 21320
  HEAP32[$17 >> 2] = $10; //@line 21321
  $18 = $ReallocAsyncCtx2 + 16 | 0; //@line 21322
  HEAP32[$18 >> 2] = $8; //@line 21323
  sp = STACKTOP; //@line 21324
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 21327
 __ZN4mbed6Ticker5setupEy($10, 2e5, 0); //@line 21328
 $19 = HEAP32[$2 >> 2] | 0; //@line 21329
 if (!$19) {
  return;
 }
 $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 21335
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 21336
 FUNCTION_TABLE_vi[$22 & 1023]($8); //@line 21337
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 21340
  sp = STACKTOP; //@line 21341
  return;
 }
 ___async_unwind = 0; //@line 21344
 HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 21345
 sp = STACKTOP; //@line 21346
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16335
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 16340
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 16345
  } else {
   $20 = $0 & 255; //@line 16347
   $21 = $0 & 255; //@line 16348
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 16354
   } else {
    $26 = $1 + 20 | 0; //@line 16356
    $27 = HEAP32[$26 >> 2] | 0; //@line 16357
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 16363
     HEAP8[$27 >> 0] = $20; //@line 16364
     $34 = $21; //@line 16365
    } else {
     label = 12; //@line 16367
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16372
     $32 = ___overflow($1, $0) | 0; //@line 16373
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 718; //@line 16376
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 16378
      sp = STACKTOP; //@line 16379
      return 0; //@line 16380
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 16382
      $34 = $32; //@line 16383
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 16388
   $$0 = $34; //@line 16389
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 16394
   $8 = $0 & 255; //@line 16395
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 16401
    $14 = HEAP32[$13 >> 2] | 0; //@line 16402
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 16408
     HEAP8[$14 >> 0] = $7; //@line 16409
     $$0 = $8; //@line 16410
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16414
   $19 = ___overflow($1, $0) | 0; //@line 16415
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 717; //@line 16418
    sp = STACKTOP; //@line 16419
    return 0; //@line 16420
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 16422
    $$0 = $19; //@line 16423
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 16428
}
function __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$037$lcssa = 0, $$03739 = 0, $$038 = 0, $$1 = 0, $10 = 0, $13 = 0, $14 = 0, $20 = 0, $26 = 0, $33 = 0, $39 = 0, $6 = 0, $8 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$038 = -1002; //@line 17140
  return $$038 | 0; //@line 17141
 }
 $6 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17144
 $8 = __ZN7LoRaPHY16get_channel_maskEb(HEAP32[$0 >> 2] | 0, 0) | 0; //@line 17146
 if (!($6 << 24 >> 24)) {
  $$037$lcssa = 0; //@line 17149
 } else {
  $10 = $1 + 4 | 0; //@line 17151
  $wide$trip$count = $6 & 255; //@line 17152
  $$03739 = 0; //@line 17153
  $indvars$iv = 0; //@line 17153
  while (1) {
   if (__ZN7LoRaPHY13mask_bit_testEPKtj(HEAP32[$0 >> 2] | 0, $8, $indvars$iv) | 0) {
    $13 = HEAP32[$10 >> 2] | 0; //@line 17158
    $14 = $$03739 & 255; //@line 17159
    HEAP8[$13 + ($14 << 4) >> 0] = $indvars$iv; //@line 17162
    HEAP32[$13 + ($14 << 4) + 4 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) >> 2]; //@line 17166
    $20 = $2 + ($indvars$iv * 12 | 0) + 8 | 0; //@line 17167
    HEAP8[$13 + ($14 << 4) + 12 >> 0] = HEAP8[$20 >> 0] | 0; //@line 17170
    $26 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 17174
    HEAP8[$26 >> 0] = HEAP8[$26 >> 0] & -16 | HEAP8[$20 >> 0] & 15; //@line 17178
    $33 = (HEAP32[$10 >> 2] | 0) + ($14 << 4) + 12 | 0; //@line 17182
    HEAP8[$33 >> 0] = HEAP8[$33 >> 0] & 15 | HEAP8[$20 >> 0] & -16; //@line 17186
    $39 = HEAP32[$10 >> 2] | 0; //@line 17189
    HEAP8[$39 + ($14 << 4) + 13 >> 0] = HEAP8[$2 + ($indvars$iv * 12 | 0) + 9 >> 0] | 0; //@line 17191
    HEAP32[$39 + ($14 << 4) + 8 >> 2] = HEAP32[$2 + ($indvars$iv * 12 | 0) + 4 >> 2]; //@line 17195
    $$1 = $$03739 + 1 << 24 >> 24; //@line 17197
   } else {
    $$1 = $$03739; //@line 17199
   }
   $indvars$iv = $indvars$iv + 1 | 0; //@line 17201
   if (($indvars$iv | 0) == ($wide$trip$count | 0)) {
    $$037$lcssa = $$1; //@line 17204
    break;
   } else {
    $$03739 = $$1; //@line 17207
   }
  }
 }
 HEAP8[$1 >> 0] = $$037$lcssa; //@line 17211
 $$038 = 0; //@line 17212
 return $$038 | 0; //@line 17213
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_157($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30442
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30444
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30446
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30448
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30450
 if (!$AsyncRetVal) {
  $9 = $2 + 16 | 0; //@line 30453
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 30454
  $10 = _mbedtls_cipher_cmac_finish($4, $9) | 0; //@line 30455
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 30458
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 30459
   HEAP32[$11 >> 2] = $2; //@line 30460
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 30461
   HEAP32[$12 >> 2] = $9; //@line 30462
   $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 30463
   HEAP32[$13 >> 2] = $6; //@line 30464
   $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 30465
   HEAP32[$14 >> 2] = $4; //@line 30466
   sp = STACKTOP; //@line 30467
   return;
  }
  HEAP32[___async_retval >> 2] = $10; //@line 30471
  ___async_unwind = 0; //@line 30472
  HEAP32[$ReallocAsyncCtx2 >> 2] = 500; //@line 30473
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 30474
  HEAP32[$11 >> 2] = $2; //@line 30475
  $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 30476
  HEAP32[$12 >> 2] = $9; //@line 30477
  $13 = $ReallocAsyncCtx2 + 12 | 0; //@line 30478
  HEAP32[$13 >> 2] = $6; //@line 30479
  $14 = $ReallocAsyncCtx2 + 16 | 0; //@line 30480
  HEAP32[$14 >> 2] = $4; //@line 30481
  sp = STACKTOP; //@line 30482
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30485
  _mbedtls_cipher_free($4); //@line 30486
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 501; //@line 30489
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 30490
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 30491
   sp = STACKTOP; //@line 30492
   return;
  }
  ___async_unwind = 0; //@line 30495
  HEAP32[$ReallocAsyncCtx6 >> 2] = 501; //@line 30496
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 30497
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 30498
  sp = STACKTOP; //@line 30499
  return;
 }
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11772
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 11777
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 11782
  } else {
   $20 = $0 & 255; //@line 11784
   $21 = $0 & 255; //@line 11785
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 11791
   } else {
    $26 = $1 + 20 | 0; //@line 11793
    $27 = HEAP32[$26 >> 2] | 0; //@line 11794
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 11800
     HEAP8[$27 >> 0] = $20; //@line 11801
     $34 = $21; //@line 11802
    } else {
     label = 12; //@line 11804
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11809
     $32 = ___overflow($1, $0) | 0; //@line 11810
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 702; //@line 11813
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11815
      sp = STACKTOP; //@line 11816
      return 0; //@line 11817
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 11819
      $34 = $32; //@line 11820
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 11825
   $$0 = $34; //@line 11826
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 11831
   $8 = $0 & 255; //@line 11832
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 11838
    $14 = HEAP32[$13 >> 2] | 0; //@line 11839
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 11845
     HEAP8[$14 >> 0] = $7; //@line 11846
     $$0 = $8; //@line 11847
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11851
   $19 = ___overflow($1, $0) | 0; //@line 11852
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 701; //@line 11855
    sp = STACKTOP; //@line 11856
    return 0; //@line 11857
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11859
    $$0 = $19; //@line 11860
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 11865
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12492
 $1 = $0 + 20 | 0; //@line 12493
 $3 = $0 + 28 | 0; //@line 12495
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 12501
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 12502
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 12503
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 708; //@line 12506
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12508
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 12510
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 12512
    sp = STACKTOP; //@line 12513
    return 0; //@line 12514
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12516
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 12520
     break;
    } else {
     label = 5; //@line 12523
     break;
    }
   }
  } else {
   label = 5; //@line 12528
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 12532
  $14 = HEAP32[$13 >> 2] | 0; //@line 12533
  $15 = $0 + 8 | 0; //@line 12534
  $16 = HEAP32[$15 >> 2] | 0; //@line 12535
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 12543
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12544
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 12545
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 709; //@line 12548
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12550
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 12552
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 12554
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 12556
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 12558
     sp = STACKTOP; //@line 12559
     return 0; //@line 12560
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12562
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 12568
  HEAP32[$3 >> 2] = 0; //@line 12569
  HEAP32[$1 >> 2] = 0; //@line 12570
  HEAP32[$15 >> 2] = 0; //@line 12571
  HEAP32[$13 >> 2] = 0; //@line 12572
  $$0 = 0; //@line 12573
 }
 return $$0 | 0; //@line 12575
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_387($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $30 = 0, $33 = 0, $36 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27698
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27700
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27704
 $8 = $0 + 16 | 0; //@line 27706
 $10 = HEAP32[$8 >> 2] | 0; //@line 27708
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 27711
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 27713
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 27715
 $19 = HEAP32[$0 + 32 >> 2] | 0; //@line 27717
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 27719
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 27720
 $20 = HEAP32[$2 >> 2] | 0; //@line 27721
 if ($20 | 0) {
  $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 27725
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27726
  FUNCTION_TABLE_vi[$23 & 1023]($17); //@line 27727
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 27730
   $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 27731
   HEAP32[$24 >> 2] = $15; //@line 27732
   $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 27733
   HEAP32[$25 >> 2] = $19; //@line 27734
   sp = STACKTOP; //@line 27735
   return;
  }
  ___async_unwind = 0; //@line 27738
  HEAP32[$ReallocAsyncCtx3 >> 2] = 88; //@line 27739
  $24 = $ReallocAsyncCtx3 + 4 | 0; //@line 27740
  HEAP32[$24 >> 2] = $15; //@line 27741
  $25 = $ReallocAsyncCtx3 + 8 | 0; //@line 27742
  HEAP32[$25 >> 2] = $19; //@line 27743
  sp = STACKTOP; //@line 27744
  return;
 }
 if (!(HEAP8[$15 + 770 >> 0] | 0)) {
  HEAP8[$19 >> 0] = 0; //@line 27751
 }
 $30 = HEAP32[$15 + 788 >> 2] | 0; //@line 27754
 if (!$30) {
  return;
 }
 $33 = HEAP32[$30 + 60 >> 2] | 0; //@line 27760
 if (!$33) {
  return;
 }
 $36 = HEAP32[$33 >> 2] | 0; //@line 27766
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 27767
 FUNCTION_TABLE_vi[$36 & 1023]($30 + 48 | 0); //@line 27768
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27771
  sp = STACKTOP; //@line 27772
  return;
 }
 ___async_unwind = 0; //@line 27775
 HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27776
 sp = STACKTOP; //@line 27777
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13362
 STACKTOP = STACKTOP + 16 | 0; //@line 13363
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13363
 $2 = sp; //@line 13364
 $3 = $0 + 476 | 0; //@line 13365
 $4 = $1 + 12 | 0; //@line 13366
 $5 = HEAP32[$4 >> 2] | 0; //@line 13367
 do {
  if (!$5) {
   $13 = 0; //@line 13371
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 13374
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 13375
   FUNCTION_TABLE_vii[$8 & 15]($2, $1); //@line 13376
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 397; //@line 13379
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 13381
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13383
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 13385
    sp = STACKTOP; //@line 13386
    STACKTOP = sp; //@line 13387
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13389
    $13 = HEAP32[$4 >> 2] | 0; //@line 13391
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 13396
 HEAP32[$12 >> 2] = $13; //@line 13397
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13398
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($3, $2); //@line 13399
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 398; //@line 13402
  HEAP32[$AsyncCtx6 + 4 >> 2] = $12; //@line 13404
  HEAP32[$AsyncCtx6 + 8 >> 2] = $2; //@line 13406
  sp = STACKTOP; //@line 13407
  STACKTOP = sp; //@line 13408
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 13410
 $16 = HEAP32[$12 >> 2] | 0; //@line 13411
 if (!$16) {
  STACKTOP = sp; //@line 13414
  return;
 }
 $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 13417
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13418
 FUNCTION_TABLE_vi[$19 & 1023]($2); //@line 13419
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 399; //@line 13422
  sp = STACKTOP; //@line 13423
  STACKTOP = sp; //@line 13424
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13426
 STACKTOP = sp; //@line 13427
 return;
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $vararg_buffer3 = 0, sp = 0;
 sp = STACKTOP; //@line 11160
 STACKTOP = STACKTOP + 32 | 0; //@line 11161
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11161
 $vararg_buffer3 = sp + 16 | 0; //@line 11162
 $2 = sp + 24 | 0; //@line 11165
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 11170
  STACKTOP = sp; //@line 11171
  return $$1 | 0; //@line 11171
 }
 $6 = HEAP8[$1 >> 0] | 0; //@line 11173
 if (($6 & 255) >= 2) {
  $$1 = -1003; //@line 11176
  STACKTOP = sp; //@line 11177
  return $$1 | 0; //@line 11177
 }
 $7 = $6 << 24 >> 24 == 0; //@line 11179
 $8 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, $1, $7) | 0; //@line 11180
 if ($8 | 0) {
  $$1 = $8; //@line 11183
  STACKTOP = sp; //@line 11184
  return $$1 | 0; //@line 11184
 }
 if ($7) {
  _mbed_tracef(16, 12021, 12521, sp); //@line 11187
  HEAP32[$0 + 2556 >> 2] = 0; //@line 11189
  HEAP32[$0 + 2552 >> 2] = 0; //@line 11191
  $12 = $0 + 2904 | 0; //@line 11192
  HEAP32[$12 >> 2] = HEAP32[$12 >> 2] | 8; //@line 11195
 } else {
  _mbed_tracef(16, 12021, 12467, sp + 8 | 0); //@line 11197
  $18 = HEAP32[$0 + 2556 >> 2] | 0; //@line 11201
  HEAP32[$vararg_buffer3 >> 2] = HEAP32[$0 + 2552 >> 2]; //@line 11202
  HEAP32[$vararg_buffer3 + 4 >> 2] = $18; //@line 11204
  _mbed_tracef(16, 12021, 12482, $vararg_buffer3); //@line 11205
  $19 = $0 + 2904 | 0; //@line 11206
  HEAP32[$19 >> 2] = HEAP32[$19 >> 2] & -9; //@line 11209
 }
 HEAP32[$2 >> 2] = 0; //@line 11211
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11212
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $2); //@line 11213
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 363; //@line 11216
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11218
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 11220
  sp = STACKTOP; //@line 11221
  STACKTOP = sp; //@line 11222
  return 0; //@line 11222
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11224
 $$1 = HEAP32[$2 >> 2] | 0; //@line 11226
 STACKTOP = sp; //@line 11227
 return $$1 | 0; //@line 11227
}
function _mbedtls_cipher_cmac_finish__async_cb_330($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23222
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23224
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23226
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23228
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23230
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23232
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23234
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23236
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23238
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23240
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23242
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23244
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 23246
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 23248
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 23250
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 23252
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 23254
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(68) | 0; //@line 23255
 _mbedtls_platform_zeroize($14, 16); //@line 23256
 if (!___async) {
  ___async_unwind = 0; //@line 23259
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 600; //@line 23261
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 23263
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 23265
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 23267
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 23269
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 23271
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 23273
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 23275
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 23277
 HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 23279
 HEAP32[$ReallocAsyncCtx7 + 40 >> 2] = $20; //@line 23281
 HEAP32[$ReallocAsyncCtx7 + 44 >> 2] = $22; //@line 23283
 HEAP32[$ReallocAsyncCtx7 + 48 >> 2] = $24; //@line 23285
 HEAP32[$ReallocAsyncCtx7 + 52 >> 2] = $26; //@line 23287
 HEAP32[$ReallocAsyncCtx7 + 56 >> 2] = $28; //@line 23289
 HEAP32[$ReallocAsyncCtx7 + 60 >> 2] = $30; //@line 23291
 HEAP32[$ReallocAsyncCtx7 + 64 >> 2] = $32; //@line 23293
 sp = STACKTOP; //@line 23294
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $15 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13221
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13225
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13227
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13229
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13231
 if ((HEAP32[$0 + 4 >> 2] | 0) != 1) {
  return;
 }
 if (!(__ZN7LoRaMac10nwk_joinedEv($4) | 0)) {
  HEAP32[$6 >> 2] = 0; //@line 13240
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 13241
  __ZN12LoRaWANStack21process_joining_stateER14lorawan_status($8, $6); //@line 13242
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 219; //@line 13245
   $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 13246
   HEAP32[$15 >> 2] = $6; //@line 13247
   sp = STACKTOP; //@line 13248
   return;
  }
  ___async_unwind = 0; //@line 13251
  HEAP32[$ReallocAsyncCtx3 >> 2] = 219; //@line 13252
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 13253
  HEAP32[$15 >> 2] = $6; //@line 13254
  sp = STACKTOP; //@line 13255
  return;
 }
 __ZN7LoRaMac21post_process_mcps_reqEv($4); //@line 13258
 do {
  if ((HEAP32[(__ZNK7LoRaMac21get_mcps_confirmationEv($4) | 0) >> 2] | 0) == 1) {
   if (__ZN7LoRaMac24continue_sending_processEv($4) | 0) {
    return;
   } else {
    _mbed_tracef(2, 12021, 12026, $10); //@line 13268
    break;
   }
  }
 } while (0);
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 13273
 __ZN12LoRaWANStack26process_status_check_stateEv($8); //@line 13274
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 220; //@line 13277
  $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 13278
  HEAP32[$20 >> 2] = $4; //@line 13279
  $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 13280
  HEAP32[$21 >> 2] = $8; //@line 13281
  sp = STACKTOP; //@line 13282
  return;
 }
 ___async_unwind = 0; //@line 13285
 HEAP32[$ReallocAsyncCtx2 >> 2] = 220; //@line 13286
 $20 = $ReallocAsyncCtx2 + 4 | 0; //@line 13287
 HEAP32[$20 >> 2] = $4; //@line 13288
 $21 = $ReallocAsyncCtx2 + 8 | 0; //@line 13289
 HEAP32[$21 >> 2] = $8; //@line 13290
 sp = STACKTOP; //@line 13291
 return;
}
function __ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $23 = 0, $35 = 0, $4 = 0, $51 = 0, $56 = 0, $58 = 0, $8 = 0, $AsyncRetVal = 0;
 $2 = HEAP16[$0 + 4 >> 1] | 0; //@line 14443
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14445
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14449
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14451
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 14453
 $14 = HEAP8[$0 + 25 >> 0] | 0; //@line 14455
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 14457
 $18 = HEAP32[$0 + 28 >> 2] | 0; //@line 14459
 $AsyncRetVal = HEAP8[___async_retval >> 0] | 0; //@line 14463
 $22 = $AsyncRetVal & 255; //@line 14464
 $23 = $2 & 65535; //@line 14465
 if ($23 >>> 0 > $22 >>> 0) {
  HEAP32[$4 >> 2] = $23; //@line 14468
  HEAP32[$4 + 4 >> 2] = $22; //@line 14470
  _mbed_tracef(8, 12709, 13218, $4); //@line 14471
  HEAP16[$8 + 2372 >> 1] = $23 - $22; //@line 14475
  HEAP16[$8 + 2370 >> 1] = $AsyncRetVal & 255; //@line 14478
  _memcpy($8 + 2115 | 0, $10 | 0, $22 | 0) | 0; //@line 14480
 } else {
  HEAP16[$8 + 2370 >> 1] = $2; //@line 14483
  HEAP16[$8 + 2372 >> 1] = 0; //@line 14485
  if ($2 << 16 >> 16) {
   _memcpy($8 + 2115 | 0, $10 | 0, $23 | 0) | 0; //@line 14489
  }
 }
 $35 = $12 & 255; //@line 14492
 if ($35 & 1 | 0) {
  HEAP32[$8 + 2108 >> 2] = 0; //@line 14497
  HEAP8[$8 + 2112 >> 0] = $14; //@line 14499
  HEAP8[$8 + 2114 >> 0] = 1; //@line 14501
 }
 if ($35 & 2 | 0) {
  HEAP32[$8 + 2108 >> 2] = 1; //@line 14507
  HEAP8[$8 + 2112 >> 0] = $14; //@line 14509
  HEAP8[$8 + 2114 >> 0] = $16; //@line 14511
 }
 if (!($35 & 8)) {
  $58 = HEAP8[$8 + 2112 >> 0] | 0; //@line 14518
 } else {
  HEAP32[$8 + 2108 >> 2] = 3; //@line 14521
  HEAP8[$8 + 2112 >> 0] = $14; //@line 14523
  HEAP8[$8 + 2114 >> 0] = 1; //@line 14525
  $58 = $14; //@line 14526
 }
 $51 = $8 + 2370 | 0; //@line 14528
 $56 = HEAPU16[$8 + 2372 >> 1] | 0; //@line 14533
 HEAP32[$18 >> 2] = HEAPU16[$51 >> 1]; //@line 14535
 HEAP32[$18 + 4 >> 2] = $56; //@line 14537
 HEAP32[$18 + 8 >> 2] = $58 & 255; //@line 14539
 _mbed_tracef(8, 12709, 13273, $18); //@line 14540
 HEAP16[___async_retval >> 1] = HEAP16[$51 >> 1] | 0; //@line 14543
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $17 = 0, $20 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 22486
 $3 = $0 + 4 | 0; //@line 22487
 $4 = HEAP32[$3 >> 2] | 0; //@line 22488
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 22491
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 22492
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 22493
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 550; //@line 22496
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 22498
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 22501
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 22503
  sp = STACKTOP; //@line 22504
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22507
 $11 = HEAP32[$3 >> 2] | 0; //@line 22508
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 28 >> 2] | 0; //@line 22511
 do {
  if ($1) {
   $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22514
   FUNCTION_TABLE_vii[$14 & 15]($11, 0); //@line 22515
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 552; //@line 22518
    HEAP32[$AsyncCtx7 + 4 >> 2] = $3; //@line 22520
    sp = STACKTOP; //@line 22521
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 22524
    break;
   }
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22528
   FUNCTION_TABLE_vii[$14 & 15]($11, $2); //@line 22529
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 551; //@line 22532
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 22534
    sp = STACKTOP; //@line 22535
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 22538
    break;
   }
  }
 } while (0);
 $17 = HEAP32[$3 >> 2] | 0; //@line 22543
 $20 = HEAP32[(HEAP32[$17 >> 2] | 0) + 76 >> 2] | 0; //@line 22546
 $AsyncCtx11 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22547
 FUNCTION_TABLE_vi[$20 & 1023]($17); //@line 22548
 if (___async) {
  HEAP32[$AsyncCtx11 >> 2] = 553; //@line 22551
  sp = STACKTOP; //@line 22552
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 22555
  return;
 }
}
function __ZN12LoRaWANStack26process_status_check_stateEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $16 = 0, $3 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 7583
 switch (HEAP32[$0 + 2496 >> 2] | 0) {
 case 9:
 case 8:
  {
   $3 = $0 + 2904 | 0; //@line 7588
   HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18; //@line 7591
   __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 7592
   __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 7593
   $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7594
   __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 7595
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 240; //@line 7598
    sp = STACKTOP; //@line 7599
    return;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 7602
   return;
  }
 case 5:
  {
   $6 = $0 + 2904 | 0; //@line 7607
   $7 = HEAP32[$6 >> 2] | 0; //@line 7608
   do {
    if ($7 & 17 | 0) {
     HEAP32[$6 >> 2] = $7 & -18; //@line 7614
     __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 7615
     __ZN7LoRaMac16reset_ongoing_txEb($0, 0); //@line 7616
     $11 = $0 + 2910 | 0; //@line 7617
     if (HEAP8[$11 >> 0] | 0) {
      HEAP8[$11 >> 0] = 0; //@line 7621
      break;
     }
     $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7624
     __ZN12LoRaWANStack20mcps_confirm_handlerEv($0); //@line 7625
     if (___async) {
      HEAP32[$AsyncCtx3 >> 2] = 241; //@line 7628
      HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 7630
      HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 7632
      sp = STACKTOP; //@line 7633
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7636
      break;
     }
    }
   } while (0);
   $16 = HEAP32[$6 >> 2] | 0; //@line 7641
   if (!($16 & 2)) {
    return;
   }
   HEAP32[$6 >> 2] = $16 & -3; //@line 7648
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7649
   __ZN12LoRaWANStack23mcps_indication_handlerEv($0); //@line 7650
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 242; //@line 7653
    sp = STACKTOP; //@line 7654
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 7657
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 $14 = $14 | 0;
 var $$ = 0, $$sink = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $40 = 0, label = 0;
 $15 = $8 & 1; //@line 123
 $16 = $10 & 1; //@line 124
 $17 = $11 & 1; //@line 125
 $18 = $13 & 1; //@line 126
 $19 = $14 & 1; //@line 127
 HEAP8[$0 + 689 >> 0] = $1; //@line 130
 switch ($1 | 0) {
 case 0:
  {
   HEAP32[$0 + 704 >> 2] = $2; //@line 134
   HEAP32[$0 + 712 >> 2] = $3; //@line 136
   HEAP32[$0 + 708 >> 2] = $5; //@line 138
   HEAP8[$0 + 718 >> 0] = $15; //@line 140
   HEAP8[$0 + 719 >> 0] = $9; //@line 142
   HEAP8[$0 + 720 >> 0] = $16; //@line 144
   HEAP8[$0 + 721 >> 0] = $18; //@line 146
   HEAP8[$0 + 722 >> 0] = $19; //@line 148
   HEAP16[$0 + 716 >> 1] = $6; //@line 150
   HEAP32[$0 + 728 >> 2] = ~~(1.0 / +($3 >>> 0) * 8.0 * +($7 & 65535) * 1.0e3) >>> 0; //@line 159
   return;
  }
 case 1:
  {
   if ($2 >>> 0 > 2) {
    while (1) {}
   }
   $40 = $2 + 7 | 0; //@line 169
   HEAP32[$0 + 752 >> 2] = $40; //@line 171
   HEAP32[$0 + 756 >> 2] = $3; //@line 173
   HEAP8[$0 + 761 >> 0] = $4; //@line 175
   HEAP16[$0 + 762 >> 1] = $6; //@line 177
   HEAP8[$0 + 764 >> 0] = $15; //@line 179
   HEAP8[$0 + 765 >> 0] = $9; //@line 181
   HEAP8[$0 + 766 >> 0] = $16; //@line 183
   HEAP8[$0 + 767 >> 0] = $17; //@line 185
   HEAP8[$0 + 768 >> 0] = $12; //@line 187
   HEAP8[$0 + 769 >> 0] = $18; //@line 189
   HEAP8[$0 + 770 >> 0] = $19; //@line 191
   HEAP16[$0 + 778 >> 1] = $7; //@line 193
   $$ = $3 >>> 0 > 6 ? $3 : 6; //@line 195
   if (($2 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 203
   } else {
    if (($40 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 209
    } else {
     $$sink = 0; //@line 211
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 215
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 218
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_tx_doneEj__async_cb_95($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26491
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26493
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26495
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26497
 if (!(HEAP8[$2 + 1175 >> 0] | 0)) {
  HEAP32[$2 + 2056 >> 2] = 0; //@line 26503
  HEAP32[$2 + 2092 >> 2] = 4; //@line 26505
  $24 = HEAP8[$2 + 1182 >> 0] | 0; //@line 26507
  HEAP8[$2 + 1183 >> 0] = $24; //@line 26509
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $24, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 26514
  HEAP32[$2 + 1780 >> 2] = $4; //@line 26516
  return;
 }
 $11 = (__ZN18LoRaWANTimeHandler16get_current_timeEv($2) | 0) - $4 | 0; //@line 26520
 $15 = (HEAP32[$2 + 1772 >> 2] | 0) - $11 | 0; //@line 26524
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 26525
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($2, $2 + 1816 | 0, $15); //@line 26526
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 402; //@line 26529
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 26530
  HEAP32[$16 >> 2] = $6; //@line 26531
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 26532
  HEAP32[$17 >> 2] = $2; //@line 26533
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 26534
  HEAP32[$18 >> 2] = $11; //@line 26535
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 26536
  HEAP32[$19 >> 2] = $2; //@line 26537
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 26538
  HEAP32[$20 >> 2] = $4; //@line 26539
  sp = STACKTOP; //@line 26540
  return;
 }
 ___async_unwind = 0; //@line 26543
 HEAP32[$ReallocAsyncCtx3 >> 2] = 402; //@line 26544
 $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 26545
 HEAP32[$16 >> 2] = $6; //@line 26546
 $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 26547
 HEAP32[$17 >> 2] = $2; //@line 26548
 $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 26549
 HEAP32[$18 >> 2] = $11; //@line 26550
 $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 26551
 HEAP32[$19 >> 2] = $2; //@line 26552
 $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 26553
 HEAP32[$20 >> 2] = $4; //@line 26554
 sp = STACKTOP; //@line 26555
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEj__async_cb_94($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26420
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26422
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26424
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26426
 if (!(HEAP8[$2 + 1175 >> 0] | 0)) {
  HEAP32[$2 + 2056 >> 2] = 0; //@line 26432
  HEAP32[$2 + 2092 >> 2] = 4; //@line 26434
  $24 = HEAP8[$2 + 1182 >> 0] | 0; //@line 26436
  HEAP8[$2 + 1183 >> 0] = $24; //@line 26438
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $24, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 26443
  HEAP32[$2 + 1780 >> 2] = $4; //@line 26445
  return;
 }
 $11 = (__ZN18LoRaWANTimeHandler16get_current_timeEv($2) | 0) - $4 | 0; //@line 26449
 $15 = (HEAP32[$2 + 1772 >> 2] | 0) - $11 | 0; //@line 26453
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 26454
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($2, $2 + 1816 | 0, $15); //@line 26455
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 402; //@line 26458
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 26459
  HEAP32[$16 >> 2] = $6; //@line 26460
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 26461
  HEAP32[$17 >> 2] = $2; //@line 26462
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 26463
  HEAP32[$18 >> 2] = $11; //@line 26464
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 26465
  HEAP32[$19 >> 2] = $2; //@line 26466
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 26467
  HEAP32[$20 >> 2] = $4; //@line 26468
  sp = STACKTOP; //@line 26469
  return;
 }
 ___async_unwind = 0; //@line 26472
 HEAP32[$ReallocAsyncCtx3 >> 2] = 402; //@line 26473
 $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 26474
 HEAP32[$16 >> 2] = $6; //@line 26475
 $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 26476
 HEAP32[$17 >> 2] = $2; //@line 26477
 $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 26478
 HEAP32[$18 >> 2] = $11; //@line 26479
 $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 26480
 HEAP32[$19 >> 2] = $2; //@line 26481
 $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 26482
 HEAP32[$20 >> 2] = $4; //@line 26483
 sp = STACKTOP; //@line 26484
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22331
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22335
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22337
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22339
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22341
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22343
 if (!$AsyncRetVal) {
  $14 = HEAP16[$0 + 4 >> 1] & 255; //@line 22347
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 22348
  $15 = _mbedtls_cipher_cmac_update($4, $6, $14) | 0; //@line 22349
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 22352
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 22353
   HEAP32[$16 >> 2] = $8; //@line 22354
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 22355
   HEAP32[$17 >> 2] = $4; //@line 22356
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 22357
   HEAP32[$18 >> 2] = $10; //@line 22358
   sp = STACKTOP; //@line 22359
   return;
  }
  HEAP32[___async_retval >> 2] = $15; //@line 22363
  ___async_unwind = 0; //@line 22364
  HEAP32[$ReallocAsyncCtx3 >> 2] = 506; //@line 22365
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 22366
  HEAP32[$16 >> 2] = $8; //@line 22367
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 22368
  HEAP32[$17 >> 2] = $4; //@line 22369
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 22370
  HEAP32[$18 >> 2] = $10; //@line 22371
  sp = STACKTOP; //@line 22372
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22375
  _mbedtls_cipher_free($4); //@line 22376
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 22379
   $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 22380
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 22381
   sp = STACKTOP; //@line 22382
   return;
  }
  ___async_unwind = 0; //@line 22385
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 22386
  $20 = $ReallocAsyncCtx5 + 4 | 0; //@line 22387
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 22388
  sp = STACKTOP; //@line 22389
  return;
 }
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_158($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30507
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30509
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30511
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30513
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30515
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30517
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30519
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 30522
  $13 = _mbedtls_cipher_cmac_update($2, $4, $6) | 0; //@line 30523
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 499; //@line 30526
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 30527
   HEAP32[$14 >> 2] = $8; //@line 30528
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 30529
   HEAP32[$15 >> 2] = $2; //@line 30530
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 30531
   HEAP32[$16 >> 2] = $10; //@line 30532
   sp = STACKTOP; //@line 30533
   return;
  }
  HEAP32[___async_retval >> 2] = $13; //@line 30537
  ___async_unwind = 0; //@line 30538
  HEAP32[$ReallocAsyncCtx3 >> 2] = 499; //@line 30539
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 30540
  HEAP32[$14 >> 2] = $8; //@line 30541
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 30542
  HEAP32[$15 >> 2] = $2; //@line 30543
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 30544
  HEAP32[$16 >> 2] = $10; //@line 30545
  sp = STACKTOP; //@line 30546
  return;
 } else {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30549
  _mbedtls_cipher_free($2); //@line 30550
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 501; //@line 30553
   $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 30554
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 30555
   sp = STACKTOP; //@line 30556
   return;
  }
  ___async_unwind = 0; //@line 30559
  HEAP32[$ReallocAsyncCtx6 >> 2] = 501; //@line 30560
  $18 = $ReallocAsyncCtx6 + 4 | 0; //@line 30561
  HEAP32[$18 >> 2] = $AsyncRetVal; //@line 30562
  sp = STACKTOP; //@line 30563
  return;
 }
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $12 = 0, $15 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 1872
 STACKTOP = STACKTOP + 48 | 0; //@line 1873
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1873
 $vararg_buffer12 = sp + 32 | 0; //@line 1874
 $vararg_buffer8 = sp + 24 | 0; //@line 1875
 $vararg_buffer4 = sp + 16 | 0; //@line 1876
 $vararg_buffer = sp; //@line 1877
 $6 = $4 & 255; //@line 1878
 $7 = $5 & 255; //@line 1879
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1880
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1882
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1884
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1886
 _mbed_tracef(16, 11105, 11375, $vararg_buffer); //@line 1887
 $9 = HEAP32[$0 + 752 >> 2] | 0; //@line 1889
 if (($9 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $9; //@line 1892
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1894
  _mbed_tracef(16, 11105, 11416, $vararg_buffer4); //@line 1895
  STACKTOP = sp; //@line 1896
  return;
 }
 $12 = HEAP32[$0 + 756 >> 2] | 0; //@line 1899
 if (($12 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $12; //@line 1902
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1904
  _mbed_tracef(16, 11105, 11463, $vararg_buffer8); //@line 1905
  STACKTOP = sp; //@line 1906
  return;
 }
 $15 = HEAP32[$0 + 692 >> 2] | 0; //@line 1909
 if (($15 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1913
  HEAP8[$0 + 782 >> 0] = $2; //@line 1916
  HEAP8[$0 + 781 >> 0] = -35; //@line 1918
  HEAP8[$0 + 780 >> 0] = -5; //@line 1920
  HEAP8[$0 + 783 >> 0] = 1; //@line 1922
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(2) | 0; //@line 1925
  STACKTOP = sp; //@line 1926
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $15; //@line 1928
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1930
  _mbed_tracef(16, 11105, 11510, $vararg_buffer12); //@line 1931
  STACKTOP = sp; //@line 1932
  return;
 }
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_66($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22040
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22042
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22044
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22046
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22048
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22050
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22052
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22054
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22056
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22058
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22060
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22062
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22064
 $25 = $4 + 1088 | 0; //@line 22065
 HEAP32[$25 >> 2] = 0; //@line 22066
 HEAP32[$25 + 4 >> 2] = 0; //@line 22066
 HEAP32[$25 + 8 >> 2] = 0; //@line 22066
 HEAP32[$25 + 12 >> 2] = 0; //@line 22066
 HEAP8[$4 + 1104 >> 0] = 1; //@line 22068
 HEAP32[$2 >> 2] = 620; //@line 22069
 $27 = $4 + 1112 | 0; //@line 22070
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(52) | 0; //@line 22071
 __ZN4mbed10TimerEventC2Ev($27); //@line 22072
 if (!___async) {
  ___async_unwind = 0; //@line 22075
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 98; //@line 22077
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $27; //@line 22079
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 22081
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 22083
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 22085
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 22087
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 22089
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 22091
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 22093
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 22095
 HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 22097
 HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 22099
 HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 22101
 sp = STACKTOP; //@line 22102
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_65($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21970
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21972
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21974
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21976
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21978
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21980
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21982
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21984
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21986
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21988
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21990
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21992
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21994
 $25 = $4 + 1152 | 0; //@line 21995
 HEAP32[$25 >> 2] = 0; //@line 21996
 HEAP32[$25 + 4 >> 2] = 0; //@line 21996
 HEAP32[$25 + 8 >> 2] = 0; //@line 21996
 HEAP32[$25 + 12 >> 2] = 0; //@line 21996
 HEAP8[$4 + 1168 >> 0] = 1; //@line 21998
 HEAP32[$2 >> 2] = 620; //@line 21999
 $27 = $4 + 1176 | 0; //@line 22000
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(52) | 0; //@line 22001
 __ZN4mbed10TimerEventC2Ev($27); //@line 22002
 if (!___async) {
  ___async_unwind = 0; //@line 22005
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 99; //@line 22007
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $27; //@line 22009
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 22011
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 22013
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 22015
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 22017
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 22019
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 22021
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 22023
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 22025
 HEAP32[$ReallocAsyncCtx2 + 40 >> 2] = $20; //@line 22027
 HEAP32[$ReallocAsyncCtx2 + 44 >> 2] = $22; //@line 22029
 HEAP32[$ReallocAsyncCtx2 + 48 >> 2] = $24; //@line 22031
 sp = STACKTOP; //@line 22032
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_276($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19338
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19340
 $4 = HEAP32[$2 + 44 >> 2] | 0; //@line 19342
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19347
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 19348
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 32 | 0); //@line 19349
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19352
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 19353
   HEAP32[$9 >> 2] = $2; //@line 19354
   sp = STACKTOP; //@line 19355
   return;
  }
  ___async_unwind = 0; //@line 19358
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 19359
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 19360
  HEAP32[$9 >> 2] = $2; //@line 19361
  sp = STACKTOP; //@line 19362
  return;
 }
 $11 = HEAP32[$2 + 28 >> 2] | 0; //@line 19366
 if ($11 | 0) {
  $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 19371
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19372
  FUNCTION_TABLE_vi[$15 & 1023]($2 + 16 | 0); //@line 19373
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19376
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 19377
   HEAP32[$16 >> 2] = $2; //@line 19378
   sp = STACKTOP; //@line 19379
   return;
  }
  ___async_unwind = 0; //@line 19382
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19383
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 19384
  HEAP32[$16 >> 2] = $2; //@line 19385
  sp = STACKTOP; //@line 19386
  return;
 }
 $18 = HEAP32[$2 + 12 >> 2] | 0; //@line 19390
 if (!$18) {
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 19396
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19397
 FUNCTION_TABLE_vi[$21 & 1023]($2); //@line 19398
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19401
  sp = STACKTOP; //@line 19402
  return;
 }
 ___async_unwind = 0; //@line 19405
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19406
 sp = STACKTOP; //@line 19407
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_64($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21900
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21902
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21904
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21906
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21908
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21910
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21912
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21914
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21916
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21918
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21920
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21922
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21924
 $25 = $4 + 1216 | 0; //@line 21925
 HEAP32[$25 >> 2] = 0; //@line 21926
 HEAP32[$25 + 4 >> 2] = 0; //@line 21926
 HEAP32[$25 + 8 >> 2] = 0; //@line 21926
 HEAP32[$25 + 12 >> 2] = 0; //@line 21926
 HEAP8[$4 + 1232 >> 0] = 1; //@line 21928
 HEAP32[$2 >> 2] = 620; //@line 21929
 $27 = $4 + 1240 | 0; //@line 21930
 $ReallocAsyncCtx = _emscripten_realloc_async_context(52) | 0; //@line 21931
 __ZN4mbed10TimerEventC2Ev($27); //@line 21932
 if (!___async) {
  ___async_unwind = 0; //@line 21935
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 100; //@line 21937
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $27; //@line 21939
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 21941
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 21943
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 21945
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 21947
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 21949
 HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 21951
 HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 21953
 HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 21955
 HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 21957
 HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 21959
 HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 21961
 sp = STACKTOP; //@line 21962
 return;
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$09 = 0, $$pre = 0, $$pre11 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $or$cond$i = 0, sp = 0;
 sp = STACKTOP; //@line 15741
 $2 = $0 + 476 | 0; //@line 15742
 $4 = (__ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($2) | 0) & 255; //@line 15744
 $7 = ((__ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($2) | 0) & 255) + $4 | 0; //@line 15747
 $$pre = $0 + 4 | 0; //@line 15751
 $$pre11 = $0 + 1877 | 0; //@line 15752
 do {
  if (HEAP8[$0 + 1936 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15757
   __ZN7LoRaPHY12get_next_ADREbRaS0_Rj($$pre, 0, $$pre11, $0 + 1876 | 0, $0 + 1768 | 0) | 0; //@line 15758
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 448; //@line 15761
    HEAP32[$AsyncCtx + 4 >> 2] = $$pre11; //@line 15763
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 15765
    HEAP32[$AsyncCtx + 12 >> 2] = $$pre; //@line 15767
    HEAP32[$AsyncCtx + 16 >> 2] = $7; //@line 15769
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15771
    HEAP8[$AsyncCtx + 24 >> 0] = $1; //@line 15773
    sp = STACKTOP; //@line 15774
    return 0; //@line 15775
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15777
    break;
   }
  }
 } while (0);
 $20 = $0 + 1173 | 0; //@line 15783
 $23 = __ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0; //@line 15786
 $24 = $23 & 255; //@line 15787
 $25 = $7 & 255; //@line 15788
 if ($25 >>> 0 > $24 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($2); //@line 15791
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($2); //@line 15792
  $$0 = 0; //@line 15793
  $$09 = $23; //@line 15793
 } else {
  $$0 = $25; //@line 15797
  $$09 = $24 - $7 & 255; //@line 15797
 }
 $34 = $$0 + ($1 & 255) | 0; //@line 15804
 $or$cond$i = $34 >>> 0 < 256 & $34 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($$pre, HEAP8[$$pre11 >> 0] | 0, (HEAP8[$20 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 15808
 return ($or$cond$i ? $23 : $$09) | 0; //@line 15810
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_3($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $31 = 0, $33 = 0, $4 = 0, $41 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18572
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18574
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18576
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 18578
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18580
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18582
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18584
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18586
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18588
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18590
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18592
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18594
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18596
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0) {
   HEAP32[$8 + 2076 >> 2] = 4; //@line 18604
   HEAP8[$8 + 2080 >> 0] = 1; //@line 18606
   __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 18607
  }
 } else {
  HEAP32[$4 >> 2] = 1; //@line 18610
 }
 if ($6 << 24 >> 24 == 7) {
  $31 = $8 + 1442 | 0; //@line 18614
  $33 = HEAPU8[$10 >> 0] | 0; //@line 18616
  _memcpy($31 | 0, $12 + $33 | 0, $14 | 0) | 0; //@line 18618
  HEAP32[$8 + 2016 >> 2] = 3; //@line 18620
  HEAP32[$4 >> 2] = 0; //@line 18621
  HEAP32[$16 >> 2] = $31; //@line 18622
  HEAP16[$18 >> 1] = $14 - $33; //@line 18625
 }
 if (!(HEAP8[$20 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 18633
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($24, $8 + 1856 | 0); //@line 18634
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 396; //@line 18637
  $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 18638
  HEAP32[$41 >> 2] = $22; //@line 18639
  sp = STACKTOP; //@line 18640
  return;
 }
 ___async_unwind = 0; //@line 18643
 HEAP32[$ReallocAsyncCtx4 >> 2] = 396; //@line 18644
 $41 = $ReallocAsyncCtx4 + 4 | 0; //@line 18645
 HEAP32[$41 >> 2] = $22; //@line 18646
 sp = STACKTOP; //@line 18647
 return;
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb_105($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26957
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26959
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26961
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26963
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26965
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26967
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26969
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 26971
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$10 >> 2] = HEAP32[$8 >> 2]; //@line 26977
  _mbed_tracef(16, 12709, 12771, $10); //@line 26978
  return;
 }
 $17 = (HEAP8[$2 >> 0] | 0) != 0; //@line 26982
 $19 = HEAP32[$4 + 1888 >> 2] | 0; //@line 26984
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 26985
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $17, $19); //@line 26986
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 407; //@line 26989
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 26990
  HEAP32[$20 >> 2] = $14; //@line 26991
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 26992
  HEAP32[$21 >> 2] = $4; //@line 26993
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 26994
  HEAP32[$22 >> 2] = $8; //@line 26995
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 26996
  HEAP32[$23 >> 2] = $10; //@line 26997
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 26998
  HEAP32[$24 >> 2] = $12; //@line 26999
  sp = STACKTOP; //@line 27000
  return;
 }
 ___async_unwind = 0; //@line 27003
 HEAP32[$ReallocAsyncCtx >> 2] = 407; //@line 27004
 $20 = $ReallocAsyncCtx + 4 | 0; //@line 27005
 HEAP32[$20 >> 2] = $14; //@line 27006
 $21 = $ReallocAsyncCtx + 8 | 0; //@line 27007
 HEAP32[$21 >> 2] = $4; //@line 27008
 $22 = $ReallocAsyncCtx + 12 | 0; //@line 27009
 HEAP32[$22 >> 2] = $8; //@line 27010
 $23 = $ReallocAsyncCtx + 16 | 0; //@line 27011
 HEAP32[$23 >> 2] = $10; //@line 27012
 $24 = $ReallocAsyncCtx + 20 | 0; //@line 27013
 HEAP32[$24 >> 2] = $12; //@line 27014
 sp = STACKTOP; //@line 27015
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27173
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27179
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27181
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 27183
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 27184
 __ZN4mbed6Ticker6detachEv($6); //@line 27185
 $10 = HEAP32[$9 >> 2] | 0; //@line 27186
 if (!$10) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 27189
  _mbed_assert_internal(14839, 14844, 528); //@line 27190
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 27193
   $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 27194
   HEAP32[$12 >> 2] = $9; //@line 27195
   $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 27196
   HEAP32[$13 >> 2] = $8; //@line 27197
   sp = STACKTOP; //@line 27198
   return;
  }
  ___async_unwind = 0; //@line 27201
  HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 27202
  $12 = $ReallocAsyncCtx4 + 4 | 0; //@line 27203
  HEAP32[$12 >> 2] = $9; //@line 27204
  $13 = $ReallocAsyncCtx4 + 8 | 0; //@line 27205
  HEAP32[$13 >> 2] = $8; //@line 27206
  sp = STACKTOP; //@line 27207
  return;
 } else {
  $14 = HEAP32[$10 >> 2] | 0; //@line 27210
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 27211
  FUNCTION_TABLE_vi[$14 & 1023]($8); //@line 27212
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 118; //@line 27215
   $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 27216
   HEAP32[$15 >> 2] = $9; //@line 27217
   $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 27218
   HEAP32[$16 >> 2] = $8; //@line 27219
   sp = STACKTOP; //@line 27220
   return;
  }
  ___async_unwind = 0; //@line 27223
  HEAP32[$ReallocAsyncCtx2 >> 2] = 118; //@line 27224
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 27225
  HEAP32[$15 >> 2] = $9; //@line 27226
  $16 = $ReallocAsyncCtx2 + 8 | 0; //@line 27227
  HEAP32[$16 >> 2] = $8; //@line 27228
  sp = STACKTOP; //@line 27229
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_268($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18473
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18477
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18479
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18481
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18483
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18485
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18487
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18489
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18492
 $18 = $4 + 16 | 0; //@line 18493
 HEAP32[$18 >> 2] = HEAP32[$6 >> 2]; //@line 18494
 HEAP32[$18 + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 18494
 HEAP8[$18 + 8 >> 0] = HEAP8[$6 + 8 >> 0] | 0; //@line 18494
 _equeue_event_dtor($4, 302); //@line 18495
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 18496
 $19 = _equeue_post($8, 303, $4) | 0; //@line 18497
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 304; //@line 18500
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 18501
  HEAP32[$20 >> 2] = $10; //@line 18502
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 18503
  HEAP32[$21 >> 2] = $12; //@line 18504
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 18505
  HEAP32[$22 >> 2] = $14; //@line 18506
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 18507
  HEAP32[$23 >> 2] = $16; //@line 18508
  sp = STACKTOP; //@line 18509
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 18513
 ___async_unwind = 0; //@line 18514
 HEAP32[$ReallocAsyncCtx6 >> 2] = 304; //@line 18515
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 18516
 HEAP32[$20 >> 2] = $10; //@line 18517
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 18518
 HEAP32[$21 >> 2] = $12; //@line 18519
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 18520
 HEAP32[$22 >> 2] = $14; //@line 18521
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 18522
 HEAP32[$23 >> 2] = $16; //@line 18523
 sp = STACKTOP; //@line 18524
 return;
}
function _mbed_trace_init() {
 var $$0 = 0, $0 = 0, $10 = 0, $13 = 0, $14 = 0, $17 = 0, $19 = 0, $22 = 0, $24 = 0, $3 = 0, $4 = 0, $7 = 0, $9 = 0;
 $0 = HEAP32[167] | 0; //@line 4489
 if (!$0) {
  $3 = _malloc(HEAP32[168] | 0) | 0; //@line 4493
  HEAP32[167] = $3; //@line 4494
  $19 = $3; //@line 4495
 } else {
  $19 = $0; //@line 4497
 }
 $4 = HEAP32[169] | 0; //@line 4499
 if (!$4) {
  $7 = _malloc(HEAP32[170] | 0) | 0; //@line 4503
  HEAP32[169] = $7; //@line 4504
  $9 = $7; //@line 4505
 } else {
  $9 = $4; //@line 4507
 }
 HEAP32[171] = $9; //@line 4510
 $10 = HEAP32[164] | 0; //@line 4511
 if (!$10) {
  $13 = _malloc(HEAP32[166] | 0) | 0; //@line 4515
  HEAP32[164] = $13; //@line 4516
  $22 = $13; //@line 4517
 } else {
  $22 = $10; //@line 4519
 }
 $14 = HEAP32[165] | 0; //@line 4521
 if (!$14) {
  $17 = _malloc(HEAP32[166] | 0) | 0; //@line 4525
  HEAP32[165] = $17; //@line 4526
  $24 = $17; //@line 4527
 } else {
  $24 = $14; //@line 4529
 }
 if (($19 | 0) == 0 | ($9 | 0) == 0 | ($22 | 0) == 0 | ($24 | 0) == 0) {
  _free($19); //@line 4539
  _free(HEAP32[169] | 0); //@line 4541
  _free(HEAP32[164] | 0); //@line 4543
  _free(HEAP32[165] | 0); //@line 4545
  HEAP8[652] = 127; //@line 4546
  HEAP32[164] = 0; //@line 4547
  HEAP32[165] = 0; //@line 4548
  HEAP32[166] = 24; //@line 4549
  HEAP32[167] = 0; //@line 4550
  HEAP32[168] = 1024; //@line 4551
  HEAP32[169] = 0; //@line 4552
  HEAP32[170] = 128; //@line 4553
  HEAP32[172] = 0; //@line 4554
  HEAP32[173] = 0; //@line 4555
  HEAP32[174] = 18; //@line 4556
  HEAP32[175] = 0; //@line 4557
  HEAP32[176] = 0; //@line 4557
  HEAP32[177] = 0; //@line 4557
  HEAP32[178] = 0; //@line 4557
  $$0 = -1; //@line 4558
  return $$0 | 0; //@line 4559
 } else {
  _memset($9 | 0, 0, HEAP32[170] | 0) | 0; //@line 4562
  _memset(HEAP32[164] | 0, 0, HEAP32[166] | 0) | 0; //@line 4565
  _memset(HEAP32[165] | 0, 0, HEAP32[166] | 0) | 0; //@line 4568
  _memset(HEAP32[167] | 0, 0, HEAP32[168] | 0) | 0; //@line 4571
  $$0 = 0; //@line 4572
  return $$0 | 0; //@line 4573
 }
 return 0; //@line 4575
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_152($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30166
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30168
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30170
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30172
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30174
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30176
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30178
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30180
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30182
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2020 >> 2] = 1; //@line 30188
  return;
 }
 if (__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0) {
  HEAP32[$4 + 2076 >> 2] = 4; //@line 30194
  HEAP8[$4 + 2080 >> 0] = 1; //@line 30196
  __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 30197
 }
 $26 = $10 & 255; //@line 30202
 $27 = $4 + 1442 | 0; //@line 30203
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 30204
 $28 = __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($4 + 756 | 0, $6 + $8 | 0, $26, $12, 128, $14, 1, $16, $27) | 0; //@line 30205
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 391; //@line 30208
  $29 = $ReallocAsyncCtx + 4 | 0; //@line 30209
  HEAP32[$29 >> 2] = $4; //@line 30210
  $30 = $ReallocAsyncCtx + 8 | 0; //@line 30211
  HEAP32[$30 >> 2] = $27; //@line 30212
  $31 = $ReallocAsyncCtx + 12 | 0; //@line 30213
  HEAP16[$31 >> 1] = $26; //@line 30214
  sp = STACKTOP; //@line 30215
  return;
 }
 HEAP32[___async_retval >> 2] = $28; //@line 30219
 ___async_unwind = 0; //@line 30220
 HEAP32[$ReallocAsyncCtx >> 2] = 391; //@line 30221
 $29 = $ReallocAsyncCtx + 4 | 0; //@line 30222
 HEAP32[$29 >> 2] = $4; //@line 30223
 $30 = $ReallocAsyncCtx + 8 | 0; //@line 30224
 HEAP32[$30 >> 2] = $27; //@line 30225
 $31 = $ReallocAsyncCtx + 12 | 0; //@line 30226
 HEAP16[$31 >> 1] = $26; //@line 30227
 sp = STACKTOP; //@line 30228
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_148($0) {
 $0 = $0 | 0;
 var $10 = 0, $21 = 0, $22 = 0, $26 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 29961
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29965
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29967
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29969
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29971
 if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) == 2) {
  label = 6; //@line 29975
 } else {
  if (!(HEAP8[$4 + 15 >> 0] | 0)) {
   label = 6; //@line 29981
  }
 }
 if ((label | 0) == 6) {
  if ((__ZNK7LoRaMac16get_device_classEv($6) | 0) != 2) {
   return;
  }
  if ((HEAP32[$4 + 4 >> 2] | 0) != 1) {
   return;
  }
 }
 $21 = $10 + 2512 | 0; //@line 29997
 $22 = HEAP32[$21 >> 2] | 0; //@line 29998
 if (!$22) {
  return;
 }
 $26 = HEAP32[$10 + 3168 >> 2] | 0; //@line 30005
 $28 = HEAP32[$22 + 4 >> 2] | 0; //@line 30007
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 30008
 FUNCTION_TABLE_vii[$28 & 15]($8, $10 + 2500 | 0); //@line 30009
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 30012
  $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 30013
  HEAP32[$29 >> 2] = $21; //@line 30014
  $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 30015
  HEAP32[$30 >> 2] = $8; //@line 30016
  $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 30017
  HEAP32[$31 >> 2] = $26; //@line 30018
  $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 30019
  HEAP32[$32 >> 2] = $8; //@line 30020
  sp = STACKTOP; //@line 30021
  return;
 }
 ___async_unwind = 0; //@line 30024
 HEAP32[$ReallocAsyncCtx5 >> 2] = 263; //@line 30025
 $29 = $ReallocAsyncCtx5 + 4 | 0; //@line 30026
 HEAP32[$29 >> 2] = $21; //@line 30027
 $30 = $ReallocAsyncCtx5 + 8 | 0; //@line 30028
 HEAP32[$30 >> 2] = $8; //@line 30029
 $31 = $ReallocAsyncCtx5 + 12 | 0; //@line 30030
 HEAP32[$31 >> 2] = $26; //@line 30031
 $32 = $ReallocAsyncCtx5 + 16 | 0; //@line 30032
 HEAP32[$32 >> 2] = $8; //@line 30033
 sp = STACKTOP; //@line 30034
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6929
 STACKTOP = STACKTOP + 16 | 0; //@line 6930
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6930
 $1 = sp; //@line 6931
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6933
 $4 = $1 + 12 | 0; //@line 6934
 HEAP32[$1 >> 2] = 15; //@line 6935
 HEAP32[$1 + 4 >> 2] = 0; //@line 6937
 HEAP32[$1 + 8 >> 2] = $0; //@line 6939
 HEAP32[$4 >> 2] = 848; //@line 6940
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6941
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 1) | 0; //@line 6942
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 215; //@line 6945
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 6947
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 6949
  sp = STACKTOP; //@line 6950
  STACKTOP = sp; //@line 6951
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6953
 $8 = HEAP32[$4 >> 2] | 0; //@line 6954
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 6959
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6960
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 6961
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 216; //@line 6964
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6966
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 6968
    sp = STACKTOP; //@line 6969
    STACKTOP = sp; //@line 6970
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6972
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 6979
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6981
 _mbed_assert_internal(11914, 11923, 548); //@line 6982
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 217; //@line 6985
  sp = STACKTOP; //@line 6986
  STACKTOP = sp; //@line 6987
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6989
 STACKTOP = sp; //@line 6990
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 6825
 STACKTOP = STACKTOP + 16 | 0; //@line 6826
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6826
 $1 = sp; //@line 6827
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6829
 $4 = $1 + 12 | 0; //@line 6830
 HEAP32[$1 >> 2] = 15; //@line 6831
 HEAP32[$1 + 4 >> 2] = 0; //@line 6833
 HEAP32[$1 + 8 >> 2] = $0; //@line 6835
 HEAP32[$4 >> 2] = 848; //@line 6836
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6837
 $5 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0_($3, $1, 0) | 0; //@line 6838
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 209; //@line 6841
  HEAP32[$AsyncCtx3 + 4 >> 2] = $4; //@line 6843
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 6845
  sp = STACKTOP; //@line 6846
  STACKTOP = sp; //@line 6847
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6849
 $8 = HEAP32[$4 >> 2] | 0; //@line 6850
 do {
  if ($8 | 0) {
   $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 6855
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 6856
   FUNCTION_TABLE_vi[$11 & 1023]($1); //@line 6857
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 210; //@line 6860
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6862
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 6864
    sp = STACKTOP; //@line 6865
    STACKTOP = sp; //@line 6866
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 6868
    break;
   }
  }
 } while (0);
 if ($5 | 0) {
  STACKTOP = sp; //@line 6875
  return;
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6877
 _mbed_assert_internal(11914, 11923, 533); //@line 6878
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 211; //@line 6881
  sp = STACKTOP; //@line 6882
  STACKTOP = sp; //@line 6883
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 6885
 STACKTOP = sp; //@line 6886
 return;
}
function __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016 = 0, $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $28 = 0, $5 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17054
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $28 = -1002; //@line 17058
  return $28 | 0; //@line 17059
 }
 $5 = __ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0; //@line 17062
 $6 = HEAP8[$1 >> 0] | 0; //@line 17063
 if (($6 & 255) > ($5 & 255)) {
  $28 = -1003; //@line 17066
  return $28 | 0; //@line 17067
 }
 if (!($6 << 24 >> 24)) {
  $28 = 0; //@line 17071
  return $28 | 0; //@line 17072
 }
 $9 = $1 + 4 | 0; //@line 17074
 $$016 = 0; //@line 17075
 while (1) {
  $13 = $$016 & 255; //@line 17077
  $14 = HEAP32[$0 >> 2] | 0; //@line 17078
  $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 60 >> 2] | 0; //@line 17081
  $18 = HEAP32[$9 >> 2] | 0; //@line 17082
  $21 = HEAP8[$18 + ($13 << 4) >> 0] | 0; //@line 17085
  $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 17086
  $22 = FUNCTION_TABLE_iiii[$17 & 31]($14, $18 + ($13 << 4) + 4 | 0, $21) | 0; //@line 17087
  if (___async) {
   label = 7; //@line 17090
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17093
  $12 = $$016 + 1 << 24 >> 24; //@line 17095
  if ($22 | 0) {
   $28 = $22; //@line 17097
   label = 9; //@line 17098
   break;
  }
  if (($12 & 255) < (HEAPU8[$1 >> 0] | 0)) {
   $$016 = $12; //@line 17104
  } else {
   $28 = 0; //@line 17106
   label = 9; //@line 17107
   break;
  }
 }
 if ((label | 0) == 7) {
  HEAP32[$AsyncCtx >> 2] = 483; //@line 17112
  HEAP8[$AsyncCtx + 4 >> 0] = $$016; //@line 17114
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 17116
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 17118
  HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 17120
  sp = STACKTOP; //@line 17121
  return 0; //@line 17122
 } else if ((label | 0) == 9) {
  return $28 | 0; //@line 17125
 }
 return 0; //@line 17127
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 12256
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 12262
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 12268
   } else {
    $7 = $1 & 255; //@line 12270
    $$03039 = $0; //@line 12271
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 12273
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 12278
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 12281
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 12286
      break;
     } else {
      $$03039 = $13; //@line 12289
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 12293
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 12294
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 12302
     $25 = $18; //@line 12302
     while (1) {
      $24 = $25 ^ $17; //@line 12304
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 12311
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 12314
      $25 = HEAP32[$31 >> 2] | 0; //@line 12315
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 12324
       break;
      } else {
       $$02936 = $31; //@line 12322
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 12329
    }
   } while (0);
   $38 = $1 & 255; //@line 12332
   $$1 = $$029$lcssa; //@line 12333
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 12335
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 12341
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 12344
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 12349
}
function __ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj($0, $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 $9 = $9 | 0;
 $10 = $10 | 0;
 $11 = $11 | 0;
 $12 = $12 | 0;
 $13 = $13 | 0;
 var $$ = 0, $$sink = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $31 = 0, label = 0;
 $14 = $8 & 1; //@line 246
 $15 = $9 & 1; //@line 247
 $16 = $10 & 1; //@line 248
 $17 = $12 & 1; //@line 249
 HEAP8[$0 + 689 >> 0] = $1; //@line 252
 switch ($1 | 0) {
 case 0:
  {
   HEAP8[$0 + 696 >> 0] = $2; //@line 256
   HEAP32[$0 + 700 >> 2] = $3; //@line 258
   HEAP32[$0 + 704 >> 2] = $4; //@line 260
   HEAP32[$0 + 712 >> 2] = $5; //@line 262
   HEAP16[$0 + 716 >> 1] = $7; //@line 264
   HEAP8[$0 + 718 >> 0] = $14; //@line 266
   HEAP8[$0 + 720 >> 0] = $15; //@line 268
   HEAP8[$0 + 721 >> 0] = $17; //@line 270
   HEAP32[$0 + 724 >> 2] = $13; //@line 272
   return;
  }
 case 1:
  {
   HEAP8[$0 + 748 >> 0] = $2; //@line 278
   if ($4 >>> 0 > 2) {
    while (1) {}
   }
   $31 = $4 + 7 | 0; //@line 284
   HEAP32[$0 + 752 >> 2] = $31; //@line 286
   HEAP32[$0 + 756 >> 2] = $5; //@line 288
   HEAP8[$0 + 761 >> 0] = $6; //@line 290
   HEAP16[$0 + 762 >> 1] = $7; //@line 292
   HEAP8[$0 + 764 >> 0] = $14; //@line 294
   HEAP8[$0 + 767 >> 0] = $16; //@line 296
   HEAP8[$0 + 768 >> 0] = $11; //@line 298
   HEAP8[$0 + 766 >> 0] = $15; //@line 300
   HEAP8[$0 + 769 >> 0] = $17; //@line 302
   HEAP32[$0 + 772 >> 2] = $13; //@line 304
   $$ = $5 >>> 0 > 6 ? $5 : 6; //@line 306
   if (($4 | 0) == 0 & (($$ >>> 0 < 12 ? $$ : 12) + -11 | 0) >>> 0 < 2) {
    label = 7; //@line 314
   } else {
    if (($31 | 0) == 8 & $$ >>> 0 > 11) {
     label = 7; //@line 320
    } else {
     $$sink = 0; //@line 322
    }
   }
   if ((label | 0) == 7) {
    $$sink = 1; //@line 326
   }
   HEAP8[$0 + 760 >> 0] = $$sink; //@line 329
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN14LoRaMacCommand28parse_mac_commands_to_repeatEv($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$01315 = 0, $$016 = 0, $$1 = 0, $$114 = 0, $$sink = 0, $2 = 0, $23 = 0, $26 = 0, $27 = 0, $5 = 0, $6 = 0, $7 = 0;
 $2 = HEAP8[$0 + 2 >> 0] | 0; //@line 17423
 if (!($2 << 24 >> 24)) {
  $$0$lcssa = 0; //@line 17426
  $26 = $$0$lcssa << 24 >> 24 != 0; //@line 17427
  $$sink = $26 & 1; //@line 17428
  HEAP8[$0 >> 0] = $$sink; //@line 17429
  $27 = $0 + 3 | 0; //@line 17430
  HEAP8[$27 >> 0] = $$0$lcssa; //@line 17431
  return;
 } else {
  $$01315 = 0; //@line 17434
  $$016 = 0; //@line 17434
  $5 = 0; //@line 17434
 }
 while (1) {
  $6 = HEAP8[$0 + 4 + $5 >> 0] | 0; //@line 17438
  switch ($6 << 24 >> 24) {
  case 5:
  case 10:
   {
    $7 = $$01315 + 1 << 24 >> 24; //@line 17441
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = $6; //@line 17445
    HEAP8[($$016 + 1 & 255) + ($0 + 132) >> 0] = HEAP8[($7 & 255) + ($0 + 4) >> 0] | 0; //@line 17452
    $$1 = $$016 + 2 << 24 >> 24; //@line 17453
    $$114 = $7; //@line 17453
    break;
   }
  case 8:
   {
    HEAP8[($$016 & 255) + ($0 + 132) >> 0] = 8; //@line 17460
    $$1 = $$016 + 1 << 24 >> 24; //@line 17461
    $$114 = $$01315; //@line 17461
    break;
   }
  case 6:
   {
    $$1 = $$016; //@line 17467
    $$114 = $5 + 2 & 255; //@line 17467
    break;
   }
  case 7:
  case 3:
   {
    $$1 = $$016; //@line 17472
    $$114 = $$01315 + 1 << 24 >> 24; //@line 17472
    break;
   }
  default:
   {
    $$1 = $$016; //@line 17476
    $$114 = $$01315; //@line 17476
   }
  }
  $23 = $$114 + 1 << 24 >> 24; //@line 17479
  if (($23 & 255) < ($2 & 255)) {
   $$01315 = $23; //@line 17483
   $$016 = $$1; //@line 17483
   $5 = $23 & 255; //@line 17483
  } else {
   $$0$lcssa = $$1; //@line 17485
   break;
  }
 }
 $26 = $$0$lcssa << 24 >> 24 != 0; //@line 17489
 $$sink = $26 & 1; //@line 17490
 HEAP8[$0 >> 0] = $$sink; //@line 17491
 $27 = $0 + 3 | 0; //@line 17492
 HEAP8[$27 >> 0] = $$0$lcssa; //@line 17493
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 11998
 $4 = HEAP32[$3 >> 2] | 0; //@line 11999
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 12006
   label = 5; //@line 12007
  } else {
   $$1 = 0; //@line 12009
  }
 } else {
  $12 = $4; //@line 12013
  label = 5; //@line 12014
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 12018
   $10 = HEAP32[$9 >> 2] | 0; //@line 12019
   $14 = $10; //@line 12022
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 12027
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 12035
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 12039
       $$141 = $0; //@line 12039
       $$143 = $1; //@line 12039
       $31 = $14; //@line 12039
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 12042
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 12049
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 12054
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 12057
      break L5;
     }
     $$139 = $$038; //@line 12063
     $$141 = $0 + $$038 | 0; //@line 12063
     $$143 = $1 - $$038 | 0; //@line 12063
     $31 = HEAP32[$9 >> 2] | 0; //@line 12063
    } else {
     $$139 = 0; //@line 12065
     $$141 = $0; //@line 12065
     $$143 = $1; //@line 12065
     $31 = $14; //@line 12065
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 12068
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 12071
   $$1 = $$139 + $$143 | 0; //@line 12073
  }
 } while (0);
 return $$1 | 0; //@line 12076
}
function __ZN7LoRaMac13clear_tx_pipeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15480
 STACKTOP = STACKTOP + 16 | 0; //@line 15481
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15481
 $vararg_buffer = sp; //@line 15482
 if ((__ZN6events10EventQueue9time_leftEi(HEAP32[$0 + 1992 >> 2] | 0, HEAP32[$0 + 1812 >> 2] | 0) | 0) <= 0) {
  $$0 = -1e3; //@line 15490
  STACKTOP = sp; //@line 15491
  return $$0 | 0; //@line 15491
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 15494
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1796 | 0); //@line 15495
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 445; //@line 15498
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 15500
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15502
  HEAP32[$AsyncCtx3 + 12 >> 2] = $vararg_buffer; //@line 15504
  HEAP32[$AsyncCtx3 + 16 >> 2] = $vararg_buffer; //@line 15506
  sp = STACKTOP; //@line 15507
  STACKTOP = sp; //@line 15508
  return 0; //@line 15508
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15510
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15512
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $0 + 1856 | 0); //@line 15513
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 446; //@line 15516
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 15518
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 15520
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer; //@line 15522
  sp = STACKTOP; //@line 15523
  STACKTOP = sp; //@line 15524
  return 0; //@line 15524
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15526
 HEAP8[$0 + 2104 >> 0] = 0; //@line 15529
 _memset($0 + 1185 | 0, 0, 257) | 0; //@line 15531
 _memset($0 + 2115 | 0, 0, 259) | 0; //@line 15532
 _mbed_tracef(16, 12709, 13151, $vararg_buffer); //@line 15533
 $$0 = 0; //@line 15534
 STACKTOP = sp; //@line 15535
 return $$0 | 0; //@line 15535
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_60($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21624
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21626
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21628
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21630
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21632
 HEAP8[$2 + 2548 >> 0] = 0; //@line 21634
 HEAP32[$4 >> 2] = 11; //@line 21635
 HEAP32[$6 >> 2] = -1011; //@line 21636
 $10 = $2 + 2904 | 0; //@line 21637
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -5; //@line 21640
 $13 = $2 + 2512 | 0; //@line 21641
 $14 = HEAP32[$13 >> 2] | 0; //@line 21642
 if (!$14) {
  return;
 }
 $18 = HEAP32[$2 + 3168 >> 2] | 0; //@line 21649
 $20 = HEAP32[$14 + 4 >> 2] | 0; //@line 21651
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 21652
 FUNCTION_TABLE_vii[$20 & 15]($8, $2 + 2500 | 0); //@line 21653
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 349; //@line 21656
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 21657
  HEAP32[$21 >> 2] = $13; //@line 21658
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 21659
  HEAP32[$22 >> 2] = $8; //@line 21660
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 21661
  HEAP32[$23 >> 2] = $18; //@line 21662
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 21663
  HEAP32[$24 >> 2] = $8; //@line 21664
  sp = STACKTOP; //@line 21665
  return;
 }
 ___async_unwind = 0; //@line 21668
 HEAP32[$ReallocAsyncCtx >> 2] = 349; //@line 21669
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 21670
 HEAP32[$21 >> 2] = $13; //@line 21671
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 21672
 HEAP32[$22 >> 2] = $8; //@line 21673
 $23 = $ReallocAsyncCtx + 12 | 0; //@line 21674
 HEAP32[$23 >> 2] = $18; //@line 21675
 $24 = $ReallocAsyncCtx + 16 | 0; //@line 21676
 HEAP32[$24 >> 2] = $8; //@line 21677
 sp = STACKTOP; //@line 21678
 return;
}
function _mbedtls_cipher_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $22 = 0, $24 = 0, $25 = 0, $30 = 0, $32 = 0, $33 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2565
 if (!$0) {
  $$0 = -24832; //@line 2568
  return $$0 | 0; //@line 2569
 }
 $5 = HEAP32[$0 >> 2] | 0; //@line 2571
 if (!$5) {
  $$0 = -24832; //@line 2574
  return $$0 | 0; //@line 2575
 }
 if (!(HEAP32[$5 + 20 >> 2] & 2)) {
  if ((HEAP32[$5 + 8 >> 2] | 0) != ($2 | 0)) {
   $$0 = -24832; //@line 2586
   return $$0 | 0; //@line 2587
  }
 }
 HEAP32[$0 + 4 >> 2] = $2; //@line 2591
 HEAP32[$0 + 8 >> 2] = $3; //@line 2593
 L11 : do {
  if (($3 | 0) != 1) {
   switch (HEAP32[$5 + 4 >> 2] | 0) {
   case 5:
   case 3:
    {
     break L11;
     break;
    }
   default:
    {}
   }
   if ($3 | 0) {
    $$0 = -24832; //@line 2609
    return $$0 | 0; //@line 2610
   }
   $30 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 20 >> 2] | 0; //@line 2615
   $32 = HEAP32[$0 + 60 >> 2] | 0; //@line 2617
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2618
   $33 = FUNCTION_TABLE_iiii[$30 & 31]($32, $1, $2) | 0; //@line 2619
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 582; //@line 2622
    sp = STACKTOP; //@line 2623
    return 0; //@line 2624
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2626
   $$0 = $33; //@line 2627
   return $$0 | 0; //@line 2628
  }
 } while (0);
 $22 = HEAP32[(HEAP32[$5 + 28 >> 2] | 0) + 16 >> 2] | 0; //@line 2634
 $24 = HEAP32[$0 + 60 >> 2] | 0; //@line 2636
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2637
 $25 = FUNCTION_TABLE_iiii[$22 & 31]($24, $1, $2) | 0; //@line 2638
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 581; //@line 2641
  sp = STACKTOP; //@line 2642
  return 0; //@line 2643
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2645
 $$0 = $25; //@line 2646
 return $$0 | 0; //@line 2647
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_97($0) {
 $0 = $0 | 0;
 var $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26647
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26649
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26651
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26653
 if (HEAP8[___async_retval >> 0] & 1) {
  return;
 }
 $8 = $4 + 2512 | 0; //@line 26660
 $9 = HEAP32[$8 >> 2] | 0; //@line 26661
 if (!$9) {
  HEAP32[$6 >> 2] = 2; //@line 26664
  return;
 }
 $13 = HEAP32[$4 + 3168 >> 2] | 0; //@line 26669
 $15 = HEAP32[$9 + 4 >> 2] | 0; //@line 26671
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 26672
 FUNCTION_TABLE_vii[$15 & 15]($2, $4 + 2500 | 0); //@line 26673
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 236; //@line 26676
  $16 = $ReallocAsyncCtx + 4 | 0; //@line 26677
  HEAP32[$16 >> 2] = $8; //@line 26678
  $17 = $ReallocAsyncCtx + 8 | 0; //@line 26679
  HEAP32[$17 >> 2] = $2; //@line 26680
  $18 = $ReallocAsyncCtx + 12 | 0; //@line 26681
  HEAP32[$18 >> 2] = $13; //@line 26682
  $19 = $ReallocAsyncCtx + 16 | 0; //@line 26683
  HEAP32[$19 >> 2] = $2; //@line 26684
  $20 = $ReallocAsyncCtx + 20 | 0; //@line 26685
  HEAP32[$20 >> 2] = $6; //@line 26686
  sp = STACKTOP; //@line 26687
  return;
 }
 ___async_unwind = 0; //@line 26690
 HEAP32[$ReallocAsyncCtx >> 2] = 236; //@line 26691
 $16 = $ReallocAsyncCtx + 4 | 0; //@line 26692
 HEAP32[$16 >> 2] = $8; //@line 26693
 $17 = $ReallocAsyncCtx + 8 | 0; //@line 26694
 HEAP32[$17 >> 2] = $2; //@line 26695
 $18 = $ReallocAsyncCtx + 12 | 0; //@line 26696
 HEAP32[$18 >> 2] = $13; //@line 26697
 $19 = $ReallocAsyncCtx + 16 | 0; //@line 26698
 HEAP32[$19 >> 2] = $2; //@line 26699
 $20 = $ReallocAsyncCtx + 20 | 0; //@line 26700
 HEAP32[$20 >> 2] = $6; //@line 26701
 sp = STACKTOP; //@line 26702
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $30 = 0, $34 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26789
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26791
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26797
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26799
 $12 = HEAP8[$0 + 24 >> 0] & 1; //@line 26802
 $14 = HEAP8[$0 + 25 >> 0] & 1; //@line 26805
 $16 = HEAP8[$0 + 26 >> 0] | 0; //@line 26807
 $18 = HEAP8[$0 + 27 >> 0] | 0; //@line 26809
 $20 = HEAP32[$0 + 28 >> 2] | 0; //@line 26811
 $22 = HEAP32[$0 + 32 >> 2] | 0; //@line 26813
 $24 = HEAP32[$0 + 36 >> 2] | 0; //@line 26815
 $26 = HEAP32[$0 + 40 >> 2] | 0; //@line 26817
 $27 = HEAP32[$2 >> 2] | 0; //@line 26818
 $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + 32 >> 2] | 0; //@line 26821
 $34 = HEAP32[(HEAP32[$0 + 12 >> 2] | 0) + ((HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0) * 12 | 0) >> 2] | 0; //@line 26825
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 26826
 FUNCTION_TABLE_vii[$30 & 15]($27, $34); //@line 26827
 if (!___async) {
  ___async_unwind = 0; //@line 26830
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 527; //@line 26832
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 26834
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 26836
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 26838
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $12 & 1; //@line 26841
 HEAP8[$ReallocAsyncCtx2 + 17 >> 0] = $14 & 1; //@line 26844
 HEAP8[$ReallocAsyncCtx2 + 18 >> 0] = $16; //@line 26846
 HEAP8[$ReallocAsyncCtx2 + 19 >> 0] = $18; //@line 26848
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $20; //@line 26850
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $22; //@line 26852
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $24; //@line 26854
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $26; //@line 26856
 sp = STACKTOP; //@line 26857
 return;
}
function _mbedtls_gcm_setkey__async_cb_360($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 25485
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25487
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25489
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25491
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25493
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25495
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 25499
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 25502
 dest = $2; //@line 25503
 stop = dest + 16 | 0; //@line 25503
 do {
  HEAP8[dest >> 0] = 0; //@line 25503
  dest = dest + 1 | 0; //@line 25503
 } while ((dest | 0) < (stop | 0));
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 25504
 $11 = _mbedtls_cipher_update($6, $2, 16, $2, $4) | 0; //@line 25505
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 612; //@line 25508
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 25509
  HEAP32[$12 >> 2] = $2; //@line 25510
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 25511
  HEAP32[$13 >> 2] = $2; //@line 25512
  $14 = $ReallocAsyncCtx + 12 | 0; //@line 25513
  HEAP32[$14 >> 2] = $8; //@line 25514
  $15 = $ReallocAsyncCtx + 16 | 0; //@line 25515
  HEAP32[$15 >> 2] = $4; //@line 25516
  sp = STACKTOP; //@line 25517
  return;
 }
 HEAP32[___async_retval >> 2] = $11; //@line 25521
 ___async_unwind = 0; //@line 25522
 HEAP32[$ReallocAsyncCtx >> 2] = 612; //@line 25523
 $12 = $ReallocAsyncCtx + 4 | 0; //@line 25524
 HEAP32[$12 >> 2] = $2; //@line 25525
 $13 = $ReallocAsyncCtx + 8 | 0; //@line 25526
 HEAP32[$13 >> 2] = $2; //@line 25527
 $14 = $ReallocAsyncCtx + 12 | 0; //@line 25528
 HEAP32[$14 >> 2] = $8; //@line 25529
 $15 = $ReallocAsyncCtx + 16 | 0; //@line 25530
 HEAP32[$15 >> 2] = $4; //@line 25531
 sp = STACKTOP; //@line 25532
 return;
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $2 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11803
 STACKTOP = STACKTOP + 16 | 0; //@line 11804
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11804
 $2 = sp; //@line 11805
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11810
  STACKTOP = sp; //@line 11811
  return $$0 | 0; //@line 11811
 }
 if ((HEAP32[$1 >> 2] | 0) == 1) {
  $$0 = -1013; //@line 11816
  STACKTOP = sp; //@line 11817
  return $$0 | 0; //@line 11817
 }
 $8 = $2 + 12 | 0; //@line 11819
 HEAP32[$2 >> 2] = 372; //@line 11820
 HEAP32[$2 + 4 >> 2] = 0; //@line 11822
 HEAP32[$2 + 8 >> 2] = $0; //@line 11824
 HEAP32[$8 >> 2] = 824; //@line 11825
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11826
 __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE($0, $1, $2); //@line 11827
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 373; //@line 11830
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 11832
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 11834
  sp = STACKTOP; //@line 11835
  STACKTOP = sp; //@line 11836
  return 0; //@line 11836
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11838
 $11 = HEAP32[$8 >> 2] | 0; //@line 11839
 if (!$11) {
  $$0 = 0; //@line 11842
  STACKTOP = sp; //@line 11843
  return $$0 | 0; //@line 11843
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 11846
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11847
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 11848
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 374; //@line 11851
  sp = STACKTOP; //@line 11852
  STACKTOP = sp; //@line 11853
  return 0; //@line 11853
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11855
 $$0 = 0; //@line 11856
 STACKTOP = sp; //@line 11857
 return $$0 | 0; //@line 11857
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_125($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $44 = 0, $54 = 0, $58 = 0, $6 = 0, $65 = 0, $66 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28267
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28269
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28271
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28273
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2092 >> 2] = 13; //@line 28279
  return;
 }
 HEAP32[$2 + 1752 >> 2] = (HEAPU8[$2 + 1448 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1447 >> 0] | 0) << 8 | (HEAPU8[$2 + 1446 >> 0] | 0)); //@line 28296
 HEAP32[$2 + 1756 >> 2] = (HEAPU8[$2 + 1452 >> 0] | 0) << 24 | ((HEAPU8[$2 + 1451 >> 0] | 0) << 16 | ((HEAPU8[$2 + 1450 >> 0] | 0) << 8 | (HEAPU8[$2 + 1449 >> 0] | 0))); //@line 28316
 $44 = HEAP8[$2 + 1453 >> 0] | 0; //@line 28318
 HEAP8[$2 + 1909 >> 0] = ($44 & 255) >>> 4 & 7; //@line 28324
 HEAP8[$2 + 1916 >> 0] = $44 & 15; //@line 28327
 $54 = HEAP8[$2 + 1454 >> 0] & 15; //@line 28330
 $58 = $54 << 24 >> 24 == 0 ? 1e3 : ($54 & 255) * 1e3 | 0; //@line 28335
 HEAP32[$2 + 1892 >> 2] = $58; //@line 28336
 HEAP32[$2 + 1896 >> 2] = $58 + 1e3; //@line 28339
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 28344
 __ZN7LoRaPHY13apply_cf_listEPKhh($2 + 4 | 0, $2 + 1455 | 0, $4 + 239 & 255); //@line 28345
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 386; //@line 28348
  $65 = $ReallocAsyncCtx4 + 4 | 0; //@line 28349
  HEAP32[$65 >> 2] = $2; //@line 28350
  $66 = $ReallocAsyncCtx4 + 8 | 0; //@line 28351
  HEAP32[$66 >> 2] = $6; //@line 28352
  sp = STACKTOP; //@line 28353
  return;
 }
 ___async_unwind = 0; //@line 28356
 HEAP32[$ReallocAsyncCtx4 >> 2] = 386; //@line 28357
 $65 = $ReallocAsyncCtx4 + 4 | 0; //@line 28358
 HEAP32[$65 >> 2] = $2; //@line 28359
 $66 = $ReallocAsyncCtx4 + 8 | 0; //@line 28360
 HEAP32[$66 >> 2] = $6; //@line 28361
 sp = STACKTOP; //@line 28362
 return;
}
function _main__async_cb_82($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 25673
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25677
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25679
 __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t(20484, 23664) | 0; //@line 25682
 if (__ZN16LoRaWANInterface25disable_adaptive_datarateEv(20484) | 0) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 25686
  _puts(15210) | 0; //@line 25687
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 25690
   sp = STACKTOP; //@line 25691
   return;
  }
  ___async_unwind = 0; //@line 25694
  HEAP32[$ReallocAsyncCtx7 >> 2] = 681; //@line 25695
  sp = STACKTOP; //@line 25696
  return;
 }
 __ZN16LoRaWANInterface12set_datarateEh(20484, 5) | 0; //@line 25699
 HEAP8[$4 >> 0] = 0; //@line 25700
 HEAP32[$4 + 4 >> 2] = 24297; //@line 25702
 HEAP32[$4 + 8 >> 2] = 24305; //@line 25704
 HEAP32[$4 + 12 >> 2] = 24313; //@line 25706
 HEAP8[$4 + 16 >> 0] = 3; //@line 25708
 $15 = __ZN16LoRaWANInterface7connectERK15lorawan_connect(20484, $4) | 0; //@line 25709
 switch ($15 | 0) {
 case 0:
 case -1016:
  {
   break;
  }
 default:
  {
   HEAP32[$6 >> 2] = $15; //@line 25715
   _printf(15244, $6) | 0; //@line 25716
   HEAP32[___async_retval >> 2] = -1; //@line 25718
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 25722
 _puts(15273) | 0; //@line 25723
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 25726
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 25727
  HEAP32[$16 >> 2] = $4; //@line 25728
  sp = STACKTOP; //@line 25729
  return;
 }
 ___async_unwind = 0; //@line 25732
 HEAP32[$ReallocAsyncCtx6 >> 2] = 682; //@line 25733
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 25734
 HEAP32[$16 >> 2] = $4; //@line 25735
 sp = STACKTOP; //@line 25736
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_162($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30799
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30803
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30805
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30807
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30809
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30811
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30813
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 30815
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30818
 HEAP32[$4 + 16 >> 2] = HEAP32[$6 >> 2]; //@line 30821
 _equeue_event_dtor($4, 271); //@line 30822
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 30823
 $20 = _equeue_post($8, 272, $4) | 0; //@line 30824
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 273; //@line 30827
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 30828
  HEAP32[$21 >> 2] = $10; //@line 30829
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 30830
  HEAP32[$22 >> 2] = $12; //@line 30831
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 30832
  HEAP32[$23 >> 2] = $14; //@line 30833
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 30834
  HEAP32[$24 >> 2] = $16; //@line 30835
  sp = STACKTOP; //@line 30836
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 30840
 ___async_unwind = 0; //@line 30841
 HEAP32[$ReallocAsyncCtx6 >> 2] = 273; //@line 30842
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 30843
 HEAP32[$21 >> 2] = $10; //@line 30844
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 30845
 HEAP32[$22 >> 2] = $12; //@line 30846
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 30847
 HEAP32[$23 >> 2] = $14; //@line 30848
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 30849
 HEAP32[$24 >> 2] = $16; //@line 30850
 sp = STACKTOP; //@line 30851
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_311($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21935
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21939
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21941
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21943
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21945
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21947
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21949
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21951
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21954
 HEAP16[$4 + 16 >> 1] = HEAP16[$6 >> 1] | 0; //@line 21957
 _equeue_event_dtor($4, 328); //@line 21958
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 21959
 $20 = _equeue_post($8, 329, $4) | 0; //@line 21960
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 21963
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 21964
  HEAP32[$21 >> 2] = $10; //@line 21965
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 21966
  HEAP32[$22 >> 2] = $12; //@line 21967
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 21968
  HEAP32[$23 >> 2] = $14; //@line 21969
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 21970
  HEAP32[$24 >> 2] = $16; //@line 21971
  sp = STACKTOP; //@line 21972
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 21976
 ___async_unwind = 0; //@line 21977
 HEAP32[$ReallocAsyncCtx6 >> 2] = 330; //@line 21978
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 21979
 HEAP32[$21 >> 2] = $10; //@line 21980
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 21981
 HEAP32[$22 >> 2] = $12; //@line 21982
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 21983
 HEAP32[$23 >> 2] = $14; //@line 21984
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 21985
 HEAP32[$24 >> 2] = $16; //@line 21986
 sp = STACKTOP; //@line 21987
 return;
}
function __ZL12send_messagev() {
 var $0 = 0, $3 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7781
 STACKTOP = STACKTOP + 80 | 0; //@line 7782
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 7782
 $vararg_buffer8 = sp + 24 | 0; //@line 7783
 $vararg_buffer5 = sp + 16 | 0; //@line 7784
 $vararg_buffer1 = sp + 8 | 0; //@line 7785
 $vararg_buffer = sp; //@line 7786
 $0 = sp + 28 | 0; //@line 7787
 dest = $0; //@line 7788
 stop = dest + 50 | 0; //@line 7788
 do {
  HEAP8[dest >> 0] = 0; //@line 7788
  dest = dest + 1 | 0; //@line 7788
 } while ((dest | 0) < (stop | 0));
 HEAPF64[$vararg_buffer >> 3] = +__ZN5Sht3115readTemperatureEv(24296); //@line 7791
 _sprintf($0, 15669, $vararg_buffer) | 0; //@line 7792
 $3 = _strlen($0) | 0; //@line 7793
 HEAP32[$vararg_buffer1 >> 2] = $3; //@line 7794
 HEAP32[$vararg_buffer1 + 4 >> 2] = $0; //@line 7796
 _printf(15689, $vararg_buffer1) | 0; //@line 7797
 $5 = __ZN16LoRaWANInterface4sendEhPKhti(20484, 15, $0, $3 & 65535, 1) | 0; //@line 7799
 $6 = $5 << 16 >> 16; //@line 7800
 if ($5 << 16 >> 16 >= 0) {
  HEAP32[$vararg_buffer8 >> 2] = $6; //@line 7803
  _printf(15765, $vararg_buffer8) | 0; //@line 7804
  STACKTOP = sp; //@line 7805
  return;
 }
 if ($5 << 16 >> 16 != -1001) {
  HEAP32[$vararg_buffer5 >> 2] = $6; //@line 7809
  _printf(15741, $vararg_buffer5) | 0; //@line 7810
  STACKTOP = sp; //@line 7811
  return;
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7813
 _puts(15713) | 0; //@line 7814
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 684; //@line 7817
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7819
  sp = STACKTOP; //@line 7820
  STACKTOP = sp; //@line 7821
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7823
 STACKTOP = sp; //@line 7824
 return;
}
function _equeue_dealloc__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i = 0, $$02330$i = 0, $$025$i = 0, $$sink$in$i = 0, $$sink21$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $23 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14618
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14620
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14622
 $7 = $2 + 156 | 0; //@line 14623
 _equeue_mutex_lock($7); //@line 14624
 $8 = $2 + 24 | 0; //@line 14625
 $9 = HEAP32[$8 >> 2] | 0; //@line 14626
 L3 : do {
  if (!$9) {
   $$02329$i = $8; //@line 14630
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 14632
   $$025$i = $8; //@line 14633
   $13 = $9; //@line 14633
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 14635
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 14640
    $16 = HEAP32[$15 >> 2] | 0; //@line 14641
    if (!$16) {
     $$02329$i = $15; //@line 14644
     break L3;
    } else {
     $$025$i = $15; //@line 14647
     $13 = $16; //@line 14647
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 14653
    $$02330$i = $$025$i; //@line 14656
    $$sink$in$i = (HEAP32[$$025$i >> 2] | 0) + 8 | 0; //@line 14656
    $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 14657
    $23 = $4 + -28 | 0; //@line 14658
    HEAP32[$23 >> 2] = $$sink21$i; //@line 14659
    HEAP32[$$02330$i >> 2] = $6; //@line 14660
    _equeue_mutex_unlock($7); //@line 14661
    return;
   } else {
    $$02329$i = $$025$i; //@line 14664
   }
  }
 } while (0);
 HEAP32[$4 + -24 >> 2] = 0; //@line 14669
 $$02330$i = $$02329$i; //@line 14670
 $$sink$in$i = $$02329$i; //@line 14670
 $$sink21$i = HEAP32[$$sink$in$i >> 2] | 0; //@line 14671
 $23 = $4 + -28 | 0; //@line 14672
 HEAP32[$23 >> 2] = $$sink21$i; //@line 14673
 HEAP32[$$02330$i >> 2] = $6; //@line 14674
 _equeue_mutex_unlock($7); //@line 14675
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_174($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 31556
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31560
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31562
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 31564
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31566
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31568
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 31570
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 31572
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 31575
 HEAP8[$4 + 16 >> 0] = HEAP8[$6 >> 0] | 0; //@line 31578
 _equeue_event_dtor($4, 225); //@line 31579
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 31580
 $20 = _equeue_post($8, 226, $4) | 0; //@line 31581
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 227; //@line 31584
  $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 31585
  HEAP32[$21 >> 2] = $10; //@line 31586
  $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 31587
  HEAP32[$22 >> 2] = $12; //@line 31588
  $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 31589
  HEAP32[$23 >> 2] = $14; //@line 31590
  $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 31591
  HEAP32[$24 >> 2] = $16; //@line 31592
  sp = STACKTOP; //@line 31593
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 31597
 ___async_unwind = 0; //@line 31598
 HEAP32[$ReallocAsyncCtx6 >> 2] = 227; //@line 31599
 $21 = $ReallocAsyncCtx6 + 4 | 0; //@line 31600
 HEAP32[$21 >> 2] = $10; //@line 31601
 $22 = $ReallocAsyncCtx6 + 8 | 0; //@line 31602
 HEAP32[$22 >> 2] = $12; //@line 31603
 $23 = $ReallocAsyncCtx6 + 12 | 0; //@line 31604
 HEAP32[$23 >> 2] = $14; //@line 31605
 $24 = $ReallocAsyncCtx6 + 16 | 0; //@line 31606
 HEAP32[$24 >> 2] = $16; //@line 31607
 sp = STACKTOP; //@line 31608
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $20 = 0, $21 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23372
 if (($1 | 0) == ($2 | 0)) {
  $21 = $1 + 16 | 0; //@line 23375
  HEAP32[$21 >> 2] = 0; //@line 23376
  return;
 }
 $4 = $1 + 12 | 0; //@line 23379
 $5 = HEAP32[$4 >> 2] | 0; //@line 23380
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 23385
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 23386
   FUNCTION_TABLE_vi[$8 & 1023]($1); //@line 23387
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 561; //@line 23390
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 23392
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 23394
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 23396
    sp = STACKTOP; //@line 23397
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 23400
    break;
   }
  }
 } while (0);
 $12 = $2 + 12 | 0; //@line 23405
 $13 = HEAP32[$12 >> 2] | 0; //@line 23406
 do {
  if (!$13) {
   $20 = 0; //@line 23410
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 23413
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 23414
   FUNCTION_TABLE_vii[$16 & 15]($1, $2); //@line 23415
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 562; //@line 23418
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 23420
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 23422
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 23424
    sp = STACKTOP; //@line 23425
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 23428
    $20 = HEAP32[$12 >> 2] | 0; //@line 23430
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $20; //@line 23435
 $21 = $1 + 16 | 0; //@line 23436
 HEAP32[$21 >> 2] = 0; //@line 23437
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_70($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22518
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22520
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22522
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22524
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 22526
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22528
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22530
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22532
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22534
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 22537
  $17 = _mbedtls_cipher_cmac_starts($2, $4, $6) | 0; //@line 22538
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 22542
   ___async_unwind = 0; //@line 22543
  }
  HEAP32[$ReallocAsyncCtx >> 2] = 505; //@line 22545
  HEAP16[$ReallocAsyncCtx + 4 >> 1] = $8; //@line 22547
  HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 22549
  HEAP32[$ReallocAsyncCtx + 12 >> 2] = $10; //@line 22551
  HEAP32[$ReallocAsyncCtx + 16 >> 2] = $12; //@line 22553
  HEAP32[$ReallocAsyncCtx + 20 >> 2] = $14; //@line 22555
  sp = STACKTOP; //@line 22556
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22559
 _mbedtls_cipher_free($2); //@line 22560
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 22563
  $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 22564
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 22565
  sp = STACKTOP; //@line 22566
  return;
 }
 ___async_unwind = 0; //@line 22569
 HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 22570
 $24 = $ReallocAsyncCtx5 + 4 | 0; //@line 22571
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 22572
 sp = STACKTOP; //@line 22573
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_159($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30571
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30573
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30575
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30577
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30579
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30581
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 30583
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 30585
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30587
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 30590
  $17 = _mbedtls_cipher_cmac_starts($6, $12, $14) | 0; //@line 30591
  if (!___async) {
   HEAP32[___async_retval >> 2] = $17; //@line 30595
   ___async_unwind = 0; //@line 30596
  }
  HEAP32[$ReallocAsyncCtx >> 2] = 497; //@line 30598
  HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 30600
  HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 30602
  HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 30604
  HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 30606
  HEAP32[$ReallocAsyncCtx + 20 >> 2] = $4; //@line 30608
  sp = STACKTOP; //@line 30609
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30612
 _mbedtls_cipher_free($6); //@line 30613
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 501; //@line 30616
  $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 30617
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 30618
  sp = STACKTOP; //@line 30619
  return;
 }
 ___async_unwind = 0; //@line 30622
 HEAP32[$ReallocAsyncCtx6 >> 2] = 501; //@line 30623
 $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 30624
 HEAP32[$24 >> 2] = $AsyncRetVal; //@line 30625
 sp = STACKTOP; //@line 30626
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_228($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre10 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13589
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13593
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13595
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13597
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13599
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 13600
 $$pre10 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 13601
 if (!$$pre10) {
  HEAP32[$4 >> 2] = 0; //@line 13604
  _gpio_irq_set($10 + 28 | 0, 2, 0); //@line 13606
  return;
 }
 $13 = HEAP32[$$pre10 + 4 >> 2] | 0; //@line 13610
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 13611
 FUNCTION_TABLE_vii[$13 & 15]($6, $8); //@line 13612
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 110; //@line 13615
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 13616
  HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 13617
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 13618
  HEAP32[$15 >> 2] = $4; //@line 13619
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 13620
  HEAP32[$16 >> 2] = $8; //@line 13621
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 13622
  HEAP32[$17 >> 2] = $10; //@line 13623
  sp = STACKTOP; //@line 13624
  return;
 }
 ___async_unwind = 0; //@line 13627
 HEAP32[$ReallocAsyncCtx4 >> 2] = 110; //@line 13628
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 13629
 HEAP32[$14 >> 2] = $$phi$trans$insert; //@line 13630
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 13631
 HEAP32[$15 >> 2] = $4; //@line 13632
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 13633
 HEAP32[$16 >> 2] = $8; //@line 13634
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 13635
 HEAP32[$17 >> 2] = $10; //@line 13636
 sp = STACKTOP; //@line 13637
 return;
}
function _mbedtls_ccm_setkey($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $13 = 0, $18 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2172
 $4 = _mbedtls_cipher_info_from_values($1, $3, 1) | 0; //@line 2173
 if (!$4) {
  $$0 = -13; //@line 2176
  return $$0 | 0; //@line 2177
 }
 if ((HEAP32[$4 + 24 >> 2] | 0) != 16) {
  $$0 = -13; //@line 2183
  return $$0 | 0; //@line 2184
 }
 $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2186
 _mbedtls_cipher_free($0); //@line 2187
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 572; //@line 2190
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 2192
  HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 2194
  HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 2196
  HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 2198
  sp = STACKTOP; //@line 2199
  return 0; //@line 2200
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2202
 $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 2203
 $13 = _mbedtls_cipher_setup($0, $4) | 0; //@line 2204
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 573; //@line 2207
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2209
  HEAP32[$AsyncCtx3 + 8 >> 2] = $2; //@line 2211
  HEAP32[$AsyncCtx3 + 12 >> 2] = $3; //@line 2213
  sp = STACKTOP; //@line 2214
  return 0; //@line 2215
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2217
 if ($13 | 0) {
  $$0 = $13; //@line 2220
  return $$0 | 0; //@line 2221
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2223
 $18 = _mbedtls_cipher_setkey($0, $2, $3, 1) | 0; //@line 2224
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 574; //@line 2227
  sp = STACKTOP; //@line 2228
  return 0; //@line 2229
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2231
 $$0 = $18; //@line 2232
 return $$0 | 0; //@line 2233
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_348($0) {
 $0 = $0 | 0;
 var $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24190
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24192
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24194
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24196
 $9 = HEAP8[$2 >> 0] | 0; //@line 24199
 if (!($9 & 1)) {
  $20 = $9; //@line 24203
 } else {
  if (!(HEAP8[$4 + 1936 >> 0] | 0)) {
   $20 = $9; //@line 24209
  } else {
   _mbed_tracef(16, 12709, 13124, $6); //@line 24211
   $16 = $4 + 1877 | 0; //@line 24213
   HEAP8[$16 >> 0] = __ZN7LoRaPHY26get_next_lower_tx_datarateEa($4 + 4 | 0, HEAP8[$16 >> 0] | 0) | 0; //@line 24216
   $20 = HEAP8[$2 >> 0] | 0; //@line 24218
  }
 }
 $19 = $4 + 2063 | 0; //@line 24221
 HEAP8[$19 >> 0] = $20; //@line 24222
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 24223
 $21 = __ZN7LoRaMac21handle_retransmissionEv($4) | 0; //@line 24224
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 442; //@line 24227
  $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 24228
  HEAP32[$22 >> 2] = $2; //@line 24229
  $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 24230
  HEAP32[$23 >> 2] = $4; //@line 24231
  $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 24232
  HEAP32[$24 >> 2] = $19; //@line 24233
  sp = STACKTOP; //@line 24234
  return;
 }
 HEAP32[___async_retval >> 2] = $21; //@line 24238
 ___async_unwind = 0; //@line 24239
 HEAP32[$ReallocAsyncCtx3 >> 2] = 442; //@line 24240
 $22 = $ReallocAsyncCtx3 + 4 | 0; //@line 24241
 HEAP32[$22 >> 2] = $2; //@line 24242
 $23 = $ReallocAsyncCtx3 + 8 | 0; //@line 24243
 HEAP32[$23 >> 2] = $4; //@line 24244
 $24 = $ReallocAsyncCtx3 + 12 | 0; //@line 24245
 HEAP32[$24 >> 2] = $19; //@line 24246
 sp = STACKTOP; //@line 24247
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_191($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32728
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32732
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32734
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32736
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32738
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32740
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32742
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 32744
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 32747
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 32748
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 32764
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 32765
    if (!___async) {
     ___async_unwind = 0; //@line 32768
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 739; //@line 32770
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 32772
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 32774
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 32776
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 32778
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 32780
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 32782
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 32784
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 32786
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 32789
    sp = STACKTOP; //@line 32790
    return;
   }
  }
 } while (0);
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_62($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21716
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21720
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21722
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21723
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 21727
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 21728
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 21729
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 351; //@line 21732
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 21733
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21734
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 21735
   HEAP32[$11 >> 2] = $4; //@line 21736
   sp = STACKTOP; //@line 21737
   return;
  }
  ___async_unwind = 0; //@line 21740
  HEAP32[$ReallocAsyncCtx2 >> 2] = 351; //@line 21741
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 21742
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21743
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 21744
  HEAP32[$11 >> 2] = $4; //@line 21745
  sp = STACKTOP; //@line 21746
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21753
 _mbed_assert_internal(11914, 11923, 778); //@line 21754
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 21757
  $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 21758
  HEAP32[$13 >> 2] = $4; //@line 21759
  sp = STACKTOP; //@line 21760
  return;
 }
 ___async_unwind = 0; //@line 21763
 HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 21764
 $13 = $ReallocAsyncCtx6 + 4 | 0; //@line 21765
 HEAP32[$13 >> 2] = $4; //@line 21766
 sp = STACKTOP; //@line 21767
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_146($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29895
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29899
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29901
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29902
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 29906
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 29907
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 29908
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 257; //@line 29911
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 29912
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29913
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 29914
   HEAP32[$11 >> 2] = $4; //@line 29915
   sp = STACKTOP; //@line 29916
   return;
  }
  ___async_unwind = 0; //@line 29919
  HEAP32[$ReallocAsyncCtx2 >> 2] = 257; //@line 29920
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 29921
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29922
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 29923
  HEAP32[$11 >> 2] = $4; //@line 29924
  sp = STACKTOP; //@line 29925
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 29932
 _mbed_assert_internal(11914, 11923, 778); //@line 29933
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 258; //@line 29936
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 29937
  HEAP32[$13 >> 2] = $4; //@line 29938
  sp = STACKTOP; //@line 29939
  return;
 }
 ___async_unwind = 0; //@line 29942
 HEAP32[$ReallocAsyncCtx12 >> 2] = 258; //@line 29943
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 29944
 HEAP32[$13 >> 2] = $4; //@line 29945
 sp = STACKTOP; //@line 29946
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_144($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 29676
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29680
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 29682
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29683
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 29687
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 29688
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 29689
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 29692
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 29693
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29694
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 29695
   HEAP32[$11 >> 2] = $4; //@line 29696
   sp = STACKTOP; //@line 29697
   return;
  }
  ___async_unwind = 0; //@line 29700
  HEAP32[$ReallocAsyncCtx6 >> 2] = 265; //@line 29701
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 29702
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 29703
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 29704
  HEAP32[$11 >> 2] = $4; //@line 29705
  sp = STACKTOP; //@line 29706
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 29713
 _mbed_assert_internal(11914, 11923, 778); //@line 29714
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 266; //@line 29717
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 29718
  HEAP32[$13 >> 2] = $4; //@line 29719
  sp = STACKTOP; //@line 29720
  return;
 }
 ___async_unwind = 0; //@line 29723
 HEAP32[$ReallocAsyncCtx10 >> 2] = 266; //@line 29724
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 29725
 HEAP32[$13 >> 2] = $4; //@line 29726
 sp = STACKTOP; //@line 29727
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_50($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21200
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21204
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21206
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21207
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 21211
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 21212
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 21213
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 245; //@line 21216
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 21217
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21218
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 21219
   HEAP32[$11 >> 2] = $4; //@line 21220
   sp = STACKTOP; //@line 21221
   return;
  }
  ___async_unwind = 0; //@line 21224
  HEAP32[$ReallocAsyncCtx2 >> 2] = 245; //@line 21225
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 21226
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21227
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 21228
  HEAP32[$11 >> 2] = $4; //@line 21229
  sp = STACKTOP; //@line 21230
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 21237
 _mbed_assert_internal(11914, 11923, 778); //@line 21238
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 246; //@line 21241
  $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 21242
  HEAP32[$13 >> 2] = $4; //@line 21243
  sp = STACKTOP; //@line 21244
  return;
 }
 ___async_unwind = 0; //@line 21247
 HEAP32[$ReallocAsyncCtx12 >> 2] = 246; //@line 21248
 $13 = $ReallocAsyncCtx12 + 4 | 0; //@line 21249
 HEAP32[$13 >> 2] = $4; //@line 21250
 sp = STACKTOP; //@line 21251
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_49($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21143
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21147
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21149
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21150
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 21154
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 21155
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 21156
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 21159
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 21160
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21161
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 21162
   HEAP32[$11 >> 2] = $4; //@line 21163
   sp = STACKTOP; //@line 21164
   return;
  }
  ___async_unwind = 0; //@line 21167
  HEAP32[$ReallocAsyncCtx4 >> 2] = 249; //@line 21168
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 21169
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21170
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 21171
  HEAP32[$11 >> 2] = $4; //@line 21172
  sp = STACKTOP; //@line 21173
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 21180
 _mbed_assert_internal(11914, 11923, 778); //@line 21181
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 250; //@line 21184
  $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 21185
  HEAP32[$13 >> 2] = $4; //@line 21186
  sp = STACKTOP; //@line 21187
  return;
 }
 ___async_unwind = 0; //@line 21190
 HEAP32[$ReallocAsyncCtx11 >> 2] = 250; //@line 21191
 $13 = $ReallocAsyncCtx11 + 4 | 0; //@line 21192
 HEAP32[$13 >> 2] = $4; //@line 21193
 sp = STACKTOP; //@line 21194
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_48($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21086
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21090
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21092
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21093
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 21097
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 21098
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 21099
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 253; //@line 21102
   $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 21103
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21104
   $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 21105
   HEAP32[$11 >> 2] = $4; //@line 21106
   sp = STACKTOP; //@line 21107
   return;
  }
  ___async_unwind = 0; //@line 21110
  HEAP32[$ReallocAsyncCtx6 >> 2] = 253; //@line 21111
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 21112
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 21113
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 21114
  HEAP32[$11 >> 2] = $4; //@line 21115
  sp = STACKTOP; //@line 21116
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 21123
 _mbed_assert_internal(11914, 11923, 778); //@line 21124
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 254; //@line 21127
  $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 21128
  HEAP32[$13 >> 2] = $4; //@line 21129
  sp = STACKTOP; //@line 21130
  return;
 }
 ___async_unwind = 0; //@line 21133
 HEAP32[$ReallocAsyncCtx10 >> 2] = 254; //@line 21134
 $13 = $ReallocAsyncCtx10 + 4 | 0; //@line 21135
 HEAP32[$13 >> 2] = $4; //@line 21136
 sp = STACKTOP; //@line 21137
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_322($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22656
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22660
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22662
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22663
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22667
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 22668
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22669
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 322; //@line 22672
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22673
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22674
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 22675
   HEAP32[$11 >> 2] = $4; //@line 22676
   sp = STACKTOP; //@line 22677
   return;
  }
  ___async_unwind = 0; //@line 22680
  HEAP32[$ReallocAsyncCtx2 >> 2] = 322; //@line 22681
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 22682
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 22683
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 22684
  HEAP32[$11 >> 2] = $4; //@line 22685
  sp = STACKTOP; //@line 22686
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 22693
 _mbed_assert_internal(11914, 11923, 778); //@line 22694
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 22697
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 22698
  HEAP32[$13 >> 2] = $4; //@line 22699
  sp = STACKTOP; //@line 22700
  return;
 }
 ___async_unwind = 0; //@line 22703
 HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 22704
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 22705
 HEAP32[$13 >> 2] = $4; //@line 22706
 sp = STACKTOP; //@line 22707
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_342($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 24025
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24029
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24031
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24032
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 24036
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 24037
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 24038
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 317; //@line 24041
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 24042
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24043
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 24044
   HEAP32[$11 >> 2] = $4; //@line 24045
   sp = STACKTOP; //@line 24046
   return;
  }
  ___async_unwind = 0; //@line 24049
  HEAP32[$ReallocAsyncCtx4 >> 2] = 317; //@line 24050
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 24051
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24052
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 24053
  HEAP32[$11 >> 2] = $4; //@line 24054
  sp = STACKTOP; //@line 24055
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 24062
 _mbed_assert_internal(11914, 11923, 778); //@line 24063
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 318; //@line 24066
  $13 = $ReallocAsyncCtx9 + 4 | 0; //@line 24067
  HEAP32[$13 >> 2] = $4; //@line 24068
  sp = STACKTOP; //@line 24069
  return;
 }
 ___async_unwind = 0; //@line 24072
 HEAP32[$ReallocAsyncCtx9 >> 2] = 318; //@line 24073
 $13 = $ReallocAsyncCtx9 + 4 | 0; //@line 24074
 HEAP32[$13 >> 2] = $4; //@line 24075
 sp = STACKTOP; //@line 24076
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_372($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26649
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26651
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26653
 $AsyncRetVal = HEAP16[___async_retval >> 1] | 0; //@line 26655
 $6 = $2 + 2496 | 0; //@line 26656
 switch (HEAP32[$6 >> 2] | 0) {
 case 5:
 case 2:
  {
   break;
  }
 default:
  {
   if ((__ZNK7LoRaMac16get_device_classEv($4) | 0) != 2) {
    HEAP16[___async_retval >> 1] = -1e3 == 0 ? $AsyncRetVal : -1e3 & 65535; //@line 26670
    return;
   }
  }
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 26675
 $10 = __ZN7LoRaMac15send_ongoing_txEv($4) | 0; //@line 26676
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 369; //@line 26679
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 26680
  HEAP32[$11 >> 2] = $2; //@line 26681
  $12 = $ReallocAsyncCtx + 8 | 0; //@line 26682
  HEAP32[$12 >> 2] = $4; //@line 26683
  $13 = $ReallocAsyncCtx + 12 | 0; //@line 26684
  HEAP32[$13 >> 2] = $6; //@line 26685
  $14 = $ReallocAsyncCtx + 16 | 0; //@line 26686
  HEAP16[$14 >> 1] = $AsyncRetVal; //@line 26687
  sp = STACKTOP; //@line 26688
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 26692
 ___async_unwind = 0; //@line 26693
 HEAP32[$ReallocAsyncCtx >> 2] = 369; //@line 26694
 $11 = $ReallocAsyncCtx + 4 | 0; //@line 26695
 HEAP32[$11 >> 2] = $2; //@line 26696
 $12 = $ReallocAsyncCtx + 8 | 0; //@line 26697
 HEAP32[$12 >> 2] = $4; //@line 26698
 $13 = $ReallocAsyncCtx + 12 | 0; //@line 26699
 HEAP32[$13 >> 2] = $6; //@line 26700
 $14 = $ReallocAsyncCtx + 16 | 0; //@line 26701
 HEAP16[$14 >> 1] = $AsyncRetVal; //@line 26702
 sp = STACKTOP; //@line 26703
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_378($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27064
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27066
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27070
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27072
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27074
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27076
 $13 = HEAP32[$2 >> 2] | 0; //@line 27077
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 52 >> 2] | 0; //@line 27080
 $18 = HEAP16[HEAP32[$0 + 8 >> 2] >> 1] & 255; //@line 27082
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 27083
 $19 = FUNCTION_TABLE_iiii[$16 & 31]($13, $6, $18) | 0; //@line 27084
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 531; //@line 27087
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 27088
  HEAP32[$20 >> 2] = $8; //@line 27089
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 27090
  HEAP32[$21 >> 2] = $2; //@line 27091
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 27092
  HEAP32[$22 >> 2] = $10; //@line 27093
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 27094
  HEAP32[$23 >> 2] = $12; //@line 27095
  sp = STACKTOP; //@line 27096
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 27100
 ___async_unwind = 0; //@line 27101
 HEAP32[$ReallocAsyncCtx6 >> 2] = 531; //@line 27102
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 27103
 HEAP32[$20 >> 2] = $8; //@line 27104
 $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 27105
 HEAP32[$21 >> 2] = $2; //@line 27106
 $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 27107
 HEAP32[$22 >> 2] = $10; //@line 27108
 $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 27109
 HEAP32[$23 >> 2] = $12; //@line 27110
 sp = STACKTOP; //@line 27111
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_297($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21104
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21106
 $3 = $2 + 1176 | 0; //@line 21107
 HEAP32[$3 >> 2] = 10244; //@line 21108
 __ZN4mbed6Ticker6detachEv($3); //@line 21109
 $5 = HEAP32[$2 + 1228 >> 2] | 0; //@line 21111
 if (!$5) {
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 21114
  __ZN4mbed10TimerEventD2Ev($3); //@line 21115
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 21118
   $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 21119
   HEAP32[$12 >> 2] = $2; //@line 21120
   sp = STACKTOP; //@line 21121
   return;
  }
  ___async_unwind = 0; //@line 21124
  HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 21125
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 21126
  HEAP32[$12 >> 2] = $2; //@line 21127
  sp = STACKTOP; //@line 21128
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 21133
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 21134
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1216 | 0); //@line 21135
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 21138
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 21139
   HEAP32[$10 >> 2] = $2; //@line 21140
   $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 21141
   HEAP32[$11 >> 2] = $3; //@line 21142
   sp = STACKTOP; //@line 21143
   return;
  }
  ___async_unwind = 0; //@line 21146
  HEAP32[$ReallocAsyncCtx2 >> 2] = 71; //@line 21147
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 21148
  HEAP32[$10 >> 2] = $2; //@line 21149
  $11 = $ReallocAsyncCtx2 + 8 | 0; //@line 21150
  HEAP32[$11 >> 2] = $3; //@line 21151
  sp = STACKTOP; //@line 21152
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_296($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21049
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21051
 $3 = $2 + 1112 | 0; //@line 21052
 HEAP32[$3 >> 2] = 10244; //@line 21053
 __ZN4mbed6Ticker6detachEv($3); //@line 21054
 $5 = HEAP32[$2 + 1164 >> 2] | 0; //@line 21056
 if (!$5) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21059
  __ZN4mbed10TimerEventD2Ev($3); //@line 21060
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 21063
   $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 21064
   HEAP32[$12 >> 2] = $2; //@line 21065
   sp = STACKTOP; //@line 21066
   return;
  }
  ___async_unwind = 0; //@line 21069
  HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 21070
  $12 = $ReallocAsyncCtx6 + 4 | 0; //@line 21071
  HEAP32[$12 >> 2] = $2; //@line 21072
  sp = STACKTOP; //@line 21073
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 21078
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 21079
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1152 | 0); //@line 21080
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 21083
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 21084
   HEAP32[$10 >> 2] = $2; //@line 21085
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 21086
   HEAP32[$11 >> 2] = $3; //@line 21087
   sp = STACKTOP; //@line 21088
   return;
  }
  ___async_unwind = 0; //@line 21091
  HEAP32[$ReallocAsyncCtx3 >> 2] = 73; //@line 21092
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 21093
  HEAP32[$10 >> 2] = $2; //@line 21094
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 21095
  HEAP32[$11 >> 2] = $3; //@line 21096
  sp = STACKTOP; //@line 21097
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_295($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20994
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20996
 $3 = $2 + 1048 | 0; //@line 20997
 HEAP32[$3 >> 2] = 10244; //@line 20998
 __ZN4mbed6Ticker6detachEv($3); //@line 20999
 $5 = HEAP32[$2 + 1100 >> 2] | 0; //@line 21001
 if (!$5) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21004
  __ZN4mbed10TimerEventD2Ev($3); //@line 21005
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 21008
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 21009
   HEAP32[$12 >> 2] = $2; //@line 21010
   sp = STACKTOP; //@line 21011
   return;
  }
  ___async_unwind = 0; //@line 21014
  HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 21015
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 21016
  HEAP32[$12 >> 2] = $2; //@line 21017
  sp = STACKTOP; //@line 21018
  return;
 } else {
  $9 = HEAP32[$5 + 8 >> 2] | 0; //@line 21023
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 21024
  FUNCTION_TABLE_vi[$9 & 1023]($2 + 1088 | 0); //@line 21025
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 75; //@line 21028
   $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 21029
   HEAP32[$10 >> 2] = $3; //@line 21030
   $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 21031
   HEAP32[$11 >> 2] = $2; //@line 21032
   sp = STACKTOP; //@line 21033
   return;
  }
  ___async_unwind = 0; //@line 21036
  HEAP32[$ReallocAsyncCtx4 >> 2] = 75; //@line 21037
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 21038
  HEAP32[$10 >> 2] = $3; //@line 21039
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 21040
  HEAP32[$11 >> 2] = $2; //@line 21041
  sp = STACKTOP; //@line 21042
  return;
 }
}
function __ZL18lora_event_handler11lora_events__async_cb_13($0) {
 $0 = $0 | 0;
 var $$07$i = 0, $12 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $21 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 19243
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19245
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19247
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19251
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19255
 dest = $2; //@line 19258
 stop = dest + 50 | 0; //@line 19258
 do {
  HEAP8[dest >> 0] = 0; //@line 19258
  dest = dest + 1 | 0; //@line 19258
 } while ((dest | 0) < (stop | 0));
 $15 = __ZN16LoRaWANInterface7receiveEhPhti(20484, 15, $2, 50, 3) | 0; //@line 19259
 $16 = $15 << 16 >> 16; //@line 19260
 if ($15 << 16 >> 16 < 0) {
  HEAP32[$4 >> 2] = $16; //@line 19263
  _printf(15458, $4) | 0; //@line 19264
  return;
 }
 HEAP32[$8 >> 2] = 15; //@line 19267
 HEAP32[$8 + 4 >> 2] = $16; //@line 19269
 _printf(15485, $8) | 0; //@line 19270
 if ($15 << 16 >> 16) {
  $$07$i = 0; //@line 19273
  $21 = 0; //@line 19273
  do {
   HEAP32[$12 >> 2] = HEAPU8[$2 + $21 >> 0]; //@line 19278
   _printf(15524, $12) | 0; //@line 19279
   $$07$i = $$07$i + 1 << 24 >> 24; //@line 19280
   $21 = $$07$i & 255; //@line 19281
  } while (($21 | 0) < ($16 | 0));
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 19290
 _putchar(10) | 0; //@line 19291
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 693; //@line 19294
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 19295
  HEAP32[$19 >> 2] = $2; //@line 19296
  sp = STACKTOP; //@line 19297
  return;
 }
 ___async_unwind = 0; //@line 19300
 HEAP32[$ReallocAsyncCtx >> 2] = 693; //@line 19301
 $19 = $ReallocAsyncCtx + 4 | 0; //@line 19302
 HEAP32[$19 >> 2] = $2; //@line 19303
 sp = STACKTOP; //@line 19304
 return;
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb($0) {
 $0 = $0 | 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 617
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 619
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 621
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 623
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 625
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 627
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 631
  return;
 }
 HEAP8[$2 + 2063 >> 0] = 0; //@line 635
 HEAP8[$2 + 2062 >> 0] = 0; //@line 637
 HEAP32[$2 + 2068 >> 2] = HEAP32[$2 + 1760 >> 2]; //@line 641
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 642
 $16 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 643
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 450; //@line 646
  $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 647
  HEAP32[$17 >> 2] = $4; //@line 648
  $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 649
  HEAP32[$18 >> 2] = $8; //@line 650
  $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 651
  HEAP32[$19 >> 2] = $2; //@line 652
  $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 653
  HEAP32[$20 >> 2] = $6; //@line 654
  sp = STACKTOP; //@line 655
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 659
 ___async_unwind = 0; //@line 660
 HEAP32[$ReallocAsyncCtx2 >> 2] = 450; //@line 661
 $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 662
 HEAP32[$17 >> 2] = $4; //@line 663
 $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 664
 HEAP32[$18 >> 2] = $8; //@line 665
 $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 666
 HEAP32[$19 >> 2] = $2; //@line 667
 $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 668
 HEAP32[$20 >> 2] = $6; //@line 669
 sp = STACKTOP; //@line 670
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30328
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30330
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30332
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30334
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30336
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30338
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30340
 if (!$AsyncRetVal) {
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 30343
  $13 = _mbedtls_cipher_cmac_update($4, $2, 16) | 0; //@line 30344
  if (!___async) {
   HEAP32[___async_retval >> 2] = $13; //@line 30348
   ___async_unwind = 0; //@line 30349
  }
  HEAP32[$ReallocAsyncCtx4 >> 2] = 498; //@line 30351
  HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $4; //@line 30353
  HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $6; //@line 30355
  HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $8; //@line 30357
  HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $2; //@line 30359
  HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 30361
  sp = STACKTOP; //@line 30362
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30365
 _mbedtls_cipher_free($4); //@line 30366
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 501; //@line 30369
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 30370
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 30371
  sp = STACKTOP; //@line 30372
  return;
 }
 ___async_unwind = 0; //@line 30375
 HEAP32[$ReallocAsyncCtx6 >> 2] = 501; //@line 30376
 $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 30377
 HEAP32[$20 >> 2] = $AsyncRetVal; //@line 30378
 sp = STACKTOP; //@line 30379
 return;
}
function __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $39 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21837
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21839
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21841
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21843
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21845
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21847
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21849
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21851
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21853
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21855
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21857
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21859
 $25 = $4 + 1280 | 0; //@line 21860
 HEAP32[$25 >> 2] = 0; //@line 21861
 HEAP32[$25 + 4 >> 2] = 0; //@line 21861
 HEAP32[$25 + 8 >> 2] = 0; //@line 21861
 HEAP32[$25 + 12 >> 2] = 0; //@line 21861
 HEAP8[$4 + 1296 >> 0] = 1; //@line 21863
 HEAP32[$2 >> 2] = 620; //@line 21864
 HEAP32[$4 + 668 >> 2] = $6; //@line 21866
 HEAP32[$4 + 672 >> 2] = $8; //@line 21868
 HEAP32[$4 + 652 >> 2] = $10; //@line 21870
 HEAP32[$4 + 656 >> 2] = $12; //@line 21872
 HEAP32[$4 + 664 >> 2] = $14; //@line 21874
 HEAP32[$4 + 660 >> 2] = $16; //@line 21876
 HEAP32[$4 + 676 >> 2] = $18; //@line 21878
 HEAP32[$4 + 680 >> 2] = $20; //@line 21880
 HEAP32[$4 + 684 >> 2] = $22; //@line 21882
 HEAP32[$4 + 788 >> 2] = 0; //@line 21884
 if (($18 | 0) == -1) {
  $39 = _emscripten_asm_const_ii(5, $4 | 0) | 0; //@line 21887
  return;
 }
 _emscripten_asm_const_iii(4, HEAP32[$24 >> 2] | 0, 1) | 0; //@line 21891
 $39 = _emscripten_asm_const_ii(5, $4 | 0) | 0; //@line 21892
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11884
 STACKTOP = STACKTOP + 16 | 0; //@line 11885
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11885
 $2 = sp; //@line 11886
 $3 = $1 & 255; //@line 11887
 HEAP8[$2 >> 0] = $3; //@line 11888
 $4 = $0 + 16 | 0; //@line 11889
 $5 = HEAP32[$4 >> 2] | 0; //@line 11890
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 11897
   label = 4; //@line 11898
  } else {
   $$0 = -1; //@line 11900
  }
 } else {
  $12 = $5; //@line 11903
  label = 4; //@line 11904
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 11908
   $10 = HEAP32[$9 >> 2] | 0; //@line 11909
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 11912
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 11919
     HEAP8[$10 >> 0] = $3; //@line 11920
     $$0 = $13; //@line 11921
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 11926
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 11927
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 11928
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 703; //@line 11931
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 11933
    sp = STACKTOP; //@line 11934
    STACKTOP = sp; //@line 11935
    return 0; //@line 11935
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 11937
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 11942
   } else {
    $$0 = -1; //@line 11944
   }
  }
 } while (0);
 STACKTOP = sp; //@line 11948
 return $$0 | 0; //@line 11948
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28201
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28203
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28205
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28207
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28209
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28211
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28213
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 28215
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 28217
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 28219
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2092 >> 2] = 13; //@line 28225
  return;
 }
 HEAP8[$12 >> 0] = HEAP8[$10 >> 0] | 0; //@line 28229
 $23 = $6 + -4 | 0; //@line 28230
 $25 = HEAP32[$14 >> 2] | 0; //@line 28232
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 28233
 $26 = __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj($16, $12, $23 & 65535, $25, 128, $8) | 0; //@line 28234
 if (!___async) {
  HEAP32[___async_retval >> 2] = $26; //@line 28238
  ___async_unwind = 0; //@line 28239
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 383; //@line 28241
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 28243
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $23; //@line 28245
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 28247
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 28249
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $2; //@line 28251
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 28253
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $16; //@line 28255
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $18; //@line 28257
 sp = STACKTOP; //@line 28258
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_405($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 29685
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29687
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29689
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 29691
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 29693
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 29695
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 29697
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$4 + 2376 >> 0] | 0) {
    HEAP8[$4 + 2084 >> 0] = 0; //@line 29706
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29709
   __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $6); //@line 29710
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 29713
    $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 29714
    HEAP32[$16 >> 2] = $4; //@line 29715
    sp = STACKTOP; //@line 29716
    return;
   }
   ___async_unwind = 0; //@line 29719
   HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 29720
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 29721
   HEAP32[$16 >> 2] = $4; //@line 29722
   sp = STACKTOP; //@line 29723
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 29728
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $6, 1, $trunc, $8, $10); //@line 29729
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 412; //@line 29732
    sp = STACKTOP; //@line 29733
    return;
   }
   ___async_unwind = 0; //@line 29736
   HEAP32[$ReallocAsyncCtx >> 2] = 412; //@line 29737
   sp = STACKTOP; //@line 29738
   return;
  }
 default:
  {
   return;
  }
 }
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_404($0) {
 $0 = $0 | 0;
 var $10 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $trunc = 0, sp = 0;
 sp = STACKTOP; //@line 29619
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29621
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29623
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 29625
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 29627
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 29629
 $trunc = (HEAPU8[$2 >> 0] | 0) >>> 5; //@line 29631
 switch ($trunc & 7) {
 case 1:
  {
   if (HEAP8[$4 + 2376 >> 0] | 0) {
    HEAP8[$4 + 2084 >> 0] = 0; //@line 29640
    return;
   }
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 29643
   __ZN7LoRaMac24handle_join_accept_frameEPKht($4, $2, $6); //@line 29644
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 29647
    $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 29648
    HEAP32[$16 >> 2] = $4; //@line 29649
    sp = STACKTOP; //@line 29650
    return;
   }
   ___async_unwind = 0; //@line 29653
   HEAP32[$ReallocAsyncCtx2 >> 2] = 411; //@line 29654
   $16 = $ReallocAsyncCtx2 + 4 | 0; //@line 29655
   HEAP32[$16 >> 2] = $4; //@line 29656
   sp = STACKTOP; //@line 29657
   return;
  }
 case 7:
 case 5:
 case 3:
  {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 29662
   __ZN7LoRaMac17handle_data_frameEPKhthhsa($4, $2, $6, 1, $trunc, $8, $10); //@line 29663
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 412; //@line 29666
    sp = STACKTOP; //@line 29667
    return;
   }
   ___async_unwind = 0; //@line 29670
   HEAP32[$ReallocAsyncCtx >> 2] = 412; //@line 29671
   sp = STACKTOP; //@line 29672
   return;
  }
 default:
  {
   return;
  }
 }
}
function _equeue_cancel__async_cb($0) {
 $0 = $0 | 0;
 var $$02329$i$i = 0, $$02330$i$i = 0, $$025$i$i = 0, $$sink$in$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27145
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27147
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27149
 $7 = $2 + 156 | 0; //@line 27150
 _equeue_mutex_lock($7); //@line 27151
 $8 = $2 + 24 | 0; //@line 27152
 $9 = HEAP32[$8 >> 2] | 0; //@line 27153
 L3 : do {
  if (!$9) {
   $$02329$i$i = $8; //@line 27157
   label = 9; //@line 27158
  } else {
   $11 = HEAP32[$6 >> 2] | 0; //@line 27160
   $$025$i$i = $8; //@line 27161
   $13 = $9; //@line 27161
   while (1) {
    $12 = HEAP32[$13 >> 2] | 0; //@line 27163
    if ($12 >>> 0 >= $11 >>> 0) {
     break;
    }
    $15 = $13 + 8 | 0; //@line 27168
    $16 = HEAP32[$15 >> 2] | 0; //@line 27169
    if (!$16) {
     $$02329$i$i = $15; //@line 27172
     label = 9; //@line 27173
     break L3;
    } else {
     $$025$i$i = $15; //@line 27176
     $13 = $16; //@line 27176
    }
   }
   if (($12 | 0) == ($11 | 0)) {
    HEAP32[$4 + -24 >> 2] = $13; //@line 27182
    $$02330$i$i = $$025$i$i; //@line 27185
    $$sink$in$i$i = (HEAP32[$$025$i$i >> 2] | 0) + 8 | 0; //@line 27185
   } else {
    $$02329$i$i = $$025$i$i; //@line 27187
    label = 9; //@line 27188
   }
  }
 } while (0);
 if ((label | 0) == 9) {
  HEAP32[$4 + -24 >> 2] = 0; //@line 27194
  $$02330$i$i = $$02329$i$i; //@line 27195
  $$sink$in$i$i = $$02329$i$i; //@line 27195
 }
 HEAP32[$4 + -28 >> 2] = HEAP32[$$sink$in$i$i >> 2]; //@line 27199
 HEAP32[$$02330$i$i >> 2] = $6; //@line 27200
 _equeue_mutex_unlock($7); //@line 27201
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $11 = 0, $13 = 0, $16 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22563
 $1 = $0 + 4 | 0; //@line 22564
 $2 = HEAP32[$1 >> 2] | 0; //@line 22565
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22568
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22569
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22570
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 554; //@line 22573
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22575
  sp = STACKTOP; //@line 22576
  return 0; //@line 22577
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22579
 $7 = HEAP32[$1 >> 2] | 0; //@line 22580
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 36 >> 2] | 0; //@line 22583
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22584
 $11 = FUNCTION_TABLE_ii[$10 & 15]($7) | 0; //@line 22585
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 555; //@line 22588
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22590
  sp = STACKTOP; //@line 22591
  return 0; //@line 22592
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22594
 $13 = HEAP32[$1 >> 2] | 0; //@line 22595
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 22598
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22599
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 22600
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 556; //@line 22603
  HEAP32[$AsyncCtx5 + 4 >> 2] = $11; //@line 22605
  sp = STACKTOP; //@line 22606
  return 0; //@line 22607
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22609
  return $11 | 0; //@line 22610
 }
 return 0; //@line 22612
}
function __ZN12LoRaWANStack7connectEv($0) {
 $0 = $0 | 0;
 var $$1 = 0, $10 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $vararg_buffer1 = 0, sp = 0;
 sp = STACKTOP; //@line 11107
 STACKTOP = STACKTOP + 16 | 0; //@line 11108
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11108
 $vararg_buffer1 = sp + 8 | 0; //@line 11109
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 11115
  STACKTOP = sp; //@line 11116
  return $$1 | 0; //@line 11116
 }
 $4 = __ZN7LoRaMac12prepare_joinEPK15lorawan_connectb($0, 0, 0) | 0; //@line 11118
 if ($4 | 0) {
  $$1 = $4; //@line 11121
  STACKTOP = sp; //@line 11122
  return $$1 | 0; //@line 11122
 }
 _mbed_tracef(16, 12021, 12467, sp); //@line 11124
 $9 = HEAP32[$0 + 2556 >> 2] | 0; //@line 11128
 HEAP32[$vararg_buffer1 >> 2] = HEAP32[$0 + 2552 >> 2]; //@line 11129
 HEAP32[$vararg_buffer1 + 4 >> 2] = $9; //@line 11131
 _mbed_tracef(16, 12021, 12482, $vararg_buffer1); //@line 11132
 $10 = $0 + 2904 | 0; //@line 11133
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -9; //@line 11136
 HEAP32[$vararg_buffer1 >> 2] = 0; //@line 11137
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11138
 __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status($0, $vararg_buffer1); //@line 11139
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 362; //@line 11142
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer1; //@line 11144
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer1; //@line 11146
  sp = STACKTOP; //@line 11147
  STACKTOP = sp; //@line 11148
  return 0; //@line 11148
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11150
 $$1 = HEAP32[$vararg_buffer1 >> 2] | 0; //@line 11152
 STACKTOP = sp; //@line 11153
 return $$1 | 0; //@line 11153
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 18883
 $2 = $0 + 260 | 0; //@line 18884
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 272 | 0; //@line 18889
 $5 = HEAP32[$4 >> 2] | 0; //@line 18890
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 18895
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 18896
   FUNCTION_TABLE_vi[$8 & 1023]($2); //@line 18897
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 494; //@line 18900
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 18902
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 18904
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 18906
    sp = STACKTOP; //@line 18907
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18910
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 18915
 $13 = HEAP32[$12 >> 2] | 0; //@line 18916
 do {
  if (!$13) {
   $19 = 0; //@line 18920
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 18923
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 18924
   FUNCTION_TABLE_vii[$16 & 15]($2, $1); //@line 18925
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 495; //@line 18928
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 18930
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 18932
    sp = STACKTOP; //@line 18933
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 18936
    $19 = HEAP32[$12 >> 2] | 0; //@line 18938
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 18943
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $11 = 0, $14 = 0, $16 = 0, $19 = 0, $3 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22620
 $3 = $0 + 4 | 0; //@line 22621
 $4 = HEAP32[$3 >> 2] | 0; //@line 22622
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 72 >> 2] | 0; //@line 22625
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 22626
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 22627
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 557; //@line 22630
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 22632
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 22634
  HEAP8[$AsyncCtx + 12 >> 0] = $2; //@line 22636
  sp = STACKTOP; //@line 22637
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22640
 $11 = HEAP32[$3 >> 2] | 0; //@line 22641
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 24 >> 2] | 0; //@line 22644
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22645
 FUNCTION_TABLE_viii[$14 & 7]($11, $1, $2); //@line 22646
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 558; //@line 22649
  HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 22651
  sp = STACKTOP; //@line 22652
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22655
 $16 = HEAP32[$3 >> 2] | 0; //@line 22656
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 76 >> 2] | 0; //@line 22659
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22660
 FUNCTION_TABLE_vi[$19 & 1023]($16); //@line 22661
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 559; //@line 22664
  sp = STACKTOP; //@line 22665
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22668
  return;
 }
}
function _mbedtls_cipher_cmac_starts($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3189
 L1 : do {
  if (!$0) {
   $$0 = -24832; //@line 3193
  } else {
   if (($1 | 0) == 0 | (HEAP32[$0 >> 2] | 0) == 0) {
    $$0 = -24832; //@line 3200
   } else {
    $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3202
    $7 = _mbedtls_cipher_setkey($0, $1, $2, 1) | 0; //@line 3203
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 594; //@line 3206
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 3208
     HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 3210
     sp = STACKTOP; //@line 3211
     return 0; //@line 3212
    }
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3214
    if (!$7) {
     switch (HEAP32[HEAP32[$0 >> 2] >> 2] | 0) {
     case 36:
     case 4:
     case 3:
     case 2:
      {
       break;
      }
     default:
      {
       $$0 = -24832; //@line 3224
       break L1;
      }
     }
     $13 = _calloc(1, 36) | 0; //@line 3228
     if (!$13) {
      $$0 = -24960; //@line 3231
     } else {
      HEAP32[$0 + 64 >> 2] = $13; //@line 3234
      $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3235
      _mbedtls_platform_zeroize($13, 16); //@line 3236
      if (___async) {
       HEAP32[$AsyncCtx >> 2] = 595; //@line 3239
       sp = STACKTOP; //@line 3240
       return 0; //@line 3241
      } else {
       _emscripten_free_async_context($AsyncCtx | 0); //@line 3243
       $$0 = 0; //@line 3244
       break;
      }
     }
    } else {
     $$0 = $7; //@line 3249
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 3254
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 32412
 value = value & 255; //@line 32414
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 32417
   ptr = ptr + 1 | 0; //@line 32418
  }
  aligned_end = end & -4 | 0; //@line 32421
  block_aligned_end = aligned_end - 64 | 0; //@line 32422
  value4 = value | value << 8 | value << 16 | value << 24; //@line 32423
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 32426
   HEAP32[ptr + 4 >> 2] = value4; //@line 32427
   HEAP32[ptr + 8 >> 2] = value4; //@line 32428
   HEAP32[ptr + 12 >> 2] = value4; //@line 32429
   HEAP32[ptr + 16 >> 2] = value4; //@line 32430
   HEAP32[ptr + 20 >> 2] = value4; //@line 32431
   HEAP32[ptr + 24 >> 2] = value4; //@line 32432
   HEAP32[ptr + 28 >> 2] = value4; //@line 32433
   HEAP32[ptr + 32 >> 2] = value4; //@line 32434
   HEAP32[ptr + 36 >> 2] = value4; //@line 32435
   HEAP32[ptr + 40 >> 2] = value4; //@line 32436
   HEAP32[ptr + 44 >> 2] = value4; //@line 32437
   HEAP32[ptr + 48 >> 2] = value4; //@line 32438
   HEAP32[ptr + 52 >> 2] = value4; //@line 32439
   HEAP32[ptr + 56 >> 2] = value4; //@line 32440
   HEAP32[ptr + 60 >> 2] = value4; //@line 32441
   ptr = ptr + 64 | 0; //@line 32442
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 32446
   ptr = ptr + 4 | 0; //@line 32447
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 32452
  ptr = ptr + 1 | 0; //@line 32453
 }
 return end - num | 0; //@line 32455
}
function __ZN7LoRaMacD2Ev__async_cb_307($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21663
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21665
 $4 = HEAP32[$2 + 1808 >> 2] | 0; //@line 21667
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 21672
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 21673
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 1796 | 0); //@line 21674
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 21677
   $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 21678
   HEAP32[$9 >> 2] = $2; //@line 21679
   sp = STACKTOP; //@line 21680
   return;
  }
  ___async_unwind = 0; //@line 21683
  HEAP32[$ReallocAsyncCtx5 >> 2] = 380; //@line 21684
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 21685
  HEAP32[$9 >> 2] = $2; //@line 21686
  sp = STACKTOP; //@line 21687
  return;
 }
 $11 = HEAP32[$2 + 748 >> 2] | 0; //@line 21691
 if (!$11) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 21695
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 21700
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21701
 FUNCTION_TABLE_vi[$15 & 1023]($2 + 736 | 0); //@line 21702
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 21705
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 21706
  HEAP32[$16 >> 2] = $2; //@line 21707
  sp = STACKTOP; //@line 21708
  return;
 }
 ___async_unwind = 0; //@line 21711
 HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 21712
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 21713
 HEAP32[$16 >> 2] = $2; //@line 21714
 sp = STACKTOP; //@line 21715
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_118($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 27923
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27925
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27927
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27929
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27931
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27933
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27935
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27937
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27939
 $18 = $12 + 12 | 0; //@line 27941
 HEAP32[$12 >> 2] = 461; //@line 27942
 HEAP32[$12 + 4 >> 2] = 0; //@line 27944
 HEAP32[$12 + 8 >> 2] = $2; //@line 27946
 HEAP32[$18 >> 2] = 860; //@line 27947
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(40) | 0; //@line 27948
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1796 | 0, $12); //@line 27949
 if (!___async) {
  ___async_unwind = 0; //@line 27952
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 462; //@line 27954
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 27956
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 27958
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 27960
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 27962
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 27964
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $18; //@line 27966
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $12; //@line 27968
 HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $14; //@line 27970
 HEAP32[$ReallocAsyncCtx8 + 36 >> 2] = $16; //@line 27972
 sp = STACKTOP; //@line 27973
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9493
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 9495
 $4 = HEAP16[$0 + 20 >> 1] | 0; //@line 9497
 $6 = HEAP16[$0 + 22 >> 1] | 0; //@line 9499
 $8 = HEAP8[$0 + 24 >> 0] | 0; //@line 9501
 $9 = $0 + 12 | 0; //@line 9502
 $10 = HEAP32[$9 >> 2] | 0; //@line 9503
 do {
  if (!$10) {
   $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9507
   _mbed_assert_internal(14839, 14844, 2830); //@line 9508
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 308; //@line 9511
    HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 9513
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 9515
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 9517
    HEAP16[$AsyncCtx2 + 16 >> 1] = $4; //@line 9519
    HEAP16[$AsyncCtx2 + 18 >> 1] = $6; //@line 9521
    HEAP8[$AsyncCtx2 + 20 >> 0] = $8; //@line 9523
    sp = STACKTOP; //@line 9524
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9527
    $19 = HEAP32[$9 >> 2] | 0; //@line 9529
    break;
   }
  } else {
   $19 = $10; //@line 9533
  }
 } while (0);
 $18 = HEAP32[$19 >> 2] | 0; //@line 9536
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9537
 FUNCTION_TABLE_viiiii[$18 & 7]($0, $2, $4, $6, $8); //@line 9538
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 309; //@line 9541
  sp = STACKTOP; //@line 9542
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 9545
  return;
 }
}
function __ZN7LoRaPHY25setup_public_network_modeEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $14 = 0, $17 = 0, $2 = 0, $3 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22429
 $2 = $0 + 4 | 0; //@line 22430
 $3 = HEAP32[$2 >> 2] | 0; //@line 22431
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 72 >> 2] | 0; //@line 22434
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 22435
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 22436
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 547; //@line 22439
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 22441
  HEAP8[$AsyncCtx + 8 >> 0] = $1 & 1; //@line 22444
  sp = STACKTOP; //@line 22445
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22448
 $9 = HEAP32[$2 >> 2] | 0; //@line 22449
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 48 >> 2] | 0; //@line 22452
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22453
 FUNCTION_TABLE_vii[$12 & 15]($9, $1); //@line 22454
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 548; //@line 22457
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 22459
  sp = STACKTOP; //@line 22460
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22463
 $14 = HEAP32[$2 >> 2] | 0; //@line 22464
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 76 >> 2] | 0; //@line 22467
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22468
 FUNCTION_TABLE_vi[$17 & 1023]($14); //@line 22469
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 549; //@line 22472
  sp = STACKTOP; //@line 22473
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22476
  return;
 }
}
function _fflush__async_cb_211($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 856
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 858
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 860
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 864
  } else {
   $$02327 = $$02325; //@line 866
   $$02426 = $AsyncRetVal; //@line 866
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 873
    } else {
     $16 = 0; //@line 875
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 887
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 890
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 893
     break L3;
    } else {
     $$02327 = $$023; //@line 896
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 899
   $13 = ___fflush_unlocked($$02327) | 0; //@line 900
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 904
    ___async_unwind = 0; //@line 905
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 707; //@line 907
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 909
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 911
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 913
   sp = STACKTOP; //@line 914
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 918
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 920
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_280($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19540
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19544
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19546
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19548
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19550
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19552
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19554
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19557
 _equeue_event_delay($4, $6); //@line 19558
 _equeue_event_dtor($4, 283); //@line 19559
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 19560
 $16 = _equeue_post($8, 284, $4) | 0; //@line 19561
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 566; //@line 19564
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 19565
  HEAP32[$17 >> 2] = $10; //@line 19566
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 19567
  HEAP32[$18 >> 2] = $12; //@line 19568
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 19569
  HEAP32[$19 >> 2] = $14; //@line 19570
  sp = STACKTOP; //@line 19571
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 19575
 ___async_unwind = 0; //@line 19576
 HEAP32[$ReallocAsyncCtx4 >> 2] = 566; //@line 19577
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 19578
 HEAP32[$17 >> 2] = $10; //@line 19579
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 19580
 HEAP32[$18 >> 2] = $12; //@line 19581
 $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 19582
 HEAP32[$19 >> 2] = $14; //@line 19583
 sp = STACKTOP; //@line 19584
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_316($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22310
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22314
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22316
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22317
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 22321
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 22322
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 22323
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 210; //@line 22326
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 22327
   HEAP32[$10 >> 2] = $4; //@line 22328
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 22329
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 22330
   sp = STACKTOP; //@line 22331
   return;
  }
  ___async_unwind = 0; //@line 22334
  HEAP32[$ReallocAsyncCtx >> 2] = 210; //@line 22335
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 22336
  HEAP32[$10 >> 2] = $4; //@line 22337
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 22338
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 22339
  sp = STACKTOP; //@line 22340
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 22347
 _mbed_assert_internal(11914, 11923, 533); //@line 22348
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 22351
  sp = STACKTOP; //@line 22352
  return;
 }
 ___async_unwind = 0; //@line 22355
 HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 22356
 sp = STACKTOP; //@line 22357
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_357($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24843
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24847
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24849
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24850
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 24854
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 24855
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 24856
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 207; //@line 24859
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 24860
   HEAP32[$10 >> 2] = $4; //@line 24861
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 24862
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 24863
   sp = STACKTOP; //@line 24864
   return;
  }
  ___async_unwind = 0; //@line 24867
  HEAP32[$ReallocAsyncCtx >> 2] = 207; //@line 24868
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 24869
  HEAP32[$10 >> 2] = $4; //@line 24870
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 24871
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 24872
  sp = STACKTOP; //@line 24873
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 24880
 _mbed_assert_internal(11914, 11923, 525); //@line 24881
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 24884
  sp = STACKTOP; //@line 24885
  return;
 }
 ___async_unwind = 0; //@line 24888
 HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 24889
 sp = STACKTOP; //@line 24890
 return;
}
function _mbedtls_cipher_free($0) {
 $0 = $0 | 0;
 var $15 = 0, $2 = 0, $3 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2358
 if (!$0) {
  return;
 }
 $2 = $0 + 64 | 0; //@line 2363
 $3 = HEAP32[$2 >> 2] | 0; //@line 2364
 do {
  if ($3 | 0) {
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2368
   _mbedtls_platform_zeroize($3, 36); //@line 2369
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 577; //@line 2372
    HEAP32[$AsyncCtx7 + 4 >> 2] = $2; //@line 2374
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 2376
    sp = STACKTOP; //@line 2377
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 2380
    _free(HEAP32[$2 >> 2] | 0); //@line 2382
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 60 >> 2] | 0; //@line 2388
 do {
  if ($9 | 0) {
   $15 = HEAP32[(HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0) + 28 >> 2] | 0; //@line 2396
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2397
   FUNCTION_TABLE_vi[$15 & 1023]($9); //@line 2398
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 578; //@line 2401
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2403
    sp = STACKTOP; //@line 2404
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2407
    break;
   }
  }
 } while (0);
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2412
 _mbedtls_platform_zeroize($0, 68); //@line 2413
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 579; //@line 2416
  sp = STACKTOP; //@line 2417
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2420
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $34 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18376
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18380
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18386
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18388
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18390
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18392
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18394
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18396
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18398
 if ((HEAP8[$0 + 4 >> 0] | 0) == 7) {
  $24 = $4 + 1442 | 0; //@line 18401
  $26 = HEAPU8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 18403
  _memcpy($24 | 0, (HEAP32[$0 + 16 >> 2] | 0) + $26 | 0, $10 | 0) | 0; //@line 18405
  HEAP32[$4 + 2016 >> 2] = 3; //@line 18407
  HEAP32[$12 >> 2] = 0; //@line 18408
  HEAP32[$14 >> 2] = $24; //@line 18409
  HEAP16[$16 >> 1] = $10 - $26; //@line 18412
 }
 if (!(HEAP8[$18 >> 0] | 0)) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 18420
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($22, $4 + 1856 | 0); //@line 18421
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 396; //@line 18424
  $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 18425
  HEAP32[$34 >> 2] = $20; //@line 18426
  sp = STACKTOP; //@line 18427
  return;
 }
 ___async_unwind = 0; //@line 18430
 HEAP32[$ReallocAsyncCtx4 >> 2] = 396; //@line 18431
 $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 18432
 HEAP32[$34 >> 2] = $20; //@line 18433
 sp = STACKTOP; //@line 18434
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_128($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28483
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28487
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28489
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28491
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28493
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28495
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28496
 $15 = HEAP16[$4 + 1748 >> 1] | 0; //@line 28498
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 28501
 $18 = __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2_($6, $13, 128, $8, $15, $4 + 1716 | 0, $4 + 1732 | 0) | 0; //@line 28502
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 28505
  $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 28506
  HEAP32[$19 >> 2] = $4; //@line 28507
  $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 28508
  HEAP32[$20 >> 2] = $10; //@line 28509
  $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 28510
  HEAP32[$21 >> 2] = $12; //@line 28511
  sp = STACKTOP; //@line 28512
  return;
 }
 HEAP32[___async_retval >> 2] = $18; //@line 28516
 ___async_unwind = 0; //@line 28517
 HEAP32[$ReallocAsyncCtx2 >> 2] = 385; //@line 28518
 $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 28519
 HEAP32[$19 >> 2] = $4; //@line 28520
 $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 28521
 HEAP32[$20 >> 2] = $10; //@line 28522
 $21 = $ReallocAsyncCtx2 + 12 | 0; //@line 28523
 HEAP32[$21 >> 2] = $12; //@line 28524
 sp = STACKTOP; //@line 28525
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_183($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 32092
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32096
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32098
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32100
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32102
 if ((HEAP16[$0 + 4 >> 1] | 0) < -1) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 32105
  $12 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 32106
  if (!___async) {
   HEAP32[___async_retval >> 2] = $12; //@line 32110
   ___async_unwind = 0; //@line 32111
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 64; //@line 32113
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $6; //@line 32115
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 32117
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $4; //@line 32119
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $10; //@line 32121
  sp = STACKTOP; //@line 32122
  return;
 } else {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 32125
  $18 = __ZN4mbed5Timer7read_msEv($4) | 0; //@line 32126
  if (!___async) {
   HEAP32[___async_retval >> 2] = $18; //@line 32130
   ___async_unwind = 0; //@line 32131
  }
  HEAP32[$ReallocAsyncCtx5 >> 2] = 65; //@line 32133
  HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $6; //@line 32135
  HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 32137
  HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $8; //@line 32139
  HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 32141
  sp = STACKTOP; //@line 32142
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 32665
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32669
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32671
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32673
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32675
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32677
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 32679
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 32682
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 32683
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 32692
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 32693
    if (!___async) {
     ___async_unwind = 0; //@line 32696
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 740; //@line 32698
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 32700
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 32702
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 32704
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 32706
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 32708
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 32710
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 32712
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 32715
    sp = STACKTOP; //@line 32716
    return;
   }
  }
 }
 return;
}
function __ZN4mbed5Timer7read_msEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $21 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2831
 $2 = $0 + 16 | 0; //@line 2833
 $4 = HEAP32[$2 >> 2] | 0; //@line 2835
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 2838
 if (!(HEAP32[$0 >> 2] | 0)) {
  $29 = 0; //@line 2842
  $30 = 0; //@line 2842
  $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2843
  $32 = tempRet0; //@line 2844
  $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2845
  $34 = tempRet0; //@line 2846
  return $33 | 0; //@line 2847
 }
 $11 = HEAP32[$0 + 24 >> 2] | 0; //@line 2850
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2851
 $12 = _ticker_read_us($11) | 0; //@line 2852
 $13 = tempRet0; //@line 2853
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 122; //@line 2856
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2858
  $16 = $AsyncCtx + 8 | 0; //@line 2860
  HEAP32[$16 >> 2] = $4; //@line 2862
  HEAP32[$16 + 4 >> 2] = $7; //@line 2865
  sp = STACKTOP; //@line 2866
  return 0; //@line 2867
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2869
 $21 = $0 + 8 | 0; //@line 2871
 $27 = _i64Subtract($12 | 0, $13 | 0, HEAP32[$21 >> 2] | 0, HEAP32[$21 + 4 >> 2] | 0) | 0; //@line 2877
 $29 = $27; //@line 2879
 $30 = tempRet0; //@line 2879
 $31 = _i64Add($29 | 0, $30 | 0, $4 | 0, $7 | 0) | 0; //@line 2880
 $32 = tempRet0; //@line 2881
 $33 = ___udivdi3($31 | 0, $32 | 0, 1e3, 0) | 0; //@line 2882
 $34 = tempRet0; //@line 2883
 return $33 | 0; //@line 2884
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_215($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1178
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1182
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1184
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1185
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 1189
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 1190
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 1191
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 216; //@line 1194
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 1195
   HEAP32[$10 >> 2] = $4; //@line 1196
   $11 = $ReallocAsyncCtx + 8 | 0; //@line 1197
   HEAP32[$11 >> 2] = $AsyncRetVal; //@line 1198
   sp = STACKTOP; //@line 1199
   return;
  }
  ___async_unwind = 0; //@line 1202
  HEAP32[$ReallocAsyncCtx >> 2] = 216; //@line 1203
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 1204
  HEAP32[$10 >> 2] = $4; //@line 1205
  $11 = $ReallocAsyncCtx + 8 | 0; //@line 1206
  HEAP32[$11 >> 2] = $AsyncRetVal; //@line 1207
  sp = STACKTOP; //@line 1208
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 1215
 _mbed_assert_internal(11914, 11923, 548); //@line 1216
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 1219
  sp = STACKTOP; //@line 1220
  return;
 }
 ___async_unwind = 0; //@line 1223
 HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 1224
 sp = STACKTOP; //@line 1225
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_407($0) {
 $0 = $0 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29910
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29912
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 29915
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29917
 $12 = (HEAP8[$2 + 1177 >> 0] | 0) != 0; //@line 29923
 if (HEAP32[$2 + 1168 >> 2] | 0) {
  if ($12) {
   $26 = $4 ? 4 : 6; //@line 29927
   HEAP32[$2 + 2056 >> 2] = $26; //@line 29928
   $$pre$phi6Z2D = $26; //@line 29929
  } else {
   $$pre$phi6Z2D = $4 ? 4 : 6; //@line 29932
  }
  HEAP32[$2 + 2092 >> 2] = $$pre$phi6Z2D; //@line 29935
  return;
 }
 if ($12) {
  $14 = $4 ? 3 : 5; //@line 29940
  HEAP32[$2 + 2056 >> 2] = $14; //@line 29941
  $$pre$phiZ2D = $14; //@line 29942
 } else {
  $$pre$phiZ2D = $4 ? 3 : 5; //@line 29945
 }
 HEAP32[$2 + 2092 >> 2] = $$pre$phiZ2D; //@line 29948
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  return;
 }
 $20 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($2, HEAP32[$2 + 1780 >> 2] | 0) | 0; //@line 29956
 if ($20 >>> 0 < (HEAP32[$2 + 1776 >> 2] | 0) >>> 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29964
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 29965
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 420; //@line 29968
  sp = STACKTOP; //@line 29969
  return;
 }
 ___async_unwind = 0; //@line 29972
 HEAP32[$ReallocAsyncCtx3 >> 2] = 420; //@line 29973
 sp = STACKTOP; //@line 29974
 return;
}
function __ZN7LoRaMac16on_radio_tx_doneEj__async_cb_92($0) {
 $0 = $0 | 0;
 var $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26265
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26267
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26269
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26271
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26273
 if (!(HEAP8[$2 + 1177 >> 0] | 0)) {
  $22 = HEAP8[$2 + 1182 >> 0] | 0; //@line 26279
  HEAP8[$2 + 1183 >> 0] = $22; //@line 26281
  __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $22, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 26286
  HEAP32[$2 + 1780 >> 2] = $4; //@line 26288
  return;
 }
 $15 = (HEAP32[$2 + 1776 >> 2] | 0) - $6 | 0; //@line 26294
 $18 = $15 + (__ZN7LoRaPHY15get_ack_timeoutEv($2 + 4 | 0) | 0) | 0; //@line 26297
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 26298
 __ZN18LoRaWANTimeHandler5startER13timer_event_tj($8, $2 + 1856 | 0, $18); //@line 26299
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 404; //@line 26302
  $19 = $ReallocAsyncCtx + 4 | 0; //@line 26303
  HEAP32[$19 >> 2] = $2; //@line 26304
  $20 = $ReallocAsyncCtx + 8 | 0; //@line 26305
  HEAP32[$20 >> 2] = $4; //@line 26306
  sp = STACKTOP; //@line 26307
  return;
 }
 ___async_unwind = 0; //@line 26310
 HEAP32[$ReallocAsyncCtx >> 2] = 404; //@line 26311
 $19 = $ReallocAsyncCtx + 4 | 0; //@line 26312
 HEAP32[$19 >> 2] = $2; //@line 26313
 $20 = $ReallocAsyncCtx + 8 | 0; //@line 26314
 HEAP32[$20 >> 2] = $4; //@line 26315
 sp = STACKTOP; //@line 26316
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_282($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19615
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19619
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19621
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19623
 $8 = (HEAP32[$0 + 4 >> 2] | 0) + 16 | 0; //@line 19624
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 19625
 $9 = HEAP32[$4 >> 2] | 0; //@line 19626
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 19630
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 19631
  FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 19632
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 567; //@line 19635
   $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 19636
   HEAP32[$13 >> 2] = $8; //@line 19637
   sp = STACKTOP; //@line 19638
   return;
  }
  ___async_unwind = 0; //@line 19641
  HEAP32[$ReallocAsyncCtx3 >> 2] = 567; //@line 19642
  $13 = $ReallocAsyncCtx3 + 4 | 0; //@line 19643
  HEAP32[$13 >> 2] = $8; //@line 19644
  sp = STACKTOP; //@line 19645
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 19652
 _mbed_assert_internal(13476, 13494, 57); //@line 19653
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 19656
  sp = STACKTOP; //@line 19657
  return;
 }
 ___async_unwind = 0; //@line 19660
 HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 19661
 sp = STACKTOP; //@line 19662
 return;
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb($0) {
 $0 = $0 | 0;
 var $$pre$phi6Z2D = 0, $$pre$phiZ2D = 0, $12 = 0, $14 = 0, $2 = 0, $20 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 29839
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29841
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 29844
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29846
 $12 = (HEAP8[$2 + 1177 >> 0] | 0) != 0; //@line 29852
 if (HEAP32[$2 + 1168 >> 2] | 0) {
  if ($12) {
   $26 = $4 ? 4 : 6; //@line 29856
   HEAP32[$2 + 2056 >> 2] = $26; //@line 29857
   $$pre$phi6Z2D = $26; //@line 29858
  } else {
   $$pre$phi6Z2D = $4 ? 4 : 6; //@line 29861
  }
  HEAP32[$2 + 2092 >> 2] = $$pre$phi6Z2D; //@line 29864
  return;
 }
 if ($12) {
  $14 = $4 ? 3 : 5; //@line 29869
  HEAP32[$2 + 2056 >> 2] = $14; //@line 29870
  $$pre$phiZ2D = $14; //@line 29871
 } else {
  $$pre$phiZ2D = $4 ? 3 : 5; //@line 29874
 }
 HEAP32[$2 + 2092 >> 2] = $$pre$phiZ2D; //@line 29877
 if ((HEAP32[$6 >> 2] | 0) == 2) {
  return;
 }
 $20 = __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($2, HEAP32[$2 + 1780 >> 2] | 0) | 0; //@line 29885
 if ($20 >>> 0 < (HEAP32[$2 + 1776 >> 2] | 0) >>> 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 29893
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($2, $2 + 1836 | 0); //@line 29894
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 420; //@line 29897
  sp = STACKTOP; //@line 29898
  return;
 }
 ___async_unwind = 0; //@line 29901
 HEAP32[$ReallocAsyncCtx3 >> 2] = 420; //@line 29902
 sp = STACKTOP; //@line 29903
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13523
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13525
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13527
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13529
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13531
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13533
 $$pre = HEAP32[$2 >> 2] | 0; //@line 13534
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 13537
  _gpio_irq_set($10 + 28 | 0, 2, 1); //@line 13539
  return;
 }
 $13 = HEAP32[$$pre + 4 >> 2] | 0; //@line 13543
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 13544
 FUNCTION_TABLE_vii[$13 & 15]($6, $8); //@line 13545
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 108; //@line 13548
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 13549
  HEAP32[$14 >> 2] = $2; //@line 13550
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 13551
  HEAP32[$15 >> 2] = $4; //@line 13552
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 13553
  HEAP32[$16 >> 2] = $10; //@line 13554
  sp = STACKTOP; //@line 13555
  return;
 }
 ___async_unwind = 0; //@line 13558
 HEAP32[$ReallocAsyncCtx2 >> 2] = 108; //@line 13559
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 13560
 HEAP32[$14 >> 2] = $2; //@line 13561
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 13562
 HEAP32[$15 >> 2] = $4; //@line 13563
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 13564
 HEAP32[$16 >> 2] = $10; //@line 13565
 sp = STACKTOP; //@line 13566
 return;
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 3035
 if (!$2) {
  $$0 = -1; //@line 3038
  return $$0 | 0; //@line 3039
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 3042
 $5 = $0 + 20 | 0; //@line 3043
 HEAP32[$5 >> 2] = 0; //@line 3044
 $6 = $0 + 16 | 0; //@line 3045
 HEAP32[$6 >> 2] = 0; //@line 3046
 if ($1 | 0) {
  $$034$i = $1; //@line 3049
  $23 = 0; //@line 3049
  do {
   $23 = $23 + 1 | 0; //@line 3051
   $$034$i = $$034$i >>> 1; //@line 3052
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 3060
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3063
 HEAP32[$0 + 28 >> 2] = $1; //@line 3065
 HEAP32[$0 + 32 >> 2] = $2; //@line 3067
 HEAP32[$0 >> 2] = 0; //@line 3068
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3071
 HEAP8[$0 + 9 >> 0] = 0; //@line 3073
 HEAP8[$0 + 8 >> 0] = 0; //@line 3075
 HEAP8[$0 + 36 >> 0] = 0; //@line 3077
 HEAP32[$0 + 40 >> 2] = 0; //@line 3079
 HEAP32[$0 + 44 >> 2] = 0; //@line 3081
 HEAP8[$0 + 184 >> 0] = 0; //@line 3083
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3085
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 3088
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3091
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 3094
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3097
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 3100
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 3103
 $$0 = $$033$i; //@line 3104
 return $$0 | 0; //@line 3105
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28097
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28099
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28104
 $7 = HEAP32[$2 >> 2] | 0; //@line 28105
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] | 0; //@line 28108
 if (HEAP8[$0 + 8 >> 0] & 1) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 28110
  FUNCTION_TABLE_vii[$10 & 15]($7, 0); //@line 28111
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 28114
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 28115
   HEAP32[$12 >> 2] = $2; //@line 28116
   sp = STACKTOP; //@line 28117
   return;
  }
  ___async_unwind = 0; //@line 28120
  HEAP32[$ReallocAsyncCtx3 >> 2] = 552; //@line 28121
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 28122
  HEAP32[$12 >> 2] = $2; //@line 28123
  sp = STACKTOP; //@line 28124
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 28127
  FUNCTION_TABLE_vii[$10 & 15]($7, $6); //@line 28128
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 551; //@line 28131
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 28132
   HEAP32[$11 >> 2] = $2; //@line 28133
   sp = STACKTOP; //@line 28134
   return;
  }
  ___async_unwind = 0; //@line 28137
  HEAP32[$ReallocAsyncCtx2 >> 2] = 551; //@line 28138
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 28139
  HEAP32[$11 >> 2] = $2; //@line 28140
  sp = STACKTOP; //@line 28141
  return;
 }
}
function __ZN7LoRaPHY20put_radio_to_standbyEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22376
 $1 = $0 + 4 | 0; //@line 22377
 $2 = HEAP32[$1 >> 2] | 0; //@line 22378
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22381
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22382
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22383
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 544; //@line 22386
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22388
  sp = STACKTOP; //@line 22389
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22392
 $7 = HEAP32[$1 >> 2] | 0; //@line 22393
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 12 >> 2] | 0; //@line 22396
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22397
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 22398
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 545; //@line 22401
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22403
  sp = STACKTOP; //@line 22404
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22407
 $12 = HEAP32[$1 >> 2] | 0; //@line 22408
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 22411
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22412
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 22413
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 546; //@line 22416
  sp = STACKTOP; //@line 22417
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22420
  return;
 }
}
function __ZN7LoRaPHY18put_radio_to_sleepEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $10 = 0, $12 = 0, $15 = 0, $2 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22324
 $1 = $0 + 4 | 0; //@line 22325
 $2 = HEAP32[$1 >> 2] | 0; //@line 22326
 $5 = HEAP32[(HEAP32[$2 >> 2] | 0) + 72 >> 2] | 0; //@line 22329
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 22330
 FUNCTION_TABLE_vi[$5 & 1023]($2); //@line 22331
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 541; //@line 22334
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 22336
  sp = STACKTOP; //@line 22337
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 22340
 $7 = HEAP32[$1 >> 2] | 0; //@line 22341
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 8 >> 2] | 0; //@line 22344
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 22345
 FUNCTION_TABLE_vi[$10 & 1023]($7); //@line 22346
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 542; //@line 22349
  HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 22351
  sp = STACKTOP; //@line 22352
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 22355
 $12 = HEAP32[$1 >> 2] | 0; //@line 22356
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 76 >> 2] | 0; //@line 22359
 $AsyncCtx5 = _emscripten_alloc_async_context(4, sp) | 0; //@line 22360
 FUNCTION_TABLE_vi[$15 & 1023]($12); //@line 22361
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 543; //@line 22364
  sp = STACKTOP; //@line 22365
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 22368
  return;
 }
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 757
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 767
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 767
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 767
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 771
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 774
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 777
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 785
  } else {
   $20 = 0; //@line 787
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 797
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 801
  HEAP32[___async_retval >> 2] = $$1; //@line 803
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 806
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 807
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 811
  ___async_unwind = 0; //@line 812
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 707; //@line 814
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 816
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 818
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 820
 sp = STACKTOP; //@line 821
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23834
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23838
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23840
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23842
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23844
 $11 = $4 + 12 | 0; //@line 23846
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23847
 $14 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 16 >> 0] | 0; //@line 23850
 $17 = HEAP8[(__ZNK7LoRaMac21get_mlme_confirmationEv($6) | 0) + 17 >> 0] | 0; //@line 23853
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 23854
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1_($8, $4, $14, $17) | 0; //@line 23855
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 311; //@line 23858
  $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 23859
  HEAP32[$19 >> 2] = $11; //@line 23860
  $20 = $ReallocAsyncCtx6 + 8 | 0; //@line 23861
  HEAP32[$20 >> 2] = $10; //@line 23862
  sp = STACKTOP; //@line 23863
  return;
 }
 HEAP32[___async_retval >> 2] = $18; //@line 23867
 ___async_unwind = 0; //@line 23868
 HEAP32[$ReallocAsyncCtx6 >> 2] = 311; //@line 23869
 $19 = $ReallocAsyncCtx6 + 4 | 0; //@line 23870
 HEAP32[$19 >> 2] = $11; //@line 23871
 $20 = $ReallocAsyncCtx6 + 8 | 0; //@line 23872
 HEAP32[$20 >> 2] = $10; //@line 23873
 sp = STACKTOP; //@line 23874
 return;
}
function _main__async_cb_86($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 25777
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25779
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25781
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25783
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25785
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25787
 _mbed_trace_init() | 0; //@line 25788
 if (!(__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE(20484, 20280) | 0)) {
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(24) | 0; //@line 25792
  $13 = _equeue_alloc(20280, 32) | 0; //@line 25793
  if (!___async) {
   HEAP32[___async_retval >> 2] = $13; //@line 25797
   ___async_unwind = 0; //@line 25798
  }
  HEAP32[$ReallocAsyncCtx14 >> 2] = 671; //@line 25800
  HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $4; //@line 25802
  HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $6; //@line 25804
  HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $8; //@line 25806
  HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $2; //@line 25808
  HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $10; //@line 25810
  sp = STACKTOP; //@line 25811
  return;
 }
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(4) | 0; //@line 25814
 _puts(15182) | 0; //@line 25815
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 670; //@line 25818
  sp = STACKTOP; //@line 25819
  return;
 }
 ___async_unwind = 0; //@line 25822
 HEAP32[$ReallocAsyncCtx8 >> 2] = 670; //@line 25823
 sp = STACKTOP; //@line 25824
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_261($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17750
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17752
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17754
 $6 = HEAP32[$2 + 2512 >> 2] | 0; //@line 17756
 if (!$6) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17760
  __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 17761
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 17764
   $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 17765
   HEAP32[$12 >> 2] = $2; //@line 17766
   sp = STACKTOP; //@line 17767
   return;
  }
  ___async_unwind = 0; //@line 17770
  HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 17771
  $12 = $ReallocAsyncCtx5 + 4 | 0; //@line 17772
  HEAP32[$12 >> 2] = $2; //@line 17773
  sp = STACKTOP; //@line 17774
  return;
 } else {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 17778
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17779
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 17780
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 170; //@line 17783
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 17784
   HEAP32[$10 >> 2] = $2; //@line 17785
   sp = STACKTOP; //@line 17786
   return;
  }
  ___async_unwind = 0; //@line 17789
  HEAP32[$ReallocAsyncCtx3 >> 2] = 170; //@line 17790
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 17791
  HEAP32[$10 >> 2] = $2; //@line 17792
  sp = STACKTOP; //@line 17793
  return;
 }
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 936
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 938
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 940
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 942
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 947
  } else {
   $9 = $4 + 4 | 0; //@line 949
   $10 = HEAP32[$9 >> 2] | 0; //@line 950
   $11 = $4 + 8 | 0; //@line 951
   $12 = HEAP32[$11 >> 2] | 0; //@line 952
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 956
    HEAP32[$6 >> 2] = 0; //@line 957
    HEAP32[$2 >> 2] = 0; //@line 958
    HEAP32[$11 >> 2] = 0; //@line 959
    HEAP32[$9 >> 2] = 0; //@line 960
    $$0 = 0; //@line 961
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 968
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 969
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 970
   if (!___async) {
    ___async_unwind = 0; //@line 973
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 709; //@line 975
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 977
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 979
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 981
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 983
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 985
   sp = STACKTOP; //@line 986
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 991
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27228
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27230
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27232
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27234
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27236
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27238
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27240
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27242
 $16 = $4 + 12 | 0; //@line 27244
 HEAP32[$4 >> 2] = 464; //@line 27245
 HEAP32[$4 + 4 >> 2] = 0; //@line 27247
 HEAP32[$4 + 8 >> 2] = $2; //@line 27249
 HEAP32[$16 >> 2] = 860; //@line 27250
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(36) | 0; //@line 27251
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1816 | 0, $4); //@line 27252
 if (!___async) {
  ___async_unwind = 0; //@line 27255
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 465; //@line 27257
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 27259
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $10; //@line 27261
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 27263
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $12; //@line 27265
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $14; //@line 27267
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $8; //@line 27269
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $4; //@line 27271
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 27273
 sp = STACKTOP; //@line 27274
 return;
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_367($0) {
 $0 = $0 | 0;
 var $$059 = 0, $10 = 0, $12 = 0, $17 = 0, $19 = 0, $2 = 0, $25 = 0, $31 = 0, $37 = 0, $4 = 0, $42 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26064
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26066
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26068
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 26072
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26074
 if (HEAP32[___async_retval >> 2] | 0) {
  $$059 = -1014; //@line 26081
  $42 = ___async_retval; //@line 26082
  HEAP32[$42 >> 2] = $$059; //@line 26083
  return;
 }
 $17 = HEAP32[$2 >> 2] | 0; //@line 26086
 $19 = HEAP16[$4 >> 1] | 0; //@line 26088
 HEAP16[$4 >> 1] = $19 + 1 << 16 >> 16; //@line 26090
 HEAP8[($19 & 65535) + ($6 + 1185) >> 0] = $17; //@line 26093
 $25 = HEAP16[$4 >> 1] | 0; //@line 26096
 HEAP16[$4 >> 1] = $25 + 1 << 16 >> 16; //@line 26098
 HEAP8[($25 & 65535) + ($6 + 1185) >> 0] = $17 >>> 8; //@line 26101
 $31 = HEAP16[$4 >> 1] | 0; //@line 26104
 HEAP16[$4 >> 1] = $31 + 1 << 16 >> 16; //@line 26106
 HEAP8[($31 & 65535) + ($6 + 1185) >> 0] = $17 >>> 16; //@line 26109
 $37 = HEAP16[$4 >> 1] | 0; //@line 26112
 HEAP16[$4 >> 1] = $37 + 1 << 16 >> 16; //@line 26114
 HEAP8[($37 & 65535) + ($6 + 1185) >> 0] = $17 >>> 24; //@line 26117
 HEAP32[$12 >> 2] = $10 & 255; //@line 26119
 _mbed_tracef(16, 12709, 12902, $12); //@line 26120
 $$059 = 0; //@line 26121
 $42 = ___async_retval; //@line 26122
 HEAP32[$42 >> 2] = $$059; //@line 26123
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_395($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 29119
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29121
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29123
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 29125
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29127
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29129
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 29131
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29133
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29135
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 29137
 $19 = HEAP32[$2 >> 2] | 0; //@line 29138
 $22 = HEAP32[(HEAP32[$19 >> 2] | 0) + 32 >> 2] | 0; //@line 29141
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(36) | 0; //@line 29142
 FUNCTION_TABLE_vii[$22 & 15]($19, $4); //@line 29143
 if (!___async) {
  ___async_unwind = 0; //@line 29146
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 521; //@line 29148
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $6; //@line 29150
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 29152
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 29154
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 29156
 HEAP8[$ReallocAsyncCtx5 + 20 >> 0] = $12; //@line 29158
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 29160
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 29162
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 29164
 sp = STACKTOP; //@line 29165
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18901
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18903
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18905
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18907
 $7 = $2 + 12 | 0; //@line 18908
 $8 = HEAP32[$7 >> 2] | 0; //@line 18909
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 18912
  HEAP32[$6 + 16 >> 2] = 0; //@line 18914
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 18918
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 18919
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 18920
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 562; //@line 18923
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 18924
  HEAP32[$12 >> 2] = $7; //@line 18925
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 18926
  HEAP32[$13 >> 2] = $4; //@line 18927
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 18928
  HEAP32[$14 >> 2] = $6; //@line 18929
  sp = STACKTOP; //@line 18930
  return;
 }
 ___async_unwind = 0; //@line 18933
 HEAP32[$ReallocAsyncCtx2 >> 2] = 562; //@line 18934
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 18935
 HEAP32[$12 >> 2] = $7; //@line 18936
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 18937
 HEAP32[$13 >> 2] = $4; //@line 18938
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 18939
 HEAP32[$14 >> 2] = $6; //@line 18940
 sp = STACKTOP; //@line 18941
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6701
 STACKTOP = STACKTOP + 16 | 0; //@line 6702
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6702
 $$byval_copy = sp + 8 | 0; //@line 6703
 $1 = sp; //@line 6704
 HEAP32[$0 + 3172 >> 2] = __ZN7LoRaMac16get_current_timeEv($0) | 0; //@line 6707
 $5 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6709
 HEAP32[$1 >> 2] = 203; //@line 6710
 HEAP32[$1 + 4 >> 2] = 0; //@line 6712
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6713
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 6714
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6714
 $6 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($5, $0, $$byval_copy) | 0; //@line 6715
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 204; //@line 6718
  sp = STACKTOP; //@line 6719
  STACKTOP = sp; //@line 6720
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6722
 if ($6 | 0) {
  STACKTOP = sp; //@line 6725
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6727
 _mbed_assert_internal(11914, 11923, 508); //@line 6728
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 205; //@line 6731
  sp = STACKTOP; //@line 6732
  STACKTOP = sp; //@line 6733
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6735
 STACKTOP = sp; //@line 6736
 return;
}
function _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0$lcssa = 0, $$023 = 0, $$024 = 0, $$02529 = 0, $$02628 = 0, $$030 = 0, $$in = 0, $14 = 0, $16 = 0, $25 = 0, $7 = 0;
 $7 = HEAP32[$2 >> 2] | 0; //@line 2099
 if ($7 >>> 0 > 15) {
  $$024 = -33; //@line 2102
  return $$024 | 0; //@line 2103
 }
 if (!$1) {
  $$0$lcssa = $7; //@line 2107
 } else {
  $$02529 = $6; //@line 2109
  $$02628 = $5; //@line 2109
  $$030 = $7; //@line 2109
  $$in = $1; //@line 2109
  while (1) {
   $$in = $$in + -1 | 0; //@line 2111
   L7 : do {
    if (!$$030) {
     _mbedtls_internal_aes_encrypt($0, $3, $4) | 0; //@line 2115
     $$023 = 16; //@line 2116
     do {
      if (($$023 | 0) <= 0) {
       break L7;
      }
      $$023 = $$023 + -1 | 0; //@line 2122
      $14 = $3 + $$023 | 0; //@line 2123
      $16 = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 2125
      HEAP8[$14 >> 0] = $16; //@line 2126
     } while (!($16 << 24 >> 24));
    }
   } while (0);
   HEAP8[$$02529 >> 0] = HEAP8[$4 + $$030 >> 0] ^ HEAP8[$$02628 >> 0]; //@line 2142
   $25 = $$030 + 1 & 15; //@line 2144
   if (!$$in) {
    $$0$lcssa = $25; //@line 2147
    break;
   } else {
    $$02529 = $$02529 + 1 | 0; //@line 2150
    $$02628 = $$02628 + 1 | 0; //@line 2150
    $$030 = $25; //@line 2150
   }
  }
 }
 HEAP32[$2 >> 2] = $$0$lcssa; //@line 2154
 $$024 = 0; //@line 2155
 return $$024 | 0; //@line 2156
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_242($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14886
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14888
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14890
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14892
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14894
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 14899
  return;
 }
 dest = $2 + 4 | 0; //@line 14903
 stop = dest + 52 | 0; //@line 14903
 do {
  HEAP32[dest >> 2] = 0; //@line 14903
  dest = dest + 4 | 0; //@line 14903
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 14904
 HEAP32[$2 + 8 >> 2] = $4; //@line 14906
 HEAP32[$2 + 12 >> 2] = -1; //@line 14908
 HEAP32[$2 + 48 >> 2] = 1; //@line 14910
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 14913
 $16 = HEAP32[$6 >> 2] | 0; //@line 14914
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 14915
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 14916
 if (!___async) {
  ___async_unwind = 0; //@line 14919
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 725; //@line 14921
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 14923
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 14925
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 14927
 sp = STACKTOP; //@line 14928
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 15264
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 15269
    $$0 = 1; //@line 15270
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 15283
     $$0 = 1; //@line 15284
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 15288
     $$0 = -1; //@line 15289
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 15299
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 15303
    $$0 = 2; //@line 15304
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 15316
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 15322
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 15326
    $$0 = 3; //@line 15327
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 15337
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 15343
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 15349
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 15353
    $$0 = 4; //@line 15354
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 15358
    $$0 = -1; //@line 15359
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 15364
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $13 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17341
 if (!(__ZN7LoRaPHY32is_custom_channel_plan_supportedEv(HEAP32[$0 >> 2] | 0) | 0)) {
  $$0 = -1002; //@line 17345
  return $$0 | 0; //@line 17346
 }
 if (((__ZN7LoRaPHY19get_max_nb_channelsEv(HEAP32[$0 >> 2] | 0) | 0) & 255) <= ($1 & 255)) {
  $$0 = -1003; //@line 17352
  return $$0 | 0; //@line 17353
 }
 $7 = HEAP32[$0 >> 2] | 0; //@line 17355
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 64 >> 2] | 0; //@line 17358
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 17359
 $11 = FUNCTION_TABLE_iii[$10 & 31]($7, $1) | 0; //@line 17360
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 486; //@line 17363
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 17365
  sp = STACKTOP; //@line 17366
  return 0; //@line 17367
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17369
 if (!$11) {
  $$0 = -1003; //@line 17371
  return $$0 | 0; //@line 17372
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 17374
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 17375
 __ZN7LoRaPHY18put_radio_to_sleepEv($13); //@line 17376
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 487; //@line 17379
  sp = STACKTOP; //@line 17380
  return 0; //@line 17381
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 17383
 $$0 = 0; //@line 17384
 return $$0 | 0; //@line 17385
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_310($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21883
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21885
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21887
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 21889
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 21891
 $10 = HEAP32[$0 + 16 >> 2] | 0; //@line 21893
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 21895
 $15 = $2 + 12 | 0; //@line 21899
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 21900
 $16 = $2 + 16 | 0; //@line 21901
 HEAP8[$16 >> 0] = $6; //@line 21902
 HEAP8[$2 + 17 >> 0] = $8; //@line 21904
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 21905
 $18 = _equeue_alloc($10, 20) | 0; //@line 21906
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 21910
  ___async_unwind = 0; //@line 21911
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 326; //@line 21913
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $15; //@line 21915
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 21917
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $12; //@line 21919
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $15; //@line 21921
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $16; //@line 21923
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $10; //@line 21925
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $2; //@line 21927
 sp = STACKTOP; //@line 21928
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_287($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $21 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20498
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20502
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20504
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20506
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20508
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20512
 if (!(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] & 1)) {
  $21 = (__ZNK7LoRaMac16get_device_classEv($4) | 0) == 2; //@line 20520
  HEAP32[$6 >> 2] = $21 ? 5 : 2; //@line 20522
 }
 if (!(HEAP8[(__ZNK7LoRaMac19get_mlme_indicationEv($4) | 0) + 4 >> 0] | 0)) {
  HEAP8[$8 + 2911 >> 0] = 1; //@line 20530
  return;
 }
 _mbed_tracef(16, 12021, 12252, $10); //@line 20533
 __ZN7LoRaMac21post_process_mlme_indEv($4); //@line 20534
 _mbed_tracef(16, 12021, 12276, $14); //@line 20535
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20536
 __ZN12LoRaWANStack23mlme_indication_handlerEv($8); //@line 20537
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20540
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 20541
  HEAP32[$26 >> 2] = $8; //@line 20542
  sp = STACKTOP; //@line 20543
  return;
 }
 ___async_unwind = 0; //@line 20546
 HEAP32[$ReallocAsyncCtx2 >> 2] = 297; //@line 20547
 $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 20548
 HEAP32[$26 >> 2] = $8; //@line 20549
 sp = STACKTOP; //@line 20550
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_331($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23301
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23305
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23309
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23311
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23313
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23315
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23317
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23319
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23321
 if (!$AsyncRetVal) {
  _memcpy(HEAP32[$0 + 4 >> 2] | 0, $4 | 0, HEAP32[$0 + 12 >> 2] | 0) | 0; //@line 23324
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(36) | 0; //@line 23326
 _mbedtls_platform_zeroize($8, 16); //@line 23327
 if (!___async) {
  ___async_unwind = 0; //@line 23330
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 605; //@line 23332
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $10; //@line 23334
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $12; //@line 23336
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $14; //@line 23338
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $4; //@line 23340
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $AsyncRetVal; //@line 23342
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $16; //@line 23344
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $18; //@line 23346
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $8; //@line 23348
 sp = STACKTOP; //@line 23349
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_192($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32801
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32805
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32807
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32809
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32811
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 32813
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 32816
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 32817
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 32823
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 32824
   if (!___async) {
    ___async_unwind = 0; //@line 32827
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 738; //@line 32829
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 32831
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 32833
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 32835
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 32837
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 32839
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 32841
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 32844
   sp = STACKTOP; //@line 32845
   return;
  }
 }
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv($0) {
 $0 = $0 | 0;
 var $10 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8633
 STACKTOP = STACKTOP + 16 | 0; //@line 8634
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 8634
 _mbed_tracef(16, 12021, 12221, sp); //@line 8636
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 8637
 __ZN7LoRaMac19on_radio_tx_timeoutEv($0); //@line 8638
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 279; //@line 8641
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8643
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 8645
  sp = STACKTOP; //@line 8646
  STACKTOP = sp; //@line 8647
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8649
 $3 = $0 + 2904 | 0; //@line 8650
 HEAP32[$3 >> 2] = HEAP32[$3 >> 2] & -18 | 1; //@line 8654
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8655
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 8656
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 280; //@line 8659
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 8661
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8663
  sp = STACKTOP; //@line 8664
  STACKTOP = sp; //@line 8665
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8667
  $10 = (__ZNK7LoRaMac16get_device_classEv($0) | 0) == 2; //@line 8669
  HEAP32[$0 + 2496 >> 2] = $10 ? 5 : 2; //@line 8672
  STACKTOP = sp; //@line 8673
  return;
 }
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_151($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30119
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30121
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30123
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 30125
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 30127
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$2 + 2020 >> 2] = 13; //@line 30133
 }
 $12 = $2 + 476 | 0; //@line 30135
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 30139
 $16 = __ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY($12, $4, 0, $6, $8, $2 + 2084 | 0, $2 + 1876 | 0, $2 + 4 | 0) | 0; //@line 30140
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 389; //@line 30143
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 30144
  HEAP32[$17 >> 2] = $12; //@line 30145
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 30146
  HEAP32[$18 >> 2] = $2; //@line 30147
  sp = STACKTOP; //@line 30148
  return;
 }
 HEAP32[___async_retval >> 2] = $16; //@line 30152
 ___async_unwind = 0; //@line 30153
 HEAP32[$ReallocAsyncCtx4 >> 2] = 389; //@line 30154
 $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 30155
 HEAP32[$17 >> 2] = $12; //@line 30156
 $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 30157
 HEAP32[$18 >> 2] = $2; //@line 30158
 sp = STACKTOP; //@line 30159
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $8 = 0, $9 = 0, dest = 0, stop = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19008
 HEAP8[$2 + 2376 >> 0] = 0; //@line 19010
 HEAP8[$2 + 1181 >> 0] = 0; //@line 19012
 HEAP8[$2 + 1175 >> 0] = 1; //@line 19014
 HEAP8[$2 + 1177 >> 0] = 0; //@line 19016
 HEAP8[$2 + 1178 >> 0] = 0; //@line 19018
 $8 = $2 + 476 | 0; //@line 19019
 __ZN14LoRaMacCommand20clear_command_bufferEv($8); //@line 19020
 __ZN14LoRaMacCommand19clear_repeat_bufferEv($8); //@line 19021
 __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($8); //@line 19022
 $9 = $2 + 2052 | 0; //@line 19023
 HEAP32[$9 >> 2] = 0; //@line 19024
 HEAP32[$9 + 4 >> 2] = 0; //@line 19024
 HEAP32[$9 + 8 >> 2] = 0; //@line 19024
 HEAP32[$9 + 12 >> 2] = 0; //@line 19024
 HEAP32[$9 + 16 >> 2] = 0; //@line 19024
 HEAP32[$9 + 20 >> 2] = 0; //@line 19024
 HEAP32[$2 + 2056 >> 2] = 1; //@line 19026
 $11 = $2 + 2084 | 0; //@line 19027
 HEAP32[$11 >> 2] = 0; //@line 19028
 HEAP32[$11 + 4 >> 2] = 0; //@line 19028
 HEAP32[$11 + 8 >> 2] = 0; //@line 19028
 HEAP32[$11 + 12 >> 2] = 0; //@line 19028
 HEAP32[$11 + 16 >> 2] = 0; //@line 19028
 HEAP32[$2 + 2092 >> 2] = 1; //@line 19030
 dest = $2 + 2012 | 0; //@line 19032
 stop = dest + 40 | 0; //@line 19032
 do {
  HEAP32[dest >> 2] = 0; //@line 19032
  dest = dest + 4 | 0; //@line 19032
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 + 2020 >> 2] = 1; //@line 19034
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_341($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23976
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23980
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23982
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23983
 if ($6 | 0) {
  $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 23987
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 23988
  FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 23989
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 312; //@line 23992
   $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 23993
   HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23994
   sp = STACKTOP; //@line 23995
   return;
  }
  ___async_unwind = 0; //@line 23998
  HEAP32[$ReallocAsyncCtx2 >> 2] = 312; //@line 23999
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 24000
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24001
  sp = STACKTOP; //@line 24002
  return;
 }
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 24009
 _mbed_assert_internal(11914, 11923, 886); //@line 24010
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 24013
  sp = STACKTOP; //@line 24014
  return;
 }
 ___async_unwind = 0; //@line 24017
 HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 24018
 sp = STACKTOP; //@line 24019
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26716
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26718
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26720
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26724
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26726
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26728
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 26731
  _mbed_tracef(2, 12709, 12806, $4); //@line 26732
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 26734
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 26737
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 26738
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 423; //@line 26741
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 26742
  HEAP32[$14 >> 2] = $8; //@line 26743
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 26744
  HEAP32[$15 >> 2] = $10; //@line 26745
  sp = STACKTOP; //@line 26746
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 26750
 ___async_unwind = 0; //@line 26751
 HEAP32[$ReallocAsyncCtx3 >> 2] = 423; //@line 26752
 $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 26753
 HEAP32[$14 >> 2] = $8; //@line 26754
 $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 26755
 HEAP32[$15 >> 2] = $10; //@line 26756
 sp = STACKTOP; //@line 26757
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_115($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 27818
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27820
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27822
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27824
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27826
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27828
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27830
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27832
 _srand(HEAP32[___async_retval >> 2] | 0); //@line 27835
 $16 = $2 + 1172 | 0; //@line 27836
 HEAP8[$16 >> 0] = 1; //@line 27837
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(36) | 0; //@line 27838
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 27839
 if (!___async) {
  ___async_unwind = 0; //@line 27842
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 459; //@line 27844
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 27846
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 27848
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 27850
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $16; //@line 27852
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $8; //@line 27854
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $10; //@line 27856
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $12; //@line 27858
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $14; //@line 27860
 sp = STACKTOP; //@line 27861
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10280
 $2 = HEAP8[$0 + 16 >> 0] | 0; //@line 10282
 $4 = HEAP8[$0 + 17 >> 0] | 0; //@line 10284
 $5 = $0 + 12 | 0; //@line 10285
 $6 = HEAP32[$5 >> 2] | 0; //@line 10286
 do {
  if (!$6) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10290
   _mbed_assert_internal(14839, 14844, 1677); //@line 10291
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 338; //@line 10294
    HEAP32[$AsyncCtx2 + 4 >> 2] = $5; //@line 10296
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 10298
    HEAP8[$AsyncCtx2 + 12 >> 0] = $2; //@line 10300
    HEAP8[$AsyncCtx2 + 13 >> 0] = $4; //@line 10302
    sp = STACKTOP; //@line 10303
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10306
    $13 = HEAP32[$5 >> 2] | 0; //@line 10308
    break;
   }
  } else {
   $13 = $6; //@line 10312
  }
 } while (0);
 $12 = HEAP32[$13 >> 2] | 0; //@line 10315
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10316
 FUNCTION_TABLE_viii[$12 & 7]($0, $2, $4); //@line 10317
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 339; //@line 10320
  sp = STACKTOP; //@line 10321
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10324
  return;
 }
}
function __ZN7LoRaMac4joinEb__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28579
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28581
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28583
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28587
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28589
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28591
 if ($AsyncRetVal | 0) {
  HEAP32[$4 >> 2] = $AsyncRetVal; //@line 28594
  _mbed_tracef(2, 12709, 12806, $4); //@line 28595
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 28597
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 28600
 $13 = __ZN7LoRaMac11schedule_txEv($2) | 0; //@line 28601
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 457; //@line 28604
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 28605
  HEAP32[$14 >> 2] = $8; //@line 28606
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 28607
  HEAP32[$15 >> 2] = $10; //@line 28608
  sp = STACKTOP; //@line 28609
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 28613
 ___async_unwind = 0; //@line 28614
 HEAP32[$ReallocAsyncCtx2 >> 2] = 457; //@line 28615
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 28616
 HEAP32[$14 >> 2] = $8; //@line 28617
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 28618
 HEAP32[$15 >> 2] = $10; //@line 28619
 sp = STACKTOP; //@line 28620
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $1 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 6891
 STACKTOP = STACKTOP + 16 | 0; //@line 6892
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6892
 $$byval_copy = sp + 8 | 0; //@line 6893
 $1 = sp; //@line 6894
 $3 = HEAP32[$0 + 3168 >> 2] | 0; //@line 6896
 HEAP32[$1 >> 2] = 212; //@line 6897
 HEAP32[$1 + 4 >> 2] = 0; //@line 6899
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6900
 HEAP32[$$byval_copy >> 2] = HEAP32[$1 >> 2]; //@line 6901
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 6901
 $4 = __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE($3, $0, $$byval_copy) | 0; //@line 6902
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 213; //@line 6905
  sp = STACKTOP; //@line 6906
  STACKTOP = sp; //@line 6907
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 6909
 if ($4 | 0) {
  STACKTOP = sp; //@line 6912
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 6914
 _mbed_assert_internal(11914, 11923, 540); //@line 6915
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 214; //@line 6918
  sp = STACKTOP; //@line 6919
  STACKTOP = sp; //@line 6920
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 6922
 STACKTOP = sp; //@line 6923
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_108($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 27281
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27283
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27285
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27287
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27289
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27291
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27293
 $14 = $4 + 12 | 0; //@line 27295
 HEAP32[$4 >> 2] = 467; //@line 27296
 HEAP32[$4 + 4 >> 2] = 0; //@line 27298
 HEAP32[$4 + 8 >> 2] = $2; //@line 27300
 HEAP32[$14 >> 2] = 860; //@line 27301
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 27302
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1836 | 0, $4); //@line 27303
 if (!___async) {
  ___async_unwind = 0; //@line 27306
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 468; //@line 27308
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $14; //@line 27310
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $2; //@line 27312
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $8; //@line 27314
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $6; //@line 27316
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $4; //@line 27318
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $10; //@line 27320
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $12; //@line 27322
 sp = STACKTOP; //@line 27323
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_277($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19413
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19415
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 19417
 if ($4 | 0) {
  $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 19422
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 19423
  FUNCTION_TABLE_vi[$8 & 1023]($2 + 16 | 0); //@line 19424
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19427
   $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 19428
   HEAP32[$9 >> 2] = $2; //@line 19429
   sp = STACKTOP; //@line 19430
   return;
  }
  ___async_unwind = 0; //@line 19433
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 19434
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 19435
  HEAP32[$9 >> 2] = $2; //@line 19436
  sp = STACKTOP; //@line 19437
  return;
 }
 $11 = HEAP32[$2 + 12 >> 2] | 0; //@line 19441
 if (!$11) {
  return;
 }
 $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 19447
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19448
 FUNCTION_TABLE_vi[$14 & 1023]($2); //@line 19449
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19452
  sp = STACKTOP; //@line 19453
  return;
 }
 ___async_unwind = 0; //@line 19456
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19457
 sp = STACKTOP; //@line 19458
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_414($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30313
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30315
 if ((HEAP32[$2 + 2380 >> 2] | 0) == 2) {
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 30320
  __ZN7LoRaMac15open_rx2_windowEv($2); //@line 30321
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 416; //@line 30324
   $6 = $ReallocAsyncCtx + 4 | 0; //@line 30325
   HEAP32[$6 >> 2] = $2; //@line 30326
   sp = STACKTOP; //@line 30327
   return;
  }
  ___async_unwind = 0; //@line 30330
  HEAP32[$ReallocAsyncCtx >> 2] = 416; //@line 30331
  $6 = $ReallocAsyncCtx + 4 | 0; //@line 30332
  HEAP32[$6 >> 2] = $2; //@line 30333
  sp = STACKTOP; //@line 30334
  return;
 } else {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30338
  __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 30339
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 417; //@line 30342
   $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 30343
   HEAP32[$8 >> 2] = $2; //@line 30344
   sp = STACKTOP; //@line 30345
   return;
  }
  ___async_unwind = 0; //@line 30348
  HEAP32[$ReallocAsyncCtx2 >> 2] = 417; //@line 30349
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 30350
  HEAP32[$8 >> 2] = $2; //@line 30351
  sp = STACKTOP; //@line 30352
  return;
 }
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 3115
 HEAP32[$0 + 20 >> 2] = 0; //@line 3117
 $5 = $0 + 16 | 0; //@line 3118
 HEAP32[$5 >> 2] = 0; //@line 3119
 if ($1 | 0) {
  $$034 = $1; //@line 3122
  $22 = 0; //@line 3122
  do {
   $22 = $22 + 1 | 0; //@line 3124
   $$034 = $$034 >>> 1; //@line 3125
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 3133
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 3136
 HEAP32[$0 + 28 >> 2] = $1; //@line 3138
 HEAP32[$0 + 32 >> 2] = $2; //@line 3140
 HEAP32[$0 >> 2] = 0; //@line 3141
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 3144
 HEAP8[$0 + 9 >> 0] = 0; //@line 3146
 HEAP8[$0 + 8 >> 0] = 0; //@line 3148
 HEAP8[$0 + 36 >> 0] = 0; //@line 3150
 HEAP32[$0 + 40 >> 2] = 0; //@line 3152
 HEAP32[$0 + 44 >> 2] = 0; //@line 3154
 HEAP8[$0 + 184 >> 0] = 0; //@line 3156
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 3158
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 3161
  return $$033 | 0; //@line 3162
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 3165
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 3168
  return $$033 | 0; //@line 3169
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 3172
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 3175
 return $$033 | 0; //@line 3176
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 14148
  $8 = $0; //@line 14148
  $9 = $1; //@line 14148
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 14150
   $$0914 = $$0914 + -1 | 0; //@line 14154
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 14155
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 14156
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 14164
   }
  }
  $$010$lcssa$off0 = $8; //@line 14169
  $$09$lcssa = $$0914; //@line 14169
 } else {
  $$010$lcssa$off0 = $0; //@line 14171
  $$09$lcssa = $2; //@line 14171
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 14175
 } else {
  $$012 = $$010$lcssa$off0; //@line 14177
  $$111 = $$09$lcssa; //@line 14177
  while (1) {
   $26 = $$111 + -1 | 0; //@line 14182
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 14183
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 14187
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 14190
    $$111 = $26; //@line 14190
   }
  }
 }
 return $$1$lcssa | 0; //@line 14194
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_140($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 29444
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29446
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29448
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29450
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29452
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29454
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 29458
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 29460
 $17 = $14 + 12 | 0; //@line 29462
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 29463
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(28) | 0; //@line 29464
 $18 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($16, $14, 7) | 0; //@line 29465
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 29469
  ___async_unwind = 0; //@line 29470
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 260; //@line 29472
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $2; //@line 29474
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $4; //@line 29476
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $6; //@line 29478
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $8; //@line 29480
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $10; //@line 29482
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $17; //@line 29484
 sp = STACKTOP; //@line 29485
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_224($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13376
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13380
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13382
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13384
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = HEAP32[$6 >> 2] | 4; //@line 13389
  HEAP32[$8 + 2496 >> 2] = 2; //@line 13391
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 13394
 _mbed_assert_internal(11914, 11923, 778); //@line 13395
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 336; //@line 13398
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 13399
  HEAP32[$10 >> 2] = $4; //@line 13400
  $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 13401
  HEAP32[$11 >> 2] = $6; //@line 13402
  $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 13403
  HEAP32[$12 >> 2] = $8; //@line 13404
  sp = STACKTOP; //@line 13405
  return;
 }
 ___async_unwind = 0; //@line 13408
 HEAP32[$ReallocAsyncCtx4 >> 2] = 336; //@line 13409
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 13410
 HEAP32[$10 >> 2] = $4; //@line 13411
 $11 = $ReallocAsyncCtx4 + 8 | 0; //@line 13412
 HEAP32[$11 >> 2] = $6; //@line 13413
 $12 = $ReallocAsyncCtx4 + 12 | 0; //@line 13414
 HEAP32[$12 >> 2] = $8; //@line 13415
 sp = STACKTOP; //@line 13416
 return;
}
function _mbedtls_cipher_free__async_cb_104($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26884
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26888
 _free(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0); //@line 26890
 $7 = HEAP32[$4 + 60 >> 2] | 0; //@line 26892
 if (!$7) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26895
  _mbedtls_platform_zeroize($4, 68); //@line 26896
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 579; //@line 26899
   sp = STACKTOP; //@line 26900
   return;
  }
  ___async_unwind = 0; //@line 26903
  HEAP32[$ReallocAsyncCtx2 >> 2] = 579; //@line 26904
  sp = STACKTOP; //@line 26905
  return;
 } else {
  $13 = HEAP32[(HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] | 0) + 28 >> 2] | 0; //@line 26912
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 26913
  FUNCTION_TABLE_vi[$13 & 1023]($7); //@line 26914
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 578; //@line 26917
   $14 = $ReallocAsyncCtx + 4 | 0; //@line 26918
   HEAP32[$14 >> 2] = $4; //@line 26919
   sp = STACKTOP; //@line 26920
   return;
  }
  ___async_unwind = 0; //@line 26923
  HEAP32[$ReallocAsyncCtx >> 2] = 578; //@line 26924
  $14 = $ReallocAsyncCtx + 4 | 0; //@line 26925
  HEAP32[$14 >> 2] = $4; //@line 26926
  sp = STACKTOP; //@line 26927
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_161($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 30751
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30753
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30755
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30757
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30759
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 30761
 $13 = $4 + 12 | 0; //@line 30765
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 30766
 $14 = $4 + 16 | 0; //@line 30767
 HEAP32[$14 >> 2] = $8; //@line 30768
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 30769
 $15 = _equeue_alloc($10, 20) | 0; //@line 30770
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 30774
  ___async_unwind = 0; //@line 30775
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 269; //@line 30777
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $6; //@line 30779
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $2; //@line 30781
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $13; //@line 30783
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $4; //@line 30785
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $13; //@line 30787
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $14; //@line 30789
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $10; //@line 30791
 sp = STACKTOP; //@line 30792
 return;
}
function __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$ = 0, $$$i = 0, $$0 = 0.0, $10 = 0, $13 = 0, $16 = 0, $23 = 0, $28 = 0, $41 = 0, $5 = 0, $51 = 0, $7 = 0, $8 = 0;
 $5 = $1 << 24 >> 24; //@line 20556
 $7 = HEAP8[$0 + 29 >> 0] | 0; //@line 20558
 $8 = $7 & 255; //@line 20559
 $$ = ($5 | 0) < ($8 | 0) ? $5 : $8; //@line 20561
 $10 = $$ & 255; //@line 20562
 HEAP8[$4 + 1 >> 0] = $10; //@line 20564
 $13 = HEAP32[$0 + 80 >> 2] | 0; //@line 20566
 $16 = HEAP32[$13 + (($$ & 255) << 2) >> 2] | 0; //@line 20569
 HEAP8[$4 + 2 >> 0] = ($16 | 0) == 5e5 ? 2 : ($16 | 0) == 25e4 & 1; //@line 20575
 $23 = HEAP32[$0 + 88 >> 2] | 0; //@line 20582
 if (HEAP8[$0 + 14 >> 0] | 0 ? $7 << 24 >> 24 == $10 << 24 >> 24 : 0) {
  $$0 = 8.0 / +(HEAPU8[$23 + $8 >> 0] | 0); //@line 20588
 } else {
  $28 = $$ & 255; //@line 20590
  $$0 = +(1 << HEAPU8[$23 + $28 >> 0] | 0) / +((HEAP32[$13 + ($28 << 2) >> 2] | 0) >>> 0) * 1.0e3; //@line 20601
 }
 $41 = $2 & 255; //@line 20605
 $51 = ~~+Math_ceil(+(($$0 * +(($41 << 1) + -8 | 0) + +($3 << 1 >>> 0)) / $$0)) >>> 0; //@line 20615
 $$$i = $51 >>> 0 > $41 >>> 0 ? $51 : $41; //@line 20617
 HEAP32[$4 + 8 >> 2] = $$$i; //@line 20618
 HEAP32[$4 + 12 >> 2] = ~~+Math_ceil(+($$0 * 4.0 - $$0 * +($$$i >>> 0) * .5 + -1.0)); //@line 20627
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_57($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21498
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21500
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21504
 $8 = $0 + 16 | 0; //@line 21506
 $10 = HEAP32[$8 >> 2] | 0; //@line 21508
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 21511
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 21513
 $17 = HEAP32[$0 + 28 >> 2] | 0; //@line 21515
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 21517
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 21518
 $18 = HEAP32[$2 >> 2] | 0; //@line 21519
 if (!$18) {
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($15); //@line 21522
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 21526
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21527
 FUNCTION_TABLE_vi[$21 & 1023]($17); //@line 21528
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 21531
  $22 = $ReallocAsyncCtx6 + 4 | 0; //@line 21532
  HEAP32[$22 >> 2] = $15; //@line 21533
  sp = STACKTOP; //@line 21534
  return;
 }
 ___async_unwind = 0; //@line 21537
 HEAP32[$ReallocAsyncCtx6 >> 2] = 58; //@line 21538
 $22 = $ReallocAsyncCtx6 + 4 | 0; //@line 21539
 HEAP32[$22 >> 2] = $15; //@line 21540
 sp = STACKTOP; //@line 21541
 return;
}
function __ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7830
 $1 = $0 + 4 | 0; //@line 7831
 $2 = HEAP32[$1 >> 2] | 0; //@line 7832
 $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7833
 $3 = _equeue_alloc($2, 4) | 0; //@line 7834
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 685; //@line 7837
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 7839
  HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 7841
  sp = STACKTOP; //@line 7842
  return 0; //@line 7843
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7845
 if (!$3) {
  $$0 = 0; //@line 7848
  return $$0 | 0; //@line 7849
 }
 HEAP32[$3 >> 2] = HEAP32[$0 + 28 >> 2]; //@line 7853
 _equeue_event_delay($3, HEAP32[$0 + 12 >> 2] | 0); //@line 7856
 _equeue_event_period($3, HEAP32[$0 + 16 >> 2] | 0); //@line 7859
 _equeue_event_dtor($3, 686); //@line 7860
 $13 = HEAP32[$1 >> 2] | 0; //@line 7861
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7862
 $14 = _equeue_post($13, 687, $3) | 0; //@line 7863
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 688; //@line 7866
  sp = STACKTOP; //@line 7867
  return 0; //@line 7868
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7870
 $$0 = $14; //@line 7871
 return $$0 | 0; //@line 7872
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_173($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 31508
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31510
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31512
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 31516
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 31518
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 31520
 $13 = $2 + 12 | 0; //@line 31522
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 31523
 $14 = $2 + 16 | 0; //@line 31524
 HEAP8[$14 >> 0] = $8; //@line 31525
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(32) | 0; //@line 31526
 $15 = _equeue_alloc($12, 20) | 0; //@line 31527
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 31531
  ___async_unwind = 0; //@line 31532
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 223; //@line 31534
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $13; //@line 31536
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $13; //@line 31538
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $10; //@line 31540
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $2; //@line 31542
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $4; //@line 31544
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $14; //@line 31546
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $12; //@line 31548
 sp = STACKTOP; //@line 31549
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_256($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 17539
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17545
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17547
 __ZN7LoRaMac17bind_radio_driverER9LoRaRadio(HEAP32[$0 + 8 >> 2] | 0, $6); //@line 17548
 $11 = HEAP32[(HEAP32[$6 >> 2] | 0) + 72 >> 2] | 0; //@line 17551
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 17552
 FUNCTION_TABLE_vi[$11 & 1023]($6); //@line 17553
 if (___async) {
  HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17556
  $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 17557
  HEAP32[$12 >> 2] = $6; //@line 17558
  $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 17559
  HEAP32[$13 >> 2] = $8; //@line 17560
  $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 17561
  HEAP32[$14 >> 2] = $6; //@line 17562
  sp = STACKTOP; //@line 17563
  return;
 }
 ___async_unwind = 0; //@line 17566
 HEAP32[$ReallocAsyncCtx16 >> 2] = 200; //@line 17567
 $12 = $ReallocAsyncCtx16 + 4 | 0; //@line 17568
 HEAP32[$12 >> 2] = $6; //@line 17569
 $13 = $ReallocAsyncCtx16 + 8 | 0; //@line 17570
 HEAP32[$13 >> 2] = $8; //@line 17571
 $14 = $ReallocAsyncCtx16 + 12 | 0; //@line 17572
 HEAP32[$14 >> 2] = $6; //@line 17573
 sp = STACKTOP; //@line 17574
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_117($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 27876
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27878
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27880
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27882
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27884
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27886
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 27888
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 27890
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 27892
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(36) | 0; //@line 27893
 __ZN7LoRaPHY18put_radio_to_sleepEv($10); //@line 27894
 if (!___async) {
  ___async_unwind = 0; //@line 27897
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 460; //@line 27899
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 27901
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 27903
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 27905
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 27907
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 27909
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 27911
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 27913
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 27915
 sp = STACKTOP; //@line 27916
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 11650
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 11655
   label = 4; //@line 11656
  } else {
   $$01519 = $0; //@line 11658
   $23 = $1; //@line 11658
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 11663
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 11666
    $23 = $6; //@line 11667
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 11671
     label = 4; //@line 11672
     break;
    } else {
     $$01519 = $6; //@line 11675
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 11681
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 11683
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 11691
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 11699
  } else {
   $$pn = $$0; //@line 11701
   while (1) {
    $19 = $$pn + 1 | 0; //@line 11703
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 11707
     break;
    } else {
     $$pn = $19; //@line 11710
    }
   }
  }
  $$sink = $$1$lcssa; //@line 11715
 }
 return $$sink - $1 | 0; //@line 11718
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1022
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1024
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1028
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1030
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1032
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1034
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 1038
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 1041
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 1042
   if (!___async) {
    ___async_unwind = 0; //@line 1045
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 742; //@line 1047
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 1049
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 1051
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 1053
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 1055
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 1057
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 1059
   sp = STACKTOP; //@line 1060
   return;
  }
 }
 return;
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $2 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2310
 $2 = $0; //@line 2311
 L1 : do {
  switch ($1 | 0) {
  case 1:
   {
    $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 2316
    if ($4 | 0) {
     $7 = HEAP32[$4 >> 2] | 0; //@line 2320
     $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2321
     FUNCTION_TABLE_vi[$7 & 1023]($2 + 40 | 0); //@line 2322
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 105; //@line 2325
      sp = STACKTOP; //@line 2326
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 2329
      break L1;
     }
    }
    break;
   }
  case 2:
   {
    $9 = HEAP32[$2 + 68 >> 2] | 0; //@line 2337
    if ($9 | 0) {
     $12 = HEAP32[$9 >> 2] | 0; //@line 2341
     $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2342
     FUNCTION_TABLE_vi[$12 & 1023]($2 + 56 | 0); //@line 2343
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 106; //@line 2346
      sp = STACKTOP; //@line 2347
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2350
      break L1;
     }
    }
    break;
   }
  default:
   {}
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 16940
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 16947
   $10 = $1 + 16 | 0; //@line 16948
   $11 = HEAP32[$10 >> 2] | 0; //@line 16949
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 16952
    HEAP32[$1 + 24 >> 2] = $4; //@line 16954
    HEAP32[$1 + 36 >> 2] = 1; //@line 16956
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 16966
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 16971
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 16974
    HEAP8[$1 + 54 >> 0] = 1; //@line 16976
    break;
   }
   $21 = $1 + 24 | 0; //@line 16979
   $22 = HEAP32[$21 >> 2] | 0; //@line 16980
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 16983
    $28 = $4; //@line 16984
   } else {
    $28 = $22; //@line 16986
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 16995
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8586
 $2 = HEAP32[$0 + 16 >> 2] | 0; //@line 8588
 $3 = $0 + 12 | 0; //@line 8589
 $4 = HEAP32[$3 >> 2] | 0; //@line 8590
 do {
  if (!$4) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8594
   _mbed_assert_internal(14839, 14844, 1102); //@line 8595
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 277; //@line 8598
    HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 8600
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8602
    HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 8604
    sp = STACKTOP; //@line 8605
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8608
    $10 = HEAP32[$3 >> 2] | 0; //@line 8610
    break;
   }
  } else {
   $10 = $4; //@line 8614
  }
 } while (0);
 $9 = HEAP32[$10 >> 2] | 0; //@line 8617
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8618
 FUNCTION_TABLE_vii[$9 & 15]($0, $2); //@line 8619
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 278; //@line 8622
  sp = STACKTOP; //@line 8623
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8626
  return;
 }
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7332
 $3 = (HEAP8[$0 + 16 >> 0] | 0) != 0; //@line 7335
 $4 = $0 + 12 | 0; //@line 7336
 $5 = HEAP32[$4 >> 2] | 0; //@line 7337
 do {
  if (!$5) {
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7341
   _mbed_assert_internal(14839, 14844, 1102); //@line 7342
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 231; //@line 7345
    HEAP32[$AsyncCtx2 + 4 >> 2] = $4; //@line 7347
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7349
    HEAP8[$AsyncCtx2 + 12 >> 0] = $3 & 1; //@line 7352
    sp = STACKTOP; //@line 7353
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7356
    $11 = HEAP32[$4 >> 2] | 0; //@line 7358
    break;
   }
  } else {
   $11 = $5; //@line 7362
  }
 } while (0);
 $10 = HEAP32[$11 >> 2] | 0; //@line 7365
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7366
 FUNCTION_TABLE_vii[$10 & 15]($0, $3); //@line 7367
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 232; //@line 7370
  sp = STACKTOP; //@line 7371
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7374
  return;
 }
}
function _mbedtls_cipher_cmac_finish__async_cb_326($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22821
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22823
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22825
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22827
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22829
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22831
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22833
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22835
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22837
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(36) | 0; //@line 22838
 _mbedtls_platform_zeroize($2, 16); //@line 22839
 if (!___async) {
  ___async_unwind = 0; //@line 22842
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 606; //@line 22844
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 22846
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 22848
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 22850
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 22852
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 22854
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 22856
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $2; //@line 22858
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 22860
 sp = STACKTOP; //@line 22861
 return;
}
function __ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb($0) {
 $0 = $0 | 0;
 var $$026 = 0, $10 = 0, $12 = 0, $2 = 0, $22 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0;
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 18827
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18829
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18831
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18833
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  $$026 = $2 ? -1006 : -1004; //@line 18839
  $27 = ___async_retval; //@line 18840
  HEAP32[$27 >> 2] = $$026; //@line 18841
  return;
 }
 if ($2) {
  $$026 = $2 ? -1005 : -1004; //@line 18846
  $27 = ___async_retval; //@line 18847
  HEAP32[$27 >> 2] = $$026; //@line 18848
  return;
 }
 $10 = $4 + 124 | 0; //@line 18851
 $12 = (HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) | 0; //@line 18853
 HEAP32[$12 >> 2] = HEAP32[$8 >> 2]; //@line 18854
 HEAP32[$12 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 18854
 HEAP32[$12 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 18854
 HEAP8[(HEAP32[$10 >> 2] | 0) + ($6 * 12 | 0) + 9 >> 0] = HEAP8[$8 + 9 >> 0] | 0; //@line 18859
 $22 = (HEAP32[$4 + 116 >> 2] | 0) + ($6 >>> 4 << 1) | 0; //@line 18865
 HEAP16[$22 >> 1] = 1 << ($6 & 15) | (HEAPU16[$22 >> 1] | 0); //@line 18870
 $$026 = 0; //@line 18871
 $27 = ___async_retval; //@line 18872
 HEAP32[$27 >> 2] = $$026; //@line 18873
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_109($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27330
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27332
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27334
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27336
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27338
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27340
 $12 = $4 + 12 | 0; //@line 27342
 HEAP32[$4 >> 2] = 470; //@line 27343
 HEAP32[$4 + 4 >> 2] = 0; //@line 27345
 HEAP32[$4 + 8 >> 2] = $2; //@line 27347
 HEAP32[$12 >> 2] = 860; //@line 27348
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 27349
 __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE($6, $2 + 1856 | 0, $4); //@line 27350
 if (!___async) {
  ___async_unwind = 0; //@line 27353
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 471; //@line 27355
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $12; //@line 27357
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 27359
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 27361
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 27363
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 27365
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $4; //@line 27367
 sp = STACKTOP; //@line 27368
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 985
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] | 0; //@line 988
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 989
 FUNCTION_TABLE_vii[$6 & 15]($0, $1); //@line 990
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 67; //@line 993
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 995
  HEAP16[$AsyncCtx + 8 >> 1] = $3; //@line 997
  HEAP8[$AsyncCtx + 10 >> 0] = $2; //@line 999
  sp = STACKTOP; //@line 1000
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1003
 $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 20 >> 2] | 0; //@line 1006
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1008
 FUNCTION_TABLE_viiiiiiiiiiiiii[$12 & 1]($0, 0, $2, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $3 & 65535); //@line 1009
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 68; //@line 1012
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 1014
  sp = STACKTOP; //@line 1015
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 1018
  HEAP8[$0 + 688 >> 0] = 2; //@line 1020
  __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 1021
  return;
 }
}
function _mbedtls_cipher_setup($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 2428
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$0 = -24832; //@line 2433
  return $$0 | 0; //@line 2434
 }
 dest = $0; //@line 2436
 stop = dest + 68 | 0; //@line 2436
 do {
  HEAP32[dest >> 2] = 0; //@line 2436
  dest = dest + 4 | 0; //@line 2436
 } while ((dest | 0) < (stop | 0));
 $7 = HEAP32[(HEAP32[$1 + 28 >> 2] | 0) + 24 >> 2] | 0; //@line 2440
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2441
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 2442
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 580; //@line 2445
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2447
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 2449
  sp = STACKTOP; //@line 2450
  return 0; //@line 2451
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2453
 HEAP32[$0 + 60 >> 2] = $8; //@line 2455
 if (!$8) {
  $$0 = -24960; //@line 2458
  return $$0 | 0; //@line 2459
 }
 HEAP32[$0 >> 2] = $1; //@line 2461
 if ((HEAP32[$1 + 4 >> 2] | 0) != 2) {
  $$0 = 0; //@line 2466
  return $$0 | 0; //@line 2467
 }
 HEAP32[$0 + 12 >> 2] = 5; //@line 2470
 HEAP32[$0 + 16 >> 2] = 18; //@line 2472
 $$0 = 0; //@line 2473
 return $$0 | 0; //@line 2474
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21556
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21560
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21562
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21564
 $9 = $4 + 12 | 0; //@line 21566
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21567
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 21568
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 1) | 0; //@line 21569
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 350; //@line 21572
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 21573
  HEAP32[$11 >> 2] = $9; //@line 21574
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 21575
  HEAP32[$12 >> 2] = $8; //@line 21576
  sp = STACKTOP; //@line 21577
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 21581
 ___async_unwind = 0; //@line 21582
 HEAP32[$ReallocAsyncCtx5 >> 2] = 350; //@line 21583
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 21584
 HEAP32[$11 >> 2] = $9; //@line 21585
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 21586
 HEAP32[$12 >> 2] = $8; //@line 21587
 sp = STACKTOP; //@line 21588
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_229($0) {
 $0 = $0 | 0;
 var $$pre$i$i4 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13643
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13649
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13651
 $$pre$i$i4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13652
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i4; //@line 13653
 if (!$$pre$i$i4) {
  _gpio_irq_set($8 + 28 | 0, 2, 0); //@line 13657
  return;
 }
 $12 = HEAP32[$$pre$i$i4 + 8 >> 2] | 0; //@line 13662
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 13663
 FUNCTION_TABLE_vi[$12 & 1023]($6); //@line 13664
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 13667
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 13668
  HEAP32[$13 >> 2] = $6; //@line 13669
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 13670
  HEAP32[$14 >> 2] = $8; //@line 13671
  sp = STACKTOP; //@line 13672
  return;
 }
 ___async_unwind = 0; //@line 13675
 HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 13676
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 13677
 HEAP32[$13 >> 2] = $6; //@line 13678
 $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 13679
 HEAP32[$14 >> 2] = $8; //@line 13680
 sp = STACKTOP; //@line 13681
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16434
 $1 = HEAP32[2604] | 0; //@line 16435
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 16441
 } else {
  $19 = 0; //@line 16443
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 16449
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 16455
    $12 = HEAP32[$11 >> 2] | 0; //@line 16456
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 16462
     HEAP8[$12 >> 0] = 10; //@line 16463
     $22 = 0; //@line 16464
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 16468
   $17 = ___overflow($1, 10) | 0; //@line 16469
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 719; //@line 16472
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 16474
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 16476
    sp = STACKTOP; //@line 16477
    return 0; //@line 16478
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 16480
    $22 = $17 >> 31; //@line 16482
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 16489
 }
 return $22 | 0; //@line 16491
}
function __ZN4mbed11InterruptInD0Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2241
 HEAP32[$0 >> 2] = 604; //@line 2242
 _gpio_irq_free($0 + 28 | 0); //@line 2244
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2246
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2252
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2253
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2254
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 103; //@line 2257
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2259
    sp = STACKTOP; //@line 2260
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2263
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2269
 if (!$10) {
  __ZdlPv($0); //@line 2272
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2277
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2278
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2279
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 104; //@line 2282
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2284
  sp = STACKTOP; //@line 2285
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2288
 __ZdlPv($0); //@line 2289
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_142($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 29609
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29613
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29615
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29617
 $9 = $4 + 12 | 0; //@line 29619
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29620
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 29621
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 29622
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 264; //@line 29625
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 29626
  HEAP32[$11 >> 2] = $9; //@line 29627
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 29628
  HEAP32[$12 >> 2] = $8; //@line 29629
  sp = STACKTOP; //@line 29630
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 29634
 ___async_unwind = 0; //@line 29635
 HEAP32[$ReallocAsyncCtx7 >> 2] = 264; //@line 29636
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 29637
 HEAP32[$11 >> 2] = $9; //@line 29638
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 29639
 HEAP32[$12 >> 2] = $8; //@line 29640
 sp = STACKTOP; //@line 29641
 return;
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31938
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31940
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31942
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31944
 $7 = $2 + 12 | 0; //@line 31945
 $8 = HEAP32[$7 >> 2] | 0; //@line 31946
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 31949
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 31953
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 31954
 FUNCTION_TABLE_vii[$11 & 15]($6, $2); //@line 31955
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 495; //@line 31958
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 31959
  HEAP32[$12 >> 2] = $7; //@line 31960
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 31961
  HEAP32[$13 >> 2] = $4; //@line 31962
  sp = STACKTOP; //@line 31963
  return;
 }
 ___async_unwind = 0; //@line 31966
 HEAP32[$ReallocAsyncCtx2 >> 2] = 495; //@line 31967
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 31968
 HEAP32[$12 >> 2] = $7; //@line 31969
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 31970
 HEAP32[$13 >> 2] = $4; //@line 31971
 sp = STACKTOP; //@line 31972
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_347($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24143
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24145
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24147
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24149
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 24156
  return;
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($4 + 476 | 0); //@line 24160
 HEAP8[$4 + 1177 >> 0] = 0; //@line 24162
 HEAP8[$4 + 2062 >> 0] = 0; //@line 24164
 HEAP8[$6 >> 0] = HEAP8[$2 >> 0] | 0; //@line 24166
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 24167
 $13 = __ZN7LoRaMac21handle_retransmissionEv($4) | 0; //@line 24168
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 443; //@line 24171
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 24172
  HEAP32[$14 >> 2] = $2; //@line 24173
  sp = STACKTOP; //@line 24174
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 24178
 ___async_unwind = 0; //@line 24179
 HEAP32[$ReallocAsyncCtx2 >> 2] = 443; //@line 24180
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 24181
 HEAP32[$14 >> 2] = $2; //@line 24182
 sp = STACKTOP; //@line 24183
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22589
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22593
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22595
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22597
 $9 = $4 + 12 | 0; //@line 22599
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 22600
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 22601
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 11) | 0; //@line 22602
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 321; //@line 22605
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 22606
  HEAP32[$11 >> 2] = $9; //@line 22607
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 22608
  HEAP32[$12 >> 2] = $8; //@line 22609
  sp = STACKTOP; //@line 22610
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 22614
 ___async_unwind = 0; //@line 22615
 HEAP32[$ReallocAsyncCtx3 >> 2] = 321; //@line 22616
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 22617
 HEAP32[$11 >> 2] = $9; //@line 22618
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 22619
 HEAP32[$12 >> 2] = $8; //@line 22620
 sp = STACKTOP; //@line 22621
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_338($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23903
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23907
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23909
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23911
 $9 = $4 + 12 | 0; //@line 23913
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23914
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 23915
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 5) | 0; //@line 23916
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 316; //@line 23919
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 23920
  HEAP32[$11 >> 2] = $9; //@line 23921
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 23922
  HEAP32[$12 >> 2] = $8; //@line 23923
  sp = STACKTOP; //@line 23924
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 23928
 ___async_unwind = 0; //@line 23929
 HEAP32[$ReallocAsyncCtx7 >> 2] = 316; //@line 23930
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 23931
 HEAP32[$11 >> 2] = $9; //@line 23932
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 23933
 HEAP32[$12 >> 2] = $8; //@line 23934
 sp = STACKTOP; //@line 23935
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 29376
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29380
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29382
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29384
 $9 = $4 + 12 | 0; //@line 29386
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 29387
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 29388
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 9) | 0; //@line 29389
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 256; //@line 29392
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 29393
  HEAP32[$11 >> 2] = $9; //@line 29394
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 29395
  HEAP32[$12 >> 2] = $8; //@line 29396
  sp = STACKTOP; //@line 29397
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 29401
 ___async_unwind = 0; //@line 29402
 HEAP32[$ReallocAsyncCtx9 >> 2] = 256; //@line 29403
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 29404
 HEAP32[$11 >> 2] = $9; //@line 29405
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 29406
 HEAP32[$12 >> 2] = $8; //@line 29407
 sp = STACKTOP; //@line 29408
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_46($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 21019
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21023
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21025
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21027
 $9 = $4 + 12 | 0; //@line 21029
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21030
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 21031
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 4) | 0; //@line 21032
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 252; //@line 21035
  $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 21036
  HEAP32[$11 >> 2] = $9; //@line 21037
  $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 21038
  HEAP32[$12 >> 2] = $8; //@line 21039
  sp = STACKTOP; //@line 21040
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 21044
 ___async_unwind = 0; //@line 21045
 HEAP32[$ReallocAsyncCtx7 >> 2] = 252; //@line 21046
 $11 = $ReallocAsyncCtx7 + 4 | 0; //@line 21047
 HEAP32[$11 >> 2] = $9; //@line 21048
 $12 = $ReallocAsyncCtx7 + 8 | 0; //@line 21049
 HEAP32[$12 >> 2] = $8; //@line 21050
 sp = STACKTOP; //@line 21051
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_44($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20952
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20956
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20958
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20960
 $9 = $4 + 12 | 0; //@line 20962
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 20963
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 20964
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 3) | 0; //@line 20965
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 248; //@line 20968
  $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 20969
  HEAP32[$11 >> 2] = $9; //@line 20970
  $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 20971
  HEAP32[$12 >> 2] = $8; //@line 20972
  sp = STACKTOP; //@line 20973
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 20977
 ___async_unwind = 0; //@line 20978
 HEAP32[$ReallocAsyncCtx8 >> 2] = 248; //@line 20979
 $11 = $ReallocAsyncCtx8 + 4 | 0; //@line 20980
 HEAP32[$11 >> 2] = $9; //@line 20981
 $12 = $ReallocAsyncCtx8 + 8 | 0; //@line 20982
 HEAP32[$12 >> 2] = $8; //@line 20983
 sp = STACKTOP; //@line 20984
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27312
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27314
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27316
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27318
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27320
 HEAP32[$4 + 12 >> 2] = HEAP32[$2 >> 2]; //@line 27323
 _equeue_event_dtor($4, 283); //@line 27324
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 27325
 $10 = _equeue_post($6, 284, $4) | 0; //@line 27326
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 27329
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 27330
  HEAP32[$11 >> 2] = $2; //@line 27331
  $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 27332
  HEAP32[$12 >> 2] = $8; //@line 27333
  sp = STACKTOP; //@line 27334
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 27338
 ___async_unwind = 0; //@line 27339
 HEAP32[$ReallocAsyncCtx3 >> 2] = 285; //@line 27340
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 27341
 HEAP32[$11 >> 2] = $2; //@line 27342
 $12 = $ReallocAsyncCtx3 + 8 | 0; //@line 27343
 HEAP32[$12 >> 2] = $8; //@line 27344
 sp = STACKTOP; //@line 27345
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20885
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20889
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20891
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20893
 $9 = $4 + 12 | 0; //@line 20895
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 20896
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 20897
 $10 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 2) | 0; //@line 20898
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 244; //@line 20901
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 20902
  HEAP32[$11 >> 2] = $9; //@line 20903
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 20904
  HEAP32[$12 >> 2] = $8; //@line 20905
  sp = STACKTOP; //@line 20906
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 20910
 ___async_unwind = 0; //@line 20911
 HEAP32[$ReallocAsyncCtx9 >> 2] = 244; //@line 20912
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 20913
 HEAP32[$11 >> 2] = $9; //@line 20914
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 20915
 HEAP32[$12 >> 2] = $8; //@line 20916
 sp = STACKTOP; //@line 20917
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $4 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10491
 STACKTOP = STACKTOP + 16 | 0; //@line 10492
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 10492
 if (!$1) {
  $$0 = -1003; //@line 10496
 } else {
  _mbed_tracef(16, 12021, 12407, sp); //@line 10498
  HEAP32[$0 + 3168 >> 2] = $1; //@line 10500
  $4 = $0 + 2496 | 0; //@line 10501
  $6 = (HEAP32[$4 >> 2] | 0) == 0; //@line 10503
  HEAP32[$4 >> 2] = 2; //@line 10504
  if ($6) {
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 10506
   $7 = __ZN7LoRaMac10initializeEPN6events10EventQueueE($0, $1) | 0; //@line 10507
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 343; //@line 10510
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10512
    sp = STACKTOP; //@line 10513
    STACKTOP = sp; //@line 10514
    return 0; //@line 10514
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 10516
   if (!$7) {
    HEAP32[$4 >> 2] = 2; //@line 10519
    $$0 = 0; //@line 10520
   } else {
    $$0 = $7; //@line 10522
   }
  } else {
   $$0 = 0; //@line 10525
  }
 }
 STACKTOP = sp; //@line 10528
 return $$0 | 0; //@line 10528
}
function __ZN7LoRaPHY23reset_to_default_valuesEP23loramac_protocol_paramsb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$pre$phiZ2D = 0, $26 = 0;
 if ($2) {
  HEAP8[$1 + 11 >> 0] = HEAP8[$0 + 12 >> 0] | 0; //@line 22716
  HEAP32[$1 + 720 >> 2] = HEAPU16[$0 + 36 >> 1]; //@line 22721
  HEAP32[$1 + 724 >> 2] = HEAPU16[$0 + 38 >> 1]; //@line 22726
  HEAP32[$1 + 728 >> 2] = HEAPU16[$0 + 40 >> 1]; //@line 22731
  HEAP32[$1 + 732 >> 2] = HEAPU16[$0 + 42 >> 1]; //@line 22736
  HEAP32[$1 + 736 >> 2] = HEAPU16[$0 + 44 >> 1]; //@line 22741
  $26 = $0 + 128 | 0; //@line 22742
  HEAP8[$1 + 753 >> 0] = (HEAPU8[$26 >> 0] | 0) >>> 1 & 1; //@line 22747
  $$pre$phiZ2D = $26; //@line 22748
 } else {
  $$pre$phiZ2D = $0 + 128 | 0; //@line 22751
 }
 HEAP8[$1 + 708 >> 0] = HEAP8[$0 + 23 >> 0] | 0; //@line 22756
 HEAP8[$1 + 709 >> 0] = HEAP8[$0 + 30 >> 0] | 0; //@line 22760
 HEAP8[$1 + 741 >> 0] = HEAP8[$0 + 34 >> 0] | 0; //@line 22764
 HEAP32[$1 + 744 >> 2] = HEAP32[$0 + 68 >> 2]; //@line 22768
 HEAP8[$1 + 748 >> 0] = HEAP8[$0 + 64 >> 0] | 0; //@line 22772
 HEAP8[$1 + 752 >> 0] = HEAP8[$$pre$phiZ2D >> 0] & 1; //@line 22776
 HEAP32[$1 + 756 >> 2] = HEAP32[$0 + 56 >> 2]; //@line 22780
 HEAP32[$1 + 760 >> 2] = HEAP32[$0 + 60 >> 2]; //@line 22784
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_379($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 27117
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27121
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27123
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27125
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 27128
 $10 = HEAP32[$4 >> 2] | 0; //@line 27129
 $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 27132
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 27133
 FUNCTION_TABLE_vi[$13 & 1023]($10); //@line 27134
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 532; //@line 27137
  $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 27138
  HEAP32[$14 >> 2] = $6; //@line 27139
  $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 27140
  HEAP32[$15 >> 2] = $8; //@line 27141
  sp = STACKTOP; //@line 27142
  return;
 }
 ___async_unwind = 0; //@line 27145
 HEAP32[$ReallocAsyncCtx7 >> 2] = 532; //@line 27146
 $14 = $ReallocAsyncCtx7 + 4 | 0; //@line 27147
 HEAP32[$14 >> 2] = $6; //@line 27148
 $15 = $ReallocAsyncCtx7 + 8 | 0; //@line 27149
 HEAP32[$15 >> 2] = $8; //@line 27150
 sp = STACKTOP; //@line 27151
 return;
}
function __ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$09 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $28 = 0, $6 = 0, $8 = 0, $or$cond$i = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14248
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14252
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14254
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14256
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 14258
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 1173 | 0; //@line 14260
 $17 = __ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0; //@line 14263
 $18 = $17 & 255; //@line 14264
 $19 = $8 & 255; //@line 14265
 if ($19 >>> 0 > $18 >>> 0) {
  __ZN14LoRaMacCommand20clear_command_bufferEv($10); //@line 14268
  __ZN14LoRaMacCommand19clear_repeat_bufferEv($10); //@line 14269
  $$0 = 0; //@line 14270
  $$09 = $17; //@line 14270
 } else {
  $$0 = $19; //@line 14274
  $$09 = $18 - $8 & 255; //@line 14274
 }
 $28 = $$0 + ($12 & 255) | 0; //@line 14281
 $or$cond$i = $28 >>> 0 < 256 & $28 >>> 0 <= ((__ZN7LoRaPHY15get_max_payloadEhb($6, HEAP8[$2 >> 0] | 0, (HEAP8[$14 >> 0] | 0) != 0) | 0) & 255) >>> 0; //@line 14285
 HEAP8[___async_retval >> 0] = $or$cond$i ? $17 : $$09; //@line 14288
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_377($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 27020
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27022
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27026
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27028
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 27030
 $11 = HEAP32[$2 >> 2] | 0; //@line 27031
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 27034
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 27035
 $17 = HEAP16[$15 >> 1] & 255; //@line 27037
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 27038
 FUNCTION_TABLE_viii[$14 & 7]($11, 1, $17); //@line 27039
 if (!___async) {
  ___async_unwind = 0; //@line 27042
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 530; //@line 27044
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 27046
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 27048
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 1; //@line 27050
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 27052
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 27054
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 27056
 sp = STACKTOP; //@line 27057
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_376($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26976
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26978
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26982
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26984
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26986
 $11 = HEAP32[$2 >> 2] | 0; //@line 26987
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 44 >> 2] | 0; //@line 26990
 $15 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 26991
 $17 = HEAP16[$15 >> 1] & 255; //@line 26993
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 26994
 FUNCTION_TABLE_viii[$14 & 7]($11, 0, $17); //@line 26995
 if (!___async) {
  ___async_unwind = 0; //@line 26998
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 530; //@line 27000
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 27002
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $15; //@line 27004
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = 0; //@line 27006
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $6; //@line 27008
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $8; //@line 27010
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $10; //@line 27012
 sp = STACKTOP; //@line 27013
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_393($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28969
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 28971
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28973
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28975
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28977
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28979
 $12 = (HEAP8[___async_retval >> 0] | 0) == 0; //@line 28982
 $13 = HEAP32[$6 >> 2] | 0; //@line 28983
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 76 >> 2] | 0; //@line 28986
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 28987
 FUNCTION_TABLE_vi[$16 & 1023]($13); //@line 28988
 if (!___async) {
  ___async_unwind = 0; //@line 28991
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 519; //@line 28993
 HEAP8[$ReallocAsyncCtx3 + 4 >> 0] = $2; //@line 28995
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 28997
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 28999
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 29001
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 29003
 HEAP8[$ReallocAsyncCtx3 + 24 >> 0] = $12 & 1; //@line 29006
 sp = STACKTOP; //@line 29007
 return;
}
function __ZN7LoRaPHY26get_next_lower_tx_datarateEa($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$i = 0, $$1$lcssa$i = 0, $$18$i = 0, $$19$i = 0, $10 = 0, $18 = 0, $19 = 0, $21 = 0, $8 = 0, $9 = 0, label = 0;
 $8 = $0 + 88 | 0; //@line 22801
 $9 = $1 & 255; //@line 22802
 $10 = HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 22803
 $$18$i = ($9 | 0) == ($10 | 0) ? $1 : $9 + 255 & 255; //@line 22807
 if (($$18$i & 255 | 0) == ($10 | 0)) {
  $$1$lcssa$i = $$18$i; //@line 22811
  return $$1$lcssa$i | 0; //@line 22812
 }
 $18 = HEAPU8[$0 + 92 >> 0] | 0; //@line 22816
 $$19$i = $$18$i; //@line 22817
 while (1) {
  $19 = $$19$i << 24 >> 24; //@line 22819
  if (($19 | 0) < ($18 | 0)) {
   if (HEAP8[(HEAP32[$8 >> 2] | 0) + $19 >> 0] | 0) {
    $$1$lcssa$i = $$19$i; //@line 22827
    label = 6; //@line 22828
    break;
   }
  }
  $21 = $$19$i & 255; //@line 22832
  $$1$i = ($21 | 0) == ($10 | 0) ? $$19$i : $21 + 255 & 255; //@line 22836
  if (($$1$i & 255 | 0) == ($10 | 0)) {
   $$1$lcssa$i = $$1$i; //@line 22840
   label = 6; //@line 22841
   break;
  } else {
   $$19$i = $$1$i; //@line 22844
  }
 }
 if ((label | 0) == 6) {
  return $$1$lcssa$i | 0; //@line 22848
 }
 return 0; //@line 22850
}
function _mbed_vtracef__async_cb_199($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 184
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 186
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 188
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 190
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 195
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 197
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 202
 $16 = _snprintf($4, $6, 11798, $2) | 0; //@line 203
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 205
 $19 = $4 + $$18 | 0; //@line 207
 $20 = $6 - $$18 | 0; //@line 208
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 11876, $12) | 0; //@line 216
  }
 }
 $23 = HEAP32[174] | 0; //@line 219
 $24 = HEAP32[167] | 0; //@line 220
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 221
 FUNCTION_TABLE_vi[$23 & 1023]($24); //@line 222
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 225
  sp = STACKTOP; //@line 226
  return;
 }
 ___async_unwind = 0; //@line 229
 HEAP32[$ReallocAsyncCtx7 >> 2] = 150; //@line 230
 sp = STACKTOP; //@line 231
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_213($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1070
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1076
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1078
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1080
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1082
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 1087
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 1089
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 1090
 if (!___async) {
  ___async_unwind = 0; //@line 1093
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 742; //@line 1095
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 1097
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 1099
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 1101
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 1103
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 1105
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 1107
 sp = STACKTOP; //@line 1108
 return;
}
function __ZN4mbed5TimerC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2729
 HEAP32[$0 >> 2] = 0; //@line 2730
 $1 = $0 + 8 | 0; //@line 2731
 $2 = $0 + 16 | 0; //@line 2732
 HEAP32[$1 >> 2] = 0; //@line 2733
 HEAP32[$1 + 4 >> 2] = 0; //@line 2733
 HEAP32[$1 + 8 >> 2] = 0; //@line 2733
 HEAP32[$1 + 12 >> 2] = 0; //@line 2733
 $4 = $0 + 24 | 0; //@line 2735
 HEAP32[$4 >> 2] = _get_us_ticker_data() | 0; //@line 2736
 HEAP8[$0 + 28 >> 0] = 1; //@line 2738
 $6 = HEAP32[$4 >> 2] | 0; //@line 2739
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2740
 $7 = _ticker_read_us($6) | 0; //@line 2741
 $8 = tempRet0; //@line 2742
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 120; //@line 2745
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2747
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2749
  sp = STACKTOP; //@line 2750
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2753
  $11 = $1; //@line 2754
  HEAP32[$11 >> 2] = $7; //@line 2756
  HEAP32[$11 + 4 >> 2] = $8; //@line 2759
  $15 = $2; //@line 2760
  HEAP32[$15 >> 2] = 0; //@line 2762
  HEAP32[$15 + 4 >> 2] = 0; //@line 2765
  return;
 }
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13758
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13760
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13762
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13764
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 13766
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 13768
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 18364; //@line 13773
  HEAP32[$4 + 4 >> 2] = $6; //@line 13775
  _abort_message(18273, $4); //@line 13776
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 13779
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 13782
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 13783
 $16 = FUNCTION_TABLE_ii[$15 & 15]($12) | 0; //@line 13784
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 13788
  ___async_unwind = 0; //@line 13789
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 721; //@line 13791
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 13793
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 13795
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 13797
 sp = STACKTOP; //@line 13798
 return;
}
function __ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$030 = 0.0, $10 = 0.0, $45 = 0.0, $6 = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0 = 1; //@line 712
   return $$0 | 0; //@line 713
  }
 case 1:
  {
   switch (HEAP32[$0 + 752 >> 2] | 0) {
   case 7:
    {
     $$030 = 125.0e3; //@line 721
     break;
    }
   case 8:
    {
     $$030 = 25.0e4; //@line 725
     break;
    }
   case 9:
    {
     $$030 = 5.0e5; //@line 729
     break;
    }
   default:
    {
     $$030 = 0.0; //@line 733
    }
   }
   $6 = HEAP32[$0 + 756 >> 2] | 0; //@line 737
   $10 = 1.0 / ($$030 / +(1 << $6 | 0)); //@line 741
   $45 = +Math_ceil(+(+(((($2 & 255) << 3) + 28 - ($6 << 2) + (HEAP8[$0 + 766 >> 0] << 4 & 255) + (HEAP8[$0 + 764 >> 0] | 0 ? -20 : 0) | 0) >>> 0) / +($6 - (HEAP8[$0 + 760 >> 0] | 0 ? 2 : 0) << 2 >>> 0))) * +((HEAPU8[$0 + 761 >> 0] | 0) + 4 | 0); //@line 777
   $$0 = ~~+Math_floor(+(((+(HEAPU16[$0 + 762 >> 1] | 0) + 4.25) * $10 + $10 * (($45 > 0.0 ? $45 : 0.0) + 8.0)) * 1.0e3 + .999)) >>> 0; //@line 787
   return $$0 | 0; //@line 788
  }
 default:
  {
   $$0 = 0; //@line 792
   return $$0 | 0; //@line 793
  }
 }
 return 0; //@line 796
}
function _mbedtls_gcm_setkey__async_cb_361($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25539
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25541
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25543
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25545
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25547
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25549
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25551
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25553
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 25557
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 25560
 $15 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 25561
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 25565
  ___async_unwind = 0; //@line 25566
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 611; //@line 25568
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 25570
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $10; //@line 25572
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 25574
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 25576
 sp = STACKTOP; //@line 25577
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28806
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28808
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28810
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28814
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 28818
  label = 4; //@line 28819
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 28824
   label = 4; //@line 28825
  } else {
   $$037$off039 = 3; //@line 28827
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 28831
  $17 = $8 + 40 | 0; //@line 28832
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 28835
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 28845
    $$037$off039 = $$037$off038; //@line 28846
   } else {
    $$037$off039 = $$037$off038; //@line 28848
   }
  } else {
   $$037$off039 = $$037$off038; //@line 28851
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 28854
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb_304($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21275
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21279
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21281
 L2 : do {
  if (!$AsyncRetVal) {
   switch (HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0) {
   case 36:
   case 4:
   case 3:
   case 2:
    {
     break;
    }
   default:
    {
     $$0 = -24832; //@line 21292
     break L2;
    }
   }
   $9 = _calloc(1, 36) | 0; //@line 21296
   if (!$9) {
    $$0 = -24960; //@line 21299
   } else {
    HEAP32[$4 + 64 >> 2] = $9; //@line 21302
    $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 21303
    _mbedtls_platform_zeroize($9, 16); //@line 21304
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 21307
     sp = STACKTOP; //@line 21308
     return;
    }
    ___async_unwind = 0; //@line 21311
    HEAP32[$ReallocAsyncCtx >> 2] = 595; //@line 21312
    sp = STACKTOP; //@line 21313
    return;
   }
  } else {
   $$0 = $AsyncRetVal; //@line 21317
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 21321
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 15384
 while (1) {
  if ((HEAPU8[16336 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 15391
   break;
  }
  $7 = $$016 + 1 | 0; //@line 15394
  if (($7 | 0) == 87) {
   $$01214 = 16424; //@line 15397
   $$115 = 87; //@line 15397
   label = 5; //@line 15398
   break;
  } else {
   $$016 = $7; //@line 15401
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 16424; //@line 15407
  } else {
   $$01214 = 16424; //@line 15409
   $$115 = $$016; //@line 15409
   label = 5; //@line 15410
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 15415
   $$113 = $$01214; //@line 15416
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 15420
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 15427
   if (!$$115) {
    $$012$lcssa = $$113; //@line 15430
    break;
   } else {
    $$01214 = $$113; //@line 15433
    label = 5; //@line 15434
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 15441
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 16799
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 16808
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 16813
      HEAP32[$13 >> 2] = $2; //@line 16814
      $19 = $1 + 40 | 0; //@line 16815
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 16818
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 16828
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 16832
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 16839
    }
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_319($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22436
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22442
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22444
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22446
 $12 = (HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0) != 0; //@line 22448
 $14 = HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1888 >> 2] | 0; //@line 22450
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 22451
 __ZN7LoRaPHY15setup_rx_windowEbj($6, $12, $14); //@line 22452
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 438; //@line 22455
  $15 = $ReallocAsyncCtx + 4 | 0; //@line 22456
  HEAP32[$15 >> 2] = $8; //@line 22457
  $16 = $ReallocAsyncCtx + 8 | 0; //@line 22458
  HEAP32[$16 >> 2] = $10; //@line 22459
  sp = STACKTOP; //@line 22460
  return;
 }
 ___async_unwind = 0; //@line 22463
 HEAP32[$ReallocAsyncCtx >> 2] = 438; //@line 22464
 $15 = $ReallocAsyncCtx + 4 | 0; //@line 22465
 HEAP32[$15 >> 2] = $8; //@line 22466
 $16 = $ReallocAsyncCtx + 8 | 0; //@line 22467
 HEAP32[$16 >> 2] = $10; //@line 22468
 sp = STACKTOP; //@line 22469
 return;
}
function _mbedtls_gcm_setkey__async_cb_362($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 25584
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25586
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25588
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25590
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25592
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25594
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 25596
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 25598
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 25599
 $15 = _mbedtls_cipher_setup($2, $4) | 0; //@line 25600
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 25604
  ___async_unwind = 0; //@line 25605
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 610; //@line 25607
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 25609
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 25611
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 25613
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 25615
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 25617
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 25619
 sp = STACKTOP; //@line 25620
 return;
}
function __ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb_76($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25189
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25191
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25193
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 25195
 if (!$AsyncRetVal) {
  HEAP32[___async_retval >> 2] = 0; //@line 25199
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = HEAP32[$2 + 28 >> 2]; //@line 25204
 _equeue_event_delay($AsyncRetVal, HEAP32[$2 + 12 >> 2] | 0); //@line 25207
 _equeue_event_period($AsyncRetVal, HEAP32[$2 + 16 >> 2] | 0); //@line 25210
 _equeue_event_dtor($AsyncRetVal, 686); //@line 25211
 $13 = HEAP32[$4 >> 2] | 0; //@line 25212
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25213
 $14 = _equeue_post($13, 687, $AsyncRetVal) | 0; //@line 25214
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 688; //@line 25217
  sp = STACKTOP; //@line 25218
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 25222
 ___async_unwind = 0; //@line 25223
 HEAP32[$ReallocAsyncCtx >> 2] = 688; //@line 25224
 sp = STACKTOP; //@line 25225
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_68($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 22397
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22399
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22405
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 22407
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 22427
  $$0 = 0; //@line 22428
 } else {
  $$0 = $AsyncRetVal; //@line 22430
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22432
 _mbedtls_cipher_free($8); //@line 22433
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 22436
  $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 22437
  HEAP32[$28 >> 2] = $$0; //@line 22438
  sp = STACKTOP; //@line 22439
  return;
 }
 ___async_unwind = 0; //@line 22442
 HEAP32[$ReallocAsyncCtx5 >> 2] = 508; //@line 22443
 $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 22444
 HEAP32[$28 >> 2] = $$0; //@line 22445
 sp = STACKTOP; //@line 22446
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb_325($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 22777
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22781
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22783
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22785
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22787
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22789
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22791
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22793
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 22794
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 22795
 _mbedtls_platform_zeroize($4, 16); //@line 22796
 if (!___async) {
  ___async_unwind = 0; //@line 22799
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 607; //@line 22801
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 22803
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 22805
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 22807
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 22809
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 22811
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $16; //@line 22813
 sp = STACKTOP; //@line 22814
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_156($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $28 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30386
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30388
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30394
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30396
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 12 >> 2] >> 2] = (HEAPU8[$2 + 18 >> 0] | 0) << 16 | (HEAPU8[$2 + 19 >> 0] | 0) << 24 | (HEAPU8[$2 + 17 >> 0] | 0) << 8 | (HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0); //@line 30416
  $$0 = 0; //@line 30417
 } else {
  $$0 = $AsyncRetVal; //@line 30419
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 30421
 _mbedtls_cipher_free($8); //@line 30422
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 501; //@line 30425
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 30426
  HEAP32[$28 >> 2] = $$0; //@line 30427
  sp = STACKTOP; //@line 30428
  return;
 }
 ___async_unwind = 0; //@line 30431
 HEAP32[$ReallocAsyncCtx6 >> 2] = 501; //@line 30432
 $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 30433
 HEAP32[$28 >> 2] = $$0; //@line 30434
 sp = STACKTOP; //@line 30435
 return;
}
function __ZN4mbed11InterruptInD2Ev($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2190
 HEAP32[$0 >> 2] = 604; //@line 2191
 _gpio_irq_free($0 + 28 | 0); //@line 2193
 $3 = HEAP32[$0 + 68 >> 2] | 0; //@line 2195
 do {
  if ($3 | 0) {
   $7 = HEAP32[$3 + 8 >> 2] | 0; //@line 2201
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2202
   FUNCTION_TABLE_vi[$7 & 1023]($0 + 56 | 0); //@line 2203
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 101; //@line 2206
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2208
    sp = STACKTOP; //@line 2209
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2212
    break;
   }
  }
 } while (0);
 $10 = HEAP32[$0 + 52 >> 2] | 0; //@line 2218
 if (!$10) {
  return;
 }
 $14 = HEAP32[$10 + 8 >> 2] | 0; //@line 2225
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2226
 FUNCTION_TABLE_vi[$14 & 1023]($0 + 40 | 0); //@line 2227
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 102; //@line 2230
  sp = STACKTOP; //@line 2231
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2234
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28928
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 28930
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28932
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28934
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28936
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 28938
 $11 = HEAP32[$6 >> 2] | 0; //@line 28939
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 40 >> 2] | 0; //@line 28942
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 28943
 $15 = FUNCTION_TABLE_ii[$14 & 15]($11) | 0; //@line 28944
 if (!___async) {
  HEAP8[___async_retval >> 0] = $15; //@line 28948
  ___async_unwind = 0; //@line 28949
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 518; //@line 28951
 HEAP8[$ReallocAsyncCtx2 + 4 >> 0] = $2; //@line 28953
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 28955
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 28957
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 28959
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 28961
 sp = STACKTOP; //@line 28962
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 15457
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 15461
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 15464
   if (!$5) {
    $$0 = 0; //@line 15467
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 15473
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 15479
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 15486
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 15493
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 15500
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 15507
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 15514
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 15518
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 15528
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8814
 $1 = $0 + 12 | 0; //@line 8815
 $2 = HEAP32[$1 >> 2] | 0; //@line 8816
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8820
   _mbed_assert_internal(14839, 14844, 528); //@line 8821
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 288; //@line 8824
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 8826
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 8828
    sp = STACKTOP; //@line 8829
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8832
    $7 = HEAP32[$1 >> 2] | 0; //@line 8834
    break;
   }
  } else {
   $7 = $2; //@line 8838
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 8841
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8842
 FUNCTION_TABLE_vi[$6 & 1023]($0); //@line 8843
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 289; //@line 8846
  sp = STACKTOP; //@line 8847
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8850
  return;
 }
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13337
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13341
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13343
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13345
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13347
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13349
 $13 = $4 + 12 | 0; //@line 13351
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13352
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 13353
 $14 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 0) | 0; //@line 13354
 if (!___async) {
  HEAP32[___async_retval >> 2] = $14; //@line 13358
  ___async_unwind = 0; //@line 13359
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 334; //@line 13361
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $13; //@line 13363
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 13365
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 13367
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $12; //@line 13369
 sp = STACKTOP; //@line 13370
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 19498
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19500
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19504
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19506
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19508
 $11 = $2 + 12 | 0; //@line 19510
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2]; //@line 19511
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 19512
 $12 = _equeue_alloc($6, 16) | 0; //@line 19513
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 19517
  ___async_unwind = 0; //@line 19518
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 564; //@line 19520
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $11; //@line 19522
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 19524
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 19526
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 19528
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $11; //@line 19530
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $2; //@line 19532
 sp = STACKTOP; //@line 19533
 return;
}
function __ZN4mbed6TickerD0Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7174
 HEAP32[$0 >> 2] = 10244; //@line 7175
 $1 = $0 + 40 | 0; //@line 7176
 _emscripten_asm_const_ii(13, $1 | 0) | 0; //@line 7177
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7179
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7184
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7185
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7186
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 661; //@line 7189
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7191
    sp = STACKTOP; //@line 7192
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7195
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7200
 __ZN4mbed10TimerEventD2Ev($0); //@line 7201
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 662; //@line 7204
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 7206
  sp = STACKTOP; //@line 7207
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7210
  __ZdlPv($0); //@line 7211
  return;
 }
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20817
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20821
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20823
 $7 = $4 + 12 | 0; //@line 20825
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 20826
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 20827
 __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($6, $4); //@line 20828
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 398; //@line 20831
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 20832
  HEAP32[$8 >> 2] = $7; //@line 20833
  $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 20834
  HEAP32[$9 >> 2] = $4; //@line 20835
  sp = STACKTOP; //@line 20836
  return;
 }
 ___async_unwind = 0; //@line 20839
 HEAP32[$ReallocAsyncCtx3 >> 2] = 398; //@line 20840
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 20841
 HEAP32[$8 >> 2] = $7; //@line 20842
 $9 = $ReallocAsyncCtx3 + 8 | 0; //@line 20843
 HEAP32[$9 >> 2] = $4; //@line 20844
 sp = STACKTOP; //@line 20845
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_22($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20321
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20325
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20327
 $7 = $6 + 12 | 0; //@line 20329
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 20330
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 20331
 __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE($4, $6); //@line 20332
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 20335
  $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 20336
  HEAP32[$8 >> 2] = $7; //@line 20337
  $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 20338
  HEAP32[$9 >> 2] = $6; //@line 20339
  sp = STACKTOP; //@line 20340
  return;
 }
 ___async_unwind = 0; //@line 20343
 HEAP32[$ReallocAsyncCtx9 >> 2] = 360; //@line 20344
 $8 = $ReallocAsyncCtx9 + 4 | 0; //@line 20345
 HEAP32[$8 >> 2] = $7; //@line 20346
 $9 = $ReallocAsyncCtx9 + 8 | 0; //@line 20347
 HEAP32[$9 >> 2] = $6; //@line 20348
 sp = STACKTOP; //@line 20349
 return;
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 15653
 $32 = $0 + 3 | 0; //@line 15667
 $33 = HEAP8[$32 >> 0] | 0; //@line 15668
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 15670
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 15675
  $$sink21$lcssa = $32; //@line 15675
 } else {
  $$sink2123 = $32; //@line 15677
  $39 = $35; //@line 15677
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 15680
   $41 = HEAP8[$40 >> 0] | 0; //@line 15681
   $39 = $39 << 8 | $41 & 255; //@line 15683
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 15688
    $$sink21$lcssa = $40; //@line 15688
    break;
   } else {
    $$sink2123 = $40; //@line 15691
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 15698
}
function __ZN18LoRaMacChannelPlan11remove_planEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24489
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24491
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24493
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24495
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24497
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24499
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 24505
  return;
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 24508
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 24509
 __ZN7LoRaPHY18put_radio_to_sleepEv($12); //@line 24510
 if (!___async) {
  ___async_unwind = 0; //@line 24513
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 485; //@line 24515
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 24517
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 24519
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 24521
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 24523
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 24525
 sp = STACKTOP; //@line 24526
 return;
}
function __ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$0$expand_i1_val = 0, $12 = 0, $23 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28669
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 28671
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 28675
 if ((HEAP32[$0 + 8 >> 2] | 0) != (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0)) {
  HEAP32[$6 + 2020 >> 2] = 12; //@line 28680
  $$0 = 0; //@line 28681
  $23 = ___async_retval; //@line 28682
  $$0$expand_i1_val = $$0 & 1; //@line 28683
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 28684
  return;
 }
 if ($8 >>> 0 < ((__ZN7LoRaPHY29get_maximum_frame_counter_gapEv($6 + 4 | 0) | 0) & 65535) >>> 0) {
  $$0 = 1; //@line 28692
  $23 = ___async_retval; //@line 28693
  $$0$expand_i1_val = $$0 & 1; //@line 28694
  HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 28695
  return;
 }
 HEAP32[$6 + 2020 >> 2] = 10; //@line 28699
 HEAP32[$6 + 2048 >> 2] = HEAP32[$12 >> 2]; //@line 28702
 $$0 = 0; //@line 28703
 $23 = ___async_retval; //@line 28704
 $$0$expand_i1_val = $$0 & 1; //@line 28705
 HEAP8[$23 >> 0] = $$0$expand_i1_val; //@line 28706
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8130
 $1 = HEAP32[$0 >> 2] | 0; //@line 8131
 if (!$1) {
  return;
 }
 $4 = (HEAP32[$1 >> 2] | 0) + -1 | 0; //@line 8137
 HEAP32[$1 >> 2] = $4; //@line 8138
 if ($4 | 0) {
  return;
 }
 $7 = HEAP32[$1 + 24 >> 2] | 0; //@line 8144
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8145
 FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 8146
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 698; //@line 8149
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8151
  sp = STACKTOP; //@line 8152
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8155
 $9 = HEAP32[$0 >> 2] | 0; //@line 8156
 $11 = HEAP32[$9 + 4 >> 2] | 0; //@line 8158
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8159
 _equeue_dealloc($11, $9); //@line 8160
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 699; //@line 8163
  sp = STACKTOP; //@line 8164
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8167
 return;
}
function _ticker_read_us__async_cb_67($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22296
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22298
 $3 = $2 + 4 | 0; //@line 22299
 $4 = HEAP32[$3 >> 2] | 0; //@line 22300
 $7 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 22303
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 22304
 $8 = FUNCTION_TABLE_i[$7 & 7]() | 0; //@line 22305
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 634; //@line 22308
  $9 = $ReallocAsyncCtx + 4 | 0; //@line 22309
  HEAP32[$9 >> 2] = $3; //@line 22310
  $10 = $ReallocAsyncCtx + 8 | 0; //@line 22311
  HEAP32[$10 >> 2] = $4; //@line 22312
  sp = STACKTOP; //@line 22313
  return;
 }
 HEAP32[___async_retval >> 2] = $8; //@line 22317
 ___async_unwind = 0; //@line 22318
 HEAP32[$ReallocAsyncCtx >> 2] = 634; //@line 22319
 $9 = $ReallocAsyncCtx + 4 | 0; //@line 22320
 HEAP32[$9 >> 2] = $3; //@line 22321
 $10 = $ReallocAsyncCtx + 8 | 0; //@line 22322
 HEAP32[$10 >> 2] = $4; //@line 22323
 sp = STACKTOP; //@line 22324
 return;
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7241
 $2 = $0 + 12 | 0; //@line 7243
 $3 = HEAP32[$2 >> 2] | 0; //@line 7244
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 7248
   _mbed_assert_internal(14839, 14844, 528); //@line 7249
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 664; //@line 7252
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 7254
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7256
    sp = STACKTOP; //@line 7257
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7260
    $8 = HEAP32[$2 >> 2] | 0; //@line 7262
    break;
   }
  } else {
   $8 = $3; //@line 7266
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 7269
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7271
 FUNCTION_TABLE_vi[$7 & 1023]($0); //@line 7272
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 665; //@line 7275
  sp = STACKTOP; //@line 7276
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7279
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2582
 HEAP32[$0 >> 2] = 10244; //@line 2583
 __ZN4mbed6Ticker6detachEv($0); //@line 2584
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2586
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2592
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2593
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2594
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 114; //@line 2597
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2599
    sp = STACKTOP; //@line 2600
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2603
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2608
 __ZN4mbed10TimerEventD2Ev($0); //@line 2609
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 115; //@line 2612
  HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 2614
  sp = STACKTOP; //@line 2615
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2618
  __ZdlPv($0); //@line 2619
  return;
 }
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb_318($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22396
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22398
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22400
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22402
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22404
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22406
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22408
 HEAP8[$2 + 2026 >> 0] = HEAP8[$2 + 1941 >> 0] | 0; //@line 22412
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 22413
 __ZN7LoRaPHY9rx_configEP18rx_config_params_t($4, $6) | 0; //@line 22414
 if (!___async) {
  ___async_unwind = 0; //@line 22417
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 437; //@line 22419
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $8; //@line 22421
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 22423
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $4; //@line 22425
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $10; //@line 22427
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $12; //@line 22429
 sp = STACKTOP; //@line 22430
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28856
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28858
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28860
 $5 = $2 + 2904 | 0; //@line 28861
 HEAP32[$5 >> 2] = HEAP32[$5 >> 2] & -18 | 1; //@line 28865
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 28866
 __ZN12LoRaWANStack26process_status_check_stateEv($2); //@line 28867
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 28870
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 28871
  HEAP32[$9 >> 2] = $4; //@line 28872
  $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 28873
  HEAP32[$10 >> 2] = $2; //@line 28874
  sp = STACKTOP; //@line 28875
  return;
 }
 ___async_unwind = 0; //@line 28878
 HEAP32[$ReallocAsyncCtx2 >> 2] = 280; //@line 28879
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 28880
 HEAP32[$9 >> 2] = $4; //@line 28881
 $10 = $ReallocAsyncCtx2 + 8 | 0; //@line 28882
 HEAP32[$10 >> 2] = $2; //@line 28883
 sp = STACKTOP; //@line 28884
 return;
}
function _mbed_vtracef__async_cb_205($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 569
 $3 = HEAP32[175] | 0; //@line 573
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[167] | 0; //@line 577
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 578
  FUNCTION_TABLE_vi[$3 & 1023]($5); //@line 579
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 582
   sp = STACKTOP; //@line 583
   return;
  }
  ___async_unwind = 0; //@line 586
  HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 587
  sp = STACKTOP; //@line 588
  return;
 } else {
  $6 = HEAP32[174] | 0; //@line 591
  $7 = HEAP32[167] | 0; //@line 592
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 593
  FUNCTION_TABLE_vi[$6 & 1023]($7); //@line 594
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 145; //@line 597
   sp = STACKTOP; //@line 598
   return;
  }
  ___async_unwind = 0; //@line 601
  HEAP32[$ReallocAsyncCtx4 >> 2] = 145; //@line 602
  sp = STACKTOP; //@line 603
  return;
 }
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16632
 STACKTOP = STACKTOP + 16 | 0; //@line 16633
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16633
 $1 = sp; //@line 16634
 HEAP32[$1 >> 2] = $varargs; //@line 16635
 $2 = HEAP32[2572] | 0; //@line 16636
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16637
 _vfprintf($2, $0, $1) | 0; //@line 16638
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 722; //@line 16641
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 16643
  sp = STACKTOP; //@line 16644
  STACKTOP = sp; //@line 16645
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16647
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 16648
 _fputc(10, $2) | 0; //@line 16649
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 723; //@line 16652
  sp = STACKTOP; //@line 16653
  STACKTOP = sp; //@line 16654
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 16656
  _abort(); //@line 16657
 }
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_398($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 29339
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29349
 $14 = HEAP32[$10 >> 2] | 0; //@line 29356
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 29359
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 29362
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 29363
 FUNCTION_TABLE_viii[$17 & 7]($14, 1, $20); //@line 29364
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 524; //@line 29367
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 29368
  HEAP32[$21 >> 2] = $10; //@line 29369
  sp = STACKTOP; //@line 29370
  return;
 }
 ___async_unwind = 0; //@line 29373
 HEAP32[$ReallocAsyncCtx8 >> 2] = 524; //@line 29374
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 29375
 HEAP32[$21 >> 2] = $10; //@line 29376
 sp = STACKTOP; //@line 29377
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_397($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 29294
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29304
 $14 = HEAP32[$10 >> 2] | 0; //@line 29311
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 44 >> 2] | 0; //@line 29314
 $20 = (HEAPU8[((HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 17 >> 0] | 0) == 0 ? HEAP32[$0 + 8 >> 2] | 0 : HEAP32[$0 + 12 >> 2] | 0) + (HEAP32[$0 + 16 >> 2] | 0) >> 0] | 0) + 13 & 255; //@line 29317
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 29318
 FUNCTION_TABLE_viii[$17 & 7]($14, 0, $20); //@line 29319
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 524; //@line 29322
  $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 29323
  HEAP32[$21 >> 2] = $10; //@line 29324
  sp = STACKTOP; //@line 29325
  return;
 }
 ___async_unwind = 0; //@line 29328
 HEAP32[$ReallocAsyncCtx8 >> 2] = 524; //@line 29329
 $21 = $ReallocAsyncCtx8 + 4 | 0; //@line 29330
 HEAP32[$21 >> 2] = $10; //@line 29331
 sp = STACKTOP; //@line 29332
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $15 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14714
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14716
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14720
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 14722
 $9 = HEAP32[$2 >> 2] | 0; //@line 14723
 $12 = HEAP32[(HEAP32[$9 >> 2] | 0) + 68 >> 2] | 0; //@line 14726
 $14 = HEAP16[(HEAP32[$0 + 8 >> 2] | 0) + 12 >> 1] | 0; //@line 14728
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 14729
 FUNCTION_TABLE_viiii[$12 & 7]($9, $6, $8, $14); //@line 14730
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 539; //@line 14733
  $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 14734
  HEAP32[$15 >> 2] = $2; //@line 14735
  sp = STACKTOP; //@line 14736
  return;
 }
 ___async_unwind = 0; //@line 14739
 HEAP32[$ReallocAsyncCtx2 >> 2] = 539; //@line 14740
 $15 = $ReallocAsyncCtx2 + 4 | 0; //@line 14741
 HEAP32[$15 >> 2] = $2; //@line 14742
 sp = STACKTOP; //@line 14743
 return;
}
function __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $6 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19653
 $6 = $0 + 64 | 0; //@line 19654
 _mbedtls_aes_init($6); //@line 19655
 $7 = _mbedtls_aes_setkey_enc($6, $3, $4) | 0; //@line 19656
 if (!$7) {
  $9 = _mbedtls_aes_crypt_ecb($6, 1, $1, $5) | 0; //@line 19659
  if (($2 & 65535) > 15 & ($9 | 0) == 0) {
   $$0 = _mbedtls_aes_crypt_ecb($6, 1, $1 + 16 | 0, $5 + 16 | 0) | 0; //@line 19667
  } else {
   $$0 = $9; //@line 19669
  }
 } else {
  $$0 = $7; //@line 19672
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 19674
 _mbedtls_aes_free($6); //@line 19675
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 509; //@line 19678
  HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 19680
  sp = STACKTOP; //@line 19681
  return 0; //@line 19682
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19684
  return $$0 | 0; //@line 19685
 }
 return 0; //@line 19687
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 15587
 $23 = $0 + 2 | 0; //@line 15596
 $24 = HEAP8[$23 >> 0] | 0; //@line 15597
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 15600
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 15605
  $$lcssa = $24; //@line 15605
 } else {
  $$01618 = $23; //@line 15607
  $$019 = $27; //@line 15607
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 15609
   $31 = HEAP8[$30 >> 0] | 0; //@line 15610
   $$019 = ($$019 | $31 & 255) << 8; //@line 15613
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 15618
    $$lcssa = $31; //@line 15618
    break;
   } else {
    $$01618 = $30; //@line 15621
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 15628
}
function __ZN4mbed6TickerD2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7133
 HEAP32[$0 >> 2] = 10244; //@line 7134
 $1 = $0 + 40 | 0; //@line 7135
 _emscripten_asm_const_ii(13, $1 | 0) | 0; //@line 7136
 $4 = HEAP32[$0 + 52 >> 2] | 0; //@line 7138
 do {
  if ($4 | 0) {
   $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 7143
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 7144
   FUNCTION_TABLE_vi[$7 & 1023]($1); //@line 7145
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 659; //@line 7148
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 7150
    sp = STACKTOP; //@line 7151
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7154
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 7159
 __ZN4mbed10TimerEventD2Ev($0); //@line 7160
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 660; //@line 7163
  sp = STACKTOP; //@line 7164
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7167
  return;
 }
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_385($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27361
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27365
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27367
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27368
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 27372
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 27376
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27377
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 27378
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 27381
  $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 27382
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 27383
  sp = STACKTOP; //@line 27384
  return;
 }
 ___async_unwind = 0; //@line 27387
 HEAP32[$ReallocAsyncCtx2 >> 2] = 286; //@line 27388
 $10 = $ReallocAsyncCtx2 + 4 | 0; //@line 27389
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 27390
 sp = STACKTOP; //@line 27391
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_137($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29328
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29330
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29334
 $8 = $0 + 16 | 0; //@line 29336
 $10 = HEAP32[$8 >> 2] | 0; //@line 29338
 $13 = HEAP32[$8 + 4 >> 2] | 0; //@line 29341
 $15 = HEAP32[$0 + 24 >> 2] | 0; //@line 29343
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 29345
 __ZN4mbed6Ticker5setupEy($6, $10, $13); //@line 29346
 $16 = HEAP32[$2 >> 2] | 0; //@line 29347
 if (!$16) {
  return;
 }
 $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 29353
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 29354
 FUNCTION_TABLE_vi[$19 & 1023]($15); //@line 29355
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 29358
  sp = STACKTOP; //@line 29359
  return;
 }
 ___async_unwind = 0; //@line 29362
 HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 29363
 sp = STACKTOP; //@line 29364
 return;
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 15215
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 15215
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 15216
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 15217
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 15226
    $$016 = $9; //@line 15229
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 15229
   } else {
    $$016 = $0; //@line 15231
    $storemerge = 0; //@line 15231
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 15233
   $$0 = $$016; //@line 15234
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 15238
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 15244
   HEAP32[tempDoublePtr >> 2] = $2; //@line 15247
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 15247
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 15248
  }
 }
 return +$$0;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 26582
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26586
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26588
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26590
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 26592
 $11 = $4 + 12 | 0; //@line 26594
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26595
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 26596
 $12 = __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0_($6, $4, 10) | 0; //@line 26597
 if (!___async) {
  HEAP32[___async_retval >> 2] = $12; //@line 26601
  ___async_unwind = 0; //@line 26602
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 237; //@line 26604
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $11; //@line 26606
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $8; //@line 26608
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 26610
 sp = STACKTOP; //@line 26611
 return;
}
function _equeue_sema_wait($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $20 = 0, $3 = 0, $4 = 0, sp = 0;
 sp = STACKTOP; //@line 4444
 STACKTOP = STACKTOP + 16 | 0; //@line 4445
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4445
 $2 = sp + 8 | 0; //@line 4446
 $3 = sp; //@line 4447
 _pthread_mutex_lock($0 | 0) | 0; //@line 4448
 $4 = $0 + 76 | 0; //@line 4449
 do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   if (($1 | 0) < 0) {
    _pthread_cond_wait($0 + 28 | 0, $0 | 0) | 0; //@line 4457
    break;
   } else {
    _gettimeofday($2 | 0, 0) | 0; //@line 4460
    HEAP32[$3 >> 2] = (HEAP32[$2 >> 2] | 0) + (($1 >>> 0) / 1e3 | 0); //@line 4464
    HEAP32[$3 + 4 >> 2] = ((HEAP32[$2 + 4 >> 2] | 0) * 1e3 | 0) + ($1 * 1e6 | 0); //@line 4471
    _pthread_cond_timedwait($0 + 28 | 0, $0 | 0, $3 | 0) | 0; //@line 4473
    break;
   }
  }
 } while (0);
 $20 = (HEAP8[$4 >> 0] | 0) != 0; //@line 4479
 HEAP8[$4 >> 0] = 0; //@line 4480
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4481
 STACKTOP = sp; //@line 4482
 return $20 | 0; //@line 4482
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18235
 STACKTOP = STACKTOP + 16 | 0; //@line 18236
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 18236
 $3 = sp; //@line 18237
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 18239
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 18242
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 18243
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 18244
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 746; //@line 18247
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 18249
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 18251
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 18253
  sp = STACKTOP; //@line 18254
  STACKTOP = sp; //@line 18255
  return 0; //@line 18255
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 18257
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 18261
 }
 STACKTOP = sp; //@line 18263
 return $8 & 1 | 0; //@line 18263
}
function __ZN7LoRaPHY19num_active_channelsEPthh($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$01012 = 0, $$011 = 0, $8 = 0, $9 = 0, $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 & 255) < ($3 & 255))) {
  $$011 = 0; //@line 22080
  return $$011 | 0; //@line 22081
 }
 $wide$trip$count = $3 & 255; //@line 22084
 $$01012 = 0; //@line 22085
 $indvars$iv = $2 & 255; //@line 22085
 do {
  $8 = HEAP16[$1 + ($indvars$iv << 1) >> 1] | 0; //@line 22088
  $9 = $8 & 65535; //@line 22089
  $$01012 = ($$01012 & 255) + (($9 & 1) + ($9 >>> 1 & 1) + ($9 >>> 2 & 1) + ($9 >>> 3 & 1) + ($9 >>> 4 & 1) + ($9 >>> 5 & 1) + ($9 >>> 6 & 1) + ($9 >>> 7 & 1) + ($9 >>> 8 & 1) + ($9 >>> 9 & 1) + ($9 >>> 10 & 1) + ($9 >>> 11 & 1) + ($9 >>> 12 & 1) + ($9 >>> 13 & 1) + ($9 >>> 14 & 1) + (($8 & 65535) >>> 15 & 65535) & 255) | 0; //@line 22138
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22139
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 $$011 = $$01012 & 255; //@line 22148
 return $$011 | 0; //@line 22149
}
function __ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_366($0) {
 $0 = $0 | 0;
 var $$1$ = 0, $10 = 0, $12 = 0, $19 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26003
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26005
 $10 = HEAP8[$0 + 21 >> 0] | 0; //@line 26007
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 26009
 $$1$ = (HEAP32[___async_retval >> 2] | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : -1014; //@line 26017
 $19 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 26018
 HEAP8[(HEAPU16[$6 >> 1] | 0) + ($8 + 1185) >> 0] = $19; //@line 26023
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 1 + ($8 + 1185) >> 0] = $19 >>> 8; //@line 26030
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 2 + ($8 + 1185) >> 0] = $19 >>> 16; //@line 26037
 HEAP8[(HEAPU16[$6 >> 1] | 0) + 3 + ($8 + 1185) >> 0] = $19 >>> 24; //@line 26044
 HEAP16[$6 >> 1] = (HEAPU16[$6 >> 1] | 0) + 4; //@line 26049
 HEAP32[$12 >> 2] = $10 & 255; //@line 26051
 _mbed_tracef(16, 12709, 12902, $12); //@line 26052
 HEAP32[___async_retval >> 2] = $$1$; //@line 26054
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_269($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18530
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18534
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18536
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18537
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 18541
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 18545
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 18546
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 18547
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 18550
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 18551
  HEAP32[$11 >> 2] = $4; //@line 18552
  sp = STACKTOP; //@line 18553
  return;
 }
 ___async_unwind = 0; //@line 18556
 HEAP32[$ReallocAsyncCtx5 >> 2] = 306; //@line 18557
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 18558
 HEAP32[$11 >> 2] = $4; //@line 18559
 sp = STACKTOP; //@line 18560
 return;
}
function _schedule_interrupt__async_cb_420($0) {
 $0 = $0 | 0;
 var $16 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 30774
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30778
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30780
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30782
 $8 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30783
 if ($4 >>> 0 > $8 >>> 0) {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 | $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 } else {
  if (!($AsyncRetVal >>> 0 >= $4 >>> 0 & $AsyncRetVal >>> 0 < $8 >>> 0)) {
   return;
  }
 }
 $16 = HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] | 0; //@line 30802
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 30803
 FUNCTION_TABLE_v[$16 & 15](); //@line 30804
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 630; //@line 30807
  sp = STACKTOP; //@line 30808
  return;
 }
 ___async_unwind = 0; //@line 30811
 HEAP32[$ReallocAsyncCtx6 >> 2] = 630; //@line 30812
 sp = STACKTOP; //@line 30813
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13703
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13711
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13713
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13715
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13717
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13719
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13721
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13723
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 13734
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 13735
 HEAP32[$10 >> 2] = 0; //@line 13736
 HEAP32[$12 >> 2] = 0; //@line 13737
 HEAP32[$14 >> 2] = 0; //@line 13738
 HEAP32[$2 >> 2] = 0; //@line 13739
 $33 = HEAP32[$16 >> 2] | 0; //@line 13740
 HEAP32[$16 >> 2] = $33 | $18; //@line 13745
 if ($20 | 0) {
  ___unlockfile($22); //@line 13748
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 13751
 return;
}
function __ZN4mbed7TimeoutD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2541
 HEAP32[$0 >> 2] = 10244; //@line 2542
 __ZN4mbed6Ticker6detachEv($0); //@line 2543
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 2545
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 2551
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2552
   FUNCTION_TABLE_vi[$6 & 1023]($0 + 40 | 0); //@line 2553
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 112; //@line 2556
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2558
    sp = STACKTOP; //@line 2559
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 2562
    break;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2567
 __ZN4mbed10TimerEventD2Ev($0); //@line 2568
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 113; //@line 2571
  sp = STACKTOP; //@line 2572
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2575
  return;
 }
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_163($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30857
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30861
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30863
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30864
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 30868
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 30872
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 30873
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 30874
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 30877
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 30878
  HEAP32[$11 >> 2] = $4; //@line 30879
  sp = STACKTOP; //@line 30880
  return;
 }
 ___async_unwind = 0; //@line 30883
 HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 30884
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 30885
 HEAP32[$11 >> 2] = $4; //@line 30886
 sp = STACKTOP; //@line 30887
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8074
 $1 = HEAP32[$0 >> 2] | 0; //@line 8075
 if ($1 | 0) {
  $4 = HEAP32[$1 + 20 >> 2] | 0; //@line 8079
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 8080
  $5 = FUNCTION_TABLE_ii[$4 & 15]($1) | 0; //@line 8081
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 696; //@line 8084
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8086
   sp = STACKTOP; //@line 8087
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8090
  HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] = $5; //@line 8093
  if ($5 | 0) {
   return;
  }
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8099
 _mbed_assert_internal(15587, 15590, 149); //@line 8100
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 697; //@line 8103
  sp = STACKTOP; //@line 8104
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 8107
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17155
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 17161
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 17164
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 17167
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17168
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 17169
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 728; //@line 17172
    sp = STACKTOP; //@line 17173
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17176
    break;
   }
  }
 } while (0);
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_312($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21993
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21997
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21999
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 22000
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 22004
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 22008
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 22009
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 22010
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 22013
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 22014
  HEAP32[$11 >> 2] = $4; //@line 22015
  sp = STACKTOP; //@line 22016
  return;
 }
 ___async_unwind = 0; //@line 22019
 HEAP32[$ReallocAsyncCtx5 >> 2] = 332; //@line 22020
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 22021
 HEAP32[$11 >> 2] = $4; //@line 22022
 sp = STACKTOP; //@line 22023
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_175($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 31614
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31618
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 31620
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31621
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 31625
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 31629
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 31630
 FUNCTION_TABLE_vi[$10 & 1023]($6); //@line 31631
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 31634
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 31635
  HEAP32[$11 >> 2] = $4; //@line 31636
  sp = STACKTOP; //@line 31637
  return;
 }
 ___async_unwind = 0; //@line 31640
 HEAP32[$ReallocAsyncCtx5 >> 2] = 229; //@line 31641
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 31642
 HEAP32[$11 >> 2] = $4; //@line 31643
 sp = STACKTOP; //@line 31644
 return;
}
function __ZN12LoRaWANStack8shutdownEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11770
 STACKTOP = STACKTOP + 16 | 0; //@line 11771
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11771
 $1 = sp; //@line 11772
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11777
  STACKTOP = sp; //@line 11778
  return $$0 | 0; //@line 11778
 }
 HEAP32[$1 >> 2] = 0; //@line 11780
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11781
 __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status($0, $1); //@line 11782
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 371; //@line 11785
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 11787
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 11789
  sp = STACKTOP; //@line 11790
  STACKTOP = sp; //@line 11791
  return 0; //@line 11791
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11793
 $$0 = HEAP32[$1 >> 2] | 0; //@line 11795
 STACKTOP = sp; //@line 11796
 return $$0 | 0; //@line 11796
}
function _mbedtls_cipher_cmac_finish__async_cb_324($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 22740
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22742
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22744
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22746
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22748
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22750
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22752
 $ReallocAsyncCtx = _emscripten_realloc_async_context(24) | 0; //@line 22753
 _mbedtls_platform_zeroize($2, 16); //@line 22754
 if (!___async) {
  ___async_unwind = 0; //@line 22757
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 608; //@line 22759
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $4; //@line 22761
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 22763
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 22765
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $10; //@line 22767
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $12; //@line 22769
 sp = STACKTOP; //@line 22770
 return;
}
function __ZN12LoRaWANStack12stop_sendingEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11373
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 11374
 $1 = __ZN7LoRaMac13clear_tx_pipeEv($0) | 0; //@line 11375
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 367; //@line 11378
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 11380
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 11382
  sp = STACKTOP; //@line 11383
  return 0; //@line 11384
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11386
 if ($1 | 0) {
  $$0 = -1e3; //@line 11389
  return $$0 | 0; //@line 11390
 }
 $5 = $0 + 2496 | 0; //@line 11392
 if ((HEAP32[$5 >> 2] | 0) != 8) {
  $$0 = -1e3; //@line 11396
  return $$0 | 0; //@line 11397
 }
 $8 = $0 + 2904 | 0; //@line 11399
 HEAP32[$8 >> 2] = HEAP32[$8 >> 2] & -18; //@line 11402
 __ZN7LoRaMac14set_tx_ongoingEb($0, 0); //@line 11403
 HEAP32[$5 >> 2] = 2; //@line 11404
 $$0 = 0; //@line 11405
 return $$0 | 0; //@line 11406
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_189($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32592
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32594
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32598
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32600
 __ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t(HEAP32[$0 + 8 >> 2] | 0, HEAP8[$2 + 1916 >> 0] | 0, HEAP8[$2 + 1884 >> 0] | 0, HEAP32[$2 + 1880 >> 2] | 0, $2 + 1964 | 0); //@line 32610
 if ((HEAP32[$6 >> 2] | 0) != 2) {
  return;
 }
 _mbed_tracef(16, 12709, 13345, $8); //@line 32616
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 32617
 __ZN7LoRaMac15open_rx2_windowEv($2); //@line 32618
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 455; //@line 32621
  sp = STACKTOP; //@line 32622
  return;
 }
 ___async_unwind = 0; //@line 32625
 HEAP32[$ReallocAsyncCtx3 >> 2] = 455; //@line 32626
 sp = STACKTOP; //@line 32627
 return;
}
function _get_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$028 = 0, $$02930 = 0, $$031 = 0, $13 = 0, $23 = 0, $7 = 0, $8 = 0, $9 = 0;
 if (($0 | 0) == 0 | ($2 | 0) == 0) {
  $$028 = -24832; //@line 2515
  return $$028 | 0; //@line 2516
 }
 $7 = HEAP8[$0 + ($1 + -1) >> 0] | 0; //@line 2520
 $8 = $7 & 255; //@line 2521
 $9 = $1 - $8 | 0; //@line 2522
 HEAP32[$2 >> 2] = $9; //@line 2523
 $13 = ($7 << 24 >> 24 == 0 | $8 >>> 0 > $1 >>> 0) & 1; //@line 2527
 if (!$1) {
  $$0$lcssa = $13; //@line 2530
 } else {
  $$02930 = 0; //@line 2532
  $$031 = $13; //@line 2532
  while (1) {
   $23 = (($$02930 >>> 0 >= $9 >>> 0 ? (HEAP8[$0 + $$02930 >> 0] ^ $7) & 255 : 0) | $$031 & 255) & 255; //@line 2542
   $$02930 = $$02930 + 1 | 0; //@line 2543
   if (($$02930 | 0) == ($1 | 0)) {
    $$0$lcssa = $23; //@line 2546
    break;
   } else {
    $$031 = $23; //@line 2549
   }
  }
 }
 $$028 = $$0$lcssa << 24 >> 24 ? -25088 : 0; //@line 2555
 return $$028 | 0; //@line 2556
}
function _mbed_vtracef__async_cb_202($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 300
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 304
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 309
 $$pre = HEAP32[177] | 0; //@line 310
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 311
 FUNCTION_TABLE_v[$$pre & 15](); //@line 312
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 315
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 316
  HEAP32[$6 >> 2] = $4; //@line 317
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 318
  HEAP32[$7 >> 2] = $5; //@line 319
  sp = STACKTOP; //@line 320
  return;
 }
 ___async_unwind = 0; //@line 323
 HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 324
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 325
 HEAP32[$6 >> 2] = $4; //@line 326
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 327
 HEAP32[$7 >> 2] = $5; //@line 328
 sp = STACKTOP; //@line 329
 return;
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14573
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14575
 $6 = HEAP8[$0 + 10 >> 0] | 0; //@line 14579
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] | 0; //@line 14582
 $10 = HEAPU16[$0 + 8 >> 1] | 0; //@line 14583
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 14584
 FUNCTION_TABLE_viiiiiiiiiiiiii[$9 & 1]($2, 0, $6, 0, 0, 4800, 0, 5, 0, 0, 0, 0, 0, $10); //@line 14585
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 14588
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 14589
  HEAP32[$11 >> 2] = $2; //@line 14590
  sp = STACKTOP; //@line 14591
  return;
 }
 ___async_unwind = 0; //@line 14594
 HEAP32[$ReallocAsyncCtx2 >> 2] = 68; //@line 14595
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 14596
 HEAP32[$11 >> 2] = $2; //@line 14597
 sp = STACKTOP; //@line 14598
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_182($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 32057
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32059
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 32061
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32063
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32065
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 32067
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 32068
 __ZN4mbed5Timer5startEv($2); //@line 32069
 if (!___async) {
  ___async_unwind = 0; //@line 32072
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 63; //@line 32074
 HEAP16[$ReallocAsyncCtx4 + 4 >> 1] = $4; //@line 32076
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $2; //@line 32078
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 32080
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 32082
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 32084
 sp = STACKTOP; //@line 32085
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_406($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 29750
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 29752
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29754
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 29756
 $8 = HEAP16[$0 + 14 >> 1] | 0; //@line 29758
 $10 = HEAP8[$0 + 16 >> 0] | 0; //@line 29760
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 29762
 __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 29763
 if (!___async) {
  ___async_unwind = 0; //@line 29766
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 410; //@line 29768
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $4; //@line 29770
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $2; //@line 29772
 HEAP16[$ReallocAsyncCtx4 + 12 >> 1] = $6; //@line 29774
 HEAP16[$ReallocAsyncCtx4 + 14 >> 1] = $8; //@line 29776
 HEAP8[$ReallocAsyncCtx4 + 16 >> 0] = $10; //@line 29778
 sp = STACKTOP; //@line 29779
 return;
}
function _mbed_vtracef__async_cb_201($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 267
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 269
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 274
 $$pre = HEAP32[177] | 0; //@line 275
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 276
 FUNCTION_TABLE_v[$$pre & 15](); //@line 277
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 280
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 281
  HEAP32[$5 >> 2] = $2; //@line 282
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 283
  HEAP32[$6 >> 2] = $4; //@line 284
  sp = STACKTOP; //@line 285
  return;
 }
 ___async_unwind = 0; //@line 288
 HEAP32[$ReallocAsyncCtx9 >> 2] = 152; //@line 289
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 290
 HEAP32[$5 >> 2] = $2; //@line 291
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 292
 HEAP32[$6 >> 2] = $4; //@line 293
 sp = STACKTOP; //@line 294
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18154
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 18156
 $8 = $7 >> 8; //@line 18157
 if (!($7 & 1)) {
  $$0 = $8; //@line 18161
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 18166
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 18168
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 18171
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18176
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 18177
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 744; //@line 18180
  sp = STACKTOP; //@line 18181
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18184
  return;
 }
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26799
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26801
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26803
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 26805
 $7 = HEAP32[$2 >> 2] | 0; //@line 26806
 $10 = HEAP32[(HEAP32[$7 >> 2] | 0) + 24 >> 2] | 0; //@line 26809
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26810
 FUNCTION_TABLE_viii[$10 & 7]($7, $4, $6); //@line 26811
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 558; //@line 26814
  $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 26815
  HEAP32[$11 >> 2] = $2; //@line 26816
  sp = STACKTOP; //@line 26817
  return;
 }
 ___async_unwind = 0; //@line 26820
 HEAP32[$ReallocAsyncCtx2 >> 2] = 558; //@line 26821
 $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 26822
 HEAP32[$11 >> 2] = $2; //@line 26823
 sp = STACKTOP; //@line 26824
 return;
}
function __GLOBAL__sub_I_main_cpp() {
 var $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 7354
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7355
 __ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_(18872, 9, 8, 7, 6, 23, 4, 5, 66, 67, 0, 1, -1, -1, -1, -1, 62, -1, -1); //@line 7356
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 667; //@line 7359
  sp = STACKTOP; //@line 7360
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7363
  __ZN5Sht31C2E7PinNameS0_(24296, 10, 11); //@line 7364
  __ZN4mbed11InterruptInC2E7PinName(20208, 1337); //@line 7365
  __ZN6events10EventQueueC2EjPh(20280, 1664, 0); //@line 7366
  __ZN16LoRaWANInterfaceC2ER9LoRaRadio(20484, 18872); //@line 7367
  dest = 23664; //@line 7368
  stop = dest + 48 | 0; //@line 7368
  do {
   HEAP32[dest >> 2] = 0; //@line 7368
   dest = dest + 4 | 0; //@line 7368
  } while ((dest | 0) < (stop | 0));
  return;
 }
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17324
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 17330
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 17333
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 17336
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17337
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 17338
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 731; //@line 17341
    sp = STACKTOP; //@line 17342
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 17345
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_error_vfprintf__async_cb_135($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 29053
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 29055
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29057
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 29059
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 29061
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 29063
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 29065
 _serial_putc(20200, $2 << 24 >> 24); //@line 29066
 if (!___async) {
  ___async_unwind = 0; //@line 29069
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 655; //@line 29071
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 29073
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 29075
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 29077
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 29079
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 29081
 sp = STACKTOP; //@line 29082
 return;
}
function ___dynamic_cast__async_cb_363($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25722
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25724
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25726
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 25732
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 25747
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 25763
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 25768
    break;
   }
  default:
   {
    $$0 = 0; //@line 25772
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 25777
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$unpack$i = 0, $$unpack5$i = 0, $15 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8861
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 8864
 $$unpack5$i = HEAP32[$0 + 4 >> 2] | 0; //@line 8866
 $8 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack5$i >> 1) | 0; //@line 8868
 if (!($$unpack5$i & 1)) {
  $15 = $$unpack$i; //@line 8873
 } else {
  $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 8878
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8880
 FUNCTION_TABLE_viiiii[$15 & 7]($8, $1, $2, $3, $4); //@line 8881
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 290; //@line 8884
  sp = STACKTOP; //@line 8885
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8888
  return;
 }
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18196
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 18198
 $7 = $6 >> 8; //@line 18199
 if (!($6 & 1)) {
  $$0 = $7; //@line 18203
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 18208
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 18210
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 18213
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18218
 FUNCTION_TABLE_viiiii[$16 & 7]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 18219
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 745; //@line 18222
  sp = STACKTOP; //@line 18223
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18226
  return;
 }
}
function _ticker_remove_event($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6227
 $4 = (HEAP32[$0 + 4 >> 2] | 0) + 4 | 0; //@line 6230
 $5 = HEAP32[$4 >> 2] | 0; //@line 6231
 if (($5 | 0) == ($1 | 0)) {
  HEAP32[$4 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6236
  $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6237
  _schedule_interrupt($0); //@line 6238
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 632; //@line 6241
   sp = STACKTOP; //@line 6242
   return;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6245
  return;
 } else {
  $$0 = $5; //@line 6248
 }
 do {
  if (!$$0) {
   label = 8; //@line 6253
   break;
  }
  $10 = $$0 + 12 | 0; //@line 6256
  $$0 = HEAP32[$10 >> 2] | 0; //@line 6257
 } while (($$0 | 0) != ($1 | 0));
 if ((label | 0) == 8) {
  return;
 }
 HEAP32[$10 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 6270
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_185($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 32229
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32233
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32235
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32237
 $10 = (HEAP32[___async_retval >> 2] | 0) >= (HEAP32[$0 + 4 >> 2] | 0); //@line 32240
 $13 = HEAP32[(HEAP32[$4 >> 2] | 0) + 8 >> 2] | 0; //@line 32243
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 32244
 FUNCTION_TABLE_vi[$13 & 1023]($4); //@line 32245
 if (!___async) {
  ___async_unwind = 0; //@line 32248
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 32250
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $6; //@line 32252
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 32254
 HEAP8[$ReallocAsyncCtx2 + 12 >> 0] = $10 & 1; //@line 32257
 sp = STACKTOP; //@line 32258
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18111
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 18113
 $6 = $5 >> 8; //@line 18114
 if (!($5 & 1)) {
  $$0 = $6; //@line 18118
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 18123
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 18125
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 18128
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18133
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 18134
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 743; //@line 18137
  sp = STACKTOP; //@line 18138
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 18141
  return;
 }
}
function _main__async_cb_79($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 25419
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25421
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25423
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25425
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25427
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 25429
 $12 = HEAP32[$2 + 4 >> 2] | 0; //@line 25431
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 25432
 _equeue_dealloc($12, $2); //@line 25433
 if (!___async) {
  ___async_unwind = 0; //@line 25436
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 676; //@line 25438
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $6; //@line 25440
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $8; //@line 25442
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $10; //@line 25444
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $4; //@line 25446
 sp = STACKTOP; //@line 25447
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_354($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24721
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24725
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24727
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 24729
 $10 = HEAP16[$0 + 18 >> 1] | 0; //@line 24731
 $12 = HEAP8[$0 + 20 >> 0] | 0; //@line 24733
 $13 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 24735
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 24736
 FUNCTION_TABLE_viiiii[$13 & 7]($4, $6, $8, $10, $12); //@line 24737
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 309; //@line 24740
  sp = STACKTOP; //@line 24741
  return;
 }
 ___async_unwind = 0; //@line 24744
 HEAP32[$ReallocAsyncCtx >> 2] = 309; //@line 24745
 sp = STACKTOP; //@line 24746
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_61($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21684
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21686
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21688
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21690
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21692
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21694
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 21695
 __ZN7LoRaMac10disconnectEv($4); //@line 21696
 if (!___async) {
  ___async_unwind = 0; //@line 21699
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 348; //@line 21701
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $6; //@line 21703
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 21705
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $10; //@line 21707
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 21709
 sp = STACKTOP; //@line 21710
 return;
}
function __ZN7LoRaPHY18verify_tx_datarateEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$sink$in = 0, $$sink6 = 0, $3 = 0;
 $3 = $1 << 24 >> 24; //@line 22950
 if (($3 | 0) >= (HEAPU8[$0 + 92 >> 0] | 0)) {
  $$0 = 0; //@line 22956
  return $$0 | 0; //@line 22957
 }
 if (!(HEAP8[(HEAP32[$0 + 88 >> 2] | 0) + $3 >> 0] | 0)) {
  $$0 = 0; //@line 22965
  return $$0 | 0; //@line 22966
 }
 do {
  if ($2) {
   $$sink$in = $0 + 30 | 0; //@line 22972
   $$sink6 = $0 + 31 | 0; //@line 22972
  } else {
   if (!(HEAP8[$0 + 128 >> 0] & 1)) {
    $$sink$in = $0 + 26 | 0; //@line 22981
    $$sink6 = $0 + 27 | 0; //@line 22981
    break;
   } else {
    $$sink$in = $0 + 35 | 0; //@line 22986
    $$sink6 = $0 + 27 | 0; //@line 22986
    break;
   }
  }
 } while (0);
 $$0 = (HEAP8[$$sink$in >> 0] | 0) <= $1 << 24 >> 24 ? (HEAP8[$$sink6 >> 0] | 0) >= $1 << 24 >> 24 : 0; //@line 22996
 return $$0 | 0; //@line 22997
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_186($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32264
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32266
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 32268
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 32270
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32272
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 32273
 __ZN4mbed5TimerC2Ev($2); //@line 32274
 if (!___async) {
  ___async_unwind = 0; //@line 32277
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 62; //@line 32279
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 32281
 HEAP16[$ReallocAsyncCtx3 + 8 >> 1] = $4; //@line 32283
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 32285
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 32287
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $2; //@line 32289
 sp = STACKTOP; //@line 32290
 return;
}
function __ZN16LoRaWANInterface7receiveEhPhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $5 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5511
 STACKTOP = STACKTOP + 16 | 0; //@line 5512
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5512
 $5 = sp + 4 | 0; //@line 5513
 $6 = sp; //@line 5514
 HEAP8[$5 >> 0] = $1; //@line 5515
 HEAP32[$6 >> 2] = $4; //@line 5516
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5518
 $8 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $2, $3, $5, $6, 1) | 0; //@line 5519
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 161; //@line 5522
  sp = STACKTOP; //@line 5523
  STACKTOP = sp; //@line 5524
  return 0; //@line 5524
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5526
  STACKTOP = sp; //@line 5527
  return $8 | 0; //@line 5527
 }
 return 0; //@line 5529
}
function __ZN16SX1276_LoRaRadio4sendEPhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 344
 switch (HEAP8[$0 + 689 >> 0] | 0) {
 case 0:
  {
   _emscripten_asm_const_iiiiiii(0, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 696 >> 0] | 0, HEAP32[$0 + 704 >> 2] | 0, HEAP32[$0 + 712 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 359
   break;
  }
 case 1:
  {
   _emscripten_asm_const_iiiiiii(1, HEAP32[$0 + 692 >> 2] | 0, HEAP8[$0 + 748 >> 0] | 0, HEAP32[$0 + 752 >> 2] | 0, HEAP32[$0 + 756 >> 2] | 0, $1 | 0, $2 & 255 | 0) | 0; //@line 373
   break;
  }
 default:
  {}
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 379
 __ZN16SX1276_LoRaRadio8transmitEj($0, 0); //@line 380
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 50; //@line 383
  sp = STACKTOP; //@line 384
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 387
  return;
 }
}
function __ZN7LoRaPHY14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $15 = 0, $25 = 0, $4 = 0, $5 = 0;
 $4 = $1 & 255; //@line 21866
 $5 = $4 >>> 4; //@line 21867
 $10 = 1 << ($4 & 15); //@line 21872
 if ($10 & (HEAPU16[(HEAP32[$0 + 120 >> 2] | 0) + ($5 << 1) >> 1] | 0) | 0) {
  $$0 = 0; //@line 21876
  return $$0 | 0; //@line 21877
 }
 $15 = (HEAP32[$0 + 124 >> 2] | 0) + ($4 * 12 | 0) | 0; //@line 21881
 HEAP32[$15 >> 2] = 0; //@line 21882
 HEAP32[$15 + 4 >> 2] = 0; //@line 21882
 HEAP32[$15 + 8 >> 2] = 0; //@line 21882
 if (!((HEAPU8[$0 + 20 >> 0] | 0) > ($1 & 255) ? (($1 & 255) >>> 4 & 255) <= (HEAPU8[$0 + 113 >> 0] | 0) : 0)) {
  $$0 = 0; //@line 21892
  return $$0 | 0; //@line 21893
 }
 $25 = (HEAP32[$0 + 116 >> 2] | 0) + ($5 << 1) | 0; //@line 21898
 HEAP16[$25 >> 1] = ($10 ^ 65535) & (HEAPU16[$25 >> 1] | 0); //@line 21903
 $$0 = 1; //@line 21904
 return $$0 | 0; //@line 21905
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_119($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28008
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28012
 $4 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28013
 $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 76 >> 2] | 0; //@line 28016
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 28017
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 28018
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 556; //@line 28021
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 28022
  HEAP32[$8 >> 2] = $AsyncRetVal; //@line 28023
  sp = STACKTOP; //@line 28024
  return;
 }
 ___async_unwind = 0; //@line 28027
 HEAP32[$ReallocAsyncCtx3 >> 2] = 556; //@line 28028
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 28029
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 28030
 sp = STACKTOP; //@line 28031
 return;
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 32009
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 32011
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 32013
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 32015
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32017
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 32018
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 32019
 _wait_ms(1); //@line 32020
 if (!___async) {
  ___async_unwind = 0; //@line 32023
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 61; //@line 32025
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $4; //@line 32027
 HEAP16[$ReallocAsyncCtx7 + 8 >> 1] = $6; //@line 32029
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $8; //@line 32031
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $2; //@line 32033
 sp = STACKTOP; //@line 32034
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $16 = 0, $18 = 0, $19 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1362
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 1364
 HEAP8[$0 + 688 >> 0] = 0; //@line 1366
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1368
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 44 >> 2] | 0; //@line 1374
 if (!$7) {
  return;
 }
 $13 = HEAPU8[$0 + 782 >> 0] | 0; //@line 1383
 $16 = HEAP8[$0 + 781 >> 0] | 0; //@line 1386
 $18 = HEAP8[$0 + 780 >> 0] | 0; //@line 1388
 $19 = HEAP32[$7 >> 2] | 0; //@line 1389
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1390
 FUNCTION_TABLE_viiiii[$19 & 7]($4 + 32 | 0, $0 + 792 | 0, $13, $16, $18); //@line 1391
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 84; //@line 1394
  sp = STACKTOP; //@line 1395
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1398
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28712
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28714
 $4 = HEAP8[$0 + 8 >> 0] & 1; //@line 28717
 $5 = HEAP32[$2 >> 2] | 0; //@line 28718
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 48 >> 2] | 0; //@line 28721
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 28722
 FUNCTION_TABLE_vii[$8 & 15]($5, $4); //@line 28723
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 548; //@line 28726
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 28727
  HEAP32[$9 >> 2] = $2; //@line 28728
  sp = STACKTOP; //@line 28729
  return;
 }
 ___async_unwind = 0; //@line 28732
 HEAP32[$ReallocAsyncCtx2 >> 2] = 548; //@line 28733
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 28734
 HEAP32[$9 >> 2] = $2; //@line 28735
 sp = STACKTOP; //@line 28736
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27979
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27981
 $3 = HEAP32[$2 >> 2] | 0; //@line 27982
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 36 >> 2] | 0; //@line 27985
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 27986
 $7 = FUNCTION_TABLE_ii[$6 & 15]($3) | 0; //@line 27987
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 555; //@line 27990
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 27991
  HEAP32[$8 >> 2] = $2; //@line 27992
  sp = STACKTOP; //@line 27993
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 27997
 ___async_unwind = 0; //@line 27998
 HEAP32[$ReallocAsyncCtx2 >> 2] = 555; //@line 27999
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 28000
 HEAP32[$8 >> 2] = $2; //@line 28001
 sp = STACKTOP; //@line 28002
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_308($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21721
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21723
 $4 = HEAP32[$2 + 748 >> 2] | 0; //@line 21725
 if (!$4) {
  __ZN12LoRaPHYEU868D2Ev($2 + 4 | 0); //@line 21729
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 21734
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21735
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 736 | 0); //@line 21736
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 21739
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 21740
  HEAP32[$9 >> 2] = $2; //@line 21741
  sp = STACKTOP; //@line 21742
  return;
 }
 ___async_unwind = 0; //@line 21745
 HEAP32[$ReallocAsyncCtx6 >> 2] = 381; //@line 21746
 $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 21747
 HEAP32[$9 >> 2] = $2; //@line 21748
 sp = STACKTOP; //@line 21749
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_54($0) {
 $0 = $0 | 0;
 var $12 = 0, $2 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21352
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21354
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21358
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21360
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 >> 2]; //@line 21362
 __ZN4mbed6Ticker5setupEy($6, 2e5, 0); //@line 21363
 $9 = HEAP32[$2 >> 2] | 0; //@line 21364
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 21370
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 21371
 FUNCTION_TABLE_vi[$12 & 1023]($8); //@line 21372
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 21375
  sp = STACKTOP; //@line 21376
  return;
 }
 ___async_unwind = 0; //@line 21379
 HEAP32[$ReallocAsyncCtx3 >> 2] = 54; //@line 21380
 sp = STACKTOP; //@line 21381
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 14213
 STACKTOP = STACKTOP + 256 | 0; //@line 14214
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 14214
 $5 = sp; //@line 14215
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 14221
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 14225
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 14228
   $$011 = $9; //@line 14229
   do {
    _out_670($0, $5, 256); //@line 14231
    $$011 = $$011 + -256 | 0; //@line 14232
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 14241
  } else {
   $$0$lcssa = $9; //@line 14243
  }
  _out_670($0, $5, $$0$lcssa); //@line 14245
 }
 STACKTOP = sp; //@line 14247
 return;
}
function _mbedtls_ccm_setkey__async_cb_411($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 30154
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30156
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30158
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30160
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 30162
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 30166
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 30169
 $9 = _mbedtls_cipher_setkey($2, $4, $6, 1) | 0; //@line 30170
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 574; //@line 30173
  sp = STACKTOP; //@line 30174
  return;
 }
 HEAP32[___async_retval >> 2] = $9; //@line 30178
 ___async_unwind = 0; //@line 30179
 HEAP32[$ReallocAsyncCtx >> 2] = 574; //@line 30180
 sp = STACKTOP; //@line 30181
 return;
}
function __ZN4mbed11InterruptInD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18333
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18335
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 18337
 if (!$4) {
  __ZdlPv($2); //@line 18340
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 18345
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 18346
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 18347
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 18350
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 18351
  HEAP32[$9 >> 2] = $2; //@line 18352
  sp = STACKTOP; //@line 18353
  return;
 }
 ___async_unwind = 0; //@line 18356
 HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 18357
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 18358
 HEAP32[$9 >> 2] = $2; //@line 18359
 sp = STACKTOP; //@line 18360
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_110($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 27374
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27378
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 27380
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 27382
 HEAP32[$4 + 1788 >> 2] = __ZN18LoRaWANTimeHandler16get_current_timeEv(HEAP32[$0 + 4 >> 2] | 0) | 0; //@line 27385
 HEAP8[$4 + 1936 >> 0] = 1; //@line 27387
 HEAP8[$6 >> 0] = 1; //@line 27388
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 27389
 __ZN7LoRaPHY25setup_public_network_modeEb($8, 1); //@line 27390
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 473; //@line 27393
  sp = STACKTOP; //@line 27394
  return;
 }
 ___async_unwind = 0; //@line 27397
 HEAP32[$ReallocAsyncCtx10 >> 2] = 473; //@line 27398
 sp = STACKTOP; //@line 27399
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_388($0) {
 $0 = $0 | 0;
 var $12 = 0, $15 = 0, $2 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 27783
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27785
 if (!(HEAP8[$2 + 770 >> 0] | 0)) {
  HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = 0; //@line 27792
 }
 $9 = HEAP32[$2 + 788 >> 2] | 0; //@line 27795
 if (!$9) {
  return;
 }
 $12 = HEAP32[$9 + 60 >> 2] | 0; //@line 27801
 if (!$12) {
  return;
 }
 $15 = HEAP32[$12 >> 2] | 0; //@line 27807
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 27808
 FUNCTION_TABLE_vi[$15 & 1023]($9 + 48 | 0); //@line 27809
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27812
  sp = STACKTOP; //@line 27813
  return;
 }
 ___async_unwind = 0; //@line 27816
 HEAP32[$ReallocAsyncCtx4 >> 2] = 89; //@line 27817
 sp = STACKTOP; //@line 27818
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11508
 STACKTOP = STACKTOP + 32 | 0; //@line 11509
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11509
 $vararg_buffer = sp; //@line 11510
 $3 = sp + 20 | 0; //@line 11511
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11515
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 11517
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 11519
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 11521
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 11523
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 11528
  $10 = -1; //@line 11529
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 11532
 }
 STACKTOP = sp; //@line 11534
 return $10 | 0; //@line 11534
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_346($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24110
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24112
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 24119
  return;
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24122
 _mbed_assert_internal(12936, 12964, 953); //@line 24123
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 444; //@line 24126
  $5 = $ReallocAsyncCtx5 + 4 | 0; //@line 24127
  HEAP32[$5 >> 2] = $2; //@line 24128
  sp = STACKTOP; //@line 24129
  return;
 }
 ___async_unwind = 0; //@line 24132
 HEAP32[$ReallocAsyncCtx5 >> 2] = 444; //@line 24133
 $5 = $ReallocAsyncCtx5 + 4 | 0; //@line 24134
 HEAP32[$5 >> 2] = $2; //@line 24135
 sp = STACKTOP; //@line 24136
 return;
}
function __ZN4mbed5Timer5startEv($0) {
 $0 = $0 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2789
 if (HEAP32[$0 >> 2] | 0) {
  return;
 }
 if (HEAP8[$0 + 28 >> 0] | 0) {
  _sleep_manager_lock_deep_sleep_internal(); //@line 2799
 }
 $7 = HEAP32[$0 + 24 >> 2] | 0; //@line 2802
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 2803
 $8 = _ticker_read_us($7) | 0; //@line 2804
 $9 = tempRet0; //@line 2805
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 2808
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 2810
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 2812
  sp = STACKTOP; //@line 2813
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2816
 $13 = $0 + 8 | 0; //@line 2818
 HEAP32[$13 >> 2] = $8; //@line 2820
 HEAP32[$13 + 4 >> 2] = $9; //@line 2823
 HEAP32[$0 >> 2] = 1; //@line 2824
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_381($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 27236
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27240
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 27241
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 27247
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 27248
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 27249
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 119; //@line 27252
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 27253
  HEAP32[$9 >> 2] = $4; //@line 27254
  sp = STACKTOP; //@line 27255
  return;
 }
 ___async_unwind = 0; //@line 27258
 HEAP32[$ReallocAsyncCtx3 >> 2] = 119; //@line 27259
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 27260
 HEAP32[$9 >> 2] = $4; //@line 27261
 sp = STACKTOP; //@line 27262
 return;
}
function __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0) {
 $0 = $0 | 0;
 var $13 = 0;
 if ((HEAP32[$0 + 652 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(4, HEAP32[$0 + 484 >> 2] | 0, 0) | 0; //@line 1314
 }
 if ((HEAP32[$0 + 656 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(4, HEAP32[$0 + 508 >> 2] | 0, 0) | 0; //@line 1322
 }
 if ((HEAP32[$0 + 672 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(4, HEAP32[$0 + 604 >> 2] | 0, 0) | 0; //@line 1330
 }
 $13 = $0 + 660 | 0; //@line 1332
 if ((HEAP32[$13 >> 2] | 0) != -1) {
  _emscripten_asm_const_iii(4, HEAP32[$0 + 532 >> 2] | 0, 0) | 0; //@line 1338
  if ((HEAP32[$13 >> 2] | 0) != -1) {
   _emscripten_asm_const_iii(4, HEAP32[$0 + 556 >> 2] | 0, 0) | 0; //@line 1344
  }
 }
 if ((HEAP32[$0 + 668 >> 2] | 0) == -1) {
  return;
 }
 _emscripten_asm_const_iii(4, HEAP32[$0 + 580 >> 2] | 0, 0) | 0; //@line 1355
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $12 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7382
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 7385
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 7387
 $5 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 7389
 if (!($$unpack2$i & 1)) {
  $12 = $$unpack$i; //@line 7394
 } else {
  $12 = HEAP32[(HEAP32[$5 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 7399
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7401
 FUNCTION_TABLE_vii[$12 & 15]($5, $1); //@line 7402
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 233; //@line 7405
  sp = STACKTOP; //@line 7406
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7409
  return;
 }
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 6475
 STACKTOP = STACKTOP + 16 | 0; //@line 6476
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6476
 $vararg_buffer = sp; //@line 6477
 HEAP32[$vararg_buffer >> 2] = $0; //@line 6478
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 6480
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 6482
 _mbed_error_printf(14379, $vararg_buffer); //@line 6483
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6484
 _mbed_die(); //@line 6485
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 635; //@line 6488
  sp = STACKTOP; //@line 6489
  STACKTOP = sp; //@line 6490
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6492
  STACKTOP = sp; //@line 6493
  return;
 }
}
function _schedule_interrupt__async_cb_419($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 30742
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30744
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30746
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30748
 $9 = HEAP32[(HEAP32[$2 >> 2] | 0) + 4 >> 2] | 0; //@line 30751
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(16) | 0; //@line 30752
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 30753
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 30757
  ___async_unwind = 0; //@line 30758
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 629; //@line 30760
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 30762
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $6; //@line 30764
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $2; //@line 30766
 sp = STACKTOP; //@line 30767
 return;
}
function __ZN12LoRaWANStack12stop_sendingEv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $13 = 0, $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25785
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25787
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -1e3; //@line 25792
  $13 = ___async_retval; //@line 25793
  HEAP32[$13 >> 2] = $$0; //@line 25794
  return;
 }
 $7 = $2 + 2496 | 0; //@line 25797
 if ((HEAP32[$7 >> 2] | 0) != 8) {
  $$0 = -1e3; //@line 25801
  $13 = ___async_retval; //@line 25802
  HEAP32[$13 >> 2] = $$0; //@line 25803
  return;
 }
 $10 = $2 + 2904 | 0; //@line 25806
 HEAP32[$10 >> 2] = HEAP32[$10 >> 2] & -18; //@line 25809
 __ZN7LoRaMac14set_tx_ongoingEb($4, 0); //@line 25810
 HEAP32[$7 >> 2] = 2; //@line 25811
 $$0 = 0; //@line 25812
 $13 = ___async_retval; //@line 25813
 HEAP32[$13 >> 2] = $$0; //@line 25814
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16292
 STACKTOP = STACKTOP + 16 | 0; //@line 16293
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16293
 $1 = sp; //@line 16294
 HEAP32[$1 >> 2] = $varargs; //@line 16295
 $2 = HEAP32[2604] | 0; //@line 16296
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16297
 $3 = _vfprintf($2, $0, $1) | 0; //@line 16298
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 715; //@line 16301
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 16303
  sp = STACKTOP; //@line 16304
  STACKTOP = sp; //@line 16305
  return 0; //@line 16305
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16307
  STACKTOP = sp; //@line 16308
  return $3 | 0; //@line 16308
 }
 return 0; //@line 16310
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30271
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30273
 $3 = HEAP32[$2 >> 2] | 0; //@line 30274
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 12 >> 2] | 0; //@line 30277
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 30278
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 30279
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 545; //@line 30282
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 30283
  HEAP32[$7 >> 2] = $2; //@line 30284
  sp = STACKTOP; //@line 30285
  return;
 }
 ___async_unwind = 0; //@line 30288
 HEAP32[$ReallocAsyncCtx2 >> 2] = 545; //@line 30289
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 30290
 HEAP32[$7 >> 2] = $2; //@line 30291
 sp = STACKTOP; //@line 30292
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10331
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 10334
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 10336
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 10338
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 10343
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 10348
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10350
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 10351
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 340; //@line 10354
  sp = STACKTOP; //@line 10355
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10358
  return;
 }
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16092
 STACKTOP = STACKTOP + 16 | 0; //@line 16093
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16093
 $3 = sp; //@line 16094
 HEAP32[$3 >> 2] = $varargs; //@line 16095
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16096
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 16097
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 711; //@line 16100
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 16102
  sp = STACKTOP; //@line 16103
  STACKTOP = sp; //@line 16104
  return 0; //@line 16104
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16106
  STACKTOP = sp; //@line 16107
  return $4 | 0; //@line 16107
 }
 return 0; //@line 16109
}
function _initialize__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30867
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30869
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30871
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30873
 $9 = HEAP32[(HEAP32[$4 >> 2] | 0) + 24 >> 2] | 0; //@line 30876
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 30877
 $10 = FUNCTION_TABLE_i[$9 & 7]() | 0; //@line 30878
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 30882
  ___async_unwind = 0; //@line 30883
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 619; //@line 30885
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 30887
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 30889
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 30891
 sp = STACKTOP; //@line 30892
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31334
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31336
 $3 = HEAP32[$2 >> 2] | 0; //@line 31337
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 8 >> 2] | 0; //@line 31340
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 31341
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 31342
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 542; //@line 31345
  $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 31346
  HEAP32[$7 >> 2] = $2; //@line 31347
  sp = STACKTOP; //@line 31348
  return;
 }
 ___async_unwind = 0; //@line 31351
 HEAP32[$ReallocAsyncCtx2 >> 2] = 542; //@line 31352
 $7 = $ReallocAsyncCtx2 + 4 | 0; //@line 31353
 HEAP32[$7 >> 2] = $2; //@line 31354
 sp = STACKTOP; //@line 31355
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16789
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 16792
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 16794
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 16796
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 16801
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 16806
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16808
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 16809
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 474; //@line 16812
  sp = STACKTOP; //@line 16813
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16816
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1612
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 1615
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 1617
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 1619
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 1624
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 1629
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1631
 FUNCTION_TABLE_vi[$11 & 1023]($4); //@line 1632
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 90; //@line 1635
  sp = STACKTOP; //@line 1636
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1639
  return;
 }
}
function _mbedtls_ccm_setkey__async_cb_412($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 30187
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30189
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30191
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 30193
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 30195
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 30196
 $9 = _mbedtls_cipher_setup($2, $4) | 0; //@line 30197
 if (!___async) {
  HEAP32[___async_retval >> 2] = $9; //@line 30201
  ___async_unwind = 0; //@line 30202
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 573; //@line 30204
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 30206
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 30208
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 30210
 sp = STACKTOP; //@line 30211
 return;
}
function _mbed_vtracef__async_cb_197($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 33722
 HEAP32[171] = HEAP32[169]; //@line 33724
 $2 = HEAP32[177] | 0; //@line 33725
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 33730
 HEAP32[178] = 0; //@line 33731
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 33732
 FUNCTION_TABLE_v[$2 & 15](); //@line 33733
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 33736
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 33737
  HEAP32[$5 >> 2] = $4; //@line 33738
  sp = STACKTOP; //@line 33739
  return;
 }
 ___async_unwind = 0; //@line 33742
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 33743
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 33744
 HEAP32[$5 >> 2] = $4; //@line 33745
 sp = STACKTOP; //@line 33746
 return;
}
function _mbed_vtracef__async_cb_196($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 33692
 HEAP32[171] = HEAP32[169]; //@line 33694
 $2 = HEAP32[177] | 0; //@line 33695
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 33700
 HEAP32[178] = 0; //@line 33701
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 33702
 FUNCTION_TABLE_v[$2 & 15](); //@line 33703
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 33706
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 33707
  HEAP32[$5 >> 2] = $4; //@line 33708
  sp = STACKTOP; //@line 33709
  return;
 }
 ___async_unwind = 0; //@line 33712
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 33713
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 33714
 HEAP32[$5 >> 2] = $4; //@line 33715
 sp = STACKTOP; //@line 33716
 return;
}
function _mbedtls_cipher_info_from_values($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010 = 0, $$011 = 0, $3 = 0, $6 = 0, label = 0;
 $3 = HEAP32[2374] | 0; //@line 2302
 if (!$3) {
  $$010 = 0; //@line 2305
  return $$010 | 0; //@line 2306
 } else {
  $$011 = 9492; //@line 2308
  $6 = $3; //@line 2308
 }
 while (1) {
  if ((HEAP32[HEAP32[$6 + 28 >> 2] >> 2] | 0) == ($0 | 0)) {
   if ((HEAP32[$6 + 8 >> 2] | 0) == ($1 | 0)) {
    if ((HEAP32[$6 + 4 >> 2] | 0) == ($2 | 0)) {
     $$010 = $6; //@line 2324
     label = 6; //@line 2325
     break;
    }
   }
  }
  $6 = HEAP32[$$011 + 12 >> 2] | 0; //@line 2332
  if (!$6) {
   $$010 = 0; //@line 2335
   label = 6; //@line 2336
   break;
  } else {
   $$011 = $$011 + 8 | 0; //@line 2339
  }
 }
 if ((label | 0) == 6) {
  return $$010 | 0; //@line 2343
 }
 return 0; //@line 2345
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16214
 STACKTOP = STACKTOP + 16 | 0; //@line 16215
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16215
 $2 = sp; //@line 16216
 HEAP32[$2 >> 2] = $varargs; //@line 16217
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 16218
 $3 = _vsprintf($0, $1, $2) | 0; //@line 16219
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 713; //@line 16222
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 16224
  sp = STACKTOP; //@line 16225
  STACKTOP = sp; //@line 16226
  return 0; //@line 16226
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16228
  STACKTOP = sp; //@line 16229
  return $3 | 0; //@line 16229
 }
 return 0; //@line 16231
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_415($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30359
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30361
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30363
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 30365
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 30366
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 415; //@line 30369
  $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 30370
  HEAP32[$6 >> 2] = $2; //@line 30371
  sp = STACKTOP; //@line 30372
  return;
 }
 ___async_unwind = 0; //@line 30375
 HEAP32[$ReallocAsyncCtx3 >> 2] = 415; //@line 30376
 $6 = $ReallocAsyncCtx3 + 4 | 0; //@line 30377
 HEAP32[$6 >> 2] = $2; //@line 30378
 sp = STACKTOP; //@line 30379
 return;
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5576
 STACKTOP = STACKTOP + 16 | 0; //@line 5577
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5577
 $2 = sp; //@line 5578
 HEAP32[$2 >> 2] = $1; //@line 5579
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5581
 $4 = __ZN12LoRaWANStack16set_device_classERK14device_class_t($0 + 4 | 0, $2) | 0; //@line 5582
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 164; //@line 5585
  sp = STACKTOP; //@line 5586
  STACKTOP = sp; //@line 5587
  return 0; //@line 5587
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5589
  STACKTOP = sp; //@line 5590
  return $4 | 0; //@line 5590
 }
 return 0; //@line 5592
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 16877
 $5 = HEAP32[$4 >> 2] | 0; //@line 16878
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 16882
   HEAP32[$1 + 24 >> 2] = $3; //@line 16884
   HEAP32[$1 + 36 >> 2] = 1; //@line 16886
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 16890
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 16893
    HEAP32[$1 + 24 >> 2] = 2; //@line 16895
    HEAP8[$1 + 54 >> 0] = 1; //@line 16897
    break;
   }
   $10 = $1 + 24 | 0; //@line 16900
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 16904
   }
  }
 } while (0);
 return;
}
function __ZN7LoRaMac13clear_tx_pipeEv__async_cb_241($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14809
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14811
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14813
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14815
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14817
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 14819
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 14820
 if (!___async) {
  ___async_unwind = 0; //@line 14823
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 446; //@line 14825
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 14827
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 14829
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $8; //@line 14831
 sp = STACKTOP; //@line 14832
 return;
}
function _mbed_vtracef__async_cb_200($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 237
 HEAP32[171] = HEAP32[169]; //@line 239
 $2 = HEAP32[177] | 0; //@line 240
 if (!$2) {
  return;
 }
 $4 = HEAP32[178] | 0; //@line 245
 HEAP32[178] = 0; //@line 246
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 247
 FUNCTION_TABLE_v[$2 & 15](); //@line 248
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 251
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 252
  HEAP32[$5 >> 2] = $4; //@line 253
  sp = STACKTOP; //@line 254
  return;
 }
 ___async_unwind = 0; //@line 257
 HEAP32[$ReallocAsyncCtx8 >> 2] = 151; //@line 258
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 259
 HEAP32[$5 >> 2] = $4; //@line 260
 sp = STACKTOP; //@line 261
 return;
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_59($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21594
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21598
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 21603
 _mbed_assert_internal(11914, 11923, 778); //@line 21604
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 21607
  $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 21608
  HEAP32[$6 >> 2] = $4; //@line 21609
  sp = STACKTOP; //@line 21610
  return;
 }
 ___async_unwind = 0; //@line 21613
 HEAP32[$ReallocAsyncCtx6 >> 2] = 352; //@line 21614
 $6 = $ReallocAsyncCtx6 + 4 | 0; //@line 21615
 HEAP32[$6 >> 2] = $4; //@line 21616
 sp = STACKTOP; //@line 21617
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_7($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19059
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19061
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19063
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 19065
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1856 | 0); //@line 19066
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 478; //@line 19069
  $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 19070
  HEAP32[$6 >> 2] = $2; //@line 19071
  sp = STACKTOP; //@line 19072
  return;
 }
 ___async_unwind = 0; //@line 19075
 HEAP32[$ReallocAsyncCtx2 >> 2] = 478; //@line 19076
 $6 = $ReallocAsyncCtx2 + 4 | 0; //@line 19077
 HEAP32[$6 >> 2] = $2; //@line 19078
 sp = STACKTOP; //@line 19079
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_143($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 29647
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29651
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 29656
 _mbed_assert_internal(11914, 11923, 778); //@line 29657
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 266; //@line 29660
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 29661
  HEAP32[$6 >> 2] = $4; //@line 29662
  sp = STACKTOP; //@line 29663
  return;
 }
 ___async_unwind = 0; //@line 29666
 HEAP32[$ReallocAsyncCtx10 >> 2] = 266; //@line 29667
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 29668
 HEAP32[$6 >> 2] = $4; //@line 29669
 sp = STACKTOP; //@line 29670
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_139($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 29414
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29418
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 29423
 _mbed_assert_internal(11914, 11923, 778); //@line 29424
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 258; //@line 29427
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 29428
  HEAP32[$6 >> 2] = $4; //@line 29429
  sp = STACKTOP; //@line 29430
  return;
 }
 ___async_unwind = 0; //@line 29433
 HEAP32[$ReallocAsyncCtx12 >> 2] = 258; //@line 29434
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 29435
 HEAP32[$6 >> 2] = $4; //@line 29436
 sp = STACKTOP; //@line 29437
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_47($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 21057
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21061
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 21066
 _mbed_assert_internal(11914, 11923, 778); //@line 21067
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 254; //@line 21070
  $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 21071
  HEAP32[$6 >> 2] = $4; //@line 21072
  sp = STACKTOP; //@line 21073
  return;
 }
 ___async_unwind = 0; //@line 21076
 HEAP32[$ReallocAsyncCtx10 >> 2] = 254; //@line 21077
 $6 = $ReallocAsyncCtx10 + 4 | 0; //@line 21078
 HEAP32[$6 >> 2] = $4; //@line 21079
 sp = STACKTOP; //@line 21080
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_45($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 20990
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20994
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 20999
 _mbed_assert_internal(11914, 11923, 778); //@line 21000
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 250; //@line 21003
  $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 21004
  HEAP32[$6 >> 2] = $4; //@line 21005
  sp = STACKTOP; //@line 21006
  return;
 }
 ___async_unwind = 0; //@line 21009
 HEAP32[$ReallocAsyncCtx11 >> 2] = 250; //@line 21010
 $6 = $ReallocAsyncCtx11 + 4 | 0; //@line 21011
 HEAP32[$6 >> 2] = $4; //@line 21012
 sp = STACKTOP; //@line 21013
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_43($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 20923
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20927
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 20932
 _mbed_assert_internal(11914, 11923, 778); //@line 20933
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 246; //@line 20936
  $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 20937
  HEAP32[$6 >> 2] = $4; //@line 20938
  sp = STACKTOP; //@line 20939
  return;
 }
 ___async_unwind = 0; //@line 20942
 HEAP32[$ReallocAsyncCtx12 >> 2] = 246; //@line 20943
 $6 = $ReallocAsyncCtx12 + 4 | 0; //@line 20944
 HEAP32[$6 >> 2] = $4; //@line 20945
 sp = STACKTOP; //@line 20946
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_321($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 22627
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22631
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 22636
 _mbed_assert_internal(11914, 11923, 778); //@line 22637
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 22640
  $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 22641
  HEAP32[$6 >> 2] = $4; //@line 22642
  sp = STACKTOP; //@line 22643
  return;
 }
 ___async_unwind = 0; //@line 22646
 HEAP32[$ReallocAsyncCtx4 >> 2] = 323; //@line 22647
 $6 = $ReallocAsyncCtx4 + 4 | 0; //@line 22648
 HEAP32[$6 >> 2] = $4; //@line 22649
 sp = STACKTOP; //@line 22650
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3384
 $4 = _equeue_tick() | 0; //@line 3386
 HEAP32[$2 + -4 >> 2] = $1; //@line 3388
 $6 = $2 + -16 | 0; //@line 3389
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 3392
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3393
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 3394
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 131; //@line 3397
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3399
  sp = STACKTOP; //@line 3400
  return 0; //@line 3401
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3403
  _equeue_sema_signal($0 + 48 | 0); //@line 3405
  return $9 | 0; //@line 3406
 }
 return 0; //@line 3408
}
function __ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11862
 STACKTOP = STACKTOP + 16 | 0; //@line 11863
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11863
 $1 = $0 + 2904 | 0; //@line 11865
 HEAP32[$1 >> 2] = HEAP32[$1 >> 2] & -18 | 1; //@line 11869
 _mbed_tracef(2, 12021, 12672, sp); //@line 11870
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11871
 __ZN12LoRaWANStack26process_status_check_stateEv($0); //@line 11872
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 375; //@line 11875
  sp = STACKTOP; //@line 11876
  STACKTOP = sp; //@line 11877
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11879
  STACKTOP = sp; //@line 11880
  return;
 }
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_339($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 23941
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23945
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 23950
 _mbed_assert_internal(11914, 11923, 778); //@line 23951
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 318; //@line 23954
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 23955
  HEAP32[$6 >> 2] = $4; //@line 23956
  sp = STACKTOP; //@line 23957
  return;
 }
 ___async_unwind = 0; //@line 23960
 HEAP32[$ReallocAsyncCtx9 >> 2] = 318; //@line 23961
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 23962
 HEAP32[$6 >> 2] = $4; //@line 23963
 sp = STACKTOP; //@line 23964
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 11615
 $3 = HEAP8[$1 >> 0] | 0; //@line 11616
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 11621
  $$lcssa8 = $2; //@line 11621
 } else {
  $$011 = $1; //@line 11623
  $$0710 = $0; //@line 11623
  do {
   $$0710 = $$0710 + 1 | 0; //@line 11625
   $$011 = $$011 + 1 | 0; //@line 11626
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 11627
   $9 = HEAP8[$$011 >> 0] | 0; //@line 11628
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 11633
  $$lcssa8 = $8; //@line 11633
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 11643
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 17427
 STACKTOP = STACKTOP + 16 | 0; //@line 17428
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17428
 $vararg_buffer = sp; //@line 17429
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 17430
 FUNCTION_TABLE_v[$0 & 15](); //@line 17431
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 733; //@line 17434
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 17436
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 17438
  sp = STACKTOP; //@line 17439
  STACKTOP = sp; //@line 17440
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 17442
  _abort_message(18655, $vararg_buffer); //@line 17443
 }
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_214($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1126
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1130
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 1132
 $8 = HEAP8[$0 + 13 >> 0] | 0; //@line 1134
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 1136
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 1137
 FUNCTION_TABLE_viii[$9 & 7]($4, $6, $8); //@line 1138
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 339; //@line 1141
  sp = STACKTOP; //@line 1142
  return;
 }
 ___async_unwind = 0; //@line 1145
 HEAP32[$ReallocAsyncCtx >> 2] = 339; //@line 1146
 sp = STACKTOP; //@line 1147
 return;
}
function __ZN12LoRaWANStack22set_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, sp = 0;
 sp = STACKTOP; //@line 11563
 STACKTOP = STACKTOP + 16 | 0; //@line 11564
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11564
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11570
  STACKTOP = sp; //@line 11571
  return $$0 | 0; //@line 11571
 }
 HEAP8[$0 + 2909 >> 0] = 1; //@line 11574
 if (!(HEAP32[$0 + 2528 >> 2] | 0)) {
  _mbed_tracef(2, 12021, 12537, sp); //@line 11579
  $$0 = -1003; //@line 11580
  STACKTOP = sp; //@line 11581
  return $$0 | 0; //@line 11581
 } else {
  __ZN7LoRaMac24setup_link_check_requestEv($0); //@line 11583
  $$0 = 0; //@line 11584
  STACKTOP = sp; //@line 11585
  return $$0 | 0; //@line 11585
 }
 return 0; //@line 11587
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25231
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25235
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 25239
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 25242
 _mbed_tracef(16, 12021, 12448, $4); //@line 25243
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 25244
 __ZN12LoRaWANStack23process_connected_stateEv($8); //@line 25245
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 346; //@line 25248
  sp = STACKTOP; //@line 25249
  return;
 }
 ___async_unwind = 0; //@line 25252
 HEAP32[$ReallocAsyncCtx2 >> 2] = 346; //@line 25253
 sp = STACKTOP; //@line 25254
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_24($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20363
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20367
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20368
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 20372
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 20376
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(4) | 0; //@line 20377
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 20378
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 361; //@line 20381
  sp = STACKTOP; //@line 20382
  return;
 }
 ___async_unwind = 0; //@line 20385
 HEAP32[$ReallocAsyncCtx8 >> 2] = 361; //@line 20386
 sp = STACKTOP; //@line 20387
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7074
 $2 = HEAP32[2604] | 0; //@line 7075
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7076
 _putc($1, $2) | 0; //@line 7077
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 657; //@line 7080
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 7082
  sp = STACKTOP; //@line 7083
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7086
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7087
 _fflush($2) | 0; //@line 7088
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 658; //@line 7091
  sp = STACKTOP; //@line 7092
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7095
  return;
 }
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 16057
  } else {
   $$01318 = $0; //@line 16059
   $$01417 = $2; //@line 16059
   $$019 = $1; //@line 16059
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 16061
    $5 = HEAP8[$$019 >> 0] | 0; //@line 16062
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 16067
    if (!$$01417) {
     $14 = 0; //@line 16072
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 16075
     $$019 = $$019 + 1 | 0; //@line 16075
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 16081
  }
 } while (0);
 return $14 | 0; //@line 16084
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11567
 STACKTOP = STACKTOP + 32 | 0; //@line 11568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11568
 $vararg_buffer = sp; //@line 11569
 HEAP32[$0 + 36 >> 2] = 13; //@line 11572
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 11580
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 11582
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 11584
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 11589
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 11592
 STACKTOP = sp; //@line 11593
 return $14 | 0; //@line 11593
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15146
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15147
 $1 = __ZN7LoRaMac11schedule_txEv($0) | 0; //@line 15148
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 433; //@line 15151
  sp = STACKTOP; //@line 15152
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15155
 if (!$1) {
  return;
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 15160
 _mbed_assert_internal(12936, 12964, 849); //@line 15161
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 434; //@line 15164
  sp = STACKTOP; //@line 15165
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15168
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_413($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30274
 $3 = $2 + 2056 | 0; //@line 30275
 HEAP32[$3 >> 2] = 2; //@line 30276
 HEAP32[$2 + 2092 >> 2] = 2; //@line 30278
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 30280
 HEAP8[$2 + 2063 >> 0] = HEAP8[$2 + 1699 >> 0] | 0; //@line 30284
 HEAP8[$2 + 2062 >> 0] = 0; //@line 30286
 HEAP32[$2 + 2064 >> 2] = 0; //@line 30288
 HEAP8[$2 + 1180 >> 0] = 0; //@line 30290
 HEAP32[$3 >> 2] = 0; //@line 30291
 if ((HEAP32[$2 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$2 + 1174 >> 0] | 0) {
  return;
 }
 $18 = $2 + 1760 | 0; //@line 30304
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1; //@line 30307
 return;
}
function _mbed_die__async_cb_38($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 20738
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20740
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20742
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 20743
 _wait_ms(150); //@line 20744
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 638; //@line 20747
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 20748
  HEAP32[$4 >> 2] = $2; //@line 20749
  sp = STACKTOP; //@line 20750
  return;
 }
 ___async_unwind = 0; //@line 20753
 HEAP32[$ReallocAsyncCtx14 >> 2] = 638; //@line 20754
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 20755
 HEAP32[$4 >> 2] = $2; //@line 20756
 sp = STACKTOP; //@line 20757
 return;
}
function _mbed_die__async_cb_37($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 20713
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20715
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20717
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 20718
 _wait_ms(150); //@line 20719
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 639; //@line 20722
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 20723
  HEAP32[$4 >> 2] = $2; //@line 20724
  sp = STACKTOP; //@line 20725
  return;
 }
 ___async_unwind = 0; //@line 20728
 HEAP32[$ReallocAsyncCtx13 >> 2] = 639; //@line 20729
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 20730
 HEAP32[$4 >> 2] = $2; //@line 20731
 sp = STACKTOP; //@line 20732
 return;
}
function _mbed_die__async_cb_36($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 20688
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20690
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20692
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 20693
 _wait_ms(150); //@line 20694
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 640; //@line 20697
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 20698
  HEAP32[$4 >> 2] = $2; //@line 20699
  sp = STACKTOP; //@line 20700
  return;
 }
 ___async_unwind = 0; //@line 20703
 HEAP32[$ReallocAsyncCtx12 >> 2] = 640; //@line 20704
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 20705
 HEAP32[$4 >> 2] = $2; //@line 20706
 sp = STACKTOP; //@line 20707
 return;
}
function _mbed_die__async_cb_35($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 20663
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20665
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20667
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 20668
 _wait_ms(150); //@line 20669
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 641; //@line 20672
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 20673
  HEAP32[$4 >> 2] = $2; //@line 20674
  sp = STACKTOP; //@line 20675
  return;
 }
 ___async_unwind = 0; //@line 20678
 HEAP32[$ReallocAsyncCtx11 >> 2] = 641; //@line 20679
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 20680
 HEAP32[$4 >> 2] = $2; //@line 20681
 sp = STACKTOP; //@line 20682
 return;
}
function _mbed_die__async_cb_34($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 20638
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20640
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20642
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 20643
 _wait_ms(150); //@line 20644
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 642; //@line 20647
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 20648
  HEAP32[$4 >> 2] = $2; //@line 20649
  sp = STACKTOP; //@line 20650
  return;
 }
 ___async_unwind = 0; //@line 20653
 HEAP32[$ReallocAsyncCtx10 >> 2] = 642; //@line 20654
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 20655
 HEAP32[$4 >> 2] = $2; //@line 20656
 sp = STACKTOP; //@line 20657
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_257($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 17580
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17582
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17584
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17586
 $8 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 17588
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 17589
 FUNCTION_TABLE_vii[$8 & 15]($2, $4); //@line 17590
 if (!___async) {
  ___async_unwind = 0; //@line 17593
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 201; //@line 17595
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $6; //@line 17597
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $2; //@line 17599
 sp = STACKTOP; //@line 17600
 return;
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb($0) {
 $0 = $0 | 0;
 var $18 = 0, $2 = 0, $3 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30232
 $3 = $2 + 2056 | 0; //@line 30233
 HEAP32[$3 >> 2] = 2; //@line 30234
 HEAP32[$2 + 2092 >> 2] = 2; //@line 30236
 __ZN14LoRaMacCommand20clear_command_bufferEv($2 + 476 | 0); //@line 30238
 HEAP8[$2 + 2063 >> 0] = HEAP8[$2 + 1699 >> 0] | 0; //@line 30242
 HEAP8[$2 + 2062 >> 0] = 0; //@line 30244
 HEAP32[$2 + 2064 >> 2] = 0; //@line 30246
 HEAP8[$2 + 1180 >> 0] = 0; //@line 30248
 HEAP32[$3 >> 2] = 0; //@line 30249
 if ((HEAP32[$2 + 2052 >> 2] | 0) == 1) {
  return;
 }
 if (HEAP8[$2 + 1174 >> 0] | 0) {
  return;
 }
 $18 = $2 + 1760 | 0; //@line 30262
 HEAP32[$18 >> 2] = (HEAP32[$18 >> 2] | 0) + 1; //@line 30265
 return;
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_334($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23739
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23743
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23744
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 23748
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 23752
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 23753
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 23754
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 374; //@line 23757
  sp = STACKTOP; //@line 23758
  return;
 }
 ___async_unwind = 0; //@line 23761
 HEAP32[$ReallocAsyncCtx >> 2] = 374; //@line 23762
 sp = STACKTOP; //@line 23763
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4599
 STACKTOP = STACKTOP + 16 | 0; //@line 4600
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4600
 $3 = sp; //@line 4601
 HEAP32[$3 >> 2] = $varargs; //@line 4602
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4603
 _mbed_vtracef($0, $1, $2, $3); //@line 4604
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 140; //@line 4607
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 4609
  sp = STACKTOP; //@line 4610
  STACKTOP = sp; //@line 4611
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4613
  STACKTOP = sp; //@line 4614
  return;
 }
}
function _mbed_die__async_cb_33($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20613
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20615
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20617
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 20618
 _wait_ms(150); //@line 20619
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 643; //@line 20622
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 20623
  HEAP32[$4 >> 2] = $2; //@line 20624
  sp = STACKTOP; //@line 20625
  return;
 }
 ___async_unwind = 0; //@line 20628
 HEAP32[$ReallocAsyncCtx9 >> 2] = 643; //@line 20629
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 20630
 HEAP32[$4 >> 2] = $2; //@line 20631
 sp = STACKTOP; //@line 20632
 return;
}
function _mbed_die__async_cb_32($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20588
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20590
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20592
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 20593
 _wait_ms(400); //@line 20594
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 644; //@line 20597
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 20598
  HEAP32[$4 >> 2] = $2; //@line 20599
  sp = STACKTOP; //@line 20600
  return;
 }
 ___async_unwind = 0; //@line 20603
 HEAP32[$ReallocAsyncCtx8 >> 2] = 644; //@line 20604
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 20605
 HEAP32[$4 >> 2] = $2; //@line 20606
 sp = STACKTOP; //@line 20607
 return;
}
function _mbed_die__async_cb_31($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20563
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20565
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20567
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 20568
 _wait_ms(400); //@line 20569
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 645; //@line 20572
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 20573
  HEAP32[$4 >> 2] = $2; //@line 20574
  sp = STACKTOP; //@line 20575
  return;
 }
 ___async_unwind = 0; //@line 20578
 HEAP32[$ReallocAsyncCtx7 >> 2] = 645; //@line 20579
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 20580
 HEAP32[$4 >> 2] = $2; //@line 20581
 sp = STACKTOP; //@line 20582
 return;
}
function _mbed_die__async_cb_30($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20538
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20540
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20542
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 20543
 _wait_ms(400); //@line 20544
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 646; //@line 20547
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 20548
  HEAP32[$4 >> 2] = $2; //@line 20549
  sp = STACKTOP; //@line 20550
  return;
 }
 ___async_unwind = 0; //@line 20553
 HEAP32[$ReallocAsyncCtx6 >> 2] = 646; //@line 20554
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 20555
 HEAP32[$4 >> 2] = $2; //@line 20556
 sp = STACKTOP; //@line 20557
 return;
}
function _mbed_die__async_cb_29($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20513
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20515
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20517
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20518
 _wait_ms(400); //@line 20519
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 647; //@line 20522
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 20523
  HEAP32[$4 >> 2] = $2; //@line 20524
  sp = STACKTOP; //@line 20525
  return;
 }
 ___async_unwind = 0; //@line 20528
 HEAP32[$ReallocAsyncCtx5 >> 2] = 647; //@line 20529
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 20530
 HEAP32[$4 >> 2] = $2; //@line 20531
 sp = STACKTOP; //@line 20532
 return;
}
function _mbed_die__async_cb_28($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 20488
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20490
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20492
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 20493
 _wait_ms(400); //@line 20494
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 648; //@line 20497
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 20498
  HEAP32[$4 >> 2] = $2; //@line 20499
  sp = STACKTOP; //@line 20500
  return;
 }
 ___async_unwind = 0; //@line 20503
 HEAP32[$ReallocAsyncCtx4 >> 2] = 648; //@line 20504
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 20505
 HEAP32[$4 >> 2] = $2; //@line 20506
 sp = STACKTOP; //@line 20507
 return;
}
function _mbed_die__async_cb_27($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 20463
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20465
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20467
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 20468
 _wait_ms(400); //@line 20469
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 649; //@line 20472
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 20473
  HEAP32[$4 >> 2] = $2; //@line 20474
  sp = STACKTOP; //@line 20475
  return;
 }
 ___async_unwind = 0; //@line 20478
 HEAP32[$ReallocAsyncCtx3 >> 2] = 649; //@line 20479
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 20480
 HEAP32[$4 >> 2] = $2; //@line 20481
 sp = STACKTOP; //@line 20482
 return;
}
function _mbed_die__async_cb_26($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20438
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20440
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20442
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 20443
 _wait_ms(400); //@line 20444
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 650; //@line 20447
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 20448
  HEAP32[$4 >> 2] = $2; //@line 20449
  sp = STACKTOP; //@line 20450
  return;
 }
 ___async_unwind = 0; //@line 20453
 HEAP32[$ReallocAsyncCtx2 >> 2] = 650; //@line 20454
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 20455
 HEAP32[$4 >> 2] = $2; //@line 20456
 sp = STACKTOP; //@line 20457
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_10($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19167
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19169
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19171
 $5 = HEAP32[$2 >> 2] | 0; //@line 19172
 if (!($5 & 2)) {
  return;
 }
 HEAP32[$2 >> 2] = $5 & -3; //@line 19179
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 19180
 __ZN12LoRaWANStack23mcps_indication_handlerEv($4); //@line 19181
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 242; //@line 19184
  sp = STACKTOP; //@line 19185
  return;
 }
 ___async_unwind = 0; //@line 19188
 HEAP32[$ReallocAsyncCtx >> 2] = 242; //@line 19189
 sp = STACKTOP; //@line 19190
 return;
}
function _mbed_die__async_cb_25($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 20413
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20415
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20417
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 20418
 _wait_ms(400); //@line 20419
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 651; //@line 20422
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 20423
  HEAP32[$4 >> 2] = $2; //@line 20424
  sp = STACKTOP; //@line 20425
  return;
 }
 ___async_unwind = 0; //@line 20428
 HEAP32[$ReallocAsyncCtx >> 2] = 651; //@line 20429
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 20430
 HEAP32[$4 >> 2] = $2; //@line 20431
 sp = STACKTOP; //@line 20432
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_129($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 28553
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28557
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 28559
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 28561
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 28562
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 28563
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 278; //@line 28566
  sp = STACKTOP; //@line 28567
  return;
 }
 ___async_unwind = 0; //@line 28570
 HEAP32[$ReallocAsyncCtx >> 2] = 278; //@line 28571
 sp = STACKTOP; //@line 28572
 return;
}
function __ZN7LoRaPHY18dl_channel_requestEhj__async_cb_333($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $10 = 0, $17 = 0, $6 = 0, $9 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23701
 $$ = HEAP8[___async_retval >> 0] & 1 ? 3 : 2; //@line 23705
 $9 = HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 124 >> 2] | 0; //@line 23707
 $10 = HEAPU8[$0 + 8 >> 0] | 0; //@line 23708
 $$1 = (HEAP32[$9 + ($10 * 12 | 0) >> 2] | 0) == 0 ? $$ & 1 : $$; //@line 23713
 if ($$1 << 24 >> 24 != 3) {
  $$0 = $$1; //@line 23716
  $17 = ___async_retval; //@line 23717
  HEAP8[$17 >> 0] = $$0; //@line 23718
  return;
 }
 HEAP32[$9 + ($10 * 12 | 0) + 4 >> 2] = $6; //@line 23722
 $$0 = 3; //@line 23723
 $17 = ___async_retval; //@line 23724
 HEAP8[$17 >> 0] = $$0; //@line 23725
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 28053
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 28057
 HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 8 >> 2] = $AsyncRetVal; //@line 28060
 if ($AsyncRetVal | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 28065
 _mbed_assert_internal(15587, 15590, 149); //@line 28066
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 697; //@line 28069
  sp = STACKTOP; //@line 28070
  return;
 }
 ___async_unwind = 0; //@line 28073
 HEAP32[$ReallocAsyncCtx2 >> 2] = 697; //@line 28074
 sp = STACKTOP; //@line 28075
 return;
}
function _mbedtls_gcm_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5013
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 5014
 _mbedtls_cipher_free($0); //@line 5015
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 614; //@line 5018
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5020
  sp = STACKTOP; //@line 5021
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5024
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5025
 _mbedtls_platform_zeroize($0, 400); //@line 5026
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 615; //@line 5029
  sp = STACKTOP; //@line 5030
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5033
  return;
 }
}
function _mbedtls_ccm_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2238
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2239
 _mbedtls_cipher_free($0); //@line 2240
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 575; //@line 2243
  HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 2245
  sp = STACKTOP; //@line 2246
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2249
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2250
 _mbedtls_platform_zeroize($0, 68); //@line 2251
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 576; //@line 2254
  sp = STACKTOP; //@line 2255
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2258
  return;
 }
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_96($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 26617
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26621
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26623
 if (HEAP32[$0 + 4 >> 2] | 0) {
  HEAP32[$6 >> 2] = 2; //@line 26626
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 26629
 _mbed_assert_internal(11914, 11923, 778); //@line 26630
 if (!___async) {
  ___async_unwind = 0; //@line 26633
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 239; //@line 26635
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $4; //@line 26637
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $6; //@line 26639
 sp = STACKTOP; //@line 26640
 return;
}
function _equeue_timeleft($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$014 = 0, $10 = 0, $11 = 0, $19 = 0, $21 = 0, $5 = 0;
 if (!$1) {
  $$0 = -1; //@line 3760
  return $$0 | 0; //@line 3761
 }
 $5 = $0 + 16 | 0; //@line 3765
 $10 = (HEAP32[$0 + 12 >> 2] | 0) + ((1 << HEAP32[$5 >> 2]) + -1 & $1) | 0; //@line 3770
 $11 = $0 + 128 | 0; //@line 3771
 _equeue_mutex_lock($11); //@line 3772
 if (($1 >> HEAP32[$5 >> 2] | 0) == (HEAPU8[$10 + 4 >> 0] | 0 | 0)) {
  $19 = HEAP32[$10 + 20 >> 2] | 0; //@line 3781
  $21 = $19 - (_equeue_tick() | 0) | 0; //@line 3783
  $$014 = $21 & ~($21 >> 31); //@line 3787
 } else {
  $$014 = -1; //@line 3789
 }
 _equeue_mutex_unlock($11); //@line 3791
 $$0 = $$014; //@line 3792
 return $$0 | 0; //@line 3793
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_235($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14300
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14304
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 14307
 $7 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 14309
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 14310
 FUNCTION_TABLE_vii[$7 & 15]($4, $6); //@line 14311
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 232; //@line 14314
  sp = STACKTOP; //@line 14315
  return;
 }
 ___async_unwind = 0; //@line 14318
 HEAP32[$ReallocAsyncCtx >> 2] = 232; //@line 14319
 sp = STACKTOP; //@line 14320
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6803
 STACKTOP = STACKTOP + 16 | 0; //@line 6804
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6804
 $1 = sp; //@line 6805
 HEAP32[$1 >> 2] = $varargs; //@line 6806
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 6807
 _mbed_error_vfprintf($0, $1); //@line 6808
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 652; //@line 6811
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 6813
  sp = STACKTOP; //@line 6814
  STACKTOP = sp; //@line 6815
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6817
  STACKTOP = sp; //@line 6818
  return;
 }
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_190($0) {
 $0 = $0 | 0;
 var $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 32633
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 32641
 if ((HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) != 2) {
  return;
 }
 _mbed_tracef(16, 12709, 13345, HEAP32[$0 + 8 >> 2] | 0); //@line 32647
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 32648
 __ZN7LoRaMac15open_rx2_windowEv($8); //@line 32649
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 455; //@line 32652
  sp = STACKTOP; //@line 32653
  return;
 }
 ___async_unwind = 0; //@line 32656
 HEAP32[$ReallocAsyncCtx3 >> 2] = 455; //@line 32657
 sp = STACKTOP; //@line 32658
 return;
}
function __ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26618
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26620
 $8 = HEAP16[$0 + 16 >> 1] | 0; //@line 26622
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 26624
 if (!$AsyncRetVal) {
  $11 = (HEAP32[$0 + 4 >> 2] | 0) + 2904 | 0; //@line 26627
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] & -18 | 1; //@line 26631
  __ZN7LoRaMac14set_tx_ongoingEb($4, 1); //@line 26632
  HEAP32[$6 >> 2] = 8; //@line 26633
  $$0 = 0; //@line 26634
 } else {
  $$0 = $AsyncRetVal; //@line 26636
 }
 HEAP16[___async_retval >> 1] = ($$0 | 0) == 0 ? $8 : $$0 & 65535; //@line 26642
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24752
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24754
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[___async_retval >> 2] = -1003; //@line 24760
  return;
 }
 $4 = HEAP32[$2 >> 2] | 0; //@line 24763
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 24764
 __ZN7LoRaPHY18put_radio_to_sleepEv($4); //@line 24765
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 487; //@line 24768
  sp = STACKTOP; //@line 24769
  return;
 }
 ___async_unwind = 0; //@line 24772
 HEAP32[$ReallocAsyncCtx2 >> 2] = 487; //@line 24773
 sp = STACKTOP; //@line 24774
 return;
}
function __ZN7LoRaMac21post_process_mcps_reqEv($0) {
 $0 = $0 | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 HEAP8[$0 + 1180 >> 0] = 0; //@line 12225
 HEAP32[$0 + 2056 >> 2] = 0; //@line 12227
 if ((HEAP32[$0 + 2052 >> 2] | 0) != 1) {
  if (HEAP8[$0 + 1174 >> 0] | 0) {
   return;
  }
  $20 = $0 + 1760 | 0; //@line 12238
  HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1; //@line 12241
  return;
 }
 $6 = $0 + 2062 | 0; //@line 12244
 if (!(HEAP8[$6 >> 0] | 0)) {
  return;
 }
 HEAP8[$0 + 1177 >> 0] = 0; //@line 12251
 HEAP8[$6 >> 0] = 0; //@line 12252
 HEAP8[$0 + 2044 >> 0] = 0; //@line 12254
 if (HEAP8[$0 + 1174 >> 0] | 0) {
  return;
 }
 $14 = $0 + 1760 | 0; //@line 12261
 HEAP32[$14 >> 2] = (HEAP32[$14 >> 2] | 0) + 1; //@line 12264
 return;
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_42($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20857
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20861
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20862
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 20868
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20869
 FUNCTION_TABLE_vi[$8 & 1023]($4); //@line 20870
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 20873
  sp = STACKTOP; //@line 20874
  return;
 }
 ___async_unwind = 0; //@line 20877
 HEAP32[$ReallocAsyncCtx2 >> 2] = 399; //@line 20878
 sp = STACKTOP; //@line 20879
 return;
}
function __ZN4mbed10TimerEventC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2916
 HEAP32[$0 >> 2] = 640; //@line 2917
 $1 = $0 + 8 | 0; //@line 2918
 HEAP32[$1 >> 2] = 0; //@line 2919
 HEAP32[$1 + 4 >> 2] = 0; //@line 2919
 HEAP32[$1 + 8 >> 2] = 0; //@line 2919
 HEAP32[$1 + 12 >> 2] = 0; //@line 2919
 $2 = _get_us_ticker_data() | 0; //@line 2920
 HEAP32[$0 + 24 >> 2] = $2; //@line 2922
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2923
 _ticker_set_handler($2, 124); //@line 2924
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 125; //@line 2927
  sp = STACKTOP; //@line 2928
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2931
  return;
 }
}
function __ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb_359($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$ = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25025
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 25027
 $$1 = HEAP8[___async_retval >> 0] & 1 ? HEAP8[$0 + 4 >> 0] | 0 : 6; //@line 25031
 $8 = HEAP8[$4 >> 0] | 0; //@line 25032
 $$1$ = ($8 << 24 >> 24 >= (HEAP8[$6 + 28 >> 0] | 0) ? $8 << 24 >> 24 <= (HEAP8[$6 + 29 >> 0] | 0) : 0) ? $$1 : $$1 & 5; //@line 25041
 $17 = HEAP8[$4 + 1 >> 0] | 0; //@line 25043
 HEAP8[___async_retval >> 0] = ($17 << 24 >> 24 >= (HEAP8[$6 + 32 >> 0] | 0) ? $17 << 24 >> 24 <= (HEAP8[$6 + 33 >> 0] | 0) : 0) ? $$1$ : $$1$ & 3; //@line 25054
 return;
}
function __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 $7 = $7 | 0;
 $8 = $8 | 0;
 var $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19480
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 19481
 $9 = __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh($0, $1, $2, $3, $4, $5, $6, $7, $8) | 0; //@line 19482
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 503; //@line 19485
  sp = STACKTOP; //@line 19486
  return 0; //@line 19487
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 19489
  return $9 | 0; //@line 19490
 }
 return 0; //@line 19492
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 32471
 newDynamicTop = oldDynamicTop + increment | 0; //@line 32472
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 32476
  ___setErrNo(12); //@line 32477
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 32481
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 32485
   ___setErrNo(12); //@line 32486
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 32490
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 11738
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 11740
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 11746
  $11 = ___fwritex($0, $4, $3) | 0; //@line 11747
  if ($phitmp) {
   $13 = $11; //@line 11749
  } else {
   ___unlockfile($3); //@line 11751
   $13 = $11; //@line 11752
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 11756
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 11760
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 11763
 }
 return $15 | 0; //@line 11765
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1820
 __ZN4mbed6Ticker6detachEv($0 + 1240 | 0); //@line 1822
 HEAP8[$0 + 688 >> 0] = 0; //@line 1824
 $4 = HEAP32[$0 + 788 >> 2] | 0; //@line 1826
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 1832
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 1837
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1838
 FUNCTION_TABLE_vi[$9 & 1023]($4); //@line 1839
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 96; //@line 1842
  sp = STACKTOP; //@line 1843
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1846
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 14074
 } else {
  $$056 = $2; //@line 14076
  $15 = $1; //@line 14076
  $8 = $0; //@line 14076
  while (1) {
   $14 = $$056 + -1 | 0; //@line 14084
   HEAP8[$14 >> 0] = HEAPU8[16318 + ($8 & 15) >> 0] | 0 | $3; //@line 14085
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 14086
   $15 = tempRet0; //@line 14087
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 14092
    break;
   } else {
    $$056 = $14; //@line 14095
   }
  }
 }
 return $$05$lcssa | 0; //@line 14099
}
function __ZN7LoRaMac21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 15567
 STACKTOP = STACKTOP + 16 | 0; //@line 15568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15568
 $vararg_buffer = sp; //@line 15569
 if (!(HEAP8[$0 + 1936 >> 0] | 0)) {
  if (__ZN7LoRaPHY18verify_tx_datarateEhb($0 + 4 | 0, $1, 0) | 0) {
   HEAP8[$0 + 1877 >> 0] = $1; //@line 15578
   $$0 = 0; //@line 15579
  } else {
   $$0 = -1003; //@line 15581
  }
 } else {
  _mbed_tracef(2, 12709, 13169, $vararg_buffer); //@line 15584
  $$0 = -1003; //@line 15585
 }
 STACKTOP = sp; //@line 15587
 return $$0 | 0; //@line 15587
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 17392
 $0 = ___cxa_get_globals_fast() | 0; //@line 17393
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 17396
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 17400
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 17412
    _emscripten_alloc_async_context(4, sp) | 0; //@line 17413
    __ZSt11__terminatePFvvE($16); //@line 17414
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 17419
 _emscripten_alloc_async_context(4, sp) | 0; //@line 17420
 __ZSt11__terminatePFvvE($17); //@line 17421
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 11955
 $3 = HEAP8[$1 >> 0] | 0; //@line 11957
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 11961
 $7 = HEAP32[$0 >> 2] | 0; //@line 11962
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 11967
  HEAP32[$0 + 4 >> 2] = 0; //@line 11969
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 11971
  HEAP32[$0 + 28 >> 2] = $14; //@line 11973
  HEAP32[$0 + 20 >> 2] = $14; //@line 11975
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 11981
  $$0 = 0; //@line 11982
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 11985
  $$0 = -1; //@line 11986
 }
 return $$0 | 0; //@line 11988
}
function __ZN4mbed11InterruptInD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20783
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20785
 $4 = HEAP32[$2 + 52 >> 2] | 0; //@line 20787
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 20794
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20795
 FUNCTION_TABLE_vi[$8 & 1023]($2 + 40 | 0); //@line 20796
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 102; //@line 20799
  sp = STACKTOP; //@line 20800
  return;
 }
 ___async_unwind = 0; //@line 20803
 HEAP32[$ReallocAsyncCtx2 >> 2] = 102; //@line 20804
 sp = STACKTOP; //@line 20805
 return;
}
function __ZN4mbed7Timeout7handlerEv__async_cb_383($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 27276
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 27278
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27280
 $5 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 27282
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 27283
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 27284
 if (!___async) {
  ___async_unwind = 0; //@line 27287
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 118; //@line 27289
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 27291
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 27293
 sp = STACKTOP; //@line 27294
 return;
}
function __ZN7LoRaPHY17calculate_backoffEbbbhjj($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 var $$0 = 0, $14 = 0, $16 = 0, $24 = 0, $8 = 0;
 $8 = HEAP32[$0 + 72 >> 2] | 0; //@line 23151
 $14 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($4 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 23157
 $16 = HEAP16[$8 + ($14 * 24 | 0) >> 1] | 0; //@line 23159
 $$0 = $5 >>> 0 < 36e5 ? 100 : $5 >>> 0 < 396e5 ? 1e3 : 1e4; //@line 23164
 $24 = (Math_imul((($16 & 65535) > ($$0 & 65535) | $1 ? $16 : $$0) & 65535, $6) | 0) - $6 | 0; //@line 23171
 HEAP32[$8 + ($14 * 24 | 0) + 12 >> 2] = $2 | $3 ? $24 : 0; //@line 23173
 return;
}
function __ZN12LoRaWANStack24acquire_backoff_metadataERi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $5 = 0, $storemerge = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$1 = -1012; //@line 11942
  return $$1 | 0; //@line 11943
 }
 $5 = __ZN7LoRaMac26get_backoff_timer_event_idEv($0) | 0; //@line 11945
 if ((__ZN7LoRaMac26get_backoff_timer_event_idEv($0) | 0) > 0) {
  $$0 = 0; //@line 11952
  $storemerge = __ZN6events10EventQueue9time_leftEi(HEAP32[$0 + 3168 >> 2] | 0, $5) | 0; //@line 11952
 } else {
  $$0 = -1023; //@line 11954
  $storemerge = -1; //@line 11954
 }
 HEAP32[$1 >> 2] = $storemerge; //@line 11956
 $$1 = $$0; //@line 11957
 return $$1 | 0; //@line 11958
}
function __ZN4mbed5Timer7read_msEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $18 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $9 = 0;
 $4 = $0 + 8 | 0; //@line 29790
 $6 = HEAP32[$4 >> 2] | 0; //@line 29792
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 29795
 $11 = ___async_retval; //@line 29797
 $18 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 29804
 $24 = _i64Subtract(HEAP32[$11 >> 2] | 0, HEAP32[$11 + 4 >> 2] | 0, HEAP32[$18 >> 2] | 0, HEAP32[$18 + 4 >> 2] | 0) | 0; //@line 29810
 $26 = _i64Add($24 | 0, tempRet0 | 0, $6 | 0, $9 | 0) | 0; //@line 29812
 $28 = ___udivdi3($26 | 0, tempRet0 | 0, 1e3, 0) | 0; //@line 29814
 HEAP32[___async_retval >> 2] = $28; //@line 29817
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_278($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19464
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19466
 $4 = HEAP32[$2 + 12 >> 2] | 0; //@line 19468
 if (!$4) {
  return;
 }
 $7 = HEAP32[$4 + 8 >> 2] | 0; //@line 19474
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19475
 FUNCTION_TABLE_vi[$7 & 1023]($2); //@line 19476
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19479
  sp = STACKTOP; //@line 19480
  return;
 }
 ___async_unwind = 0; //@line 19483
 HEAP32[$ReallocAsyncCtx7 >> 2] = 179; //@line 19484
 sp = STACKTOP; //@line 19485
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_239($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14749
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14752
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 14755
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 14756
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 14757
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 540; //@line 14760
  sp = STACKTOP; //@line 14761
  return;
 }
 ___async_unwind = 0; //@line 14764
 HEAP32[$ReallocAsyncCtx3 >> 2] = 540; //@line 14765
 sp = STACKTOP; //@line 14766
 return;
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16938
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 16943
  return $$0 | 0; //@line 16944
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16947
 $6 = __ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan($0 + 752 | 0, $1) | 0; //@line 16948
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 480; //@line 16951
  sp = STACKTOP; //@line 16952
  return 0; //@line 16953
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16955
 $$0 = $6; //@line 16956
 return $$0 | 0; //@line 16957
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 49
 HEAP32[$0 + 788 >> 2] = $1; //@line 51
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 4 >> 2] | 0; //@line 54
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 55
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 56
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 59
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 61
  sp = STACKTOP; //@line 62
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 65
  HEAP8[$0 + 689 >> 0] = 0; //@line 67
  HEAP8[$0 + 688 >> 0] = 0; //@line 69
  return;
 }
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_258($0) {
 $0 = $0 | 0;
 var $4 = 0, $7 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 17606
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17610
 $7 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 76 >> 2] | 0; //@line 17613
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(4) | 0; //@line 17614
 FUNCTION_TABLE_vi[$7 & 1023]($4); //@line 17615
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 202; //@line 17618
  sp = STACKTOP; //@line 17619
  return;
 }
 ___async_unwind = 0; //@line 17622
 HEAP32[$ReallocAsyncCtx18 >> 2] = 202; //@line 17623
 sp = STACKTOP; //@line 17624
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11233
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11238
  return $$0 | 0; //@line 11239
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11241
 $5 = __ZN7LoRaMac16add_channel_planERK16lora_channelplan($0, $1) | 0; //@line 11242
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 364; //@line 11245
  sp = STACKTOP; //@line 11246
  return 0; //@line 11247
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11249
 $$0 = $5; //@line 11250
 return $$0 | 0; //@line 11251
}
function __ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_416($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 30385
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30387
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30389
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 30391
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1836 | 0); //@line 30392
 if (!___async) {
  ___async_unwind = 0; //@line 30395
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 414; //@line 30397
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 30399
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 30401
 sp = STACKTOP; //@line 30402
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_365($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 25865
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 25869
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 25871
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 25872
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 25873
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 25876
  sp = STACKTOP; //@line 25877
  return;
 }
 ___async_unwind = 0; //@line 25880
 HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 25881
 sp = STACKTOP; //@line 25882
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 181
 $2 = HEAP32[$0 >> 2] | 0; //@line 182
 $3 = $1 + 16 | 0; //@line 183
 $4 = HEAP32[$3 >> 2] | 0; //@line 184
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 185
 __ZN6events10EventQueue6cancelEi($2, $4); //@line 186
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 569; //@line 189
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 191
  sp = STACKTOP; //@line 192
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 195
  HEAP32[$3 >> 2] = 0; //@line 196
  return;
 }
}
function _mbedtls_cipher_setup__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21801
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21803
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21805
 HEAP32[$2 + 60 >> 2] = $AsyncRetVal; //@line 21807
 if (!$AsyncRetVal) {
  $$0 = -24960; //@line 21810
 } else {
  HEAP32[$2 >> 2] = $4; //@line 21812
  if ((HEAP32[$4 + 4 >> 2] | 0) == 2) {
   HEAP32[$2 + 12 >> 2] = 5; //@line 21818
   HEAP32[$2 + 16 >> 2] = 18; //@line 21820
   $$0 = 0; //@line 21821
  } else {
   $$0 = 0; //@line 21823
  }
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 21827
 return;
}
function __ZN12LoRaWANStack19acquire_rx_metadataER19lorawan_rx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $8 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11917
  return $$0 | 0; //@line 11918
 }
 $5 = $0 + 2900 | 0; //@line 11920
 if (HEAP8[$5 >> 0] | 0) {
  $$0 = -1023; //@line 11924
  return $$0 | 0; //@line 11925
 }
 $8 = $0 + 2896 | 0; //@line 11927
 HEAP16[$1 >> 1] = HEAP16[$8 >> 1] | 0; //@line 11928
 HEAP16[$1 + 2 >> 1] = HEAP16[$8 + 2 >> 1] | 0; //@line 11928
 HEAP16[$1 + 4 >> 1] = HEAP16[$8 + 4 >> 1] | 0; //@line 11928
 HEAP8[$5 >> 0] = 1; //@line 11929
 $$0 = 0; //@line 11930
 return $$0 | 0; //@line 11931
}
function __ZN7LoRaMac24continue_joining_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14093
 if ((HEAPU8[$0 + 1701 >> 0] | 0) >= (HEAPU8[$0 + 1700 >> 0] | 0)) {
  $$0 = 0; //@line 14100
  return $$0 | 0; //@line 14101
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14103
 $6 = __ZN7LoRaMac21handle_retransmissionEv($0) | 0; //@line 14104
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 421; //@line 14107
  sp = STACKTOP; //@line 14108
  return 0; //@line 14109
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14111
 $$0 = ($6 | 0) == 0; //@line 14113
 return $$0 | 0; //@line 14114
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 15542
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 15545
 $$sink17$sink = $0; //@line 15545
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 15547
  $12 = HEAP8[$11 >> 0] | 0; //@line 15548
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 15556
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 15561
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 15566
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_399($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 29383
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 29386
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 29389
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 29390
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 29391
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 525; //@line 29394
  sp = STACKTOP; //@line 29395
  return;
 }
 ___async_unwind = 0; //@line 29398
 HEAP32[$ReallocAsyncCtx9 >> 2] = 525; //@line 29399
 sp = STACKTOP; //@line 29400
 return;
}
function __ZN7LoRaMac21remove_single_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16998
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 17003
  return $$0 | 0; //@line 17004
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 17007
 $6 = __ZN18LoRaMacChannelPlan21remove_single_channelEh($0 + 752 | 0, $1) | 0; //@line 17008
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 482; //@line 17011
  sp = STACKTOP; //@line 17012
  return 0; //@line 17013
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 17015
 $$0 = $6; //@line 17016
 return $$0 | 0; //@line 17017
}
function __ZN7LoRaMac10disconnectEv__async_cb_9($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19108
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19110
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19112
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 19114
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1816 | 0); //@line 19115
 if (!___async) {
  ___async_unwind = 0; //@line 19118
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 476; //@line 19120
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 19122
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 19124
 sp = STACKTOP; //@line 19125
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_8($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19085
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19087
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19089
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 19091
 __ZN18LoRaWANTimeHandler4stopER13timer_event_t($4, $2 + 1836 | 0); //@line 19092
 if (!___async) {
  ___async_unwind = 0; //@line 19095
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 477; //@line 19097
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 19099
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 19101
 sp = STACKTOP; //@line 19102
 return;
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 14111
 } else {
  $$06 = $2; //@line 14113
  $11 = $1; //@line 14113
  $7 = $0; //@line 14113
  while (1) {
   $10 = $$06 + -1 | 0; //@line 14118
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 14119
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 14120
   $11 = tempRet0; //@line 14121
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 14126
    break;
   } else {
    $$06 = $10; //@line 14129
   }
  }
 }
 return $$0$lcssa | 0; //@line 14133
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_131($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 28742
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28745
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 28748
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 28749
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 28750
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 549; //@line 28753
  sp = STACKTOP; //@line 28754
  return;
 }
 ___async_unwind = 0; //@line 28757
 HEAP32[$ReallocAsyncCtx3 >> 2] = 549; //@line 28758
 sp = STACKTOP; //@line 28759
 return;
}
function __ZN12LoRaWANStack19acquire_tx_metadataER19lorawan_tx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $8 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11892
  return $$0 | 0; //@line 11893
 }
 $5 = $0 + 2895 | 0; //@line 11895
 if (HEAP8[$5 >> 0] | 0) {
  $$0 = -1023; //@line 11899
  return $$0 | 0; //@line 11900
 }
 $8 = $0 + 2884 | 0; //@line 11902
 HEAP32[$1 >> 2] = HEAP32[$8 >> 2]; //@line 11903
 HEAP32[$1 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 11903
 HEAP32[$1 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 11903
 HEAP8[$5 >> 0] = 1; //@line 11904
 $$0 = 0; //@line 11905
 return $$0 | 0; //@line 11906
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_154($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 30298
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 30301
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 30304
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 30305
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 30306
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 546; //@line 30309
  sp = STACKTOP; //@line 30310
  return;
 }
 ___async_unwind = 0; //@line 30313
 HEAP32[$ReallocAsyncCtx3 >> 2] = 546; //@line 30314
 sp = STACKTOP; //@line 30315
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_171($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 31361
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 31364
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 31367
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 31368
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 31369
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 543; //@line 31372
  sp = STACKTOP; //@line 31373
  return;
 }
 ___async_unwind = 0; //@line 31376
 HEAP32[$ReallocAsyncCtx3 >> 2] = 543; //@line 31377
 sp = STACKTOP; //@line 31378
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_123($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28171
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28174
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 28177
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 28178
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 28179
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 553; //@line 28182
  sp = STACKTOP; //@line 28183
  return;
 }
 ___async_unwind = 0; //@line 28186
 HEAP32[$ReallocAsyncCtx4 >> 2] = 553; //@line 28187
 sp = STACKTOP; //@line 28188
 return;
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_122($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 28148
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 28151
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 28154
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 28155
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 28156
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 553; //@line 28159
  sp = STACKTOP; //@line 28160
  return;
 }
 ___async_unwind = 0; //@line 28163
 HEAP32[$ReallocAsyncCtx4 >> 2] = 553; //@line 28164
 sp = STACKTOP; //@line 28165
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_350($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24264
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24268
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 24270
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 24271
 FUNCTION_TABLE_vi[$5 & 1023]($4); //@line 24272
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 440; //@line 24275
  sp = STACKTOP; //@line 24276
  return;
 }
 ___async_unwind = 0; //@line 24279
 HEAP32[$ReallocAsyncCtx >> 2] = 440; //@line 24280
 sp = STACKTOP; //@line 24281
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_101($0) {
 $0 = $0 | 0;
 var $3 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 26830
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 26833
 $6 = HEAP32[(HEAP32[$3 >> 2] | 0) + 76 >> 2] | 0; //@line 26836
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 26837
 FUNCTION_TABLE_vi[$6 & 1023]($3); //@line 26838
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 559; //@line 26841
  sp = STACKTOP; //@line 26842
  return;
 }
 ___async_unwind = 0; //@line 26845
 HEAP32[$ReallocAsyncCtx3 >> 2] = 559; //@line 26846
 sp = STACKTOP; //@line 26847
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 651
 $1 = _emscripten_asm_const_i(3) | 0; //@line 652
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 655
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 656
 FUNCTION_TABLE_vi[$4 & 1023]($0); //@line 657
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 59; //@line 660
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 662
  sp = STACKTOP; //@line 663
  return 0; //@line 664
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 666
  return $1 | 0; //@line 667
 }
 return 0; //@line 669
}
function __ZN12LoRaWANStack16remove_a_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11257
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11262
  return $$0 | 0; //@line 11263
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11265
 $5 = __ZN7LoRaMac21remove_single_channelEh($0, $1) | 0; //@line 11266
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 365; //@line 11269
  sp = STACKTOP; //@line 11270
  return 0; //@line 11271
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11273
 $$0 = $5; //@line 11274
 return $$0 | 0; //@line 11275
}
function __ZN7LoRaPHY16get_alternate_DREh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $12 = 0, $3 = 0, $6 = 0, $8 = 0;
 $3 = HEAP8[$0 + 31 >> 0] | 0; //@line 21490
 $6 = HEAP8[$0 + 26 >> 0] | 0; //@line 21493
 $8 = ($3 & 255) + 1 | 0; //@line 21495
 $12 = (($1 & 255) >>> 0) % (($8 - ($6 & 255) & 255) >>> 0) | 0; //@line 21499
 switch (($12 & 255) << 24 >> 24) {
 case 1:
  {
   $$0 = $3; //@line 21503
   return $$0 | 0; //@line 21504
  }
 case 0:
  {
   $$0 = $6; //@line 21508
   return $$0 | 0; //@line 21509
  }
 default:
  {
   $$0 = $8 - $12 & 255; //@line 21515
   return $$0 | 0; //@line 21516
  }
 }
 return 0; //@line 21519
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 705
 $3 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 708
 $5 = HEAP32[$3 + 4 >> 2] | 0; //@line 710
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 711
 _equeue_dealloc($5, $3); //@line 712
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 699; //@line 715
  sp = STACKTOP; //@line 716
  return;
 }
 ___async_unwind = 0; //@line 719
 HEAP32[$ReallocAsyncCtx2 >> 2] = 699; //@line 720
 sp = STACKTOP; //@line 721
 return;
}
function __ZN7LoRaMac19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16962
 if (HEAP8[$0 + 2104 >> 0] | 0) {
  $$0 = -1e3; //@line 16967
  return $$0 | 0; //@line 16968
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16971
 $5 = __ZN18LoRaMacChannelPlan11remove_planEv($0 + 752 | 0) | 0; //@line 16972
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 481; //@line 16975
  sp = STACKTOP; //@line 16976
  return 0; //@line 16977
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 16979
 $$0 = $5; //@line 16980
 return $$0 | 0; //@line 16981
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18268
 do {
  if (!$0) {
   $3 = 0; //@line 18272
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 18274
   $2 = ___dynamic_cast($0, 400, 456, 0) | 0; //@line 18275
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 747; //@line 18278
    sp = STACKTOP; //@line 18279
    return 0; //@line 18280
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 18282
    $3 = ($2 | 0) != 0 & 1; //@line 18285
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 18290
}
function __ZN7LoRaPHY24restore_default_channelsEv($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $5 = 0, $7 = 0, $8 = 0, $indvars$iv = 0;
 $2 = HEAP8[$0 + 113 >> 0] | 0; //@line 19922
 if (!($2 << 24 >> 24)) {
  return;
 }
 $5 = HEAP32[$0 + 120 >> 2] | 0; //@line 19928
 $7 = HEAP32[$0 + 116 >> 2] | 0; //@line 19930
 $8 = $2 & 255; //@line 19931
 $indvars$iv = 0; //@line 19932
 do {
  $11 = $7 + ($indvars$iv << 1) | 0; //@line 19936
  HEAP16[$11 >> 1] = HEAP16[$11 >> 1] | HEAP16[$5 + ($indvars$iv << 1) >> 1]; //@line 19939
  $indvars$iv = $indvars$iv + 1 | 0; //@line 19940
 } while ($indvars$iv >>> 0 < $8 >>> 0);
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11280
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11285
  return $$0 | 0; //@line 11286
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11288
 $4 = __ZN7LoRaMac19remove_channel_planEv($0) | 0; //@line 11289
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 366; //@line 11292
  sp = STACKTOP; //@line 11293
  return 0; //@line 11294
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11296
 $$0 = $4; //@line 11297
 return $$0 | 0; //@line 11298
}
function _invoke_ticker__async_cb_356($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24794
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 24800
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 24801
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 24802
 FUNCTION_TABLE_vi[$5 & 1023]($6); //@line 24803
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 665; //@line 24806
  sp = STACKTOP; //@line 24807
  return;
 }
 ___async_unwind = 0; //@line 24810
 HEAP32[$ReallocAsyncCtx >> 2] = 665; //@line 24811
 sp = STACKTOP; //@line 24812
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5488
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5491
 $7 = __ZN12LoRaWANStack9handle_txEhPKhthbb($0 + 4 | 0, $1, $2, $3, $4 & 255, 0, 0) | 0; //@line 5492
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 160; //@line 5495
  sp = STACKTOP; //@line 5496
  return 0; //@line 5497
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5499
  return $7 | 0; //@line 5500
 }
 return 0; //@line 5502
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5538
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5540
 $6 = __ZN12LoRaWANStack9handle_rxEPhtRhRib($0 + 4 | 0, $1, $2, $3, $4, 0) | 0; //@line 5541
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 162; //@line 5544
  sp = STACKTOP; //@line 5545
  return 0; //@line 5546
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5548
  return $6 | 0; //@line 5549
 }
 return 0; //@line 5551
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 13755
 } else {
  $$04 = 0; //@line 13757
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 13760
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 13764
   $12 = $7 + 1 | 0; //@line 13765
   HEAP32[$0 >> 2] = $12; //@line 13766
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 13772
    break;
   } else {
    $$04 = $11; //@line 13775
   }
  }
 }
 return $$0$lcssa | 0; //@line 13779
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8563
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8565
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8571
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8572
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8573
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 276; //@line 8576
  sp = STACKTOP; //@line 8577
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8580
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9469
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 9471
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 9477
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 9478
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 9479
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 307; //@line 9482
  sp = STACKTOP; //@line 9483
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 9486
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10257
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 10259
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 10265
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10266
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 10267
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 337; //@line 10270
  sp = STACKTOP; //@line 10271
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 10274
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5557
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5559
 $3 = __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t($0 + 4 | 0, $1) | 0; //@line 5560
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 163; //@line 5563
  sp = STACKTOP; //@line 5564
  return 0; //@line 5565
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5567
  return $3 | 0; //@line 5568
 }
 return 0; //@line 5570
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 31996
 $y_sroa_0_0_extract_trunc = $b$0; //@line 31997
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 31998
 $1$1 = tempRet0; //@line 31999
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 32001
}
function _mbedtls_cipher_update__async_cb_168($0) {
 $0 = $0 | 0;
 var $$1 = 0, $2 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31268
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 31270
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31272
 if ($AsyncRetVal | 0) {
  $$1 = $AsyncRetVal; //@line 31275
  $9 = ___async_retval; //@line 31276
  HEAP32[$9 >> 2] = $$1; //@line 31277
  return;
 }
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $4; //@line 31282
 $$1 = 0; //@line 31283
 $9 = ___async_retval; //@line 31284
 HEAP32[$9 >> 2] = $$1; //@line 31285
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7309
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 7311
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 7317
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7318
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 7319
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 230; //@line 7322
  sp = STACKTOP; //@line 7323
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7326
 return;
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_281($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19590
 if (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(4) | 0; //@line 19598
 _mbed_assert_internal(13476, 13494, 57); //@line 19599
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 19602
  sp = STACKTOP; //@line 19603
  return;
 }
 ___async_unwind = 0; //@line 19606
 HEAP32[$ReallocAsyncCtx6 >> 2] = 568; //@line 19607
 sp = STACKTOP; //@line 19608
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5296
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5298
 $3 = __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE($0 + 4 | 0, $1) | 0; //@line 5299
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 153; //@line 5302
  sp = STACKTOP; //@line 5303
  return 0; //@line 5304
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5306
  return $3 | 0; //@line 5307
 }
 return 0; //@line 5309
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5948
 HEAP32[$0 >> 2] = 724; //@line 5949
 $2 = $0 + 4 | 0; //@line 5950
 __ZN12LoRaWANStackC2Ev($2); //@line 5951
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5952
 __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio($2, $1); //@line 5953
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 180; //@line 5956
  sp = STACKTOP; //@line 5957
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5960
  return;
 }
}
function __ZN7LoRaMac15send_ongoing_txEv__async_cb_206($0) {
 $0 = $0 | 0;
 var $$0 = 0, $13 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 680
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 682
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 686
 if ($AsyncRetVal | 0) {
  $$0 = $AsyncRetVal; //@line 689
  $13 = ___async_retval; //@line 690
  HEAP32[$13 >> 2] = $$0; //@line 691
  return;
 }
 HEAP32[$6 + 2052 >> 2] = HEAP32[$4 >> 2]; //@line 696
 $$0 = 0; //@line 697
 $13 = ___async_retval; //@line 698
 HEAP32[$13 >> 2] = $$0; //@line 699
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23769
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23776
 _mbed_assert_internal(11914, 11923, 540); //@line 23777
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 214; //@line 23780
  sp = STACKTOP; //@line 23781
  return;
 }
 ___async_unwind = 0; //@line 23784
 HEAP32[$ReallocAsyncCtx2 >> 2] = 214; //@line 23785
 sp = STACKTOP; //@line 23786
 return;
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5420
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5422
 $3 = __ZN12LoRaWANStack12add_channelsERK16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 5423
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 157; //@line 5426
  sp = STACKTOP; //@line 5427
  return 0; //@line 5428
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5430
  return $3 | 0; //@line 5431
 }
 return 0; //@line 5433
}
function _mbedtls_cipher_info_from_type($0) {
 $0 = $0 | 0;
 var $$05 = 0, $$06 = 0, $1 = 0, $9 = 0;
 $1 = HEAP32[2374] | 0; //@line 2266
 L1 : do {
  if (!$1) {
   $$05 = 0; //@line 2270
  } else {
   $$06 = 9492; //@line 2272
   $9 = $1; //@line 2272
   while (1) {
    if ((HEAP32[$$06 >> 2] | 0) == ($0 | 0)) {
     $$05 = $9; //@line 2277
     break L1;
    }
    $9 = HEAP32[$$06 + 12 >> 2] | 0; //@line 2282
    if (!$9) {
     $$05 = 0; //@line 2285
     break;
    } else {
     $$06 = $$06 + 8 | 0; //@line 2288
    }
   }
  }
 } while (0);
 return $$05 | 0; //@line 2293
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23804
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23811
 _mbed_assert_internal(12936, 12964, 849); //@line 23812
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 434; //@line 23815
  sp = STACKTOP; //@line 23816
  return;
 }
 ___async_unwind = 0; //@line 23819
 HEAP32[$ReallocAsyncCtx2 >> 2] = 434; //@line 23820
 sp = STACKTOP; //@line 23821
 return;
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24641
 if (HEAP32[___async_retval >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 24648
 _mbed_assert_internal(11914, 11923, 508); //@line 24649
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 205; //@line 24652
  sp = STACKTOP; //@line 24653
  return;
 }
 ___async_unwind = 0; //@line 24656
 HEAP32[$ReallocAsyncCtx2 >> 2] = 205; //@line 24657
 sp = STACKTOP; //@line 24658
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_337($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 23880
 if (HEAP32[$0 + 4 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(4) | 0; //@line 23887
 _mbed_assert_internal(11914, 11923, 886); //@line 23888
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 23891
  sp = STACKTOP; //@line 23892
  return;
 }
 ___async_unwind = 0; //@line 23895
 HEAP32[$ReallocAsyncCtx10 >> 2] = 313; //@line 23896
 sp = STACKTOP; //@line 23897
 return;
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 31981
 $2 = $b & 65535; //@line 31982
 $3 = Math_imul($2, $1) | 0; //@line 31983
 $6 = $a >>> 16; //@line 31984
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 31985
 $11 = $b >>> 16; //@line 31986
 $12 = Math_imul($11, $1) | 0; //@line 31987
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 31988
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8791
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 8793
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 8799
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8800
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 8801
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 287; //@line 8804
  sp = STACKTOP; //@line 8805
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 8808
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 22285
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 22294
 _mbed_assert_internal(11914, 11923, 533); //@line 22295
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 22298
  sp = STACKTOP; //@line 22299
  return;
 }
 ___async_unwind = 0; //@line 22302
 HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 22303
 sp = STACKTOP; //@line 22304
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24818
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 24827
 _mbed_assert_internal(11914, 11923, 525); //@line 24828
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 24831
  sp = STACKTOP; //@line 24832
  return;
 }
 ___async_unwind = 0; //@line 24835
 HEAP32[$ReallocAsyncCtx3 >> 2] = 208; //@line 24836
 sp = STACKTOP; //@line 24837
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_293($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20955
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20957
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20959
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 20960
 __ZN4mbed10TimerEventD2Ev($2); //@line 20961
 if (!___async) {
  ___async_unwind = 0; //@line 20964
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 76; //@line 20966
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $4; //@line 20968
 sp = STACKTOP; //@line 20969
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_292($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20935
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20937
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20939
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 20940
 __ZN4mbed10TimerEventD2Ev($4); //@line 20941
 if (!___async) {
  ___async_unwind = 0; //@line 20944
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 74; //@line 20946
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 20948
 sp = STACKTOP; //@line 20949
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_291($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20915
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20917
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20919
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 20920
 __ZN4mbed10TimerEventD2Ev($4); //@line 20921
 if (!___async) {
  ___async_unwind = 0; //@line 20924
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 72; //@line 20926
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 20928
 sp = STACKTOP; //@line 20929
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb($0) {
 $0 = $0 | 0;
 var $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1153
 if (HEAP32[$0 + 8 >> 2] | 0) {
  return;
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 1162
 _mbed_assert_internal(11914, 11923, 548); //@line 1163
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 1166
  sp = STACKTOP; //@line 1167
  return;
 }
 ___async_unwind = 0; //@line 1170
 HEAP32[$ReallocAsyncCtx3 >> 2] = 217; //@line 1171
 sp = STACKTOP; //@line 1172
 return;
}
function _calloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $3 = 0, $8 = 0;
 if (!$0) {
  $$0 = 0; //@line 11346
 } else {
  $3 = Math_imul($1, $0) | 0; //@line 11348
  if (($1 | $0) >>> 0 > 65535) {
   $$0 = (($3 >>> 0) / ($0 >>> 0) | 0 | 0) == ($1 | 0) ? $3 : -1; //@line 11355
  } else {
   $$0 = $3; //@line 11357
  }
 }
 $8 = _malloc($$0) | 0; //@line 11360
 if (!$8) {
  return $8 | 0; //@line 11363
 }
 if (!(HEAP32[$8 + -4 >> 2] & 3)) {
  return $8 | 0; //@line 11370
 }
 _memset($8 | 0, 0, $$0 | 0) | 0; //@line 11372
 return $8 | 0; //@line 11373
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 20895
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20897
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20899
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 20900
 __ZN4mbed10TimerEventD2Ev($2); //@line 20901
 if (!___async) {
  ___async_unwind = 0; //@line 20904
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 70; //@line 20906
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $4; //@line 20908
 sp = STACKTOP; //@line 20909
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5333
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5335
 $3 = __ZN12LoRaWANStack7connectERK15lorawan_connect($0 + 4 | 0, $1) | 0; //@line 5336
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 155; //@line 5339
  sp = STACKTOP; //@line 5340
  return 0; //@line 5341
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5343
  return $3 | 0; //@line 5344
 }
 return 0; //@line 5346
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_299($0) {
 $0 = $0 | 0;
 var $3 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21165
 $3 = (HEAP32[$0 + 4 >> 2] | 0) + 52 | 0; //@line 21168
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 21169
 __ZN4mbed11InterruptInD2Ev($3); //@line 21170
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 82; //@line 21173
  sp = STACKTOP; //@line 21174
  return;
 }
 ___async_unwind = 0; //@line 21177
 HEAP32[$ReallocAsyncCtx9 >> 2] = 82; //@line 21178
 sp = STACKTOP; //@line 21179
 return;
}
function _ticker_set_handler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5059
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 5060
 _initialize($0); //@line 5061
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 617; //@line 5064
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5066
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 5068
  sp = STACKTOP; //@line 5069
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5072
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = $1; //@line 5075
  return;
 }
}
function _mbed_die__async_cb_39($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 20763
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20765
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 20767
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 20768
 _wait_ms(150); //@line 20769
 if (!___async) {
  ___async_unwind = 0; //@line 20772
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 637; //@line 20774
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 20776
 sp = STACKTOP; //@line 20777
 return;
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 20393
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20395
 _emscripten_asm_const_iii(4, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 20397
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 20398
 _wait_ms(150); //@line 20399
 if (!___async) {
  ___async_unwind = 0; //@line 20402
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 636; //@line 20404
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 20406
 sp = STACKTOP; //@line 20407
 return;
}
function _mbedtls_cipher_free__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26859
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26861
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 26862
 _mbedtls_platform_zeroize($2, 68); //@line 26863
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 579; //@line 26866
  sp = STACKTOP; //@line 26867
  return;
 }
 ___async_unwind = 0; //@line 26870
 HEAP32[$ReallocAsyncCtx2 >> 2] = 579; //@line 26871
 sp = STACKTOP; //@line 26872
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5466
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5468
 $3 = __ZN12LoRaWANStack16remove_a_channelEh($0 + 4 | 0, $1) | 0; //@line 5469
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 159; //@line 5472
  sp = STACKTOP; //@line 5473
  return 0; //@line 5474
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5476
  return $3 | 0; //@line 5477
 }
 return 0; //@line 5479
}
function _mbedtls_gcm_free__async_cb_370($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 26561
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26563
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 26564
 _mbedtls_platform_zeroize($2, 400); //@line 26565
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 26568
  sp = STACKTOP; //@line 26569
  return;
 }
 ___async_unwind = 0; //@line 26572
 HEAP32[$ReallocAsyncCtx >> 2] = 615; //@line 26573
 sp = STACKTOP; //@line 26574
 return;
}
function _mbedtls_ccm_free__async_cb_429($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 31959
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31961
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 31962
 _mbedtls_platform_zeroize($2, 68); //@line 31963
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 31966
  sp = STACKTOP; //@line 31967
  return;
 }
 ___async_unwind = 0; //@line 31970
 HEAP32[$ReallocAsyncCtx >> 2] = 576; //@line 31971
 sp = STACKTOP; //@line 31972
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_153($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30236
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 30238
 if (HEAP32[___async_retval >> 2] | 0) {
  HEAP32[$4 + 2020 >> 2] = 1; //@line 30244
  return;
 }
 if (!(__ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($2) | 0)) {
  return;
 }
 HEAP32[$4 + 2076 >> 2] = 4; //@line 30252
 HEAP8[$4 + 2080 >> 0] = 1; //@line 30254
 __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($2); //@line 30255
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 25828
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25830
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 25831
 __ZN4mbed10TimerEventD2Ev($2); //@line 25832
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 113; //@line 25835
  sp = STACKTOP; //@line 25836
  return;
 }
 ___async_unwind = 0; //@line 25839
 HEAP32[$ReallocAsyncCtx2 >> 2] = 113; //@line 25840
 sp = STACKTOP; //@line 25841
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17636
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17638
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17639
 __ZN4mbed10TimerEventD2Ev($2); //@line 17640
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 660; //@line 17643
  sp = STACKTOP; //@line 17644
  return;
 }
 ___async_unwind = 0; //@line 17647
 HEAP32[$ReallocAsyncCtx2 >> 2] = 660; //@line 17648
 sp = STACKTOP; //@line 17649
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_264($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17825
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17827
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 17828
 __ZN7LoRaMacD2Ev($2); //@line 17829
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 172; //@line 17832
  sp = STACKTOP; //@line 17833
  return;
 }
 ___async_unwind = 0; //@line 17836
 HEAP32[$ReallocAsyncCtx4 >> 2] = 172; //@line 17837
 sp = STACKTOP; //@line 17838
 return;
}
function ___fflush_unlocked__async_cb_212($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1001
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1003
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1005
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1007
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 1009
 HEAP32[$4 >> 2] = 0; //@line 1010
 HEAP32[$6 >> 2] = 0; //@line 1011
 HEAP32[$8 >> 2] = 0; //@line 1012
 HEAP32[$10 >> 2] = 0; //@line 1013
 HEAP32[___async_retval >> 2] = 0; //@line 1015
 return;
}
function __ZN4mbed6Ticker7handlerEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7218
 $2 = HEAP32[$0 + 52 >> 2] | 0; //@line 7220
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 >> 2] | 0; //@line 7226
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7227
 FUNCTION_TABLE_vi[$5 & 1023]($0 + 40 | 0); //@line 7228
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 663; //@line 7231
  sp = STACKTOP; //@line 7232
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 7235
 return;
}
function _mbed_vtracef__async_cb_195($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 33674
 $1 = HEAP32[175] | 0; //@line 33675
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 33676
 FUNCTION_TABLE_vi[$1 & 1023](11766); //@line 33677
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 144; //@line 33680
  sp = STACKTOP; //@line 33681
  return;
 }
 ___async_unwind = 0; //@line 33684
 HEAP32[$ReallocAsyncCtx3 >> 2] = 144; //@line 33685
 sp = STACKTOP; //@line 33686
 return;
}
function __ZN7LoRaPHY17copy_channel_maskEPtS0_h($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $indvars$iv = 0, $wide$trip$count = 0;
 if (!(($1 | 0) != 0 & ($2 | 0) != 0 & $3 << 24 >> 24 != 0)) {
  return;
 }
 $wide$trip$count = $3 & 255; //@line 22687
 $indvars$iv = 0; //@line 22688
 do {
  HEAP16[$1 + ($indvars$iv << 1) >> 1] = HEAP16[$2 + ($indvars$iv << 1) >> 1] | 0; //@line 22693
  $indvars$iv = $indvars$iv + 1 | 0; //@line 22694
 } while (($indvars$iv | 0) != ($wide$trip$count | 0));
 return;
}
function dynCall_viiiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 a15 = a15 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0, a15 | 0); //@line 32609
}
function __ZN16LoRaWANInterfaceD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5660
 HEAP32[$0 >> 2] = 724; //@line 5661
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5663
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 5664
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 167; //@line 5667
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5669
  sp = STACKTOP; //@line 5670
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5673
  __ZdlPv($0); //@line 5674
  return;
 }
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_303($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 21242
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21244
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 21246
 __ZN4mbed11InterruptInD2Ev($2 + 340 | 0); //@line 21247
 if (!___async) {
  ___async_unwind = 0; //@line 21250
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 78; //@line 21252
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 21254
 sp = STACKTOP; //@line 21255
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_302($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 21223
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21225
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 21227
 __ZN4mbed11InterruptInD2Ev($2 + 268 | 0); //@line 21228
 if (!___async) {
  ___async_unwind = 0; //@line 21231
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 79; //@line 21233
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 21235
 sp = STACKTOP; //@line 21236
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_301($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 21204
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21206
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 21208
 __ZN4mbed11InterruptInD2Ev($2 + 196 | 0); //@line 21209
 if (!___async) {
  ___async_unwind = 0; //@line 21212
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 80; //@line 21214
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 21216
 sp = STACKTOP; //@line 21217
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_300($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 21185
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21187
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 21189
 __ZN4mbed11InterruptInD2Ev($2 + 124 | 0); //@line 21190
 if (!___async) {
  ___async_unwind = 0; //@line 21193
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 81; //@line 21195
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 21197
 sp = STACKTOP; //@line 21198
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_294($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 20975
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20977
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 20979
 __ZN4mbed11InterruptInD2Ev($2 + 412 | 0); //@line 20980
 if (!___async) {
  ___async_unwind = 0; //@line 20983
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 77; //@line 20985
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 20987
 sp = STACKTOP; //@line 20988
 return;
}
function __ZN16LoRaWANInterface19remove_channel_planEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5447
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5449
 $2 = __ZN12LoRaWANStack17drop_channel_listEv($0 + 4 | 0) | 0; //@line 5450
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 158; //@line 5453
  sp = STACKTOP; //@line 5454
  return 0; //@line 5455
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5457
  return $2 | 0; //@line 5458
 }
 return 0; //@line 5460
}
function __GLOBAL__sub_I_main_cpp__async_cb($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 __ZN5Sht31C2E7PinNameS0_(24296, 10, 11); //@line 29542
 __ZN4mbed11InterruptInC2E7PinName(20208, 1337); //@line 29543
 __ZN6events10EventQueueC2EjPh(20280, 1664, 0); //@line 29544
 __ZN16LoRaWANInterfaceC2ER9LoRaRadio(20484, 18872); //@line 29545
 dest = 23664; //@line 29546
 stop = dest + 48 | 0; //@line 29546
 do {
  HEAP32[dest >> 2] = 0; //@line 29546
  dest = dest + 4 | 0; //@line 29546
 } while ((dest | 0) < (stop | 0));
 return;
}
function __ZN7LoRaMac10disconnectEv__async_cb_6($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19040
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19042
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 19044
 __ZN7LoRaPHY18put_radio_to_sleepEv($2 + 4 | 0); //@line 19045
 if (!___async) {
  ___async_unwind = 0; //@line 19048
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 479; //@line 19050
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 19052
 sp = STACKTOP; //@line 19053
 return;
}
function _aes_setkey_dec_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3137
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3138
 $3 = _mbedtls_aes_setkey_dec($0, $1, $2) | 0; //@line 3139
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 592; //@line 3142
  sp = STACKTOP; //@line 3143
  return 0; //@line 3144
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3146
  return $3 | 0; //@line 3147
 }
 return 0; //@line 3149
}
function _gcm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3045
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3046
 $3 = _mbedtls_gcm_setkey($0, 2, $1, $2) | 0; //@line 3047
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 590; //@line 3050
  sp = STACKTOP; //@line 3051
  return 0; //@line 3052
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3054
  return $3 | 0; //@line 3055
 }
 return 0; //@line 3057
}
function _ccm_aes_setkey_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2997
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2998
 $3 = _mbedtls_ccm_setkey($0, 2, $1, $2) | 0; //@line 2999
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 588; //@line 3002
  sp = STACKTOP; //@line 3003
  return 0; //@line 3004
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3006
  return $3 | 0; //@line 3007
 }
 return 0; //@line 3009
}
function __ZN4mbed11InterruptInC2E7PinName($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $3 = 0, $4 = 0, dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 604; //@line 2297
 $2 = $0 + 4 | 0; //@line 2298
 $3 = $0 + 28 | 0; //@line 2299
 $4 = $0; //@line 2300
 dest = $2; //@line 2301
 stop = dest + 68 | 0; //@line 2301
 do {
  HEAP32[dest >> 2] = 0; //@line 2301
  dest = dest + 4 | 0; //@line 2301
 } while ((dest | 0) < (stop | 0));
 _gpio_irq_init($3, $1, 14, $4) | 0; //@line 2302
 _gpio_init_in($2, $1); //@line 2303
 return;
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16238
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16239
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 16240
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 714; //@line 16243
  sp = STACKTOP; //@line 16244
  return 0; //@line 16245
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16247
  return $3 | 0; //@line 16248
 }
 return 0; //@line 16250
}
function _serial_putc__async_cb_238($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14687
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14689
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 14690
 _fflush($2) | 0; //@line 14691
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 658; //@line 14694
  sp = STACKTOP; //@line 14695
  return;
 }
 ___async_unwind = 0; //@line 14698
 HEAP32[$ReallocAsyncCtx >> 2] = 658; //@line 14699
 sp = STACKTOP; //@line 14700
 return;
}
function __ZN7LoRaMac24setup_link_check_requestEv($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 2084 | 0; //@line 16138
 HEAP32[$1 >> 2] = 0; //@line 16139
 HEAP32[$1 + 4 >> 2] = 0; //@line 16139
 HEAP32[$1 + 8 >> 2] = 0; //@line 16139
 HEAP32[$1 + 12 >> 2] = 0; //@line 16139
 HEAP32[$1 + 16 >> 2] = 0; //@line 16139
 HEAP32[$0 + 2092 >> 2] = 1; //@line 16141
 HEAP32[$0 + 2088 >> 2] = 1; //@line 16143
 HEAP8[$1 >> 0] = 1; //@line 16144
 __ZN14LoRaMacCommand18add_link_check_reqEv($0 + 476 | 0) | 0; //@line 16146
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8042
 $2 = HEAP32[$0 >> 2] | 0; //@line 8043
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8044
 FUNCTION_TABLE_vi[$2 & 1023]($1); //@line 8045
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 695; //@line 8048
  sp = STACKTOP; //@line 8049
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8052
  return;
 }
}
function __ZN16LoRaWANInterface14cancel_sendingEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5624
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5626
 $2 = __ZN12LoRaWANStack12stop_sendingEv($0 + 4 | 0) | 0; //@line 5627
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 165; //@line 5630
  sp = STACKTOP; //@line 5631
  return 0; //@line 5632
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5634
  return $2 | 0; //@line 5635
 }
 return 0; //@line 5637
}
function __ZN12LoRaWANStackD2Ev__async_cb_262($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17800
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17802
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17804
 __ZN12radio_eventsD2Ev($2 + 2384 | 0); //@line 17805
 if (!___async) {
  ___async_unwind = 0; //@line 17808
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 171; //@line 17810
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 17812
 sp = STACKTOP; //@line 17813
 return;
}
function __ZN14LoRaMacCommand18add_link_check_reqEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 2 | 0; //@line 18954
 $6 = HEAP8[$5 >> 0] | 0; //@line 18955
 $7 = $6 & 255; //@line 18956
 if ((128 - (HEAPU8[$0 + 3 >> 0] | 0) | 0) <= ($7 | 0)) {
  $$0 = -1010; //@line 18959
  return $$0 | 0; //@line 18960
 }
 HEAP8[$5 >> 0] = $6 + 1 << 24 >> 24; //@line 18964
 HEAP8[$0 + 4 + $7 >> 0] = 2; //@line 18965
 HEAP8[$0 >> 0] = 1; //@line 18966
 $$0 = 0; //@line 18967
 return $$0 | 0; //@line 18968
}
function __ZN12LoRaWANStackC2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaMacC2Ev($0); //@line 5968
 _memset($0 + 2384 | 0, 0, 518) | 0; //@line 5971
 HEAP8[$0 + 2902 >> 0] = 1; //@line 5972
 HEAP32[$0 + 2904 >> 2] = 0; //@line 5974
 HEAP8[$0 + 2909 >> 0] = 0; //@line 5977
 HEAP8[$0 + 2910 >> 0] = 0; //@line 5979
 HEAP8[$0 + 2911 >> 0] = 1; //@line 5981
 HEAP32[$0 + 3168 >> 2] = 0; //@line 5983
 HEAP8[$0 + 2895 >> 0] = 1; //@line 5985
 HEAP8[$0 + 2900 >> 0] = 1; //@line 5987
 HEAP8[$0 + 2908 >> 0] = 15; //@line 5988
 return;
}
function _main__async_cb_83($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 25742
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 25744
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 25745
 __ZN6events10EventQueue8dispatchEi(20280, -1); //@line 25746
 if (!___async) {
  ___async_unwind = 0; //@line 25749
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 683; //@line 25751
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 25753
 sp = STACKTOP; //@line 25754
 return;
}
function _putchar($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16315
 $1 = HEAP32[2604] | 0; //@line 16316
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 16317
 $2 = _fputc($0, $1) | 0; //@line 16318
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 716; //@line 16321
  sp = STACKTOP; //@line 16322
  return 0; //@line 16323
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 16325
  return $2 | 0; //@line 16326
 }
 return 0; //@line 16328
}
function __ZN16LoRaWANInterface10disconnectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5351
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5353
 $2 = __ZN12LoRaWANStack8shutdownEv($0 + 4 | 0) | 0; //@line 5354
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 156; //@line 5357
  sp = STACKTOP; //@line 5358
  return 0; //@line 5359
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5361
  return $2 | 0; //@line 5362
 }
 return 0; //@line 5364
}
function __ZN4mbed10TimerEventD2Ev($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2889
 HEAP32[$0 >> 2] = 640; //@line 2890
 $2 = HEAP32[$0 + 24 >> 2] | 0; //@line 2892
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2894
 _ticker_remove_event($2, $0 + 8 | 0); //@line 2895
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 123; //@line 2898
  sp = STACKTOP; //@line 2899
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2902
  return;
 }
}
function __ZN4mbed7TimeoutD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 26586
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26588
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 26589
 __ZN4mbed10TimerEventD2Ev($2); //@line 26590
 if (!___async) {
  ___async_unwind = 0; //@line 26593
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 26595
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 26597
 sp = STACKTOP; //@line 26598
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24670
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24672
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 24673
 __ZN4mbed10TimerEventD2Ev($2); //@line 24674
 if (!___async) {
  ___async_unwind = 0; //@line 24677
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 662; //@line 24679
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 24681
 sp = STACKTOP; //@line 24682
 return;
}
function __ZN16LoRaWANInterface7connectEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5314
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5316
 $2 = __ZN12LoRaWANStack7connectEv($0 + 4 | 0) | 0; //@line 5317
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 154; //@line 5320
  sp = STACKTOP; //@line 5321
  return 0; //@line 5322
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5324
  return $2 | 0; //@line 5325
 }
 return 0; //@line 5327
}
function dynCall_viiiiiiiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 a10 = a10 | 0;
 a11 = a11 | 0;
 a12 = a12 | 0;
 a13 = a13 | 0;
 a14 = a14 | 0;
 FUNCTION_TABLE_viiiiiiiiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0, a10 | 0, a11 | 0, a12 | 0, a13 | 0, a14 | 0); //@line 32602
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1404
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 1406
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1407
 __ZN16SX1276_LoRaRadio18handle_timeout_irqEv($0); //@line 1408
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 1411
  sp = STACKTOP; //@line 1412
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1415
  return;
 }
}
function _emscripten_async_resume() {
 ___async = 0; //@line 32314
 ___async_unwind = 1; //@line 32315
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 32321
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 32325
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 32329
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 32331
 }
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_410($0) {
 $0 = $0 | 0;
 var $$013 = 0;
 switch (HEAP32[___async_retval >> 2] | 0) {
 case 0:
  {
   $$013 = 3; //@line 30106
   break;
  }
 case -1004:
  {
   $$013 = 2; //@line 30110
   break;
  }
 case -1005:
  {
   $$013 = 1; //@line 30114
   break;
  }
 case -1006:
  {
   $$013 = 0; //@line 30118
   break;
  }
 default:
  {
   $$013 = 0; //@line 30122
  }
 }
 HEAP8[___async_retval >> 0] = $$013; //@line 30126
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8179
 $1 = HEAP32[$0 >> 2] | 0; //@line 8180
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 8181
 FUNCTION_TABLE_v[$1 & 15](); //@line 8182
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 700; //@line 8185
  sp = STACKTOP; //@line 8186
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 8189
  return;
 }
}
function _rand() {
 var $0 = 0, $10 = 0, $14 = 0, $6 = 0, $8 = 0, $9 = 0;
 $0 = 20184; //@line 16268
 $6 = ___muldi3(HEAP32[$0 >> 2] | 0, HEAP32[$0 + 4 >> 2] | 0, 1284865837, 1481765933) | 0; //@line 16274
 $8 = _i64Add($6 | 0, tempRet0 | 0, 1, 0) | 0; //@line 16276
 $9 = tempRet0; //@line 16277
 $10 = 20184; //@line 16278
 HEAP32[$10 >> 2] = $8; //@line 16280
 HEAP32[$10 + 4 >> 2] = $9; //@line 16283
 $14 = _bitshift64Lshr($8 | 0, $9 | 0, 33) | 0; //@line 16284
 return $14 | 0; //@line 16286
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 11378
 STACKTOP = STACKTOP + 16 | 0; //@line 11379
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 11379
 $vararg_buffer = sp; //@line 11380
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 11384
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 11386
 STACKTOP = sp; //@line 11387
 return $5 | 0; //@line 11387
}
function _mbedtls_platform_zeroize($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5041
 $2 = HEAP32[2549] | 0; //@line 5042
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5043
 FUNCTION_TABLE_iiii[$2 & 31]($0, 0, $1) | 0; //@line 5044
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 616; //@line 5047
  sp = STACKTOP; //@line 5048
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5051
  return;
 }
}
function __ZN16SX1276_LoRaRadioD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1278
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1279
 __ZN16SX1276_LoRaRadioD2Ev($0); //@line 1280
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 83; //@line 1283
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1285
  sp = STACKTOP; //@line 1286
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1289
  __ZdlPv($0); //@line 1290
  return;
 }
}
function __ZN4mbed10TimerEvent3irqEj($0) {
 $0 = $0 | 0;
 var $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2938
 $5 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 2943
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2944
 FUNCTION_TABLE_vi[$5 & 1023]($0); //@line 2945
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 126; //@line 2948
  sp = STACKTOP; //@line 2949
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2952
  return;
 }
}
function __ZN4mbed5TimerC2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $16 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 27526
 $6 = ___async_retval; //@line 27528
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 27533
 $12 = HEAP32[$0 + 4 >> 2] | 0; //@line 27534
 HEAP32[$12 >> 2] = HEAP32[$6 >> 2]; //@line 27536
 HEAP32[$12 + 4 >> 2] = $11; //@line 27539
 $16 = $4; //@line 27540
 HEAP32[$16 >> 2] = 0; //@line 27542
 HEAP32[$16 + 4 >> 2] = 0; //@line 27545
 return;
}
function __ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 30093
 $6 = HEAP16[$0 + 12 >> 1] | 0; //@line 30097
 if (!(HEAP32[___async_retval >> 2] | 0)) {
  HEAP32[$2 + 2028 >> 2] = HEAP32[$0 + 8 >> 2]; //@line 30103
  HEAP16[$2 + 2032 >> 1] = $6; //@line 30105
  HEAP8[$2 + 2034 >> 0] = 1; //@line 30107
  return;
 } else {
  HEAP32[$2 + 2020 >> 2] = 13; //@line 30111
  return;
 }
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6990
 $2 = HEAP32[5048] | 0; //@line 6991
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 6992
 FUNCTION_TABLE_vii[$2 & 15]($0, $1); //@line 6993
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 656; //@line 6996
  sp = STACKTOP; //@line 6997
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7000
  return;
 }
}
function __ZNK7LoRaPHY25verify_frequency_for_bandEjh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $4 = 0, $5 = 0;
 $4 = HEAP32[$0 + 72 >> 2] | 0; //@line 22049
 $5 = $2 & 255; //@line 22050
 if ((HEAP32[$4 + ($5 * 24 | 0) + 20 >> 2] | 0) >>> 0 >= $1 >>> 0) {
  if ((HEAP32[$4 + ($5 * 24 | 0) + 16 >> 2] | 0) >>> 0 <= $1 >>> 0) {
   $$0 = 1; //@line 22059
   return $$0 | 0; //@line 22060
  }
 }
 $$0 = 0; //@line 22063
 return $$0 | 0; //@line 22064
}
function _mbedtls_aes_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 210
 do {
  if ($0 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 214
   _mbedtls_platform_zeroize($0, 280); //@line 215
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 570; //@line 218
    sp = STACKTOP; //@line 219
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 222
    break;
   }
  }
 } while (0);
 return;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 32256
 STACKTOP = STACKTOP + 16 | 0; //@line 32257
 $rem = __stackBase__ | 0; //@line 32258
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 32259
 STACKTOP = __stackBase__; //@line 32260
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 32261
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 32026
 if ((ret | 0) < 8) return ret | 0; //@line 32027
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 32028
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 32029
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 32030
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 32031
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 32032
}
function __ZN7LoRaPHY25accept_tx_param_setup_reqEhh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $4 = 0, $6 = 0;
 $4 = HEAP8[$0 + 13 >> 0] | 0; //@line 21361
 if (!($4 << 24 >> 24)) {
  $14 = $4 << 24 >> 24 != 0; //@line 21364
  return $14 | 0; //@line 21365
 }
 $6 = $0 + 128 | 0; //@line 21367
 HEAP8[$6 >> 0] = $2 << 1 & 2 | $1 & 1 | HEAP8[$6 >> 0] & -4; //@line 21375
 $14 = $4 << 24 >> 24 != 0; //@line 21376
 return $14 | 0; //@line 21377
}
function _gcm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3072
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3073
 _mbedtls_gcm_free($0); //@line 3074
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 591; //@line 3077
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3079
  sp = STACKTOP; //@line 3080
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3083
  _free($0); //@line 3084
  return;
 }
}
function _ccm_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3024
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3025
 _mbedtls_ccm_free($0); //@line 3026
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 589; //@line 3029
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3031
  sp = STACKTOP; //@line 3032
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3035
  _free($0); //@line 3036
  return;
 }
}
function _aes_ctx_free($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3167
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3168
 _mbedtls_aes_free($0); //@line 3169
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 593; //@line 3172
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3174
  sp = STACKTOP; //@line 3175
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3178
  _free($0); //@line 3179
  return;
 }
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 16613
 STACKTOP = STACKTOP + 16 | 0; //@line 16614
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 16614
 if (!(_pthread_once(24288, 8) | 0)) {
  $3 = _pthread_getspecific(HEAP32[6073] | 0) | 0; //@line 16620
  STACKTOP = sp; //@line 16621
  return $3 | 0; //@line 16621
 } else {
  _abort_message(18503, sp); //@line 16623
 }
 return 0; //@line 16626
}
function __ZN16LoRaWANInterfaceD2Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5642
 HEAP32[$0 >> 2] = 724; //@line 5643
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5645
 __ZN12LoRaWANStackD2Ev($0 + 4 | 0); //@line 5646
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 166; //@line 5649
  sp = STACKTOP; //@line 5650
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5653
  return;
 }
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 16781
 }
 return;
}
function __ZN7LoRaMac24continue_sending_processEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $7 = 0;
 if ((HEAPU8[$0 + 1699 >> 0] | 0) <= (HEAPU8[$0 + 1698 >> 0] | 0)) {
  $$0 = 1; //@line 15131
  return $$0 | 0; //@line 15132
 }
 __ZN14LoRaMacCommand20clear_command_bufferEv($0 + 476 | 0); //@line 15135
 $7 = $0 + 1768 | 0; //@line 15136
 HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + 1; //@line 15139
 $$0 = 0; //@line 15140
 return $$0 | 0; //@line 15141
}
function __ZL25default_terminate_handlerv__async_cb_231($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13806
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13808
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13810
 HEAP32[$2 >> 2] = 18364; //@line 13811
 HEAP32[$2 + 4 >> 2] = $4; //@line 13813
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 13815
 _abort_message(18228, $2); //@line 13816
}
function __ZN7LoRaMac16on_radio_tx_doneEj__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 26245
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 26247
 $6 = HEAP8[$2 + 1182 >> 0] | 0; //@line 26249
 HEAP8[$2 + 1183 >> 0] = $6; //@line 26251
 __ZN7LoRaPHY16set_last_tx_doneEhbj($2 + 4 | 0, $6, (HEAP8[$2 + 2376 >> 0] | 0) != 0, $4); //@line 26256
 HEAP32[$2 + 1780 >> 2] = $4; //@line 26258
 return;
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 16197
 $6 = HEAP32[$5 >> 2] | 0; //@line 16198
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 16199
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 16201
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 16203
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 16206
 return $2 | 0; //@line 16207
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 2962
 HEAP32[$3 >> 2] = 0; //@line 2963
 HEAP32[$3 + 4 >> 2] = 0; //@line 2963
 HEAP32[$3 + 8 >> 2] = 0; //@line 2963
 HEAP32[$3 + 12 >> 2] = 0; //@line 2963
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 2966
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 2969
  return;
 }
}
function __ZN6events10EventQueue8dispatchEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2977
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2978
 _equeue_dispatch($0, $1); //@line 2979
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 127; //@line 2982
  sp = STACKTOP; //@line 2983
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2986
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 31915
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 31917
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 31918
 _fputc(10, $2) | 0; //@line 31919
 if (!___async) {
  ___async_unwind = 0; //@line 31922
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 723; //@line 31924
 sp = STACKTOP; //@line 31925
 return;
}
function __ZN7LoRaMac13clear_tx_pipeEv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14790
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14792
 HEAP8[$2 + 2104 >> 0] = 0; //@line 14797
 _memset($2 + 1185 | 0, 0, 257) | 0; //@line 14799
 _memset($2 + 2115 | 0, 0, 259) | 0; //@line 14800
 _mbed_tracef(16, 12709, 13151, $4); //@line 14801
 HEAP32[___async_retval >> 2] = 0; //@line 14803
 return;
}
function __ZN6events10EventQueue6cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3008
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3009
 _equeue_cancel($0, $1); //@line 3010
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 128; //@line 3013
  sp = STACKTOP; //@line 3014
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3017
  return;
 }
}
function __ZN7LoRaPHY16set_last_tx_doneEhbj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $5 = 0;
 $5 = HEAP32[$0 + 72 >> 2] | 0; //@line 19901
 $11 = HEAPU8[(HEAP32[$0 + 124 >> 2] | 0) + (($1 & 255) * 12 | 0) + 9 >> 0] | 0; //@line 19907
 HEAP32[$5 + ($11 * 24 | 0) + 8 >> 2] = $3; //@line 19909
 if ($2) {
  return;
 }
 HEAP32[$5 + ($11 * 24 | 0) + 4 >> 2] = $3; //@line 19914
 return;
}
function __ZN7LoRaPHYC2ER18LoRaWANTimeHandler($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var dest = 0, stop = 0;
 HEAP32[$0 >> 2] = 880; //@line 22286
 HEAP32[$0 + 4 >> 2] = 0; //@line 22288
 HEAP32[$0 + 8 >> 2] = $1; //@line 22290
 dest = $0 + 12 | 0; //@line 22292
 stop = dest + 120 | 0; //@line 22292
 do {
  HEAP32[dest >> 2] = 0; //@line 22292
  dest = dest + 4 | 0; //@line 22292
 } while ((dest | 0) < (stop | 0));
 return;
}
function _add_pkcs_padding($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$09 = 0, $3 = 0, $5 = 0, $7 = 0;
 $3 = $1 - $2 | 0; //@line 2482
 if (!$3) {
  return;
 }
 $5 = $3 & 255; //@line 2487
 $$09 = 0; //@line 2488
 $7 = 0; //@line 2488
 do {
  HEAP8[$0 + ($7 + $2) >> 0] = $5; //@line 2492
  $$09 = $$09 + 1 << 24 >> 24; //@line 2493
  $7 = $$09 & 255; //@line 2494
 } while ($3 >>> 0 > $7 >>> 0);
 return;
}
function __ZN4mbed5Timer5startEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 29581
 $6 = ___async_retval; //@line 29583
 $11 = HEAP32[$6 + 4 >> 2] | 0; //@line 29588
 $13 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 29590
 HEAP32[$13 >> 2] = HEAP32[$6 >> 2]; //@line 29592
 HEAP32[$13 + 4 >> 2] = $11; //@line 29595
 HEAP32[$4 >> 2] = 1; //@line 29596
 return;
}
function _gpio_irq_init($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0;
 if (($1 | 0) == -1) {
  $$0 = -1; //@line 7013
  return $$0 | 0; //@line 7014
 }
 HEAP32[5048] = $2; //@line 7016
 HEAP32[$0 >> 2] = $1; //@line 7017
 HEAP32[$0 + 4 >> 2] = $1; //@line 7019
 _emscripten_asm_const_iii(10, $3 | 0, $1 | 0) | 0; //@line 7020
 $$0 = 0; //@line 7021
 return $$0 | 0; //@line 7022
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14861
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 14872
  $$0 = 1; //@line 14873
 } else {
  $$0 = 0; //@line 14875
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 14879
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19144
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 19147
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 19152
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 19155
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 17375
 STACKTOP = STACKTOP + 16 | 0; //@line 17376
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17376
 _free($0); //@line 17378
 if (!(_pthread_setspecific(HEAP32[6073] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 17383
  return;
 } else {
  _abort_message(18602, sp); //@line 17385
 }
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 7053
 HEAP32[$0 >> 2] = $1; //@line 7054
 HEAP32[5049] = 1; //@line 7055
 $4 = $0; //@line 7056
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 7061
 $10 = 20200; //@line 7062
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 7064
 HEAP32[$10 + 4 >> 2] = $9; //@line 7067
 return;
}
function __ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14066
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 2; //@line 14069
  $$0 = 0; //@line 14070
 } else {
  $$0 = $AsyncRetVal; //@line 14072
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 14075
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 16857
 }
 return;
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4580
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4581
 _puts($0) | 0; //@line 4582
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 4585
  sp = STACKTOP; //@line 4586
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4589
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 4409
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 4413
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 4417
   $$0 = 0; //@line 4418
  } else {
   $$0 = $4; //@line 4420
  }
 } else {
  $$0 = $1; //@line 4423
 }
 return $$0 | 0; //@line 4425
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7321
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 7322
 _emscripten_sleep($0 | 0); //@line 7323
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 666; //@line 7326
  sp = STACKTOP; //@line 7327
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7330
  return;
 }
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 4372
 STACKTOP = STACKTOP + 16 | 0; //@line 4373
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4373
 $0 = sp; //@line 4374
 _gettimeofday($0 | 0, 0) | 0; //@line 4375
 STACKTOP = sp; //@line 4382
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 4382
}
function __ZN7LoRaMac15open_rx2_windowEv__async_cb($0) {
 $0 = $0 | 0;
 var $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 26940
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 26942
 HEAP32[(HEAP32[$0 + 8 >> 2] | 0) + 1168 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 26947
 HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 26949
 _mbed_tracef(16, 12709, 12771, $8); //@line 26950
 return;
}
function _mbedtls_cipher_update__async_cb_169($0) {
 $0 = $0 | 0;
 var $$1 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 31297
 if (!$AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$0 + 4 >> 2]; //@line 31300
  $$1 = 0; //@line 31301
 } else {
  $$1 = $AsyncRetVal; //@line 31303
 }
 HEAP32[___async_retval >> 2] = $$1; //@line 31306
 return;
}
function __ZN13LoRaMacCryptoC2Ev($0) {
 $0 = $0 | 0;
 var $1 = 0, dest = 0, stop = 0;
 $1 = $0 + 32 | 0; //@line 18974
 dest = $0; //@line 18975
 stop = dest + 64 | 0; //@line 18975
 do {
  HEAP32[dest >> 2] = 0; //@line 18975
  dest = dest + 4 | 0; //@line 18975
 } while ((dest | 0) < (stop | 0));
 HEAP8[$0 >> 0] = 73; //@line 18976
 HEAP8[$1 >> 0] = 1; //@line 18977
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 17360
 STACKTOP = STACKTOP + 16 | 0; //@line 17361
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 17361
 if (!(_pthread_key_create(24292, 732) | 0)) {
  STACKTOP = sp; //@line 17366
  return;
 } else {
  _abort_message(18552, sp); //@line 17368
 }
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 16921
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 16925
  }
 }
 return;
}
function __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11325
 } else {
  if ($1 << 24 >> 24 == -1) {
   $$0 = -1003; //@line 11329
  } else {
   HEAP8[$0 + 2902 >> 0] = $1; //@line 11332
   $$0 = 0; //@line 11333
  }
 }
 return $$0 | 0; //@line 11336
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 32290
 HEAP32[new_frame + 4 >> 2] = sp; //@line 32292
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 32294
 ___async_cur_frame = new_frame; //@line 32295
 return ___async_cur_frame + 8 | 0; //@line 32296
}
function __ZN14LoRaMacCommand30copy_repeat_commands_to_bufferEv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $8 = 0;
 $1 = $0 + 2 | 0; //@line 17508
 $3 = HEAPU8[$1 >> 0] | 0; //@line 17510
 $8 = HEAPU8[$0 + 3 >> 0] | 0; //@line 17515
 _memcpy($0 + 4 + $3 | 0, $0 + 132 | 0, $8 | 0) | 0; //@line 17516
 HEAP8[$1 >> 0] = $3 + $8; //@line 17519
 return;
}
function b357(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13, p14) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 p14 = p14 | 0;
 nullFunc_viiiiiiiiiiiiiii(0); //@line 175
}
function __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11309
  return $$0 | 0; //@line 11310
 }
 $$0 = __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) | 0; //@line 11313
 return $$0 | 0; //@line 11314
}
function __ZN7LoRaPHY15apply_DR_offsetEaa($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $5 = 0;
 $5 = ($1 & 255) - ($2 & 255) | 0; //@line 22029
 if (!($5 & 128)) {
  $$0 = $5 & 255; //@line 22034
  return $$0 | 0; //@line 22035
 }
 $$0 = HEAP8[$0 + 26 >> 0] | 0; //@line 22039
 return $$0 | 0; //@line 22040
}
function __ZN4mbed8CallbackIFvvEE13function_moveIN6events5EventIS1_EEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP32[$0 >> 2] = 0; //@line 8115
 $2 = HEAP32[$1 >> 2] | 0; //@line 8116
 if (!$2) {
  return;
 }
 HEAP32[$0 >> 2] = $2; //@line 8121
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + 1; //@line 8124
 return;
}
function _gpio_init_inout($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6976
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6982
 _emscripten_asm_const_iiiiii(9, $0 | 0, $1 | 0, $2 | 0, $3 | 0, $4 | 0) | 0; //@line 6983
 return;
}
function __ZN12LoRaWANStack24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11363
  return $$0 | 0; //@line 11364
 }
 __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1); //@line 11366
 $$0 = 0; //@line 11367
 return $$0 | 0; //@line 11368
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 18888
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18892
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 18895
 return;
}
function __ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_127($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28466
 HEAP32[$2 + 2092 >> 2] = 0; //@line 28470
 HEAP8[$2 + 2376 >> 0] = 1; //@line 28472
 HEAP32[$2 + 1760 >> 2] = 0; //@line 28474
 HEAP8[$2 + 1184 >> 0] = 0; //@line 28476
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 8897
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 8897
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 8897
 return;
}
function b355(p0, p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 p9 = p9 | 0;
 p10 = p10 | 0;
 p11 = p11 | 0;
 p12 = p12 | 0;
 p13 = p13 | 0;
 nullFunc_viiiiiiiiiiiiii(0); //@line 172
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 32279
  return low << bits; //@line 32280
 }
 tempRet0 = low << bits - 32; //@line 32282
 return 0; //@line 32283
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 32268
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 32269
 }
 tempRet0 = 0; //@line 32271
 return high >>> bits - 32 | 0; //@line 32272
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 1648
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 1648
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 1648
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 10367
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 10367
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 10367
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 7418
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7418
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7418
 return;
}
function __ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_392($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 28894
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 28896
 HEAP32[$4 + 2496 >> 2] = $6 ? 5 : 2; //@line 28899
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 16825
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 16825
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 16825
 return;
}
function __ZN12LoRaWANStack21set_channel_data_rateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!(HEAP32[$0 + 2496 >> 2] | 0)) {
  $$0 = -1012; //@line 11347
  return $$0 | 0; //@line 11348
 }
 $$0 = __ZN7LoRaMac21set_channel_data_rateEh($0, $1) | 0; //@line 11351
 return $$0 | 0; //@line 11352
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_222($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13301
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 13303
 HEAP32[$4 + 2496 >> 2] = $6 ? 5 : 2; //@line 13306
 return;
}
function _equeue_dispatch__async_cb_73($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23839
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23841
 HEAP8[HEAP32[$0 + 4 >> 2] >> 0] = 1; //@line 23842
 _equeue_mutex_unlock($4); //@line 23843
 HEAP8[$6 >> 0] = 0; //@line 23844
 return;
}
function __ZN12LoRaWANStack23process_connected_stateEv__async_cb_226($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13509
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13511
 HEAP32[$4 >> 2] = HEAP32[$4 >> 2] | 4; //@line 13514
 HEAP32[$6 + 2496 >> 2] = 2; //@line 13516
 return;
}
function __ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_273($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18953
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18955
 HEAP32[$6 + 16 >> 2] = 0; //@line 18957
 return;
}
function dynCall_iiiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 return FUNCTION_TABLE_iiiiiiii[index & 1](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0) | 0; //@line 32546
}
function __ZN12LoRaWANStack20process_transmissionEv__async_cb_234($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14205
 $6 = (__ZNK7LoRaMac16get_device_classEv(HEAP32[$0 + 4 >> 2] | 0) | 0) == 2; //@line 14207
 HEAP32[$4 >> 2] = $6 ? 5 : 2; //@line 14209
 return;
}
function _fflush__async_cb_209($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 834
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 836
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 839
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_227($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13578
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13580
 _gpio_irq_set($6 + 28 | 0, 2, 1); //@line 13582
 return;
}
function _mbedtls_aes_crypt_ecb($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (($1 | 0) == 1) {
  _mbedtls_internal_aes_encrypt($0, $2, $3) | 0; //@line 1687
 } else {
  _mbedtls_internal_aes_decrypt($0, $2, $3) | 0; //@line 1689
 }
 return 0; //@line 1691
}
function __ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_181($0) {
 $0 = $0 | 0;
 var $6 = 0;
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 32047
 __ZN4mbed5TimerD2Ev(HEAP32[$0 + 4 >> 2] | 0); //@line 32048
 HEAP8[___async_retval >> 0] = $6 & 1; //@line 32051
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19218
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 19220
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 19222
 return;
}
function __ZN16SX1276_LoRaRadio7standbyEv($0) {
 $0 = $0 | 0;
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 95
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 97
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 98
 HEAP8[$0 + 688 >> 0] = 0; //@line 100
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 31997
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 32000
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 32003
 return;
}
function _gpio_init_out_ex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6958
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6964
 _emscripten_asm_const_iiii(8, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 6965
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 28780
 } else {
  $$0 = -1; //@line 28782
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 28785
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 32539
}
function __ZN7LoRaMac16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN18LoRaMacChannelPlan8get_planER16lora_channelplanPK16channel_params_t($0 + 752 | 0, $1, __ZN7LoRaPHY16get_phy_channelsEv($0 + 4 | 0) | 0) | 0; //@line 16992
}
function __ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_237($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14606
 HEAP8[$2 + 688 >> 0] = 2; //@line 14608
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($2); //@line 14609
 return;
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 12085
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 12091
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 12095
}
function _equeue_break($0) {
 $0 = $0 | 0;
 var $1 = 0;
 $1 = $0 + 128 | 0; //@line 3799
 _equeue_mutex_lock($1); //@line 3800
 HEAP8[$0 + 8 >> 0] = 1; //@line 3802
 _equeue_mutex_unlock($1); //@line 3803
 _equeue_sema_signal($0 + 48 | 0); //@line 3805
 return;
}
function _mbedtls_cipher_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2351
 stop = dest + 68 | 0; //@line 2351
 do {
  HEAP32[dest >> 2] = 0; //@line 2351
  dest = dest + 4 | 0; //@line 2351
 } while ((dest | 0) < (stop | 0));
 return;
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 32595
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 32302
 stackRestore(___async_cur_frame | 0); //@line 32303
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 32304
}
function _mbedtls_ccm_init($0) {
 $0 = $0 | 0;
 var dest = 0, stop = 0;
 dest = $0; //@line 2162
 stop = dest + 68 | 0; //@line 2162
 do {
  HEAP32[dest >> 2] = 0; //@line 2162
  dest = dest + 4 | 0; //@line 2162
 } while ((dest | 0) < (stop | 0));
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 27113
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 27114
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 27116
 return;
}
function __ZN7LoRaPHY15get_ack_timeoutEv($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0;
 $5 = HEAPU16[$0 + 50 >> 1] | 0; //@line 22897
 $6 = HEAPU16[$0 + 52 >> 1] | 0; //@line 22898
 return $5 - $6 + ((_rand() | 0) % ($6 << 1 | 1 | 0) | 0) | 0; //@line 22905
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 737
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 738
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 740
 return;
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 15196
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 15196
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 15198
 return $1 | 0; //@line 15199
}
function __ZN7LoRaMac16reset_ongoing_txEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2104 >> 0] = 0; //@line 15543
 _memset($0 + 2115 | 0, 0, 257) | 0; //@line 15545
 if (!$1) {
  return;
 }
 HEAP16[$0 + 2372 >> 1] = 0; //@line 15550
 return;
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 11544
  $$0 = -1; //@line 11545
 } else {
  $$0 = $0; //@line 11547
 }
 return $$0 | 0; //@line 11549
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6942
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6948
 _emscripten_asm_const_iii(7, $0 | 0, $1 | 0) | 0; //@line 6949
 return;
}
function _gpio_init_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 6927
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 6933
 _emscripten_asm_const_iii(6, $0 | 0, $1 | 0) | 0; //@line 6934
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 4431
 HEAP8[$0 + 76 >> 0] = 1; //@line 4433
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 4435
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4436
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 32019
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 32020
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 32021
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 32532
}
function __ZN4mbed6Ticker5setupEy($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0;
 $4 = ___udivdi3($1 | 0, $2 | 0, 1e3, 0) | 0; //@line 7290
 _emscripten_asm_const_iii(14, $0 + 40 | 0, $4 | 0) | 0; //@line 7292
 return;
}
function __ZN16SX1276_LoRaRadio5sleepEv($0) {
 $0 = $0 | 0;
 __ZN4mbed6Ticker6detachEv($0 + 1048 | 0); //@line 84
 __ZN4mbed6Ticker6detachEv($0 + 1112 | 0); //@line 86
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv($0); //@line 87
 return;
}
function __ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 28642
 HEAP8[$2 + 689 >> 0] = 0; //@line 28644
 HEAP8[$2 + 688 >> 0] = 0; //@line 28646
 return;
}
function __ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_380($0) {
 $0 = $0 | 0;
 HEAP8[HEAP32[$0 + 8 >> 2] >> 0] = HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 27163
 HEAP8[___async_retval >> 0] = 1; //@line 27166
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18299
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 18300
 HEAP32[___async_retval >> 2] = $4; //@line 18302
 return;
}
function _aes_crypt_ctr_wrap($0, $1, $2, $3, $4, $5, $6) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 $6 = $6 | 0;
 return _mbedtls_aes_crypt_ctr($0, $1, $2, $3, $4, $5, $6) | 0; //@line 3121
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 1297
 ___cxa_begin_catch($0 | 0) | 0; //@line 1298
 _emscripten_alloc_async_context(4, sp) | 0; //@line 1299
 __ZSt9terminatev(); //@line 1300
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 32588
}
function _aes_ctx_alloc() {
 var $$0 = 0, $0 = 0;
 $0 = _calloc(1, 280) | 0; //@line 3154
 if (!$0) {
  $$0 = 0; //@line 3157
 } else {
  _mbedtls_aes_init($0); //@line 3159
  $$0 = $0; //@line 3160
 }
 return $$0 | 0; //@line 3162
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 1860
 return;
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_349($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24255
 HEAP8[$2 >> 0] = (HEAP8[$2 >> 0] | 0) + 1 << 24 >> 24; //@line 24258
 return;
}
function __ZN4mbed5TimerD2Ev($0) {
 $0 = $0 | 0;
 if (HEAP32[$0 >> 2] | 0) {
  if (HEAP8[$0 + 28 >> 0] | 0) {
   _sleep_manager_unlock_deep_sleep_internal(); //@line 2780
  }
 }
 HEAP32[$0 >> 2] = 0; //@line 2783
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 32525
}
function __ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack19acquire_tx_metadataER19lorawan_tx_metadata($0 + 4 | 0, $1) | 0; //@line 5601
}
function __ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack19acquire_rx_metadataER19lorawan_rx_metadata($0 + 4 | 0, $1) | 0; //@line 5610
}
function _aes_crypt_cbc_wrap($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return _mbedtls_aes_crypt_cbc($0, $1, $2, $3, $4, $5) | 0; //@line 3108
}
function __ZN16LoRaWANInterface16get_channel_planER16lora_channelplan($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack20get_enabled_channelsER16lora_channelplan($0 + 4 | 0, $1) | 0; //@line 5442
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 32011
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 32013
}
function __ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_180($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 31984
 return;
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 32581
}
function b52(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 nullFunc_iiiiiiii(0); //@line 32748
 return 0; //@line 32748
}
function __ZN7LoRaPHY15get_max_payloadEhb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return HEAP8[(HEAP32[($2 ? $0 + 104 | 0 : $0 + 96 | 0) >> 2] | 0) + ($1 & 255) >> 0] | 0; //@line 22879
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 12230
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 12235
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_270($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 18570
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 14256
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 14259
 }
 return $$0 | 0; //@line 14261
}
function __ZN7LoRaPHY13mask_bit_testEPKtj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return (1 << ($2 & 15) & (HEAPU16[$1 + ($2 >>> 4 << 1) >> 1] | 0) | 0) != 0 | 0; //@line 22309
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_164($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 30897
 return;
}
function __ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27503
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_98($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[___async_retval >> 2]; //@line 26713
 return;
}
function __ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = HEAP8[___async_retval >> 0] & 1 ? 3 : 0; //@line 29992
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 32518
}
function __ZN16LoRaWANInterface25set_confirmed_msg_retriesEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack23set_confirmed_msg_retryEh($0 + 4 | 0, $1) | 0; //@line 5414
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 11725
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 11729
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 32248
}
function __ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21793
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 25708
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_313($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 22033
 return;
}
function __ZN16LoRaWANInterface20get_backoff_metadataERi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack24acquire_backoff_metadataERi($0 + 4 | 0, $1) | 0; //@line 5619
}
function b50(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 32745
 return 0; //@line 32745
}
function b49(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 32742
 return 0; //@line 32742
}
function __ZN16SX1276_LoRaRadio18set_public_networkEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 689 >> 0] = 1; //@line 697
 HEAP8[$0 + 776 >> 0] = $1 & 1; //@line 699
 return;
}
function __ZN18LoRaWANTimeHandler16get_elapsed_timeEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return (__ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0) - $1 | 0; //@line 23364
}
function __ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28921
 return;
}
function __ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13330
 return;
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 32309
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 32310
}
function __ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 25182
 return;
}
function __ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_176($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 31654
 return;
}
function __ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_384($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27355
 return;
}
function _gpio_irq_set($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(12, HEAP32[$0 + 4 >> 2] | 0, $1 | 0, $2 | 0) | 0; //@line 7043
 return;
}
function __ZN7LoRaMac24continue_joining_processEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = (HEAP32[___async_retval >> 2] | 0) == 0 & 1; //@line 30223
 return;
}
function __ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 19208
 return;
}
function __ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28795
 return;
}
function __ZN7LoRaMac17bind_radio_driverER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0 + 4 | 0, $1); //@line 17025
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 7](a1 | 0, a2 | 0, a3 | 0); //@line 32574
}
function __ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26575
 return;
}
function __ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 HEAP8[$0 + 689 >> 0] = $1; //@line 687
 return;
}
function __ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14229
 return;
}
function __ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28091
 return;
}
function __ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 30065
 return;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN5Sht31C2E7PinNameS0_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 _emscripten_asm_const_iiii(15, $0 | 0, $1 | 0, $2 | 0) | 0; //@line 7340
 return;
}
function __ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_71($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 22583
 return;
}
function __ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_230($0) {
 $0 = $0 | 0;
 _gpio_irq_set((HEAP32[$0 + 8 >> 2] | 0) + 28 | 0, 2, 0); //@line 13693
 return;
}
function __ZN16LoRaWANInterface12set_datarateEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return __ZN12LoRaWANStack21set_channel_data_rateEh($0 + 4 | 0, $1) | 0; //@line 5389
}
function __ZN7LoRaPHY23get_minimum_tx_datarateEv($0) {
 $0 = $0 | 0;
 return HEAP8[((HEAP8[$0 + 128 >> 0] & 1) == 0 ? $0 + 26 | 0 : $0 + 35 | 0) >> 0] | 0; //@line 22864
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 8062
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_58($0) {
 $0 = $0 | 0;
 __ZN16SX1276_LoRaRadio18set_low_power_modeEv(HEAP32[$0 + 4 >> 2] | 0); //@line 21550
 return;
}
function __ZN16LoRaWANInterface19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27136
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 12221
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 12223
}
function __ZN16LoRaWANInterface25disable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 0) | 0; //@line 5405
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 17460
 __ZdlPv($0); //@line 17461
 return;
}
function _aes_crypt_ecb_wrap($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return _mbedtls_aes_crypt_ecb($0, $1, $2, $3) | 0; //@line 3096
}
function __ZN16LoRaWANInterface24enable_adaptive_datarateEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack24enable_adaptive_datarateEb($0 + 4 | 0, 1) | 0; //@line 5397
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 17143
 __ZdlPv($0); //@line 17144
 return;
}
function _srand($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = 20184; //@line 16257
 HEAP32[$2 >> 2] = $0 + -1; //@line 16259
 HEAP32[$2 + 4 >> 2] = 0; //@line 16262
 return;
}
function __ZN18LoRaWANTimeHandler24activate_timer_subsystemEPN6events10EventQueueE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 23345
 return;
}
function __ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 28656
 return;
}
function __ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_23($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20357
 return;
}
function _gcm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 400) | 0; //@line 3062
 if ($0 | 0) {
  _mbedtls_gcm_init($0); //@line 3065
 }
 return $0 | 0; //@line 3067
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_374($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26781
 return;
}
function __ZN7LoRaMac21handle_retransmissionEv__async_cb_373($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 26767
 return;
}
function __ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 26565
 return;
}
function __ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 27211
 return;
}
function __ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_160($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 30636
 return;
}
function b47(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 32739
 return 0; //@line 32739
}
function b46(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(6); //@line 32736
 return 0; //@line 32736
}
function b45(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 32733
 return 0; //@line 32733
}
function _ccm_ctx_alloc() {
 var $0 = 0;
 $0 = _calloc(1, 68) | 0; //@line 3014
 if ($0 | 0) {
  _mbedtls_ccm_init($0); //@line 3017
 }
 return $0 | 0; //@line 3019
}
function __ZN16LoRaWANInterface7receiveEhPhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 30265
 return;
}
function __ZN16LoRaWANInterface25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 __ZN12LoRaWANStack25remove_link_check_requestEv($0 + 4 | 0); //@line 5379
 return;
}
function __ZN16LoRaWANInterface14remove_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30835
 return;
}
function __ZN16LoRaWANInterface14cancel_sendingEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30861
 return;
}
function __ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_100($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = 2; //@line 26793
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 16671
 __ZdlPv($0); //@line 16672
 return;
}
function __ZN12LoRaWANStack17drop_channel_listEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27221
 return;
}
function __ZN16LoRaWANInterface4sendEhPKhti__async_cb($0) {
 $0 = $0 | 0;
 HEAP16[___async_retval >> 1] = HEAP16[___async_retval >> 1] | 0; //@line 14782
 return;
}
function __ZN12LoRaWANStack16remove_a_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28535
 return;
}
function _ticker_set_handler__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 29565
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 13741
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 21333
 return;
}
function __ZN7LoRaMac21remove_single_channelEh__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30845
 return;
}
function __ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_285($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2911 >> 0] = 1; //@line 20197
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function __ZN16LoRaWANInterface22add_link_check_requestEv($0) {
 $0 = $0 | 0;
 return __ZN12LoRaWANStack22set_link_check_requestEv($0 + 4 | 0) | 0; //@line 5372
}
function __ZN16LoRaWANInterface10disconnectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14085
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0; //@line 32511
}
function __ZN7LoRaMac19remove_channel_planEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 22112
 return;
}
function __ZN18LoRaMacChannelPlan30activate_channelplan_subsystemEP7LoRaPHY($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 17046
 return;
}
function b353(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 169
}
function __ZN12LoRaWANStack8shutdownEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23580
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 16868
}
function __ZN12LoRaWANStack7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18321
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterface7connectEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1241
 return;
}
function __ZN7LoRaPHY16get_channel_maskEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return HEAP32[($1 ? $0 + 120 | 0 : $0 + 116 | 0) >> 2] | 0; //@line 22916
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_403($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 2084 >> 0] = 1; //@line 29612
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[2729] | 0; //@line 17450
 HEAP32[2729] = $0 + 0; //@line 17452
 return $0 | 0; //@line 17454
}
function __ZN18LoRaWANTimeHandler16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN6events10EventQueue4tickEv(HEAP32[$0 >> 2] | 0) | 0; //@line 23354
}
function __ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 23733
 return;
}
function _gpio_irq_free($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_iii(11, HEAP32[$0 + 4 >> 2] | 0, HEAP32[$0 + 8 >> 2] | 0) | 0; //@line 7032
 return;
}
function __ZN7LoRaMac15open_rx1_windowEv__async_cb($0) {
 $0 = $0 | 0;
 _mbed_tracef(16, 12709, 13071, HEAP32[$0 + 4 >> 2] | 0); //@line 22389
 return;
}
function _mbedtls_cipher_update__async_cb_170($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31316
 return;
}
function _mbedtls_cipher_setkey__async_cb_150($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30085
 return;
}
function __ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_355($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 24782
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 15](a1 | 0, a2 | 0); //@line 32567
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY13get_radio_rngEv__async_cb_120($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 28041
 return;
}
function __ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_116($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 27869
 return;
}
function _aes_setkey_enc_wrap($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return _mbedtls_aes_setkey_enc($0, $1, $2) | 0; //@line 3130
}
function __ZN7LoRaMac4joinEb__async_cb_130($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28634
 return;
}
function __ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 22378
 return;
}
function _mbedtls_cipher_update__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 31147
 return;
}
function _mbedtls_cipher_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30075
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6randomEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14432
 return;
}
function b43(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(3); //@line 32730
 return 0; //@line 32730
}
function b42(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 32727
 return 0; //@line 32727
}
function _ccm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30052
 return;
}
function _aes_setkey_dec_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17665
 return;
}
function __ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_400($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 1; //@line 29409
 return;
}
function _mbedtls_ccm_setkey__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 30148
 return;
}
function _gcm_aes_setkey_wrap__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1266
 return;
}
function __ZN7LoRaMac24enable_adaptive_datarateEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 1936 >> 0] = $1 & 1; //@line 15560
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_cipher_cmac_finish__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 22733
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMacD2Ev__async_cb_309($0) {
 $0 = $0 | 0;
 __ZN12LoRaPHYEU868D2Ev((HEAP32[$0 + 4 >> 2] | 0) + 4 | 0); //@line 21759
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 32336
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_133($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18set_radio_instanceER9LoRaRadio($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 4 >> 2] = $1; //@line 22317
 return;
}
function _memset__wrapper(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 return _memset(p0 | 0, p1 | 0, p2 | 0) | 0; //@line 32685
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b351(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 166
}
function _mbedtls_aes_setkey_dec__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 25894
 return;
}
function __ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16get_current_timeEv($0) {
 $0 = $0 | 0;
 return __ZN18LoRaWANTimeHandler16get_current_timeEv($0) | 0; //@line 12288
}
function __ZN7LoRaPHY32is_custom_channel_plan_supportedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 16 >> 0] | 0) != 0 | 0; //@line 22941
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 14204
}
function __ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11set_channelEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 692 >> 2] = $1; //@line 645
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14219
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27515
 return;
}
function _putc__async_cb_107($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 27126
 return;
}
function _fflush__async_cb_210($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 849
 return;
}
function __ZN7LoRaMac14set_tx_ongoingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$0 + 2104 >> 0] = $1 & 1; //@line 15605
 return;
}
function __ZN6events10EventQueue9time_leftEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return _equeue_timeleft($0, $1) | 0; //@line 3027
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 28911
 return;
}
function _putchar__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14239
 return;
}
function _fputc__async_cb_208($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 750
 return;
}
function __ZNK14LoRaMacCommand25is_mac_command_in_next_txEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 >> 0] | 0) != 0 | 0; //@line 17543
}
function __ZN7LoRaPHYD2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 880; //@line 19750
 HEAP32[$0 + 4 >> 2] = 0; //@line 19752
 return;
}
function __ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 15](a1 | 0) | 0; //@line 32504
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 29535
 return;
}
function __ZNK14LoRaMacCommand18has_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 1 >> 0] | 0) != 0 | 0; //@line 17560
}
function __ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[___async_retval >> 0] = 0; //@line 929
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb_401($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 29437
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 32724
 return 0; //@line 32724
}
function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 32721
 return 0; //@line 32721
}
function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 32718
 return 0; //@line 32718
}
function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 32715
 return 0; //@line 32715
}
function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 32712
 return 0; //@line 32712
}
function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 32709
 return 0; //@line 32709
}
function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 32706
 return 0; //@line 32706
}
function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 32703
 return 0; //@line 32703
}
function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 32700
 return 0; //@line 32700
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 32697
 return 0; //@line 32697
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 32694
 return 0; //@line 32694
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 32691
 return 0; //@line 32691
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 32688
 return 0; //@line 32688
}
function __ZN7LoRaPHY21verify_nb_join_trialsEh($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ($1 & 255) > 11 | 0; //@line 23005
}
function __ZN12LoRaWANStack25remove_link_check_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2909 >> 0] = 0; //@line 11764
 return;
}
function b27(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 32682
 return 0; //@line 32682
}
function __ZNK14LoRaMacCommand26get_repeat_commands_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 3 >> 0] | 0; //@line 17528
}
function __ZN14LoRaMacCommand29clear_mac_commands_in_next_txEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 >> 0] = 0; //@line 17534
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(18655, HEAP32[$0 + 4 >> 2] | 0); //@line 14056
}
function __ZN4mbed11InterruptInD0Ev__async_cb_1($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 18369
 return;
}
function __ZN12LoRaPHYEU868D0Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 23187
 __ZdlPv($0); //@line 23188
 return;
}
function _mbedtls_cipher_cmac_starts__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 21269
 return;
}
function __ZN7LoRaMac11schedule_txEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 29421
 return;
}
function __ZN4mbed6Ticker6detachEv($0) {
 $0 = $0 | 0;
 _emscripten_asm_const_ii(13, $0 + 40 | 0) | 0; //@line 7300
 return;
}
function __ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_188($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 18817
 return;
}
function __ZN16LoRaWANInterfaceD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 29826
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 1023](a1 | 0); //@line 32560
}
function __ZN7LoRaPHY29get_maximum_frame_counter_gapEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 48 >> 1] | 0; //@line 22887
}
function __ZN5Sht3115readTemperatureEv($0) {
 $0 = $0 | 0;
 return +(+(_emscripten_asm_const_ii(16, $0 | 0) | 0) / 100.0);
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD0Ev__async_cb_371($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 26607
 return;
}
function __ZN7LoRaMac26get_backoff_timer_event_idEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 1812 >> 2] | 0; //@line 15474
}
function __ZN7LoRaMac25post_process_mlme_requestEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2084 >> 0] = 0; //@line 12216
 return;
}
function __ZN4mbed6TickerD0Ev__async_cb_353($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 24691
 return;
}
function __ZN14LoRaMacCommand20clear_sticky_mac_cmdEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 1 >> 0] = 0; //@line 17550
 return;
}
function __ZN14LoRaMacCommand20clear_command_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2 >> 0] = 0; //@line 17399
 return;
}
function __ZN14LoRaMacCommand19clear_repeat_bufferEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 3 >> 0] = 0; //@line 17501
 return;
}
function b349(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 163
}
function b348(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 160
}
function b347(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 157
}
function _equeue_event_period($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -12 >> 2] = $1; //@line 4358
 return;
}
function __ZNK14LoRaMacCommand18get_mac_cmd_lengthEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 2 >> 0] | 0; //@line 17408
}
function __ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb_121($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 4349
 return;
}
function __ZN7LoRaMac21post_process_mlme_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2080 >> 0] = 0; //@line 12280
 return;
}
function __ZN7LoRaMac21post_process_mcps_indEv($0) {
 $0 = $0 | 0;
 HEAP8[$0 + 2012 >> 0] = 0; //@line 12272
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb_207($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_240($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 4367
 return;
}
function __ZN7LoRaMac10tx_ongoingEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2104 >> 0] | 0) != 0 | 0; //@line 15596
}
function __ZN7LoRaMac10nwk_joinedEv($0) {
 $0 = $0 | 0;
 return (HEAP8[$0 + 2376 >> 0] | 0) != 0 | 0; //@line 13851
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio18check_rf_frequencyEj($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return 1; //@line 977
}
function __ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_41($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_78($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_77($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK7LoRaMac16get_device_classEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 2380 >> 2] | 0; //@line 15300
}
function __ZN6events10EventQueue14break_dispatchEv($0) {
 $0 = $0 | 0;
 _equeue_break($0); //@line 2994
 return;
}
function __ZN7LoRaPHY19get_max_nb_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 20 >> 0] | 0; //@line 22924
}
function __ZN7LoRaMac16get_current_slotEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 1168 >> 2] | 0; //@line 12296
}
function __ZN16SX1276_LoRaRadio10get_statusEv($0) {
 $0 = $0 | 0;
 return HEAP8[$0 + 688 >> 0] | 0; //@line 677
}
function __ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_63($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY16get_phy_channelsEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 124 >> 2] | 0; //@line 22932
}
function __ZN14LoRaMacCommand23get_mac_commands_bufferEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 17415
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(31); //@line 32679
 return 0; //@line 32679
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(30); //@line 32676
 return 0; //@line 32676
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(29); //@line 32673
 return 0; //@line 32673
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(28); //@line 32670
 return 0; //@line 32670
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(27); //@line 32667
 return 0; //@line 32667
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(26); //@line 32664
 return 0; //@line 32664
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(25); //@line 32661
 return 0; //@line 32661
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(24); //@line 32658
 return 0; //@line 32658
}
function b17(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(23); //@line 32655
 return 0; //@line 32655
}
function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(22); //@line 32652
 return 0; //@line 32652
}
function b15(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(21); //@line 32649
 return 0; //@line 32649
}
function b14(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(20); //@line 32646
 return 0; //@line 32646
}
function b13(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(19); //@line 32643
 return 0; //@line 32643
}
function b12(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(18); //@line 32640
 return 0; //@line 32640
}
function _ccm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 31909
 return;
}
function _aes_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 14847
 return;
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 15449
}
function b11(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 32637
 return 0; //@line 32637
}
function _gcm_ctx_free__async_cb($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 1250
 return;
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 4402
 return;
}
function _main__async_cb_87($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 25832
 return;
}
function _main__async_cb_85($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 25770
 return;
}
function _main__async_cb_84($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -1; //@line 25762
 return;
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 4389
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_233($0) {
 $0 = $0 | 0;
 return;
}
function __ZN14LoRaMacCommandC2Ev($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 276) | 0; //@line 17391
 return;
}
function _main__async_cb_88($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 25842
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 7]() | 0; //@line 32497
}
function __ZNK7LoRaMac21get_mlme_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2084 | 0; //@line 12202
}
function __ZNK7LoRaMac21get_mcps_confirmationEv($0) {
 $0 = $0 | 0;
 return $0 + 2052 | 0; //@line 12188
}
function __ZN6events10EventQueue13function_dtorINS0_9context00IPFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 4395
 return;
}
function __ZNK7LoRaMac19get_mlme_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 2076 | 0; //@line 12209
}
function __ZNK7LoRaMac19get_mcps_indicationEv($0) {
 $0 = $0 | 0;
 return $0 + 2012 | 0; //@line 12195
}
function __ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 23331
 return;
}
function __ZN18LoRaMacChannelPlanC2Ev($0) {
 $0 = $0 | 0;
 HEAP32[$0 >> 2] = 0; //@line 17032
 return;
}
function __ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_335($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_216($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_259($0) {
 $0 = $0 | 0;
 return;
}
function b345(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(7); //@line 154
}
function b344(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6); //@line 151
}
function b343(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 148
}
function __ZN6events10EventQueue4tickEv($0) {
 $0 = $0 | 0;
 return _equeue_tick() | 0; //@line 3002
}
function __ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_284($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_317($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb_11($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_223($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_358($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_gcm_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 400) | 0; //@line 4096
 return;
}
function _mbedtls_aes_init($0) {
 $0 = $0 | 0;
 _memset($0 | 0, 0, 280) | 0; //@line 204
 return;
}
function __ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_323($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_149($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_147($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaPHYEU868D2Ev($0) {
 $0 = $0 | 0;
 __ZN7LoRaPHYD2Ev($0); //@line 23180
 return;
}
function __ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_389($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack26process_status_check_stateEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 15](); //@line 32553
}
function __ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_352($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_345($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_344($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_343($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_340($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY25setup_public_network_modeEb__async_cb_132($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events5EventIFvvEE10event_dtorIPS1_EEvPNS2_5eventE($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_53($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_52($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_51($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_336($0) {
 $0 = $0 | 0;
 return;
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 11602
}
function __ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_4($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(15); //@line 32634
 return 0; //@line 32634
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(14); //@line 32631
 return 0; //@line 32631
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(13); //@line 32628
 return 0; //@line 32628
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(12); //@line 32625
 return 0; //@line 32625
}
function __ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_155($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_16($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_15($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_14($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb_12($0) {
 $0 = $0 | 0;
 return;
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 32622
 return 0; //@line 32622
}
function __ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_408($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_172($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio8transmitEj__async_cb_138($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL18lora_event_handler11lora_events__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(24276); //@line 12240
 return 24284; //@line 12241
}
function __ZN7LoRaPHY15setup_rx_windowEbj__async_cb_124($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio7receiveEj__async_cb_55($0) {
 $0 = $0 | 0;
 return;
}
function _abort_message__async_cb_179($0) {
 $0 = $0 | 0;
 _abort(); //@line 31932
}
function __ZN7LoRaPHYD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 19759
 return;
}
function __ZN6events10EventQueue8dispatchEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 2910
}
function b341(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 145
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN7LoRaPHY11handle_sendEPhh__async_cb_102($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue6cancelEi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 32754
}
function __ZN4mbed7Timeout7handlerEv__async_cb_382($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio4sendEPhh__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadioD2Ev__async_cb_298($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed11InterruptInD2Ev__async_cb_40($0) {
 $0 = $0 | 0;
 return;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 15370
}
function __ZN4mbed10TimerEvent3irqEj__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio11radio_resetEv($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 15376
}
function __ZN4mbed6Ticker7handlerEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16LoRaWANInterfaceD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12radio_eventsD2Ev__async_cb_279($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12LoRaWANStackD2Ev__async_cb_263($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_platform_zeroize__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed7TimeoutD2Ev__async_cb_364($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventD2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed10TimerEventC2Ev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 32463
}
function _mbedtls_cipher_free__async_cb_103($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed6TickerD2Ev__async_cb_260($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio9start_cadEv($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_422($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_421($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_418($0) {
 $0 = $0 | 0;
 return;
}
function _schedule_interrupt__async_cb_417($0) {
 $0 = $0 | 0;
 return;
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 16497
 return;
}
function b3() {
 nullFunc_i(7); //@line 32619
 return 0; //@line 32619
}
function b2() {
 nullFunc_i(6); //@line 32616
 return 0; //@line 32616
}
function b1() {
 nullFunc_i(0); //@line 32613
 return 0; //@line 32613
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 32459
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16SX1276_LoRaRadio6unlockEv($0) {
 $0 = $0 | 0;
 return;
}
function _ticker_remove_event__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(24276); //@line 12246
 return;
}
function __ZN16SX1276_LoRaRadio4lockEv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL12send_messagev__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b291(p0) {
 p0 = p0 | 0;
 nullFunc_vi(975); //@line 33462
}
function b290(p0) {
 p0 = p0 | 0;
 nullFunc_vi(974); //@line 33459
}
function b289(p0) {
 p0 = p0 | 0;
 nullFunc_vi(973); //@line 33456
}
function b288(p0) {
 p0 = p0 | 0;
 nullFunc_vi(972); //@line 33453
}
function b287(p0) {
 p0 = p0 | 0;
 nullFunc_vi(971); //@line 33450
}
function b286(p0) {
 p0 = p0 | 0;
 nullFunc_vi(970); //@line 33447
}
function b285(p0) {
 p0 = p0 | 0;
 nullFunc_vi(969); //@line 33444
}
function b284(p0) {
 p0 = p0 | 0;
 nullFunc_vi(968); //@line 33441
}
function b283(p0) {
 p0 = p0 | 0;
 nullFunc_vi(967); //@line 33438
}
function b282(p0) {
 p0 = p0 | 0;
 nullFunc_vi(966); //@line 33435
}
function b281(p0) {
 p0 = p0 | 0;
 nullFunc_vi(965); //@line 33432
}
function b280(p0) {
 p0 = p0 | 0;
 nullFunc_vi(964); //@line 33429
}
function b279(p0) {
 p0 = p0 | 0;
 nullFunc_vi(963); //@line 33426
}
function b278(p0) {
 p0 = p0 | 0;
 nullFunc_vi(962); //@line 33423
}
function b277(p0) {
 p0 = p0 | 0;
 nullFunc_vi(961); //@line 33420
}
function b276(p0) {
 p0 = p0 | 0;
 nullFunc_vi(960); //@line 33417
}
function b275(p0) {
 p0 = p0 | 0;
 nullFunc_vi(959); //@line 33414
}
function b274(p0) {
 p0 = p0 | 0;
 nullFunc_vi(958); //@line 33411
}
function b273(p0) {
 p0 = p0 | 0;
 nullFunc_vi(957); //@line 33408
}
function b272(p0) {
 p0 = p0 | 0;
 nullFunc_vi(956); //@line 33405
}
function b271(p0) {
 p0 = p0 | 0;
 nullFunc_vi(955); //@line 33402
}
function b270(p0) {
 p0 = p0 | 0;
 nullFunc_vi(954); //@line 33399
}
function b269(p0) {
 p0 = p0 | 0;
 nullFunc_vi(953); //@line 33396
}
function b268(p0) {
 p0 = p0 | 0;
 nullFunc_vi(952); //@line 33393
}
function b267(p0) {
 p0 = p0 | 0;
 nullFunc_vi(951); //@line 33390
}
function b266(p0) {
 p0 = p0 | 0;
 nullFunc_vi(950); //@line 33387
}
function b265(p0) {
 p0 = p0 | 0;
 nullFunc_vi(949); //@line 33384
}
function b264(p0) {
 p0 = p0 | 0;
 nullFunc_vi(948); //@line 33381
}
function b263(p0) {
 p0 = p0 | 0;
 nullFunc_vi(947); //@line 33378
}
function b262(p0) {
 p0 = p0 | 0;
 nullFunc_vi(946); //@line 33375
}
function b261(p0) {
 p0 = p0 | 0;
 nullFunc_vi(945); //@line 33372
}
function b260(p0) {
 p0 = p0 | 0;
 nullFunc_vi(944); //@line 33369
}
function b259(p0) {
 p0 = p0 | 0;
 nullFunc_vi(943); //@line 33366
}
function b258(p0) {
 p0 = p0 | 0;
 nullFunc_vi(942); //@line 33363
}
function b257(p0) {
 p0 = p0 | 0;
 nullFunc_vi(941); //@line 33360
}
function b256(p0) {
 p0 = p0 | 0;
 nullFunc_vi(940); //@line 33357
}
function b255(p0) {
 p0 = p0 | 0;
 nullFunc_vi(939); //@line 33354
}
function b254(p0) {
 p0 = p0 | 0;
 nullFunc_vi(938); //@line 33351
}
function b253(p0) {
 p0 = p0 | 0;
 nullFunc_vi(937); //@line 33348
}
function b252(p0) {
 p0 = p0 | 0;
 nullFunc_vi(936); //@line 33345
}
function b251(p0) {
 p0 = p0 | 0;
 nullFunc_vi(935); //@line 33342
}
function b250(p0) {
 p0 = p0 | 0;
 nullFunc_vi(934); //@line 33339
}
function b249(p0) {
 p0 = p0 | 0;
 nullFunc_vi(933); //@line 33336
}
function b248(p0) {
 p0 = p0 | 0;
 nullFunc_vi(932); //@line 33333
}
function b247(p0) {
 p0 = p0 | 0;
 nullFunc_vi(931); //@line 33330
}
function b246(p0) {
 p0 = p0 | 0;
 nullFunc_vi(930); //@line 33327
}
function b245(p0) {
 p0 = p0 | 0;
 nullFunc_vi(929); //@line 33324
}
function b244(p0) {
 p0 = p0 | 0;
 nullFunc_vi(928); //@line 33321
}
function b243(p0) {
 p0 = p0 | 0;
 nullFunc_vi(927); //@line 33318
}
function b242(p0) {
 p0 = p0 | 0;
 nullFunc_vi(926); //@line 33315
}
function b241(p0) {
 p0 = p0 | 0;
 nullFunc_vi(925); //@line 33312
}
function b240(p0) {
 p0 = p0 | 0;
 nullFunc_vi(924); //@line 33309
}
function b239(p0) {
 p0 = p0 | 0;
 nullFunc_vi(923); //@line 33306
}
function b238(p0) {
 p0 = p0 | 0;
 nullFunc_vi(922); //@line 33303
}
function b237(p0) {
 p0 = p0 | 0;
 nullFunc_vi(921); //@line 33300
}
function b236(p0) {
 p0 = p0 | 0;
 nullFunc_vi(920); //@line 33297
}
function b235(p0) {
 p0 = p0 | 0;
 nullFunc_vi(919); //@line 33294
}
function b234(p0) {
 p0 = p0 | 0;
 nullFunc_vi(918); //@line 33291
}
function b233(p0) {
 p0 = p0 | 0;
 nullFunc_vi(917); //@line 33288
}
function b232(p0) {
 p0 = p0 | 0;
 nullFunc_vi(916); //@line 33285
}
function b231(p0) {
 p0 = p0 | 0;
 nullFunc_vi(915); //@line 33282
}
function b230(p0) {
 p0 = p0 | 0;
 nullFunc_vi(914); //@line 33279
}
function b229(p0) {
 p0 = p0 | 0;
 nullFunc_vi(913); //@line 33276
}
function b228(p0) {
 p0 = p0 | 0;
 nullFunc_vi(912); //@line 33273
}
function b227(p0) {
 p0 = p0 | 0;
 nullFunc_vi(911); //@line 33270
}
function b226(p0) {
 p0 = p0 | 0;
 nullFunc_vi(910); //@line 33267
}
function b225(p0) {
 p0 = p0 | 0;
 nullFunc_vi(909); //@line 33264
}
function b224(p0) {
 p0 = p0 | 0;
 nullFunc_vi(908); //@line 33261
}
function b223(p0) {
 p0 = p0 | 0;
 nullFunc_vi(907); //@line 33258
}
function b222(p0) {
 p0 = p0 | 0;
 nullFunc_vi(906); //@line 33255
}
function b221(p0) {
 p0 = p0 | 0;
 nullFunc_vi(905); //@line 33252
}
function b220(p0) {
 p0 = p0 | 0;
 nullFunc_vi(904); //@line 33249
}
function b219(p0) {
 p0 = p0 | 0;
 nullFunc_vi(903); //@line 33246
}
function b218(p0) {
 p0 = p0 | 0;
 nullFunc_vi(902); //@line 33243
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(901); //@line 33240
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(900); //@line 33237
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(899); //@line 33234
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(898); //@line 33231
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(897); //@line 33228
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(896); //@line 33225
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(895); //@line 33222
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(894); //@line 33219
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(893); //@line 33216
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(892); //@line 33213
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(891); //@line 33210
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(890); //@line 33207
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(889); //@line 33204
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(888); //@line 33201
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(887); //@line 33198
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(886); //@line 33195
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(885); //@line 33192
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(884); //@line 33189
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(883); //@line 33186
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(882); //@line 33183
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(881); //@line 33180
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(880); //@line 33177
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(879); //@line 33174
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(878); //@line 33171
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(877); //@line 33168
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(876); //@line 33165
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(875); //@line 33162
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(874); //@line 33159
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(873); //@line 33156
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(872); //@line 33153
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(871); //@line 33150
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(870); //@line 33147
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(869); //@line 33144
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(868); //@line 33141
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(867); //@line 33138
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(866); //@line 33135
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(865); //@line 33132
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(864); //@line 33129
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(863); //@line 33126
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(862); //@line 33123
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(861); //@line 33120
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(860); //@line 33117
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(859); //@line 33114
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(858); //@line 33111
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(857); //@line 33108
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(856); //@line 33105
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(855); //@line 33102
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(854); //@line 33099
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(853); //@line 33096
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(852); //@line 33093
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(851); //@line 33090
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(850); //@line 33087
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(849); //@line 33084
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(848); //@line 33081
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(847); //@line 33078
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(846); //@line 33075
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(845); //@line 33072
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(844); //@line 33069
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(843); //@line 33066
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(842); //@line 33063
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(841); //@line 33060
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(840); //@line 33057
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(839); //@line 33054
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(838); //@line 33051
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(837); //@line 33048
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(836); //@line 33045
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(835); //@line 33042
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(834); //@line 33039
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(833); //@line 33036
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(832); //@line 33033
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(831); //@line 33030
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(830); //@line 33027
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(829); //@line 33024
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(828); //@line 33021
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(827); //@line 33018
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(826); //@line 33015
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(825); //@line 33012
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(824); //@line 33009
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(823); //@line 33006
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(822); //@line 33003
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(821); //@line 33000
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(820); //@line 32997
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(819); //@line 32994
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(818); //@line 32991
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(817); //@line 32988
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(816); //@line 32985
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(815); //@line 32982
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(814); //@line 32979
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(813); //@line 32976
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(812); //@line 32973
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(811); //@line 32970
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(810); //@line 32967
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(809); //@line 32964
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(808); //@line 32961
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(807); //@line 32958
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(806); //@line 32955
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(805); //@line 32952
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(804); //@line 32949
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(803); //@line 32946
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(802); //@line 32943
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(801); //@line 32940
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(800); //@line 32937
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(799); //@line 32934
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(798); //@line 32931
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(797); //@line 32928
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(796); //@line 32925
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(795); //@line 32922
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(794); //@line 32919
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(793); //@line 32916
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(792); //@line 32913
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(791); //@line 32910
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(790); //@line 32907
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(789); //@line 32904
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(788); //@line 32901
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(787); //@line 32898
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(786); //@line 32895
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(785); //@line 32892
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(784); //@line 32889
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaWANTimeHandlerD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN18LoRaMacChannelPlanD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(783); //@line 32886
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(782); //@line 32883
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(781); //@line 32880
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(780); //@line 32877
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(779); //@line 32874
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(778); //@line 32871
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(777); //@line 32868
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(776); //@line 32865
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(775); //@line 32862
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(774); //@line 32859
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(773); //@line 32856
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(772); //@line 32853
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(771); //@line 32850
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(770); //@line 32847
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(769); //@line 32844
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(768); //@line 32841
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(767); //@line 32838
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(766); //@line 32835
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(765); //@line 32832
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(764); //@line 32829
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(763); //@line 32826
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(762); //@line 32823
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(761); //@line 32820
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(760); //@line 32817
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(759); //@line 32814
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(758); //@line 32811
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(757); //@line 32808
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(756); //@line 32805
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(755); //@line 32802
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(754); //@line 32799
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(753); //@line 32796
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(752); //@line 32793
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(751); //@line 32790
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(750); //@line 32787
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(749); //@line 32784
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(748); //@line 32781
}
function b339(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1023); //@line 142
}
function b338(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1022); //@line 139
}
function b337(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1021); //@line 136
}
function b336(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1020); //@line 133
}
function b335(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1019); //@line 130
}
function b334(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1018); //@line 127
}
function b333(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1017); //@line 124
}
function b332(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1016); //@line 121
}
function b331(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1015); //@line 118
}
function b330(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1014); //@line 115
}
function b329(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1013); //@line 112
}
function b328(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1012); //@line 109
}
function b327(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1011); //@line 106
}
function b326(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1010); //@line 103
}
function b325(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1009); //@line 100
}
function _mbedtls_gcm_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_ccm_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbedtls_aes_free__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 11560
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 11877
}
function b324(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1008); //@line 97
}
function b323(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1007); //@line 94
}
function b322(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1006); //@line 91
}
function b321(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1005); //@line 88
}
function b320(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1004); //@line 85
}
function b319(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1003); //@line 82
}
function b318(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1002); //@line 79
}
function b317(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1001); //@line 76
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 32778
}
function b316(p0) {
 p0 = p0 | 0;
 nullFunc_vi(1e3); //@line 73
}
function b315(p0) {
 p0 = p0 | 0;
 nullFunc_vi(999); //@line 70
}
function b314(p0) {
 p0 = p0 | 0;
 nullFunc_vi(998); //@line 67
}
function b313(p0) {
 p0 = p0 | 0;
 nullFunc_vi(997); //@line 64
}
function b312(p0) {
 p0 = p0 | 0;
 nullFunc_vi(996); //@line 61
}
function b311(p0) {
 p0 = p0 | 0;
 nullFunc_vi(995); //@line 58
}
function b310(p0) {
 p0 = p0 | 0;
 nullFunc_vi(994); //@line 55
}
function b309(p0) {
 p0 = p0 | 0;
 nullFunc_vi(993); //@line 52
}
function b308(p0) {
 p0 = p0 | 0;
 nullFunc_vi(992); //@line 49
}
function b307(p0) {
 p0 = p0 | 0;
 nullFunc_vi(991); //@line 46
}
function b306(p0) {
 p0 = p0 | 0;
 nullFunc_vi(990); //@line 43
}
function b305(p0) {
 p0 = p0 | 0;
 nullFunc_vi(989); //@line 40
}
function b304(p0) {
 p0 = p0 | 0;
 nullFunc_vi(988); //@line 37
}
function b303(p0) {
 p0 = p0 | 0;
 nullFunc_vi(987); //@line 34
}
function b302(p0) {
 p0 = p0 | 0;
 nullFunc_vi(986); //@line 31
}
function b301(p0) {
 p0 = p0 | 0;
 nullFunc_vi(985); //@line 28
}
function b300(p0) {
 p0 = p0 | 0;
 nullFunc_vi(984); //@line 25
}
function b299(p0) {
 p0 = p0 | 0;
 nullFunc_vi(983); //@line 22
}
function b298(p0) {
 p0 = p0 | 0;
 nullFunc_vi(982); //@line 19
}
function b297(p0) {
 p0 = p0 | 0;
 nullFunc_vi(981); //@line 16
}
function b296(p0) {
 p0 = p0 | 0;
 nullFunc_vi(980); //@line 13
}
function b295(p0) {
 p0 = p0 | 0;
 nullFunc_vi(979); //@line 10
}
function _initialize__async_cb_426($0) {
 $0 = $0 | 0;
 return;
}
function b294(p0) {
 p0 = p0 | 0;
 nullFunc_vi(978); //@line 7
}
function b293(p0) {
 p0 = p0 | 0;
 nullFunc_vi(977); //@line 4
}
function b292(p0) {
 p0 = p0 | 0;
 nullFunc_vi(976); //@line 1
}
function _us_ticker_set_interrupt($0) {
 $0 = $0 | 0;
 return;
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function _us_ticker_get_info() {
 return 10256; //@line 7316
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _get_us_ticker_data() {
 return 10200; //@line 6468
}
function ___errno_location() {
 return 24272; //@line 11554
}
function __ZSt9terminatev__async_cb_236($0) {
 $0 = $0 | 0;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _pthread_self() {
 return 10548; //@line 11607
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _us_ticker_read() {
 return 0; //@line 7107
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function _us_ticker_disable_interrupt() {
 return;
}
function _us_ticker_clear_interrupt() {
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b61() {
 nullFunc_v(15); //@line 32775
}
function b60() {
 nullFunc_v(14); //@line 32772
}
function b59() {
 nullFunc_v(13); //@line 32769
}
function b58() {
 nullFunc_v(12); //@line 32766
}
function b57() {
 nullFunc_v(11); //@line 32763
}
function b56() {
 nullFunc_v(10); //@line 32760
}
function _us_ticker_fire_interrupt() {
 return;
}
function b55() {
 nullFunc_v(9); //@line 32757
}
function b54() {
 nullFunc_v(0); //@line 32751
}
function _us_ticker_init() {
 return;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1,_ccm_ctx_alloc,_gcm_ctx_alloc,_aes_ctx_alloc,_us_ticker_read,_us_ticker_get_info,b2,b3];
var FUNCTION_TABLE_ii = [b5,__ZN16SX1276_LoRaRadio6randomEv,__ZN16SX1276_LoRaRadio10get_statusEv,__ZN16LoRaWANInterface7connectEv,__ZN16LoRaWANInterface10disconnectEv,__ZN16LoRaWANInterface22add_link_check_requestEv,__ZN16LoRaWANInterface24enable_adaptive_datarateEv,__ZN16LoRaWANInterface25disable_adaptive_datarateEv,__ZN16LoRaWANInterface19remove_channel_planEv,__ZN16LoRaWANInterface14cancel_sendingEv,___stdio_close,__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE,b6,b7,b8,b9];
var FUNCTION_TABLE_iii = [b11,__ZN16SX1276_LoRaRadio18check_rf_frequencyEj,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE,__ZN16LoRaWANInterface7connectERK15lorawan_connect,__ZN16LoRaWANInterface12set_datarateEh,__ZN16LoRaWANInterface25set_confirmed_msg_retriesEh,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan,__ZN16LoRaWANInterface16get_channel_planER16lora_channelplan,__ZN16LoRaWANInterface14remove_channelEh,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t,__ZN16LoRaWANInterface16set_device_classE14device_class_t,__ZN16LoRaWANInterface15get_tx_metadataER19lorawan_tx_metadata,__ZN16LoRaWANInterface15get_rx_metadataER19lorawan_rx_metadata,__ZN16LoRaWANInterface20get_backoff_metadataERi,__ZN7LoRaPHY9rx_configEP18rx_config_params_t,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s,__ZN7LoRaPHY16get_alternate_DREh,__ZN7LoRaPHY14remove_channelEh,b12,b13,b14,b15,b16,b17,b18,b19,b20,b21,b22
,b23,b24,b25];
var FUNCTION_TABLE_iiii = [b27,__ZN16SX1276_LoRaRadio11time_on_airE10modem_typeh,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t,__ZN7LoRaPHY25accept_tx_param_setup_reqEhh,__ZN7LoRaPHY18dl_channel_requestEhj,__ZN7LoRaPHY11add_channelEPK16channel_params_th,__ZN7LoRaPHY15apply_DR_offsetEaa,__ZNK7LoRaPHY25verify_frequency_for_bandEjh,_ccm_aes_setkey_wrap,_gcm_aes_setkey_wrap,_aes_setkey_enc_wrap,_aes_setkey_dec_wrap,_memset__wrapper,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_get_pkcs_padding,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37
,b38,b39,b40];
var FUNCTION_TABLE_iiiii = [b42,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj,_aes_crypt_ecb_wrap,b43];
var FUNCTION_TABLE_iiiiii = [b45,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj,__ZN16LoRaWANInterface4sendEhPKhti,__ZN16LoRaWANInterface7receiveEhPhti,__ZN16LoRaWANInterface7receiveEPhtRhRi,__ZN7LoRaPHY16set_next_channelEP26channel_selection_params_sPhPjS3_,b46,b47];
var FUNCTION_TABLE_iiiiiii = [b49,__ZN7LoRaPHY16link_ADR_requestEP16adr_req_params_tPaS2_PhS3_,_aes_crypt_cbc_wrap,b50];
var FUNCTION_TABLE_iiiiiiii = [b52,_aes_crypt_ctr_wrap];
var FUNCTION_TABLE_v = [b54,___cxa_pure_virtual__wrapper,_us_ticker_init,_us_ticker_disable_interrupt,_us_ticker_clear_interrupt,_us_ticker_fire_interrupt,__ZL25default_terminate_handlerv,__ZL12send_messagev,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b55,b56,b57,b58,b59,b60,b61];
var FUNCTION_TABLE_vi = [b63,__ZN16SX1276_LoRaRadio11radio_resetEv,__ZN16SX1276_LoRaRadio5sleepEv,__ZN16SX1276_LoRaRadio7standbyEv,__ZN16SX1276_LoRaRadio9start_cadEv,__ZN16SX1276_LoRaRadio4lockEv,__ZN16SX1276_LoRaRadio6unlockEv,__ZN16SX1276_LoRaRadioD2Ev,__ZN16SX1276_LoRaRadioD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPv,__ZN4mbed11InterruptInD2Ev,__ZN4mbed11InterruptInD0Ev,__ZN4mbed7TimeoutD2Ev,__ZN4mbed7TimeoutD0Ev,__ZN4mbed7Timeout7handlerEv,__ZN4mbed10TimerEventD2Ev,__ZN4mbed10TimerEventD0Ev,_mbed_trace_default_print,__ZN16LoRaWANInterface25remove_link_check_requestEv,__ZN16LoRaWANInterfaceD2Ev,__ZN16LoRaWANInterfaceD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPv,__ZN4mbed8CallbackIFvPKhtsaEE13function_dtorINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPv,__ZN4mbed8CallbackIFvbEE13function_dtorINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPv,__ZN7LoRaPHYD2Ev
,__ZN7LoRaPHYD0Ev,__ZN7LoRaPHY24restore_default_channelsEv,__ZN12LoRaPHYEU868D2Ev,__ZN12LoRaPHYEU868D0Ev,_ccm_ctx_free,_gcm_ctx_free,_aes_ctx_free,_us_ticker_set_interrupt,__ZN4mbed6TickerD2Ev,__ZN4mbed6TickerD0Ev,__ZN4mbed6Ticker7handlerEv,__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_dtorIPS2_EEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events__async_cb,__ZN16SX1276_LoRaRadio4sendEPhh__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_54,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_55,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_56,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_57,__ZN16SX1276_LoRaRadio7receiveEj__async_cb_58
,__ZN16SX1276_LoRaRadio6randomEv__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_186,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_182,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_183,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_185,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_184,__ZN16SX1276_LoRaRadio21perform_carrier_senseE10modem_typejsj__async_cb_181,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat__async_cb_237,__ZN16SX1276_LoRaRadioD2Ev__async_cb,__ZN16SX1276_LoRaRadioD2Ev__async_cb_297,__ZN16SX1276_LoRaRadioD2Ev__async_cb_291,__ZN16SX1276_LoRaRadioD2Ev__async_cb_296,__ZN16SX1276_LoRaRadioD2Ev__async_cb_292,__ZN16SX1276_LoRaRadioD2Ev__async_cb_295,__ZN16SX1276_LoRaRadioD2Ev__async_cb_293,__ZN16SX1276_LoRaRadioD2Ev__async_cb_294,__ZN16SX1276_LoRaRadioD2Ev__async_cb_303,__ZN16SX1276_LoRaRadioD2Ev__async_cb_302,__ZN16SX1276_LoRaRadioD2Ev__async_cb_301,__ZN16SX1276_LoRaRadioD2Ev__async_cb_300,__ZN16SX1276_LoRaRadioD2Ev__async_cb_299,__ZN16SX1276_LoRaRadioD2Ev__async_cb_298,__ZN16SX1276_LoRaRadioD0Ev__async_cb,__ZN16SX1276_LoRaRadio11rx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadio15timeout_irq_isrEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_387,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_388
,__ZN16SX1276_LoRaRadio18handle_timeout_irqEv__async_cb_389,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPKv__async_cb,__ZN16SX1276_LoRaRadio11tx_done_irqEv,__ZN16SX1276_LoRaRadio8transmitEj__async_cb,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_136,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_137,__ZN16SX1276_LoRaRadio8transmitEj__async_cb_138,__ZN16SX1276_LoRaRadio11tx_done_irqEv__async_cb,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_66,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_65,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb_64,__ZN16SX1276_LoRaRadioC2E7PinNameS0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0_S0___async_cb,__ZN4mbed11InterruptInD2Ev__async_cb,__ZN4mbed11InterruptInD2Ev__async_cb_40,__ZN4mbed11InterruptInD0Ev__async_cb,__ZN4mbed11InterruptInD0Ev__async_cb_1,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event__async_cb_233,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_227,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_228,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_229,__ZN4mbed11InterruptIn4fallENS_8CallbackIFvvEEE__async_cb_230,__ZN4mbed7TimeoutD2Ev__async_cb,__ZN4mbed7TimeoutD2Ev__async_cb_364,__ZN4mbed7TimeoutD0Ev__async_cb,__ZN4mbed7TimeoutD0Ev__async_cb_371,__ZN4mbed7Timeout7handlerEv__async_cb,__ZN4mbed7Timeout7handlerEv__async_cb_383,__ZN4mbed7Timeout7handlerEv__async_cb_381
,__ZN4mbed7Timeout7handlerEv__async_cb_382,__ZN4mbed5TimerC2Ev__async_cb,__ZN4mbed5Timer5startEv__async_cb,__ZN4mbed5Timer7read_msEv__async_cb,__ZN4mbed10TimerEventD2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj,__ZN4mbed10TimerEventC2Ev__async_cb,__ZN4mbed10TimerEvent3irqEj__async_cb,__ZN6events10EventQueue8dispatchEi__async_cb,__ZN6events10EventQueue6cancelEi__async_cb,_equeue_alloc__async_cb,_equeue_dealloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_equeue_cancel__async_cb,_equeue_dispatch__async_cb,_equeue_dispatch__async_cb_74,_equeue_dispatch__async_cb_72,_equeue_dispatch__async_cb_73,_equeue_dispatch__async_cb_75,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_205,_mbed_vtracef__async_cb_195,_mbed_vtracef__async_cb_196,_mbed_vtracef__async_cb_197,_mbed_vtracef__async_cb_204,_mbed_vtracef__async_cb_198,_mbed_vtracef__async_cb_203
,_mbed_vtracef__async_cb_199,_mbed_vtracef__async_cb_200,_mbed_vtracef__async_cb_201,_mbed_vtracef__async_cb_202,__ZN16LoRaWANInterface10initializeEPN6events10EventQueueE__async_cb,__ZN16LoRaWANInterface7connectEv__async_cb,__ZN16LoRaWANInterface7connectERK15lorawan_connect__async_cb,__ZN16LoRaWANInterface10disconnectEv__async_cb,__ZN16LoRaWANInterface16set_channel_planERK16lora_channelplan__async_cb,__ZN16LoRaWANInterface19remove_channel_planEv__async_cb,__ZN16LoRaWANInterface14remove_channelEh__async_cb,__ZN16LoRaWANInterface4sendEhPKhti__async_cb,__ZN16LoRaWANInterface7receiveEhPhti__async_cb,__ZN16LoRaWANInterface7receiveEPhtRhRi__async_cb,__ZN16LoRaWANInterface17add_app_callbacksEP23lorawan_app_callbacks_t__async_cb,__ZN16LoRaWANInterface16set_device_classE14device_class_t__async_cb,__ZN16LoRaWANInterface14cancel_sendingEv__async_cb,__ZN16LoRaWANInterfaceD2Ev__async_cb,__ZN16LoRaWANInterfaceD0Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb,__ZN12LoRaWANStackD2Ev__async_cb_261,__ZN12LoRaWANStackD2Ev__async_cb_262,__ZN12LoRaWANStackD2Ev__async_cb_264,__ZN12LoRaWANStackD2Ev__async_cb_263,__ZN12radio_eventsD2Ev__async_cb,__ZN12radio_eventsD2Ev__async_cb_274,__ZN12radio_eventsD2Ev__async_cb_275,__ZN12radio_eventsD2Ev__async_cb_276,__ZN12radio_eventsD2Ev__async_cb_277,__ZN12radio_eventsD2Ev__async_cb_278
,__ZN12radio_eventsD2Ev__async_cb_279,__ZN16LoRaWANInterfaceC2ER9LoRaRadio__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_243,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_244,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_245,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_246,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_247,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_248,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_249,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_250,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_251,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_252,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_253,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_254,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_255,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_256,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_257,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_258,__ZN12LoRaWANStack17bind_radio_driverER9LoRaRadio__async_cb_259,__ZN12LoRaWANStack20process_transmissionEv,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack20tx_interrupt_handlerEv__async_cb_352,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_357,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa__async_cb_358
,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_316,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack26rx_error_interrupt_handlerEv__async_cb_317,__ZN12LoRaWANStack28process_transmission_timeoutEv,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28tx_timeout_interrupt_handlerEv__async_cb_335,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_215,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb,__ZN12LoRaWANStack28rx_timeout_interrupt_handlerEv__async_cb_216,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_223,__ZN12LoRaWANStack25process_reception_timeoutEb__async_cb_222,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_173,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_178,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_174,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_177,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_175,__ZN6events10EventQueue4callIN4mbed8CallbackIFvbEEEbEEiT_T0___async_cb_176,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb_235,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFvbEEEbEEEEvPv__async_cb,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_98,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_97,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_99,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_96
,__ZN12LoRaWANStack21process_joining_stateER14lorawan_status__async_cb_100,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_11,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb_10,__ZN12LoRaWANStack26process_status_check_stateEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_50,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_43,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_53,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_44,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_49,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_45,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_52,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_46,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_48,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_47,__ZN12LoRaWANStack20mcps_confirm_handlerEv__async_cb_51,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_146,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_139,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_149,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_140,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_145,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_141,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_148,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_142,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_144,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_143,__ZN12LoRaWANStack23mcps_indication_handlerEv__async_cb_147,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_161
,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_166,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_162,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_165,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_163,__ZN6events10EventQueue4callIN4mbed8CallbackIFv11lora_eventsEEES4_EEiT_T0___async_cb_164,__ZN6events10EventQueue13function_dtorINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb_129,__ZN6events10EventQueue13function_callINS0_9context10IN4mbed8CallbackIFv11lora_eventsEEES5_EEEEvPv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb,__ZN12LoRaWANStack28process_transmission_timeoutEv__async_cb_392,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_386,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_385,__ZN6events10EventQueue4callI12LoRaWANStackvEEiPT_MS3_FT0_vE__async_cb_384,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_365,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_286,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_290,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_289,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_288,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_287,__ZN12LoRaWANStack17process_receptionEPKhtsa__async_cb_285,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb
,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_267,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_272,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_268,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_271,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_269,__ZN6events10EventQueue4callIN4mbed8CallbackIFvPKhtsaEEES5_tsaEEiT_T0_T1_T2_T3___async_cb_270,__ZN6events10EventQueue13function_dtorINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb_354,__ZN6events10EventQueue13function_callINS0_9context40IN4mbed8CallbackIFvPKhtsaEEES6_tsaEEEEvPv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_341,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_337,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_345,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_340,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_338,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_342,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_339,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_344,__ZN12LoRaWANStack20mlme_confirm_handlerEv__async_cb_343,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_322,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_321,__ZN12LoRaWANStack23mlme_indication_handlerEv__async_cb_323,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_310,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_315,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_311,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv
,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_314,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_312,__ZN6events10EventQueue4callIN4mbed8CallbackIFvhhEEEhhEEiT_T0_T1___async_cb_313,__ZN12LoRaWANStack23process_connected_stateEv__async_cb,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_225,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_224,__ZN12LoRaWANStack23process_connected_stateEv__async_cb_226,__ZN6events10EventQueue13function_dtorINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb_214,__ZN6events10EventQueue13function_callINS0_9context20IN4mbed8CallbackIFvhhEEEhhEEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPKv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb,__ZN12LoRaWANStack20process_transmissionEv__async_cb_234,__ZN12LoRaWANStack20initialize_mac_layerEPN6events10EventQueueE__async_cb,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_78,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack24process_connecting_stateER14lorawan_status__async_cb_77,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_61,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_60,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_62,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_59,__ZN12LoRaWANStack22process_shutdown_stateER14lorawan_status__async_cb_63,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_17,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_18,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_19,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_20,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_21
,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_22,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_24,__ZN12LoRaWANStack18set_lora_callbacksEPK23lorawan_app_callbacks_t__async_cb_23,__ZN12LoRaWANStack7connectEv__async_cb,__ZN12LoRaWANStack7connectERK15lorawan_connect__async_cb,__ZN12LoRaWANStack12add_channelsERK16lora_channelplan__async_cb,__ZN12LoRaWANStack16remove_a_channelEh__async_cb,__ZN12LoRaWANStack17drop_channel_listEv__async_cb,__ZN12LoRaWANStack12stop_sendingEv__async_cb,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb_372,__ZN12LoRaWANStack9handle_txEhPKhthbb__async_cb,__ZN12LoRaWANStack9handle_rxEPhtRhRib__async_cb,__ZN12LoRaWANStack8shutdownEv__async_cb,__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv,__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb_334,__ZN12LoRaWANStack16set_device_classERK14device_class_t__async_cb,__ZN12LoRaWANStack29handle_ack_expiry_for_class_cEv__async_cb,__ZN7LoRaMacD2Ev__async_cb,__ZN7LoRaMacD2Ev__async_cb_305,__ZN7LoRaMacD2Ev__async_cb_306,__ZN7LoRaMacD2Ev__async_cb_307,__ZN7LoRaMacD2Ev__async_cb_308,__ZN7LoRaMacD2Ev__async_cb_309,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_126,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_128,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_125,__ZN7LoRaMac24handle_join_accept_frameEPKht__async_cb_127,__ZN7LoRaMac23message_integrity_checkEPKhtPhjPjS1___async_cb,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_151
,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_153,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb_152,__ZN7LoRaMac29extract_data_and_mac_commandsEPKhthPhS2_jjsa__async_cb,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_2,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_5,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_3,__ZN7LoRaMac17handle_data_frameEPKhthhsa__async_cb_4,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_42,__ZN7LoRaMac25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_41,__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_94,__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_95,__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_93,__ZN7LoRaMac16on_radio_tx_doneEj__async_cb_92,__ZN7LoRaMac16on_radio_tx_doneEj__async_cb,__ZN7LoRaMac15open_rx2_windowEv__async_cb_106,__ZN7LoRaMac15open_rx2_windowEv__async_cb_105,__ZN7LoRaMac15open_rx2_windowEv__async_cb,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_404,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_406,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_405,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb_403,__ZN7LoRaMac16on_radio_rx_doneEPKhtsa__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_416,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_415,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_414,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb,__ZN7LoRaMac19on_radio_tx_timeoutEv__async_cb_413,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb
,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_407,__ZN7LoRaMac19on_radio_rx_timeoutEb__async_cb_408,__ZN7LoRaMac24continue_joining_processEv__async_cb,__ZN7LoRaMac21handle_retransmissionEv__async_cb,__ZN7LoRaMac21handle_retransmissionEv__async_cb_374,__ZN7LoRaMac21handle_retransmissionEv__async_cb_373,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_369,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_367,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_368,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb,__ZN7LoRaMac13prepare_frameEP14loramac_mhdr_tP20loramac_frame_ctrl_thPKvt__async_cb_366,__ZN7LoRaMac11schedule_txEv__async_cb,__ZN7LoRaMac11schedule_txEv__async_cb_402,__ZN7LoRaMac11schedule_txEv__async_cb_401,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb,__ZN7LoRaMac23on_backoff_timer_expiryEv__async_cb_336,__ZN7LoRaMac15open_rx1_windowEv__async_cb_320,__ZN7LoRaMac15open_rx1_windowEv__async_cb_318,__ZN7LoRaMac15open_rx1_windowEv__async_cb_319,__ZN7LoRaMac15open_rx1_windowEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_350,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_348,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_347,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_346,__ZN7LoRaMac26on_ack_timeout_timer_eventEv__async_cb_349,__ZN7LoRaMac13clear_tx_pipeEv__async_cb_241,__ZN7LoRaMac13clear_tx_pipeEv__async_cb,__ZN7LoRaMac18prepare_ongoing_txEhPKhthh__async_cb,__ZN7LoRaMac24get_max_possible_tx_sizeEh__async_cb
,__ZN7LoRaMac15send_ongoing_txEv__async_cb,__ZN7LoRaMac15send_ongoing_txEv__async_cb_206,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_187,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_190,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_189,__ZN7LoRaMac16set_device_classERK14device_class_tN4mbed8CallbackIFvvEEE__async_cb_188,__ZN7LoRaMac4joinEb__async_cb,__ZN7LoRaMac4joinEb__async_cb_130,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_115,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_117,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_118,__ZN7LoRaMac23on_backoff_timer_expiryEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_114,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb,__ZN7LoRaMac15open_rx1_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_113,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_108,__ZN7LoRaMac15open_rx2_windowEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_112,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_109,__ZN7LoRaMac26on_ack_timeout_timer_eventEv,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_111,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_110,__ZN7LoRaMac10initializeEPN6events10EventQueueE__async_cb_116,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPKv__async_cb,__ZN7LoRaMac10disconnectEv__async_cb_9,__ZN7LoRaMac10disconnectEv__async_cb_8,__ZN7LoRaMac10disconnectEv__async_cb_7,__ZN7LoRaMac10disconnectEv__async_cb_6
,__ZN7LoRaMac10disconnectEv__async_cb,__ZN7LoRaMac16add_channel_planERK16lora_channelplan__async_cb,__ZN7LoRaMac19remove_channel_planEv__async_cb,__ZN7LoRaMac21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan8set_planERK16lora_channelplan__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb,__ZN18LoRaMacChannelPlan11remove_planEv__async_cb_351,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb,__ZN18LoRaMacChannelPlan21remove_single_channelEh__async_cb_355,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_217,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_218,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_219,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_220,__ZN14LoRaMacCommand20process_mac_commandsEPKhhhhR22loramac_mlme_confirm_tR24lora_mac_system_params_tR7LoRaPHY__async_cb_221,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb,__ZN14LoRaMacCommand25set_batterylevel_callbackEN4mbed8CallbackIFhvEEE__async_cb_180,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_159,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_158,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_157,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_156,__ZN13LoRaMacCrypto11compute_micEPKhtS1_jjhjPj__async_cb_160,__ZN13LoRaMacCrypto15encrypt_payloadEPKhtS1_jjhjPh__async_cb,__ZN13LoRaMacCrypto15decrypt_payloadEPKhtS1_jjhjPh__async_cb,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_70,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_69,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_68,__ZN13LoRaMacCrypto22compute_join_frame_micEPKhtS1_jPj__async_cb_71
,__ZN13LoRaMacCrypto18decrypt_join_frameEPKhtS1_jPh__async_cb,__ZN13LoRaMacCrypto28compute_skeys_for_join_frameEPKhjS1_tPhS2___async_cb,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_409,__ZN7LoRaPHY19request_new_channelEaP16channel_params_t__async_cb_410,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_390,__ZN7LoRaPHY13apply_cf_listEPKhh__async_cb_391,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_393,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_394,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_395,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_396,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_397,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_398,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_399,__ZN7LoRaPHY9rx_configEP18rx_config_params_t__async_cb_400,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_375,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_376,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_377,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_378,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_379,__ZN7LoRaPHY9tx_configEP18tx_config_params_tPaPj__async_cb_380,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb,__ZN7LoRaPHY25accept_rx_param_setup_reqEP20rx_param_setup_req_s__async_cb_359,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb,__ZN7LoRaPHY18dl_channel_requestEhj__async_cb_333,__ZN7LoRaPHY11add_channelEPK16channel_params_th__async_cb,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb
,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_239,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj__async_cb_240,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_171,__ZN7LoRaPHY18put_radio_to_sleepEv__async_cb_172,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_154,__ZN7LoRaPHY20put_radio_to_standbyEv__async_cb_155,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_131,__ZN7LoRaPHY25setup_public_network_modeEb__async_cb_132,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_122,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_123,__ZN7LoRaPHY15setup_rx_windowEbj__async_cb_124,__ZN7LoRaPHY13get_radio_rngEv__async_cb,__ZN7LoRaPHY13get_radio_rngEv__async_cb_119,__ZN7LoRaPHY13get_radio_rngEv__async_cb_120,__ZN7LoRaPHY11handle_sendEPhh__async_cb,__ZN7LoRaPHY11handle_sendEPhh__async_cb_101,__ZN7LoRaPHY11handle_sendEPhh__async_cb_102,__ZN7LoRaPHY12get_next_ADREbRaS0_Rj__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb,__ZN18LoRaWANTimeHandler4initER13timer_event_tN4mbed8CallbackIFvvEEE__async_cb_273,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_283,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_280,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_282,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_281,__ZN18LoRaWANTimeHandler5startER13timer_event_tj__async_cb_284
,__ZN18LoRaWANTimeHandler4stopER13timer_event_t__async_cb,_mbedtls_aes_free__async_cb,_mbedtls_aes_setkey_dec__async_cb,_mbedtls_ccm_setkey__async_cb_412,_mbedtls_ccm_setkey__async_cb_411,_mbedtls_ccm_setkey__async_cb,_mbedtls_ccm_free__async_cb_429,_mbedtls_ccm_free__async_cb,_mbedtls_cipher_free__async_cb_104,_mbedtls_cipher_free__async_cb,_mbedtls_cipher_free__async_cb_103,_mbedtls_cipher_setup__async_cb,_mbedtls_cipher_setkey__async_cb,_mbedtls_cipher_setkey__async_cb_150,_mbedtls_cipher_update__async_cb,_mbedtls_cipher_update__async_cb_170,_mbedtls_cipher_update__async_cb_167,_mbedtls_cipher_update__async_cb_168,_mbedtls_cipher_update__async_cb_169,_ccm_aes_setkey_wrap__async_cb,_ccm_ctx_free__async_cb,_gcm_aes_setkey_wrap__async_cb,_gcm_ctx_free__async_cb,_aes_setkey_dec_wrap__async_cb,_aes_ctx_free__async_cb,_mbedtls_cipher_cmac_starts__async_cb_304,_mbedtls_cipher_cmac_starts__async_cb,_mbedtls_cipher_cmac_update__async_cb_266,_mbedtls_cipher_cmac_update__async_cb_265,_mbedtls_cipher_cmac_update__async_cb
,_mbedtls_cipher_cmac_finish__async_cb_330,_mbedtls_cipher_cmac_finish__async_cb_329,_mbedtls_cipher_cmac_finish__async_cb_328,_mbedtls_cipher_cmac_finish__async_cb_332,_mbedtls_cipher_cmac_finish__async_cb_327,_mbedtls_cipher_cmac_finish__async_cb_331,_mbedtls_cipher_cmac_finish__async_cb_326,_mbedtls_cipher_cmac_finish__async_cb_325,_mbedtls_cipher_cmac_finish__async_cb_324,_mbedtls_cipher_cmac_finish__async_cb,_mbedtls_gcm_setkey__async_cb_362,_mbedtls_gcm_setkey__async_cb_361,_mbedtls_gcm_setkey__async_cb_360,_mbedtls_gcm_setkey__async_cb,_mbedtls_gcm_update__async_cb,_mbedtls_gcm_free__async_cb_370,_mbedtls_gcm_free__async_cb,_mbedtls_platform_zeroize__async_cb,_ticker_set_handler__async_cb,_initialize__async_cb,_initialize__async_cb_423,_initialize__async_cb_428,_initialize__async_cb_427,_initialize__async_cb_424,_initialize__async_cb_425,_initialize__async_cb_426,_schedule_interrupt__async_cb,_schedule_interrupt__async_cb_417,_schedule_interrupt__async_cb_418,_schedule_interrupt__async_cb_419
,_schedule_interrupt__async_cb_420,_schedule_interrupt__async_cb_421,_schedule_interrupt__async_cb_422,_ticker_remove_event__async_cb,_ticker_read_us__async_cb_67,_ticker_read_us__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_39,_mbed_die__async_cb_38,_mbed_die__async_cb_37,_mbed_die__async_cb_36,_mbed_die__async_cb_35,_mbed_die__async_cb_34,_mbed_die__async_cb_33,_mbed_die__async_cb_32,_mbed_die__async_cb_31,_mbed_die__async_cb_30,_mbed_die__async_cb_29,_mbed_die__async_cb_28,_mbed_die__async_cb_27,_mbed_die__async_cb_26,_mbed_die__async_cb_25,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_135,_mbed_error_vfprintf__async_cb_134,_handle_interrupt_in__async_cb,_serial_putc__async_cb_238,_serial_putc__async_cb
,__ZN4mbed6TickerD2Ev__async_cb,__ZN4mbed6TickerD2Ev__async_cb_260,__ZN4mbed6TickerD0Ev__async_cb,__ZN4mbed6TickerD0Ev__async_cb_353,__ZN4mbed6Ticker7handlerEv__async_cb,_invoke_ticker__async_cb_356,_invoke_ticker__async_cb,_wait_ms__async_cb,__GLOBAL__sub_I_main_cpp__async_cb,_main__async_cb_87,_main__async_cb_86,_main__async_cb_85,_main__async_cb_91,__ZN6events5EventIFvvEE10event_dtorIPS1_EEvPNS2_5eventE,_main__async_cb_90,_main__async_cb,_main__async_cb_79,_main__async_cb_89,__ZL18lora_event_handler11lora_events,_main__async_cb_80,_main__async_cb_81,_main__async_cb_82,_main__async_cb_84,_main__async_cb_83,_main__async_cb_88,__ZL12send_messagev__async_cb,__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb_76,__ZN6events10EventQueue13function_dtorINS0_9context00IPFvvEEEEEvPv,__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv,__ZN6events5EventIFvvEE10event_postIPS1_EEiPNS2_5eventE__async_cb
,__ZL18lora_event_handler11lora_events__async_cb_16,__ZL18lora_event_handler11lora_events__async_cb_15,__ZL18lora_event_handler11lora_events__async_cb_14,__ZL18lora_event_handler11lora_events__async_cb_13,__ZL18lora_event_handler11lora_events__async_cb,__ZL18lora_event_handler11lora_events__async_cb_12,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1___async_cb,__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callIN6events5EventIS1_EEEEvPKv__async_cb_121,__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_dtorIN6events5EventIS1_EEEEvPv__async_cb_207,__ZN6events10EventQueue13function_callINS0_9context00IPFvvEEEEEvPv__async_cb,_putc__async_cb_107,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_210,_fflush__async_cb_209,_fflush__async_cb_211,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_212,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_putchar__async_cb,_fputc__async_cb_208,_fputc__async_cb
,_puts__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_231,_abort_message__async_cb,_abort_message__async_cb_179,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_242,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_363,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_133,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_232,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_194,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_193,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_192,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_191,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_213,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b64
,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94
,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124
,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154
,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184
,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214
,b215,b216,b217,b218,b219,b220,b221,b222,b223,b224,b225,b226,b227,b228,b229,b230,b231,b232,b233,b234,b235,b236,b237,b238,b239,b240,b241,b242,b243,b244
,b245,b246,b247,b248,b249,b250,b251,b252,b253,b254,b255,b256,b257,b258,b259,b260,b261,b262,b263,b264,b265,b266,b267,b268,b269,b270,b271,b272,b273,b274
,b275,b276,b277,b278,b279,b280,b281,b282,b283,b284,b285,b286,b287,b288,b289,b290,b291,b292,b293,b294,b295,b296,b297,b298,b299,b300,b301,b302,b303,b304
,b305,b306,b307,b308,b309,b310,b311,b312,b313,b314,b315,b316,b317,b318,b319,b320,b321,b322,b323,b324,b325,b326,b327,b328,b329,b330,b331,b332,b333,b334
,b335,b336,b337,b338,b339];
var FUNCTION_TABLE_vii = [b341,__ZN16SX1276_LoRaRadio10init_radioEP12radio_events,__ZN16SX1276_LoRaRadio7receiveEj,__ZN16SX1276_LoRaRadio11set_channelEj,__ZN16SX1276_LoRaRadio18set_public_networkEb,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI16SX1276_LoRaRadioMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvPKhtsaEE13function_moveINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPvPKv,__ZN4mbed8CallbackIFvbEE13function_callINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPKvb,__ZN4mbed8CallbackIFvbEE13function_moveINS2_14method_contextI12LoRaWANStackMS5_FvbEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI7LoRaMacMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveIN6events5EventIS1_EEEEvPvPKv,__ZN4mbed8CallbackIFv11lora_eventsEE13function_callIPS2_EEvPKvS1_,__ZN4mbed8CallbackIFv11lora_eventsEE13function_moveIPS2_EEvPvPKv,__ZN4mbed11InterruptIn12_irq_handlerEj14gpio_irq_event,__ZN12LoRaWANStack25process_reception_timeoutEb];
var FUNCTION_TABLE_viii = [b343,__ZN16SX1276_LoRaRadio4sendEPhh,__ZN16SX1276_LoRaRadio22set_max_payload_lengthE10modem_typeh,__ZN7LoRaPHY13apply_cf_listEPKhh,__ZN7LoRaPHY16set_tx_cont_modeEP29continuous_wave_mode_params_sj,_add_pkcs_padding,b344,b345];
var FUNCTION_TABLE_viiii = [b347,__ZN16SX1276_LoRaRadio22set_tx_continuous_waveEjat,__ZN7LoRaPHY16set_last_tx_doneEhbj,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b348,b349];
var FUNCTION_TABLE_viiiii = [b351,__ZN4mbed8CallbackIFvPKhtsaEE13function_callINS4_14method_contextI12LoRaWANStackMS7_FvS2_tsaEEEEEvPKvS2_tsa,__ZN7LoRaPHY21compute_rx_win_paramsEahjP18rx_config_params_t,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZN12LoRaWANStack20rx_interrupt_handlerEPKhtsa,__ZN12LoRaWANStack17process_receptionEPKhtsa];
var FUNCTION_TABLE_viiiiii = [b353,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_viiiiiiiiiiiiii = [b355,__ZN16SX1276_LoRaRadio13set_tx_configE10modem_typeajjjhtbbbhbj];
var FUNCTION_TABLE_viiiiiiiiiiiiiii = [b357,__ZN16SX1276_LoRaRadio13set_rx_configE10modem_typejjhjttbhbbhbb];

  return { __GLOBAL__sub_I_main_cpp: __GLOBAL__sub_I_main_cpp, ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_iiiiiiii: dynCall_iiiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_viiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiii, dynCall_viiiiiiiiiiiiiii: dynCall_viiiiiiiiiiiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real___GLOBAL__sub_I_main_cpp = asm["__GLOBAL__sub_I_main_cpp"]; asm["__GLOBAL__sub_I_main_cpp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real___GLOBAL__sub_I_main_cpp.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var __GLOBAL__sub_I_main_cpp = Module["__GLOBAL__sub_I_main_cpp"] = asm["__GLOBAL__sub_I_main_cpp"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_iiiiiiii = Module["dynCall_iiiiiiii"] = asm["dynCall_iiiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_viiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiii"];
var dynCall_viiiiiiiiiiiiiii = Module["dynCall_viiiiiiiiiiiiiii"] = asm["dynCall_viiiiiiiiiiiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=lorawan.js.map