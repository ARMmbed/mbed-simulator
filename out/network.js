// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0) { return window.MbedJSHal.network.get_mac_address(); },
 function($0) { return window.MbedJSHal.network.get_ip_address(); },
 function($0) { return window.MbedJSHal.network.get_netmask(); },
 function($0) { return window.MbedJSHal.network.socket_open($0); },
 function($0) { return window.MbedJSHal.network.socket_close($0); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_connect($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_send($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_recv($0, $1, $2); },
 function() { console.log('rx_frame', Date.now()); },
 function() { return Date.now(); },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 9776;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "network.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0"];
var debug_table_ii = ["0", "__ZN17EthernetInterface15get_mac_addressEv", "__ZN17EthernetInterface14get_ip_addressEv", "__ZN17EthernetInterface11get_netmaskEv", "__ZN17EthernetInterface11get_gatewayEv", "__ZN17EthernetInterface7connectEv", "__ZN17EthernetInterface10disconnectEv", "__ZNK16NetworkInterface21get_connection_statusEv", "__ZN16NetworkInterface12ethInterfaceEv", "__ZN16NetworkInterface13wifiInterfaceEv", "__ZN16NetworkInterface13meshInterfaceEv", "__ZN16NetworkInterface12cellularBaseEv", "__ZN16NetworkInterface13emacInterfaceEv", "__ZN17EthernetInterface9get_stackEv", "__ZThn4_N17EthernetInterface14get_ip_addressEv", "__ZN12NetworkStack19onboardNetworkStackEv", "__ZN9TCPSocket9get_protoEv", "__ZN9UDPSocket9get_protoEv", "___stdio_close", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16NetworkInterface26gethostbyname_async_cancelEi", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress", "__ZN17EthernetInterface8set_dhcpEb", "__ZN16NetworkInterface12set_blockingEb", "__ZN17EthernetInterface12socket_closeEPv", "__ZN12NetworkStack26gethostbyname_async_cancelEi", "__ZN12NetworkStack14add_dns_serverERK13SocketAddress", "__ZThn4_N17EthernetInterface12socket_closeEPv", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZN17EthernetInterface13socket_listenEPvi", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack14get_dns_serverEiP13SocketAddress", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface13socket_listenEPvi", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_do_read", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZN17EthernetInterface11set_networkEPKcS1_S1_", "__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZN17EthernetInterface11socket_sendEPvPKvj", "__ZN17EthernetInterface11socket_recvEPvS0_j", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j", "0", "0", "0", "0"];
var debug_table_iiiiii = ["0", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "__ZN12NetworkStack11setstackoptEiiPKvj", "__ZN12NetworkStack11getstackoptEiiPvPj", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "0"];
var debug_table_iiiiiii = ["0", "__ZN12NetworkStack10setsockoptEPviiPKvj", "__ZN12NetworkStack10getsockoptEPviiS0_Pj", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "__ZL25default_terminate_handlerv", "__ZL29nsapi_dns_query_async_timeoutv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN17EthernetInterfaceD2Ev", "__ZN17EthernetInterfaceD0Ev", "__ZThn4_N17EthernetInterfaceD1Ev", "__ZThn4_N17EthernetInterfaceD0Ev", "_mbed_trace_default_print", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv", "__ZN6SocketD2Ev", "__ZN6SocketD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv", "__ZN9TCPSocketD2Ev", "__ZN9TCPSocketD0Ev", "__ZN9TCPSocket5eventEv", "__ZN9UDPSocketD2Ev", "__ZN9UDPSocketD0Ev", "__ZN9UDPSocket5eventEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN17EthernetInterface15get_mac_addressEv__async_cb", "__ZN17EthernetInterface14get_ip_addressEv__async_cb", "__ZN17EthernetInterface11get_netmaskEv__async_cb", "__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb", "__ZN17EthernetInterface8set_dhcpEb__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_218", "__ZN17EthernetInterface12socket_closeEPv__async_cb", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_5", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_6", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_4", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_11", "__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_175", "__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_9", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_10", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_8", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_3", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_126", "_mbed_vtracef__async_cb_116", "_mbed_vtracef__async_cb_117", "_mbed_vtracef__async_cb_118", "_mbed_vtracef__async_cb_125", "_mbed_vtracef__async_cb_119", "_mbed_vtracef__async_cb_124", "_mbed_vtracef__async_cb_120", "_mbed_vtracef__async_cb_121", "_mbed_vtracef__async_cb_122", "_mbed_vtracef__async_cb_123", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_63", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_32", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_50", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_51", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_52", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_12", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_18", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_191", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_166", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_158", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_159", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_160", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_161", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_165", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_162", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_163", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_164", "__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_29", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_21", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_27", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_22", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_23", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_28", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_24", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_26", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_25", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_14", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_15", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_16", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_17", "__ZN6SocketD2Ev__async_cb", "__ZN6SocketD2Ev__async_cb_170", "__ZN6Socket4openEP12NetworkStack__async_cb", "__ZN6Socket4openEP12NetworkStack__async_cb_143", "__ZN6Socket4openEP12NetworkStack__async_cb_144", "__ZN6Socket4openEP12NetworkStack__async_cb_145", "__ZN6Socket4openEP12NetworkStack__async_cb_146", "__ZN4mbed8CallbackIFvvEE5thunkEPv", "__ZN6Socket4openEP12NetworkStack__async_cb_147", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_115", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb", "__ZN6Socket5closeEv__async_cb", "__ZN6Socket5closeEv__async_cb_65", "__ZN6Socket5closeEv__async_cb_66", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_53", "__ZN9TCPSocketD2Ev__async_cb_31", "__ZN9TCPSocketD2Ev__async_cb", "__ZN9TCPSocketD2Ev__async_cb_30", "__ZN9TCPSocketD0Ev__async_cb", "__ZN9TCPSocket5eventEv__async_cb", "__ZN9TCPSocket7connectEPKct__async_cb", "__ZN9TCPSocket7connectEPKct__async_cb_77", "__ZN9TCPSocket7connectEPKct__async_cb_76", "__ZN9TCPSocket4sendEPKvj__async_cb_88", "__ZN9TCPSocket4sendEPKvj__async_cb", "__ZN9TCPSocket4recvEPvj__async_cb_114", "__ZN9TCPSocket4recvEPvj__async_cb", "__ZN9UDPSocketD2Ev__async_cb_128", "__ZN9UDPSocketD2Ev__async_cb", "__ZN9UDPSocketD2Ev__async_cb_127", "__ZN9UDPSocketD0Ev__async_cb", "__ZN9UDPSocket5eventEv__async_cb", "__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb", "__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_59", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_56", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_55", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_54", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_58", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_57", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_73", "__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_84", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_85", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_86", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_113", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_109", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_110", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_100", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_101", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_102", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_103", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_104", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_112", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_105", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_106", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_107", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_108", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_111", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_138", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_139", "__ZL29nsapi_dns_query_async_timeoutv__async_cb", "__ZL30nsapi_dns_query_async_responsePv", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_142", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_130", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_131", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_132", "__ZL26nsapi_dns_query_async_sendPv", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_141", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_133", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_134", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_135", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_140", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_136", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_137", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_152", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_148", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_149", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_151", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_150", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb", "__ZL28nsapi_dns_query_async_createPv", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_169", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_167", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_168", "__ZL28nsapi_dns_query_async_createPv__async_cb_205", "__ZL28nsapi_dns_query_async_createPv__async_cb_212", "__ZL28nsapi_dns_query_async_createPv__async_cb", "__ZL28nsapi_dns_query_async_createPv__async_cb_208", "__ZL28nsapi_dns_query_async_createPv__async_cb_210", "__ZL28nsapi_dns_query_async_createPv__async_cb_195", "__ZL28nsapi_dns_query_async_createPv__async_cb_196", "__ZL28nsapi_dns_query_async_createPv__async_cb_197", "__ZL28nsapi_dns_query_async_createPv__async_cb_198", "__ZL28nsapi_dns_query_async_createPv__async_cb_207", "__ZL28nsapi_dns_query_async_createPv__async_cb_209", "__ZL28nsapi_dns_query_async_createPv__async_cb_199", "__ZL28nsapi_dns_query_async_createPv__async_cb_200", "__ZL28nsapi_dns_query_async_createPv__async_cb_204", "__ZL28nsapi_dns_query_async_createPv__async_cb_201", "__ZL28nsapi_dns_query_async_createPv__async_cb_202", "__ZL37nsapi_dns_query_async_socket_callbackPv", "__ZL28nsapi_dns_query_async_createPv__async_cb_211", "__ZL28nsapi_dns_query_async_createPv__async_cb_203", "__ZL28nsapi_dns_query_async_createPv__async_cb_206", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_48", "__ZL28nsapi_dns_query_async_deletei__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_45", "__ZL28nsapi_dns_query_async_deletei__async_cb_46", "__ZL28nsapi_dns_query_async_deletei__async_cb_47", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_62", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_60", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_61", "__ZL26nsapi_dns_query_async_sendPv__async_cb", "__ZL26nsapi_dns_query_async_sendPv__async_cb_40", "__ZL26nsapi_dns_query_async_sendPv__async_cb_42", "__ZL26nsapi_dns_query_async_sendPv__async_cb_33", "__ZL26nsapi_dns_query_async_sendPv__async_cb_34", "__ZL26nsapi_dns_query_async_sendPv__async_cb_35", "__ZL26nsapi_dns_query_async_sendPv__async_cb_36", "__ZL26nsapi_dns_query_async_sendPv__async_cb_39", "__ZL26nsapi_dns_query_async_sendPv__async_cb_41", "__ZL26nsapi_dns_query_async_sendPv__async_cb_37", "__ZL26nsapi_dns_query_async_sendPv__async_cb_38", "__ZL26nsapi_dns_query_async_sendPv__async_cb_43", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_72", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_71", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_69", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_70", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_67", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_68", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_81", "__ZL30nsapi_dns_query_async_responsePv__async_cb_80", "__ZL30nsapi_dns_query_async_responsePv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_82", "__ZL30nsapi_dns_query_async_responsePv__async_cb_83", "__ZL30nsapi_dns_query_async_responsePv__async_cb_78", "__ZL30nsapi_dns_query_async_responsePv__async_cb_79", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_157", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_153", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_154", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_155", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_156", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb_214", "__Z28nsapi_dns_query_async_canceli__async_cb_215", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_190", "_mbed_die__async_cb_189", "_mbed_die__async_cb_188", "_mbed_die__async_cb_187", "_mbed_die__async_cb_186", "_mbed_die__async_cb_185", "_mbed_die__async_cb_184", "_mbed_die__async_cb_183", "_mbed_die__async_cb_182", "_mbed_die__async_cb_181", "_mbed_die__async_cb_180", "_mbed_die__async_cb_179", "_mbed_die__async_cb_178", "_mbed_die__async_cb_177", "_mbed_die__async_cb_176", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_2", "_mbed_error_vfprintf__async_cb_1", "_serial_putc__async_cb_49", "_serial_putc__async_cb", "_invoke_ticker__async_cb_20", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "_main__async_cb_91", "_main__async_cb_99", "_main__async_cb_98", "_main__async_cb", "_main__async_cb_97", "_main__async_cb_94", "_main__async_cb_89", "_main__async_cb_93", "_main__async_cb_92", "_main__async_cb_96", "_main__async_cb_90", "_main__async_cb_95", "_putc__async_cb_13", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_193", "_fflush__async_cb_192", "_fflush__async_cb_194", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_129", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_fputc__async_cb_64", "_fputc__async_cb", "_puts__async_cb", "__Znwj__async_cb", "__ZnwjRKSt9nothrow_t__async_cb", "__Znaj__async_cb", "__ZnajRKSt9nothrow_t__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_213", "_abort_message__async_cb", "_abort_message__async_cb_7", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_44", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_216", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_74", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_217", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_174", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_173", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_172", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_171", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_75", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE", "__ZN12NetworkStack20get_call_in_callbackEv", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv"];
var debug_table_viii = ["0"];
var debug_table_viiii = ["0", "__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 61
 STACKTOP = STACKTOP + 16 | 0; //@line 62
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62
 $1 = sp; //@line 63
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 70
   $7 = $6 >>> 3; //@line 71
   $8 = HEAP32[1969] | 0; //@line 72
   $9 = $8 >>> $7; //@line 73
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 79
    $16 = 7916 + ($14 << 1 << 2) | 0; //@line 81
    $17 = $16 + 8 | 0; //@line 82
    $18 = HEAP32[$17 >> 2] | 0; //@line 83
    $19 = $18 + 8 | 0; //@line 84
    $20 = HEAP32[$19 >> 2] | 0; //@line 85
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[1969] = $8 & ~(1 << $14); //@line 92
     } else {
      if ((HEAP32[1973] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 97
      }
      $27 = $20 + 12 | 0; //@line 100
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 104
       HEAP32[$17 >> 2] = $20; //@line 105
       break;
      } else {
       _abort(); //@line 108
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 113
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 116
    $34 = $18 + $30 + 4 | 0; //@line 118
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 121
    $$0 = $19; //@line 122
    STACKTOP = sp; //@line 123
    return $$0 | 0; //@line 123
   }
   $37 = HEAP32[1971] | 0; //@line 125
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 131
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 134
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 137
     $49 = $47 >>> 12 & 16; //@line 139
     $50 = $47 >>> $49; //@line 140
     $52 = $50 >>> 5 & 8; //@line 142
     $54 = $50 >>> $52; //@line 144
     $56 = $54 >>> 2 & 4; //@line 146
     $58 = $54 >>> $56; //@line 148
     $60 = $58 >>> 1 & 2; //@line 150
     $62 = $58 >>> $60; //@line 152
     $64 = $62 >>> 1 & 1; //@line 154
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 157
     $69 = 7916 + ($67 << 1 << 2) | 0; //@line 159
     $70 = $69 + 8 | 0; //@line 160
     $71 = HEAP32[$70 >> 2] | 0; //@line 161
     $72 = $71 + 8 | 0; //@line 162
     $73 = HEAP32[$72 >> 2] | 0; //@line 163
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 169
       HEAP32[1969] = $77; //@line 170
       $98 = $77; //@line 171
      } else {
       if ((HEAP32[1973] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 176
       }
       $80 = $73 + 12 | 0; //@line 179
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 183
        HEAP32[$70 >> 2] = $73; //@line 184
        $98 = $8; //@line 185
        break;
       } else {
        _abort(); //@line 188
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 193
     $84 = $83 - $6 | 0; //@line 194
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 197
     $87 = $71 + $6 | 0; //@line 198
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 201
     HEAP32[$71 + $83 >> 2] = $84; //@line 203
     if ($37 | 0) {
      $92 = HEAP32[1974] | 0; //@line 206
      $93 = $37 >>> 3; //@line 207
      $95 = 7916 + ($93 << 1 << 2) | 0; //@line 209
      $96 = 1 << $93; //@line 210
      if (!($98 & $96)) {
       HEAP32[1969] = $98 | $96; //@line 215
       $$0199 = $95; //@line 217
       $$pre$phiZ2D = $95 + 8 | 0; //@line 217
      } else {
       $101 = $95 + 8 | 0; //@line 219
       $102 = HEAP32[$101 >> 2] | 0; //@line 220
       if ((HEAP32[1973] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 224
       } else {
        $$0199 = $102; //@line 227
        $$pre$phiZ2D = $101; //@line 227
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 230
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 232
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 234
      HEAP32[$92 + 12 >> 2] = $95; //@line 236
     }
     HEAP32[1971] = $84; //@line 238
     HEAP32[1974] = $87; //@line 239
     $$0 = $72; //@line 240
     STACKTOP = sp; //@line 241
     return $$0 | 0; //@line 241
    }
    $108 = HEAP32[1970] | 0; //@line 243
    if (!$108) {
     $$0197 = $6; //@line 246
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 250
     $114 = $112 >>> 12 & 16; //@line 252
     $115 = $112 >>> $114; //@line 253
     $117 = $115 >>> 5 & 8; //@line 255
     $119 = $115 >>> $117; //@line 257
     $121 = $119 >>> 2 & 4; //@line 259
     $123 = $119 >>> $121; //@line 261
     $125 = $123 >>> 1 & 2; //@line 263
     $127 = $123 >>> $125; //@line 265
     $129 = $127 >>> 1 & 1; //@line 267
     $134 = HEAP32[8180 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 272
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 276
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 282
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 285
      $$0193$lcssa$i = $138; //@line 285
     } else {
      $$01926$i = $134; //@line 287
      $$01935$i = $138; //@line 287
      $146 = $143; //@line 287
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 292
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 293
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 294
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 295
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 301
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 304
        $$0193$lcssa$i = $$$0193$i; //@line 304
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 307
        $$01935$i = $$$0193$i; //@line 307
       }
      }
     }
     $157 = HEAP32[1973] | 0; //@line 311
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 314
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 317
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 320
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 324
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 326
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 330
       $176 = HEAP32[$175 >> 2] | 0; //@line 331
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 334
        $179 = HEAP32[$178 >> 2] | 0; //@line 335
        if (!$179) {
         $$3$i = 0; //@line 338
         break;
        } else {
         $$1196$i = $179; //@line 341
         $$1198$i = $178; //@line 341
        }
       } else {
        $$1196$i = $176; //@line 344
        $$1198$i = $175; //@line 344
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 347
        $182 = HEAP32[$181 >> 2] | 0; //@line 348
        if ($182 | 0) {
         $$1196$i = $182; //@line 351
         $$1198$i = $181; //@line 351
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 354
        $185 = HEAP32[$184 >> 2] | 0; //@line 355
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 360
         $$1198$i = $184; //@line 360
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 365
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 368
        $$3$i = $$1196$i; //@line 369
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 374
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 377
       }
       $169 = $167 + 12 | 0; //@line 380
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 384
       }
       $172 = $164 + 8 | 0; //@line 387
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 391
        HEAP32[$172 >> 2] = $167; //@line 392
        $$3$i = $164; //@line 393
        break;
       } else {
        _abort(); //@line 396
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 405
       $191 = 8180 + ($190 << 2) | 0; //@line 406
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 411
         if (!$$3$i) {
          HEAP32[1970] = $108 & ~(1 << $190); //@line 417
          break L73;
         }
        } else {
         if ((HEAP32[1973] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 424
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 432
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[1973] | 0; //@line 442
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 445
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 449
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 451
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 457
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 461
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 463
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 469
       if ($214 | 0) {
        if ((HEAP32[1973] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 475
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 479
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 481
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 489
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 492
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 494
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 497
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 501
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 504
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 506
      if ($37 | 0) {
       $234 = HEAP32[1974] | 0; //@line 509
       $235 = $37 >>> 3; //@line 510
       $237 = 7916 + ($235 << 1 << 2) | 0; //@line 512
       $238 = 1 << $235; //@line 513
       if (!($8 & $238)) {
        HEAP32[1969] = $8 | $238; //@line 518
        $$0189$i = $237; //@line 520
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 520
       } else {
        $242 = $237 + 8 | 0; //@line 522
        $243 = HEAP32[$242 >> 2] | 0; //@line 523
        if ((HEAP32[1973] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 527
        } else {
         $$0189$i = $243; //@line 530
         $$pre$phi$iZ2D = $242; //@line 530
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 533
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 535
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 537
       HEAP32[$234 + 12 >> 2] = $237; //@line 539
      }
      HEAP32[1971] = $$0193$lcssa$i; //@line 541
      HEAP32[1974] = $159; //@line 542
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 545
     STACKTOP = sp; //@line 546
     return $$0 | 0; //@line 546
    }
   } else {
    $$0197 = $6; //@line 549
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 554
   } else {
    $251 = $0 + 11 | 0; //@line 556
    $252 = $251 & -8; //@line 557
    $253 = HEAP32[1970] | 0; //@line 558
    if (!$253) {
     $$0197 = $252; //@line 561
    } else {
     $255 = 0 - $252 | 0; //@line 563
     $256 = $251 >>> 8; //@line 564
     if (!$256) {
      $$0358$i = 0; //@line 567
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 571
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 575
       $262 = $256 << $261; //@line 576
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 579
       $267 = $262 << $265; //@line 581
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 584
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 589
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 595
      }
     }
     $282 = HEAP32[8180 + ($$0358$i << 2) >> 2] | 0; //@line 599
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 603
       $$3$i203 = 0; //@line 603
       $$3350$i = $255; //@line 603
       label = 81; //@line 604
      } else {
       $$0342$i = 0; //@line 611
       $$0347$i = $255; //@line 611
       $$0353$i = $282; //@line 611
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 611
       $$0362$i = 0; //@line 611
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 616
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 621
          $$435113$i = 0; //@line 621
          $$435712$i = $$0353$i; //@line 621
          label = 85; //@line 622
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 625
          $$1348$i = $292; //@line 625
         }
        } else {
         $$1343$i = $$0342$i; //@line 628
         $$1348$i = $$0347$i; //@line 628
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 631
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 634
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 638
        $302 = ($$0353$i | 0) == 0; //@line 639
        if ($302) {
         $$2355$i = $$1363$i; //@line 644
         $$3$i203 = $$1343$i; //@line 644
         $$3350$i = $$1348$i; //@line 644
         label = 81; //@line 645
         break;
        } else {
         $$0342$i = $$1343$i; //@line 648
         $$0347$i = $$1348$i; //@line 648
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 648
         $$0362$i = $$1363$i; //@line 648
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 658
       $309 = $253 & ($306 | 0 - $306); //@line 661
       if (!$309) {
        $$0197 = $252; //@line 664
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 669
       $315 = $313 >>> 12 & 16; //@line 671
       $316 = $313 >>> $315; //@line 672
       $318 = $316 >>> 5 & 8; //@line 674
       $320 = $316 >>> $318; //@line 676
       $322 = $320 >>> 2 & 4; //@line 678
       $324 = $320 >>> $322; //@line 680
       $326 = $324 >>> 1 & 2; //@line 682
       $328 = $324 >>> $326; //@line 684
       $330 = $328 >>> 1 & 1; //@line 686
       $$4$ph$i = 0; //@line 692
       $$4357$ph$i = HEAP32[8180 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 692
      } else {
       $$4$ph$i = $$3$i203; //@line 694
       $$4357$ph$i = $$2355$i; //@line 694
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 698
       $$4351$lcssa$i = $$3350$i; //@line 698
      } else {
       $$414$i = $$4$ph$i; //@line 700
       $$435113$i = $$3350$i; //@line 700
       $$435712$i = $$4357$ph$i; //@line 700
       label = 85; //@line 701
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 706
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 710
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 711
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 712
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 713
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 719
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 722
        $$4351$lcssa$i = $$$4351$i; //@line 722
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 725
        $$435113$i = $$$4351$i; //@line 725
        label = 85; //@line 726
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 732
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[1971] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[1973] | 0; //@line 738
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 741
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 744
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 747
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 751
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 753
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 757
         $371 = HEAP32[$370 >> 2] | 0; //@line 758
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 761
          $374 = HEAP32[$373 >> 2] | 0; //@line 762
          if (!$374) {
           $$3372$i = 0; //@line 765
           break;
          } else {
           $$1370$i = $374; //@line 768
           $$1374$i = $373; //@line 768
          }
         } else {
          $$1370$i = $371; //@line 771
          $$1374$i = $370; //@line 771
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 774
          $377 = HEAP32[$376 >> 2] | 0; //@line 775
          if ($377 | 0) {
           $$1370$i = $377; //@line 778
           $$1374$i = $376; //@line 778
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 781
          $380 = HEAP32[$379 >> 2] | 0; //@line 782
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 787
           $$1374$i = $379; //@line 787
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 792
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 795
          $$3372$i = $$1370$i; //@line 796
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 801
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 804
         }
         $364 = $362 + 12 | 0; //@line 807
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 811
         }
         $367 = $359 + 8 | 0; //@line 814
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 818
          HEAP32[$367 >> 2] = $362; //@line 819
          $$3372$i = $359; //@line 820
          break;
         } else {
          _abort(); //@line 823
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 831
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 834
         $386 = 8180 + ($385 << 2) | 0; //@line 835
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 840
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 845
            HEAP32[1970] = $391; //@line 846
            $475 = $391; //@line 847
            break L164;
           }
          } else {
           if ((HEAP32[1973] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 854
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 862
            if (!$$3372$i) {
             $475 = $253; //@line 865
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[1973] | 0; //@line 873
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 876
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 880
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 882
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 888
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 892
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 894
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 900
         if (!$409) {
          $475 = $253; //@line 903
         } else {
          if ((HEAP32[1973] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 908
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 912
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 914
           $475 = $253; //@line 915
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 924
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 927
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 929
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 932
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 936
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 939
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 941
         $428 = $$4351$lcssa$i >>> 3; //@line 942
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 7916 + ($428 << 1 << 2) | 0; //@line 946
          $432 = HEAP32[1969] | 0; //@line 947
          $433 = 1 << $428; //@line 948
          if (!($432 & $433)) {
           HEAP32[1969] = $432 | $433; //@line 953
           $$0368$i = $431; //@line 955
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 955
          } else {
           $437 = $431 + 8 | 0; //@line 957
           $438 = HEAP32[$437 >> 2] | 0; //@line 958
           if ((HEAP32[1973] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 962
           } else {
            $$0368$i = $438; //@line 965
            $$pre$phi$i211Z2D = $437; //@line 965
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 968
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 970
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 972
          HEAP32[$354 + 12 >> 2] = $431; //@line 974
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 977
         if (!$444) {
          $$0361$i = 0; //@line 980
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 984
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 988
           $450 = $444 << $449; //@line 989
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 992
           $455 = $450 << $453; //@line 994
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 997
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 1002
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 1008
          }
         }
         $469 = 8180 + ($$0361$i << 2) | 0; //@line 1011
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 1013
         $471 = $354 + 16 | 0; //@line 1014
         HEAP32[$471 + 4 >> 2] = 0; //@line 1016
         HEAP32[$471 >> 2] = 0; //@line 1017
         $473 = 1 << $$0361$i; //@line 1018
         if (!($475 & $473)) {
          HEAP32[1970] = $475 | $473; //@line 1023
          HEAP32[$469 >> 2] = $354; //@line 1024
          HEAP32[$354 + 24 >> 2] = $469; //@line 1026
          HEAP32[$354 + 12 >> 2] = $354; //@line 1028
          HEAP32[$354 + 8 >> 2] = $354; //@line 1030
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 1039
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 1039
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 1046
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 1050
          $494 = HEAP32[$492 >> 2] | 0; //@line 1052
          if (!$494) {
           label = 136; //@line 1055
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 1058
           $$0345$i = $494; //@line 1058
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[1973] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 1065
          } else {
           HEAP32[$492 >> 2] = $354; //@line 1068
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 1070
           HEAP32[$354 + 12 >> 2] = $354; //@line 1072
           HEAP32[$354 + 8 >> 2] = $354; //@line 1074
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 1079
          $502 = HEAP32[$501 >> 2] | 0; //@line 1080
          $503 = HEAP32[1973] | 0; //@line 1081
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 1087
           HEAP32[$501 >> 2] = $354; //@line 1088
           HEAP32[$354 + 8 >> 2] = $502; //@line 1090
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 1092
           HEAP32[$354 + 24 >> 2] = 0; //@line 1094
           break;
          } else {
           _abort(); //@line 1097
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 1104
       STACKTOP = sp; //@line 1105
       return $$0 | 0; //@line 1105
      } else {
       $$0197 = $252; //@line 1107
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[1971] | 0; //@line 1114
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 1117
  $515 = HEAP32[1974] | 0; //@line 1118
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 1121
   HEAP32[1974] = $517; //@line 1122
   HEAP32[1971] = $514; //@line 1123
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 1126
   HEAP32[$515 + $512 >> 2] = $514; //@line 1128
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 1131
  } else {
   HEAP32[1971] = 0; //@line 1133
   HEAP32[1974] = 0; //@line 1134
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 1137
   $526 = $515 + $512 + 4 | 0; //@line 1139
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 1142
  }
  $$0 = $515 + 8 | 0; //@line 1145
  STACKTOP = sp; //@line 1146
  return $$0 | 0; //@line 1146
 }
 $530 = HEAP32[1972] | 0; //@line 1148
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 1151
  HEAP32[1972] = $532; //@line 1152
  $533 = HEAP32[1975] | 0; //@line 1153
  $534 = $533 + $$0197 | 0; //@line 1154
  HEAP32[1975] = $534; //@line 1155
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 1158
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 1161
  $$0 = $533 + 8 | 0; //@line 1163
  STACKTOP = sp; //@line 1164
  return $$0 | 0; //@line 1164
 }
 if (!(HEAP32[2087] | 0)) {
  HEAP32[2089] = 4096; //@line 1169
  HEAP32[2088] = 4096; //@line 1170
  HEAP32[2090] = -1; //@line 1171
  HEAP32[2091] = -1; //@line 1172
  HEAP32[2092] = 0; //@line 1173
  HEAP32[2080] = 0; //@line 1174
  HEAP32[2087] = $1 & -16 ^ 1431655768; //@line 1178
  $548 = 4096; //@line 1179
 } else {
  $548 = HEAP32[2089] | 0; //@line 1182
 }
 $545 = $$0197 + 48 | 0; //@line 1184
 $546 = $$0197 + 47 | 0; //@line 1185
 $547 = $548 + $546 | 0; //@line 1186
 $549 = 0 - $548 | 0; //@line 1187
 $550 = $547 & $549; //@line 1188
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 1191
  STACKTOP = sp; //@line 1192
  return $$0 | 0; //@line 1192
 }
 $552 = HEAP32[2079] | 0; //@line 1194
 if ($552 | 0) {
  $554 = HEAP32[2077] | 0; //@line 1197
  $555 = $554 + $550 | 0; //@line 1198
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 1203
   STACKTOP = sp; //@line 1204
   return $$0 | 0; //@line 1204
  }
 }
 L244 : do {
  if (!(HEAP32[2080] & 4)) {
   $561 = HEAP32[1975] | 0; //@line 1212
   L246 : do {
    if (!$561) {
     label = 163; //@line 1216
    } else {
     $$0$i$i = 8324; //@line 1218
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 1220
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 1223
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 1232
      if (!$570) {
       label = 163; //@line 1235
       break L246;
      } else {
       $$0$i$i = $570; //@line 1238
      }
     }
     $595 = $547 - $530 & $549; //@line 1242
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 1245
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 1253
       } else {
        $$723947$i = $595; //@line 1255
        $$748$i = $597; //@line 1255
        label = 180; //@line 1256
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 1260
       $$2253$ph$i = $595; //@line 1260
       label = 171; //@line 1261
      }
     } else {
      $$2234243136$i = 0; //@line 1264
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 1270
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 1273
     } else {
      $574 = $572; //@line 1275
      $575 = HEAP32[2088] | 0; //@line 1276
      $576 = $575 + -1 | 0; //@line 1277
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 1285
      $584 = HEAP32[2077] | 0; //@line 1286
      $585 = $$$i + $584 | 0; //@line 1287
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[2079] | 0; //@line 1292
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 1299
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 1303
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 1306
        $$748$i = $572; //@line 1306
        label = 180; //@line 1307
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 1310
        $$2253$ph$i = $$$i; //@line 1310
        label = 171; //@line 1311
       }
      } else {
       $$2234243136$i = 0; //@line 1314
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 1321
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 1330
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 1333
       $$748$i = $$2247$ph$i; //@line 1333
       label = 180; //@line 1334
       break L244;
      }
     }
     $607 = HEAP32[2089] | 0; //@line 1338
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 1342
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 1345
      $$748$i = $$2247$ph$i; //@line 1345
      label = 180; //@line 1346
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 1352
      $$2234243136$i = 0; //@line 1353
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 1357
      $$748$i = $$2247$ph$i; //@line 1357
      label = 180; //@line 1358
      break L244;
     }
    }
   } while (0);
   HEAP32[2080] = HEAP32[2080] | 4; //@line 1365
   $$4236$i = $$2234243136$i; //@line 1366
   label = 178; //@line 1367
  } else {
   $$4236$i = 0; //@line 1369
   label = 178; //@line 1370
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 1376
   $621 = _sbrk(0) | 0; //@line 1377
   $627 = $621 - $620 | 0; //@line 1385
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 1387
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 1395
    $$748$i = $620; //@line 1395
    label = 180; //@line 1396
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[2077] | 0) + $$723947$i | 0; //@line 1402
  HEAP32[2077] = $633; //@line 1403
  if ($633 >>> 0 > (HEAP32[2078] | 0) >>> 0) {
   HEAP32[2078] = $633; //@line 1407
  }
  $636 = HEAP32[1975] | 0; //@line 1409
  do {
   if (!$636) {
    $638 = HEAP32[1973] | 0; //@line 1413
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[1973] = $$748$i; //@line 1418
    }
    HEAP32[2081] = $$748$i; //@line 1420
    HEAP32[2082] = $$723947$i; //@line 1421
    HEAP32[2084] = 0; //@line 1422
    HEAP32[1978] = HEAP32[2087]; //@line 1424
    HEAP32[1977] = -1; //@line 1425
    HEAP32[1982] = 7916; //@line 1426
    HEAP32[1981] = 7916; //@line 1427
    HEAP32[1984] = 7924; //@line 1428
    HEAP32[1983] = 7924; //@line 1429
    HEAP32[1986] = 7932; //@line 1430
    HEAP32[1985] = 7932; //@line 1431
    HEAP32[1988] = 7940; //@line 1432
    HEAP32[1987] = 7940; //@line 1433
    HEAP32[1990] = 7948; //@line 1434
    HEAP32[1989] = 7948; //@line 1435
    HEAP32[1992] = 7956; //@line 1436
    HEAP32[1991] = 7956; //@line 1437
    HEAP32[1994] = 7964; //@line 1438
    HEAP32[1993] = 7964; //@line 1439
    HEAP32[1996] = 7972; //@line 1440
    HEAP32[1995] = 7972; //@line 1441
    HEAP32[1998] = 7980; //@line 1442
    HEAP32[1997] = 7980; //@line 1443
    HEAP32[2e3] = 7988; //@line 1444
    HEAP32[1999] = 7988; //@line 1445
    HEAP32[2002] = 7996; //@line 1446
    HEAP32[2001] = 7996; //@line 1447
    HEAP32[2004] = 8004; //@line 1448
    HEAP32[2003] = 8004; //@line 1449
    HEAP32[2006] = 8012; //@line 1450
    HEAP32[2005] = 8012; //@line 1451
    HEAP32[2008] = 8020; //@line 1452
    HEAP32[2007] = 8020; //@line 1453
    HEAP32[2010] = 8028; //@line 1454
    HEAP32[2009] = 8028; //@line 1455
    HEAP32[2012] = 8036; //@line 1456
    HEAP32[2011] = 8036; //@line 1457
    HEAP32[2014] = 8044; //@line 1458
    HEAP32[2013] = 8044; //@line 1459
    HEAP32[2016] = 8052; //@line 1460
    HEAP32[2015] = 8052; //@line 1461
    HEAP32[2018] = 8060; //@line 1462
    HEAP32[2017] = 8060; //@line 1463
    HEAP32[2020] = 8068; //@line 1464
    HEAP32[2019] = 8068; //@line 1465
    HEAP32[2022] = 8076; //@line 1466
    HEAP32[2021] = 8076; //@line 1467
    HEAP32[2024] = 8084; //@line 1468
    HEAP32[2023] = 8084; //@line 1469
    HEAP32[2026] = 8092; //@line 1470
    HEAP32[2025] = 8092; //@line 1471
    HEAP32[2028] = 8100; //@line 1472
    HEAP32[2027] = 8100; //@line 1473
    HEAP32[2030] = 8108; //@line 1474
    HEAP32[2029] = 8108; //@line 1475
    HEAP32[2032] = 8116; //@line 1476
    HEAP32[2031] = 8116; //@line 1477
    HEAP32[2034] = 8124; //@line 1478
    HEAP32[2033] = 8124; //@line 1479
    HEAP32[2036] = 8132; //@line 1480
    HEAP32[2035] = 8132; //@line 1481
    HEAP32[2038] = 8140; //@line 1482
    HEAP32[2037] = 8140; //@line 1483
    HEAP32[2040] = 8148; //@line 1484
    HEAP32[2039] = 8148; //@line 1485
    HEAP32[2042] = 8156; //@line 1486
    HEAP32[2041] = 8156; //@line 1487
    HEAP32[2044] = 8164; //@line 1488
    HEAP32[2043] = 8164; //@line 1489
    $642 = $$723947$i + -40 | 0; //@line 1490
    $644 = $$748$i + 8 | 0; //@line 1492
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 1497
    $650 = $$748$i + $649 | 0; //@line 1498
    $651 = $642 - $649 | 0; //@line 1499
    HEAP32[1975] = $650; //@line 1500
    HEAP32[1972] = $651; //@line 1501
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 1504
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 1507
    HEAP32[1976] = HEAP32[2091]; //@line 1509
   } else {
    $$024367$i = 8324; //@line 1511
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 1513
     $658 = $$024367$i + 4 | 0; //@line 1514
     $659 = HEAP32[$658 >> 2] | 0; //@line 1515
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 1519
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 1523
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 1528
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 1542
       $673 = (HEAP32[1972] | 0) + $$723947$i | 0; //@line 1544
       $675 = $636 + 8 | 0; //@line 1546
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 1551
       $681 = $636 + $680 | 0; //@line 1552
       $682 = $673 - $680 | 0; //@line 1553
       HEAP32[1975] = $681; //@line 1554
       HEAP32[1972] = $682; //@line 1555
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 1558
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 1561
       HEAP32[1976] = HEAP32[2091]; //@line 1563
       break;
      }
     }
    }
    $688 = HEAP32[1973] | 0; //@line 1568
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[1973] = $$748$i; //@line 1571
     $753 = $$748$i; //@line 1572
    } else {
     $753 = $688; //@line 1574
    }
    $690 = $$748$i + $$723947$i | 0; //@line 1576
    $$124466$i = 8324; //@line 1577
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 1582
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 1586
     if (!$694) {
      $$0$i$i$i = 8324; //@line 1589
      break;
     } else {
      $$124466$i = $694; //@line 1592
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 1601
      $700 = $$124466$i + 4 | 0; //@line 1602
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 1605
      $704 = $$748$i + 8 | 0; //@line 1607
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 1613
      $712 = $690 + 8 | 0; //@line 1615
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 1621
      $722 = $710 + $$0197 | 0; //@line 1625
      $723 = $718 - $710 - $$0197 | 0; //@line 1626
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 1629
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[1972] | 0) + $723 | 0; //@line 1634
        HEAP32[1972] = $728; //@line 1635
        HEAP32[1975] = $722; //@line 1636
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 1639
       } else {
        if ((HEAP32[1974] | 0) == ($718 | 0)) {
         $734 = (HEAP32[1971] | 0) + $723 | 0; //@line 1645
         HEAP32[1971] = $734; //@line 1646
         HEAP32[1974] = $722; //@line 1647
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 1650
         HEAP32[$722 + $734 >> 2] = $734; //@line 1652
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 1656
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 1660
         $743 = $739 >>> 3; //@line 1661
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 1666
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 1668
           $750 = 7916 + ($743 << 1 << 2) | 0; //@line 1670
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 1676
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 1685
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[1969] = HEAP32[1969] & ~(1 << $743); //@line 1695
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 1702
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 1706
             }
             $764 = $748 + 8 | 0; //@line 1709
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 1713
              break;
             }
             _abort(); //@line 1716
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 1721
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 1722
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 1725
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 1727
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 1731
             $783 = $782 + 4 | 0; //@line 1732
             $784 = HEAP32[$783 >> 2] | 0; //@line 1733
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 1736
              if (!$786) {
               $$3$i$i = 0; //@line 1739
               break;
              } else {
               $$1291$i$i = $786; //@line 1742
               $$1293$i$i = $782; //@line 1742
              }
             } else {
              $$1291$i$i = $784; //@line 1745
              $$1293$i$i = $783; //@line 1745
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 1748
              $789 = HEAP32[$788 >> 2] | 0; //@line 1749
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 1752
               $$1293$i$i = $788; //@line 1752
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 1755
              $792 = HEAP32[$791 >> 2] | 0; //@line 1756
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 1761
               $$1293$i$i = $791; //@line 1761
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 1766
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 1769
              $$3$i$i = $$1291$i$i; //@line 1770
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 1775
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 1778
             }
             $776 = $774 + 12 | 0; //@line 1781
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 1785
             }
             $779 = $771 + 8 | 0; //@line 1788
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 1792
              HEAP32[$779 >> 2] = $774; //@line 1793
              $$3$i$i = $771; //@line 1794
              break;
             } else {
              _abort(); //@line 1797
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 1807
           $798 = 8180 + ($797 << 2) | 0; //@line 1808
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 1813
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[1970] = HEAP32[1970] & ~(1 << $797); //@line 1822
             break L311;
            } else {
             if ((HEAP32[1973] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 1828
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 1836
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[1973] | 0; //@line 1846
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 1849
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 1853
           $815 = $718 + 16 | 0; //@line 1854
           $816 = HEAP32[$815 >> 2] | 0; //@line 1855
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 1861
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 1865
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 1867
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 1873
           if (!$822) {
            break;
           }
           if ((HEAP32[1973] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 1881
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 1885
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 1887
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 1894
         $$0287$i$i = $742 + $723 | 0; //@line 1894
        } else {
         $$0$i17$i = $718; //@line 1896
         $$0287$i$i = $723; //@line 1896
        }
        $830 = $$0$i17$i + 4 | 0; //@line 1898
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 1901
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 1904
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 1906
        $836 = $$0287$i$i >>> 3; //@line 1907
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 7916 + ($836 << 1 << 2) | 0; //@line 1911
         $840 = HEAP32[1969] | 0; //@line 1912
         $841 = 1 << $836; //@line 1913
         do {
          if (!($840 & $841)) {
           HEAP32[1969] = $840 | $841; //@line 1919
           $$0295$i$i = $839; //@line 1921
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 1921
          } else {
           $845 = $839 + 8 | 0; //@line 1923
           $846 = HEAP32[$845 >> 2] | 0; //@line 1924
           if ((HEAP32[1973] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 1928
            $$pre$phi$i19$iZ2D = $845; //@line 1928
            break;
           }
           _abort(); //@line 1931
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 1935
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 1937
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 1939
         HEAP32[$722 + 12 >> 2] = $839; //@line 1941
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 1944
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 1948
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 1952
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 1957
          $858 = $852 << $857; //@line 1958
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 1961
          $863 = $858 << $861; //@line 1963
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 1966
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 1971
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 1977
         }
        } while (0);
        $877 = 8180 + ($$0296$i$i << 2) | 0; //@line 1980
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 1982
        $879 = $722 + 16 | 0; //@line 1983
        HEAP32[$879 + 4 >> 2] = 0; //@line 1985
        HEAP32[$879 >> 2] = 0; //@line 1986
        $881 = HEAP32[1970] | 0; //@line 1987
        $882 = 1 << $$0296$i$i; //@line 1988
        if (!($881 & $882)) {
         HEAP32[1970] = $881 | $882; //@line 1993
         HEAP32[$877 >> 2] = $722; //@line 1994
         HEAP32[$722 + 24 >> 2] = $877; //@line 1996
         HEAP32[$722 + 12 >> 2] = $722; //@line 1998
         HEAP32[$722 + 8 >> 2] = $722; //@line 2000
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 2009
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 2009
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 2016
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 2020
         $902 = HEAP32[$900 >> 2] | 0; //@line 2022
         if (!$902) {
          label = 260; //@line 2025
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 2028
          $$0289$i$i = $902; //@line 2028
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[1973] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 2035
         } else {
          HEAP32[$900 >> 2] = $722; //@line 2038
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 2040
          HEAP32[$722 + 12 >> 2] = $722; //@line 2042
          HEAP32[$722 + 8 >> 2] = $722; //@line 2044
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 2049
         $910 = HEAP32[$909 >> 2] | 0; //@line 2050
         $911 = HEAP32[1973] | 0; //@line 2051
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 2057
          HEAP32[$909 >> 2] = $722; //@line 2058
          HEAP32[$722 + 8 >> 2] = $910; //@line 2060
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 2062
          HEAP32[$722 + 24 >> 2] = 0; //@line 2064
          break;
         } else {
          _abort(); //@line 2067
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 2074
      STACKTOP = sp; //@line 2075
      return $$0 | 0; //@line 2075
     } else {
      $$0$i$i$i = 8324; //@line 2077
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 2081
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 2086
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 2094
    }
    $927 = $923 + -47 | 0; //@line 2096
    $929 = $927 + 8 | 0; //@line 2098
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 2104
    $936 = $636 + 16 | 0; //@line 2105
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 2107
    $939 = $938 + 8 | 0; //@line 2108
    $940 = $938 + 24 | 0; //@line 2109
    $941 = $$723947$i + -40 | 0; //@line 2110
    $943 = $$748$i + 8 | 0; //@line 2112
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 2117
    $949 = $$748$i + $948 | 0; //@line 2118
    $950 = $941 - $948 | 0; //@line 2119
    HEAP32[1975] = $949; //@line 2120
    HEAP32[1972] = $950; //@line 2121
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 2124
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 2127
    HEAP32[1976] = HEAP32[2091]; //@line 2129
    $956 = $938 + 4 | 0; //@line 2130
    HEAP32[$956 >> 2] = 27; //@line 2131
    HEAP32[$939 >> 2] = HEAP32[2081]; //@line 2132
    HEAP32[$939 + 4 >> 2] = HEAP32[2082]; //@line 2132
    HEAP32[$939 + 8 >> 2] = HEAP32[2083]; //@line 2132
    HEAP32[$939 + 12 >> 2] = HEAP32[2084]; //@line 2132
    HEAP32[2081] = $$748$i; //@line 2133
    HEAP32[2082] = $$723947$i; //@line 2134
    HEAP32[2084] = 0; //@line 2135
    HEAP32[2083] = $939; //@line 2136
    $958 = $940; //@line 2137
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 2139
     HEAP32[$958 >> 2] = 7; //@line 2140
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 2153
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 2156
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 2159
     HEAP32[$938 >> 2] = $964; //@line 2160
     $969 = $964 >>> 3; //@line 2161
     if ($964 >>> 0 < 256) {
      $972 = 7916 + ($969 << 1 << 2) | 0; //@line 2165
      $973 = HEAP32[1969] | 0; //@line 2166
      $974 = 1 << $969; //@line 2167
      if (!($973 & $974)) {
       HEAP32[1969] = $973 | $974; //@line 2172
       $$0211$i$i = $972; //@line 2174
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 2174
      } else {
       $978 = $972 + 8 | 0; //@line 2176
       $979 = HEAP32[$978 >> 2] | 0; //@line 2177
       if ((HEAP32[1973] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 2181
       } else {
        $$0211$i$i = $979; //@line 2184
        $$pre$phi$i$iZ2D = $978; //@line 2184
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 2187
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 2189
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 2191
      HEAP32[$636 + 12 >> 2] = $972; //@line 2193
      break;
     }
     $985 = $964 >>> 8; //@line 2196
     if (!$985) {
      $$0212$i$i = 0; //@line 2199
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 2203
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 2207
       $991 = $985 << $990; //@line 2208
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 2211
       $996 = $991 << $994; //@line 2213
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 2216
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 2221
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 2227
      }
     }
     $1010 = 8180 + ($$0212$i$i << 2) | 0; //@line 2230
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 2232
     HEAP32[$636 + 20 >> 2] = 0; //@line 2234
     HEAP32[$936 >> 2] = 0; //@line 2235
     $1013 = HEAP32[1970] | 0; //@line 2236
     $1014 = 1 << $$0212$i$i; //@line 2237
     if (!($1013 & $1014)) {
      HEAP32[1970] = $1013 | $1014; //@line 2242
      HEAP32[$1010 >> 2] = $636; //@line 2243
      HEAP32[$636 + 24 >> 2] = $1010; //@line 2245
      HEAP32[$636 + 12 >> 2] = $636; //@line 2247
      HEAP32[$636 + 8 >> 2] = $636; //@line 2249
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 2258
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 2258
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 2265
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 2269
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 2271
      if (!$1034) {
       label = 286; //@line 2274
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 2277
       $$0207$i$i = $1034; //@line 2277
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[1973] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 2284
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 2287
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 2289
       HEAP32[$636 + 12 >> 2] = $636; //@line 2291
       HEAP32[$636 + 8 >> 2] = $636; //@line 2293
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 2298
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 2299
      $1043 = HEAP32[1973] | 0; //@line 2300
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 2306
       HEAP32[$1041 >> 2] = $636; //@line 2307
       HEAP32[$636 + 8 >> 2] = $1042; //@line 2309
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 2311
       HEAP32[$636 + 24 >> 2] = 0; //@line 2313
       break;
      } else {
       _abort(); //@line 2316
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[1972] | 0; //@line 2323
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 2326
   HEAP32[1972] = $1054; //@line 2327
   $1055 = HEAP32[1975] | 0; //@line 2328
   $1056 = $1055 + $$0197 | 0; //@line 2329
   HEAP32[1975] = $1056; //@line 2330
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 2333
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 2336
   $$0 = $1055 + 8 | 0; //@line 2338
   STACKTOP = sp; //@line 2339
   return $$0 | 0; //@line 2339
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 2343
 $$0 = 0; //@line 2344
 STACKTOP = sp; //@line 2345
 return $$0 | 0; //@line 2345
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_142($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $214 = 0, $215 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $286 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 11936
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11938
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11940
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11942
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11944
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11946
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11948
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11950
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11952
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11954
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11956
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11958
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11960
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11962
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11964
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11966
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11968
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11970
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 11972
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11974
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 11976
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 11978
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 11980
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 11982
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 11984
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 11986
 $150 = HEAP32[$16 >> 2] | 0; //@line 11987
 if ($150 | 0) {
  $153 = HEAP32[$150 + 8 >> 2] | 0; //@line 11991
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(104) | 0; //@line 11992
  FUNCTION_TABLE_vi[$153 & 511]($24); //@line 11993
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 11996
   $154 = $ReallocAsyncCtx2 + 4 | 0; //@line 11997
   HEAP32[$154 >> 2] = $2; //@line 11998
   $155 = $ReallocAsyncCtx2 + 8 | 0; //@line 11999
   HEAP32[$155 >> 2] = $4; //@line 12000
   $156 = $ReallocAsyncCtx2 + 12 | 0; //@line 12001
   HEAP32[$156 >> 2] = $6; //@line 12002
   $157 = $ReallocAsyncCtx2 + 16 | 0; //@line 12003
   HEAP32[$157 >> 2] = $8; //@line 12004
   $158 = $ReallocAsyncCtx2 + 20 | 0; //@line 12005
   HEAP32[$158 >> 2] = $10; //@line 12006
   $159 = $ReallocAsyncCtx2 + 24 | 0; //@line 12007
   HEAP32[$159 >> 2] = $12; //@line 12008
   $160 = $ReallocAsyncCtx2 + 28 | 0; //@line 12009
   HEAP32[$160 >> 2] = $14; //@line 12010
   $161 = $ReallocAsyncCtx2 + 32 | 0; //@line 12011
   HEAP32[$161 >> 2] = $16; //@line 12012
   $162 = $ReallocAsyncCtx2 + 36 | 0; //@line 12013
   HEAP32[$162 >> 2] = $18; //@line 12014
   $163 = $ReallocAsyncCtx2 + 40 | 0; //@line 12015
   HEAP32[$163 >> 2] = $20; //@line 12016
   $164 = $ReallocAsyncCtx2 + 44 | 0; //@line 12017
   HEAP32[$164 >> 2] = $22; //@line 12018
   $165 = $ReallocAsyncCtx2 + 48 | 0; //@line 12019
   HEAP32[$165 >> 2] = $24; //@line 12020
   $166 = $ReallocAsyncCtx2 + 52 | 0; //@line 12021
   HEAP32[$166 >> 2] = $26; //@line 12022
   $167 = $ReallocAsyncCtx2 + 56 | 0; //@line 12023
   HEAP32[$167 >> 2] = $46; //@line 12024
   $168 = $ReallocAsyncCtx2 + 60 | 0; //@line 12025
   HEAP32[$168 >> 2] = $28; //@line 12026
   $169 = $ReallocAsyncCtx2 + 64 | 0; //@line 12027
   HEAP32[$169 >> 2] = $30; //@line 12028
   $170 = $ReallocAsyncCtx2 + 68 | 0; //@line 12029
   HEAP32[$170 >> 2] = $32; //@line 12030
   $171 = $ReallocAsyncCtx2 + 72 | 0; //@line 12031
   HEAP32[$171 >> 2] = $34; //@line 12032
   $172 = $ReallocAsyncCtx2 + 76 | 0; //@line 12033
   HEAP32[$172 >> 2] = $36; //@line 12034
   $173 = $ReallocAsyncCtx2 + 80 | 0; //@line 12035
   HEAP32[$173 >> 2] = $38; //@line 12036
   $174 = $ReallocAsyncCtx2 + 84 | 0; //@line 12037
   HEAP32[$174 >> 2] = $40; //@line 12038
   $175 = $ReallocAsyncCtx2 + 88 | 0; //@line 12039
   HEAP32[$175 >> 2] = $42; //@line 12040
   $176 = $ReallocAsyncCtx2 + 92 | 0; //@line 12041
   HEAP32[$176 >> 2] = $44; //@line 12042
   $177 = $ReallocAsyncCtx2 + 96 | 0; //@line 12043
   HEAP32[$177 >> 2] = $48; //@line 12044
   $178 = $ReallocAsyncCtx2 + 100 | 0; //@line 12045
   HEAP32[$178 >> 2] = $50; //@line 12046
   sp = STACKTOP; //@line 12047
   return;
  }
  ___async_unwind = 0; //@line 12050
  HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 12051
  $154 = $ReallocAsyncCtx2 + 4 | 0; //@line 12052
  HEAP32[$154 >> 2] = $2; //@line 12053
  $155 = $ReallocAsyncCtx2 + 8 | 0; //@line 12054
  HEAP32[$155 >> 2] = $4; //@line 12055
  $156 = $ReallocAsyncCtx2 + 12 | 0; //@line 12056
  HEAP32[$156 >> 2] = $6; //@line 12057
  $157 = $ReallocAsyncCtx2 + 16 | 0; //@line 12058
  HEAP32[$157 >> 2] = $8; //@line 12059
  $158 = $ReallocAsyncCtx2 + 20 | 0; //@line 12060
  HEAP32[$158 >> 2] = $10; //@line 12061
  $159 = $ReallocAsyncCtx2 + 24 | 0; //@line 12062
  HEAP32[$159 >> 2] = $12; //@line 12063
  $160 = $ReallocAsyncCtx2 + 28 | 0; //@line 12064
  HEAP32[$160 >> 2] = $14; //@line 12065
  $161 = $ReallocAsyncCtx2 + 32 | 0; //@line 12066
  HEAP32[$161 >> 2] = $16; //@line 12067
  $162 = $ReallocAsyncCtx2 + 36 | 0; //@line 12068
  HEAP32[$162 >> 2] = $18; //@line 12069
  $163 = $ReallocAsyncCtx2 + 40 | 0; //@line 12070
  HEAP32[$163 >> 2] = $20; //@line 12071
  $164 = $ReallocAsyncCtx2 + 44 | 0; //@line 12072
  HEAP32[$164 >> 2] = $22; //@line 12073
  $165 = $ReallocAsyncCtx2 + 48 | 0; //@line 12074
  HEAP32[$165 >> 2] = $24; //@line 12075
  $166 = $ReallocAsyncCtx2 + 52 | 0; //@line 12076
  HEAP32[$166 >> 2] = $26; //@line 12077
  $167 = $ReallocAsyncCtx2 + 56 | 0; //@line 12078
  HEAP32[$167 >> 2] = $46; //@line 12079
  $168 = $ReallocAsyncCtx2 + 60 | 0; //@line 12080
  HEAP32[$168 >> 2] = $28; //@line 12081
  $169 = $ReallocAsyncCtx2 + 64 | 0; //@line 12082
  HEAP32[$169 >> 2] = $30; //@line 12083
  $170 = $ReallocAsyncCtx2 + 68 | 0; //@line 12084
  HEAP32[$170 >> 2] = $32; //@line 12085
  $171 = $ReallocAsyncCtx2 + 72 | 0; //@line 12086
  HEAP32[$171 >> 2] = $34; //@line 12087
  $172 = $ReallocAsyncCtx2 + 76 | 0; //@line 12088
  HEAP32[$172 >> 2] = $36; //@line 12089
  $173 = $ReallocAsyncCtx2 + 80 | 0; //@line 12090
  HEAP32[$173 >> 2] = $38; //@line 12091
  $174 = $ReallocAsyncCtx2 + 84 | 0; //@line 12092
  HEAP32[$174 >> 2] = $40; //@line 12093
  $175 = $ReallocAsyncCtx2 + 88 | 0; //@line 12094
  HEAP32[$175 >> 2] = $42; //@line 12095
  $176 = $ReallocAsyncCtx2 + 92 | 0; //@line 12096
  HEAP32[$176 >> 2] = $44; //@line 12097
  $177 = $ReallocAsyncCtx2 + 96 | 0; //@line 12098
  HEAP32[$177 >> 2] = $48; //@line 12099
  $178 = $ReallocAsyncCtx2 + 100 | 0; //@line 12100
  HEAP32[$178 >> 2] = $50; //@line 12101
  sp = STACKTOP; //@line 12102
  return;
 }
 $179 = HEAP32[$4 >> 2] | 0; //@line 12105
 if (!$179) {
  $$02972$reg2mem$0 = $50; //@line 12108
  $$03071$reg2mem$0 = $48; //@line 12108
  $$reg2mem$0 = $46; //@line 12108
 } else {
  $182 = HEAP32[$179 + 8 >> 2] | 0; //@line 12111
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 12112
  FUNCTION_TABLE_vi[$182 & 511]($2); //@line 12113
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 191; //@line 12116
   $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 12117
   HEAP32[$183 >> 2] = $2; //@line 12118
   $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 12119
   HEAP32[$184 >> 2] = $4; //@line 12120
   $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 12121
   HEAP32[$185 >> 2] = $6; //@line 12122
   $186 = $ReallocAsyncCtx3 + 16 | 0; //@line 12123
   HEAP32[$186 >> 2] = $8; //@line 12124
   $187 = $ReallocAsyncCtx3 + 20 | 0; //@line 12125
   HEAP32[$187 >> 2] = $10; //@line 12126
   $188 = $ReallocAsyncCtx3 + 24 | 0; //@line 12127
   HEAP32[$188 >> 2] = $12; //@line 12128
   $189 = $ReallocAsyncCtx3 + 28 | 0; //@line 12129
   HEAP32[$189 >> 2] = $14; //@line 12130
   $190 = $ReallocAsyncCtx3 + 32 | 0; //@line 12131
   HEAP32[$190 >> 2] = $16; //@line 12132
   $191 = $ReallocAsyncCtx3 + 36 | 0; //@line 12133
   HEAP32[$191 >> 2] = $18; //@line 12134
   $192 = $ReallocAsyncCtx3 + 40 | 0; //@line 12135
   HEAP32[$192 >> 2] = $20; //@line 12136
   $193 = $ReallocAsyncCtx3 + 44 | 0; //@line 12137
   HEAP32[$193 >> 2] = $22; //@line 12138
   $194 = $ReallocAsyncCtx3 + 48 | 0; //@line 12139
   HEAP32[$194 >> 2] = $24; //@line 12140
   $195 = $ReallocAsyncCtx3 + 52 | 0; //@line 12141
   HEAP32[$195 >> 2] = $26; //@line 12142
   $196 = $ReallocAsyncCtx3 + 56 | 0; //@line 12143
   HEAP32[$196 >> 2] = $46; //@line 12144
   $197 = $ReallocAsyncCtx3 + 60 | 0; //@line 12145
   HEAP32[$197 >> 2] = $28; //@line 12146
   $198 = $ReallocAsyncCtx3 + 64 | 0; //@line 12147
   HEAP32[$198 >> 2] = $30; //@line 12148
   $199 = $ReallocAsyncCtx3 + 68 | 0; //@line 12149
   HEAP32[$199 >> 2] = $32; //@line 12150
   $200 = $ReallocAsyncCtx3 + 72 | 0; //@line 12151
   HEAP32[$200 >> 2] = $34; //@line 12152
   $201 = $ReallocAsyncCtx3 + 76 | 0; //@line 12153
   HEAP32[$201 >> 2] = $36; //@line 12154
   $202 = $ReallocAsyncCtx3 + 80 | 0; //@line 12155
   HEAP32[$202 >> 2] = $38; //@line 12156
   $203 = $ReallocAsyncCtx3 + 84 | 0; //@line 12157
   HEAP32[$203 >> 2] = $40; //@line 12158
   $204 = $ReallocAsyncCtx3 + 88 | 0; //@line 12159
   HEAP32[$204 >> 2] = $42; //@line 12160
   $205 = $ReallocAsyncCtx3 + 92 | 0; //@line 12161
   HEAP32[$205 >> 2] = $44; //@line 12162
   $206 = $ReallocAsyncCtx3 + 96 | 0; //@line 12163
   HEAP32[$206 >> 2] = $48; //@line 12164
   $207 = $ReallocAsyncCtx3 + 100 | 0; //@line 12165
   HEAP32[$207 >> 2] = $50; //@line 12166
   sp = STACKTOP; //@line 12167
   return;
  }
  ___async_unwind = 0; //@line 12170
  HEAP32[$ReallocAsyncCtx3 >> 2] = 191; //@line 12171
  $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 12172
  HEAP32[$183 >> 2] = $2; //@line 12173
  $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 12174
  HEAP32[$184 >> 2] = $4; //@line 12175
  $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 12176
  HEAP32[$185 >> 2] = $6; //@line 12177
  $186 = $ReallocAsyncCtx3 + 16 | 0; //@line 12178
  HEAP32[$186 >> 2] = $8; //@line 12179
  $187 = $ReallocAsyncCtx3 + 20 | 0; //@line 12180
  HEAP32[$187 >> 2] = $10; //@line 12181
  $188 = $ReallocAsyncCtx3 + 24 | 0; //@line 12182
  HEAP32[$188 >> 2] = $12; //@line 12183
  $189 = $ReallocAsyncCtx3 + 28 | 0; //@line 12184
  HEAP32[$189 >> 2] = $14; //@line 12185
  $190 = $ReallocAsyncCtx3 + 32 | 0; //@line 12186
  HEAP32[$190 >> 2] = $16; //@line 12187
  $191 = $ReallocAsyncCtx3 + 36 | 0; //@line 12188
  HEAP32[$191 >> 2] = $18; //@line 12189
  $192 = $ReallocAsyncCtx3 + 40 | 0; //@line 12190
  HEAP32[$192 >> 2] = $20; //@line 12191
  $193 = $ReallocAsyncCtx3 + 44 | 0; //@line 12192
  HEAP32[$193 >> 2] = $22; //@line 12193
  $194 = $ReallocAsyncCtx3 + 48 | 0; //@line 12194
  HEAP32[$194 >> 2] = $24; //@line 12195
  $195 = $ReallocAsyncCtx3 + 52 | 0; //@line 12196
  HEAP32[$195 >> 2] = $26; //@line 12197
  $196 = $ReallocAsyncCtx3 + 56 | 0; //@line 12198
  HEAP32[$196 >> 2] = $46; //@line 12199
  $197 = $ReallocAsyncCtx3 + 60 | 0; //@line 12200
  HEAP32[$197 >> 2] = $28; //@line 12201
  $198 = $ReallocAsyncCtx3 + 64 | 0; //@line 12202
  HEAP32[$198 >> 2] = $30; //@line 12203
  $199 = $ReallocAsyncCtx3 + 68 | 0; //@line 12204
  HEAP32[$199 >> 2] = $32; //@line 12205
  $200 = $ReallocAsyncCtx3 + 72 | 0; //@line 12206
  HEAP32[$200 >> 2] = $34; //@line 12207
  $201 = $ReallocAsyncCtx3 + 76 | 0; //@line 12208
  HEAP32[$201 >> 2] = $36; //@line 12209
  $202 = $ReallocAsyncCtx3 + 80 | 0; //@line 12210
  HEAP32[$202 >> 2] = $38; //@line 12211
  $203 = $ReallocAsyncCtx3 + 84 | 0; //@line 12212
  HEAP32[$203 >> 2] = $40; //@line 12213
  $204 = $ReallocAsyncCtx3 + 88 | 0; //@line 12214
  HEAP32[$204 >> 2] = $42; //@line 12215
  $205 = $ReallocAsyncCtx3 + 92 | 0; //@line 12216
  HEAP32[$205 >> 2] = $44; //@line 12217
  $206 = $ReallocAsyncCtx3 + 96 | 0; //@line 12218
  HEAP32[$206 >> 2] = $48; //@line 12219
  $207 = $ReallocAsyncCtx3 + 100 | 0; //@line 12220
  HEAP32[$207 >> 2] = $50; //@line 12221
  sp = STACKTOP; //@line 12222
  return;
 }
 L15 : while (1) {
  $208 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 12226
  $209 = $208 + 76 | 0; //@line 12227
  $210 = HEAP32[$209 >> 2] | 0; //@line 12228
  if ($210 | 0) {
   if ($210 >>> 0 <= 100) {
    label = 29; //@line 12233
    break;
   }
   HEAP32[$209 >> 2] = $210 + -100; //@line 12237
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 12242
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 12242
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 12244
   $$131 = $$03071$reg2mem$0; //@line 12244
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 12247
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 12250
    break L15;
   }
   $52 = 7844 + ($$02972$reg2mem$1 << 2) | 0; //@line 12253
   $54 = HEAP32[$52 >> 2] | 0; //@line 12254
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 12266
   break;
  }
  $84 = $54 + 72 | 0; //@line 12269
  $85 = HEAP32[$84 >> 2] | 0; //@line 12270
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 12274
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 12275
   $$03071$reg2mem$0 = $$131; //@line 12275
   $$reg2mem$0 = $52; //@line 12275
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 12282
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 12285
    $$03071$reg2mem$0 = $$131; //@line 12285
    $$reg2mem$0 = $52; //@line 12285
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8724] = 0; //@line 12293
   return;
  }
  $275 = $$131 + 44 | 0; //@line 12296
  $276 = HEAP32[$275 >> 2] | 0; //@line 12297
  if (!$276) {
   $284 = $22 + 12 | 0; //@line 12300
   HEAP32[$284 >> 2] = 0; //@line 12301
   $286 = $26 + 4 | 0; //@line 12303
   HEAP32[$286 >> 2] = 0; //@line 12305
   HEAP32[$286 + 4 >> 2] = 0; //@line 12308
   HEAP32[$26 >> 2] = 3; //@line 12309
   $290 = $26 + 12 | 0; //@line 12310
   HEAP32[$290 >> 2] = 752; //@line 12311
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 12312
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 100, $26) | 0; //@line 12313
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 12316
    $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 12317
    HEAP32[$291 >> 2] = $290; //@line 12318
    $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 12319
    HEAP32[$292 >> 2] = $284; //@line 12320
    $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 12321
    HEAP32[$293 >> 2] = $26; //@line 12322
    $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 12323
    HEAP32[$294 >> 2] = $22; //@line 12324
    sp = STACKTOP; //@line 12325
    return;
   }
   ___async_unwind = 0; //@line 12328
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 12329
   $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 12330
   HEAP32[$291 >> 2] = $290; //@line 12331
   $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 12332
   HEAP32[$292 >> 2] = $284; //@line 12333
   $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 12334
   HEAP32[$293 >> 2] = $26; //@line 12335
   $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 12336
   HEAP32[$294 >> 2] = $22; //@line 12337
   sp = STACKTOP; //@line 12338
   return;
  } else {
   $280 = HEAP32[$276 + 4 >> 2] | 0; //@line 12343
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 12344
   FUNCTION_TABLE_vii[$280 & 7]($22, $$131 + 32 | 0); //@line 12345
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 12348
    $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 12349
    HEAP32[$281 >> 2] = $275; //@line 12350
    $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 12351
    HEAP32[$282 >> 2] = $22; //@line 12352
    $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 12353
    HEAP32[$283 >> 2] = $26; //@line 12354
    sp = STACKTOP; //@line 12355
    return;
   }
   ___async_unwind = 0; //@line 12358
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 12359
   $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 12360
   HEAP32[$281 >> 2] = $275; //@line 12361
   $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 12362
   HEAP32[$282 >> 2] = $22; //@line 12363
   $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 12364
   HEAP32[$283 >> 2] = $26; //@line 12365
   sp = STACKTOP; //@line 12366
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 12371
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 12372
  __ZL28nsapi_dns_query_async_deletei($59); //@line 12373
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 12376
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 12377
   HEAP32[$60 >> 2] = $2; //@line 12378
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 12379
   HEAP32[$61 >> 2] = $4; //@line 12380
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 12381
   HEAP32[$62 >> 2] = $6; //@line 12382
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 12383
   HEAP32[$63 >> 2] = $8; //@line 12384
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 12385
   HEAP32[$64 >> 2] = $10; //@line 12386
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 12387
   HEAP32[$65 >> 2] = $12; //@line 12388
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 12389
   HEAP32[$66 >> 2] = $14; //@line 12390
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 12391
   HEAP32[$67 >> 2] = $16; //@line 12392
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 12393
   HEAP32[$68 >> 2] = $18; //@line 12394
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 12395
   HEAP32[$69 >> 2] = $20; //@line 12396
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 12397
   HEAP32[$70 >> 2] = $22; //@line 12398
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 12399
   HEAP32[$71 >> 2] = $24; //@line 12400
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 12401
   HEAP32[$72 >> 2] = $26; //@line 12402
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 12403
   HEAP32[$73 >> 2] = $28; //@line 12404
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 12405
   HEAP32[$74 >> 2] = $30; //@line 12406
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 12407
   HEAP32[$75 >> 2] = $32; //@line 12408
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 12409
   HEAP32[$76 >> 2] = $34; //@line 12410
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 12411
   HEAP32[$77 >> 2] = $36; //@line 12412
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 12413
   HEAP32[$78 >> 2] = $38; //@line 12414
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 12415
   HEAP32[$79 >> 2] = $40; //@line 12416
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 12417
   HEAP32[$80 >> 2] = $42; //@line 12418
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 12419
   HEAP32[$81 >> 2] = $44; //@line 12420
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 12421
   HEAP32[$82 >> 2] = $$131; //@line 12422
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 12423
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 12424
   sp = STACKTOP; //@line 12425
   return;
  }
  ___async_unwind = 0; //@line 12428
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 12429
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 12430
  HEAP32[$60 >> 2] = $2; //@line 12431
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 12432
  HEAP32[$61 >> 2] = $4; //@line 12433
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 12434
  HEAP32[$62 >> 2] = $6; //@line 12435
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 12436
  HEAP32[$63 >> 2] = $8; //@line 12437
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 12438
  HEAP32[$64 >> 2] = $10; //@line 12439
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 12440
  HEAP32[$65 >> 2] = $12; //@line 12441
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 12442
  HEAP32[$66 >> 2] = $14; //@line 12443
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 12444
  HEAP32[$67 >> 2] = $16; //@line 12445
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 12446
  HEAP32[$68 >> 2] = $18; //@line 12447
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 12448
  HEAP32[$69 >> 2] = $20; //@line 12449
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 12450
  HEAP32[$70 >> 2] = $22; //@line 12451
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 12452
  HEAP32[$71 >> 2] = $24; //@line 12453
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 12454
  HEAP32[$72 >> 2] = $26; //@line 12455
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 12456
  HEAP32[$73 >> 2] = $28; //@line 12457
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 12458
  HEAP32[$74 >> 2] = $30; //@line 12459
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 12460
  HEAP32[$75 >> 2] = $32; //@line 12461
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 12462
  HEAP32[$76 >> 2] = $34; //@line 12463
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 12464
  HEAP32[$77 >> 2] = $36; //@line 12465
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 12466
  HEAP32[$78 >> 2] = $38; //@line 12467
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 12468
  HEAP32[$79 >> 2] = $40; //@line 12469
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 12470
  HEAP32[$80 >> 2] = $42; //@line 12471
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 12472
  HEAP32[$81 >> 2] = $44; //@line 12473
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 12474
  HEAP32[$82 >> 2] = $$131; //@line 12475
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 12476
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 12477
  sp = STACKTOP; //@line 12478
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 12483
  $92 = $54 + 44 | 0; //@line 12484
  $93 = HEAP32[$92 >> 2] | 0; //@line 12485
  if (!$93) {
   HEAP32[$8 >> 2] = 0; //@line 12488
   $124 = HEAP32[$54 >> 2] | 0; //@line 12489
   HEAP32[$10 >> 2] = 0; //@line 12490
   HEAP32[$12 >> 2] = 188; //@line 12491
   HEAP32[$14 >> 2] = $124; //@line 12492
   HEAP32[$16 >> 2] = 764; //@line 12493
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 12494
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 0, $20) | 0; //@line 12495
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 12498
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 12499
    HEAP32[$125 >> 2] = $2; //@line 12500
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 12501
    HEAP32[$126 >> 2] = $4; //@line 12502
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 12503
    HEAP32[$127 >> 2] = $6; //@line 12504
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 12505
    HEAP32[$128 >> 2] = $8; //@line 12506
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 12507
    HEAP32[$129 >> 2] = $10; //@line 12508
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 12509
    HEAP32[$130 >> 2] = $12; //@line 12510
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 12511
    HEAP32[$131 >> 2] = $14; //@line 12512
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 12513
    HEAP32[$132 >> 2] = $16; //@line 12514
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 12515
    HEAP32[$133 >> 2] = $18; //@line 12516
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 12517
    HEAP32[$134 >> 2] = $20; //@line 12518
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 12519
    HEAP32[$135 >> 2] = $22; //@line 12520
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 12521
    HEAP32[$136 >> 2] = $24; //@line 12522
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 12523
    HEAP32[$137 >> 2] = $26; //@line 12524
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 12525
    HEAP32[$138 >> 2] = $28; //@line 12526
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 12527
    HEAP32[$139 >> 2] = $30; //@line 12528
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 12529
    HEAP32[$140 >> 2] = $32; //@line 12530
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 12531
    HEAP32[$141 >> 2] = $34; //@line 12532
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 12533
    HEAP32[$142 >> 2] = $36; //@line 12534
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 12535
    HEAP32[$143 >> 2] = $38; //@line 12536
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 12537
    HEAP32[$144 >> 2] = $40; //@line 12538
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 12539
    HEAP32[$145 >> 2] = $42; //@line 12540
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 12541
    HEAP32[$146 >> 2] = $44; //@line 12542
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 12543
    HEAP32[$147 >> 2] = $52; //@line 12544
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 12545
    HEAP32[$148 >> 2] = $$131; //@line 12546
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 12547
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 12548
    sp = STACKTOP; //@line 12549
    return;
   }
   ___async_unwind = 0; //@line 12552
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 12553
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 12554
   HEAP32[$125 >> 2] = $2; //@line 12555
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 12556
   HEAP32[$126 >> 2] = $4; //@line 12557
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 12558
   HEAP32[$127 >> 2] = $6; //@line 12559
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 12560
   HEAP32[$128 >> 2] = $8; //@line 12561
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 12562
   HEAP32[$129 >> 2] = $10; //@line 12563
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 12564
   HEAP32[$130 >> 2] = $12; //@line 12565
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 12566
   HEAP32[$131 >> 2] = $14; //@line 12567
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 12568
   HEAP32[$132 >> 2] = $16; //@line 12569
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 12570
   HEAP32[$133 >> 2] = $18; //@line 12571
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 12572
   HEAP32[$134 >> 2] = $20; //@line 12573
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 12574
   HEAP32[$135 >> 2] = $22; //@line 12575
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 12576
   HEAP32[$136 >> 2] = $24; //@line 12577
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 12578
   HEAP32[$137 >> 2] = $26; //@line 12579
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 12580
   HEAP32[$138 >> 2] = $28; //@line 12581
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 12582
   HEAP32[$139 >> 2] = $30; //@line 12583
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 12584
   HEAP32[$140 >> 2] = $32; //@line 12585
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 12586
   HEAP32[$141 >> 2] = $34; //@line 12587
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 12588
   HEAP32[$142 >> 2] = $36; //@line 12589
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 12590
   HEAP32[$143 >> 2] = $38; //@line 12591
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 12592
   HEAP32[$144 >> 2] = $40; //@line 12593
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 12594
   HEAP32[$145 >> 2] = $42; //@line 12595
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 12596
   HEAP32[$146 >> 2] = $44; //@line 12597
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 12598
   HEAP32[$147 >> 2] = $52; //@line 12599
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 12600
   HEAP32[$148 >> 2] = $$131; //@line 12601
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 12602
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 12603
   sp = STACKTOP; //@line 12604
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 12609
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 12610
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 12611
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 12614
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 12615
    HEAP32[$98 >> 2] = $2; //@line 12616
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 12617
    HEAP32[$99 >> 2] = $4; //@line 12618
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 12619
    HEAP32[$100 >> 2] = $6; //@line 12620
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 12621
    HEAP32[$101 >> 2] = $8; //@line 12622
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 12623
    HEAP32[$102 >> 2] = $10; //@line 12624
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 12625
    HEAP32[$103 >> 2] = $12; //@line 12626
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 12627
    HEAP32[$104 >> 2] = $14; //@line 12628
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 12629
    HEAP32[$105 >> 2] = $16; //@line 12630
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 12631
    HEAP32[$106 >> 2] = $18; //@line 12632
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 12633
    HEAP32[$107 >> 2] = $20; //@line 12634
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 12635
    HEAP32[$108 >> 2] = $22; //@line 12636
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 12637
    HEAP32[$109 >> 2] = $92; //@line 12638
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 12639
    HEAP32[$110 >> 2] = $52; //@line 12640
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 12641
    HEAP32[$111 >> 2] = $24; //@line 12642
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 12643
    HEAP32[$112 >> 2] = $26; //@line 12644
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 12645
    HEAP32[$113 >> 2] = $28; //@line 12646
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 12647
    HEAP32[$114 >> 2] = $30; //@line 12648
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 12649
    HEAP32[$115 >> 2] = $32; //@line 12650
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 12651
    HEAP32[$116 >> 2] = $34; //@line 12652
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 12653
    HEAP32[$117 >> 2] = $36; //@line 12654
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 12655
    HEAP32[$118 >> 2] = $38; //@line 12656
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 12657
    HEAP32[$119 >> 2] = $40; //@line 12658
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 12659
    HEAP32[$120 >> 2] = $42; //@line 12660
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 12661
    HEAP32[$121 >> 2] = $44; //@line 12662
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 12663
    HEAP32[$122 >> 2] = $$131; //@line 12664
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 12665
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 12666
    sp = STACKTOP; //@line 12667
    return;
   }
   ___async_unwind = 0; //@line 12670
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 12671
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 12672
   HEAP32[$98 >> 2] = $2; //@line 12673
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 12674
   HEAP32[$99 >> 2] = $4; //@line 12675
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 12676
   HEAP32[$100 >> 2] = $6; //@line 12677
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 12678
   HEAP32[$101 >> 2] = $8; //@line 12679
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 12680
   HEAP32[$102 >> 2] = $10; //@line 12681
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 12682
   HEAP32[$103 >> 2] = $12; //@line 12683
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 12684
   HEAP32[$104 >> 2] = $14; //@line 12685
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 12686
   HEAP32[$105 >> 2] = $16; //@line 12687
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 12688
   HEAP32[$106 >> 2] = $18; //@line 12689
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 12690
   HEAP32[$107 >> 2] = $20; //@line 12691
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 12692
   HEAP32[$108 >> 2] = $22; //@line 12693
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 12694
   HEAP32[$109 >> 2] = $92; //@line 12695
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 12696
   HEAP32[$110 >> 2] = $52; //@line 12697
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 12698
   HEAP32[$111 >> 2] = $24; //@line 12699
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 12700
   HEAP32[$112 >> 2] = $26; //@line 12701
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 12702
   HEAP32[$113 >> 2] = $28; //@line 12703
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 12704
   HEAP32[$114 >> 2] = $30; //@line 12705
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 12706
   HEAP32[$115 >> 2] = $32; //@line 12707
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 12708
   HEAP32[$116 >> 2] = $34; //@line 12709
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 12710
   HEAP32[$117 >> 2] = $36; //@line 12711
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 12712
   HEAP32[$118 >> 2] = $38; //@line 12713
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 12714
   HEAP32[$119 >> 2] = $40; //@line 12715
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 12716
   HEAP32[$120 >> 2] = $42; //@line 12717
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 12718
   HEAP32[$121 >> 2] = $44; //@line 12719
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 12720
   HEAP32[$122 >> 2] = $$131; //@line 12721
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 12722
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 12723
   sp = STACKTOP; //@line 12724
   return;
  }
 } else if ((label | 0) == 29) {
  HEAP32[$209 >> 2] = 0; //@line 12729
  $214 = $208 + 44 | 0; //@line 12730
  $215 = HEAP32[$214 >> 2] | 0; //@line 12731
  if (!$215) {
   HEAP32[$30 >> 2] = 0; //@line 12734
   $246 = HEAP32[$208 >> 2] | 0; //@line 12735
   HEAP32[$32 >> 2] = 0; //@line 12736
   HEAP32[$34 >> 2] = 193; //@line 12737
   HEAP32[$36 >> 2] = $246; //@line 12738
   HEAP32[$6 >> 2] = 764; //@line 12739
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 12740
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($38, 0, $40) | 0; //@line 12741
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 12744
    $247 = $ReallocAsyncCtx13 + 4 | 0; //@line 12745
    HEAP32[$247 >> 2] = $2; //@line 12746
    $248 = $ReallocAsyncCtx13 + 8 | 0; //@line 12747
    HEAP32[$248 >> 2] = $4; //@line 12748
    $249 = $ReallocAsyncCtx13 + 12 | 0; //@line 12749
    HEAP32[$249 >> 2] = $6; //@line 12750
    $250 = $ReallocAsyncCtx13 + 16 | 0; //@line 12751
    HEAP32[$250 >> 2] = $8; //@line 12752
    $251 = $ReallocAsyncCtx13 + 20 | 0; //@line 12753
    HEAP32[$251 >> 2] = $10; //@line 12754
    $252 = $ReallocAsyncCtx13 + 24 | 0; //@line 12755
    HEAP32[$252 >> 2] = $12; //@line 12756
    $253 = $ReallocAsyncCtx13 + 28 | 0; //@line 12757
    HEAP32[$253 >> 2] = $14; //@line 12758
    $254 = $ReallocAsyncCtx13 + 32 | 0; //@line 12759
    HEAP32[$254 >> 2] = $16; //@line 12760
    $255 = $ReallocAsyncCtx13 + 36 | 0; //@line 12761
    HEAP32[$255 >> 2] = $18; //@line 12762
    $256 = $ReallocAsyncCtx13 + 40 | 0; //@line 12763
    HEAP32[$256 >> 2] = $20; //@line 12764
    $257 = $ReallocAsyncCtx13 + 44 | 0; //@line 12765
    HEAP32[$257 >> 2] = $22; //@line 12766
    $258 = $ReallocAsyncCtx13 + 48 | 0; //@line 12767
    HEAP32[$258 >> 2] = $24; //@line 12768
    $259 = $ReallocAsyncCtx13 + 52 | 0; //@line 12769
    HEAP32[$259 >> 2] = $26; //@line 12770
    $260 = $ReallocAsyncCtx13 + 56 | 0; //@line 12771
    HEAP32[$260 >> 2] = $28; //@line 12772
    $261 = $ReallocAsyncCtx13 + 60 | 0; //@line 12773
    HEAP32[$261 >> 2] = $30; //@line 12774
    $262 = $ReallocAsyncCtx13 + 64 | 0; //@line 12775
    HEAP32[$262 >> 2] = $32; //@line 12776
    $263 = $ReallocAsyncCtx13 + 68 | 0; //@line 12777
    HEAP32[$263 >> 2] = $34; //@line 12778
    $264 = $ReallocAsyncCtx13 + 72 | 0; //@line 12779
    HEAP32[$264 >> 2] = $36; //@line 12780
    $265 = $ReallocAsyncCtx13 + 76 | 0; //@line 12781
    HEAP32[$265 >> 2] = $38; //@line 12782
    $266 = $ReallocAsyncCtx13 + 80 | 0; //@line 12783
    HEAP32[$266 >> 2] = $40; //@line 12784
    $267 = $ReallocAsyncCtx13 + 84 | 0; //@line 12785
    HEAP32[$267 >> 2] = $42; //@line 12786
    $268 = $ReallocAsyncCtx13 + 88 | 0; //@line 12787
    HEAP32[$268 >> 2] = $44; //@line 12788
    $269 = $ReallocAsyncCtx13 + 92 | 0; //@line 12789
    HEAP32[$269 >> 2] = $$03071$reg2mem$0; //@line 12790
    $270 = $ReallocAsyncCtx13 + 96 | 0; //@line 12791
    HEAP32[$270 >> 2] = $$02972$reg2mem$0; //@line 12792
    $271 = $ReallocAsyncCtx13 + 100 | 0; //@line 12793
    HEAP32[$271 >> 2] = $$reg2mem$0; //@line 12794
    sp = STACKTOP; //@line 12795
    return;
   }
   ___async_unwind = 0; //@line 12798
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 12799
   $247 = $ReallocAsyncCtx13 + 4 | 0; //@line 12800
   HEAP32[$247 >> 2] = $2; //@line 12801
   $248 = $ReallocAsyncCtx13 + 8 | 0; //@line 12802
   HEAP32[$248 >> 2] = $4; //@line 12803
   $249 = $ReallocAsyncCtx13 + 12 | 0; //@line 12804
   HEAP32[$249 >> 2] = $6; //@line 12805
   $250 = $ReallocAsyncCtx13 + 16 | 0; //@line 12806
   HEAP32[$250 >> 2] = $8; //@line 12807
   $251 = $ReallocAsyncCtx13 + 20 | 0; //@line 12808
   HEAP32[$251 >> 2] = $10; //@line 12809
   $252 = $ReallocAsyncCtx13 + 24 | 0; //@line 12810
   HEAP32[$252 >> 2] = $12; //@line 12811
   $253 = $ReallocAsyncCtx13 + 28 | 0; //@line 12812
   HEAP32[$253 >> 2] = $14; //@line 12813
   $254 = $ReallocAsyncCtx13 + 32 | 0; //@line 12814
   HEAP32[$254 >> 2] = $16; //@line 12815
   $255 = $ReallocAsyncCtx13 + 36 | 0; //@line 12816
   HEAP32[$255 >> 2] = $18; //@line 12817
   $256 = $ReallocAsyncCtx13 + 40 | 0; //@line 12818
   HEAP32[$256 >> 2] = $20; //@line 12819
   $257 = $ReallocAsyncCtx13 + 44 | 0; //@line 12820
   HEAP32[$257 >> 2] = $22; //@line 12821
   $258 = $ReallocAsyncCtx13 + 48 | 0; //@line 12822
   HEAP32[$258 >> 2] = $24; //@line 12823
   $259 = $ReallocAsyncCtx13 + 52 | 0; //@line 12824
   HEAP32[$259 >> 2] = $26; //@line 12825
   $260 = $ReallocAsyncCtx13 + 56 | 0; //@line 12826
   HEAP32[$260 >> 2] = $28; //@line 12827
   $261 = $ReallocAsyncCtx13 + 60 | 0; //@line 12828
   HEAP32[$261 >> 2] = $30; //@line 12829
   $262 = $ReallocAsyncCtx13 + 64 | 0; //@line 12830
   HEAP32[$262 >> 2] = $32; //@line 12831
   $263 = $ReallocAsyncCtx13 + 68 | 0; //@line 12832
   HEAP32[$263 >> 2] = $34; //@line 12833
   $264 = $ReallocAsyncCtx13 + 72 | 0; //@line 12834
   HEAP32[$264 >> 2] = $36; //@line 12835
   $265 = $ReallocAsyncCtx13 + 76 | 0; //@line 12836
   HEAP32[$265 >> 2] = $38; //@line 12837
   $266 = $ReallocAsyncCtx13 + 80 | 0; //@line 12838
   HEAP32[$266 >> 2] = $40; //@line 12839
   $267 = $ReallocAsyncCtx13 + 84 | 0; //@line 12840
   HEAP32[$267 >> 2] = $42; //@line 12841
   $268 = $ReallocAsyncCtx13 + 88 | 0; //@line 12842
   HEAP32[$268 >> 2] = $44; //@line 12843
   $269 = $ReallocAsyncCtx13 + 92 | 0; //@line 12844
   HEAP32[$269 >> 2] = $$03071$reg2mem$0; //@line 12845
   $270 = $ReallocAsyncCtx13 + 96 | 0; //@line 12846
   HEAP32[$270 >> 2] = $$02972$reg2mem$0; //@line 12847
   $271 = $ReallocAsyncCtx13 + 100 | 0; //@line 12848
   HEAP32[$271 >> 2] = $$reg2mem$0; //@line 12849
   sp = STACKTOP; //@line 12850
   return;
  } else {
   $219 = HEAP32[$215 + 4 >> 2] | 0; //@line 12855
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 12856
   FUNCTION_TABLE_vii[$219 & 7]($28, $208 + 32 | 0); //@line 12857
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 12860
    $220 = $ReallocAsyncCtx4 + 4 | 0; //@line 12861
    HEAP32[$220 >> 2] = $2; //@line 12862
    $221 = $ReallocAsyncCtx4 + 8 | 0; //@line 12863
    HEAP32[$221 >> 2] = $4; //@line 12864
    $222 = $ReallocAsyncCtx4 + 12 | 0; //@line 12865
    HEAP32[$222 >> 2] = $6; //@line 12866
    $223 = $ReallocAsyncCtx4 + 16 | 0; //@line 12867
    HEAP32[$223 >> 2] = $8; //@line 12868
    $224 = $ReallocAsyncCtx4 + 20 | 0; //@line 12869
    HEAP32[$224 >> 2] = $10; //@line 12870
    $225 = $ReallocAsyncCtx4 + 24 | 0; //@line 12871
    HEAP32[$225 >> 2] = $12; //@line 12872
    $226 = $ReallocAsyncCtx4 + 28 | 0; //@line 12873
    HEAP32[$226 >> 2] = $14; //@line 12874
    $227 = $ReallocAsyncCtx4 + 32 | 0; //@line 12875
    HEAP32[$227 >> 2] = $16; //@line 12876
    $228 = $ReallocAsyncCtx4 + 36 | 0; //@line 12877
    HEAP32[$228 >> 2] = $18; //@line 12878
    $229 = $ReallocAsyncCtx4 + 40 | 0; //@line 12879
    HEAP32[$229 >> 2] = $20; //@line 12880
    $230 = $ReallocAsyncCtx4 + 44 | 0; //@line 12881
    HEAP32[$230 >> 2] = $22; //@line 12882
    $231 = $ReallocAsyncCtx4 + 48 | 0; //@line 12883
    HEAP32[$231 >> 2] = $24; //@line 12884
    $232 = $ReallocAsyncCtx4 + 52 | 0; //@line 12885
    HEAP32[$232 >> 2] = $26; //@line 12886
    $233 = $ReallocAsyncCtx4 + 56 | 0; //@line 12887
    HEAP32[$233 >> 2] = $214; //@line 12888
    $234 = $ReallocAsyncCtx4 + 60 | 0; //@line 12889
    HEAP32[$234 >> 2] = $$reg2mem$0; //@line 12890
    $235 = $ReallocAsyncCtx4 + 64 | 0; //@line 12891
    HEAP32[$235 >> 2] = $28; //@line 12892
    $236 = $ReallocAsyncCtx4 + 68 | 0; //@line 12893
    HEAP32[$236 >> 2] = $30; //@line 12894
    $237 = $ReallocAsyncCtx4 + 72 | 0; //@line 12895
    HEAP32[$237 >> 2] = $32; //@line 12896
    $238 = $ReallocAsyncCtx4 + 76 | 0; //@line 12897
    HEAP32[$238 >> 2] = $34; //@line 12898
    $239 = $ReallocAsyncCtx4 + 80 | 0; //@line 12899
    HEAP32[$239 >> 2] = $36; //@line 12900
    $240 = $ReallocAsyncCtx4 + 84 | 0; //@line 12901
    HEAP32[$240 >> 2] = $38; //@line 12902
    $241 = $ReallocAsyncCtx4 + 88 | 0; //@line 12903
    HEAP32[$241 >> 2] = $40; //@line 12904
    $242 = $ReallocAsyncCtx4 + 92 | 0; //@line 12905
    HEAP32[$242 >> 2] = $42; //@line 12906
    $243 = $ReallocAsyncCtx4 + 96 | 0; //@line 12907
    HEAP32[$243 >> 2] = $44; //@line 12908
    $244 = $ReallocAsyncCtx4 + 100 | 0; //@line 12909
    HEAP32[$244 >> 2] = $$03071$reg2mem$0; //@line 12910
    $245 = $ReallocAsyncCtx4 + 104 | 0; //@line 12911
    HEAP32[$245 >> 2] = $$02972$reg2mem$0; //@line 12912
    sp = STACKTOP; //@line 12913
    return;
   }
   ___async_unwind = 0; //@line 12916
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 12917
   $220 = $ReallocAsyncCtx4 + 4 | 0; //@line 12918
   HEAP32[$220 >> 2] = $2; //@line 12919
   $221 = $ReallocAsyncCtx4 + 8 | 0; //@line 12920
   HEAP32[$221 >> 2] = $4; //@line 12921
   $222 = $ReallocAsyncCtx4 + 12 | 0; //@line 12922
   HEAP32[$222 >> 2] = $6; //@line 12923
   $223 = $ReallocAsyncCtx4 + 16 | 0; //@line 12924
   HEAP32[$223 >> 2] = $8; //@line 12925
   $224 = $ReallocAsyncCtx4 + 20 | 0; //@line 12926
   HEAP32[$224 >> 2] = $10; //@line 12927
   $225 = $ReallocAsyncCtx4 + 24 | 0; //@line 12928
   HEAP32[$225 >> 2] = $12; //@line 12929
   $226 = $ReallocAsyncCtx4 + 28 | 0; //@line 12930
   HEAP32[$226 >> 2] = $14; //@line 12931
   $227 = $ReallocAsyncCtx4 + 32 | 0; //@line 12932
   HEAP32[$227 >> 2] = $16; //@line 12933
   $228 = $ReallocAsyncCtx4 + 36 | 0; //@line 12934
   HEAP32[$228 >> 2] = $18; //@line 12935
   $229 = $ReallocAsyncCtx4 + 40 | 0; //@line 12936
   HEAP32[$229 >> 2] = $20; //@line 12937
   $230 = $ReallocAsyncCtx4 + 44 | 0; //@line 12938
   HEAP32[$230 >> 2] = $22; //@line 12939
   $231 = $ReallocAsyncCtx4 + 48 | 0; //@line 12940
   HEAP32[$231 >> 2] = $24; //@line 12941
   $232 = $ReallocAsyncCtx4 + 52 | 0; //@line 12942
   HEAP32[$232 >> 2] = $26; //@line 12943
   $233 = $ReallocAsyncCtx4 + 56 | 0; //@line 12944
   HEAP32[$233 >> 2] = $214; //@line 12945
   $234 = $ReallocAsyncCtx4 + 60 | 0; //@line 12946
   HEAP32[$234 >> 2] = $$reg2mem$0; //@line 12947
   $235 = $ReallocAsyncCtx4 + 64 | 0; //@line 12948
   HEAP32[$235 >> 2] = $28; //@line 12949
   $236 = $ReallocAsyncCtx4 + 68 | 0; //@line 12950
   HEAP32[$236 >> 2] = $30; //@line 12951
   $237 = $ReallocAsyncCtx4 + 72 | 0; //@line 12952
   HEAP32[$237 >> 2] = $32; //@line 12953
   $238 = $ReallocAsyncCtx4 + 76 | 0; //@line 12954
   HEAP32[$238 >> 2] = $34; //@line 12955
   $239 = $ReallocAsyncCtx4 + 80 | 0; //@line 12956
   HEAP32[$239 >> 2] = $36; //@line 12957
   $240 = $ReallocAsyncCtx4 + 84 | 0; //@line 12958
   HEAP32[$240 >> 2] = $38; //@line 12959
   $241 = $ReallocAsyncCtx4 + 88 | 0; //@line 12960
   HEAP32[$241 >> 2] = $40; //@line 12961
   $242 = $ReallocAsyncCtx4 + 92 | 0; //@line 12962
   HEAP32[$242 >> 2] = $42; //@line 12963
   $243 = $ReallocAsyncCtx4 + 96 | 0; //@line 12964
   HEAP32[$243 >> 2] = $44; //@line 12965
   $244 = $ReallocAsyncCtx4 + 100 | 0; //@line 12966
   HEAP32[$244 >> 2] = $$03071$reg2mem$0; //@line 12967
   $245 = $ReallocAsyncCtx4 + 104 | 0; //@line 12968
   HEAP32[$245 >> 2] = $$02972$reg2mem$0; //@line 12969
   sp = STACKTOP; //@line 12970
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_141($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $286 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 10881
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10883
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10885
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10887
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10889
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10891
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10893
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10895
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10897
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10899
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10901
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10903
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10905
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10907
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10909
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10911
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 10913
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 10915
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 10917
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 10919
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 10921
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 10923
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 10925
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 10927
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 10929
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 10931
 $214 = HEAP32[$6 >> 2] | 0; //@line 10932
 if ($214 | 0) {
  $217 = HEAP32[$214 + 8 >> 2] | 0; //@line 10936
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(104) | 0; //@line 10937
  FUNCTION_TABLE_vi[$217 & 511]($44); //@line 10938
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 195; //@line 10941
   $218 = $ReallocAsyncCtx5 + 4 | 0; //@line 10942
   HEAP32[$218 >> 2] = $2; //@line 10943
   $219 = $ReallocAsyncCtx5 + 8 | 0; //@line 10944
   HEAP32[$219 >> 2] = $4; //@line 10945
   $220 = $ReallocAsyncCtx5 + 12 | 0; //@line 10946
   HEAP32[$220 >> 2] = $6; //@line 10947
   $221 = $ReallocAsyncCtx5 + 16 | 0; //@line 10948
   HEAP32[$221 >> 2] = $8; //@line 10949
   $222 = $ReallocAsyncCtx5 + 20 | 0; //@line 10950
   HEAP32[$222 >> 2] = $10; //@line 10951
   $223 = $ReallocAsyncCtx5 + 24 | 0; //@line 10952
   HEAP32[$223 >> 2] = $12; //@line 10953
   $224 = $ReallocAsyncCtx5 + 28 | 0; //@line 10954
   HEAP32[$224 >> 2] = $14; //@line 10955
   $225 = $ReallocAsyncCtx5 + 32 | 0; //@line 10956
   HEAP32[$225 >> 2] = $16; //@line 10957
   $226 = $ReallocAsyncCtx5 + 36 | 0; //@line 10958
   HEAP32[$226 >> 2] = $18; //@line 10959
   $227 = $ReallocAsyncCtx5 + 40 | 0; //@line 10960
   HEAP32[$227 >> 2] = $20; //@line 10961
   $228 = $ReallocAsyncCtx5 + 44 | 0; //@line 10962
   HEAP32[$228 >> 2] = $22; //@line 10963
   $229 = $ReallocAsyncCtx5 + 48 | 0; //@line 10964
   HEAP32[$229 >> 2] = $24; //@line 10965
   $230 = $ReallocAsyncCtx5 + 52 | 0; //@line 10966
   HEAP32[$230 >> 2] = $26; //@line 10967
   $231 = $ReallocAsyncCtx5 + 56 | 0; //@line 10968
   HEAP32[$231 >> 2] = $28; //@line 10969
   $232 = $ReallocAsyncCtx5 + 60 | 0; //@line 10970
   HEAP32[$232 >> 2] = $30; //@line 10971
   $233 = $ReallocAsyncCtx5 + 64 | 0; //@line 10972
   HEAP32[$233 >> 2] = $32; //@line 10973
   $234 = $ReallocAsyncCtx5 + 68 | 0; //@line 10974
   HEAP32[$234 >> 2] = $34; //@line 10975
   $235 = $ReallocAsyncCtx5 + 72 | 0; //@line 10976
   HEAP32[$235 >> 2] = $36; //@line 10977
   $236 = $ReallocAsyncCtx5 + 76 | 0; //@line 10978
   HEAP32[$236 >> 2] = $38; //@line 10979
   $237 = $ReallocAsyncCtx5 + 80 | 0; //@line 10980
   HEAP32[$237 >> 2] = $40; //@line 10981
   $238 = $ReallocAsyncCtx5 + 84 | 0; //@line 10982
   HEAP32[$238 >> 2] = $42; //@line 10983
   $239 = $ReallocAsyncCtx5 + 88 | 0; //@line 10984
   HEAP32[$239 >> 2] = $44; //@line 10985
   $240 = $ReallocAsyncCtx5 + 92 | 0; //@line 10986
   HEAP32[$240 >> 2] = $46; //@line 10987
   $241 = $ReallocAsyncCtx5 + 96 | 0; //@line 10988
   HEAP32[$241 >> 2] = $48; //@line 10989
   $242 = $ReallocAsyncCtx5 + 100 | 0; //@line 10990
   HEAP32[$242 >> 2] = $50; //@line 10991
   sp = STACKTOP; //@line 10992
   return;
  }
  ___async_unwind = 0; //@line 10995
  HEAP32[$ReallocAsyncCtx5 >> 2] = 195; //@line 10996
  $218 = $ReallocAsyncCtx5 + 4 | 0; //@line 10997
  HEAP32[$218 >> 2] = $2; //@line 10998
  $219 = $ReallocAsyncCtx5 + 8 | 0; //@line 10999
  HEAP32[$219 >> 2] = $4; //@line 11000
  $220 = $ReallocAsyncCtx5 + 12 | 0; //@line 11001
  HEAP32[$220 >> 2] = $6; //@line 11002
  $221 = $ReallocAsyncCtx5 + 16 | 0; //@line 11003
  HEAP32[$221 >> 2] = $8; //@line 11004
  $222 = $ReallocAsyncCtx5 + 20 | 0; //@line 11005
  HEAP32[$222 >> 2] = $10; //@line 11006
  $223 = $ReallocAsyncCtx5 + 24 | 0; //@line 11007
  HEAP32[$223 >> 2] = $12; //@line 11008
  $224 = $ReallocAsyncCtx5 + 28 | 0; //@line 11009
  HEAP32[$224 >> 2] = $14; //@line 11010
  $225 = $ReallocAsyncCtx5 + 32 | 0; //@line 11011
  HEAP32[$225 >> 2] = $16; //@line 11012
  $226 = $ReallocAsyncCtx5 + 36 | 0; //@line 11013
  HEAP32[$226 >> 2] = $18; //@line 11014
  $227 = $ReallocAsyncCtx5 + 40 | 0; //@line 11015
  HEAP32[$227 >> 2] = $20; //@line 11016
  $228 = $ReallocAsyncCtx5 + 44 | 0; //@line 11017
  HEAP32[$228 >> 2] = $22; //@line 11018
  $229 = $ReallocAsyncCtx5 + 48 | 0; //@line 11019
  HEAP32[$229 >> 2] = $24; //@line 11020
  $230 = $ReallocAsyncCtx5 + 52 | 0; //@line 11021
  HEAP32[$230 >> 2] = $26; //@line 11022
  $231 = $ReallocAsyncCtx5 + 56 | 0; //@line 11023
  HEAP32[$231 >> 2] = $28; //@line 11024
  $232 = $ReallocAsyncCtx5 + 60 | 0; //@line 11025
  HEAP32[$232 >> 2] = $30; //@line 11026
  $233 = $ReallocAsyncCtx5 + 64 | 0; //@line 11027
  HEAP32[$233 >> 2] = $32; //@line 11028
  $234 = $ReallocAsyncCtx5 + 68 | 0; //@line 11029
  HEAP32[$234 >> 2] = $34; //@line 11030
  $235 = $ReallocAsyncCtx5 + 72 | 0; //@line 11031
  HEAP32[$235 >> 2] = $36; //@line 11032
  $236 = $ReallocAsyncCtx5 + 76 | 0; //@line 11033
  HEAP32[$236 >> 2] = $38; //@line 11034
  $237 = $ReallocAsyncCtx5 + 80 | 0; //@line 11035
  HEAP32[$237 >> 2] = $40; //@line 11036
  $238 = $ReallocAsyncCtx5 + 84 | 0; //@line 11037
  HEAP32[$238 >> 2] = $42; //@line 11038
  $239 = $ReallocAsyncCtx5 + 88 | 0; //@line 11039
  HEAP32[$239 >> 2] = $44; //@line 11040
  $240 = $ReallocAsyncCtx5 + 92 | 0; //@line 11041
  HEAP32[$240 >> 2] = $46; //@line 11042
  $241 = $ReallocAsyncCtx5 + 96 | 0; //@line 11043
  HEAP32[$241 >> 2] = $48; //@line 11044
  $242 = $ReallocAsyncCtx5 + 100 | 0; //@line 11045
  HEAP32[$242 >> 2] = $50; //@line 11046
  sp = STACKTOP; //@line 11047
  return;
 }
 $243 = HEAP32[$42 >> 2] | 0; //@line 11050
 if (!$243) {
  $$02972$reg2mem$0 = $48; //@line 11053
  $$03071$reg2mem$0 = $46; //@line 11053
  $$reg2mem$0 = $50; //@line 11053
 } else {
  $246 = HEAP32[$243 + 8 >> 2] | 0; //@line 11056
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 11057
  FUNCTION_TABLE_vi[$246 & 511]($28); //@line 11058
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 196; //@line 11061
   $247 = $ReallocAsyncCtx6 + 4 | 0; //@line 11062
   HEAP32[$247 >> 2] = $2; //@line 11063
   $248 = $ReallocAsyncCtx6 + 8 | 0; //@line 11064
   HEAP32[$248 >> 2] = $4; //@line 11065
   $249 = $ReallocAsyncCtx6 + 12 | 0; //@line 11066
   HEAP32[$249 >> 2] = $6; //@line 11067
   $250 = $ReallocAsyncCtx6 + 16 | 0; //@line 11068
   HEAP32[$250 >> 2] = $8; //@line 11069
   $251 = $ReallocAsyncCtx6 + 20 | 0; //@line 11070
   HEAP32[$251 >> 2] = $10; //@line 11071
   $252 = $ReallocAsyncCtx6 + 24 | 0; //@line 11072
   HEAP32[$252 >> 2] = $12; //@line 11073
   $253 = $ReallocAsyncCtx6 + 28 | 0; //@line 11074
   HEAP32[$253 >> 2] = $14; //@line 11075
   $254 = $ReallocAsyncCtx6 + 32 | 0; //@line 11076
   HEAP32[$254 >> 2] = $16; //@line 11077
   $255 = $ReallocAsyncCtx6 + 36 | 0; //@line 11078
   HEAP32[$255 >> 2] = $18; //@line 11079
   $256 = $ReallocAsyncCtx6 + 40 | 0; //@line 11080
   HEAP32[$256 >> 2] = $20; //@line 11081
   $257 = $ReallocAsyncCtx6 + 44 | 0; //@line 11082
   HEAP32[$257 >> 2] = $22; //@line 11083
   $258 = $ReallocAsyncCtx6 + 48 | 0; //@line 11084
   HEAP32[$258 >> 2] = $24; //@line 11085
   $259 = $ReallocAsyncCtx6 + 52 | 0; //@line 11086
   HEAP32[$259 >> 2] = $26; //@line 11087
   $260 = $ReallocAsyncCtx6 + 56 | 0; //@line 11088
   HEAP32[$260 >> 2] = $28; //@line 11089
   $261 = $ReallocAsyncCtx6 + 60 | 0; //@line 11090
   HEAP32[$261 >> 2] = $30; //@line 11091
   $262 = $ReallocAsyncCtx6 + 64 | 0; //@line 11092
   HEAP32[$262 >> 2] = $32; //@line 11093
   $263 = $ReallocAsyncCtx6 + 68 | 0; //@line 11094
   HEAP32[$263 >> 2] = $34; //@line 11095
   $264 = $ReallocAsyncCtx6 + 72 | 0; //@line 11096
   HEAP32[$264 >> 2] = $36; //@line 11097
   $265 = $ReallocAsyncCtx6 + 76 | 0; //@line 11098
   HEAP32[$265 >> 2] = $38; //@line 11099
   $266 = $ReallocAsyncCtx6 + 80 | 0; //@line 11100
   HEAP32[$266 >> 2] = $40; //@line 11101
   $267 = $ReallocAsyncCtx6 + 84 | 0; //@line 11102
   HEAP32[$267 >> 2] = $42; //@line 11103
   $268 = $ReallocAsyncCtx6 + 88 | 0; //@line 11104
   HEAP32[$268 >> 2] = $44; //@line 11105
   $269 = $ReallocAsyncCtx6 + 92 | 0; //@line 11106
   HEAP32[$269 >> 2] = $46; //@line 11107
   $270 = $ReallocAsyncCtx6 + 96 | 0; //@line 11108
   HEAP32[$270 >> 2] = $48; //@line 11109
   $271 = $ReallocAsyncCtx6 + 100 | 0; //@line 11110
   HEAP32[$271 >> 2] = $50; //@line 11111
   sp = STACKTOP; //@line 11112
   return;
  }
  ___async_unwind = 0; //@line 11115
  HEAP32[$ReallocAsyncCtx6 >> 2] = 196; //@line 11116
  $247 = $ReallocAsyncCtx6 + 4 | 0; //@line 11117
  HEAP32[$247 >> 2] = $2; //@line 11118
  $248 = $ReallocAsyncCtx6 + 8 | 0; //@line 11119
  HEAP32[$248 >> 2] = $4; //@line 11120
  $249 = $ReallocAsyncCtx6 + 12 | 0; //@line 11121
  HEAP32[$249 >> 2] = $6; //@line 11122
  $250 = $ReallocAsyncCtx6 + 16 | 0; //@line 11123
  HEAP32[$250 >> 2] = $8; //@line 11124
  $251 = $ReallocAsyncCtx6 + 20 | 0; //@line 11125
  HEAP32[$251 >> 2] = $10; //@line 11126
  $252 = $ReallocAsyncCtx6 + 24 | 0; //@line 11127
  HEAP32[$252 >> 2] = $12; //@line 11128
  $253 = $ReallocAsyncCtx6 + 28 | 0; //@line 11129
  HEAP32[$253 >> 2] = $14; //@line 11130
  $254 = $ReallocAsyncCtx6 + 32 | 0; //@line 11131
  HEAP32[$254 >> 2] = $16; //@line 11132
  $255 = $ReallocAsyncCtx6 + 36 | 0; //@line 11133
  HEAP32[$255 >> 2] = $18; //@line 11134
  $256 = $ReallocAsyncCtx6 + 40 | 0; //@line 11135
  HEAP32[$256 >> 2] = $20; //@line 11136
  $257 = $ReallocAsyncCtx6 + 44 | 0; //@line 11137
  HEAP32[$257 >> 2] = $22; //@line 11138
  $258 = $ReallocAsyncCtx6 + 48 | 0; //@line 11139
  HEAP32[$258 >> 2] = $24; //@line 11140
  $259 = $ReallocAsyncCtx6 + 52 | 0; //@line 11141
  HEAP32[$259 >> 2] = $26; //@line 11142
  $260 = $ReallocAsyncCtx6 + 56 | 0; //@line 11143
  HEAP32[$260 >> 2] = $28; //@line 11144
  $261 = $ReallocAsyncCtx6 + 60 | 0; //@line 11145
  HEAP32[$261 >> 2] = $30; //@line 11146
  $262 = $ReallocAsyncCtx6 + 64 | 0; //@line 11147
  HEAP32[$262 >> 2] = $32; //@line 11148
  $263 = $ReallocAsyncCtx6 + 68 | 0; //@line 11149
  HEAP32[$263 >> 2] = $34; //@line 11150
  $264 = $ReallocAsyncCtx6 + 72 | 0; //@line 11151
  HEAP32[$264 >> 2] = $36; //@line 11152
  $265 = $ReallocAsyncCtx6 + 76 | 0; //@line 11153
  HEAP32[$265 >> 2] = $38; //@line 11154
  $266 = $ReallocAsyncCtx6 + 80 | 0; //@line 11155
  HEAP32[$266 >> 2] = $40; //@line 11156
  $267 = $ReallocAsyncCtx6 + 84 | 0; //@line 11157
  HEAP32[$267 >> 2] = $42; //@line 11158
  $268 = $ReallocAsyncCtx6 + 88 | 0; //@line 11159
  HEAP32[$268 >> 2] = $44; //@line 11160
  $269 = $ReallocAsyncCtx6 + 92 | 0; //@line 11161
  HEAP32[$269 >> 2] = $46; //@line 11162
  $270 = $ReallocAsyncCtx6 + 96 | 0; //@line 11163
  HEAP32[$270 >> 2] = $48; //@line 11164
  $271 = $ReallocAsyncCtx6 + 100 | 0; //@line 11165
  HEAP32[$271 >> 2] = $50; //@line 11166
  sp = STACKTOP; //@line 11167
  return;
 }
 L15 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 11174
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 11174
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 11176
   $$131 = $$03071$reg2mem$0; //@line 11176
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 11179
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 11182
    break L15;
   }
   $52 = 7844 + ($$02972$reg2mem$1 << 2) | 0; //@line 11185
   $54 = HEAP32[$52 >> 2] | 0; //@line 11186
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 11198
   break;
  }
  $84 = $54 + 72 | 0; //@line 11201
  $85 = HEAP32[$84 >> 2] | 0; //@line 11202
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 11206
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 11212
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 11216
  $151 = $150 + 76 | 0; //@line 11217
  $152 = HEAP32[$151 >> 2] | 0; //@line 11218
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 11221
   $$03071$reg2mem$0 = $$131; //@line 11221
   $$reg2mem$0 = $52; //@line 11221
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 11226
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 11230
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 11231
  $$03071$reg2mem$0 = $$131; //@line 11231
  $$reg2mem$0 = $52; //@line 11231
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8724] = 0; //@line 11236
   return;
  }
  $275 = $$131 + 44 | 0; //@line 11239
  $276 = HEAP32[$275 >> 2] | 0; //@line 11240
  if (!$276) {
   $284 = $22 + 12 | 0; //@line 11243
   HEAP32[$284 >> 2] = 0; //@line 11244
   $286 = $26 + 4 | 0; //@line 11246
   HEAP32[$286 >> 2] = 0; //@line 11248
   HEAP32[$286 + 4 >> 2] = 0; //@line 11251
   HEAP32[$26 >> 2] = 3; //@line 11252
   $290 = $26 + 12 | 0; //@line 11253
   HEAP32[$290 >> 2] = 752; //@line 11254
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 11255
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 100, $26) | 0; //@line 11256
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 11259
    $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 11260
    HEAP32[$291 >> 2] = $290; //@line 11261
    $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 11262
    HEAP32[$292 >> 2] = $284; //@line 11263
    $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 11264
    HEAP32[$293 >> 2] = $26; //@line 11265
    $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 11266
    HEAP32[$294 >> 2] = $22; //@line 11267
    sp = STACKTOP; //@line 11268
    return;
   }
   ___async_unwind = 0; //@line 11271
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 11272
   $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 11273
   HEAP32[$291 >> 2] = $290; //@line 11274
   $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 11275
   HEAP32[$292 >> 2] = $284; //@line 11276
   $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 11277
   HEAP32[$293 >> 2] = $26; //@line 11278
   $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 11279
   HEAP32[$294 >> 2] = $22; //@line 11280
   sp = STACKTOP; //@line 11281
   return;
  } else {
   $280 = HEAP32[$276 + 4 >> 2] | 0; //@line 11286
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 11287
   FUNCTION_TABLE_vii[$280 & 7]($22, $$131 + 32 | 0); //@line 11288
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 11291
    $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 11292
    HEAP32[$281 >> 2] = $275; //@line 11293
    $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 11294
    HEAP32[$282 >> 2] = $22; //@line 11295
    $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 11296
    HEAP32[$283 >> 2] = $26; //@line 11297
    sp = STACKTOP; //@line 11298
    return;
   }
   ___async_unwind = 0; //@line 11301
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 11302
   $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 11303
   HEAP32[$281 >> 2] = $275; //@line 11304
   $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 11305
   HEAP32[$282 >> 2] = $22; //@line 11306
   $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 11307
   HEAP32[$283 >> 2] = $26; //@line 11308
   sp = STACKTOP; //@line 11309
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 11314
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 11315
  __ZL28nsapi_dns_query_async_deletei($59); //@line 11316
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 11319
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 11320
   HEAP32[$60 >> 2] = $2; //@line 11321
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 11322
   HEAP32[$61 >> 2] = $4; //@line 11323
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 11324
   HEAP32[$62 >> 2] = $6; //@line 11325
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 11326
   HEAP32[$63 >> 2] = $8; //@line 11327
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 11328
   HEAP32[$64 >> 2] = $10; //@line 11329
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 11330
   HEAP32[$65 >> 2] = $12; //@line 11331
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 11332
   HEAP32[$66 >> 2] = $14; //@line 11333
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 11334
   HEAP32[$67 >> 2] = $16; //@line 11335
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 11336
   HEAP32[$68 >> 2] = $18; //@line 11337
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 11338
   HEAP32[$69 >> 2] = $20; //@line 11339
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 11340
   HEAP32[$70 >> 2] = $22; //@line 11341
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 11342
   HEAP32[$71 >> 2] = $24; //@line 11343
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 11344
   HEAP32[$72 >> 2] = $26; //@line 11345
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 11346
   HEAP32[$73 >> 2] = $28; //@line 11347
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 11348
   HEAP32[$74 >> 2] = $30; //@line 11349
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 11350
   HEAP32[$75 >> 2] = $32; //@line 11351
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 11352
   HEAP32[$76 >> 2] = $34; //@line 11353
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 11354
   HEAP32[$77 >> 2] = $36; //@line 11355
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 11356
   HEAP32[$78 >> 2] = $38; //@line 11357
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 11358
   HEAP32[$79 >> 2] = $40; //@line 11359
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 11360
   HEAP32[$80 >> 2] = $42; //@line 11361
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 11362
   HEAP32[$81 >> 2] = $44; //@line 11363
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 11364
   HEAP32[$82 >> 2] = $$131; //@line 11365
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 11366
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 11367
   sp = STACKTOP; //@line 11368
   return;
  }
  ___async_unwind = 0; //@line 11371
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 11372
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 11373
  HEAP32[$60 >> 2] = $2; //@line 11374
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 11375
  HEAP32[$61 >> 2] = $4; //@line 11376
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 11377
  HEAP32[$62 >> 2] = $6; //@line 11378
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 11379
  HEAP32[$63 >> 2] = $8; //@line 11380
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 11381
  HEAP32[$64 >> 2] = $10; //@line 11382
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 11383
  HEAP32[$65 >> 2] = $12; //@line 11384
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 11385
  HEAP32[$66 >> 2] = $14; //@line 11386
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 11387
  HEAP32[$67 >> 2] = $16; //@line 11388
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 11389
  HEAP32[$68 >> 2] = $18; //@line 11390
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 11391
  HEAP32[$69 >> 2] = $20; //@line 11392
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 11393
  HEAP32[$70 >> 2] = $22; //@line 11394
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 11395
  HEAP32[$71 >> 2] = $24; //@line 11396
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 11397
  HEAP32[$72 >> 2] = $26; //@line 11398
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 11399
  HEAP32[$73 >> 2] = $28; //@line 11400
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 11401
  HEAP32[$74 >> 2] = $30; //@line 11402
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 11403
  HEAP32[$75 >> 2] = $32; //@line 11404
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 11405
  HEAP32[$76 >> 2] = $34; //@line 11406
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 11407
  HEAP32[$77 >> 2] = $36; //@line 11408
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 11409
  HEAP32[$78 >> 2] = $38; //@line 11410
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 11411
  HEAP32[$79 >> 2] = $40; //@line 11412
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 11413
  HEAP32[$80 >> 2] = $42; //@line 11414
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 11415
  HEAP32[$81 >> 2] = $44; //@line 11416
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 11417
  HEAP32[$82 >> 2] = $$131; //@line 11418
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 11419
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 11420
  sp = STACKTOP; //@line 11421
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 11426
  $92 = $54 + 44 | 0; //@line 11427
  $93 = HEAP32[$92 >> 2] | 0; //@line 11428
  if (!$93) {
   HEAP32[$8 >> 2] = 0; //@line 11431
   $124 = HEAP32[$54 >> 2] | 0; //@line 11432
   HEAP32[$10 >> 2] = 0; //@line 11433
   HEAP32[$12 >> 2] = 188; //@line 11434
   HEAP32[$14 >> 2] = $124; //@line 11435
   HEAP32[$16 >> 2] = 764; //@line 11436
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 11437
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 0, $20) | 0; //@line 11438
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 11441
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 11442
    HEAP32[$125 >> 2] = $2; //@line 11443
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 11444
    HEAP32[$126 >> 2] = $4; //@line 11445
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 11446
    HEAP32[$127 >> 2] = $6; //@line 11447
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 11448
    HEAP32[$128 >> 2] = $8; //@line 11449
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 11450
    HEAP32[$129 >> 2] = $10; //@line 11451
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 11452
    HEAP32[$130 >> 2] = $12; //@line 11453
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 11454
    HEAP32[$131 >> 2] = $14; //@line 11455
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 11456
    HEAP32[$132 >> 2] = $16; //@line 11457
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 11458
    HEAP32[$133 >> 2] = $18; //@line 11459
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 11460
    HEAP32[$134 >> 2] = $20; //@line 11461
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 11462
    HEAP32[$135 >> 2] = $22; //@line 11463
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 11464
    HEAP32[$136 >> 2] = $24; //@line 11465
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 11466
    HEAP32[$137 >> 2] = $26; //@line 11467
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 11468
    HEAP32[$138 >> 2] = $28; //@line 11469
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 11470
    HEAP32[$139 >> 2] = $30; //@line 11471
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 11472
    HEAP32[$140 >> 2] = $32; //@line 11473
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 11474
    HEAP32[$141 >> 2] = $34; //@line 11475
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 11476
    HEAP32[$142 >> 2] = $36; //@line 11477
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 11478
    HEAP32[$143 >> 2] = $38; //@line 11479
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 11480
    HEAP32[$144 >> 2] = $40; //@line 11481
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 11482
    HEAP32[$145 >> 2] = $42; //@line 11483
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 11484
    HEAP32[$146 >> 2] = $44; //@line 11485
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 11486
    HEAP32[$147 >> 2] = $52; //@line 11487
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 11488
    HEAP32[$148 >> 2] = $$131; //@line 11489
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 11490
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 11491
    sp = STACKTOP; //@line 11492
    return;
   }
   ___async_unwind = 0; //@line 11495
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 11496
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 11497
   HEAP32[$125 >> 2] = $2; //@line 11498
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 11499
   HEAP32[$126 >> 2] = $4; //@line 11500
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 11501
   HEAP32[$127 >> 2] = $6; //@line 11502
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 11503
   HEAP32[$128 >> 2] = $8; //@line 11504
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 11505
   HEAP32[$129 >> 2] = $10; //@line 11506
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 11507
   HEAP32[$130 >> 2] = $12; //@line 11508
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 11509
   HEAP32[$131 >> 2] = $14; //@line 11510
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 11511
   HEAP32[$132 >> 2] = $16; //@line 11512
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 11513
   HEAP32[$133 >> 2] = $18; //@line 11514
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 11515
   HEAP32[$134 >> 2] = $20; //@line 11516
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 11517
   HEAP32[$135 >> 2] = $22; //@line 11518
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 11519
   HEAP32[$136 >> 2] = $24; //@line 11520
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 11521
   HEAP32[$137 >> 2] = $26; //@line 11522
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 11523
   HEAP32[$138 >> 2] = $28; //@line 11524
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 11525
   HEAP32[$139 >> 2] = $30; //@line 11526
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 11527
   HEAP32[$140 >> 2] = $32; //@line 11528
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 11529
   HEAP32[$141 >> 2] = $34; //@line 11530
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 11531
   HEAP32[$142 >> 2] = $36; //@line 11532
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 11533
   HEAP32[$143 >> 2] = $38; //@line 11534
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 11535
   HEAP32[$144 >> 2] = $40; //@line 11536
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 11537
   HEAP32[$145 >> 2] = $42; //@line 11538
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 11539
   HEAP32[$146 >> 2] = $44; //@line 11540
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 11541
   HEAP32[$147 >> 2] = $52; //@line 11542
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 11543
   HEAP32[$148 >> 2] = $$131; //@line 11544
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 11545
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 11546
   sp = STACKTOP; //@line 11547
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 11552
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 11553
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 11554
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 11557
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 11558
    HEAP32[$98 >> 2] = $2; //@line 11559
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 11560
    HEAP32[$99 >> 2] = $4; //@line 11561
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 11562
    HEAP32[$100 >> 2] = $6; //@line 11563
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 11564
    HEAP32[$101 >> 2] = $8; //@line 11565
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 11566
    HEAP32[$102 >> 2] = $10; //@line 11567
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 11568
    HEAP32[$103 >> 2] = $12; //@line 11569
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 11570
    HEAP32[$104 >> 2] = $14; //@line 11571
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 11572
    HEAP32[$105 >> 2] = $16; //@line 11573
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 11574
    HEAP32[$106 >> 2] = $18; //@line 11575
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 11576
    HEAP32[$107 >> 2] = $20; //@line 11577
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 11578
    HEAP32[$108 >> 2] = $22; //@line 11579
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 11580
    HEAP32[$109 >> 2] = $92; //@line 11581
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 11582
    HEAP32[$110 >> 2] = $52; //@line 11583
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 11584
    HEAP32[$111 >> 2] = $24; //@line 11585
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 11586
    HEAP32[$112 >> 2] = $26; //@line 11587
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 11588
    HEAP32[$113 >> 2] = $28; //@line 11589
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 11590
    HEAP32[$114 >> 2] = $30; //@line 11591
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 11592
    HEAP32[$115 >> 2] = $32; //@line 11593
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 11594
    HEAP32[$116 >> 2] = $34; //@line 11595
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 11596
    HEAP32[$117 >> 2] = $36; //@line 11597
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 11598
    HEAP32[$118 >> 2] = $38; //@line 11599
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 11600
    HEAP32[$119 >> 2] = $40; //@line 11601
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 11602
    HEAP32[$120 >> 2] = $42; //@line 11603
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 11604
    HEAP32[$121 >> 2] = $44; //@line 11605
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 11606
    HEAP32[$122 >> 2] = $$131; //@line 11607
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 11608
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 11609
    sp = STACKTOP; //@line 11610
    return;
   }
   ___async_unwind = 0; //@line 11613
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 11614
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 11615
   HEAP32[$98 >> 2] = $2; //@line 11616
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 11617
   HEAP32[$99 >> 2] = $4; //@line 11618
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 11619
   HEAP32[$100 >> 2] = $6; //@line 11620
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 11621
   HEAP32[$101 >> 2] = $8; //@line 11622
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 11623
   HEAP32[$102 >> 2] = $10; //@line 11624
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 11625
   HEAP32[$103 >> 2] = $12; //@line 11626
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 11627
   HEAP32[$104 >> 2] = $14; //@line 11628
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 11629
   HEAP32[$105 >> 2] = $16; //@line 11630
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 11631
   HEAP32[$106 >> 2] = $18; //@line 11632
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 11633
   HEAP32[$107 >> 2] = $20; //@line 11634
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 11635
   HEAP32[$108 >> 2] = $22; //@line 11636
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 11637
   HEAP32[$109 >> 2] = $92; //@line 11638
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 11639
   HEAP32[$110 >> 2] = $52; //@line 11640
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 11641
   HEAP32[$111 >> 2] = $24; //@line 11642
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 11643
   HEAP32[$112 >> 2] = $26; //@line 11644
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 11645
   HEAP32[$113 >> 2] = $28; //@line 11646
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 11647
   HEAP32[$114 >> 2] = $30; //@line 11648
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 11649
   HEAP32[$115 >> 2] = $32; //@line 11650
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 11651
   HEAP32[$116 >> 2] = $34; //@line 11652
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 11653
   HEAP32[$117 >> 2] = $36; //@line 11654
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 11655
   HEAP32[$118 >> 2] = $38; //@line 11656
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 11657
   HEAP32[$119 >> 2] = $40; //@line 11658
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 11659
   HEAP32[$120 >> 2] = $42; //@line 11660
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 11661
   HEAP32[$121 >> 2] = $44; //@line 11662
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 11663
   HEAP32[$122 >> 2] = $$131; //@line 11664
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 11665
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 11666
   sp = STACKTOP; //@line 11667
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 11672
  $156 = $150 + 44 | 0; //@line 11673
  $157 = HEAP32[$156 >> 2] | 0; //@line 11674
  if (!$157) {
   HEAP32[$30 >> 2] = 0; //@line 11677
   $188 = HEAP32[$150 >> 2] | 0; //@line 11678
   HEAP32[$32 >> 2] = 0; //@line 11679
   HEAP32[$34 >> 2] = 193; //@line 11680
   HEAP32[$36 >> 2] = $188; //@line 11681
   HEAP32[$6 >> 2] = 764; //@line 11682
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 11683
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($38, 0, $40) | 0; //@line 11684
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 11687
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 11688
    HEAP32[$189 >> 2] = $2; //@line 11689
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 11690
    HEAP32[$190 >> 2] = $4; //@line 11691
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 11692
    HEAP32[$191 >> 2] = $6; //@line 11693
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 11694
    HEAP32[$192 >> 2] = $8; //@line 11695
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 11696
    HEAP32[$193 >> 2] = $10; //@line 11697
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 11698
    HEAP32[$194 >> 2] = $12; //@line 11699
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 11700
    HEAP32[$195 >> 2] = $14; //@line 11701
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 11702
    HEAP32[$196 >> 2] = $16; //@line 11703
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 11704
    HEAP32[$197 >> 2] = $18; //@line 11705
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 11706
    HEAP32[$198 >> 2] = $20; //@line 11707
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 11708
    HEAP32[$199 >> 2] = $22; //@line 11709
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 11710
    HEAP32[$200 >> 2] = $24; //@line 11711
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 11712
    HEAP32[$201 >> 2] = $26; //@line 11713
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 11714
    HEAP32[$202 >> 2] = $28; //@line 11715
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 11716
    HEAP32[$203 >> 2] = $30; //@line 11717
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 11718
    HEAP32[$204 >> 2] = $32; //@line 11719
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 11720
    HEAP32[$205 >> 2] = $34; //@line 11721
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 11722
    HEAP32[$206 >> 2] = $36; //@line 11723
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 11724
    HEAP32[$207 >> 2] = $38; //@line 11725
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 11726
    HEAP32[$208 >> 2] = $40; //@line 11727
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 11728
    HEAP32[$209 >> 2] = $42; //@line 11729
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 11730
    HEAP32[$210 >> 2] = $44; //@line 11731
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 11732
    HEAP32[$211 >> 2] = $$131; //@line 11733
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 11734
    HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 11735
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 11736
    HEAP32[$213 >> 2] = $52; //@line 11737
    sp = STACKTOP; //@line 11738
    return;
   }
   ___async_unwind = 0; //@line 11741
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 11742
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 11743
   HEAP32[$189 >> 2] = $2; //@line 11744
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 11745
   HEAP32[$190 >> 2] = $4; //@line 11746
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 11747
   HEAP32[$191 >> 2] = $6; //@line 11748
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 11749
   HEAP32[$192 >> 2] = $8; //@line 11750
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 11751
   HEAP32[$193 >> 2] = $10; //@line 11752
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 11753
   HEAP32[$194 >> 2] = $12; //@line 11754
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 11755
   HEAP32[$195 >> 2] = $14; //@line 11756
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 11757
   HEAP32[$196 >> 2] = $16; //@line 11758
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 11759
   HEAP32[$197 >> 2] = $18; //@line 11760
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 11761
   HEAP32[$198 >> 2] = $20; //@line 11762
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 11763
   HEAP32[$199 >> 2] = $22; //@line 11764
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 11765
   HEAP32[$200 >> 2] = $24; //@line 11766
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 11767
   HEAP32[$201 >> 2] = $26; //@line 11768
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 11769
   HEAP32[$202 >> 2] = $28; //@line 11770
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 11771
   HEAP32[$203 >> 2] = $30; //@line 11772
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 11773
   HEAP32[$204 >> 2] = $32; //@line 11774
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 11775
   HEAP32[$205 >> 2] = $34; //@line 11776
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 11777
   HEAP32[$206 >> 2] = $36; //@line 11778
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 11779
   HEAP32[$207 >> 2] = $38; //@line 11780
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 11781
   HEAP32[$208 >> 2] = $40; //@line 11782
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 11783
   HEAP32[$209 >> 2] = $42; //@line 11784
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 11785
   HEAP32[$210 >> 2] = $44; //@line 11786
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 11787
   HEAP32[$211 >> 2] = $$131; //@line 11788
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 11789
   HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 11790
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 11791
   HEAP32[$213 >> 2] = $52; //@line 11792
   sp = STACKTOP; //@line 11793
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 11798
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 11799
   FUNCTION_TABLE_vii[$161 & 7]($28, $150 + 32 | 0); //@line 11800
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 11803
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 11804
    HEAP32[$162 >> 2] = $2; //@line 11805
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 11806
    HEAP32[$163 >> 2] = $4; //@line 11807
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 11808
    HEAP32[$164 >> 2] = $6; //@line 11809
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 11810
    HEAP32[$165 >> 2] = $8; //@line 11811
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 11812
    HEAP32[$166 >> 2] = $10; //@line 11813
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 11814
    HEAP32[$167 >> 2] = $12; //@line 11815
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 11816
    HEAP32[$168 >> 2] = $14; //@line 11817
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 11818
    HEAP32[$169 >> 2] = $16; //@line 11819
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 11820
    HEAP32[$170 >> 2] = $18; //@line 11821
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 11822
    HEAP32[$171 >> 2] = $20; //@line 11823
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 11824
    HEAP32[$172 >> 2] = $22; //@line 11825
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 11826
    HEAP32[$173 >> 2] = $24; //@line 11827
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 11828
    HEAP32[$174 >> 2] = $26; //@line 11829
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 11830
    HEAP32[$175 >> 2] = $156; //@line 11831
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 11832
    HEAP32[$176 >> 2] = $52; //@line 11833
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 11834
    HEAP32[$177 >> 2] = $28; //@line 11835
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 11836
    HEAP32[$178 >> 2] = $30; //@line 11837
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 11838
    HEAP32[$179 >> 2] = $32; //@line 11839
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 11840
    HEAP32[$180 >> 2] = $34; //@line 11841
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 11842
    HEAP32[$181 >> 2] = $36; //@line 11843
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 11844
    HEAP32[$182 >> 2] = $38; //@line 11845
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 11846
    HEAP32[$183 >> 2] = $40; //@line 11847
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 11848
    HEAP32[$184 >> 2] = $42; //@line 11849
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 11850
    HEAP32[$185 >> 2] = $44; //@line 11851
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 11852
    HEAP32[$186 >> 2] = $$131; //@line 11853
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 11854
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 11855
    sp = STACKTOP; //@line 11856
    return;
   }
   ___async_unwind = 0; //@line 11859
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 11860
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 11861
   HEAP32[$162 >> 2] = $2; //@line 11862
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 11863
   HEAP32[$163 >> 2] = $4; //@line 11864
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 11865
   HEAP32[$164 >> 2] = $6; //@line 11866
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 11867
   HEAP32[$165 >> 2] = $8; //@line 11868
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 11869
   HEAP32[$166 >> 2] = $10; //@line 11870
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 11871
   HEAP32[$167 >> 2] = $12; //@line 11872
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 11873
   HEAP32[$168 >> 2] = $14; //@line 11874
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 11875
   HEAP32[$169 >> 2] = $16; //@line 11876
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 11877
   HEAP32[$170 >> 2] = $18; //@line 11878
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 11879
   HEAP32[$171 >> 2] = $20; //@line 11880
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 11881
   HEAP32[$172 >> 2] = $22; //@line 11882
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 11883
   HEAP32[$173 >> 2] = $24; //@line 11884
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 11885
   HEAP32[$174 >> 2] = $26; //@line 11886
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 11887
   HEAP32[$175 >> 2] = $156; //@line 11888
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 11889
   HEAP32[$176 >> 2] = $52; //@line 11890
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 11891
   HEAP32[$177 >> 2] = $28; //@line 11892
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 11893
   HEAP32[$178 >> 2] = $30; //@line 11894
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 11895
   HEAP32[$179 >> 2] = $32; //@line 11896
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 11897
   HEAP32[$180 >> 2] = $34; //@line 11898
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 11899
   HEAP32[$181 >> 2] = $36; //@line 11900
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 11901
   HEAP32[$182 >> 2] = $38; //@line 11902
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 11903
   HEAP32[$183 >> 2] = $40; //@line 11904
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 11905
   HEAP32[$184 >> 2] = $42; //@line 11906
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 11907
   HEAP32[$185 >> 2] = $44; //@line 11908
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 11909
   HEAP32[$186 >> 2] = $$131; //@line 11910
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 11911
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 11912
   sp = STACKTOP; //@line 11913
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_130($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $185 = 0, $186 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $246 = 0, $247 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 6180
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6182
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6184
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6186
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6188
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6190
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6192
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6194
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6196
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6198
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6200
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6202
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6204
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6206
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6208
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6210
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6212
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6214
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6216
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 6218
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 6220
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 6222
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 6224
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 6226
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 6228
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 6230
 $150 = HEAP32[$4 >> 2] | 0; //@line 6231
 if (!$150) {
  $$02972$reg2mem$0 = $50; //@line 6234
  $$03071$reg2mem$0 = $48; //@line 6234
  $$reg2mem$0 = $28; //@line 6234
 } else {
  $153 = HEAP32[$150 + 8 >> 2] | 0; //@line 6237
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 6238
  FUNCTION_TABLE_vi[$153 & 511]($2); //@line 6239
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 191; //@line 6242
   $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 6243
   HEAP32[$154 >> 2] = $2; //@line 6244
   $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 6245
   HEAP32[$155 >> 2] = $4; //@line 6246
   $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 6247
   HEAP32[$156 >> 2] = $6; //@line 6248
   $157 = $ReallocAsyncCtx3 + 16 | 0; //@line 6249
   HEAP32[$157 >> 2] = $8; //@line 6250
   $158 = $ReallocAsyncCtx3 + 20 | 0; //@line 6251
   HEAP32[$158 >> 2] = $10; //@line 6252
   $159 = $ReallocAsyncCtx3 + 24 | 0; //@line 6253
   HEAP32[$159 >> 2] = $12; //@line 6254
   $160 = $ReallocAsyncCtx3 + 28 | 0; //@line 6255
   HEAP32[$160 >> 2] = $14; //@line 6256
   $161 = $ReallocAsyncCtx3 + 32 | 0; //@line 6257
   HEAP32[$161 >> 2] = $16; //@line 6258
   $162 = $ReallocAsyncCtx3 + 36 | 0; //@line 6259
   HEAP32[$162 >> 2] = $18; //@line 6260
   $163 = $ReallocAsyncCtx3 + 40 | 0; //@line 6261
   HEAP32[$163 >> 2] = $20; //@line 6262
   $164 = $ReallocAsyncCtx3 + 44 | 0; //@line 6263
   HEAP32[$164 >> 2] = $22; //@line 6264
   $165 = $ReallocAsyncCtx3 + 48 | 0; //@line 6265
   HEAP32[$165 >> 2] = $24; //@line 6266
   $166 = $ReallocAsyncCtx3 + 52 | 0; //@line 6267
   HEAP32[$166 >> 2] = $26; //@line 6268
   $167 = $ReallocAsyncCtx3 + 56 | 0; //@line 6269
   HEAP32[$167 >> 2] = $28; //@line 6270
   $168 = $ReallocAsyncCtx3 + 60 | 0; //@line 6271
   HEAP32[$168 >> 2] = $30; //@line 6272
   $169 = $ReallocAsyncCtx3 + 64 | 0; //@line 6273
   HEAP32[$169 >> 2] = $32; //@line 6274
   $170 = $ReallocAsyncCtx3 + 68 | 0; //@line 6275
   HEAP32[$170 >> 2] = $34; //@line 6276
   $171 = $ReallocAsyncCtx3 + 72 | 0; //@line 6277
   HEAP32[$171 >> 2] = $36; //@line 6278
   $172 = $ReallocAsyncCtx3 + 76 | 0; //@line 6279
   HEAP32[$172 >> 2] = $38; //@line 6280
   $173 = $ReallocAsyncCtx3 + 80 | 0; //@line 6281
   HEAP32[$173 >> 2] = $40; //@line 6282
   $174 = $ReallocAsyncCtx3 + 84 | 0; //@line 6283
   HEAP32[$174 >> 2] = $42; //@line 6284
   $175 = $ReallocAsyncCtx3 + 88 | 0; //@line 6285
   HEAP32[$175 >> 2] = $44; //@line 6286
   $176 = $ReallocAsyncCtx3 + 92 | 0; //@line 6287
   HEAP32[$176 >> 2] = $46; //@line 6288
   $177 = $ReallocAsyncCtx3 + 96 | 0; //@line 6289
   HEAP32[$177 >> 2] = $48; //@line 6290
   $178 = $ReallocAsyncCtx3 + 100 | 0; //@line 6291
   HEAP32[$178 >> 2] = $50; //@line 6292
   sp = STACKTOP; //@line 6293
   return;
  }
  ___async_unwind = 0; //@line 6296
  HEAP32[$ReallocAsyncCtx3 >> 2] = 191; //@line 6297
  $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 6298
  HEAP32[$154 >> 2] = $2; //@line 6299
  $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 6300
  HEAP32[$155 >> 2] = $4; //@line 6301
  $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 6302
  HEAP32[$156 >> 2] = $6; //@line 6303
  $157 = $ReallocAsyncCtx3 + 16 | 0; //@line 6304
  HEAP32[$157 >> 2] = $8; //@line 6305
  $158 = $ReallocAsyncCtx3 + 20 | 0; //@line 6306
  HEAP32[$158 >> 2] = $10; //@line 6307
  $159 = $ReallocAsyncCtx3 + 24 | 0; //@line 6308
  HEAP32[$159 >> 2] = $12; //@line 6309
  $160 = $ReallocAsyncCtx3 + 28 | 0; //@line 6310
  HEAP32[$160 >> 2] = $14; //@line 6311
  $161 = $ReallocAsyncCtx3 + 32 | 0; //@line 6312
  HEAP32[$161 >> 2] = $16; //@line 6313
  $162 = $ReallocAsyncCtx3 + 36 | 0; //@line 6314
  HEAP32[$162 >> 2] = $18; //@line 6315
  $163 = $ReallocAsyncCtx3 + 40 | 0; //@line 6316
  HEAP32[$163 >> 2] = $20; //@line 6317
  $164 = $ReallocAsyncCtx3 + 44 | 0; //@line 6318
  HEAP32[$164 >> 2] = $22; //@line 6319
  $165 = $ReallocAsyncCtx3 + 48 | 0; //@line 6320
  HEAP32[$165 >> 2] = $24; //@line 6321
  $166 = $ReallocAsyncCtx3 + 52 | 0; //@line 6322
  HEAP32[$166 >> 2] = $26; //@line 6323
  $167 = $ReallocAsyncCtx3 + 56 | 0; //@line 6324
  HEAP32[$167 >> 2] = $28; //@line 6325
  $168 = $ReallocAsyncCtx3 + 60 | 0; //@line 6326
  HEAP32[$168 >> 2] = $30; //@line 6327
  $169 = $ReallocAsyncCtx3 + 64 | 0; //@line 6328
  HEAP32[$169 >> 2] = $32; //@line 6329
  $170 = $ReallocAsyncCtx3 + 68 | 0; //@line 6330
  HEAP32[$170 >> 2] = $34; //@line 6331
  $171 = $ReallocAsyncCtx3 + 72 | 0; //@line 6332
  HEAP32[$171 >> 2] = $36; //@line 6333
  $172 = $ReallocAsyncCtx3 + 76 | 0; //@line 6334
  HEAP32[$172 >> 2] = $38; //@line 6335
  $173 = $ReallocAsyncCtx3 + 80 | 0; //@line 6336
  HEAP32[$173 >> 2] = $40; //@line 6337
  $174 = $ReallocAsyncCtx3 + 84 | 0; //@line 6338
  HEAP32[$174 >> 2] = $42; //@line 6339
  $175 = $ReallocAsyncCtx3 + 88 | 0; //@line 6340
  HEAP32[$175 >> 2] = $44; //@line 6341
  $176 = $ReallocAsyncCtx3 + 92 | 0; //@line 6342
  HEAP32[$176 >> 2] = $46; //@line 6343
  $177 = $ReallocAsyncCtx3 + 96 | 0; //@line 6344
  HEAP32[$177 >> 2] = $48; //@line 6345
  $178 = $ReallocAsyncCtx3 + 100 | 0; //@line 6346
  HEAP32[$178 >> 2] = $50; //@line 6347
  sp = STACKTOP; //@line 6348
  return;
 }
 L9 : while (1) {
  $179 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 6352
  $180 = $179 + 76 | 0; //@line 6353
  $181 = HEAP32[$180 >> 2] | 0; //@line 6354
  if ($181 | 0) {
   if ($181 >>> 0 <= 100) {
    label = 26; //@line 6359
    break;
   }
   HEAP32[$180 >> 2] = $181 + -100; //@line 6363
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 6368
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 6368
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 6370
   $$131 = $$03071$reg2mem$0; //@line 6370
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 6373
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 6376
    break L9;
   }
   $52 = 7844 + ($$02972$reg2mem$1 << 2) | 0; //@line 6379
   $54 = HEAP32[$52 >> 2] | 0; //@line 6380
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 6392
   break;
  }
  $84 = $54 + 72 | 0; //@line 6395
  $85 = HEAP32[$84 >> 2] | 0; //@line 6396
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 6400
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 6401
   $$03071$reg2mem$0 = $$131; //@line 6401
   $$reg2mem$0 = $52; //@line 6401
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 6408
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 6411
    $$03071$reg2mem$0 = $$131; //@line 6411
    $$reg2mem$0 = $52; //@line 6411
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8724] = 0; //@line 6419
   return;
  }
  $246 = $$131 + 44 | 0; //@line 6422
  $247 = HEAP32[$246 >> 2] | 0; //@line 6423
  if (!$247) {
   $255 = $22 + 12 | 0; //@line 6426
   HEAP32[$255 >> 2] = 0; //@line 6427
   $257 = $26 + 4 | 0; //@line 6429
   HEAP32[$257 >> 2] = 0; //@line 6431
   HEAP32[$257 + 4 >> 2] = 0; //@line 6434
   HEAP32[$26 >> 2] = 3; //@line 6435
   $261 = $26 + 12 | 0; //@line 6436
   HEAP32[$261 >> 2] = 752; //@line 6437
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 6438
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 100, $26) | 0; //@line 6439
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 6442
    $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 6443
    HEAP32[$262 >> 2] = $261; //@line 6444
    $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 6445
    HEAP32[$263 >> 2] = $255; //@line 6446
    $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 6447
    HEAP32[$264 >> 2] = $26; //@line 6448
    $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 6449
    HEAP32[$265 >> 2] = $22; //@line 6450
    sp = STACKTOP; //@line 6451
    return;
   }
   ___async_unwind = 0; //@line 6454
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 6455
   $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 6456
   HEAP32[$262 >> 2] = $261; //@line 6457
   $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 6458
   HEAP32[$263 >> 2] = $255; //@line 6459
   $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 6460
   HEAP32[$264 >> 2] = $26; //@line 6461
   $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 6462
   HEAP32[$265 >> 2] = $22; //@line 6463
   sp = STACKTOP; //@line 6464
   return;
  } else {
   $251 = HEAP32[$247 + 4 >> 2] | 0; //@line 6469
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 6470
   FUNCTION_TABLE_vii[$251 & 7]($22, $$131 + 32 | 0); //@line 6471
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 6474
    $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 6475
    HEAP32[$252 >> 2] = $246; //@line 6476
    $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 6477
    HEAP32[$253 >> 2] = $22; //@line 6478
    $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 6479
    HEAP32[$254 >> 2] = $26; //@line 6480
    sp = STACKTOP; //@line 6481
    return;
   }
   ___async_unwind = 0; //@line 6484
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 6485
   $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 6486
   HEAP32[$252 >> 2] = $246; //@line 6487
   $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 6488
   HEAP32[$253 >> 2] = $22; //@line 6489
   $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 6490
   HEAP32[$254 >> 2] = $26; //@line 6491
   sp = STACKTOP; //@line 6492
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 6497
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 6498
  __ZL28nsapi_dns_query_async_deletei($59); //@line 6499
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 6502
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 6503
   HEAP32[$60 >> 2] = $2; //@line 6504
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 6505
   HEAP32[$61 >> 2] = $4; //@line 6506
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 6507
   HEAP32[$62 >> 2] = $6; //@line 6508
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 6509
   HEAP32[$63 >> 2] = $8; //@line 6510
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 6511
   HEAP32[$64 >> 2] = $10; //@line 6512
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 6513
   HEAP32[$65 >> 2] = $12; //@line 6514
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 6515
   HEAP32[$66 >> 2] = $14; //@line 6516
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 6517
   HEAP32[$67 >> 2] = $16; //@line 6518
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 6519
   HEAP32[$68 >> 2] = $18; //@line 6520
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 6521
   HEAP32[$69 >> 2] = $20; //@line 6522
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 6523
   HEAP32[$70 >> 2] = $22; //@line 6524
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 6525
   HEAP32[$71 >> 2] = $24; //@line 6526
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 6527
   HEAP32[$72 >> 2] = $26; //@line 6528
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 6529
   HEAP32[$73 >> 2] = $30; //@line 6530
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 6531
   HEAP32[$74 >> 2] = $32; //@line 6532
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 6533
   HEAP32[$75 >> 2] = $34; //@line 6534
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 6535
   HEAP32[$76 >> 2] = $36; //@line 6536
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 6537
   HEAP32[$77 >> 2] = $38; //@line 6538
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 6539
   HEAP32[$78 >> 2] = $40; //@line 6540
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 6541
   HEAP32[$79 >> 2] = $42; //@line 6542
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 6543
   HEAP32[$80 >> 2] = $44; //@line 6544
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 6545
   HEAP32[$81 >> 2] = $46; //@line 6546
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 6547
   HEAP32[$82 >> 2] = $$131; //@line 6548
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 6549
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 6550
   sp = STACKTOP; //@line 6551
   return;
  }
  ___async_unwind = 0; //@line 6554
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 6555
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 6556
  HEAP32[$60 >> 2] = $2; //@line 6557
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 6558
  HEAP32[$61 >> 2] = $4; //@line 6559
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 6560
  HEAP32[$62 >> 2] = $6; //@line 6561
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 6562
  HEAP32[$63 >> 2] = $8; //@line 6563
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 6564
  HEAP32[$64 >> 2] = $10; //@line 6565
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 6566
  HEAP32[$65 >> 2] = $12; //@line 6567
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 6568
  HEAP32[$66 >> 2] = $14; //@line 6569
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 6570
  HEAP32[$67 >> 2] = $16; //@line 6571
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 6572
  HEAP32[$68 >> 2] = $18; //@line 6573
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 6574
  HEAP32[$69 >> 2] = $20; //@line 6575
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 6576
  HEAP32[$70 >> 2] = $22; //@line 6577
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 6578
  HEAP32[$71 >> 2] = $24; //@line 6579
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 6580
  HEAP32[$72 >> 2] = $26; //@line 6581
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 6582
  HEAP32[$73 >> 2] = $30; //@line 6583
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 6584
  HEAP32[$74 >> 2] = $32; //@line 6585
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 6586
  HEAP32[$75 >> 2] = $34; //@line 6587
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 6588
  HEAP32[$76 >> 2] = $36; //@line 6589
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 6590
  HEAP32[$77 >> 2] = $38; //@line 6591
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 6592
  HEAP32[$78 >> 2] = $40; //@line 6593
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 6594
  HEAP32[$79 >> 2] = $42; //@line 6595
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 6596
  HEAP32[$80 >> 2] = $44; //@line 6597
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 6598
  HEAP32[$81 >> 2] = $46; //@line 6599
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 6600
  HEAP32[$82 >> 2] = $$131; //@line 6601
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 6602
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 6603
  sp = STACKTOP; //@line 6604
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 6609
  $92 = $54 + 44 | 0; //@line 6610
  $93 = HEAP32[$92 >> 2] | 0; //@line 6611
  if (!$93) {
   HEAP32[$8 >> 2] = 0; //@line 6614
   $124 = HEAP32[$54 >> 2] | 0; //@line 6615
   HEAP32[$10 >> 2] = 0; //@line 6616
   HEAP32[$12 >> 2] = 188; //@line 6617
   HEAP32[$14 >> 2] = $124; //@line 6618
   HEAP32[$16 >> 2] = 764; //@line 6619
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 6620
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 0, $20) | 0; //@line 6621
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 6624
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 6625
    HEAP32[$125 >> 2] = $2; //@line 6626
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 6627
    HEAP32[$126 >> 2] = $4; //@line 6628
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 6629
    HEAP32[$127 >> 2] = $6; //@line 6630
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 6631
    HEAP32[$128 >> 2] = $8; //@line 6632
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 6633
    HEAP32[$129 >> 2] = $10; //@line 6634
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 6635
    HEAP32[$130 >> 2] = $12; //@line 6636
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 6637
    HEAP32[$131 >> 2] = $14; //@line 6638
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 6639
    HEAP32[$132 >> 2] = $16; //@line 6640
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 6641
    HEAP32[$133 >> 2] = $18; //@line 6642
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 6643
    HEAP32[$134 >> 2] = $20; //@line 6644
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 6645
    HEAP32[$135 >> 2] = $22; //@line 6646
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 6647
    HEAP32[$136 >> 2] = $24; //@line 6648
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 6649
    HEAP32[$137 >> 2] = $26; //@line 6650
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 6651
    HEAP32[$138 >> 2] = $30; //@line 6652
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 6653
    HEAP32[$139 >> 2] = $32; //@line 6654
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 6655
    HEAP32[$140 >> 2] = $34; //@line 6656
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 6657
    HEAP32[$141 >> 2] = $36; //@line 6658
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 6659
    HEAP32[$142 >> 2] = $38; //@line 6660
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 6661
    HEAP32[$143 >> 2] = $40; //@line 6662
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 6663
    HEAP32[$144 >> 2] = $42; //@line 6664
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 6665
    HEAP32[$145 >> 2] = $44; //@line 6666
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 6667
    HEAP32[$146 >> 2] = $46; //@line 6668
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 6669
    HEAP32[$147 >> 2] = $52; //@line 6670
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 6671
    HEAP32[$148 >> 2] = $$131; //@line 6672
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 6673
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 6674
    sp = STACKTOP; //@line 6675
    return;
   }
   ___async_unwind = 0; //@line 6678
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 6679
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 6680
   HEAP32[$125 >> 2] = $2; //@line 6681
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 6682
   HEAP32[$126 >> 2] = $4; //@line 6683
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 6684
   HEAP32[$127 >> 2] = $6; //@line 6685
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 6686
   HEAP32[$128 >> 2] = $8; //@line 6687
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 6688
   HEAP32[$129 >> 2] = $10; //@line 6689
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 6690
   HEAP32[$130 >> 2] = $12; //@line 6691
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 6692
   HEAP32[$131 >> 2] = $14; //@line 6693
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 6694
   HEAP32[$132 >> 2] = $16; //@line 6695
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 6696
   HEAP32[$133 >> 2] = $18; //@line 6697
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 6698
   HEAP32[$134 >> 2] = $20; //@line 6699
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 6700
   HEAP32[$135 >> 2] = $22; //@line 6701
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 6702
   HEAP32[$136 >> 2] = $24; //@line 6703
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 6704
   HEAP32[$137 >> 2] = $26; //@line 6705
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 6706
   HEAP32[$138 >> 2] = $30; //@line 6707
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 6708
   HEAP32[$139 >> 2] = $32; //@line 6709
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 6710
   HEAP32[$140 >> 2] = $34; //@line 6711
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 6712
   HEAP32[$141 >> 2] = $36; //@line 6713
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 6714
   HEAP32[$142 >> 2] = $38; //@line 6715
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 6716
   HEAP32[$143 >> 2] = $40; //@line 6717
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 6718
   HEAP32[$144 >> 2] = $42; //@line 6719
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 6720
   HEAP32[$145 >> 2] = $44; //@line 6721
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 6722
   HEAP32[$146 >> 2] = $46; //@line 6723
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 6724
   HEAP32[$147 >> 2] = $52; //@line 6725
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 6726
   HEAP32[$148 >> 2] = $$131; //@line 6727
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 6728
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 6729
   sp = STACKTOP; //@line 6730
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 6735
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 6736
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 6737
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 6740
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 6741
    HEAP32[$98 >> 2] = $2; //@line 6742
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 6743
    HEAP32[$99 >> 2] = $4; //@line 6744
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 6745
    HEAP32[$100 >> 2] = $6; //@line 6746
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 6747
    HEAP32[$101 >> 2] = $8; //@line 6748
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 6749
    HEAP32[$102 >> 2] = $10; //@line 6750
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 6751
    HEAP32[$103 >> 2] = $12; //@line 6752
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 6753
    HEAP32[$104 >> 2] = $14; //@line 6754
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 6755
    HEAP32[$105 >> 2] = $16; //@line 6756
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 6757
    HEAP32[$106 >> 2] = $18; //@line 6758
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 6759
    HEAP32[$107 >> 2] = $20; //@line 6760
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 6761
    HEAP32[$108 >> 2] = $22; //@line 6762
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 6763
    HEAP32[$109 >> 2] = $92; //@line 6764
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 6765
    HEAP32[$110 >> 2] = $52; //@line 6766
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 6767
    HEAP32[$111 >> 2] = $24; //@line 6768
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 6769
    HEAP32[$112 >> 2] = $26; //@line 6770
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 6771
    HEAP32[$113 >> 2] = $30; //@line 6772
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 6773
    HEAP32[$114 >> 2] = $32; //@line 6774
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 6775
    HEAP32[$115 >> 2] = $34; //@line 6776
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 6777
    HEAP32[$116 >> 2] = $36; //@line 6778
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 6779
    HEAP32[$117 >> 2] = $38; //@line 6780
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 6781
    HEAP32[$118 >> 2] = $40; //@line 6782
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 6783
    HEAP32[$119 >> 2] = $42; //@line 6784
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 6785
    HEAP32[$120 >> 2] = $44; //@line 6786
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 6787
    HEAP32[$121 >> 2] = $46; //@line 6788
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 6789
    HEAP32[$122 >> 2] = $$131; //@line 6790
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 6791
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 6792
    sp = STACKTOP; //@line 6793
    return;
   }
   ___async_unwind = 0; //@line 6796
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 6797
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 6798
   HEAP32[$98 >> 2] = $2; //@line 6799
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 6800
   HEAP32[$99 >> 2] = $4; //@line 6801
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 6802
   HEAP32[$100 >> 2] = $6; //@line 6803
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 6804
   HEAP32[$101 >> 2] = $8; //@line 6805
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 6806
   HEAP32[$102 >> 2] = $10; //@line 6807
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 6808
   HEAP32[$103 >> 2] = $12; //@line 6809
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 6810
   HEAP32[$104 >> 2] = $14; //@line 6811
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 6812
   HEAP32[$105 >> 2] = $16; //@line 6813
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 6814
   HEAP32[$106 >> 2] = $18; //@line 6815
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 6816
   HEAP32[$107 >> 2] = $20; //@line 6817
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 6818
   HEAP32[$108 >> 2] = $22; //@line 6819
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 6820
   HEAP32[$109 >> 2] = $92; //@line 6821
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 6822
   HEAP32[$110 >> 2] = $52; //@line 6823
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 6824
   HEAP32[$111 >> 2] = $24; //@line 6825
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 6826
   HEAP32[$112 >> 2] = $26; //@line 6827
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 6828
   HEAP32[$113 >> 2] = $30; //@line 6829
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 6830
   HEAP32[$114 >> 2] = $32; //@line 6831
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 6832
   HEAP32[$115 >> 2] = $34; //@line 6833
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 6834
   HEAP32[$116 >> 2] = $36; //@line 6835
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 6836
   HEAP32[$117 >> 2] = $38; //@line 6837
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 6838
   HEAP32[$118 >> 2] = $40; //@line 6839
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 6840
   HEAP32[$119 >> 2] = $42; //@line 6841
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 6842
   HEAP32[$120 >> 2] = $44; //@line 6843
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 6844
   HEAP32[$121 >> 2] = $46; //@line 6845
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 6846
   HEAP32[$122 >> 2] = $$131; //@line 6847
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 6848
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 6849
   sp = STACKTOP; //@line 6850
   return;
  }
 } else if ((label | 0) == 26) {
  HEAP32[$180 >> 2] = 0; //@line 6855
  $185 = $179 + 44 | 0; //@line 6856
  $186 = HEAP32[$185 >> 2] | 0; //@line 6857
  if (!$186) {
   HEAP32[$32 >> 2] = 0; //@line 6860
   $217 = HEAP32[$179 >> 2] | 0; //@line 6861
   HEAP32[$34 >> 2] = 0; //@line 6862
   HEAP32[$36 >> 2] = 193; //@line 6863
   HEAP32[$38 >> 2] = $217; //@line 6864
   HEAP32[$6 >> 2] = 764; //@line 6865
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 6866
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($40, 0, $42) | 0; //@line 6867
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 6870
    $218 = $ReallocAsyncCtx13 + 4 | 0; //@line 6871
    HEAP32[$218 >> 2] = $2; //@line 6872
    $219 = $ReallocAsyncCtx13 + 8 | 0; //@line 6873
    HEAP32[$219 >> 2] = $4; //@line 6874
    $220 = $ReallocAsyncCtx13 + 12 | 0; //@line 6875
    HEAP32[$220 >> 2] = $6; //@line 6876
    $221 = $ReallocAsyncCtx13 + 16 | 0; //@line 6877
    HEAP32[$221 >> 2] = $8; //@line 6878
    $222 = $ReallocAsyncCtx13 + 20 | 0; //@line 6879
    HEAP32[$222 >> 2] = $10; //@line 6880
    $223 = $ReallocAsyncCtx13 + 24 | 0; //@line 6881
    HEAP32[$223 >> 2] = $12; //@line 6882
    $224 = $ReallocAsyncCtx13 + 28 | 0; //@line 6883
    HEAP32[$224 >> 2] = $14; //@line 6884
    $225 = $ReallocAsyncCtx13 + 32 | 0; //@line 6885
    HEAP32[$225 >> 2] = $16; //@line 6886
    $226 = $ReallocAsyncCtx13 + 36 | 0; //@line 6887
    HEAP32[$226 >> 2] = $18; //@line 6888
    $227 = $ReallocAsyncCtx13 + 40 | 0; //@line 6889
    HEAP32[$227 >> 2] = $20; //@line 6890
    $228 = $ReallocAsyncCtx13 + 44 | 0; //@line 6891
    HEAP32[$228 >> 2] = $22; //@line 6892
    $229 = $ReallocAsyncCtx13 + 48 | 0; //@line 6893
    HEAP32[$229 >> 2] = $24; //@line 6894
    $230 = $ReallocAsyncCtx13 + 52 | 0; //@line 6895
    HEAP32[$230 >> 2] = $26; //@line 6896
    $231 = $ReallocAsyncCtx13 + 56 | 0; //@line 6897
    HEAP32[$231 >> 2] = $30; //@line 6898
    $232 = $ReallocAsyncCtx13 + 60 | 0; //@line 6899
    HEAP32[$232 >> 2] = $32; //@line 6900
    $233 = $ReallocAsyncCtx13 + 64 | 0; //@line 6901
    HEAP32[$233 >> 2] = $34; //@line 6902
    $234 = $ReallocAsyncCtx13 + 68 | 0; //@line 6903
    HEAP32[$234 >> 2] = $36; //@line 6904
    $235 = $ReallocAsyncCtx13 + 72 | 0; //@line 6905
    HEAP32[$235 >> 2] = $38; //@line 6906
    $236 = $ReallocAsyncCtx13 + 76 | 0; //@line 6907
    HEAP32[$236 >> 2] = $40; //@line 6908
    $237 = $ReallocAsyncCtx13 + 80 | 0; //@line 6909
    HEAP32[$237 >> 2] = $42; //@line 6910
    $238 = $ReallocAsyncCtx13 + 84 | 0; //@line 6911
    HEAP32[$238 >> 2] = $44; //@line 6912
    $239 = $ReallocAsyncCtx13 + 88 | 0; //@line 6913
    HEAP32[$239 >> 2] = $46; //@line 6914
    $240 = $ReallocAsyncCtx13 + 92 | 0; //@line 6915
    HEAP32[$240 >> 2] = $$03071$reg2mem$0; //@line 6916
    $241 = $ReallocAsyncCtx13 + 96 | 0; //@line 6917
    HEAP32[$241 >> 2] = $$02972$reg2mem$0; //@line 6918
    $242 = $ReallocAsyncCtx13 + 100 | 0; //@line 6919
    HEAP32[$242 >> 2] = $$reg2mem$0; //@line 6920
    sp = STACKTOP; //@line 6921
    return;
   }
   ___async_unwind = 0; //@line 6924
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 6925
   $218 = $ReallocAsyncCtx13 + 4 | 0; //@line 6926
   HEAP32[$218 >> 2] = $2; //@line 6927
   $219 = $ReallocAsyncCtx13 + 8 | 0; //@line 6928
   HEAP32[$219 >> 2] = $4; //@line 6929
   $220 = $ReallocAsyncCtx13 + 12 | 0; //@line 6930
   HEAP32[$220 >> 2] = $6; //@line 6931
   $221 = $ReallocAsyncCtx13 + 16 | 0; //@line 6932
   HEAP32[$221 >> 2] = $8; //@line 6933
   $222 = $ReallocAsyncCtx13 + 20 | 0; //@line 6934
   HEAP32[$222 >> 2] = $10; //@line 6935
   $223 = $ReallocAsyncCtx13 + 24 | 0; //@line 6936
   HEAP32[$223 >> 2] = $12; //@line 6937
   $224 = $ReallocAsyncCtx13 + 28 | 0; //@line 6938
   HEAP32[$224 >> 2] = $14; //@line 6939
   $225 = $ReallocAsyncCtx13 + 32 | 0; //@line 6940
   HEAP32[$225 >> 2] = $16; //@line 6941
   $226 = $ReallocAsyncCtx13 + 36 | 0; //@line 6942
   HEAP32[$226 >> 2] = $18; //@line 6943
   $227 = $ReallocAsyncCtx13 + 40 | 0; //@line 6944
   HEAP32[$227 >> 2] = $20; //@line 6945
   $228 = $ReallocAsyncCtx13 + 44 | 0; //@line 6946
   HEAP32[$228 >> 2] = $22; //@line 6947
   $229 = $ReallocAsyncCtx13 + 48 | 0; //@line 6948
   HEAP32[$229 >> 2] = $24; //@line 6949
   $230 = $ReallocAsyncCtx13 + 52 | 0; //@line 6950
   HEAP32[$230 >> 2] = $26; //@line 6951
   $231 = $ReallocAsyncCtx13 + 56 | 0; //@line 6952
   HEAP32[$231 >> 2] = $30; //@line 6953
   $232 = $ReallocAsyncCtx13 + 60 | 0; //@line 6954
   HEAP32[$232 >> 2] = $32; //@line 6955
   $233 = $ReallocAsyncCtx13 + 64 | 0; //@line 6956
   HEAP32[$233 >> 2] = $34; //@line 6957
   $234 = $ReallocAsyncCtx13 + 68 | 0; //@line 6958
   HEAP32[$234 >> 2] = $36; //@line 6959
   $235 = $ReallocAsyncCtx13 + 72 | 0; //@line 6960
   HEAP32[$235 >> 2] = $38; //@line 6961
   $236 = $ReallocAsyncCtx13 + 76 | 0; //@line 6962
   HEAP32[$236 >> 2] = $40; //@line 6963
   $237 = $ReallocAsyncCtx13 + 80 | 0; //@line 6964
   HEAP32[$237 >> 2] = $42; //@line 6965
   $238 = $ReallocAsyncCtx13 + 84 | 0; //@line 6966
   HEAP32[$238 >> 2] = $44; //@line 6967
   $239 = $ReallocAsyncCtx13 + 88 | 0; //@line 6968
   HEAP32[$239 >> 2] = $46; //@line 6969
   $240 = $ReallocAsyncCtx13 + 92 | 0; //@line 6970
   HEAP32[$240 >> 2] = $$03071$reg2mem$0; //@line 6971
   $241 = $ReallocAsyncCtx13 + 96 | 0; //@line 6972
   HEAP32[$241 >> 2] = $$02972$reg2mem$0; //@line 6973
   $242 = $ReallocAsyncCtx13 + 100 | 0; //@line 6974
   HEAP32[$242 >> 2] = $$reg2mem$0; //@line 6975
   sp = STACKTOP; //@line 6976
   return;
  } else {
   $190 = HEAP32[$186 + 4 >> 2] | 0; //@line 6981
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 6982
   FUNCTION_TABLE_vii[$190 & 7]($30, $179 + 32 | 0); //@line 6983
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 6986
    $191 = $ReallocAsyncCtx4 + 4 | 0; //@line 6987
    HEAP32[$191 >> 2] = $2; //@line 6988
    $192 = $ReallocAsyncCtx4 + 8 | 0; //@line 6989
    HEAP32[$192 >> 2] = $4; //@line 6990
    $193 = $ReallocAsyncCtx4 + 12 | 0; //@line 6991
    HEAP32[$193 >> 2] = $6; //@line 6992
    $194 = $ReallocAsyncCtx4 + 16 | 0; //@line 6993
    HEAP32[$194 >> 2] = $8; //@line 6994
    $195 = $ReallocAsyncCtx4 + 20 | 0; //@line 6995
    HEAP32[$195 >> 2] = $10; //@line 6996
    $196 = $ReallocAsyncCtx4 + 24 | 0; //@line 6997
    HEAP32[$196 >> 2] = $12; //@line 6998
    $197 = $ReallocAsyncCtx4 + 28 | 0; //@line 6999
    HEAP32[$197 >> 2] = $14; //@line 7000
    $198 = $ReallocAsyncCtx4 + 32 | 0; //@line 7001
    HEAP32[$198 >> 2] = $16; //@line 7002
    $199 = $ReallocAsyncCtx4 + 36 | 0; //@line 7003
    HEAP32[$199 >> 2] = $18; //@line 7004
    $200 = $ReallocAsyncCtx4 + 40 | 0; //@line 7005
    HEAP32[$200 >> 2] = $20; //@line 7006
    $201 = $ReallocAsyncCtx4 + 44 | 0; //@line 7007
    HEAP32[$201 >> 2] = $22; //@line 7008
    $202 = $ReallocAsyncCtx4 + 48 | 0; //@line 7009
    HEAP32[$202 >> 2] = $24; //@line 7010
    $203 = $ReallocAsyncCtx4 + 52 | 0; //@line 7011
    HEAP32[$203 >> 2] = $26; //@line 7012
    $204 = $ReallocAsyncCtx4 + 56 | 0; //@line 7013
    HEAP32[$204 >> 2] = $185; //@line 7014
    $205 = $ReallocAsyncCtx4 + 60 | 0; //@line 7015
    HEAP32[$205 >> 2] = $$reg2mem$0; //@line 7016
    $206 = $ReallocAsyncCtx4 + 64 | 0; //@line 7017
    HEAP32[$206 >> 2] = $30; //@line 7018
    $207 = $ReallocAsyncCtx4 + 68 | 0; //@line 7019
    HEAP32[$207 >> 2] = $32; //@line 7020
    $208 = $ReallocAsyncCtx4 + 72 | 0; //@line 7021
    HEAP32[$208 >> 2] = $34; //@line 7022
    $209 = $ReallocAsyncCtx4 + 76 | 0; //@line 7023
    HEAP32[$209 >> 2] = $36; //@line 7024
    $210 = $ReallocAsyncCtx4 + 80 | 0; //@line 7025
    HEAP32[$210 >> 2] = $38; //@line 7026
    $211 = $ReallocAsyncCtx4 + 84 | 0; //@line 7027
    HEAP32[$211 >> 2] = $40; //@line 7028
    $212 = $ReallocAsyncCtx4 + 88 | 0; //@line 7029
    HEAP32[$212 >> 2] = $42; //@line 7030
    $213 = $ReallocAsyncCtx4 + 92 | 0; //@line 7031
    HEAP32[$213 >> 2] = $44; //@line 7032
    $214 = $ReallocAsyncCtx4 + 96 | 0; //@line 7033
    HEAP32[$214 >> 2] = $46; //@line 7034
    $215 = $ReallocAsyncCtx4 + 100 | 0; //@line 7035
    HEAP32[$215 >> 2] = $$03071$reg2mem$0; //@line 7036
    $216 = $ReallocAsyncCtx4 + 104 | 0; //@line 7037
    HEAP32[$216 >> 2] = $$02972$reg2mem$0; //@line 7038
    sp = STACKTOP; //@line 7039
    return;
   }
   ___async_unwind = 0; //@line 7042
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 7043
   $191 = $ReallocAsyncCtx4 + 4 | 0; //@line 7044
   HEAP32[$191 >> 2] = $2; //@line 7045
   $192 = $ReallocAsyncCtx4 + 8 | 0; //@line 7046
   HEAP32[$192 >> 2] = $4; //@line 7047
   $193 = $ReallocAsyncCtx4 + 12 | 0; //@line 7048
   HEAP32[$193 >> 2] = $6; //@line 7049
   $194 = $ReallocAsyncCtx4 + 16 | 0; //@line 7050
   HEAP32[$194 >> 2] = $8; //@line 7051
   $195 = $ReallocAsyncCtx4 + 20 | 0; //@line 7052
   HEAP32[$195 >> 2] = $10; //@line 7053
   $196 = $ReallocAsyncCtx4 + 24 | 0; //@line 7054
   HEAP32[$196 >> 2] = $12; //@line 7055
   $197 = $ReallocAsyncCtx4 + 28 | 0; //@line 7056
   HEAP32[$197 >> 2] = $14; //@line 7057
   $198 = $ReallocAsyncCtx4 + 32 | 0; //@line 7058
   HEAP32[$198 >> 2] = $16; //@line 7059
   $199 = $ReallocAsyncCtx4 + 36 | 0; //@line 7060
   HEAP32[$199 >> 2] = $18; //@line 7061
   $200 = $ReallocAsyncCtx4 + 40 | 0; //@line 7062
   HEAP32[$200 >> 2] = $20; //@line 7063
   $201 = $ReallocAsyncCtx4 + 44 | 0; //@line 7064
   HEAP32[$201 >> 2] = $22; //@line 7065
   $202 = $ReallocAsyncCtx4 + 48 | 0; //@line 7066
   HEAP32[$202 >> 2] = $24; //@line 7067
   $203 = $ReallocAsyncCtx4 + 52 | 0; //@line 7068
   HEAP32[$203 >> 2] = $26; //@line 7069
   $204 = $ReallocAsyncCtx4 + 56 | 0; //@line 7070
   HEAP32[$204 >> 2] = $185; //@line 7071
   $205 = $ReallocAsyncCtx4 + 60 | 0; //@line 7072
   HEAP32[$205 >> 2] = $$reg2mem$0; //@line 7073
   $206 = $ReallocAsyncCtx4 + 64 | 0; //@line 7074
   HEAP32[$206 >> 2] = $30; //@line 7075
   $207 = $ReallocAsyncCtx4 + 68 | 0; //@line 7076
   HEAP32[$207 >> 2] = $32; //@line 7077
   $208 = $ReallocAsyncCtx4 + 72 | 0; //@line 7078
   HEAP32[$208 >> 2] = $34; //@line 7079
   $209 = $ReallocAsyncCtx4 + 76 | 0; //@line 7080
   HEAP32[$209 >> 2] = $36; //@line 7081
   $210 = $ReallocAsyncCtx4 + 80 | 0; //@line 7082
   HEAP32[$210 >> 2] = $38; //@line 7083
   $211 = $ReallocAsyncCtx4 + 84 | 0; //@line 7084
   HEAP32[$211 >> 2] = $40; //@line 7085
   $212 = $ReallocAsyncCtx4 + 88 | 0; //@line 7086
   HEAP32[$212 >> 2] = $42; //@line 7087
   $213 = $ReallocAsyncCtx4 + 92 | 0; //@line 7088
   HEAP32[$213 >> 2] = $44; //@line 7089
   $214 = $ReallocAsyncCtx4 + 96 | 0; //@line 7090
   HEAP32[$214 >> 2] = $46; //@line 7091
   $215 = $ReallocAsyncCtx4 + 100 | 0; //@line 7092
   HEAP32[$215 >> 2] = $$03071$reg2mem$0; //@line 7093
   $216 = $ReallocAsyncCtx4 + 104 | 0; //@line 7094
   HEAP32[$216 >> 2] = $$02972$reg2mem$0; //@line 7095
   sp = STACKTOP; //@line 7096
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_133($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $246 = 0, $247 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 8063
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8065
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8067
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8069
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8071
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8073
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8075
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8077
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8079
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8081
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8083
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8085
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8087
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8089
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8091
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8093
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8095
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8097
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8099
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 8101
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 8103
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 8105
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 8107
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 8109
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 8111
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 8113
 $214 = HEAP32[$42 >> 2] | 0; //@line 8114
 if (!$214) {
  $$02972$reg2mem$0 = $48; //@line 8117
  $$03071$reg2mem$0 = $46; //@line 8117
  $$reg2mem$0 = $50; //@line 8117
 } else {
  $217 = HEAP32[$214 + 8 >> 2] | 0; //@line 8120
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 8121
  FUNCTION_TABLE_vi[$217 & 511]($28); //@line 8122
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 196; //@line 8125
   $218 = $ReallocAsyncCtx6 + 4 | 0; //@line 8126
   HEAP32[$218 >> 2] = $2; //@line 8127
   $219 = $ReallocAsyncCtx6 + 8 | 0; //@line 8128
   HEAP32[$219 >> 2] = $4; //@line 8129
   $220 = $ReallocAsyncCtx6 + 12 | 0; //@line 8130
   HEAP32[$220 >> 2] = $6; //@line 8131
   $221 = $ReallocAsyncCtx6 + 16 | 0; //@line 8132
   HEAP32[$221 >> 2] = $8; //@line 8133
   $222 = $ReallocAsyncCtx6 + 20 | 0; //@line 8134
   HEAP32[$222 >> 2] = $10; //@line 8135
   $223 = $ReallocAsyncCtx6 + 24 | 0; //@line 8136
   HEAP32[$223 >> 2] = $12; //@line 8137
   $224 = $ReallocAsyncCtx6 + 28 | 0; //@line 8138
   HEAP32[$224 >> 2] = $14; //@line 8139
   $225 = $ReallocAsyncCtx6 + 32 | 0; //@line 8140
   HEAP32[$225 >> 2] = $16; //@line 8141
   $226 = $ReallocAsyncCtx6 + 36 | 0; //@line 8142
   HEAP32[$226 >> 2] = $18; //@line 8143
   $227 = $ReallocAsyncCtx6 + 40 | 0; //@line 8144
   HEAP32[$227 >> 2] = $20; //@line 8145
   $228 = $ReallocAsyncCtx6 + 44 | 0; //@line 8146
   HEAP32[$228 >> 2] = $22; //@line 8147
   $229 = $ReallocAsyncCtx6 + 48 | 0; //@line 8148
   HEAP32[$229 >> 2] = $24; //@line 8149
   $230 = $ReallocAsyncCtx6 + 52 | 0; //@line 8150
   HEAP32[$230 >> 2] = $26; //@line 8151
   $231 = $ReallocAsyncCtx6 + 56 | 0; //@line 8152
   HEAP32[$231 >> 2] = $28; //@line 8153
   $232 = $ReallocAsyncCtx6 + 60 | 0; //@line 8154
   HEAP32[$232 >> 2] = $30; //@line 8155
   $233 = $ReallocAsyncCtx6 + 64 | 0; //@line 8156
   HEAP32[$233 >> 2] = $32; //@line 8157
   $234 = $ReallocAsyncCtx6 + 68 | 0; //@line 8158
   HEAP32[$234 >> 2] = $34; //@line 8159
   $235 = $ReallocAsyncCtx6 + 72 | 0; //@line 8160
   HEAP32[$235 >> 2] = $36; //@line 8161
   $236 = $ReallocAsyncCtx6 + 76 | 0; //@line 8162
   HEAP32[$236 >> 2] = $38; //@line 8163
   $237 = $ReallocAsyncCtx6 + 80 | 0; //@line 8164
   HEAP32[$237 >> 2] = $40; //@line 8165
   $238 = $ReallocAsyncCtx6 + 84 | 0; //@line 8166
   HEAP32[$238 >> 2] = $42; //@line 8167
   $239 = $ReallocAsyncCtx6 + 88 | 0; //@line 8168
   HEAP32[$239 >> 2] = $44; //@line 8169
   $240 = $ReallocAsyncCtx6 + 92 | 0; //@line 8170
   HEAP32[$240 >> 2] = $46; //@line 8171
   $241 = $ReallocAsyncCtx6 + 96 | 0; //@line 8172
   HEAP32[$241 >> 2] = $48; //@line 8173
   $242 = $ReallocAsyncCtx6 + 100 | 0; //@line 8174
   HEAP32[$242 >> 2] = $50; //@line 8175
   sp = STACKTOP; //@line 8176
   return;
  }
  ___async_unwind = 0; //@line 8179
  HEAP32[$ReallocAsyncCtx6 >> 2] = 196; //@line 8180
  $218 = $ReallocAsyncCtx6 + 4 | 0; //@line 8181
  HEAP32[$218 >> 2] = $2; //@line 8182
  $219 = $ReallocAsyncCtx6 + 8 | 0; //@line 8183
  HEAP32[$219 >> 2] = $4; //@line 8184
  $220 = $ReallocAsyncCtx6 + 12 | 0; //@line 8185
  HEAP32[$220 >> 2] = $6; //@line 8186
  $221 = $ReallocAsyncCtx6 + 16 | 0; //@line 8187
  HEAP32[$221 >> 2] = $8; //@line 8188
  $222 = $ReallocAsyncCtx6 + 20 | 0; //@line 8189
  HEAP32[$222 >> 2] = $10; //@line 8190
  $223 = $ReallocAsyncCtx6 + 24 | 0; //@line 8191
  HEAP32[$223 >> 2] = $12; //@line 8192
  $224 = $ReallocAsyncCtx6 + 28 | 0; //@line 8193
  HEAP32[$224 >> 2] = $14; //@line 8194
  $225 = $ReallocAsyncCtx6 + 32 | 0; //@line 8195
  HEAP32[$225 >> 2] = $16; //@line 8196
  $226 = $ReallocAsyncCtx6 + 36 | 0; //@line 8197
  HEAP32[$226 >> 2] = $18; //@line 8198
  $227 = $ReallocAsyncCtx6 + 40 | 0; //@line 8199
  HEAP32[$227 >> 2] = $20; //@line 8200
  $228 = $ReallocAsyncCtx6 + 44 | 0; //@line 8201
  HEAP32[$228 >> 2] = $22; //@line 8202
  $229 = $ReallocAsyncCtx6 + 48 | 0; //@line 8203
  HEAP32[$229 >> 2] = $24; //@line 8204
  $230 = $ReallocAsyncCtx6 + 52 | 0; //@line 8205
  HEAP32[$230 >> 2] = $26; //@line 8206
  $231 = $ReallocAsyncCtx6 + 56 | 0; //@line 8207
  HEAP32[$231 >> 2] = $28; //@line 8208
  $232 = $ReallocAsyncCtx6 + 60 | 0; //@line 8209
  HEAP32[$232 >> 2] = $30; //@line 8210
  $233 = $ReallocAsyncCtx6 + 64 | 0; //@line 8211
  HEAP32[$233 >> 2] = $32; //@line 8212
  $234 = $ReallocAsyncCtx6 + 68 | 0; //@line 8213
  HEAP32[$234 >> 2] = $34; //@line 8214
  $235 = $ReallocAsyncCtx6 + 72 | 0; //@line 8215
  HEAP32[$235 >> 2] = $36; //@line 8216
  $236 = $ReallocAsyncCtx6 + 76 | 0; //@line 8217
  HEAP32[$236 >> 2] = $38; //@line 8218
  $237 = $ReallocAsyncCtx6 + 80 | 0; //@line 8219
  HEAP32[$237 >> 2] = $40; //@line 8220
  $238 = $ReallocAsyncCtx6 + 84 | 0; //@line 8221
  HEAP32[$238 >> 2] = $42; //@line 8222
  $239 = $ReallocAsyncCtx6 + 88 | 0; //@line 8223
  HEAP32[$239 >> 2] = $44; //@line 8224
  $240 = $ReallocAsyncCtx6 + 92 | 0; //@line 8225
  HEAP32[$240 >> 2] = $46; //@line 8226
  $241 = $ReallocAsyncCtx6 + 96 | 0; //@line 8227
  HEAP32[$241 >> 2] = $48; //@line 8228
  $242 = $ReallocAsyncCtx6 + 100 | 0; //@line 8229
  HEAP32[$242 >> 2] = $50; //@line 8230
  sp = STACKTOP; //@line 8231
  return;
 }
 L9 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 8238
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 8238
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 8240
   $$131 = $$03071$reg2mem$0; //@line 8240
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 8243
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 8246
    break L9;
   }
   $52 = 7844 + ($$02972$reg2mem$1 << 2) | 0; //@line 8249
   $54 = HEAP32[$52 >> 2] | 0; //@line 8250
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 8262
   break;
  }
  $84 = $54 + 72 | 0; //@line 8265
  $85 = HEAP32[$84 >> 2] | 0; //@line 8266
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 8270
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 8276
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 8280
  $151 = $150 + 76 | 0; //@line 8281
  $152 = HEAP32[$151 >> 2] | 0; //@line 8282
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 8285
   $$03071$reg2mem$0 = $$131; //@line 8285
   $$reg2mem$0 = $52; //@line 8285
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 8290
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 8294
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 8295
  $$03071$reg2mem$0 = $$131; //@line 8295
  $$reg2mem$0 = $52; //@line 8295
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8724] = 0; //@line 8300
   return;
  }
  $246 = $$131 + 44 | 0; //@line 8303
  $247 = HEAP32[$246 >> 2] | 0; //@line 8304
  if (!$247) {
   $255 = $22 + 12 | 0; //@line 8307
   HEAP32[$255 >> 2] = 0; //@line 8308
   $257 = $26 + 4 | 0; //@line 8310
   HEAP32[$257 >> 2] = 0; //@line 8312
   HEAP32[$257 + 4 >> 2] = 0; //@line 8315
   HEAP32[$26 >> 2] = 3; //@line 8316
   $261 = $26 + 12 | 0; //@line 8317
   HEAP32[$261 >> 2] = 752; //@line 8318
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 8319
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 100, $26) | 0; //@line 8320
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 8323
    $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 8324
    HEAP32[$262 >> 2] = $261; //@line 8325
    $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 8326
    HEAP32[$263 >> 2] = $255; //@line 8327
    $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 8328
    HEAP32[$264 >> 2] = $26; //@line 8329
    $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 8330
    HEAP32[$265 >> 2] = $22; //@line 8331
    sp = STACKTOP; //@line 8332
    return;
   }
   ___async_unwind = 0; //@line 8335
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 8336
   $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 8337
   HEAP32[$262 >> 2] = $261; //@line 8338
   $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 8339
   HEAP32[$263 >> 2] = $255; //@line 8340
   $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 8341
   HEAP32[$264 >> 2] = $26; //@line 8342
   $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 8343
   HEAP32[$265 >> 2] = $22; //@line 8344
   sp = STACKTOP; //@line 8345
   return;
  } else {
   $251 = HEAP32[$247 + 4 >> 2] | 0; //@line 8350
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 8351
   FUNCTION_TABLE_vii[$251 & 7]($22, $$131 + 32 | 0); //@line 8352
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 8355
    $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 8356
    HEAP32[$252 >> 2] = $246; //@line 8357
    $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 8358
    HEAP32[$253 >> 2] = $22; //@line 8359
    $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 8360
    HEAP32[$254 >> 2] = $26; //@line 8361
    sp = STACKTOP; //@line 8362
    return;
   }
   ___async_unwind = 0; //@line 8365
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 8366
   $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 8367
   HEAP32[$252 >> 2] = $246; //@line 8368
   $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 8369
   HEAP32[$253 >> 2] = $22; //@line 8370
   $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 8371
   HEAP32[$254 >> 2] = $26; //@line 8372
   sp = STACKTOP; //@line 8373
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 8378
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 8379
  __ZL28nsapi_dns_query_async_deletei($59); //@line 8380
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 8383
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 8384
   HEAP32[$60 >> 2] = $2; //@line 8385
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 8386
   HEAP32[$61 >> 2] = $4; //@line 8387
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 8388
   HEAP32[$62 >> 2] = $6; //@line 8389
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 8390
   HEAP32[$63 >> 2] = $8; //@line 8391
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 8392
   HEAP32[$64 >> 2] = $10; //@line 8393
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 8394
   HEAP32[$65 >> 2] = $12; //@line 8395
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 8396
   HEAP32[$66 >> 2] = $14; //@line 8397
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 8398
   HEAP32[$67 >> 2] = $16; //@line 8399
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 8400
   HEAP32[$68 >> 2] = $18; //@line 8401
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 8402
   HEAP32[$69 >> 2] = $20; //@line 8403
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 8404
   HEAP32[$70 >> 2] = $22; //@line 8405
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 8406
   HEAP32[$71 >> 2] = $24; //@line 8407
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 8408
   HEAP32[$72 >> 2] = $26; //@line 8409
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 8410
   HEAP32[$73 >> 2] = $28; //@line 8411
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 8412
   HEAP32[$74 >> 2] = $30; //@line 8413
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 8414
   HEAP32[$75 >> 2] = $32; //@line 8415
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 8416
   HEAP32[$76 >> 2] = $34; //@line 8417
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 8418
   HEAP32[$77 >> 2] = $36; //@line 8419
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 8420
   HEAP32[$78 >> 2] = $38; //@line 8421
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 8422
   HEAP32[$79 >> 2] = $40; //@line 8423
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 8424
   HEAP32[$80 >> 2] = $42; //@line 8425
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 8426
   HEAP32[$81 >> 2] = $44; //@line 8427
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 8428
   HEAP32[$82 >> 2] = $$131; //@line 8429
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 8430
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 8431
   sp = STACKTOP; //@line 8432
   return;
  }
  ___async_unwind = 0; //@line 8435
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 8436
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 8437
  HEAP32[$60 >> 2] = $2; //@line 8438
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 8439
  HEAP32[$61 >> 2] = $4; //@line 8440
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 8441
  HEAP32[$62 >> 2] = $6; //@line 8442
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 8443
  HEAP32[$63 >> 2] = $8; //@line 8444
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 8445
  HEAP32[$64 >> 2] = $10; //@line 8446
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 8447
  HEAP32[$65 >> 2] = $12; //@line 8448
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 8449
  HEAP32[$66 >> 2] = $14; //@line 8450
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 8451
  HEAP32[$67 >> 2] = $16; //@line 8452
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 8453
  HEAP32[$68 >> 2] = $18; //@line 8454
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 8455
  HEAP32[$69 >> 2] = $20; //@line 8456
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 8457
  HEAP32[$70 >> 2] = $22; //@line 8458
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 8459
  HEAP32[$71 >> 2] = $24; //@line 8460
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 8461
  HEAP32[$72 >> 2] = $26; //@line 8462
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 8463
  HEAP32[$73 >> 2] = $28; //@line 8464
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 8465
  HEAP32[$74 >> 2] = $30; //@line 8466
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 8467
  HEAP32[$75 >> 2] = $32; //@line 8468
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 8469
  HEAP32[$76 >> 2] = $34; //@line 8470
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 8471
  HEAP32[$77 >> 2] = $36; //@line 8472
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 8473
  HEAP32[$78 >> 2] = $38; //@line 8474
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 8475
  HEAP32[$79 >> 2] = $40; //@line 8476
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 8477
  HEAP32[$80 >> 2] = $42; //@line 8478
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 8479
  HEAP32[$81 >> 2] = $44; //@line 8480
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 8481
  HEAP32[$82 >> 2] = $$131; //@line 8482
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 8483
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 8484
  sp = STACKTOP; //@line 8485
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 8490
  $92 = $54 + 44 | 0; //@line 8491
  $93 = HEAP32[$92 >> 2] | 0; //@line 8492
  if (!$93) {
   HEAP32[$8 >> 2] = 0; //@line 8495
   $124 = HEAP32[$54 >> 2] | 0; //@line 8496
   HEAP32[$10 >> 2] = 0; //@line 8497
   HEAP32[$12 >> 2] = 188; //@line 8498
   HEAP32[$14 >> 2] = $124; //@line 8499
   HEAP32[$16 >> 2] = 764; //@line 8500
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 8501
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 0, $20) | 0; //@line 8502
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 8505
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 8506
    HEAP32[$125 >> 2] = $2; //@line 8507
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 8508
    HEAP32[$126 >> 2] = $4; //@line 8509
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 8510
    HEAP32[$127 >> 2] = $6; //@line 8511
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 8512
    HEAP32[$128 >> 2] = $8; //@line 8513
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 8514
    HEAP32[$129 >> 2] = $10; //@line 8515
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 8516
    HEAP32[$130 >> 2] = $12; //@line 8517
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 8518
    HEAP32[$131 >> 2] = $14; //@line 8519
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 8520
    HEAP32[$132 >> 2] = $16; //@line 8521
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 8522
    HEAP32[$133 >> 2] = $18; //@line 8523
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 8524
    HEAP32[$134 >> 2] = $20; //@line 8525
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 8526
    HEAP32[$135 >> 2] = $22; //@line 8527
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 8528
    HEAP32[$136 >> 2] = $24; //@line 8529
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 8530
    HEAP32[$137 >> 2] = $26; //@line 8531
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 8532
    HEAP32[$138 >> 2] = $28; //@line 8533
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 8534
    HEAP32[$139 >> 2] = $30; //@line 8535
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 8536
    HEAP32[$140 >> 2] = $32; //@line 8537
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 8538
    HEAP32[$141 >> 2] = $34; //@line 8539
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 8540
    HEAP32[$142 >> 2] = $36; //@line 8541
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 8542
    HEAP32[$143 >> 2] = $38; //@line 8543
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 8544
    HEAP32[$144 >> 2] = $40; //@line 8545
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 8546
    HEAP32[$145 >> 2] = $42; //@line 8547
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 8548
    HEAP32[$146 >> 2] = $44; //@line 8549
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 8550
    HEAP32[$147 >> 2] = $52; //@line 8551
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 8552
    HEAP32[$148 >> 2] = $$131; //@line 8553
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 8554
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 8555
    sp = STACKTOP; //@line 8556
    return;
   }
   ___async_unwind = 0; //@line 8559
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 8560
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 8561
   HEAP32[$125 >> 2] = $2; //@line 8562
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 8563
   HEAP32[$126 >> 2] = $4; //@line 8564
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 8565
   HEAP32[$127 >> 2] = $6; //@line 8566
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 8567
   HEAP32[$128 >> 2] = $8; //@line 8568
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 8569
   HEAP32[$129 >> 2] = $10; //@line 8570
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 8571
   HEAP32[$130 >> 2] = $12; //@line 8572
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 8573
   HEAP32[$131 >> 2] = $14; //@line 8574
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 8575
   HEAP32[$132 >> 2] = $16; //@line 8576
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 8577
   HEAP32[$133 >> 2] = $18; //@line 8578
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 8579
   HEAP32[$134 >> 2] = $20; //@line 8580
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 8581
   HEAP32[$135 >> 2] = $22; //@line 8582
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 8583
   HEAP32[$136 >> 2] = $24; //@line 8584
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 8585
   HEAP32[$137 >> 2] = $26; //@line 8586
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 8587
   HEAP32[$138 >> 2] = $28; //@line 8588
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 8589
   HEAP32[$139 >> 2] = $30; //@line 8590
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 8591
   HEAP32[$140 >> 2] = $32; //@line 8592
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 8593
   HEAP32[$141 >> 2] = $34; //@line 8594
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 8595
   HEAP32[$142 >> 2] = $36; //@line 8596
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 8597
   HEAP32[$143 >> 2] = $38; //@line 8598
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 8599
   HEAP32[$144 >> 2] = $40; //@line 8600
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 8601
   HEAP32[$145 >> 2] = $42; //@line 8602
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 8603
   HEAP32[$146 >> 2] = $44; //@line 8604
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 8605
   HEAP32[$147 >> 2] = $52; //@line 8606
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 8607
   HEAP32[$148 >> 2] = $$131; //@line 8608
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 8609
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 8610
   sp = STACKTOP; //@line 8611
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 8616
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 8617
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 8618
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 8621
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 8622
    HEAP32[$98 >> 2] = $2; //@line 8623
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 8624
    HEAP32[$99 >> 2] = $4; //@line 8625
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 8626
    HEAP32[$100 >> 2] = $6; //@line 8627
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 8628
    HEAP32[$101 >> 2] = $8; //@line 8629
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 8630
    HEAP32[$102 >> 2] = $10; //@line 8631
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 8632
    HEAP32[$103 >> 2] = $12; //@line 8633
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 8634
    HEAP32[$104 >> 2] = $14; //@line 8635
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 8636
    HEAP32[$105 >> 2] = $16; //@line 8637
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 8638
    HEAP32[$106 >> 2] = $18; //@line 8639
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 8640
    HEAP32[$107 >> 2] = $20; //@line 8641
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 8642
    HEAP32[$108 >> 2] = $22; //@line 8643
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 8644
    HEAP32[$109 >> 2] = $92; //@line 8645
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 8646
    HEAP32[$110 >> 2] = $52; //@line 8647
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 8648
    HEAP32[$111 >> 2] = $24; //@line 8649
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 8650
    HEAP32[$112 >> 2] = $26; //@line 8651
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 8652
    HEAP32[$113 >> 2] = $28; //@line 8653
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 8654
    HEAP32[$114 >> 2] = $30; //@line 8655
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 8656
    HEAP32[$115 >> 2] = $32; //@line 8657
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 8658
    HEAP32[$116 >> 2] = $34; //@line 8659
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 8660
    HEAP32[$117 >> 2] = $36; //@line 8661
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 8662
    HEAP32[$118 >> 2] = $38; //@line 8663
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 8664
    HEAP32[$119 >> 2] = $40; //@line 8665
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 8666
    HEAP32[$120 >> 2] = $42; //@line 8667
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 8668
    HEAP32[$121 >> 2] = $44; //@line 8669
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 8670
    HEAP32[$122 >> 2] = $$131; //@line 8671
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 8672
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 8673
    sp = STACKTOP; //@line 8674
    return;
   }
   ___async_unwind = 0; //@line 8677
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 8678
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 8679
   HEAP32[$98 >> 2] = $2; //@line 8680
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 8681
   HEAP32[$99 >> 2] = $4; //@line 8682
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 8683
   HEAP32[$100 >> 2] = $6; //@line 8684
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 8685
   HEAP32[$101 >> 2] = $8; //@line 8686
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 8687
   HEAP32[$102 >> 2] = $10; //@line 8688
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 8689
   HEAP32[$103 >> 2] = $12; //@line 8690
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 8691
   HEAP32[$104 >> 2] = $14; //@line 8692
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 8693
   HEAP32[$105 >> 2] = $16; //@line 8694
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 8695
   HEAP32[$106 >> 2] = $18; //@line 8696
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 8697
   HEAP32[$107 >> 2] = $20; //@line 8698
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 8699
   HEAP32[$108 >> 2] = $22; //@line 8700
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 8701
   HEAP32[$109 >> 2] = $92; //@line 8702
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 8703
   HEAP32[$110 >> 2] = $52; //@line 8704
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 8705
   HEAP32[$111 >> 2] = $24; //@line 8706
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 8707
   HEAP32[$112 >> 2] = $26; //@line 8708
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 8709
   HEAP32[$113 >> 2] = $28; //@line 8710
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 8711
   HEAP32[$114 >> 2] = $30; //@line 8712
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 8713
   HEAP32[$115 >> 2] = $32; //@line 8714
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 8715
   HEAP32[$116 >> 2] = $34; //@line 8716
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 8717
   HEAP32[$117 >> 2] = $36; //@line 8718
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 8719
   HEAP32[$118 >> 2] = $38; //@line 8720
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 8721
   HEAP32[$119 >> 2] = $40; //@line 8722
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 8723
   HEAP32[$120 >> 2] = $42; //@line 8724
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 8725
   HEAP32[$121 >> 2] = $44; //@line 8726
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 8727
   HEAP32[$122 >> 2] = $$131; //@line 8728
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 8729
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 8730
   sp = STACKTOP; //@line 8731
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 8736
  $156 = $150 + 44 | 0; //@line 8737
  $157 = HEAP32[$156 >> 2] | 0; //@line 8738
  if (!$157) {
   HEAP32[$30 >> 2] = 0; //@line 8741
   $188 = HEAP32[$150 >> 2] | 0; //@line 8742
   HEAP32[$32 >> 2] = 0; //@line 8743
   HEAP32[$34 >> 2] = 193; //@line 8744
   HEAP32[$36 >> 2] = $188; //@line 8745
   HEAP32[$6 >> 2] = 764; //@line 8746
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 8747
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($38, 0, $40) | 0; //@line 8748
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 8751
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 8752
    HEAP32[$189 >> 2] = $2; //@line 8753
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 8754
    HEAP32[$190 >> 2] = $4; //@line 8755
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 8756
    HEAP32[$191 >> 2] = $6; //@line 8757
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 8758
    HEAP32[$192 >> 2] = $8; //@line 8759
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 8760
    HEAP32[$193 >> 2] = $10; //@line 8761
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 8762
    HEAP32[$194 >> 2] = $12; //@line 8763
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 8764
    HEAP32[$195 >> 2] = $14; //@line 8765
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 8766
    HEAP32[$196 >> 2] = $16; //@line 8767
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 8768
    HEAP32[$197 >> 2] = $18; //@line 8769
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 8770
    HEAP32[$198 >> 2] = $20; //@line 8771
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 8772
    HEAP32[$199 >> 2] = $22; //@line 8773
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 8774
    HEAP32[$200 >> 2] = $24; //@line 8775
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 8776
    HEAP32[$201 >> 2] = $26; //@line 8777
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 8778
    HEAP32[$202 >> 2] = $28; //@line 8779
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 8780
    HEAP32[$203 >> 2] = $30; //@line 8781
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 8782
    HEAP32[$204 >> 2] = $32; //@line 8783
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 8784
    HEAP32[$205 >> 2] = $34; //@line 8785
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 8786
    HEAP32[$206 >> 2] = $36; //@line 8787
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 8788
    HEAP32[$207 >> 2] = $38; //@line 8789
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 8790
    HEAP32[$208 >> 2] = $40; //@line 8791
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 8792
    HEAP32[$209 >> 2] = $42; //@line 8793
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 8794
    HEAP32[$210 >> 2] = $44; //@line 8795
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 8796
    HEAP32[$211 >> 2] = $$131; //@line 8797
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 8798
    HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 8799
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 8800
    HEAP32[$213 >> 2] = $52; //@line 8801
    sp = STACKTOP; //@line 8802
    return;
   }
   ___async_unwind = 0; //@line 8805
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 8806
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 8807
   HEAP32[$189 >> 2] = $2; //@line 8808
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 8809
   HEAP32[$190 >> 2] = $4; //@line 8810
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 8811
   HEAP32[$191 >> 2] = $6; //@line 8812
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 8813
   HEAP32[$192 >> 2] = $8; //@line 8814
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 8815
   HEAP32[$193 >> 2] = $10; //@line 8816
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 8817
   HEAP32[$194 >> 2] = $12; //@line 8818
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 8819
   HEAP32[$195 >> 2] = $14; //@line 8820
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 8821
   HEAP32[$196 >> 2] = $16; //@line 8822
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 8823
   HEAP32[$197 >> 2] = $18; //@line 8824
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 8825
   HEAP32[$198 >> 2] = $20; //@line 8826
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 8827
   HEAP32[$199 >> 2] = $22; //@line 8828
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 8829
   HEAP32[$200 >> 2] = $24; //@line 8830
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 8831
   HEAP32[$201 >> 2] = $26; //@line 8832
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 8833
   HEAP32[$202 >> 2] = $28; //@line 8834
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 8835
   HEAP32[$203 >> 2] = $30; //@line 8836
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 8837
   HEAP32[$204 >> 2] = $32; //@line 8838
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 8839
   HEAP32[$205 >> 2] = $34; //@line 8840
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 8841
   HEAP32[$206 >> 2] = $36; //@line 8842
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 8843
   HEAP32[$207 >> 2] = $38; //@line 8844
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 8845
   HEAP32[$208 >> 2] = $40; //@line 8846
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 8847
   HEAP32[$209 >> 2] = $42; //@line 8848
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 8849
   HEAP32[$210 >> 2] = $44; //@line 8850
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 8851
   HEAP32[$211 >> 2] = $$131; //@line 8852
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 8853
   HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 8854
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 8855
   HEAP32[$213 >> 2] = $52; //@line 8856
   sp = STACKTOP; //@line 8857
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 8862
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 8863
   FUNCTION_TABLE_vii[$161 & 7]($28, $150 + 32 | 0); //@line 8864
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 8867
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 8868
    HEAP32[$162 >> 2] = $2; //@line 8869
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 8870
    HEAP32[$163 >> 2] = $4; //@line 8871
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 8872
    HEAP32[$164 >> 2] = $6; //@line 8873
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 8874
    HEAP32[$165 >> 2] = $8; //@line 8875
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 8876
    HEAP32[$166 >> 2] = $10; //@line 8877
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 8878
    HEAP32[$167 >> 2] = $12; //@line 8879
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 8880
    HEAP32[$168 >> 2] = $14; //@line 8881
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 8882
    HEAP32[$169 >> 2] = $16; //@line 8883
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 8884
    HEAP32[$170 >> 2] = $18; //@line 8885
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 8886
    HEAP32[$171 >> 2] = $20; //@line 8887
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 8888
    HEAP32[$172 >> 2] = $22; //@line 8889
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 8890
    HEAP32[$173 >> 2] = $24; //@line 8891
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 8892
    HEAP32[$174 >> 2] = $26; //@line 8893
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 8894
    HEAP32[$175 >> 2] = $156; //@line 8895
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 8896
    HEAP32[$176 >> 2] = $52; //@line 8897
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 8898
    HEAP32[$177 >> 2] = $28; //@line 8899
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 8900
    HEAP32[$178 >> 2] = $30; //@line 8901
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 8902
    HEAP32[$179 >> 2] = $32; //@line 8903
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 8904
    HEAP32[$180 >> 2] = $34; //@line 8905
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 8906
    HEAP32[$181 >> 2] = $36; //@line 8907
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 8908
    HEAP32[$182 >> 2] = $38; //@line 8909
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 8910
    HEAP32[$183 >> 2] = $40; //@line 8911
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 8912
    HEAP32[$184 >> 2] = $42; //@line 8913
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 8914
    HEAP32[$185 >> 2] = $44; //@line 8915
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 8916
    HEAP32[$186 >> 2] = $$131; //@line 8917
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 8918
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 8919
    sp = STACKTOP; //@line 8920
    return;
   }
   ___async_unwind = 0; //@line 8923
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 8924
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 8925
   HEAP32[$162 >> 2] = $2; //@line 8926
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 8927
   HEAP32[$163 >> 2] = $4; //@line 8928
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 8929
   HEAP32[$164 >> 2] = $6; //@line 8930
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 8931
   HEAP32[$165 >> 2] = $8; //@line 8932
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 8933
   HEAP32[$166 >> 2] = $10; //@line 8934
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 8935
   HEAP32[$167 >> 2] = $12; //@line 8936
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 8937
   HEAP32[$168 >> 2] = $14; //@line 8938
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 8939
   HEAP32[$169 >> 2] = $16; //@line 8940
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 8941
   HEAP32[$170 >> 2] = $18; //@line 8942
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 8943
   HEAP32[$171 >> 2] = $20; //@line 8944
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 8945
   HEAP32[$172 >> 2] = $22; //@line 8946
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 8947
   HEAP32[$173 >> 2] = $24; //@line 8948
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 8949
   HEAP32[$174 >> 2] = $26; //@line 8950
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 8951
   HEAP32[$175 >> 2] = $156; //@line 8952
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 8953
   HEAP32[$176 >> 2] = $52; //@line 8954
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 8955
   HEAP32[$177 >> 2] = $28; //@line 8956
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 8957
   HEAP32[$178 >> 2] = $30; //@line 8958
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 8959
   HEAP32[$179 >> 2] = $32; //@line 8960
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 8961
   HEAP32[$180 >> 2] = $34; //@line 8962
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 8963
   HEAP32[$181 >> 2] = $36; //@line 8964
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 8965
   HEAP32[$182 >> 2] = $38; //@line 8966
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 8967
   HEAP32[$183 >> 2] = $40; //@line 8968
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 8969
   HEAP32[$184 >> 2] = $42; //@line 8970
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 8971
   HEAP32[$185 >> 2] = $44; //@line 8972
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 8973
   HEAP32[$186 >> 2] = $$131; //@line 8974
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 8975
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 8976
   sp = STACKTOP; //@line 8977
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_131($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 7116
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7118
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7120
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7122
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7124
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7126
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7128
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7130
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7132
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7134
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7136
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7138
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7140
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7142
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7146
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 7148
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 7150
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 7152
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 7154
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 7156
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 7158
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 7160
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 7162
 $$02972$reg2mem$0 = HEAP32[$0 + 100 >> 2] | 0; //@line 7167
 $$03071$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 7167
 $$reg2mem$0 = HEAP32[$0 + 56 >> 2] | 0; //@line 7167
 L2 : while (1) {
  $150 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 7169
  $151 = $150 + 76 | 0; //@line 7170
  $152 = HEAP32[$151 >> 2] | 0; //@line 7171
  if ($152 | 0) {
   if ($152 >>> 0 <= 100) {
    label = 22; //@line 7176
    break;
   }
   HEAP32[$151 >> 2] = $152 + -100; //@line 7180
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 7185
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 7185
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 7187
   $$131 = $$03071$reg2mem$0; //@line 7187
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 7190
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 7193
    break L2;
   }
   $52 = 7844 + ($$02972$reg2mem$1 << 2) | 0; //@line 7196
   $54 = HEAP32[$52 >> 2] | 0; //@line 7197
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 7209
   break;
  }
  $84 = $54 + 72 | 0; //@line 7212
  $85 = HEAP32[$84 >> 2] | 0; //@line 7213
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 7217
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 7218
   $$03071$reg2mem$0 = $$131; //@line 7218
   $$reg2mem$0 = $52; //@line 7218
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 7225
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 7228
    $$03071$reg2mem$0 = $$131; //@line 7228
    $$reg2mem$0 = $52; //@line 7228
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8724] = 0; //@line 7236
   return;
  }
  $217 = $$131 + 44 | 0; //@line 7239
  $218 = HEAP32[$217 >> 2] | 0; //@line 7240
  if (!$218) {
   $226 = $22 + 12 | 0; //@line 7243
   HEAP32[$226 >> 2] = 0; //@line 7244
   $228 = $26 + 4 | 0; //@line 7246
   HEAP32[$228 >> 2] = 0; //@line 7248
   HEAP32[$228 + 4 >> 2] = 0; //@line 7251
   HEAP32[$26 >> 2] = 3; //@line 7252
   $232 = $26 + 12 | 0; //@line 7253
   HEAP32[$232 >> 2] = 752; //@line 7254
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 7255
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 100, $26) | 0; //@line 7256
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 7259
    $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 7260
    HEAP32[$233 >> 2] = $232; //@line 7261
    $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 7262
    HEAP32[$234 >> 2] = $226; //@line 7263
    $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 7264
    HEAP32[$235 >> 2] = $26; //@line 7265
    $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 7266
    HEAP32[$236 >> 2] = $22; //@line 7267
    sp = STACKTOP; //@line 7268
    return;
   }
   ___async_unwind = 0; //@line 7271
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 7272
   $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 7273
   HEAP32[$233 >> 2] = $232; //@line 7274
   $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 7275
   HEAP32[$234 >> 2] = $226; //@line 7276
   $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 7277
   HEAP32[$235 >> 2] = $26; //@line 7278
   $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 7279
   HEAP32[$236 >> 2] = $22; //@line 7280
   sp = STACKTOP; //@line 7281
   return;
  } else {
   $222 = HEAP32[$218 + 4 >> 2] | 0; //@line 7286
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 7287
   FUNCTION_TABLE_vii[$222 & 7]($22, $$131 + 32 | 0); //@line 7288
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 7291
    $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 7292
    HEAP32[$223 >> 2] = $217; //@line 7293
    $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 7294
    HEAP32[$224 >> 2] = $22; //@line 7295
    $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 7296
    HEAP32[$225 >> 2] = $26; //@line 7297
    sp = STACKTOP; //@line 7298
    return;
   }
   ___async_unwind = 0; //@line 7301
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 7302
   $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 7303
   HEAP32[$223 >> 2] = $217; //@line 7304
   $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 7305
   HEAP32[$224 >> 2] = $22; //@line 7306
   $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 7307
   HEAP32[$225 >> 2] = $26; //@line 7308
   sp = STACKTOP; //@line 7309
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 7314
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 7315
  __ZL28nsapi_dns_query_async_deletei($59); //@line 7316
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 7319
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 7320
   HEAP32[$60 >> 2] = $2; //@line 7321
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 7322
   HEAP32[$61 >> 2] = $4; //@line 7323
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 7324
   HEAP32[$62 >> 2] = $6; //@line 7325
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 7326
   HEAP32[$63 >> 2] = $8; //@line 7327
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 7328
   HEAP32[$64 >> 2] = $10; //@line 7329
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 7330
   HEAP32[$65 >> 2] = $12; //@line 7331
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 7332
   HEAP32[$66 >> 2] = $14; //@line 7333
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 7334
   HEAP32[$67 >> 2] = $16; //@line 7335
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 7336
   HEAP32[$68 >> 2] = $18; //@line 7337
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 7338
   HEAP32[$69 >> 2] = $20; //@line 7339
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 7340
   HEAP32[$70 >> 2] = $22; //@line 7341
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 7342
   HEAP32[$71 >> 2] = $24; //@line 7343
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 7344
   HEAP32[$72 >> 2] = $26; //@line 7345
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 7346
   HEAP32[$73 >> 2] = $30; //@line 7347
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 7348
   HEAP32[$74 >> 2] = $32; //@line 7349
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 7350
   HEAP32[$75 >> 2] = $34; //@line 7351
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 7352
   HEAP32[$76 >> 2] = $36; //@line 7353
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 7354
   HEAP32[$77 >> 2] = $38; //@line 7355
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 7356
   HEAP32[$78 >> 2] = $40; //@line 7357
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 7358
   HEAP32[$79 >> 2] = $42; //@line 7359
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 7360
   HEAP32[$80 >> 2] = $44; //@line 7361
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 7362
   HEAP32[$81 >> 2] = $46; //@line 7363
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 7364
   HEAP32[$82 >> 2] = $$131; //@line 7365
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 7366
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 7367
   sp = STACKTOP; //@line 7368
   return;
  }
  ___async_unwind = 0; //@line 7371
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 7372
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 7373
  HEAP32[$60 >> 2] = $2; //@line 7374
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 7375
  HEAP32[$61 >> 2] = $4; //@line 7376
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 7377
  HEAP32[$62 >> 2] = $6; //@line 7378
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 7379
  HEAP32[$63 >> 2] = $8; //@line 7380
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 7381
  HEAP32[$64 >> 2] = $10; //@line 7382
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 7383
  HEAP32[$65 >> 2] = $12; //@line 7384
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 7385
  HEAP32[$66 >> 2] = $14; //@line 7386
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 7387
  HEAP32[$67 >> 2] = $16; //@line 7388
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 7389
  HEAP32[$68 >> 2] = $18; //@line 7390
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 7391
  HEAP32[$69 >> 2] = $20; //@line 7392
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 7393
  HEAP32[$70 >> 2] = $22; //@line 7394
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 7395
  HEAP32[$71 >> 2] = $24; //@line 7396
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 7397
  HEAP32[$72 >> 2] = $26; //@line 7398
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 7399
  HEAP32[$73 >> 2] = $30; //@line 7400
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 7401
  HEAP32[$74 >> 2] = $32; //@line 7402
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 7403
  HEAP32[$75 >> 2] = $34; //@line 7404
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 7405
  HEAP32[$76 >> 2] = $36; //@line 7406
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 7407
  HEAP32[$77 >> 2] = $38; //@line 7408
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 7409
  HEAP32[$78 >> 2] = $40; //@line 7410
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 7411
  HEAP32[$79 >> 2] = $42; //@line 7412
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 7413
  HEAP32[$80 >> 2] = $44; //@line 7414
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 7415
  HEAP32[$81 >> 2] = $46; //@line 7416
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 7417
  HEAP32[$82 >> 2] = $$131; //@line 7418
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 7419
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 7420
  sp = STACKTOP; //@line 7421
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 7426
  $92 = $54 + 44 | 0; //@line 7427
  $93 = HEAP32[$92 >> 2] | 0; //@line 7428
  if (!$93) {
   HEAP32[$8 >> 2] = 0; //@line 7431
   $124 = HEAP32[$54 >> 2] | 0; //@line 7432
   HEAP32[$10 >> 2] = 0; //@line 7433
   HEAP32[$12 >> 2] = 188; //@line 7434
   HEAP32[$14 >> 2] = $124; //@line 7435
   HEAP32[$16 >> 2] = 764; //@line 7436
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 7437
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 0, $20) | 0; //@line 7438
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 7441
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 7442
    HEAP32[$125 >> 2] = $2; //@line 7443
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 7444
    HEAP32[$126 >> 2] = $4; //@line 7445
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 7446
    HEAP32[$127 >> 2] = $6; //@line 7447
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 7448
    HEAP32[$128 >> 2] = $8; //@line 7449
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 7450
    HEAP32[$129 >> 2] = $10; //@line 7451
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 7452
    HEAP32[$130 >> 2] = $12; //@line 7453
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 7454
    HEAP32[$131 >> 2] = $14; //@line 7455
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 7456
    HEAP32[$132 >> 2] = $16; //@line 7457
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 7458
    HEAP32[$133 >> 2] = $18; //@line 7459
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 7460
    HEAP32[$134 >> 2] = $20; //@line 7461
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 7462
    HEAP32[$135 >> 2] = $22; //@line 7463
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 7464
    HEAP32[$136 >> 2] = $24; //@line 7465
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 7466
    HEAP32[$137 >> 2] = $26; //@line 7467
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 7468
    HEAP32[$138 >> 2] = $30; //@line 7469
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 7470
    HEAP32[$139 >> 2] = $32; //@line 7471
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 7472
    HEAP32[$140 >> 2] = $34; //@line 7473
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 7474
    HEAP32[$141 >> 2] = $36; //@line 7475
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 7476
    HEAP32[$142 >> 2] = $38; //@line 7477
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 7478
    HEAP32[$143 >> 2] = $40; //@line 7479
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 7480
    HEAP32[$144 >> 2] = $42; //@line 7481
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 7482
    HEAP32[$145 >> 2] = $44; //@line 7483
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 7484
    HEAP32[$146 >> 2] = $46; //@line 7485
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 7486
    HEAP32[$147 >> 2] = $52; //@line 7487
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 7488
    HEAP32[$148 >> 2] = $$131; //@line 7489
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 7490
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 7491
    sp = STACKTOP; //@line 7492
    return;
   }
   ___async_unwind = 0; //@line 7495
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 7496
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 7497
   HEAP32[$125 >> 2] = $2; //@line 7498
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 7499
   HEAP32[$126 >> 2] = $4; //@line 7500
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 7501
   HEAP32[$127 >> 2] = $6; //@line 7502
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 7503
   HEAP32[$128 >> 2] = $8; //@line 7504
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 7505
   HEAP32[$129 >> 2] = $10; //@line 7506
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 7507
   HEAP32[$130 >> 2] = $12; //@line 7508
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 7509
   HEAP32[$131 >> 2] = $14; //@line 7510
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 7511
   HEAP32[$132 >> 2] = $16; //@line 7512
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 7513
   HEAP32[$133 >> 2] = $18; //@line 7514
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 7515
   HEAP32[$134 >> 2] = $20; //@line 7516
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 7517
   HEAP32[$135 >> 2] = $22; //@line 7518
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 7519
   HEAP32[$136 >> 2] = $24; //@line 7520
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 7521
   HEAP32[$137 >> 2] = $26; //@line 7522
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 7523
   HEAP32[$138 >> 2] = $30; //@line 7524
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 7525
   HEAP32[$139 >> 2] = $32; //@line 7526
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 7527
   HEAP32[$140 >> 2] = $34; //@line 7528
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 7529
   HEAP32[$141 >> 2] = $36; //@line 7530
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 7531
   HEAP32[$142 >> 2] = $38; //@line 7532
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 7533
   HEAP32[$143 >> 2] = $40; //@line 7534
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 7535
   HEAP32[$144 >> 2] = $42; //@line 7536
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 7537
   HEAP32[$145 >> 2] = $44; //@line 7538
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 7539
   HEAP32[$146 >> 2] = $46; //@line 7540
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 7541
   HEAP32[$147 >> 2] = $52; //@line 7542
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 7543
   HEAP32[$148 >> 2] = $$131; //@line 7544
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 7545
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 7546
   sp = STACKTOP; //@line 7547
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 7552
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 7553
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 7554
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 7557
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 7558
    HEAP32[$98 >> 2] = $2; //@line 7559
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 7560
    HEAP32[$99 >> 2] = $4; //@line 7561
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 7562
    HEAP32[$100 >> 2] = $6; //@line 7563
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 7564
    HEAP32[$101 >> 2] = $8; //@line 7565
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 7566
    HEAP32[$102 >> 2] = $10; //@line 7567
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 7568
    HEAP32[$103 >> 2] = $12; //@line 7569
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 7570
    HEAP32[$104 >> 2] = $14; //@line 7571
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 7572
    HEAP32[$105 >> 2] = $16; //@line 7573
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 7574
    HEAP32[$106 >> 2] = $18; //@line 7575
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 7576
    HEAP32[$107 >> 2] = $20; //@line 7577
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 7578
    HEAP32[$108 >> 2] = $22; //@line 7579
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 7580
    HEAP32[$109 >> 2] = $92; //@line 7581
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 7582
    HEAP32[$110 >> 2] = $52; //@line 7583
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 7584
    HEAP32[$111 >> 2] = $24; //@line 7585
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 7586
    HEAP32[$112 >> 2] = $26; //@line 7587
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 7588
    HEAP32[$113 >> 2] = $30; //@line 7589
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 7590
    HEAP32[$114 >> 2] = $32; //@line 7591
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 7592
    HEAP32[$115 >> 2] = $34; //@line 7593
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 7594
    HEAP32[$116 >> 2] = $36; //@line 7595
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 7596
    HEAP32[$117 >> 2] = $38; //@line 7597
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 7598
    HEAP32[$118 >> 2] = $40; //@line 7599
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 7600
    HEAP32[$119 >> 2] = $42; //@line 7601
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 7602
    HEAP32[$120 >> 2] = $44; //@line 7603
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 7604
    HEAP32[$121 >> 2] = $46; //@line 7605
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 7606
    HEAP32[$122 >> 2] = $$131; //@line 7607
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 7608
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 7609
    sp = STACKTOP; //@line 7610
    return;
   }
   ___async_unwind = 0; //@line 7613
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 7614
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 7615
   HEAP32[$98 >> 2] = $2; //@line 7616
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 7617
   HEAP32[$99 >> 2] = $4; //@line 7618
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 7619
   HEAP32[$100 >> 2] = $6; //@line 7620
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 7621
   HEAP32[$101 >> 2] = $8; //@line 7622
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 7623
   HEAP32[$102 >> 2] = $10; //@line 7624
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 7625
   HEAP32[$103 >> 2] = $12; //@line 7626
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 7627
   HEAP32[$104 >> 2] = $14; //@line 7628
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 7629
   HEAP32[$105 >> 2] = $16; //@line 7630
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 7631
   HEAP32[$106 >> 2] = $18; //@line 7632
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 7633
   HEAP32[$107 >> 2] = $20; //@line 7634
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 7635
   HEAP32[$108 >> 2] = $22; //@line 7636
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 7637
   HEAP32[$109 >> 2] = $92; //@line 7638
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 7639
   HEAP32[$110 >> 2] = $52; //@line 7640
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 7641
   HEAP32[$111 >> 2] = $24; //@line 7642
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 7643
   HEAP32[$112 >> 2] = $26; //@line 7644
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 7645
   HEAP32[$113 >> 2] = $30; //@line 7646
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 7647
   HEAP32[$114 >> 2] = $32; //@line 7648
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 7649
   HEAP32[$115 >> 2] = $34; //@line 7650
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 7651
   HEAP32[$116 >> 2] = $36; //@line 7652
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 7653
   HEAP32[$117 >> 2] = $38; //@line 7654
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 7655
   HEAP32[$118 >> 2] = $40; //@line 7656
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 7657
   HEAP32[$119 >> 2] = $42; //@line 7658
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 7659
   HEAP32[$120 >> 2] = $44; //@line 7660
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 7661
   HEAP32[$121 >> 2] = $46; //@line 7662
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 7663
   HEAP32[$122 >> 2] = $$131; //@line 7664
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 7665
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 7666
   sp = STACKTOP; //@line 7667
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$151 >> 2] = 0; //@line 7672
  $156 = $150 + 44 | 0; //@line 7673
  $157 = HEAP32[$156 >> 2] | 0; //@line 7674
  if (!$157) {
   HEAP32[$32 >> 2] = 0; //@line 7677
   $188 = HEAP32[$150 >> 2] | 0; //@line 7678
   HEAP32[$34 >> 2] = 0; //@line 7679
   HEAP32[$36 >> 2] = 193; //@line 7680
   HEAP32[$38 >> 2] = $188; //@line 7681
   HEAP32[$6 >> 2] = 764; //@line 7682
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 7683
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($40, 0, $42) | 0; //@line 7684
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 7687
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 7688
    HEAP32[$189 >> 2] = $2; //@line 7689
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 7690
    HEAP32[$190 >> 2] = $4; //@line 7691
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 7692
    HEAP32[$191 >> 2] = $6; //@line 7693
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 7694
    HEAP32[$192 >> 2] = $8; //@line 7695
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 7696
    HEAP32[$193 >> 2] = $10; //@line 7697
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 7698
    HEAP32[$194 >> 2] = $12; //@line 7699
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 7700
    HEAP32[$195 >> 2] = $14; //@line 7701
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 7702
    HEAP32[$196 >> 2] = $16; //@line 7703
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 7704
    HEAP32[$197 >> 2] = $18; //@line 7705
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 7706
    HEAP32[$198 >> 2] = $20; //@line 7707
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 7708
    HEAP32[$199 >> 2] = $22; //@line 7709
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 7710
    HEAP32[$200 >> 2] = $24; //@line 7711
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 7712
    HEAP32[$201 >> 2] = $26; //@line 7713
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 7714
    HEAP32[$202 >> 2] = $30; //@line 7715
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 7716
    HEAP32[$203 >> 2] = $32; //@line 7717
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 7718
    HEAP32[$204 >> 2] = $34; //@line 7719
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 7720
    HEAP32[$205 >> 2] = $36; //@line 7721
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 7722
    HEAP32[$206 >> 2] = $38; //@line 7723
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 7724
    HEAP32[$207 >> 2] = $40; //@line 7725
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 7726
    HEAP32[$208 >> 2] = $42; //@line 7727
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 7728
    HEAP32[$209 >> 2] = $44; //@line 7729
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 7730
    HEAP32[$210 >> 2] = $46; //@line 7731
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 7732
    HEAP32[$211 >> 2] = $$03071$reg2mem$0; //@line 7733
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 7734
    HEAP32[$212 >> 2] = $$02972$reg2mem$0; //@line 7735
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 7736
    HEAP32[$213 >> 2] = $$reg2mem$0; //@line 7737
    sp = STACKTOP; //@line 7738
    return;
   }
   ___async_unwind = 0; //@line 7741
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 7742
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 7743
   HEAP32[$189 >> 2] = $2; //@line 7744
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 7745
   HEAP32[$190 >> 2] = $4; //@line 7746
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 7747
   HEAP32[$191 >> 2] = $6; //@line 7748
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 7749
   HEAP32[$192 >> 2] = $8; //@line 7750
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 7751
   HEAP32[$193 >> 2] = $10; //@line 7752
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 7753
   HEAP32[$194 >> 2] = $12; //@line 7754
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 7755
   HEAP32[$195 >> 2] = $14; //@line 7756
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 7757
   HEAP32[$196 >> 2] = $16; //@line 7758
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 7759
   HEAP32[$197 >> 2] = $18; //@line 7760
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 7761
   HEAP32[$198 >> 2] = $20; //@line 7762
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 7763
   HEAP32[$199 >> 2] = $22; //@line 7764
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 7765
   HEAP32[$200 >> 2] = $24; //@line 7766
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 7767
   HEAP32[$201 >> 2] = $26; //@line 7768
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 7769
   HEAP32[$202 >> 2] = $30; //@line 7770
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 7771
   HEAP32[$203 >> 2] = $32; //@line 7772
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 7773
   HEAP32[$204 >> 2] = $34; //@line 7774
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 7775
   HEAP32[$205 >> 2] = $36; //@line 7776
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 7777
   HEAP32[$206 >> 2] = $38; //@line 7778
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 7779
   HEAP32[$207 >> 2] = $40; //@line 7780
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 7781
   HEAP32[$208 >> 2] = $42; //@line 7782
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 7783
   HEAP32[$209 >> 2] = $44; //@line 7784
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 7785
   HEAP32[$210 >> 2] = $46; //@line 7786
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 7787
   HEAP32[$211 >> 2] = $$03071$reg2mem$0; //@line 7788
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 7789
   HEAP32[$212 >> 2] = $$02972$reg2mem$0; //@line 7790
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 7791
   HEAP32[$213 >> 2] = $$reg2mem$0; //@line 7792
   sp = STACKTOP; //@line 7793
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 7798
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 7799
   FUNCTION_TABLE_vii[$161 & 7]($30, $150 + 32 | 0); //@line 7800
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 7803
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 7804
    HEAP32[$162 >> 2] = $2; //@line 7805
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 7806
    HEAP32[$163 >> 2] = $4; //@line 7807
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 7808
    HEAP32[$164 >> 2] = $6; //@line 7809
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 7810
    HEAP32[$165 >> 2] = $8; //@line 7811
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 7812
    HEAP32[$166 >> 2] = $10; //@line 7813
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 7814
    HEAP32[$167 >> 2] = $12; //@line 7815
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 7816
    HEAP32[$168 >> 2] = $14; //@line 7817
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 7818
    HEAP32[$169 >> 2] = $16; //@line 7819
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 7820
    HEAP32[$170 >> 2] = $18; //@line 7821
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 7822
    HEAP32[$171 >> 2] = $20; //@line 7823
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 7824
    HEAP32[$172 >> 2] = $22; //@line 7825
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 7826
    HEAP32[$173 >> 2] = $24; //@line 7827
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 7828
    HEAP32[$174 >> 2] = $26; //@line 7829
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 7830
    HEAP32[$175 >> 2] = $156; //@line 7831
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 7832
    HEAP32[$176 >> 2] = $$reg2mem$0; //@line 7833
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 7834
    HEAP32[$177 >> 2] = $30; //@line 7835
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 7836
    HEAP32[$178 >> 2] = $32; //@line 7837
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 7838
    HEAP32[$179 >> 2] = $34; //@line 7839
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 7840
    HEAP32[$180 >> 2] = $36; //@line 7841
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 7842
    HEAP32[$181 >> 2] = $38; //@line 7843
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 7844
    HEAP32[$182 >> 2] = $40; //@line 7845
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 7846
    HEAP32[$183 >> 2] = $42; //@line 7847
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 7848
    HEAP32[$184 >> 2] = $44; //@line 7849
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 7850
    HEAP32[$185 >> 2] = $46; //@line 7851
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 7852
    HEAP32[$186 >> 2] = $$03071$reg2mem$0; //@line 7853
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 7854
    HEAP32[$187 >> 2] = $$02972$reg2mem$0; //@line 7855
    sp = STACKTOP; //@line 7856
    return;
   }
   ___async_unwind = 0; //@line 7859
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 7860
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 7861
   HEAP32[$162 >> 2] = $2; //@line 7862
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 7863
   HEAP32[$163 >> 2] = $4; //@line 7864
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 7865
   HEAP32[$164 >> 2] = $6; //@line 7866
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 7867
   HEAP32[$165 >> 2] = $8; //@line 7868
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 7869
   HEAP32[$166 >> 2] = $10; //@line 7870
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 7871
   HEAP32[$167 >> 2] = $12; //@line 7872
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 7873
   HEAP32[$168 >> 2] = $14; //@line 7874
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 7875
   HEAP32[$169 >> 2] = $16; //@line 7876
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 7877
   HEAP32[$170 >> 2] = $18; //@line 7878
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 7879
   HEAP32[$171 >> 2] = $20; //@line 7880
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 7881
   HEAP32[$172 >> 2] = $22; //@line 7882
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 7883
   HEAP32[$173 >> 2] = $24; //@line 7884
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 7885
   HEAP32[$174 >> 2] = $26; //@line 7886
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 7887
   HEAP32[$175 >> 2] = $156; //@line 7888
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 7889
   HEAP32[$176 >> 2] = $$reg2mem$0; //@line 7890
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 7891
   HEAP32[$177 >> 2] = $30; //@line 7892
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 7893
   HEAP32[$178 >> 2] = $32; //@line 7894
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 7895
   HEAP32[$179 >> 2] = $34; //@line 7896
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 7897
   HEAP32[$180 >> 2] = $36; //@line 7898
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 7899
   HEAP32[$181 >> 2] = $38; //@line 7900
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 7901
   HEAP32[$182 >> 2] = $40; //@line 7902
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 7903
   HEAP32[$183 >> 2] = $42; //@line 7904
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 7905
   HEAP32[$184 >> 2] = $44; //@line 7906
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 7907
   HEAP32[$185 >> 2] = $46; //@line 7908
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 7909
   HEAP32[$186 >> 2] = $$03071$reg2mem$0; //@line 7910
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 7911
   HEAP32[$187 >> 2] = $$02972$reg2mem$0; //@line 7912
   sp = STACKTOP; //@line 7913
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_139($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$131 = 0, $$131$phi = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $215 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $226 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $90 = 0, $91 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10012
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10014
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10016
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10018
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10020
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10022
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10024
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10026
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10028
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10030
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10032
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10034
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10036
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10038
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10040
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10042
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 10044
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 10046
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 10048
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 10050
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 10052
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 10054
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 10056
 $$02972$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 10061
 $$131 = HEAP32[$0 + 92 >> 2] | 0; //@line 10061
 while (1) {
  $51 = $$02972$reg2mem$0 + 1 | 0; //@line 10063
  if (($$02972$reg2mem$0 | 0) >= 4) {
   label = 2; //@line 10066
   break;
  }
  $50 = 7844 + ($51 << 2) | 0; //@line 10069
  $52 = HEAP32[$50 >> 2] | 0; //@line 10070
  if (!$52) {
   $$131$phi = $$131; //@line 10073
   $$02972$reg2mem$0 = $51; //@line 10073
   $$131 = $$131$phi; //@line 10073
   continue;
  }
  if ((HEAP32[$52 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 10080
   break;
  }
  $82 = $52 + 72 | 0; //@line 10083
  $83 = HEAP32[$82 >> 2] | 0; //@line 10084
  if ($83 >>> 0 > 100) {
   HEAP32[$82 >> 2] = $83 + -100; //@line 10088
  } else {
   if ((HEAP32[$52 + 4 >> 2] | 0) == -3019) {
    label = 12; //@line 10094
    break;
   }
  }
  $148 = HEAP32[$50 >> 2] | 0; //@line 10098
  $149 = $148 + 76 | 0; //@line 10099
  $150 = HEAP32[$149 >> 2] | 0; //@line 10100
  if ($150 | 0) {
   if ($150 >>> 0 <= 100) {
    label = 22; //@line 10105
    break;
   }
   HEAP32[$149 >> 2] = $150 + -100; //@line 10109
  }
  if ($$131 | 0) {
   $$131$phi = $$131; //@line 10113
   $$02972$reg2mem$0 = $51; //@line 10113
   $$131 = $$131$phi; //@line 10113
   continue;
  }
  $$02972$reg2mem$0 = $51; //@line 10117
  $$131 = HEAP32[$50 >> 2] | 0; //@line 10117
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8724] = 0; //@line 10122
   return;
  }
  $215 = $$131 + 44 | 0; //@line 10125
  $216 = HEAP32[$215 >> 2] | 0; //@line 10126
  if (!$216) {
   $224 = $22 + 12 | 0; //@line 10129
   HEAP32[$224 >> 2] = 0; //@line 10130
   $226 = $26 + 4 | 0; //@line 10132
   HEAP32[$226 >> 2] = 0; //@line 10134
   HEAP32[$226 + 4 >> 2] = 0; //@line 10137
   HEAP32[$26 >> 2] = 3; //@line 10138
   $230 = $26 + 12 | 0; //@line 10139
   HEAP32[$230 >> 2] = 752; //@line 10140
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 10141
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 100, $26) | 0; //@line 10142
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 10145
    $231 = $ReallocAsyncCtx12 + 4 | 0; //@line 10146
    HEAP32[$231 >> 2] = $230; //@line 10147
    $232 = $ReallocAsyncCtx12 + 8 | 0; //@line 10148
    HEAP32[$232 >> 2] = $224; //@line 10149
    $233 = $ReallocAsyncCtx12 + 12 | 0; //@line 10150
    HEAP32[$233 >> 2] = $26; //@line 10151
    $234 = $ReallocAsyncCtx12 + 16 | 0; //@line 10152
    HEAP32[$234 >> 2] = $22; //@line 10153
    sp = STACKTOP; //@line 10154
    return;
   }
   ___async_unwind = 0; //@line 10157
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 10158
   $231 = $ReallocAsyncCtx12 + 4 | 0; //@line 10159
   HEAP32[$231 >> 2] = $230; //@line 10160
   $232 = $ReallocAsyncCtx12 + 8 | 0; //@line 10161
   HEAP32[$232 >> 2] = $224; //@line 10162
   $233 = $ReallocAsyncCtx12 + 12 | 0; //@line 10163
   HEAP32[$233 >> 2] = $26; //@line 10164
   $234 = $ReallocAsyncCtx12 + 16 | 0; //@line 10165
   HEAP32[$234 >> 2] = $22; //@line 10166
   sp = STACKTOP; //@line 10167
   return;
  } else {
   $220 = HEAP32[$216 + 4 >> 2] | 0; //@line 10172
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 10173
   FUNCTION_TABLE_vii[$220 & 7]($22, $$131 + 32 | 0); //@line 10174
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 10177
    $221 = $ReallocAsyncCtx7 + 4 | 0; //@line 10178
    HEAP32[$221 >> 2] = $215; //@line 10179
    $222 = $ReallocAsyncCtx7 + 8 | 0; //@line 10180
    HEAP32[$222 >> 2] = $22; //@line 10181
    $223 = $ReallocAsyncCtx7 + 12 | 0; //@line 10182
    HEAP32[$223 >> 2] = $26; //@line 10183
    sp = STACKTOP; //@line 10184
    return;
   }
   ___async_unwind = 0; //@line 10187
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 10188
   $221 = $ReallocAsyncCtx7 + 4 | 0; //@line 10189
   HEAP32[$221 >> 2] = $215; //@line 10190
   $222 = $ReallocAsyncCtx7 + 8 | 0; //@line 10191
   HEAP32[$222 >> 2] = $22; //@line 10192
   $223 = $ReallocAsyncCtx7 + 12 | 0; //@line 10193
   HEAP32[$223 >> 2] = $26; //@line 10194
   sp = STACKTOP; //@line 10195
   return;
  }
 } else if ((label | 0) == 5) {
  $57 = HEAP32[$52 >> 2] | 0; //@line 10200
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 10201
  __ZL28nsapi_dns_query_async_deletei($57); //@line 10202
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 10205
   $58 = $ReallocAsyncCtx10 + 4 | 0; //@line 10206
   HEAP32[$58 >> 2] = $2; //@line 10207
   $59 = $ReallocAsyncCtx10 + 8 | 0; //@line 10208
   HEAP32[$59 >> 2] = $4; //@line 10209
   $60 = $ReallocAsyncCtx10 + 12 | 0; //@line 10210
   HEAP32[$60 >> 2] = $6; //@line 10211
   $61 = $ReallocAsyncCtx10 + 16 | 0; //@line 10212
   HEAP32[$61 >> 2] = $8; //@line 10213
   $62 = $ReallocAsyncCtx10 + 20 | 0; //@line 10214
   HEAP32[$62 >> 2] = $10; //@line 10215
   $63 = $ReallocAsyncCtx10 + 24 | 0; //@line 10216
   HEAP32[$63 >> 2] = $12; //@line 10217
   $64 = $ReallocAsyncCtx10 + 28 | 0; //@line 10218
   HEAP32[$64 >> 2] = $14; //@line 10219
   $65 = $ReallocAsyncCtx10 + 32 | 0; //@line 10220
   HEAP32[$65 >> 2] = $16; //@line 10221
   $66 = $ReallocAsyncCtx10 + 36 | 0; //@line 10222
   HEAP32[$66 >> 2] = $18; //@line 10223
   $67 = $ReallocAsyncCtx10 + 40 | 0; //@line 10224
   HEAP32[$67 >> 2] = $20; //@line 10225
   $68 = $ReallocAsyncCtx10 + 44 | 0; //@line 10226
   HEAP32[$68 >> 2] = $22; //@line 10227
   $69 = $ReallocAsyncCtx10 + 48 | 0; //@line 10228
   HEAP32[$69 >> 2] = $24; //@line 10229
   $70 = $ReallocAsyncCtx10 + 52 | 0; //@line 10230
   HEAP32[$70 >> 2] = $26; //@line 10231
   $71 = $ReallocAsyncCtx10 + 56 | 0; //@line 10232
   HEAP32[$71 >> 2] = $28; //@line 10233
   $72 = $ReallocAsyncCtx10 + 60 | 0; //@line 10234
   HEAP32[$72 >> 2] = $30; //@line 10235
   $73 = $ReallocAsyncCtx10 + 64 | 0; //@line 10236
   HEAP32[$73 >> 2] = $32; //@line 10237
   $74 = $ReallocAsyncCtx10 + 68 | 0; //@line 10238
   HEAP32[$74 >> 2] = $34; //@line 10239
   $75 = $ReallocAsyncCtx10 + 72 | 0; //@line 10240
   HEAP32[$75 >> 2] = $36; //@line 10241
   $76 = $ReallocAsyncCtx10 + 76 | 0; //@line 10242
   HEAP32[$76 >> 2] = $38; //@line 10243
   $77 = $ReallocAsyncCtx10 + 80 | 0; //@line 10244
   HEAP32[$77 >> 2] = $40; //@line 10245
   $78 = $ReallocAsyncCtx10 + 84 | 0; //@line 10246
   HEAP32[$78 >> 2] = $42; //@line 10247
   $79 = $ReallocAsyncCtx10 + 88 | 0; //@line 10248
   HEAP32[$79 >> 2] = $44; //@line 10249
   $80 = $ReallocAsyncCtx10 + 92 | 0; //@line 10250
   HEAP32[$80 >> 2] = $$131; //@line 10251
   $81 = $ReallocAsyncCtx10 + 96 | 0; //@line 10252
   HEAP32[$81 >> 2] = $51; //@line 10253
   sp = STACKTOP; //@line 10254
   return;
  }
  ___async_unwind = 0; //@line 10257
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 10258
  $58 = $ReallocAsyncCtx10 + 4 | 0; //@line 10259
  HEAP32[$58 >> 2] = $2; //@line 10260
  $59 = $ReallocAsyncCtx10 + 8 | 0; //@line 10261
  HEAP32[$59 >> 2] = $4; //@line 10262
  $60 = $ReallocAsyncCtx10 + 12 | 0; //@line 10263
  HEAP32[$60 >> 2] = $6; //@line 10264
  $61 = $ReallocAsyncCtx10 + 16 | 0; //@line 10265
  HEAP32[$61 >> 2] = $8; //@line 10266
  $62 = $ReallocAsyncCtx10 + 20 | 0; //@line 10267
  HEAP32[$62 >> 2] = $10; //@line 10268
  $63 = $ReallocAsyncCtx10 + 24 | 0; //@line 10269
  HEAP32[$63 >> 2] = $12; //@line 10270
  $64 = $ReallocAsyncCtx10 + 28 | 0; //@line 10271
  HEAP32[$64 >> 2] = $14; //@line 10272
  $65 = $ReallocAsyncCtx10 + 32 | 0; //@line 10273
  HEAP32[$65 >> 2] = $16; //@line 10274
  $66 = $ReallocAsyncCtx10 + 36 | 0; //@line 10275
  HEAP32[$66 >> 2] = $18; //@line 10276
  $67 = $ReallocAsyncCtx10 + 40 | 0; //@line 10277
  HEAP32[$67 >> 2] = $20; //@line 10278
  $68 = $ReallocAsyncCtx10 + 44 | 0; //@line 10279
  HEAP32[$68 >> 2] = $22; //@line 10280
  $69 = $ReallocAsyncCtx10 + 48 | 0; //@line 10281
  HEAP32[$69 >> 2] = $24; //@line 10282
  $70 = $ReallocAsyncCtx10 + 52 | 0; //@line 10283
  HEAP32[$70 >> 2] = $26; //@line 10284
  $71 = $ReallocAsyncCtx10 + 56 | 0; //@line 10285
  HEAP32[$71 >> 2] = $28; //@line 10286
  $72 = $ReallocAsyncCtx10 + 60 | 0; //@line 10287
  HEAP32[$72 >> 2] = $30; //@line 10288
  $73 = $ReallocAsyncCtx10 + 64 | 0; //@line 10289
  HEAP32[$73 >> 2] = $32; //@line 10290
  $74 = $ReallocAsyncCtx10 + 68 | 0; //@line 10291
  HEAP32[$74 >> 2] = $34; //@line 10292
  $75 = $ReallocAsyncCtx10 + 72 | 0; //@line 10293
  HEAP32[$75 >> 2] = $36; //@line 10294
  $76 = $ReallocAsyncCtx10 + 76 | 0; //@line 10295
  HEAP32[$76 >> 2] = $38; //@line 10296
  $77 = $ReallocAsyncCtx10 + 80 | 0; //@line 10297
  HEAP32[$77 >> 2] = $40; //@line 10298
  $78 = $ReallocAsyncCtx10 + 84 | 0; //@line 10299
  HEAP32[$78 >> 2] = $42; //@line 10300
  $79 = $ReallocAsyncCtx10 + 88 | 0; //@line 10301
  HEAP32[$79 >> 2] = $44; //@line 10302
  $80 = $ReallocAsyncCtx10 + 92 | 0; //@line 10303
  HEAP32[$80 >> 2] = $$131; //@line 10304
  $81 = $ReallocAsyncCtx10 + 96 | 0; //@line 10305
  HEAP32[$81 >> 2] = $51; //@line 10306
  sp = STACKTOP; //@line 10307
  return;
 } else if ((label | 0) == 12) {
  HEAP32[$52 + 76 >> 2] = 0; //@line 10312
  $90 = $52 + 44 | 0; //@line 10313
  $91 = HEAP32[$90 >> 2] | 0; //@line 10314
  if (!$91) {
   HEAP32[$8 >> 2] = 0; //@line 10317
   $122 = HEAP32[$52 >> 2] | 0; //@line 10318
   HEAP32[$10 >> 2] = 0; //@line 10319
   HEAP32[$12 >> 2] = 188; //@line 10320
   HEAP32[$14 >> 2] = $122; //@line 10321
   HEAP32[$16 >> 2] = 764; //@line 10322
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 10323
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 0, $20) | 0; //@line 10324
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 10327
    $123 = $ReallocAsyncCtx14 + 4 | 0; //@line 10328
    HEAP32[$123 >> 2] = $2; //@line 10329
    $124 = $ReallocAsyncCtx14 + 8 | 0; //@line 10330
    HEAP32[$124 >> 2] = $4; //@line 10331
    $125 = $ReallocAsyncCtx14 + 12 | 0; //@line 10332
    HEAP32[$125 >> 2] = $6; //@line 10333
    $126 = $ReallocAsyncCtx14 + 16 | 0; //@line 10334
    HEAP32[$126 >> 2] = $8; //@line 10335
    $127 = $ReallocAsyncCtx14 + 20 | 0; //@line 10336
    HEAP32[$127 >> 2] = $10; //@line 10337
    $128 = $ReallocAsyncCtx14 + 24 | 0; //@line 10338
    HEAP32[$128 >> 2] = $12; //@line 10339
    $129 = $ReallocAsyncCtx14 + 28 | 0; //@line 10340
    HEAP32[$129 >> 2] = $14; //@line 10341
    $130 = $ReallocAsyncCtx14 + 32 | 0; //@line 10342
    HEAP32[$130 >> 2] = $16; //@line 10343
    $131 = $ReallocAsyncCtx14 + 36 | 0; //@line 10344
    HEAP32[$131 >> 2] = $18; //@line 10345
    $132 = $ReallocAsyncCtx14 + 40 | 0; //@line 10346
    HEAP32[$132 >> 2] = $20; //@line 10347
    $133 = $ReallocAsyncCtx14 + 44 | 0; //@line 10348
    HEAP32[$133 >> 2] = $22; //@line 10349
    $134 = $ReallocAsyncCtx14 + 48 | 0; //@line 10350
    HEAP32[$134 >> 2] = $24; //@line 10351
    $135 = $ReallocAsyncCtx14 + 52 | 0; //@line 10352
    HEAP32[$135 >> 2] = $26; //@line 10353
    $136 = $ReallocAsyncCtx14 + 56 | 0; //@line 10354
    HEAP32[$136 >> 2] = $28; //@line 10355
    $137 = $ReallocAsyncCtx14 + 60 | 0; //@line 10356
    HEAP32[$137 >> 2] = $30; //@line 10357
    $138 = $ReallocAsyncCtx14 + 64 | 0; //@line 10358
    HEAP32[$138 >> 2] = $32; //@line 10359
    $139 = $ReallocAsyncCtx14 + 68 | 0; //@line 10360
    HEAP32[$139 >> 2] = $34; //@line 10361
    $140 = $ReallocAsyncCtx14 + 72 | 0; //@line 10362
    HEAP32[$140 >> 2] = $36; //@line 10363
    $141 = $ReallocAsyncCtx14 + 76 | 0; //@line 10364
    HEAP32[$141 >> 2] = $38; //@line 10365
    $142 = $ReallocAsyncCtx14 + 80 | 0; //@line 10366
    HEAP32[$142 >> 2] = $40; //@line 10367
    $143 = $ReallocAsyncCtx14 + 84 | 0; //@line 10368
    HEAP32[$143 >> 2] = $42; //@line 10369
    $144 = $ReallocAsyncCtx14 + 88 | 0; //@line 10370
    HEAP32[$144 >> 2] = $44; //@line 10371
    $145 = $ReallocAsyncCtx14 + 92 | 0; //@line 10372
    HEAP32[$145 >> 2] = $50; //@line 10373
    $146 = $ReallocAsyncCtx14 + 96 | 0; //@line 10374
    HEAP32[$146 >> 2] = $$131; //@line 10375
    $147 = $ReallocAsyncCtx14 + 100 | 0; //@line 10376
    HEAP32[$147 >> 2] = $51; //@line 10377
    sp = STACKTOP; //@line 10378
    return;
   }
   ___async_unwind = 0; //@line 10381
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 10382
   $123 = $ReallocAsyncCtx14 + 4 | 0; //@line 10383
   HEAP32[$123 >> 2] = $2; //@line 10384
   $124 = $ReallocAsyncCtx14 + 8 | 0; //@line 10385
   HEAP32[$124 >> 2] = $4; //@line 10386
   $125 = $ReallocAsyncCtx14 + 12 | 0; //@line 10387
   HEAP32[$125 >> 2] = $6; //@line 10388
   $126 = $ReallocAsyncCtx14 + 16 | 0; //@line 10389
   HEAP32[$126 >> 2] = $8; //@line 10390
   $127 = $ReallocAsyncCtx14 + 20 | 0; //@line 10391
   HEAP32[$127 >> 2] = $10; //@line 10392
   $128 = $ReallocAsyncCtx14 + 24 | 0; //@line 10393
   HEAP32[$128 >> 2] = $12; //@line 10394
   $129 = $ReallocAsyncCtx14 + 28 | 0; //@line 10395
   HEAP32[$129 >> 2] = $14; //@line 10396
   $130 = $ReallocAsyncCtx14 + 32 | 0; //@line 10397
   HEAP32[$130 >> 2] = $16; //@line 10398
   $131 = $ReallocAsyncCtx14 + 36 | 0; //@line 10399
   HEAP32[$131 >> 2] = $18; //@line 10400
   $132 = $ReallocAsyncCtx14 + 40 | 0; //@line 10401
   HEAP32[$132 >> 2] = $20; //@line 10402
   $133 = $ReallocAsyncCtx14 + 44 | 0; //@line 10403
   HEAP32[$133 >> 2] = $22; //@line 10404
   $134 = $ReallocAsyncCtx14 + 48 | 0; //@line 10405
   HEAP32[$134 >> 2] = $24; //@line 10406
   $135 = $ReallocAsyncCtx14 + 52 | 0; //@line 10407
   HEAP32[$135 >> 2] = $26; //@line 10408
   $136 = $ReallocAsyncCtx14 + 56 | 0; //@line 10409
   HEAP32[$136 >> 2] = $28; //@line 10410
   $137 = $ReallocAsyncCtx14 + 60 | 0; //@line 10411
   HEAP32[$137 >> 2] = $30; //@line 10412
   $138 = $ReallocAsyncCtx14 + 64 | 0; //@line 10413
   HEAP32[$138 >> 2] = $32; //@line 10414
   $139 = $ReallocAsyncCtx14 + 68 | 0; //@line 10415
   HEAP32[$139 >> 2] = $34; //@line 10416
   $140 = $ReallocAsyncCtx14 + 72 | 0; //@line 10417
   HEAP32[$140 >> 2] = $36; //@line 10418
   $141 = $ReallocAsyncCtx14 + 76 | 0; //@line 10419
   HEAP32[$141 >> 2] = $38; //@line 10420
   $142 = $ReallocAsyncCtx14 + 80 | 0; //@line 10421
   HEAP32[$142 >> 2] = $40; //@line 10422
   $143 = $ReallocAsyncCtx14 + 84 | 0; //@line 10423
   HEAP32[$143 >> 2] = $42; //@line 10424
   $144 = $ReallocAsyncCtx14 + 88 | 0; //@line 10425
   HEAP32[$144 >> 2] = $44; //@line 10426
   $145 = $ReallocAsyncCtx14 + 92 | 0; //@line 10427
   HEAP32[$145 >> 2] = $50; //@line 10428
   $146 = $ReallocAsyncCtx14 + 96 | 0; //@line 10429
   HEAP32[$146 >> 2] = $$131; //@line 10430
   $147 = $ReallocAsyncCtx14 + 100 | 0; //@line 10431
   HEAP32[$147 >> 2] = $51; //@line 10432
   sp = STACKTOP; //@line 10433
   return;
  } else {
   $95 = HEAP32[$91 + 4 >> 2] | 0; //@line 10438
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 10439
   FUNCTION_TABLE_vii[$95 & 7]($2, $52 + 32 | 0); //@line 10440
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 10443
    $96 = $ReallocAsyncCtx + 4 | 0; //@line 10444
    HEAP32[$96 >> 2] = $2; //@line 10445
    $97 = $ReallocAsyncCtx + 8 | 0; //@line 10446
    HEAP32[$97 >> 2] = $4; //@line 10447
    $98 = $ReallocAsyncCtx + 12 | 0; //@line 10448
    HEAP32[$98 >> 2] = $6; //@line 10449
    $99 = $ReallocAsyncCtx + 16 | 0; //@line 10450
    HEAP32[$99 >> 2] = $8; //@line 10451
    $100 = $ReallocAsyncCtx + 20 | 0; //@line 10452
    HEAP32[$100 >> 2] = $10; //@line 10453
    $101 = $ReallocAsyncCtx + 24 | 0; //@line 10454
    HEAP32[$101 >> 2] = $12; //@line 10455
    $102 = $ReallocAsyncCtx + 28 | 0; //@line 10456
    HEAP32[$102 >> 2] = $14; //@line 10457
    $103 = $ReallocAsyncCtx + 32 | 0; //@line 10458
    HEAP32[$103 >> 2] = $16; //@line 10459
    $104 = $ReallocAsyncCtx + 36 | 0; //@line 10460
    HEAP32[$104 >> 2] = $18; //@line 10461
    $105 = $ReallocAsyncCtx + 40 | 0; //@line 10462
    HEAP32[$105 >> 2] = $20; //@line 10463
    $106 = $ReallocAsyncCtx + 44 | 0; //@line 10464
    HEAP32[$106 >> 2] = $22; //@line 10465
    $107 = $ReallocAsyncCtx + 48 | 0; //@line 10466
    HEAP32[$107 >> 2] = $90; //@line 10467
    $108 = $ReallocAsyncCtx + 52 | 0; //@line 10468
    HEAP32[$108 >> 2] = $50; //@line 10469
    $109 = $ReallocAsyncCtx + 56 | 0; //@line 10470
    HEAP32[$109 >> 2] = $24; //@line 10471
    $110 = $ReallocAsyncCtx + 60 | 0; //@line 10472
    HEAP32[$110 >> 2] = $26; //@line 10473
    $111 = $ReallocAsyncCtx + 64 | 0; //@line 10474
    HEAP32[$111 >> 2] = $28; //@line 10475
    $112 = $ReallocAsyncCtx + 68 | 0; //@line 10476
    HEAP32[$112 >> 2] = $30; //@line 10477
    $113 = $ReallocAsyncCtx + 72 | 0; //@line 10478
    HEAP32[$113 >> 2] = $32; //@line 10479
    $114 = $ReallocAsyncCtx + 76 | 0; //@line 10480
    HEAP32[$114 >> 2] = $34; //@line 10481
    $115 = $ReallocAsyncCtx + 80 | 0; //@line 10482
    HEAP32[$115 >> 2] = $36; //@line 10483
    $116 = $ReallocAsyncCtx + 84 | 0; //@line 10484
    HEAP32[$116 >> 2] = $38; //@line 10485
    $117 = $ReallocAsyncCtx + 88 | 0; //@line 10486
    HEAP32[$117 >> 2] = $40; //@line 10487
    $118 = $ReallocAsyncCtx + 92 | 0; //@line 10488
    HEAP32[$118 >> 2] = $42; //@line 10489
    $119 = $ReallocAsyncCtx + 96 | 0; //@line 10490
    HEAP32[$119 >> 2] = $44; //@line 10491
    $120 = $ReallocAsyncCtx + 100 | 0; //@line 10492
    HEAP32[$120 >> 2] = $$131; //@line 10493
    $121 = $ReallocAsyncCtx + 104 | 0; //@line 10494
    HEAP32[$121 >> 2] = $51; //@line 10495
    sp = STACKTOP; //@line 10496
    return;
   }
   ___async_unwind = 0; //@line 10499
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 10500
   $96 = $ReallocAsyncCtx + 4 | 0; //@line 10501
   HEAP32[$96 >> 2] = $2; //@line 10502
   $97 = $ReallocAsyncCtx + 8 | 0; //@line 10503
   HEAP32[$97 >> 2] = $4; //@line 10504
   $98 = $ReallocAsyncCtx + 12 | 0; //@line 10505
   HEAP32[$98 >> 2] = $6; //@line 10506
   $99 = $ReallocAsyncCtx + 16 | 0; //@line 10507
   HEAP32[$99 >> 2] = $8; //@line 10508
   $100 = $ReallocAsyncCtx + 20 | 0; //@line 10509
   HEAP32[$100 >> 2] = $10; //@line 10510
   $101 = $ReallocAsyncCtx + 24 | 0; //@line 10511
   HEAP32[$101 >> 2] = $12; //@line 10512
   $102 = $ReallocAsyncCtx + 28 | 0; //@line 10513
   HEAP32[$102 >> 2] = $14; //@line 10514
   $103 = $ReallocAsyncCtx + 32 | 0; //@line 10515
   HEAP32[$103 >> 2] = $16; //@line 10516
   $104 = $ReallocAsyncCtx + 36 | 0; //@line 10517
   HEAP32[$104 >> 2] = $18; //@line 10518
   $105 = $ReallocAsyncCtx + 40 | 0; //@line 10519
   HEAP32[$105 >> 2] = $20; //@line 10520
   $106 = $ReallocAsyncCtx + 44 | 0; //@line 10521
   HEAP32[$106 >> 2] = $22; //@line 10522
   $107 = $ReallocAsyncCtx + 48 | 0; //@line 10523
   HEAP32[$107 >> 2] = $90; //@line 10524
   $108 = $ReallocAsyncCtx + 52 | 0; //@line 10525
   HEAP32[$108 >> 2] = $50; //@line 10526
   $109 = $ReallocAsyncCtx + 56 | 0; //@line 10527
   HEAP32[$109 >> 2] = $24; //@line 10528
   $110 = $ReallocAsyncCtx + 60 | 0; //@line 10529
   HEAP32[$110 >> 2] = $26; //@line 10530
   $111 = $ReallocAsyncCtx + 64 | 0; //@line 10531
   HEAP32[$111 >> 2] = $28; //@line 10532
   $112 = $ReallocAsyncCtx + 68 | 0; //@line 10533
   HEAP32[$112 >> 2] = $30; //@line 10534
   $113 = $ReallocAsyncCtx + 72 | 0; //@line 10535
   HEAP32[$113 >> 2] = $32; //@line 10536
   $114 = $ReallocAsyncCtx + 76 | 0; //@line 10537
   HEAP32[$114 >> 2] = $34; //@line 10538
   $115 = $ReallocAsyncCtx + 80 | 0; //@line 10539
   HEAP32[$115 >> 2] = $36; //@line 10540
   $116 = $ReallocAsyncCtx + 84 | 0; //@line 10541
   HEAP32[$116 >> 2] = $38; //@line 10542
   $117 = $ReallocAsyncCtx + 88 | 0; //@line 10543
   HEAP32[$117 >> 2] = $40; //@line 10544
   $118 = $ReallocAsyncCtx + 92 | 0; //@line 10545
   HEAP32[$118 >> 2] = $42; //@line 10546
   $119 = $ReallocAsyncCtx + 96 | 0; //@line 10547
   HEAP32[$119 >> 2] = $44; //@line 10548
   $120 = $ReallocAsyncCtx + 100 | 0; //@line 10549
   HEAP32[$120 >> 2] = $$131; //@line 10550
   $121 = $ReallocAsyncCtx + 104 | 0; //@line 10551
   HEAP32[$121 >> 2] = $51; //@line 10552
   sp = STACKTOP; //@line 10553
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$149 >> 2] = 0; //@line 10558
  $154 = $148 + 44 | 0; //@line 10559
  $155 = HEAP32[$154 >> 2] | 0; //@line 10560
  if (!$155) {
   HEAP32[$30 >> 2] = 0; //@line 10563
   $186 = HEAP32[$148 >> 2] | 0; //@line 10564
   HEAP32[$32 >> 2] = 0; //@line 10565
   HEAP32[$34 >> 2] = 193; //@line 10566
   HEAP32[$36 >> 2] = $186; //@line 10567
   HEAP32[$6 >> 2] = 764; //@line 10568
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 10569
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($38, 0, $40) | 0; //@line 10570
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 10573
    $187 = $ReallocAsyncCtx13 + 4 | 0; //@line 10574
    HEAP32[$187 >> 2] = $2; //@line 10575
    $188 = $ReallocAsyncCtx13 + 8 | 0; //@line 10576
    HEAP32[$188 >> 2] = $4; //@line 10577
    $189 = $ReallocAsyncCtx13 + 12 | 0; //@line 10578
    HEAP32[$189 >> 2] = $6; //@line 10579
    $190 = $ReallocAsyncCtx13 + 16 | 0; //@line 10580
    HEAP32[$190 >> 2] = $8; //@line 10581
    $191 = $ReallocAsyncCtx13 + 20 | 0; //@line 10582
    HEAP32[$191 >> 2] = $10; //@line 10583
    $192 = $ReallocAsyncCtx13 + 24 | 0; //@line 10584
    HEAP32[$192 >> 2] = $12; //@line 10585
    $193 = $ReallocAsyncCtx13 + 28 | 0; //@line 10586
    HEAP32[$193 >> 2] = $14; //@line 10587
    $194 = $ReallocAsyncCtx13 + 32 | 0; //@line 10588
    HEAP32[$194 >> 2] = $16; //@line 10589
    $195 = $ReallocAsyncCtx13 + 36 | 0; //@line 10590
    HEAP32[$195 >> 2] = $18; //@line 10591
    $196 = $ReallocAsyncCtx13 + 40 | 0; //@line 10592
    HEAP32[$196 >> 2] = $20; //@line 10593
    $197 = $ReallocAsyncCtx13 + 44 | 0; //@line 10594
    HEAP32[$197 >> 2] = $22; //@line 10595
    $198 = $ReallocAsyncCtx13 + 48 | 0; //@line 10596
    HEAP32[$198 >> 2] = $24; //@line 10597
    $199 = $ReallocAsyncCtx13 + 52 | 0; //@line 10598
    HEAP32[$199 >> 2] = $26; //@line 10599
    $200 = $ReallocAsyncCtx13 + 56 | 0; //@line 10600
    HEAP32[$200 >> 2] = $28; //@line 10601
    $201 = $ReallocAsyncCtx13 + 60 | 0; //@line 10602
    HEAP32[$201 >> 2] = $30; //@line 10603
    $202 = $ReallocAsyncCtx13 + 64 | 0; //@line 10604
    HEAP32[$202 >> 2] = $32; //@line 10605
    $203 = $ReallocAsyncCtx13 + 68 | 0; //@line 10606
    HEAP32[$203 >> 2] = $34; //@line 10607
    $204 = $ReallocAsyncCtx13 + 72 | 0; //@line 10608
    HEAP32[$204 >> 2] = $36; //@line 10609
    $205 = $ReallocAsyncCtx13 + 76 | 0; //@line 10610
    HEAP32[$205 >> 2] = $38; //@line 10611
    $206 = $ReallocAsyncCtx13 + 80 | 0; //@line 10612
    HEAP32[$206 >> 2] = $40; //@line 10613
    $207 = $ReallocAsyncCtx13 + 84 | 0; //@line 10614
    HEAP32[$207 >> 2] = $42; //@line 10615
    $208 = $ReallocAsyncCtx13 + 88 | 0; //@line 10616
    HEAP32[$208 >> 2] = $44; //@line 10617
    $209 = $ReallocAsyncCtx13 + 92 | 0; //@line 10618
    HEAP32[$209 >> 2] = $$131; //@line 10619
    $210 = $ReallocAsyncCtx13 + 96 | 0; //@line 10620
    HEAP32[$210 >> 2] = $51; //@line 10621
    $211 = $ReallocAsyncCtx13 + 100 | 0; //@line 10622
    HEAP32[$211 >> 2] = $50; //@line 10623
    sp = STACKTOP; //@line 10624
    return;
   }
   ___async_unwind = 0; //@line 10627
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 10628
   $187 = $ReallocAsyncCtx13 + 4 | 0; //@line 10629
   HEAP32[$187 >> 2] = $2; //@line 10630
   $188 = $ReallocAsyncCtx13 + 8 | 0; //@line 10631
   HEAP32[$188 >> 2] = $4; //@line 10632
   $189 = $ReallocAsyncCtx13 + 12 | 0; //@line 10633
   HEAP32[$189 >> 2] = $6; //@line 10634
   $190 = $ReallocAsyncCtx13 + 16 | 0; //@line 10635
   HEAP32[$190 >> 2] = $8; //@line 10636
   $191 = $ReallocAsyncCtx13 + 20 | 0; //@line 10637
   HEAP32[$191 >> 2] = $10; //@line 10638
   $192 = $ReallocAsyncCtx13 + 24 | 0; //@line 10639
   HEAP32[$192 >> 2] = $12; //@line 10640
   $193 = $ReallocAsyncCtx13 + 28 | 0; //@line 10641
   HEAP32[$193 >> 2] = $14; //@line 10642
   $194 = $ReallocAsyncCtx13 + 32 | 0; //@line 10643
   HEAP32[$194 >> 2] = $16; //@line 10644
   $195 = $ReallocAsyncCtx13 + 36 | 0; //@line 10645
   HEAP32[$195 >> 2] = $18; //@line 10646
   $196 = $ReallocAsyncCtx13 + 40 | 0; //@line 10647
   HEAP32[$196 >> 2] = $20; //@line 10648
   $197 = $ReallocAsyncCtx13 + 44 | 0; //@line 10649
   HEAP32[$197 >> 2] = $22; //@line 10650
   $198 = $ReallocAsyncCtx13 + 48 | 0; //@line 10651
   HEAP32[$198 >> 2] = $24; //@line 10652
   $199 = $ReallocAsyncCtx13 + 52 | 0; //@line 10653
   HEAP32[$199 >> 2] = $26; //@line 10654
   $200 = $ReallocAsyncCtx13 + 56 | 0; //@line 10655
   HEAP32[$200 >> 2] = $28; //@line 10656
   $201 = $ReallocAsyncCtx13 + 60 | 0; //@line 10657
   HEAP32[$201 >> 2] = $30; //@line 10658
   $202 = $ReallocAsyncCtx13 + 64 | 0; //@line 10659
   HEAP32[$202 >> 2] = $32; //@line 10660
   $203 = $ReallocAsyncCtx13 + 68 | 0; //@line 10661
   HEAP32[$203 >> 2] = $34; //@line 10662
   $204 = $ReallocAsyncCtx13 + 72 | 0; //@line 10663
   HEAP32[$204 >> 2] = $36; //@line 10664
   $205 = $ReallocAsyncCtx13 + 76 | 0; //@line 10665
   HEAP32[$205 >> 2] = $38; //@line 10666
   $206 = $ReallocAsyncCtx13 + 80 | 0; //@line 10667
   HEAP32[$206 >> 2] = $40; //@line 10668
   $207 = $ReallocAsyncCtx13 + 84 | 0; //@line 10669
   HEAP32[$207 >> 2] = $42; //@line 10670
   $208 = $ReallocAsyncCtx13 + 88 | 0; //@line 10671
   HEAP32[$208 >> 2] = $44; //@line 10672
   $209 = $ReallocAsyncCtx13 + 92 | 0; //@line 10673
   HEAP32[$209 >> 2] = $$131; //@line 10674
   $210 = $ReallocAsyncCtx13 + 96 | 0; //@line 10675
   HEAP32[$210 >> 2] = $51; //@line 10676
   $211 = $ReallocAsyncCtx13 + 100 | 0; //@line 10677
   HEAP32[$211 >> 2] = $50; //@line 10678
   sp = STACKTOP; //@line 10679
   return;
  } else {
   $159 = HEAP32[$155 + 4 >> 2] | 0; //@line 10684
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 10685
   FUNCTION_TABLE_vii[$159 & 7]($28, $148 + 32 | 0); //@line 10686
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 10689
    $160 = $ReallocAsyncCtx4 + 4 | 0; //@line 10690
    HEAP32[$160 >> 2] = $2; //@line 10691
    $161 = $ReallocAsyncCtx4 + 8 | 0; //@line 10692
    HEAP32[$161 >> 2] = $4; //@line 10693
    $162 = $ReallocAsyncCtx4 + 12 | 0; //@line 10694
    HEAP32[$162 >> 2] = $6; //@line 10695
    $163 = $ReallocAsyncCtx4 + 16 | 0; //@line 10696
    HEAP32[$163 >> 2] = $8; //@line 10697
    $164 = $ReallocAsyncCtx4 + 20 | 0; //@line 10698
    HEAP32[$164 >> 2] = $10; //@line 10699
    $165 = $ReallocAsyncCtx4 + 24 | 0; //@line 10700
    HEAP32[$165 >> 2] = $12; //@line 10701
    $166 = $ReallocAsyncCtx4 + 28 | 0; //@line 10702
    HEAP32[$166 >> 2] = $14; //@line 10703
    $167 = $ReallocAsyncCtx4 + 32 | 0; //@line 10704
    HEAP32[$167 >> 2] = $16; //@line 10705
    $168 = $ReallocAsyncCtx4 + 36 | 0; //@line 10706
    HEAP32[$168 >> 2] = $18; //@line 10707
    $169 = $ReallocAsyncCtx4 + 40 | 0; //@line 10708
    HEAP32[$169 >> 2] = $20; //@line 10709
    $170 = $ReallocAsyncCtx4 + 44 | 0; //@line 10710
    HEAP32[$170 >> 2] = $22; //@line 10711
    $171 = $ReallocAsyncCtx4 + 48 | 0; //@line 10712
    HEAP32[$171 >> 2] = $24; //@line 10713
    $172 = $ReallocAsyncCtx4 + 52 | 0; //@line 10714
    HEAP32[$172 >> 2] = $26; //@line 10715
    $173 = $ReallocAsyncCtx4 + 56 | 0; //@line 10716
    HEAP32[$173 >> 2] = $154; //@line 10717
    $174 = $ReallocAsyncCtx4 + 60 | 0; //@line 10718
    HEAP32[$174 >> 2] = $50; //@line 10719
    $175 = $ReallocAsyncCtx4 + 64 | 0; //@line 10720
    HEAP32[$175 >> 2] = $28; //@line 10721
    $176 = $ReallocAsyncCtx4 + 68 | 0; //@line 10722
    HEAP32[$176 >> 2] = $30; //@line 10723
    $177 = $ReallocAsyncCtx4 + 72 | 0; //@line 10724
    HEAP32[$177 >> 2] = $32; //@line 10725
    $178 = $ReallocAsyncCtx4 + 76 | 0; //@line 10726
    HEAP32[$178 >> 2] = $34; //@line 10727
    $179 = $ReallocAsyncCtx4 + 80 | 0; //@line 10728
    HEAP32[$179 >> 2] = $36; //@line 10729
    $180 = $ReallocAsyncCtx4 + 84 | 0; //@line 10730
    HEAP32[$180 >> 2] = $38; //@line 10731
    $181 = $ReallocAsyncCtx4 + 88 | 0; //@line 10732
    HEAP32[$181 >> 2] = $40; //@line 10733
    $182 = $ReallocAsyncCtx4 + 92 | 0; //@line 10734
    HEAP32[$182 >> 2] = $42; //@line 10735
    $183 = $ReallocAsyncCtx4 + 96 | 0; //@line 10736
    HEAP32[$183 >> 2] = $44; //@line 10737
    $184 = $ReallocAsyncCtx4 + 100 | 0; //@line 10738
    HEAP32[$184 >> 2] = $$131; //@line 10739
    $185 = $ReallocAsyncCtx4 + 104 | 0; //@line 10740
    HEAP32[$185 >> 2] = $51; //@line 10741
    sp = STACKTOP; //@line 10742
    return;
   }
   ___async_unwind = 0; //@line 10745
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 10746
   $160 = $ReallocAsyncCtx4 + 4 | 0; //@line 10747
   HEAP32[$160 >> 2] = $2; //@line 10748
   $161 = $ReallocAsyncCtx4 + 8 | 0; //@line 10749
   HEAP32[$161 >> 2] = $4; //@line 10750
   $162 = $ReallocAsyncCtx4 + 12 | 0; //@line 10751
   HEAP32[$162 >> 2] = $6; //@line 10752
   $163 = $ReallocAsyncCtx4 + 16 | 0; //@line 10753
   HEAP32[$163 >> 2] = $8; //@line 10754
   $164 = $ReallocAsyncCtx4 + 20 | 0; //@line 10755
   HEAP32[$164 >> 2] = $10; //@line 10756
   $165 = $ReallocAsyncCtx4 + 24 | 0; //@line 10757
   HEAP32[$165 >> 2] = $12; //@line 10758
   $166 = $ReallocAsyncCtx4 + 28 | 0; //@line 10759
   HEAP32[$166 >> 2] = $14; //@line 10760
   $167 = $ReallocAsyncCtx4 + 32 | 0; //@line 10761
   HEAP32[$167 >> 2] = $16; //@line 10762
   $168 = $ReallocAsyncCtx4 + 36 | 0; //@line 10763
   HEAP32[$168 >> 2] = $18; //@line 10764
   $169 = $ReallocAsyncCtx4 + 40 | 0; //@line 10765
   HEAP32[$169 >> 2] = $20; //@line 10766
   $170 = $ReallocAsyncCtx4 + 44 | 0; //@line 10767
   HEAP32[$170 >> 2] = $22; //@line 10768
   $171 = $ReallocAsyncCtx4 + 48 | 0; //@line 10769
   HEAP32[$171 >> 2] = $24; //@line 10770
   $172 = $ReallocAsyncCtx4 + 52 | 0; //@line 10771
   HEAP32[$172 >> 2] = $26; //@line 10772
   $173 = $ReallocAsyncCtx4 + 56 | 0; //@line 10773
   HEAP32[$173 >> 2] = $154; //@line 10774
   $174 = $ReallocAsyncCtx4 + 60 | 0; //@line 10775
   HEAP32[$174 >> 2] = $50; //@line 10776
   $175 = $ReallocAsyncCtx4 + 64 | 0; //@line 10777
   HEAP32[$175 >> 2] = $28; //@line 10778
   $176 = $ReallocAsyncCtx4 + 68 | 0; //@line 10779
   HEAP32[$176 >> 2] = $30; //@line 10780
   $177 = $ReallocAsyncCtx4 + 72 | 0; //@line 10781
   HEAP32[$177 >> 2] = $32; //@line 10782
   $178 = $ReallocAsyncCtx4 + 76 | 0; //@line 10783
   HEAP32[$178 >> 2] = $34; //@line 10784
   $179 = $ReallocAsyncCtx4 + 80 | 0; //@line 10785
   HEAP32[$179 >> 2] = $36; //@line 10786
   $180 = $ReallocAsyncCtx4 + 84 | 0; //@line 10787
   HEAP32[$180 >> 2] = $38; //@line 10788
   $181 = $ReallocAsyncCtx4 + 88 | 0; //@line 10789
   HEAP32[$181 >> 2] = $40; //@line 10790
   $182 = $ReallocAsyncCtx4 + 92 | 0; //@line 10791
   HEAP32[$182 >> 2] = $42; //@line 10792
   $183 = $ReallocAsyncCtx4 + 96 | 0; //@line 10793
   HEAP32[$183 >> 2] = $44; //@line 10794
   $184 = $ReallocAsyncCtx4 + 100 | 0; //@line 10795
   HEAP32[$184 >> 2] = $$131; //@line 10796
   $185 = $ReallocAsyncCtx4 + 104 | 0; //@line 10797
   HEAP32[$185 >> 2] = $51; //@line 10798
   sp = STACKTOP; //@line 10799
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_134($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 8997
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8999
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9001
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9003
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9005
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9007
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9009
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9011
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9013
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9015
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9017
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9019
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9021
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9023
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9025
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9027
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9029
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9031
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9033
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9035
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9037
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9039
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9041
 $$02972$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 9048
 $$03071$reg2mem$0 = HEAP32[$0 + 92 >> 2] | 0; //@line 9048
 $$reg2mem$0 = HEAP32[$0 + 100 >> 2] | 0; //@line 9048
 L2 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 9053
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 9053
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 9055
   $$131 = $$03071$reg2mem$0; //@line 9055
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 9058
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 9061
    break L2;
   }
   $52 = 7844 + ($$02972$reg2mem$1 << 2) | 0; //@line 9064
   $54 = HEAP32[$52 >> 2] | 0; //@line 9065
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 9077
   break;
  }
  $84 = $54 + 72 | 0; //@line 9080
  $85 = HEAP32[$84 >> 2] | 0; //@line 9081
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 9085
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 9091
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 9095
  $151 = $150 + 76 | 0; //@line 9096
  $152 = HEAP32[$151 >> 2] | 0; //@line 9097
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 9100
   $$03071$reg2mem$0 = $$131; //@line 9100
   $$reg2mem$0 = $52; //@line 9100
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 9105
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 9109
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 9110
  $$03071$reg2mem$0 = $$131; //@line 9110
  $$reg2mem$0 = $52; //@line 9110
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8724] = 0; //@line 9115
   return;
  }
  $217 = $$131 + 44 | 0; //@line 9118
  $218 = HEAP32[$217 >> 2] | 0; //@line 9119
  if (!$218) {
   $226 = $22 + 12 | 0; //@line 9122
   HEAP32[$226 >> 2] = 0; //@line 9123
   $228 = $26 + 4 | 0; //@line 9125
   HEAP32[$228 >> 2] = 0; //@line 9127
   HEAP32[$228 + 4 >> 2] = 0; //@line 9130
   HEAP32[$26 >> 2] = 3; //@line 9131
   $232 = $26 + 12 | 0; //@line 9132
   HEAP32[$232 >> 2] = 752; //@line 9133
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 9134
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 100, $26) | 0; //@line 9135
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 9138
    $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 9139
    HEAP32[$233 >> 2] = $232; //@line 9140
    $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 9141
    HEAP32[$234 >> 2] = $226; //@line 9142
    $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 9143
    HEAP32[$235 >> 2] = $26; //@line 9144
    $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 9145
    HEAP32[$236 >> 2] = $22; //@line 9146
    sp = STACKTOP; //@line 9147
    return;
   }
   ___async_unwind = 0; //@line 9150
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 9151
   $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 9152
   HEAP32[$233 >> 2] = $232; //@line 9153
   $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 9154
   HEAP32[$234 >> 2] = $226; //@line 9155
   $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 9156
   HEAP32[$235 >> 2] = $26; //@line 9157
   $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 9158
   HEAP32[$236 >> 2] = $22; //@line 9159
   sp = STACKTOP; //@line 9160
   return;
  } else {
   $222 = HEAP32[$218 + 4 >> 2] | 0; //@line 9165
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 9166
   FUNCTION_TABLE_vii[$222 & 7]($22, $$131 + 32 | 0); //@line 9167
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 9170
    $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 9171
    HEAP32[$223 >> 2] = $217; //@line 9172
    $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 9173
    HEAP32[$224 >> 2] = $22; //@line 9174
    $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 9175
    HEAP32[$225 >> 2] = $26; //@line 9176
    sp = STACKTOP; //@line 9177
    return;
   }
   ___async_unwind = 0; //@line 9180
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 9181
   $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 9182
   HEAP32[$223 >> 2] = $217; //@line 9183
   $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 9184
   HEAP32[$224 >> 2] = $22; //@line 9185
   $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 9186
   HEAP32[$225 >> 2] = $26; //@line 9187
   sp = STACKTOP; //@line 9188
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 9193
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 9194
  __ZL28nsapi_dns_query_async_deletei($59); //@line 9195
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 9198
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 9199
   HEAP32[$60 >> 2] = $2; //@line 9200
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 9201
   HEAP32[$61 >> 2] = $4; //@line 9202
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 9203
   HEAP32[$62 >> 2] = $6; //@line 9204
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 9205
   HEAP32[$63 >> 2] = $8; //@line 9206
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 9207
   HEAP32[$64 >> 2] = $10; //@line 9208
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 9209
   HEAP32[$65 >> 2] = $12; //@line 9210
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 9211
   HEAP32[$66 >> 2] = $14; //@line 9212
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 9213
   HEAP32[$67 >> 2] = $16; //@line 9214
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 9215
   HEAP32[$68 >> 2] = $18; //@line 9216
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 9217
   HEAP32[$69 >> 2] = $20; //@line 9218
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 9219
   HEAP32[$70 >> 2] = $22; //@line 9220
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 9221
   HEAP32[$71 >> 2] = $24; //@line 9222
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 9223
   HEAP32[$72 >> 2] = $26; //@line 9224
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 9225
   HEAP32[$73 >> 2] = $28; //@line 9226
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 9227
   HEAP32[$74 >> 2] = $30; //@line 9228
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 9229
   HEAP32[$75 >> 2] = $32; //@line 9230
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 9231
   HEAP32[$76 >> 2] = $34; //@line 9232
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 9233
   HEAP32[$77 >> 2] = $36; //@line 9234
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 9235
   HEAP32[$78 >> 2] = $38; //@line 9236
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 9237
   HEAP32[$79 >> 2] = $40; //@line 9238
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 9239
   HEAP32[$80 >> 2] = $42; //@line 9240
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 9241
   HEAP32[$81 >> 2] = $44; //@line 9242
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 9243
   HEAP32[$82 >> 2] = $$131; //@line 9244
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 9245
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 9246
   sp = STACKTOP; //@line 9247
   return;
  }
  ___async_unwind = 0; //@line 9250
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 9251
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 9252
  HEAP32[$60 >> 2] = $2; //@line 9253
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 9254
  HEAP32[$61 >> 2] = $4; //@line 9255
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 9256
  HEAP32[$62 >> 2] = $6; //@line 9257
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 9258
  HEAP32[$63 >> 2] = $8; //@line 9259
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 9260
  HEAP32[$64 >> 2] = $10; //@line 9261
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 9262
  HEAP32[$65 >> 2] = $12; //@line 9263
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 9264
  HEAP32[$66 >> 2] = $14; //@line 9265
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 9266
  HEAP32[$67 >> 2] = $16; //@line 9267
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 9268
  HEAP32[$68 >> 2] = $18; //@line 9269
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 9270
  HEAP32[$69 >> 2] = $20; //@line 9271
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 9272
  HEAP32[$70 >> 2] = $22; //@line 9273
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 9274
  HEAP32[$71 >> 2] = $24; //@line 9275
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 9276
  HEAP32[$72 >> 2] = $26; //@line 9277
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 9278
  HEAP32[$73 >> 2] = $28; //@line 9279
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 9280
  HEAP32[$74 >> 2] = $30; //@line 9281
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 9282
  HEAP32[$75 >> 2] = $32; //@line 9283
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 9284
  HEAP32[$76 >> 2] = $34; //@line 9285
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 9286
  HEAP32[$77 >> 2] = $36; //@line 9287
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 9288
  HEAP32[$78 >> 2] = $38; //@line 9289
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 9290
  HEAP32[$79 >> 2] = $40; //@line 9291
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 9292
  HEAP32[$80 >> 2] = $42; //@line 9293
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 9294
  HEAP32[$81 >> 2] = $44; //@line 9295
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 9296
  HEAP32[$82 >> 2] = $$131; //@line 9297
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 9298
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 9299
  sp = STACKTOP; //@line 9300
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 9305
  $92 = $54 + 44 | 0; //@line 9306
  $93 = HEAP32[$92 >> 2] | 0; //@line 9307
  if (!$93) {
   HEAP32[$8 >> 2] = 0; //@line 9310
   $124 = HEAP32[$54 >> 2] | 0; //@line 9311
   HEAP32[$10 >> 2] = 0; //@line 9312
   HEAP32[$12 >> 2] = 188; //@line 9313
   HEAP32[$14 >> 2] = $124; //@line 9314
   HEAP32[$16 >> 2] = 764; //@line 9315
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 9316
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 0, $20) | 0; //@line 9317
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 9320
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 9321
    HEAP32[$125 >> 2] = $2; //@line 9322
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 9323
    HEAP32[$126 >> 2] = $4; //@line 9324
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 9325
    HEAP32[$127 >> 2] = $6; //@line 9326
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 9327
    HEAP32[$128 >> 2] = $8; //@line 9328
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 9329
    HEAP32[$129 >> 2] = $10; //@line 9330
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 9331
    HEAP32[$130 >> 2] = $12; //@line 9332
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 9333
    HEAP32[$131 >> 2] = $14; //@line 9334
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 9335
    HEAP32[$132 >> 2] = $16; //@line 9336
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 9337
    HEAP32[$133 >> 2] = $18; //@line 9338
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 9339
    HEAP32[$134 >> 2] = $20; //@line 9340
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 9341
    HEAP32[$135 >> 2] = $22; //@line 9342
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 9343
    HEAP32[$136 >> 2] = $24; //@line 9344
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 9345
    HEAP32[$137 >> 2] = $26; //@line 9346
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 9347
    HEAP32[$138 >> 2] = $28; //@line 9348
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 9349
    HEAP32[$139 >> 2] = $30; //@line 9350
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 9351
    HEAP32[$140 >> 2] = $32; //@line 9352
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 9353
    HEAP32[$141 >> 2] = $34; //@line 9354
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 9355
    HEAP32[$142 >> 2] = $36; //@line 9356
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 9357
    HEAP32[$143 >> 2] = $38; //@line 9358
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 9359
    HEAP32[$144 >> 2] = $40; //@line 9360
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 9361
    HEAP32[$145 >> 2] = $42; //@line 9362
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 9363
    HEAP32[$146 >> 2] = $44; //@line 9364
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 9365
    HEAP32[$147 >> 2] = $52; //@line 9366
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 9367
    HEAP32[$148 >> 2] = $$131; //@line 9368
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 9369
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 9370
    sp = STACKTOP; //@line 9371
    return;
   }
   ___async_unwind = 0; //@line 9374
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 9375
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 9376
   HEAP32[$125 >> 2] = $2; //@line 9377
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 9378
   HEAP32[$126 >> 2] = $4; //@line 9379
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 9380
   HEAP32[$127 >> 2] = $6; //@line 9381
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 9382
   HEAP32[$128 >> 2] = $8; //@line 9383
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 9384
   HEAP32[$129 >> 2] = $10; //@line 9385
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 9386
   HEAP32[$130 >> 2] = $12; //@line 9387
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 9388
   HEAP32[$131 >> 2] = $14; //@line 9389
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 9390
   HEAP32[$132 >> 2] = $16; //@line 9391
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 9392
   HEAP32[$133 >> 2] = $18; //@line 9393
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 9394
   HEAP32[$134 >> 2] = $20; //@line 9395
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 9396
   HEAP32[$135 >> 2] = $22; //@line 9397
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 9398
   HEAP32[$136 >> 2] = $24; //@line 9399
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 9400
   HEAP32[$137 >> 2] = $26; //@line 9401
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 9402
   HEAP32[$138 >> 2] = $28; //@line 9403
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 9404
   HEAP32[$139 >> 2] = $30; //@line 9405
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 9406
   HEAP32[$140 >> 2] = $32; //@line 9407
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 9408
   HEAP32[$141 >> 2] = $34; //@line 9409
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 9410
   HEAP32[$142 >> 2] = $36; //@line 9411
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 9412
   HEAP32[$143 >> 2] = $38; //@line 9413
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 9414
   HEAP32[$144 >> 2] = $40; //@line 9415
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 9416
   HEAP32[$145 >> 2] = $42; //@line 9417
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 9418
   HEAP32[$146 >> 2] = $44; //@line 9419
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 9420
   HEAP32[$147 >> 2] = $52; //@line 9421
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 9422
   HEAP32[$148 >> 2] = $$131; //@line 9423
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 9424
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 9425
   sp = STACKTOP; //@line 9426
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 9431
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 9432
   FUNCTION_TABLE_vii[$97 & 7]($2, $54 + 32 | 0); //@line 9433
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 9436
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 9437
    HEAP32[$98 >> 2] = $2; //@line 9438
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 9439
    HEAP32[$99 >> 2] = $4; //@line 9440
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 9441
    HEAP32[$100 >> 2] = $6; //@line 9442
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 9443
    HEAP32[$101 >> 2] = $8; //@line 9444
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 9445
    HEAP32[$102 >> 2] = $10; //@line 9446
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 9447
    HEAP32[$103 >> 2] = $12; //@line 9448
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 9449
    HEAP32[$104 >> 2] = $14; //@line 9450
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 9451
    HEAP32[$105 >> 2] = $16; //@line 9452
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 9453
    HEAP32[$106 >> 2] = $18; //@line 9454
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 9455
    HEAP32[$107 >> 2] = $20; //@line 9456
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 9457
    HEAP32[$108 >> 2] = $22; //@line 9458
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 9459
    HEAP32[$109 >> 2] = $92; //@line 9460
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 9461
    HEAP32[$110 >> 2] = $52; //@line 9462
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 9463
    HEAP32[$111 >> 2] = $24; //@line 9464
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 9465
    HEAP32[$112 >> 2] = $26; //@line 9466
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 9467
    HEAP32[$113 >> 2] = $28; //@line 9468
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 9469
    HEAP32[$114 >> 2] = $30; //@line 9470
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 9471
    HEAP32[$115 >> 2] = $32; //@line 9472
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 9473
    HEAP32[$116 >> 2] = $34; //@line 9474
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 9475
    HEAP32[$117 >> 2] = $36; //@line 9476
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 9477
    HEAP32[$118 >> 2] = $38; //@line 9478
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 9479
    HEAP32[$119 >> 2] = $40; //@line 9480
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 9481
    HEAP32[$120 >> 2] = $42; //@line 9482
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 9483
    HEAP32[$121 >> 2] = $44; //@line 9484
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 9485
    HEAP32[$122 >> 2] = $$131; //@line 9486
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 9487
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 9488
    sp = STACKTOP; //@line 9489
    return;
   }
   ___async_unwind = 0; //@line 9492
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 9493
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 9494
   HEAP32[$98 >> 2] = $2; //@line 9495
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 9496
   HEAP32[$99 >> 2] = $4; //@line 9497
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 9498
   HEAP32[$100 >> 2] = $6; //@line 9499
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 9500
   HEAP32[$101 >> 2] = $8; //@line 9501
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 9502
   HEAP32[$102 >> 2] = $10; //@line 9503
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 9504
   HEAP32[$103 >> 2] = $12; //@line 9505
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 9506
   HEAP32[$104 >> 2] = $14; //@line 9507
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 9508
   HEAP32[$105 >> 2] = $16; //@line 9509
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 9510
   HEAP32[$106 >> 2] = $18; //@line 9511
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 9512
   HEAP32[$107 >> 2] = $20; //@line 9513
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 9514
   HEAP32[$108 >> 2] = $22; //@line 9515
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 9516
   HEAP32[$109 >> 2] = $92; //@line 9517
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 9518
   HEAP32[$110 >> 2] = $52; //@line 9519
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 9520
   HEAP32[$111 >> 2] = $24; //@line 9521
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 9522
   HEAP32[$112 >> 2] = $26; //@line 9523
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 9524
   HEAP32[$113 >> 2] = $28; //@line 9525
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 9526
   HEAP32[$114 >> 2] = $30; //@line 9527
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 9528
   HEAP32[$115 >> 2] = $32; //@line 9529
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 9530
   HEAP32[$116 >> 2] = $34; //@line 9531
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 9532
   HEAP32[$117 >> 2] = $36; //@line 9533
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 9534
   HEAP32[$118 >> 2] = $38; //@line 9535
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 9536
   HEAP32[$119 >> 2] = $40; //@line 9537
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 9538
   HEAP32[$120 >> 2] = $42; //@line 9539
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 9540
   HEAP32[$121 >> 2] = $44; //@line 9541
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 9542
   HEAP32[$122 >> 2] = $$131; //@line 9543
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 9544
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 9545
   sp = STACKTOP; //@line 9546
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 9551
  $156 = $150 + 44 | 0; //@line 9552
  $157 = HEAP32[$156 >> 2] | 0; //@line 9553
  if (!$157) {
   HEAP32[$30 >> 2] = 0; //@line 9556
   $188 = HEAP32[$150 >> 2] | 0; //@line 9557
   HEAP32[$32 >> 2] = 0; //@line 9558
   HEAP32[$34 >> 2] = 193; //@line 9559
   HEAP32[$36 >> 2] = $188; //@line 9560
   HEAP32[$6 >> 2] = 764; //@line 9561
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 9562
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($38, 0, $40) | 0; //@line 9563
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 9566
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 9567
    HEAP32[$189 >> 2] = $2; //@line 9568
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 9569
    HEAP32[$190 >> 2] = $4; //@line 9570
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 9571
    HEAP32[$191 >> 2] = $6; //@line 9572
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 9573
    HEAP32[$192 >> 2] = $8; //@line 9574
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 9575
    HEAP32[$193 >> 2] = $10; //@line 9576
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 9577
    HEAP32[$194 >> 2] = $12; //@line 9578
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 9579
    HEAP32[$195 >> 2] = $14; //@line 9580
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 9581
    HEAP32[$196 >> 2] = $16; //@line 9582
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 9583
    HEAP32[$197 >> 2] = $18; //@line 9584
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 9585
    HEAP32[$198 >> 2] = $20; //@line 9586
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 9587
    HEAP32[$199 >> 2] = $22; //@line 9588
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 9589
    HEAP32[$200 >> 2] = $24; //@line 9590
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 9591
    HEAP32[$201 >> 2] = $26; //@line 9592
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 9593
    HEAP32[$202 >> 2] = $28; //@line 9594
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 9595
    HEAP32[$203 >> 2] = $30; //@line 9596
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 9597
    HEAP32[$204 >> 2] = $32; //@line 9598
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 9599
    HEAP32[$205 >> 2] = $34; //@line 9600
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 9601
    HEAP32[$206 >> 2] = $36; //@line 9602
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 9603
    HEAP32[$207 >> 2] = $38; //@line 9604
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 9605
    HEAP32[$208 >> 2] = $40; //@line 9606
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 9607
    HEAP32[$209 >> 2] = $42; //@line 9608
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 9609
    HEAP32[$210 >> 2] = $44; //@line 9610
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 9611
    HEAP32[$211 >> 2] = $$131; //@line 9612
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 9613
    HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 9614
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 9615
    HEAP32[$213 >> 2] = $52; //@line 9616
    sp = STACKTOP; //@line 9617
    return;
   }
   ___async_unwind = 0; //@line 9620
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 9621
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 9622
   HEAP32[$189 >> 2] = $2; //@line 9623
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 9624
   HEAP32[$190 >> 2] = $4; //@line 9625
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 9626
   HEAP32[$191 >> 2] = $6; //@line 9627
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 9628
   HEAP32[$192 >> 2] = $8; //@line 9629
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 9630
   HEAP32[$193 >> 2] = $10; //@line 9631
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 9632
   HEAP32[$194 >> 2] = $12; //@line 9633
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 9634
   HEAP32[$195 >> 2] = $14; //@line 9635
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 9636
   HEAP32[$196 >> 2] = $16; //@line 9637
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 9638
   HEAP32[$197 >> 2] = $18; //@line 9639
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 9640
   HEAP32[$198 >> 2] = $20; //@line 9641
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 9642
   HEAP32[$199 >> 2] = $22; //@line 9643
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 9644
   HEAP32[$200 >> 2] = $24; //@line 9645
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 9646
   HEAP32[$201 >> 2] = $26; //@line 9647
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 9648
   HEAP32[$202 >> 2] = $28; //@line 9649
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 9650
   HEAP32[$203 >> 2] = $30; //@line 9651
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 9652
   HEAP32[$204 >> 2] = $32; //@line 9653
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 9654
   HEAP32[$205 >> 2] = $34; //@line 9655
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 9656
   HEAP32[$206 >> 2] = $36; //@line 9657
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 9658
   HEAP32[$207 >> 2] = $38; //@line 9659
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 9660
   HEAP32[$208 >> 2] = $40; //@line 9661
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 9662
   HEAP32[$209 >> 2] = $42; //@line 9663
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 9664
   HEAP32[$210 >> 2] = $44; //@line 9665
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 9666
   HEAP32[$211 >> 2] = $$131; //@line 9667
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 9668
   HEAP32[$212 >> 2] = $$02972$reg2mem$1; //@line 9669
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 9670
   HEAP32[$213 >> 2] = $52; //@line 9671
   sp = STACKTOP; //@line 9672
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 9677
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 9678
   FUNCTION_TABLE_vii[$161 & 7]($28, $150 + 32 | 0); //@line 9679
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 9682
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 9683
    HEAP32[$162 >> 2] = $2; //@line 9684
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 9685
    HEAP32[$163 >> 2] = $4; //@line 9686
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 9687
    HEAP32[$164 >> 2] = $6; //@line 9688
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 9689
    HEAP32[$165 >> 2] = $8; //@line 9690
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 9691
    HEAP32[$166 >> 2] = $10; //@line 9692
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 9693
    HEAP32[$167 >> 2] = $12; //@line 9694
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 9695
    HEAP32[$168 >> 2] = $14; //@line 9696
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 9697
    HEAP32[$169 >> 2] = $16; //@line 9698
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 9699
    HEAP32[$170 >> 2] = $18; //@line 9700
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 9701
    HEAP32[$171 >> 2] = $20; //@line 9702
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 9703
    HEAP32[$172 >> 2] = $22; //@line 9704
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 9705
    HEAP32[$173 >> 2] = $24; //@line 9706
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 9707
    HEAP32[$174 >> 2] = $26; //@line 9708
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 9709
    HEAP32[$175 >> 2] = $156; //@line 9710
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 9711
    HEAP32[$176 >> 2] = $52; //@line 9712
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 9713
    HEAP32[$177 >> 2] = $28; //@line 9714
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 9715
    HEAP32[$178 >> 2] = $30; //@line 9716
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 9717
    HEAP32[$179 >> 2] = $32; //@line 9718
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 9719
    HEAP32[$180 >> 2] = $34; //@line 9720
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 9721
    HEAP32[$181 >> 2] = $36; //@line 9722
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 9723
    HEAP32[$182 >> 2] = $38; //@line 9724
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 9725
    HEAP32[$183 >> 2] = $40; //@line 9726
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 9727
    HEAP32[$184 >> 2] = $42; //@line 9728
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 9729
    HEAP32[$185 >> 2] = $44; //@line 9730
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 9731
    HEAP32[$186 >> 2] = $$131; //@line 9732
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 9733
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 9734
    sp = STACKTOP; //@line 9735
    return;
   }
   ___async_unwind = 0; //@line 9738
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 9739
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 9740
   HEAP32[$162 >> 2] = $2; //@line 9741
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 9742
   HEAP32[$163 >> 2] = $4; //@line 9743
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 9744
   HEAP32[$164 >> 2] = $6; //@line 9745
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 9746
   HEAP32[$165 >> 2] = $8; //@line 9747
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 9748
   HEAP32[$166 >> 2] = $10; //@line 9749
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 9750
   HEAP32[$167 >> 2] = $12; //@line 9751
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 9752
   HEAP32[$168 >> 2] = $14; //@line 9753
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 9754
   HEAP32[$169 >> 2] = $16; //@line 9755
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 9756
   HEAP32[$170 >> 2] = $18; //@line 9757
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 9758
   HEAP32[$171 >> 2] = $20; //@line 9759
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 9760
   HEAP32[$172 >> 2] = $22; //@line 9761
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 9762
   HEAP32[$173 >> 2] = $24; //@line 9763
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 9764
   HEAP32[$174 >> 2] = $26; //@line 9765
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 9766
   HEAP32[$175 >> 2] = $156; //@line 9767
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 9768
   HEAP32[$176 >> 2] = $52; //@line 9769
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 9770
   HEAP32[$177 >> 2] = $28; //@line 9771
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 9772
   HEAP32[$178 >> 2] = $30; //@line 9773
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 9774
   HEAP32[$179 >> 2] = $32; //@line 9775
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 9776
   HEAP32[$180 >> 2] = $34; //@line 9777
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 9778
   HEAP32[$181 >> 2] = $36; //@line 9779
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 9780
   HEAP32[$182 >> 2] = $38; //@line 9781
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 9782
   HEAP32[$183 >> 2] = $40; //@line 9783
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 9784
   HEAP32[$184 >> 2] = $42; //@line 9785
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 9786
   HEAP32[$185 >> 2] = $44; //@line 9787
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 9788
   HEAP32[$186 >> 2] = $$131; //@line 9789
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 9790
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 9791
   sp = STACKTOP; //@line 9792
   return;
  }
 }
}
function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$ph = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $13 = 0, $134 = 0, $14 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $227 = 0, $23 = 0, $235 = 0, $236 = 0, $239 = 0, $247 = 0, $254 = 0, $262 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $292 = 0.0, $3 = 0, $312 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $65 = 0, $90 = 0, $91 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5645
 STACKTOP = STACKTOP + 288 | 0; //@line 5646
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 5646
 $3 = sp + 8 | 0; //@line 5647
 $4 = sp + 17 | 0; //@line 5648
 $5 = sp; //@line 5649
 $6 = sp + 16 | 0; //@line 5650
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $314 = ___lockfile($0) | 0; //@line 5656
 } else {
  $314 = 0; //@line 5658
 }
 $11 = HEAP8[$1 >> 0] | 0; //@line 5660
 L4 : do {
  if (!($11 << 24 >> 24)) {
   $$3291 = 0; //@line 5664
  } else {
   $13 = $0 + 4 | 0; //@line 5666
   $14 = $0 + 100 | 0; //@line 5667
   $15 = $0 + 108 | 0; //@line 5668
   $16 = $0 + 8 | 0; //@line 5669
   $17 = $4 + 10 | 0; //@line 5670
   $18 = $4 + 33 | 0; //@line 5671
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0; //@line 5672
   $$0273408 = $1; //@line 5673
   $$0283407 = 0; //@line 5673
   $$0288404 = 0; //@line 5673
   $$0305402 = 0; //@line 5673
   $20 = $11; //@line 5673
   $315 = 0; //@line 5673
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($20 & 255) | 0)) {
      $50 = (HEAP8[$$0273408 >> 0] | 0) == 37; //@line 5681
      L10 : do {
       if ($50) {
        $51 = $$0273408 + 1 | 0; //@line 5684
        $52 = HEAP8[$51 >> 0] | 0; //@line 5685
        L12 : do {
         switch ($52 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $$0293 = 0; //@line 5694
           $$2275 = $$0273408 + 2 | 0; //@line 5694
           break;
          }
         default:
          {
           if (_isdigit($52 & 255) | 0) {
            if ((HEAP8[$$0273408 + 2 >> 0] | 0) == 36) {
             $$0293 = _arg_n_727($2, (HEAPU8[$51 >> 0] | 0) + -48 | 0) | 0; //@line 5711
             $$2275 = $$0273408 + 3 | 0; //@line 5711
             break L12;
            }
           }
           $90 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5726
           $91 = HEAP32[$90 >> 2] | 0; //@line 5727
           HEAP32[$2 >> 2] = $90 + 4; //@line 5729
           $$0293 = $91; //@line 5730
           $$2275 = $51; //@line 5730
          }
         }
        } while (0);
        if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
         $$0266$lcssa = 0; //@line 5739
         $$3$lcssa = $$2275; //@line 5739
        } else {
         $$0266397 = 0; //@line 5741
         $$3396 = $$2275; //@line 5741
         while (1) {
          $100 = ($$0266397 * 10 | 0) + -48 + (HEAPU8[$$3396 >> 0] | 0) | 0; //@line 5747
          $101 = $$3396 + 1 | 0; //@line 5748
          if (!(_isdigit(HEAPU8[$101 >> 0] | 0) | 0)) {
           $$0266$lcssa = $100; //@line 5754
           $$3$lcssa = $101; //@line 5754
           break;
          } else {
           $$0266397 = $100; //@line 5757
           $$3396 = $101; //@line 5757
          }
         }
        }
        $106 = HEAP8[$$3$lcssa >> 0] | 0; //@line 5761
        $108 = $$3$lcssa + 1 | 0; //@line 5763
        if ($106 << 24 >> 24 == 109) {
         $$0270 = ($$0293 | 0) != 0 & 1; //@line 5768
         $$1306 = 0; //@line 5768
         $$4 = $108; //@line 5768
         $112 = HEAP8[$108 >> 0] | 0; //@line 5768
         $318 = 0; //@line 5768
        } else {
         $$0270 = 0; //@line 5770
         $$1306 = $$0305402; //@line 5770
         $$4 = $$3$lcssa; //@line 5770
         $112 = $106; //@line 5770
         $318 = $315; //@line 5770
        }
        $111 = $$4 + 1 | 0; //@line 5772
        switch ($112 << 24 >> 24) {
        case 104:
         {
          $114 = (HEAP8[$111 >> 0] | 0) == 104; //@line 5776
          $$0268 = $114 ? -2 : -1; //@line 5780
          $$5 = $114 ? $$4 + 2 | 0 : $111; //@line 5780
          break;
         }
        case 108:
         {
          $117 = (HEAP8[$111 >> 0] | 0) == 108; //@line 5785
          $$0268 = $117 ? 3 : 1; //@line 5789
          $$5 = $117 ? $$4 + 2 | 0 : $111; //@line 5789
          break;
         }
        case 106:
         {
          $$0268 = 3; //@line 5793
          $$5 = $111; //@line 5793
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1; //@line 5797
          $$5 = $111; //@line 5797
          break;
         }
        case 76:
         {
          $$0268 = 2; //@line 5801
          $$5 = $111; //@line 5801
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0; //@line 5805
          $$5 = $$4; //@line 5805
          break;
         }
        default:
         {
          $$7312 = $$1306; //@line 5809
          $319 = $318; //@line 5809
          label = 136; //@line 5810
          break L6;
         }
        }
        $120 = HEAPU8[$$5 >> 0] | 0; //@line 5815
        $122 = ($120 & 47 | 0) == 3; //@line 5817
        $$ = $122 ? $120 | 32 : $120; //@line 5819
        $$$0268 = $122 ? 1 : $$0268; //@line 5820
        $trunc = $$ & 255; //@line 5821
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1; //@line 5826
          $$1284 = $$0283407; //@line 5826
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa; //@line 5830
          $$1284 = $$0283407; //@line 5830
          break;
         }
        case 110:
         {
          _store_int_728($$0293, $$$0268, $$0283407, (($$0283407 | 0) < 0) << 31 >> 31); //@line 5836
          $$11 = $$5; //@line 5837
          $$1289 = $$0288404; //@line 5837
          $$2285 = $$0283407; //@line 5837
          $$6311 = $$1306; //@line 5837
          $316 = $318; //@line 5837
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0); //@line 5842
          do {
           $127 = HEAP32[$13 >> 2] | 0; //@line 5844
           if ($127 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $127 + 1; //@line 5849
            $134 = HEAPU8[$127 >> 0] | 0; //@line 5852
           } else {
            $134 = ___shgetc($0) | 0; //@line 5855
           }
          } while ((_isspace($134) | 0) != 0);
          if (!(HEAP32[$14 >> 2] | 0)) {
           $146 = HEAP32[$13 >> 2] | 0; //@line 5867
          } else {
           $140 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 5870
           HEAP32[$13 >> 2] = $140; //@line 5871
           $146 = $140; //@line 5873
          }
          $$1267 = $$0266$lcssa; //@line 5880
          $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $146 - (HEAP32[$16 >> 2] | 0) | 0; //@line 5880
         }
        }
        ___shlim($0, $$1267); //@line 5883
        $148 = HEAP32[$13 >> 2] | 0; //@line 5884
        $149 = HEAP32[$14 >> 2] | 0; //@line 5885
        if ($148 >>> 0 < $149 >>> 0) {
         HEAP32[$13 >> 2] = $148 + 1; //@line 5889
         $155 = $149; //@line 5890
        } else {
         if ((___shgetc($0) | 0) < 0) {
          $$7312 = $$1306; //@line 5895
          $319 = $318; //@line 5895
          label = 136; //@line 5896
          break L6;
         }
         $155 = HEAP32[$14 >> 2] | 0; //@line 5900
        }
        if ($155 | 0) {
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 5906
        }
        L58 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $158 = ($$ | 0) == 99; //@line 5911
           L60 : do {
            if (($$ | 16 | 0) == 115) {
             _memset($4 | 0, -1, 257) | 0; //@line 5917
             HEAP8[$4 >> 0] = 0; //@line 5918
             if (($$ | 0) == 115) {
              HEAP8[$18 >> 0] = 0; //@line 5920
              HEAP8[$17 >> 0] = 0; //@line 5921
              HEAP8[$17 + 1 >> 0] = 0; //@line 5921
              HEAP8[$17 + 2 >> 0] = 0; //@line 5921
              HEAP8[$17 + 3 >> 0] = 0; //@line 5921
              HEAP8[$17 + 4 >> 0] = 0; //@line 5921
              $$9 = $$5; //@line 5922
             } else {
              $$9 = $$5; //@line 5924
             }
            } else {
             $162 = $$5 + 1 | 0; //@line 5927
             $164 = (HEAP8[$162 >> 0] | 0) == 94; //@line 5929
             $$0292 = $164 & 1; //@line 5931
             $$6 = $164 ? $$5 + 2 | 0 : $162; //@line 5932
             _memset($4 | 0, $$0292 | 0, 257) | 0; //@line 5933
             HEAP8[$4 >> 0] = 0; //@line 5934
             $166 = HEAP8[$$6 >> 0] | 0; //@line 5935
             switch ($166 << 24 >> 24) {
             case 45:
              {
               $$6$pn = $$6; //@line 5938
               $$sink330 = 46; //@line 5938
               label = 65; //@line 5939
               break;
              }
             case 93:
              {
               $$6$pn = $$6; //@line 5943
               $$sink330 = 94; //@line 5943
               label = 65; //@line 5944
               break;
              }
             default:
              {
               $$7 = $$6; //@line 5948
               $168 = $166; //@line 5948
              }
             }
             while (1) {
              if ((label | 0) == 65) {
               label = 0; //@line 5953
               HEAP8[$4 + $$sink330 >> 0] = $$0292 ^ 1; //@line 5957
               $$7$ph = $$6$pn + 1 | 0; //@line 5958
               $$7 = $$7$ph; //@line 5960
               $168 = HEAP8[$$7$ph >> 0] | 0; //@line 5960
              }
              L70 : do {
               switch ($168 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$1306; //@line 5965
                 $319 = $318; //@line 5965
                 label = 136; //@line 5966
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7; //@line 5971
                 break L60;
                 break;
                }
               case 45:
                {
                 $169 = $$7 + 1 | 0; //@line 5976
                 $170 = HEAP8[$169 >> 0] | 0; //@line 5977
                 switch ($170 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7; //@line 5980
                   $183 = 45; //@line 5980
                   break L70;
                   break;
                  }
                 default:
                  {}
                 }
                 $172 = HEAP8[$$7 + -1 >> 0] | 0; //@line 5988
                 if (($172 & 255) < ($170 & 255)) {
                  $176 = ($$0292 ^ 1) & 255; //@line 5993
                  $$0286399 = $172 & 255; //@line 5994
                  do {
                   $$0286399 = $$0286399 + 1 | 0; //@line 5996
                   HEAP8[$4 + $$0286399 >> 0] = $176; //@line 5998
                   $179 = HEAP8[$169 >> 0] | 0; //@line 5999
                  } while (($$0286399 | 0) < ($179 & 255 | 0));
                  $$8 = $169; //@line 6005
                  $183 = $179; //@line 6005
                 } else {
                  $$8 = $169; //@line 6010
                  $183 = $170; //@line 6010
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7; //@line 6015
                 $183 = $168; //@line 6015
                }
               }
              } while (0);
              $$6$pn = $$8; //@line 6021
              $$sink330 = ($183 & 255) + 1 | 0; //@line 6021
              label = 65; //@line 6022
             }
            }
           } while (0);
           $186 = $158 ? $$1267 + 1 | 0 : 31; //@line 6027
           $187 = ($$$0268 | 0) == 1; //@line 6028
           $188 = ($$0270 | 0) != 0; //@line 6029
           L78 : do {
            if ($187) {
             if ($188) {
              $190 = _malloc($186 << 2) | 0; //@line 6034
              if (!$190) {
               $$7312 = 0; //@line 6037
               $319 = 0; //@line 6037
               label = 136; //@line 6038
               break L6;
              } else {
               $321 = $190; //@line 6041
              }
             } else {
              $321 = $$0293; //@line 6044
             }
             HEAP32[$3 >> 2] = 0; //@line 6046
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0; //@line 6047
             $$0276$ph = $186; //@line 6048
             $$0278$ph = 0; //@line 6048
             $$ph = $321; //@line 6048
             L83 : while (1) {
              $192 = ($$ph | 0) == 0; //@line 6050
              $$0278$ph336 = $$0278$ph; //@line 6051
              while (1) {
               L87 : while (1) {
                $193 = HEAP32[$13 >> 2] | 0; //@line 6054
                if ($193 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $193 + 1; //@line 6059
                 $201 = HEAPU8[$193 >> 0] | 0; //@line 6062
                } else {
                 $201 = ___shgetc($0) | 0; //@line 6065
                }
                if (!(HEAP8[$4 + ($201 + 1) >> 0] | 0)) {
                 break L83;
                }
                HEAP8[$6 >> 0] = $201; //@line 6075
                switch (_mbrtowc($5, $6, 1, $3) | 0) {
                case -1:
                 {
                  $$7312 = 0; //@line 6079
                  $319 = $$ph; //@line 6079
                  label = 136; //@line 6080
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L87;
                 }
                }
               }
               if ($192) {
                $$1279 = $$0278$ph336; //@line 6093
               } else {
                HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2]; //@line 6098
                $$1279 = $$0278$ph336 + 1 | 0; //@line 6099
               }
               if ($188 & ($$1279 | 0) == ($$0276$ph | 0)) {
                break;
               } else {
                $$0278$ph336 = $$1279; //@line 6106
               }
              }
              $211 = $$0276$ph << 1 | 1; //@line 6110
              $213 = _realloc($$ph, $211 << 2) | 0; //@line 6112
              if (!$213) {
               $$7312 = 0; //@line 6115
               $319 = $$ph; //@line 6115
               label = 136; //@line 6116
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph; //@line 6119
               $$0276$ph = $211; //@line 6119
               $$ph = $213; //@line 6119
               $$0278$ph = $$0278$ph$phi; //@line 6119
              }
             }
             if (!(_mbsinit($3) | 0)) {
              $$7312 = 0; //@line 6125
              $319 = $$ph; //@line 6125
              label = 136; //@line 6126
              break L6;
             } else {
              $$4282 = $$0278$ph336; //@line 6129
              $$4309 = 0; //@line 6129
              $$5299 = $$ph; //@line 6129
              $322 = $$ph; //@line 6129
             }
            } else {
             if ($188) {
              $217 = _malloc($186) | 0; //@line 6133
              if (!$217) {
               $$7312 = 0; //@line 6136
               $319 = 0; //@line 6136
               label = 136; //@line 6137
               break L6;
              } else {
               $$1277$ph = $186; //@line 6140
               $$2280$ph = 0; //@line 6140
               $$2307$ph = $217; //@line 6140
              }
              while (1) {
               $$2280 = $$2280$ph; //@line 6143
               do {
                $219 = HEAP32[$13 >> 2] | 0; //@line 6145
                if ($219 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $219 + 1; //@line 6150
                 $227 = HEAPU8[$219 >> 0] | 0; //@line 6153
                } else {
                 $227 = ___shgetc($0) | 0; //@line 6156
                }
                if (!(HEAP8[$4 + ($227 + 1) >> 0] | 0)) {
                 $$4282 = $$2280; //@line 6163
                 $$4309 = $$2307$ph; //@line 6163
                 $$5299 = 0; //@line 6163
                 $322 = 0; //@line 6163
                 break L78;
                }
                HEAP8[$$2307$ph + $$2280 >> 0] = $227; //@line 6169
                $$2280 = $$2280 + 1 | 0; //@line 6167
               } while (($$2280 | 0) != ($$1277$ph | 0));
               $235 = $$1277$ph << 1 | 1; //@line 6178
               $236 = _realloc($$2307$ph, $235) | 0; //@line 6179
               if (!$236) {
                $$7312 = $$2307$ph; //@line 6182
                $319 = 0; //@line 6182
                label = 136; //@line 6183
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph; //@line 6186
                $$1277$ph = $235; //@line 6186
                $$2307$ph = $236; //@line 6186
                $$2280$ph = $$2280$ph$phi; //@line 6186
               }
              }
             }
             if (!$$0293) {
              while (1) {
               $254 = HEAP32[$13 >> 2] | 0; //@line 6193
               if ($254 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                HEAP32[$13 >> 2] = $254 + 1; //@line 6198
                $262 = HEAPU8[$254 >> 0] | 0; //@line 6201
               } else {
                $262 = ___shgetc($0) | 0; //@line 6204
               }
               if (!(HEAP8[$4 + ($262 + 1) >> 0] | 0)) {
                $$4282 = 0; //@line 6211
                $$4309 = 0; //@line 6211
                $$5299 = 0; //@line 6211
                $322 = 0; //@line 6211
                break L78;
               }
              }
             } else {
              $$3281 = 0; //@line 6216
             }
             while (1) {
              $239 = HEAP32[$13 >> 2] | 0; //@line 6219
              if ($239 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
               HEAP32[$13 >> 2] = $239 + 1; //@line 6224
               $247 = HEAPU8[$239 >> 0] | 0; //@line 6227
              } else {
               $247 = ___shgetc($0) | 0; //@line 6230
              }
              if (!(HEAP8[$4 + ($247 + 1) >> 0] | 0)) {
               $$4282 = $$3281; //@line 6237
               $$4309 = $$0293; //@line 6237
               $$5299 = 0; //@line 6237
               $322 = 0; //@line 6237
               break L78;
              }
              HEAP8[$$0293 + $$3281 >> 0] = $247; //@line 6243
              $$3281 = $$3281 + 1 | 0; //@line 6244
             }
            }
           } while (0);
           if (!(HEAP32[$14 >> 2] | 0)) {
            $274 = HEAP32[$13 >> 2] | 0; //@line 6252
           } else {
            $269 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6255
            HEAP32[$13 >> 2] = $269; //@line 6256
            $274 = $269; //@line 6258
           }
           $275 = $274 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0; //@line 6263
           if (!$275) {
            $$2 = $$0270; //@line 6266
            $$2290 = $$0288404; //@line 6266
            $$9314 = $$4309; //@line 6266
            $312 = $322; //@line 6266
            break L6;
           }
           if (!(($275 | 0) == ($$1267 | 0) | $158 ^ 1)) {
            $$2 = $$0270; //@line 6273
            $$2290 = $$0288404; //@line 6273
            $$9314 = $$4309; //@line 6273
            $312 = $322; //@line 6273
            break L6;
           }
           do {
            if ($188) {
             if ($187) {
              HEAP32[$$0293 >> 2] = $$5299; //@line 6279
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309; //@line 6282
              break;
             }
            }
           } while (0);
           if ($158) {
            $$10 = $$9; //@line 6288
            $$5310 = $$4309; //@line 6288
            $320 = $322; //@line 6288
           } else {
            if ($$5299 | 0) {
             HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0; //@line 6293
            }
            if (!$$4309) {
             $$10 = $$9; //@line 6297
             $$5310 = 0; //@line 6297
             $320 = $322; //@line 6297
             break L58;
            }
            HEAP8[$$4309 + $$4282 >> 0] = 0; //@line 6301
            $$10 = $$9; //@line 6302
            $$5310 = $$4309; //@line 6302
            $320 = $322; //@line 6302
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16; //@line 6307
           label = 124; //@line 6308
           break;
          }
         case 111:
          {
           $$0272 = 8; //@line 6312
           label = 124; //@line 6313
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10; //@line 6317
           label = 124; //@line 6318
           break;
          }
         case 105:
          {
           $$0272 = 0; //@line 6322
           label = 124; //@line 6323
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $292 = +___floatscan($0, $$$0268, 0); //@line 6327
           if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
            $$2 = $$0270; //@line 6334
            $$2290 = $$0288404; //@line 6334
            $$9314 = $$1306; //@line 6334
            $312 = $318; //@line 6334
            break L6;
           }
           if (!$$0293) {
            $$10 = $$5; //@line 6339
            $$5310 = $$1306; //@line 6339
            $320 = $318; //@line 6339
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              HEAPF32[$$0293 >> 2] = $292; //@line 6344
              $$10 = $$5; //@line 6345
              $$5310 = $$1306; //@line 6345
              $320 = $318; //@line 6345
              break L58;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6350
              $$10 = $$5; //@line 6351
              $$5310 = $$1306; //@line 6351
              $320 = $318; //@line 6351
              break L58;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6356
              $$10 = $$5; //@line 6357
              $$5310 = $$1306; //@line 6357
              $320 = $318; //@line 6357
              break L58;
              break;
             }
            default:
             {
              $$10 = $$5; //@line 6362
              $$5310 = $$1306; //@line 6362
              $320 = $318; //@line 6362
              break L58;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5; //@line 6370
           $$5310 = $$1306; //@line 6370
           $320 = $318; //@line 6370
          }
         }
        } while (0);
        do {
         if ((label | 0) == 124) {
          label = 0; //@line 6376
          $282 = ___intscan($0, $$0272, 0, -1, -1) | 0; //@line 6377
          if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
           $$2 = $$0270; //@line 6385
           $$2290 = $$0288404; //@line 6385
           $$9314 = $$1306; //@line 6385
           $312 = $318; //@line 6385
           break L6;
          }
          if (($$0293 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$$0293 >> 2] = $282; //@line 6393
           $$10 = $$5; //@line 6394
           $$5310 = $$1306; //@line 6394
           $320 = $318; //@line 6394
           break;
          } else {
           _store_int_728($$0293, $$$0268, $282, tempRet0); //@line 6397
           $$10 = $$5; //@line 6398
           $$5310 = $$1306; //@line 6398
           $320 = $318; //@line 6398
           break;
          }
         }
        } while (0);
        $$11 = $$10; //@line 6412
        $$1289 = $$0288404 + (($$0293 | 0) != 0 & 1) | 0; //@line 6412
        $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0; //@line 6412
        $$6311 = $$5310; //@line 6412
        $316 = $320; //@line 6412
        break L8;
       }
      } while (0);
      $54 = $$0273408 + ($50 & 1) | 0; //@line 6417
      ___shlim($0, 0); //@line 6418
      $55 = HEAP32[$13 >> 2] | 0; //@line 6419
      if ($55 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
       HEAP32[$13 >> 2] = $55 + 1; //@line 6424
       $65 = HEAPU8[$55 >> 0] | 0; //@line 6427
      } else {
       $65 = ___shgetc($0) | 0; //@line 6430
      }
      if (($65 | 0) != (HEAPU8[$54 >> 0] | 0)) {
       label = 22; //@line 6436
       break L6;
      }
      $$11 = $54; //@line 6440
      $$1289 = $$0288404; //@line 6440
      $$2285 = $$0283407 + 1 | 0; //@line 6440
      $$6311 = $$0305402; //@line 6440
      $316 = $315; //@line 6440
     } else {
      $$1274 = $$0273408; //@line 6442
      while (1) {
       $23 = $$1274 + 1 | 0; //@line 6444
       if (!(_isspace(HEAPU8[$23 >> 0] | 0) | 0)) {
        break;
       } else {
        $$1274 = $23; //@line 6452
       }
      }
      ___shlim($0, 0); //@line 6455
      do {
       $28 = HEAP32[$13 >> 2] | 0; //@line 6457
       if ($28 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
        HEAP32[$13 >> 2] = $28 + 1; //@line 6462
        $35 = HEAPU8[$28 >> 0] | 0; //@line 6465
       } else {
        $35 = ___shgetc($0) | 0; //@line 6468
       }
      } while ((_isspace($35) | 0) != 0);
      if (!(HEAP32[$14 >> 2] | 0)) {
       $47 = HEAP32[$13 >> 2] | 0; //@line 6480
      } else {
       $41 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6483
       HEAP32[$13 >> 2] = $41; //@line 6484
       $47 = $41; //@line 6486
      }
      $$11 = $$1274; //@line 6493
      $$1289 = $$0288404; //@line 6493
      $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $47 - (HEAP32[$16 >> 2] | 0) | 0; //@line 6493
      $$6311 = $$0305402; //@line 6493
      $316 = $315; //@line 6493
     }
    } while (0);
    $$0273408 = $$11 + 1 | 0; //@line 6496
    $20 = HEAP8[$$0273408 >> 0] | 0; //@line 6497
    if (!($20 << 24 >> 24)) {
     $$3291 = $$1289; //@line 6500
     break L4;
    } else {
     $$0283407 = $$2285; //@line 6503
     $$0288404 = $$1289; //@line 6503
     $$0305402 = $$6311; //@line 6503
     $315 = $316; //@line 6503
    }
   }
   if ((label | 0) == 22) {
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 6512
    }
    if (($$0288404 | 0) != 0 | ($65 | 0) > -1) {
     $$3291 = $$0288404; //@line 6518
     break;
    } else {
     $$1271 = 0; //@line 6521
     $$8313 = $$0305402; //@line 6521
     $317 = $315; //@line 6521
     label = 137; //@line 6522
    }
   } else if ((label | 0) == 136) {
    if (!$$0288404) {
     $$1271 = $$0270; //@line 6528
     $$8313 = $$7312; //@line 6528
     $317 = $319; //@line 6528
     label = 137; //@line 6529
    } else {
     $$2 = $$0270; //@line 6531
     $$2290 = $$0288404; //@line 6531
     $$9314 = $$7312; //@line 6531
     $312 = $319; //@line 6531
    }
   }
   if ((label | 0) == 137) {
    $$2 = $$1271; //@line 6535
    $$2290 = -1; //@line 6535
    $$9314 = $$8313; //@line 6535
    $312 = $317; //@line 6535
   }
   if (!$$2) {
    $$3291 = $$2290; //@line 6539
   } else {
    _free($$9314); //@line 6541
    _free($312); //@line 6542
    $$3291 = $$2290; //@line 6543
   }
  }
 } while (0);
 if ($314 | 0) {
  ___unlockfile($0); //@line 6549
 }
 STACKTOP = sp; //@line 6551
 return $$3291 | 0; //@line 6551
}
function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $134 = 0, $136 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $289 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8368
 STACKTOP = STACKTOP + 512 | 0; //@line 8369
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 8369
 $6 = sp; //@line 8370
 $sum = $3 + $2 | 0; //@line 8371
 $7 = 0 - $sum | 0; //@line 8372
 $8 = $0 + 4 | 0; //@line 8373
 $9 = $0 + 100 | 0; //@line 8374
 $$0329 = $1; //@line 8375
 $$0396 = 0; //@line 8375
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6; //@line 8379
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0; //@line 8387
    $$2 = $$0329; //@line 8387
    $$2398 = $$0396; //@line 8387
    $368 = 0; //@line 8387
    $369 = 0; //@line 8387
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0; //@line 8391
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1; //@line 8396
   $$0329 = HEAPU8[$10 >> 0] | 0; //@line 8399
   $$0396 = 1; //@line 8399
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0; //@line 8403
   $$0396 = 1; //@line 8403
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 8408
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1; //@line 8413
   $$1330$ph = HEAPU8[$17 >> 0] | 0; //@line 8416
  } else {
   $$1330$ph = ___shgetc($0) | 0; //@line 8419
  }
  if (($$1330$ph | 0) == 48) {
   $25 = 0; //@line 8423
   $26 = 0; //@line 8423
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0; //@line 8425
    $28 = tempRet0; //@line 8426
    $29 = HEAP32[$8 >> 2] | 0; //@line 8427
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1; //@line 8432
     $$1330$be = HEAPU8[$29 >> 0] | 0; //@line 8435
    } else {
     $$1330$be = ___shgetc($0) | 0; //@line 8438
    }
    if (($$1330$be | 0) == 48) {
     $25 = $27; //@line 8442
     $26 = $28; //@line 8442
    } else {
     $$0393 = 1; //@line 8444
     $$2 = $$1330$be; //@line 8444
     $$2398 = 1; //@line 8444
     $368 = $27; //@line 8444
     $369 = $28; //@line 8444
     break;
    }
   }
  } else {
   $$0393 = 1; //@line 8449
   $$2 = $$1330$ph; //@line 8449
   $$2398 = $$0396; //@line 8449
   $368 = 0; //@line 8449
   $369 = 0; //@line 8449
  }
 }
 HEAP32[$6 >> 2] = 0; //@line 8452
 $37 = $$2 + -48 | 0; //@line 8453
 $39 = ($$2 | 0) == 46; //@line 8455
 L20 : do {
  if ($39 | $37 >>> 0 < 10) {
   $41 = $6 + 496 | 0; //@line 8459
   $$0341511 = 0; //@line 8460
   $$0345510 = 0; //@line 8460
   $$0401507 = 0; //@line 8460
   $$1394509 = $$0393; //@line 8460
   $$3399508 = $$2398; //@line 8460
   $$3512 = $$2; //@line 8460
   $370 = $39; //@line 8460
   $371 = $37; //@line 8460
   $372 = $368; //@line 8460
   $373 = $369; //@line 8460
   $44 = 0; //@line 8460
   $45 = 0; //@line 8460
   L22 : while (1) {
    do {
     if ($370) {
      if (!$$1394509) {
       $$2343 = $$0341511; //@line 8466
       $$2347 = $$0345510; //@line 8466
       $$2395 = 1; //@line 8466
       $$2403 = $$0401507; //@line 8466
       $$4400 = $$3399508; //@line 8466
       $374 = $44; //@line 8466
       $375 = $45; //@line 8466
       $376 = $44; //@line 8466
       $377 = $45; //@line 8466
      } else {
       break L22;
      }
     } else {
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0; //@line 8472
      $47 = tempRet0; //@line 8473
      $48 = ($$3512 | 0) != 48; //@line 8474
      if (($$0345510 | 0) >= 125) {
       if (!$48) {
        $$2343 = $$0341511; //@line 8477
        $$2347 = $$0345510; //@line 8477
        $$2395 = $$1394509; //@line 8477
        $$2403 = $$0401507; //@line 8477
        $$4400 = $$3399508; //@line 8477
        $374 = $372; //@line 8477
        $375 = $373; //@line 8477
        $376 = $46; //@line 8477
        $377 = $47; //@line 8477
        break;
       }
       HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1; //@line 8482
       $$2343 = $$0341511; //@line 8483
       $$2347 = $$0345510; //@line 8483
       $$2395 = $$1394509; //@line 8483
       $$2403 = $$0401507; //@line 8483
       $$4400 = $$3399508; //@line 8483
       $374 = $372; //@line 8483
       $375 = $373; //@line 8483
       $376 = $46; //@line 8483
       $377 = $47; //@line 8483
       break;
      }
      $$pre551 = $6 + ($$0345510 << 2) | 0; //@line 8488
      if (!$$0341511) {
       $$sink = $371; //@line 8490
      } else {
       $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0; //@line 8496
      }
      HEAP32[$$pre551 >> 2] = $$sink; //@line 8498
      $54 = $$0341511 + 1 | 0; //@line 8499
      $55 = ($54 | 0) == 9; //@line 8500
      $$2343 = $55 ? 0 : $54; //@line 8504
      $$2347 = $$0345510 + ($55 & 1) | 0; //@line 8504
      $$2395 = $$1394509; //@line 8504
      $$2403 = $48 ? $46 : $$0401507; //@line 8504
      $$4400 = 1; //@line 8504
      $374 = $372; //@line 8504
      $375 = $373; //@line 8504
      $376 = $46; //@line 8504
      $377 = $47; //@line 8504
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0; //@line 8507
    if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $59 + 1; //@line 8512
     $$3$be = HEAPU8[$59 >> 0] | 0; //@line 8515
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 8518
    }
    $371 = $$3$be + -48 | 0; //@line 8520
    $370 = ($$3$be | 0) == 46; //@line 8522
    if (!($370 | $371 >>> 0 < 10)) {
     $$0341$lcssa = $$2343; //@line 8527
     $$0345$lcssa = $$2347; //@line 8527
     $$0401$lcssa = $$2403; //@line 8527
     $$1394$lcssa = $$2395; //@line 8527
     $$3$lcssa = $$3$be; //@line 8527
     $$3399$lcssa = $$4400; //@line 8527
     $72 = $376; //@line 8527
     $73 = $374; //@line 8527
     $75 = $377; //@line 8527
     $76 = $375; //@line 8527
     label = 29; //@line 8528
     break L20;
    } else {
     $$0341511 = $$2343; //@line 8525
     $$0345510 = $$2347; //@line 8525
     $$0401507 = $$2403; //@line 8525
     $$1394509 = $$2395; //@line 8525
     $$3399508 = $$4400; //@line 8525
     $$3512 = $$3$be; //@line 8525
     $372 = $374; //@line 8525
     $373 = $375; //@line 8525
     $44 = $376; //@line 8525
     $45 = $377; //@line 8525
    }
   }
   $$0341463 = $$0341511; //@line 8533
   $$0345467 = $$0345510; //@line 8533
   $$0401473 = $$0401507; //@line 8533
   $378 = $44; //@line 8533
   $379 = $45; //@line 8533
   $380 = $372; //@line 8533
   $381 = $373; //@line 8533
   $382 = ($$3399508 | 0) != 0; //@line 8533
   label = 37; //@line 8534
  } else {
   $$0341$lcssa = 0; //@line 8536
   $$0345$lcssa = 0; //@line 8536
   $$0401$lcssa = 0; //@line 8536
   $$1394$lcssa = $$0393; //@line 8536
   $$3$lcssa = $$2; //@line 8536
   $$3399$lcssa = $$2398; //@line 8536
   $72 = 0; //@line 8536
   $73 = $368; //@line 8536
   $75 = 0; //@line 8536
   $76 = $369; //@line 8536
   label = 29; //@line 8537
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0; //@line 8542
   $71 = $70 ? $72 : $73; //@line 8543
   $74 = $70 ? $75 : $76; //@line 8544
   $77 = ($$3399$lcssa | 0) != 0; //@line 8545
   if (!($77 & ($$3$lcssa | 32 | 0) == 101)) {
    if (($$3$lcssa | 0) > -1) {
     $$0341463 = $$0341$lcssa; //@line 8552
     $$0345467 = $$0345$lcssa; //@line 8552
     $$0401473 = $$0401$lcssa; //@line 8552
     $378 = $72; //@line 8552
     $379 = $75; //@line 8552
     $380 = $71; //@line 8552
     $381 = $74; //@line 8552
     $382 = $77; //@line 8552
     label = 37; //@line 8553
     break;
    } else {
     $$0341462 = $$0341$lcssa; //@line 8556
     $$0345466 = $$0345$lcssa; //@line 8556
     $$0401472 = $$0401$lcssa; //@line 8556
     $383 = $72; //@line 8556
     $384 = $75; //@line 8556
     $385 = $77; //@line 8556
     $386 = $71; //@line 8556
     $387 = $74; //@line 8556
     label = 39; //@line 8557
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0; //@line 8561
   $81 = tempRet0; //@line 8562
   if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
    if (!$5) {
     ___shlim($0, 0); //@line 8569
     $$1 = 0.0; //@line 8570
     break;
    }
    if (!(HEAP32[$9 >> 2] | 0)) {
     $90 = 0; //@line 8576
     $91 = 0; //@line 8576
    } else {
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8580
     $90 = 0; //@line 8581
     $91 = 0; //@line 8581
    }
   } else {
    $90 = $80; //@line 8584
    $91 = $81; //@line 8584
   }
   $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0; //@line 8586
   $$0341461 = $$0341$lcssa; //@line 8588
   $$0345465 = $$0345$lcssa; //@line 8588
   $$0401471 = $$0401$lcssa; //@line 8588
   $105 = $92; //@line 8588
   $106 = $72; //@line 8588
   $108 = tempRet0; //@line 8588
   $109 = $75; //@line 8588
   label = 41; //@line 8589
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!(HEAP32[$9 >> 2] | 0)) {
   $$0341462 = $$0341463; //@line 8596
   $$0345466 = $$0345467; //@line 8596
   $$0401472 = $$0401473; //@line 8596
   $383 = $378; //@line 8596
   $384 = $379; //@line 8596
   $385 = $382; //@line 8596
   $386 = $380; //@line 8596
   $387 = $381; //@line 8596
   label = 39; //@line 8597
  } else {
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8601
   if ($382) {
    $$0341461 = $$0341463; //@line 8603
    $$0345465 = $$0345467; //@line 8603
    $$0401471 = $$0401473; //@line 8603
    $105 = $380; //@line 8603
    $106 = $378; //@line 8603
    $108 = $381; //@line 8603
    $109 = $379; //@line 8603
    label = 41; //@line 8604
   } else {
    label = 40; //@line 8606
   }
  }
 }
 if ((label | 0) == 39) {
  if ($385) {
   $$0341461 = $$0341462; //@line 8612
   $$0345465 = $$0345466; //@line 8612
   $$0401471 = $$0401472; //@line 8612
   $105 = $386; //@line 8612
   $106 = $383; //@line 8612
   $108 = $387; //@line 8612
   $109 = $384; //@line 8612
   label = 41; //@line 8613
  } else {
   label = 40; //@line 8615
  }
 }
 do {
  if ((label | 0) == 40) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 8621
   ___shlim($0, 0); //@line 8622
   $$1 = 0.0; //@line 8623
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0; //@line 8626
   if (!$100) {
    $$1 = +($4 | 0) * 0.0; //@line 8631
    break;
   }
   if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) {
    if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
     $$1 = +($4 | 0) * +($100 >>> 0); //@line 8652
     break;
    }
   }
   $122 = ($3 | 0) / -2 | 0; //@line 8656
   $124 = (($122 | 0) < 0) << 31 >> 31; //@line 8658
   if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8666
    $$1 = +($4 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8670
    break;
   }
   $134 = $3 + -106 | 0; //@line 8673
   $136 = (($134 | 0) < 0) << 31 >> 31; //@line 8675
   if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8683
    $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8687
    break;
   }
   if (!$$0341461) {
    $$3348 = $$0345465; //@line 8692
   } else {
    if (($$0341461 | 0) < 9) {
     $148 = $6 + ($$0345465 << 2) | 0; //@line 8696
     $$3344501 = $$0341461; //@line 8698
     $150 = HEAP32[$148 >> 2] | 0; //@line 8698
     while (1) {
      $150 = $150 * 10 | 0; //@line 8700
      if (($$3344501 | 0) >= 8) {
       break;
      } else {
       $$3344501 = $$3344501 + 1 | 0; //@line 8704
      }
     }
     HEAP32[$148 >> 2] = $150; //@line 8709
    }
    $$3348 = $$0345465 + 1 | 0; //@line 8712
   }
   if (($$0401471 | 0) < 9) {
    if (($$0401471 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
     if (($105 | 0) == 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0); //@line 8726
      break;
     }
     if (($105 | 0) < 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[2356 + (8 - $105 << 2) >> 2] | 0); //@line 8740
      break;
     }
     $172 = $2 + 27 + (Math_imul($105, -3) | 0) | 0; //@line 8745
     $$pre = HEAP32[$6 >> 2] | 0; //@line 8747
     if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
      $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[2356 + ($105 + -10 << 2) >> 2] | 0); //@line 8760
      break;
     }
    }
   }
   $184 = ($105 | 0) % 9 | 0; //@line 8765
   if (!$184) {
    $$0380$ph = 0; //@line 8768
    $$1373$ph446 = $$3348; //@line 8768
    $$2352$ph447 = 0; //@line 8768
    $$2387$ph445 = $105; //@line 8768
   } else {
    $188 = ($105 | 0) > -1 ? $184 : $184 + 9 | 0; //@line 8772
    $191 = HEAP32[2356 + (8 - $188 << 2) >> 2] | 0; //@line 8775
    if (!$$3348) {
     $$0350$lcssa553 = 0; //@line 8778
     $$0372 = 0; //@line 8778
     $$0385$lcssa552 = $105; //@line 8778
    } else {
     $193 = 1e9 / ($191 | 0) | 0; //@line 8780
     $$0340494 = 0; //@line 8781
     $$0350492 = 0; //@line 8781
     $$0385491 = $105; //@line 8781
     $$4349493 = 0; //@line 8781
     do {
      $194 = $6 + ($$4349493 << 2) | 0; //@line 8783
      $195 = HEAP32[$194 >> 2] | 0; //@line 8784
      $198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0; //@line 8787
      HEAP32[$194 >> 2] = $198; //@line 8788
      $$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0; //@line 8789
      $or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0; //@line 8792
      $$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491; //@line 8796
      $$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492; //@line 8797
      $$4349493 = $$4349493 + 1 | 0; //@line 8798
     } while (($$4349493 | 0) != ($$3348 | 0));
     if (!$$0340494) {
      $$0350$lcssa553 = $$0350492; //@line 8808
      $$0372 = $$3348; //@line 8808
      $$0385$lcssa552 = $$0385491; //@line 8808
     } else {
      HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494; //@line 8812
      $$0350$lcssa553 = $$0350492; //@line 8813
      $$0372 = $$3348 + 1 | 0; //@line 8813
      $$0385$lcssa552 = $$0385491; //@line 8813
     }
    }
    $$0380$ph = 0; //@line 8818
    $$1373$ph446 = $$0372; //@line 8818
    $$2352$ph447 = $$0350$lcssa553; //@line 8818
    $$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0; //@line 8818
   }
   L101 : while (1) {
    $212 = ($$2387$ph445 | 0) < 18; //@line 8821
    $213 = ($$2387$ph445 | 0) == 18; //@line 8822
    $214 = $6 + ($$2352$ph447 << 2) | 0; //@line 8823
    $$0380 = $$0380$ph; //@line 8824
    $$1373 = $$1373$ph446; //@line 8824
    while (1) {
     if (!$212) {
      if (!$213) {
       $$1381$ph = $$0380; //@line 8828
       $$4354$ph = $$2352$ph447; //@line 8828
       $$4389$ph443 = $$2387$ph445; //@line 8828
       $$6378$ph = $$1373; //@line 8828
       break L101;
      }
      if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
       $$1381$ph = $$0380; //@line 8834
       $$4354$ph = $$2352$ph447; //@line 8834
       $$4389$ph443 = 18; //@line 8834
       $$6378$ph = $$1373; //@line 8834
       break L101;
      }
     }
     $$0334 = 0; //@line 8839
     $$2374 = $$1373; //@line 8839
     $$5$in = $$1373 + 127 | 0; //@line 8839
     while (1) {
      $$5 = $$5$in & 127; //@line 8841
      $218 = $6 + ($$5 << 2) | 0; //@line 8842
      $220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0; //@line 8844
      $222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0; //@line 8846
      $223 = tempRet0; //@line 8847
      if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
       $229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8854
       $231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8856
       $$1335 = $229; //@line 8858
       $$sink419$off0 = $231; //@line 8858
      } else {
       $$1335 = 0; //@line 8860
       $$sink419$off0 = $222; //@line 8860
      }
      HEAP32[$218 >> 2] = $$sink419$off0; //@line 8862
      $236 = ($$5 | 0) == ($$2352$ph447 | 0); //@line 8866
      $$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374; //@line 8871
      if ($236) {
       break;
      } else {
       $$0334 = $$1335; //@line 8876
       $$5$in = $$5 + -1 | 0; //@line 8876
      }
     }
     $$0380 = $$0380 + -29 | 0; //@line 8879
     if ($$1335 | 0) {
      break;
     } else {
      $$1373 = $$2374; //@line 8882
     }
    }
    $243 = $$2352$ph447 + 127 & 127; //@line 8889
    $246 = $$2374 + 127 & 127; //@line 8892
    $249 = $6 + (($$2374 + 126 & 127) << 2) | 0; //@line 8895
    if (($243 | 0) == ($$2374 | 0)) {
     HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2]; //@line 8901
     $$4376 = $246; //@line 8902
    } else {
     $$4376 = $$2374; //@line 8904
    }
    HEAP32[$6 + ($243 << 2) >> 2] = $$1335; //@line 8907
    $$0380$ph = $$0380; //@line 8908
    $$1373$ph446 = $$4376; //@line 8908
    $$2352$ph447 = $243; //@line 8908
    $$2387$ph445 = $$2387$ph445 + 9 | 0; //@line 8908
   }
   L119 : while (1) {
    $289 = $$6378$ph + 1 & 127; //@line 8912
    $294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0; //@line 8915
    $$1381$ph557 = $$1381$ph; //@line 8916
    $$4354$ph558 = $$4354$ph; //@line 8916
    $$4389$ph = $$4389$ph443; //@line 8916
    while (1) {
     $267 = ($$4389$ph | 0) == 18; //@line 8918
     $$423 = ($$4389$ph | 0) > 27 ? 9 : 1; //@line 8920
     $$1381 = $$1381$ph557; //@line 8921
     $$4354 = $$4354$ph558; //@line 8921
     while (1) {
      $$0336484 = 0; //@line 8923
      while (1) {
       $256 = $$0336484 + $$4354 & 127; //@line 8926
       if (($256 | 0) == ($$6378$ph | 0)) {
        $$1337 = 2; //@line 8929
        label = 88; //@line 8930
        break;
       }
       $259 = HEAP32[$6 + ($256 << 2) >> 2] | 0; //@line 8934
       $261 = HEAP32[2388 + ($$0336484 << 2) >> 2] | 0; //@line 8936
       if ($259 >>> 0 < $261 >>> 0) {
        $$1337 = 2; //@line 8939
        label = 88; //@line 8940
        break;
       }
       if ($259 >>> 0 > $261 >>> 0) {
        break;
       }
       $264 = $$0336484 + 1 | 0; //@line 8947
       if (($$0336484 | 0) < 1) {
        $$0336484 = $264; //@line 8950
       } else {
        $$1337 = $264; //@line 8952
        label = 88; //@line 8953
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0; //@line 8958
       if ($267 & ($$1337 | 0) == 2) {
        $$0365482 = 0.0; //@line 8962
        $$4483 = 0; //@line 8962
        $$9481 = $$6378$ph; //@line 8962
        break L119;
       }
      }
      $268 = $$423 + $$1381 | 0; //@line 8966
      if (($$4354 | 0) == ($$6378$ph | 0)) {
       $$1381 = $268; //@line 8969
       $$4354 = $$6378$ph; //@line 8969
      } else {
       break;
      }
     }
     $271 = (1 << $$423) + -1 | 0; //@line 8975
     $272 = 1e9 >>> $$423; //@line 8976
     $$0332488 = 0; //@line 8977
     $$5355486 = $$4354; //@line 8977
     $$5390485 = $$4389$ph; //@line 8977
     $$6487 = $$4354; //@line 8977
     do {
      $273 = $6 + ($$6487 << 2) | 0; //@line 8979
      $274 = HEAP32[$273 >> 2] | 0; //@line 8980
      $277 = ($274 >>> $$423) + $$0332488 | 0; //@line 8983
      HEAP32[$273 >> 2] = $277; //@line 8984
      $$0332488 = Math_imul($274 & $271, $272) | 0; //@line 8985
      $or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0; //@line 8988
      $$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485; //@line 8992
      $$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486; //@line 8993
      $$6487 = $$6487 + 1 & 127; //@line 8995
     } while (($$6487 | 0) != ($$6378$ph | 0));
     if (!$$0332488) {
      $$1381$ph557 = $268; //@line 9005
      $$4354$ph558 = $$5355486; //@line 9005
      $$4389$ph = $$5390485; //@line 9005
      continue;
     }
     if (($289 | 0) != ($$5355486 | 0)) {
      break;
     }
     HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1; //@line 9014
     $$1381$ph557 = $268; //@line 9015
     $$4354$ph558 = $$5355486; //@line 9015
     $$4389$ph = $$5390485; //@line 9015
    }
    HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488; //@line 9018
    $$1381$ph = $268; //@line 9019
    $$4354$ph = $$5355486; //@line 9019
    $$4389$ph443 = $$5390485; //@line 9019
    $$6378$ph = $289; //@line 9019
   }
   while (1) {
    $299 = $$4483 + $$4354 & 127; //@line 9023
    $302 = $$9481 + 1 & 127; //@line 9026
    if (($299 | 0) == ($$9481 | 0)) {
     HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0; //@line 9030
     $$10 = $302; //@line 9031
    } else {
     $$10 = $$9481; //@line 9033
    }
    $$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0); //@line 9039
    $$4483 = $$4483 + 1 | 0; //@line 9040
    if (($$4483 | 0) == 2) {
     break;
    } else {
     $$9481 = $$10; //@line 9045
    }
   }
   $311 = +($4 | 0); //@line 9048
   $312 = $$0365482 * $311; //@line 9049
   $313 = $$1381 + 53 | 0; //@line 9050
   $314 = $313 - $3 | 0; //@line 9051
   $315 = ($314 | 0) < ($2 | 0); //@line 9052
   $$0333 = $315 ? ($314 | 0) > 0 ? $314 : 0 : $2; //@line 9055
   if (($$0333 | 0) < 53) {
    $320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312); //@line 9060
    $323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0)); //@line 9063
    $$0360 = $320; //@line 9066
    $$0361 = $323; //@line 9066
    $$1366 = $320 + ($312 - $323); //@line 9066
   } else {
    $$0360 = 0.0; //@line 9068
    $$0361 = 0.0; //@line 9068
    $$1366 = $312; //@line 9068
   }
   $327 = $$4354 + 2 & 127; //@line 9071
   if (($327 | 0) == ($$10 | 0)) {
    $$3364 = $$0361; //@line 9074
   } else {
    $330 = HEAP32[$6 + ($327 << 2) >> 2] | 0; //@line 9077
    do {
     if ($330 >>> 0 < 5e8) {
      if (!$330) {
       if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
        $$1362 = $$0361; //@line 9087
        break;
       }
      }
      $$1362 = $311 * .25 + $$0361; //@line 9093
     } else {
      if (($330 | 0) != 5e8) {
       $$1362 = $311 * .75 + $$0361; //@line 9099
       break;
      }
      if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
       $$1362 = $311 * .5 + $$0361; //@line 9108
       break;
      } else {
       $$1362 = $311 * .75 + $$0361; //@line 9113
       break;
      }
     }
    } while (0);
    if ((53 - $$0333 | 0) > 1) {
     if (+_fmodl($$1362, 1.0) != 0.0) {
      $$3364 = $$1362; //@line 9124
     } else {
      $$3364 = $$1362 + 1.0; //@line 9127
     }
    } else {
     $$3364 = $$1362; //@line 9130
    }
   }
   $354 = $$1366 + $$3364 - $$0360; //@line 9134
   do {
    if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
     $359 = !(+Math_abs(+$354) >= 9007199254740992.0); //@line 9141
     $$3383 = $$1381 + (($359 ^ 1) & 1) | 0; //@line 9145
     $$2367 = $359 ? $354 : $354 * .5; //@line 9146
     if (($$3383 + 50 | 0) <= ($7 | 0)) {
      if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
       $$3368 = $$2367; //@line 9156
       $$4384 = $$3383; //@line 9156
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 9161
     $$3368 = $$2367; //@line 9162
     $$4384 = $$3383; //@line 9162
    } else {
     $$3368 = $354; //@line 9164
     $$4384 = $$1381; //@line 9164
    }
   } while (0);
   $$1 = +_scalbnl($$3368, $$4384); //@line 9168
  }
 } while (0);
 STACKTOP = sp; //@line 9171
 return +$$1;
}
function __ZL29nsapi_dns_query_async_timeoutv() {
 var $$02972 = 0, $$03071 = 0, $$131 = 0, $$sroa_idx5$i$i = 0, $$sroa_idx5$i$i43 = 0, $0 = 0, $1 = 0, $10 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $13 = 0, $136 = 0, $139 = 0, $14 = 0, $165 = 0, $168 = 0, $19 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $200 = 0, $201 = 0, $205 = 0, $232 = 0, $233 = 0, $234 = 0, $260 = 0, $263 = 0, $289 = 0, $292 = 0, $3 = 0, $322 = 0, $323 = 0, $327 = 0, $331 = 0, $332 = 0, $334 = 0, $338 = 0, $343 = 0, $346 = 0, $349 = 0, $352 = 0, $4 = 0, $5 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8367
 STACKTOP = STACKTOP + 96 | 0; //@line 8368
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 8368
 $0 = sp + 80 | 0; //@line 8369
 $1 = sp + 64 | 0; //@line 8370
 $2 = sp + 48 | 0; //@line 8371
 $3 = sp + 32 | 0; //@line 8372
 $4 = sp + 16 | 0; //@line 8373
 $5 = sp; //@line 8374
 $6 = $2 + 12 | 0; //@line 8375
 $7 = $3 + 8 | 0; //@line 8376
 $$sroa_idx5$i$i43 = $3 + 4 | 0; //@line 8377
 $8 = $3 + 12 | 0; //@line 8378
 $9 = $0 + 12 | 0; //@line 8379
 $10 = $1 + 8 | 0; //@line 8380
 $$sroa_idx5$i$i = $1 + 4 | 0; //@line 8381
 $11 = $1 + 12 | 0; //@line 8382
 $$02972 = 0; //@line 8383
 $$03071 = 0; //@line 8383
 L1 : while (1) {
  $13 = 7844 + ($$02972 << 2) | 0; //@line 8385
  $14 = HEAP32[$13 >> 2] | 0; //@line 8386
  do {
   if (!$14) {
    $$131 = $$03071; //@line 8390
   } else {
    if ((HEAP32[$14 + 88 >> 2] | 0) == 2) {
     $19 = HEAP32[$14 >> 2] | 0; //@line 8396
     $AsyncCtx35 = _emscripten_alloc_async_context(100, sp) | 0; //@line 8397
     __ZL28nsapi_dns_query_async_deletei($19); //@line 8398
     if (___async) {
      label = 6; //@line 8401
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx35 | 0); //@line 8404
     $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 8405
     __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 8406
     if (___async) {
      label = 8; //@line 8409
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx38 | 0); //@line 8412
     $$131 = $$03071; //@line 8413
     break;
    }
    $68 = $14 + 72 | 0; //@line 8416
    $69 = HEAP32[$68 >> 2] | 0; //@line 8417
    if ($69 >>> 0 > 100) {
     HEAP32[$68 >> 2] = $69 + -100; //@line 8421
    } else {
     if ((HEAP32[$14 + 4 >> 2] | 0) == -3019) {
      HEAP32[$14 + 76 >> 2] = 0; //@line 8428
      $76 = $14 + 44 | 0; //@line 8429
      $77 = HEAP32[$76 >> 2] | 0; //@line 8430
      if (!$77) {
       $108 = 0; //@line 8433
       $110 = $14; //@line 8433
      } else {
       $81 = HEAP32[$77 + 4 >> 2] | 0; //@line 8437
       $AsyncCtx = _emscripten_alloc_async_context(108, sp) | 0; //@line 8438
       FUNCTION_TABLE_vii[$81 & 7]($0, $14 + 32 | 0); //@line 8439
       if (___async) {
        label = 15; //@line 8442
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 8445
       $108 = HEAP32[$76 >> 2] | 0; //@line 8448
       $110 = HEAP32[$13 >> 2] | 0; //@line 8448
      }
      HEAP32[$9 >> 2] = $108; //@line 8450
      $109 = HEAP32[$110 >> 2] | 0; //@line 8451
      HEAP32[$10 >> 2] = 0; //@line 8452
      HEAP32[$1 >> 2] = 188; //@line 8453
      HEAP32[$$sroa_idx5$i$i >> 2] = $109; //@line 8454
      HEAP32[$11 >> 2] = 764; //@line 8455
      $AsyncCtx47 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8456
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 8457
      if (___async) {
       label = 18; //@line 8460
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx47 | 0); //@line 8463
      $136 = HEAP32[$11 >> 2] | 0; //@line 8464
      if ($136 | 0) {
       $139 = HEAP32[$136 + 8 >> 2] | 0; //@line 8468
       $AsyncCtx3 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8469
       FUNCTION_TABLE_vi[$139 & 511]($1); //@line 8470
       if (___async) {
        label = 21; //@line 8473
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8476
      }
      $165 = HEAP32[$9 >> 2] | 0; //@line 8478
      if ($165 | 0) {
       $168 = HEAP32[$165 + 8 >> 2] | 0; //@line 8482
       $AsyncCtx7 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8483
       FUNCTION_TABLE_vi[$168 & 511]($0); //@line 8484
       if (___async) {
        label = 25; //@line 8487
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8490
      }
     }
    }
    $194 = HEAP32[$13 >> 2] | 0; //@line 8494
    $195 = $194 + 76 | 0; //@line 8495
    $196 = HEAP32[$195 >> 2] | 0; //@line 8496
    do {
     if ($196 | 0) {
      if ($196 >>> 0 > 100) {
       HEAP32[$195 >> 2] = $196 + -100; //@line 8503
       break;
      }
      HEAP32[$195 >> 2] = 0; //@line 8506
      $200 = $194 + 44 | 0; //@line 8507
      $201 = HEAP32[$200 >> 2] | 0; //@line 8508
      if (!$201) {
       $232 = 0; //@line 8511
       $234 = $194; //@line 8511
      } else {
       $205 = HEAP32[$201 + 4 >> 2] | 0; //@line 8515
       $AsyncCtx11 = _emscripten_alloc_async_context(108, sp) | 0; //@line 8516
       FUNCTION_TABLE_vii[$205 & 7]($2, $194 + 32 | 0); //@line 8517
       if (___async) {
        label = 32; //@line 8520
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8523
       $232 = HEAP32[$200 >> 2] | 0; //@line 8526
       $234 = HEAP32[$13 >> 2] | 0; //@line 8526
      }
      HEAP32[$6 >> 2] = $232; //@line 8528
      $233 = HEAP32[$234 >> 2] | 0; //@line 8529
      HEAP32[$7 >> 2] = 0; //@line 8530
      HEAP32[$3 >> 2] = 193; //@line 8531
      HEAP32[$$sroa_idx5$i$i43 >> 2] = $233; //@line 8532
      HEAP32[$8 >> 2] = 764; //@line 8533
      $AsyncCtx44 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8534
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 0, $3) | 0; //@line 8535
      if (___async) {
       label = 35; //@line 8538
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx44 | 0); //@line 8541
      $260 = HEAP32[$8 >> 2] | 0; //@line 8542
      if ($260 | 0) {
       $263 = HEAP32[$260 + 8 >> 2] | 0; //@line 8546
       $AsyncCtx15 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8547
       FUNCTION_TABLE_vi[$263 & 511]($3); //@line 8548
       if (___async) {
        label = 38; //@line 8551
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8554
      }
      $289 = HEAP32[$6 >> 2] | 0; //@line 8556
      if ($289 | 0) {
       $292 = HEAP32[$289 + 8 >> 2] | 0; //@line 8560
       $AsyncCtx19 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8561
       FUNCTION_TABLE_vi[$292 & 511]($2); //@line 8562
       if (___async) {
        label = 42; //@line 8565
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx19 | 0); //@line 8568
      }
     }
    } while (0);
    if (!$$03071) {
     $$131 = HEAP32[$13 >> 2] | 0; //@line 8575
    } else {
     $$131 = $$03071; //@line 8577
    }
   }
  } while (0);
  if (($$02972 | 0) < 4) {
   $$02972 = $$02972 + 1 | 0; //@line 8584
   $$03071 = $$131; //@line 8584
  } else {
   label = 2; //@line 8586
   break;
  }
 }
 switch (label | 0) {
 case 2:
  {
   if (!$$131) {
    HEAP8[8724] = 0; //@line 8594
    STACKTOP = sp; //@line 8595
    return;
   }
   $322 = $$131 + 44 | 0; //@line 8597
   $323 = HEAP32[$322 >> 2] | 0; //@line 8598
   do {
    if (!$323) {
     $332 = 0; //@line 8602
    } else {
     $327 = HEAP32[$323 + 4 >> 2] | 0; //@line 8606
     $AsyncCtx23 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8607
     FUNCTION_TABLE_vii[$327 & 7]($4, $$131 + 32 | 0); //@line 8608
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 197; //@line 8611
      HEAP32[$AsyncCtx23 + 4 >> 2] = $322; //@line 8613
      HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 8615
      HEAP32[$AsyncCtx23 + 12 >> 2] = $5; //@line 8617
      sp = STACKTOP; //@line 8618
      STACKTOP = sp; //@line 8619
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 8621
      $332 = HEAP32[$322 >> 2] | 0; //@line 8623
      break;
     }
    }
   } while (0);
   $331 = $4 + 12 | 0; //@line 8628
   HEAP32[$331 >> 2] = $332; //@line 8629
   $334 = $5 + 4 | 0; //@line 8631
   HEAP32[$334 >> 2] = 0; //@line 8633
   HEAP32[$334 + 4 >> 2] = 0; //@line 8636
   HEAP32[$5 >> 2] = 3; //@line 8637
   $338 = $5 + 12 | 0; //@line 8638
   HEAP32[$338 >> 2] = 752; //@line 8639
   $AsyncCtx41 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8640
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $5) | 0; //@line 8641
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 198; //@line 8644
    HEAP32[$AsyncCtx41 + 4 >> 2] = $338; //@line 8646
    HEAP32[$AsyncCtx41 + 8 >> 2] = $331; //@line 8648
    HEAP32[$AsyncCtx41 + 12 >> 2] = $5; //@line 8650
    HEAP32[$AsyncCtx41 + 16 >> 2] = $4; //@line 8652
    sp = STACKTOP; //@line 8653
    STACKTOP = sp; //@line 8654
    return;
   }
   _emscripten_free_async_context($AsyncCtx41 | 0); //@line 8656
   $343 = HEAP32[$338 >> 2] | 0; //@line 8657
   do {
    if ($343 | 0) {
     $346 = HEAP32[$343 + 8 >> 2] | 0; //@line 8662
     $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8663
     FUNCTION_TABLE_vi[$346 & 511]($5); //@line 8664
     if (___async) {
      HEAP32[$AsyncCtx27 >> 2] = 199; //@line 8667
      HEAP32[$AsyncCtx27 + 4 >> 2] = $331; //@line 8669
      HEAP32[$AsyncCtx27 + 8 >> 2] = $4; //@line 8671
      sp = STACKTOP; //@line 8672
      STACKTOP = sp; //@line 8673
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 8675
      break;
     }
    }
   } while (0);
   $349 = HEAP32[$331 >> 2] | 0; //@line 8680
   if (!$349) {
    STACKTOP = sp; //@line 8683
    return;
   }
   $352 = HEAP32[$349 + 8 >> 2] | 0; //@line 8686
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8687
   FUNCTION_TABLE_vi[$352 & 511]($4); //@line 8688
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 200; //@line 8691
    sp = STACKTOP; //@line 8692
    STACKTOP = sp; //@line 8693
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 8695
   STACKTOP = sp; //@line 8696
   return;
  }
 case 6:
  {
   HEAP32[$AsyncCtx35 >> 2] = 185; //@line 8700
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 8702
   HEAP32[$AsyncCtx35 + 8 >> 2] = $9; //@line 8704
   HEAP32[$AsyncCtx35 + 12 >> 2] = $8; //@line 8706
   HEAP32[$AsyncCtx35 + 16 >> 2] = $9; //@line 8708
   HEAP32[$AsyncCtx35 + 20 >> 2] = $10; //@line 8710
   HEAP32[$AsyncCtx35 + 24 >> 2] = $1; //@line 8712
   HEAP32[$AsyncCtx35 + 28 >> 2] = $$sroa_idx5$i$i; //@line 8714
   HEAP32[$AsyncCtx35 + 32 >> 2] = $11; //@line 8716
   HEAP32[$AsyncCtx35 + 36 >> 2] = $0; //@line 8718
   HEAP32[$AsyncCtx35 + 40 >> 2] = $1; //@line 8720
   HEAP32[$AsyncCtx35 + 44 >> 2] = $4; //@line 8722
   HEAP32[$AsyncCtx35 + 48 >> 2] = $1; //@line 8724
   HEAP32[$AsyncCtx35 + 52 >> 2] = $5; //@line 8726
   HEAP32[$AsyncCtx35 + 56 >> 2] = $2; //@line 8728
   HEAP32[$AsyncCtx35 + 60 >> 2] = $6; //@line 8730
   HEAP32[$AsyncCtx35 + 64 >> 2] = $7; //@line 8732
   HEAP32[$AsyncCtx35 + 68 >> 2] = $3; //@line 8734
   HEAP32[$AsyncCtx35 + 72 >> 2] = $$sroa_idx5$i$i43; //@line 8736
   HEAP32[$AsyncCtx35 + 76 >> 2] = $2; //@line 8738
   HEAP32[$AsyncCtx35 + 80 >> 2] = $3; //@line 8740
   HEAP32[$AsyncCtx35 + 84 >> 2] = $6; //@line 8742
   HEAP32[$AsyncCtx35 + 88 >> 2] = $3; //@line 8744
   HEAP32[$AsyncCtx35 + 92 >> 2] = $$03071; //@line 8746
   HEAP32[$AsyncCtx35 + 96 >> 2] = $$02972; //@line 8748
   sp = STACKTOP; //@line 8749
   STACKTOP = sp; //@line 8750
   return;
  }
 case 8:
  {
   HEAP32[$AsyncCtx38 >> 2] = 186; //@line 8754
   HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 8756
   HEAP32[$AsyncCtx38 + 8 >> 2] = $9; //@line 8758
   HEAP32[$AsyncCtx38 + 12 >> 2] = $8; //@line 8760
   HEAP32[$AsyncCtx38 + 16 >> 2] = $9; //@line 8762
   HEAP32[$AsyncCtx38 + 20 >> 2] = $10; //@line 8764
   HEAP32[$AsyncCtx38 + 24 >> 2] = $1; //@line 8766
   HEAP32[$AsyncCtx38 + 28 >> 2] = $$sroa_idx5$i$i; //@line 8768
   HEAP32[$AsyncCtx38 + 32 >> 2] = $11; //@line 8770
   HEAP32[$AsyncCtx38 + 36 >> 2] = $0; //@line 8772
   HEAP32[$AsyncCtx38 + 40 >> 2] = $1; //@line 8774
   HEAP32[$AsyncCtx38 + 44 >> 2] = $4; //@line 8776
   HEAP32[$AsyncCtx38 + 48 >> 2] = $1; //@line 8778
   HEAP32[$AsyncCtx38 + 52 >> 2] = $5; //@line 8780
   HEAP32[$AsyncCtx38 + 56 >> 2] = $2; //@line 8782
   HEAP32[$AsyncCtx38 + 60 >> 2] = $6; //@line 8784
   HEAP32[$AsyncCtx38 + 64 >> 2] = $7; //@line 8786
   HEAP32[$AsyncCtx38 + 68 >> 2] = $3; //@line 8788
   HEAP32[$AsyncCtx38 + 72 >> 2] = $$sroa_idx5$i$i43; //@line 8790
   HEAP32[$AsyncCtx38 + 76 >> 2] = $2; //@line 8792
   HEAP32[$AsyncCtx38 + 80 >> 2] = $3; //@line 8794
   HEAP32[$AsyncCtx38 + 84 >> 2] = $6; //@line 8796
   HEAP32[$AsyncCtx38 + 88 >> 2] = $3; //@line 8798
   HEAP32[$AsyncCtx38 + 92 >> 2] = $$03071; //@line 8800
   HEAP32[$AsyncCtx38 + 96 >> 2] = $$02972; //@line 8802
   sp = STACKTOP; //@line 8803
   STACKTOP = sp; //@line 8804
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx >> 2] = 187; //@line 8808
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 8810
   HEAP32[$AsyncCtx + 8 >> 2] = $9; //@line 8812
   HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 8814
   HEAP32[$AsyncCtx + 16 >> 2] = $9; //@line 8816
   HEAP32[$AsyncCtx + 20 >> 2] = $10; //@line 8818
   HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 8820
   HEAP32[$AsyncCtx + 28 >> 2] = $$sroa_idx5$i$i; //@line 8822
   HEAP32[$AsyncCtx + 32 >> 2] = $11; //@line 8824
   HEAP32[$AsyncCtx + 36 >> 2] = $0; //@line 8826
   HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 8828
   HEAP32[$AsyncCtx + 44 >> 2] = $4; //@line 8830
   HEAP32[$AsyncCtx + 48 >> 2] = $76; //@line 8832
   HEAP32[$AsyncCtx + 52 >> 2] = $13; //@line 8834
   HEAP32[$AsyncCtx + 56 >> 2] = $1; //@line 8836
   HEAP32[$AsyncCtx + 60 >> 2] = $5; //@line 8838
   HEAP32[$AsyncCtx + 64 >> 2] = $2; //@line 8840
   HEAP32[$AsyncCtx + 68 >> 2] = $6; //@line 8842
   HEAP32[$AsyncCtx + 72 >> 2] = $7; //@line 8844
   HEAP32[$AsyncCtx + 76 >> 2] = $3; //@line 8846
   HEAP32[$AsyncCtx + 80 >> 2] = $$sroa_idx5$i$i43; //@line 8848
   HEAP32[$AsyncCtx + 84 >> 2] = $2; //@line 8850
   HEAP32[$AsyncCtx + 88 >> 2] = $3; //@line 8852
   HEAP32[$AsyncCtx + 92 >> 2] = $6; //@line 8854
   HEAP32[$AsyncCtx + 96 >> 2] = $3; //@line 8856
   HEAP32[$AsyncCtx + 100 >> 2] = $$03071; //@line 8858
   HEAP32[$AsyncCtx + 104 >> 2] = $$02972; //@line 8860
   sp = STACKTOP; //@line 8861
   STACKTOP = sp; //@line 8862
   return;
  }
 case 18:
  {
   HEAP32[$AsyncCtx47 >> 2] = 189; //@line 8866
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 8868
   HEAP32[$AsyncCtx47 + 8 >> 2] = $9; //@line 8870
   HEAP32[$AsyncCtx47 + 12 >> 2] = $8; //@line 8872
   HEAP32[$AsyncCtx47 + 16 >> 2] = $9; //@line 8874
   HEAP32[$AsyncCtx47 + 20 >> 2] = $10; //@line 8876
   HEAP32[$AsyncCtx47 + 24 >> 2] = $1; //@line 8878
   HEAP32[$AsyncCtx47 + 28 >> 2] = $$sroa_idx5$i$i; //@line 8880
   HEAP32[$AsyncCtx47 + 32 >> 2] = $11; //@line 8882
   HEAP32[$AsyncCtx47 + 36 >> 2] = $0; //@line 8884
   HEAP32[$AsyncCtx47 + 40 >> 2] = $1; //@line 8886
   HEAP32[$AsyncCtx47 + 44 >> 2] = $4; //@line 8888
   HEAP32[$AsyncCtx47 + 48 >> 2] = $1; //@line 8890
   HEAP32[$AsyncCtx47 + 52 >> 2] = $5; //@line 8892
   HEAP32[$AsyncCtx47 + 56 >> 2] = $2; //@line 8894
   HEAP32[$AsyncCtx47 + 60 >> 2] = $6; //@line 8896
   HEAP32[$AsyncCtx47 + 64 >> 2] = $7; //@line 8898
   HEAP32[$AsyncCtx47 + 68 >> 2] = $3; //@line 8900
   HEAP32[$AsyncCtx47 + 72 >> 2] = $$sroa_idx5$i$i43; //@line 8902
   HEAP32[$AsyncCtx47 + 76 >> 2] = $2; //@line 8904
   HEAP32[$AsyncCtx47 + 80 >> 2] = $3; //@line 8906
   HEAP32[$AsyncCtx47 + 84 >> 2] = $6; //@line 8908
   HEAP32[$AsyncCtx47 + 88 >> 2] = $3; //@line 8910
   HEAP32[$AsyncCtx47 + 92 >> 2] = $13; //@line 8912
   HEAP32[$AsyncCtx47 + 96 >> 2] = $$03071; //@line 8914
   HEAP32[$AsyncCtx47 + 100 >> 2] = $$02972; //@line 8916
   sp = STACKTOP; //@line 8917
   STACKTOP = sp; //@line 8918
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx3 >> 2] = 190; //@line 8922
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 8924
   HEAP32[$AsyncCtx3 + 8 >> 2] = $9; //@line 8926
   HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 8928
   HEAP32[$AsyncCtx3 + 16 >> 2] = $9; //@line 8930
   HEAP32[$AsyncCtx3 + 20 >> 2] = $10; //@line 8932
   HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 8934
   HEAP32[$AsyncCtx3 + 28 >> 2] = $$sroa_idx5$i$i; //@line 8936
   HEAP32[$AsyncCtx3 + 32 >> 2] = $11; //@line 8938
   HEAP32[$AsyncCtx3 + 36 >> 2] = $0; //@line 8940
   HEAP32[$AsyncCtx3 + 40 >> 2] = $1; //@line 8942
   HEAP32[$AsyncCtx3 + 44 >> 2] = $4; //@line 8944
   HEAP32[$AsyncCtx3 + 48 >> 2] = $1; //@line 8946
   HEAP32[$AsyncCtx3 + 52 >> 2] = $5; //@line 8948
   HEAP32[$AsyncCtx3 + 56 >> 2] = $13; //@line 8950
   HEAP32[$AsyncCtx3 + 60 >> 2] = $2; //@line 8952
   HEAP32[$AsyncCtx3 + 64 >> 2] = $6; //@line 8954
   HEAP32[$AsyncCtx3 + 68 >> 2] = $7; //@line 8956
   HEAP32[$AsyncCtx3 + 72 >> 2] = $3; //@line 8958
   HEAP32[$AsyncCtx3 + 76 >> 2] = $$sroa_idx5$i$i43; //@line 8960
   HEAP32[$AsyncCtx3 + 80 >> 2] = $2; //@line 8962
   HEAP32[$AsyncCtx3 + 84 >> 2] = $3; //@line 8964
   HEAP32[$AsyncCtx3 + 88 >> 2] = $6; //@line 8966
   HEAP32[$AsyncCtx3 + 92 >> 2] = $3; //@line 8968
   HEAP32[$AsyncCtx3 + 96 >> 2] = $$03071; //@line 8970
   HEAP32[$AsyncCtx3 + 100 >> 2] = $$02972; //@line 8972
   sp = STACKTOP; //@line 8973
   STACKTOP = sp; //@line 8974
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx7 >> 2] = 191; //@line 8978
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 8980
   HEAP32[$AsyncCtx7 + 8 >> 2] = $9; //@line 8982
   HEAP32[$AsyncCtx7 + 12 >> 2] = $8; //@line 8984
   HEAP32[$AsyncCtx7 + 16 >> 2] = $9; //@line 8986
   HEAP32[$AsyncCtx7 + 20 >> 2] = $10; //@line 8988
   HEAP32[$AsyncCtx7 + 24 >> 2] = $1; //@line 8990
   HEAP32[$AsyncCtx7 + 28 >> 2] = $$sroa_idx5$i$i; //@line 8992
   HEAP32[$AsyncCtx7 + 32 >> 2] = $11; //@line 8994
   HEAP32[$AsyncCtx7 + 36 >> 2] = $0; //@line 8996
   HEAP32[$AsyncCtx7 + 40 >> 2] = $1; //@line 8998
   HEAP32[$AsyncCtx7 + 44 >> 2] = $4; //@line 9000
   HEAP32[$AsyncCtx7 + 48 >> 2] = $1; //@line 9002
   HEAP32[$AsyncCtx7 + 52 >> 2] = $5; //@line 9004
   HEAP32[$AsyncCtx7 + 56 >> 2] = $13; //@line 9006
   HEAP32[$AsyncCtx7 + 60 >> 2] = $2; //@line 9008
   HEAP32[$AsyncCtx7 + 64 >> 2] = $6; //@line 9010
   HEAP32[$AsyncCtx7 + 68 >> 2] = $7; //@line 9012
   HEAP32[$AsyncCtx7 + 72 >> 2] = $3; //@line 9014
   HEAP32[$AsyncCtx7 + 76 >> 2] = $$sroa_idx5$i$i43; //@line 9016
   HEAP32[$AsyncCtx7 + 80 >> 2] = $2; //@line 9018
   HEAP32[$AsyncCtx7 + 84 >> 2] = $3; //@line 9020
   HEAP32[$AsyncCtx7 + 88 >> 2] = $6; //@line 9022
   HEAP32[$AsyncCtx7 + 92 >> 2] = $3; //@line 9024
   HEAP32[$AsyncCtx7 + 96 >> 2] = $$03071; //@line 9026
   HEAP32[$AsyncCtx7 + 100 >> 2] = $$02972; //@line 9028
   sp = STACKTOP; //@line 9029
   STACKTOP = sp; //@line 9030
   return;
  }
 case 32:
  {
   HEAP32[$AsyncCtx11 >> 2] = 192; //@line 9034
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 9036
   HEAP32[$AsyncCtx11 + 8 >> 2] = $9; //@line 9038
   HEAP32[$AsyncCtx11 + 12 >> 2] = $8; //@line 9040
   HEAP32[$AsyncCtx11 + 16 >> 2] = $9; //@line 9042
   HEAP32[$AsyncCtx11 + 20 >> 2] = $10; //@line 9044
   HEAP32[$AsyncCtx11 + 24 >> 2] = $1; //@line 9046
   HEAP32[$AsyncCtx11 + 28 >> 2] = $$sroa_idx5$i$i; //@line 9048
   HEAP32[$AsyncCtx11 + 32 >> 2] = $11; //@line 9050
   HEAP32[$AsyncCtx11 + 36 >> 2] = $0; //@line 9052
   HEAP32[$AsyncCtx11 + 40 >> 2] = $1; //@line 9054
   HEAP32[$AsyncCtx11 + 44 >> 2] = $4; //@line 9056
   HEAP32[$AsyncCtx11 + 48 >> 2] = $1; //@line 9058
   HEAP32[$AsyncCtx11 + 52 >> 2] = $5; //@line 9060
   HEAP32[$AsyncCtx11 + 56 >> 2] = $200; //@line 9062
   HEAP32[$AsyncCtx11 + 60 >> 2] = $13; //@line 9064
   HEAP32[$AsyncCtx11 + 64 >> 2] = $2; //@line 9066
   HEAP32[$AsyncCtx11 + 68 >> 2] = $6; //@line 9068
   HEAP32[$AsyncCtx11 + 72 >> 2] = $7; //@line 9070
   HEAP32[$AsyncCtx11 + 76 >> 2] = $3; //@line 9072
   HEAP32[$AsyncCtx11 + 80 >> 2] = $$sroa_idx5$i$i43; //@line 9074
   HEAP32[$AsyncCtx11 + 84 >> 2] = $2; //@line 9076
   HEAP32[$AsyncCtx11 + 88 >> 2] = $3; //@line 9078
   HEAP32[$AsyncCtx11 + 92 >> 2] = $6; //@line 9080
   HEAP32[$AsyncCtx11 + 96 >> 2] = $3; //@line 9082
   HEAP32[$AsyncCtx11 + 100 >> 2] = $$03071; //@line 9084
   HEAP32[$AsyncCtx11 + 104 >> 2] = $$02972; //@line 9086
   sp = STACKTOP; //@line 9087
   STACKTOP = sp; //@line 9088
   return;
  }
 case 35:
  {
   HEAP32[$AsyncCtx44 >> 2] = 194; //@line 9092
   HEAP32[$AsyncCtx44 + 4 >> 2] = $0; //@line 9094
   HEAP32[$AsyncCtx44 + 8 >> 2] = $9; //@line 9096
   HEAP32[$AsyncCtx44 + 12 >> 2] = $8; //@line 9098
   HEAP32[$AsyncCtx44 + 16 >> 2] = $9; //@line 9100
   HEAP32[$AsyncCtx44 + 20 >> 2] = $10; //@line 9102
   HEAP32[$AsyncCtx44 + 24 >> 2] = $1; //@line 9104
   HEAP32[$AsyncCtx44 + 28 >> 2] = $$sroa_idx5$i$i; //@line 9106
   HEAP32[$AsyncCtx44 + 32 >> 2] = $11; //@line 9108
   HEAP32[$AsyncCtx44 + 36 >> 2] = $0; //@line 9110
   HEAP32[$AsyncCtx44 + 40 >> 2] = $1; //@line 9112
   HEAP32[$AsyncCtx44 + 44 >> 2] = $4; //@line 9114
   HEAP32[$AsyncCtx44 + 48 >> 2] = $1; //@line 9116
   HEAP32[$AsyncCtx44 + 52 >> 2] = $5; //@line 9118
   HEAP32[$AsyncCtx44 + 56 >> 2] = $2; //@line 9120
   HEAP32[$AsyncCtx44 + 60 >> 2] = $6; //@line 9122
   HEAP32[$AsyncCtx44 + 64 >> 2] = $7; //@line 9124
   HEAP32[$AsyncCtx44 + 68 >> 2] = $3; //@line 9126
   HEAP32[$AsyncCtx44 + 72 >> 2] = $$sroa_idx5$i$i43; //@line 9128
   HEAP32[$AsyncCtx44 + 76 >> 2] = $2; //@line 9130
   HEAP32[$AsyncCtx44 + 80 >> 2] = $3; //@line 9132
   HEAP32[$AsyncCtx44 + 84 >> 2] = $6; //@line 9134
   HEAP32[$AsyncCtx44 + 88 >> 2] = $3; //@line 9136
   HEAP32[$AsyncCtx44 + 92 >> 2] = $$03071; //@line 9138
   HEAP32[$AsyncCtx44 + 96 >> 2] = $$02972; //@line 9140
   HEAP32[$AsyncCtx44 + 100 >> 2] = $13; //@line 9142
   sp = STACKTOP; //@line 9143
   STACKTOP = sp; //@line 9144
   return;
  }
 case 38:
  {
   HEAP32[$AsyncCtx15 >> 2] = 195; //@line 9148
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 9150
   HEAP32[$AsyncCtx15 + 8 >> 2] = $9; //@line 9152
   HEAP32[$AsyncCtx15 + 12 >> 2] = $8; //@line 9154
   HEAP32[$AsyncCtx15 + 16 >> 2] = $9; //@line 9156
   HEAP32[$AsyncCtx15 + 20 >> 2] = $10; //@line 9158
   HEAP32[$AsyncCtx15 + 24 >> 2] = $1; //@line 9160
   HEAP32[$AsyncCtx15 + 28 >> 2] = $$sroa_idx5$i$i; //@line 9162
   HEAP32[$AsyncCtx15 + 32 >> 2] = $11; //@line 9164
   HEAP32[$AsyncCtx15 + 36 >> 2] = $0; //@line 9166
   HEAP32[$AsyncCtx15 + 40 >> 2] = $1; //@line 9168
   HEAP32[$AsyncCtx15 + 44 >> 2] = $4; //@line 9170
   HEAP32[$AsyncCtx15 + 48 >> 2] = $1; //@line 9172
   HEAP32[$AsyncCtx15 + 52 >> 2] = $5; //@line 9174
   HEAP32[$AsyncCtx15 + 56 >> 2] = $2; //@line 9176
   HEAP32[$AsyncCtx15 + 60 >> 2] = $6; //@line 9178
   HEAP32[$AsyncCtx15 + 64 >> 2] = $7; //@line 9180
   HEAP32[$AsyncCtx15 + 68 >> 2] = $3; //@line 9182
   HEAP32[$AsyncCtx15 + 72 >> 2] = $$sroa_idx5$i$i43; //@line 9184
   HEAP32[$AsyncCtx15 + 76 >> 2] = $2; //@line 9186
   HEAP32[$AsyncCtx15 + 80 >> 2] = $3; //@line 9188
   HEAP32[$AsyncCtx15 + 84 >> 2] = $6; //@line 9190
   HEAP32[$AsyncCtx15 + 88 >> 2] = $3; //@line 9192
   HEAP32[$AsyncCtx15 + 92 >> 2] = $$03071; //@line 9194
   HEAP32[$AsyncCtx15 + 96 >> 2] = $$02972; //@line 9196
   HEAP32[$AsyncCtx15 + 100 >> 2] = $13; //@line 9198
   sp = STACKTOP; //@line 9199
   STACKTOP = sp; //@line 9200
   return;
  }
 case 42:
  {
   HEAP32[$AsyncCtx19 >> 2] = 196; //@line 9204
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 9206
   HEAP32[$AsyncCtx19 + 8 >> 2] = $9; //@line 9208
   HEAP32[$AsyncCtx19 + 12 >> 2] = $8; //@line 9210
   HEAP32[$AsyncCtx19 + 16 >> 2] = $9; //@line 9212
   HEAP32[$AsyncCtx19 + 20 >> 2] = $10; //@line 9214
   HEAP32[$AsyncCtx19 + 24 >> 2] = $1; //@line 9216
   HEAP32[$AsyncCtx19 + 28 >> 2] = $$sroa_idx5$i$i; //@line 9218
   HEAP32[$AsyncCtx19 + 32 >> 2] = $11; //@line 9220
   HEAP32[$AsyncCtx19 + 36 >> 2] = $0; //@line 9222
   HEAP32[$AsyncCtx19 + 40 >> 2] = $1; //@line 9224
   HEAP32[$AsyncCtx19 + 44 >> 2] = $4; //@line 9226
   HEAP32[$AsyncCtx19 + 48 >> 2] = $1; //@line 9228
   HEAP32[$AsyncCtx19 + 52 >> 2] = $5; //@line 9230
   HEAP32[$AsyncCtx19 + 56 >> 2] = $2; //@line 9232
   HEAP32[$AsyncCtx19 + 60 >> 2] = $6; //@line 9234
   HEAP32[$AsyncCtx19 + 64 >> 2] = $7; //@line 9236
   HEAP32[$AsyncCtx19 + 68 >> 2] = $3; //@line 9238
   HEAP32[$AsyncCtx19 + 72 >> 2] = $$sroa_idx5$i$i43; //@line 9240
   HEAP32[$AsyncCtx19 + 76 >> 2] = $2; //@line 9242
   HEAP32[$AsyncCtx19 + 80 >> 2] = $3; //@line 9244
   HEAP32[$AsyncCtx19 + 84 >> 2] = $6; //@line 9246
   HEAP32[$AsyncCtx19 + 88 >> 2] = $3; //@line 9248
   HEAP32[$AsyncCtx19 + 92 >> 2] = $$03071; //@line 9250
   HEAP32[$AsyncCtx19 + 96 >> 2] = $$02972; //@line 9252
   HEAP32[$AsyncCtx19 + 100 >> 2] = $13; //@line 9254
   sp = STACKTOP; //@line 9255
   STACKTOP = sp; //@line 9256
   return;
  }
 }
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11540
 STACKTOP = STACKTOP + 560 | 0; //@line 11541
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 11541
 $6 = sp + 8 | 0; //@line 11542
 $7 = sp; //@line 11543
 $8 = sp + 524 | 0; //@line 11544
 $9 = $8; //@line 11545
 $10 = sp + 512 | 0; //@line 11546
 HEAP32[$7 >> 2] = 0; //@line 11547
 $11 = $10 + 12 | 0; //@line 11548
 ___DOUBLE_BITS_677($1) | 0; //@line 11549
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 11554
  $$0520 = 1; //@line 11554
  $$0521 = 5065; //@line 11554
 } else {
  $$0471 = $1; //@line 11565
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 11565
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 5066 : 5071 : 5068; //@line 11565
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 11567
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 11576
   $31 = $$0520 + 3 | 0; //@line 11581
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 11583
   _out_670($0, $$0521, $$0520); //@line 11584
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 5092 : 5096 : $27 ? 5084 : 5088, 3); //@line 11585
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 11587
   $$sink560 = $31; //@line 11588
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 11591
   $36 = $35 != 0.0; //@line 11592
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 11596
   }
   $39 = $5 | 32; //@line 11598
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 11601
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 11604
    $44 = $$0520 | 2; //@line 11605
    $46 = 12 - $3 | 0; //@line 11607
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 11612
     } else {
      $$0509585 = 8.0; //@line 11614
      $$1508586 = $46; //@line 11614
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 11616
       $$0509585 = $$0509585 * 16.0; //@line 11617
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 11632
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 11637
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 11642
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 11645
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 11648
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 11651
     HEAP8[$68 >> 0] = 48; //@line 11652
     $$0511 = $68; //@line 11653
    } else {
     $$0511 = $66; //@line 11655
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 11662
    $76 = $$0511 + -2 | 0; //@line 11665
    HEAP8[$76 >> 0] = $5 + 15; //@line 11666
    $77 = ($3 | 0) < 1; //@line 11667
    $79 = ($4 & 8 | 0) == 0; //@line 11669
    $$0523 = $8; //@line 11670
    $$2473 = $$1472; //@line 11670
    while (1) {
     $80 = ~~$$2473; //@line 11672
     $86 = $$0523 + 1 | 0; //@line 11678
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[5100 + $80 >> 0]; //@line 11679
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 11682
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 11691
      } else {
       HEAP8[$86 >> 0] = 46; //@line 11694
       $$1524 = $$0523 + 2 | 0; //@line 11695
      }
     } else {
      $$1524 = $86; //@line 11698
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 11702
     }
    }
    $$pre693 = $$1524; //@line 11708
    if (!$3) {
     label = 24; //@line 11710
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 11718
      $$sink = $3 + 2 | 0; //@line 11718
     } else {
      label = 24; //@line 11720
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 11724
     $$pre$phi691Z2D = $101; //@line 11725
     $$sink = $101; //@line 11725
    }
    $104 = $11 - $76 | 0; //@line 11729
    $106 = $104 + $44 + $$sink | 0; //@line 11731
    _pad_676($0, 32, $2, $106, $4); //@line 11732
    _out_670($0, $$0521$, $44); //@line 11733
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 11735
    _out_670($0, $8, $$pre$phi691Z2D); //@line 11736
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 11738
    _out_670($0, $76, $104); //@line 11739
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 11741
    $$sink560 = $106; //@line 11742
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 11746
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 11750
    HEAP32[$7 >> 2] = $113; //@line 11751
    $$3 = $35 * 268435456.0; //@line 11752
    $$pr = $113; //@line 11752
   } else {
    $$3 = $35; //@line 11755
    $$pr = HEAP32[$7 >> 2] | 0; //@line 11755
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 11759
   $$0498 = $$561; //@line 11760
   $$4 = $$3; //@line 11760
   do {
    $116 = ~~$$4 >>> 0; //@line 11762
    HEAP32[$$0498 >> 2] = $116; //@line 11763
    $$0498 = $$0498 + 4 | 0; //@line 11764
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 11767
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 11777
    $$1499662 = $$0498; //@line 11777
    $124 = $$pr; //@line 11777
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 11780
     $$0488655 = $$1499662 + -4 | 0; //@line 11781
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 11784
     } else {
      $$0488657 = $$0488655; //@line 11786
      $$0497656 = 0; //@line 11786
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 11789
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 11791
       $131 = tempRet0; //@line 11792
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11793
       HEAP32[$$0488657 >> 2] = $132; //@line 11795
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11796
       $$0488657 = $$0488657 + -4 | 0; //@line 11798
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 11808
      } else {
       $138 = $$1482663 + -4 | 0; //@line 11810
       HEAP32[$138 >> 2] = $$0497656; //@line 11811
       $$2483$ph = $138; //@line 11812
      }
     }
     $$2500 = $$1499662; //@line 11815
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 11821
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 11825
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 11831
     HEAP32[$7 >> 2] = $144; //@line 11832
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 11835
      $$1499662 = $$2500; //@line 11835
      $124 = $144; //@line 11835
     } else {
      $$1482$lcssa = $$2483$ph; //@line 11837
      $$1499$lcssa = $$2500; //@line 11837
      $$pr566 = $144; //@line 11837
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 11842
    $$1499$lcssa = $$0498; //@line 11842
    $$pr566 = $$pr; //@line 11842
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 11848
    $150 = ($39 | 0) == 102; //@line 11849
    $$3484650 = $$1482$lcssa; //@line 11850
    $$3501649 = $$1499$lcssa; //@line 11850
    $152 = $$pr566; //@line 11850
    while (1) {
     $151 = 0 - $152 | 0; //@line 11852
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 11854
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 11858
      $161 = 1e9 >>> $154; //@line 11859
      $$0487644 = 0; //@line 11860
      $$1489643 = $$3484650; //@line 11860
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 11862
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 11866
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 11867
       $$1489643 = $$1489643 + 4 | 0; //@line 11868
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11879
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 11882
       $$4502 = $$3501649; //@line 11882
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 11885
       $$$3484700 = $$$3484; //@line 11886
       $$4502 = $$3501649 + 4 | 0; //@line 11886
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11893
      $$4502 = $$3501649; //@line 11893
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 11895
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 11902
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 11904
     HEAP32[$7 >> 2] = $152; //@line 11905
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 11910
      $$3501$lcssa = $$$4502; //@line 11910
      break;
     } else {
      $$3484650 = $$$3484700; //@line 11908
      $$3501649 = $$$4502; //@line 11908
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 11915
    $$3501$lcssa = $$1499$lcssa; //@line 11915
   }
   $185 = $$561; //@line 11918
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 11923
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 11924
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 11927
    } else {
     $$0514639 = $189; //@line 11929
     $$0530638 = 10; //@line 11929
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 11931
      $193 = $$0514639 + 1 | 0; //@line 11932
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 11935
       break;
      } else {
       $$0514639 = $193; //@line 11938
      }
     }
    }
   } else {
    $$1515 = 0; //@line 11943
   }
   $198 = ($39 | 0) == 103; //@line 11948
   $199 = ($$540 | 0) != 0; //@line 11949
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 11952
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 11961
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 11964
    $213 = ($209 | 0) % 9 | 0; //@line 11965
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 11968
     $$1531632 = 10; //@line 11968
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 11971
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 11974
       $$1531632 = $215; //@line 11974
      } else {
       $$1531$lcssa = $215; //@line 11976
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 11981
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 11983
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 11984
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 11987
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 11990
     $$4518 = $$1515; //@line 11990
     $$8 = $$3484$lcssa; //@line 11990
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 11995
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 11996
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 12001
     if (!$$0520) {
      $$1467 = $$$564; //@line 12004
      $$1469 = $$543; //@line 12004
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 12007
      $$1467 = $230 ? -$$$564 : $$$564; //@line 12012
      $$1469 = $230 ? -$$543 : $$543; //@line 12012
     }
     $233 = $217 - $218 | 0; //@line 12014
     HEAP32[$212 >> 2] = $233; //@line 12015
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 12019
      HEAP32[$212 >> 2] = $236; //@line 12020
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 12023
       $$sink547625 = $212; //@line 12023
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 12025
        HEAP32[$$sink547625 >> 2] = 0; //@line 12026
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 12029
         HEAP32[$240 >> 2] = 0; //@line 12030
         $$6 = $240; //@line 12031
        } else {
         $$6 = $$5486626; //@line 12033
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 12036
        HEAP32[$238 >> 2] = $242; //@line 12037
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 12040
         $$sink547625 = $238; //@line 12040
        } else {
         $$5486$lcssa = $$6; //@line 12042
         $$sink547$lcssa = $238; //@line 12042
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 12047
       $$sink547$lcssa = $212; //@line 12047
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 12052
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 12053
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 12056
       $$4518 = $247; //@line 12056
       $$8 = $$5486$lcssa; //@line 12056
      } else {
       $$2516621 = $247; //@line 12058
       $$2532620 = 10; //@line 12058
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 12060
        $251 = $$2516621 + 1 | 0; //@line 12061
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 12064
         $$4518 = $251; //@line 12064
         $$8 = $$5486$lcssa; //@line 12064
         break;
        } else {
         $$2516621 = $251; //@line 12067
        }
       }
      }
     } else {
      $$4492 = $212; //@line 12072
      $$4518 = $$1515; //@line 12072
      $$8 = $$3484$lcssa; //@line 12072
     }
    }
    $253 = $$4492 + 4 | 0; //@line 12075
    $$5519$ph = $$4518; //@line 12078
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 12078
    $$9$ph = $$8; //@line 12078
   } else {
    $$5519$ph = $$1515; //@line 12080
    $$7505$ph = $$3501$lcssa; //@line 12080
    $$9$ph = $$3484$lcssa; //@line 12080
   }
   $$7505 = $$7505$ph; //@line 12082
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 12086
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 12089
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 12093
    } else {
     $$lcssa675 = 1; //@line 12095
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 12099
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 12104
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 12112
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 12112
     } else {
      $$0479 = $5 + -2 | 0; //@line 12116
      $$2476 = $$540$ + -1 | 0; //@line 12116
     }
     $267 = $4 & 8; //@line 12118
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 12123
       if (!$270) {
        $$2529 = 9; //@line 12126
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 12131
         $$3533616 = 10; //@line 12131
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 12133
          $275 = $$1528617 + 1 | 0; //@line 12134
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 12140
           break;
          } else {
           $$1528617 = $275; //@line 12138
          }
         }
        } else {
         $$2529 = 0; //@line 12145
        }
       }
      } else {
       $$2529 = 9; //@line 12149
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 12157
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 12159
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 12161
       $$1480 = $$0479; //@line 12164
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 12164
       $$pre$phi698Z2D = 0; //@line 12164
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 12168
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 12170
       $$1480 = $$0479; //@line 12173
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 12173
       $$pre$phi698Z2D = 0; //@line 12173
       break;
      }
     } else {
      $$1480 = $$0479; //@line 12177
      $$3477 = $$2476; //@line 12177
      $$pre$phi698Z2D = $267; //@line 12177
     }
    } else {
     $$1480 = $5; //@line 12181
     $$3477 = $$540; //@line 12181
     $$pre$phi698Z2D = $4 & 8; //@line 12181
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 12184
   $294 = ($292 | 0) != 0 & 1; //@line 12186
   $296 = ($$1480 | 32 | 0) == 102; //@line 12188
   if ($296) {
    $$2513 = 0; //@line 12192
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 12192
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 12195
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 12198
    $304 = $11; //@line 12199
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 12204
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 12206
      HEAP8[$308 >> 0] = 48; //@line 12207
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 12212
      } else {
       $$1512$lcssa = $308; //@line 12214
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 12219
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 12226
    $318 = $$1512$lcssa + -2 | 0; //@line 12228
    HEAP8[$318 >> 0] = $$1480; //@line 12229
    $$2513 = $318; //@line 12232
    $$pn = $304 - $318 | 0; //@line 12232
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 12237
   _pad_676($0, 32, $2, $323, $4); //@line 12238
   _out_670($0, $$0521, $$0520); //@line 12239
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 12241
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 12244
    $326 = $8 + 9 | 0; //@line 12245
    $327 = $326; //@line 12246
    $328 = $8 + 8 | 0; //@line 12247
    $$5493600 = $$0496$$9; //@line 12248
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 12251
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 12256
       $$1465 = $328; //@line 12257
      } else {
       $$1465 = $330; //@line 12259
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 12266
       $$0464597 = $330; //@line 12267
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 12269
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 12272
        } else {
         $$1465 = $335; //@line 12274
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 12279
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 12284
     $$5493600 = $$5493600 + 4 | 0; //@line 12285
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 5116, 1); //@line 12295
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 12301
     $$6494592 = $$5493600; //@line 12301
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 12304
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 12309
       $$0463587 = $347; //@line 12310
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 12312
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 12315
        } else {
         $$0463$lcssa = $351; //@line 12317
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 12322
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 12326
      $$6494592 = $$6494592 + 4 | 0; //@line 12327
      $356 = $$4478593 + -9 | 0; //@line 12328
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 12335
       break;
      } else {
       $$4478593 = $356; //@line 12333
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 12340
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 12343
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 12346
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 12349
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 12350
     $365 = $363; //@line 12351
     $366 = 0 - $9 | 0; //@line 12352
     $367 = $8 + 8 | 0; //@line 12353
     $$5605 = $$3477; //@line 12354
     $$7495604 = $$9$ph; //@line 12354
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 12357
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 12360
       $$0 = $367; //@line 12361
      } else {
       $$0 = $369; //@line 12363
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 12368
        _out_670($0, $$0, 1); //@line 12369
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 12373
         break;
        }
        _out_670($0, 5116, 1); //@line 12376
        $$2 = $375; //@line 12377
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 12381
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 12386
        $$1601 = $$0; //@line 12387
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 12389
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 12392
         } else {
          $$2 = $373; //@line 12394
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 12401
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 12404
      $381 = $$5605 - $378 | 0; //@line 12405
      $$7495604 = $$7495604 + 4 | 0; //@line 12406
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 12413
       break;
      } else {
       $$5605 = $381; //@line 12411
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 12418
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 12421
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 12425
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 12428
   $$sink560 = $323; //@line 12429
  }
 } while (0);
 STACKTOP = sp; //@line 12434
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 12434
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$090114$lcssa = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $$3 = 0, $$5 = 0, $$byval_copy = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $110 = 0, $12 = 0, $124 = 0, $125 = 0, $128 = 0, $142 = 0, $146 = 0, $147 = 0, $155 = 0, $158 = 0, $161 = 0, $164 = 0, $171 = 0, $173 = 0, $174 = 0, $177 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $195 = 0, $196 = 0, $20 = 0, $208 = 0, $211 = 0, $222 = 0, $223 = 0, $226 = 0, $235 = 0, $237 = 0, $240 = 0, $245 = 0, $248 = 0, $255 = 0, $257 = 0, $265 = 0, $268 = 0, $27 = 0, $270 = 0, $278 = 0, $28 = 0, $281 = 0, $283 = 0, $291 = 0, $294 = 0, $296 = 0, $315 = 0, $316 = 0, $317 = 0, $33 = 0, $46 = 0, $50 = 0, $6 = 0, $63 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $8 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7508
 STACKTOP = STACKTOP + 144 | 0; //@line 7509
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 7509
 $$byval_copy = sp + 116 | 0; //@line 7510
 $6 = sp + 96 | 0; //@line 7511
 $7 = sp + 32 | 0; //@line 7512
 $8 = sp + 16 | 0; //@line 7513
 $9 = sp; //@line 7514
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$5 = -3003; //@line 7519
  STACKTOP = sp; //@line 7520
  return $$5 | 0; //@line 7520
 }
 $12 = _strlen($1) | 0; //@line 7522
 if (($12 | 0) > 255 | ($12 | 0) == 0) {
  $$5 = -3003; //@line 7527
  STACKTOP = sp; //@line 7528
  return $$5 | 0; //@line 7528
 }
 L7 : do {
  if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $5, $6) | 0)) {
   HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 7534
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 7534
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 7534
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 7534
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 7534
   __ZN13SocketAddressC2E10nsapi_addrt($7, $$byval_copy, 0); //@line 7535
   $19 = $2 + 12 | 0; //@line 7536
   $20 = HEAP32[$19 >> 2] | 0; //@line 7537
   do {
    if (!$20) {
     $AsyncCtx53 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7541
     _mbed_assert_internal(4019, 4024, 1677); //@line 7542
     if (___async) {
      HEAP32[$AsyncCtx53 >> 2] = 170; //@line 7545
      HEAP32[$AsyncCtx53 + 4 >> 2] = $19; //@line 7547
      HEAP32[$AsyncCtx53 + 8 >> 2] = $2; //@line 7549
      HEAP32[$AsyncCtx53 + 12 >> 2] = $7; //@line 7551
      HEAP32[$AsyncCtx53 + 16 >> 2] = $7; //@line 7553
      HEAP32[$AsyncCtx53 + 20 >> 2] = $6; //@line 7555
      sp = STACKTOP; //@line 7556
      STACKTOP = sp; //@line 7557
      return 0; //@line 7557
     } else {
      _emscripten_free_async_context($AsyncCtx53 | 0); //@line 7559
      $28 = HEAP32[$19 >> 2] | 0; //@line 7561
      break;
     }
    } else {
     $28 = $20; //@line 7565
    }
   } while (0);
   $27 = HEAP32[$28 >> 2] | 0; //@line 7568
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7569
   FUNCTION_TABLE_viii[$27 & 0]($2, 0, $7); //@line 7570
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 171; //@line 7573
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 7575
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 7577
    sp = STACKTOP; //@line 7578
    STACKTOP = sp; //@line 7579
    return 0; //@line 7579
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7581
    $$3 = 0; //@line 7582
    break;
   }
  } else {
   if (!(HEAP32[1961] | 0)) {
    $$090114$lcssa = 0; //@line 7589
   } else {
    if (!(HEAP32[1962] | 0)) {
     $$090114$lcssa = 1; //@line 7594
    } else {
     if (!(HEAP32[1963] | 0)) {
      $$090114$lcssa = 2; //@line 7599
     } else {
      if (!(HEAP32[1964] | 0)) {
       $$090114$lcssa = 3; //@line 7604
      } else {
       if (!(HEAP32[1965] | 0)) {
        $$090114$lcssa = 4; //@line 7609
       } else {
        $$3 = -3007; //@line 7611
        break;
       }
      }
     }
    }
   }
   $AsyncCtx38 = _emscripten_alloc_async_context(48, sp) | 0; //@line 7618
   $33 = __ZnwjRKSt9nothrow_t(92, 9765) | 0; //@line 7619
   if (___async) {
    HEAP32[$AsyncCtx38 >> 2] = 172; //@line 7622
    HEAP32[$AsyncCtx38 + 4 >> 2] = $0; //@line 7624
    HEAP32[$AsyncCtx38 + 8 >> 2] = $3; //@line 7626
    HEAP32[$AsyncCtx38 + 12 >> 2] = $5; //@line 7628
    HEAP32[$AsyncCtx38 + 16 >> 2] = $4; //@line 7630
    HEAP32[$AsyncCtx38 + 20 >> 2] = $8; //@line 7632
    HEAP32[$AsyncCtx38 + 24 >> 2] = $9; //@line 7634
    HEAP32[$AsyncCtx38 + 28 >> 2] = $6; //@line 7636
    HEAP32[$AsyncCtx38 + 32 >> 2] = $$090114$lcssa; //@line 7638
    HEAP32[$AsyncCtx38 + 36 >> 2] = $2; //@line 7640
    HEAP32[$AsyncCtx38 + 40 >> 2] = $12; //@line 7642
    HEAP32[$AsyncCtx38 + 44 >> 2] = $1; //@line 7644
    sp = STACKTOP; //@line 7645
    STACKTOP = sp; //@line 7646
    return 0; //@line 7646
   }
   _emscripten_free_async_context($AsyncCtx38 | 0); //@line 7648
   if (!$33) {
    $$3 = -3007; //@line 7651
   } else {
    $46 = $33 + 16 | 0; //@line 7653
    HEAP32[$46 >> 2] = 0; //@line 7654
    HEAP32[$46 + 4 >> 2] = 0; //@line 7654
    HEAP32[$46 + 8 >> 2] = 0; //@line 7654
    HEAP32[$46 + 12 >> 2] = 0; //@line 7654
    HEAP32[$46 + 16 >> 2] = 0; //@line 7654
    HEAP32[$46 + 20 >> 2] = 0; //@line 7654
    HEAP32[$46 + 24 >> 2] = 0; //@line 7654
    HEAP32[$46 + 28 >> 2] = 0; //@line 7654
    $AsyncCtx42 = _emscripten_alloc_async_context(52, sp) | 0; //@line 7658
    $50 = __ZnajRKSt9nothrow_t(($12 | 0) < -1 ? -1 : $12 + 1 | 0, 9765) | 0; //@line 7659
    if (___async) {
     HEAP32[$AsyncCtx42 >> 2] = 173; //@line 7662
     HEAP32[$AsyncCtx42 + 4 >> 2] = $33; //@line 7664
     HEAP32[$AsyncCtx42 + 8 >> 2] = $0; //@line 7666
     HEAP32[$AsyncCtx42 + 12 >> 2] = $3; //@line 7668
     HEAP32[$AsyncCtx42 + 16 >> 2] = $5; //@line 7670
     HEAP32[$AsyncCtx42 + 20 >> 2] = $4; //@line 7672
     HEAP32[$AsyncCtx42 + 24 >> 2] = $8; //@line 7674
     HEAP32[$AsyncCtx42 + 28 >> 2] = $9; //@line 7676
     HEAP32[$AsyncCtx42 + 32 >> 2] = $6; //@line 7678
     HEAP32[$AsyncCtx42 + 36 >> 2] = $$090114$lcssa; //@line 7680
     HEAP32[$AsyncCtx42 + 40 >> 2] = $2; //@line 7682
     HEAP32[$AsyncCtx42 + 44 >> 2] = $46; //@line 7684
     HEAP32[$AsyncCtx42 + 48 >> 2] = $1; //@line 7686
     sp = STACKTOP; //@line 7687
     STACKTOP = sp; //@line 7688
     return 0; //@line 7688
    }
    _emscripten_free_async_context($AsyncCtx42 | 0); //@line 7690
    $63 = $33 + 12 | 0; //@line 7691
    HEAP32[$63 >> 2] = $50; //@line 7692
    if (!$50) {
     __ZdlPv($33); //@line 7695
     $$3 = -3007; //@line 7696
     break;
    }
    _strcpy($50, $1) | 0; //@line 7699
    HEAP32[$33 + 4 >> 2] = -3019; //@line 7701
    if (($46 | 0) != ($2 | 0)) {
     $67 = $33 + 28 | 0; //@line 7704
     $68 = HEAP32[$67 >> 2] | 0; //@line 7705
     do {
      if ($68 | 0) {
       $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 7710
       $AsyncCtx2 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7711
       FUNCTION_TABLE_vi[$71 & 511]($46); //@line 7712
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 174; //@line 7715
        HEAP32[$AsyncCtx2 + 4 >> 2] = $0; //@line 7717
        HEAP32[$AsyncCtx2 + 8 >> 2] = $33; //@line 7719
        HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 7721
        HEAP32[$AsyncCtx2 + 16 >> 2] = $5; //@line 7723
        HEAP32[$AsyncCtx2 + 20 >> 2] = $4; //@line 7725
        HEAP32[$AsyncCtx2 + 24 >> 2] = $8; //@line 7727
        HEAP32[$AsyncCtx2 + 28 >> 2] = $9; //@line 7729
        HEAP32[$AsyncCtx2 + 32 >> 2] = $6; //@line 7731
        HEAP32[$AsyncCtx2 + 36 >> 2] = $$090114$lcssa; //@line 7733
        HEAP32[$AsyncCtx2 + 40 >> 2] = $63; //@line 7735
        HEAP32[$AsyncCtx2 + 44 >> 2] = $67; //@line 7737
        HEAP32[$AsyncCtx2 + 48 >> 2] = $2; //@line 7739
        HEAP32[$AsyncCtx2 + 52 >> 2] = $46; //@line 7741
        sp = STACKTOP; //@line 7742
        STACKTOP = sp; //@line 7743
        return 0; //@line 7743
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7745
        break;
       }
      }
     } while (0);
     $85 = $2 + 12 | 0; //@line 7750
     $86 = HEAP32[$85 >> 2] | 0; //@line 7751
     do {
      if (!$86) {
       $103 = 0; //@line 7755
      } else {
       $89 = HEAP32[$86 + 4 >> 2] | 0; //@line 7758
       $AsyncCtx6 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7759
       FUNCTION_TABLE_vii[$89 & 7]($46, $2); //@line 7760
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 175; //@line 7763
        HEAP32[$AsyncCtx6 + 4 >> 2] = $0; //@line 7765
        HEAP32[$AsyncCtx6 + 8 >> 2] = $33; //@line 7767
        HEAP32[$AsyncCtx6 + 12 >> 2] = $3; //@line 7769
        HEAP32[$AsyncCtx6 + 16 >> 2] = $5; //@line 7771
        HEAP32[$AsyncCtx6 + 20 >> 2] = $4; //@line 7773
        HEAP32[$AsyncCtx6 + 24 >> 2] = $8; //@line 7775
        HEAP32[$AsyncCtx6 + 28 >> 2] = $9; //@line 7777
        HEAP32[$AsyncCtx6 + 32 >> 2] = $6; //@line 7779
        HEAP32[$AsyncCtx6 + 36 >> 2] = $$090114$lcssa; //@line 7781
        HEAP32[$AsyncCtx6 + 40 >> 2] = $85; //@line 7783
        HEAP32[$AsyncCtx6 + 44 >> 2] = $63; //@line 7785
        HEAP32[$AsyncCtx6 + 48 >> 2] = $67; //@line 7787
        HEAP32[$AsyncCtx6 + 52 >> 2] = $46; //@line 7789
        sp = STACKTOP; //@line 7790
        STACKTOP = sp; //@line 7791
        return 0; //@line 7791
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7793
        $103 = HEAP32[$85 >> 2] | 0; //@line 7795
        break;
       }
      }
     } while (0);
     HEAP32[$67 >> 2] = $103; //@line 7800
    }
    $104 = $33 + 32 | 0; //@line 7802
    if (($104 | 0) != ($4 | 0)) {
     $106 = $33 + 44 | 0; //@line 7805
     $107 = HEAP32[$106 >> 2] | 0; //@line 7806
     do {
      if ($107 | 0) {
       $110 = HEAP32[$107 + 8 >> 2] | 0; //@line 7811
       $AsyncCtx10 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7812
       FUNCTION_TABLE_vi[$110 & 511]($104); //@line 7813
       if (___async) {
        HEAP32[$AsyncCtx10 >> 2] = 176; //@line 7816
        HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 7818
        HEAP32[$AsyncCtx10 + 8 >> 2] = $33; //@line 7820
        HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 7822
        HEAP32[$AsyncCtx10 + 16 >> 2] = $5; //@line 7824
        HEAP32[$AsyncCtx10 + 20 >> 2] = $106; //@line 7826
        HEAP32[$AsyncCtx10 + 24 >> 2] = $4; //@line 7828
        HEAP32[$AsyncCtx10 + 28 >> 2] = $104; //@line 7830
        HEAP32[$AsyncCtx10 + 32 >> 2] = $8; //@line 7832
        HEAP32[$AsyncCtx10 + 36 >> 2] = $9; //@line 7834
        HEAP32[$AsyncCtx10 + 40 >> 2] = $6; //@line 7836
        HEAP32[$AsyncCtx10 + 44 >> 2] = $$090114$lcssa; //@line 7838
        HEAP32[$AsyncCtx10 + 48 >> 2] = $63; //@line 7840
        HEAP32[$AsyncCtx10 + 52 >> 2] = $46; //@line 7842
        sp = STACKTOP; //@line 7843
        STACKTOP = sp; //@line 7844
        return 0; //@line 7844
       } else {
        _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7846
        break;
       }
      }
     } while (0);
     $124 = $4 + 12 | 0; //@line 7851
     $125 = HEAP32[$124 >> 2] | 0; //@line 7852
     do {
      if (!$125) {
       $142 = 0; //@line 7856
      } else {
       $128 = HEAP32[$125 + 4 >> 2] | 0; //@line 7859
       $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7860
       FUNCTION_TABLE_vii[$128 & 7]($104, $4); //@line 7861
       if (___async) {
        HEAP32[$AsyncCtx14 >> 2] = 177; //@line 7864
        HEAP32[$AsyncCtx14 + 4 >> 2] = $0; //@line 7866
        HEAP32[$AsyncCtx14 + 8 >> 2] = $33; //@line 7868
        HEAP32[$AsyncCtx14 + 12 >> 2] = $3; //@line 7870
        HEAP32[$AsyncCtx14 + 16 >> 2] = $5; //@line 7872
        HEAP32[$AsyncCtx14 + 20 >> 2] = $106; //@line 7874
        HEAP32[$AsyncCtx14 + 24 >> 2] = $8; //@line 7876
        HEAP32[$AsyncCtx14 + 28 >> 2] = $9; //@line 7878
        HEAP32[$AsyncCtx14 + 32 >> 2] = $6; //@line 7880
        HEAP32[$AsyncCtx14 + 36 >> 2] = $104; //@line 7882
        HEAP32[$AsyncCtx14 + 40 >> 2] = $$090114$lcssa; //@line 7884
        HEAP32[$AsyncCtx14 + 44 >> 2] = $63; //@line 7886
        HEAP32[$AsyncCtx14 + 48 >> 2] = $124; //@line 7888
        HEAP32[$AsyncCtx14 + 52 >> 2] = $46; //@line 7890
        sp = STACKTOP; //@line 7891
        STACKTOP = sp; //@line 7892
        return 0; //@line 7892
       } else {
        _emscripten_free_async_context($AsyncCtx14 | 0); //@line 7894
        $142 = HEAP32[$124 >> 2] | 0; //@line 7896
        break;
       }
      }
     } while (0);
     HEAP32[$106 >> 2] = $142; //@line 7901
    }
    HEAP32[$33 + 8 >> 2] = $0; //@line 7904
    HEAP32[$33 + 48 >> 2] = $3; //@line 7906
    HEAP32[$33 + 52 >> 2] = $5; //@line 7908
    $146 = $33 + 56 | 0; //@line 7909
    HEAP32[$146 >> 2] = 0; //@line 7910
    $147 = $33 + 60 | 0; //@line 7911
    HEAP32[$147 >> 2] = 0; //@line 7912
    HEAP32[$33 + 64 >> 2] = 0; //@line 7914
    HEAP8[$33 + 82 >> 0] = 0; //@line 7916
    HEAP8[$33 + 83 >> 0] = 1; //@line 7918
    HEAP8[$33 + 84 >> 0] = 3; //@line 7920
    HEAP8[$33 + 85 >> 0] = 0; //@line 7922
    HEAP16[$33 + 80 >> 1] = 0; //@line 7924
    HEAP32[$33 + 76 >> 2] = 0; //@line 7926
    $155 = $33 + 72 | 0; //@line 7927
    HEAP32[$155 >> 2] = 15500; //@line 7928
    HEAP8[$33 + 86 >> 0] = 0; //@line 7930
    HEAP32[$33 + 88 >> 2] = 0; //@line 7932
    $158 = HEAP32[187] | 0; //@line 7933
    HEAP32[187] = $158 + 1; //@line 7935
    HEAP32[$33 >> 2] = ($158 | 0) > 32767 ? 1 : $158; //@line 7938
    $161 = HEAP32[1961] | 0; //@line 7939
    if (!$161) {
     $$1 = 0; //@line 7942
     $255 = 0; //@line 7942
    } else {
     $164 = HEAP32[$161 + 56 >> 2] | 0; //@line 7945
     if (!$164) {
      $$1 = 1; //@line 7948
      $255 = 0; //@line 7948
     } else {
      if ((HEAP32[$161 + 8 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$146 >> 2] = $164; //@line 7954
       HEAP32[$147 >> 2] = HEAP32[$161 + 60 >> 2]; //@line 7957
       $$1 = 1; //@line 7958
       $255 = $164; //@line 7958
      } else {
       $$1 = 1; //@line 7960
       $255 = 0; //@line 7960
      }
     }
    }
    $171 = HEAP32[1962] | 0; //@line 7964
    if (!$171) {
     $$1$1 = $$1; //@line 7967
     $268 = $255; //@line 7967
    } else {
     if (!$255) {
      $257 = HEAP32[$171 + 56 >> 2] | 0; //@line 7972
      if (!$257) {
       $315 = 0; //@line 7975
      } else {
       if ((HEAP32[$171 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $257; //@line 7981
        HEAP32[$147 >> 2] = HEAP32[$171 + 60 >> 2]; //@line 7984
        $315 = $257; //@line 7985
       } else {
        $315 = 0; //@line 7987
       }
      }
     } else {
      $315 = $255; //@line 7991
     }
     $$1$1 = $$1 + 1 | 0; //@line 7994
     $268 = $315; //@line 7994
    }
    $265 = HEAP32[1963] | 0; //@line 7996
    if (!$265) {
     $$1$2 = $$1$1; //@line 7999
     $281 = $268; //@line 7999
    } else {
     if (!$268) {
      $270 = HEAP32[$265 + 56 >> 2] | 0; //@line 8004
      if (!$270) {
       $316 = 0; //@line 8007
      } else {
       if ((HEAP32[$265 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $270; //@line 8013
        HEAP32[$147 >> 2] = HEAP32[$265 + 60 >> 2]; //@line 8016
        $316 = $270; //@line 8017
       } else {
        $316 = 0; //@line 8019
       }
      }
     } else {
      $316 = $268; //@line 8023
     }
     $$1$2 = $$1$1 + 1 | 0; //@line 8026
     $281 = $316; //@line 8026
    }
    $278 = HEAP32[1964] | 0; //@line 8028
    if (!$278) {
     $$1$3 = $$1$2; //@line 8031
     $294 = $281; //@line 8031
    } else {
     if (!$281) {
      $283 = HEAP32[$278 + 56 >> 2] | 0; //@line 8036
      if (!$283) {
       $317 = 0; //@line 8039
      } else {
       if ((HEAP32[$278 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $283; //@line 8045
        HEAP32[$147 >> 2] = HEAP32[$278 + 60 >> 2]; //@line 8048
        $317 = $283; //@line 8049
       } else {
        $317 = 0; //@line 8051
       }
      }
     } else {
      $317 = $281; //@line 8055
     }
     $$1$3 = $$1$2 + 1 | 0; //@line 8058
     $294 = $317; //@line 8058
    }
    $291 = HEAP32[1965] | 0; //@line 8060
    if (!$291) {
     $$1$4 = $$1$3; //@line 8063
    } else {
     do {
      if (!$294) {
       $296 = HEAP32[$291 + 56 >> 2] | 0; //@line 8069
       if ($296 | 0) {
        if ((HEAP32[$291 + 8 >> 2] | 0) != ($0 | 0)) {
         break;
        }
        HEAP32[$146 >> 2] = $296; //@line 8078
        HEAP32[$147 >> 2] = HEAP32[$291 + 60 >> 2]; //@line 8081
       }
      }
     } while (0);
     $$1$4 = $$1$3 + 1 | 0; //@line 8086
    }
    HEAP32[7844 + ($$090114$lcssa << 2) >> 2] = $33; //@line 8089
    HEAP32[$155 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 8092
    do {
     if (!(HEAP8[8724] | 0)) {
      $173 = $33 + 44 | 0; //@line 8097
      $174 = HEAP32[$173 >> 2] | 0; //@line 8098
      do {
       if (!$174) {
        $189 = 0; //@line 8102
       } else {
        $177 = HEAP32[$174 + 4 >> 2] | 0; //@line 8105
        $AsyncCtx18 = _emscripten_alloc_async_context(44, sp) | 0; //@line 8106
        FUNCTION_TABLE_vii[$177 & 7]($8, $104); //@line 8107
        if (___async) {
         HEAP32[$AsyncCtx18 >> 2] = 178; //@line 8110
         HEAP32[$AsyncCtx18 + 4 >> 2] = $8; //@line 8112
         HEAP32[$AsyncCtx18 + 8 >> 2] = $9; //@line 8114
         HEAP32[$AsyncCtx18 + 12 >> 2] = $6; //@line 8116
         HEAP32[$AsyncCtx18 + 16 >> 2] = $33; //@line 8118
         HEAP32[$AsyncCtx18 + 20 >> 2] = $33; //@line 8120
         HEAP32[$AsyncCtx18 + 24 >> 2] = $173; //@line 8122
         HEAP32[$AsyncCtx18 + 28 >> 2] = $63; //@line 8124
         HEAP32[$AsyncCtx18 + 32 >> 2] = $173; //@line 8126
         HEAP32[$AsyncCtx18 + 36 >> 2] = $104; //@line 8128
         HEAP32[$AsyncCtx18 + 40 >> 2] = $46; //@line 8130
         sp = STACKTOP; //@line 8131
         STACKTOP = sp; //@line 8132
         return 0; //@line 8132
        } else {
         _emscripten_free_async_context($AsyncCtx18 | 0); //@line 8134
         $189 = HEAP32[$173 >> 2] | 0; //@line 8136
         break;
        }
       }
      } while (0);
      $188 = $8 + 12 | 0; //@line 8141
      HEAP32[$188 >> 2] = $189; //@line 8142
      $191 = $9 + 4 | 0; //@line 8144
      HEAP32[$191 >> 2] = 0; //@line 8146
      HEAP32[$191 + 4 >> 2] = 0; //@line 8149
      HEAP32[$9 >> 2] = 3; //@line 8150
      $195 = $9 + 12 | 0; //@line 8151
      HEAP32[$195 >> 2] = 752; //@line 8152
      $AsyncCtx49 = _emscripten_alloc_async_context(48, sp) | 0; //@line 8153
      $196 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $9) | 0; //@line 8154
      if (___async) {
       HEAP32[$AsyncCtx49 >> 2] = 179; //@line 8157
       HEAP32[$AsyncCtx49 + 4 >> 2] = $195; //@line 8159
       HEAP32[$AsyncCtx49 + 8 >> 2] = $8; //@line 8161
       HEAP32[$AsyncCtx49 + 12 >> 2] = $188; //@line 8163
       HEAP32[$AsyncCtx49 + 16 >> 2] = $9; //@line 8165
       HEAP32[$AsyncCtx49 + 20 >> 2] = $6; //@line 8167
       HEAP32[$AsyncCtx49 + 24 >> 2] = $33; //@line 8169
       HEAP32[$AsyncCtx49 + 28 >> 2] = $46; //@line 8171
       HEAP32[$AsyncCtx49 + 32 >> 2] = $33; //@line 8173
       HEAP32[$AsyncCtx49 + 36 >> 2] = $63; //@line 8175
       HEAP32[$AsyncCtx49 + 40 >> 2] = $173; //@line 8177
       HEAP32[$AsyncCtx49 + 44 >> 2] = $104; //@line 8179
       sp = STACKTOP; //@line 8180
       STACKTOP = sp; //@line 8181
       return 0; //@line 8181
      }
      _emscripten_free_async_context($AsyncCtx49 | 0); //@line 8183
      $208 = HEAP32[$195 >> 2] | 0; //@line 8184
      do {
       if ($208 | 0) {
        $211 = HEAP32[$208 + 8 >> 2] | 0; //@line 8189
        $AsyncCtx22 = _emscripten_alloc_async_context(44, sp) | 0; //@line 8190
        FUNCTION_TABLE_vi[$211 & 511]($9); //@line 8191
        if (___async) {
         HEAP32[$AsyncCtx22 >> 2] = 180; //@line 8194
         HEAP32[$AsyncCtx22 + 4 >> 2] = $8; //@line 8196
         HEAP32[$AsyncCtx22 + 8 >> 2] = $196; //@line 8198
         HEAP32[$AsyncCtx22 + 12 >> 2] = $188; //@line 8200
         HEAP32[$AsyncCtx22 + 16 >> 2] = $6; //@line 8202
         HEAP32[$AsyncCtx22 + 20 >> 2] = $33; //@line 8204
         HEAP32[$AsyncCtx22 + 24 >> 2] = $33; //@line 8206
         HEAP32[$AsyncCtx22 + 28 >> 2] = $63; //@line 8208
         HEAP32[$AsyncCtx22 + 32 >> 2] = $173; //@line 8210
         HEAP32[$AsyncCtx22 + 36 >> 2] = $104; //@line 8212
         HEAP32[$AsyncCtx22 + 40 >> 2] = $46; //@line 8214
         sp = STACKTOP; //@line 8215
         STACKTOP = sp; //@line 8216
         return 0; //@line 8216
        } else {
         _emscripten_free_async_context($AsyncCtx22 | 0); //@line 8218
         break;
        }
       }
      } while (0);
      $222 = ($196 | 0) == 0; //@line 8223
      $223 = HEAP32[$188 >> 2] | 0; //@line 8224
      do {
       if ($223 | 0) {
        $226 = HEAP32[$223 + 8 >> 2] | 0; //@line 8229
        $AsyncCtx26 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8230
        FUNCTION_TABLE_vi[$226 & 511]($8); //@line 8231
        if (___async) {
         HEAP32[$AsyncCtx26 >> 2] = 181; //@line 8234
         HEAP32[$AsyncCtx26 + 4 >> 2] = $6; //@line 8236
         HEAP32[$AsyncCtx26 + 8 >> 2] = $33; //@line 8238
         HEAP32[$AsyncCtx26 + 12 >> 2] = $33; //@line 8240
         HEAP8[$AsyncCtx26 + 16 >> 0] = $222 & 1; //@line 8243
         HEAP32[$AsyncCtx26 + 20 >> 2] = $63; //@line 8245
         HEAP32[$AsyncCtx26 + 24 >> 2] = $173; //@line 8247
         HEAP32[$AsyncCtx26 + 28 >> 2] = $104; //@line 8249
         HEAP32[$AsyncCtx26 + 32 >> 2] = $46; //@line 8251
         sp = STACKTOP; //@line 8252
         STACKTOP = sp; //@line 8253
         return 0; //@line 8253
        } else {
         _emscripten_free_async_context($AsyncCtx26 | 0); //@line 8255
         break;
        }
       }
      } while (0);
      if ($222) {
       HEAP8[8724] = 1; //@line 8261
       break;
      }
      $235 = HEAP32[$63 >> 2] | 0; //@line 8264
      if ($235 | 0) {
       __ZdlPv($235); //@line 8267
      }
      $237 = HEAP32[$173 >> 2] | 0; //@line 8269
      do {
       if ($237 | 0) {
        $240 = HEAP32[$237 + 8 >> 2] | 0; //@line 8274
        $AsyncCtx30 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8275
        FUNCTION_TABLE_vi[$240 & 511]($104); //@line 8276
        if (___async) {
         HEAP32[$AsyncCtx30 >> 2] = 182; //@line 8279
         HEAP32[$AsyncCtx30 + 4 >> 2] = $33; //@line 8281
         HEAP32[$AsyncCtx30 + 8 >> 2] = $46; //@line 8283
         HEAP32[$AsyncCtx30 + 12 >> 2] = $6; //@line 8285
         sp = STACKTOP; //@line 8286
         STACKTOP = sp; //@line 8287
         return 0; //@line 8287
        } else {
         _emscripten_free_async_context($AsyncCtx30 | 0); //@line 8289
         break;
        }
       }
      } while (0);
      $245 = HEAP32[$33 + 28 >> 2] | 0; //@line 8295
      do {
       if ($245 | 0) {
        $248 = HEAP32[$245 + 8 >> 2] | 0; //@line 8300
        $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8301
        FUNCTION_TABLE_vi[$248 & 511]($46); //@line 8302
        if (___async) {
         HEAP32[$AsyncCtx34 >> 2] = 183; //@line 8305
         HEAP32[$AsyncCtx34 + 4 >> 2] = $33; //@line 8307
         HEAP32[$AsyncCtx34 + 8 >> 2] = $6; //@line 8309
         sp = STACKTOP; //@line 8310
         STACKTOP = sp; //@line 8311
         return 0; //@line 8311
        } else {
         _emscripten_free_async_context($AsyncCtx34 | 0); //@line 8313
         break;
        }
       }
      } while (0);
      __ZdlPv($33); //@line 8318
      $$3 = -3007; //@line 8319
      break L7;
     }
    } while (0);
    $AsyncCtx46 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8323
    __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 8324
    if (___async) {
     HEAP32[$AsyncCtx46 >> 2] = 184; //@line 8327
     HEAP32[$AsyncCtx46 + 4 >> 2] = $33; //@line 8329
     HEAP32[$AsyncCtx46 + 8 >> 2] = $6; //@line 8331
     sp = STACKTOP; //@line 8332
     STACKTOP = sp; //@line 8333
     return 0; //@line 8333
    } else {
     _emscripten_free_async_context($AsyncCtx46 | 0); //@line 8335
     $$3 = HEAP32[$33 >> 2] | 0; //@line 8337
     break;
    }
   }
  }
 } while (0);
 $$5 = $$3; //@line 8343
 STACKTOP = sp; //@line 8344
 return $$5 | 0; //@line 8344
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_56($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1107 = 0, $$byval_copy = 0, $$byval_copy24 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $97 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20257
 STACKTOP = STACKTOP + 48 | 0; //@line 20258
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 20258
 $$byval_copy24 = sp + 20 | 0; //@line 20259
 $$byval_copy = sp; //@line 20260
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20262
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20264
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20266
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20268
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20270
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20272
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20274
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 20276
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20278
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20280
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20282
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20284
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20286
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20288
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20290
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20292
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20294
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20296
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20298
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20300
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20302
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20304
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 20306
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 20308
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 20310
 $52 = HEAP8[$0 + 101 >> 0] | 0; //@line 20312
 $54 = HEAP8[$0 + 102 >> 0] | 0; //@line 20314
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $150 = $50 + 1 << 24 >> 24; //@line 20319
  $151 = $52 + -1 << 24 >> 24; //@line 20320
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 20321
  $152 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($20, 0, $4, 512) | 0; //@line 20322
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 158; //@line 20325
   $153 = $ReallocAsyncCtx3 + 4 | 0; //@line 20326
   HEAP32[$153 >> 2] = $2; //@line 20327
   $154 = $ReallocAsyncCtx3 + 8 | 0; //@line 20328
   HEAP32[$154 >> 2] = $4; //@line 20329
   $155 = $ReallocAsyncCtx3 + 12 | 0; //@line 20330
   HEAP32[$155 >> 2] = $6; //@line 20331
   $156 = $ReallocAsyncCtx3 + 16 | 0; //@line 20332
   HEAP32[$156 >> 2] = $8; //@line 20333
   $157 = $ReallocAsyncCtx3 + 20 | 0; //@line 20334
   HEAP32[$157 >> 2] = $10; //@line 20335
   $158 = $ReallocAsyncCtx3 + 24 | 0; //@line 20336
   HEAP32[$158 >> 2] = $12; //@line 20337
   $159 = $ReallocAsyncCtx3 + 28 | 0; //@line 20338
   HEAP32[$159 >> 2] = $14; //@line 20339
   $160 = $ReallocAsyncCtx3 + 32 | 0; //@line 20340
   HEAP8[$160 >> 0] = $16; //@line 20341
   $161 = $ReallocAsyncCtx3 + 36 | 0; //@line 20342
   HEAP32[$161 >> 2] = $18; //@line 20343
   $162 = $ReallocAsyncCtx3 + 40 | 0; //@line 20344
   HEAP32[$162 >> 2] = $20; //@line 20345
   $163 = $ReallocAsyncCtx3 + 44 | 0; //@line 20346
   HEAP32[$163 >> 2] = $22; //@line 20347
   $164 = $ReallocAsyncCtx3 + 48 | 0; //@line 20348
   HEAP32[$164 >> 2] = $24; //@line 20349
   $165 = $ReallocAsyncCtx3 + 52 | 0; //@line 20350
   HEAP32[$165 >> 2] = $26; //@line 20351
   $166 = $ReallocAsyncCtx3 + 56 | 0; //@line 20352
   HEAP32[$166 >> 2] = $28; //@line 20353
   $167 = $ReallocAsyncCtx3 + 60 | 0; //@line 20354
   HEAP32[$167 >> 2] = $30; //@line 20355
   $168 = $ReallocAsyncCtx3 + 64 | 0; //@line 20356
   HEAP32[$168 >> 2] = $32; //@line 20357
   $169 = $ReallocAsyncCtx3 + 68 | 0; //@line 20358
   HEAP32[$169 >> 2] = $34; //@line 20359
   $170 = $ReallocAsyncCtx3 + 72 | 0; //@line 20360
   HEAP32[$170 >> 2] = $36; //@line 20361
   $171 = $ReallocAsyncCtx3 + 76 | 0; //@line 20362
   HEAP32[$171 >> 2] = $38; //@line 20363
   $172 = $ReallocAsyncCtx3 + 80 | 0; //@line 20364
   HEAP32[$172 >> 2] = $40; //@line 20365
   $173 = $ReallocAsyncCtx3 + 84 | 0; //@line 20366
   HEAP32[$173 >> 2] = $42; //@line 20367
   $174 = $ReallocAsyncCtx3 + 88 | 0; //@line 20368
   HEAP32[$174 >> 2] = $44; //@line 20369
   $175 = $ReallocAsyncCtx3 + 92 | 0; //@line 20370
   HEAP32[$175 >> 2] = $46; //@line 20371
   $176 = $ReallocAsyncCtx3 + 96 | 0; //@line 20372
   HEAP32[$176 >> 2] = $48; //@line 20373
   $177 = $ReallocAsyncCtx3 + 100 | 0; //@line 20374
   HEAP8[$177 >> 0] = $151; //@line 20375
   $178 = $ReallocAsyncCtx3 + 101 | 0; //@line 20376
   HEAP8[$178 >> 0] = $150; //@line 20377
   $179 = $ReallocAsyncCtx3 + 102 | 0; //@line 20378
   HEAP8[$179 >> 0] = $54; //@line 20379
   sp = STACKTOP; //@line 20380
   STACKTOP = sp; //@line 20381
   return;
  }
  HEAP32[___async_retval >> 2] = $152; //@line 20384
  ___async_unwind = 0; //@line 20385
  HEAP32[$ReallocAsyncCtx3 >> 2] = 158; //@line 20386
  $153 = $ReallocAsyncCtx3 + 4 | 0; //@line 20387
  HEAP32[$153 >> 2] = $2; //@line 20388
  $154 = $ReallocAsyncCtx3 + 8 | 0; //@line 20389
  HEAP32[$154 >> 2] = $4; //@line 20390
  $155 = $ReallocAsyncCtx3 + 12 | 0; //@line 20391
  HEAP32[$155 >> 2] = $6; //@line 20392
  $156 = $ReallocAsyncCtx3 + 16 | 0; //@line 20393
  HEAP32[$156 >> 2] = $8; //@line 20394
  $157 = $ReallocAsyncCtx3 + 20 | 0; //@line 20395
  HEAP32[$157 >> 2] = $10; //@line 20396
  $158 = $ReallocAsyncCtx3 + 24 | 0; //@line 20397
  HEAP32[$158 >> 2] = $12; //@line 20398
  $159 = $ReallocAsyncCtx3 + 28 | 0; //@line 20399
  HEAP32[$159 >> 2] = $14; //@line 20400
  $160 = $ReallocAsyncCtx3 + 32 | 0; //@line 20401
  HEAP8[$160 >> 0] = $16; //@line 20402
  $161 = $ReallocAsyncCtx3 + 36 | 0; //@line 20403
  HEAP32[$161 >> 2] = $18; //@line 20404
  $162 = $ReallocAsyncCtx3 + 40 | 0; //@line 20405
  HEAP32[$162 >> 2] = $20; //@line 20406
  $163 = $ReallocAsyncCtx3 + 44 | 0; //@line 20407
  HEAP32[$163 >> 2] = $22; //@line 20408
  $164 = $ReallocAsyncCtx3 + 48 | 0; //@line 20409
  HEAP32[$164 >> 2] = $24; //@line 20410
  $165 = $ReallocAsyncCtx3 + 52 | 0; //@line 20411
  HEAP32[$165 >> 2] = $26; //@line 20412
  $166 = $ReallocAsyncCtx3 + 56 | 0; //@line 20413
  HEAP32[$166 >> 2] = $28; //@line 20414
  $167 = $ReallocAsyncCtx3 + 60 | 0; //@line 20415
  HEAP32[$167 >> 2] = $30; //@line 20416
  $168 = $ReallocAsyncCtx3 + 64 | 0; //@line 20417
  HEAP32[$168 >> 2] = $32; //@line 20418
  $169 = $ReallocAsyncCtx3 + 68 | 0; //@line 20419
  HEAP32[$169 >> 2] = $34; //@line 20420
  $170 = $ReallocAsyncCtx3 + 72 | 0; //@line 20421
  HEAP32[$170 >> 2] = $36; //@line 20422
  $171 = $ReallocAsyncCtx3 + 76 | 0; //@line 20423
  HEAP32[$171 >> 2] = $38; //@line 20424
  $172 = $ReallocAsyncCtx3 + 80 | 0; //@line 20425
  HEAP32[$172 >> 2] = $40; //@line 20426
  $173 = $ReallocAsyncCtx3 + 84 | 0; //@line 20427
  HEAP32[$173 >> 2] = $42; //@line 20428
  $174 = $ReallocAsyncCtx3 + 88 | 0; //@line 20429
  HEAP32[$174 >> 2] = $44; //@line 20430
  $175 = $ReallocAsyncCtx3 + 92 | 0; //@line 20431
  HEAP32[$175 >> 2] = $46; //@line 20432
  $176 = $ReallocAsyncCtx3 + 96 | 0; //@line 20433
  HEAP32[$176 >> 2] = $48; //@line 20434
  $177 = $ReallocAsyncCtx3 + 100 | 0; //@line 20435
  HEAP8[$177 >> 0] = $151; //@line 20436
  $178 = $ReallocAsyncCtx3 + 101 | 0; //@line 20437
  HEAP8[$178 >> 0] = $150; //@line 20438
  $179 = $ReallocAsyncCtx3 + 102 | 0; //@line 20439
  HEAP8[$179 >> 0] = $54; //@line 20440
  sp = STACKTOP; //@line 20441
  STACKTOP = sp; //@line 20442
  return;
 }
 $58 = $54 + 1 << 24 >> 24; //@line 20444
 HEAP32[$30 >> 2] = 0; //@line 20445
 HEAP32[$30 + 4 >> 2] = 0; //@line 20445
 HEAP32[$30 + 8 >> 2] = 0; //@line 20445
 HEAP32[$30 + 12 >> 2] = 0; //@line 20445
 HEAP32[$30 + 16 >> 2] = 0; //@line 20445
 HEAP32[$$byval_copy >> 2] = HEAP32[$32 >> 2]; //@line 20446
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$32 + 4 >> 2]; //@line 20446
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$32 + 8 >> 2]; //@line 20446
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$32 + 12 >> 2]; //@line 20446
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$32 + 16 >> 2]; //@line 20446
 __ZN13SocketAddressC2E10nsapi_addrt($22, $$byval_copy, 0); //@line 20447
 do {
  if ($52 << 24 >> 24) {
   if (($58 & 255) > 9) {
    if (!($50 << 24 >> 24)) {
     break;
    } else {
     $$1107 = 0; //@line 20457
     $62 = 0; //@line 20457
    }
   } else {
    if (($58 & 255) < 5) {
     $$1107 = $50; //@line 20462
     $62 = $58; //@line 20462
    } else {
     $97 = 648 + ((($58 & 255) + -5 | 0) * 20 | 0) | 0; //@line 20466
     HEAP32[$$byval_copy24 >> 2] = HEAP32[$97 >> 2]; //@line 20467
     HEAP32[$$byval_copy24 + 4 >> 2] = HEAP32[$97 + 4 >> 2]; //@line 20467
     HEAP32[$$byval_copy24 + 8 >> 2] = HEAP32[$97 + 8 >> 2]; //@line 20467
     HEAP32[$$byval_copy24 + 12 >> 2] = HEAP32[$97 + 12 >> 2]; //@line 20467
     HEAP32[$$byval_copy24 + 16 >> 2] = HEAP32[$97 + 16 >> 2]; //@line 20467
     __ZN13SocketAddress8set_addrE10nsapi_addr($22, $$byval_copy24); //@line 20468
     __ZN13SocketAddress8set_portEt($22, 53); //@line 20469
     HEAP8[$4 >> 0] = 0; //@line 20470
     HEAP8[$38 >> 0] = 1; //@line 20471
     HEAP8[$40 >> 0] = 1; //@line 20472
     HEAP8[$42 >> 0] = 0; //@line 20473
     HEAP8[$44 >> 0] = 0; //@line 20474
     HEAP8[$46 >> 0] = 1; //@line 20475
     HEAP8[$48 >> 0] = 0; //@line 20476
     HEAP8[$48 + 1 >> 0] = 0; //@line 20476
     HEAP8[$48 + 2 >> 0] = 0; //@line 20476
     HEAP8[$48 + 3 >> 0] = 0; //@line 20476
     HEAP8[$48 + 4 >> 0] = 0; //@line 20476
     HEAP8[$48 + 5 >> 0] = 0; //@line 20476
     if (!(HEAP8[$12 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $14; //@line 20480
     } else {
      $$048$i = $12; //@line 20482
      $$sroa$0$0$in47$i = $14; //@line 20482
      while (1) {
       $100 = _strcspn($$048$i, 5116) | 0; //@line 20484
       $102 = $$sroa$0$0$in47$i + 1 | 0; //@line 20486
       HEAP8[$$sroa$0$0$in47$i >> 0] = $100; //@line 20487
       $103 = $100 & 255; //@line 20488
       _memcpy($102 | 0, $$048$i | 0, $103 | 0) | 0; //@line 20489
       $104 = $102 + $103 | 0; //@line 20490
       $$048$i = $$048$i + ($100 + ((HEAP8[$$048$i + $100 >> 0] | 0) == 46 & 1)) | 0; //@line 20496
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $104; //@line 20500
        break;
       } else {
        $$sroa$0$0$in47$i = $104; //@line 20503
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 20508
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 20510
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $16; //@line 20512
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 20514
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 20517
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 20519
     $120 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($20, $22, $4, $$sroa$0$0$in$lcssa$i + 5 - $18 | 0) | 0; //@line 20520
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 20523
      $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 20524
      HEAP32[$121 >> 2] = $2; //@line 20525
      $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 20526
      HEAP32[$122 >> 2] = $4; //@line 20527
      $123 = $ReallocAsyncCtx4 + 12 | 0; //@line 20528
      HEAP32[$123 >> 2] = $6; //@line 20529
      $124 = $ReallocAsyncCtx4 + 16 | 0; //@line 20530
      HEAP32[$124 >> 2] = $8; //@line 20531
      $125 = $ReallocAsyncCtx4 + 20 | 0; //@line 20532
      HEAP32[$125 >> 2] = $10; //@line 20533
      $126 = $ReallocAsyncCtx4 + 24 | 0; //@line 20534
      HEAP32[$126 >> 2] = $12; //@line 20535
      $127 = $ReallocAsyncCtx4 + 28 | 0; //@line 20536
      HEAP32[$127 >> 2] = $14; //@line 20537
      $128 = $ReallocAsyncCtx4 + 32 | 0; //@line 20538
      HEAP8[$128 >> 0] = $16; //@line 20539
      $129 = $ReallocAsyncCtx4 + 36 | 0; //@line 20540
      HEAP32[$129 >> 2] = $18; //@line 20541
      $130 = $ReallocAsyncCtx4 + 40 | 0; //@line 20542
      HEAP32[$130 >> 2] = $20; //@line 20543
      $131 = $ReallocAsyncCtx4 + 44 | 0; //@line 20544
      HEAP32[$131 >> 2] = $22; //@line 20545
      $132 = $ReallocAsyncCtx4 + 48 | 0; //@line 20546
      HEAP32[$132 >> 2] = $24; //@line 20547
      $133 = $ReallocAsyncCtx4 + 52 | 0; //@line 20548
      HEAP32[$133 >> 2] = $26; //@line 20549
      $134 = $ReallocAsyncCtx4 + 56 | 0; //@line 20550
      HEAP32[$134 >> 2] = $28; //@line 20551
      $135 = $ReallocAsyncCtx4 + 60 | 0; //@line 20552
      HEAP32[$135 >> 2] = $30; //@line 20553
      $136 = $ReallocAsyncCtx4 + 64 | 0; //@line 20554
      HEAP32[$136 >> 2] = $32; //@line 20555
      $137 = $ReallocAsyncCtx4 + 68 | 0; //@line 20556
      HEAP32[$137 >> 2] = $34; //@line 20557
      $138 = $ReallocAsyncCtx4 + 72 | 0; //@line 20558
      HEAP32[$138 >> 2] = $36; //@line 20559
      $139 = $ReallocAsyncCtx4 + 76 | 0; //@line 20560
      HEAP32[$139 >> 2] = $38; //@line 20561
      $140 = $ReallocAsyncCtx4 + 80 | 0; //@line 20562
      HEAP32[$140 >> 2] = $40; //@line 20563
      $141 = $ReallocAsyncCtx4 + 84 | 0; //@line 20564
      HEAP32[$141 >> 2] = $42; //@line 20565
      $142 = $ReallocAsyncCtx4 + 88 | 0; //@line 20566
      HEAP32[$142 >> 2] = $44; //@line 20567
      $143 = $ReallocAsyncCtx4 + 92 | 0; //@line 20568
      HEAP32[$143 >> 2] = $46; //@line 20569
      $144 = $ReallocAsyncCtx4 + 96 | 0; //@line 20570
      HEAP32[$144 >> 2] = $48; //@line 20571
      $145 = $ReallocAsyncCtx4 + 100 | 0; //@line 20572
      HEAP8[$145 >> 0] = $50; //@line 20573
      $146 = $ReallocAsyncCtx4 + 101 | 0; //@line 20574
      HEAP8[$146 >> 0] = $52; //@line 20575
      $147 = $ReallocAsyncCtx4 + 102 | 0; //@line 20576
      HEAP8[$147 >> 0] = $58; //@line 20577
      sp = STACKTOP; //@line 20578
      STACKTOP = sp; //@line 20579
      return;
     }
     HEAP32[___async_retval >> 2] = $120; //@line 20582
     ___async_unwind = 0; //@line 20583
     HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 20584
     $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 20585
     HEAP32[$121 >> 2] = $2; //@line 20586
     $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 20587
     HEAP32[$122 >> 2] = $4; //@line 20588
     $123 = $ReallocAsyncCtx4 + 12 | 0; //@line 20589
     HEAP32[$123 >> 2] = $6; //@line 20590
     $124 = $ReallocAsyncCtx4 + 16 | 0; //@line 20591
     HEAP32[$124 >> 2] = $8; //@line 20592
     $125 = $ReallocAsyncCtx4 + 20 | 0; //@line 20593
     HEAP32[$125 >> 2] = $10; //@line 20594
     $126 = $ReallocAsyncCtx4 + 24 | 0; //@line 20595
     HEAP32[$126 >> 2] = $12; //@line 20596
     $127 = $ReallocAsyncCtx4 + 28 | 0; //@line 20597
     HEAP32[$127 >> 2] = $14; //@line 20598
     $128 = $ReallocAsyncCtx4 + 32 | 0; //@line 20599
     HEAP8[$128 >> 0] = $16; //@line 20600
     $129 = $ReallocAsyncCtx4 + 36 | 0; //@line 20601
     HEAP32[$129 >> 2] = $18; //@line 20602
     $130 = $ReallocAsyncCtx4 + 40 | 0; //@line 20603
     HEAP32[$130 >> 2] = $20; //@line 20604
     $131 = $ReallocAsyncCtx4 + 44 | 0; //@line 20605
     HEAP32[$131 >> 2] = $22; //@line 20606
     $132 = $ReallocAsyncCtx4 + 48 | 0; //@line 20607
     HEAP32[$132 >> 2] = $24; //@line 20608
     $133 = $ReallocAsyncCtx4 + 52 | 0; //@line 20609
     HEAP32[$133 >> 2] = $26; //@line 20610
     $134 = $ReallocAsyncCtx4 + 56 | 0; //@line 20611
     HEAP32[$134 >> 2] = $28; //@line 20612
     $135 = $ReallocAsyncCtx4 + 60 | 0; //@line 20613
     HEAP32[$135 >> 2] = $30; //@line 20614
     $136 = $ReallocAsyncCtx4 + 64 | 0; //@line 20615
     HEAP32[$136 >> 2] = $32; //@line 20616
     $137 = $ReallocAsyncCtx4 + 68 | 0; //@line 20617
     HEAP32[$137 >> 2] = $34; //@line 20618
     $138 = $ReallocAsyncCtx4 + 72 | 0; //@line 20619
     HEAP32[$138 >> 2] = $36; //@line 20620
     $139 = $ReallocAsyncCtx4 + 76 | 0; //@line 20621
     HEAP32[$139 >> 2] = $38; //@line 20622
     $140 = $ReallocAsyncCtx4 + 80 | 0; //@line 20623
     HEAP32[$140 >> 2] = $40; //@line 20624
     $141 = $ReallocAsyncCtx4 + 84 | 0; //@line 20625
     HEAP32[$141 >> 2] = $42; //@line 20626
     $142 = $ReallocAsyncCtx4 + 88 | 0; //@line 20627
     HEAP32[$142 >> 2] = $44; //@line 20628
     $143 = $ReallocAsyncCtx4 + 92 | 0; //@line 20629
     HEAP32[$143 >> 2] = $46; //@line 20630
     $144 = $ReallocAsyncCtx4 + 96 | 0; //@line 20631
     HEAP32[$144 >> 2] = $48; //@line 20632
     $145 = $ReallocAsyncCtx4 + 100 | 0; //@line 20633
     HEAP8[$145 >> 0] = $50; //@line 20634
     $146 = $ReallocAsyncCtx4 + 101 | 0; //@line 20635
     HEAP8[$146 >> 0] = $52; //@line 20636
     $147 = $ReallocAsyncCtx4 + 102 | 0; //@line 20637
     HEAP8[$147 >> 0] = $58; //@line 20638
     sp = STACKTOP; //@line 20639
     STACKTOP = sp; //@line 20640
     return;
    }
   }
   $65 = HEAP32[(HEAP32[$34 >> 2] | 0) + 28 >> 2] | 0; //@line 20646
   $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 20647
   $66 = FUNCTION_TABLE_iiii[$65 & 31]($36, $62 & 255, $22) | 0; //@line 20648
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 20651
    $67 = $ReallocAsyncCtx + 4 | 0; //@line 20652
    HEAP32[$67 >> 2] = $2; //@line 20653
    $68 = $ReallocAsyncCtx + 8 | 0; //@line 20654
    HEAP32[$68 >> 2] = $4; //@line 20655
    $69 = $ReallocAsyncCtx + 12 | 0; //@line 20656
    HEAP32[$69 >> 2] = $6; //@line 20657
    $70 = $ReallocAsyncCtx + 16 | 0; //@line 20658
    HEAP32[$70 >> 2] = $8; //@line 20659
    $71 = $ReallocAsyncCtx + 20 | 0; //@line 20660
    HEAP32[$71 >> 2] = $10; //@line 20661
    $72 = $ReallocAsyncCtx + 24 | 0; //@line 20662
    HEAP32[$72 >> 2] = $12; //@line 20663
    $73 = $ReallocAsyncCtx + 28 | 0; //@line 20664
    HEAP32[$73 >> 2] = $14; //@line 20665
    $74 = $ReallocAsyncCtx + 32 | 0; //@line 20666
    HEAP8[$74 >> 0] = $16; //@line 20667
    $75 = $ReallocAsyncCtx + 36 | 0; //@line 20668
    HEAP32[$75 >> 2] = $18; //@line 20669
    $76 = $ReallocAsyncCtx + 40 | 0; //@line 20670
    HEAP32[$76 >> 2] = $20; //@line 20671
    $77 = $ReallocAsyncCtx + 44 | 0; //@line 20672
    HEAP32[$77 >> 2] = $22; //@line 20673
    $78 = $ReallocAsyncCtx + 48 | 0; //@line 20674
    HEAP8[$78 >> 0] = $52; //@line 20675
    $79 = $ReallocAsyncCtx + 52 | 0; //@line 20676
    HEAP32[$79 >> 2] = $24; //@line 20677
    $80 = $ReallocAsyncCtx + 56 | 0; //@line 20678
    HEAP32[$80 >> 2] = $26; //@line 20679
    $81 = $ReallocAsyncCtx + 60 | 0; //@line 20680
    HEAP32[$81 >> 2] = $28; //@line 20681
    $82 = $ReallocAsyncCtx + 64 | 0; //@line 20682
    HEAP32[$82 >> 2] = $30; //@line 20683
    $83 = $ReallocAsyncCtx + 68 | 0; //@line 20684
    HEAP32[$83 >> 2] = $32; //@line 20685
    $84 = $ReallocAsyncCtx + 72 | 0; //@line 20686
    HEAP8[$84 >> 0] = $$1107; //@line 20687
    $85 = $ReallocAsyncCtx + 76 | 0; //@line 20688
    HEAP32[$85 >> 2] = $34; //@line 20689
    $86 = $ReallocAsyncCtx + 80 | 0; //@line 20690
    HEAP32[$86 >> 2] = $36; //@line 20691
    $87 = $ReallocAsyncCtx + 84 | 0; //@line 20692
    HEAP8[$87 >> 0] = $62; //@line 20693
    $88 = $ReallocAsyncCtx + 88 | 0; //@line 20694
    HEAP32[$88 >> 2] = $38; //@line 20695
    $89 = $ReallocAsyncCtx + 92 | 0; //@line 20696
    HEAP32[$89 >> 2] = $40; //@line 20697
    $90 = $ReallocAsyncCtx + 96 | 0; //@line 20698
    HEAP32[$90 >> 2] = $42; //@line 20699
    $91 = $ReallocAsyncCtx + 100 | 0; //@line 20700
    HEAP32[$91 >> 2] = $44; //@line 20701
    $92 = $ReallocAsyncCtx + 104 | 0; //@line 20702
    HEAP32[$92 >> 2] = $46; //@line 20703
    $93 = $ReallocAsyncCtx + 108 | 0; //@line 20704
    HEAP32[$93 >> 2] = $48; //@line 20705
    sp = STACKTOP; //@line 20706
    STACKTOP = sp; //@line 20707
    return;
   }
   HEAP32[___async_retval >> 2] = $66; //@line 20710
   ___async_unwind = 0; //@line 20711
   HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 20712
   $67 = $ReallocAsyncCtx + 4 | 0; //@line 20713
   HEAP32[$67 >> 2] = $2; //@line 20714
   $68 = $ReallocAsyncCtx + 8 | 0; //@line 20715
   HEAP32[$68 >> 2] = $4; //@line 20716
   $69 = $ReallocAsyncCtx + 12 | 0; //@line 20717
   HEAP32[$69 >> 2] = $6; //@line 20718
   $70 = $ReallocAsyncCtx + 16 | 0; //@line 20719
   HEAP32[$70 >> 2] = $8; //@line 20720
   $71 = $ReallocAsyncCtx + 20 | 0; //@line 20721
   HEAP32[$71 >> 2] = $10; //@line 20722
   $72 = $ReallocAsyncCtx + 24 | 0; //@line 20723
   HEAP32[$72 >> 2] = $12; //@line 20724
   $73 = $ReallocAsyncCtx + 28 | 0; //@line 20725
   HEAP32[$73 >> 2] = $14; //@line 20726
   $74 = $ReallocAsyncCtx + 32 | 0; //@line 20727
   HEAP8[$74 >> 0] = $16; //@line 20728
   $75 = $ReallocAsyncCtx + 36 | 0; //@line 20729
   HEAP32[$75 >> 2] = $18; //@line 20730
   $76 = $ReallocAsyncCtx + 40 | 0; //@line 20731
   HEAP32[$76 >> 2] = $20; //@line 20732
   $77 = $ReallocAsyncCtx + 44 | 0; //@line 20733
   HEAP32[$77 >> 2] = $22; //@line 20734
   $78 = $ReallocAsyncCtx + 48 | 0; //@line 20735
   HEAP8[$78 >> 0] = $52; //@line 20736
   $79 = $ReallocAsyncCtx + 52 | 0; //@line 20737
   HEAP32[$79 >> 2] = $24; //@line 20738
   $80 = $ReallocAsyncCtx + 56 | 0; //@line 20739
   HEAP32[$80 >> 2] = $26; //@line 20740
   $81 = $ReallocAsyncCtx + 60 | 0; //@line 20741
   HEAP32[$81 >> 2] = $28; //@line 20742
   $82 = $ReallocAsyncCtx + 64 | 0; //@line 20743
   HEAP32[$82 >> 2] = $30; //@line 20744
   $83 = $ReallocAsyncCtx + 68 | 0; //@line 20745
   HEAP32[$83 >> 2] = $32; //@line 20746
   $84 = $ReallocAsyncCtx + 72 | 0; //@line 20747
   HEAP8[$84 >> 0] = $$1107; //@line 20748
   $85 = $ReallocAsyncCtx + 76 | 0; //@line 20749
   HEAP32[$85 >> 2] = $34; //@line 20750
   $86 = $ReallocAsyncCtx + 80 | 0; //@line 20751
   HEAP32[$86 >> 2] = $36; //@line 20752
   $87 = $ReallocAsyncCtx + 84 | 0; //@line 20753
   HEAP8[$87 >> 0] = $62; //@line 20754
   $88 = $ReallocAsyncCtx + 88 | 0; //@line 20755
   HEAP32[$88 >> 2] = $38; //@line 20756
   $89 = $ReallocAsyncCtx + 92 | 0; //@line 20757
   HEAP32[$89 >> 2] = $40; //@line 20758
   $90 = $ReallocAsyncCtx + 96 | 0; //@line 20759
   HEAP32[$90 >> 2] = $42; //@line 20760
   $91 = $ReallocAsyncCtx + 100 | 0; //@line 20761
   HEAP32[$91 >> 2] = $44; //@line 20762
   $92 = $ReallocAsyncCtx + 104 | 0; //@line 20763
   HEAP32[$92 >> 2] = $46; //@line 20764
   $93 = $ReallocAsyncCtx + 108 | 0; //@line 20765
   HEAP32[$93 >> 2] = $48; //@line 20766
   sp = STACKTOP; //@line 20767
   STACKTOP = sp; //@line 20768
   return;
  }
 } while (0);
 _free($4); //@line 20771
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 20772
 $181 = __ZN6Socket5closeEv($26) | 0; //@line 20773
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 20776
  $182 = $ReallocAsyncCtx6 + 4 | 0; //@line 20777
  HEAP32[$182 >> 2] = -3009; //@line 20778
  $183 = $ReallocAsyncCtx6 + 8 | 0; //@line 20779
  HEAP32[$183 >> 2] = $20; //@line 20780
  $184 = $ReallocAsyncCtx6 + 12 | 0; //@line 20781
  HEAP32[$184 >> 2] = $28; //@line 20782
  sp = STACKTOP; //@line 20783
  STACKTOP = sp; //@line 20784
  return;
 }
 HEAP32[___async_retval >> 2] = $181; //@line 20787
 ___async_unwind = 0; //@line 20788
 HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 20789
 $182 = $ReallocAsyncCtx6 + 4 | 0; //@line 20790
 HEAP32[$182 >> 2] = -3009; //@line 20791
 $183 = $ReallocAsyncCtx6 + 8 | 0; //@line 20792
 HEAP32[$183 >> 2] = $20; //@line 20793
 $184 = $ReallocAsyncCtx6 + 12 | 0; //@line 20794
 HEAP32[$184 >> 2] = $28; //@line 20795
 sp = STACKTOP; //@line 20796
 STACKTOP = sp; //@line 20797
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_110($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $107 = 0, $108 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $125 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $173 = 0, $175 = 0, $18 = 0, $183 = 0, $186 = 0, $188 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $209 = 0, $212 = 0, $214 = 0, $22 = 0, $227 = 0, $228 = 0, $229 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3518
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3520
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3522
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3524
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3526
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3528
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3530
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3532
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3534
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3536
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3538
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3540
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3542
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3544
 $26 = $2 + 12 | 0; //@line 3545
 HEAP32[$26 >> 2] = $AsyncRetVal; //@line 3546
 if (!$AsyncRetVal) {
  __ZdlPv($2); //@line 3549
  HEAP32[___async_retval >> 2] = -3007; //@line 3551
  return;
 }
 _strcpy($AsyncRetVal, $24) | 0; //@line 3554
 HEAP32[$2 + 4 >> 2] = -3019; //@line 3556
 do {
  if (($22 | 0) != ($20 | 0)) {
   $30 = $2 + 28 | 0; //@line 3560
   $31 = HEAP32[$30 >> 2] | 0; //@line 3561
   if ($31 | 0) {
    $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 3565
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 3566
    FUNCTION_TABLE_vi[$34 & 511]($22); //@line 3567
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 174; //@line 3570
     $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 3571
     HEAP32[$35 >> 2] = $4; //@line 3572
     $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 3573
     HEAP32[$36 >> 2] = $2; //@line 3574
     $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 3575
     HEAP32[$37 >> 2] = $6; //@line 3576
     $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 3577
     HEAP32[$38 >> 2] = $8; //@line 3578
     $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 3579
     HEAP32[$39 >> 2] = $10; //@line 3580
     $40 = $ReallocAsyncCtx2 + 24 | 0; //@line 3581
     HEAP32[$40 >> 2] = $12; //@line 3582
     $41 = $ReallocAsyncCtx2 + 28 | 0; //@line 3583
     HEAP32[$41 >> 2] = $14; //@line 3584
     $42 = $ReallocAsyncCtx2 + 32 | 0; //@line 3585
     HEAP32[$42 >> 2] = $16; //@line 3586
     $43 = $ReallocAsyncCtx2 + 36 | 0; //@line 3587
     HEAP32[$43 >> 2] = $18; //@line 3588
     $44 = $ReallocAsyncCtx2 + 40 | 0; //@line 3589
     HEAP32[$44 >> 2] = $26; //@line 3590
     $45 = $ReallocAsyncCtx2 + 44 | 0; //@line 3591
     HEAP32[$45 >> 2] = $30; //@line 3592
     $46 = $ReallocAsyncCtx2 + 48 | 0; //@line 3593
     HEAP32[$46 >> 2] = $20; //@line 3594
     $47 = $ReallocAsyncCtx2 + 52 | 0; //@line 3595
     HEAP32[$47 >> 2] = $22; //@line 3596
     sp = STACKTOP; //@line 3597
     return;
    }
    ___async_unwind = 0; //@line 3600
    HEAP32[$ReallocAsyncCtx2 >> 2] = 174; //@line 3601
    $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 3602
    HEAP32[$35 >> 2] = $4; //@line 3603
    $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 3604
    HEAP32[$36 >> 2] = $2; //@line 3605
    $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 3606
    HEAP32[$37 >> 2] = $6; //@line 3607
    $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 3608
    HEAP32[$38 >> 2] = $8; //@line 3609
    $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 3610
    HEAP32[$39 >> 2] = $10; //@line 3611
    $40 = $ReallocAsyncCtx2 + 24 | 0; //@line 3612
    HEAP32[$40 >> 2] = $12; //@line 3613
    $41 = $ReallocAsyncCtx2 + 28 | 0; //@line 3614
    HEAP32[$41 >> 2] = $14; //@line 3615
    $42 = $ReallocAsyncCtx2 + 32 | 0; //@line 3616
    HEAP32[$42 >> 2] = $16; //@line 3617
    $43 = $ReallocAsyncCtx2 + 36 | 0; //@line 3618
    HEAP32[$43 >> 2] = $18; //@line 3619
    $44 = $ReallocAsyncCtx2 + 40 | 0; //@line 3620
    HEAP32[$44 >> 2] = $26; //@line 3621
    $45 = $ReallocAsyncCtx2 + 44 | 0; //@line 3622
    HEAP32[$45 >> 2] = $30; //@line 3623
    $46 = $ReallocAsyncCtx2 + 48 | 0; //@line 3624
    HEAP32[$46 >> 2] = $20; //@line 3625
    $47 = $ReallocAsyncCtx2 + 52 | 0; //@line 3626
    HEAP32[$47 >> 2] = $22; //@line 3627
    sp = STACKTOP; //@line 3628
    return;
   }
   $48 = $20 + 12 | 0; //@line 3631
   $49 = HEAP32[$48 >> 2] | 0; //@line 3632
   if (!$49) {
    HEAP32[$30 >> 2] = 0; //@line 3635
    break;
   }
   $52 = HEAP32[$49 + 4 >> 2] | 0; //@line 3639
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 3640
   FUNCTION_TABLE_vii[$52 & 7]($22, $20); //@line 3641
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 3644
    $53 = $ReallocAsyncCtx3 + 4 | 0; //@line 3645
    HEAP32[$53 >> 2] = $4; //@line 3646
    $54 = $ReallocAsyncCtx3 + 8 | 0; //@line 3647
    HEAP32[$54 >> 2] = $2; //@line 3648
    $55 = $ReallocAsyncCtx3 + 12 | 0; //@line 3649
    HEAP32[$55 >> 2] = $6; //@line 3650
    $56 = $ReallocAsyncCtx3 + 16 | 0; //@line 3651
    HEAP32[$56 >> 2] = $8; //@line 3652
    $57 = $ReallocAsyncCtx3 + 20 | 0; //@line 3653
    HEAP32[$57 >> 2] = $10; //@line 3654
    $58 = $ReallocAsyncCtx3 + 24 | 0; //@line 3655
    HEAP32[$58 >> 2] = $12; //@line 3656
    $59 = $ReallocAsyncCtx3 + 28 | 0; //@line 3657
    HEAP32[$59 >> 2] = $14; //@line 3658
    $60 = $ReallocAsyncCtx3 + 32 | 0; //@line 3659
    HEAP32[$60 >> 2] = $16; //@line 3660
    $61 = $ReallocAsyncCtx3 + 36 | 0; //@line 3661
    HEAP32[$61 >> 2] = $18; //@line 3662
    $62 = $ReallocAsyncCtx3 + 40 | 0; //@line 3663
    HEAP32[$62 >> 2] = $48; //@line 3664
    $63 = $ReallocAsyncCtx3 + 44 | 0; //@line 3665
    HEAP32[$63 >> 2] = $26; //@line 3666
    $64 = $ReallocAsyncCtx3 + 48 | 0; //@line 3667
    HEAP32[$64 >> 2] = $30; //@line 3668
    $65 = $ReallocAsyncCtx3 + 52 | 0; //@line 3669
    HEAP32[$65 >> 2] = $22; //@line 3670
    sp = STACKTOP; //@line 3671
    return;
   }
   ___async_unwind = 0; //@line 3674
   HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 3675
   $53 = $ReallocAsyncCtx3 + 4 | 0; //@line 3676
   HEAP32[$53 >> 2] = $4; //@line 3677
   $54 = $ReallocAsyncCtx3 + 8 | 0; //@line 3678
   HEAP32[$54 >> 2] = $2; //@line 3679
   $55 = $ReallocAsyncCtx3 + 12 | 0; //@line 3680
   HEAP32[$55 >> 2] = $6; //@line 3681
   $56 = $ReallocAsyncCtx3 + 16 | 0; //@line 3682
   HEAP32[$56 >> 2] = $8; //@line 3683
   $57 = $ReallocAsyncCtx3 + 20 | 0; //@line 3684
   HEAP32[$57 >> 2] = $10; //@line 3685
   $58 = $ReallocAsyncCtx3 + 24 | 0; //@line 3686
   HEAP32[$58 >> 2] = $12; //@line 3687
   $59 = $ReallocAsyncCtx3 + 28 | 0; //@line 3688
   HEAP32[$59 >> 2] = $14; //@line 3689
   $60 = $ReallocAsyncCtx3 + 32 | 0; //@line 3690
   HEAP32[$60 >> 2] = $16; //@line 3691
   $61 = $ReallocAsyncCtx3 + 36 | 0; //@line 3692
   HEAP32[$61 >> 2] = $18; //@line 3693
   $62 = $ReallocAsyncCtx3 + 40 | 0; //@line 3694
   HEAP32[$62 >> 2] = $48; //@line 3695
   $63 = $ReallocAsyncCtx3 + 44 | 0; //@line 3696
   HEAP32[$63 >> 2] = $26; //@line 3697
   $64 = $ReallocAsyncCtx3 + 48 | 0; //@line 3698
   HEAP32[$64 >> 2] = $30; //@line 3699
   $65 = $ReallocAsyncCtx3 + 52 | 0; //@line 3700
   HEAP32[$65 >> 2] = $22; //@line 3701
   sp = STACKTOP; //@line 3702
   return;
  }
 } while (0);
 $66 = $2 + 32 | 0; //@line 3706
 do {
  if (($66 | 0) != ($10 | 0)) {
   $68 = $2 + 44 | 0; //@line 3710
   $69 = HEAP32[$68 >> 2] | 0; //@line 3711
   if ($69 | 0) {
    $72 = HEAP32[$69 + 8 >> 2] | 0; //@line 3715
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 3716
    FUNCTION_TABLE_vi[$72 & 511]($66); //@line 3717
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 3720
     $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 3721
     HEAP32[$73 >> 2] = $4; //@line 3722
     $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 3723
     HEAP32[$74 >> 2] = $2; //@line 3724
     $75 = $ReallocAsyncCtx4 + 12 | 0; //@line 3725
     HEAP32[$75 >> 2] = $6; //@line 3726
     $76 = $ReallocAsyncCtx4 + 16 | 0; //@line 3727
     HEAP32[$76 >> 2] = $8; //@line 3728
     $77 = $ReallocAsyncCtx4 + 20 | 0; //@line 3729
     HEAP32[$77 >> 2] = $68; //@line 3730
     $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 3731
     HEAP32[$78 >> 2] = $10; //@line 3732
     $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 3733
     HEAP32[$79 >> 2] = $66; //@line 3734
     $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 3735
     HEAP32[$80 >> 2] = $12; //@line 3736
     $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 3737
     HEAP32[$81 >> 2] = $14; //@line 3738
     $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 3739
     HEAP32[$82 >> 2] = $16; //@line 3740
     $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 3741
     HEAP32[$83 >> 2] = $18; //@line 3742
     $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 3743
     HEAP32[$84 >> 2] = $26; //@line 3744
     $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 3745
     HEAP32[$85 >> 2] = $22; //@line 3746
     sp = STACKTOP; //@line 3747
     return;
    }
    ___async_unwind = 0; //@line 3750
    HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 3751
    $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 3752
    HEAP32[$73 >> 2] = $4; //@line 3753
    $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 3754
    HEAP32[$74 >> 2] = $2; //@line 3755
    $75 = $ReallocAsyncCtx4 + 12 | 0; //@line 3756
    HEAP32[$75 >> 2] = $6; //@line 3757
    $76 = $ReallocAsyncCtx4 + 16 | 0; //@line 3758
    HEAP32[$76 >> 2] = $8; //@line 3759
    $77 = $ReallocAsyncCtx4 + 20 | 0; //@line 3760
    HEAP32[$77 >> 2] = $68; //@line 3761
    $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 3762
    HEAP32[$78 >> 2] = $10; //@line 3763
    $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 3764
    HEAP32[$79 >> 2] = $66; //@line 3765
    $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 3766
    HEAP32[$80 >> 2] = $12; //@line 3767
    $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 3768
    HEAP32[$81 >> 2] = $14; //@line 3769
    $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 3770
    HEAP32[$82 >> 2] = $16; //@line 3771
    $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 3772
    HEAP32[$83 >> 2] = $18; //@line 3773
    $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 3774
    HEAP32[$84 >> 2] = $26; //@line 3775
    $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 3776
    HEAP32[$85 >> 2] = $22; //@line 3777
    sp = STACKTOP; //@line 3778
    return;
   }
   $86 = $10 + 12 | 0; //@line 3781
   $87 = HEAP32[$86 >> 2] | 0; //@line 3782
   if (!$87) {
    HEAP32[$68 >> 2] = 0; //@line 3785
    break;
   }
   $90 = HEAP32[$87 + 4 >> 2] | 0; //@line 3789
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 3790
   FUNCTION_TABLE_vii[$90 & 7]($66, $10); //@line 3791
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 3794
    $91 = $ReallocAsyncCtx5 + 4 | 0; //@line 3795
    HEAP32[$91 >> 2] = $4; //@line 3796
    $92 = $ReallocAsyncCtx5 + 8 | 0; //@line 3797
    HEAP32[$92 >> 2] = $2; //@line 3798
    $93 = $ReallocAsyncCtx5 + 12 | 0; //@line 3799
    HEAP32[$93 >> 2] = $6; //@line 3800
    $94 = $ReallocAsyncCtx5 + 16 | 0; //@line 3801
    HEAP32[$94 >> 2] = $8; //@line 3802
    $95 = $ReallocAsyncCtx5 + 20 | 0; //@line 3803
    HEAP32[$95 >> 2] = $68; //@line 3804
    $96 = $ReallocAsyncCtx5 + 24 | 0; //@line 3805
    HEAP32[$96 >> 2] = $12; //@line 3806
    $97 = $ReallocAsyncCtx5 + 28 | 0; //@line 3807
    HEAP32[$97 >> 2] = $14; //@line 3808
    $98 = $ReallocAsyncCtx5 + 32 | 0; //@line 3809
    HEAP32[$98 >> 2] = $16; //@line 3810
    $99 = $ReallocAsyncCtx5 + 36 | 0; //@line 3811
    HEAP32[$99 >> 2] = $66; //@line 3812
    $100 = $ReallocAsyncCtx5 + 40 | 0; //@line 3813
    HEAP32[$100 >> 2] = $18; //@line 3814
    $101 = $ReallocAsyncCtx5 + 44 | 0; //@line 3815
    HEAP32[$101 >> 2] = $26; //@line 3816
    $102 = $ReallocAsyncCtx5 + 48 | 0; //@line 3817
    HEAP32[$102 >> 2] = $86; //@line 3818
    $103 = $ReallocAsyncCtx5 + 52 | 0; //@line 3819
    HEAP32[$103 >> 2] = $22; //@line 3820
    sp = STACKTOP; //@line 3821
    return;
   }
   ___async_unwind = 0; //@line 3824
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 3825
   $91 = $ReallocAsyncCtx5 + 4 | 0; //@line 3826
   HEAP32[$91 >> 2] = $4; //@line 3827
   $92 = $ReallocAsyncCtx5 + 8 | 0; //@line 3828
   HEAP32[$92 >> 2] = $2; //@line 3829
   $93 = $ReallocAsyncCtx5 + 12 | 0; //@line 3830
   HEAP32[$93 >> 2] = $6; //@line 3831
   $94 = $ReallocAsyncCtx5 + 16 | 0; //@line 3832
   HEAP32[$94 >> 2] = $8; //@line 3833
   $95 = $ReallocAsyncCtx5 + 20 | 0; //@line 3834
   HEAP32[$95 >> 2] = $68; //@line 3835
   $96 = $ReallocAsyncCtx5 + 24 | 0; //@line 3836
   HEAP32[$96 >> 2] = $12; //@line 3837
   $97 = $ReallocAsyncCtx5 + 28 | 0; //@line 3838
   HEAP32[$97 >> 2] = $14; //@line 3839
   $98 = $ReallocAsyncCtx5 + 32 | 0; //@line 3840
   HEAP32[$98 >> 2] = $16; //@line 3841
   $99 = $ReallocAsyncCtx5 + 36 | 0; //@line 3842
   HEAP32[$99 >> 2] = $66; //@line 3843
   $100 = $ReallocAsyncCtx5 + 40 | 0; //@line 3844
   HEAP32[$100 >> 2] = $18; //@line 3845
   $101 = $ReallocAsyncCtx5 + 44 | 0; //@line 3846
   HEAP32[$101 >> 2] = $26; //@line 3847
   $102 = $ReallocAsyncCtx5 + 48 | 0; //@line 3848
   HEAP32[$102 >> 2] = $86; //@line 3849
   $103 = $ReallocAsyncCtx5 + 52 | 0; //@line 3850
   HEAP32[$103 >> 2] = $22; //@line 3851
   sp = STACKTOP; //@line 3852
   return;
  }
 } while (0);
 HEAP32[$2 + 8 >> 2] = $4; //@line 3857
 HEAP32[$2 + 48 >> 2] = $6; //@line 3859
 HEAP32[$2 + 52 >> 2] = $8; //@line 3861
 $107 = $2 + 56 | 0; //@line 3862
 HEAP32[$107 >> 2] = 0; //@line 3863
 $108 = $2 + 60 | 0; //@line 3864
 HEAP32[$108 >> 2] = 0; //@line 3865
 HEAP32[$2 + 64 >> 2] = 0; //@line 3867
 HEAP8[$2 + 82 >> 0] = 0; //@line 3869
 HEAP8[$2 + 83 >> 0] = 1; //@line 3871
 HEAP8[$2 + 84 >> 0] = 3; //@line 3873
 HEAP8[$2 + 85 >> 0] = 0; //@line 3875
 HEAP16[$2 + 80 >> 1] = 0; //@line 3877
 HEAP32[$2 + 76 >> 2] = 0; //@line 3879
 $116 = $2 + 72 | 0; //@line 3880
 HEAP32[$116 >> 2] = 15500; //@line 3881
 HEAP8[$2 + 86 >> 0] = 0; //@line 3883
 HEAP32[$2 + 88 >> 2] = 0; //@line 3885
 $119 = HEAP32[187] | 0; //@line 3886
 HEAP32[187] = $119 + 1; //@line 3888
 HEAP32[$2 >> 2] = ($119 | 0) > 32767 ? 1 : $119; //@line 3891
 $122 = HEAP32[1961] | 0; //@line 3892
 if (!$122) {
  $$1 = 0; //@line 3895
  $173 = 0; //@line 3895
 } else {
  $125 = HEAP32[$122 + 56 >> 2] | 0; //@line 3898
  if (!$125) {
   $$1 = 1; //@line 3901
   $173 = 0; //@line 3901
  } else {
   if ((HEAP32[$122 + 8 >> 2] | 0) == ($4 | 0)) {
    HEAP32[$107 >> 2] = $125; //@line 3907
    HEAP32[$108 >> 2] = HEAP32[$122 + 60 >> 2]; //@line 3910
    $$1 = 1; //@line 3911
    $173 = $125; //@line 3911
   } else {
    $$1 = 1; //@line 3913
    $173 = 0; //@line 3913
   }
  }
 }
 $132 = HEAP32[1962] | 0; //@line 3917
 if (!$132) {
  $$1$1 = $$1; //@line 3920
  $186 = $173; //@line 3920
 } else {
  if (!$173) {
   $175 = HEAP32[$132 + 56 >> 2] | 0; //@line 3925
   if (!$175) {
    $227 = 0; //@line 3928
   } else {
    if ((HEAP32[$132 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$107 >> 2] = $175; //@line 3934
     HEAP32[$108 >> 2] = HEAP32[$132 + 60 >> 2]; //@line 3937
     $227 = $175; //@line 3938
    } else {
     $227 = 0; //@line 3940
    }
   }
  } else {
   $227 = $173; //@line 3944
  }
  $$1$1 = $$1 + 1 | 0; //@line 3947
  $186 = $227; //@line 3947
 }
 $183 = HEAP32[1963] | 0; //@line 3949
 if (!$183) {
  $$1$2 = $$1$1; //@line 3952
  $199 = $186; //@line 3952
 } else {
  if (!$186) {
   $188 = HEAP32[$183 + 56 >> 2] | 0; //@line 3957
   if (!$188) {
    $228 = 0; //@line 3960
   } else {
    if ((HEAP32[$183 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$107 >> 2] = $188; //@line 3966
     HEAP32[$108 >> 2] = HEAP32[$183 + 60 >> 2]; //@line 3969
     $228 = $188; //@line 3970
    } else {
     $228 = 0; //@line 3972
    }
   }
  } else {
   $228 = $186; //@line 3976
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 3979
  $199 = $228; //@line 3979
 }
 $196 = HEAP32[1964] | 0; //@line 3981
 if (!$196) {
  $$1$3 = $$1$2; //@line 3984
  $212 = $199; //@line 3984
 } else {
  if (!$199) {
   $201 = HEAP32[$196 + 56 >> 2] | 0; //@line 3989
   if (!$201) {
    $229 = 0; //@line 3992
   } else {
    if ((HEAP32[$196 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$107 >> 2] = $201; //@line 3998
     HEAP32[$108 >> 2] = HEAP32[$196 + 60 >> 2]; //@line 4001
     $229 = $201; //@line 4002
    } else {
     $229 = 0; //@line 4004
    }
   }
  } else {
   $229 = $199; //@line 4008
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 4011
  $212 = $229; //@line 4011
 }
 $209 = HEAP32[1965] | 0; //@line 4013
 if (!$209) {
  $$1$4 = $$1$3; //@line 4016
 } else {
  if (!$212) {
   $214 = HEAP32[$209 + 56 >> 2] | 0; //@line 4021
   if ($214 | 0) {
    if ((HEAP32[$209 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$107 >> 2] = $214; //@line 4028
     HEAP32[$108 >> 2] = HEAP32[$209 + 60 >> 2]; //@line 4031
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 4036
 }
 HEAP32[7844 + ($18 << 2) >> 2] = $2; //@line 4039
 HEAP32[$116 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 4042
 if (HEAP8[8724] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 4046
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 4047
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 4050
   $169 = $ReallocAsyncCtx13 + 4 | 0; //@line 4051
   HEAP32[$169 >> 2] = $2; //@line 4052
   $170 = $ReallocAsyncCtx13 + 8 | 0; //@line 4053
   HEAP32[$170 >> 2] = $16; //@line 4054
   sp = STACKTOP; //@line 4055
   return;
  }
  ___async_unwind = 0; //@line 4058
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 4059
  $169 = $ReallocAsyncCtx13 + 4 | 0; //@line 4060
  HEAP32[$169 >> 2] = $2; //@line 4061
  $170 = $ReallocAsyncCtx13 + 8 | 0; //@line 4062
  HEAP32[$170 >> 2] = $16; //@line 4063
  sp = STACKTOP; //@line 4064
  return;
 }
 $134 = $2 + 44 | 0; //@line 4067
 $135 = HEAP32[$134 >> 2] | 0; //@line 4068
 if (!$135) {
  $149 = $12 + 12 | 0; //@line 4071
  HEAP32[$149 >> 2] = 0; //@line 4072
  $151 = $14 + 4 | 0; //@line 4074
  HEAP32[$151 >> 2] = 0; //@line 4076
  HEAP32[$151 + 4 >> 2] = 0; //@line 4079
  HEAP32[$14 >> 2] = 3; //@line 4080
  $155 = $14 + 12 | 0; //@line 4081
  HEAP32[$155 >> 2] = 752; //@line 4082
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 4083
  $156 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($12, 100, $14) | 0; //@line 4084
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 4087
   $157 = $ReallocAsyncCtx14 + 4 | 0; //@line 4088
   HEAP32[$157 >> 2] = $155; //@line 4089
   $158 = $ReallocAsyncCtx14 + 8 | 0; //@line 4090
   HEAP32[$158 >> 2] = $12; //@line 4091
   $159 = $ReallocAsyncCtx14 + 12 | 0; //@line 4092
   HEAP32[$159 >> 2] = $149; //@line 4093
   $160 = $ReallocAsyncCtx14 + 16 | 0; //@line 4094
   HEAP32[$160 >> 2] = $14; //@line 4095
   $161 = $ReallocAsyncCtx14 + 20 | 0; //@line 4096
   HEAP32[$161 >> 2] = $16; //@line 4097
   $162 = $ReallocAsyncCtx14 + 24 | 0; //@line 4098
   HEAP32[$162 >> 2] = $2; //@line 4099
   $163 = $ReallocAsyncCtx14 + 28 | 0; //@line 4100
   HEAP32[$163 >> 2] = $22; //@line 4101
   $164 = $ReallocAsyncCtx14 + 32 | 0; //@line 4102
   HEAP32[$164 >> 2] = $2; //@line 4103
   $165 = $ReallocAsyncCtx14 + 36 | 0; //@line 4104
   HEAP32[$165 >> 2] = $26; //@line 4105
   $166 = $ReallocAsyncCtx14 + 40 | 0; //@line 4106
   HEAP32[$166 >> 2] = $134; //@line 4107
   $167 = $ReallocAsyncCtx14 + 44 | 0; //@line 4108
   HEAP32[$167 >> 2] = $66; //@line 4109
   sp = STACKTOP; //@line 4110
   return;
  }
  HEAP32[___async_retval >> 2] = $156; //@line 4114
  ___async_unwind = 0; //@line 4115
  HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 4116
  $157 = $ReallocAsyncCtx14 + 4 | 0; //@line 4117
  HEAP32[$157 >> 2] = $155; //@line 4118
  $158 = $ReallocAsyncCtx14 + 8 | 0; //@line 4119
  HEAP32[$158 >> 2] = $12; //@line 4120
  $159 = $ReallocAsyncCtx14 + 12 | 0; //@line 4121
  HEAP32[$159 >> 2] = $149; //@line 4122
  $160 = $ReallocAsyncCtx14 + 16 | 0; //@line 4123
  HEAP32[$160 >> 2] = $14; //@line 4124
  $161 = $ReallocAsyncCtx14 + 20 | 0; //@line 4125
  HEAP32[$161 >> 2] = $16; //@line 4126
  $162 = $ReallocAsyncCtx14 + 24 | 0; //@line 4127
  HEAP32[$162 >> 2] = $2; //@line 4128
  $163 = $ReallocAsyncCtx14 + 28 | 0; //@line 4129
  HEAP32[$163 >> 2] = $22; //@line 4130
  $164 = $ReallocAsyncCtx14 + 32 | 0; //@line 4131
  HEAP32[$164 >> 2] = $2; //@line 4132
  $165 = $ReallocAsyncCtx14 + 36 | 0; //@line 4133
  HEAP32[$165 >> 2] = $26; //@line 4134
  $166 = $ReallocAsyncCtx14 + 40 | 0; //@line 4135
  HEAP32[$166 >> 2] = $134; //@line 4136
  $167 = $ReallocAsyncCtx14 + 44 | 0; //@line 4137
  HEAP32[$167 >> 2] = $66; //@line 4138
  sp = STACKTOP; //@line 4139
  return;
 } else {
  $138 = HEAP32[$135 + 4 >> 2] | 0; //@line 4143
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 4144
  FUNCTION_TABLE_vii[$138 & 7]($12, $66); //@line 4145
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 4148
   $139 = $ReallocAsyncCtx6 + 4 | 0; //@line 4149
   HEAP32[$139 >> 2] = $12; //@line 4150
   $140 = $ReallocAsyncCtx6 + 8 | 0; //@line 4151
   HEAP32[$140 >> 2] = $14; //@line 4152
   $141 = $ReallocAsyncCtx6 + 12 | 0; //@line 4153
   HEAP32[$141 >> 2] = $16; //@line 4154
   $142 = $ReallocAsyncCtx6 + 16 | 0; //@line 4155
   HEAP32[$142 >> 2] = $2; //@line 4156
   $143 = $ReallocAsyncCtx6 + 20 | 0; //@line 4157
   HEAP32[$143 >> 2] = $2; //@line 4158
   $144 = $ReallocAsyncCtx6 + 24 | 0; //@line 4159
   HEAP32[$144 >> 2] = $134; //@line 4160
   $145 = $ReallocAsyncCtx6 + 28 | 0; //@line 4161
   HEAP32[$145 >> 2] = $26; //@line 4162
   $146 = $ReallocAsyncCtx6 + 32 | 0; //@line 4163
   HEAP32[$146 >> 2] = $134; //@line 4164
   $147 = $ReallocAsyncCtx6 + 36 | 0; //@line 4165
   HEAP32[$147 >> 2] = $66; //@line 4166
   $148 = $ReallocAsyncCtx6 + 40 | 0; //@line 4167
   HEAP32[$148 >> 2] = $22; //@line 4168
   sp = STACKTOP; //@line 4169
   return;
  }
  ___async_unwind = 0; //@line 4172
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 4173
  $139 = $ReallocAsyncCtx6 + 4 | 0; //@line 4174
  HEAP32[$139 >> 2] = $12; //@line 4175
  $140 = $ReallocAsyncCtx6 + 8 | 0; //@line 4176
  HEAP32[$140 >> 2] = $14; //@line 4177
  $141 = $ReallocAsyncCtx6 + 12 | 0; //@line 4178
  HEAP32[$141 >> 2] = $16; //@line 4179
  $142 = $ReallocAsyncCtx6 + 16 | 0; //@line 4180
  HEAP32[$142 >> 2] = $2; //@line 4181
  $143 = $ReallocAsyncCtx6 + 20 | 0; //@line 4182
  HEAP32[$143 >> 2] = $2; //@line 4183
  $144 = $ReallocAsyncCtx6 + 24 | 0; //@line 4184
  HEAP32[$144 >> 2] = $134; //@line 4185
  $145 = $ReallocAsyncCtx6 + 28 | 0; //@line 4186
  HEAP32[$145 >> 2] = $26; //@line 4187
  $146 = $ReallocAsyncCtx6 + 32 | 0; //@line 4188
  HEAP32[$146 >> 2] = $134; //@line 4189
  $147 = $ReallocAsyncCtx6 + 36 | 0; //@line 4190
  HEAP32[$147 >> 2] = $66; //@line 4191
  $148 = $ReallocAsyncCtx6 + 40 | 0; //@line 4192
  HEAP32[$148 >> 2] = $22; //@line 4193
  sp = STACKTOP; //@line 4194
  return;
 }
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 10112
 STACKTOP = STACKTOP + 64 | 0; //@line 10113
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 10113
 $5 = sp + 16 | 0; //@line 10114
 $6 = sp; //@line 10115
 $7 = sp + 24 | 0; //@line 10116
 $8 = sp + 8 | 0; //@line 10117
 $9 = sp + 20 | 0; //@line 10118
 HEAP32[$5 >> 2] = $1; //@line 10119
 $10 = ($0 | 0) != 0; //@line 10120
 $11 = $7 + 40 | 0; //@line 10121
 $12 = $11; //@line 10122
 $13 = $7 + 39 | 0; //@line 10123
 $14 = $8 + 4 | 0; //@line 10124
 $$0243 = 0; //@line 10125
 $$0247 = 0; //@line 10125
 $$0269 = 0; //@line 10125
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 10134
     $$1248 = -1; //@line 10135
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 10139
     break;
    }
   } else {
    $$1248 = $$0247; //@line 10143
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 10146
  $21 = HEAP8[$20 >> 0] | 0; //@line 10147
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 10150
   break;
  } else {
   $23 = $21; //@line 10153
   $25 = $20; //@line 10153
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 10158
     $27 = $25; //@line 10158
     label = 9; //@line 10159
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 10164
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 10171
   HEAP32[$5 >> 2] = $24; //@line 10172
   $23 = HEAP8[$24 >> 0] | 0; //@line 10174
   $25 = $24; //@line 10174
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 10179
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 10184
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 10187
     $27 = $27 + 2 | 0; //@line 10188
     HEAP32[$5 >> 2] = $27; //@line 10189
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 10196
      break;
     } else {
      $$0249303 = $30; //@line 10193
      label = 9; //@line 10194
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 10204
  if ($10) {
   _out_670($0, $20, $36); //@line 10206
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 10210
   $$0247 = $$1248; //@line 10210
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 10218
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 10219
  if ($43) {
   $$0253 = -1; //@line 10221
   $$1270 = $$0269; //@line 10221
   $$sink = 1; //@line 10221
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 10231
    $$1270 = 1; //@line 10231
    $$sink = 3; //@line 10231
   } else {
    $$0253 = -1; //@line 10233
    $$1270 = $$0269; //@line 10233
    $$sink = 1; //@line 10233
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 10236
  HEAP32[$5 >> 2] = $51; //@line 10237
  $52 = HEAP8[$51 >> 0] | 0; //@line 10238
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 10240
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 10247
   $$lcssa291 = $52; //@line 10247
   $$lcssa292 = $51; //@line 10247
  } else {
   $$0262309 = 0; //@line 10249
   $60 = $52; //@line 10249
   $65 = $51; //@line 10249
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 10254
    $64 = $65 + 1 | 0; //@line 10255
    HEAP32[$5 >> 2] = $64; //@line 10256
    $66 = HEAP8[$64 >> 0] | 0; //@line 10257
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 10259
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 10266
     $$lcssa291 = $66; //@line 10266
     $$lcssa292 = $64; //@line 10266
     break;
    } else {
     $$0262309 = $63; //@line 10269
     $60 = $66; //@line 10269
     $65 = $64; //@line 10269
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 10281
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 10283
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 10288
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10293
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10305
     $$2271 = 1; //@line 10305
     $storemerge274 = $79 + 3 | 0; //@line 10305
    } else {
     label = 23; //@line 10307
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 10311
    if ($$1270 | 0) {
     $$0 = -1; //@line 10314
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10329
     $106 = HEAP32[$105 >> 2] | 0; //@line 10330
     HEAP32[$2 >> 2] = $105 + 4; //@line 10332
     $363 = $106; //@line 10333
    } else {
     $363 = 0; //@line 10335
    }
    $$0259 = $363; //@line 10339
    $$2271 = 0; //@line 10339
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 10339
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 10341
   $109 = ($$0259 | 0) < 0; //@line 10342
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 10347
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 10347
   $$3272 = $$2271; //@line 10347
   $115 = $storemerge274; //@line 10347
  } else {
   $112 = _getint_671($5) | 0; //@line 10349
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 10352
    break;
   }
   $$1260 = $112; //@line 10356
   $$1263 = $$0262$lcssa; //@line 10356
   $$3272 = $$1270; //@line 10356
   $115 = HEAP32[$5 >> 2] | 0; //@line 10356
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 10367
     $156 = _getint_671($5) | 0; //@line 10368
     $$0254 = $156; //@line 10370
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 10370
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 10379
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 10384
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10389
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10396
      $144 = $125 + 4 | 0; //@line 10400
      HEAP32[$5 >> 2] = $144; //@line 10401
      $$0254 = $140; //@line 10402
      $$pre345 = $144; //@line 10402
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 10408
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10423
     $152 = HEAP32[$151 >> 2] | 0; //@line 10424
     HEAP32[$2 >> 2] = $151 + 4; //@line 10426
     $364 = $152; //@line 10427
    } else {
     $364 = 0; //@line 10429
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 10432
    HEAP32[$5 >> 2] = $154; //@line 10433
    $$0254 = $364; //@line 10434
    $$pre345 = $154; //@line 10434
   } else {
    $$0254 = -1; //@line 10436
    $$pre345 = $115; //@line 10436
   }
  } while (0);
  $$0252 = 0; //@line 10439
  $158 = $$pre345; //@line 10439
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 10446
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 10449
   HEAP32[$5 >> 2] = $158; //@line 10450
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (4584 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 10455
   $168 = $167 & 255; //@line 10456
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 10460
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 10467
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 10471
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 10475
     break L1;
    } else {
     label = 50; //@line 10478
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 10483
     $176 = $3 + ($$0253 << 3) | 0; //@line 10485
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 10490
     $182 = $6; //@line 10491
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 10493
     HEAP32[$182 + 4 >> 2] = $181; //@line 10496
     label = 50; //@line 10497
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 10501
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 10504
    $187 = HEAP32[$5 >> 2] | 0; //@line 10506
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 10510
   if ($10) {
    $187 = $158; //@line 10512
   } else {
    $$0243 = 0; //@line 10514
    $$0247 = $$1248; //@line 10514
    $$0269 = $$3272; //@line 10514
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 10520
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 10526
  $196 = $$1263 & -65537; //@line 10529
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 10530
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10538
       $$0243 = 0; //@line 10539
       $$0247 = $$1248; //@line 10539
       $$0269 = $$3272; //@line 10539
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10545
       $$0243 = 0; //@line 10546
       $$0247 = $$1248; //@line 10546
       $$0269 = $$3272; //@line 10546
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 10554
       HEAP32[$208 >> 2] = $$1248; //@line 10556
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10559
       $$0243 = 0; //@line 10560
       $$0247 = $$1248; //@line 10560
       $$0269 = $$3272; //@line 10560
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 10567
       $$0243 = 0; //@line 10568
       $$0247 = $$1248; //@line 10568
       $$0269 = $$3272; //@line 10568
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 10575
       $$0243 = 0; //@line 10576
       $$0247 = $$1248; //@line 10576
       $$0269 = $$3272; //@line 10576
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10582
       $$0243 = 0; //@line 10583
       $$0247 = $$1248; //@line 10583
       $$0269 = $$3272; //@line 10583
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 10591
       HEAP32[$220 >> 2] = $$1248; //@line 10593
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10596
       $$0243 = 0; //@line 10597
       $$0247 = $$1248; //@line 10597
       $$0269 = $$3272; //@line 10597
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 10602
       $$0247 = $$1248; //@line 10602
       $$0269 = $$3272; //@line 10602
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 10612
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 10612
     $$3265 = $$1263$ | 8; //@line 10612
     label = 62; //@line 10613
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 10617
     $$1255 = $$0254; //@line 10617
     $$3265 = $$1263$; //@line 10617
     label = 62; //@line 10618
     break;
    }
   case 111:
    {
     $242 = $6; //@line 10622
     $244 = HEAP32[$242 >> 2] | 0; //@line 10624
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 10627
     $248 = _fmt_o($244, $247, $11) | 0; //@line 10628
     $252 = $12 - $248 | 0; //@line 10632
     $$0228 = $248; //@line 10637
     $$1233 = 0; //@line 10637
     $$1238 = 5048; //@line 10637
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 10637
     $$4266 = $$1263$; //@line 10637
     $281 = $244; //@line 10637
     $283 = $247; //@line 10637
     label = 68; //@line 10638
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 10642
     $258 = HEAP32[$256 >> 2] | 0; //@line 10644
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 10647
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 10650
      $264 = tempRet0; //@line 10651
      $265 = $6; //@line 10652
      HEAP32[$265 >> 2] = $263; //@line 10654
      HEAP32[$265 + 4 >> 2] = $264; //@line 10657
      $$0232 = 1; //@line 10658
      $$0237 = 5048; //@line 10658
      $275 = $263; //@line 10658
      $276 = $264; //@line 10658
      label = 67; //@line 10659
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 10671
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 5048 : 5050 : 5049; //@line 10671
      $275 = $258; //@line 10671
      $276 = $261; //@line 10671
      label = 67; //@line 10672
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 10678
     $$0232 = 0; //@line 10684
     $$0237 = 5048; //@line 10684
     $275 = HEAP32[$197 >> 2] | 0; //@line 10684
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 10684
     label = 67; //@line 10685
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 10696
     $$2 = $13; //@line 10697
     $$2234 = 0; //@line 10697
     $$2239 = 5048; //@line 10697
     $$2251 = $11; //@line 10697
     $$5 = 1; //@line 10697
     $$6268 = $196; //@line 10697
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 10704
     label = 72; //@line 10705
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 10709
     $$1 = $302 | 0 ? $302 : 5058; //@line 10712
     label = 72; //@line 10713
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 10723
     HEAP32[$14 >> 2] = 0; //@line 10724
     HEAP32[$6 >> 2] = $8; //@line 10725
     $$4258354 = -1; //@line 10726
     $365 = $8; //@line 10726
     label = 76; //@line 10727
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 10731
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 10734
      $$0240$lcssa356 = 0; //@line 10735
      label = 85; //@line 10736
     } else {
      $$4258354 = $$0254; //@line 10738
      $365 = $$pre348; //@line 10738
      label = 76; //@line 10739
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 10746
     $$0247 = $$1248; //@line 10746
     $$0269 = $$3272; //@line 10746
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 10751
     $$2234 = 0; //@line 10751
     $$2239 = 5048; //@line 10751
     $$2251 = $11; //@line 10751
     $$5 = $$0254; //@line 10751
     $$6268 = $$1263$; //@line 10751
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 10757
    $227 = $6; //@line 10758
    $229 = HEAP32[$227 >> 2] | 0; //@line 10760
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 10763
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 10765
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 10771
    $$0228 = $234; //@line 10776
    $$1233 = $or$cond278 ? 0 : 2; //@line 10776
    $$1238 = $or$cond278 ? 5048 : 5048 + ($$1236 >> 4) | 0; //@line 10776
    $$2256 = $$1255; //@line 10776
    $$4266 = $$3265; //@line 10776
    $281 = $229; //@line 10776
    $283 = $232; //@line 10776
    label = 68; //@line 10777
   } else if ((label | 0) == 67) {
    label = 0; //@line 10780
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 10782
    $$1233 = $$0232; //@line 10782
    $$1238 = $$0237; //@line 10782
    $$2256 = $$0254; //@line 10782
    $$4266 = $$1263$; //@line 10782
    $281 = $275; //@line 10782
    $283 = $276; //@line 10782
    label = 68; //@line 10783
   } else if ((label | 0) == 72) {
    label = 0; //@line 10786
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 10787
    $306 = ($305 | 0) == 0; //@line 10788
    $$2 = $$1; //@line 10795
    $$2234 = 0; //@line 10795
    $$2239 = 5048; //@line 10795
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 10795
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 10795
    $$6268 = $196; //@line 10795
   } else if ((label | 0) == 76) {
    label = 0; //@line 10798
    $$0229316 = $365; //@line 10799
    $$0240315 = 0; //@line 10799
    $$1244314 = 0; //@line 10799
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 10801
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 10804
      $$2245 = $$1244314; //@line 10804
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 10807
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 10813
      $$2245 = $320; //@line 10813
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 10817
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 10820
      $$0240315 = $325; //@line 10820
      $$1244314 = $320; //@line 10820
     } else {
      $$0240$lcssa = $325; //@line 10822
      $$2245 = $320; //@line 10822
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 10828
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 10831
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 10834
     label = 85; //@line 10835
    } else {
     $$1230327 = $365; //@line 10837
     $$1241326 = 0; //@line 10837
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 10839
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10842
       label = 85; //@line 10843
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 10846
      $$1241326 = $331 + $$1241326 | 0; //@line 10847
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10850
       label = 85; //@line 10851
       break L97;
      }
      _out_670($0, $9, $331); //@line 10855
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10860
       label = 85; //@line 10861
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 10858
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 10869
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 10875
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 10877
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 10882
   $$2 = $or$cond ? $$0228 : $11; //@line 10887
   $$2234 = $$1233; //@line 10887
   $$2239 = $$1238; //@line 10887
   $$2251 = $11; //@line 10887
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 10887
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 10887
  } else if ((label | 0) == 85) {
   label = 0; //@line 10890
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 10892
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 10895
   $$0247 = $$1248; //@line 10895
   $$0269 = $$3272; //@line 10895
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 10900
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 10902
  $345 = $$$5 + $$2234 | 0; //@line 10903
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 10905
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 10906
  _out_670($0, $$2239, $$2234); //@line 10907
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 10909
  _pad_676($0, 48, $$$5, $343, 0); //@line 10910
  _out_670($0, $$2, $343); //@line 10911
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 10913
  $$0243 = $$2261; //@line 10914
  $$0247 = $$1248; //@line 10914
  $$0269 = $$3272; //@line 10914
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 10922
    } else {
     $$2242302 = 1; //@line 10924
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 10927
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 10930
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 10934
      $356 = $$2242302 + 1 | 0; //@line 10935
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 10938
      } else {
       $$2242$lcssa = $356; //@line 10940
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 10946
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 10952
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 10958
       } else {
        $$0 = 1; //@line 10960
        break;
       }
      }
     } else {
      $$0 = 1; //@line 10965
     }
    }
   } else {
    $$0 = $$1248; //@line 10969
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10973
 return $$0 | 0; //@line 10973
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_55($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$048$i = 0, $$094 = 0, $$097 = 0, $$1107 = 0, $$4$ph = 0, $$4110 = 0, $$byval_copy = 0, $$byval_copy20 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $96 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 19751
 STACKTOP = STACKTOP + 48 | 0; //@line 19752
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 19752
 $$byval_copy20 = sp + 20 | 0; //@line 19753
 $$byval_copy = sp; //@line 19754
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19756
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19758
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19760
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19762
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19764
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19766
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19768
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 19770
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19772
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19774
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19776
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19778
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19780
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19782
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19784
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19786
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19788
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19790
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19792
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19794
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19796
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19798
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 19800
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 19802
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 19804
 $52 = HEAP8[$0 + 101 >> 0] | 0; //@line 19806
 $54 = HEAP8[$0 + 102 >> 0] | 0; //@line 19808
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19810
 do {
  if (($AsyncRetVal | 0) == -3001) {
   $$0 = $52; //@line 19815
   $$094 = $50; //@line 19815
   $$097 = $54 + 1 << 24 >> 24; //@line 19815
   label = 2; //@line 19816
  } else {
   if (($AsyncRetVal | 0) < 0) {
    $$4$ph = $AsyncRetVal; //@line 19820
    label = 23; //@line 19821
   } else {
    $150 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($4, 1, $6, $8, $10) | 0; //@line 19823
    if (($150 | 0) <= 0) {
     if (($150 | 0) < 0) {
      $$0 = $52; //@line 19828
      $$094 = $50; //@line 19828
      $$097 = $54; //@line 19828
      label = 2; //@line 19829
      break;
     } else {
      $$4110 = -3009; //@line 19832
      break;
     }
    }
    $152 = HEAP32[$6 >> 2] | 0; //@line 19836
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 19837
    __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($12, $8, $152); //@line 19838
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 19841
     $153 = $ReallocAsyncCtx2 + 4 | 0; //@line 19842
     HEAP32[$153 >> 2] = $150; //@line 19843
     $154 = $ReallocAsyncCtx2 + 8 | 0; //@line 19844
     HEAP32[$154 >> 2] = $2; //@line 19845
     $155 = $ReallocAsyncCtx2 + 12 | 0; //@line 19846
     HEAP32[$155 >> 2] = $24; //@line 19847
     $156 = $ReallocAsyncCtx2 + 16 | 0; //@line 19848
     HEAP32[$156 >> 2] = $4; //@line 19849
     $157 = $ReallocAsyncCtx2 + 20 | 0; //@line 19850
     HEAP32[$157 >> 2] = $26; //@line 19851
     $158 = $ReallocAsyncCtx2 + 24 | 0; //@line 19852
     HEAP32[$158 >> 2] = $20; //@line 19853
     $159 = $ReallocAsyncCtx2 + 28 | 0; //@line 19854
     HEAP32[$159 >> 2] = $28; //@line 19855
     sp = STACKTOP; //@line 19856
     STACKTOP = sp; //@line 19857
     return;
    }
    ___async_unwind = 0; //@line 19859
    HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 19860
    $153 = $ReallocAsyncCtx2 + 4 | 0; //@line 19861
    HEAP32[$153 >> 2] = $150; //@line 19862
    $154 = $ReallocAsyncCtx2 + 8 | 0; //@line 19863
    HEAP32[$154 >> 2] = $2; //@line 19864
    $155 = $ReallocAsyncCtx2 + 12 | 0; //@line 19865
    HEAP32[$155 >> 2] = $24; //@line 19866
    $156 = $ReallocAsyncCtx2 + 16 | 0; //@line 19867
    HEAP32[$156 >> 2] = $4; //@line 19868
    $157 = $ReallocAsyncCtx2 + 20 | 0; //@line 19869
    HEAP32[$157 >> 2] = $26; //@line 19870
    $158 = $ReallocAsyncCtx2 + 24 | 0; //@line 19871
    HEAP32[$158 >> 2] = $20; //@line 19872
    $159 = $ReallocAsyncCtx2 + 28 | 0; //@line 19873
    HEAP32[$159 >> 2] = $28; //@line 19874
    sp = STACKTOP; //@line 19875
    STACKTOP = sp; //@line 19876
    return;
   }
  }
 } while (0);
 do {
  if ((label | 0) == 2) {
   HEAP32[$30 >> 2] = 0; //@line 19882
   HEAP32[$30 + 4 >> 2] = 0; //@line 19882
   HEAP32[$30 + 8 >> 2] = 0; //@line 19882
   HEAP32[$30 + 12 >> 2] = 0; //@line 19882
   HEAP32[$30 + 16 >> 2] = 0; //@line 19882
   HEAP32[$$byval_copy >> 2] = HEAP32[$32 >> 2]; //@line 19883
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$32 + 4 >> 2]; //@line 19883
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$32 + 8 >> 2]; //@line 19883
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$32 + 12 >> 2]; //@line 19883
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$32 + 16 >> 2]; //@line 19883
   __ZN13SocketAddressC2E10nsapi_addrt($22, $$byval_copy, 0); //@line 19884
   if (!($$094 << 24 >> 24)) {
    $$4$ph = -3009; //@line 19887
    label = 23; //@line 19888
   } else {
    if (($$097 & 255) > 9) {
     if (!($$0 << 24 >> 24)) {
      $$4$ph = -3009; //@line 19894
      label = 23; //@line 19895
      break;
     } else {
      $$1107 = 0; //@line 19898
      $61 = 0; //@line 19898
     }
    } else {
     if (($$097 & 255) < 5) {
      $$1107 = $$0; //@line 19903
      $61 = $$097; //@line 19903
     } else {
      $96 = 648 + ((($$097 & 255) + -5 | 0) * 20 | 0) | 0; //@line 19907
      HEAP32[$$byval_copy20 >> 2] = HEAP32[$96 >> 2]; //@line 19908
      HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$96 + 4 >> 2]; //@line 19908
      HEAP32[$$byval_copy20 + 8 >> 2] = HEAP32[$96 + 8 >> 2]; //@line 19908
      HEAP32[$$byval_copy20 + 12 >> 2] = HEAP32[$96 + 12 >> 2]; //@line 19908
      HEAP32[$$byval_copy20 + 16 >> 2] = HEAP32[$96 + 16 >> 2]; //@line 19908
      __ZN13SocketAddress8set_addrE10nsapi_addr($22, $$byval_copy20); //@line 19909
      __ZN13SocketAddress8set_portEt($22, 53); //@line 19910
      HEAP8[$4 >> 0] = 0; //@line 19911
      HEAP8[$38 >> 0] = 1; //@line 19912
      HEAP8[$40 >> 0] = 1; //@line 19913
      HEAP8[$42 >> 0] = 0; //@line 19914
      HEAP8[$44 >> 0] = 0; //@line 19915
      HEAP8[$46 >> 0] = 1; //@line 19916
      HEAP8[$48 >> 0] = 0; //@line 19917
      HEAP8[$48 + 1 >> 0] = 0; //@line 19917
      HEAP8[$48 + 2 >> 0] = 0; //@line 19917
      HEAP8[$48 + 3 >> 0] = 0; //@line 19917
      HEAP8[$48 + 4 >> 0] = 0; //@line 19917
      HEAP8[$48 + 5 >> 0] = 0; //@line 19917
      if (!(HEAP8[$12 >> 0] | 0)) {
       $$sroa$0$0$in$lcssa$i = $14; //@line 19921
      } else {
       $$048$i = $12; //@line 19923
       $$sroa$0$0$in47$i = $14; //@line 19923
       while (1) {
        $99 = _strcspn($$048$i, 5116) | 0; //@line 19925
        $101 = $$sroa$0$0$in47$i + 1 | 0; //@line 19927
        HEAP8[$$sroa$0$0$in47$i >> 0] = $99; //@line 19928
        $102 = $99 & 255; //@line 19929
        _memcpy($101 | 0, $$048$i | 0, $102 | 0) | 0; //@line 19930
        $103 = $101 + $102 | 0; //@line 19931
        $$048$i = $$048$i + ($99 + ((HEAP8[$$048$i + $99 >> 0] | 0) == 46 & 1)) | 0; //@line 19937
        if (!(HEAP8[$$048$i >> 0] | 0)) {
         $$sroa$0$0$in$lcssa$i = $103; //@line 19941
         break;
        } else {
         $$sroa$0$0$in47$i = $103; //@line 19944
        }
       }
      }
      HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 19949
      HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 19951
      HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $16; //@line 19953
      HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 19955
      HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 19958
      $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 19960
      $119 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($20, $22, $4, $$sroa$0$0$in$lcssa$i + 5 - $18 | 0) | 0; //@line 19961
      if (___async) {
       HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 19964
       $120 = $ReallocAsyncCtx4 + 4 | 0; //@line 19965
       HEAP32[$120 >> 2] = $2; //@line 19966
       $121 = $ReallocAsyncCtx4 + 8 | 0; //@line 19967
       HEAP32[$121 >> 2] = $4; //@line 19968
       $122 = $ReallocAsyncCtx4 + 12 | 0; //@line 19969
       HEAP32[$122 >> 2] = $6; //@line 19970
       $123 = $ReallocAsyncCtx4 + 16 | 0; //@line 19971
       HEAP32[$123 >> 2] = $8; //@line 19972
       $124 = $ReallocAsyncCtx4 + 20 | 0; //@line 19973
       HEAP32[$124 >> 2] = $10; //@line 19974
       $125 = $ReallocAsyncCtx4 + 24 | 0; //@line 19975
       HEAP32[$125 >> 2] = $12; //@line 19976
       $126 = $ReallocAsyncCtx4 + 28 | 0; //@line 19977
       HEAP32[$126 >> 2] = $14; //@line 19978
       $127 = $ReallocAsyncCtx4 + 32 | 0; //@line 19979
       HEAP8[$127 >> 0] = $16; //@line 19980
       $128 = $ReallocAsyncCtx4 + 36 | 0; //@line 19981
       HEAP32[$128 >> 2] = $18; //@line 19982
       $129 = $ReallocAsyncCtx4 + 40 | 0; //@line 19983
       HEAP32[$129 >> 2] = $20; //@line 19984
       $130 = $ReallocAsyncCtx4 + 44 | 0; //@line 19985
       HEAP32[$130 >> 2] = $22; //@line 19986
       $131 = $ReallocAsyncCtx4 + 48 | 0; //@line 19987
       HEAP32[$131 >> 2] = $24; //@line 19988
       $132 = $ReallocAsyncCtx4 + 52 | 0; //@line 19989
       HEAP32[$132 >> 2] = $26; //@line 19990
       $133 = $ReallocAsyncCtx4 + 56 | 0; //@line 19991
       HEAP32[$133 >> 2] = $28; //@line 19992
       $134 = $ReallocAsyncCtx4 + 60 | 0; //@line 19993
       HEAP32[$134 >> 2] = $30; //@line 19994
       $135 = $ReallocAsyncCtx4 + 64 | 0; //@line 19995
       HEAP32[$135 >> 2] = $32; //@line 19996
       $136 = $ReallocAsyncCtx4 + 68 | 0; //@line 19997
       HEAP32[$136 >> 2] = $34; //@line 19998
       $137 = $ReallocAsyncCtx4 + 72 | 0; //@line 19999
       HEAP32[$137 >> 2] = $36; //@line 20000
       $138 = $ReallocAsyncCtx4 + 76 | 0; //@line 20001
       HEAP32[$138 >> 2] = $38; //@line 20002
       $139 = $ReallocAsyncCtx4 + 80 | 0; //@line 20003
       HEAP32[$139 >> 2] = $40; //@line 20004
       $140 = $ReallocAsyncCtx4 + 84 | 0; //@line 20005
       HEAP32[$140 >> 2] = $42; //@line 20006
       $141 = $ReallocAsyncCtx4 + 88 | 0; //@line 20007
       HEAP32[$141 >> 2] = $44; //@line 20008
       $142 = $ReallocAsyncCtx4 + 92 | 0; //@line 20009
       HEAP32[$142 >> 2] = $46; //@line 20010
       $143 = $ReallocAsyncCtx4 + 96 | 0; //@line 20011
       HEAP32[$143 >> 2] = $48; //@line 20012
       $144 = $ReallocAsyncCtx4 + 100 | 0; //@line 20013
       HEAP8[$144 >> 0] = $$0; //@line 20014
       $145 = $ReallocAsyncCtx4 + 101 | 0; //@line 20015
       HEAP8[$145 >> 0] = $$094; //@line 20016
       $146 = $ReallocAsyncCtx4 + 102 | 0; //@line 20017
       HEAP8[$146 >> 0] = $$097; //@line 20018
       sp = STACKTOP; //@line 20019
       STACKTOP = sp; //@line 20020
       return;
      }
      HEAP32[___async_retval >> 2] = $119; //@line 20023
      ___async_unwind = 0; //@line 20024
      HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 20025
      $120 = $ReallocAsyncCtx4 + 4 | 0; //@line 20026
      HEAP32[$120 >> 2] = $2; //@line 20027
      $121 = $ReallocAsyncCtx4 + 8 | 0; //@line 20028
      HEAP32[$121 >> 2] = $4; //@line 20029
      $122 = $ReallocAsyncCtx4 + 12 | 0; //@line 20030
      HEAP32[$122 >> 2] = $6; //@line 20031
      $123 = $ReallocAsyncCtx4 + 16 | 0; //@line 20032
      HEAP32[$123 >> 2] = $8; //@line 20033
      $124 = $ReallocAsyncCtx4 + 20 | 0; //@line 20034
      HEAP32[$124 >> 2] = $10; //@line 20035
      $125 = $ReallocAsyncCtx4 + 24 | 0; //@line 20036
      HEAP32[$125 >> 2] = $12; //@line 20037
      $126 = $ReallocAsyncCtx4 + 28 | 0; //@line 20038
      HEAP32[$126 >> 2] = $14; //@line 20039
      $127 = $ReallocAsyncCtx4 + 32 | 0; //@line 20040
      HEAP8[$127 >> 0] = $16; //@line 20041
      $128 = $ReallocAsyncCtx4 + 36 | 0; //@line 20042
      HEAP32[$128 >> 2] = $18; //@line 20043
      $129 = $ReallocAsyncCtx4 + 40 | 0; //@line 20044
      HEAP32[$129 >> 2] = $20; //@line 20045
      $130 = $ReallocAsyncCtx4 + 44 | 0; //@line 20046
      HEAP32[$130 >> 2] = $22; //@line 20047
      $131 = $ReallocAsyncCtx4 + 48 | 0; //@line 20048
      HEAP32[$131 >> 2] = $24; //@line 20049
      $132 = $ReallocAsyncCtx4 + 52 | 0; //@line 20050
      HEAP32[$132 >> 2] = $26; //@line 20051
      $133 = $ReallocAsyncCtx4 + 56 | 0; //@line 20052
      HEAP32[$133 >> 2] = $28; //@line 20053
      $134 = $ReallocAsyncCtx4 + 60 | 0; //@line 20054
      HEAP32[$134 >> 2] = $30; //@line 20055
      $135 = $ReallocAsyncCtx4 + 64 | 0; //@line 20056
      HEAP32[$135 >> 2] = $32; //@line 20057
      $136 = $ReallocAsyncCtx4 + 68 | 0; //@line 20058
      HEAP32[$136 >> 2] = $34; //@line 20059
      $137 = $ReallocAsyncCtx4 + 72 | 0; //@line 20060
      HEAP32[$137 >> 2] = $36; //@line 20061
      $138 = $ReallocAsyncCtx4 + 76 | 0; //@line 20062
      HEAP32[$138 >> 2] = $38; //@line 20063
      $139 = $ReallocAsyncCtx4 + 80 | 0; //@line 20064
      HEAP32[$139 >> 2] = $40; //@line 20065
      $140 = $ReallocAsyncCtx4 + 84 | 0; //@line 20066
      HEAP32[$140 >> 2] = $42; //@line 20067
      $141 = $ReallocAsyncCtx4 + 88 | 0; //@line 20068
      HEAP32[$141 >> 2] = $44; //@line 20069
      $142 = $ReallocAsyncCtx4 + 92 | 0; //@line 20070
      HEAP32[$142 >> 2] = $46; //@line 20071
      $143 = $ReallocAsyncCtx4 + 96 | 0; //@line 20072
      HEAP32[$143 >> 2] = $48; //@line 20073
      $144 = $ReallocAsyncCtx4 + 100 | 0; //@line 20074
      HEAP8[$144 >> 0] = $$0; //@line 20075
      $145 = $ReallocAsyncCtx4 + 101 | 0; //@line 20076
      HEAP8[$145 >> 0] = $$094; //@line 20077
      $146 = $ReallocAsyncCtx4 + 102 | 0; //@line 20078
      HEAP8[$146 >> 0] = $$097; //@line 20079
      sp = STACKTOP; //@line 20080
      STACKTOP = sp; //@line 20081
      return;
     }
    }
    $64 = HEAP32[(HEAP32[$34 >> 2] | 0) + 28 >> 2] | 0; //@line 20087
    $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 20088
    $65 = FUNCTION_TABLE_iiii[$64 & 31]($36, $61 & 255, $22) | 0; //@line 20089
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 20092
     $66 = $ReallocAsyncCtx + 4 | 0; //@line 20093
     HEAP32[$66 >> 2] = $2; //@line 20094
     $67 = $ReallocAsyncCtx + 8 | 0; //@line 20095
     HEAP32[$67 >> 2] = $4; //@line 20096
     $68 = $ReallocAsyncCtx + 12 | 0; //@line 20097
     HEAP32[$68 >> 2] = $6; //@line 20098
     $69 = $ReallocAsyncCtx + 16 | 0; //@line 20099
     HEAP32[$69 >> 2] = $8; //@line 20100
     $70 = $ReallocAsyncCtx + 20 | 0; //@line 20101
     HEAP32[$70 >> 2] = $10; //@line 20102
     $71 = $ReallocAsyncCtx + 24 | 0; //@line 20103
     HEAP32[$71 >> 2] = $12; //@line 20104
     $72 = $ReallocAsyncCtx + 28 | 0; //@line 20105
     HEAP32[$72 >> 2] = $14; //@line 20106
     $73 = $ReallocAsyncCtx + 32 | 0; //@line 20107
     HEAP8[$73 >> 0] = $16; //@line 20108
     $74 = $ReallocAsyncCtx + 36 | 0; //@line 20109
     HEAP32[$74 >> 2] = $18; //@line 20110
     $75 = $ReallocAsyncCtx + 40 | 0; //@line 20111
     HEAP32[$75 >> 2] = $20; //@line 20112
     $76 = $ReallocAsyncCtx + 44 | 0; //@line 20113
     HEAP32[$76 >> 2] = $22; //@line 20114
     $77 = $ReallocAsyncCtx + 48 | 0; //@line 20115
     HEAP8[$77 >> 0] = $$094; //@line 20116
     $78 = $ReallocAsyncCtx + 52 | 0; //@line 20117
     HEAP32[$78 >> 2] = $24; //@line 20118
     $79 = $ReallocAsyncCtx + 56 | 0; //@line 20119
     HEAP32[$79 >> 2] = $26; //@line 20120
     $80 = $ReallocAsyncCtx + 60 | 0; //@line 20121
     HEAP32[$80 >> 2] = $28; //@line 20122
     $81 = $ReallocAsyncCtx + 64 | 0; //@line 20123
     HEAP32[$81 >> 2] = $30; //@line 20124
     $82 = $ReallocAsyncCtx + 68 | 0; //@line 20125
     HEAP32[$82 >> 2] = $32; //@line 20126
     $83 = $ReallocAsyncCtx + 72 | 0; //@line 20127
     HEAP8[$83 >> 0] = $$1107; //@line 20128
     $84 = $ReallocAsyncCtx + 76 | 0; //@line 20129
     HEAP32[$84 >> 2] = $34; //@line 20130
     $85 = $ReallocAsyncCtx + 80 | 0; //@line 20131
     HEAP32[$85 >> 2] = $36; //@line 20132
     $86 = $ReallocAsyncCtx + 84 | 0; //@line 20133
     HEAP8[$86 >> 0] = $61; //@line 20134
     $87 = $ReallocAsyncCtx + 88 | 0; //@line 20135
     HEAP32[$87 >> 2] = $38; //@line 20136
     $88 = $ReallocAsyncCtx + 92 | 0; //@line 20137
     HEAP32[$88 >> 2] = $40; //@line 20138
     $89 = $ReallocAsyncCtx + 96 | 0; //@line 20139
     HEAP32[$89 >> 2] = $42; //@line 20140
     $90 = $ReallocAsyncCtx + 100 | 0; //@line 20141
     HEAP32[$90 >> 2] = $44; //@line 20142
     $91 = $ReallocAsyncCtx + 104 | 0; //@line 20143
     HEAP32[$91 >> 2] = $46; //@line 20144
     $92 = $ReallocAsyncCtx + 108 | 0; //@line 20145
     HEAP32[$92 >> 2] = $48; //@line 20146
     sp = STACKTOP; //@line 20147
     STACKTOP = sp; //@line 20148
     return;
    }
    HEAP32[___async_retval >> 2] = $65; //@line 20151
    ___async_unwind = 0; //@line 20152
    HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 20153
    $66 = $ReallocAsyncCtx + 4 | 0; //@line 20154
    HEAP32[$66 >> 2] = $2; //@line 20155
    $67 = $ReallocAsyncCtx + 8 | 0; //@line 20156
    HEAP32[$67 >> 2] = $4; //@line 20157
    $68 = $ReallocAsyncCtx + 12 | 0; //@line 20158
    HEAP32[$68 >> 2] = $6; //@line 20159
    $69 = $ReallocAsyncCtx + 16 | 0; //@line 20160
    HEAP32[$69 >> 2] = $8; //@line 20161
    $70 = $ReallocAsyncCtx + 20 | 0; //@line 20162
    HEAP32[$70 >> 2] = $10; //@line 20163
    $71 = $ReallocAsyncCtx + 24 | 0; //@line 20164
    HEAP32[$71 >> 2] = $12; //@line 20165
    $72 = $ReallocAsyncCtx + 28 | 0; //@line 20166
    HEAP32[$72 >> 2] = $14; //@line 20167
    $73 = $ReallocAsyncCtx + 32 | 0; //@line 20168
    HEAP8[$73 >> 0] = $16; //@line 20169
    $74 = $ReallocAsyncCtx + 36 | 0; //@line 20170
    HEAP32[$74 >> 2] = $18; //@line 20171
    $75 = $ReallocAsyncCtx + 40 | 0; //@line 20172
    HEAP32[$75 >> 2] = $20; //@line 20173
    $76 = $ReallocAsyncCtx + 44 | 0; //@line 20174
    HEAP32[$76 >> 2] = $22; //@line 20175
    $77 = $ReallocAsyncCtx + 48 | 0; //@line 20176
    HEAP8[$77 >> 0] = $$094; //@line 20177
    $78 = $ReallocAsyncCtx + 52 | 0; //@line 20178
    HEAP32[$78 >> 2] = $24; //@line 20179
    $79 = $ReallocAsyncCtx + 56 | 0; //@line 20180
    HEAP32[$79 >> 2] = $26; //@line 20181
    $80 = $ReallocAsyncCtx + 60 | 0; //@line 20182
    HEAP32[$80 >> 2] = $28; //@line 20183
    $81 = $ReallocAsyncCtx + 64 | 0; //@line 20184
    HEAP32[$81 >> 2] = $30; //@line 20185
    $82 = $ReallocAsyncCtx + 68 | 0; //@line 20186
    HEAP32[$82 >> 2] = $32; //@line 20187
    $83 = $ReallocAsyncCtx + 72 | 0; //@line 20188
    HEAP8[$83 >> 0] = $$1107; //@line 20189
    $84 = $ReallocAsyncCtx + 76 | 0; //@line 20190
    HEAP32[$84 >> 2] = $34; //@line 20191
    $85 = $ReallocAsyncCtx + 80 | 0; //@line 20192
    HEAP32[$85 >> 2] = $36; //@line 20193
    $86 = $ReallocAsyncCtx + 84 | 0; //@line 20194
    HEAP8[$86 >> 0] = $61; //@line 20195
    $87 = $ReallocAsyncCtx + 88 | 0; //@line 20196
    HEAP32[$87 >> 2] = $38; //@line 20197
    $88 = $ReallocAsyncCtx + 92 | 0; //@line 20198
    HEAP32[$88 >> 2] = $40; //@line 20199
    $89 = $ReallocAsyncCtx + 96 | 0; //@line 20200
    HEAP32[$89 >> 2] = $42; //@line 20201
    $90 = $ReallocAsyncCtx + 100 | 0; //@line 20202
    HEAP32[$90 >> 2] = $44; //@line 20203
    $91 = $ReallocAsyncCtx + 104 | 0; //@line 20204
    HEAP32[$91 >> 2] = $46; //@line 20205
    $92 = $ReallocAsyncCtx + 108 | 0; //@line 20206
    HEAP32[$92 >> 2] = $48; //@line 20207
    sp = STACKTOP; //@line 20208
    STACKTOP = sp; //@line 20209
    return;
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  $$4110 = $$4$ph; //@line 20214
 }
 _free($4); //@line 20216
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 20217
 $162 = __ZN6Socket5closeEv($26) | 0; //@line 20218
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 20221
  $163 = $ReallocAsyncCtx6 + 4 | 0; //@line 20222
  HEAP32[$163 >> 2] = $$4110; //@line 20223
  $164 = $ReallocAsyncCtx6 + 8 | 0; //@line 20224
  HEAP32[$164 >> 2] = $20; //@line 20225
  $165 = $ReallocAsyncCtx6 + 12 | 0; //@line 20226
  HEAP32[$165 >> 2] = $28; //@line 20227
  sp = STACKTOP; //@line 20228
  STACKTOP = sp; //@line 20229
  return;
 }
 HEAP32[___async_retval >> 2] = $162; //@line 20232
 ___async_unwind = 0; //@line 20233
 HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 20234
 $163 = $ReallocAsyncCtx6 + 4 | 0; //@line 20235
 HEAP32[$163 >> 2] = $$4110; //@line 20236
 $164 = $ReallocAsyncCtx6 + 8 | 0; //@line 20237
 HEAP32[$164 >> 2] = $20; //@line 20238
 $165 = $ReallocAsyncCtx6 + 12 | 0; //@line 20239
 HEAP32[$165 >> 2] = $28; //@line 20240
 sp = STACKTOP; //@line 20241
 STACKTOP = sp; //@line 20242
 return;
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1713
 STACKTOP = STACKTOP + 96 | 0; //@line 1714
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 1714
 $vararg_buffer23 = sp + 72 | 0; //@line 1715
 $vararg_buffer20 = sp + 64 | 0; //@line 1716
 $vararg_buffer18 = sp + 56 | 0; //@line 1717
 $vararg_buffer15 = sp + 48 | 0; //@line 1718
 $vararg_buffer12 = sp + 40 | 0; //@line 1719
 $vararg_buffer9 = sp + 32 | 0; //@line 1720
 $vararg_buffer6 = sp + 24 | 0; //@line 1721
 $vararg_buffer3 = sp + 16 | 0; //@line 1722
 $vararg_buffer1 = sp + 8 | 0; //@line 1723
 $vararg_buffer = sp; //@line 1724
 $4 = sp + 80 | 0; //@line 1725
 $5 = HEAP32[135] | 0; //@line 1726
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 1730
   FUNCTION_TABLE_v[$5 & 7](); //@line 1731
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 64; //@line 1734
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1736
    HEAP8[$AsyncCtx + 8 >> 0] = $0; //@line 1738
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer23; //@line 1740
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer23; //@line 1742
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 1744
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer15; //@line 1746
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer15; //@line 1748
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer18; //@line 1750
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer18; //@line 1752
    HEAP32[$AsyncCtx + 40 >> 2] = $3; //@line 1754
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer6; //@line 1756
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer6; //@line 1758
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer9; //@line 1760
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer9; //@line 1762
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer12; //@line 1764
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer12; //@line 1766
    HEAP32[$AsyncCtx + 68 >> 2] = $4; //@line 1768
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer20; //@line 1770
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer20; //@line 1772
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer; //@line 1774
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer; //@line 1776
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer1; //@line 1778
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer1; //@line 1780
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer3; //@line 1782
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer3; //@line 1784
    sp = STACKTOP; //@line 1785
    STACKTOP = sp; //@line 1786
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1788
    HEAP32[137] = (HEAP32[137] | 0) + 1; //@line 1791
    break;
   }
  }
 } while (0);
 $34 = HEAP32[126] | 0; //@line 1796
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 1800
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[123] | 0; //@line 1806
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 1813
       break;
      }
     }
     $43 = HEAP32[124] | 0; //@line 1817
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 1821
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 1826
      } else {
       label = 11; //@line 1828
      }
     }
    } else {
     label = 11; //@line 1832
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 1836
   }
   if (!((HEAP32[133] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[130] = HEAP32[128]; //@line 1848
    break;
   }
   $54 = HEAPU8[488] | 0; //@line 1852
   $55 = $0 & 255; //@line 1853
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 1858
    $$lobit = $59 >>> 6; //@line 1859
    $60 = $$lobit & 255; //@line 1860
    $64 = ($54 & 32 | 0) == 0; //@line 1864
    $65 = HEAP32[127] | 0; //@line 1865
    $66 = HEAP32[126] | 0; //@line 1866
    $67 = $0 << 24 >> 24 == 1; //@line 1867
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1871
      _vsnprintf($66, $65, $2, $3) | 0; //@line 1872
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 65; //@line 1875
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 1878
       sp = STACKTOP; //@line 1879
       STACKTOP = sp; //@line 1880
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 1882
      $69 = HEAP32[134] | 0; //@line 1883
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[133] | 0; //@line 1887
       $74 = HEAP32[126] | 0; //@line 1888
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1889
       FUNCTION_TABLE_vi[$73 & 511]($74); //@line 1890
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 68; //@line 1893
        sp = STACKTOP; //@line 1894
        STACKTOP = sp; //@line 1895
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1897
        break;
       }
      }
      $71 = HEAP32[126] | 0; //@line 1901
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1902
      FUNCTION_TABLE_vi[$69 & 511]($71); //@line 1903
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 66; //@line 1906
       sp = STACKTOP; //@line 1907
       STACKTOP = sp; //@line 1908
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 1910
      $72 = HEAP32[134] | 0; //@line 1911
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1912
      FUNCTION_TABLE_vi[$72 & 511](3535); //@line 1913
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 67; //@line 1916
       sp = STACKTOP; //@line 1917
       STACKTOP = sp; //@line 1918
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1920
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 1927
       $$1143 = $66; //@line 1927
       $$1145 = $65; //@line 1927
       $$3154 = 0; //@line 1927
       label = 38; //@line 1928
      } else {
       if ($64) {
        $$0142 = $66; //@line 1931
        $$0144 = $65; //@line 1931
       } else {
        $76 = _snprintf($66, $65, 3537, $vararg_buffer) | 0; //@line 1933
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 1935
        $78 = ($$ | 0) > 0; //@line 1936
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 1941
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 1941
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 1945
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 3555; //@line 1951
          label = 35; //@line 1952
          break;
         }
        case 1:
         {
          $$sink = 3561; //@line 1956
          label = 35; //@line 1957
          break;
         }
        case 3:
         {
          $$sink = 3549; //@line 1961
          label = 35; //@line 1962
          break;
         }
        case 7:
         {
          $$sink = 3543; //@line 1966
          label = 35; //@line 1967
          break;
         }
        default:
         {
          $$0141 = 0; //@line 1971
          $$1152 = 0; //@line 1971
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 1975
         $$0141 = $60 & 1; //@line 1978
         $$1152 = _snprintf($$0142, $$0144, 3567, $vararg_buffer1) | 0; //@line 1978
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 1981
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 1983
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 1985
         $$1$off0 = $extract$t159; //@line 1990
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 1990
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 1990
         $$3154 = $$1152; //@line 1990
         label = 38; //@line 1991
        } else {
         $$1$off0 = $extract$t159; //@line 1993
         $$1143 = $$0142; //@line 1993
         $$1145 = $$0144; //@line 1993
         $$3154 = $$1152$; //@line 1993
         label = 38; //@line 1994
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[131] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 2007
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 2008
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 2009
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 69; //@line 2012
           HEAP8[$AsyncCtx60 + 4 >> 0] = $$1$off0 & 1; //@line 2015
           HEAP32[$AsyncCtx60 + 8 >> 2] = $vararg_buffer23; //@line 2017
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer23; //@line 2019
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer15; //@line 2021
           HEAP32[$AsyncCtx60 + 20 >> 2] = $1; //@line 2023
           HEAP32[$AsyncCtx60 + 24 >> 2] = $vararg_buffer15; //@line 2025
           HEAP32[$AsyncCtx60 + 28 >> 2] = $vararg_buffer18; //@line 2027
           HEAP32[$AsyncCtx60 + 32 >> 2] = $vararg_buffer18; //@line 2029
           HEAP32[$AsyncCtx60 + 36 >> 2] = $2; //@line 2031
           HEAP32[$AsyncCtx60 + 40 >> 2] = $3; //@line 2033
           HEAP32[$AsyncCtx60 + 44 >> 2] = $$1143; //@line 2035
           HEAP32[$AsyncCtx60 + 48 >> 2] = $$1145; //@line 2037
           HEAP32[$AsyncCtx60 + 52 >> 2] = $55; //@line 2039
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer6; //@line 2041
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer6; //@line 2043
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer9; //@line 2045
           HEAP32[$AsyncCtx60 + 68 >> 2] = $vararg_buffer9; //@line 2047
           HEAP32[$AsyncCtx60 + 72 >> 2] = $vararg_buffer12; //@line 2049
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer12; //@line 2051
           HEAP32[$AsyncCtx60 + 80 >> 2] = $vararg_buffer20; //@line 2053
           HEAP32[$AsyncCtx60 + 84 >> 2] = $vararg_buffer20; //@line 2055
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer3; //@line 2057
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer3; //@line 2059
           HEAP32[$AsyncCtx60 + 96 >> 2] = $4; //@line 2061
           HEAP32[$AsyncCtx60 + 100 >> 2] = $$3154; //@line 2063
           sp = STACKTOP; //@line 2064
           STACKTOP = sp; //@line 2065
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 2067
          $125 = HEAP32[131] | 0; //@line 2072
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 2073
          $126 = FUNCTION_TABLE_ii[$125 & 31](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 2074
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 70; //@line 2077
           HEAP8[$AsyncCtx38 + 4 >> 0] = $$1$off0 & 1; //@line 2080
           HEAP32[$AsyncCtx38 + 8 >> 2] = $vararg_buffer23; //@line 2082
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer23; //@line 2084
           HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer15; //@line 2086
           HEAP32[$AsyncCtx38 + 20 >> 2] = $1; //@line 2088
           HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer15; //@line 2090
           HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer18; //@line 2092
           HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer18; //@line 2094
           HEAP32[$AsyncCtx38 + 36 >> 2] = $2; //@line 2096
           HEAP32[$AsyncCtx38 + 40 >> 2] = $3; //@line 2098
           HEAP32[$AsyncCtx38 + 44 >> 2] = $$1143; //@line 2100
           HEAP32[$AsyncCtx38 + 48 >> 2] = $$1145; //@line 2102
           HEAP32[$AsyncCtx38 + 52 >> 2] = $55; //@line 2104
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer6; //@line 2106
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer6; //@line 2108
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer9; //@line 2110
           HEAP32[$AsyncCtx38 + 68 >> 2] = $vararg_buffer9; //@line 2112
           HEAP32[$AsyncCtx38 + 72 >> 2] = $vararg_buffer12; //@line 2114
           HEAP32[$AsyncCtx38 + 76 >> 2] = $vararg_buffer12; //@line 2116
           HEAP32[$AsyncCtx38 + 80 >> 2] = $vararg_buffer20; //@line 2118
           HEAP32[$AsyncCtx38 + 84 >> 2] = $vararg_buffer20; //@line 2120
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer3; //@line 2122
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer3; //@line 2124
           HEAP32[$AsyncCtx38 + 96 >> 2] = $4; //@line 2126
           sp = STACKTOP; //@line 2127
           STACKTOP = sp; //@line 2128
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 2130
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 2131
           $151 = _snprintf($$1143, $$1145, 3567, $vararg_buffer3) | 0; //@line 2132
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 2134
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 2139
            $$3147 = $$1145 - $$10 | 0; //@line 2139
            label = 44; //@line 2140
            break;
           } else {
            $$3147168 = $$1145; //@line 2143
            $$3169 = $$1143; //@line 2143
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 2148
          $$3147 = $$1145; //@line 2148
          label = 44; //@line 2149
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 2155
          $$3169 = $$3; //@line 2155
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 2160
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 2166
          $$5156 = _snprintf($$3169, $$3147168, 3570, $vararg_buffer6) | 0; //@line 2168
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 2172
          $$5156 = _snprintf($$3169, $$3147168, 3585, $vararg_buffer9) | 0; //@line 2174
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 2178
          $$5156 = _snprintf($$3169, $$3147168, 3600, $vararg_buffer12) | 0; //@line 2180
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 2184
          $$5156 = _snprintf($$3169, $$3147168, 3615, $vararg_buffer15) | 0; //@line 2186
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 3630, $vararg_buffer18) | 0; //@line 2191
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 2195
        $168 = $$3169 + $$5156$ | 0; //@line 2197
        $169 = $$3147168 - $$5156$ | 0; //@line 2198
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2202
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 2203
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 71; //@line 2206
          HEAP8[$AsyncCtx56 + 4 >> 0] = $$1$off0 & 1; //@line 2209
          HEAP32[$AsyncCtx56 + 8 >> 2] = $vararg_buffer23; //@line 2211
          HEAP32[$AsyncCtx56 + 12 >> 2] = $vararg_buffer23; //@line 2213
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer20; //@line 2215
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer20; //@line 2217
          HEAP32[$AsyncCtx56 + 24 >> 2] = $169; //@line 2219
          HEAP32[$AsyncCtx56 + 28 >> 2] = $168; //@line 2221
          sp = STACKTOP; //@line 2222
          STACKTOP = sp; //@line 2223
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 2225
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 2227
         $181 = $168 + $$13 | 0; //@line 2229
         $182 = $169 - $$13 | 0; //@line 2230
         if (($$13 | 0) > 0) {
          $184 = HEAP32[132] | 0; //@line 2233
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2238
            $186 = FUNCTION_TABLE_i[$184 & 0]() | 0; //@line 2239
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 72; //@line 2242
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 2244
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 2246
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 2248
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 2250
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 2253
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 2255
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 2257
             sp = STACKTOP; //@line 2258
             STACKTOP = sp; //@line 2259
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 2261
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 2262
             $194 = _snprintf($181, $182, 3567, $vararg_buffer20) | 0; //@line 2263
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 2265
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 2270
              $$6150 = $182 - $$18 | 0; //@line 2270
              $$9 = $$18; //@line 2270
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 2277
            $$6150 = $182; //@line 2277
            $$9 = $$13; //@line 2277
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 3645, $vararg_buffer23) | 0; //@line 2286
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[133] | 0; //@line 2292
      $202 = HEAP32[126] | 0; //@line 2293
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2294
      FUNCTION_TABLE_vi[$201 & 511]($202); //@line 2295
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 73; //@line 2298
       sp = STACKTOP; //@line 2299
       STACKTOP = sp; //@line 2300
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 2302
       break;
      }
     }
    } while (0);
    HEAP32[130] = HEAP32[128]; //@line 2308
   }
  }
 } while (0);
 $204 = HEAP32[136] | 0; //@line 2312
 if (!$204) {
  STACKTOP = sp; //@line 2315
  return;
 }
 $206 = HEAP32[137] | 0; //@line 2317
 HEAP32[137] = 0; //@line 2318
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2319
 FUNCTION_TABLE_v[$204 & 7](); //@line 2320
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 74; //@line 2323
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 2325
  sp = STACKTOP; //@line 2326
  STACKTOP = sp; //@line 2327
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 2329
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 2332
 } else {
  STACKTOP = sp; //@line 2334
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 2337
  $$pre = HEAP32[136] | 0; //@line 2338
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2339
  FUNCTION_TABLE_v[$$pre & 7](); //@line 2340
  if (___async) {
   label = 70; //@line 2343
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 2346
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 2349
  } else {
   label = 72; //@line 2351
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 75; //@line 2356
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 2358
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 2360
  sp = STACKTOP; //@line 2361
  STACKTOP = sp; //@line 2362
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 2365
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_100($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $101 = 0, $104 = 0, $111 = 0, $113 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $151 = 0, $153 = 0, $16 = 0, $161 = 0, $164 = 0, $166 = 0, $174 = 0, $177 = 0, $179 = 0, $18 = 0, $187 = 0, $190 = 0, $192 = 0, $2 = 0, $20 = 0, $205 = 0, $206 = 0, $207 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $86 = 0, $87 = 0, $95 = 0, $98 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1055
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1057
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1059
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1061
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1063
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1065
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1067
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1069
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1071
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1073
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1075
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1077
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 1079
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 1081
 $27 = $24 + 12 | 0; //@line 1082
 $28 = HEAP32[$27 >> 2] | 0; //@line 1083
 if ($28 | 0) {
  $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 1087
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 1088
  FUNCTION_TABLE_vii[$31 & 7]($26, $24); //@line 1089
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 1092
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 1093
   HEAP32[$32 >> 2] = $2; //@line 1094
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 1095
   HEAP32[$33 >> 2] = $4; //@line 1096
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 1097
   HEAP32[$34 >> 2] = $6; //@line 1098
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 1099
   HEAP32[$35 >> 2] = $8; //@line 1100
   $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 1101
   HEAP32[$36 >> 2] = $10; //@line 1102
   $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 1103
   HEAP32[$37 >> 2] = $12; //@line 1104
   $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 1105
   HEAP32[$38 >> 2] = $14; //@line 1106
   $39 = $ReallocAsyncCtx3 + 32 | 0; //@line 1107
   HEAP32[$39 >> 2] = $16; //@line 1108
   $40 = $ReallocAsyncCtx3 + 36 | 0; //@line 1109
   HEAP32[$40 >> 2] = $18; //@line 1110
   $41 = $ReallocAsyncCtx3 + 40 | 0; //@line 1111
   HEAP32[$41 >> 2] = $27; //@line 1112
   $42 = $ReallocAsyncCtx3 + 44 | 0; //@line 1113
   HEAP32[$42 >> 2] = $20; //@line 1114
   $43 = $ReallocAsyncCtx3 + 48 | 0; //@line 1115
   HEAP32[$43 >> 2] = $22; //@line 1116
   $44 = $ReallocAsyncCtx3 + 52 | 0; //@line 1117
   HEAP32[$44 >> 2] = $26; //@line 1118
   sp = STACKTOP; //@line 1119
   return;
  }
  ___async_unwind = 0; //@line 1122
  HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 1123
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 1124
  HEAP32[$32 >> 2] = $2; //@line 1125
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 1126
  HEAP32[$33 >> 2] = $4; //@line 1127
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 1128
  HEAP32[$34 >> 2] = $6; //@line 1129
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 1130
  HEAP32[$35 >> 2] = $8; //@line 1131
  $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 1132
  HEAP32[$36 >> 2] = $10; //@line 1133
  $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 1134
  HEAP32[$37 >> 2] = $12; //@line 1135
  $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 1136
  HEAP32[$38 >> 2] = $14; //@line 1137
  $39 = $ReallocAsyncCtx3 + 32 | 0; //@line 1138
  HEAP32[$39 >> 2] = $16; //@line 1139
  $40 = $ReallocAsyncCtx3 + 36 | 0; //@line 1140
  HEAP32[$40 >> 2] = $18; //@line 1141
  $41 = $ReallocAsyncCtx3 + 40 | 0; //@line 1142
  HEAP32[$41 >> 2] = $27; //@line 1143
  $42 = $ReallocAsyncCtx3 + 44 | 0; //@line 1144
  HEAP32[$42 >> 2] = $20; //@line 1145
  $43 = $ReallocAsyncCtx3 + 48 | 0; //@line 1146
  HEAP32[$43 >> 2] = $22; //@line 1147
  $44 = $ReallocAsyncCtx3 + 52 | 0; //@line 1148
  HEAP32[$44 >> 2] = $26; //@line 1149
  sp = STACKTOP; //@line 1150
  return;
 }
 HEAP32[$22 >> 2] = 0; //@line 1153
 $45 = $4 + 32 | 0; //@line 1154
 do {
  if (($45 | 0) != ($10 | 0)) {
   $47 = $4 + 44 | 0; //@line 1158
   $48 = HEAP32[$47 >> 2] | 0; //@line 1159
   if ($48 | 0) {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 1163
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 1164
    FUNCTION_TABLE_vi[$51 & 511]($45); //@line 1165
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 1168
     $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 1169
     HEAP32[$52 >> 2] = $2; //@line 1170
     $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 1171
     HEAP32[$53 >> 2] = $4; //@line 1172
     $54 = $ReallocAsyncCtx4 + 12 | 0; //@line 1173
     HEAP32[$54 >> 2] = $6; //@line 1174
     $55 = $ReallocAsyncCtx4 + 16 | 0; //@line 1175
     HEAP32[$55 >> 2] = $8; //@line 1176
     $56 = $ReallocAsyncCtx4 + 20 | 0; //@line 1177
     HEAP32[$56 >> 2] = $47; //@line 1178
     $57 = $ReallocAsyncCtx4 + 24 | 0; //@line 1179
     HEAP32[$57 >> 2] = $10; //@line 1180
     $58 = $ReallocAsyncCtx4 + 28 | 0; //@line 1181
     HEAP32[$58 >> 2] = $45; //@line 1182
     $59 = $ReallocAsyncCtx4 + 32 | 0; //@line 1183
     HEAP32[$59 >> 2] = $12; //@line 1184
     $60 = $ReallocAsyncCtx4 + 36 | 0; //@line 1185
     HEAP32[$60 >> 2] = $14; //@line 1186
     $61 = $ReallocAsyncCtx4 + 40 | 0; //@line 1187
     HEAP32[$61 >> 2] = $16; //@line 1188
     $62 = $ReallocAsyncCtx4 + 44 | 0; //@line 1189
     HEAP32[$62 >> 2] = $18; //@line 1190
     $63 = $ReallocAsyncCtx4 + 48 | 0; //@line 1191
     HEAP32[$63 >> 2] = $20; //@line 1192
     $64 = $ReallocAsyncCtx4 + 52 | 0; //@line 1193
     HEAP32[$64 >> 2] = $26; //@line 1194
     sp = STACKTOP; //@line 1195
     return;
    }
    ___async_unwind = 0; //@line 1198
    HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 1199
    $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 1200
    HEAP32[$52 >> 2] = $2; //@line 1201
    $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 1202
    HEAP32[$53 >> 2] = $4; //@line 1203
    $54 = $ReallocAsyncCtx4 + 12 | 0; //@line 1204
    HEAP32[$54 >> 2] = $6; //@line 1205
    $55 = $ReallocAsyncCtx4 + 16 | 0; //@line 1206
    HEAP32[$55 >> 2] = $8; //@line 1207
    $56 = $ReallocAsyncCtx4 + 20 | 0; //@line 1208
    HEAP32[$56 >> 2] = $47; //@line 1209
    $57 = $ReallocAsyncCtx4 + 24 | 0; //@line 1210
    HEAP32[$57 >> 2] = $10; //@line 1211
    $58 = $ReallocAsyncCtx4 + 28 | 0; //@line 1212
    HEAP32[$58 >> 2] = $45; //@line 1213
    $59 = $ReallocAsyncCtx4 + 32 | 0; //@line 1214
    HEAP32[$59 >> 2] = $12; //@line 1215
    $60 = $ReallocAsyncCtx4 + 36 | 0; //@line 1216
    HEAP32[$60 >> 2] = $14; //@line 1217
    $61 = $ReallocAsyncCtx4 + 40 | 0; //@line 1218
    HEAP32[$61 >> 2] = $16; //@line 1219
    $62 = $ReallocAsyncCtx4 + 44 | 0; //@line 1220
    HEAP32[$62 >> 2] = $18; //@line 1221
    $63 = $ReallocAsyncCtx4 + 48 | 0; //@line 1222
    HEAP32[$63 >> 2] = $20; //@line 1223
    $64 = $ReallocAsyncCtx4 + 52 | 0; //@line 1224
    HEAP32[$64 >> 2] = $26; //@line 1225
    sp = STACKTOP; //@line 1226
    return;
   }
   $65 = $10 + 12 | 0; //@line 1229
   $66 = HEAP32[$65 >> 2] | 0; //@line 1230
   if (!$66) {
    HEAP32[$47 >> 2] = 0; //@line 1233
    break;
   }
   $69 = HEAP32[$66 + 4 >> 2] | 0; //@line 1237
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 1238
   FUNCTION_TABLE_vii[$69 & 7]($45, $10); //@line 1239
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 1242
    $70 = $ReallocAsyncCtx5 + 4 | 0; //@line 1243
    HEAP32[$70 >> 2] = $2; //@line 1244
    $71 = $ReallocAsyncCtx5 + 8 | 0; //@line 1245
    HEAP32[$71 >> 2] = $4; //@line 1246
    $72 = $ReallocAsyncCtx5 + 12 | 0; //@line 1247
    HEAP32[$72 >> 2] = $6; //@line 1248
    $73 = $ReallocAsyncCtx5 + 16 | 0; //@line 1249
    HEAP32[$73 >> 2] = $8; //@line 1250
    $74 = $ReallocAsyncCtx5 + 20 | 0; //@line 1251
    HEAP32[$74 >> 2] = $47; //@line 1252
    $75 = $ReallocAsyncCtx5 + 24 | 0; //@line 1253
    HEAP32[$75 >> 2] = $12; //@line 1254
    $76 = $ReallocAsyncCtx5 + 28 | 0; //@line 1255
    HEAP32[$76 >> 2] = $14; //@line 1256
    $77 = $ReallocAsyncCtx5 + 32 | 0; //@line 1257
    HEAP32[$77 >> 2] = $16; //@line 1258
    $78 = $ReallocAsyncCtx5 + 36 | 0; //@line 1259
    HEAP32[$78 >> 2] = $45; //@line 1260
    $79 = $ReallocAsyncCtx5 + 40 | 0; //@line 1261
    HEAP32[$79 >> 2] = $18; //@line 1262
    $80 = $ReallocAsyncCtx5 + 44 | 0; //@line 1263
    HEAP32[$80 >> 2] = $20; //@line 1264
    $81 = $ReallocAsyncCtx5 + 48 | 0; //@line 1265
    HEAP32[$81 >> 2] = $65; //@line 1266
    $82 = $ReallocAsyncCtx5 + 52 | 0; //@line 1267
    HEAP32[$82 >> 2] = $26; //@line 1268
    sp = STACKTOP; //@line 1269
    return;
   }
   ___async_unwind = 0; //@line 1272
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 1273
   $70 = $ReallocAsyncCtx5 + 4 | 0; //@line 1274
   HEAP32[$70 >> 2] = $2; //@line 1275
   $71 = $ReallocAsyncCtx5 + 8 | 0; //@line 1276
   HEAP32[$71 >> 2] = $4; //@line 1277
   $72 = $ReallocAsyncCtx5 + 12 | 0; //@line 1278
   HEAP32[$72 >> 2] = $6; //@line 1279
   $73 = $ReallocAsyncCtx5 + 16 | 0; //@line 1280
   HEAP32[$73 >> 2] = $8; //@line 1281
   $74 = $ReallocAsyncCtx5 + 20 | 0; //@line 1282
   HEAP32[$74 >> 2] = $47; //@line 1283
   $75 = $ReallocAsyncCtx5 + 24 | 0; //@line 1284
   HEAP32[$75 >> 2] = $12; //@line 1285
   $76 = $ReallocAsyncCtx5 + 28 | 0; //@line 1286
   HEAP32[$76 >> 2] = $14; //@line 1287
   $77 = $ReallocAsyncCtx5 + 32 | 0; //@line 1288
   HEAP32[$77 >> 2] = $16; //@line 1289
   $78 = $ReallocAsyncCtx5 + 36 | 0; //@line 1290
   HEAP32[$78 >> 2] = $45; //@line 1291
   $79 = $ReallocAsyncCtx5 + 40 | 0; //@line 1292
   HEAP32[$79 >> 2] = $18; //@line 1293
   $80 = $ReallocAsyncCtx5 + 44 | 0; //@line 1294
   HEAP32[$80 >> 2] = $20; //@line 1295
   $81 = $ReallocAsyncCtx5 + 48 | 0; //@line 1296
   HEAP32[$81 >> 2] = $65; //@line 1297
   $82 = $ReallocAsyncCtx5 + 52 | 0; //@line 1298
   HEAP32[$82 >> 2] = $26; //@line 1299
   sp = STACKTOP; //@line 1300
   return;
  }
 } while (0);
 HEAP32[$4 + 8 >> 2] = $2; //@line 1305
 HEAP32[$4 + 48 >> 2] = $6; //@line 1307
 HEAP32[$4 + 52 >> 2] = $8; //@line 1309
 $86 = $4 + 56 | 0; //@line 1310
 HEAP32[$86 >> 2] = 0; //@line 1311
 $87 = $4 + 60 | 0; //@line 1312
 HEAP32[$87 >> 2] = 0; //@line 1313
 HEAP32[$4 + 64 >> 2] = 0; //@line 1315
 HEAP8[$4 + 82 >> 0] = 0; //@line 1317
 HEAP8[$4 + 83 >> 0] = 1; //@line 1319
 HEAP8[$4 + 84 >> 0] = 3; //@line 1321
 HEAP8[$4 + 85 >> 0] = 0; //@line 1323
 HEAP16[$4 + 80 >> 1] = 0; //@line 1325
 HEAP32[$4 + 76 >> 2] = 0; //@line 1327
 $95 = $4 + 72 | 0; //@line 1328
 HEAP32[$95 >> 2] = 15500; //@line 1329
 HEAP8[$4 + 86 >> 0] = 0; //@line 1331
 HEAP32[$4 + 88 >> 2] = 0; //@line 1333
 $98 = HEAP32[187] | 0; //@line 1334
 HEAP32[187] = $98 + 1; //@line 1336
 HEAP32[$4 >> 2] = ($98 | 0) > 32767 ? 1 : $98; //@line 1339
 $101 = HEAP32[1961] | 0; //@line 1340
 if (!$101) {
  $$1 = 0; //@line 1343
  $151 = 0; //@line 1343
 } else {
  $104 = HEAP32[$101 + 56 >> 2] | 0; //@line 1346
  if (!$104) {
   $$1 = 1; //@line 1349
   $151 = 0; //@line 1349
  } else {
   if ((HEAP32[$101 + 8 >> 2] | 0) == ($2 | 0)) {
    HEAP32[$86 >> 2] = $104; //@line 1355
    HEAP32[$87 >> 2] = HEAP32[$101 + 60 >> 2]; //@line 1358
    $$1 = 1; //@line 1359
    $151 = $104; //@line 1359
   } else {
    $$1 = 1; //@line 1361
    $151 = 0; //@line 1361
   }
  }
 }
 $111 = HEAP32[1962] | 0; //@line 1365
 if (!$111) {
  $$1$1 = $$1; //@line 1368
  $164 = $151; //@line 1368
 } else {
  if (!$151) {
   $153 = HEAP32[$111 + 56 >> 2] | 0; //@line 1373
   if (!$153) {
    $205 = 0; //@line 1376
   } else {
    if ((HEAP32[$111 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$86 >> 2] = $153; //@line 1382
     HEAP32[$87 >> 2] = HEAP32[$111 + 60 >> 2]; //@line 1385
     $205 = $153; //@line 1386
    } else {
     $205 = 0; //@line 1388
    }
   }
  } else {
   $205 = $151; //@line 1392
  }
  $$1$1 = $$1 + 1 | 0; //@line 1395
  $164 = $205; //@line 1395
 }
 $161 = HEAP32[1963] | 0; //@line 1397
 if (!$161) {
  $$1$2 = $$1$1; //@line 1400
  $177 = $164; //@line 1400
 } else {
  if (!$164) {
   $166 = HEAP32[$161 + 56 >> 2] | 0; //@line 1405
   if (!$166) {
    $206 = 0; //@line 1408
   } else {
    if ((HEAP32[$161 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$86 >> 2] = $166; //@line 1414
     HEAP32[$87 >> 2] = HEAP32[$161 + 60 >> 2]; //@line 1417
     $206 = $166; //@line 1418
    } else {
     $206 = 0; //@line 1420
    }
   }
  } else {
   $206 = $164; //@line 1424
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 1427
  $177 = $206; //@line 1427
 }
 $174 = HEAP32[1964] | 0; //@line 1429
 if (!$174) {
  $$1$3 = $$1$2; //@line 1432
  $190 = $177; //@line 1432
 } else {
  if (!$177) {
   $179 = HEAP32[$174 + 56 >> 2] | 0; //@line 1437
   if (!$179) {
    $207 = 0; //@line 1440
   } else {
    if ((HEAP32[$174 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$86 >> 2] = $179; //@line 1446
     HEAP32[$87 >> 2] = HEAP32[$174 + 60 >> 2]; //@line 1449
     $207 = $179; //@line 1450
    } else {
     $207 = 0; //@line 1452
    }
   }
  } else {
   $207 = $177; //@line 1456
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 1459
  $190 = $207; //@line 1459
 }
 $187 = HEAP32[1965] | 0; //@line 1461
 if (!$187) {
  $$1$4 = $$1$3; //@line 1464
 } else {
  if (!$190) {
   $192 = HEAP32[$187 + 56 >> 2] | 0; //@line 1469
   if ($192 | 0) {
    if ((HEAP32[$187 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$86 >> 2] = $192; //@line 1476
     HEAP32[$87 >> 2] = HEAP32[$187 + 60 >> 2]; //@line 1479
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 1484
 }
 HEAP32[7844 + ($18 << 2) >> 2] = $4; //@line 1487
 HEAP32[$95 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 1490
 if (HEAP8[8724] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 1494
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 1495
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 1498
   $148 = $ReallocAsyncCtx13 + 4 | 0; //@line 1499
   HEAP32[$148 >> 2] = $4; //@line 1500
   $149 = $ReallocAsyncCtx13 + 8 | 0; //@line 1501
   HEAP32[$149 >> 2] = $16; //@line 1502
   sp = STACKTOP; //@line 1503
   return;
  }
  ___async_unwind = 0; //@line 1506
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 1507
  $148 = $ReallocAsyncCtx13 + 4 | 0; //@line 1508
  HEAP32[$148 >> 2] = $4; //@line 1509
  $149 = $ReallocAsyncCtx13 + 8 | 0; //@line 1510
  HEAP32[$149 >> 2] = $16; //@line 1511
  sp = STACKTOP; //@line 1512
  return;
 }
 $113 = $4 + 44 | 0; //@line 1515
 $114 = HEAP32[$113 >> 2] | 0; //@line 1516
 if (!$114) {
  $128 = $12 + 12 | 0; //@line 1519
  HEAP32[$128 >> 2] = 0; //@line 1520
  $130 = $14 + 4 | 0; //@line 1522
  HEAP32[$130 >> 2] = 0; //@line 1524
  HEAP32[$130 + 4 >> 2] = 0; //@line 1527
  HEAP32[$14 >> 2] = 3; //@line 1528
  $134 = $14 + 12 | 0; //@line 1529
  HEAP32[$134 >> 2] = 752; //@line 1530
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 1531
  $135 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($12, 100, $14) | 0; //@line 1532
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 1535
   $136 = $ReallocAsyncCtx14 + 4 | 0; //@line 1536
   HEAP32[$136 >> 2] = $134; //@line 1537
   $137 = $ReallocAsyncCtx14 + 8 | 0; //@line 1538
   HEAP32[$137 >> 2] = $12; //@line 1539
   $138 = $ReallocAsyncCtx14 + 12 | 0; //@line 1540
   HEAP32[$138 >> 2] = $128; //@line 1541
   $139 = $ReallocAsyncCtx14 + 16 | 0; //@line 1542
   HEAP32[$139 >> 2] = $14; //@line 1543
   $140 = $ReallocAsyncCtx14 + 20 | 0; //@line 1544
   HEAP32[$140 >> 2] = $16; //@line 1545
   $141 = $ReallocAsyncCtx14 + 24 | 0; //@line 1546
   HEAP32[$141 >> 2] = $4; //@line 1547
   $142 = $ReallocAsyncCtx14 + 28 | 0; //@line 1548
   HEAP32[$142 >> 2] = $26; //@line 1549
   $143 = $ReallocAsyncCtx14 + 32 | 0; //@line 1550
   HEAP32[$143 >> 2] = $4; //@line 1551
   $144 = $ReallocAsyncCtx14 + 36 | 0; //@line 1552
   HEAP32[$144 >> 2] = $20; //@line 1553
   $145 = $ReallocAsyncCtx14 + 40 | 0; //@line 1554
   HEAP32[$145 >> 2] = $113; //@line 1555
   $146 = $ReallocAsyncCtx14 + 44 | 0; //@line 1556
   HEAP32[$146 >> 2] = $45; //@line 1557
   sp = STACKTOP; //@line 1558
   return;
  }
  HEAP32[___async_retval >> 2] = $135; //@line 1562
  ___async_unwind = 0; //@line 1563
  HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 1564
  $136 = $ReallocAsyncCtx14 + 4 | 0; //@line 1565
  HEAP32[$136 >> 2] = $134; //@line 1566
  $137 = $ReallocAsyncCtx14 + 8 | 0; //@line 1567
  HEAP32[$137 >> 2] = $12; //@line 1568
  $138 = $ReallocAsyncCtx14 + 12 | 0; //@line 1569
  HEAP32[$138 >> 2] = $128; //@line 1570
  $139 = $ReallocAsyncCtx14 + 16 | 0; //@line 1571
  HEAP32[$139 >> 2] = $14; //@line 1572
  $140 = $ReallocAsyncCtx14 + 20 | 0; //@line 1573
  HEAP32[$140 >> 2] = $16; //@line 1574
  $141 = $ReallocAsyncCtx14 + 24 | 0; //@line 1575
  HEAP32[$141 >> 2] = $4; //@line 1576
  $142 = $ReallocAsyncCtx14 + 28 | 0; //@line 1577
  HEAP32[$142 >> 2] = $26; //@line 1578
  $143 = $ReallocAsyncCtx14 + 32 | 0; //@line 1579
  HEAP32[$143 >> 2] = $4; //@line 1580
  $144 = $ReallocAsyncCtx14 + 36 | 0; //@line 1581
  HEAP32[$144 >> 2] = $20; //@line 1582
  $145 = $ReallocAsyncCtx14 + 40 | 0; //@line 1583
  HEAP32[$145 >> 2] = $113; //@line 1584
  $146 = $ReallocAsyncCtx14 + 44 | 0; //@line 1585
  HEAP32[$146 >> 2] = $45; //@line 1586
  sp = STACKTOP; //@line 1587
  return;
 } else {
  $117 = HEAP32[$114 + 4 >> 2] | 0; //@line 1591
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 1592
  FUNCTION_TABLE_vii[$117 & 7]($12, $45); //@line 1593
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 1596
   $118 = $ReallocAsyncCtx6 + 4 | 0; //@line 1597
   HEAP32[$118 >> 2] = $12; //@line 1598
   $119 = $ReallocAsyncCtx6 + 8 | 0; //@line 1599
   HEAP32[$119 >> 2] = $14; //@line 1600
   $120 = $ReallocAsyncCtx6 + 12 | 0; //@line 1601
   HEAP32[$120 >> 2] = $16; //@line 1602
   $121 = $ReallocAsyncCtx6 + 16 | 0; //@line 1603
   HEAP32[$121 >> 2] = $4; //@line 1604
   $122 = $ReallocAsyncCtx6 + 20 | 0; //@line 1605
   HEAP32[$122 >> 2] = $4; //@line 1606
   $123 = $ReallocAsyncCtx6 + 24 | 0; //@line 1607
   HEAP32[$123 >> 2] = $113; //@line 1608
   $124 = $ReallocAsyncCtx6 + 28 | 0; //@line 1609
   HEAP32[$124 >> 2] = $20; //@line 1610
   $125 = $ReallocAsyncCtx6 + 32 | 0; //@line 1611
   HEAP32[$125 >> 2] = $113; //@line 1612
   $126 = $ReallocAsyncCtx6 + 36 | 0; //@line 1613
   HEAP32[$126 >> 2] = $45; //@line 1614
   $127 = $ReallocAsyncCtx6 + 40 | 0; //@line 1615
   HEAP32[$127 >> 2] = $26; //@line 1616
   sp = STACKTOP; //@line 1617
   return;
  }
  ___async_unwind = 0; //@line 1620
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 1621
  $118 = $ReallocAsyncCtx6 + 4 | 0; //@line 1622
  HEAP32[$118 >> 2] = $12; //@line 1623
  $119 = $ReallocAsyncCtx6 + 8 | 0; //@line 1624
  HEAP32[$119 >> 2] = $14; //@line 1625
  $120 = $ReallocAsyncCtx6 + 12 | 0; //@line 1626
  HEAP32[$120 >> 2] = $16; //@line 1627
  $121 = $ReallocAsyncCtx6 + 16 | 0; //@line 1628
  HEAP32[$121 >> 2] = $4; //@line 1629
  $122 = $ReallocAsyncCtx6 + 20 | 0; //@line 1630
  HEAP32[$122 >> 2] = $4; //@line 1631
  $123 = $ReallocAsyncCtx6 + 24 | 0; //@line 1632
  HEAP32[$123 >> 2] = $113; //@line 1633
  $124 = $ReallocAsyncCtx6 + 28 | 0; //@line 1634
  HEAP32[$124 >> 2] = $20; //@line 1635
  $125 = $ReallocAsyncCtx6 + 32 | 0; //@line 1636
  HEAP32[$125 >> 2] = $113; //@line 1637
  $126 = $ReallocAsyncCtx6 + 36 | 0; //@line 1638
  HEAP32[$126 >> 2] = $45; //@line 1639
  $127 = $ReallocAsyncCtx6 + 40 | 0; //@line 1640
  HEAP32[$127 >> 2] = $26; //@line 1641
  sp = STACKTOP; //@line 1642
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_59($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1107 = 0, $$2 = 0, $$byval_copy = 0, $$byval_copy16 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20856
 STACKTOP = STACKTOP + 48 | 0; //@line 20857
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 20857
 $$byval_copy16 = sp + 20 | 0; //@line 20858
 $$byval_copy = sp; //@line 20859
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20861
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20863
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20865
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20867
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20869
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20871
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20873
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20875
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20877
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20879
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20881
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20883
 if (!$AsyncRetVal) {
  __ZN6Socket11set_timeoutEi($14, 5e3); //@line 20886
  $25 = _malloc(512) | 0; //@line 20887
  if (!$25) {
   $$2 = -3007; //@line 20890
  } else {
   $27 = $25; //@line 20892
   $28 = $25 + 1 | 0; //@line 20893
   $29 = $25 + 2 | 0; //@line 20894
   $30 = $25 + 3 | 0; //@line 20895
   $31 = $25 + 4 | 0; //@line 20896
   $32 = $25 + 5 | 0; //@line 20897
   $33 = $25 + 6 | 0; //@line 20898
   $34 = $25 + 12 | 0; //@line 20899
   $$sink$i = ($22 | 0) == 2 ? 28 : 1; //@line 20901
   HEAP32[$18 >> 2] = 0; //@line 20902
   HEAP32[$18 + 4 >> 2] = 0; //@line 20902
   HEAP32[$18 + 8 >> 2] = 0; //@line 20902
   HEAP32[$18 + 12 >> 2] = 0; //@line 20902
   HEAP32[$18 + 16 >> 2] = 0; //@line 20902
   HEAP32[$$byval_copy >> 2] = HEAP32[$18 >> 2]; //@line 20903
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$18 + 4 >> 2]; //@line 20903
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$18 + 8 >> 2]; //@line 20903
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$18 + 12 >> 2]; //@line 20903
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$18 + 16 >> 2]; //@line 20903
   __ZN13SocketAddressC2E10nsapi_addrt($12, $$byval_copy, 0); //@line 20904
   do {
    if (3) {
     if (0 > 9) {
      if (!0) {
       break;
      } else {
       $$1107 = 0; //@line 20914
       $41 = 0; //@line 20914
      }
     } else {
      if (0 < 5) {
       $$1107 = 0; //@line 20919
       $41 = 0; //@line 20919
      } else {
       $76 = 648 + ((0 + -5 | 0) * 20 | 0) | 0; //@line 20923
       HEAP32[$$byval_copy16 >> 2] = HEAP32[$76 >> 2]; //@line 20924
       HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$76 + 4 >> 2]; //@line 20924
       HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$76 + 8 >> 2]; //@line 20924
       HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$76 + 12 >> 2]; //@line 20924
       HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$76 + 16 >> 2]; //@line 20924
       __ZN13SocketAddress8set_addrE10nsapi_addr($12, $$byval_copy16); //@line 20925
       __ZN13SocketAddress8set_portEt($12, 53); //@line 20926
       HEAP8[$25 >> 0] = 0; //@line 20927
       HEAP8[$28 >> 0] = 1; //@line 20928
       HEAP8[$29 >> 0] = 1; //@line 20929
       HEAP8[$30 >> 0] = 0; //@line 20930
       HEAP8[$31 >> 0] = 0; //@line 20931
       HEAP8[$32 >> 0] = 1; //@line 20932
       HEAP8[$33 >> 0] = 0; //@line 20933
       HEAP8[$33 + 1 >> 0] = 0; //@line 20933
       HEAP8[$33 + 2 >> 0] = 0; //@line 20933
       HEAP8[$33 + 3 >> 0] = 0; //@line 20933
       HEAP8[$33 + 4 >> 0] = 0; //@line 20933
       HEAP8[$33 + 5 >> 0] = 0; //@line 20933
       if (!(HEAP8[$8 >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $34; //@line 20937
       } else {
        $$048$i = $8; //@line 20939
        $$sroa$0$0$in47$i = $34; //@line 20939
        while (1) {
         $79 = _strcspn($$048$i, 5116) | 0; //@line 20941
         $81 = $$sroa$0$0$in47$i + 1 | 0; //@line 20943
         HEAP8[$$sroa$0$0$in47$i >> 0] = $79; //@line 20944
         $82 = $79 & 255; //@line 20945
         _memcpy($81 | 0, $$048$i | 0, $82 | 0) | 0; //@line 20946
         $83 = $81 + $82 | 0; //@line 20947
         $$048$i = $$048$i + ($79 + ((HEAP8[$$048$i + $79 >> 0] | 0) == 46 & 1)) | 0; //@line 20953
         if (!(HEAP8[$$048$i >> 0] | 0)) {
          $$sroa$0$0$in$lcssa$i = $83; //@line 20957
          break;
         } else {
          $$sroa$0$0$in47$i = $83; //@line 20960
         }
        }
       }
       HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 20965
       HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 20967
       HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 20969
       HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 20971
       HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 20974
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 20976
       $99 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($10, $12, $25, $$sroa$0$0$in$lcssa$i + 5 - $27 | 0) | 0; //@line 20977
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 20980
        $100 = $ReallocAsyncCtx4 + 4 | 0; //@line 20981
        HEAP32[$100 >> 2] = $2; //@line 20982
        $101 = $ReallocAsyncCtx4 + 8 | 0; //@line 20983
        HEAP32[$101 >> 2] = $25; //@line 20984
        $102 = $ReallocAsyncCtx4 + 12 | 0; //@line 20985
        HEAP32[$102 >> 2] = $2; //@line 20986
        $103 = $ReallocAsyncCtx4 + 16 | 0; //@line 20987
        HEAP32[$103 >> 2] = $4; //@line 20988
        $104 = $ReallocAsyncCtx4 + 20 | 0; //@line 20989
        HEAP32[$104 >> 2] = $6; //@line 20990
        $105 = $ReallocAsyncCtx4 + 24 | 0; //@line 20991
        HEAP32[$105 >> 2] = $8; //@line 20992
        $106 = $ReallocAsyncCtx4 + 28 | 0; //@line 20993
        HEAP32[$106 >> 2] = $34; //@line 20994
        $107 = $ReallocAsyncCtx4 + 32 | 0; //@line 20995
        HEAP8[$107 >> 0] = $$sink$i; //@line 20996
        $108 = $ReallocAsyncCtx4 + 36 | 0; //@line 20997
        HEAP32[$108 >> 2] = $27; //@line 20998
        $109 = $ReallocAsyncCtx4 + 40 | 0; //@line 20999
        HEAP32[$109 >> 2] = $10; //@line 21000
        $110 = $ReallocAsyncCtx4 + 44 | 0; //@line 21001
        HEAP32[$110 >> 2] = $12; //@line 21002
        $111 = $ReallocAsyncCtx4 + 48 | 0; //@line 21003
        HEAP32[$111 >> 2] = $12; //@line 21004
        $112 = $ReallocAsyncCtx4 + 52 | 0; //@line 21005
        HEAP32[$112 >> 2] = $14; //@line 21006
        $113 = $ReallocAsyncCtx4 + 56 | 0; //@line 21007
        HEAP32[$113 >> 2] = $16; //@line 21008
        $114 = $ReallocAsyncCtx4 + 60 | 0; //@line 21009
        HEAP32[$114 >> 2] = $18; //@line 21010
        $115 = $ReallocAsyncCtx4 + 64 | 0; //@line 21011
        HEAP32[$115 >> 2] = $18; //@line 21012
        $116 = $ReallocAsyncCtx4 + 68 | 0; //@line 21013
        HEAP32[$116 >> 2] = $20; //@line 21014
        $117 = $ReallocAsyncCtx4 + 72 | 0; //@line 21015
        HEAP32[$117 >> 2] = $20; //@line 21016
        $118 = $ReallocAsyncCtx4 + 76 | 0; //@line 21017
        HEAP32[$118 >> 2] = $28; //@line 21018
        $119 = $ReallocAsyncCtx4 + 80 | 0; //@line 21019
        HEAP32[$119 >> 2] = $29; //@line 21020
        $120 = $ReallocAsyncCtx4 + 84 | 0; //@line 21021
        HEAP32[$120 >> 2] = $30; //@line 21022
        $121 = $ReallocAsyncCtx4 + 88 | 0; //@line 21023
        HEAP32[$121 >> 2] = $31; //@line 21024
        $122 = $ReallocAsyncCtx4 + 92 | 0; //@line 21025
        HEAP32[$122 >> 2] = $32; //@line 21026
        $123 = $ReallocAsyncCtx4 + 96 | 0; //@line 21027
        HEAP32[$123 >> 2] = $33; //@line 21028
        $124 = $ReallocAsyncCtx4 + 100 | 0; //@line 21029
        HEAP8[$124 >> 0] = 0; //@line 21030
        $125 = $ReallocAsyncCtx4 + 101 | 0; //@line 21031
        HEAP8[$125 >> 0] = 3; //@line 21032
        $126 = $ReallocAsyncCtx4 + 102 | 0; //@line 21033
        HEAP8[$126 >> 0] = 0; //@line 21034
        sp = STACKTOP; //@line 21035
        STACKTOP = sp; //@line 21036
        return;
       }
       HEAP32[___async_retval >> 2] = $99; //@line 21039
       ___async_unwind = 0; //@line 21040
       HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 21041
       $100 = $ReallocAsyncCtx4 + 4 | 0; //@line 21042
       HEAP32[$100 >> 2] = $2; //@line 21043
       $101 = $ReallocAsyncCtx4 + 8 | 0; //@line 21044
       HEAP32[$101 >> 2] = $25; //@line 21045
       $102 = $ReallocAsyncCtx4 + 12 | 0; //@line 21046
       HEAP32[$102 >> 2] = $2; //@line 21047
       $103 = $ReallocAsyncCtx4 + 16 | 0; //@line 21048
       HEAP32[$103 >> 2] = $4; //@line 21049
       $104 = $ReallocAsyncCtx4 + 20 | 0; //@line 21050
       HEAP32[$104 >> 2] = $6; //@line 21051
       $105 = $ReallocAsyncCtx4 + 24 | 0; //@line 21052
       HEAP32[$105 >> 2] = $8; //@line 21053
       $106 = $ReallocAsyncCtx4 + 28 | 0; //@line 21054
       HEAP32[$106 >> 2] = $34; //@line 21055
       $107 = $ReallocAsyncCtx4 + 32 | 0; //@line 21056
       HEAP8[$107 >> 0] = $$sink$i; //@line 21057
       $108 = $ReallocAsyncCtx4 + 36 | 0; //@line 21058
       HEAP32[$108 >> 2] = $27; //@line 21059
       $109 = $ReallocAsyncCtx4 + 40 | 0; //@line 21060
       HEAP32[$109 >> 2] = $10; //@line 21061
       $110 = $ReallocAsyncCtx4 + 44 | 0; //@line 21062
       HEAP32[$110 >> 2] = $12; //@line 21063
       $111 = $ReallocAsyncCtx4 + 48 | 0; //@line 21064
       HEAP32[$111 >> 2] = $12; //@line 21065
       $112 = $ReallocAsyncCtx4 + 52 | 0; //@line 21066
       HEAP32[$112 >> 2] = $14; //@line 21067
       $113 = $ReallocAsyncCtx4 + 56 | 0; //@line 21068
       HEAP32[$113 >> 2] = $16; //@line 21069
       $114 = $ReallocAsyncCtx4 + 60 | 0; //@line 21070
       HEAP32[$114 >> 2] = $18; //@line 21071
       $115 = $ReallocAsyncCtx4 + 64 | 0; //@line 21072
       HEAP32[$115 >> 2] = $18; //@line 21073
       $116 = $ReallocAsyncCtx4 + 68 | 0; //@line 21074
       HEAP32[$116 >> 2] = $20; //@line 21075
       $117 = $ReallocAsyncCtx4 + 72 | 0; //@line 21076
       HEAP32[$117 >> 2] = $20; //@line 21077
       $118 = $ReallocAsyncCtx4 + 76 | 0; //@line 21078
       HEAP32[$118 >> 2] = $28; //@line 21079
       $119 = $ReallocAsyncCtx4 + 80 | 0; //@line 21080
       HEAP32[$119 >> 2] = $29; //@line 21081
       $120 = $ReallocAsyncCtx4 + 84 | 0; //@line 21082
       HEAP32[$120 >> 2] = $30; //@line 21083
       $121 = $ReallocAsyncCtx4 + 88 | 0; //@line 21084
       HEAP32[$121 >> 2] = $31; //@line 21085
       $122 = $ReallocAsyncCtx4 + 92 | 0; //@line 21086
       HEAP32[$122 >> 2] = $32; //@line 21087
       $123 = $ReallocAsyncCtx4 + 96 | 0; //@line 21088
       HEAP32[$123 >> 2] = $33; //@line 21089
       $124 = $ReallocAsyncCtx4 + 100 | 0; //@line 21090
       HEAP8[$124 >> 0] = 0; //@line 21091
       $125 = $ReallocAsyncCtx4 + 101 | 0; //@line 21092
       HEAP8[$125 >> 0] = 3; //@line 21093
       $126 = $ReallocAsyncCtx4 + 102 | 0; //@line 21094
       HEAP8[$126 >> 0] = 0; //@line 21095
       sp = STACKTOP; //@line 21096
       STACKTOP = sp; //@line 21097
       return;
      }
     }
     $44 = HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0; //@line 21103
     $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 21104
     $45 = FUNCTION_TABLE_iiii[$44 & 31]($20, $41 & 255, $12) | 0; //@line 21105
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 21108
      $46 = $ReallocAsyncCtx + 4 | 0; //@line 21109
      HEAP32[$46 >> 2] = $2; //@line 21110
      $47 = $ReallocAsyncCtx + 8 | 0; //@line 21111
      HEAP32[$47 >> 2] = $25; //@line 21112
      $48 = $ReallocAsyncCtx + 12 | 0; //@line 21113
      HEAP32[$48 >> 2] = $2; //@line 21114
      $49 = $ReallocAsyncCtx + 16 | 0; //@line 21115
      HEAP32[$49 >> 2] = $4; //@line 21116
      $50 = $ReallocAsyncCtx + 20 | 0; //@line 21117
      HEAP32[$50 >> 2] = $6; //@line 21118
      $51 = $ReallocAsyncCtx + 24 | 0; //@line 21119
      HEAP32[$51 >> 2] = $8; //@line 21120
      $52 = $ReallocAsyncCtx + 28 | 0; //@line 21121
      HEAP32[$52 >> 2] = $34; //@line 21122
      $53 = $ReallocAsyncCtx + 32 | 0; //@line 21123
      HEAP8[$53 >> 0] = $$sink$i; //@line 21124
      $54 = $ReallocAsyncCtx + 36 | 0; //@line 21125
      HEAP32[$54 >> 2] = $27; //@line 21126
      $55 = $ReallocAsyncCtx + 40 | 0; //@line 21127
      HEAP32[$55 >> 2] = $10; //@line 21128
      $56 = $ReallocAsyncCtx + 44 | 0; //@line 21129
      HEAP32[$56 >> 2] = $12; //@line 21130
      $57 = $ReallocAsyncCtx + 48 | 0; //@line 21131
      HEAP8[$57 >> 0] = 3; //@line 21132
      $58 = $ReallocAsyncCtx + 52 | 0; //@line 21133
      HEAP32[$58 >> 2] = $12; //@line 21134
      $59 = $ReallocAsyncCtx + 56 | 0; //@line 21135
      HEAP32[$59 >> 2] = $14; //@line 21136
      $60 = $ReallocAsyncCtx + 60 | 0; //@line 21137
      HEAP32[$60 >> 2] = $16; //@line 21138
      $61 = $ReallocAsyncCtx + 64 | 0; //@line 21139
      HEAP32[$61 >> 2] = $18; //@line 21140
      $62 = $ReallocAsyncCtx + 68 | 0; //@line 21141
      HEAP32[$62 >> 2] = $18; //@line 21142
      $63 = $ReallocAsyncCtx + 72 | 0; //@line 21143
      HEAP8[$63 >> 0] = $$1107; //@line 21144
      $64 = $ReallocAsyncCtx + 76 | 0; //@line 21145
      HEAP32[$64 >> 2] = $20; //@line 21146
      $65 = $ReallocAsyncCtx + 80 | 0; //@line 21147
      HEAP32[$65 >> 2] = $20; //@line 21148
      $66 = $ReallocAsyncCtx + 84 | 0; //@line 21149
      HEAP8[$66 >> 0] = $41; //@line 21150
      $67 = $ReallocAsyncCtx + 88 | 0; //@line 21151
      HEAP32[$67 >> 2] = $28; //@line 21152
      $68 = $ReallocAsyncCtx + 92 | 0; //@line 21153
      HEAP32[$68 >> 2] = $29; //@line 21154
      $69 = $ReallocAsyncCtx + 96 | 0; //@line 21155
      HEAP32[$69 >> 2] = $30; //@line 21156
      $70 = $ReallocAsyncCtx + 100 | 0; //@line 21157
      HEAP32[$70 >> 2] = $31; //@line 21158
      $71 = $ReallocAsyncCtx + 104 | 0; //@line 21159
      HEAP32[$71 >> 2] = $32; //@line 21160
      $72 = $ReallocAsyncCtx + 108 | 0; //@line 21161
      HEAP32[$72 >> 2] = $33; //@line 21162
      sp = STACKTOP; //@line 21163
      STACKTOP = sp; //@line 21164
      return;
     }
     HEAP32[___async_retval >> 2] = $45; //@line 21167
     ___async_unwind = 0; //@line 21168
     HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 21169
     $46 = $ReallocAsyncCtx + 4 | 0; //@line 21170
     HEAP32[$46 >> 2] = $2; //@line 21171
     $47 = $ReallocAsyncCtx + 8 | 0; //@line 21172
     HEAP32[$47 >> 2] = $25; //@line 21173
     $48 = $ReallocAsyncCtx + 12 | 0; //@line 21174
     HEAP32[$48 >> 2] = $2; //@line 21175
     $49 = $ReallocAsyncCtx + 16 | 0; //@line 21176
     HEAP32[$49 >> 2] = $4; //@line 21177
     $50 = $ReallocAsyncCtx + 20 | 0; //@line 21178
     HEAP32[$50 >> 2] = $6; //@line 21179
     $51 = $ReallocAsyncCtx + 24 | 0; //@line 21180
     HEAP32[$51 >> 2] = $8; //@line 21181
     $52 = $ReallocAsyncCtx + 28 | 0; //@line 21182
     HEAP32[$52 >> 2] = $34; //@line 21183
     $53 = $ReallocAsyncCtx + 32 | 0; //@line 21184
     HEAP8[$53 >> 0] = $$sink$i; //@line 21185
     $54 = $ReallocAsyncCtx + 36 | 0; //@line 21186
     HEAP32[$54 >> 2] = $27; //@line 21187
     $55 = $ReallocAsyncCtx + 40 | 0; //@line 21188
     HEAP32[$55 >> 2] = $10; //@line 21189
     $56 = $ReallocAsyncCtx + 44 | 0; //@line 21190
     HEAP32[$56 >> 2] = $12; //@line 21191
     $57 = $ReallocAsyncCtx + 48 | 0; //@line 21192
     HEAP8[$57 >> 0] = 3; //@line 21193
     $58 = $ReallocAsyncCtx + 52 | 0; //@line 21194
     HEAP32[$58 >> 2] = $12; //@line 21195
     $59 = $ReallocAsyncCtx + 56 | 0; //@line 21196
     HEAP32[$59 >> 2] = $14; //@line 21197
     $60 = $ReallocAsyncCtx + 60 | 0; //@line 21198
     HEAP32[$60 >> 2] = $16; //@line 21199
     $61 = $ReallocAsyncCtx + 64 | 0; //@line 21200
     HEAP32[$61 >> 2] = $18; //@line 21201
     $62 = $ReallocAsyncCtx + 68 | 0; //@line 21202
     HEAP32[$62 >> 2] = $18; //@line 21203
     $63 = $ReallocAsyncCtx + 72 | 0; //@line 21204
     HEAP8[$63 >> 0] = $$1107; //@line 21205
     $64 = $ReallocAsyncCtx + 76 | 0; //@line 21206
     HEAP32[$64 >> 2] = $20; //@line 21207
     $65 = $ReallocAsyncCtx + 80 | 0; //@line 21208
     HEAP32[$65 >> 2] = $20; //@line 21209
     $66 = $ReallocAsyncCtx + 84 | 0; //@line 21210
     HEAP8[$66 >> 0] = $41; //@line 21211
     $67 = $ReallocAsyncCtx + 88 | 0; //@line 21212
     HEAP32[$67 >> 2] = $28; //@line 21213
     $68 = $ReallocAsyncCtx + 92 | 0; //@line 21214
     HEAP32[$68 >> 2] = $29; //@line 21215
     $69 = $ReallocAsyncCtx + 96 | 0; //@line 21216
     HEAP32[$69 >> 2] = $30; //@line 21217
     $70 = $ReallocAsyncCtx + 100 | 0; //@line 21218
     HEAP32[$70 >> 2] = $31; //@line 21219
     $71 = $ReallocAsyncCtx + 104 | 0; //@line 21220
     HEAP32[$71 >> 2] = $32; //@line 21221
     $72 = $ReallocAsyncCtx + 108 | 0; //@line 21222
     HEAP32[$72 >> 2] = $33; //@line 21223
     sp = STACKTOP; //@line 21224
     STACKTOP = sp; //@line 21225
     return;
    }
   } while (0);
   _free($25); //@line 21228
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 21229
   $128 = __ZN6Socket5closeEv($14) | 0; //@line 21230
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 21233
    $129 = $ReallocAsyncCtx6 + 4 | 0; //@line 21234
    HEAP32[$129 >> 2] = -3009; //@line 21235
    $130 = $ReallocAsyncCtx6 + 8 | 0; //@line 21236
    HEAP32[$130 >> 2] = $10; //@line 21237
    $131 = $ReallocAsyncCtx6 + 12 | 0; //@line 21238
    HEAP32[$131 >> 2] = $16; //@line 21239
    sp = STACKTOP; //@line 21240
    STACKTOP = sp; //@line 21241
    return;
   }
   HEAP32[___async_retval >> 2] = $128; //@line 21244
   ___async_unwind = 0; //@line 21245
   HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 21246
   $129 = $ReallocAsyncCtx6 + 4 | 0; //@line 21247
   HEAP32[$129 >> 2] = -3009; //@line 21248
   $130 = $ReallocAsyncCtx6 + 8 | 0; //@line 21249
   HEAP32[$130 >> 2] = $10; //@line 21250
   $131 = $ReallocAsyncCtx6 + 12 | 0; //@line 21251
   HEAP32[$131 >> 2] = $16; //@line 21252
   sp = STACKTOP; //@line 21253
   STACKTOP = sp; //@line 21254
   return;
  }
 } else {
  $$2 = $AsyncRetVal; //@line 21257
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 21259
 __ZN9UDPSocketD2Ev($10); //@line 21260
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 21263
  $133 = $ReallocAsyncCtx5 + 4 | 0; //@line 21264
  HEAP32[$133 >> 2] = $16; //@line 21265
  $134 = $ReallocAsyncCtx5 + 8 | 0; //@line 21266
  HEAP32[$134 >> 2] = $$2; //@line 21267
  sp = STACKTOP; //@line 21268
  STACKTOP = sp; //@line 21269
  return;
 }
 ___async_unwind = 0; //@line 21271
 HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 21272
 $133 = $ReallocAsyncCtx5 + 4 | 0; //@line 21273
 HEAP32[$133 >> 2] = $16; //@line 21274
 $134 = $ReallocAsyncCtx5 + 8 | 0; //@line 21275
 HEAP32[$134 >> 2] = $$2; //@line 21276
 sp = STACKTOP; //@line 21277
 STACKTOP = sp; //@line 21278
 return;
}
function __ZL28nsapi_dns_query_async_createPv($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $$pr$i = 0, $$pr$i72 = 0, $$pre85 = 0, $1 = 0, $104 = 0, $106 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $132 = 0, $14 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $157 = 0, $161 = 0, $163 = 0, $164 = 0, $170 = 0, $173 = 0, $177 = 0, $181 = 0, $189 = 0, $195 = 0, $2 = 0, $20 = 0, $203 = 0, $209 = 0, $217 = 0, $220 = 0, $222 = 0, $232 = 0, $236 = 0, $240 = 0, $244 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $52 = 0, $53 = 0, $57 = 0, $62 = 0, $63 = 0, $64 = 0, $69 = 0, $71 = 0, $76 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx39 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx48 = 0, $AsyncCtx51 = 0, $AsyncCtx54 = 0, $AsyncCtx57 = 0, $AsyncCtx6 = 0, $AsyncCtx61 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9691
 STACKTOP = STACKTOP + 32 | 0; //@line 9692
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9692
 $1 = sp + 16 | 0; //@line 9693
 $2 = sp; //@line 9694
 $3 = $0; //@line 9695
 $4 = HEAP32[1961] | 0; //@line 9696
 $5 = ($4 | 0) == 0; //@line 9697
 if ($5) {
  label = 3; //@line 9699
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa = $4; //@line 9704
  } else {
   label = 3; //@line 9706
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1962] | 0; //@line 9711
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $8; //@line 9717
     break;
    }
   }
   $232 = HEAP32[1963] | 0; //@line 9721
   if ($232 | 0) {
    if ((HEAP32[$232 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $232; //@line 9727
     break;
    }
   }
   $236 = HEAP32[1964] | 0; //@line 9731
   if ($236 | 0) {
    if ((HEAP32[$236 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $236; //@line 9737
     break;
    }
   }
   $240 = HEAP32[1965] | 0; //@line 9741
   if (!$240) {
    STACKTOP = sp; //@line 9744
    return;
   }
   if ((HEAP32[$240 >> 2] | 0) == ($3 | 0)) {
    $$lcssa = $240; //@line 9749
   } else {
    STACKTOP = sp; //@line 9751
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 2) {
  STACKTOP = sp; //@line 9759
  return;
 }
 $13 = $$lcssa + 56 | 0; //@line 9761
 $14 = $$lcssa + 8 | 0; //@line 9762
 $15 = $$lcssa + 60 | 0; //@line 9763
 if (!($5 | ($4 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $20 = HEAP32[$4 + 56 >> 2] | 0; //@line 9771
   if ($20 | 0) {
    if ((HEAP32[$4 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $20; //@line 9779
     HEAP32[$15 >> 2] = HEAP32[$4 + 60 >> 2]; //@line 9782
    }
   }
  }
 }
 $28 = HEAP32[1962] | 0; //@line 9787
 if (!(($28 | 0) == 0 | ($28 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $181 = HEAP32[$28 + 56 >> 2] | 0; //@line 9796
   if ($181 | 0) {
    if ((HEAP32[$28 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $181; //@line 9804
     HEAP32[$15 >> 2] = HEAP32[$28 + 60 >> 2]; //@line 9807
    }
   }
  }
 }
 $189 = HEAP32[1963] | 0; //@line 9812
 if (!(($189 | 0) == 0 | ($189 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $195 = HEAP32[$189 + 56 >> 2] | 0; //@line 9821
   if ($195 | 0) {
    if ((HEAP32[$189 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $195; //@line 9829
     HEAP32[$15 >> 2] = HEAP32[$189 + 60 >> 2]; //@line 9832
    }
   }
  }
 }
 $203 = HEAP32[1964] | 0; //@line 9837
 if (!(($203 | 0) == 0 | ($203 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $209 = HEAP32[$203 + 56 >> 2] | 0; //@line 9846
   if ($209 | 0) {
    if ((HEAP32[$203 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $209; //@line 9854
     HEAP32[$15 >> 2] = HEAP32[$203 + 60 >> 2]; //@line 9857
    }
   }
  }
 }
 $217 = HEAP32[1965] | 0; //@line 9862
 $220 = (HEAP32[$13 >> 2] | 0) == 0; //@line 9867
 if (($217 | 0) == 0 | ($217 | 0) == ($$lcssa | 0)) {
  if ($220) {
   label = 11; //@line 9870
  }
 } else {
  if ($220) {
   $222 = HEAP32[$217 + 56 >> 2] | 0; //@line 9875
   if (!$222) {
    label = 11; //@line 9878
   } else {
    if ((HEAP32[$217 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $222; //@line 9885
     HEAP32[$15 >> 2] = HEAP32[$217 + 60 >> 2]; //@line 9888
    } else {
     label = 11; //@line 9890
    }
   }
  }
 }
 if ((label | 0) == 11) {
  $AsyncCtx39 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9896
  $31 = __ZnwjRKSt9nothrow_t(56, 9765) | 0; //@line 9897
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 212; //@line 9900
   HEAP32[$AsyncCtx39 + 4 >> 2] = $$lcssa; //@line 9902
   HEAP32[$AsyncCtx39 + 8 >> 2] = $1; //@line 9904
   HEAP32[$AsyncCtx39 + 12 >> 2] = $1; //@line 9906
   HEAP32[$AsyncCtx39 + 16 >> 2] = $13; //@line 9908
   HEAP32[$AsyncCtx39 + 20 >> 2] = $2; //@line 9910
   HEAP32[$AsyncCtx39 + 24 >> 2] = $15; //@line 9912
   HEAP32[$AsyncCtx39 + 28 >> 2] = $14; //@line 9914
   sp = STACKTOP; //@line 9915
   STACKTOP = sp; //@line 9916
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 9918
  if (!$31) {
   $52 = $$lcssa + 28 | 0; //@line 9921
   $53 = HEAP32[$52 >> 2] | 0; //@line 9922
   do {
    if (!$53) {
     $63 = 0; //@line 9926
    } else {
     $57 = HEAP32[$53 + 4 >> 2] | 0; //@line 9930
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9931
     FUNCTION_TABLE_vii[$57 & 7]($1, $$lcssa + 16 | 0); //@line 9932
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 214; //@line 9935
      HEAP32[$AsyncCtx + 4 >> 2] = $52; //@line 9937
      HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9939
      HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa; //@line 9941
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9943
      sp = STACKTOP; //@line 9944
      STACKTOP = sp; //@line 9945
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 9947
      $63 = HEAP32[$52 >> 2] | 0; //@line 9949
      break;
     }
    }
   } while (0);
   $62 = $1 + 12 | 0; //@line 9954
   HEAP32[$62 >> 2] = $63; //@line 9955
   $64 = HEAP32[$$lcssa >> 2] | 0; //@line 9956
   $AsyncCtx48 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9957
   __ZL28nsapi_dns_query_async_deletei($64); //@line 9958
   if (___async) {
    HEAP32[$AsyncCtx48 >> 2] = 215; //@line 9961
    HEAP32[$AsyncCtx48 + 4 >> 2] = $62; //@line 9963
    HEAP32[$AsyncCtx48 + 8 >> 2] = $1; //@line 9965
    sp = STACKTOP; //@line 9966
    STACKTOP = sp; //@line 9967
    return;
   }
   _emscripten_free_async_context($AsyncCtx48 | 0); //@line 9969
   $AsyncCtx54 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9970
   __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9971
   if (___async) {
    HEAP32[$AsyncCtx54 >> 2] = 216; //@line 9974
    HEAP32[$AsyncCtx54 + 4 >> 2] = $62; //@line 9976
    HEAP32[$AsyncCtx54 + 8 >> 2] = $1; //@line 9978
    sp = STACKTOP; //@line 9979
    STACKTOP = sp; //@line 9980
    return;
   }
   _emscripten_free_async_context($AsyncCtx54 | 0); //@line 9982
   $69 = HEAP32[$62 >> 2] | 0; //@line 9983
   do {
    if ($69 | 0) {
     $71 = HEAP32[$69 >> 2] | 0; //@line 9987
     $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9988
     FUNCTION_TABLE_viii[$71 & 0]($1, -3007, 0); //@line 9989
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 217; //@line 9992
      HEAP32[$AsyncCtx2 + 4 >> 2] = $62; //@line 9994
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9996
      sp = STACKTOP; //@line 9997
      STACKTOP = sp; //@line 9998
      return;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10000
     $$pr$i = HEAP32[$62 >> 2] | 0; //@line 10001
     if ($$pr$i | 0) {
      $76 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 10005
      $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10006
      FUNCTION_TABLE_vi[$76 & 511]($1); //@line 10007
      if (___async) {
       HEAP32[$AsyncCtx6 >> 2] = 218; //@line 10010
       HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 10012
       sp = STACKTOP; //@line 10013
       STACKTOP = sp; //@line 10014
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10016
       break;
      }
     }
    }
   } while (0);
   STACKTOP = sp; //@line 10022
   return;
  }
  __ZN9UDPSocketC2Ev($31); //@line 10024
  $40 = HEAP32[$14 >> 2] | 0; //@line 10025
  $AsyncCtx61 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10026
  $41 = __ZN6Socket4openEP12NetworkStack($31, $40) | 0; //@line 10027
  if (___async) {
   HEAP32[$AsyncCtx61 >> 2] = 213; //@line 10030
   HEAP32[$AsyncCtx61 + 4 >> 2] = $$lcssa; //@line 10032
   HEAP32[$AsyncCtx61 + 8 >> 2] = $31; //@line 10034
   HEAP32[$AsyncCtx61 + 12 >> 2] = $31; //@line 10036
   HEAP32[$AsyncCtx61 + 16 >> 2] = $1; //@line 10038
   HEAP32[$AsyncCtx61 + 20 >> 2] = $13; //@line 10040
   HEAP32[$AsyncCtx61 + 24 >> 2] = $2; //@line 10042
   HEAP32[$AsyncCtx61 + 28 >> 2] = $15; //@line 10044
   HEAP32[$AsyncCtx61 + 32 >> 2] = $14; //@line 10046
   HEAP32[$AsyncCtx61 + 36 >> 2] = $31; //@line 10048
   sp = STACKTOP; //@line 10049
   STACKTOP = sp; //@line 10050
   return;
  }
  _emscripten_free_async_context($AsyncCtx61 | 0); //@line 10052
  if ($41 | 0) {
   $80 = HEAP32[(HEAP32[$31 >> 2] | 0) + 4 >> 2] | 0; //@line 10057
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10058
   FUNCTION_TABLE_vi[$80 & 511]($31); //@line 10059
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 219; //@line 10062
    HEAP32[$AsyncCtx9 + 4 >> 2] = $$lcssa; //@line 10064
    HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 10066
    HEAP32[$AsyncCtx9 + 12 >> 2] = $41; //@line 10068
    sp = STACKTOP; //@line 10069
    STACKTOP = sp; //@line 10070
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10072
   $84 = $$lcssa + 28 | 0; //@line 10073
   $85 = HEAP32[$84 >> 2] | 0; //@line 10074
   do {
    if (!$85) {
     $96 = 0; //@line 10078
    } else {
     $89 = HEAP32[$85 + 4 >> 2] | 0; //@line 10082
     $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10083
     FUNCTION_TABLE_vii[$89 & 7]($1, $$lcssa + 16 | 0); //@line 10084
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 220; //@line 10087
      HEAP32[$AsyncCtx13 + 4 >> 2] = $84; //@line 10089
      HEAP32[$AsyncCtx13 + 8 >> 2] = $1; //@line 10091
      HEAP32[$AsyncCtx13 + 12 >> 2] = $$lcssa; //@line 10093
      HEAP32[$AsyncCtx13 + 16 >> 2] = $1; //@line 10095
      HEAP32[$AsyncCtx13 + 20 >> 2] = $41; //@line 10097
      sp = STACKTOP; //@line 10098
      STACKTOP = sp; //@line 10099
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10101
      $96 = HEAP32[$84 >> 2] | 0; //@line 10103
      break;
     }
    }
   } while (0);
   $95 = $1 + 12 | 0; //@line 10108
   HEAP32[$95 >> 2] = $96; //@line 10109
   $97 = HEAP32[$$lcssa >> 2] | 0; //@line 10110
   $AsyncCtx45 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10111
   __ZL28nsapi_dns_query_async_deletei($97); //@line 10112
   if (___async) {
    HEAP32[$AsyncCtx45 >> 2] = 221; //@line 10115
    HEAP32[$AsyncCtx45 + 4 >> 2] = $95; //@line 10117
    HEAP32[$AsyncCtx45 + 8 >> 2] = $1; //@line 10119
    HEAP32[$AsyncCtx45 + 12 >> 2] = $41; //@line 10121
    sp = STACKTOP; //@line 10122
    STACKTOP = sp; //@line 10123
    return;
   }
   _emscripten_free_async_context($AsyncCtx45 | 0); //@line 10125
   $AsyncCtx51 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10126
   __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 10127
   if (___async) {
    HEAP32[$AsyncCtx51 >> 2] = 222; //@line 10130
    HEAP32[$AsyncCtx51 + 4 >> 2] = $95; //@line 10132
    HEAP32[$AsyncCtx51 + 8 >> 2] = $1; //@line 10134
    HEAP32[$AsyncCtx51 + 12 >> 2] = $41; //@line 10136
    sp = STACKTOP; //@line 10137
    STACKTOP = sp; //@line 10138
    return;
   }
   _emscripten_free_async_context($AsyncCtx51 | 0); //@line 10140
   $104 = HEAP32[$95 >> 2] | 0; //@line 10141
   do {
    if ($104 | 0) {
     $106 = HEAP32[$104 >> 2] | 0; //@line 10145
     $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10146
     FUNCTION_TABLE_viii[$106 & 0]($1, $41, 0); //@line 10147
     if (___async) {
      HEAP32[$AsyncCtx16 >> 2] = 223; //@line 10150
      HEAP32[$AsyncCtx16 + 4 >> 2] = $95; //@line 10152
      HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 10154
      sp = STACKTOP; //@line 10155
      STACKTOP = sp; //@line 10156
      return;
     }
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 10158
     $$pr$i72 = HEAP32[$95 >> 2] | 0; //@line 10159
     if (!$$pr$i72) {
      break;
     }
     $111 = HEAP32[$$pr$i72 + 8 >> 2] | 0; //@line 10165
     $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10166
     FUNCTION_TABLE_vi[$111 & 511]($1); //@line 10167
     if (___async) {
      HEAP32[$AsyncCtx20 >> 2] = 224; //@line 10170
      HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 10172
      sp = STACKTOP; //@line 10173
      STACKTOP = sp; //@line 10174
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx20 | 0); //@line 10176
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 10181
   return;
  }
  __ZN6Socket11set_timeoutEi($31, 0); //@line 10183
  $113 = HEAP32[$15 >> 2] | 0; //@line 10184
  $115 = $113; //@line 10186
  do {
   if (!$113) {
    $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10189
    $116 = __Znwj(20) | 0; //@line 10190
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 225; //@line 10193
     HEAP32[$AsyncCtx36 + 4 >> 2] = $13; //@line 10195
     HEAP32[$AsyncCtx36 + 8 >> 2] = $31; //@line 10197
     HEAP32[$AsyncCtx36 + 12 >> 2] = $2; //@line 10199
     HEAP32[$AsyncCtx36 + 16 >> 2] = $$lcssa; //@line 10201
     HEAP32[$AsyncCtx36 + 20 >> 2] = $15; //@line 10203
     HEAP32[$AsyncCtx36 + 24 >> 2] = $14; //@line 10205
     HEAP32[$AsyncCtx36 + 28 >> 2] = $31; //@line 10207
     sp = STACKTOP; //@line 10208
     STACKTOP = sp; //@line 10209
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 10211
     HEAP32[$116 >> 2] = 0; //@line 10212
     HEAP32[$116 + 4 >> 2] = 0; //@line 10212
     HEAP32[$116 + 8 >> 2] = 0; //@line 10212
     HEAP32[$116 + 12 >> 2] = 0; //@line 10212
     HEAP32[$15 >> 2] = $116; //@line 10213
     $127 = $116; //@line 10215
     $244 = $116; //@line 10215
     break;
    }
   } else {
    $127 = $113; //@line 10219
    $244 = $115; //@line 10219
   }
  } while (0);
  $125 = $$lcssa + 32 | 0; //@line 10222
  if (($127 | 0) == ($125 | 0)) {
   $161 = $127; //@line 10225
   $163 = $244; //@line 10225
  } else {
   $128 = $127 + 12 | 0; //@line 10227
   $129 = HEAP32[$128 >> 2] | 0; //@line 10228
   do {
    if ($129 | 0) {
     $132 = HEAP32[$129 + 8 >> 2] | 0; //@line 10233
     $AsyncCtx24 = _emscripten_alloc_async_context(44, sp) | 0; //@line 10234
     FUNCTION_TABLE_vi[$132 & 511]($127); //@line 10235
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 226; //@line 10238
      HEAP32[$AsyncCtx24 + 4 >> 2] = $13; //@line 10240
      HEAP32[$AsyncCtx24 + 8 >> 2] = $31; //@line 10242
      HEAP32[$AsyncCtx24 + 12 >> 2] = $2; //@line 10244
      HEAP32[$AsyncCtx24 + 16 >> 2] = $$lcssa; //@line 10246
      HEAP32[$AsyncCtx24 + 20 >> 2] = $127; //@line 10248
      HEAP32[$AsyncCtx24 + 24 >> 2] = $125; //@line 10250
      HEAP32[$AsyncCtx24 + 28 >> 2] = $14; //@line 10252
      HEAP32[$AsyncCtx24 + 32 >> 2] = $31; //@line 10254
      HEAP32[$AsyncCtx24 + 36 >> 2] = $128; //@line 10256
      HEAP32[$AsyncCtx24 + 40 >> 2] = $15; //@line 10258
      sp = STACKTOP; //@line 10259
      STACKTOP = sp; //@line 10260
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 10262
      break;
     }
    }
   } while (0);
   $143 = $$lcssa + 44 | 0; //@line 10267
   $144 = HEAP32[$143 >> 2] | 0; //@line 10268
   do {
    if (!$144) {
     $157 = 0; //@line 10272
    } else {
     $147 = HEAP32[$144 + 4 >> 2] | 0; //@line 10275
     $AsyncCtx28 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10276
     FUNCTION_TABLE_vii[$147 & 7]($127, $125); //@line 10277
     if (___async) {
      HEAP32[$AsyncCtx28 >> 2] = 227; //@line 10280
      HEAP32[$AsyncCtx28 + 4 >> 2] = $143; //@line 10282
      HEAP32[$AsyncCtx28 + 8 >> 2] = $128; //@line 10284
      HEAP32[$AsyncCtx28 + 12 >> 2] = $15; //@line 10286
      HEAP32[$AsyncCtx28 + 16 >> 2] = $14; //@line 10288
      HEAP32[$AsyncCtx28 + 20 >> 2] = $2; //@line 10290
      HEAP32[$AsyncCtx28 + 24 >> 2] = $31; //@line 10292
      HEAP32[$AsyncCtx28 + 28 >> 2] = $13; //@line 10294
      HEAP32[$AsyncCtx28 + 32 >> 2] = $31; //@line 10296
      HEAP32[$AsyncCtx28 + 36 >> 2] = $$lcssa; //@line 10298
      sp = STACKTOP; //@line 10299
      STACKTOP = sp; //@line 10300
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx28 | 0); //@line 10302
      $157 = HEAP32[$143 >> 2] | 0; //@line 10304
      break;
     }
    }
   } while (0);
   HEAP32[$128 >> 2] = $157; //@line 10309
   $$pre85 = HEAP32[$15 >> 2] | 0; //@line 10310
   $161 = $$pre85; //@line 10312
   $163 = $$pre85; //@line 10312
  }
  HEAP32[$161 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 10316
  HEAP32[$2 + 8 >> 2] = 0; //@line 10318
  HEAP32[$2 >> 2] = 228; //@line 10319
  HEAP32[$2 + 4 >> 2] = $163; //@line 10321
  $164 = $2 + 12 | 0; //@line 10322
  HEAP32[$164 >> 2] = 764; //@line 10323
  $AsyncCtx57 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10324
  __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($31, $2); //@line 10325
  if (___async) {
   HEAP32[$AsyncCtx57 >> 2] = 229; //@line 10328
   HEAP32[$AsyncCtx57 + 4 >> 2] = $164; //@line 10330
   HEAP32[$AsyncCtx57 + 8 >> 2] = $13; //@line 10332
   HEAP32[$AsyncCtx57 + 12 >> 2] = $31; //@line 10334
   HEAP32[$AsyncCtx57 + 16 >> 2] = $2; //@line 10336
   HEAP32[$AsyncCtx57 + 20 >> 2] = $$lcssa; //@line 10338
   sp = STACKTOP; //@line 10339
   STACKTOP = sp; //@line 10340
   return;
  }
  _emscripten_free_async_context($AsyncCtx57 | 0); //@line 10342
  $170 = HEAP32[$164 >> 2] | 0; //@line 10343
  do {
   if ($170 | 0) {
    $173 = HEAP32[$170 + 8 >> 2] | 0; //@line 10348
    $AsyncCtx32 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10349
    FUNCTION_TABLE_vi[$173 & 511]($2); //@line 10350
    if (___async) {
     HEAP32[$AsyncCtx32 >> 2] = 230; //@line 10353
     HEAP32[$AsyncCtx32 + 4 >> 2] = $13; //@line 10355
     HEAP32[$AsyncCtx32 + 8 >> 2] = $31; //@line 10357
     HEAP32[$AsyncCtx32 + 12 >> 2] = $$lcssa; //@line 10359
     sp = STACKTOP; //@line 10360
     STACKTOP = sp; //@line 10361
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx32 | 0); //@line 10363
     break;
    }
   }
  } while (0);
  HEAP32[$13 >> 2] = $31; //@line 10368
 }
 $177 = HEAP32[$$lcssa >> 2] | 0; //@line 10370
 $AsyncCtx42 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10371
 __ZL26nsapi_dns_query_async_sendPv($177); //@line 10372
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 231; //@line 10375
  sp = STACKTOP; //@line 10376
  STACKTOP = sp; //@line 10377
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 10379
 STACKTOP = sp; //@line 10380
 return;
}
function __ZL26nsapi_dns_query_async_sendPv($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$byval_copy51 = 0, $$lcssa69 = 0, $$pr$i = 0, $$pr$i52 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $1 = 0, $104 = 0, $107 = 0, $108 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $150 = 0, $152 = 0, $159 = 0, $163 = 0, $164 = 0, $17 = 0, $184 = 0, $190 = 0, $194 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $66 = 0, $67 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10882
 STACKTOP = STACKTOP + 112 | 0; //@line 10883
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 10883
 $$byval_copy51 = sp + 84 | 0; //@line 10884
 $1 = sp; //@line 10885
 $2 = sp + 64 | 0; //@line 10886
 $3 = $0; //@line 10887
 $4 = HEAP32[1961] | 0; //@line 10888
 if (!$4) {
  label = 3; //@line 10891
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa69 = $4; //@line 10896
  } else {
   label = 3; //@line 10898
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1962] | 0; //@line 10903
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $8; //@line 10909
     break;
    }
   }
   $190 = HEAP32[1963] | 0; //@line 10913
   if ($190 | 0) {
    if ((HEAP32[$190 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $190; //@line 10919
     break;
    }
   }
   $194 = HEAP32[1964] | 0; //@line 10923
   if ($194 | 0) {
    if ((HEAP32[$194 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $194; //@line 10929
     break;
    }
   }
   $198 = HEAP32[1965] | 0; //@line 10933
   if (!$198) {
    STACKTOP = sp; //@line 10936
    return;
   }
   if ((HEAP32[$198 >> 2] | 0) == ($3 | 0)) {
    $$lcssa69 = $198; //@line 10941
   } else {
    STACKTOP = sp; //@line 10943
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa69 + 88 >> 2] | 0) != 1) {
  STACKTOP = sp; //@line 10951
  return;
 }
 $13 = $$lcssa69 + 83 | 0; //@line 10953
 $14 = HEAP8[$13 >> 0] | 0; //@line 10954
 if (!($14 << 24 >> 24)) {
  $17 = $$lcssa69 + 82 | 0; //@line 10957
  HEAP8[$17 >> 0] = (HEAP8[$17 >> 0] | 0) + 1 << 24 >> 24; //@line 10960
  $storemerge = 0; //@line 10961
 } else {
  $storemerge = $14 + -1 << 24 >> 24; //@line 10964
 }
 HEAP8[$13 >> 0] = $storemerge; //@line 10966
 $20 = HEAP16[1322] | 0; //@line 10967
 $21 = $20 + 1 << 16 >> 16; //@line 10968
 HEAP16[1322] = $21; //@line 10969
 $22 = $$lcssa69 + 80 | 0; //@line 10970
 HEAP16[$22 >> 1] = $20; //@line 10971
 if (!($21 << 16 >> 16)) {
  HEAP16[1322] = 1; //@line 10974
 }
 $24 = _malloc(512) | 0; //@line 10976
 if (!$24) {
  $26 = $$lcssa69 + 28 | 0; //@line 10979
  $27 = HEAP32[$26 >> 2] | 0; //@line 10980
  do {
   if (!$27) {
    $37 = 0; //@line 10984
   } else {
    $31 = HEAP32[$27 + 4 >> 2] | 0; //@line 10988
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10989
    FUNCTION_TABLE_vii[$31 & 7]($$byval_copy51, $$lcssa69 + 16 | 0); //@line 10990
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 243; //@line 10993
     HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 10995
     HEAP32[$AsyncCtx + 8 >> 2] = $$byval_copy51; //@line 10997
     HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa69; //@line 10999
     HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy51; //@line 11001
     sp = STACKTOP; //@line 11002
     STACKTOP = sp; //@line 11003
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 11005
     $37 = HEAP32[$26 >> 2] | 0; //@line 11007
     break;
    }
   }
  } while (0);
  $36 = $$byval_copy51 + 12 | 0; //@line 11012
  HEAP32[$36 >> 2] = $37; //@line 11013
  $38 = HEAP32[$$lcssa69 >> 2] | 0; //@line 11014
  $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11015
  __ZL28nsapi_dns_query_async_deletei($38); //@line 11016
  if (___async) {
   HEAP32[$AsyncCtx27 >> 2] = 244; //@line 11019
   HEAP32[$AsyncCtx27 + 4 >> 2] = $36; //@line 11021
   HEAP32[$AsyncCtx27 + 8 >> 2] = $$byval_copy51; //@line 11023
   sp = STACKTOP; //@line 11024
   STACKTOP = sp; //@line 11025
   return;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 11027
  $AsyncCtx33 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11028
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 11029
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 245; //@line 11032
   HEAP32[$AsyncCtx33 + 4 >> 2] = $36; //@line 11034
   HEAP32[$AsyncCtx33 + 8 >> 2] = $$byval_copy51; //@line 11036
   sp = STACKTOP; //@line 11037
   STACKTOP = sp; //@line 11038
   return;
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 11040
  $43 = HEAP32[$36 >> 2] | 0; //@line 11041
  do {
   if ($43 | 0) {
    $45 = HEAP32[$43 >> 2] | 0; //@line 11045
    $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11046
    FUNCTION_TABLE_viii[$45 & 0]($$byval_copy51, -3007, 0); //@line 11047
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 246; //@line 11050
     HEAP32[$AsyncCtx2 + 4 >> 2] = $36; //@line 11052
     HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy51; //@line 11054
     sp = STACKTOP; //@line 11055
     STACKTOP = sp; //@line 11056
     return;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11058
    $$pr$i52 = HEAP32[$36 >> 2] | 0; //@line 11059
    if ($$pr$i52 | 0) {
     $50 = HEAP32[$$pr$i52 + 8 >> 2] | 0; //@line 11063
     $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11064
     FUNCTION_TABLE_vi[$50 & 511]($$byval_copy51); //@line 11065
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 247; //@line 11068
      HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy51; //@line 11070
      sp = STACKTOP; //@line 11071
      STACKTOP = sp; //@line 11072
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11074
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 11080
  return;
 }
 $52 = HEAP16[$22 >> 1] | 0; //@line 11082
 $54 = HEAP32[$$lcssa69 + 12 >> 2] | 0; //@line 11084
 $56 = HEAP32[$$lcssa69 + 52 >> 2] | 0; //@line 11086
 $57 = $24; //@line 11087
 HEAP8[$24 >> 0] = ($52 & 65535) >>> 8; //@line 11091
 HEAP8[$24 + 1 >> 0] = $52; //@line 11094
 HEAP8[$24 + 2 >> 0] = 1; //@line 11096
 HEAP8[$24 + 3 >> 0] = 0; //@line 11098
 HEAP8[$24 + 4 >> 0] = 0; //@line 11100
 $66 = $24 + 6 | 0; //@line 11101
 HEAP8[$24 + 5 >> 0] = 1; //@line 11102
 $67 = $24 + 12 | 0; //@line 11103
 HEAP8[$66 >> 0] = 0; //@line 11104
 HEAP8[$66 + 1 >> 0] = 0; //@line 11104
 HEAP8[$66 + 2 >> 0] = 0; //@line 11104
 HEAP8[$66 + 3 >> 0] = 0; //@line 11104
 HEAP8[$66 + 4 >> 0] = 0; //@line 11104
 HEAP8[$66 + 5 >> 0] = 0; //@line 11104
 if (!(HEAP8[$54 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $67; //@line 11108
 } else {
  $$048$i = $54; //@line 11110
  $$sroa$0$0$in47$i = $67; //@line 11110
  while (1) {
   $70 = _strcspn($$048$i, 5116) | 0; //@line 11112
   $72 = $$sroa$0$0$in47$i + 1 | 0; //@line 11114
   HEAP8[$$sroa$0$0$in47$i >> 0] = $70; //@line 11115
   $73 = $70 & 255; //@line 11116
   _memcpy($72 | 0, $$048$i | 0, $73 | 0) | 0; //@line 11117
   $74 = $72 + $73 | 0; //@line 11118
   $$048$i = $$048$i + ($70 + ((HEAP8[$$048$i + $70 >> 0] | 0) == 46 & 1)) | 0; //@line 11124
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $74; //@line 11128
    break;
   } else {
    $$sroa$0$0$in47$i = $74; //@line 11131
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 11136
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 11139
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = ($56 | 0) == 2 ? 28 : 1; //@line 11142
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 11144
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 11147
 $90 = $$sroa$0$0$in$lcssa$i + 5 - $57 | 0; //@line 11148
 HEAP32[$2 >> 2] = 0; //@line 11149
 HEAP32[$2 + 4 >> 2] = 0; //@line 11149
 HEAP32[$2 + 8 >> 2] = 0; //@line 11149
 HEAP32[$2 + 12 >> 2] = 0; //@line 11149
 HEAP32[$2 + 16 >> 2] = 0; //@line 11149
 HEAP32[$$byval_copy51 >> 2] = HEAP32[$2 >> 2]; //@line 11150
 HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 11150
 HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 11150
 HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 11150
 HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 11150
 __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy51, 0); //@line 11151
 $91 = $$lcssa69 + 8 | 0; //@line 11152
 $92 = $$lcssa69 + 82 | 0; //@line 11153
 $93 = $$lcssa69 + 84 | 0; //@line 11154
 $94 = $$lcssa69 + 85 | 0; //@line 11155
 L59 : do {
  if (HEAP8[$93 >> 0] | 0) {
   $96 = $$lcssa69 + 56 | 0; //@line 11160
   while (1) {
    $97 = HEAP32[$91 >> 2] | 0; //@line 11162
    $98 = HEAP8[$92 >> 0] | 0; //@line 11163
    if (($98 & 255) > 9) {
     if (!(HEAP8[$94 >> 0] | 0)) {
      break L59;
     }
     HEAP8[$92 >> 0] = 0; //@line 11171
     HEAP8[$94 >> 0] = 0; //@line 11172
     $104 = 0; //@line 11173
     label = 35; //@line 11174
    } else {
     if (($98 & 255) < 5) {
      $104 = $98; //@line 11178
      label = 35; //@line 11179
     } else {
      $124 = $98; //@line 11181
      label = 39; //@line 11182
     }
    }
    if ((label | 0) == 35) {
     label = 0; //@line 11186
     $107 = HEAP32[(HEAP32[$97 >> 2] | 0) + 28 >> 2] | 0; //@line 11190
     $AsyncCtx10 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11191
     $108 = FUNCTION_TABLE_iiii[$107 & 31]($97, $104 & 255, $1) | 0; //@line 11192
     if (___async) {
      label = 36; //@line 11195
      break;
     }
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 11198
     if (($108 | 0) < 0) {
      HEAP8[$92 >> 0] = 5; //@line 11201
      $124 = 5; //@line 11202
      label = 39; //@line 11203
     }
    }
    if ((label | 0) == 39) {
     label = 0; //@line 11207
     $126 = 648 + ((($124 & 255) + -5 | 0) * 20 | 0) | 0; //@line 11210
     HEAP32[$$byval_copy51 >> 2] = HEAP32[$126 >> 2]; //@line 11211
     HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$126 + 4 >> 2]; //@line 11211
     HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$126 + 8 >> 2]; //@line 11211
     HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$126 + 12 >> 2]; //@line 11211
     HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$126 + 16 >> 2]; //@line 11211
     __ZN13SocketAddress8set_addrE10nsapi_addr($1, $$byval_copy51); //@line 11212
    }
    __ZN13SocketAddress8set_portEt($1, 53); //@line 11214
    $163 = HEAP32[$96 >> 2] | 0; //@line 11215
    $AsyncCtx37 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11216
    $164 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($163, $1, $24, $90) | 0; //@line 11217
    if (___async) {
     label = 57; //@line 11220
     break;
    }
    _emscripten_free_async_context($AsyncCtx37 | 0); //@line 11223
    if (($164 | 0) >= 0) {
     label = 60; //@line 11226
     break;
    }
    HEAP8[$92 >> 0] = (HEAP8[$92 >> 0] | 0) + 1 << 24 >> 24; //@line 11231
    HEAP32[$2 >> 2] = 0; //@line 11232
    HEAP32[$2 + 4 >> 2] = 0; //@line 11232
    HEAP32[$2 + 8 >> 2] = 0; //@line 11232
    HEAP32[$2 + 12 >> 2] = 0; //@line 11232
    HEAP32[$2 + 16 >> 2] = 0; //@line 11232
    HEAP32[$$byval_copy51 >> 2] = HEAP32[$2 >> 2]; //@line 11233
    HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 11233
    HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 11233
    HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 11233
    HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 11233
    __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy51, 0); //@line 11234
    if (!(HEAP8[$93 >> 0] | 0)) {
     break L59;
    }
   }
   if ((label | 0) == 36) {
    HEAP32[$AsyncCtx10 >> 2] = 248; //@line 11242
    HEAP32[$AsyncCtx10 + 4 >> 2] = $1; //@line 11244
    HEAP32[$AsyncCtx10 + 8 >> 2] = $92; //@line 11246
    HEAP32[$AsyncCtx10 + 12 >> 2] = $91; //@line 11248
    HEAP32[$AsyncCtx10 + 16 >> 2] = $94; //@line 11250
    HEAP32[$AsyncCtx10 + 20 >> 2] = $$byval_copy51; //@line 11252
    HEAP32[$AsyncCtx10 + 24 >> 2] = $$lcssa69; //@line 11254
    HEAP32[$AsyncCtx10 + 28 >> 2] = $96; //@line 11256
    HEAP32[$AsyncCtx10 + 32 >> 2] = $24; //@line 11258
    HEAP32[$AsyncCtx10 + 36 >> 2] = $90; //@line 11260
    HEAP32[$AsyncCtx10 + 40 >> 2] = $1; //@line 11262
    HEAP32[$AsyncCtx10 + 44 >> 2] = $93; //@line 11264
    HEAP32[$AsyncCtx10 + 48 >> 2] = $2; //@line 11266
    HEAP32[$AsyncCtx10 + 52 >> 2] = $2; //@line 11268
    sp = STACKTOP; //@line 11269
    STACKTOP = sp; //@line 11270
    return;
   } else if ((label | 0) == 57) {
    HEAP32[$AsyncCtx37 >> 2] = 254; //@line 11273
    HEAP32[$AsyncCtx37 + 4 >> 2] = $24; //@line 11275
    HEAP32[$AsyncCtx37 + 8 >> 2] = $1; //@line 11277
    HEAP32[$AsyncCtx37 + 12 >> 2] = $1; //@line 11279
    HEAP32[$AsyncCtx37 + 16 >> 2] = $92; //@line 11281
    HEAP32[$AsyncCtx37 + 20 >> 2] = $91; //@line 11283
    HEAP32[$AsyncCtx37 + 24 >> 2] = $94; //@line 11285
    HEAP32[$AsyncCtx37 + 28 >> 2] = $$byval_copy51; //@line 11287
    HEAP32[$AsyncCtx37 + 32 >> 2] = $$lcssa69; //@line 11289
    HEAP32[$AsyncCtx37 + 36 >> 2] = $96; //@line 11291
    HEAP32[$AsyncCtx37 + 40 >> 2] = $90; //@line 11293
    HEAP32[$AsyncCtx37 + 44 >> 2] = $93; //@line 11295
    HEAP32[$AsyncCtx37 + 48 >> 2] = $2; //@line 11297
    HEAP32[$AsyncCtx37 + 52 >> 2] = $2; //@line 11299
    sp = STACKTOP; //@line 11300
    STACKTOP = sp; //@line 11301
    return;
   } else if ((label | 0) == 60) {
    HEAP8[$94 >> 0] = (HEAP8[$94 >> 0] | 0) + 1 << 24 >> 24; //@line 11306
    $184 = HEAP8[$93 >> 0] | 0; //@line 11307
    if ($184 << 24 >> 24) {
     HEAP8[$93 >> 0] = $184 + -1 << 24 >> 24; //@line 11311
    }
    _free($24); //@line 11313
    HEAP32[$$lcssa69 + 76 >> 2] = 5e3; //@line 11315
    STACKTOP = sp; //@line 11316
    return;
   }
  }
 } while (0);
 $127 = $$lcssa69 + 28 | 0; //@line 11320
 $128 = HEAP32[$127 >> 2] | 0; //@line 11321
 do {
  if (!$128) {
   $140 = 0; //@line 11325
  } else {
   $132 = HEAP32[$128 + 4 >> 2] | 0; //@line 11329
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 11330
   FUNCTION_TABLE_vii[$132 & 7]($$byval_copy51, $$lcssa69 + 16 | 0); //@line 11331
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 249; //@line 11334
    HEAP32[$AsyncCtx14 + 4 >> 2] = $127; //@line 11336
    HEAP32[$AsyncCtx14 + 8 >> 2] = $$byval_copy51; //@line 11338
    HEAP32[$AsyncCtx14 + 12 >> 2] = $$lcssa69; //@line 11340
    HEAP32[$AsyncCtx14 + 16 >> 2] = $$byval_copy51; //@line 11342
    HEAP32[$AsyncCtx14 + 20 >> 2] = $24; //@line 11344
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 11346
    sp = STACKTOP; //@line 11347
    STACKTOP = sp; //@line 11348
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 11350
    $140 = HEAP32[$127 >> 2] | 0; //@line 11352
    break;
   }
  }
 } while (0);
 $139 = $$byval_copy51 + 12 | 0; //@line 11357
 HEAP32[$139 >> 2] = $140; //@line 11358
 $141 = HEAP32[$$lcssa69 >> 2] | 0; //@line 11359
 $AsyncCtx24 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11360
 __ZL28nsapi_dns_query_async_deletei($141); //@line 11361
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 250; //@line 11364
  HEAP32[$AsyncCtx24 + 4 >> 2] = $139; //@line 11366
  HEAP32[$AsyncCtx24 + 8 >> 2] = $$byval_copy51; //@line 11368
  HEAP32[$AsyncCtx24 + 12 >> 2] = $24; //@line 11370
  HEAP32[$AsyncCtx24 + 16 >> 2] = $1; //@line 11372
  sp = STACKTOP; //@line 11373
  STACKTOP = sp; //@line 11374
  return;
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 11376
 $AsyncCtx30 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11377
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 11378
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 251; //@line 11381
  HEAP32[$AsyncCtx30 + 4 >> 2] = $139; //@line 11383
  HEAP32[$AsyncCtx30 + 8 >> 2] = $$byval_copy51; //@line 11385
  HEAP32[$AsyncCtx30 + 12 >> 2] = $24; //@line 11387
  HEAP32[$AsyncCtx30 + 16 >> 2] = $1; //@line 11389
  sp = STACKTOP; //@line 11390
  STACKTOP = sp; //@line 11391
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 11393
 $150 = HEAP32[$139 >> 2] | 0; //@line 11394
 do {
  if ($150 | 0) {
   $152 = HEAP32[$150 >> 2] | 0; //@line 11398
   $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11399
   FUNCTION_TABLE_viii[$152 & 0]($$byval_copy51, -3019, 0); //@line 11400
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 252; //@line 11403
    HEAP32[$AsyncCtx17 + 4 >> 2] = $139; //@line 11405
    HEAP32[$AsyncCtx17 + 8 >> 2] = $$byval_copy51; //@line 11407
    HEAP32[$AsyncCtx17 + 12 >> 2] = $24; //@line 11409
    HEAP32[$AsyncCtx17 + 16 >> 2] = $1; //@line 11411
    sp = STACKTOP; //@line 11412
    STACKTOP = sp; //@line 11413
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11415
   $$pr$i = HEAP32[$139 >> 2] | 0; //@line 11416
   if ($$pr$i | 0) {
    $159 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 11420
    $AsyncCtx21 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11421
    FUNCTION_TABLE_vi[$159 & 511]($$byval_copy51); //@line 11422
    if (___async) {
     HEAP32[$AsyncCtx21 >> 2] = 253; //@line 11425
     HEAP32[$AsyncCtx21 + 4 >> 2] = $$byval_copy51; //@line 11427
     HEAP32[$AsyncCtx21 + 8 >> 2] = $24; //@line 11429
     HEAP32[$AsyncCtx21 + 12 >> 2] = $1; //@line 11431
     sp = STACKTOP; //@line 11432
     STACKTOP = sp; //@line 11433
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx21 | 0); //@line 11435
     break;
    }
   }
  }
 } while (0);
 _free($24); //@line 11441
 STACKTOP = sp; //@line 11442
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_101($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $14 = 0, $143 = 0, $146 = 0, $148 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $169 = 0, $172 = 0, $174 = 0, $18 = 0, $187 = 0, $188 = 0, $189 = 0, $2 = 0, $22 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $69 = 0, $77 = 0, $8 = 0, $80 = 0, $83 = 0, $86 = 0, $93 = 0, $95 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1659
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1661
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1663
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1665
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1667
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1669
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1671
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1673
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1675
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1677
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1681
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 1685
 HEAP32[HEAP32[$0 + 48 >> 2] >> 2] = HEAP32[HEAP32[$0 + 40 >> 2] >> 2]; //@line 1687
 $27 = $4 + 32 | 0; //@line 1688
 do {
  if (($27 | 0) != ($10 | 0)) {
   $29 = $4 + 44 | 0; //@line 1692
   $30 = HEAP32[$29 >> 2] | 0; //@line 1693
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 1697
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 1698
    FUNCTION_TABLE_vi[$33 & 511]($27); //@line 1699
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 1702
     $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 1703
     HEAP32[$34 >> 2] = $2; //@line 1704
     $35 = $ReallocAsyncCtx4 + 8 | 0; //@line 1705
     HEAP32[$35 >> 2] = $4; //@line 1706
     $36 = $ReallocAsyncCtx4 + 12 | 0; //@line 1707
     HEAP32[$36 >> 2] = $6; //@line 1708
     $37 = $ReallocAsyncCtx4 + 16 | 0; //@line 1709
     HEAP32[$37 >> 2] = $8; //@line 1710
     $38 = $ReallocAsyncCtx4 + 20 | 0; //@line 1711
     HEAP32[$38 >> 2] = $29; //@line 1712
     $39 = $ReallocAsyncCtx4 + 24 | 0; //@line 1713
     HEAP32[$39 >> 2] = $10; //@line 1714
     $40 = $ReallocAsyncCtx4 + 28 | 0; //@line 1715
     HEAP32[$40 >> 2] = $27; //@line 1716
     $41 = $ReallocAsyncCtx4 + 32 | 0; //@line 1717
     HEAP32[$41 >> 2] = $12; //@line 1718
     $42 = $ReallocAsyncCtx4 + 36 | 0; //@line 1719
     HEAP32[$42 >> 2] = $14; //@line 1720
     $43 = $ReallocAsyncCtx4 + 40 | 0; //@line 1721
     HEAP32[$43 >> 2] = $16; //@line 1722
     $44 = $ReallocAsyncCtx4 + 44 | 0; //@line 1723
     HEAP32[$44 >> 2] = $18; //@line 1724
     $45 = $ReallocAsyncCtx4 + 48 | 0; //@line 1725
     HEAP32[$45 >> 2] = $22; //@line 1726
     $46 = $ReallocAsyncCtx4 + 52 | 0; //@line 1727
     HEAP32[$46 >> 2] = $26; //@line 1728
     sp = STACKTOP; //@line 1729
     return;
    }
    ___async_unwind = 0; //@line 1732
    HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 1733
    $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 1734
    HEAP32[$34 >> 2] = $2; //@line 1735
    $35 = $ReallocAsyncCtx4 + 8 | 0; //@line 1736
    HEAP32[$35 >> 2] = $4; //@line 1737
    $36 = $ReallocAsyncCtx4 + 12 | 0; //@line 1738
    HEAP32[$36 >> 2] = $6; //@line 1739
    $37 = $ReallocAsyncCtx4 + 16 | 0; //@line 1740
    HEAP32[$37 >> 2] = $8; //@line 1741
    $38 = $ReallocAsyncCtx4 + 20 | 0; //@line 1742
    HEAP32[$38 >> 2] = $29; //@line 1743
    $39 = $ReallocAsyncCtx4 + 24 | 0; //@line 1744
    HEAP32[$39 >> 2] = $10; //@line 1745
    $40 = $ReallocAsyncCtx4 + 28 | 0; //@line 1746
    HEAP32[$40 >> 2] = $27; //@line 1747
    $41 = $ReallocAsyncCtx4 + 32 | 0; //@line 1748
    HEAP32[$41 >> 2] = $12; //@line 1749
    $42 = $ReallocAsyncCtx4 + 36 | 0; //@line 1750
    HEAP32[$42 >> 2] = $14; //@line 1751
    $43 = $ReallocAsyncCtx4 + 40 | 0; //@line 1752
    HEAP32[$43 >> 2] = $16; //@line 1753
    $44 = $ReallocAsyncCtx4 + 44 | 0; //@line 1754
    HEAP32[$44 >> 2] = $18; //@line 1755
    $45 = $ReallocAsyncCtx4 + 48 | 0; //@line 1756
    HEAP32[$45 >> 2] = $22; //@line 1757
    $46 = $ReallocAsyncCtx4 + 52 | 0; //@line 1758
    HEAP32[$46 >> 2] = $26; //@line 1759
    sp = STACKTOP; //@line 1760
    return;
   }
   $47 = $10 + 12 | 0; //@line 1763
   $48 = HEAP32[$47 >> 2] | 0; //@line 1764
   if (!$48) {
    HEAP32[$29 >> 2] = 0; //@line 1767
    break;
   }
   $51 = HEAP32[$48 + 4 >> 2] | 0; //@line 1771
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 1772
   FUNCTION_TABLE_vii[$51 & 7]($27, $10); //@line 1773
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 1776
    $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 1777
    HEAP32[$52 >> 2] = $2; //@line 1778
    $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 1779
    HEAP32[$53 >> 2] = $4; //@line 1780
    $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 1781
    HEAP32[$54 >> 2] = $6; //@line 1782
    $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 1783
    HEAP32[$55 >> 2] = $8; //@line 1784
    $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 1785
    HEAP32[$56 >> 2] = $29; //@line 1786
    $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 1787
    HEAP32[$57 >> 2] = $12; //@line 1788
    $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 1789
    HEAP32[$58 >> 2] = $14; //@line 1790
    $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 1791
    HEAP32[$59 >> 2] = $16; //@line 1792
    $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 1793
    HEAP32[$60 >> 2] = $27; //@line 1794
    $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 1795
    HEAP32[$61 >> 2] = $18; //@line 1796
    $62 = $ReallocAsyncCtx5 + 44 | 0; //@line 1797
    HEAP32[$62 >> 2] = $22; //@line 1798
    $63 = $ReallocAsyncCtx5 + 48 | 0; //@line 1799
    HEAP32[$63 >> 2] = $47; //@line 1800
    $64 = $ReallocAsyncCtx5 + 52 | 0; //@line 1801
    HEAP32[$64 >> 2] = $26; //@line 1802
    sp = STACKTOP; //@line 1803
    return;
   }
   ___async_unwind = 0; //@line 1806
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 1807
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 1808
   HEAP32[$52 >> 2] = $2; //@line 1809
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 1810
   HEAP32[$53 >> 2] = $4; //@line 1811
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 1812
   HEAP32[$54 >> 2] = $6; //@line 1813
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 1814
   HEAP32[$55 >> 2] = $8; //@line 1815
   $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 1816
   HEAP32[$56 >> 2] = $29; //@line 1817
   $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 1818
   HEAP32[$57 >> 2] = $12; //@line 1819
   $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 1820
   HEAP32[$58 >> 2] = $14; //@line 1821
   $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 1822
   HEAP32[$59 >> 2] = $16; //@line 1823
   $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 1824
   HEAP32[$60 >> 2] = $27; //@line 1825
   $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 1826
   HEAP32[$61 >> 2] = $18; //@line 1827
   $62 = $ReallocAsyncCtx5 + 44 | 0; //@line 1828
   HEAP32[$62 >> 2] = $22; //@line 1829
   $63 = $ReallocAsyncCtx5 + 48 | 0; //@line 1830
   HEAP32[$63 >> 2] = $47; //@line 1831
   $64 = $ReallocAsyncCtx5 + 52 | 0; //@line 1832
   HEAP32[$64 >> 2] = $26; //@line 1833
   sp = STACKTOP; //@line 1834
   return;
  }
 } while (0);
 HEAP32[$4 + 8 >> 2] = $2; //@line 1839
 HEAP32[$4 + 48 >> 2] = $6; //@line 1841
 HEAP32[$4 + 52 >> 2] = $8; //@line 1843
 $68 = $4 + 56 | 0; //@line 1844
 HEAP32[$68 >> 2] = 0; //@line 1845
 $69 = $4 + 60 | 0; //@line 1846
 HEAP32[$69 >> 2] = 0; //@line 1847
 HEAP32[$4 + 64 >> 2] = 0; //@line 1849
 HEAP8[$4 + 82 >> 0] = 0; //@line 1851
 HEAP8[$4 + 83 >> 0] = 1; //@line 1853
 HEAP8[$4 + 84 >> 0] = 3; //@line 1855
 HEAP8[$4 + 85 >> 0] = 0; //@line 1857
 HEAP16[$4 + 80 >> 1] = 0; //@line 1859
 HEAP32[$4 + 76 >> 2] = 0; //@line 1861
 $77 = $4 + 72 | 0; //@line 1862
 HEAP32[$77 >> 2] = 15500; //@line 1863
 HEAP8[$4 + 86 >> 0] = 0; //@line 1865
 HEAP32[$4 + 88 >> 2] = 0; //@line 1867
 $80 = HEAP32[187] | 0; //@line 1868
 HEAP32[187] = $80 + 1; //@line 1870
 HEAP32[$4 >> 2] = ($80 | 0) > 32767 ? 1 : $80; //@line 1873
 $83 = HEAP32[1961] | 0; //@line 1874
 if (!$83) {
  $$1 = 0; //@line 1877
  $133 = 0; //@line 1877
 } else {
  $86 = HEAP32[$83 + 56 >> 2] | 0; //@line 1880
  if (!$86) {
   $$1 = 1; //@line 1883
   $133 = 0; //@line 1883
  } else {
   if ((HEAP32[$83 + 8 >> 2] | 0) == ($2 | 0)) {
    HEAP32[$68 >> 2] = $86; //@line 1889
    HEAP32[$69 >> 2] = HEAP32[$83 + 60 >> 2]; //@line 1892
    $$1 = 1; //@line 1893
    $133 = $86; //@line 1893
   } else {
    $$1 = 1; //@line 1895
    $133 = 0; //@line 1895
   }
  }
 }
 $93 = HEAP32[1962] | 0; //@line 1899
 if (!$93) {
  $$1$1 = $$1; //@line 1902
  $146 = $133; //@line 1902
 } else {
  if (!$133) {
   $135 = HEAP32[$93 + 56 >> 2] | 0; //@line 1907
   if (!$135) {
    $187 = 0; //@line 1910
   } else {
    if ((HEAP32[$93 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$68 >> 2] = $135; //@line 1916
     HEAP32[$69 >> 2] = HEAP32[$93 + 60 >> 2]; //@line 1919
     $187 = $135; //@line 1920
    } else {
     $187 = 0; //@line 1922
    }
   }
  } else {
   $187 = $133; //@line 1926
  }
  $$1$1 = $$1 + 1 | 0; //@line 1929
  $146 = $187; //@line 1929
 }
 $143 = HEAP32[1963] | 0; //@line 1931
 if (!$143) {
  $$1$2 = $$1$1; //@line 1934
  $159 = $146; //@line 1934
 } else {
  if (!$146) {
   $148 = HEAP32[$143 + 56 >> 2] | 0; //@line 1939
   if (!$148) {
    $188 = 0; //@line 1942
   } else {
    if ((HEAP32[$143 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$68 >> 2] = $148; //@line 1948
     HEAP32[$69 >> 2] = HEAP32[$143 + 60 >> 2]; //@line 1951
     $188 = $148; //@line 1952
    } else {
     $188 = 0; //@line 1954
    }
   }
  } else {
   $188 = $146; //@line 1958
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 1961
  $159 = $188; //@line 1961
 }
 $156 = HEAP32[1964] | 0; //@line 1963
 if (!$156) {
  $$1$3 = $$1$2; //@line 1966
  $172 = $159; //@line 1966
 } else {
  if (!$159) {
   $161 = HEAP32[$156 + 56 >> 2] | 0; //@line 1971
   if (!$161) {
    $189 = 0; //@line 1974
   } else {
    if ((HEAP32[$156 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$68 >> 2] = $161; //@line 1980
     HEAP32[$69 >> 2] = HEAP32[$156 + 60 >> 2]; //@line 1983
     $189 = $161; //@line 1984
    } else {
     $189 = 0; //@line 1986
    }
   }
  } else {
   $189 = $159; //@line 1990
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 1993
  $172 = $189; //@line 1993
 }
 $169 = HEAP32[1965] | 0; //@line 1995
 if (!$169) {
  $$1$4 = $$1$3; //@line 1998
 } else {
  if (!$172) {
   $174 = HEAP32[$169 + 56 >> 2] | 0; //@line 2003
   if ($174 | 0) {
    if ((HEAP32[$169 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$68 >> 2] = $174; //@line 2010
     HEAP32[$69 >> 2] = HEAP32[$169 + 60 >> 2]; //@line 2013
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 2018
 }
 HEAP32[7844 + ($18 << 2) >> 2] = $4; //@line 2021
 HEAP32[$77 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 2024
 if (HEAP8[8724] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 2028
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 2029
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 2032
   $130 = $ReallocAsyncCtx13 + 4 | 0; //@line 2033
   HEAP32[$130 >> 2] = $4; //@line 2034
   $131 = $ReallocAsyncCtx13 + 8 | 0; //@line 2035
   HEAP32[$131 >> 2] = $16; //@line 2036
   sp = STACKTOP; //@line 2037
   return;
  }
  ___async_unwind = 0; //@line 2040
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 2041
  $130 = $ReallocAsyncCtx13 + 4 | 0; //@line 2042
  HEAP32[$130 >> 2] = $4; //@line 2043
  $131 = $ReallocAsyncCtx13 + 8 | 0; //@line 2044
  HEAP32[$131 >> 2] = $16; //@line 2045
  sp = STACKTOP; //@line 2046
  return;
 }
 $95 = $4 + 44 | 0; //@line 2049
 $96 = HEAP32[$95 >> 2] | 0; //@line 2050
 if (!$96) {
  $110 = $12 + 12 | 0; //@line 2053
  HEAP32[$110 >> 2] = 0; //@line 2054
  $112 = $14 + 4 | 0; //@line 2056
  HEAP32[$112 >> 2] = 0; //@line 2058
  HEAP32[$112 + 4 >> 2] = 0; //@line 2061
  HEAP32[$14 >> 2] = 3; //@line 2062
  $116 = $14 + 12 | 0; //@line 2063
  HEAP32[$116 >> 2] = 752; //@line 2064
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 2065
  $117 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($12, 100, $14) | 0; //@line 2066
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 2069
   $118 = $ReallocAsyncCtx14 + 4 | 0; //@line 2070
   HEAP32[$118 >> 2] = $116; //@line 2071
   $119 = $ReallocAsyncCtx14 + 8 | 0; //@line 2072
   HEAP32[$119 >> 2] = $12; //@line 2073
   $120 = $ReallocAsyncCtx14 + 12 | 0; //@line 2074
   HEAP32[$120 >> 2] = $110; //@line 2075
   $121 = $ReallocAsyncCtx14 + 16 | 0; //@line 2076
   HEAP32[$121 >> 2] = $14; //@line 2077
   $122 = $ReallocAsyncCtx14 + 20 | 0; //@line 2078
   HEAP32[$122 >> 2] = $16; //@line 2079
   $123 = $ReallocAsyncCtx14 + 24 | 0; //@line 2080
   HEAP32[$123 >> 2] = $4; //@line 2081
   $124 = $ReallocAsyncCtx14 + 28 | 0; //@line 2082
   HEAP32[$124 >> 2] = $26; //@line 2083
   $125 = $ReallocAsyncCtx14 + 32 | 0; //@line 2084
   HEAP32[$125 >> 2] = $4; //@line 2085
   $126 = $ReallocAsyncCtx14 + 36 | 0; //@line 2086
   HEAP32[$126 >> 2] = $22; //@line 2087
   $127 = $ReallocAsyncCtx14 + 40 | 0; //@line 2088
   HEAP32[$127 >> 2] = $95; //@line 2089
   $128 = $ReallocAsyncCtx14 + 44 | 0; //@line 2090
   HEAP32[$128 >> 2] = $27; //@line 2091
   sp = STACKTOP; //@line 2092
   return;
  }
  HEAP32[___async_retval >> 2] = $117; //@line 2096
  ___async_unwind = 0; //@line 2097
  HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 2098
  $118 = $ReallocAsyncCtx14 + 4 | 0; //@line 2099
  HEAP32[$118 >> 2] = $116; //@line 2100
  $119 = $ReallocAsyncCtx14 + 8 | 0; //@line 2101
  HEAP32[$119 >> 2] = $12; //@line 2102
  $120 = $ReallocAsyncCtx14 + 12 | 0; //@line 2103
  HEAP32[$120 >> 2] = $110; //@line 2104
  $121 = $ReallocAsyncCtx14 + 16 | 0; //@line 2105
  HEAP32[$121 >> 2] = $14; //@line 2106
  $122 = $ReallocAsyncCtx14 + 20 | 0; //@line 2107
  HEAP32[$122 >> 2] = $16; //@line 2108
  $123 = $ReallocAsyncCtx14 + 24 | 0; //@line 2109
  HEAP32[$123 >> 2] = $4; //@line 2110
  $124 = $ReallocAsyncCtx14 + 28 | 0; //@line 2111
  HEAP32[$124 >> 2] = $26; //@line 2112
  $125 = $ReallocAsyncCtx14 + 32 | 0; //@line 2113
  HEAP32[$125 >> 2] = $4; //@line 2114
  $126 = $ReallocAsyncCtx14 + 36 | 0; //@line 2115
  HEAP32[$126 >> 2] = $22; //@line 2116
  $127 = $ReallocAsyncCtx14 + 40 | 0; //@line 2117
  HEAP32[$127 >> 2] = $95; //@line 2118
  $128 = $ReallocAsyncCtx14 + 44 | 0; //@line 2119
  HEAP32[$128 >> 2] = $27; //@line 2120
  sp = STACKTOP; //@line 2121
  return;
 } else {
  $99 = HEAP32[$96 + 4 >> 2] | 0; //@line 2125
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 2126
  FUNCTION_TABLE_vii[$99 & 7]($12, $27); //@line 2127
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 2130
   $100 = $ReallocAsyncCtx6 + 4 | 0; //@line 2131
   HEAP32[$100 >> 2] = $12; //@line 2132
   $101 = $ReallocAsyncCtx6 + 8 | 0; //@line 2133
   HEAP32[$101 >> 2] = $14; //@line 2134
   $102 = $ReallocAsyncCtx6 + 12 | 0; //@line 2135
   HEAP32[$102 >> 2] = $16; //@line 2136
   $103 = $ReallocAsyncCtx6 + 16 | 0; //@line 2137
   HEAP32[$103 >> 2] = $4; //@line 2138
   $104 = $ReallocAsyncCtx6 + 20 | 0; //@line 2139
   HEAP32[$104 >> 2] = $4; //@line 2140
   $105 = $ReallocAsyncCtx6 + 24 | 0; //@line 2141
   HEAP32[$105 >> 2] = $95; //@line 2142
   $106 = $ReallocAsyncCtx6 + 28 | 0; //@line 2143
   HEAP32[$106 >> 2] = $22; //@line 2144
   $107 = $ReallocAsyncCtx6 + 32 | 0; //@line 2145
   HEAP32[$107 >> 2] = $95; //@line 2146
   $108 = $ReallocAsyncCtx6 + 36 | 0; //@line 2147
   HEAP32[$108 >> 2] = $27; //@line 2148
   $109 = $ReallocAsyncCtx6 + 40 | 0; //@line 2149
   HEAP32[$109 >> 2] = $26; //@line 2150
   sp = STACKTOP; //@line 2151
   return;
  }
  ___async_unwind = 0; //@line 2154
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 2155
  $100 = $ReallocAsyncCtx6 + 4 | 0; //@line 2156
  HEAP32[$100 >> 2] = $12; //@line 2157
  $101 = $ReallocAsyncCtx6 + 8 | 0; //@line 2158
  HEAP32[$101 >> 2] = $14; //@line 2159
  $102 = $ReallocAsyncCtx6 + 12 | 0; //@line 2160
  HEAP32[$102 >> 2] = $16; //@line 2161
  $103 = $ReallocAsyncCtx6 + 16 | 0; //@line 2162
  HEAP32[$103 >> 2] = $4; //@line 2163
  $104 = $ReallocAsyncCtx6 + 20 | 0; //@line 2164
  HEAP32[$104 >> 2] = $4; //@line 2165
  $105 = $ReallocAsyncCtx6 + 24 | 0; //@line 2166
  HEAP32[$105 >> 2] = $95; //@line 2167
  $106 = $ReallocAsyncCtx6 + 28 | 0; //@line 2168
  HEAP32[$106 >> 2] = $22; //@line 2169
  $107 = $ReallocAsyncCtx6 + 32 | 0; //@line 2170
  HEAP32[$107 >> 2] = $95; //@line 2171
  $108 = $ReallocAsyncCtx6 + 36 | 0; //@line 2172
  HEAP32[$108 >> 2] = $27; //@line 2173
  $109 = $ReallocAsyncCtx6 + 40 | 0; //@line 2174
  HEAP32[$109 >> 2] = $26; //@line 2175
  sp = STACKTOP; //@line 2176
  return;
 }
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $48 = 0, $50 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4696
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4698
 $4 = HEAP8[$0 + 8 >> 0] | 0; //@line 4700
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4702
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4704
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4706
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4708
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4710
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4712
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4714
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4716
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4718
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4720
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 4722
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 4724
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 4726
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 4728
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 4730
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 4732
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 4734
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 4736
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 4740
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 4744
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 4746
 HEAP32[137] = (HEAP32[137] | 0) + 1; //@line 4749
 $53 = HEAP32[126] | 0; //@line 4750
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 4754
   do {
    if ($4 << 24 >> 24 > -1 & ($2 | 0) != 0) {
     $57 = HEAP32[123] | 0; //@line 4760
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $2) | 0) {
       $$0$i = 1; //@line 4767
       break;
      }
     }
     $62 = HEAP32[124] | 0; //@line 4771
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 4775
     } else {
      if (!(_strstr($62, $2) | 0)) {
       $$0$i = 1; //@line 4780
      } else {
       label = 9; //@line 4782
      }
     }
    } else {
     label = 9; //@line 4786
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 4790
   }
   if (!((HEAP32[133] | 0) != 0 & ((($2 | 0) == 0 | (($10 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[130] = HEAP32[128]; //@line 4802
    break;
   }
   $73 = HEAPU8[488] | 0; //@line 4806
   $74 = $4 & 255; //@line 4807
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 4812
    $$lobit = $78 >>> 6; //@line 4813
    $79 = $$lobit & 255; //@line 4814
    $83 = ($73 & 32 | 0) == 0; //@line 4818
    $84 = HEAP32[127] | 0; //@line 4819
    $85 = HEAP32[126] | 0; //@line 4820
    $86 = $4 << 24 >> 24 == 1; //@line 4821
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 4824
     _vsnprintf($85, $84, $10, $20) | 0; //@line 4825
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 65; //@line 4828
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 4829
      $$expand_i1_val = $86 & 1; //@line 4830
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 4831
      sp = STACKTOP; //@line 4832
      return;
     }
     ___async_unwind = 0; //@line 4835
     HEAP32[$ReallocAsyncCtx12 >> 2] = 65; //@line 4836
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 4837
     $$expand_i1_val = $86 & 1; //@line 4838
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 4839
     sp = STACKTOP; //@line 4840
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 4846
     $$1143 = $85; //@line 4846
     $$1145 = $84; //@line 4846
     $$3154 = 0; //@line 4846
     label = 28; //@line 4847
    } else {
     if ($83) {
      $$0142 = $85; //@line 4850
      $$0144 = $84; //@line 4850
     } else {
      $89 = _snprintf($85, $84, 3537, $40) | 0; //@line 4852
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 4854
      $91 = ($$ | 0) > 0; //@line 4855
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 4860
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 4860
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 4864
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 3555; //@line 4870
        label = 25; //@line 4871
        break;
       }
      case 1:
       {
        $$sink = 3561; //@line 4875
        label = 25; //@line 4876
        break;
       }
      case 3:
       {
        $$sink = 3549; //@line 4880
        label = 25; //@line 4881
        break;
       }
      case 7:
       {
        $$sink = 3543; //@line 4885
        label = 25; //@line 4886
        break;
       }
      default:
       {
        $$0141 = 0; //@line 4890
        $$1152 = 0; //@line 4890
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$44 >> 2] = $$sink; //@line 4894
       $$0141 = $79 & 1; //@line 4897
       $$1152 = _snprintf($$0142, $$0144, 3567, $44) | 0; //@line 4897
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 4900
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 4902
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 4904
       $$1$off0 = $extract$t159; //@line 4909
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 4909
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 4909
       $$3154 = $$1152; //@line 4909
       label = 28; //@line 4910
      } else {
       $$1$off0 = $extract$t159; //@line 4912
       $$1143 = $$0142; //@line 4912
       $$1145 = $$0144; //@line 4912
       $$3154 = $$1152$; //@line 4912
       label = 28; //@line 4913
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[131] | 0) != 0) {
      HEAP32[$34 >> 2] = HEAP32[$20 >> 2]; //@line 4924
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 4925
      $108 = _vsnprintf(0, 0, $10, $34) | 0; //@line 4926
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 69; //@line 4929
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 4930
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 4931
       HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 4932
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 4933
       HEAP32[$110 >> 2] = $6; //@line 4934
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 4935
       HEAP32[$111 >> 2] = $8; //@line 4936
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 4937
       HEAP32[$112 >> 2] = $12; //@line 4938
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 4939
       HEAP32[$113 >> 2] = $2; //@line 4940
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 4941
       HEAP32[$114 >> 2] = $14; //@line 4942
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 4943
       HEAP32[$115 >> 2] = $16; //@line 4944
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 4945
       HEAP32[$116 >> 2] = $18; //@line 4946
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 4947
       HEAP32[$117 >> 2] = $10; //@line 4948
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 4949
       HEAP32[$118 >> 2] = $20; //@line 4950
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 4951
       HEAP32[$119 >> 2] = $$1143; //@line 4952
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 4953
       HEAP32[$120 >> 2] = $$1145; //@line 4954
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 4955
       HEAP32[$121 >> 2] = $74; //@line 4956
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 4957
       HEAP32[$122 >> 2] = $22; //@line 4958
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 4959
       HEAP32[$123 >> 2] = $24; //@line 4960
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 4961
       HEAP32[$124 >> 2] = $26; //@line 4962
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 4963
       HEAP32[$125 >> 2] = $28; //@line 4964
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 4965
       HEAP32[$126 >> 2] = $30; //@line 4966
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 4967
       HEAP32[$127 >> 2] = $32; //@line 4968
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 4969
       HEAP32[$128 >> 2] = $36; //@line 4970
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 4971
       HEAP32[$129 >> 2] = $38; //@line 4972
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 4973
       HEAP32[$130 >> 2] = $48; //@line 4974
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 4975
       HEAP32[$131 >> 2] = $50; //@line 4976
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 4977
       HEAP32[$132 >> 2] = $34; //@line 4978
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 4979
       HEAP32[$133 >> 2] = $$3154; //@line 4980
       sp = STACKTOP; //@line 4981
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 4985
      ___async_unwind = 0; //@line 4986
      HEAP32[$ReallocAsyncCtx11 >> 2] = 69; //@line 4987
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 4988
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 4989
      HEAP8[$109 >> 0] = $$1$off0$expand_i1_val; //@line 4990
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 4991
      HEAP32[$110 >> 2] = $6; //@line 4992
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 4993
      HEAP32[$111 >> 2] = $8; //@line 4994
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 4995
      HEAP32[$112 >> 2] = $12; //@line 4996
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 4997
      HEAP32[$113 >> 2] = $2; //@line 4998
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 4999
      HEAP32[$114 >> 2] = $14; //@line 5000
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 5001
      HEAP32[$115 >> 2] = $16; //@line 5002
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 5003
      HEAP32[$116 >> 2] = $18; //@line 5004
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 5005
      HEAP32[$117 >> 2] = $10; //@line 5006
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 5007
      HEAP32[$118 >> 2] = $20; //@line 5008
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 5009
      HEAP32[$119 >> 2] = $$1143; //@line 5010
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 5011
      HEAP32[$120 >> 2] = $$1145; //@line 5012
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 5013
      HEAP32[$121 >> 2] = $74; //@line 5014
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 5015
      HEAP32[$122 >> 2] = $22; //@line 5016
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 5017
      HEAP32[$123 >> 2] = $24; //@line 5018
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 5019
      HEAP32[$124 >> 2] = $26; //@line 5020
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 5021
      HEAP32[$125 >> 2] = $28; //@line 5022
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 5023
      HEAP32[$126 >> 2] = $30; //@line 5024
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 5025
      HEAP32[$127 >> 2] = $32; //@line 5026
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 5027
      HEAP32[$128 >> 2] = $36; //@line 5028
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 5029
      HEAP32[$129 >> 2] = $38; //@line 5030
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 5031
      HEAP32[$130 >> 2] = $48; //@line 5032
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 5033
      HEAP32[$131 >> 2] = $50; //@line 5034
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 5035
      HEAP32[$132 >> 2] = $34; //@line 5036
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 5037
      HEAP32[$133 >> 2] = $$3154; //@line 5038
      sp = STACKTOP; //@line 5039
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 5044
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$22 >> 2] = $2; //@line 5050
        $$5156 = _snprintf($$1143, $$1145, 3570, $22) | 0; //@line 5052
        break;
       }
      case 1:
       {
        HEAP32[$26 >> 2] = $2; //@line 5056
        $$5156 = _snprintf($$1143, $$1145, 3585, $26) | 0; //@line 5058
        break;
       }
      case 3:
       {
        HEAP32[$30 >> 2] = $2; //@line 5062
        $$5156 = _snprintf($$1143, $$1145, 3600, $30) | 0; //@line 5064
        break;
       }
      case 7:
       {
        HEAP32[$12 >> 2] = $2; //@line 5068
        $$5156 = _snprintf($$1143, $$1145, 3615, $12) | 0; //@line 5070
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 3630, $16) | 0; //@line 5075
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 5079
      $147 = $$1143 + $$5156$ | 0; //@line 5081
      $148 = $$1145 - $$5156$ | 0; //@line 5082
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 5086
       $150 = _vsnprintf($147, $148, $10, $20) | 0; //@line 5087
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 5090
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 5091
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 5092
        HEAP8[$151 >> 0] = $$1$off0$expand_i1_val18; //@line 5093
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 5094
        HEAP32[$152 >> 2] = $6; //@line 5095
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 5096
        HEAP32[$153 >> 2] = $8; //@line 5097
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 5098
        HEAP32[$154 >> 2] = $36; //@line 5099
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 5100
        HEAP32[$155 >> 2] = $38; //@line 5101
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 5102
        HEAP32[$156 >> 2] = $148; //@line 5103
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 5104
        HEAP32[$157 >> 2] = $147; //@line 5105
        sp = STACKTOP; //@line 5106
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 5110
       ___async_unwind = 0; //@line 5111
       HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 5112
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 5113
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 5114
       HEAP8[$151 >> 0] = $$1$off0$expand_i1_val18; //@line 5115
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 5116
       HEAP32[$152 >> 2] = $6; //@line 5117
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 5118
       HEAP32[$153 >> 2] = $8; //@line 5119
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 5120
       HEAP32[$154 >> 2] = $36; //@line 5121
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 5122
       HEAP32[$155 >> 2] = $38; //@line 5123
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 5124
       HEAP32[$156 >> 2] = $148; //@line 5125
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 5126
       HEAP32[$157 >> 2] = $147; //@line 5127
       sp = STACKTOP; //@line 5128
       return;
      }
     }
    }
    $159 = HEAP32[133] | 0; //@line 5133
    $160 = HEAP32[126] | 0; //@line 5134
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 5135
    FUNCTION_TABLE_vi[$159 & 511]($160); //@line 5136
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 5139
     sp = STACKTOP; //@line 5140
     return;
    }
    ___async_unwind = 0; //@line 5143
    HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 5144
    sp = STACKTOP; //@line 5145
    return;
   }
  }
 } while (0);
 $161 = HEAP32[136] | 0; //@line 5150
 if (!$161) {
  return;
 }
 $163 = HEAP32[137] | 0; //@line 5155
 HEAP32[137] = 0; //@line 5156
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 5157
 FUNCTION_TABLE_v[$161 & 7](); //@line 5158
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 5161
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 5162
  HEAP32[$164 >> 2] = $163; //@line 5163
  sp = STACKTOP; //@line 5164
  return;
 }
 ___async_unwind = 0; //@line 5167
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 5168
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 5169
 HEAP32[$164 >> 2] = $163; //@line 5170
 sp = STACKTOP; //@line 5171
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$048$i = 0, $$094 = 0, $$097 = 0, $$1105 = 0, $$1106 = 0, $$1107 = 0, $$170 = 0, $$2 = 0, $$296$ph113 = 0, $$299 = 0, $$3 = 0, $$3100 = 0, $$393$ph114 = 0, $$4$ph = 0, $$4110 = 0, $$byval_copy29 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $101 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $162 = 0, $164 = 0, $174 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $78 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5879
 STACKTOP = STACKTOP + 176 | 0; //@line 5880
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 5880
 $$byval_copy29 = sp + 144 | 0; //@line 5881
 $5 = sp + 88 | 0; //@line 5882
 $6 = sp; //@line 5883
 $7 = sp + 64 | 0; //@line 5884
 if (!$1) {
  $$3 = -3003; //@line 5887
  STACKTOP = sp; //@line 5888
  return $$3 | 0; //@line 5888
 }
 $9 = _strlen($1) | 0; //@line 5890
 if (($9 | 0) > 255 | ($9 | 0) == 0) {
  $$3 = -3003; //@line 5895
  STACKTOP = sp; //@line 5896
  return $$3 | 0; //@line 5896
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $4, $2) | 0)) {
  $$3 = 1; //@line 5901
  STACKTOP = sp; //@line 5902
  return $$3 | 0; //@line 5902
 }
 __ZN9UDPSocketC2Ev($5); //@line 5904
 $AsyncCtx21 = _emscripten_alloc_async_context(48, sp) | 0; //@line 5905
 $14 = __ZN6Socket4openEP12NetworkStack($5, $0) | 0; //@line 5906
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 155; //@line 5909
  HEAP32[$AsyncCtx21 + 4 >> 2] = $$byval_copy29; //@line 5911
  HEAP32[$AsyncCtx21 + 8 >> 2] = $2; //@line 5913
  HEAP32[$AsyncCtx21 + 12 >> 2] = $3; //@line 5915
  HEAP32[$AsyncCtx21 + 16 >> 2] = $1; //@line 5917
  HEAP32[$AsyncCtx21 + 20 >> 2] = $5; //@line 5919
  HEAP32[$AsyncCtx21 + 24 >> 2] = $6; //@line 5921
  HEAP32[$AsyncCtx21 + 28 >> 2] = $5; //@line 5923
  HEAP32[$AsyncCtx21 + 32 >> 2] = $5; //@line 5925
  HEAP32[$AsyncCtx21 + 36 >> 2] = $7; //@line 5927
  HEAP32[$AsyncCtx21 + 40 >> 2] = $0; //@line 5929
  HEAP32[$AsyncCtx21 + 44 >> 2] = $4; //@line 5931
  sp = STACKTOP; //@line 5932
  STACKTOP = sp; //@line 5933
  return 0; //@line 5933
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 5935
 do {
  if (!$14) {
   __ZN6Socket11set_timeoutEi($5, 5e3); //@line 5939
   $27 = _malloc(512) | 0; //@line 5940
   if (!$27) {
    $$2 = -3007; //@line 5943
   } else {
    $29 = $27; //@line 5945
    $30 = $27 + 1 | 0; //@line 5946
    $31 = $27 + 2 | 0; //@line 5947
    $32 = $27 + 3 | 0; //@line 5948
    $33 = $27 + 4 | 0; //@line 5949
    $34 = $27 + 5 | 0; //@line 5950
    $35 = $27 + 6 | 0; //@line 5951
    $36 = $27 + 12 | 0; //@line 5952
    $$sink$i = ($4 | 0) == 2 ? 28 : 1; //@line 5954
    $$0 = 0; //@line 5955
    $$094 = 3; //@line 5955
    $$097 = 0; //@line 5955
    while (1) {
     HEAP32[$7 >> 2] = 0; //@line 5957
     HEAP32[$7 + 4 >> 2] = 0; //@line 5957
     HEAP32[$7 + 8 >> 2] = 0; //@line 5957
     HEAP32[$7 + 12 >> 2] = 0; //@line 5957
     HEAP32[$7 + 16 >> 2] = 0; //@line 5957
     HEAP32[$$byval_copy29 >> 2] = HEAP32[$7 >> 2]; //@line 5958
     HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 5958
     HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 5958
     HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 5958
     HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 5958
     __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy29, 0); //@line 5959
     if (!($$094 << 24 >> 24)) {
      $$4$ph = -3009; //@line 5962
      label = 32; //@line 5963
      break;
     }
     if (($$097 & 255) > 9) {
      if (!($$0 << 24 >> 24)) {
       $$4$ph = -3009; //@line 5970
       label = 32; //@line 5971
       break;
      } else {
       $$1107 = 0; //@line 5974
       $43 = 0; //@line 5974
       label = 13; //@line 5975
      }
     } else {
      if (($$097 & 255) < 5) {
       $$1107 = $$0; //@line 5980
       $43 = $$097; //@line 5980
       label = 13; //@line 5981
      } else {
       $$1106 = $$0; //@line 5983
       $$299 = $$097; //@line 5983
       label = 16; //@line 5984
      }
     }
     if ((label | 0) == 13) {
      label = 0; //@line 5988
      $46 = HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0; //@line 5992
      $AsyncCtx = _emscripten_alloc_async_context(112, sp) | 0; //@line 5993
      $47 = FUNCTION_TABLE_iiii[$46 & 31]($0, $43 & 255, $6) | 0; //@line 5994
      if (___async) {
       label = 14; //@line 5997
       break;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 6000
      if (($47 | 0) < 0) {
       $$1106 = $$1107; //@line 6003
       $$299 = 5; //@line 6003
       label = 16; //@line 6004
      } else {
       $$1105 = $$1107; //@line 6006
       $$3100 = $43; //@line 6006
      }
     }
     if ((label | 0) == 16) {
      label = 0; //@line 6010
      $78 = 648 + ((($$299 & 255) + -5 | 0) * 20 | 0) | 0; //@line 6013
      HEAP32[$$byval_copy29 >> 2] = HEAP32[$78 >> 2]; //@line 6014
      HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$78 + 4 >> 2]; //@line 6014
      HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$78 + 8 >> 2]; //@line 6014
      HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$78 + 12 >> 2]; //@line 6014
      HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$78 + 16 >> 2]; //@line 6014
      __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy29); //@line 6015
      $$1105 = $$1106; //@line 6016
      $$3100 = $$299; //@line 6016
     }
     __ZN13SocketAddress8set_portEt($6, 53); //@line 6018
     HEAP8[$27 >> 0] = 0; //@line 6019
     HEAP8[$30 >> 0] = 1; //@line 6020
     HEAP8[$31 >> 0] = 1; //@line 6021
     HEAP8[$32 >> 0] = 0; //@line 6022
     HEAP8[$33 >> 0] = 0; //@line 6023
     HEAP8[$34 >> 0] = 1; //@line 6024
     HEAP8[$35 >> 0] = 0; //@line 6025
     HEAP8[$35 + 1 >> 0] = 0; //@line 6025
     HEAP8[$35 + 2 >> 0] = 0; //@line 6025
     HEAP8[$35 + 3 >> 0] = 0; //@line 6025
     HEAP8[$35 + 4 >> 0] = 0; //@line 6025
     HEAP8[$35 + 5 >> 0] = 0; //@line 6025
     if (!(HEAP8[$1 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $36; //@line 6029
     } else {
      $$048$i = $1; //@line 6031
      $$sroa$0$0$in47$i = $36; //@line 6031
      while (1) {
       $81 = _strcspn($$048$i, 5116) | 0; //@line 6033
       $83 = $$sroa$0$0$in47$i + 1 | 0; //@line 6035
       HEAP8[$$sroa$0$0$in47$i >> 0] = $81; //@line 6036
       $84 = $81 & 255; //@line 6037
       _memcpy($83 | 0, $$048$i | 0, $84 | 0) | 0; //@line 6038
       $85 = $83 + $84 | 0; //@line 6039
       $$048$i = $$048$i + ($81 + ((HEAP8[$$048$i + $81 >> 0] | 0) == 46 & 1)) | 0; //@line 6045
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $85; //@line 6049
        break;
       } else {
        $$sroa$0$0$in47$i = $85; //@line 6052
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 6057
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 6059
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 6061
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 6063
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 6066
     $AsyncCtx9 = _emscripten_alloc_async_context(104, sp) | 0; //@line 6068
     $101 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $27, $$sroa$0$0$in$lcssa$i + 5 - $29 | 0) | 0; //@line 6069
     if (___async) {
      label = 20; //@line 6072
      break;
     }
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6075
     if (($101 | 0) < 0) {
      $$296$ph113 = $$094; //@line 6078
      $$393$ph114 = $$1105; //@line 6078
     } else {
      $130 = $$1105 + 1 << 24 >> 24; //@line 6080
      $131 = $$094 + -1 << 24 >> 24; //@line 6081
      $AsyncCtx6 = _emscripten_alloc_async_context(104, sp) | 0; //@line 6082
      $132 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $27, 512) | 0; //@line 6083
      if (___async) {
       label = 23; //@line 6086
       break;
      }
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 6089
      if (($132 | 0) == -3001) {
       $$296$ph113 = $131; //@line 6092
       $$393$ph114 = $130; //@line 6092
      } else {
       if (($132 | 0) < 0) {
        $$4$ph = $132; //@line 6096
        label = 32; //@line 6097
        break;
       }
       $162 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($27, 1, $$byval_copy29, $2, $3) | 0; //@line 6100
       if (($162 | 0) > 0) {
        label = 27; //@line 6103
        break;
       }
       if (($162 | 0) >= 0) {
        $$170 = -3009; //@line 6108
        label = 31; //@line 6109
        break;
       }
       $$0 = $130; //@line 6112
       $$094 = $131; //@line 6112
       $$097 = $$3100; //@line 6112
       continue;
      }
     }
     $$0 = $$393$ph114; //@line 6117
     $$094 = $$296$ph113; //@line 6117
     $$097 = $$3100 + 1 << 24 >> 24; //@line 6117
    }
    do {
     if ((label | 0) == 14) {
      HEAP32[$AsyncCtx >> 2] = 156; //@line 6121
      HEAP32[$AsyncCtx + 4 >> 2] = $$byval_copy29; //@line 6123
      HEAP32[$AsyncCtx + 8 >> 2] = $27; //@line 6125
      HEAP32[$AsyncCtx + 12 >> 2] = $$byval_copy29; //@line 6127
      HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 6129
      HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 6131
      HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 6133
      HEAP32[$AsyncCtx + 28 >> 2] = $36; //@line 6135
      HEAP8[$AsyncCtx + 32 >> 0] = $$sink$i; //@line 6137
      HEAP32[$AsyncCtx + 36 >> 2] = $29; //@line 6139
      HEAP32[$AsyncCtx + 40 >> 2] = $5; //@line 6141
      HEAP32[$AsyncCtx + 44 >> 2] = $6; //@line 6143
      HEAP8[$AsyncCtx + 48 >> 0] = $$094; //@line 6145
      HEAP32[$AsyncCtx + 52 >> 2] = $6; //@line 6147
      HEAP32[$AsyncCtx + 56 >> 2] = $5; //@line 6149
      HEAP32[$AsyncCtx + 60 >> 2] = $5; //@line 6151
      HEAP32[$AsyncCtx + 64 >> 2] = $7; //@line 6153
      HEAP32[$AsyncCtx + 68 >> 2] = $7; //@line 6155
      HEAP8[$AsyncCtx + 72 >> 0] = $$1107; //@line 6157
      HEAP32[$AsyncCtx + 76 >> 2] = $0; //@line 6159
      HEAP32[$AsyncCtx + 80 >> 2] = $0; //@line 6161
      HEAP8[$AsyncCtx + 84 >> 0] = $43; //@line 6163
      HEAP32[$AsyncCtx + 88 >> 2] = $30; //@line 6165
      HEAP32[$AsyncCtx + 92 >> 2] = $31; //@line 6167
      HEAP32[$AsyncCtx + 96 >> 2] = $32; //@line 6169
      HEAP32[$AsyncCtx + 100 >> 2] = $33; //@line 6171
      HEAP32[$AsyncCtx + 104 >> 2] = $34; //@line 6173
      HEAP32[$AsyncCtx + 108 >> 2] = $35; //@line 6175
      sp = STACKTOP; //@line 6176
      STACKTOP = sp; //@line 6177
      return 0; //@line 6177
     } else if ((label | 0) == 20) {
      HEAP32[$AsyncCtx9 >> 2] = 157; //@line 6180
      HEAP32[$AsyncCtx9 + 4 >> 2] = $$byval_copy29; //@line 6182
      HEAP32[$AsyncCtx9 + 8 >> 2] = $27; //@line 6184
      HEAP32[$AsyncCtx9 + 12 >> 2] = $$byval_copy29; //@line 6186
      HEAP32[$AsyncCtx9 + 16 >> 2] = $2; //@line 6188
      HEAP32[$AsyncCtx9 + 20 >> 2] = $3; //@line 6190
      HEAP32[$AsyncCtx9 + 24 >> 2] = $1; //@line 6192
      HEAP32[$AsyncCtx9 + 28 >> 2] = $36; //@line 6194
      HEAP8[$AsyncCtx9 + 32 >> 0] = $$sink$i; //@line 6196
      HEAP32[$AsyncCtx9 + 36 >> 2] = $29; //@line 6198
      HEAP32[$AsyncCtx9 + 40 >> 2] = $5; //@line 6200
      HEAP32[$AsyncCtx9 + 44 >> 2] = $6; //@line 6202
      HEAP32[$AsyncCtx9 + 48 >> 2] = $6; //@line 6204
      HEAP32[$AsyncCtx9 + 52 >> 2] = $5; //@line 6206
      HEAP32[$AsyncCtx9 + 56 >> 2] = $5; //@line 6208
      HEAP32[$AsyncCtx9 + 60 >> 2] = $7; //@line 6210
      HEAP32[$AsyncCtx9 + 64 >> 2] = $7; //@line 6212
      HEAP32[$AsyncCtx9 + 68 >> 2] = $0; //@line 6214
      HEAP32[$AsyncCtx9 + 72 >> 2] = $0; //@line 6216
      HEAP32[$AsyncCtx9 + 76 >> 2] = $30; //@line 6218
      HEAP32[$AsyncCtx9 + 80 >> 2] = $31; //@line 6220
      HEAP32[$AsyncCtx9 + 84 >> 2] = $32; //@line 6222
      HEAP32[$AsyncCtx9 + 88 >> 2] = $33; //@line 6224
      HEAP32[$AsyncCtx9 + 92 >> 2] = $34; //@line 6226
      HEAP32[$AsyncCtx9 + 96 >> 2] = $35; //@line 6228
      HEAP8[$AsyncCtx9 + 100 >> 0] = $$1105; //@line 6230
      HEAP8[$AsyncCtx9 + 101 >> 0] = $$094; //@line 6232
      HEAP8[$AsyncCtx9 + 102 >> 0] = $$3100; //@line 6234
      sp = STACKTOP; //@line 6235
      STACKTOP = sp; //@line 6236
      return 0; //@line 6236
     } else if ((label | 0) == 23) {
      HEAP32[$AsyncCtx6 >> 2] = 158; //@line 6239
      HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy29; //@line 6241
      HEAP32[$AsyncCtx6 + 8 >> 2] = $27; //@line 6243
      HEAP32[$AsyncCtx6 + 12 >> 2] = $$byval_copy29; //@line 6245
      HEAP32[$AsyncCtx6 + 16 >> 2] = $2; //@line 6247
      HEAP32[$AsyncCtx6 + 20 >> 2] = $3; //@line 6249
      HEAP32[$AsyncCtx6 + 24 >> 2] = $1; //@line 6251
      HEAP32[$AsyncCtx6 + 28 >> 2] = $36; //@line 6253
      HEAP8[$AsyncCtx6 + 32 >> 0] = $$sink$i; //@line 6255
      HEAP32[$AsyncCtx6 + 36 >> 2] = $29; //@line 6257
      HEAP32[$AsyncCtx6 + 40 >> 2] = $5; //@line 6259
      HEAP32[$AsyncCtx6 + 44 >> 2] = $6; //@line 6261
      HEAP32[$AsyncCtx6 + 48 >> 2] = $6; //@line 6263
      HEAP32[$AsyncCtx6 + 52 >> 2] = $5; //@line 6265
      HEAP32[$AsyncCtx6 + 56 >> 2] = $5; //@line 6267
      HEAP32[$AsyncCtx6 + 60 >> 2] = $7; //@line 6269
      HEAP32[$AsyncCtx6 + 64 >> 2] = $7; //@line 6271
      HEAP32[$AsyncCtx6 + 68 >> 2] = $0; //@line 6273
      HEAP32[$AsyncCtx6 + 72 >> 2] = $0; //@line 6275
      HEAP32[$AsyncCtx6 + 76 >> 2] = $30; //@line 6277
      HEAP32[$AsyncCtx6 + 80 >> 2] = $31; //@line 6279
      HEAP32[$AsyncCtx6 + 84 >> 2] = $32; //@line 6281
      HEAP32[$AsyncCtx6 + 88 >> 2] = $33; //@line 6283
      HEAP32[$AsyncCtx6 + 92 >> 2] = $34; //@line 6285
      HEAP32[$AsyncCtx6 + 96 >> 2] = $35; //@line 6287
      HEAP8[$AsyncCtx6 + 100 >> 0] = $131; //@line 6289
      HEAP8[$AsyncCtx6 + 101 >> 0] = $130; //@line 6291
      HEAP8[$AsyncCtx6 + 102 >> 0] = $$3100; //@line 6293
      sp = STACKTOP; //@line 6294
      STACKTOP = sp; //@line 6295
      return 0; //@line 6295
     } else if ((label | 0) == 27) {
      $164 = HEAP32[$$byval_copy29 >> 2] | 0; //@line 6298
      $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6299
      __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($1, $2, $164); //@line 6300
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 159; //@line 6303
       HEAP32[$AsyncCtx2 + 4 >> 2] = $162; //@line 6305
       HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy29; //@line 6307
       HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 6309
       HEAP32[$AsyncCtx2 + 16 >> 2] = $27; //@line 6311
       HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 6313
       HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 6315
       HEAP32[$AsyncCtx2 + 28 >> 2] = $5; //@line 6317
       sp = STACKTOP; //@line 6318
       STACKTOP = sp; //@line 6319
       return 0; //@line 6319
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6321
       $$170 = $162; //@line 6322
       label = 31; //@line 6323
       break;
      }
     } else if ((label | 0) == 32) {
      $$4110 = $$4$ph; //@line 6328
     }
    } while (0);
    if ((label | 0) == 31) {
     $$4110 = $$170; //@line 6332
    }
    _free($27); //@line 6334
    $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6335
    $174 = __ZN6Socket5closeEv($5) | 0; //@line 6336
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 160; //@line 6339
     HEAP32[$AsyncCtx17 + 4 >> 2] = $$4110; //@line 6341
     HEAP32[$AsyncCtx17 + 8 >> 2] = $5; //@line 6343
     HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 6345
     sp = STACKTOP; //@line 6346
     STACKTOP = sp; //@line 6347
     return 0; //@line 6347
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6349
     $$2 = ($174 | 0) == 0 ? $$4110 : $174; //@line 6352
     break;
    }
   }
  } else {
   $$2 = $14; //@line 6357
  }
 } while (0);
 $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6360
 __ZN9UDPSocketD2Ev($5); //@line 6361
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 161; //@line 6364
  HEAP32[$AsyncCtx13 + 4 >> 2] = $5; //@line 6366
  HEAP32[$AsyncCtx13 + 8 >> 2] = $$2; //@line 6368
  sp = STACKTOP; //@line 6369
  STACKTOP = sp; //@line 6370
  return 0; //@line 6370
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6372
 $$3 = $$2; //@line 6373
 STACKTOP = sp; //@line 6374
 return $$3 | 0; //@line 6374
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 2372
 $3 = HEAP32[1973] | 0; //@line 2373
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 2376
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 2380
 $7 = $6 & 3; //@line 2381
 if (($7 | 0) == 1) {
  _abort(); //@line 2384
 }
 $9 = $6 & -8; //@line 2387
 $10 = $2 + $9 | 0; //@line 2388
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 2393
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 2399
   $17 = $13 + $9 | 0; //@line 2400
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 2403
   }
   if ((HEAP32[1974] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 2409
    $106 = HEAP32[$105 >> 2] | 0; //@line 2410
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 2414
     $$1382 = $17; //@line 2414
     $114 = $16; //@line 2414
     break;
    }
    HEAP32[1971] = $17; //@line 2417
    HEAP32[$105 >> 2] = $106 & -2; //@line 2419
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 2422
    HEAP32[$16 + $17 >> 2] = $17; //@line 2424
    return;
   }
   $21 = $13 >>> 3; //@line 2427
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 2431
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 2433
    $28 = 7916 + ($21 << 1 << 2) | 0; //@line 2435
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 2440
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2447
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[1969] = HEAP32[1969] & ~(1 << $21); //@line 2457
     $$1 = $16; //@line 2458
     $$1382 = $17; //@line 2458
     $114 = $16; //@line 2458
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 2464
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 2468
     }
     $41 = $26 + 8 | 0; //@line 2471
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 2475
     } else {
      _abort(); //@line 2477
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 2482
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 2483
    $$1 = $16; //@line 2484
    $$1382 = $17; //@line 2484
    $114 = $16; //@line 2484
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 2488
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 2490
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 2494
     $60 = $59 + 4 | 0; //@line 2495
     $61 = HEAP32[$60 >> 2] | 0; //@line 2496
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 2499
      if (!$63) {
       $$3 = 0; //@line 2502
       break;
      } else {
       $$1387 = $63; //@line 2505
       $$1390 = $59; //@line 2505
      }
     } else {
      $$1387 = $61; //@line 2508
      $$1390 = $60; //@line 2508
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 2511
      $66 = HEAP32[$65 >> 2] | 0; //@line 2512
      if ($66 | 0) {
       $$1387 = $66; //@line 2515
       $$1390 = $65; //@line 2515
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 2518
      $69 = HEAP32[$68 >> 2] | 0; //@line 2519
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 2524
       $$1390 = $68; //@line 2524
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 2529
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 2532
      $$3 = $$1387; //@line 2533
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 2538
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 2541
     }
     $53 = $51 + 12 | 0; //@line 2544
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2548
     }
     $56 = $48 + 8 | 0; //@line 2551
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 2555
      HEAP32[$56 >> 2] = $51; //@line 2556
      $$3 = $48; //@line 2557
      break;
     } else {
      _abort(); //@line 2560
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 2567
    $$1382 = $17; //@line 2567
    $114 = $16; //@line 2567
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 2570
    $75 = 8180 + ($74 << 2) | 0; //@line 2571
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 2576
      if (!$$3) {
       HEAP32[1970] = HEAP32[1970] & ~(1 << $74); //@line 2583
       $$1 = $16; //@line 2584
       $$1382 = $17; //@line 2584
       $114 = $16; //@line 2584
       break L10;
      }
     } else {
      if ((HEAP32[1973] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 2591
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 2599
       if (!$$3) {
        $$1 = $16; //@line 2602
        $$1382 = $17; //@line 2602
        $114 = $16; //@line 2602
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[1973] | 0; //@line 2610
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 2613
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 2617
    $92 = $16 + 16 | 0; //@line 2618
    $93 = HEAP32[$92 >> 2] | 0; //@line 2619
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 2625
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 2629
       HEAP32[$93 + 24 >> 2] = $$3; //@line 2631
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 2637
    if (!$99) {
     $$1 = $16; //@line 2640
     $$1382 = $17; //@line 2640
     $114 = $16; //@line 2640
    } else {
     if ((HEAP32[1973] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 2645
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 2649
      HEAP32[$99 + 24 >> 2] = $$3; //@line 2651
      $$1 = $16; //@line 2652
      $$1382 = $17; //@line 2652
      $114 = $16; //@line 2652
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 2658
   $$1382 = $9; //@line 2658
   $114 = $2; //@line 2658
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 2663
 }
 $115 = $10 + 4 | 0; //@line 2666
 $116 = HEAP32[$115 >> 2] | 0; //@line 2667
 if (!($116 & 1)) {
  _abort(); //@line 2671
 }
 if (!($116 & 2)) {
  if ((HEAP32[1975] | 0) == ($10 | 0)) {
   $124 = (HEAP32[1972] | 0) + $$1382 | 0; //@line 2681
   HEAP32[1972] = $124; //@line 2682
   HEAP32[1975] = $$1; //@line 2683
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 2686
   if (($$1 | 0) != (HEAP32[1974] | 0)) {
    return;
   }
   HEAP32[1974] = 0; //@line 2692
   HEAP32[1971] = 0; //@line 2693
   return;
  }
  if ((HEAP32[1974] | 0) == ($10 | 0)) {
   $132 = (HEAP32[1971] | 0) + $$1382 | 0; //@line 2700
   HEAP32[1971] = $132; //@line 2701
   HEAP32[1974] = $114; //@line 2702
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 2705
   HEAP32[$114 + $132 >> 2] = $132; //@line 2707
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 2711
  $138 = $116 >>> 3; //@line 2712
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 2717
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 2719
    $145 = 7916 + ($138 << 1 << 2) | 0; //@line 2721
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[1973] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 2727
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 2734
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[1969] = HEAP32[1969] & ~(1 << $138); //@line 2744
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 2750
    } else {
     if ((HEAP32[1973] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 2755
     }
     $160 = $143 + 8 | 0; //@line 2758
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 2762
     } else {
      _abort(); //@line 2764
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 2769
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 2770
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 2773
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 2775
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 2779
      $180 = $179 + 4 | 0; //@line 2780
      $181 = HEAP32[$180 >> 2] | 0; //@line 2781
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 2784
       if (!$183) {
        $$3400 = 0; //@line 2787
        break;
       } else {
        $$1398 = $183; //@line 2790
        $$1402 = $179; //@line 2790
       }
      } else {
       $$1398 = $181; //@line 2793
       $$1402 = $180; //@line 2793
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 2796
       $186 = HEAP32[$185 >> 2] | 0; //@line 2797
       if ($186 | 0) {
        $$1398 = $186; //@line 2800
        $$1402 = $185; //@line 2800
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 2803
       $189 = HEAP32[$188 >> 2] | 0; //@line 2804
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 2809
        $$1402 = $188; //@line 2809
       }
      }
      if ((HEAP32[1973] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 2815
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 2818
       $$3400 = $$1398; //@line 2819
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 2824
      if ((HEAP32[1973] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 2828
      }
      $173 = $170 + 12 | 0; //@line 2831
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 2835
      }
      $176 = $167 + 8 | 0; //@line 2838
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 2842
       HEAP32[$176 >> 2] = $170; //@line 2843
       $$3400 = $167; //@line 2844
       break;
      } else {
       _abort(); //@line 2847
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 2855
     $196 = 8180 + ($195 << 2) | 0; //@line 2856
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 2861
       if (!$$3400) {
        HEAP32[1970] = HEAP32[1970] & ~(1 << $195); //@line 2868
        break L108;
       }
      } else {
       if ((HEAP32[1973] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 2875
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 2883
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[1973] | 0; //@line 2893
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 2896
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 2900
     $213 = $10 + 16 | 0; //@line 2901
     $214 = HEAP32[$213 >> 2] | 0; //@line 2902
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 2908
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 2912
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 2914
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 2920
     if ($220 | 0) {
      if ((HEAP32[1973] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 2926
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 2930
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 2932
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 2941
  HEAP32[$114 + $137 >> 2] = $137; //@line 2943
  if (($$1 | 0) == (HEAP32[1974] | 0)) {
   HEAP32[1971] = $137; //@line 2947
   return;
  } else {
   $$2 = $137; //@line 2950
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 2954
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 2957
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 2959
  $$2 = $$1382; //@line 2960
 }
 $235 = $$2 >>> 3; //@line 2962
 if ($$2 >>> 0 < 256) {
  $238 = 7916 + ($235 << 1 << 2) | 0; //@line 2966
  $239 = HEAP32[1969] | 0; //@line 2967
  $240 = 1 << $235; //@line 2968
  if (!($239 & $240)) {
   HEAP32[1969] = $239 | $240; //@line 2973
   $$0403 = $238; //@line 2975
   $$pre$phiZ2D = $238 + 8 | 0; //@line 2975
  } else {
   $244 = $238 + 8 | 0; //@line 2977
   $245 = HEAP32[$244 >> 2] | 0; //@line 2978
   if ((HEAP32[1973] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 2982
   } else {
    $$0403 = $245; //@line 2985
    $$pre$phiZ2D = $244; //@line 2985
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 2988
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 2990
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 2992
  HEAP32[$$1 + 12 >> 2] = $238; //@line 2994
  return;
 }
 $251 = $$2 >>> 8; //@line 2997
 if (!$251) {
  $$0396 = 0; //@line 3000
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 3004
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 3008
   $257 = $251 << $256; //@line 3009
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 3012
   $262 = $257 << $260; //@line 3014
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 3017
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 3022
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 3028
  }
 }
 $276 = 8180 + ($$0396 << 2) | 0; //@line 3031
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 3033
 HEAP32[$$1 + 20 >> 2] = 0; //@line 3036
 HEAP32[$$1 + 16 >> 2] = 0; //@line 3037
 $280 = HEAP32[1970] | 0; //@line 3038
 $281 = 1 << $$0396; //@line 3039
 do {
  if (!($280 & $281)) {
   HEAP32[1970] = $280 | $281; //@line 3045
   HEAP32[$276 >> 2] = $$1; //@line 3046
   HEAP32[$$1 + 24 >> 2] = $276; //@line 3048
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 3050
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 3052
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 3060
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 3060
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 3067
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 3071
    $301 = HEAP32[$299 >> 2] | 0; //@line 3073
    if (!$301) {
     label = 121; //@line 3076
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 3079
     $$0384 = $301; //@line 3079
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[1973] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 3086
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 3089
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 3091
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 3093
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 3095
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 3100
    $309 = HEAP32[$308 >> 2] | 0; //@line 3101
    $310 = HEAP32[1973] | 0; //@line 3102
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 3108
     HEAP32[$308 >> 2] = $$1; //@line 3109
     HEAP32[$$1 + 8 >> 2] = $309; //@line 3111
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 3113
     HEAP32[$$1 + 24 >> 2] = 0; //@line 3115
     break;
    } else {
     _abort(); //@line 3118
    }
   }
  }
 } while (0);
 $319 = (HEAP32[1977] | 0) + -1 | 0; //@line 3125
 HEAP32[1977] = $319; //@line 3126
 if (!$319) {
  $$0212$in$i = 8332; //@line 3129
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 3134
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 3140
  }
 }
 HEAP32[1977] = -1; //@line 3143
 return;
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 3639
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 3641
 L1 : do {
  if (!($4 & 1)) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 3646
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 3653
   $12 = $7 + $1 | 0; //@line 3654
   $13 = HEAP32[1973] | 0; //@line 3655
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 3658
   }
   if ((HEAP32[1974] | 0) == ($11 | 0)) {
    $101 = $2 + 4 | 0; //@line 3664
    $102 = HEAP32[$101 >> 2] | 0; //@line 3665
    if (($102 & 3 | 0) != 3) {
     $$1 = $11; //@line 3669
     $$1418 = $12; //@line 3669
     break;
    }
    HEAP32[1971] = $12; //@line 3672
    HEAP32[$101 >> 2] = $102 & -2; //@line 3674
    HEAP32[$11 + 4 >> 2] = $12 | 1; //@line 3677
    HEAP32[$2 >> 2] = $12; //@line 3678
    return;
   }
   $17 = $7 >>> 3; //@line 3681
   if ($7 >>> 0 < 256) {
    $20 = HEAP32[$11 + 8 >> 2] | 0; //@line 3685
    $22 = HEAP32[$11 + 12 >> 2] | 0; //@line 3687
    $24 = 7916 + ($17 << 1 << 2) | 0; //@line 3689
    if (($20 | 0) != ($24 | 0)) {
     if ($13 >>> 0 > $20 >>> 0) {
      _abort(); //@line 3694
     }
     if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3701
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     HEAP32[1969] = HEAP32[1969] & ~(1 << $17); //@line 3711
     $$1 = $11; //@line 3712
     $$1418 = $12; //@line 3712
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi25Z2D = $22 + 8 | 0; //@line 3718
    } else {
     if ($13 >>> 0 > $22 >>> 0) {
      _abort(); //@line 3722
     }
     $37 = $22 + 8 | 0; //@line 3725
     if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) {
      $$pre$phi25Z2D = $37; //@line 3729
     } else {
      _abort(); //@line 3731
     }
    }
    HEAP32[$20 + 12 >> 2] = $22; //@line 3736
    HEAP32[$$pre$phi25Z2D >> 2] = $20; //@line 3737
    $$1 = $11; //@line 3738
    $$1418 = $12; //@line 3738
    break;
   }
   $42 = HEAP32[$11 + 24 >> 2] | 0; //@line 3742
   $44 = HEAP32[$11 + 12 >> 2] | 0; //@line 3744
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 3748
     $56 = $55 + 4 | 0; //@line 3749
     $57 = HEAP32[$56 >> 2] | 0; //@line 3750
     if (!$57) {
      $59 = HEAP32[$55 >> 2] | 0; //@line 3753
      if (!$59) {
       $$3 = 0; //@line 3756
       break;
      } else {
       $$1426 = $59; //@line 3759
       $$1429 = $55; //@line 3759
      }
     } else {
      $$1426 = $57; //@line 3762
      $$1429 = $56; //@line 3762
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 3765
      $62 = HEAP32[$61 >> 2] | 0; //@line 3766
      if ($62 | 0) {
       $$1426 = $62; //@line 3769
       $$1429 = $61; //@line 3769
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 3772
      $65 = HEAP32[$64 >> 2] | 0; //@line 3773
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 3778
       $$1429 = $64; //@line 3778
      }
     }
     if ($13 >>> 0 > $$1429 >>> 0) {
      _abort(); //@line 3783
     } else {
      HEAP32[$$1429 >> 2] = 0; //@line 3786
      $$3 = $$1426; //@line 3787
      break;
     }
    } else {
     $47 = HEAP32[$11 + 8 >> 2] | 0; //@line 3792
     if ($13 >>> 0 > $47 >>> 0) {
      _abort(); //@line 3795
     }
     $49 = $47 + 12 | 0; //@line 3798
     if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3802
     }
     $52 = $44 + 8 | 0; //@line 3805
     if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$49 >> 2] = $44; //@line 3809
      HEAP32[$52 >> 2] = $47; //@line 3810
      $$3 = $44; //@line 3811
      break;
     } else {
      _abort(); //@line 3814
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 3821
    $$1418 = $12; //@line 3821
   } else {
    $70 = HEAP32[$11 + 28 >> 2] | 0; //@line 3824
    $71 = 8180 + ($70 << 2) | 0; //@line 3825
    do {
     if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$71 >> 2] = $$3; //@line 3830
      if (!$$3) {
       HEAP32[1970] = HEAP32[1970] & ~(1 << $70); //@line 3837
       $$1 = $11; //@line 3838
       $$1418 = $12; //@line 3838
       break L1;
      }
     } else {
      if ((HEAP32[1973] | 0) >>> 0 > $42 >>> 0) {
       _abort(); //@line 3845
      } else {
       HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3; //@line 3853
       if (!$$3) {
        $$1 = $11; //@line 3856
        $$1418 = $12; //@line 3856
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $85 = HEAP32[1973] | 0; //@line 3864
    if ($85 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3867
    }
    HEAP32[$$3 + 24 >> 2] = $42; //@line 3871
    $88 = $11 + 16 | 0; //@line 3872
    $89 = HEAP32[$88 >> 2] | 0; //@line 3873
    do {
     if ($89 | 0) {
      if ($85 >>> 0 > $89 >>> 0) {
       _abort(); //@line 3879
      } else {
       HEAP32[$$3 + 16 >> 2] = $89; //@line 3883
       HEAP32[$89 + 24 >> 2] = $$3; //@line 3885
       break;
      }
     }
    } while (0);
    $95 = HEAP32[$88 + 4 >> 2] | 0; //@line 3891
    if (!$95) {
     $$1 = $11; //@line 3894
     $$1418 = $12; //@line 3894
    } else {
     if ((HEAP32[1973] | 0) >>> 0 > $95 >>> 0) {
      _abort(); //@line 3899
     } else {
      HEAP32[$$3 + 20 >> 2] = $95; //@line 3903
      HEAP32[$95 + 24 >> 2] = $$3; //@line 3905
      $$1 = $11; //@line 3906
      $$1418 = $12; //@line 3906
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 3912
   $$1418 = $1; //@line 3912
  }
 } while (0);
 $108 = HEAP32[1973] | 0; //@line 3915
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 3918
 }
 $110 = $2 + 4 | 0; //@line 3921
 $111 = HEAP32[$110 >> 2] | 0; //@line 3922
 if (!($111 & 2)) {
  if ((HEAP32[1975] | 0) == ($2 | 0)) {
   $117 = (HEAP32[1972] | 0) + $$1418 | 0; //@line 3930
   HEAP32[1972] = $117; //@line 3931
   HEAP32[1975] = $$1; //@line 3932
   HEAP32[$$1 + 4 >> 2] = $117 | 1; //@line 3935
   if (($$1 | 0) != (HEAP32[1974] | 0)) {
    return;
   }
   HEAP32[1974] = 0; //@line 3941
   HEAP32[1971] = 0; //@line 3942
   return;
  }
  if ((HEAP32[1974] | 0) == ($2 | 0)) {
   $125 = (HEAP32[1971] | 0) + $$1418 | 0; //@line 3949
   HEAP32[1971] = $125; //@line 3950
   HEAP32[1974] = $$1; //@line 3951
   HEAP32[$$1 + 4 >> 2] = $125 | 1; //@line 3954
   HEAP32[$$1 + $125 >> 2] = $125; //@line 3956
   return;
  }
  $130 = ($111 & -8) + $$1418 | 0; //@line 3960
  $131 = $111 >>> 3; //@line 3961
  L96 : do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$2 + 8 >> 2] | 0; //@line 3966
    $136 = HEAP32[$2 + 12 >> 2] | 0; //@line 3968
    $138 = 7916 + ($131 << 1 << 2) | 0; //@line 3970
    if (($134 | 0) != ($138 | 0)) {
     if ($108 >>> 0 > $134 >>> 0) {
      _abort(); //@line 3975
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) {
      _abort(); //@line 3982
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[1969] = HEAP32[1969] & ~(1 << $131); //@line 3992
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi23Z2D = $136 + 8 | 0; //@line 3998
    } else {
     if ($108 >>> 0 > $136 >>> 0) {
      _abort(); //@line 4002
     }
     $151 = $136 + 8 | 0; //@line 4005
     if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) {
      $$pre$phi23Z2D = $151; //@line 4009
     } else {
      _abort(); //@line 4011
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 4016
    HEAP32[$$pre$phi23Z2D >> 2] = $134; //@line 4017
   } else {
    $156 = HEAP32[$2 + 24 >> 2] | 0; //@line 4020
    $158 = HEAP32[$2 + 12 >> 2] | 0; //@line 4022
    do {
     if (($158 | 0) == ($2 | 0)) {
      $169 = $2 + 16 | 0; //@line 4026
      $170 = $169 + 4 | 0; //@line 4027
      $171 = HEAP32[$170 >> 2] | 0; //@line 4028
      if (!$171) {
       $173 = HEAP32[$169 >> 2] | 0; //@line 4031
       if (!$173) {
        $$3435 = 0; //@line 4034
        break;
       } else {
        $$1433 = $173; //@line 4037
        $$1437 = $169; //@line 4037
       }
      } else {
       $$1433 = $171; //@line 4040
       $$1437 = $170; //@line 4040
      }
      while (1) {
       $175 = $$1433 + 20 | 0; //@line 4043
       $176 = HEAP32[$175 >> 2] | 0; //@line 4044
       if ($176 | 0) {
        $$1433 = $176; //@line 4047
        $$1437 = $175; //@line 4047
        continue;
       }
       $178 = $$1433 + 16 | 0; //@line 4050
       $179 = HEAP32[$178 >> 2] | 0; //@line 4051
       if (!$179) {
        break;
       } else {
        $$1433 = $179; //@line 4056
        $$1437 = $178; //@line 4056
       }
      }
      if ($108 >>> 0 > $$1437 >>> 0) {
       _abort(); //@line 4061
      } else {
       HEAP32[$$1437 >> 2] = 0; //@line 4064
       $$3435 = $$1433; //@line 4065
       break;
      }
     } else {
      $161 = HEAP32[$2 + 8 >> 2] | 0; //@line 4070
      if ($108 >>> 0 > $161 >>> 0) {
       _abort(); //@line 4073
      }
      $163 = $161 + 12 | 0; //@line 4076
      if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) {
       _abort(); //@line 4080
      }
      $166 = $158 + 8 | 0; //@line 4083
      if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 4087
       HEAP32[$166 >> 2] = $161; //@line 4088
       $$3435 = $158; //@line 4089
       break;
      } else {
       _abort(); //@line 4092
      }
     }
    } while (0);
    if ($156 | 0) {
     $184 = HEAP32[$2 + 28 >> 2] | 0; //@line 4100
     $185 = 8180 + ($184 << 2) | 0; //@line 4101
     do {
      if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$185 >> 2] = $$3435; //@line 4106
       if (!$$3435) {
        HEAP32[1970] = HEAP32[1970] & ~(1 << $184); //@line 4113
        break L96;
       }
      } else {
       if ((HEAP32[1973] | 0) >>> 0 > $156 >>> 0) {
        _abort(); //@line 4120
       } else {
        HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435; //@line 4128
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $199 = HEAP32[1973] | 0; //@line 4138
     if ($199 >>> 0 > $$3435 >>> 0) {
      _abort(); //@line 4141
     }
     HEAP32[$$3435 + 24 >> 2] = $156; //@line 4145
     $202 = $2 + 16 | 0; //@line 4146
     $203 = HEAP32[$202 >> 2] | 0; //@line 4147
     do {
      if ($203 | 0) {
       if ($199 >>> 0 > $203 >>> 0) {
        _abort(); //@line 4153
       } else {
        HEAP32[$$3435 + 16 >> 2] = $203; //@line 4157
        HEAP32[$203 + 24 >> 2] = $$3435; //@line 4159
        break;
       }
      }
     } while (0);
     $209 = HEAP32[$202 + 4 >> 2] | 0; //@line 4165
     if ($209 | 0) {
      if ((HEAP32[1973] | 0) >>> 0 > $209 >>> 0) {
       _abort(); //@line 4171
      } else {
       HEAP32[$$3435 + 20 >> 2] = $209; //@line 4175
       HEAP32[$209 + 24 >> 2] = $$3435; //@line 4177
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1; //@line 4186
  HEAP32[$$1 + $130 >> 2] = $130; //@line 4188
  if (($$1 | 0) == (HEAP32[1974] | 0)) {
   HEAP32[1971] = $130; //@line 4192
   return;
  } else {
   $$2 = $130; //@line 4195
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 4199
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1; //@line 4202
  HEAP32[$$1 + $$1418 >> 2] = $$1418; //@line 4204
  $$2 = $$1418; //@line 4205
 }
 $224 = $$2 >>> 3; //@line 4207
 if ($$2 >>> 0 < 256) {
  $227 = 7916 + ($224 << 1 << 2) | 0; //@line 4211
  $228 = HEAP32[1969] | 0; //@line 4212
  $229 = 1 << $224; //@line 4213
  if (!($228 & $229)) {
   HEAP32[1969] = $228 | $229; //@line 4218
   $$0438 = $227; //@line 4220
   $$pre$phiZ2D = $227 + 8 | 0; //@line 4220
  } else {
   $233 = $227 + 8 | 0; //@line 4222
   $234 = HEAP32[$233 >> 2] | 0; //@line 4223
   if ((HEAP32[1973] | 0) >>> 0 > $234 >>> 0) {
    _abort(); //@line 4227
   } else {
    $$0438 = $234; //@line 4230
    $$pre$phiZ2D = $233; //@line 4230
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 4233
  HEAP32[$$0438 + 12 >> 2] = $$1; //@line 4235
  HEAP32[$$1 + 8 >> 2] = $$0438; //@line 4237
  HEAP32[$$1 + 12 >> 2] = $227; //@line 4239
  return;
 }
 $240 = $$2 >>> 8; //@line 4242
 if (!$240) {
  $$0431 = 0; //@line 4245
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 4249
  } else {
   $245 = ($240 + 1048320 | 0) >>> 16 & 8; //@line 4253
   $246 = $240 << $245; //@line 4254
   $249 = ($246 + 520192 | 0) >>> 16 & 4; //@line 4257
   $251 = $246 << $249; //@line 4259
   $254 = ($251 + 245760 | 0) >>> 16 & 2; //@line 4262
   $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0; //@line 4267
   $$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1; //@line 4273
  }
 }
 $265 = 8180 + ($$0431 << 2) | 0; //@line 4276
 HEAP32[$$1 + 28 >> 2] = $$0431; //@line 4278
 HEAP32[$$1 + 20 >> 2] = 0; //@line 4281
 HEAP32[$$1 + 16 >> 2] = 0; //@line 4282
 $269 = HEAP32[1970] | 0; //@line 4283
 $270 = 1 << $$0431; //@line 4284
 if (!($269 & $270)) {
  HEAP32[1970] = $269 | $270; //@line 4289
  HEAP32[$265 >> 2] = $$1; //@line 4290
  HEAP32[$$1 + 24 >> 2] = $265; //@line 4292
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4294
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4296
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 4305
 $$0420 = HEAP32[$265 >> 2] | 0; //@line 4305
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 4312
   break;
  }
  $288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 4316
  $290 = HEAP32[$288 >> 2] | 0; //@line 4318
  if (!$290) {
   label = 118; //@line 4321
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 4324
   $$0420 = $290; //@line 4324
  }
 }
 if ((label | 0) == 118) {
  if ((HEAP32[1973] | 0) >>> 0 > $288 >>> 0) {
   _abort(); //@line 4331
  }
  HEAP32[$288 >> 2] = $$1; //@line 4334
  HEAP32[$$1 + 24 >> 2] = $$0420; //@line 4336
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4338
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4340
  return;
 } else if ((label | 0) == 121) {
  $297 = $$0420 + 8 | 0; //@line 4344
  $298 = HEAP32[$297 >> 2] | 0; //@line 4345
  $299 = HEAP32[1973] | 0; //@line 4346
  if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) {
   _abort(); //@line 4351
  }
  HEAP32[$298 + 12 >> 2] = $$1; //@line 4355
  HEAP32[$297 >> 2] = $$1; //@line 4356
  HEAP32[$$1 + 8 >> 2] = $298; //@line 4358
  HEAP32[$$1 + 12 >> 2] = $$0420; //@line 4360
  HEAP32[$$1 + 24 >> 2] = 0; //@line 4362
  return;
 }
}
function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $263 = 0, $265 = 0, $275 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do {
  if ($1 >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 6940
   $289 = 0; //@line 6941
   $290 = 0; //@line 6941
  } else {
   $6 = $0 + 4 | 0; //@line 6943
   $7 = $0 + 100 | 0; //@line 6944
   do {
    $9 = HEAP32[$6 >> 2] | 0; //@line 6946
    if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $9 + 1; //@line 6951
     $16 = HEAPU8[$9 >> 0] | 0; //@line 6954
    } else {
     $16 = ___shgetc($0) | 0; //@line 6957
    }
   } while ((_isspace($16) | 0) != 0);
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $20 = (($16 | 0) == 45) << 31 >> 31; //@line 6969
      $21 = HEAP32[$6 >> 2] | 0; //@line 6970
      if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $21 + 1; //@line 6975
       $$0157 = $20; //@line 6978
       $$0159 = HEAPU8[$21 >> 0] | 0; //@line 6978
       break L11;
      } else {
       $$0157 = $20; //@line 6982
       $$0159 = ___shgetc($0) | 0; //@line 6982
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0; //@line 6988
      $$0159 = $16; //@line 6988
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0; //@line 6992
   do {
    if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
     $32 = HEAP32[$6 >> 2] | 0; //@line 6999
     if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $32 + 1; //@line 7004
      $40 = HEAPU8[$32 >> 0] | 0; //@line 7007
     } else {
      $40 = ___shgetc($0) | 0; //@line 7010
     }
     if (($40 | 32 | 0) != 120) {
      if ($28) {
       $$1160169 = $40; //@line 7016
       $$1165167 = 8; //@line 7016
       label = 46; //@line 7017
       break;
      } else {
       $$1160 = $40; //@line 7020
       $$1165 = $1; //@line 7020
       label = 32; //@line 7021
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0; //@line 7025
     if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $42 + 1; //@line 7030
      $50 = HEAPU8[$42 >> 0] | 0; //@line 7033
     } else {
      $50 = ___shgetc($0) | 0; //@line 7036
     }
     if ((HEAPU8[4319 + $50 >> 0] | 0) > 15) {
      $54 = (HEAP32[$7 >> 2] | 0) == 0; //@line 7043
      if (!$54) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7047
      }
      if (!$2) {
       ___shlim($0, 0); //@line 7051
       $289 = 0; //@line 7052
       $290 = 0; //@line 7052
       break L1;
      }
      if ($54) {
       $289 = 0; //@line 7056
       $290 = 0; //@line 7056
       break L1;
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7061
      $289 = 0; //@line 7062
      $290 = 0; //@line 7062
      break L1;
     } else {
      $$1160169 = $50; //@line 7065
      $$1165167 = 16; //@line 7065
      label = 46; //@line 7066
     }
    } else {
     $$166 = $28 ? 10 : $1; //@line 7069
     if ($$166 >>> 0 > (HEAPU8[4319 + $$0159 >> 0] | 0) >>> 0) {
      $$1160 = $$0159; //@line 7075
      $$1165 = $$166; //@line 7075
      label = 32; //@line 7076
     } else {
      if (HEAP32[$7 >> 2] | 0) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7083
      }
      ___shlim($0, 0); //@line 7085
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7087
      $289 = 0; //@line 7088
      $290 = 0; //@line 7088
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     if (($$1165 | 0) == 10) {
      $70 = $$1160 + -48 | 0; //@line 7097
      if ($70 >>> 0 < 10) {
       $$0154222 = 0; //@line 7100
       $74 = $70; //@line 7100
       do {
        $$0154222 = ($$0154222 * 10 | 0) + $74 | 0; //@line 7103
        $75 = HEAP32[$6 >> 2] | 0; //@line 7104
        if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $75 + 1; //@line 7109
         $$2161$be = HEAPU8[$75 >> 0] | 0; //@line 7112
        } else {
         $$2161$be = ___shgetc($0) | 0; //@line 7115
        }
        $74 = $$2161$be + -48 | 0; //@line 7117
       } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
       $$2161$lcssa = $$2161$be; //@line 7127
       $291 = $$0154222; //@line 7127
       $292 = 0; //@line 7127
      } else {
       $$2161$lcssa = $$1160; //@line 7129
       $291 = 0; //@line 7129
       $292 = 0; //@line 7129
      }
      $86 = $$2161$lcssa + -48 | 0; //@line 7131
      if ($86 >>> 0 < 10) {
       $$3162215 = $$2161$lcssa; //@line 7134
       $88 = $291; //@line 7134
       $89 = $292; //@line 7134
       $93 = $86; //@line 7134
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0; //@line 7136
        $91 = tempRet0; //@line 7137
        $94 = (($93 | 0) < 0) << 31 >> 31; //@line 7139
        $96 = ~$94; //@line 7141
        if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
         $$1165168 = 10; //@line 7148
         $$8 = $$3162215; //@line 7148
         $293 = $88; //@line 7148
         $294 = $89; //@line 7148
         label = 72; //@line 7149
         break L43;
        }
        $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0; //@line 7152
        $89 = tempRet0; //@line 7153
        $104 = HEAP32[$6 >> 2] | 0; //@line 7154
        if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $104 + 1; //@line 7159
         $$3162$be = HEAPU8[$104 >> 0] | 0; //@line 7162
        } else {
         $$3162$be = ___shgetc($0) | 0; //@line 7165
        }
        $93 = $$3162$be + -48 | 0; //@line 7167
        if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) {
         break;
        } else {
         $$3162215 = $$3162$be; //@line 7176
        }
       }
       if ($93 >>> 0 > 9) {
        $$1158 = $$0157; //@line 7183
        $263 = $89; //@line 7183
        $265 = $88; //@line 7183
       } else {
        $$1165168 = 10; //@line 7185
        $$8 = $$3162$be; //@line 7185
        $293 = $88; //@line 7185
        $294 = $89; //@line 7185
        label = 72; //@line 7186
       }
      } else {
       $$1158 = $$0157; //@line 7189
       $263 = $292; //@line 7189
       $265 = $291; //@line 7189
      }
     } else {
      $$1160169 = $$1160; //@line 7192
      $$1165167 = $$1165; //@line 7192
      label = 46; //@line 7193
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$1165167 + -1 & $$1165167)) {
      $131 = HEAP8[4575 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 7208
      $133 = HEAP8[4319 + $$1160169 >> 0] | 0; //@line 7210
      $134 = $133 & 255; //@line 7211
      if ($$1165167 >>> 0 > $134 >>> 0) {
       $$1155192 = 0; //@line 7214
       $138 = $134; //@line 7214
       do {
        $$1155192 = $138 | $$1155192 << $131; //@line 7217
        $139 = HEAP32[$6 >> 2] | 0; //@line 7218
        if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $139 + 1; //@line 7223
         $$4163$be = HEAPU8[$139 >> 0] | 0; //@line 7226
        } else {
         $$4163$be = ___shgetc($0) | 0; //@line 7229
        }
        $147 = HEAP8[4319 + $$4163$be >> 0] | 0; //@line 7232
        $138 = $147 & 255; //@line 7233
       } while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
       $$4163$lcssa = $$4163$be; //@line 7243
       $155 = $147; //@line 7243
       $158 = 0; //@line 7243
       $160 = $$1155192; //@line 7243
      } else {
       $$4163$lcssa = $$1160169; //@line 7245
       $155 = $133; //@line 7245
       $158 = 0; //@line 7245
       $160 = 0; //@line 7245
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0; //@line 7247
      $153 = tempRet0; //@line 7248
      if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
       $$1165168 = $$1165167; //@line 7258
       $$8 = $$4163$lcssa; //@line 7258
       $293 = $160; //@line 7258
       $294 = $158; //@line 7258
       label = 72; //@line 7259
       break;
      } else {
       $164 = $160; //@line 7262
       $165 = $158; //@line 7262
       $169 = $155; //@line 7262
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0; //@line 7265
       $167 = tempRet0; //@line 7266
       $170 = $166 | $169 & 255; //@line 7268
       $171 = HEAP32[$6 >> 2] | 0; //@line 7269
       if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $171 + 1; //@line 7274
        $$5$be = HEAPU8[$171 >> 0] | 0; //@line 7277
       } else {
        $$5$be = ___shgetc($0) | 0; //@line 7280
       }
       $169 = HEAP8[4319 + $$5$be >> 0] | 0; //@line 7283
       if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
        $$1165168 = $$1165167; //@line 7293
        $$8 = $$5$be; //@line 7293
        $293 = $170; //@line 7293
        $294 = $167; //@line 7293
        label = 72; //@line 7294
        break L63;
       } else {
        $164 = $170; //@line 7297
        $165 = $167; //@line 7297
       }
      }
     }
     $123 = HEAP8[4319 + $$1160169 >> 0] | 0; //@line 7302
     $124 = $123 & 255; //@line 7303
     if ($$1165167 >>> 0 > $124 >>> 0) {
      $$2156210 = 0; //@line 7306
      $189 = $124; //@line 7306
      do {
       $$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0; //@line 7309
       $190 = HEAP32[$6 >> 2] | 0; //@line 7310
       if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $190 + 1; //@line 7315
        $$6$be = HEAPU8[$190 >> 0] | 0; //@line 7318
       } else {
        $$6$be = ___shgetc($0) | 0; //@line 7321
       }
       $198 = HEAP8[4319 + $$6$be >> 0] | 0; //@line 7324
       $189 = $198 & 255; //@line 7325
      } while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
      $$6$lcssa = $$6$be; //@line 7335
      $204 = $198; //@line 7335
      $295 = $$2156210; //@line 7335
      $296 = 0; //@line 7335
     } else {
      $$6$lcssa = $$1160169; //@line 7337
      $204 = $123; //@line 7337
      $295 = 0; //@line 7337
      $296 = 0; //@line 7337
     }
     if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
      $206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0; //@line 7342
      $207 = tempRet0; //@line 7343
      $$7198 = $$6$lcssa; //@line 7344
      $209 = $296; //@line 7344
      $211 = $295; //@line 7344
      $218 = $204; //@line 7344
      while (1) {
       if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
        $$1165168 = $$1165167; //@line 7352
        $$8 = $$7198; //@line 7352
        $293 = $211; //@line 7352
        $294 = $209; //@line 7352
        label = 72; //@line 7353
        break L63;
       }
       $215 = ___muldi3($211 | 0, $209 | 0, $$1165167 | 0, 0) | 0; //@line 7356
       $216 = tempRet0; //@line 7357
       $217 = $218 & 255; //@line 7358
       if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
        $$1165168 = $$1165167; //@line 7366
        $$8 = $$7198; //@line 7366
        $293 = $211; //@line 7366
        $294 = $209; //@line 7366
        label = 72; //@line 7367
        break L63;
       }
       $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0; //@line 7370
       $226 = tempRet0; //@line 7371
       $227 = HEAP32[$6 >> 2] | 0; //@line 7372
       if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $227 + 1; //@line 7377
        $$7$be = HEAPU8[$227 >> 0] | 0; //@line 7380
       } else {
        $$7$be = ___shgetc($0) | 0; //@line 7383
       }
       $218 = HEAP8[4319 + $$7$be >> 0] | 0; //@line 7386
       if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
        $$1165168 = $$1165167; //@line 7392
        $$8 = $$7$be; //@line 7392
        $293 = $225; //@line 7392
        $294 = $226; //@line 7392
        label = 72; //@line 7393
        break;
       } else {
        $$7198 = $$7$be; //@line 7390
        $209 = $226; //@line 7390
        $211 = $225; //@line 7390
       }
      }
     } else {
      $$1165168 = $$1165167; //@line 7398
      $$8 = $$6$lcssa; //@line 7398
      $293 = $295; //@line 7398
      $294 = $296; //@line 7398
      label = 72; //@line 7399
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ($$1165168 >>> 0 > (HEAPU8[4319 + $$8 >> 0] | 0) >>> 0) {
     do {
      $242 = HEAP32[$6 >> 2] | 0; //@line 7410
      if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $242 + 1; //@line 7415
       $$9$be = HEAPU8[$242 >> 0] | 0; //@line 7418
      } else {
       $$9$be = ___shgetc($0) | 0; //@line 7421
      }
     } while ($$1165168 >>> 0 > (HEAPU8[4319 + $$9$be >> 0] | 0) >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7432
     $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0; //@line 7438
     $263 = $4; //@line 7438
     $265 = $3; //@line 7438
    } else {
     $$1158 = $$0157; //@line 7440
     $263 = $294; //@line 7440
     $265 = $293; //@line 7440
    }
   }
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7448
   }
   if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
    if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7464
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0; //@line 7465
     $289 = tempRet0; //@line 7467
     $290 = $275; //@line 7467
     break;
    }
    if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7477
     $289 = $4; //@line 7478
     $290 = $3; //@line 7478
     break;
    }
   }
   $284 = (($$1158 | 0) < 0) << 31 >> 31; //@line 7483
   $287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0; //@line 7486
   $289 = tempRet0; //@line 7488
   $290 = $287; //@line 7488
  }
 } while (0);
 tempRet0 = $289; //@line 7491
 return $290 | 0; //@line 7492
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_102($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $113 = 0, $115 = 0, $12 = 0, $123 = 0, $126 = 0, $128 = 0, $136 = 0, $139 = 0, $14 = 0, $141 = 0, $149 = 0, $152 = 0, $154 = 0, $16 = 0, $167 = 0, $168 = 0, $169 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $57 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2192
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2194
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2196
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2198
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2200
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2202
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2204
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2206
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2208
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2210
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2212
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2214
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2216
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2218
 $27 = $12 + 12 | 0; //@line 2219
 $28 = HEAP32[$27 >> 2] | 0; //@line 2220
 if ($28 | 0) {
  $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 2224
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 2225
  FUNCTION_TABLE_vii[$31 & 7]($14, $12); //@line 2226
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 2229
   $32 = $ReallocAsyncCtx5 + 4 | 0; //@line 2230
   HEAP32[$32 >> 2] = $2; //@line 2231
   $33 = $ReallocAsyncCtx5 + 8 | 0; //@line 2232
   HEAP32[$33 >> 2] = $4; //@line 2233
   $34 = $ReallocAsyncCtx5 + 12 | 0; //@line 2234
   HEAP32[$34 >> 2] = $6; //@line 2235
   $35 = $ReallocAsyncCtx5 + 16 | 0; //@line 2236
   HEAP32[$35 >> 2] = $8; //@line 2237
   $36 = $ReallocAsyncCtx5 + 20 | 0; //@line 2238
   HEAP32[$36 >> 2] = $10; //@line 2239
   $37 = $ReallocAsyncCtx5 + 24 | 0; //@line 2240
   HEAP32[$37 >> 2] = $16; //@line 2241
   $38 = $ReallocAsyncCtx5 + 28 | 0; //@line 2242
   HEAP32[$38 >> 2] = $18; //@line 2243
   $39 = $ReallocAsyncCtx5 + 32 | 0; //@line 2244
   HEAP32[$39 >> 2] = $20; //@line 2245
   $40 = $ReallocAsyncCtx5 + 36 | 0; //@line 2246
   HEAP32[$40 >> 2] = $14; //@line 2247
   $41 = $ReallocAsyncCtx5 + 40 | 0; //@line 2248
   HEAP32[$41 >> 2] = $22; //@line 2249
   $42 = $ReallocAsyncCtx5 + 44 | 0; //@line 2250
   HEAP32[$42 >> 2] = $24; //@line 2251
   $43 = $ReallocAsyncCtx5 + 48 | 0; //@line 2252
   HEAP32[$43 >> 2] = $27; //@line 2253
   $44 = $ReallocAsyncCtx5 + 52 | 0; //@line 2254
   HEAP32[$44 >> 2] = $26; //@line 2255
   sp = STACKTOP; //@line 2256
   return;
  }
  ___async_unwind = 0; //@line 2259
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 2260
  $32 = $ReallocAsyncCtx5 + 4 | 0; //@line 2261
  HEAP32[$32 >> 2] = $2; //@line 2262
  $33 = $ReallocAsyncCtx5 + 8 | 0; //@line 2263
  HEAP32[$33 >> 2] = $4; //@line 2264
  $34 = $ReallocAsyncCtx5 + 12 | 0; //@line 2265
  HEAP32[$34 >> 2] = $6; //@line 2266
  $35 = $ReallocAsyncCtx5 + 16 | 0; //@line 2267
  HEAP32[$35 >> 2] = $8; //@line 2268
  $36 = $ReallocAsyncCtx5 + 20 | 0; //@line 2269
  HEAP32[$36 >> 2] = $10; //@line 2270
  $37 = $ReallocAsyncCtx5 + 24 | 0; //@line 2271
  HEAP32[$37 >> 2] = $16; //@line 2272
  $38 = $ReallocAsyncCtx5 + 28 | 0; //@line 2273
  HEAP32[$38 >> 2] = $18; //@line 2274
  $39 = $ReallocAsyncCtx5 + 32 | 0; //@line 2275
  HEAP32[$39 >> 2] = $20; //@line 2276
  $40 = $ReallocAsyncCtx5 + 36 | 0; //@line 2277
  HEAP32[$40 >> 2] = $14; //@line 2278
  $41 = $ReallocAsyncCtx5 + 40 | 0; //@line 2279
  HEAP32[$41 >> 2] = $22; //@line 2280
  $42 = $ReallocAsyncCtx5 + 44 | 0; //@line 2281
  HEAP32[$42 >> 2] = $24; //@line 2282
  $43 = $ReallocAsyncCtx5 + 48 | 0; //@line 2283
  HEAP32[$43 >> 2] = $27; //@line 2284
  $44 = $ReallocAsyncCtx5 + 52 | 0; //@line 2285
  HEAP32[$44 >> 2] = $26; //@line 2286
  sp = STACKTOP; //@line 2287
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 2290
 HEAP32[$4 + 8 >> 2] = $2; //@line 2292
 HEAP32[$4 + 48 >> 2] = $6; //@line 2294
 HEAP32[$4 + 52 >> 2] = $8; //@line 2296
 $48 = $4 + 56 | 0; //@line 2297
 HEAP32[$48 >> 2] = 0; //@line 2298
 $49 = $4 + 60 | 0; //@line 2299
 HEAP32[$49 >> 2] = 0; //@line 2300
 HEAP32[$4 + 64 >> 2] = 0; //@line 2302
 HEAP8[$4 + 82 >> 0] = 0; //@line 2304
 HEAP8[$4 + 83 >> 0] = 1; //@line 2306
 HEAP8[$4 + 84 >> 0] = 3; //@line 2308
 HEAP8[$4 + 85 >> 0] = 0; //@line 2310
 HEAP16[$4 + 80 >> 1] = 0; //@line 2312
 HEAP32[$4 + 76 >> 2] = 0; //@line 2314
 $57 = $4 + 72 | 0; //@line 2315
 HEAP32[$57 >> 2] = 15500; //@line 2316
 HEAP8[$4 + 86 >> 0] = 0; //@line 2318
 HEAP32[$4 + 88 >> 2] = 0; //@line 2320
 $60 = HEAP32[187] | 0; //@line 2321
 HEAP32[187] = $60 + 1; //@line 2323
 HEAP32[$4 >> 2] = ($60 | 0) > 32767 ? 1 : $60; //@line 2326
 $63 = HEAP32[1961] | 0; //@line 2327
 if (!$63) {
  $$1 = 0; //@line 2330
  $113 = 0; //@line 2330
 } else {
  $66 = HEAP32[$63 + 56 >> 2] | 0; //@line 2333
  if (!$66) {
   $$1 = 1; //@line 2336
   $113 = 0; //@line 2336
  } else {
   if ((HEAP32[$63 + 8 >> 2] | 0) == ($2 | 0)) {
    HEAP32[$48 >> 2] = $66; //@line 2342
    HEAP32[$49 >> 2] = HEAP32[$63 + 60 >> 2]; //@line 2345
    $$1 = 1; //@line 2346
    $113 = $66; //@line 2346
   } else {
    $$1 = 1; //@line 2348
    $113 = 0; //@line 2348
   }
  }
 }
 $73 = HEAP32[1962] | 0; //@line 2352
 if (!$73) {
  $$1$1 = $$1; //@line 2355
  $126 = $113; //@line 2355
 } else {
  if (!$113) {
   $115 = HEAP32[$73 + 56 >> 2] | 0; //@line 2360
   if (!$115) {
    $167 = 0; //@line 2363
   } else {
    if ((HEAP32[$73 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$48 >> 2] = $115; //@line 2369
     HEAP32[$49 >> 2] = HEAP32[$73 + 60 >> 2]; //@line 2372
     $167 = $115; //@line 2373
    } else {
     $167 = 0; //@line 2375
    }
   }
  } else {
   $167 = $113; //@line 2379
  }
  $$1$1 = $$1 + 1 | 0; //@line 2382
  $126 = $167; //@line 2382
 }
 $123 = HEAP32[1963] | 0; //@line 2384
 if (!$123) {
  $$1$2 = $$1$1; //@line 2387
  $139 = $126; //@line 2387
 } else {
  if (!$126) {
   $128 = HEAP32[$123 + 56 >> 2] | 0; //@line 2392
   if (!$128) {
    $168 = 0; //@line 2395
   } else {
    if ((HEAP32[$123 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$48 >> 2] = $128; //@line 2401
     HEAP32[$49 >> 2] = HEAP32[$123 + 60 >> 2]; //@line 2404
     $168 = $128; //@line 2405
    } else {
     $168 = 0; //@line 2407
    }
   }
  } else {
   $168 = $126; //@line 2411
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 2414
  $139 = $168; //@line 2414
 }
 $136 = HEAP32[1964] | 0; //@line 2416
 if (!$136) {
  $$1$3 = $$1$2; //@line 2419
  $152 = $139; //@line 2419
 } else {
  if (!$139) {
   $141 = HEAP32[$136 + 56 >> 2] | 0; //@line 2424
   if (!$141) {
    $169 = 0; //@line 2427
   } else {
    if ((HEAP32[$136 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$48 >> 2] = $141; //@line 2433
     HEAP32[$49 >> 2] = HEAP32[$136 + 60 >> 2]; //@line 2436
     $169 = $141; //@line 2437
    } else {
     $169 = 0; //@line 2439
    }
   }
  } else {
   $169 = $139; //@line 2443
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 2446
  $152 = $169; //@line 2446
 }
 $149 = HEAP32[1965] | 0; //@line 2448
 if (!$149) {
  $$1$4 = $$1$3; //@line 2451
 } else {
  if (!$152) {
   $154 = HEAP32[$149 + 56 >> 2] | 0; //@line 2456
   if ($154 | 0) {
    if ((HEAP32[$149 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$48 >> 2] = $154; //@line 2463
     HEAP32[$49 >> 2] = HEAP32[$149 + 60 >> 2]; //@line 2466
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 2471
 }
 HEAP32[7844 + ($22 << 2) >> 2] = $4; //@line 2474
 HEAP32[$57 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 2477
 if (HEAP8[8724] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 2481
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 2482
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 2485
   $110 = $ReallocAsyncCtx13 + 4 | 0; //@line 2486
   HEAP32[$110 >> 2] = $4; //@line 2487
   $111 = $ReallocAsyncCtx13 + 8 | 0; //@line 2488
   HEAP32[$111 >> 2] = $20; //@line 2489
   sp = STACKTOP; //@line 2490
   return;
  }
  ___async_unwind = 0; //@line 2493
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 2494
  $110 = $ReallocAsyncCtx13 + 4 | 0; //@line 2495
  HEAP32[$110 >> 2] = $4; //@line 2496
  $111 = $ReallocAsyncCtx13 + 8 | 0; //@line 2497
  HEAP32[$111 >> 2] = $20; //@line 2498
  sp = STACKTOP; //@line 2499
  return;
 }
 $75 = $4 + 44 | 0; //@line 2502
 $76 = HEAP32[$75 >> 2] | 0; //@line 2503
 if (!$76) {
  $90 = $16 + 12 | 0; //@line 2506
  HEAP32[$90 >> 2] = 0; //@line 2507
  $92 = $18 + 4 | 0; //@line 2509
  HEAP32[$92 >> 2] = 0; //@line 2511
  HEAP32[$92 + 4 >> 2] = 0; //@line 2514
  HEAP32[$18 >> 2] = 3; //@line 2515
  $96 = $18 + 12 | 0; //@line 2516
  HEAP32[$96 >> 2] = 752; //@line 2517
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 2518
  $97 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 100, $18) | 0; //@line 2519
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 2522
   $98 = $ReallocAsyncCtx14 + 4 | 0; //@line 2523
   HEAP32[$98 >> 2] = $96; //@line 2524
   $99 = $ReallocAsyncCtx14 + 8 | 0; //@line 2525
   HEAP32[$99 >> 2] = $16; //@line 2526
   $100 = $ReallocAsyncCtx14 + 12 | 0; //@line 2527
   HEAP32[$100 >> 2] = $90; //@line 2528
   $101 = $ReallocAsyncCtx14 + 16 | 0; //@line 2529
   HEAP32[$101 >> 2] = $18; //@line 2530
   $102 = $ReallocAsyncCtx14 + 20 | 0; //@line 2531
   HEAP32[$102 >> 2] = $20; //@line 2532
   $103 = $ReallocAsyncCtx14 + 24 | 0; //@line 2533
   HEAP32[$103 >> 2] = $4; //@line 2534
   $104 = $ReallocAsyncCtx14 + 28 | 0; //@line 2535
   HEAP32[$104 >> 2] = $26; //@line 2536
   $105 = $ReallocAsyncCtx14 + 32 | 0; //@line 2537
   HEAP32[$105 >> 2] = $4; //@line 2538
   $106 = $ReallocAsyncCtx14 + 36 | 0; //@line 2539
   HEAP32[$106 >> 2] = $24; //@line 2540
   $107 = $ReallocAsyncCtx14 + 40 | 0; //@line 2541
   HEAP32[$107 >> 2] = $75; //@line 2542
   $108 = $ReallocAsyncCtx14 + 44 | 0; //@line 2543
   HEAP32[$108 >> 2] = $14; //@line 2544
   sp = STACKTOP; //@line 2545
   return;
  }
  HEAP32[___async_retval >> 2] = $97; //@line 2549
  ___async_unwind = 0; //@line 2550
  HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 2551
  $98 = $ReallocAsyncCtx14 + 4 | 0; //@line 2552
  HEAP32[$98 >> 2] = $96; //@line 2553
  $99 = $ReallocAsyncCtx14 + 8 | 0; //@line 2554
  HEAP32[$99 >> 2] = $16; //@line 2555
  $100 = $ReallocAsyncCtx14 + 12 | 0; //@line 2556
  HEAP32[$100 >> 2] = $90; //@line 2557
  $101 = $ReallocAsyncCtx14 + 16 | 0; //@line 2558
  HEAP32[$101 >> 2] = $18; //@line 2559
  $102 = $ReallocAsyncCtx14 + 20 | 0; //@line 2560
  HEAP32[$102 >> 2] = $20; //@line 2561
  $103 = $ReallocAsyncCtx14 + 24 | 0; //@line 2562
  HEAP32[$103 >> 2] = $4; //@line 2563
  $104 = $ReallocAsyncCtx14 + 28 | 0; //@line 2564
  HEAP32[$104 >> 2] = $26; //@line 2565
  $105 = $ReallocAsyncCtx14 + 32 | 0; //@line 2566
  HEAP32[$105 >> 2] = $4; //@line 2567
  $106 = $ReallocAsyncCtx14 + 36 | 0; //@line 2568
  HEAP32[$106 >> 2] = $24; //@line 2569
  $107 = $ReallocAsyncCtx14 + 40 | 0; //@line 2570
  HEAP32[$107 >> 2] = $75; //@line 2571
  $108 = $ReallocAsyncCtx14 + 44 | 0; //@line 2572
  HEAP32[$108 >> 2] = $14; //@line 2573
  sp = STACKTOP; //@line 2574
  return;
 } else {
  $79 = HEAP32[$76 + 4 >> 2] | 0; //@line 2578
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 2579
  FUNCTION_TABLE_vii[$79 & 7]($16, $14); //@line 2580
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 2583
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 2584
   HEAP32[$80 >> 2] = $16; //@line 2585
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 2586
   HEAP32[$81 >> 2] = $18; //@line 2587
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 2588
   HEAP32[$82 >> 2] = $20; //@line 2589
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 2590
   HEAP32[$83 >> 2] = $4; //@line 2591
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 2592
   HEAP32[$84 >> 2] = $4; //@line 2593
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 2594
   HEAP32[$85 >> 2] = $75; //@line 2595
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 2596
   HEAP32[$86 >> 2] = $24; //@line 2597
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 2598
   HEAP32[$87 >> 2] = $75; //@line 2599
   $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 2600
   HEAP32[$88 >> 2] = $14; //@line 2601
   $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 2602
   HEAP32[$89 >> 2] = $26; //@line 2603
   sp = STACKTOP; //@line 2604
   return;
  }
  ___async_unwind = 0; //@line 2607
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 2608
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 2609
  HEAP32[$80 >> 2] = $16; //@line 2610
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 2611
  HEAP32[$81 >> 2] = $18; //@line 2612
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 2613
  HEAP32[$82 >> 2] = $20; //@line 2614
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 2615
  HEAP32[$83 >> 2] = $4; //@line 2616
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 2617
  HEAP32[$84 >> 2] = $4; //@line 2618
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 2619
  HEAP32[$85 >> 2] = $75; //@line 2620
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 2621
  HEAP32[$86 >> 2] = $24; //@line 2622
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 2623
  HEAP32[$87 >> 2] = $75; //@line 2624
  $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 2625
  HEAP32[$88 >> 2] = $14; //@line 2626
  $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 2627
  HEAP32[$89 >> 2] = $26; //@line 2628
  sp = STACKTOP; //@line 2629
  return;
 }
}
function _main() {
 var $105 = 0, $106 = 0, $107 = 0, $119 = 0, $121 = 0, $13 = 0, $27 = 0, $42 = 0, $51 = 0, $52 = 0, $62 = 0, $81 = 0, $91 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx54 = 0, $AsyncCtx58 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 13304
 STACKTOP = STACKTOP + 128 | 0; //@line 13305
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 13305
 $vararg_buffer17 = sp + 112 | 0; //@line 13306
 $vararg_buffer12 = sp + 96 | 0; //@line 13307
 $vararg_buffer7 = sp + 80 | 0; //@line 13308
 $vararg_buffer4 = sp + 16 | 0; //@line 13309
 $vararg_buffer1 = sp + 8 | 0; //@line 13310
 $vararg_buffer = sp; //@line 13311
 $AsyncCtx29 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13312
 _puts(4108) | 0; //@line 13313
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 306; //@line 13316
  HEAP32[$AsyncCtx29 + 4 >> 2] = $vararg_buffer; //@line 13318
  HEAP32[$AsyncCtx29 + 8 >> 2] = $vararg_buffer; //@line 13320
  HEAP32[$AsyncCtx29 + 12 >> 2] = $vararg_buffer1; //@line 13322
  HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer1; //@line 13324
  HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer4; //@line 13326
  HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer4; //@line 13328
  HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer4; //@line 13330
  HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer7; //@line 13332
  HEAP32[$AsyncCtx29 + 36 >> 2] = $vararg_buffer7; //@line 13334
  HEAP32[$AsyncCtx29 + 40 >> 2] = $vararg_buffer12; //@line 13336
  HEAP32[$AsyncCtx29 + 44 >> 2] = $vararg_buffer12; //@line 13338
  HEAP32[$AsyncCtx29 + 48 >> 2] = $vararg_buffer17; //@line 13340
  HEAP32[$AsyncCtx29 + 52 >> 2] = $vararg_buffer17; //@line 13342
  sp = STACKTOP; //@line 13343
  STACKTOP = sp; //@line 13344
  return 0; //@line 13344
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 13346
 $AsyncCtx58 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13347
 $13 = __ZN17EthernetInterface14get_ip_addressEv(788) | 0; //@line 13348
 if (___async) {
  HEAP32[$AsyncCtx58 >> 2] = 307; //@line 13351
  HEAP32[$AsyncCtx58 + 4 >> 2] = $vararg_buffer; //@line 13353
  HEAP32[$AsyncCtx58 + 8 >> 2] = $vararg_buffer; //@line 13355
  HEAP32[$AsyncCtx58 + 12 >> 2] = $vararg_buffer1; //@line 13357
  HEAP32[$AsyncCtx58 + 16 >> 2] = $vararg_buffer1; //@line 13359
  HEAP32[$AsyncCtx58 + 20 >> 2] = $vararg_buffer4; //@line 13361
  HEAP32[$AsyncCtx58 + 24 >> 2] = $vararg_buffer4; //@line 13363
  HEAP32[$AsyncCtx58 + 28 >> 2] = $vararg_buffer4; //@line 13365
  HEAP32[$AsyncCtx58 + 32 >> 2] = $vararg_buffer12; //@line 13367
  HEAP32[$AsyncCtx58 + 36 >> 2] = $vararg_buffer12; //@line 13369
  HEAP32[$AsyncCtx58 + 40 >> 2] = $vararg_buffer17; //@line 13371
  HEAP32[$AsyncCtx58 + 44 >> 2] = $vararg_buffer17; //@line 13373
  HEAP32[$AsyncCtx58 + 48 >> 2] = $vararg_buffer7; //@line 13375
  HEAP32[$AsyncCtx58 + 52 >> 2] = $vararg_buffer7; //@line 13377
  sp = STACKTOP; //@line 13378
  STACKTOP = sp; //@line 13379
  return 0; //@line 13379
 }
 _emscripten_free_async_context($AsyncCtx58 | 0); //@line 13381
 $AsyncCtx54 = _emscripten_alloc_async_context(60, sp) | 0; //@line 13382
 $27 = __ZN17EthernetInterface15get_mac_addressEv(788) | 0; //@line 13383
 if (___async) {
  HEAP32[$AsyncCtx54 >> 2] = 308; //@line 13386
  HEAP32[$AsyncCtx54 + 4 >> 2] = $13; //@line 13388
  HEAP32[$AsyncCtx54 + 8 >> 2] = $vararg_buffer; //@line 13390
  HEAP32[$AsyncCtx54 + 12 >> 2] = $vararg_buffer; //@line 13392
  HEAP32[$AsyncCtx54 + 16 >> 2] = $vararg_buffer1; //@line 13394
  HEAP32[$AsyncCtx54 + 20 >> 2] = $vararg_buffer1; //@line 13396
  HEAP32[$AsyncCtx54 + 24 >> 2] = $vararg_buffer4; //@line 13398
  HEAP32[$AsyncCtx54 + 28 >> 2] = $vararg_buffer4; //@line 13400
  HEAP32[$AsyncCtx54 + 32 >> 2] = $vararg_buffer4; //@line 13402
  HEAP32[$AsyncCtx54 + 36 >> 2] = $vararg_buffer12; //@line 13404
  HEAP32[$AsyncCtx54 + 40 >> 2] = $vararg_buffer12; //@line 13406
  HEAP32[$AsyncCtx54 + 44 >> 2] = $vararg_buffer17; //@line 13408
  HEAP32[$AsyncCtx54 + 48 >> 2] = $vararg_buffer17; //@line 13410
  HEAP32[$AsyncCtx54 + 52 >> 2] = $vararg_buffer7; //@line 13412
  HEAP32[$AsyncCtx54 + 56 >> 2] = $vararg_buffer7; //@line 13414
  sp = STACKTOP; //@line 13415
  STACKTOP = sp; //@line 13416
  return 0; //@line 13416
 }
 _emscripten_free_async_context($AsyncCtx54 | 0); //@line 13418
 $42 = __ZN17EthernetInterface11get_gatewayEv(788) | 0; //@line 13419
 HEAP32[$vararg_buffer >> 2] = $13 | 0 ? $13 : 4132; //@line 13422
 _printf(4137, $vararg_buffer) | 0; //@line 13423
 HEAP32[$vararg_buffer1 >> 2] = $27 | 0 ? $27 : 4132; //@line 13426
 _printf(4153, $vararg_buffer1) | 0; //@line 13427
 HEAP32[$vararg_buffer4 >> 2] = $42 | 0 ? $42 : 4132; //@line 13430
 _printf(4170, $vararg_buffer4) | 0; //@line 13431
 __ZN9TCPSocketC2Ev($vararg_buffer4); //@line 13432
 $51 = HEAP32[(HEAP32[197] | 0) + 88 >> 2] | 0; //@line 13435
 $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 13436
 $52 = FUNCTION_TABLE_ii[$51 & 31](788) | 0; //@line 13437
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 309; //@line 13440
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer4; //@line 13442
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer4; //@line 13444
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer7; //@line 13446
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer7; //@line 13448
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer4; //@line 13450
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer12; //@line 13452
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer12; //@line 13454
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer17; //@line 13456
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer17; //@line 13458
  sp = STACKTOP; //@line 13459
  STACKTOP = sp; //@line 13460
  return 0; //@line 13460
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13462
 $62 = __Z18nsapi_create_stackP12NetworkStack($52) | 0; //@line 13463
 $AsyncCtx51 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13464
 __ZN6Socket4openEP12NetworkStack($vararg_buffer4, $62) | 0; //@line 13465
 if (___async) {
  HEAP32[$AsyncCtx51 >> 2] = 310; //@line 13468
  HEAP32[$AsyncCtx51 + 4 >> 2] = $vararg_buffer4; //@line 13470
  HEAP32[$AsyncCtx51 + 8 >> 2] = $vararg_buffer7; //@line 13472
  HEAP32[$AsyncCtx51 + 12 >> 2] = $vararg_buffer7; //@line 13474
  HEAP32[$AsyncCtx51 + 16 >> 2] = $vararg_buffer12; //@line 13476
  HEAP32[$AsyncCtx51 + 20 >> 2] = $vararg_buffer12; //@line 13478
  HEAP32[$AsyncCtx51 + 24 >> 2] = $vararg_buffer17; //@line 13480
  HEAP32[$AsyncCtx51 + 28 >> 2] = $vararg_buffer17; //@line 13482
  HEAP32[$AsyncCtx51 + 32 >> 2] = $vararg_buffer4; //@line 13484
  HEAP32[$AsyncCtx51 + 36 >> 2] = $vararg_buffer4; //@line 13486
  sp = STACKTOP; //@line 13487
  STACKTOP = sp; //@line 13488
  return 0; //@line 13488
 }
 _emscripten_free_async_context($AsyncCtx51 | 0); //@line 13490
 $AsyncCtx41 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13491
 __ZN9TCPSocket7connectEPKct($vararg_buffer4, 4183, 80) | 0; //@line 13492
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 311; //@line 13495
  HEAP32[$AsyncCtx41 + 4 >> 2] = $vararg_buffer4; //@line 13497
  HEAP32[$AsyncCtx41 + 8 >> 2] = $vararg_buffer7; //@line 13499
  HEAP32[$AsyncCtx41 + 12 >> 2] = $vararg_buffer7; //@line 13501
  HEAP32[$AsyncCtx41 + 16 >> 2] = $vararg_buffer12; //@line 13503
  HEAP32[$AsyncCtx41 + 20 >> 2] = $vararg_buffer12; //@line 13505
  HEAP32[$AsyncCtx41 + 24 >> 2] = $vararg_buffer17; //@line 13507
  HEAP32[$AsyncCtx41 + 28 >> 2] = $vararg_buffer17; //@line 13509
  HEAP32[$AsyncCtx41 + 32 >> 2] = $vararg_buffer4; //@line 13511
  HEAP32[$AsyncCtx41 + 36 >> 2] = $vararg_buffer4; //@line 13513
  sp = STACKTOP; //@line 13514
  STACKTOP = sp; //@line 13515
  return 0; //@line 13515
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 13517
 $AsyncCtx22 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13518
 $81 = __Znaj(256) | 0; //@line 13519
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 312; //@line 13522
  HEAP32[$AsyncCtx22 + 4 >> 2] = $vararg_buffer4; //@line 13524
  HEAP32[$AsyncCtx22 + 8 >> 2] = $vararg_buffer7; //@line 13526
  HEAP32[$AsyncCtx22 + 12 >> 2] = $vararg_buffer7; //@line 13528
  HEAP32[$AsyncCtx22 + 16 >> 2] = $vararg_buffer12; //@line 13530
  HEAP32[$AsyncCtx22 + 20 >> 2] = $vararg_buffer12; //@line 13532
  HEAP32[$AsyncCtx22 + 24 >> 2] = $vararg_buffer17; //@line 13534
  HEAP32[$AsyncCtx22 + 28 >> 2] = $vararg_buffer17; //@line 13536
  HEAP32[$AsyncCtx22 + 32 >> 2] = $vararg_buffer4; //@line 13538
  HEAP32[$AsyncCtx22 + 36 >> 2] = $vararg_buffer4; //@line 13540
  sp = STACKTOP; //@line 13541
  STACKTOP = sp; //@line 13542
  return 0; //@line 13542
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 13544
 dest = $81; //@line 13545
 src = 4197; //@line 13545
 stop = dest + 40 | 0; //@line 13545
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 13545
  dest = dest + 1 | 0; //@line 13545
  src = src + 1 | 0; //@line 13545
 } while ((dest | 0) < (stop | 0));
 $91 = _strlen($81) | 0; //@line 13546
 $AsyncCtx37 = _emscripten_alloc_async_context(44, sp) | 0; //@line 13547
 $92 = __ZN9TCPSocket4sendEPKvj($vararg_buffer4, $81, $91) | 0; //@line 13548
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 313; //@line 13551
  HEAP32[$AsyncCtx37 + 4 >> 2] = $81; //@line 13553
  HEAP32[$AsyncCtx37 + 8 >> 2] = $vararg_buffer7; //@line 13555
  HEAP32[$AsyncCtx37 + 12 >> 2] = $vararg_buffer7; //@line 13557
  HEAP32[$AsyncCtx37 + 16 >> 2] = $vararg_buffer4; //@line 13559
  HEAP32[$AsyncCtx37 + 20 >> 2] = $vararg_buffer12; //@line 13561
  HEAP32[$AsyncCtx37 + 24 >> 2] = $vararg_buffer12; //@line 13563
  HEAP32[$AsyncCtx37 + 28 >> 2] = $vararg_buffer17; //@line 13565
  HEAP32[$AsyncCtx37 + 32 >> 2] = $vararg_buffer17; //@line 13567
  HEAP32[$AsyncCtx37 + 36 >> 2] = $vararg_buffer4; //@line 13569
  HEAP32[$AsyncCtx37 + 40 >> 2] = $vararg_buffer4; //@line 13571
  sp = STACKTOP; //@line 13572
  STACKTOP = sp; //@line 13573
  return 0; //@line 13573
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 13575
 $105 = $81; //@line 13578
 $106 = (_strstr($81, 4237) | 0) - $105 | 0; //@line 13579
 HEAP32[$vararg_buffer7 >> 2] = $92; //@line 13580
 HEAP32[$vararg_buffer7 + 4 >> 2] = $106; //@line 13582
 HEAP32[$vararg_buffer7 + 8 >> 2] = $81; //@line 13584
 _printf(4240, $vararg_buffer7) | 0; //@line 13585
 $AsyncCtx33 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13586
 $107 = __ZN9TCPSocket4recvEPvj($vararg_buffer4, $81, 256) | 0; //@line 13587
 if (___async) {
  HEAP32[$AsyncCtx33 >> 2] = 314; //@line 13590
  HEAP32[$AsyncCtx33 + 4 >> 2] = $81; //@line 13592
  HEAP32[$AsyncCtx33 + 8 >> 2] = $105; //@line 13594
  HEAP32[$AsyncCtx33 + 12 >> 2] = $vararg_buffer12; //@line 13596
  HEAP32[$AsyncCtx33 + 16 >> 2] = $vararg_buffer12; //@line 13598
  HEAP32[$AsyncCtx33 + 20 >> 2] = $vararg_buffer17; //@line 13600
  HEAP32[$AsyncCtx33 + 24 >> 2] = $vararg_buffer17; //@line 13602
  HEAP32[$AsyncCtx33 + 28 >> 2] = $vararg_buffer4; //@line 13604
  HEAP32[$AsyncCtx33 + 32 >> 2] = $vararg_buffer4; //@line 13606
  HEAP32[$AsyncCtx33 + 36 >> 2] = $vararg_buffer4; //@line 13608
  sp = STACKTOP; //@line 13609
  STACKTOP = sp; //@line 13610
  return 0; //@line 13610
 }
 _emscripten_free_async_context($AsyncCtx33 | 0); //@line 13612
 $119 = (_strstr($81, 4237) | 0) - $105 | 0; //@line 13615
 HEAP32[$vararg_buffer12 >> 2] = $107; //@line 13616
 HEAP32[$vararg_buffer12 + 4 >> 2] = $119; //@line 13618
 HEAP32[$vararg_buffer12 + 8 >> 2] = $81; //@line 13620
 _printf(4256, $vararg_buffer12) | 0; //@line 13621
 $121 = (_strstr($81, 4272) | 0) + 4 | 0; //@line 13623
 HEAP32[$vararg_buffer17 >> 2] = $107 + $105 - $121; //@line 13627
 HEAP32[$vararg_buffer17 + 4 >> 2] = $121; //@line 13629
 _printf(4277, $vararg_buffer17) | 0; //@line 13630
 $AsyncCtx47 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13631
 __ZN6Socket5closeEv($vararg_buffer4) | 0; //@line 13632
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 315; //@line 13635
  HEAP32[$AsyncCtx47 + 4 >> 2] = $81; //@line 13637
  HEAP32[$AsyncCtx47 + 8 >> 2] = $vararg_buffer4; //@line 13639
  HEAP32[$AsyncCtx47 + 12 >> 2] = $vararg_buffer4; //@line 13641
  sp = STACKTOP; //@line 13642
  STACKTOP = sp; //@line 13643
  return 0; //@line 13643
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 13645
 __ZdaPv($81); //@line 13646
 $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13647
 _puts(4304) | 0; //@line 13648
 if (___async) {
  HEAP32[$AsyncCtx25 >> 2] = 316; //@line 13651
  HEAP32[$AsyncCtx25 + 4 >> 2] = $vararg_buffer4; //@line 13653
  HEAP32[$AsyncCtx25 + 8 >> 2] = $vararg_buffer4; //@line 13655
  sp = STACKTOP; //@line 13656
  STACKTOP = sp; //@line 13657
  return 0; //@line 13657
 }
 _emscripten_free_async_context($AsyncCtx25 | 0); //@line 13659
 $AsyncCtx44 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13660
 __ZN9TCPSocketD2Ev($vararg_buffer4); //@line 13661
 if (___async) {
  HEAP32[$AsyncCtx44 >> 2] = 317; //@line 13664
  HEAP32[$AsyncCtx44 + 4 >> 2] = $vararg_buffer4; //@line 13666
  sp = STACKTOP; //@line 13667
  STACKTOP = sp; //@line 13668
  return 0; //@line 13668
 } else {
  _emscripten_free_async_context($AsyncCtx44 | 0); //@line 13670
  STACKTOP = sp; //@line 13671
  return 0; //@line 13671
 }
 return 0; //@line 13673
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa88 = 0, $$sroa_idx5$i$i = 0, $1 = 0, $11 = 0, $110 = 0, $111 = 0, $125 = 0, $128 = 0, $13 = 0, $142 = 0, $145 = 0, $15 = 0, $163 = 0, $169 = 0, $175 = 0, $184 = 0, $189 = 0, $194 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $43 = 0, $59 = 0, $62 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $89 = 0, $90 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11458
 STACKTOP = STACKTOP + 32 | 0; //@line 11459
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11459
 $1 = sp + 16 | 0; //@line 11460
 $2 = sp; //@line 11461
 $3 = HEAP32[1961] | 0; //@line 11462
 if (!$3) {
  label = 3; //@line 11465
 } else {
  if ((HEAP32[$3 + 8 >> 2] | 0) == ($0 | 0)) {
   $$lcssa88 = $3; //@line 11471
  } else {
   label = 3; //@line 11473
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1962] | 0; //@line 11478
   if ($8 | 0) {
    if ((HEAP32[$8 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $8; //@line 11485
     break;
    }
   }
   $184 = HEAP32[1963] | 0; //@line 11489
   if ($184 | 0) {
    if ((HEAP32[$184 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $184; //@line 11496
     break;
    }
   }
   $189 = HEAP32[1964] | 0; //@line 11500
   if ($189 | 0) {
    if ((HEAP32[$189 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $189; //@line 11507
     break;
    }
   }
   $194 = HEAP32[1965] | 0; //@line 11511
   if (!$194) {
    STACKTOP = sp; //@line 11514
    return;
   }
   if ((HEAP32[$194 + 8 >> 2] | 0) == ($0 | 0)) {
    $$lcssa88 = $194; //@line 11520
   } else {
    STACKTOP = sp; //@line 11522
    return;
   }
  }
 } while (0);
 $11 = HEAP32[$$lcssa88 + 56 >> 2] | 0; //@line 11527
 if (!$11) {
  STACKTOP = sp; //@line 11530
  return;
 }
 $13 = _malloc(512) | 0; //@line 11532
 if (!$13) {
  STACKTOP = sp; //@line 11535
  return;
 }
 $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11537
 $15 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 11538
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 255; //@line 11541
  HEAP32[$AsyncCtx20 + 4 >> 2] = $13; //@line 11543
  HEAP32[$AsyncCtx20 + 8 >> 2] = $1; //@line 11545
  HEAP32[$AsyncCtx20 + 12 >> 2] = $2; //@line 11547
  HEAP32[$AsyncCtx20 + 16 >> 2] = $11; //@line 11549
  sp = STACKTOP; //@line 11550
  STACKTOP = sp; //@line 11551
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 11553
 L28 : do {
  if (($15 | 0) >= 12) {
   $21 = $13 + 1 | 0; //@line 11557
   $22 = $1 + 12 | 0; //@line 11558
   $23 = $2 + 8 | 0; //@line 11559
   $$sroa_idx5$i$i = $2 + 4 | 0; //@line 11560
   $24 = $2 + 12 | 0; //@line 11561
   L30 : while (1) {
    $30 = (HEAPU8[$13 >> 0] | 0) << 8 | (HEAPU8[$21 >> 0] | 0); //@line 11568
    $31 = $30 & 65535; //@line 11569
    $32 = HEAP32[1961] | 0; //@line 11570
    if (!$32) {
     label = 12; //@line 11573
    } else {
     if (($30 | 0) == (HEAPU16[$32 + 80 >> 1] | 0 | 0)) {
      $$lcssa = $32; //@line 11580
      label = 13; //@line 11581
     } else {
      label = 12; //@line 11583
     }
    }
    do {
     if ((label | 0) == 12) {
      label = 0; //@line 11588
      $38 = HEAP32[1962] | 0; //@line 11589
      if ($38 | 0) {
       if (($30 | 0) == (HEAPU16[$38 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $38; //@line 11597
        label = 13; //@line 11598
        break;
       }
      }
      $163 = HEAP32[1963] | 0; //@line 11602
      if ($163 | 0) {
       if (($30 | 0) == (HEAPU16[$163 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $163; //@line 11610
        label = 13; //@line 11611
        break;
       }
      }
      $169 = HEAP32[1964] | 0; //@line 11615
      if ($169 | 0) {
       if (($30 | 0) == (HEAPU16[$169 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $169; //@line 11623
        label = 13; //@line 11624
        break;
       }
      }
      $175 = HEAP32[1965] | 0; //@line 11628
      if ($175 | 0) {
       if (($30 | 0) == (HEAPU16[$175 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $175; //@line 11636
        label = 13; //@line 11637
       }
      }
     }
    } while (0);
    do {
     if ((label | 0) == 13) {
      label = 0; //@line 11644
      if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
       $59 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 11650
       $$ = $59 >>> 0 > 1 ? $59 : 1; //@line 11652
       $AsyncCtx11 = _emscripten_alloc_async_context(68, sp) | 0; //@line 11656
       $62 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 9765) | 0; //@line 11657
       if (___async) {
        label = 18; //@line 11660
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11663
       $79 = $$lcssa + 64 | 0; //@line 11664
       HEAP32[$79 >> 2] = $62; //@line 11665
       $81 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($13, $31, $$lcssa + 68 | 0, $62, $$) | 0; //@line 11667
       if (($81 | 0) < 0) {
        $83 = HEAP32[$79 >> 2] | 0; //@line 11670
        if ($83 | 0) {
         __ZdaPv($83); //@line 11673
        }
        HEAP32[$79 >> 2] = 0; //@line 11675
        break;
       }
       HEAP8[$$lcssa + 86 >> 0] = $81; //@line 11680
       HEAP32[$$lcssa + 4 >> 2] = -3009; //@line 11682
       HEAP32[$$lcssa + 76 >> 2] = 0; //@line 11684
       $89 = $$lcssa + 44 | 0; //@line 11685
       $90 = HEAP32[$89 >> 2] | 0; //@line 11686
       if (!$90) {
        $110 = 0; //@line 11689
       } else {
        $94 = HEAP32[$90 + 4 >> 2] | 0; //@line 11693
        $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 11694
        FUNCTION_TABLE_vii[$94 & 7]($1, $$lcssa + 32 | 0); //@line 11695
        if (___async) {
         label = 25; //@line 11698
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 11701
        $110 = HEAP32[$89 >> 2] | 0; //@line 11703
       }
       HEAP32[$22 >> 2] = $110; //@line 11705
       $111 = HEAP32[$$lcssa >> 2] | 0; //@line 11706
       HEAP32[$23 >> 2] = 0; //@line 11707
       HEAP32[$2 >> 2] = 188; //@line 11708
       HEAP32[$$sroa_idx5$i$i >> 2] = $111; //@line 11709
       HEAP32[$24 >> 2] = 764; //@line 11710
       $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11711
       __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 11712
       if (___async) {
        label = 28; //@line 11715
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx14 | 0); //@line 11718
       $125 = HEAP32[$24 >> 2] | 0; //@line 11719
       if ($125 | 0) {
        $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 11723
        $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11724
        FUNCTION_TABLE_vi[$128 & 511]($2); //@line 11725
        if (___async) {
         label = 31; //@line 11728
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11731
       }
       $142 = HEAP32[$22 >> 2] | 0; //@line 11733
       if ($142 | 0) {
        $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 11737
        $AsyncCtx7 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11738
        FUNCTION_TABLE_vi[$145 & 511]($1); //@line 11739
        if (___async) {
         label = 35; //@line 11742
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11745
       }
      }
     }
    } while (0);
    $AsyncCtx17 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11750
    $43 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 11751
    if (___async) {
     label = 15; //@line 11754
     break;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11757
    if (($43 | 0) < 12) {
     break L28;
    }
   }
   if ((label | 0) == 15) {
    HEAP32[$AsyncCtx17 >> 2] = 256; //@line 11764
    HEAP32[$AsyncCtx17 + 4 >> 2] = $13; //@line 11766
    HEAP32[$AsyncCtx17 + 8 >> 2] = $1; //@line 11768
    HEAP32[$AsyncCtx17 + 12 >> 2] = $22; //@line 11770
    HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 11772
    HEAP32[$AsyncCtx17 + 20 >> 2] = $22; //@line 11774
    HEAP32[$AsyncCtx17 + 24 >> 2] = $23; //@line 11776
    HEAP32[$AsyncCtx17 + 28 >> 2] = $2; //@line 11778
    HEAP32[$AsyncCtx17 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11780
    HEAP32[$AsyncCtx17 + 36 >> 2] = $24; //@line 11782
    HEAP32[$AsyncCtx17 + 40 >> 2] = $1; //@line 11784
    HEAP32[$AsyncCtx17 + 44 >> 2] = $2; //@line 11786
    HEAP32[$AsyncCtx17 + 48 >> 2] = $11; //@line 11788
    HEAP32[$AsyncCtx17 + 52 >> 2] = $21; //@line 11790
    sp = STACKTOP; //@line 11791
    STACKTOP = sp; //@line 11792
    return;
   } else if ((label | 0) == 18) {
    HEAP32[$AsyncCtx11 >> 2] = 257; //@line 11795
    HEAP32[$AsyncCtx11 + 4 >> 2] = $13; //@line 11797
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 11799
    HEAP32[$AsyncCtx11 + 12 >> 2] = $22; //@line 11801
    HEAP32[$AsyncCtx11 + 16 >> 2] = $2; //@line 11803
    HEAP32[$AsyncCtx11 + 20 >> 2] = $22; //@line 11805
    HEAP32[$AsyncCtx11 + 24 >> 2] = $23; //@line 11807
    HEAP32[$AsyncCtx11 + 28 >> 2] = $2; //@line 11809
    HEAP32[$AsyncCtx11 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11811
    HEAP32[$AsyncCtx11 + 36 >> 2] = $24; //@line 11813
    HEAP32[$AsyncCtx11 + 40 >> 2] = $1; //@line 11815
    HEAP32[$AsyncCtx11 + 44 >> 2] = $2; //@line 11817
    HEAP32[$AsyncCtx11 + 48 >> 2] = $11; //@line 11819
    HEAP32[$AsyncCtx11 + 52 >> 2] = $21; //@line 11821
    HEAP32[$AsyncCtx11 + 56 >> 2] = $$lcssa; //@line 11823
    HEAP16[$AsyncCtx11 + 60 >> 1] = $31; //@line 11825
    HEAP32[$AsyncCtx11 + 64 >> 2] = $$; //@line 11827
    sp = STACKTOP; //@line 11828
    STACKTOP = sp; //@line 11829
    return;
   } else if ((label | 0) == 25) {
    HEAP32[$AsyncCtx >> 2] = 258; //@line 11832
    HEAP32[$AsyncCtx + 4 >> 2] = $13; //@line 11834
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 11836
    HEAP32[$AsyncCtx + 12 >> 2] = $22; //@line 11838
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 11840
    HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 11842
    HEAP32[$AsyncCtx + 24 >> 2] = $$lcssa; //@line 11844
    HEAP32[$AsyncCtx + 28 >> 2] = $23; //@line 11846
    HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 11848
    HEAP32[$AsyncCtx + 36 >> 2] = $$sroa_idx5$i$i; //@line 11850
    HEAP32[$AsyncCtx + 40 >> 2] = $24; //@line 11852
    HEAP32[$AsyncCtx + 44 >> 2] = $1; //@line 11854
    HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 11856
    HEAP32[$AsyncCtx + 52 >> 2] = $89; //@line 11858
    HEAP32[$AsyncCtx + 56 >> 2] = $11; //@line 11860
    HEAP32[$AsyncCtx + 60 >> 2] = $21; //@line 11862
    sp = STACKTOP; //@line 11863
    STACKTOP = sp; //@line 11864
    return;
   } else if ((label | 0) == 28) {
    HEAP32[$AsyncCtx14 >> 2] = 259; //@line 11867
    HEAP32[$AsyncCtx14 + 4 >> 2] = $13; //@line 11869
    HEAP32[$AsyncCtx14 + 8 >> 2] = $1; //@line 11871
    HEAP32[$AsyncCtx14 + 12 >> 2] = $22; //@line 11873
    HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 11875
    HEAP32[$AsyncCtx14 + 20 >> 2] = $22; //@line 11877
    HEAP32[$AsyncCtx14 + 24 >> 2] = $23; //@line 11879
    HEAP32[$AsyncCtx14 + 28 >> 2] = $2; //@line 11881
    HEAP32[$AsyncCtx14 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11883
    HEAP32[$AsyncCtx14 + 36 >> 2] = $24; //@line 11885
    HEAP32[$AsyncCtx14 + 40 >> 2] = $1; //@line 11887
    HEAP32[$AsyncCtx14 + 44 >> 2] = $2; //@line 11889
    HEAP32[$AsyncCtx14 + 48 >> 2] = $11; //@line 11891
    HEAP32[$AsyncCtx14 + 52 >> 2] = $21; //@line 11893
    sp = STACKTOP; //@line 11894
    STACKTOP = sp; //@line 11895
    return;
   } else if ((label | 0) == 31) {
    HEAP32[$AsyncCtx3 >> 2] = 260; //@line 11898
    HEAP32[$AsyncCtx3 + 4 >> 2] = $13; //@line 11900
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 11902
    HEAP32[$AsyncCtx3 + 12 >> 2] = $22; //@line 11904
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 11906
    HEAP32[$AsyncCtx3 + 20 >> 2] = $22; //@line 11908
    HEAP32[$AsyncCtx3 + 24 >> 2] = $23; //@line 11910
    HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 11912
    HEAP32[$AsyncCtx3 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11914
    HEAP32[$AsyncCtx3 + 36 >> 2] = $24; //@line 11916
    HEAP32[$AsyncCtx3 + 40 >> 2] = $1; //@line 11918
    HEAP32[$AsyncCtx3 + 44 >> 2] = $2; //@line 11920
    HEAP32[$AsyncCtx3 + 48 >> 2] = $11; //@line 11922
    HEAP32[$AsyncCtx3 + 52 >> 2] = $21; //@line 11924
    sp = STACKTOP; //@line 11925
    STACKTOP = sp; //@line 11926
    return;
   } else if ((label | 0) == 35) {
    HEAP32[$AsyncCtx7 >> 2] = 261; //@line 11929
    HEAP32[$AsyncCtx7 + 4 >> 2] = $13; //@line 11931
    HEAP32[$AsyncCtx7 + 8 >> 2] = $1; //@line 11933
    HEAP32[$AsyncCtx7 + 12 >> 2] = $22; //@line 11935
    HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 11937
    HEAP32[$AsyncCtx7 + 20 >> 2] = $22; //@line 11939
    HEAP32[$AsyncCtx7 + 24 >> 2] = $23; //@line 11941
    HEAP32[$AsyncCtx7 + 28 >> 2] = $2; //@line 11943
    HEAP32[$AsyncCtx7 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11945
    HEAP32[$AsyncCtx7 + 36 >> 2] = $24; //@line 11947
    HEAP32[$AsyncCtx7 + 40 >> 2] = $1; //@line 11949
    HEAP32[$AsyncCtx7 + 44 >> 2] = $2; //@line 11951
    HEAP32[$AsyncCtx7 + 48 >> 2] = $11; //@line 11953
    HEAP32[$AsyncCtx7 + 52 >> 2] = $21; //@line 11955
    sp = STACKTOP; //@line 11956
    STACKTOP = sp; //@line 11957
    return;
   }
  }
 } while (0);
 _free($13); //@line 11961
 STACKTOP = sp; //@line 11962
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_43($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy16 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $97 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 18324
 STACKTOP = STACKTOP + 48 | 0; //@line 18325
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 18325
 $$byval_copy16 = sp + 20 | 0; //@line 18326
 $$byval_copy = sp; //@line 18327
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18329
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18331
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18333
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18335
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18337
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18339
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18341
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18343
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18345
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18347
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18349
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18351
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18353
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  HEAP8[$12 >> 0] = (HEAP8[$12 >> 0] | 0) + 1 << 24 >> 24; //@line 18360
  $97 = HEAP8[$22 >> 0] | 0; //@line 18361
  if ($97 << 24 >> 24) {
   HEAP8[$22 >> 0] = $97 + -1 << 24 >> 24; //@line 18365
  }
  _free($2); //@line 18367
  HEAP32[$16 + 76 >> 2] = 5e3; //@line 18369
  STACKTOP = sp; //@line 18370
  return;
 }
 HEAP8[$8 >> 0] = (HEAP8[$8 >> 0] | 0) + 1 << 24 >> 24; //@line 18374
 HEAP32[$24 >> 2] = 0; //@line 18375
 HEAP32[$24 + 4 >> 2] = 0; //@line 18375
 HEAP32[$24 + 8 >> 2] = 0; //@line 18375
 HEAP32[$24 + 12 >> 2] = 0; //@line 18375
 HEAP32[$24 + 16 >> 2] = 0; //@line 18375
 HEAP32[$$byval_copy16 >> 2] = HEAP32[$26 >> 2]; //@line 18376
 HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$26 + 4 >> 2]; //@line 18376
 HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$26 + 8 >> 2]; //@line 18376
 HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$26 + 12 >> 2]; //@line 18376
 HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$26 + 16 >> 2]; //@line 18376
 __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy16, 0); //@line 18377
 do {
  if (HEAP8[$22 >> 0] | 0) {
   $28 = HEAP32[$10 >> 2] | 0; //@line 18382
   $29 = HEAP8[$8 >> 0] | 0; //@line 18383
   if (($29 & 255) > 9) {
    if (!(HEAP8[$12 >> 0] | 0)) {
     break;
    }
    HEAP8[$8 >> 0] = 0; //@line 18391
    HEAP8[$12 >> 0] = 0; //@line 18392
    $35 = 0; //@line 18393
   } else {
    if (($29 & 255) < 5) {
     $35 = $29; //@line 18397
    } else {
     $56 = 648 + ((($29 & 255) + -5 | 0) * 20 | 0) | 0; //@line 18401
     HEAP32[$$byval_copy >> 2] = HEAP32[$56 >> 2]; //@line 18402
     HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$56 + 4 >> 2]; //@line 18402
     HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$56 + 8 >> 2]; //@line 18402
     HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$56 + 12 >> 2]; //@line 18402
     HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$56 + 16 >> 2]; //@line 18402
     __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy); //@line 18403
     __ZN13SocketAddress8set_portEt($6, 53); //@line 18404
     $75 = HEAP32[$18 >> 2] | 0; //@line 18405
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 18406
     $76 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($75, $6, $2, $20) | 0; //@line 18407
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 254; //@line 18410
      $77 = $ReallocAsyncCtx12 + 4 | 0; //@line 18411
      HEAP32[$77 >> 2] = $2; //@line 18412
      $78 = $ReallocAsyncCtx12 + 8 | 0; //@line 18413
      HEAP32[$78 >> 2] = $4; //@line 18414
      $79 = $ReallocAsyncCtx12 + 12 | 0; //@line 18415
      HEAP32[$79 >> 2] = $6; //@line 18416
      $80 = $ReallocAsyncCtx12 + 16 | 0; //@line 18417
      HEAP32[$80 >> 2] = $8; //@line 18418
      $81 = $ReallocAsyncCtx12 + 20 | 0; //@line 18419
      HEAP32[$81 >> 2] = $10; //@line 18420
      $82 = $ReallocAsyncCtx12 + 24 | 0; //@line 18421
      HEAP32[$82 >> 2] = $12; //@line 18422
      $83 = $ReallocAsyncCtx12 + 28 | 0; //@line 18423
      HEAP32[$83 >> 2] = $14; //@line 18424
      $84 = $ReallocAsyncCtx12 + 32 | 0; //@line 18425
      HEAP32[$84 >> 2] = $16; //@line 18426
      $85 = $ReallocAsyncCtx12 + 36 | 0; //@line 18427
      HEAP32[$85 >> 2] = $18; //@line 18428
      $86 = $ReallocAsyncCtx12 + 40 | 0; //@line 18429
      HEAP32[$86 >> 2] = $20; //@line 18430
      $87 = $ReallocAsyncCtx12 + 44 | 0; //@line 18431
      HEAP32[$87 >> 2] = $22; //@line 18432
      $88 = $ReallocAsyncCtx12 + 48 | 0; //@line 18433
      HEAP32[$88 >> 2] = $24; //@line 18434
      $89 = $ReallocAsyncCtx12 + 52 | 0; //@line 18435
      HEAP32[$89 >> 2] = $26; //@line 18436
      sp = STACKTOP; //@line 18437
      STACKTOP = sp; //@line 18438
      return;
     }
     HEAP32[___async_retval >> 2] = $76; //@line 18441
     ___async_unwind = 0; //@line 18442
     HEAP32[$ReallocAsyncCtx12 >> 2] = 254; //@line 18443
     $77 = $ReallocAsyncCtx12 + 4 | 0; //@line 18444
     HEAP32[$77 >> 2] = $2; //@line 18445
     $78 = $ReallocAsyncCtx12 + 8 | 0; //@line 18446
     HEAP32[$78 >> 2] = $4; //@line 18447
     $79 = $ReallocAsyncCtx12 + 12 | 0; //@line 18448
     HEAP32[$79 >> 2] = $6; //@line 18449
     $80 = $ReallocAsyncCtx12 + 16 | 0; //@line 18450
     HEAP32[$80 >> 2] = $8; //@line 18451
     $81 = $ReallocAsyncCtx12 + 20 | 0; //@line 18452
     HEAP32[$81 >> 2] = $10; //@line 18453
     $82 = $ReallocAsyncCtx12 + 24 | 0; //@line 18454
     HEAP32[$82 >> 2] = $12; //@line 18455
     $83 = $ReallocAsyncCtx12 + 28 | 0; //@line 18456
     HEAP32[$83 >> 2] = $14; //@line 18457
     $84 = $ReallocAsyncCtx12 + 32 | 0; //@line 18458
     HEAP32[$84 >> 2] = $16; //@line 18459
     $85 = $ReallocAsyncCtx12 + 36 | 0; //@line 18460
     HEAP32[$85 >> 2] = $18; //@line 18461
     $86 = $ReallocAsyncCtx12 + 40 | 0; //@line 18462
     HEAP32[$86 >> 2] = $20; //@line 18463
     $87 = $ReallocAsyncCtx12 + 44 | 0; //@line 18464
     HEAP32[$87 >> 2] = $22; //@line 18465
     $88 = $ReallocAsyncCtx12 + 48 | 0; //@line 18466
     HEAP32[$88 >> 2] = $24; //@line 18467
     $89 = $ReallocAsyncCtx12 + 52 | 0; //@line 18468
     HEAP32[$89 >> 2] = $26; //@line 18469
     sp = STACKTOP; //@line 18470
     STACKTOP = sp; //@line 18471
     return;
    }
   }
   $38 = HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] | 0; //@line 18477
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 18478
   $39 = FUNCTION_TABLE_iiii[$38 & 31]($28, $35 & 255, $6) | 0; //@line 18479
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 248; //@line 18482
    $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 18483
    HEAP32[$40 >> 2] = $6; //@line 18484
    $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 18485
    HEAP32[$41 >> 2] = $8; //@line 18486
    $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 18487
    HEAP32[$42 >> 2] = $10; //@line 18488
    $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 18489
    HEAP32[$43 >> 2] = $12; //@line 18490
    $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 18491
    HEAP32[$44 >> 2] = $14; //@line 18492
    $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 18493
    HEAP32[$45 >> 2] = $16; //@line 18494
    $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 18495
    HEAP32[$46 >> 2] = $18; //@line 18496
    $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 18497
    HEAP32[$47 >> 2] = $2; //@line 18498
    $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 18499
    HEAP32[$48 >> 2] = $20; //@line 18500
    $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 18501
    HEAP32[$49 >> 2] = $4; //@line 18502
    $50 = $ReallocAsyncCtx4 + 44 | 0; //@line 18503
    HEAP32[$50 >> 2] = $22; //@line 18504
    $51 = $ReallocAsyncCtx4 + 48 | 0; //@line 18505
    HEAP32[$51 >> 2] = $24; //@line 18506
    $52 = $ReallocAsyncCtx4 + 52 | 0; //@line 18507
    HEAP32[$52 >> 2] = $26; //@line 18508
    sp = STACKTOP; //@line 18509
    STACKTOP = sp; //@line 18510
    return;
   }
   HEAP32[___async_retval >> 2] = $39; //@line 18513
   ___async_unwind = 0; //@line 18514
   HEAP32[$ReallocAsyncCtx4 >> 2] = 248; //@line 18515
   $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 18516
   HEAP32[$40 >> 2] = $6; //@line 18517
   $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 18518
   HEAP32[$41 >> 2] = $8; //@line 18519
   $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 18520
   HEAP32[$42 >> 2] = $10; //@line 18521
   $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 18522
   HEAP32[$43 >> 2] = $12; //@line 18523
   $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 18524
   HEAP32[$44 >> 2] = $14; //@line 18525
   $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 18526
   HEAP32[$45 >> 2] = $16; //@line 18527
   $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 18528
   HEAP32[$46 >> 2] = $18; //@line 18529
   $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 18530
   HEAP32[$47 >> 2] = $2; //@line 18531
   $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 18532
   HEAP32[$48 >> 2] = $20; //@line 18533
   $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 18534
   HEAP32[$49 >> 2] = $4; //@line 18535
   $50 = $ReallocAsyncCtx4 + 44 | 0; //@line 18536
   HEAP32[$50 >> 2] = $22; //@line 18537
   $51 = $ReallocAsyncCtx4 + 48 | 0; //@line 18538
   HEAP32[$51 >> 2] = $24; //@line 18539
   $52 = $ReallocAsyncCtx4 + 52 | 0; //@line 18540
   HEAP32[$52 >> 2] = $26; //@line 18541
   sp = STACKTOP; //@line 18542
   STACKTOP = sp; //@line 18543
   return;
  }
 } while (0);
 $57 = $16 + 28 | 0; //@line 18546
 $58 = HEAP32[$57 >> 2] | 0; //@line 18547
 if (!$58) {
  $69 = $14 + 12 | 0; //@line 18550
  HEAP32[$69 >> 2] = 0; //@line 18551
  $70 = HEAP32[$16 >> 2] | 0; //@line 18552
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 18553
  __ZL28nsapi_dns_query_async_deletei($70); //@line 18554
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 250; //@line 18557
   $71 = $ReallocAsyncCtx8 + 4 | 0; //@line 18558
   HEAP32[$71 >> 2] = $69; //@line 18559
   $72 = $ReallocAsyncCtx8 + 8 | 0; //@line 18560
   HEAP32[$72 >> 2] = $14; //@line 18561
   $73 = $ReallocAsyncCtx8 + 12 | 0; //@line 18562
   HEAP32[$73 >> 2] = $2; //@line 18563
   $74 = $ReallocAsyncCtx8 + 16 | 0; //@line 18564
   HEAP32[$74 >> 2] = $4; //@line 18565
   sp = STACKTOP; //@line 18566
   STACKTOP = sp; //@line 18567
   return;
  }
  ___async_unwind = 0; //@line 18569
  HEAP32[$ReallocAsyncCtx8 >> 2] = 250; //@line 18570
  $71 = $ReallocAsyncCtx8 + 4 | 0; //@line 18571
  HEAP32[$71 >> 2] = $69; //@line 18572
  $72 = $ReallocAsyncCtx8 + 8 | 0; //@line 18573
  HEAP32[$72 >> 2] = $14; //@line 18574
  $73 = $ReallocAsyncCtx8 + 12 | 0; //@line 18575
  HEAP32[$73 >> 2] = $2; //@line 18576
  $74 = $ReallocAsyncCtx8 + 16 | 0; //@line 18577
  HEAP32[$74 >> 2] = $4; //@line 18578
  sp = STACKTOP; //@line 18579
  STACKTOP = sp; //@line 18580
  return;
 } else {
  $62 = HEAP32[$58 + 4 >> 2] | 0; //@line 18584
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 18585
  FUNCTION_TABLE_vii[$62 & 7]($14, $16 + 16 | 0); //@line 18586
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 249; //@line 18589
   $63 = $ReallocAsyncCtx5 + 4 | 0; //@line 18590
   HEAP32[$63 >> 2] = $57; //@line 18591
   $64 = $ReallocAsyncCtx5 + 8 | 0; //@line 18592
   HEAP32[$64 >> 2] = $14; //@line 18593
   $65 = $ReallocAsyncCtx5 + 12 | 0; //@line 18594
   HEAP32[$65 >> 2] = $16; //@line 18595
   $66 = $ReallocAsyncCtx5 + 16 | 0; //@line 18596
   HEAP32[$66 >> 2] = $14; //@line 18597
   $67 = $ReallocAsyncCtx5 + 20 | 0; //@line 18598
   HEAP32[$67 >> 2] = $2; //@line 18599
   $68 = $ReallocAsyncCtx5 + 24 | 0; //@line 18600
   HEAP32[$68 >> 2] = $4; //@line 18601
   sp = STACKTOP; //@line 18602
   STACKTOP = sp; //@line 18603
   return;
  }
  ___async_unwind = 0; //@line 18605
  HEAP32[$ReallocAsyncCtx5 >> 2] = 249; //@line 18606
  $63 = $ReallocAsyncCtx5 + 4 | 0; //@line 18607
  HEAP32[$63 >> 2] = $57; //@line 18608
  $64 = $ReallocAsyncCtx5 + 8 | 0; //@line 18609
  HEAP32[$64 >> 2] = $14; //@line 18610
  $65 = $ReallocAsyncCtx5 + 12 | 0; //@line 18611
  HEAP32[$65 >> 2] = $16; //@line 18612
  $66 = $ReallocAsyncCtx5 + 16 | 0; //@line 18613
  HEAP32[$66 >> 2] = $14; //@line 18614
  $67 = $ReallocAsyncCtx5 + 20 | 0; //@line 18615
  HEAP32[$67 >> 2] = $2; //@line 18616
  $68 = $ReallocAsyncCtx5 + 24 | 0; //@line 18617
  HEAP32[$68 >> 2] = $4; //@line 18618
  sp = STACKTOP; //@line 18619
  STACKTOP = sp; //@line 18620
  return;
 }
}
function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $153 = 0, $155 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
 $5 = $0 + 4 | 0; //@line 7915
 $6 = HEAP32[$5 >> 2] | 0; //@line 7916
 $7 = $0 + 100 | 0; //@line 7917
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1; //@line 7922
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 7925
  $$0142 = 0; //@line 7925
 } else {
  $$0 = ___shgetc($0) | 0; //@line 7928
  $$0142 = 0; //@line 7928
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8; //@line 7933
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0; //@line 7941
    $$0148 = 0; //@line 7941
    $$0152 = 1.0; //@line 7941
    $$0155 = 0.0; //@line 7941
    $$0159 = 0; //@line 7941
    $$2 = $$0; //@line 7941
    $$2144 = $$0142; //@line 7941
    $51 = 0; //@line 7941
    $53 = 0; //@line 7941
    $96 = 0; //@line 7941
    $98 = 0; //@line 7941
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0; //@line 7945
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1; //@line 7950
   $$0 = HEAPU8[$14 >> 0] | 0; //@line 7953
   $$0142 = 1; //@line 7953
   continue;
  } else {
   $$0 = ___shgetc($0) | 0; //@line 7957
   $$0142 = 1; //@line 7957
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0; //@line 7962
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1; //@line 7967
   $$1$ph = HEAPU8[$21 >> 0] | 0; //@line 7970
  } else {
   $$1$ph = ___shgetc($0) | 0; //@line 7973
  }
  if (($$1$ph | 0) == 48) {
   $36 = 0; //@line 7977
   $37 = 0; //@line 7977
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0; //@line 7979
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1; //@line 7984
     $41 = HEAPU8[$29 >> 0] | 0; //@line 7987
    } else {
     $41 = ___shgetc($0) | 0; //@line 7990
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0; //@line 7992
    $39 = tempRet0; //@line 7993
    if (($41 | 0) == 48) {
     $36 = $38; //@line 7996
     $37 = $39; //@line 7996
    } else {
     $$0146 = 1; //@line 7998
     $$0148 = 0; //@line 7998
     $$0152 = 1.0; //@line 7998
     $$0155 = 0.0; //@line 7998
     $$0159 = 0; //@line 7998
     $$2 = $41; //@line 7998
     $$2144 = 1; //@line 7998
     $51 = 0; //@line 7998
     $53 = 0; //@line 7998
     $96 = $38; //@line 7998
     $98 = $39; //@line 7998
     break;
    }
   }
  } else {
   $$0146 = 1; //@line 8003
   $$0148 = 0; //@line 8003
   $$0152 = 1.0; //@line 8003
   $$0155 = 0.0; //@line 8003
   $$0159 = 0; //@line 8003
   $$2 = $$1$ph; //@line 8003
   $$2144 = $$0142; //@line 8003
   $51 = 0; //@line 8003
   $53 = 0; //@line 8003
   $96 = 0; //@line 8003
   $98 = 0; //@line 8003
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0; //@line 8007
  $$pre = $$2 | 32; //@line 8009
  if ($42 >>> 0 < 10) {
   label = 20; //@line 8011
  } else {
   $46 = ($$2 | 0) == 46; //@line 8015
   if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$2$lcssa = $$2; //@line 8018
    break;
   }
   if ($46) {
    if (!$$0146) {
     $$1147 = 1; //@line 8024
     $$2150 = $$0148; //@line 8024
     $$2154 = $$0152; //@line 8024
     $$2157 = $$0155; //@line 8024
     $$2161 = $$0159; //@line 8024
     $$3145 = $$2144; //@line 8024
     $211 = $53; //@line 8024
     $212 = $51; //@line 8024
     $213 = $53; //@line 8024
     $214 = $51; //@line 8024
    } else {
     $$2$lcssa = 46; //@line 8026
     break;
    }
   } else {
    label = 20; //@line 8030
   }
  }
  if ((label | 0) == 20) {
   label = 0; //@line 8034
   $$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42; //@line 8037
   do {
    if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
     $$1149 = $$0148; //@line 8047
     $$1153 = $$0152; //@line 8047
     $$1156 = $$0155; //@line 8047
     $$1160 = $$0133 + ($$0159 << 4) | 0; //@line 8047
    } else {
     if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
      $65 = $$0152 * .0625; //@line 8056
      $$1149 = $$0148; //@line 8059
      $$1153 = $65; //@line 8059
      $$1156 = $$0155 + $65 * +($$0133 | 0); //@line 8059
      $$1160 = $$0159; //@line 8059
      break;
     } else {
      $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0; //@line 8064
      $$1149 = $or$cond ? $$0148 : 1; //@line 8069
      $$1153 = $$0152; //@line 8069
      $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5; //@line 8069
      $$1160 = $$0159; //@line 8069
      break;
     }
    }
   } while (0);
   $72 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0; //@line 8074
   $$1147 = $$0146; //@line 8076
   $$2150 = $$1149; //@line 8076
   $$2154 = $$1153; //@line 8076
   $$2157 = $$1156; //@line 8076
   $$2161 = $$1160; //@line 8076
   $$3145 = 1; //@line 8076
   $211 = $96; //@line 8076
   $212 = $98; //@line 8076
   $213 = $72; //@line 8076
   $214 = tempRet0; //@line 8076
  }
  $74 = HEAP32[$5 >> 2] | 0; //@line 8078
  if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $74 + 1; //@line 8083
   $$0146 = $$1147; //@line 8086
   $$0148 = $$2150; //@line 8086
   $$0152 = $$2154; //@line 8086
   $$0155 = $$2157; //@line 8086
   $$0159 = $$2161; //@line 8086
   $$2 = HEAPU8[$74 >> 0] | 0; //@line 8086
   $$2144 = $$3145; //@line 8086
   $51 = $214; //@line 8086
   $53 = $213; //@line 8086
   $96 = $211; //@line 8086
   $98 = $212; //@line 8086
   continue;
  } else {
   $$0146 = $$1147; //@line 8090
   $$0148 = $$2150; //@line 8090
   $$0152 = $$2154; //@line 8090
   $$0155 = $$2157; //@line 8090
   $$0159 = $$2161; //@line 8090
   $$2 = ___shgetc($0) | 0; //@line 8090
   $$2144 = $$3145; //@line 8090
   $51 = $214; //@line 8090
   $53 = $213; //@line 8090
   $96 = $211; //@line 8090
   $98 = $212; //@line 8090
   continue;
  }
 }
 do {
  if (!$$2144) {
   $83 = (HEAP32[$7 >> 2] | 0) == 0; //@line 8098
   if (!$83) {
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8102
   }
   if (!$4) {
    ___shlim($0, 0); //@line 8106
   } else {
    if (!$83) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8111
    }
    if (!(($$0146 | 0) == 0 | $83)) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8118
    }
   }
   $$0165 = +($3 | 0) * 0.0; //@line 8123
  } else {
   $94 = ($$0146 | 0) == 0; //@line 8125
   $95 = $94 ? $53 : $96; //@line 8126
   $97 = $94 ? $51 : $98; //@line 8127
   if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$3162183 = $$0159; //@line 8134
    $105 = $53; //@line 8134
    $106 = $51; //@line 8134
    while (1) {
     $104 = $$3162183 << 4; //@line 8136
     $105$looptemp = $105;
     $105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 8137
     if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
      $$3162$lcssa = $104; //@line 8147
      break;
     } else {
      $$3162183 = $104; //@line 8145
      $106 = tempRet0; //@line 8145
     }
    }
   } else {
    $$3162$lcssa = $$0159; //@line 8152
   }
   if (($$2$lcssa | 32 | 0) == 112) {
    $116 = _scanexp($0, $4) | 0; //@line 8157
    $117 = tempRet0; //@line 8158
    if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
     if (!$4) {
      ___shlim($0, 0); //@line 8165
      $$0165 = 0.0; //@line 8166
      break;
     }
     if (!(HEAP32[$7 >> 2] | 0)) {
      $134 = 0; //@line 8172
      $135 = 0; //@line 8172
     } else {
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8176
      $134 = 0; //@line 8177
      $135 = 0; //@line 8177
     }
    } else {
     $134 = $116; //@line 8180
     $135 = $117; //@line 8180
    }
   } else {
    if (!(HEAP32[$7 >> 2] | 0)) {
     $134 = 0; //@line 8186
     $135 = 0; //@line 8186
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8190
     $134 = 0; //@line 8191
     $135 = 0; //@line 8191
    }
   }
   $130 = _bitshift64Shl($95 | 0, $97 | 0, 2) | 0; //@line 8194
   $132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0; //@line 8196
   $136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0; //@line 8198
   $137 = tempRet0; //@line 8199
   if (!$$3162$lcssa) {
    $$0165 = +($3 | 0) * 0.0; //@line 8204
    break;
   }
   $141 = 0 - $2 | 0; //@line 8207
   $143 = (($141 | 0) < 0) << 31 >> 31; //@line 8209
   if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8217
    $$0165 = +($3 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8221
    break;
   }
   $153 = $2 + -106 | 0; //@line 8224
   $155 = (($153 | 0) < 0) << 31 >> 31; //@line 8226
   if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8234
    $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8238
    break;
   }
   if (($$3162$lcssa | 0) > -1) {
    $$3158179 = $$0155; //@line 8243
    $$4163178 = $$3162$lcssa; //@line 8243
    $170 = $136; //@line 8243
    $171 = $137; //@line 8243
    while (1) {
     $166 = !($$3158179 >= .5); //@line 8245
     $$5164 = $$4163178 << 1 | ($166 ^ 1) & 1; //@line 8250
     $$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0); //@line 8252
     $172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0; //@line 8253
     $173 = tempRet0; //@line 8254
     if (($$5164 | 0) > -1) {
      $$3158179 = $$4; //@line 8257
      $$4163178 = $$5164; //@line 8257
      $170 = $172; //@line 8257
      $171 = $173; //@line 8257
     } else {
      $$3158$lcssa = $$4; //@line 8259
      $$4163$lcssa = $$5164; //@line 8259
      $181 = $172; //@line 8259
      $182 = $173; //@line 8259
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155; //@line 8264
    $$4163$lcssa = $$3162$lcssa; //@line 8264
    $181 = $136; //@line 8264
    $182 = $137; //@line 8264
   }
   $176 = (($1 | 0) < 0) << 31 >> 31; //@line 8267
   $179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0; //@line 8270
   $183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0; //@line 8272
   $184 = tempRet0; //@line 8273
   if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) {
    if (($183 | 0) > 0) {
     $$0166 = $183; //@line 8282
     label = 59; //@line 8283
    } else {
     $$0166170 = 0; //@line 8285
     $194 = 84; //@line 8285
     label = 61; //@line 8286
    }
   } else {
    $$0166 = $1; //@line 8289
    label = 59; //@line 8290
   }
   if ((label | 0) == 59) {
    if (($$0166 | 0) < 53) {
     $$0166170 = $$0166; //@line 8296
     $194 = 84 - $$0166 | 0; //@line 8296
     label = 61; //@line 8297
    } else {
     $$0151 = 0.0; //@line 8300
     $$0166169 = $$0166; //@line 8300
     $$pre$phi201Z2D = +($3 | 0); //@line 8300
    }
   }
   if ((label | 0) == 61) {
    $193 = +($3 | 0); //@line 8304
    $$0151 = +_copysignl(+_scalbn(1.0, $194), $193); //@line 8307
    $$0166169 = $$0166170; //@line 8307
    $$pre$phi201Z2D = $193; //@line 8307
   }
   $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32); //@line 8314
   $207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151; //@line 8323
   if (!($207 != 0.0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8327
   }
   $$0165 = +_scalbnl($207, $181); //@line 8330
  }
 } while (0);
 return +$$0165;
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12956
 STACKTOP = STACKTOP + 1056 | 0; //@line 12957
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 12957
 $2 = sp + 1024 | 0; //@line 12958
 $3 = sp; //@line 12959
 HEAP32[$2 >> 2] = 0; //@line 12960
 HEAP32[$2 + 4 >> 2] = 0; //@line 12960
 HEAP32[$2 + 8 >> 2] = 0; //@line 12960
 HEAP32[$2 + 12 >> 2] = 0; //@line 12960
 HEAP32[$2 + 16 >> 2] = 0; //@line 12960
 HEAP32[$2 + 20 >> 2] = 0; //@line 12960
 HEAP32[$2 + 24 >> 2] = 0; //@line 12960
 HEAP32[$2 + 28 >> 2] = 0; //@line 12960
 $4 = HEAP8[$1 >> 0] | 0; //@line 12961
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 12965
   $$0185$ph$lcssa327 = -1; //@line 12965
   $$0187219$ph325326 = 0; //@line 12965
   $$1176$ph$ph$lcssa208 = 1; //@line 12965
   $$1186$ph$lcssa = -1; //@line 12965
   label = 26; //@line 12966
  } else {
   $$0187263 = 0; //@line 12968
   $10 = $4; //@line 12968
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 12974
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 12982
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 12985
    $$0187263 = $$0187263 + 1 | 0; //@line 12986
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 12989
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 12991
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 12999
   if ($23) {
    $$0183$ph260 = 0; //@line 13001
    $$0185$ph259 = -1; //@line 13001
    $130 = 1; //@line 13001
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 13003
     $$0183$ph197$ph253 = $$0183$ph260; //@line 13003
     $131 = $130; //@line 13003
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 13005
      $132 = $131; //@line 13005
      L10 : while (1) {
       $$0179242 = 1; //@line 13007
       $25 = $132; //@line 13007
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 13011
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 13013
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 13019
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 13023
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 13028
         $$0185$ph$lcssa = $$0185$ph259; //@line 13028
         break L6;
        } else {
         $25 = $27; //@line 13026
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 13032
       $132 = $37 + 1 | 0; //@line 13033
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 13038
        $$0185$ph$lcssa = $$0185$ph259; //@line 13038
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 13036
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 13043
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 13047
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 13052
       $$0185$ph$lcssa = $$0185$ph259; //@line 13052
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 13050
       $$0183$ph197$ph253 = $25; //@line 13050
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 13057
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 13062
      $$0185$ph$lcssa = $$0183$ph197248; //@line 13062
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 13060
      $$0185$ph259 = $$0183$ph197248; //@line 13060
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 13067
     $$1186$ph238 = -1; //@line 13067
     $133 = 1; //@line 13067
     while (1) {
      $$1176$ph$ph233 = 1; //@line 13069
      $$1184$ph193$ph232 = $$1184$ph239; //@line 13069
      $135 = $133; //@line 13069
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 13071
       $134 = $135; //@line 13071
       L25 : while (1) {
        $$1180222 = 1; //@line 13073
        $52 = $134; //@line 13073
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 13077
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 13079
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 13085
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 13089
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13094
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13094
          $$0187219$ph325326 = $$0187263; //@line 13094
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 13094
          $$1186$ph$lcssa = $$1186$ph238; //@line 13094
          label = 26; //@line 13095
          break L1;
         } else {
          $52 = $45; //@line 13092
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 13099
        $134 = $56 + 1 | 0; //@line 13100
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13105
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13105
         $$0187219$ph325326 = $$0187263; //@line 13105
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 13105
         $$1186$ph$lcssa = $$1186$ph238; //@line 13105
         label = 26; //@line 13106
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 13103
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 13111
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 13115
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13120
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13120
        $$0187219$ph325326 = $$0187263; //@line 13120
        $$1176$ph$ph$lcssa208 = $60; //@line 13120
        $$1186$ph$lcssa = $$1186$ph238; //@line 13120
        label = 26; //@line 13121
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 13118
        $$1184$ph193$ph232 = $52; //@line 13118
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 13126
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13131
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13131
       $$0187219$ph325326 = $$0187263; //@line 13131
       $$1176$ph$ph$lcssa208 = 1; //@line 13131
       $$1186$ph$lcssa = $$1184$ph193227; //@line 13131
       label = 26; //@line 13132
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 13129
       $$1186$ph238 = $$1184$ph193227; //@line 13129
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13137
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13137
     $$0187219$ph325326 = $$0187263; //@line 13137
     $$1176$ph$ph$lcssa208 = 1; //@line 13137
     $$1186$ph$lcssa = -1; //@line 13137
     label = 26; //@line 13138
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 13141
    $$0185$ph$lcssa327 = -1; //@line 13141
    $$0187219$ph325326 = $$0187263; //@line 13141
    $$1176$ph$ph$lcssa208 = 1; //@line 13141
    $$1186$ph$lcssa = -1; //@line 13141
    label = 26; //@line 13142
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 13150
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 13151
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 13152
   $70 = $$1186$$0185 + 1 | 0; //@line 13154
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 13159
    $$3178 = $$1176$$0175; //@line 13159
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 13162
    $$0168 = 0; //@line 13166
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 13166
   }
   $78 = $$0187219$ph325326 | 63; //@line 13168
   $79 = $$0187219$ph325326 + -1 | 0; //@line 13169
   $80 = ($$0168 | 0) != 0; //@line 13170
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 13171
   $$0166 = $0; //@line 13172
   $$0169 = 0; //@line 13172
   $$0170 = $0; //@line 13172
   while (1) {
    $83 = $$0166; //@line 13175
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 13180
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 13184
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 13191
        break L35;
       } else {
        $$3173 = $86; //@line 13194
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 13199
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 13203
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 13215
      $$2181$sink = $$0187219$ph325326; //@line 13215
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 13220
      if ($105 | 0) {
       $$0169$be = 0; //@line 13228
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 13228
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 13232
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 13234
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 13238
       } else {
        $$3182221 = $111; //@line 13240
        $$pr = $113; //@line 13240
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 13248
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 13250
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 13253
          break L54;
         } else {
          $$3182221 = $118; //@line 13256
         }
        }
        $$0169$be = 0; //@line 13260
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 13260
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 13267
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 13270
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 13279
        $$2181$sink = $$3178; //@line 13279
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 13286
    $$0169 = $$0169$be; //@line 13286
    $$0170 = $$3173; //@line 13286
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13290
 return $$3 | 0; //@line 13290
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$011 = 0, $$013 = 0, $$112 = 0, $$byval_copy42 = 0, $104 = 0, $107 = 0, $112 = 0, $115 = 0, $13 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $44 = 0, $5 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $94 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3059
 STACKTOP = STACKTOP + 224 | 0; //@line 3060
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 3060
 $$byval_copy42 = sp + 204 | 0; //@line 3061
 $4 = sp + 120 | 0; //@line 3062
 $5 = sp + 184 | 0; //@line 3063
 $6 = sp + 56 | 0; //@line 3064
 $7 = sp + 32 | 0; //@line 3065
 $8 = sp + 16 | 0; //@line 3066
 $9 = sp; //@line 3067
 HEAP32[$5 >> 2] = 0; //@line 3068
 HEAP32[$5 + 4 >> 2] = 0; //@line 3068
 HEAP32[$5 + 8 >> 2] = 0; //@line 3068
 HEAP32[$5 + 12 >> 2] = 0; //@line 3068
 HEAP32[$5 + 16 >> 2] = 0; //@line 3068
 HEAP32[$$byval_copy42 >> 2] = HEAP32[$5 >> 2]; //@line 3069
 HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 3069
 HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 3069
 HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 3069
 HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 3069
 __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy42, 0); //@line 3070
 if (!(HEAP8[$1 >> 0] | 0)) {
  $$013 = -3003; //@line 3074
  STACKTOP = sp; //@line 3075
  return $$013 | 0; //@line 3075
 }
 $13 = ($3 | 0) == 0; //@line 3078
 if (__ZN13SocketAddress14set_ip_addressEPKc($4, $1) | 0) {
  if (!$13) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($4) | 0) != ($3 | 0)) {
    $$013 = -3009; //@line 3084
    STACKTOP = sp; //@line 3085
    return $$013 | 0; //@line 3085
   }
  }
  $16 = $2 + 12 | 0; //@line 3088
  $17 = HEAP32[$16 >> 2] | 0; //@line 3089
  do {
   if (!$17) {
    $AsyncCtx31 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3093
    _mbed_assert_internal(4019, 4024, 1677); //@line 3094
    if (___async) {
     HEAP32[$AsyncCtx31 >> 2] = 91; //@line 3097
     HEAP32[$AsyncCtx31 + 4 >> 2] = $16; //@line 3099
     HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 3101
     HEAP32[$AsyncCtx31 + 12 >> 2] = $4; //@line 3103
     HEAP32[$AsyncCtx31 + 16 >> 2] = $4; //@line 3105
     sp = STACKTOP; //@line 3106
     STACKTOP = sp; //@line 3107
     return 0; //@line 3107
    } else {
     _emscripten_free_async_context($AsyncCtx31 | 0); //@line 3109
     $24 = HEAP32[$16 >> 2] | 0; //@line 3111
     break;
    }
   } else {
    $24 = $17; //@line 3115
   }
  } while (0);
  $23 = HEAP32[$24 >> 2] | 0; //@line 3118
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3119
  FUNCTION_TABLE_viii[$23 & 0]($2, 0, $4); //@line 3120
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 92; //@line 3123
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3125
   sp = STACKTOP; //@line 3126
   STACKTOP = sp; //@line 3127
   return 0; //@line 3127
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3129
  $$013 = 0; //@line 3130
  STACKTOP = sp; //@line 3131
  return $$013 | 0; //@line 3131
 }
 if ($13) {
  HEAP32[$7 >> 2] = 0; //@line 3134
  HEAP32[$7 + 4 >> 2] = 0; //@line 3134
  HEAP32[$7 + 8 >> 2] = 0; //@line 3134
  HEAP32[$7 + 12 >> 2] = 0; //@line 3134
  HEAP32[$7 + 16 >> 2] = 0; //@line 3134
  HEAP32[$$byval_copy42 >> 2] = HEAP32[$7 >> 2]; //@line 3135
  HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 3135
  HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 3135
  HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 3135
  HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 3135
  __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy42, 0); //@line 3136
  $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3139
  $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3140
  $29 = FUNCTION_TABLE_ii[$28 & 31]($0) | 0; //@line 3141
  if (___async) {
   HEAP32[$AsyncCtx2 >> 2] = 93; //@line 3144
   HEAP32[$AsyncCtx2 + 4 >> 2] = $8; //@line 3146
   HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 3148
   HEAP32[$AsyncCtx2 + 12 >> 2] = $9; //@line 3150
   HEAP32[$AsyncCtx2 + 16 >> 2] = $$byval_copy42; //@line 3152
   HEAP32[$AsyncCtx2 + 20 >> 2] = $0; //@line 3154
   HEAP32[$AsyncCtx2 + 24 >> 2] = $1; //@line 3156
   HEAP32[$AsyncCtx2 + 28 >> 2] = $6; //@line 3158
   HEAP32[$AsyncCtx2 + 32 >> 2] = $6; //@line 3160
   HEAP32[$AsyncCtx2 + 36 >> 2] = $3; //@line 3162
   HEAP32[$AsyncCtx2 + 40 >> 2] = $4; //@line 3164
   sp = STACKTOP; //@line 3165
   STACKTOP = sp; //@line 3166
   return 0; //@line 3166
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3168
  if (__ZN13SocketAddress14set_ip_addressEPKc($6, $29) | 0) {
   $$011 = __ZNK13SocketAddress14get_ip_versionEv($6) | 0; //@line 3172
  } else {
   $$011 = 0; //@line 3174
  }
  $$112 = $$011; //@line 3176
 } else {
  $$112 = $3; //@line 3178
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 96 >> 2] | 0; //@line 3182
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3183
 FUNCTION_TABLE_vii[$44 & 7]($$byval_copy42, $0); //@line 3184
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 94; //@line 3187
  HEAP32[$AsyncCtx6 + 4 >> 2] = $8; //@line 3189
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$byval_copy42; //@line 3191
  HEAP32[$AsyncCtx6 + 12 >> 2] = $2; //@line 3193
  HEAP32[$AsyncCtx6 + 16 >> 2] = $9; //@line 3195
  HEAP32[$AsyncCtx6 + 20 >> 2] = $$byval_copy42; //@line 3197
  HEAP32[$AsyncCtx6 + 24 >> 2] = $0; //@line 3199
  HEAP32[$AsyncCtx6 + 28 >> 2] = $1; //@line 3201
  HEAP32[$AsyncCtx6 + 32 >> 2] = $$112; //@line 3203
  HEAP32[$AsyncCtx6 + 36 >> 2] = $4; //@line 3205
  sp = STACKTOP; //@line 3206
  STACKTOP = sp; //@line 3207
  return 0; //@line 3207
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 3209
 $54 = $2 + 12 | 0; //@line 3210
 $55 = HEAP32[$54 >> 2] | 0; //@line 3211
 do {
  if (!$55) {
   $69 = 0; //@line 3215
  } else {
   $58 = HEAP32[$55 + 4 >> 2] | 0; //@line 3218
   $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3219
   FUNCTION_TABLE_vii[$58 & 7]($8, $2); //@line 3220
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 95; //@line 3223
    HEAP32[$AsyncCtx9 + 4 >> 2] = $54; //@line 3225
    HEAP32[$AsyncCtx9 + 8 >> 2] = $8; //@line 3227
    HEAP32[$AsyncCtx9 + 12 >> 2] = $$byval_copy42; //@line 3229
    HEAP32[$AsyncCtx9 + 16 >> 2] = $9; //@line 3231
    HEAP32[$AsyncCtx9 + 20 >> 2] = $$byval_copy42; //@line 3233
    HEAP32[$AsyncCtx9 + 24 >> 2] = $0; //@line 3235
    HEAP32[$AsyncCtx9 + 28 >> 2] = $1; //@line 3237
    HEAP32[$AsyncCtx9 + 32 >> 2] = $$112; //@line 3239
    HEAP32[$AsyncCtx9 + 36 >> 2] = $4; //@line 3241
    sp = STACKTOP; //@line 3242
    STACKTOP = sp; //@line 3243
    return 0; //@line 3243
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 3245
    $69 = HEAP32[$54 >> 2] | 0; //@line 3247
    break;
   }
  }
 } while (0);
 $68 = $8 + 12 | 0; //@line 3252
 HEAP32[$68 >> 2] = $69; //@line 3253
 $70 = $$byval_copy42 + 12 | 0; //@line 3254
 $71 = HEAP32[$70 >> 2] | 0; //@line 3255
 do {
  if (!$71) {
   $85 = 0; //@line 3259
  } else {
   $74 = HEAP32[$71 + 4 >> 2] | 0; //@line 3262
   $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3263
   FUNCTION_TABLE_vii[$74 & 7]($9, $$byval_copy42); //@line 3264
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 96; //@line 3267
    HEAP32[$AsyncCtx12 + 4 >> 2] = $8; //@line 3269
    HEAP32[$AsyncCtx12 + 8 >> 2] = $68; //@line 3271
    HEAP32[$AsyncCtx12 + 12 >> 2] = $$byval_copy42; //@line 3273
    HEAP32[$AsyncCtx12 + 16 >> 2] = $70; //@line 3275
    HEAP32[$AsyncCtx12 + 20 >> 2] = $9; //@line 3277
    HEAP32[$AsyncCtx12 + 24 >> 2] = $0; //@line 3279
    HEAP32[$AsyncCtx12 + 28 >> 2] = $1; //@line 3281
    HEAP32[$AsyncCtx12 + 32 >> 2] = $$112; //@line 3283
    HEAP32[$AsyncCtx12 + 36 >> 2] = $4; //@line 3285
    sp = STACKTOP; //@line 3286
    STACKTOP = sp; //@line 3287
    return 0; //@line 3287
   } else {
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 3289
    $85 = HEAP32[$70 >> 2] | 0; //@line 3291
    break;
   }
  }
 } while (0);
 $84 = $9 + 12 | 0; //@line 3296
 HEAP32[$84 >> 2] = $85; //@line 3297
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 3298
 $86 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $8, $9, $$112) | 0; //@line 3299
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 97; //@line 3302
  HEAP32[$AsyncCtx27 + 4 >> 2] = $84; //@line 3304
  HEAP32[$AsyncCtx27 + 8 >> 2] = $68; //@line 3306
  HEAP32[$AsyncCtx27 + 12 >> 2] = $9; //@line 3308
  HEAP32[$AsyncCtx27 + 16 >> 2] = $70; //@line 3310
  HEAP32[$AsyncCtx27 + 20 >> 2] = $8; //@line 3312
  HEAP32[$AsyncCtx27 + 24 >> 2] = $$byval_copy42; //@line 3314
  HEAP32[$AsyncCtx27 + 28 >> 2] = $4; //@line 3316
  sp = STACKTOP; //@line 3317
  STACKTOP = sp; //@line 3318
  return 0; //@line 3318
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 3320
 $94 = HEAP32[$84 >> 2] | 0; //@line 3321
 do {
  if ($94 | 0) {
   $97 = HEAP32[$94 + 8 >> 2] | 0; //@line 3326
   $AsyncCtx16 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3327
   FUNCTION_TABLE_vi[$97 & 511]($9); //@line 3328
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 98; //@line 3331
    HEAP32[$AsyncCtx16 + 4 >> 2] = $68; //@line 3333
    HEAP32[$AsyncCtx16 + 8 >> 2] = $70; //@line 3335
    HEAP32[$AsyncCtx16 + 12 >> 2] = $8; //@line 3337
    HEAP32[$AsyncCtx16 + 16 >> 2] = $$byval_copy42; //@line 3339
    HEAP32[$AsyncCtx16 + 20 >> 2] = $86; //@line 3341
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 3343
    sp = STACKTOP; //@line 3344
    STACKTOP = sp; //@line 3345
    return 0; //@line 3345
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 3347
    break;
   }
  }
 } while (0);
 $104 = HEAP32[$68 >> 2] | 0; //@line 3352
 do {
  if ($104 | 0) {
   $107 = HEAP32[$104 + 8 >> 2] | 0; //@line 3357
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3358
   FUNCTION_TABLE_vi[$107 & 511]($8); //@line 3359
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 99; //@line 3362
    HEAP32[$AsyncCtx20 + 4 >> 2] = $70; //@line 3364
    HEAP32[$AsyncCtx20 + 8 >> 2] = $$byval_copy42; //@line 3366
    HEAP32[$AsyncCtx20 + 12 >> 2] = $86; //@line 3368
    HEAP32[$AsyncCtx20 + 16 >> 2] = $4; //@line 3370
    sp = STACKTOP; //@line 3371
    STACKTOP = sp; //@line 3372
    return 0; //@line 3372
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 3374
    break;
   }
  }
 } while (0);
 $112 = HEAP32[$70 >> 2] | 0; //@line 3379
 do {
  if ($112 | 0) {
   $115 = HEAP32[$112 + 8 >> 2] | 0; //@line 3384
   $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3385
   FUNCTION_TABLE_vi[$115 & 511]($$byval_copy42); //@line 3386
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 100; //@line 3389
    HEAP32[$AsyncCtx24 + 4 >> 2] = $$byval_copy42; //@line 3391
    HEAP32[$AsyncCtx24 + 8 >> 2] = $86; //@line 3393
    HEAP32[$AsyncCtx24 + 12 >> 2] = $4; //@line 3395
    sp = STACKTOP; //@line 3396
    STACKTOP = sp; //@line 3397
    return 0; //@line 3397
   } else {
    _emscripten_free_async_context($AsyncCtx24 | 0); //@line 3399
    break;
   }
  }
 } while (0);
 $$013 = $86; //@line 3404
 STACKTOP = sp; //@line 3405
 return $$013 | 0; //@line 3405
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_69($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21936
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21938
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21940
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21942
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21944
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21946
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21948
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21950
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21952
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21954
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21956
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21958
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21960
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21962
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21964
 $30 = HEAP16[$0 + 60 >> 1] | 0; //@line 21966
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21968
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21970
 $49 = $28 + 64 | 0; //@line 21971
 HEAP32[$49 >> 2] = $AsyncRetVal; //@line 21972
 $51 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($2, $30, $28 + 68 | 0, $AsyncRetVal, $32) | 0; //@line 21974
 if (($51 | 0) < 0) {
  $53 = HEAP32[$49 >> 2] | 0; //@line 21977
  if ($53 | 0) {
   __ZdaPv($53); //@line 21980
  }
  HEAP32[$49 >> 2] = 0; //@line 21982
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 21983
  $34 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 21984
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 21987
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 21988
   HEAP32[$35 >> 2] = $2; //@line 21989
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 21990
   HEAP32[$36 >> 2] = $4; //@line 21991
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 21992
   HEAP32[$37 >> 2] = $6; //@line 21993
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 21994
   HEAP32[$38 >> 2] = $8; //@line 21995
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 21996
   HEAP32[$39 >> 2] = $10; //@line 21997
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 21998
   HEAP32[$40 >> 2] = $12; //@line 21999
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 22000
   HEAP32[$41 >> 2] = $14; //@line 22001
   $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 22002
   HEAP32[$42 >> 2] = $16; //@line 22003
   $43 = $ReallocAsyncCtx6 + 36 | 0; //@line 22004
   HEAP32[$43 >> 2] = $18; //@line 22005
   $44 = $ReallocAsyncCtx6 + 40 | 0; //@line 22006
   HEAP32[$44 >> 2] = $20; //@line 22007
   $45 = $ReallocAsyncCtx6 + 44 | 0; //@line 22008
   HEAP32[$45 >> 2] = $22; //@line 22009
   $46 = $ReallocAsyncCtx6 + 48 | 0; //@line 22010
   HEAP32[$46 >> 2] = $24; //@line 22011
   $47 = $ReallocAsyncCtx6 + 52 | 0; //@line 22012
   HEAP32[$47 >> 2] = $26; //@line 22013
   sp = STACKTOP; //@line 22014
   return;
  }
  HEAP32[___async_retval >> 2] = $34; //@line 22018
  ___async_unwind = 0; //@line 22019
  HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 22020
  $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 22021
  HEAP32[$35 >> 2] = $2; //@line 22022
  $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 22023
  HEAP32[$36 >> 2] = $4; //@line 22024
  $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 22025
  HEAP32[$37 >> 2] = $6; //@line 22026
  $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 22027
  HEAP32[$38 >> 2] = $8; //@line 22028
  $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 22029
  HEAP32[$39 >> 2] = $10; //@line 22030
  $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 22031
  HEAP32[$40 >> 2] = $12; //@line 22032
  $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 22033
  HEAP32[$41 >> 2] = $14; //@line 22034
  $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 22035
  HEAP32[$42 >> 2] = $16; //@line 22036
  $43 = $ReallocAsyncCtx6 + 36 | 0; //@line 22037
  HEAP32[$43 >> 2] = $18; //@line 22038
  $44 = $ReallocAsyncCtx6 + 40 | 0; //@line 22039
  HEAP32[$44 >> 2] = $20; //@line 22040
  $45 = $ReallocAsyncCtx6 + 44 | 0; //@line 22041
  HEAP32[$45 >> 2] = $22; //@line 22042
  $46 = $ReallocAsyncCtx6 + 48 | 0; //@line 22043
  HEAP32[$46 >> 2] = $24; //@line 22044
  $47 = $ReallocAsyncCtx6 + 52 | 0; //@line 22045
  HEAP32[$47 >> 2] = $26; //@line 22046
  sp = STACKTOP; //@line 22047
  return;
 }
 HEAP8[$28 + 86 >> 0] = $51; //@line 22052
 HEAP32[$28 + 4 >> 2] = -3009; //@line 22054
 HEAP32[$28 + 76 >> 2] = 0; //@line 22056
 $59 = $28 + 44 | 0; //@line 22057
 $60 = HEAP32[$59 >> 2] | 0; //@line 22058
 if (!$60) {
  HEAP32[$10 >> 2] = 0; //@line 22061
  $80 = HEAP32[$28 >> 2] | 0; //@line 22062
  HEAP32[$12 >> 2] = 0; //@line 22063
  HEAP32[$14 >> 2] = 188; //@line 22064
  HEAP32[$16 >> 2] = $80; //@line 22065
  HEAP32[$18 >> 2] = 764; //@line 22066
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 22067
  __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 0, $22) | 0; //@line 22068
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 22071
   $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 22072
   HEAP32[$81 >> 2] = $2; //@line 22073
   $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 22074
   HEAP32[$82 >> 2] = $4; //@line 22075
   $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 22076
   HEAP32[$83 >> 2] = $6; //@line 22077
   $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 22078
   HEAP32[$84 >> 2] = $8; //@line 22079
   $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 22080
   HEAP32[$85 >> 2] = $10; //@line 22081
   $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 22082
   HEAP32[$86 >> 2] = $12; //@line 22083
   $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 22084
   HEAP32[$87 >> 2] = $14; //@line 22085
   $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 22086
   HEAP32[$88 >> 2] = $16; //@line 22087
   $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 22088
   HEAP32[$89 >> 2] = $18; //@line 22089
   $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 22090
   HEAP32[$90 >> 2] = $20; //@line 22091
   $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 22092
   HEAP32[$91 >> 2] = $22; //@line 22093
   $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 22094
   HEAP32[$92 >> 2] = $24; //@line 22095
   $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 22096
   HEAP32[$93 >> 2] = $26; //@line 22097
   sp = STACKTOP; //@line 22098
   return;
  }
  ___async_unwind = 0; //@line 22101
  HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 22102
  $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 22103
  HEAP32[$81 >> 2] = $2; //@line 22104
  $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 22105
  HEAP32[$82 >> 2] = $4; //@line 22106
  $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 22107
  HEAP32[$83 >> 2] = $6; //@line 22108
  $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 22109
  HEAP32[$84 >> 2] = $8; //@line 22110
  $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 22111
  HEAP32[$85 >> 2] = $10; //@line 22112
  $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 22113
  HEAP32[$86 >> 2] = $12; //@line 22114
  $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 22115
  HEAP32[$87 >> 2] = $14; //@line 22116
  $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 22117
  HEAP32[$88 >> 2] = $16; //@line 22118
  $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 22119
  HEAP32[$89 >> 2] = $18; //@line 22120
  $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 22121
  HEAP32[$90 >> 2] = $20; //@line 22122
  $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 22123
  HEAP32[$91 >> 2] = $22; //@line 22124
  $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 22125
  HEAP32[$92 >> 2] = $24; //@line 22126
  $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 22127
  HEAP32[$93 >> 2] = $26; //@line 22128
  sp = STACKTOP; //@line 22129
  return;
 } else {
  $64 = HEAP32[$60 + 4 >> 2] | 0; //@line 22134
  $ReallocAsyncCtx = _emscripten_realloc_async_context(64) | 0; //@line 22135
  FUNCTION_TABLE_vii[$64 & 7]($4, $28 + 32 | 0); //@line 22136
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 258; //@line 22139
   $65 = $ReallocAsyncCtx + 4 | 0; //@line 22140
   HEAP32[$65 >> 2] = $2; //@line 22141
   $66 = $ReallocAsyncCtx + 8 | 0; //@line 22142
   HEAP32[$66 >> 2] = $4; //@line 22143
   $67 = $ReallocAsyncCtx + 12 | 0; //@line 22144
   HEAP32[$67 >> 2] = $6; //@line 22145
   $68 = $ReallocAsyncCtx + 16 | 0; //@line 22146
   HEAP32[$68 >> 2] = $8; //@line 22147
   $69 = $ReallocAsyncCtx + 20 | 0; //@line 22148
   HEAP32[$69 >> 2] = $10; //@line 22149
   $70 = $ReallocAsyncCtx + 24 | 0; //@line 22150
   HEAP32[$70 >> 2] = $28; //@line 22151
   $71 = $ReallocAsyncCtx + 28 | 0; //@line 22152
   HEAP32[$71 >> 2] = $12; //@line 22153
   $72 = $ReallocAsyncCtx + 32 | 0; //@line 22154
   HEAP32[$72 >> 2] = $14; //@line 22155
   $73 = $ReallocAsyncCtx + 36 | 0; //@line 22156
   HEAP32[$73 >> 2] = $16; //@line 22157
   $74 = $ReallocAsyncCtx + 40 | 0; //@line 22158
   HEAP32[$74 >> 2] = $18; //@line 22159
   $75 = $ReallocAsyncCtx + 44 | 0; //@line 22160
   HEAP32[$75 >> 2] = $20; //@line 22161
   $76 = $ReallocAsyncCtx + 48 | 0; //@line 22162
   HEAP32[$76 >> 2] = $22; //@line 22163
   $77 = $ReallocAsyncCtx + 52 | 0; //@line 22164
   HEAP32[$77 >> 2] = $59; //@line 22165
   $78 = $ReallocAsyncCtx + 56 | 0; //@line 22166
   HEAP32[$78 >> 2] = $24; //@line 22167
   $79 = $ReallocAsyncCtx + 60 | 0; //@line 22168
   HEAP32[$79 >> 2] = $26; //@line 22169
   sp = STACKTOP; //@line 22170
   return;
  }
  ___async_unwind = 0; //@line 22173
  HEAP32[$ReallocAsyncCtx >> 2] = 258; //@line 22174
  $65 = $ReallocAsyncCtx + 4 | 0; //@line 22175
  HEAP32[$65 >> 2] = $2; //@line 22176
  $66 = $ReallocAsyncCtx + 8 | 0; //@line 22177
  HEAP32[$66 >> 2] = $4; //@line 22178
  $67 = $ReallocAsyncCtx + 12 | 0; //@line 22179
  HEAP32[$67 >> 2] = $6; //@line 22180
  $68 = $ReallocAsyncCtx + 16 | 0; //@line 22181
  HEAP32[$68 >> 2] = $8; //@line 22182
  $69 = $ReallocAsyncCtx + 20 | 0; //@line 22183
  HEAP32[$69 >> 2] = $10; //@line 22184
  $70 = $ReallocAsyncCtx + 24 | 0; //@line 22185
  HEAP32[$70 >> 2] = $28; //@line 22186
  $71 = $ReallocAsyncCtx + 28 | 0; //@line 22187
  HEAP32[$71 >> 2] = $12; //@line 22188
  $72 = $ReallocAsyncCtx + 32 | 0; //@line 22189
  HEAP32[$72 >> 2] = $14; //@line 22190
  $73 = $ReallocAsyncCtx + 36 | 0; //@line 22191
  HEAP32[$73 >> 2] = $16; //@line 22192
  $74 = $ReallocAsyncCtx + 40 | 0; //@line 22193
  HEAP32[$74 >> 2] = $18; //@line 22194
  $75 = $ReallocAsyncCtx + 44 | 0; //@line 22195
  HEAP32[$75 >> 2] = $20; //@line 22196
  $76 = $ReallocAsyncCtx + 48 | 0; //@line 22197
  HEAP32[$76 >> 2] = $22; //@line 22198
  $77 = $ReallocAsyncCtx + 52 | 0; //@line 22199
  HEAP32[$77 >> 2] = $59; //@line 22200
  $78 = $ReallocAsyncCtx + 56 | 0; //@line 22201
  HEAP32[$78 >> 2] = $24; //@line 22202
  $79 = $ReallocAsyncCtx + 60 | 0; //@line 22203
  HEAP32[$79 >> 2] = $26; //@line 22204
  sp = STACKTOP; //@line 22205
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_103($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $105 = 0, $108 = 0, $110 = 0, $118 = 0, $12 = 0, $121 = 0, $123 = 0, $131 = 0, $134 = 0, $136 = 0, $14 = 0, $149 = 0, $150 = 0, $151 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $48 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $95 = 0, $97 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2644
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2646
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2648
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2650
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2652
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2656
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2658
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2660
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2662
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2664
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2666
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2670
 HEAP32[HEAP32[$0 + 20 >> 2] >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] >> 2]; //@line 2672
 HEAP32[$4 + 8 >> 2] = $2; //@line 2674
 HEAP32[$4 + 48 >> 2] = $6; //@line 2676
 HEAP32[$4 + 52 >> 2] = $8; //@line 2678
 $30 = $4 + 56 | 0; //@line 2679
 HEAP32[$30 >> 2] = 0; //@line 2680
 $31 = $4 + 60 | 0; //@line 2681
 HEAP32[$31 >> 2] = 0; //@line 2682
 HEAP32[$4 + 64 >> 2] = 0; //@line 2684
 HEAP8[$4 + 82 >> 0] = 0; //@line 2686
 HEAP8[$4 + 83 >> 0] = 1; //@line 2688
 HEAP8[$4 + 84 >> 0] = 3; //@line 2690
 HEAP8[$4 + 85 >> 0] = 0; //@line 2692
 HEAP16[$4 + 80 >> 1] = 0; //@line 2694
 HEAP32[$4 + 76 >> 2] = 0; //@line 2696
 $39 = $4 + 72 | 0; //@line 2697
 HEAP32[$39 >> 2] = 15500; //@line 2698
 HEAP8[$4 + 86 >> 0] = 0; //@line 2700
 HEAP32[$4 + 88 >> 2] = 0; //@line 2702
 $42 = HEAP32[187] | 0; //@line 2703
 HEAP32[187] = $42 + 1; //@line 2705
 HEAP32[$4 >> 2] = ($42 | 0) > 32767 ? 1 : $42; //@line 2708
 $45 = HEAP32[1961] | 0; //@line 2709
 if (!$45) {
  $$1 = 0; //@line 2712
  $95 = 0; //@line 2712
 } else {
  $48 = HEAP32[$45 + 56 >> 2] | 0; //@line 2715
  if (!$48) {
   $$1 = 1; //@line 2718
   $95 = 0; //@line 2718
  } else {
   if ((HEAP32[$45 + 8 >> 2] | 0) == ($2 | 0)) {
    HEAP32[$30 >> 2] = $48; //@line 2724
    HEAP32[$31 >> 2] = HEAP32[$45 + 60 >> 2]; //@line 2727
    $$1 = 1; //@line 2728
    $95 = $48; //@line 2728
   } else {
    $$1 = 1; //@line 2730
    $95 = 0; //@line 2730
   }
  }
 }
 $55 = HEAP32[1962] | 0; //@line 2734
 if (!$55) {
  $$1$1 = $$1; //@line 2737
  $108 = $95; //@line 2737
 } else {
  if (!$95) {
   $97 = HEAP32[$55 + 56 >> 2] | 0; //@line 2742
   if (!$97) {
    $149 = 0; //@line 2745
   } else {
    if ((HEAP32[$55 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$30 >> 2] = $97; //@line 2751
     HEAP32[$31 >> 2] = HEAP32[$55 + 60 >> 2]; //@line 2754
     $149 = $97; //@line 2755
    } else {
     $149 = 0; //@line 2757
    }
   }
  } else {
   $149 = $95; //@line 2761
  }
  $$1$1 = $$1 + 1 | 0; //@line 2764
  $108 = $149; //@line 2764
 }
 $105 = HEAP32[1963] | 0; //@line 2766
 if (!$105) {
  $$1$2 = $$1$1; //@line 2769
  $121 = $108; //@line 2769
 } else {
  if (!$108) {
   $110 = HEAP32[$105 + 56 >> 2] | 0; //@line 2774
   if (!$110) {
    $150 = 0; //@line 2777
   } else {
    if ((HEAP32[$105 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$30 >> 2] = $110; //@line 2783
     HEAP32[$31 >> 2] = HEAP32[$105 + 60 >> 2]; //@line 2786
     $150 = $110; //@line 2787
    } else {
     $150 = 0; //@line 2789
    }
   }
  } else {
   $150 = $108; //@line 2793
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 2796
  $121 = $150; //@line 2796
 }
 $118 = HEAP32[1964] | 0; //@line 2798
 if (!$118) {
  $$1$3 = $$1$2; //@line 2801
  $134 = $121; //@line 2801
 } else {
  if (!$121) {
   $123 = HEAP32[$118 + 56 >> 2] | 0; //@line 2806
   if (!$123) {
    $151 = 0; //@line 2809
   } else {
    if ((HEAP32[$118 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$30 >> 2] = $123; //@line 2815
     HEAP32[$31 >> 2] = HEAP32[$118 + 60 >> 2]; //@line 2818
     $151 = $123; //@line 2819
    } else {
     $151 = 0; //@line 2821
    }
   }
  } else {
   $151 = $121; //@line 2825
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 2828
  $134 = $151; //@line 2828
 }
 $131 = HEAP32[1965] | 0; //@line 2830
 if (!$131) {
  $$1$4 = $$1$3; //@line 2833
 } else {
  if (!$134) {
   $136 = HEAP32[$131 + 56 >> 2] | 0; //@line 2838
   if ($136 | 0) {
    if ((HEAP32[$131 + 8 >> 2] | 0) == ($2 | 0)) {
     HEAP32[$30 >> 2] = $136; //@line 2845
     HEAP32[$31 >> 2] = HEAP32[$131 + 60 >> 2]; //@line 2848
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 2853
 }
 HEAP32[7844 + ($20 << 2) >> 2] = $4; //@line 2856
 HEAP32[$39 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 2859
 if (HEAP8[8724] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 2863
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 2864
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 2867
   $92 = $ReallocAsyncCtx13 + 4 | 0; //@line 2868
   HEAP32[$92 >> 2] = $4; //@line 2869
   $93 = $ReallocAsyncCtx13 + 8 | 0; //@line 2870
   HEAP32[$93 >> 2] = $16; //@line 2871
   sp = STACKTOP; //@line 2872
   return;
  }
  ___async_unwind = 0; //@line 2875
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 2876
  $92 = $ReallocAsyncCtx13 + 4 | 0; //@line 2877
  HEAP32[$92 >> 2] = $4; //@line 2878
  $93 = $ReallocAsyncCtx13 + 8 | 0; //@line 2879
  HEAP32[$93 >> 2] = $16; //@line 2880
  sp = STACKTOP; //@line 2881
  return;
 }
 $57 = $4 + 44 | 0; //@line 2884
 $58 = HEAP32[$57 >> 2] | 0; //@line 2885
 if (!$58) {
  $72 = $12 + 12 | 0; //@line 2888
  HEAP32[$72 >> 2] = 0; //@line 2889
  $74 = $14 + 4 | 0; //@line 2891
  HEAP32[$74 >> 2] = 0; //@line 2893
  HEAP32[$74 + 4 >> 2] = 0; //@line 2896
  HEAP32[$14 >> 2] = 3; //@line 2897
  $78 = $14 + 12 | 0; //@line 2898
  HEAP32[$78 >> 2] = 752; //@line 2899
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 2900
  $79 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($12, 100, $14) | 0; //@line 2901
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 2904
   $80 = $ReallocAsyncCtx14 + 4 | 0; //@line 2905
   HEAP32[$80 >> 2] = $78; //@line 2906
   $81 = $ReallocAsyncCtx14 + 8 | 0; //@line 2907
   HEAP32[$81 >> 2] = $12; //@line 2908
   $82 = $ReallocAsyncCtx14 + 12 | 0; //@line 2909
   HEAP32[$82 >> 2] = $72; //@line 2910
   $83 = $ReallocAsyncCtx14 + 16 | 0; //@line 2911
   HEAP32[$83 >> 2] = $14; //@line 2912
   $84 = $ReallocAsyncCtx14 + 20 | 0; //@line 2913
   HEAP32[$84 >> 2] = $16; //@line 2914
   $85 = $ReallocAsyncCtx14 + 24 | 0; //@line 2915
   HEAP32[$85 >> 2] = $4; //@line 2916
   $86 = $ReallocAsyncCtx14 + 28 | 0; //@line 2917
   HEAP32[$86 >> 2] = $26; //@line 2918
   $87 = $ReallocAsyncCtx14 + 32 | 0; //@line 2919
   HEAP32[$87 >> 2] = $4; //@line 2920
   $88 = $ReallocAsyncCtx14 + 36 | 0; //@line 2921
   HEAP32[$88 >> 2] = $22; //@line 2922
   $89 = $ReallocAsyncCtx14 + 40 | 0; //@line 2923
   HEAP32[$89 >> 2] = $57; //@line 2924
   $90 = $ReallocAsyncCtx14 + 44 | 0; //@line 2925
   HEAP32[$90 >> 2] = $18; //@line 2926
   sp = STACKTOP; //@line 2927
   return;
  }
  HEAP32[___async_retval >> 2] = $79; //@line 2931
  ___async_unwind = 0; //@line 2932
  HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 2933
  $80 = $ReallocAsyncCtx14 + 4 | 0; //@line 2934
  HEAP32[$80 >> 2] = $78; //@line 2935
  $81 = $ReallocAsyncCtx14 + 8 | 0; //@line 2936
  HEAP32[$81 >> 2] = $12; //@line 2937
  $82 = $ReallocAsyncCtx14 + 12 | 0; //@line 2938
  HEAP32[$82 >> 2] = $72; //@line 2939
  $83 = $ReallocAsyncCtx14 + 16 | 0; //@line 2940
  HEAP32[$83 >> 2] = $14; //@line 2941
  $84 = $ReallocAsyncCtx14 + 20 | 0; //@line 2942
  HEAP32[$84 >> 2] = $16; //@line 2943
  $85 = $ReallocAsyncCtx14 + 24 | 0; //@line 2944
  HEAP32[$85 >> 2] = $4; //@line 2945
  $86 = $ReallocAsyncCtx14 + 28 | 0; //@line 2946
  HEAP32[$86 >> 2] = $26; //@line 2947
  $87 = $ReallocAsyncCtx14 + 32 | 0; //@line 2948
  HEAP32[$87 >> 2] = $4; //@line 2949
  $88 = $ReallocAsyncCtx14 + 36 | 0; //@line 2950
  HEAP32[$88 >> 2] = $22; //@line 2951
  $89 = $ReallocAsyncCtx14 + 40 | 0; //@line 2952
  HEAP32[$89 >> 2] = $57; //@line 2953
  $90 = $ReallocAsyncCtx14 + 44 | 0; //@line 2954
  HEAP32[$90 >> 2] = $18; //@line 2955
  sp = STACKTOP; //@line 2956
  return;
 } else {
  $61 = HEAP32[$58 + 4 >> 2] | 0; //@line 2960
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 2961
  FUNCTION_TABLE_vii[$61 & 7]($12, $18); //@line 2962
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 2965
   $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 2966
   HEAP32[$62 >> 2] = $12; //@line 2967
   $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 2968
   HEAP32[$63 >> 2] = $14; //@line 2969
   $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 2970
   HEAP32[$64 >> 2] = $16; //@line 2971
   $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 2972
   HEAP32[$65 >> 2] = $4; //@line 2973
   $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 2974
   HEAP32[$66 >> 2] = $4; //@line 2975
   $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 2976
   HEAP32[$67 >> 2] = $57; //@line 2977
   $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 2978
   HEAP32[$68 >> 2] = $22; //@line 2979
   $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 2980
   HEAP32[$69 >> 2] = $57; //@line 2981
   $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 2982
   HEAP32[$70 >> 2] = $18; //@line 2983
   $71 = $ReallocAsyncCtx6 + 40 | 0; //@line 2984
   HEAP32[$71 >> 2] = $26; //@line 2985
   sp = STACKTOP; //@line 2986
   return;
  }
  ___async_unwind = 0; //@line 2989
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 2990
  $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 2991
  HEAP32[$62 >> 2] = $12; //@line 2992
  $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 2993
  HEAP32[$63 >> 2] = $14; //@line 2994
  $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 2995
  HEAP32[$64 >> 2] = $16; //@line 2996
  $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 2997
  HEAP32[$65 >> 2] = $4; //@line 2998
  $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 2999
  HEAP32[$66 >> 2] = $4; //@line 3000
  $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 3001
  HEAP32[$67 >> 2] = $57; //@line 3002
  $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 3003
  HEAP32[$68 >> 2] = $22; //@line 3004
  $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 3005
  HEAP32[$69 >> 2] = $57; //@line 3006
  $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 3007
  HEAP32[$70 >> 2] = $18; //@line 3008
  $71 = $ReallocAsyncCtx6 + 40 | 0; //@line 3009
  HEAP32[$71 >> 2] = $26; //@line 3010
  sp = STACKTOP; //@line 3011
  return;
 }
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_212($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17095
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17097
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17099
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17101
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17103
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17105
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17107
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17109
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17111
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17113
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17115
 if ($AsyncRetVal | 0) {
  $23 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 17120
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 17121
  FUNCTION_TABLE_vi[$23 & 511]($6); //@line 17122
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 219; //@line 17125
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 17126
   HEAP32[$24 >> 2] = $2; //@line 17127
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 17128
   HEAP32[$25 >> 2] = $8; //@line 17129
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 17130
   HEAP32[$26 >> 2] = $AsyncRetVal; //@line 17131
   sp = STACKTOP; //@line 17132
   return;
  }
  ___async_unwind = 0; //@line 17135
  HEAP32[$ReallocAsyncCtx4 >> 2] = 219; //@line 17136
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 17137
  HEAP32[$24 >> 2] = $2; //@line 17138
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 17139
  HEAP32[$25 >> 2] = $8; //@line 17140
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 17141
  HEAP32[$26 >> 2] = $AsyncRetVal; //@line 17142
  sp = STACKTOP; //@line 17143
  return;
 }
 __ZN6Socket11set_timeoutEi($18, 0); //@line 17146
 $27 = HEAP32[$14 >> 2] | 0; //@line 17147
 $29 = $27; //@line 17149
 if (!$27) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 17151
  $30 = __Znwj(20) | 0; //@line 17152
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 225; //@line 17155
   $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 17156
   HEAP32[$31 >> 2] = $10; //@line 17157
   $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 17158
   HEAP32[$32 >> 2] = $4; //@line 17159
   $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 17160
   HEAP32[$33 >> 2] = $12; //@line 17161
   $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 17162
   HEAP32[$34 >> 2] = $2; //@line 17163
   $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 17164
   HEAP32[$35 >> 2] = $14; //@line 17165
   $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 17166
   HEAP32[$36 >> 2] = $16; //@line 17167
   $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 17168
   HEAP32[$37 >> 2] = $18; //@line 17169
   sp = STACKTOP; //@line 17170
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 17174
  ___async_unwind = 0; //@line 17175
  HEAP32[$ReallocAsyncCtx11 >> 2] = 225; //@line 17176
  $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 17177
  HEAP32[$31 >> 2] = $10; //@line 17178
  $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 17179
  HEAP32[$32 >> 2] = $4; //@line 17180
  $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 17181
  HEAP32[$33 >> 2] = $12; //@line 17182
  $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 17183
  HEAP32[$34 >> 2] = $2; //@line 17184
  $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 17185
  HEAP32[$35 >> 2] = $14; //@line 17186
  $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 17187
  HEAP32[$36 >> 2] = $16; //@line 17188
  $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 17189
  HEAP32[$37 >> 2] = $18; //@line 17190
  sp = STACKTOP; //@line 17191
  return;
 }
 $39 = $2 + 32 | 0; //@line 17194
 do {
  if (($27 | 0) == ($39 | 0)) {
   $73 = $27; //@line 17198
   $75 = $29; //@line 17198
  } else {
   $41 = $27 + 12 | 0; //@line 17200
   $42 = HEAP32[$41 >> 2] | 0; //@line 17201
   if ($42 | 0) {
    $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 17205
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(44) | 0; //@line 17206
    FUNCTION_TABLE_vi[$45 & 511]($27); //@line 17207
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 226; //@line 17210
     $46 = $ReallocAsyncCtx8 + 4 | 0; //@line 17211
     HEAP32[$46 >> 2] = $10; //@line 17212
     $47 = $ReallocAsyncCtx8 + 8 | 0; //@line 17213
     HEAP32[$47 >> 2] = $4; //@line 17214
     $48 = $ReallocAsyncCtx8 + 12 | 0; //@line 17215
     HEAP32[$48 >> 2] = $12; //@line 17216
     $49 = $ReallocAsyncCtx8 + 16 | 0; //@line 17217
     HEAP32[$49 >> 2] = $2; //@line 17218
     $50 = $ReallocAsyncCtx8 + 20 | 0; //@line 17219
     HEAP32[$50 >> 2] = $27; //@line 17220
     $51 = $ReallocAsyncCtx8 + 24 | 0; //@line 17221
     HEAP32[$51 >> 2] = $39; //@line 17222
     $52 = $ReallocAsyncCtx8 + 28 | 0; //@line 17223
     HEAP32[$52 >> 2] = $16; //@line 17224
     $53 = $ReallocAsyncCtx8 + 32 | 0; //@line 17225
     HEAP32[$53 >> 2] = $18; //@line 17226
     $54 = $ReallocAsyncCtx8 + 36 | 0; //@line 17227
     HEAP32[$54 >> 2] = $41; //@line 17228
     $55 = $ReallocAsyncCtx8 + 40 | 0; //@line 17229
     HEAP32[$55 >> 2] = $14; //@line 17230
     sp = STACKTOP; //@line 17231
     return;
    }
    ___async_unwind = 0; //@line 17234
    HEAP32[$ReallocAsyncCtx8 >> 2] = 226; //@line 17235
    $46 = $ReallocAsyncCtx8 + 4 | 0; //@line 17236
    HEAP32[$46 >> 2] = $10; //@line 17237
    $47 = $ReallocAsyncCtx8 + 8 | 0; //@line 17238
    HEAP32[$47 >> 2] = $4; //@line 17239
    $48 = $ReallocAsyncCtx8 + 12 | 0; //@line 17240
    HEAP32[$48 >> 2] = $12; //@line 17241
    $49 = $ReallocAsyncCtx8 + 16 | 0; //@line 17242
    HEAP32[$49 >> 2] = $2; //@line 17243
    $50 = $ReallocAsyncCtx8 + 20 | 0; //@line 17244
    HEAP32[$50 >> 2] = $27; //@line 17245
    $51 = $ReallocAsyncCtx8 + 24 | 0; //@line 17246
    HEAP32[$51 >> 2] = $39; //@line 17247
    $52 = $ReallocAsyncCtx8 + 28 | 0; //@line 17248
    HEAP32[$52 >> 2] = $16; //@line 17249
    $53 = $ReallocAsyncCtx8 + 32 | 0; //@line 17250
    HEAP32[$53 >> 2] = $18; //@line 17251
    $54 = $ReallocAsyncCtx8 + 36 | 0; //@line 17252
    HEAP32[$54 >> 2] = $41; //@line 17253
    $55 = $ReallocAsyncCtx8 + 40 | 0; //@line 17254
    HEAP32[$55 >> 2] = $14; //@line 17255
    sp = STACKTOP; //@line 17256
    return;
   }
   $56 = $2 + 44 | 0; //@line 17259
   $57 = HEAP32[$56 >> 2] | 0; //@line 17260
   if (!$57) {
    HEAP32[$41 >> 2] = 0; //@line 17263
    $$pre85 = HEAP32[$14 >> 2] | 0; //@line 17264
    $73 = $$pre85; //@line 17266
    $75 = $$pre85; //@line 17266
    break;
   }
   $60 = HEAP32[$57 + 4 >> 2] | 0; //@line 17270
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 17271
   FUNCTION_TABLE_vii[$60 & 7]($27, $39); //@line 17272
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 17275
    $61 = $ReallocAsyncCtx9 + 4 | 0; //@line 17276
    HEAP32[$61 >> 2] = $56; //@line 17277
    $62 = $ReallocAsyncCtx9 + 8 | 0; //@line 17278
    HEAP32[$62 >> 2] = $41; //@line 17279
    $63 = $ReallocAsyncCtx9 + 12 | 0; //@line 17280
    HEAP32[$63 >> 2] = $14; //@line 17281
    $64 = $ReallocAsyncCtx9 + 16 | 0; //@line 17282
    HEAP32[$64 >> 2] = $16; //@line 17283
    $65 = $ReallocAsyncCtx9 + 20 | 0; //@line 17284
    HEAP32[$65 >> 2] = $12; //@line 17285
    $66 = $ReallocAsyncCtx9 + 24 | 0; //@line 17286
    HEAP32[$66 >> 2] = $18; //@line 17287
    $67 = $ReallocAsyncCtx9 + 28 | 0; //@line 17288
    HEAP32[$67 >> 2] = $10; //@line 17289
    $68 = $ReallocAsyncCtx9 + 32 | 0; //@line 17290
    HEAP32[$68 >> 2] = $4; //@line 17291
    $69 = $ReallocAsyncCtx9 + 36 | 0; //@line 17292
    HEAP32[$69 >> 2] = $2; //@line 17293
    sp = STACKTOP; //@line 17294
    return;
   }
   ___async_unwind = 0; //@line 17297
   HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 17298
   $61 = $ReallocAsyncCtx9 + 4 | 0; //@line 17299
   HEAP32[$61 >> 2] = $56; //@line 17300
   $62 = $ReallocAsyncCtx9 + 8 | 0; //@line 17301
   HEAP32[$62 >> 2] = $41; //@line 17302
   $63 = $ReallocAsyncCtx9 + 12 | 0; //@line 17303
   HEAP32[$63 >> 2] = $14; //@line 17304
   $64 = $ReallocAsyncCtx9 + 16 | 0; //@line 17305
   HEAP32[$64 >> 2] = $16; //@line 17306
   $65 = $ReallocAsyncCtx9 + 20 | 0; //@line 17307
   HEAP32[$65 >> 2] = $12; //@line 17308
   $66 = $ReallocAsyncCtx9 + 24 | 0; //@line 17309
   HEAP32[$66 >> 2] = $18; //@line 17310
   $67 = $ReallocAsyncCtx9 + 28 | 0; //@line 17311
   HEAP32[$67 >> 2] = $10; //@line 17312
   $68 = $ReallocAsyncCtx9 + 32 | 0; //@line 17313
   HEAP32[$68 >> 2] = $4; //@line 17314
   $69 = $ReallocAsyncCtx9 + 36 | 0; //@line 17315
   HEAP32[$69 >> 2] = $2; //@line 17316
   sp = STACKTOP; //@line 17317
   return;
  }
 } while (0);
 HEAP32[$73 + 16 >> 2] = HEAP32[$16 >> 2]; //@line 17323
 HEAP32[$12 + 8 >> 2] = 0; //@line 17325
 HEAP32[$12 >> 2] = 228; //@line 17326
 HEAP32[$12 + 4 >> 2] = $75; //@line 17328
 $76 = $12 + 12 | 0; //@line 17329
 HEAP32[$76 >> 2] = 764; //@line 17330
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 17331
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($18, $12); //@line 17332
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 17335
  $77 = $ReallocAsyncCtx18 + 4 | 0; //@line 17336
  HEAP32[$77 >> 2] = $76; //@line 17337
  $78 = $ReallocAsyncCtx18 + 8 | 0; //@line 17338
  HEAP32[$78 >> 2] = $10; //@line 17339
  $79 = $ReallocAsyncCtx18 + 12 | 0; //@line 17340
  HEAP32[$79 >> 2] = $4; //@line 17341
  $80 = $ReallocAsyncCtx18 + 16 | 0; //@line 17342
  HEAP32[$80 >> 2] = $12; //@line 17343
  $81 = $ReallocAsyncCtx18 + 20 | 0; //@line 17344
  HEAP32[$81 >> 2] = $2; //@line 17345
  sp = STACKTOP; //@line 17346
  return;
 }
 ___async_unwind = 0; //@line 17349
 HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 17350
 $77 = $ReallocAsyncCtx18 + 4 | 0; //@line 17351
 HEAP32[$77 >> 2] = $76; //@line 17352
 $78 = $ReallocAsyncCtx18 + 8 | 0; //@line 17353
 HEAP32[$78 >> 2] = $10; //@line 17354
 $79 = $ReallocAsyncCtx18 + 12 | 0; //@line 17355
 HEAP32[$79 >> 2] = $4; //@line 17356
 $80 = $ReallocAsyncCtx18 + 16 | 0; //@line 17357
 HEAP32[$80 >> 2] = $12; //@line 17358
 $81 = $ReallocAsyncCtx18 + 20 | 0; //@line 17359
 HEAP32[$81 >> 2] = $2; //@line 17360
 sp = STACKTOP; //@line 17361
 return;
}
function __ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$2 = 0, $$2$1 = 0, $$2$us = 0, $$2$us$1 = 0, $$pre = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0, $111 = 0, $118 = 0, $12 = 0, $122 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $134 = 0, $139 = 0, $152 = 0, $157 = 0, $160 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $17 = 0, $173 = 0, $186 = 0, $191 = 0, $194 = 0, $24 = 0, $28 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $47 = 0, $54 = 0, $57 = 0, $6 = 0, $65 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $76 = 0, $81 = 0, $88 = 0, $9 = 0, $92 = 0, $98 = 0, label = 0;
 $4 = ($2 | 0) == 0; //@line 6393
 $6 = (HEAP32[1958] | 0) == 0; //@line 6395
 if (!$1) {
  do {
   if ($6) {
    $$2$us = -3006; //@line 6399
   } else {
    $7 = _emscripten_asm_const_i(9) | 0; //@line 6401
    $9 = (($7 | 0) < 0) << 31 >> 31; //@line 6403
    $10 = HEAP32[1958] | 0; //@line 6404
    $12 = $10 + 24 | 0; //@line 6406
    $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 6411
    $24 = HEAP32[$10 + 20 >> 2] | 0; //@line 6418
    if ($17 >>> 0 < $9 >>> 0 | (($17 | 0) == ($9 | 0) ? (HEAP32[$12 >> 2] | 0) >>> 0 < $7 >>> 0 : 0)) {
     if (!$24) {
      $34 = $10; //@line 6422
      label = 11; //@line 6423
     } else {
      __ZdlPv($24); //@line 6425
      $$pre35 = HEAP32[1958] | 0; //@line 6426
      if ($$pre35 | 0) {
       $34 = $$pre35; //@line 6429
       label = 11; //@line 6430
      }
     }
     if ((label | 0) == 11) {
      __ZdlPv($34); //@line 6434
     }
     HEAP32[1958] = 0; //@line 6436
     $$2$us = -3006; //@line 6437
     break;
    } else {
     if (_strcmp($24, $0) | 0) {
      $$2$us = -3006; //@line 6443
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$10 >> 2]; //@line 6447
      HEAP32[$2 + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 6447
      HEAP32[$2 + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 6447
      HEAP32[$2 + 12 >> 2] = HEAP32[$10 + 12 >> 2]; //@line 6447
      HEAP32[$2 + 16 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 6447
     }
     $28 = $10 + 32 | 0; //@line 6450
     HEAP32[$28 >> 2] = $7; //@line 6452
     HEAP32[$28 + 4 >> 2] = $9; //@line 6455
     $$2$us = 0; //@line 6456
     break;
    }
   }
  } while (0);
  do {
   if (!(HEAP32[1959] | 0)) {
    $$2$us$1 = $$2$us; //@line 6465
   } else {
    $71 = _emscripten_asm_const_i(9) | 0; //@line 6467
    $73 = (($71 | 0) < 0) << 31 >> 31; //@line 6469
    $74 = HEAP32[1959] | 0; //@line 6470
    $76 = $74 + 24 | 0; //@line 6472
    $81 = HEAP32[$76 + 4 >> 2] | 0; //@line 6477
    $88 = HEAP32[$74 + 20 >> 2] | 0; //@line 6484
    if ($81 >>> 0 < $73 >>> 0 | (($81 | 0) == ($73 | 0) ? (HEAP32[$76 >> 2] | 0) >>> 0 < $71 >>> 0 : 0)) {
     if (!$88) {
      $98 = $74; //@line 6488
      label = 33; //@line 6489
     } else {
      __ZdlPv($88); //@line 6491
      $$pre36 = HEAP32[1959] | 0; //@line 6492
      if ($$pre36 | 0) {
       $98 = $$pre36; //@line 6495
       label = 33; //@line 6496
      }
     }
     if ((label | 0) == 33) {
      __ZdlPv($98); //@line 6500
     }
     HEAP32[1959] = 0; //@line 6502
     $$2$us$1 = $$2$us; //@line 6503
     break;
    } else {
     if (_strcmp($88, $0) | 0) {
      $$2$us$1 = $$2$us; //@line 6509
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$74 >> 2]; //@line 6513
      HEAP32[$2 + 4 >> 2] = HEAP32[$74 + 4 >> 2]; //@line 6513
      HEAP32[$2 + 8 >> 2] = HEAP32[$74 + 8 >> 2]; //@line 6513
      HEAP32[$2 + 12 >> 2] = HEAP32[$74 + 12 >> 2]; //@line 6513
      HEAP32[$2 + 16 >> 2] = HEAP32[$74 + 16 >> 2]; //@line 6513
     }
     $92 = $74 + 32 | 0; //@line 6516
     HEAP32[$92 >> 2] = $71; //@line 6518
     HEAP32[$92 + 4 >> 2] = $73; //@line 6521
     $$2$us$1 = 0; //@line 6522
     break;
    }
   }
  } while (0);
  if (!(HEAP32[1960] | 0)) {
   $$0$lcssa = $$2$us$1; //@line 6530
   return $$0$lcssa | 0; //@line 6531
  }
  $101 = _emscripten_asm_const_i(9) | 0; //@line 6533
  $103 = (($101 | 0) < 0) << 31 >> 31; //@line 6535
  $104 = HEAP32[1960] | 0; //@line 6536
  $106 = $104 + 24 | 0; //@line 6538
  $111 = HEAP32[$106 + 4 >> 2] | 0; //@line 6543
  $118 = HEAP32[$104 + 20 >> 2] | 0; //@line 6550
  if ($111 >>> 0 < $103 >>> 0 | (($111 | 0) == ($103 | 0) ? (HEAP32[$106 >> 2] | 0) >>> 0 < $101 >>> 0 : 0)) {
   if (!$118) {
    $128 = $104; //@line 6554
    label = 43; //@line 6555
   } else {
    __ZdlPv($118); //@line 6557
    $$pre37 = HEAP32[1960] | 0; //@line 6558
    if ($$pre37 | 0) {
     $128 = $$pre37; //@line 6561
     label = 43; //@line 6562
    }
   }
   if ((label | 0) == 43) {
    __ZdlPv($128); //@line 6566
   }
   HEAP32[1960] = 0; //@line 6568
   $$0$lcssa = $$2$us$1; //@line 6569
   return $$0$lcssa | 0; //@line 6570
  }
  if (_strcmp($118, $0) | 0) {
   $$0$lcssa = $$2$us$1; //@line 6575
   return $$0$lcssa | 0; //@line 6576
  }
  if (!$4) {
   HEAP32[$2 >> 2] = HEAP32[$104 >> 2]; //@line 6579
   HEAP32[$2 + 4 >> 2] = HEAP32[$104 + 4 >> 2]; //@line 6579
   HEAP32[$2 + 8 >> 2] = HEAP32[$104 + 8 >> 2]; //@line 6579
   HEAP32[$2 + 12 >> 2] = HEAP32[$104 + 12 >> 2]; //@line 6579
   HEAP32[$2 + 16 >> 2] = HEAP32[$104 + 16 >> 2]; //@line 6579
  }
  $122 = $104 + 32 | 0; //@line 6582
  HEAP32[$122 >> 2] = $101; //@line 6584
  HEAP32[$122 + 4 >> 2] = $103; //@line 6587
  $$0$lcssa = 0; //@line 6588
  return $$0$lcssa | 0; //@line 6589
 }
 do {
  if ($6) {
   $$2 = -3006; //@line 6593
  } else {
   $37 = _emscripten_asm_const_i(9) | 0; //@line 6595
   $39 = (($37 | 0) < 0) << 31 >> 31; //@line 6597
   $40 = HEAP32[1958] | 0; //@line 6598
   $42 = $40 + 24 | 0; //@line 6600
   $47 = HEAP32[$42 + 4 >> 2] | 0; //@line 6605
   if ($47 >>> 0 < $39 >>> 0 | (($47 | 0) == ($39 | 0) ? (HEAP32[$42 >> 2] | 0) >>> 0 < $37 >>> 0 : 0)) {
    $54 = HEAP32[$40 + 20 >> 2] | 0; //@line 6613
    if (!$54) {
     $57 = $40; //@line 6616
     label = 18; //@line 6617
    } else {
     __ZdlPv($54); //@line 6619
     $$pre = HEAP32[1958] | 0; //@line 6620
     if ($$pre | 0) {
      $57 = $$pre; //@line 6623
      label = 18; //@line 6624
     }
    }
    if ((label | 0) == 18) {
     __ZdlPv($57); //@line 6628
    }
    HEAP32[1958] = 0; //@line 6630
    $$2 = -3006; //@line 6631
    break;
   }
   if ((HEAP32[$40 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$40 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$40 >> 2]; //@line 6643
      HEAP32[$2 + 4 >> 2] = HEAP32[$40 + 4 >> 2]; //@line 6643
      HEAP32[$2 + 8 >> 2] = HEAP32[$40 + 8 >> 2]; //@line 6643
      HEAP32[$2 + 12 >> 2] = HEAP32[$40 + 12 >> 2]; //@line 6643
      HEAP32[$2 + 16 >> 2] = HEAP32[$40 + 16 >> 2]; //@line 6643
     }
     $65 = $40 + 32 | 0; //@line 6646
     HEAP32[$65 >> 2] = $37; //@line 6648
     HEAP32[$65 + 4 >> 2] = $39; //@line 6651
     $$2 = 0; //@line 6652
    } else {
     $$2 = -3006; //@line 6654
    }
   } else {
    $$2 = -3006; //@line 6657
   }
  }
 } while (0);
 do {
  if (!(HEAP32[1959] | 0)) {
   $$2$1 = $$2; //@line 6665
  } else {
   $129 = _emscripten_asm_const_i(9) | 0; //@line 6667
   $131 = (($129 | 0) < 0) << 31 >> 31; //@line 6669
   $132 = HEAP32[1959] | 0; //@line 6670
   $134 = $132 + 24 | 0; //@line 6672
   $139 = HEAP32[$134 + 4 >> 2] | 0; //@line 6677
   if ($139 >>> 0 < $131 >>> 0 | (($139 | 0) == ($131 | 0) ? (HEAP32[$134 >> 2] | 0) >>> 0 < $129 >>> 0 : 0)) {
    $157 = HEAP32[$132 + 20 >> 2] | 0; //@line 6685
    if (!$157) {
     $160 = $132; //@line 6688
     label = 53; //@line 6689
    } else {
     __ZdlPv($157); //@line 6691
     $$pre33 = HEAP32[1959] | 0; //@line 6692
     if ($$pre33 | 0) {
      $160 = $$pre33; //@line 6695
      label = 53; //@line 6696
     }
    }
    if ((label | 0) == 53) {
     __ZdlPv($160); //@line 6700
    }
    HEAP32[1959] = 0; //@line 6702
    $$2$1 = $$2; //@line 6703
    break;
   }
   if ((HEAP32[$132 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$132 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$132 >> 2]; //@line 6715
      HEAP32[$2 + 4 >> 2] = HEAP32[$132 + 4 >> 2]; //@line 6715
      HEAP32[$2 + 8 >> 2] = HEAP32[$132 + 8 >> 2]; //@line 6715
      HEAP32[$2 + 12 >> 2] = HEAP32[$132 + 12 >> 2]; //@line 6715
      HEAP32[$2 + 16 >> 2] = HEAP32[$132 + 16 >> 2]; //@line 6715
     }
     $152 = $132 + 32 | 0; //@line 6718
     HEAP32[$152 >> 2] = $129; //@line 6720
     HEAP32[$152 + 4 >> 2] = $131; //@line 6723
     $$2$1 = 0; //@line 6724
    } else {
     $$2$1 = $$2; //@line 6726
    }
   } else {
    $$2$1 = $$2; //@line 6729
   }
  }
 } while (0);
 if (!(HEAP32[1960] | 0)) {
  $$0$lcssa = $$2$1; //@line 6736
  return $$0$lcssa | 0; //@line 6737
 }
 $163 = _emscripten_asm_const_i(9) | 0; //@line 6739
 $165 = (($163 | 0) < 0) << 31 >> 31; //@line 6741
 $166 = HEAP32[1960] | 0; //@line 6742
 $168 = $166 + 24 | 0; //@line 6744
 $173 = HEAP32[$168 + 4 >> 2] | 0; //@line 6749
 if ($173 >>> 0 < $165 >>> 0 | (($173 | 0) == ($165 | 0) ? (HEAP32[$168 >> 2] | 0) >>> 0 < $163 >>> 0 : 0)) {
  $191 = HEAP32[$166 + 20 >> 2] | 0; //@line 6757
  if (!$191) {
   $194 = $166; //@line 6760
   label = 64; //@line 6761
  } else {
   __ZdlPv($191); //@line 6763
   $$pre34 = HEAP32[1960] | 0; //@line 6764
   if ($$pre34 | 0) {
    $194 = $$pre34; //@line 6767
    label = 64; //@line 6768
   }
  }
  if ((label | 0) == 64) {
   __ZdlPv($194); //@line 6772
  }
  HEAP32[1960] = 0; //@line 6774
  $$0$lcssa = $$2$1; //@line 6775
  return $$0$lcssa | 0; //@line 6776
 }
 if ((HEAP32[$166 >> 2] | 0) != ($1 | 0)) {
  $$0$lcssa = $$2$1; //@line 6781
  return $$0$lcssa | 0; //@line 6782
 }
 if (_strcmp(HEAP32[$166 + 20 >> 2] | 0, $0) | 0) {
  $$0$lcssa = $$2$1; //@line 6789
  return $$0$lcssa | 0; //@line 6790
 }
 if (!$4) {
  HEAP32[$2 >> 2] = HEAP32[$166 >> 2]; //@line 6793
  HEAP32[$2 + 4 >> 2] = HEAP32[$166 + 4 >> 2]; //@line 6793
  HEAP32[$2 + 8 >> 2] = HEAP32[$166 + 8 >> 2]; //@line 6793
  HEAP32[$2 + 12 >> 2] = HEAP32[$166 + 12 >> 2]; //@line 6793
  HEAP32[$2 + 16 >> 2] = HEAP32[$166 + 16 >> 2]; //@line 6793
 }
 $186 = $166 + 32 | 0; //@line 6796
 HEAP32[$186 >> 2] = $163; //@line 6798
 HEAP32[$186 + 4 >> 2] = $165; //@line 6801
 $$0$lcssa = 0; //@line 6802
 return $$0$lcssa | 0; //@line 6803
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 18000
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 18001
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 18002
 $d_sroa_0_0_extract_trunc = $b$0; //@line 18003
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 18004
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 18005
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 18007
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 18010
    HEAP32[$rem + 4 >> 2] = 0; //@line 18011
   }
   $_0$1 = 0; //@line 18013
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 18014
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18015
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 18018
    $_0$0 = 0; //@line 18019
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18020
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 18022
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 18023
   $_0$1 = 0; //@line 18024
   $_0$0 = 0; //@line 18025
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18026
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 18029
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 18034
     HEAP32[$rem + 4 >> 2] = 0; //@line 18035
    }
    $_0$1 = 0; //@line 18037
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 18038
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18039
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 18043
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 18044
    }
    $_0$1 = 0; //@line 18046
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 18047
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18048
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 18050
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 18053
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 18054
    }
    $_0$1 = 0; //@line 18056
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 18057
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18058
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 18061
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 18063
    $58 = 31 - $51 | 0; //@line 18064
    $sr_1_ph = $57; //@line 18065
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 18066
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 18067
    $q_sroa_0_1_ph = 0; //@line 18068
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 18069
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 18073
    $_0$0 = 0; //@line 18074
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18075
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 18077
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 18078
   $_0$1 = 0; //@line 18079
   $_0$0 = 0; //@line 18080
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18081
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 18085
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 18087
     $126 = 31 - $119 | 0; //@line 18088
     $130 = $119 - 31 >> 31; //@line 18089
     $sr_1_ph = $125; //@line 18090
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 18091
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 18092
     $q_sroa_0_1_ph = 0; //@line 18093
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 18094
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 18098
     $_0$0 = 0; //@line 18099
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18100
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 18102
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 18103
    $_0$1 = 0; //@line 18104
    $_0$0 = 0; //@line 18105
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18106
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 18108
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 18111
    $89 = 64 - $88 | 0; //@line 18112
    $91 = 32 - $88 | 0; //@line 18113
    $92 = $91 >> 31; //@line 18114
    $95 = $88 - 32 | 0; //@line 18115
    $105 = $95 >> 31; //@line 18116
    $sr_1_ph = $88; //@line 18117
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 18118
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 18119
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 18120
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 18121
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 18125
    HEAP32[$rem + 4 >> 2] = 0; //@line 18126
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 18129
    $_0$0 = $a$0 | 0 | 0; //@line 18130
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18131
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 18133
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 18134
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 18135
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18136
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 18141
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 18142
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 18143
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 18144
  $carry_0_lcssa$1 = 0; //@line 18145
  $carry_0_lcssa$0 = 0; //@line 18146
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 18148
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 18149
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 18150
  $137$1 = tempRet0; //@line 18151
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 18152
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 18153
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 18154
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 18155
  $sr_1202 = $sr_1_ph; //@line 18156
  $carry_0203 = 0; //@line 18157
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 18159
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 18160
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 18161
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 18162
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 18163
   $150$1 = tempRet0; //@line 18164
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 18165
   $carry_0203 = $151$0 & 1; //@line 18166
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 18168
   $r_sroa_1_1200 = tempRet0; //@line 18169
   $sr_1202 = $sr_1202 - 1 | 0; //@line 18170
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 18182
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 18183
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 18184
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 18185
  $carry_0_lcssa$1 = 0; //@line 18186
  $carry_0_lcssa$0 = $carry_0203; //@line 18187
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 18189
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 18190
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 18193
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 18194
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 18196
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 18197
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 18198
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15144
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15150
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15159
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15164
      $19 = $1 + 44 | 0; //@line 15165
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 15174
      $26 = $1 + 52 | 0; //@line 15175
      $27 = $1 + 53 | 0; //@line 15176
      $28 = $1 + 54 | 0; //@line 15177
      $29 = $0 + 8 | 0; //@line 15178
      $30 = $1 + 24 | 0; //@line 15179
      $$081$off0 = 0; //@line 15180
      $$084 = $0 + 16 | 0; //@line 15180
      $$085$off0 = 0; //@line 15180
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 15184
        label = 20; //@line 15185
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 15188
       HEAP8[$27 >> 0] = 0; //@line 15189
       $AsyncCtx15 = _emscripten_alloc_async_context(52, sp) | 0; //@line 15190
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 15191
       if (___async) {
        label = 12; //@line 15194
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15197
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 15201
        label = 20; //@line 15202
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 15209
         $$186$off0 = $$085$off0; //@line 15209
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 15218
           label = 20; //@line 15219
           break L10;
          } else {
           $$182$off0 = 1; //@line 15222
           $$186$off0 = $$085$off0; //@line 15222
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 15229
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 15236
          break L10;
         } else {
          $$182$off0 = 1; //@line 15239
          $$186$off0 = 1; //@line 15239
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 15244
       $$084 = $$084 + 8 | 0; //@line 15244
       $$085$off0 = $$186$off0; //@line 15244
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 356; //@line 15247
       HEAP32[$AsyncCtx15 + 4 >> 2] = $25; //@line 15249
       HEAP32[$AsyncCtx15 + 8 >> 2] = $30; //@line 15251
       HEAP32[$AsyncCtx15 + 12 >> 2] = $26; //@line 15253
       HEAP32[$AsyncCtx15 + 16 >> 2] = $27; //@line 15255
       HEAP32[$AsyncCtx15 + 20 >> 2] = $1; //@line 15257
       HEAP32[$AsyncCtx15 + 24 >> 2] = $2; //@line 15259
       HEAP8[$AsyncCtx15 + 28 >> 0] = $4 & 1; //@line 15262
       HEAP8[$AsyncCtx15 + 29 >> 0] = $$081$off0 & 1; //@line 15265
       HEAP8[$AsyncCtx15 + 30 >> 0] = $$085$off0 & 1; //@line 15268
       HEAP32[$AsyncCtx15 + 32 >> 2] = $$084; //@line 15270
       HEAP32[$AsyncCtx15 + 36 >> 2] = $29; //@line 15272
       HEAP32[$AsyncCtx15 + 40 >> 2] = $28; //@line 15274
       HEAP32[$AsyncCtx15 + 44 >> 2] = $13; //@line 15276
       HEAP32[$AsyncCtx15 + 48 >> 2] = $19; //@line 15278
       sp = STACKTOP; //@line 15279
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 15285
         $61 = $1 + 40 | 0; //@line 15286
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 15289
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 15297
           if ($$283$off0) {
            label = 25; //@line 15299
            break;
           } else {
            $69 = 4; //@line 15302
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 15309
        } else {
         $69 = 4; //@line 15311
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 15316
      }
      HEAP32[$19 >> 2] = $69; //@line 15318
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 15327
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 15332
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 15333
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15334
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 15335
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 357; //@line 15338
    HEAP32[$AsyncCtx11 + 4 >> 2] = $73; //@line 15340
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 15342
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 15344
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 15346
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4 & 1; //@line 15349
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 15351
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 15353
    sp = STACKTOP; //@line 15354
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15357
   $81 = $0 + 24 | 0; //@line 15358
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 15362
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 15366
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 15373
       $$2 = $81; //@line 15374
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 15386
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 15387
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 15392
        $136 = $$2 + 8 | 0; //@line 15393
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 15396
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 360; //@line 15401
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 15403
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 15405
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 15407
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 15409
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 15411
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 15413
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 15415
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 15418
       sp = STACKTOP; //@line 15419
       return;
      }
      $104 = $1 + 24 | 0; //@line 15422
      $105 = $1 + 54 | 0; //@line 15423
      $$1 = $81; //@line 15424
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15440
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 15441
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15446
       $122 = $$1 + 8 | 0; //@line 15447
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 15450
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 359; //@line 15455
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 15457
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 15459
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 15461
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 15463
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 15465
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 15467
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 15469
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 15471
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 15474
      sp = STACKTOP; //@line 15475
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 15479
    $$0 = $81; //@line 15480
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15487
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 15488
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15493
     $100 = $$0 + 8 | 0; //@line 15494
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 15497
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 358; //@line 15502
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 15504
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 15506
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 15508
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 15510
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 15512
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 15514
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 15517
    sp = STACKTOP; //@line 15518
    return;
   }
  }
 } while (0);
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_70($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22216
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22218
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22220
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22222
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22224
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22226
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22228
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22230
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22232
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22234
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22236
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22238
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22240
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22242
 $42 = HEAP32[$18 >> 2] | 0; //@line 22243
 if ($42 | 0) {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 22247
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 22248
  FUNCTION_TABLE_vi[$45 & 511]($8); //@line 22249
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 260; //@line 22252
   $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 22253
   HEAP32[$46 >> 2] = $2; //@line 22254
   $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 22255
   HEAP32[$47 >> 2] = $4; //@line 22256
   $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 22257
   HEAP32[$48 >> 2] = $6; //@line 22258
   $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 22259
   HEAP32[$49 >> 2] = $8; //@line 22260
   $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 22261
   HEAP32[$50 >> 2] = $10; //@line 22262
   $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 22263
   HEAP32[$51 >> 2] = $12; //@line 22264
   $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 22265
   HEAP32[$52 >> 2] = $14; //@line 22266
   $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 22267
   HEAP32[$53 >> 2] = $16; //@line 22268
   $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 22269
   HEAP32[$54 >> 2] = $18; //@line 22270
   $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 22271
   HEAP32[$55 >> 2] = $20; //@line 22272
   $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 22273
   HEAP32[$56 >> 2] = $22; //@line 22274
   $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 22275
   HEAP32[$57 >> 2] = $24; //@line 22276
   $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 22277
   HEAP32[$58 >> 2] = $26; //@line 22278
   sp = STACKTOP; //@line 22279
   return;
  }
  ___async_unwind = 0; //@line 22282
  HEAP32[$ReallocAsyncCtx2 >> 2] = 260; //@line 22283
  $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 22284
  HEAP32[$46 >> 2] = $2; //@line 22285
  $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 22286
  HEAP32[$47 >> 2] = $4; //@line 22287
  $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 22288
  HEAP32[$48 >> 2] = $6; //@line 22289
  $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 22290
  HEAP32[$49 >> 2] = $8; //@line 22291
  $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 22292
  HEAP32[$50 >> 2] = $10; //@line 22293
  $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 22294
  HEAP32[$51 >> 2] = $12; //@line 22295
  $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 22296
  HEAP32[$52 >> 2] = $14; //@line 22297
  $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 22298
  HEAP32[$53 >> 2] = $16; //@line 22299
  $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 22300
  HEAP32[$54 >> 2] = $18; //@line 22301
  $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 22302
  HEAP32[$55 >> 2] = $20; //@line 22303
  $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 22304
  HEAP32[$56 >> 2] = $22; //@line 22305
  $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 22306
  HEAP32[$57 >> 2] = $24; //@line 22307
  $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 22308
  HEAP32[$58 >> 2] = $26; //@line 22309
  sp = STACKTOP; //@line 22310
  return;
 }
 $59 = HEAP32[$6 >> 2] | 0; //@line 22313
 if (!$59) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 22316
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 22317
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 22320
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 22321
   HEAP32[$28 >> 2] = $2; //@line 22322
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 22323
   HEAP32[$29 >> 2] = $4; //@line 22324
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 22325
   HEAP32[$30 >> 2] = $6; //@line 22326
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 22327
   HEAP32[$31 >> 2] = $8; //@line 22328
   $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 22329
   HEAP32[$32 >> 2] = $10; //@line 22330
   $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 22331
   HEAP32[$33 >> 2] = $12; //@line 22332
   $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 22333
   HEAP32[$34 >> 2] = $14; //@line 22334
   $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 22335
   HEAP32[$35 >> 2] = $16; //@line 22336
   $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 22337
   HEAP32[$36 >> 2] = $18; //@line 22338
   $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 22339
   HEAP32[$37 >> 2] = $20; //@line 22340
   $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 22341
   HEAP32[$38 >> 2] = $22; //@line 22342
   $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 22343
   HEAP32[$39 >> 2] = $24; //@line 22344
   $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 22345
   HEAP32[$40 >> 2] = $26; //@line 22346
   sp = STACKTOP; //@line 22347
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 22351
  ___async_unwind = 0; //@line 22352
  HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 22353
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 22354
  HEAP32[$28 >> 2] = $2; //@line 22355
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 22356
  HEAP32[$29 >> 2] = $4; //@line 22357
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 22358
  HEAP32[$30 >> 2] = $6; //@line 22359
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 22360
  HEAP32[$31 >> 2] = $8; //@line 22361
  $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 22362
  HEAP32[$32 >> 2] = $10; //@line 22363
  $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 22364
  HEAP32[$33 >> 2] = $12; //@line 22365
  $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 22366
  HEAP32[$34 >> 2] = $14; //@line 22367
  $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 22368
  HEAP32[$35 >> 2] = $16; //@line 22369
  $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 22370
  HEAP32[$36 >> 2] = $18; //@line 22371
  $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 22372
  HEAP32[$37 >> 2] = $20; //@line 22373
  $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 22374
  HEAP32[$38 >> 2] = $22; //@line 22375
  $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 22376
  HEAP32[$39 >> 2] = $24; //@line 22377
  $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 22378
  HEAP32[$40 >> 2] = $26; //@line 22379
  sp = STACKTOP; //@line 22380
  return;
 } else {
  $62 = HEAP32[$59 + 8 >> 2] | 0; //@line 22384
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 22385
  FUNCTION_TABLE_vi[$62 & 511]($4); //@line 22386
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 261; //@line 22389
   $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 22390
   HEAP32[$63 >> 2] = $2; //@line 22391
   $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 22392
   HEAP32[$64 >> 2] = $4; //@line 22393
   $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 22394
   HEAP32[$65 >> 2] = $6; //@line 22395
   $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 22396
   HEAP32[$66 >> 2] = $8; //@line 22397
   $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 22398
   HEAP32[$67 >> 2] = $10; //@line 22399
   $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 22400
   HEAP32[$68 >> 2] = $12; //@line 22401
   $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 22402
   HEAP32[$69 >> 2] = $14; //@line 22403
   $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 22404
   HEAP32[$70 >> 2] = $16; //@line 22405
   $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 22406
   HEAP32[$71 >> 2] = $18; //@line 22407
   $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 22408
   HEAP32[$72 >> 2] = $20; //@line 22409
   $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 22410
   HEAP32[$73 >> 2] = $22; //@line 22411
   $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 22412
   HEAP32[$74 >> 2] = $24; //@line 22413
   $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 22414
   HEAP32[$75 >> 2] = $26; //@line 22415
   sp = STACKTOP; //@line 22416
   return;
  }
  ___async_unwind = 0; //@line 22419
  HEAP32[$ReallocAsyncCtx3 >> 2] = 261; //@line 22420
  $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 22421
  HEAP32[$63 >> 2] = $2; //@line 22422
  $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 22423
  HEAP32[$64 >> 2] = $4; //@line 22424
  $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 22425
  HEAP32[$65 >> 2] = $6; //@line 22426
  $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 22427
  HEAP32[$66 >> 2] = $8; //@line 22428
  $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 22429
  HEAP32[$67 >> 2] = $10; //@line 22430
  $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 22431
  HEAP32[$68 >> 2] = $12; //@line 22432
  $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 22433
  HEAP32[$69 >> 2] = $14; //@line 22434
  $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 22435
  HEAP32[$70 >> 2] = $16; //@line 22436
  $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 22437
  HEAP32[$71 >> 2] = $18; //@line 22438
  $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 22439
  HEAP32[$72 >> 2] = $20; //@line 22440
  $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 22441
  HEAP32[$73 >> 2] = $22; //@line 22442
  $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 22443
  HEAP32[$74 >> 2] = $24; //@line 22444
  $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 22445
  HEAP32[$75 >> 2] = $26; //@line 22446
  sp = STACKTOP; //@line 22447
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1105 = 0, $$3100 = 0, $$byval_copy = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19458
 STACKTOP = STACKTOP + 32 | 0; //@line 19459
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 19459
 $$byval_copy = sp; //@line 19460
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19462
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19464
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19466
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19468
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19470
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19472
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19474
 $16 = HEAP8[$0 + 32 >> 0] | 0; //@line 19476
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19478
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19480
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19482
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 19484
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19486
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19488
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19490
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19492
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19494
 $36 = HEAP8[$0 + 72 >> 0] | 0; //@line 19496
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19498
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19500
 $42 = HEAP8[$0 + 84 >> 0] | 0; //@line 19502
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19504
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 19506
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 19508
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 19510
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 19512
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 19514
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  $59 = 648 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 19521
  HEAP32[$$byval_copy >> 2] = HEAP32[$59 >> 2]; //@line 19522
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$59 + 4 >> 2]; //@line 19522
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$59 + 8 >> 2]; //@line 19522
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$59 + 12 >> 2]; //@line 19522
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$59 + 16 >> 2]; //@line 19522
  __ZN13SocketAddress8set_addrE10nsapi_addr($22, $$byval_copy); //@line 19523
  $$1105 = $36; //@line 19524
  $$3100 = 5; //@line 19524
 } else {
  $$1105 = $36; //@line 19526
  $$3100 = $42; //@line 19526
 }
 __ZN13SocketAddress8set_portEt($22, 53); //@line 19528
 HEAP8[$4 >> 0] = 0; //@line 19529
 HEAP8[$44 >> 0] = 1; //@line 19530
 HEAP8[$46 >> 0] = 1; //@line 19531
 HEAP8[$48 >> 0] = 0; //@line 19532
 HEAP8[$50 >> 0] = 0; //@line 19533
 HEAP8[$52 >> 0] = 1; //@line 19534
 HEAP8[$54 >> 0] = 0; //@line 19535
 HEAP8[$54 + 1 >> 0] = 0; //@line 19535
 HEAP8[$54 + 2 >> 0] = 0; //@line 19535
 HEAP8[$54 + 3 >> 0] = 0; //@line 19535
 HEAP8[$54 + 4 >> 0] = 0; //@line 19535
 HEAP8[$54 + 5 >> 0] = 0; //@line 19535
 if (!(HEAP8[$12 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $14; //@line 19539
 } else {
  $$048$i = $12; //@line 19541
  $$sroa$0$0$in47$i = $14; //@line 19541
  while (1) {
   $62 = _strcspn($$048$i, 5116) | 0; //@line 19543
   $64 = $$sroa$0$0$in47$i + 1 | 0; //@line 19545
   HEAP8[$$sroa$0$0$in47$i >> 0] = $62; //@line 19546
   $65 = $62 & 255; //@line 19547
   _memcpy($64 | 0, $$048$i | 0, $65 | 0) | 0; //@line 19548
   $66 = $64 + $65 | 0; //@line 19549
   $$048$i = $$048$i + ($62 + ((HEAP8[$$048$i + $62 >> 0] | 0) == 46 & 1)) | 0; //@line 19555
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $66; //@line 19559
    break;
   } else {
    $$sroa$0$0$in47$i = $66; //@line 19562
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 19567
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 19569
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $16; //@line 19571
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 19573
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 19576
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 19578
 $82 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($20, $22, $4, $$sroa$0$0$in$lcssa$i + 5 - $18 | 0) | 0; //@line 19579
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 19582
  $83 = $ReallocAsyncCtx4 + 4 | 0; //@line 19583
  HEAP32[$83 >> 2] = $2; //@line 19584
  $84 = $ReallocAsyncCtx4 + 8 | 0; //@line 19585
  HEAP32[$84 >> 2] = $4; //@line 19586
  $85 = $ReallocAsyncCtx4 + 12 | 0; //@line 19587
  HEAP32[$85 >> 2] = $6; //@line 19588
  $86 = $ReallocAsyncCtx4 + 16 | 0; //@line 19589
  HEAP32[$86 >> 2] = $8; //@line 19590
  $87 = $ReallocAsyncCtx4 + 20 | 0; //@line 19591
  HEAP32[$87 >> 2] = $10; //@line 19592
  $88 = $ReallocAsyncCtx4 + 24 | 0; //@line 19593
  HEAP32[$88 >> 2] = $12; //@line 19594
  $89 = $ReallocAsyncCtx4 + 28 | 0; //@line 19595
  HEAP32[$89 >> 2] = $14; //@line 19596
  $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 19597
  HEAP8[$90 >> 0] = $16; //@line 19598
  $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 19599
  HEAP32[$91 >> 2] = $18; //@line 19600
  $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 19601
  HEAP32[$92 >> 2] = $20; //@line 19602
  $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 19603
  HEAP32[$93 >> 2] = $22; //@line 19604
  $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 19605
  HEAP32[$94 >> 2] = $26; //@line 19606
  $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 19607
  HEAP32[$95 >> 2] = $28; //@line 19608
  $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 19609
  HEAP32[$96 >> 2] = $30; //@line 19610
  $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 19611
  HEAP32[$97 >> 2] = $32; //@line 19612
  $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 19613
  HEAP32[$98 >> 2] = $34; //@line 19614
  $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 19615
  HEAP32[$99 >> 2] = $38; //@line 19616
  $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 19617
  HEAP32[$100 >> 2] = $40; //@line 19618
  $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 19619
  HEAP32[$101 >> 2] = $44; //@line 19620
  $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 19621
  HEAP32[$102 >> 2] = $46; //@line 19622
  $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 19623
  HEAP32[$103 >> 2] = $48; //@line 19624
  $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 19625
  HEAP32[$104 >> 2] = $50; //@line 19626
  $105 = $ReallocAsyncCtx4 + 92 | 0; //@line 19627
  HEAP32[$105 >> 2] = $52; //@line 19628
  $106 = $ReallocAsyncCtx4 + 96 | 0; //@line 19629
  HEAP32[$106 >> 2] = $54; //@line 19630
  $107 = $ReallocAsyncCtx4 + 100 | 0; //@line 19631
  HEAP8[$107 >> 0] = $$1105; //@line 19632
  $108 = $ReallocAsyncCtx4 + 101 | 0; //@line 19633
  HEAP8[$108 >> 0] = $24; //@line 19634
  $109 = $ReallocAsyncCtx4 + 102 | 0; //@line 19635
  HEAP8[$109 >> 0] = $$3100; //@line 19636
  sp = STACKTOP; //@line 19637
  STACKTOP = sp; //@line 19638
  return;
 }
 HEAP32[___async_retval >> 2] = $82; //@line 19641
 ___async_unwind = 0; //@line 19642
 HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 19643
 $83 = $ReallocAsyncCtx4 + 4 | 0; //@line 19644
 HEAP32[$83 >> 2] = $2; //@line 19645
 $84 = $ReallocAsyncCtx4 + 8 | 0; //@line 19646
 HEAP32[$84 >> 2] = $4; //@line 19647
 $85 = $ReallocAsyncCtx4 + 12 | 0; //@line 19648
 HEAP32[$85 >> 2] = $6; //@line 19649
 $86 = $ReallocAsyncCtx4 + 16 | 0; //@line 19650
 HEAP32[$86 >> 2] = $8; //@line 19651
 $87 = $ReallocAsyncCtx4 + 20 | 0; //@line 19652
 HEAP32[$87 >> 2] = $10; //@line 19653
 $88 = $ReallocAsyncCtx4 + 24 | 0; //@line 19654
 HEAP32[$88 >> 2] = $12; //@line 19655
 $89 = $ReallocAsyncCtx4 + 28 | 0; //@line 19656
 HEAP32[$89 >> 2] = $14; //@line 19657
 $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 19658
 HEAP8[$90 >> 0] = $16; //@line 19659
 $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 19660
 HEAP32[$91 >> 2] = $18; //@line 19661
 $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 19662
 HEAP32[$92 >> 2] = $20; //@line 19663
 $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 19664
 HEAP32[$93 >> 2] = $22; //@line 19665
 $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 19666
 HEAP32[$94 >> 2] = $26; //@line 19667
 $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 19668
 HEAP32[$95 >> 2] = $28; //@line 19669
 $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 19670
 HEAP32[$96 >> 2] = $30; //@line 19671
 $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 19672
 HEAP32[$97 >> 2] = $32; //@line 19673
 $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 19674
 HEAP32[$98 >> 2] = $34; //@line 19675
 $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 19676
 HEAP32[$99 >> 2] = $38; //@line 19677
 $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 19678
 HEAP32[$100 >> 2] = $40; //@line 19679
 $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 19680
 HEAP32[$101 >> 2] = $44; //@line 19681
 $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 19682
 HEAP32[$102 >> 2] = $46; //@line 19683
 $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 19684
 HEAP32[$103 >> 2] = $48; //@line 19685
 $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 19686
 HEAP32[$104 >> 2] = $50; //@line 19687
 $105 = $ReallocAsyncCtx4 + 92 | 0; //@line 19688
 HEAP32[$105 >> 2] = $52; //@line 19689
 $106 = $ReallocAsyncCtx4 + 96 | 0; //@line 19690
 HEAP32[$106 >> 2] = $54; //@line 19691
 $107 = $ReallocAsyncCtx4 + 100 | 0; //@line 19692
 HEAP8[$107 >> 0] = $$1105; //@line 19693
 $108 = $ReallocAsyncCtx4 + 101 | 0; //@line 19694
 HEAP8[$108 >> 0] = $24; //@line 19695
 $109 = $ReallocAsyncCtx4 + 102 | 0; //@line 19696
 HEAP8[$109 >> 0] = $$3100; //@line 19697
 sp = STACKTOP; //@line 19698
 STACKTOP = sp; //@line 19699
 return;
}
function __ZL30nsapi_dns_query_async_responsePv($0) {
 $0 = $0 | 0;
 var $$048 = 0, $$049 = 0, $$051 = 0, $$byval_copy27 = 0, $$lcssa = 0, $$pr$i = 0, $$pre = 0, $1 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $40 = 0, $45 = 0, $47 = 0, $54 = 0, $55 = 0, $59 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $77 = 0, $79 = 0, $85 = 0, $91 = 0, $95 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12017
 STACKTOP = STACKTOP + 48 | 0; //@line 12018
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 12018
 $$byval_copy27 = sp + 20 | 0; //@line 12019
 $1 = sp; //@line 12020
 $2 = $0; //@line 12021
 $3 = HEAP32[1961] | 0; //@line 12022
 if (!$3) {
  label = 3; //@line 12025
 } else {
  if ((HEAP32[$3 >> 2] | 0) == ($2 | 0)) {
   $$lcssa = $3; //@line 12030
  } else {
   label = 3; //@line 12032
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = HEAP32[1962] | 0; //@line 12037
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $7; //@line 12043
     break;
    }
   }
   $91 = HEAP32[1963] | 0; //@line 12047
   if ($91 | 0) {
    if ((HEAP32[$91 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $91; //@line 12053
     break;
    }
   }
   $95 = HEAP32[1964] | 0; //@line 12057
   if ($95 | 0) {
    if ((HEAP32[$95 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $95; //@line 12063
     break;
    }
   }
   $99 = HEAP32[1965] | 0; //@line 12067
   if (!$99) {
    STACKTOP = sp; //@line 12070
    return;
   }
   if ((HEAP32[$99 >> 2] | 0) == ($2 | 0)) {
    $$lcssa = $99; //@line 12075
   } else {
    STACKTOP = sp; //@line 12077
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa + 88 >> 2] | 0) != 1) {
  STACKTOP = sp; //@line 12085
  return;
 }
 $14 = $$lcssa + 86 | 0; //@line 12089
 $15 = HEAP8[$14 >> 0] | 0; //@line 12090
 $16 = $15 & 255; //@line 12091
 if (!($15 << 24 >> 24)) {
  $$048 = 0; //@line 12094
  $$049 = HEAP32[$$lcssa + 4 >> 2] | 0; //@line 12094
 } else {
  $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12097
  $19 = __ZnajRKSt9nothrow_t($16 << 6, 9765) | 0; //@line 12098
  if (___async) {
   HEAP32[$AsyncCtx13 >> 2] = 263; //@line 12101
   HEAP32[$AsyncCtx13 + 4 >> 2] = $$lcssa; //@line 12103
   HEAP32[$AsyncCtx13 + 8 >> 2] = $$byval_copy27; //@line 12105
   HEAP32[$AsyncCtx13 + 12 >> 2] = $14; //@line 12107
   HEAP32[$AsyncCtx13 + 16 >> 2] = $16; //@line 12109
   HEAP32[$AsyncCtx13 + 20 >> 2] = $1; //@line 12111
   sp = STACKTOP; //@line 12112
   STACKTOP = sp; //@line 12113
   return;
  }
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12115
  if (!$19) {
   $40 = 0; //@line 12118
  } else {
   $26 = $19 + ($16 << 6) | 0; //@line 12120
   $27 = $19; //@line 12121
   do {
    HEAP32[$1 >> 2] = 0; //@line 12123
    HEAP32[$1 + 4 >> 2] = 0; //@line 12123
    HEAP32[$1 + 8 >> 2] = 0; //@line 12123
    HEAP32[$1 + 12 >> 2] = 0; //@line 12123
    HEAP32[$1 + 16 >> 2] = 0; //@line 12123
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$1 >> 2]; //@line 12124
    HEAP32[$$byval_copy27 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 12124
    HEAP32[$$byval_copy27 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 12124
    HEAP32[$$byval_copy27 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 12124
    HEAP32[$$byval_copy27 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 12124
    __ZN13SocketAddressC2E10nsapi_addrt($27, $$byval_copy27, 0); //@line 12125
    $27 = $27 + 64 | 0; //@line 12126
   } while (($27 | 0) != ($26 | 0));
   $40 = $19; //@line 12129
  }
  $$pre = $$lcssa + 64 | 0; //@line 12138
  if (HEAP8[$14 >> 0] | 0) {
   $$051 = 0; //@line 12140
   do {
    $45 = $40 + ($$051 << 6) | 0; //@line 12142
    $47 = (HEAP32[$$pre >> 2] | 0) + ($$051 * 20 | 0) | 0; //@line 12144
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$47 >> 2]; //@line 12145
    HEAP32[$$byval_copy27 + 4 >> 2] = HEAP32[$47 + 4 >> 2]; //@line 12145
    HEAP32[$$byval_copy27 + 8 >> 2] = HEAP32[$47 + 8 >> 2]; //@line 12145
    HEAP32[$$byval_copy27 + 12 >> 2] = HEAP32[$47 + 12 >> 2]; //@line 12145
    HEAP32[$$byval_copy27 + 16 >> 2] = HEAP32[$47 + 16 >> 2]; //@line 12145
    __ZN13SocketAddress8set_addrE10nsapi_addr($45, $$byval_copy27); //@line 12146
    $$051 = $$051 + 1 | 0; //@line 12147
   } while (($$051 | 0) < (HEAPU8[$14 >> 0] | 0));
  }
  $33 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 12159
  $34 = HEAP32[$$pre >> 2] | 0; //@line 12160
  $36 = HEAP32[$$lcssa + 68 >> 2] | 0; //@line 12162
  $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12163
  __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($33, $34, $36); //@line 12164
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 264; //@line 12167
   HEAP32[$AsyncCtx9 + 4 >> 2] = $$lcssa; //@line 12169
   HEAP32[$AsyncCtx9 + 8 >> 2] = $$byval_copy27; //@line 12171
   HEAP32[$AsyncCtx9 + 12 >> 2] = $40; //@line 12173
   HEAP32[$AsyncCtx9 + 16 >> 2] = $14; //@line 12175
   sp = STACKTOP; //@line 12176
   STACKTOP = sp; //@line 12177
   return;
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12179
  if (!(HEAP32[$$lcssa + 48 >> 2] | 0)) {
   $$048 = $40; //@line 12184
   $$049 = 0; //@line 12184
  } else {
   $$048 = $40; //@line 12188
   $$049 = HEAPU8[$14 >> 0] | 0; //@line 12188
  }
 }
 $54 = $$lcssa + 28 | 0; //@line 12191
 $55 = HEAP32[$54 >> 2] | 0; //@line 12192
 do {
  if (!$55) {
   $67 = 0; //@line 12196
  } else {
   $59 = HEAP32[$55 + 4 >> 2] | 0; //@line 12200
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 12201
   FUNCTION_TABLE_vii[$59 & 7]($$byval_copy27, $$lcssa + 16 | 0); //@line 12202
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 265; //@line 12205
    HEAP32[$AsyncCtx + 4 >> 2] = $54; //@line 12207
    HEAP32[$AsyncCtx + 8 >> 2] = $$byval_copy27; //@line 12209
    HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa; //@line 12211
    HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy27; //@line 12213
    HEAP32[$AsyncCtx + 20 >> 2] = $$048; //@line 12215
    HEAP32[$AsyncCtx + 24 >> 2] = $$049; //@line 12217
    sp = STACKTOP; //@line 12218
    STACKTOP = sp; //@line 12219
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12221
    $67 = HEAP32[$54 >> 2] | 0; //@line 12223
    break;
   }
  }
 } while (0);
 $66 = $$byval_copy27 + 12 | 0; //@line 12228
 HEAP32[$66 >> 2] = $67; //@line 12229
 $68 = HEAP32[$$lcssa >> 2] | 0; //@line 12230
 $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12231
 __ZL28nsapi_dns_query_async_deletei($68); //@line 12232
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 266; //@line 12235
  HEAP32[$AsyncCtx16 + 4 >> 2] = $66; //@line 12237
  HEAP32[$AsyncCtx16 + 8 >> 2] = $$byval_copy27; //@line 12239
  HEAP32[$AsyncCtx16 + 12 >> 2] = $$048; //@line 12241
  HEAP32[$AsyncCtx16 + 16 >> 2] = $$049; //@line 12243
  sp = STACKTOP; //@line 12244
  STACKTOP = sp; //@line 12245
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 12247
 $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12248
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 12249
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 267; //@line 12252
  HEAP32[$AsyncCtx19 + 4 >> 2] = $66; //@line 12254
  HEAP32[$AsyncCtx19 + 8 >> 2] = $$byval_copy27; //@line 12256
  HEAP32[$AsyncCtx19 + 12 >> 2] = $$048; //@line 12258
  HEAP32[$AsyncCtx19 + 16 >> 2] = $$049; //@line 12260
  sp = STACKTOP; //@line 12261
  STACKTOP = sp; //@line 12262
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12264
 $77 = HEAP32[$66 >> 2] | 0; //@line 12265
 do {
  if ($77 | 0) {
   $79 = HEAP32[$77 >> 2] | 0; //@line 12269
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12270
   FUNCTION_TABLE_viii[$79 & 0]($$byval_copy27, $$049, $$048); //@line 12271
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 268; //@line 12274
    HEAP32[$AsyncCtx2 + 4 >> 2] = $66; //@line 12276
    HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy27; //@line 12278
    HEAP32[$AsyncCtx2 + 12 >> 2] = $$048; //@line 12280
    sp = STACKTOP; //@line 12281
    STACKTOP = sp; //@line 12282
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12284
   $$pr$i = HEAP32[$66 >> 2] | 0; //@line 12285
   if ($$pr$i | 0) {
    $85 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 12289
    $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12290
    FUNCTION_TABLE_vi[$85 & 511]($$byval_copy27); //@line 12291
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 269; //@line 12294
     HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy27; //@line 12296
     HEAP32[$AsyncCtx6 + 8 >> 2] = $$048; //@line 12298
     sp = STACKTOP; //@line 12299
     STACKTOP = sp; //@line 12300
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12302
     break;
    }
   }
  }
 } while (0);
 if (!$$048) {
  STACKTOP = sp; //@line 12310
  return;
 }
 __ZdaPv($$048); //@line 12312
 STACKTOP = sp; //@line 12313
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_71($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $10 = 0, $100 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $88 = 0, $94 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22459
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22461
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22463
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22465
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22467
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22469
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22471
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22473
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22475
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22477
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22479
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22481
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22483
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22485
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($2); //@line 22490
  return;
 }
 $33 = (HEAPU8[$2 >> 0] | 0) << 8 | (HEAPU8[$26 >> 0] | 0); //@line 22498
 $34 = $33 & 65535; //@line 22499
 $35 = HEAP32[1961] | 0; //@line 22500
 if (!$35) {
  label = 4; //@line 22503
 } else {
  if (($33 | 0) == (HEAPU16[$35 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $35; //@line 22510
   label = 5; //@line 22511
  } else {
   label = 4; //@line 22513
  }
 }
 do {
  if ((label | 0) == 4) {
   $41 = HEAP32[1962] | 0; //@line 22518
   if ($41 | 0) {
    if (($33 | 0) == (HEAPU16[$41 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $41; //@line 22526
     label = 5; //@line 22527
     break;
    }
   }
   $88 = HEAP32[1963] | 0; //@line 22531
   if ($88 | 0) {
    if (($33 | 0) == (HEAPU16[$88 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $88; //@line 22539
     label = 5; //@line 22540
     break;
    }
   }
   $94 = HEAP32[1964] | 0; //@line 22544
   if ($94 | 0) {
    if (($33 | 0) == (HEAPU16[$94 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $94; //@line 22552
     label = 5; //@line 22553
     break;
    }
   }
   $100 = HEAP32[1965] | 0; //@line 22557
   if ($100 | 0) {
    if (($33 | 0) == (HEAPU16[$100 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $100; //@line 22565
     label = 5; //@line 22566
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
   $63 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 22577
   $$ = $63 >>> 0 > 1 ? $63 : 1; //@line 22579
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 22583
   $66 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 9765) | 0; //@line 22584
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 22587
    $67 = $ReallocAsyncCtx4 + 4 | 0; //@line 22588
    HEAP32[$67 >> 2] = $2; //@line 22589
    $68 = $ReallocAsyncCtx4 + 8 | 0; //@line 22590
    HEAP32[$68 >> 2] = $4; //@line 22591
    $69 = $ReallocAsyncCtx4 + 12 | 0; //@line 22592
    HEAP32[$69 >> 2] = $6; //@line 22593
    $70 = $ReallocAsyncCtx4 + 16 | 0; //@line 22594
    HEAP32[$70 >> 2] = $8; //@line 22595
    $71 = $ReallocAsyncCtx4 + 20 | 0; //@line 22596
    HEAP32[$71 >> 2] = $10; //@line 22597
    $72 = $ReallocAsyncCtx4 + 24 | 0; //@line 22598
    HEAP32[$72 >> 2] = $12; //@line 22599
    $73 = $ReallocAsyncCtx4 + 28 | 0; //@line 22600
    HEAP32[$73 >> 2] = $14; //@line 22601
    $74 = $ReallocAsyncCtx4 + 32 | 0; //@line 22602
    HEAP32[$74 >> 2] = $16; //@line 22603
    $75 = $ReallocAsyncCtx4 + 36 | 0; //@line 22604
    HEAP32[$75 >> 2] = $18; //@line 22605
    $76 = $ReallocAsyncCtx4 + 40 | 0; //@line 22606
    HEAP32[$76 >> 2] = $20; //@line 22607
    $77 = $ReallocAsyncCtx4 + 44 | 0; //@line 22608
    HEAP32[$77 >> 2] = $22; //@line 22609
    $78 = $ReallocAsyncCtx4 + 48 | 0; //@line 22610
    HEAP32[$78 >> 2] = $24; //@line 22611
    $79 = $ReallocAsyncCtx4 + 52 | 0; //@line 22612
    HEAP32[$79 >> 2] = $26; //@line 22613
    $80 = $ReallocAsyncCtx4 + 56 | 0; //@line 22614
    HEAP32[$80 >> 2] = $$lcssa; //@line 22615
    $81 = $ReallocAsyncCtx4 + 60 | 0; //@line 22616
    HEAP16[$81 >> 1] = $34; //@line 22617
    $82 = $ReallocAsyncCtx4 + 64 | 0; //@line 22618
    HEAP32[$82 >> 2] = $$; //@line 22619
    sp = STACKTOP; //@line 22620
    return;
   }
   HEAP32[___async_retval >> 2] = $66; //@line 22624
   ___async_unwind = 0; //@line 22625
   HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 22626
   $67 = $ReallocAsyncCtx4 + 4 | 0; //@line 22627
   HEAP32[$67 >> 2] = $2; //@line 22628
   $68 = $ReallocAsyncCtx4 + 8 | 0; //@line 22629
   HEAP32[$68 >> 2] = $4; //@line 22630
   $69 = $ReallocAsyncCtx4 + 12 | 0; //@line 22631
   HEAP32[$69 >> 2] = $6; //@line 22632
   $70 = $ReallocAsyncCtx4 + 16 | 0; //@line 22633
   HEAP32[$70 >> 2] = $8; //@line 22634
   $71 = $ReallocAsyncCtx4 + 20 | 0; //@line 22635
   HEAP32[$71 >> 2] = $10; //@line 22636
   $72 = $ReallocAsyncCtx4 + 24 | 0; //@line 22637
   HEAP32[$72 >> 2] = $12; //@line 22638
   $73 = $ReallocAsyncCtx4 + 28 | 0; //@line 22639
   HEAP32[$73 >> 2] = $14; //@line 22640
   $74 = $ReallocAsyncCtx4 + 32 | 0; //@line 22641
   HEAP32[$74 >> 2] = $16; //@line 22642
   $75 = $ReallocAsyncCtx4 + 36 | 0; //@line 22643
   HEAP32[$75 >> 2] = $18; //@line 22644
   $76 = $ReallocAsyncCtx4 + 40 | 0; //@line 22645
   HEAP32[$76 >> 2] = $20; //@line 22646
   $77 = $ReallocAsyncCtx4 + 44 | 0; //@line 22647
   HEAP32[$77 >> 2] = $22; //@line 22648
   $78 = $ReallocAsyncCtx4 + 48 | 0; //@line 22649
   HEAP32[$78 >> 2] = $24; //@line 22650
   $79 = $ReallocAsyncCtx4 + 52 | 0; //@line 22651
   HEAP32[$79 >> 2] = $26; //@line 22652
   $80 = $ReallocAsyncCtx4 + 56 | 0; //@line 22653
   HEAP32[$80 >> 2] = $$lcssa; //@line 22654
   $81 = $ReallocAsyncCtx4 + 60 | 0; //@line 22655
   HEAP16[$81 >> 1] = $34; //@line 22656
   $82 = $ReallocAsyncCtx4 + 64 | 0; //@line 22657
   HEAP32[$82 >> 2] = $$; //@line 22658
   sp = STACKTOP; //@line 22659
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 22663
 $46 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 22664
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 22667
  $47 = $ReallocAsyncCtx6 + 4 | 0; //@line 22668
  HEAP32[$47 >> 2] = $2; //@line 22669
  $48 = $ReallocAsyncCtx6 + 8 | 0; //@line 22670
  HEAP32[$48 >> 2] = $4; //@line 22671
  $49 = $ReallocAsyncCtx6 + 12 | 0; //@line 22672
  HEAP32[$49 >> 2] = $6; //@line 22673
  $50 = $ReallocAsyncCtx6 + 16 | 0; //@line 22674
  HEAP32[$50 >> 2] = $8; //@line 22675
  $51 = $ReallocAsyncCtx6 + 20 | 0; //@line 22676
  HEAP32[$51 >> 2] = $10; //@line 22677
  $52 = $ReallocAsyncCtx6 + 24 | 0; //@line 22678
  HEAP32[$52 >> 2] = $12; //@line 22679
  $53 = $ReallocAsyncCtx6 + 28 | 0; //@line 22680
  HEAP32[$53 >> 2] = $14; //@line 22681
  $54 = $ReallocAsyncCtx6 + 32 | 0; //@line 22682
  HEAP32[$54 >> 2] = $16; //@line 22683
  $55 = $ReallocAsyncCtx6 + 36 | 0; //@line 22684
  HEAP32[$55 >> 2] = $18; //@line 22685
  $56 = $ReallocAsyncCtx6 + 40 | 0; //@line 22686
  HEAP32[$56 >> 2] = $20; //@line 22687
  $57 = $ReallocAsyncCtx6 + 44 | 0; //@line 22688
  HEAP32[$57 >> 2] = $22; //@line 22689
  $58 = $ReallocAsyncCtx6 + 48 | 0; //@line 22690
  HEAP32[$58 >> 2] = $24; //@line 22691
  $59 = $ReallocAsyncCtx6 + 52 | 0; //@line 22692
  HEAP32[$59 >> 2] = $26; //@line 22693
  sp = STACKTOP; //@line 22694
  return;
 }
 HEAP32[___async_retval >> 2] = $46; //@line 22698
 ___async_unwind = 0; //@line 22699
 HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 22700
 $47 = $ReallocAsyncCtx6 + 4 | 0; //@line 22701
 HEAP32[$47 >> 2] = $2; //@line 22702
 $48 = $ReallocAsyncCtx6 + 8 | 0; //@line 22703
 HEAP32[$48 >> 2] = $4; //@line 22704
 $49 = $ReallocAsyncCtx6 + 12 | 0; //@line 22705
 HEAP32[$49 >> 2] = $6; //@line 22706
 $50 = $ReallocAsyncCtx6 + 16 | 0; //@line 22707
 HEAP32[$50 >> 2] = $8; //@line 22708
 $51 = $ReallocAsyncCtx6 + 20 | 0; //@line 22709
 HEAP32[$51 >> 2] = $10; //@line 22710
 $52 = $ReallocAsyncCtx6 + 24 | 0; //@line 22711
 HEAP32[$52 >> 2] = $12; //@line 22712
 $53 = $ReallocAsyncCtx6 + 28 | 0; //@line 22713
 HEAP32[$53 >> 2] = $14; //@line 22714
 $54 = $ReallocAsyncCtx6 + 32 | 0; //@line 22715
 HEAP32[$54 >> 2] = $16; //@line 22716
 $55 = $ReallocAsyncCtx6 + 36 | 0; //@line 22717
 HEAP32[$55 >> 2] = $18; //@line 22718
 $56 = $ReallocAsyncCtx6 + 40 | 0; //@line 22719
 HEAP32[$56 >> 2] = $20; //@line 22720
 $57 = $ReallocAsyncCtx6 + 44 | 0; //@line 22721
 HEAP32[$57 >> 2] = $22; //@line 22722
 $58 = $ReallocAsyncCtx6 + 48 | 0; //@line 22723
 HEAP32[$58 >> 2] = $24; //@line 22724
 $59 = $ReallocAsyncCtx6 + 52 | 0; //@line 22725
 HEAP32[$59 >> 2] = $26; //@line 22726
 sp = STACKTOP; //@line 22727
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i20 = 0, $$06 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $50 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $65 = 0, $68 = 0, $75 = 0, $76 = 0, $79 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3512
 STACKTOP = STACKTOP + 32 | 0; //@line 3513
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3513
 $3 = sp + 16 | 0; //@line 3514
 $4 = sp; //@line 3515
 if (!(HEAP8[7600] | 0)) {
  if (___cxa_guard_acquire(7600) | 0) {
   HEAP32[1953] = __ZN4mbed16mbed_event_queueEv() | 0; //@line 3523
  }
 }
 $10 = HEAP32[1953] | 0; //@line 3526
 if (!$10) {
  $$06 = -3007; //@line 3529
  STACKTOP = sp; //@line 3530
  return $$06 | 0; //@line 3530
 }
 $13 = $2 + 12 | 0; //@line 3533
 $14 = HEAP32[$13 >> 2] | 0; //@line 3534
 $15 = ($14 | 0) == 0; //@line 3535
 if (($1 | 0) > 0) {
  do {
   if ($15) {
    $23 = 0; //@line 3539
   } else {
    $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 3542
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 3543
    FUNCTION_TABLE_vii[$17 & 7]($3, $2); //@line 3544
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 102; //@line 3547
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3549
     HEAP32[$AsyncCtx + 8 >> 2] = $10; //@line 3551
     HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 3553
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 3555
     sp = STACKTOP; //@line 3556
     STACKTOP = sp; //@line 3557
     return 0; //@line 3557
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 3559
     $23 = HEAP32[$13 >> 2] | 0; //@line 3561
     break;
    }
   }
  } while (0);
  $22 = $3 + 12 | 0; //@line 3566
  HEAP32[$22 >> 2] = $23; //@line 3567
  $AsyncCtx29 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3568
  $24 = _equeue_alloc($10, 16) | 0; //@line 3569
  if (___async) {
   HEAP32[$AsyncCtx29 >> 2] = 103; //@line 3572
   HEAP32[$AsyncCtx29 + 4 >> 2] = $22; //@line 3574
   HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 3576
   HEAP32[$AsyncCtx29 + 12 >> 2] = $10; //@line 3578
   HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 3580
   HEAP32[$AsyncCtx29 + 20 >> 2] = $22; //@line 3582
   sp = STACKTOP; //@line 3583
   STACKTOP = sp; //@line 3584
   return 0; //@line 3584
  }
  _emscripten_free_async_context($AsyncCtx29 | 0); //@line 3586
  do {
   if (!$24) {
    $$0$i = 0; //@line 3590
   } else {
    $31 = HEAP32[$22 >> 2] | 0; //@line 3592
    do {
     if (!$31) {
      $42 = 0; //@line 3596
     } else {
      $34 = HEAP32[$31 + 4 >> 2] | 0; //@line 3599
      $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3600
      FUNCTION_TABLE_vii[$34 & 7]($24, $3); //@line 3601
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 104; //@line 3604
       HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 3606
       HEAP32[$AsyncCtx2 + 8 >> 2] = $24; //@line 3608
       HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 3610
       HEAP32[$AsyncCtx2 + 16 >> 2] = $10; //@line 3612
       HEAP32[$AsyncCtx2 + 20 >> 2] = $22; //@line 3614
       HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3616
       sp = STACKTOP; //@line 3617
       STACKTOP = sp; //@line 3618
       return 0; //@line 3618
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3620
       $42 = HEAP32[$22 >> 2] | 0; //@line 3622
       break;
      }
     }
    } while (0);
    HEAP32[$24 + 12 >> 2] = $42; //@line 3628
    _equeue_event_delay($24, $1); //@line 3629
    _equeue_event_dtor($24, 105); //@line 3630
    $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3631
    $43 = _equeue_post($10, 106, $24) | 0; //@line 3632
    if (___async) {
     HEAP32[$AsyncCtx23 >> 2] = 107; //@line 3635
     HEAP32[$AsyncCtx23 + 4 >> 2] = $22; //@line 3637
     HEAP32[$AsyncCtx23 + 8 >> 2] = $3; //@line 3639
     sp = STACKTOP; //@line 3640
     STACKTOP = sp; //@line 3641
     return 0; //@line 3641
    } else {
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 3643
     $$0$i = $43; //@line 3644
     break;
    }
   }
  } while (0);
  $46 = ($$0$i | 0) == 0; //@line 3649
  $47 = HEAP32[$22 >> 2] | 0; //@line 3650
  do {
   if ($47 | 0) {
    $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 3655
    $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3656
    FUNCTION_TABLE_vi[$50 & 511]($3); //@line 3657
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 108; //@line 3660
     HEAP8[$AsyncCtx6 + 4 >> 0] = $46 & 1; //@line 3663
     sp = STACKTOP; //@line 3664
     STACKTOP = sp; //@line 3665
     return 0; //@line 3665
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 3667
     break;
    }
   }
  } while (0);
  if ($46) {
   $$06 = -3007; //@line 3673
   STACKTOP = sp; //@line 3674
   return $$06 | 0; //@line 3674
  }
 } else {
  do {
   if ($15) {
    $58 = 0; //@line 3679
   } else {
    $53 = HEAP32[$14 + 4 >> 2] | 0; //@line 3682
    $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3683
    FUNCTION_TABLE_vii[$53 & 7]($4, $2); //@line 3684
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 109; //@line 3687
     HEAP32[$AsyncCtx10 + 4 >> 2] = $4; //@line 3689
     HEAP32[$AsyncCtx10 + 8 >> 2] = $10; //@line 3691
     HEAP32[$AsyncCtx10 + 12 >> 2] = $13; //@line 3693
     sp = STACKTOP; //@line 3694
     STACKTOP = sp; //@line 3695
     return 0; //@line 3695
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 3697
     $58 = HEAP32[$13 >> 2] | 0; //@line 3699
     break;
    }
   }
  } while (0);
  $57 = $4 + 12 | 0; //@line 3704
  HEAP32[$57 >> 2] = $58; //@line 3705
  $AsyncCtx26 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3706
  $59 = _equeue_alloc($10, 16) | 0; //@line 3707
  if (___async) {
   HEAP32[$AsyncCtx26 >> 2] = 110; //@line 3710
   HEAP32[$AsyncCtx26 + 4 >> 2] = $57; //@line 3712
   HEAP32[$AsyncCtx26 + 8 >> 2] = $10; //@line 3714
   HEAP32[$AsyncCtx26 + 12 >> 2] = $4; //@line 3716
   HEAP32[$AsyncCtx26 + 16 >> 2] = $57; //@line 3718
   sp = STACKTOP; //@line 3719
   STACKTOP = sp; //@line 3720
   return 0; //@line 3720
  }
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 3722
  do {
   if (!$59) {
    $$0$i20 = 0; //@line 3726
   } else {
    $65 = HEAP32[$57 >> 2] | 0; //@line 3728
    do {
     if (!$65) {
      $75 = 0; //@line 3732
     } else {
      $68 = HEAP32[$65 + 4 >> 2] | 0; //@line 3735
      $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3736
      FUNCTION_TABLE_vii[$68 & 7]($59, $4); //@line 3737
      if (___async) {
       HEAP32[$AsyncCtx13 >> 2] = 111; //@line 3740
       HEAP32[$AsyncCtx13 + 4 >> 2] = $57; //@line 3742
       HEAP32[$AsyncCtx13 + 8 >> 2] = $59; //@line 3744
       HEAP32[$AsyncCtx13 + 12 >> 2] = $10; //@line 3746
       HEAP32[$AsyncCtx13 + 16 >> 2] = $57; //@line 3748
       HEAP32[$AsyncCtx13 + 20 >> 2] = $4; //@line 3750
       sp = STACKTOP; //@line 3751
       STACKTOP = sp; //@line 3752
       return 0; //@line 3752
      } else {
       _emscripten_free_async_context($AsyncCtx13 | 0); //@line 3754
       $75 = HEAP32[$57 >> 2] | 0; //@line 3756
       break;
      }
     }
    } while (0);
    HEAP32[$59 + 12 >> 2] = $75; //@line 3762
    _equeue_event_dtor($59, 105); //@line 3763
    $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3764
    $76 = _equeue_post($10, 106, $59) | 0; //@line 3765
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 112; //@line 3768
     HEAP32[$AsyncCtx20 + 4 >> 2] = $57; //@line 3770
     HEAP32[$AsyncCtx20 + 8 >> 2] = $4; //@line 3772
     sp = STACKTOP; //@line 3773
     STACKTOP = sp; //@line 3774
     return 0; //@line 3774
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 3776
     $$0$i20 = $76; //@line 3777
     break;
    }
   }
  } while (0);
  $79 = ($$0$i20 | 0) == 0; //@line 3782
  $80 = HEAP32[$57 >> 2] | 0; //@line 3783
  do {
   if ($80 | 0) {
    $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 3788
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3789
    FUNCTION_TABLE_vi[$83 & 511]($4); //@line 3790
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 113; //@line 3793
     HEAP8[$AsyncCtx17 + 4 >> 0] = $79 & 1; //@line 3796
     sp = STACKTOP; //@line 3797
     STACKTOP = sp; //@line 3798
     return 0; //@line 3798
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 3800
     break;
    }
   }
  } while (0);
  if ($79) {
   $$06 = -3007; //@line 3806
   STACKTOP = sp; //@line 3807
   return $$06 | 0; //@line 3807
  }
 }
 $$06 = 0; //@line 3810
 STACKTOP = sp; //@line 3811
 return $$06 | 0; //@line 3811
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_72($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$sroa_idx5$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $74 = 0, $8 = 0, $80 = 0, $86 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 22738
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22740
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22742
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22744
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22746
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($2); //@line 22751
  return;
 }
 $11 = $2 + 1 | 0; //@line 22754
 $12 = $4 + 12 | 0; //@line 22755
 $13 = $6 + 8 | 0; //@line 22756
 $$sroa_idx5$i$i = $6 + 4 | 0; //@line 22757
 $14 = $6 + 12 | 0; //@line 22758
 $20 = (HEAPU8[$2 >> 0] | 0) << 8 | (HEAPU8[$11 >> 0] | 0); //@line 22764
 $21 = $20 & 65535; //@line 22765
 $22 = HEAP32[1961] | 0; //@line 22766
 if (!$22) {
  label = 6; //@line 22769
 } else {
  if (($20 | 0) == (HEAPU16[$22 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $22; //@line 22776
   label = 7; //@line 22777
  } else {
   label = 6; //@line 22779
  }
 }
 do {
  if ((label | 0) == 6) {
   $28 = HEAP32[1962] | 0; //@line 22784
   if ($28 | 0) {
    if (($20 | 0) == (HEAPU16[$28 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $28; //@line 22792
     label = 7; //@line 22793
     break;
    }
   }
   $74 = HEAP32[1963] | 0; //@line 22797
   if ($74 | 0) {
    if (($20 | 0) == (HEAPU16[$74 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $74; //@line 22805
     label = 7; //@line 22806
     break;
    }
   }
   $80 = HEAP32[1964] | 0; //@line 22810
   if ($80 | 0) {
    if (($20 | 0) == (HEAPU16[$80 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $80; //@line 22818
     label = 7; //@line 22819
     break;
    }
   }
   $86 = HEAP32[1965] | 0; //@line 22823
   if ($86 | 0) {
    if (($20 | 0) == (HEAPU16[$86 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $86; //@line 22831
     label = 7; //@line 22832
    }
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
   $49 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 22843
   $$ = $49 >>> 0 > 1 ? $49 : 1; //@line 22845
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 22849
   $52 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 9765) | 0; //@line 22850
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 22853
    $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 22854
    HEAP32[$53 >> 2] = $2; //@line 22855
    $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 22856
    HEAP32[$54 >> 2] = $4; //@line 22857
    $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 22858
    HEAP32[$55 >> 2] = $12; //@line 22859
    $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 22860
    HEAP32[$56 >> 2] = $6; //@line 22861
    $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 22862
    HEAP32[$57 >> 2] = $12; //@line 22863
    $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 22864
    HEAP32[$58 >> 2] = $13; //@line 22865
    $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 22866
    HEAP32[$59 >> 2] = $6; //@line 22867
    $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 22868
    HEAP32[$60 >> 2] = $$sroa_idx5$i$i; //@line 22869
    $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 22870
    HEAP32[$61 >> 2] = $14; //@line 22871
    $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 22872
    HEAP32[$62 >> 2] = $4; //@line 22873
    $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 22874
    HEAP32[$63 >> 2] = $6; //@line 22875
    $64 = $ReallocAsyncCtx4 + 48 | 0; //@line 22876
    HEAP32[$64 >> 2] = $8; //@line 22877
    $65 = $ReallocAsyncCtx4 + 52 | 0; //@line 22878
    HEAP32[$65 >> 2] = $11; //@line 22879
    $66 = $ReallocAsyncCtx4 + 56 | 0; //@line 22880
    HEAP32[$66 >> 2] = $$lcssa; //@line 22881
    $67 = $ReallocAsyncCtx4 + 60 | 0; //@line 22882
    HEAP16[$67 >> 1] = $21; //@line 22883
    $68 = $ReallocAsyncCtx4 + 64 | 0; //@line 22884
    HEAP32[$68 >> 2] = $$; //@line 22885
    sp = STACKTOP; //@line 22886
    return;
   }
   HEAP32[___async_retval >> 2] = $52; //@line 22890
   ___async_unwind = 0; //@line 22891
   HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 22892
   $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 22893
   HEAP32[$53 >> 2] = $2; //@line 22894
   $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 22895
   HEAP32[$54 >> 2] = $4; //@line 22896
   $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 22897
   HEAP32[$55 >> 2] = $12; //@line 22898
   $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 22899
   HEAP32[$56 >> 2] = $6; //@line 22900
   $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 22901
   HEAP32[$57 >> 2] = $12; //@line 22902
   $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 22903
   HEAP32[$58 >> 2] = $13; //@line 22904
   $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 22905
   HEAP32[$59 >> 2] = $6; //@line 22906
   $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 22907
   HEAP32[$60 >> 2] = $$sroa_idx5$i$i; //@line 22908
   $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 22909
   HEAP32[$61 >> 2] = $14; //@line 22910
   $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 22911
   HEAP32[$62 >> 2] = $4; //@line 22912
   $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 22913
   HEAP32[$63 >> 2] = $6; //@line 22914
   $64 = $ReallocAsyncCtx4 + 48 | 0; //@line 22915
   HEAP32[$64 >> 2] = $8; //@line 22916
   $65 = $ReallocAsyncCtx4 + 52 | 0; //@line 22917
   HEAP32[$65 >> 2] = $11; //@line 22918
   $66 = $ReallocAsyncCtx4 + 56 | 0; //@line 22919
   HEAP32[$66 >> 2] = $$lcssa; //@line 22920
   $67 = $ReallocAsyncCtx4 + 60 | 0; //@line 22921
   HEAP16[$67 >> 1] = $21; //@line 22922
   $68 = $ReallocAsyncCtx4 + 64 | 0; //@line 22923
   HEAP32[$68 >> 2] = $$; //@line 22924
   sp = STACKTOP; //@line 22925
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 22929
 $33 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($8, 0, $2, 512) | 0; //@line 22930
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 22933
  $34 = $ReallocAsyncCtx6 + 4 | 0; //@line 22934
  HEAP32[$34 >> 2] = $2; //@line 22935
  $35 = $ReallocAsyncCtx6 + 8 | 0; //@line 22936
  HEAP32[$35 >> 2] = $4; //@line 22937
  $36 = $ReallocAsyncCtx6 + 12 | 0; //@line 22938
  HEAP32[$36 >> 2] = $12; //@line 22939
  $37 = $ReallocAsyncCtx6 + 16 | 0; //@line 22940
  HEAP32[$37 >> 2] = $6; //@line 22941
  $38 = $ReallocAsyncCtx6 + 20 | 0; //@line 22942
  HEAP32[$38 >> 2] = $12; //@line 22943
  $39 = $ReallocAsyncCtx6 + 24 | 0; //@line 22944
  HEAP32[$39 >> 2] = $13; //@line 22945
  $40 = $ReallocAsyncCtx6 + 28 | 0; //@line 22946
  HEAP32[$40 >> 2] = $6; //@line 22947
  $41 = $ReallocAsyncCtx6 + 32 | 0; //@line 22948
  HEAP32[$41 >> 2] = $$sroa_idx5$i$i; //@line 22949
  $42 = $ReallocAsyncCtx6 + 36 | 0; //@line 22950
  HEAP32[$42 >> 2] = $14; //@line 22951
  $43 = $ReallocAsyncCtx6 + 40 | 0; //@line 22952
  HEAP32[$43 >> 2] = $4; //@line 22953
  $44 = $ReallocAsyncCtx6 + 44 | 0; //@line 22954
  HEAP32[$44 >> 2] = $6; //@line 22955
  $45 = $ReallocAsyncCtx6 + 48 | 0; //@line 22956
  HEAP32[$45 >> 2] = $8; //@line 22957
  $46 = $ReallocAsyncCtx6 + 52 | 0; //@line 22958
  HEAP32[$46 >> 2] = $11; //@line 22959
  sp = STACKTOP; //@line 22960
  return;
 }
 HEAP32[___async_retval >> 2] = $33; //@line 22964
 ___async_unwind = 0; //@line 22965
 HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 22966
 $34 = $ReallocAsyncCtx6 + 4 | 0; //@line 22967
 HEAP32[$34 >> 2] = $2; //@line 22968
 $35 = $ReallocAsyncCtx6 + 8 | 0; //@line 22969
 HEAP32[$35 >> 2] = $4; //@line 22970
 $36 = $ReallocAsyncCtx6 + 12 | 0; //@line 22971
 HEAP32[$36 >> 2] = $12; //@line 22972
 $37 = $ReallocAsyncCtx6 + 16 | 0; //@line 22973
 HEAP32[$37 >> 2] = $6; //@line 22974
 $38 = $ReallocAsyncCtx6 + 20 | 0; //@line 22975
 HEAP32[$38 >> 2] = $12; //@line 22976
 $39 = $ReallocAsyncCtx6 + 24 | 0; //@line 22977
 HEAP32[$39 >> 2] = $13; //@line 22978
 $40 = $ReallocAsyncCtx6 + 28 | 0; //@line 22979
 HEAP32[$40 >> 2] = $6; //@line 22980
 $41 = $ReallocAsyncCtx6 + 32 | 0; //@line 22981
 HEAP32[$41 >> 2] = $$sroa_idx5$i$i; //@line 22982
 $42 = $ReallocAsyncCtx6 + 36 | 0; //@line 22983
 HEAP32[$42 >> 2] = $14; //@line 22984
 $43 = $ReallocAsyncCtx6 + 40 | 0; //@line 22985
 HEAP32[$43 >> 2] = $4; //@line 22986
 $44 = $ReallocAsyncCtx6 + 44 | 0; //@line 22987
 HEAP32[$44 >> 2] = $6; //@line 22988
 $45 = $ReallocAsyncCtx6 + 48 | 0; //@line 22989
 HEAP32[$45 >> 2] = $8; //@line 22990
 $46 = $ReallocAsyncCtx6 + 52 | 0; //@line 22991
 HEAP32[$46 >> 2] = $11; //@line 22992
 sp = STACKTOP; //@line 22993
 return;
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12728
 STACKTOP = STACKTOP + 32 | 0; //@line 12729
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12729
 $0 = sp; //@line 12730
 _gpio_init_out($0, 50); //@line 12731
 while (1) {
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12734
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12735
  _wait_ms(150); //@line 12736
  if (___async) {
   label = 3; //@line 12739
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 12742
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12744
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12745
  _wait_ms(150); //@line 12746
  if (___async) {
   label = 5; //@line 12749
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 12752
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12754
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12755
  _wait_ms(150); //@line 12756
  if (___async) {
   label = 7; //@line 12759
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 12762
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12764
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12765
  _wait_ms(150); //@line 12766
  if (___async) {
   label = 9; //@line 12769
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 12772
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12774
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12775
  _wait_ms(150); //@line 12776
  if (___async) {
   label = 11; //@line 12779
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 12782
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12784
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12785
  _wait_ms(150); //@line 12786
  if (___async) {
   label = 13; //@line 12789
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 12792
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12794
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12795
  _wait_ms(150); //@line 12796
  if (___async) {
   label = 15; //@line 12799
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 12802
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12804
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12805
  _wait_ms(150); //@line 12806
  if (___async) {
   label = 17; //@line 12809
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 12812
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12814
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12815
  _wait_ms(400); //@line 12816
  if (___async) {
   label = 19; //@line 12819
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 12822
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12824
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12825
  _wait_ms(400); //@line 12826
  if (___async) {
   label = 21; //@line 12829
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 12832
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12834
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12835
  _wait_ms(400); //@line 12836
  if (___async) {
   label = 23; //@line 12839
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12842
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12844
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12845
  _wait_ms(400); //@line 12846
  if (___async) {
   label = 25; //@line 12849
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12852
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12854
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12855
  _wait_ms(400); //@line 12856
  if (___async) {
   label = 27; //@line 12859
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12862
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12864
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12865
  _wait_ms(400); //@line 12866
  if (___async) {
   label = 29; //@line 12869
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12872
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12874
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12875
  _wait_ms(400); //@line 12876
  if (___async) {
   label = 31; //@line 12879
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12882
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12884
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12885
  _wait_ms(400); //@line 12886
  if (___async) {
   label = 33; //@line 12889
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12892
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 281; //@line 12896
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 12898
   sp = STACKTOP; //@line 12899
   STACKTOP = sp; //@line 12900
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 282; //@line 12904
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 12906
   sp = STACKTOP; //@line 12907
   STACKTOP = sp; //@line 12908
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 283; //@line 12912
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 12914
   sp = STACKTOP; //@line 12915
   STACKTOP = sp; //@line 12916
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 284; //@line 12920
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 12922
   sp = STACKTOP; //@line 12923
   STACKTOP = sp; //@line 12924
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 285; //@line 12928
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 12930
   sp = STACKTOP; //@line 12931
   STACKTOP = sp; //@line 12932
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 286; //@line 12936
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 12938
   sp = STACKTOP; //@line 12939
   STACKTOP = sp; //@line 12940
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 287; //@line 12944
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 12946
   sp = STACKTOP; //@line 12947
   STACKTOP = sp; //@line 12948
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 288; //@line 12952
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 12954
   sp = STACKTOP; //@line 12955
   STACKTOP = sp; //@line 12956
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 289; //@line 12960
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 12962
   sp = STACKTOP; //@line 12963
   STACKTOP = sp; //@line 12964
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 290; //@line 12968
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 12970
   sp = STACKTOP; //@line 12971
   STACKTOP = sp; //@line 12972
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 291; //@line 12976
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 12978
   sp = STACKTOP; //@line 12979
   STACKTOP = sp; //@line 12980
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 292; //@line 12984
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12986
   sp = STACKTOP; //@line 12987
   STACKTOP = sp; //@line 12988
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 293; //@line 12992
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12994
   sp = STACKTOP; //@line 12995
   STACKTOP = sp; //@line 12996
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 294; //@line 13000
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 13002
   sp = STACKTOP; //@line 13003
   STACKTOP = sp; //@line 13004
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 295; //@line 13008
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 13010
   sp = STACKTOP; //@line 13011
   STACKTOP = sp; //@line 13012
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 296; //@line 13016
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13018
   sp = STACKTOP; //@line 13019
   STACKTOP = sp; //@line 13020
   return;
  }
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_112($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 4218
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4222
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4224
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4226
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4228
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4230
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4232
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4234
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4236
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4238
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4240
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4242
 $24 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 4243
 if ($24 | 0) {
  $27 = HEAP32[$24 + 8 >> 2] | 0; //@line 4247
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(44) | 0; //@line 4248
  FUNCTION_TABLE_vi[$27 & 511]($8); //@line 4249
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 180; //@line 4252
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 4253
   HEAP32[$28 >> 2] = $4; //@line 4254
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 4255
   HEAP32[$29 >> 2] = $AsyncRetVal; //@line 4256
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 4257
   HEAP32[$30 >> 2] = $6; //@line 4258
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 4259
   HEAP32[$31 >> 2] = $10; //@line 4260
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 4261
   HEAP32[$32 >> 2] = $16; //@line 4262
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 4263
   HEAP32[$33 >> 2] = $12; //@line 4264
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 4265
   HEAP32[$34 >> 2] = $18; //@line 4266
   $35 = $ReallocAsyncCtx7 + 32 | 0; //@line 4267
   HEAP32[$35 >> 2] = $20; //@line 4268
   $36 = $ReallocAsyncCtx7 + 36 | 0; //@line 4269
   HEAP32[$36 >> 2] = $22; //@line 4270
   $37 = $ReallocAsyncCtx7 + 40 | 0; //@line 4271
   HEAP32[$37 >> 2] = $14; //@line 4272
   sp = STACKTOP; //@line 4273
   return;
  }
  ___async_unwind = 0; //@line 4276
  HEAP32[$ReallocAsyncCtx7 >> 2] = 180; //@line 4277
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 4278
  HEAP32[$28 >> 2] = $4; //@line 4279
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 4280
  HEAP32[$29 >> 2] = $AsyncRetVal; //@line 4281
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 4282
  HEAP32[$30 >> 2] = $6; //@line 4283
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 4284
  HEAP32[$31 >> 2] = $10; //@line 4285
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 4286
  HEAP32[$32 >> 2] = $16; //@line 4287
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 4288
  HEAP32[$33 >> 2] = $12; //@line 4289
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 4290
  HEAP32[$34 >> 2] = $18; //@line 4291
  $35 = $ReallocAsyncCtx7 + 32 | 0; //@line 4292
  HEAP32[$35 >> 2] = $20; //@line 4293
  $36 = $ReallocAsyncCtx7 + 36 | 0; //@line 4294
  HEAP32[$36 >> 2] = $22; //@line 4295
  $37 = $ReallocAsyncCtx7 + 40 | 0; //@line 4296
  HEAP32[$37 >> 2] = $14; //@line 4297
  sp = STACKTOP; //@line 4298
  return;
 }
 $38 = ($AsyncRetVal | 0) == 0; //@line 4301
 $39 = HEAP32[$6 >> 2] | 0; //@line 4302
 if ($39 | 0) {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 4306
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 4307
  FUNCTION_TABLE_vi[$42 & 511]($4); //@line 4308
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 4311
   $43 = $ReallocAsyncCtx8 + 4 | 0; //@line 4312
   HEAP32[$43 >> 2] = $10; //@line 4313
   $44 = $ReallocAsyncCtx8 + 8 | 0; //@line 4314
   HEAP32[$44 >> 2] = $16; //@line 4315
   $45 = $ReallocAsyncCtx8 + 12 | 0; //@line 4316
   HEAP32[$45 >> 2] = $12; //@line 4317
   $46 = $ReallocAsyncCtx8 + 16 | 0; //@line 4318
   $$expand_i1_val = $38 & 1; //@line 4319
   HEAP8[$46 >> 0] = $$expand_i1_val; //@line 4320
   $47 = $ReallocAsyncCtx8 + 20 | 0; //@line 4321
   HEAP32[$47 >> 2] = $18; //@line 4322
   $48 = $ReallocAsyncCtx8 + 24 | 0; //@line 4323
   HEAP32[$48 >> 2] = $20; //@line 4324
   $49 = $ReallocAsyncCtx8 + 28 | 0; //@line 4325
   HEAP32[$49 >> 2] = $22; //@line 4326
   $50 = $ReallocAsyncCtx8 + 32 | 0; //@line 4327
   HEAP32[$50 >> 2] = $14; //@line 4328
   sp = STACKTOP; //@line 4329
   return;
  }
  ___async_unwind = 0; //@line 4332
  HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 4333
  $43 = $ReallocAsyncCtx8 + 4 | 0; //@line 4334
  HEAP32[$43 >> 2] = $10; //@line 4335
  $44 = $ReallocAsyncCtx8 + 8 | 0; //@line 4336
  HEAP32[$44 >> 2] = $16; //@line 4337
  $45 = $ReallocAsyncCtx8 + 12 | 0; //@line 4338
  HEAP32[$45 >> 2] = $12; //@line 4339
  $46 = $ReallocAsyncCtx8 + 16 | 0; //@line 4340
  $$expand_i1_val = $38 & 1; //@line 4341
  HEAP8[$46 >> 0] = $$expand_i1_val; //@line 4342
  $47 = $ReallocAsyncCtx8 + 20 | 0; //@line 4343
  HEAP32[$47 >> 2] = $18; //@line 4344
  $48 = $ReallocAsyncCtx8 + 24 | 0; //@line 4345
  HEAP32[$48 >> 2] = $20; //@line 4346
  $49 = $ReallocAsyncCtx8 + 28 | 0; //@line 4347
  HEAP32[$49 >> 2] = $22; //@line 4348
  $50 = $ReallocAsyncCtx8 + 32 | 0; //@line 4349
  HEAP32[$50 >> 2] = $14; //@line 4350
  sp = STACKTOP; //@line 4351
  return;
 }
 if ($38) {
  HEAP8[8724] = 1; //@line 4355
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 4356
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 4357
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 4360
   $67 = $ReallocAsyncCtx13 + 4 | 0; //@line 4361
   HEAP32[$67 >> 2] = $16; //@line 4362
   $68 = $ReallocAsyncCtx13 + 8 | 0; //@line 4363
   HEAP32[$68 >> 2] = $10; //@line 4364
   sp = STACKTOP; //@line 4365
   return;
  }
  ___async_unwind = 0; //@line 4368
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 4369
  $67 = $ReallocAsyncCtx13 + 4 | 0; //@line 4370
  HEAP32[$67 >> 2] = $16; //@line 4371
  $68 = $ReallocAsyncCtx13 + 8 | 0; //@line 4372
  HEAP32[$68 >> 2] = $10; //@line 4373
  sp = STACKTOP; //@line 4374
  return;
 }
 $51 = HEAP32[$18 >> 2] | 0; //@line 4377
 if ($51 | 0) {
  __ZdlPv($51); //@line 4380
 }
 $53 = HEAP32[$20 >> 2] | 0; //@line 4382
 if ($53 | 0) {
  $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 4386
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 4387
  FUNCTION_TABLE_vi[$56 & 511]($22); //@line 4388
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 4391
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 4392
   HEAP32[$57 >> 2] = $12; //@line 4393
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 4394
   HEAP32[$58 >> 2] = $14; //@line 4395
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 4396
   HEAP32[$59 >> 2] = $10; //@line 4397
   sp = STACKTOP; //@line 4398
   return;
  }
  ___async_unwind = 0; //@line 4401
  HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 4402
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 4403
  HEAP32[$57 >> 2] = $12; //@line 4404
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 4405
  HEAP32[$58 >> 2] = $14; //@line 4406
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 4407
  HEAP32[$59 >> 2] = $10; //@line 4408
  sp = STACKTOP; //@line 4409
  return;
 }
 $61 = HEAP32[$12 + 28 >> 2] | 0; //@line 4413
 if (!$61) {
  __ZdlPv($12); //@line 4416
  HEAP32[___async_retval >> 2] = -3007; //@line 4418
  return;
 }
 $64 = HEAP32[$61 + 8 >> 2] | 0; //@line 4422
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 4423
 FUNCTION_TABLE_vi[$64 & 511]($14); //@line 4424
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 4427
  $65 = $ReallocAsyncCtx10 + 4 | 0; //@line 4428
  HEAP32[$65 >> 2] = $12; //@line 4429
  $66 = $ReallocAsyncCtx10 + 8 | 0; //@line 4430
  HEAP32[$66 >> 2] = $10; //@line 4431
  sp = STACKTOP; //@line 4432
  return;
 }
 ___async_unwind = 0; //@line 4435
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 4436
 $65 = $ReallocAsyncCtx10 + 4 | 0; //@line 4437
 HEAP32[$65 >> 2] = $12; //@line 4438
 $66 = $ReallocAsyncCtx10 + 8 | 0; //@line 4439
 HEAP32[$66 >> 2] = $10; //@line 4440
 sp = STACKTOP; //@line 4441
 return;
}
function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149; //@line 7509
   $$0106$ph = 24; //@line 7509
   label = 4; //@line 7510
   break;
  }
 case 1:
  {
   $$0105$ph = -1074; //@line 7514
   $$0106$ph = 53; //@line 7514
   label = 4; //@line 7515
   break;
  }
 case 2:
  {
   $$0105$ph = -1074; //@line 7519
   $$0106$ph = 53; //@line 7519
   label = 4; //@line 7520
   break;
  }
 default:
  {
   $$0114 = 0.0; //@line 7524
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0; //@line 7529
   $4 = $0 + 100 | 0; //@line 7530
   do {
    $5 = HEAP32[$3 >> 2] | 0; //@line 7532
    if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $5 + 1; //@line 7537
     $12 = HEAPU8[$5 >> 0] | 0; //@line 7540
    } else {
     $12 = ___shgetc($0) | 0; //@line 7543
    }
   } while ((_isspace($12) | 0) != 0);
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0; //@line 7557
      $19 = HEAP32[$3 >> 2] | 0; //@line 7558
      if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $19 + 1; //@line 7563
       $$0 = HEAPU8[$19 >> 0] | 0; //@line 7566
       $$0113 = $18; //@line 7566
       break L13;
      } else {
       $$0 = ___shgetc($0) | 0; //@line 7570
       $$0113 = $18; //@line 7570
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12; //@line 7576
      $$0113 = 1; //@line 7576
     }
    }
   } while (0);
   $$0107127 = 0; //@line 7580
   $$1128 = $$0; //@line 7580
   while (1) {
    if (($$1128 | 32 | 0) != (HEAP8[4309 + $$0107127 >> 0] | 0)) {
     $$0107$lcssa = $$0107127; //@line 7588
     $$1$lcssa = $$1128; //@line 7588
     break;
    }
    do {
     if ($$0107127 >>> 0 < 7) {
      $32 = HEAP32[$3 >> 2] | 0; //@line 7594
      if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $32 + 1; //@line 7599
       $$2 = HEAPU8[$32 >> 0] | 0; //@line 7602
       break;
      } else {
       $$2 = ___shgetc($0) | 0; //@line 7606
       break;
      }
     } else {
      $$2 = $$1128; //@line 7610
     }
    } while (0);
    $39 = $$0107127 + 1 | 0; //@line 7613
    if ($39 >>> 0 < 8) {
     $$0107127 = $39; //@line 7616
     $$1128 = $$2; //@line 7616
    } else {
     $$0107$lcssa = $39; //@line 7618
     $$1$lcssa = $$2; //@line 7618
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 7628
      break;
     }
    default:
     {
      $42 = ($2 | 0) != 0; //@line 7633
      if ($42 & $$0107$lcssa >>> 0 > 3) {
       if (($$0107$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 7640
        break L29;
       }
      }
      L34 : do {
       if (!$$0107$lcssa) {
        $$2109125 = 0; //@line 7647
        $$3126 = $$1$lcssa; //@line 7647
        while (1) {
         if (($$3126 | 32 | 0) != (HEAP8[5092 + $$2109125 >> 0] | 0)) {
          $$3110 = $$2109125; //@line 7655
          $$5 = $$3126; //@line 7655
          break L34;
         }
         do {
          if ($$2109125 >>> 0 < 2) {
           $63 = HEAP32[$3 >> 2] | 0; //@line 7661
           if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $63 + 1; //@line 7666
            $$4 = HEAPU8[$63 >> 0] | 0; //@line 7669
            break;
           } else {
            $$4 = ___shgetc($0) | 0; //@line 7673
            break;
           }
          } else {
           $$4 = $$3126; //@line 7677
          }
         } while (0);
         $70 = $$2109125 + 1 | 0; //@line 7680
         if ($70 >>> 0 < 3) {
          $$2109125 = $70; //@line 7683
          $$3126 = $$4; //@line 7683
         } else {
          $$3110 = $70; //@line 7685
          $$5 = $$4; //@line 7685
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa; //@line 7690
        $$5 = $$1$lcssa; //@line 7690
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0; //@line 7695
        if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $72 + 1; //@line 7700
         $80 = HEAPU8[$72 >> 0] | 0; //@line 7703
        } else {
         $80 = ___shgetc($0) | 0; //@line 7706
        }
        if (($80 | 0) == 40) {
         $$4111 = 1; //@line 7710
        } else {
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$0114 = nan; //@line 7715
          break L4;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7720
         $$0114 = nan; //@line 7721
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0; //@line 7725
         if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $85 + 1; //@line 7730
          $93 = HEAPU8[$85 >> 0] | 0; //@line 7733
         } else {
          $93 = ___shgetc($0) | 0; //@line 7736
         }
         if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) {
          if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) {
           break;
          }
         }
         $$4111 = $$4111 + 1 | 0; //@line 7753
        }
        if (($93 | 0) == 41) {
         $$0114 = nan; //@line 7757
         break L4;
        }
        $102 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7761
        if (!$102) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7765
        }
        if (!$42) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7769
         ___shlim($0, 0); //@line 7770
         $$0114 = 0.0; //@line 7771
         break L4;
        }
        if (!$$4111) {
         $$0114 = nan; //@line 7776
         break L4;
        } else {
         $$in = $$4111; //@line 7779
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 7782
         if (!$102) {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7786
         }
         if (!$$in) {
          $$0114 = nan; //@line 7790
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        if (($$5 | 0) == 48) {
         $118 = HEAP32[$3 >> 2] | 0; //@line 7801
         if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $118 + 1; //@line 7806
          $126 = HEAPU8[$118 >> 0] | 0; //@line 7809
         } else {
          $126 = ___shgetc($0) | 0; //@line 7812
         }
         if (($126 | 32 | 0) == 120) {
          $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7818
          break L4;
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$6 = 48; //@line 7824
         } else {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7828
          $$6 = 48; //@line 7829
         }
        } else {
         $$6 = $$5; //@line 7832
        }
        $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7835
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$4 >> 2] | 0) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7845
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7848
        ___shlim($0, 0); //@line 7849
        $$0114 = 0.0; //@line 7850
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $45 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7859
    if (!$45) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7863
    }
    if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
     $$1108 = $$0107$lcssa; //@line 7869
     do {
      if (!$45) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7874
      }
      $$1108 = $$1108 + -1 | 0; //@line 7876
     } while ($$1108 >>> 0 > 3);
    }
   }
   $$0114 = +($$0113 | 0) * inf; //@line 7889
  }
 } while (0);
 return +$$0114;
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
 $2 = $0 + 4 | 0; //@line 3211
 $3 = HEAP32[$2 >> 2] | 0; //@line 3212
 $4 = $3 & -8; //@line 3213
 $5 = $0 + $4 | 0; //@line 3214
 $6 = HEAP32[1973] | 0; //@line 3215
 $8 = $3 & 3; //@line 3217
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) {
  _abort(); //@line 3223
 }
 $11 = $5 + 4 | 0; //@line 3226
 $12 = HEAP32[$11 >> 2] | 0; //@line 3227
 if (!($12 & 1)) {
  _abort(); //@line 3231
 }
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 3238
   return $$2 | 0; //@line 3239
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= HEAP32[2089] << 1 >>> 0) {
    $$2 = $0; //@line 3249
    return $$2 | 0; //@line 3250
   }
  }
  $$2 = 0; //@line 3253
  return $$2 | 0; //@line 3254
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0; //@line 3258
  if ($24 >>> 0 <= 15) {
   $$2 = $0; //@line 3261
   return $$2 | 0; //@line 3262
  }
  $26 = $0 + $1 | 0; //@line 3264
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3268
  HEAP32[$26 + 4 >> 2] = $24 | 3; //@line 3271
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1; //@line 3274
  _dispose_chunk($26, $24); //@line 3275
  $$2 = $0; //@line 3276
  return $$2 | 0; //@line 3277
 }
 if ((HEAP32[1975] | 0) == ($5 | 0)) {
  $37 = (HEAP32[1972] | 0) + $4 | 0; //@line 3283
  $39 = $37 - $1 | 0; //@line 3285
  $40 = $0 + $1 | 0; //@line 3286
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 3288
   return $$2 | 0; //@line 3289
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3296
  HEAP32[$40 + 4 >> 2] = $39 | 1; //@line 3297
  HEAP32[1975] = $40; //@line 3298
  HEAP32[1972] = $39; //@line 3299
  $$2 = $0; //@line 3300
  return $$2 | 0; //@line 3301
 }
 if ((HEAP32[1974] | 0) == ($5 | 0)) {
  $49 = (HEAP32[1971] | 0) + $4 | 0; //@line 3307
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 3310
   return $$2 | 0; //@line 3311
  }
  $51 = $49 - $1 | 0; //@line 3313
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0; //@line 3316
   $54 = $0 + $49 | 0; //@line 3317
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3321
   HEAP32[$53 + 4 >> 2] = $51 | 1; //@line 3324
   HEAP32[$54 >> 2] = $51; //@line 3325
   $60 = $54 + 4 | 0; //@line 3326
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2; //@line 3329
   $storemerge = $53; //@line 3330
   $storemerge4 = $51; //@line 3330
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2; //@line 3335
   $67 = $0 + $49 + 4 | 0; //@line 3337
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1; //@line 3340
   $storemerge = 0; //@line 3341
   $storemerge4 = 0; //@line 3341
  }
  HEAP32[1971] = $storemerge4; //@line 3343
  HEAP32[1974] = $storemerge; //@line 3344
  $$2 = $0; //@line 3345
  return $$2 | 0; //@line 3346
 }
 if ($12 & 2 | 0) {
  $$2 = 0; //@line 3351
  return $$2 | 0; //@line 3352
 }
 $73 = ($12 & -8) + $4 | 0; //@line 3355
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 3358
  return $$2 | 0; //@line 3359
 }
 $75 = $73 - $1 | 0; //@line 3361
 $76 = $12 >>> 3; //@line 3362
 L49 : do {
  if ($12 >>> 0 < 256) {
   $79 = HEAP32[$5 + 8 >> 2] | 0; //@line 3367
   $81 = HEAP32[$5 + 12 >> 2] | 0; //@line 3369
   $83 = 7916 + ($76 << 1 << 2) | 0; //@line 3371
   if (($79 | 0) != ($83 | 0)) {
    if ($6 >>> 0 > $79 >>> 0) {
     _abort(); //@line 3376
    }
    if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) {
     _abort(); //@line 3383
    }
   }
   if (($81 | 0) == ($79 | 0)) {
    HEAP32[1969] = HEAP32[1969] & ~(1 << $76); //@line 3393
    break;
   }
   if (($81 | 0) == ($83 | 0)) {
    $$pre$phiZ2D = $81 + 8 | 0; //@line 3399
   } else {
    if ($6 >>> 0 > $81 >>> 0) {
     _abort(); //@line 3403
    }
    $96 = $81 + 8 | 0; //@line 3406
    if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $96; //@line 3410
    } else {
     _abort(); //@line 3412
    }
   }
   HEAP32[$79 + 12 >> 2] = $81; //@line 3417
   HEAP32[$$pre$phiZ2D >> 2] = $79; //@line 3418
  } else {
   $101 = HEAP32[$5 + 24 >> 2] | 0; //@line 3421
   $103 = HEAP32[$5 + 12 >> 2] | 0; //@line 3423
   do {
    if (($103 | 0) == ($5 | 0)) {
     $114 = $5 + 16 | 0; //@line 3427
     $115 = $114 + 4 | 0; //@line 3428
     $116 = HEAP32[$115 >> 2] | 0; //@line 3429
     if (!$116) {
      $118 = HEAP32[$114 >> 2] | 0; //@line 3432
      if (!$118) {
       $$3 = 0; //@line 3435
       break;
      } else {
       $$1272 = $118; //@line 3438
       $$1275 = $114; //@line 3438
      }
     } else {
      $$1272 = $116; //@line 3441
      $$1275 = $115; //@line 3441
     }
     while (1) {
      $120 = $$1272 + 20 | 0; //@line 3444
      $121 = HEAP32[$120 >> 2] | 0; //@line 3445
      if ($121 | 0) {
       $$1272 = $121; //@line 3448
       $$1275 = $120; //@line 3448
       continue;
      }
      $123 = $$1272 + 16 | 0; //@line 3451
      $124 = HEAP32[$123 >> 2] | 0; //@line 3452
      if (!$124) {
       break;
      } else {
       $$1272 = $124; //@line 3457
       $$1275 = $123; //@line 3457
      }
     }
     if ($6 >>> 0 > $$1275 >>> 0) {
      _abort(); //@line 3462
     } else {
      HEAP32[$$1275 >> 2] = 0; //@line 3465
      $$3 = $$1272; //@line 3466
      break;
     }
    } else {
     $106 = HEAP32[$5 + 8 >> 2] | 0; //@line 3471
     if ($6 >>> 0 > $106 >>> 0) {
      _abort(); //@line 3474
     }
     $108 = $106 + 12 | 0; //@line 3477
     if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) {
      _abort(); //@line 3481
     }
     $111 = $103 + 8 | 0; //@line 3484
     if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$108 >> 2] = $103; //@line 3488
      HEAP32[$111 >> 2] = $106; //@line 3489
      $$3 = $103; //@line 3490
      break;
     } else {
      _abort(); //@line 3493
     }
    }
   } while (0);
   if ($101 | 0) {
    $129 = HEAP32[$5 + 28 >> 2] | 0; //@line 3501
    $130 = 8180 + ($129 << 2) | 0; //@line 3502
    do {
     if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$130 >> 2] = $$3; //@line 3507
      if (!$$3) {
       HEAP32[1970] = HEAP32[1970] & ~(1 << $129); //@line 3514
       break L49;
      }
     } else {
      if ((HEAP32[1973] | 0) >>> 0 > $101 >>> 0) {
       _abort(); //@line 3521
      } else {
       HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3; //@line 3529
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $144 = HEAP32[1973] | 0; //@line 3539
    if ($144 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3542
    }
    HEAP32[$$3 + 24 >> 2] = $101; //@line 3546
    $147 = $5 + 16 | 0; //@line 3547
    $148 = HEAP32[$147 >> 2] | 0; //@line 3548
    do {
     if ($148 | 0) {
      if ($144 >>> 0 > $148 >>> 0) {
       _abort(); //@line 3554
      } else {
       HEAP32[$$3 + 16 >> 2] = $148; //@line 3558
       HEAP32[$148 + 24 >> 2] = $$3; //@line 3560
       break;
      }
     }
    } while (0);
    $154 = HEAP32[$147 + 4 >> 2] | 0; //@line 3566
    if ($154 | 0) {
     if ((HEAP32[1973] | 0) >>> 0 > $154 >>> 0) {
      _abort(); //@line 3572
     } else {
      HEAP32[$$3 + 20 >> 2] = $154; //@line 3576
      HEAP32[$154 + 24 >> 2] = $$3; //@line 3578
      break;
     }
    }
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $73 | $3 & 1 | 2; //@line 3590
  $165 = $0 + $73 + 4 | 0; //@line 3592
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1; //@line 3595
  $$2 = $0; //@line 3596
  return $$2 | 0; //@line 3597
 } else {
  $168 = $0 + $1 | 0; //@line 3599
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3603
  HEAP32[$168 + 4 >> 2] = $75 | 3; //@line 3606
  $175 = $0 + $73 + 4 | 0; //@line 3608
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1; //@line 3611
  _dispose_chunk($168, $75); //@line 3612
  $$2 = $0; //@line 3613
  return $$2 | 0; //@line 3614
 }
 return 0; //@line 3616
}
function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9447
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9447
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9448
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9449
 $4 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9449
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9450
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 9451
 $8 = $6 & 2047; //@line 9453
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 9454
 $11 = $9 & 2047; //@line 9456
 $12 = $3 & -2147483648; //@line 9457
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0; //@line 9458
 $14 = tempRet0; //@line 9459
 L1 : do {
  if (($13 | 0) == 0 & ($14 | 0) == 0) {
   label = 3; //@line 9465
  } else {
   $18 = ___DOUBLE_BITS_563($1) | 0; //@line 9467
   $20 = tempRet0 & 2147483647; //@line 9469
   if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) {
    label = 3; //@line 9478
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 9480
    $30 = tempRet0; //@line 9481
    if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) {
     return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
    }
    if (!$8) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 9497
     $42 = tempRet0; //@line 9498
     if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
      $$073100 = 0; //@line 9505
      $49 = $41; //@line 9505
      $50 = $42; //@line 9505
      while (1) {
       $48 = $$073100 + -1 | 0; //@line 9507
       $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0; //@line 9508
       $50 = tempRet0; //@line 9509
       if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
        $$073$lcssa = $48; //@line 9518
        break;
       } else {
        $$073100 = $48; //@line 9516
       }
      }
     } else {
      $$073$lcssa = 0; //@line 9523
     }
     $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0; //@line 9526
     $$174 = $$073$lcssa; //@line 9528
     $87 = $59; //@line 9528
     $88 = tempRet0; //@line 9528
    } else {
     $$174 = $8; //@line 9532
     $87 = $2; //@line 9532
     $88 = $3 & 1048575 | 1048576; //@line 9532
    }
    if (!$11) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0; //@line 9536
     $65 = tempRet0; //@line 9537
     if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
      $$07194 = 0; //@line 9544
      $72 = $64; //@line 9544
      $73 = $65; //@line 9544
      while (1) {
       $71 = $$07194 + -1 | 0; //@line 9546
       $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0; //@line 9547
       $73 = tempRet0; //@line 9548
       if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
        $$071$lcssa = $71; //@line 9557
        break;
       } else {
        $$07194 = $71; //@line 9555
       }
      }
     } else {
      $$071$lcssa = 0; //@line 9562
     }
     $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0; //@line 9565
     $$172$ph = $$071$lcssa; //@line 9567
     $89 = $82; //@line 9567
     $90 = tempRet0; //@line 9567
    } else {
     $$172$ph = $11; //@line 9571
     $89 = $4; //@line 9571
     $90 = $5 & 1048575 | 1048576; //@line 9571
    }
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0; //@line 9574
    $92 = tempRet0; //@line 9575
    $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295; //@line 9580
    L23 : do {
     if (($$174 | 0) > ($$172$ph | 0)) {
      $$27586 = $$174; //@line 9583
      $101 = $92; //@line 9583
      $156 = $97; //@line 9583
      $157 = $87; //@line 9583
      $158 = $88; //@line 9583
      $99 = $91; //@line 9583
      while (1) {
       if ($156) {
        if (($99 | 0) == 0 & ($101 | 0) == 0) {
         break;
        } else {
         $104 = $99; //@line 9592
         $105 = $101; //@line 9592
        }
       } else {
        $104 = $157; //@line 9595
        $105 = $158; //@line 9595
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0; //@line 9597
       $107 = tempRet0; //@line 9598
       $108 = $$27586 + -1 | 0; //@line 9599
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0; //@line 9601
       $111 = tempRet0; //@line 9602
       $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295; //@line 9607
       if (($108 | 0) > ($$172$ph | 0)) {
        $$27586 = $108; //@line 9609
        $101 = $111; //@line 9609
        $156 = $116; //@line 9609
        $157 = $106; //@line 9609
        $158 = $107; //@line 9609
        $99 = $110; //@line 9609
       } else {
        $$275$lcssa = $108; //@line 9611
        $$lcssa = $116; //@line 9611
        $118 = $110; //@line 9611
        $120 = $111; //@line 9611
        $159 = $106; //@line 9611
        $160 = $107; //@line 9611
        break L23;
       }
      }
      $$070 = $0 * 0.0; //@line 9616
      break L1;
     } else {
      $$275$lcssa = $$174; //@line 9619
      $$lcssa = $97; //@line 9619
      $118 = $91; //@line 9619
      $120 = $92; //@line 9619
      $159 = $87; //@line 9619
      $160 = $88; //@line 9619
     }
    } while (0);
    if ($$lcssa) {
     if (($118 | 0) == 0 & ($120 | 0) == 0) {
      $$070 = $0 * 0.0; //@line 9628
      break;
     } else {
      $123 = $120; //@line 9631
      $125 = $118; //@line 9631
     }
    } else {
     $123 = $160; //@line 9634
     $125 = $159; //@line 9634
    }
    if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
     $$37683 = $$275$lcssa; //@line 9642
     $130 = $125; //@line 9642
     $131 = $123; //@line 9642
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0; //@line 9644
      $133 = tempRet0; //@line 9645
      $134 = $$37683 + -1 | 0; //@line 9646
      if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
       $$37683 = $134; //@line 9653
       $130 = $132; //@line 9653
       $131 = $133; //@line 9653
      } else {
       $$376$lcssa = $134; //@line 9655
       $141 = $132; //@line 9655
       $142 = $133; //@line 9655
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa; //@line 9660
     $141 = $125; //@line 9660
     $142 = $123; //@line 9660
    }
    if (($$376$lcssa | 0) > 0) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0; //@line 9664
     $144 = tempRet0; //@line 9665
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0; //@line 9666
     $153 = $144 | tempRet0; //@line 9670
     $154 = $143 | $145; //@line 9670
    } else {
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0; //@line 9673
     $153 = tempRet0; //@line 9675
     $154 = $150; //@line 9675
    }
    HEAP32[tempDoublePtr >> 2] = $154; //@line 9678
    HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12; //@line 9678
    $$070 = +HEAPF64[tempDoublePtr >> 3]; //@line 9679
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1; //@line 9684
  $$070 = $27 / $27; //@line 9686
 }
 return +$$070;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_204($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16576
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16578
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16580
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16582
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16584
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16586
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16588
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16590
 HEAP32[$AsyncRetVal >> 2] = 0; //@line 16591
 HEAP32[$AsyncRetVal + 4 >> 2] = 0; //@line 16591
 HEAP32[$AsyncRetVal + 8 >> 2] = 0; //@line 16591
 HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 16591
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 16592
 $17 = $8 + 32 | 0; //@line 16594
 do {
  if (($AsyncRetVal | 0) == ($17 | 0)) {
   $51 = $AsyncRetVal; //@line 16598
   $53 = $AsyncRetVal; //@line 16598
  } else {
   $19 = $AsyncRetVal + 12 | 0; //@line 16600
   $20 = HEAP32[$19 >> 2] | 0; //@line 16601
   if ($20 | 0) {
    $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 16605
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(44) | 0; //@line 16606
    FUNCTION_TABLE_vi[$23 & 511]($AsyncRetVal); //@line 16607
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 226; //@line 16610
     $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 16611
     HEAP32[$24 >> 2] = $2; //@line 16612
     $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 16613
     HEAP32[$25 >> 2] = $4; //@line 16614
     $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 16615
     HEAP32[$26 >> 2] = $6; //@line 16616
     $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 16617
     HEAP32[$27 >> 2] = $8; //@line 16618
     $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 16619
     HEAP32[$28 >> 2] = $AsyncRetVal; //@line 16620
     $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 16621
     HEAP32[$29 >> 2] = $17; //@line 16622
     $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 16623
     HEAP32[$30 >> 2] = $12; //@line 16624
     $31 = $ReallocAsyncCtx8 + 32 | 0; //@line 16625
     HEAP32[$31 >> 2] = $14; //@line 16626
     $32 = $ReallocAsyncCtx8 + 36 | 0; //@line 16627
     HEAP32[$32 >> 2] = $19; //@line 16628
     $33 = $ReallocAsyncCtx8 + 40 | 0; //@line 16629
     HEAP32[$33 >> 2] = $10; //@line 16630
     sp = STACKTOP; //@line 16631
     return;
    }
    ___async_unwind = 0; //@line 16634
    HEAP32[$ReallocAsyncCtx8 >> 2] = 226; //@line 16635
    $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 16636
    HEAP32[$24 >> 2] = $2; //@line 16637
    $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 16638
    HEAP32[$25 >> 2] = $4; //@line 16639
    $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 16640
    HEAP32[$26 >> 2] = $6; //@line 16641
    $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 16642
    HEAP32[$27 >> 2] = $8; //@line 16643
    $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 16644
    HEAP32[$28 >> 2] = $AsyncRetVal; //@line 16645
    $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 16646
    HEAP32[$29 >> 2] = $17; //@line 16647
    $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 16648
    HEAP32[$30 >> 2] = $12; //@line 16649
    $31 = $ReallocAsyncCtx8 + 32 | 0; //@line 16650
    HEAP32[$31 >> 2] = $14; //@line 16651
    $32 = $ReallocAsyncCtx8 + 36 | 0; //@line 16652
    HEAP32[$32 >> 2] = $19; //@line 16653
    $33 = $ReallocAsyncCtx8 + 40 | 0; //@line 16654
    HEAP32[$33 >> 2] = $10; //@line 16655
    sp = STACKTOP; //@line 16656
    return;
   }
   $34 = $8 + 44 | 0; //@line 16659
   $35 = HEAP32[$34 >> 2] | 0; //@line 16660
   if (!$35) {
    HEAP32[$19 >> 2] = 0; //@line 16663
    $$pre85 = HEAP32[$10 >> 2] | 0; //@line 16664
    $51 = $$pre85; //@line 16666
    $53 = $$pre85; //@line 16666
    break;
   }
   $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 16670
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 16671
   FUNCTION_TABLE_vii[$38 & 7]($AsyncRetVal, $17); //@line 16672
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 16675
    $39 = $ReallocAsyncCtx9 + 4 | 0; //@line 16676
    HEAP32[$39 >> 2] = $34; //@line 16677
    $40 = $ReallocAsyncCtx9 + 8 | 0; //@line 16678
    HEAP32[$40 >> 2] = $19; //@line 16679
    $41 = $ReallocAsyncCtx9 + 12 | 0; //@line 16680
    HEAP32[$41 >> 2] = $10; //@line 16681
    $42 = $ReallocAsyncCtx9 + 16 | 0; //@line 16682
    HEAP32[$42 >> 2] = $12; //@line 16683
    $43 = $ReallocAsyncCtx9 + 20 | 0; //@line 16684
    HEAP32[$43 >> 2] = $6; //@line 16685
    $44 = $ReallocAsyncCtx9 + 24 | 0; //@line 16686
    HEAP32[$44 >> 2] = $14; //@line 16687
    $45 = $ReallocAsyncCtx9 + 28 | 0; //@line 16688
    HEAP32[$45 >> 2] = $2; //@line 16689
    $46 = $ReallocAsyncCtx9 + 32 | 0; //@line 16690
    HEAP32[$46 >> 2] = $4; //@line 16691
    $47 = $ReallocAsyncCtx9 + 36 | 0; //@line 16692
    HEAP32[$47 >> 2] = $8; //@line 16693
    sp = STACKTOP; //@line 16694
    return;
   }
   ___async_unwind = 0; //@line 16697
   HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 16698
   $39 = $ReallocAsyncCtx9 + 4 | 0; //@line 16699
   HEAP32[$39 >> 2] = $34; //@line 16700
   $40 = $ReallocAsyncCtx9 + 8 | 0; //@line 16701
   HEAP32[$40 >> 2] = $19; //@line 16702
   $41 = $ReallocAsyncCtx9 + 12 | 0; //@line 16703
   HEAP32[$41 >> 2] = $10; //@line 16704
   $42 = $ReallocAsyncCtx9 + 16 | 0; //@line 16705
   HEAP32[$42 >> 2] = $12; //@line 16706
   $43 = $ReallocAsyncCtx9 + 20 | 0; //@line 16707
   HEAP32[$43 >> 2] = $6; //@line 16708
   $44 = $ReallocAsyncCtx9 + 24 | 0; //@line 16709
   HEAP32[$44 >> 2] = $14; //@line 16710
   $45 = $ReallocAsyncCtx9 + 28 | 0; //@line 16711
   HEAP32[$45 >> 2] = $2; //@line 16712
   $46 = $ReallocAsyncCtx9 + 32 | 0; //@line 16713
   HEAP32[$46 >> 2] = $4; //@line 16714
   $47 = $ReallocAsyncCtx9 + 36 | 0; //@line 16715
   HEAP32[$47 >> 2] = $8; //@line 16716
   sp = STACKTOP; //@line 16717
   return;
  }
 } while (0);
 HEAP32[$51 + 16 >> 2] = HEAP32[$12 >> 2]; //@line 16723
 HEAP32[$6 + 8 >> 2] = 0; //@line 16725
 HEAP32[$6 >> 2] = 228; //@line 16726
 HEAP32[$6 + 4 >> 2] = $53; //@line 16728
 $54 = $6 + 12 | 0; //@line 16729
 HEAP32[$54 >> 2] = 764; //@line 16730
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 16731
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($14, $6); //@line 16732
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 16735
  $55 = $ReallocAsyncCtx18 + 4 | 0; //@line 16736
  HEAP32[$55 >> 2] = $54; //@line 16737
  $56 = $ReallocAsyncCtx18 + 8 | 0; //@line 16738
  HEAP32[$56 >> 2] = $2; //@line 16739
  $57 = $ReallocAsyncCtx18 + 12 | 0; //@line 16740
  HEAP32[$57 >> 2] = $4; //@line 16741
  $58 = $ReallocAsyncCtx18 + 16 | 0; //@line 16742
  HEAP32[$58 >> 2] = $6; //@line 16743
  $59 = $ReallocAsyncCtx18 + 20 | 0; //@line 16744
  HEAP32[$59 >> 2] = $8; //@line 16745
  sp = STACKTOP; //@line 16746
  return;
 }
 ___async_unwind = 0; //@line 16749
 HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 16750
 $55 = $ReallocAsyncCtx18 + 4 | 0; //@line 16751
 HEAP32[$55 >> 2] = $54; //@line 16752
 $56 = $ReallocAsyncCtx18 + 8 | 0; //@line 16753
 HEAP32[$56 >> 2] = $2; //@line 16754
 $57 = $ReallocAsyncCtx18 + 12 | 0; //@line 16755
 HEAP32[$57 >> 2] = $4; //@line 16756
 $58 = $ReallocAsyncCtx18 + 16 | 0; //@line 16757
 HEAP32[$58 >> 2] = $6; //@line 16758
 $59 = $ReallocAsyncCtx18 + 20 | 0; //@line 16759
 HEAP32[$59 >> 2] = $8; //@line 16760
 sp = STACKTOP; //@line 16761
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_159($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14068
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14070
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14072
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14074
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14076
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14078
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14080
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14082
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14084
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14086
 $19 = $6 + 12 | 0; //@line 14087
 $20 = HEAP32[$19 >> 2] | 0; //@line 14088
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 14092
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 14093
  FUNCTION_TABLE_vii[$23 & 7]($2, $6); //@line 14094
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 14097
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 14098
   HEAP32[$24 >> 2] = $19; //@line 14099
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 14100
   HEAP32[$25 >> 2] = $2; //@line 14101
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 14102
   HEAP32[$26 >> 2] = $4; //@line 14103
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 14104
   HEAP32[$27 >> 2] = $8; //@line 14105
   $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 14106
   HEAP32[$28 >> 2] = $10; //@line 14107
   $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 14108
   HEAP32[$29 >> 2] = $12; //@line 14109
   $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 14110
   HEAP32[$30 >> 2] = $14; //@line 14111
   $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 14112
   HEAP32[$31 >> 2] = $16; //@line 14113
   $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 14114
   HEAP32[$32 >> 2] = $18; //@line 14115
   sp = STACKTOP; //@line 14116
   return;
  }
  ___async_unwind = 0; //@line 14119
  HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 14120
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 14121
  HEAP32[$24 >> 2] = $19; //@line 14122
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 14123
  HEAP32[$25 >> 2] = $2; //@line 14124
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 14125
  HEAP32[$26 >> 2] = $4; //@line 14126
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 14127
  HEAP32[$27 >> 2] = $8; //@line 14128
  $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 14129
  HEAP32[$28 >> 2] = $10; //@line 14130
  $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 14131
  HEAP32[$29 >> 2] = $12; //@line 14132
  $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 14133
  HEAP32[$30 >> 2] = $14; //@line 14134
  $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 14135
  HEAP32[$31 >> 2] = $16; //@line 14136
  $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 14137
  HEAP32[$32 >> 2] = $18; //@line 14138
  sp = STACKTOP; //@line 14139
  return;
 }
 $33 = $2 + 12 | 0; //@line 14142
 HEAP32[$33 >> 2] = 0; //@line 14143
 $34 = $10 + 12 | 0; //@line 14144
 $35 = HEAP32[$34 >> 2] | 0; //@line 14145
 if (!$35) {
  $48 = $8 + 12 | 0; //@line 14148
  HEAP32[$48 >> 2] = 0; //@line 14149
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 14150
  $49 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($12, $14, $2, $8, $16) | 0; //@line 14151
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 14154
   $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 14155
   HEAP32[$50 >> 2] = $48; //@line 14156
   $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 14157
   HEAP32[$51 >> 2] = $33; //@line 14158
   $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 14159
   HEAP32[$52 >> 2] = $8; //@line 14160
   $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 14161
   HEAP32[$53 >> 2] = $34; //@line 14162
   $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 14163
   HEAP32[$54 >> 2] = $2; //@line 14164
   $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 14165
   HEAP32[$55 >> 2] = $4; //@line 14166
   $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 14167
   HEAP32[$56 >> 2] = $18; //@line 14168
   sp = STACKTOP; //@line 14169
   return;
  }
  HEAP32[___async_retval >> 2] = $49; //@line 14173
  ___async_unwind = 0; //@line 14174
  HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 14175
  $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 14176
  HEAP32[$50 >> 2] = $48; //@line 14177
  $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 14178
  HEAP32[$51 >> 2] = $33; //@line 14179
  $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 14180
  HEAP32[$52 >> 2] = $8; //@line 14181
  $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 14182
  HEAP32[$53 >> 2] = $34; //@line 14183
  $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 14184
  HEAP32[$54 >> 2] = $2; //@line 14185
  $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 14186
  HEAP32[$55 >> 2] = $4; //@line 14187
  $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 14188
  HEAP32[$56 >> 2] = $18; //@line 14189
  sp = STACKTOP; //@line 14190
  return;
 } else {
  $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 14194
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 14195
  FUNCTION_TABLE_vii[$38 & 7]($8, $4); //@line 14196
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 14199
   $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 14200
   HEAP32[$39 >> 2] = $2; //@line 14201
   $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 14202
   HEAP32[$40 >> 2] = $33; //@line 14203
   $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 14204
   HEAP32[$41 >> 2] = $4; //@line 14205
   $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 14206
   HEAP32[$42 >> 2] = $34; //@line 14207
   $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 14208
   HEAP32[$43 >> 2] = $8; //@line 14209
   $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 14210
   HEAP32[$44 >> 2] = $12; //@line 14211
   $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 14212
   HEAP32[$45 >> 2] = $14; //@line 14213
   $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 14214
   HEAP32[$46 >> 2] = $16; //@line 14215
   $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 14216
   HEAP32[$47 >> 2] = $18; //@line 14217
   sp = STACKTOP; //@line 14218
   return;
  }
  ___async_unwind = 0; //@line 14221
  HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 14222
  $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 14223
  HEAP32[$39 >> 2] = $2; //@line 14224
  $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 14225
  HEAP32[$40 >> 2] = $33; //@line 14226
  $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 14227
  HEAP32[$41 >> 2] = $4; //@line 14228
  $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 14229
  HEAP32[$42 >> 2] = $34; //@line 14230
  $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 14231
  HEAP32[$43 >> 2] = $8; //@line 14232
  $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 14233
  HEAP32[$44 >> 2] = $12; //@line 14234
  $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 14235
  HEAP32[$45 >> 2] = $14; //@line 14236
  $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 14237
  HEAP32[$46 >> 2] = $16; //@line 14238
  $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 14239
  HEAP32[$47 >> 2] = $18; //@line 14240
  sp = STACKTOP; //@line 14241
  return;
 }
}
function __ZL28nsapi_dns_query_async_deletei($0) {
 $0 = $0 | 0;
 var $$04011$lcssa = 0, $$1$off0 = 0, $$1$off0$1 = 0, $$1$off0$2 = 0, $$1$off0$3 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $1 = 0, $105 = 0, $109 = 0, $113 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $29 = 0, $33 = 0, $36 = 0, $39 = 0, $44 = 0, $47 = 0, $5 = 0, $50 = 0, $54 = 0, $58 = 0, $62 = 0, $7 = 0, $73 = 0, $83 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10436
 $1 = HEAP32[1961] | 0; //@line 10437
 $2 = ($1 | 0) == 0; //@line 10438
 if ($2) {
  label = 4; //@line 10440
 } else {
  if ((HEAP32[$1 >> 2] | 0) == ($0 | 0)) {
   $$04011$lcssa = 0; //@line 10445
   $$lcssa = $1; //@line 10445
  } else {
   label = 4; //@line 10447
  }
 }
 do {
  if ((label | 0) == 4) {
   $7 = HEAP32[1962] | 0; //@line 10452
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 1; //@line 10458
     $$lcssa = $7; //@line 10458
     break;
    }
   }
   $105 = HEAP32[1963] | 0; //@line 10462
   if ($105 | 0) {
    if ((HEAP32[$105 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 2; //@line 10468
     $$lcssa = $105; //@line 10468
     break;
    }
   }
   $109 = HEAP32[1964] | 0; //@line 10472
   if ($109 | 0) {
    if ((HEAP32[$109 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 3; //@line 10478
     $$lcssa = $109; //@line 10478
     break;
    }
   }
   $113 = HEAP32[1965] | 0; //@line 10482
   if (!$113) {
    return;
   }
   if ((HEAP32[$113 >> 2] | 0) == ($0 | 0)) {
    $$04011$lcssa = 4; //@line 10490
    $$lcssa = $113; //@line 10490
   } else {
    return;
   }
  }
 } while (0);
 $5 = $$lcssa + 8 | 0; //@line 10496
 if ($2 | ($1 | 0) == ($$lcssa | 0)) {
  $$1$off0 = 1; //@line 10500
 } else {
  if (!(HEAP32[$1 + 56 >> 2] | 0)) {
   $$1$off0 = 1; //@line 10506
  } else {
   $$1$off0 = (HEAP32[$1 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10512
  }
 }
 $16 = HEAP32[1962] | 0; //@line 10515
 if (($16 | 0) == 0 | ($16 | 0) == ($$lcssa | 0)) {
  $$1$off0$1 = $$1$off0; //@line 10520
 } else {
  if (!(HEAP32[$16 + 56 >> 2] | 0)) {
   $$1$off0$1 = $$1$off0; //@line 10526
  } else {
   $$1$off0$1 = $$1$off0 & (HEAP32[$16 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10533
  }
 }
 $73 = HEAP32[1963] | 0; //@line 10536
 if (($73 | 0) == 0 | ($73 | 0) == ($$lcssa | 0)) {
  $$1$off0$2 = $$1$off0$1; //@line 10541
 } else {
  if (!(HEAP32[$73 + 56 >> 2] | 0)) {
   $$1$off0$2 = $$1$off0$1; //@line 10547
  } else {
   $$1$off0$2 = $$1$off0$1 & (HEAP32[$73 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10554
  }
 }
 $83 = HEAP32[1964] | 0; //@line 10557
 if (($83 | 0) == 0 | ($83 | 0) == ($$lcssa | 0)) {
  $$1$off0$3 = $$1$off0$2; //@line 10562
 } else {
  if (!(HEAP32[$83 + 56 >> 2] | 0)) {
   $$1$off0$3 = $$1$off0$2; //@line 10568
  } else {
   $$1$off0$3 = $$1$off0$2 & (HEAP32[$83 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10575
  }
 }
 $93 = HEAP32[1965] | 0; //@line 10578
 if (($93 | 0) == 0 | ($93 | 0) == ($$lcssa | 0)) {
  label = 47; //@line 10583
 } else {
  if (!(HEAP32[$93 + 56 >> 2] | 0)) {
   label = 47; //@line 10589
  } else {
   if ($$1$off0$3 & (HEAP32[$93 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0)) {
    label = 8; //@line 10597
   }
  }
 }
 if ((label | 0) == 47) {
  if ($$1$off0$3) {
   label = 8; //@line 10603
  }
 }
 if ((label | 0) == 8) {
  $19 = $$lcssa + 56 | 0; //@line 10607
  $20 = HEAP32[$19 >> 2] | 0; //@line 10608
  if ($20 | 0) {
   $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10611
   __ZN6Socket5closeEv($20) | 0; //@line 10612
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 233; //@line 10615
    HEAP32[$AsyncCtx15 + 4 >> 2] = $$lcssa; //@line 10617
    HEAP32[$AsyncCtx15 + 8 >> 2] = $$04011$lcssa; //@line 10619
    HEAP32[$AsyncCtx15 + 12 >> 2] = $19; //@line 10621
    sp = STACKTOP; //@line 10622
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10625
   $25 = HEAP32[$19 >> 2] | 0; //@line 10626
   do {
    if ($25 | 0) {
     $29 = HEAP32[(HEAP32[$25 >> 2] | 0) + 4 >> 2] | 0; //@line 10632
     $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10633
     FUNCTION_TABLE_vi[$29 & 511]($25); //@line 10634
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 234; //@line 10637
      HEAP32[$AsyncCtx + 4 >> 2] = $$lcssa; //@line 10639
      HEAP32[$AsyncCtx + 8 >> 2] = $$04011$lcssa; //@line 10641
      sp = STACKTOP; //@line 10642
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10645
      break;
     }
    }
   } while (0);
   $33 = HEAP32[$$lcssa + 60 >> 2] | 0; //@line 10651
   if ($33 | 0) {
    $36 = HEAP32[$33 + 12 >> 2] | 0; //@line 10655
    do {
     if (!$36) {
      $$pre$phiZ2D = $33; //@line 10659
     } else {
      $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 10662
      $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10663
      FUNCTION_TABLE_vi[$39 & 511]($33); //@line 10664
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 235; //@line 10667
       HEAP32[$AsyncCtx3 + 4 >> 2] = $33; //@line 10669
       HEAP32[$AsyncCtx3 + 8 >> 2] = $$lcssa; //@line 10671
       HEAP32[$AsyncCtx3 + 12 >> 2] = $$04011$lcssa; //@line 10673
       sp = STACKTOP; //@line 10674
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10677
       $$pre$phiZ2D = $33; //@line 10678
       break;
      }
     }
    } while (0);
    __ZdlPv($$pre$phiZ2D); //@line 10683
   }
  }
 }
 $44 = HEAP32[$$lcssa + 64 >> 2] | 0; //@line 10688
 if ($44 | 0) {
  __ZdaPv($44); //@line 10691
 }
 $47 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 10694
 if ($47 | 0) {
  __ZdlPv($47); //@line 10697
 }
 $50 = HEAP32[$$lcssa + 44 >> 2] | 0; //@line 10700
 do {
  if ($50 | 0) {
   $54 = HEAP32[$50 + 8 >> 2] | 0; //@line 10706
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10707
   FUNCTION_TABLE_vi[$54 & 511]($$lcssa + 32 | 0); //@line 10708
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 236; //@line 10711
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$lcssa; //@line 10713
    HEAP32[$AsyncCtx7 + 8 >> 2] = $$04011$lcssa; //@line 10715
    sp = STACKTOP; //@line 10716
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10719
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$$lcssa + 28 >> 2] | 0; //@line 10725
 do {
  if ($58 | 0) {
   $62 = HEAP32[$58 + 8 >> 2] | 0; //@line 10731
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10732
   FUNCTION_TABLE_vi[$62 & 511]($$lcssa + 16 | 0); //@line 10733
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 237; //@line 10736
    HEAP32[$AsyncCtx11 + 4 >> 2] = $$lcssa; //@line 10738
    HEAP32[$AsyncCtx11 + 8 >> 2] = $$04011$lcssa; //@line 10740
    sp = STACKTOP; //@line 10741
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10744
    break;
   }
  }
 } while (0);
 __ZdlPv($$lcssa); //@line 10749
 HEAP32[7844 + ($$04011$lcssa << 2) >> 2] = 0; //@line 10751
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv() {
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$433 = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $32 = 0, $35 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $48 = 0, $49 = 0, $53 = 0, $54 = 0, $55 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9414
 STACKTOP = STACKTOP + 32 | 0; //@line 9415
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9415
 $0 = sp + 16 | 0; //@line 9416
 $1 = sp; //@line 9417
 $2 = HEAP32[1961] | 0; //@line 9418
 L1 : do {
  if (!$2) {
   $$1 = 0; //@line 9422
   $$124 = 2147483647; //@line 9422
  } else {
   switch (HEAP32[$2 + 88 >> 2] | 0) {
   case 0:
    {
     $$1 = $2; //@line 9429
     $$124 = HEAP32[$2 >> 2] | 0; //@line 9429
     break L1;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9434
     return;
    }
   default:
    {
     $$1 = 0; //@line 9438
     $$124 = 2147483647; //@line 9438
     break L1;
    }
   }
  }
 } while (0);
 $7 = HEAP32[1962] | 0; //@line 9444
 L7 : do {
  if (!$7) {
   $$1$1 = $$1; //@line 9448
   $$124$1 = $$124; //@line 9448
  } else {
   switch (HEAP32[$7 + 88 >> 2] | 0) {
   case 0:
    {
     $41 = HEAP32[$7 >> 2] | 0; //@line 9454
     $42 = ($41 | 0) > ($$124 | 0); //@line 9455
     $$1$1 = $42 ? $$1 : $7; //@line 9458
     $$124$1 = $42 ? $$124 : $41; //@line 9458
     break L7;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9463
     return;
    }
   default:
    {
     $$1$1 = $$1; //@line 9467
     $$124$1 = $$124; //@line 9467
     break L7;
    }
   }
  }
 } while (0);
 $43 = HEAP32[1963] | 0; //@line 9473
 L13 : do {
  if (!$43) {
   $$1$2 = $$1$1; //@line 9477
   $$124$2 = $$124$1; //@line 9477
  } else {
   switch (HEAP32[$43 + 88 >> 2] | 0) {
   case 0:
    {
     $47 = HEAP32[$43 >> 2] | 0; //@line 9483
     $48 = ($47 | 0) > ($$124$1 | 0); //@line 9484
     $$1$2 = $48 ? $$1$1 : $43; //@line 9487
     $$124$2 = $48 ? $$124$1 : $47; //@line 9487
     break L13;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9492
     return;
    }
   default:
    {
     $$1$2 = $$1$1; //@line 9496
     $$124$2 = $$124$1; //@line 9496
     break L13;
    }
   }
  }
 } while (0);
 $49 = HEAP32[1964] | 0; //@line 9502
 L19 : do {
  if (!$49) {
   $$1$3 = $$1$2; //@line 9506
   $$124$3 = $$124$2; //@line 9506
  } else {
   switch (HEAP32[$49 + 88 >> 2] | 0) {
   case 0:
    {
     $53 = HEAP32[$49 >> 2] | 0; //@line 9512
     $54 = ($53 | 0) > ($$124$2 | 0); //@line 9513
     $$1$3 = $54 ? $$1$2 : $49; //@line 9516
     $$124$3 = $54 ? $$124$2 : $53; //@line 9516
     break L19;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9521
     return;
    }
   default:
    {
     $$1$3 = $$1$2; //@line 9525
     $$124$3 = $$124$2; //@line 9525
     break L19;
    }
   }
  }
 } while (0);
 $55 = HEAP32[1965] | 0; //@line 9531
 L25 : do {
  if (!$55) {
   label = 31; //@line 9535
  } else {
   switch (HEAP32[$55 + 88 >> 2] | 0) {
   case 0:
    {
     if ((HEAP32[$55 >> 2] | 0) > ($$124$3 | 0)) {
      label = 31; //@line 9544
      break L25;
     } else {
      $$1$433 = $55; //@line 9547
      break L25;
     }
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9553
     return;
    }
   default:
    {
     label = 31; //@line 9557
     break L25;
    }
   }
  }
 } while (0);
 if ((label | 0) == 31) {
  if (!$$1$3) {
   STACKTOP = sp; //@line 9566
   return;
  } else {
   $$1$433 = $$1$3; //@line 9568
  }
 }
 HEAP32[$$1$433 + 88 >> 2] = 1; //@line 9572
 $10 = $$1$433 + 44 | 0; //@line 9573
 $11 = HEAP32[$10 >> 2] | 0; //@line 9574
 do {
  if (!$11) {
   $21 = 0; //@line 9578
  } else {
   $15 = HEAP32[$11 + 4 >> 2] | 0; //@line 9582
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9583
   FUNCTION_TABLE_vii[$15 & 7]($0, $$1$433 + 32 | 0); //@line 9584
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 207; //@line 9587
    HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 9589
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 9591
    HEAP32[$AsyncCtx + 12 >> 2] = $$1$433; //@line 9593
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9595
    sp = STACKTOP; //@line 9596
    STACKTOP = sp; //@line 9597
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9599
    $21 = HEAP32[$10 >> 2] | 0; //@line 9601
    break;
   }
  }
 } while (0);
 $20 = $0 + 12 | 0; //@line 9606
 HEAP32[$20 >> 2] = $21; //@line 9607
 $22 = HEAP32[$$1$433 >> 2] | 0; //@line 9608
 HEAP32[$1 + 8 >> 2] = 0; //@line 9610
 HEAP32[$1 >> 2] = 208; //@line 9611
 HEAP32[$1 + 4 >> 2] = $22; //@line 9613
 $24 = $1 + 12 | 0; //@line 9614
 HEAP32[$24 >> 2] = 764; //@line 9615
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9616
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 9617
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 209; //@line 9620
  HEAP32[$AsyncCtx10 + 4 >> 2] = $24; //@line 9622
  HEAP32[$AsyncCtx10 + 8 >> 2] = $20; //@line 9624
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 9626
  HEAP32[$AsyncCtx10 + 16 >> 2] = $0; //@line 9628
  sp = STACKTOP; //@line 9629
  STACKTOP = sp; //@line 9630
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 9632
 $29 = HEAP32[$24 >> 2] | 0; //@line 9633
 do {
  if ($29 | 0) {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 9638
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9639
   FUNCTION_TABLE_vi[$32 & 511]($1); //@line 9640
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 210; //@line 9643
    HEAP32[$AsyncCtx3 + 4 >> 2] = $20; //@line 9645
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 9647
    sp = STACKTOP; //@line 9648
    STACKTOP = sp; //@line 9649
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9651
    break;
   }
  }
 } while (0);
 $35 = HEAP32[$20 >> 2] | 0; //@line 9656
 if (!$35) {
  STACKTOP = sp; //@line 9659
  return;
 }
 $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 9662
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9663
 FUNCTION_TABLE_vi[$38 & 511]($0); //@line 9664
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 211; //@line 9667
  sp = STACKTOP; //@line 9668
  STACKTOP = sp; //@line 9669
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9671
 STACKTOP = sp; //@line 9672
 return;
}
function __ZN6Socket4openEP12NetworkStack($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4082
 STACKTOP = STACKTOP + 32 | 0; //@line 4083
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4083
 $2 = sp + 16 | 0; //@line 4084
 $3 = sp; //@line 4085
 $4 = $0 + 4 | 0; //@line 4086
 if (($1 | 0) == 0 | (HEAP32[$4 >> 2] | 0) != 0) {
  $$1 = -3003; //@line 4092
  STACKTOP = sp; //@line 4093
  return $$1 | 0; //@line 4093
 }
 HEAP32[$4 >> 2] = $1; //@line 4095
 $10 = HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] | 0; //@line 4098
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 4101
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 4102
 $14 = FUNCTION_TABLE_ii[$13 & 31]($0) | 0; //@line 4103
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 4106
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 4108
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 4110
  HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 4112
  HEAP32[$AsyncCtx + 16 >> 2] = $10; //@line 4114
  HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 4116
  HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 4118
  HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 4120
  sp = STACKTOP; //@line 4121
  STACKTOP = sp; //@line 4122
  return 0; //@line 4122
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4124
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4125
 $22 = FUNCTION_TABLE_iiii[$10 & 31]($1, $2, $14) | 0; //@line 4126
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 122; //@line 4129
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 4131
  HEAP32[$AsyncCtx2 + 8 >> 2] = $2; //@line 4133
  HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 4135
  HEAP32[$AsyncCtx2 + 16 >> 2] = $3; //@line 4137
  HEAP32[$AsyncCtx2 + 20 >> 2] = $4; //@line 4139
  sp = STACKTOP; //@line 4140
  STACKTOP = sp; //@line 4141
  return 0; //@line 4141
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4143
 do {
  if (!$22) {
   $30 = $0 + 8 | 0; //@line 4148
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 4149
   $31 = $3 + 12 | 0; //@line 4150
   HEAP32[$3 >> 2] = 12; //@line 4151
   HEAP32[$3 + 4 >> 2] = 1; //@line 4153
   HEAP32[$3 + 8 >> 2] = $0; //@line 4155
   HEAP32[$31 >> 2] = 588; //@line 4156
   $32 = $0 + 16 | 0; //@line 4157
   do {
    if (($32 | 0) == ($3 | 0)) {
     $60 = 588; //@line 4161
     label = 16; //@line 4162
    } else {
     $34 = $0 + 28 | 0; //@line 4164
     $35 = HEAP32[$34 >> 2] | 0; //@line 4165
     if (!$35) {
      $48 = 588; //@line 4168
     } else {
      $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 4171
      $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4172
      FUNCTION_TABLE_vi[$38 & 511]($32); //@line 4173
      if (___async) {
       HEAP32[$AsyncCtx5 >> 2] = 123; //@line 4176
       HEAP32[$AsyncCtx5 + 4 >> 2] = $31; //@line 4178
       HEAP32[$AsyncCtx5 + 8 >> 2] = $34; //@line 4180
       HEAP32[$AsyncCtx5 + 12 >> 2] = $32; //@line 4182
       HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 4184
       HEAP32[$AsyncCtx5 + 20 >> 2] = $4; //@line 4186
       HEAP32[$AsyncCtx5 + 24 >> 2] = $30; //@line 4188
       HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 4190
       sp = STACKTOP; //@line 4191
       STACKTOP = sp; //@line 4192
       return 0; //@line 4192
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4194
      $$pre = HEAP32[$31 >> 2] | 0; //@line 4195
      if (!$$pre) {
       HEAP32[$34 >> 2] = 0; //@line 4198
       break;
      } else {
       $48 = $$pre; //@line 4201
      }
     }
     $49 = HEAP32[$48 + 4 >> 2] | 0; //@line 4205
     $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4206
     FUNCTION_TABLE_vii[$49 & 7]($32, $3); //@line 4207
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 124; //@line 4210
      HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 4212
      HEAP32[$AsyncCtx8 + 8 >> 2] = $34; //@line 4214
      HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 4216
      HEAP32[$AsyncCtx8 + 16 >> 2] = $4; //@line 4218
      HEAP32[$AsyncCtx8 + 20 >> 2] = $30; //@line 4220
      HEAP32[$AsyncCtx8 + 24 >> 2] = $32; //@line 4222
      HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 4224
      sp = STACKTOP; //@line 4225
      STACKTOP = sp; //@line 4226
      return 0; //@line 4226
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 4228
      $$pre$i$i = HEAP32[$31 >> 2] | 0; //@line 4229
      HEAP32[$34 >> 2] = $$pre$i$i; //@line 4231
      if (!$$pre$i$i) {
       break;
      } else {
       $60 = $$pre$i$i; //@line 4236
       label = 16; //@line 4237
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 16) {
     $61 = HEAP32[$60 + 8 >> 2] | 0; //@line 4246
     $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4247
     FUNCTION_TABLE_vi[$61 & 511]($3); //@line 4248
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 125; //@line 4251
      HEAP32[$AsyncCtx11 + 4 >> 2] = $3; //@line 4253
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 4255
      HEAP32[$AsyncCtx11 + 12 >> 2] = $30; //@line 4257
      HEAP32[$AsyncCtx11 + 16 >> 2] = $32; //@line 4259
      HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 4261
      sp = STACKTOP; //@line 4262
      STACKTOP = sp; //@line 4263
      return 0; //@line 4263
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4265
      break;
     }
    }
   } while (0);
   $67 = HEAP32[$4 >> 2] | 0; //@line 4270
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 84 >> 2] | 0; //@line 4273
   $71 = HEAP32[$30 >> 2] | 0; //@line 4274
   $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4275
   FUNCTION_TABLE_viiii[$70 & 7]($67, $71, 126, $32); //@line 4276
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 127; //@line 4279
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 4281
    sp = STACKTOP; //@line 4282
    STACKTOP = sp; //@line 4283
    return 0; //@line 4283
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 4285
    $$0 = 0; //@line 4286
    break;
   }
  } else {
   $$0 = $22; //@line 4290
  }
 } while (0);
 $$1 = $$0; //@line 4293
 STACKTOP = sp; //@line 4294
 return $$1 | 0; //@line 4294
}
function __ZN6Socket4openEP12NetworkStack__async_cb_143($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13049
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13051
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13053
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13055
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13057
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13059
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13061
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 13065
  return;
 }
 $14 = $6 + 8 | 0; //@line 13069
 HEAP32[$14 >> 2] = HEAP32[$4 >> 2]; //@line 13070
 $15 = $8 + 12 | 0; //@line 13071
 HEAP32[$8 >> 2] = 12; //@line 13072
 HEAP32[$8 + 4 >> 2] = 1; //@line 13074
 HEAP32[$8 + 8 >> 2] = $6; //@line 13076
 HEAP32[$15 >> 2] = 588; //@line 13077
 $16 = $6 + 16 | 0; //@line 13078
 if (($16 | 0) == ($8 | 0)) {
  $40 = HEAP32[149] | 0; //@line 13082
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 13083
  FUNCTION_TABLE_vi[$40 & 511]($8); //@line 13084
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 13087
   $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 13088
   HEAP32[$41 >> 2] = $8; //@line 13089
   $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 13090
   HEAP32[$42 >> 2] = $10; //@line 13091
   $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 13092
   HEAP32[$43 >> 2] = $14; //@line 13093
   $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 13094
   HEAP32[$44 >> 2] = $16; //@line 13095
   $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 13096
   HEAP32[$45 >> 2] = $2; //@line 13097
   sp = STACKTOP; //@line 13098
   return;
  }
  ___async_unwind = 0; //@line 13101
  HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 13102
  $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 13103
  HEAP32[$41 >> 2] = $8; //@line 13104
  $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 13105
  HEAP32[$42 >> 2] = $10; //@line 13106
  $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 13107
  HEAP32[$43 >> 2] = $14; //@line 13108
  $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 13109
  HEAP32[$44 >> 2] = $16; //@line 13110
  $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 13111
  HEAP32[$45 >> 2] = $2; //@line 13112
  sp = STACKTOP; //@line 13113
  return;
 }
 $18 = $6 + 28 | 0; //@line 13116
 $19 = HEAP32[$18 >> 2] | 0; //@line 13117
 if (!$19) {
  $31 = HEAP32[148] | 0; //@line 13121
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 13122
  FUNCTION_TABLE_vii[$31 & 7]($16, $8); //@line 13123
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 13126
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 13127
   HEAP32[$32 >> 2] = $15; //@line 13128
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 13129
   HEAP32[$33 >> 2] = $18; //@line 13130
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 13131
   HEAP32[$34 >> 2] = $8; //@line 13132
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 13133
   HEAP32[$35 >> 2] = $10; //@line 13134
   $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 13135
   HEAP32[$36 >> 2] = $14; //@line 13136
   $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 13137
   HEAP32[$37 >> 2] = $16; //@line 13138
   $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 13139
   HEAP32[$38 >> 2] = $2; //@line 13140
   sp = STACKTOP; //@line 13141
   return;
  }
  ___async_unwind = 0; //@line 13144
  HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 13145
  $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 13146
  HEAP32[$32 >> 2] = $15; //@line 13147
  $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 13148
  HEAP32[$33 >> 2] = $18; //@line 13149
  $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 13150
  HEAP32[$34 >> 2] = $8; //@line 13151
  $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 13152
  HEAP32[$35 >> 2] = $10; //@line 13153
  $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 13154
  HEAP32[$36 >> 2] = $14; //@line 13155
  $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 13156
  HEAP32[$37 >> 2] = $16; //@line 13157
  $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 13158
  HEAP32[$38 >> 2] = $2; //@line 13159
  sp = STACKTOP; //@line 13160
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 13164
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 13165
  FUNCTION_TABLE_vi[$22 & 511]($16); //@line 13166
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 123; //@line 13169
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 13170
   HEAP32[$23 >> 2] = $15; //@line 13171
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 13172
   HEAP32[$24 >> 2] = $18; //@line 13173
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 13174
   HEAP32[$25 >> 2] = $16; //@line 13175
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 13176
   HEAP32[$26 >> 2] = $8; //@line 13177
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 13178
   HEAP32[$27 >> 2] = $10; //@line 13179
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 13180
   HEAP32[$28 >> 2] = $14; //@line 13181
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 13182
   HEAP32[$29 >> 2] = $2; //@line 13183
   sp = STACKTOP; //@line 13184
   return;
  }
  ___async_unwind = 0; //@line 13187
  HEAP32[$ReallocAsyncCtx3 >> 2] = 123; //@line 13188
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 13189
  HEAP32[$23 >> 2] = $15; //@line 13190
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 13191
  HEAP32[$24 >> 2] = $18; //@line 13192
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 13193
  HEAP32[$25 >> 2] = $16; //@line 13194
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 13195
  HEAP32[$26 >> 2] = $8; //@line 13196
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 13197
  HEAP32[$27 >> 2] = $10; //@line 13198
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 13199
  HEAP32[$28 >> 2] = $14; //@line 13200
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 13201
  HEAP32[$29 >> 2] = $2; //@line 13202
  sp = STACKTOP; //@line 13203
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13586
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13588
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13590
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13592
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13596
 $$pre$i = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 13597
 $11 = $2 + 12 | 0; //@line 13598
 HEAP32[$11 >> 2] = $$pre$i; //@line 13599
 $12 = $6 + 12 | 0; //@line 13600
 $13 = HEAP32[$12 >> 2] | 0; //@line 13601
 $15 = $$pre$i; //@line 13603
 if (!$13) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 13605
  _mbed_assert_internal(4019, 4024, 1677); //@line 13606
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 271; //@line 13609
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 13610
   HEAP32[$16 >> 2] = $12; //@line 13611
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 13612
   HEAP32[$17 >> 2] = $11; //@line 13613
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 13614
   HEAP32[$18 >> 2] = $6; //@line 13615
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 13616
   HEAP32[$19 >> 2] = $4; //@line 13617
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 13618
   HEAP32[$20 >> 2] = $10; //@line 13619
   $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 13620
   HEAP32[$21 >> 2] = $2; //@line 13621
   $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 13622
   HEAP32[$22 >> 2] = $4; //@line 13623
   $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 13624
   HEAP32[$23 >> 2] = $11; //@line 13625
   sp = STACKTOP; //@line 13626
   return;
  }
  ___async_unwind = 0; //@line 13629
  HEAP32[$ReallocAsyncCtx6 >> 2] = 271; //@line 13630
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 13631
  HEAP32[$16 >> 2] = $12; //@line 13632
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 13633
  HEAP32[$17 >> 2] = $11; //@line 13634
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 13635
  HEAP32[$18 >> 2] = $6; //@line 13636
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 13637
  HEAP32[$19 >> 2] = $4; //@line 13638
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 13639
  HEAP32[$20 >> 2] = $10; //@line 13640
  $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 13641
  HEAP32[$21 >> 2] = $2; //@line 13642
  $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 13643
  HEAP32[$22 >> 2] = $4; //@line 13644
  $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 13645
  HEAP32[$23 >> 2] = $11; //@line 13646
  sp = STACKTOP; //@line 13647
  return;
 }
 $24 = HEAP32[$13 >> 2] | 0; //@line 13650
 if (!$15) {
  $36 = $4 + 12 | 0; //@line 13653
  HEAP32[$36 >> 2] = 0; //@line 13654
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 13655
  $37 = FUNCTION_TABLE_iiii[$24 & 31]($6, $10, $4) | 0; //@line 13656
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 13659
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 13660
   HEAP32[$38 >> 2] = $36; //@line 13661
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 13662
   HEAP32[$39 >> 2] = $4; //@line 13663
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 13664
   HEAP32[$40 >> 2] = $11; //@line 13665
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 13666
   HEAP32[$41 >> 2] = $2; //@line 13667
   sp = STACKTOP; //@line 13668
   return;
  }
  HEAP32[___async_retval >> 2] = $37; //@line 13672
  ___async_unwind = 0; //@line 13673
  HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 13674
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 13675
  HEAP32[$38 >> 2] = $36; //@line 13676
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 13677
  HEAP32[$39 >> 2] = $4; //@line 13678
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 13679
  HEAP32[$40 >> 2] = $11; //@line 13680
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 13681
  HEAP32[$41 >> 2] = $2; //@line 13682
  sp = STACKTOP; //@line 13683
  return;
 } else {
  $27 = HEAP32[$15 + 4 >> 2] | 0; //@line 13687
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 13688
  FUNCTION_TABLE_vii[$27 & 7]($4, $2); //@line 13689
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 272; //@line 13692
   $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 13693
   HEAP32[$28 >> 2] = $11; //@line 13694
   $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 13695
   HEAP32[$29 >> 2] = $4; //@line 13696
   $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 13697
   HEAP32[$30 >> 2] = $6; //@line 13698
   $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 13699
   HEAP32[$31 >> 2] = $10; //@line 13700
   $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 13701
   HEAP32[$32 >> 2] = $24; //@line 13702
   $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 13703
   HEAP32[$33 >> 2] = $4; //@line 13704
   $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 13705
   HEAP32[$34 >> 2] = $11; //@line 13706
   $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 13707
   HEAP32[$35 >> 2] = $2; //@line 13708
   sp = STACKTOP; //@line 13709
   return;
  }
  ___async_unwind = 0; //@line 13712
  HEAP32[$ReallocAsyncCtx2 >> 2] = 272; //@line 13713
  $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 13714
  HEAP32[$28 >> 2] = $11; //@line 13715
  $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 13716
  HEAP32[$29 >> 2] = $4; //@line 13717
  $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 13718
  HEAP32[$30 >> 2] = $6; //@line 13719
  $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 13720
  HEAP32[$31 >> 2] = $10; //@line 13721
  $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 13722
  HEAP32[$32 >> 2] = $24; //@line 13723
  $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 13724
  HEAP32[$33 >> 2] = $4; //@line 13725
  $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 13726
  HEAP32[$34 >> 2] = $11; //@line 13727
  $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 13728
  HEAP32[$35 >> 2] = $2; //@line 13729
  sp = STACKTOP; //@line 13730
  return;
 }
}
function __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0100152 = 0, $$0103157 = 0, $$0104151 = 0, $$0105150 = 0, $$0136$lcssa = 0, $$0136156 = 0, $$098 = 0, $$1 = 0, $$1106 = 0, $$1137$lcssa = 0, $$1137154 = 0, $$2149 = 0, $$4 = 0, $$7 = 0, $103 = 0, $106 = 0, $111 = 0, $112 = 0, $116 = 0, $23 = 0, $30 = 0, $37 = 0, $41 = 0, $47 = 0, $48 = 0, $51 = 0, $55 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $77 = 0, $85 = 0, label = 0;
 $23 = (HEAPU8[$0 + 4 >> 0] | 0) << 8 | (HEAPU8[$0 + 5 >> 0] | 0); //@line 6841
 $30 = (HEAPU8[$0 + 6 >> 0] | 0) << 8 | (HEAPU8[$0 + 7 >> 0] | 0); //@line 6848
 if (!((HEAP8[$0 + 2 >> 0] & -8) << 24 >> 24 == -128 ? (((HEAPU8[$0 >> 0] | 0) << 8 | (HEAPU8[$0 + 1 >> 0] | 0)) & 65535) << 16 >> 16 == $1 << 16 >> 16 : 0)) {
  $$098 = -1; //@line 6854
  return $$098 | 0; //@line 6855
 }
 $37 = $0 + 12 | 0; //@line 6859
 if (HEAP8[$0 + 3 >> 0] & 15) {
  $$098 = 0; //@line 6863
  return $$098 | 0; //@line 6864
 }
 if (!$23) {
  $$0136$lcssa = $37; //@line 6868
 } else {
  $$0103157 = 0; //@line 6870
  $$0136156 = $37; //@line 6870
  while (1) {
   $41 = HEAP8[$$0136156 >> 0] | 0; //@line 6872
   if (!($41 << 24 >> 24)) {
    $$1137$lcssa = $$0136156; //@line 6875
   } else {
    $$1137154 = $$0136156; //@line 6877
    $47 = $41; //@line 6877
    while (1) {
     $48 = $$1137154 + 1 + ($47 & 255) | 0; //@line 6881
     $47 = HEAP8[$48 >> 0] | 0; //@line 6882
     if (!($47 << 24 >> 24)) {
      $$1137$lcssa = $48; //@line 6885
      break;
     } else {
      $$1137154 = $48; //@line 6888
     }
    }
   }
   $51 = $$1137$lcssa + 5 | 0; //@line 6892
   $$0103157 = $$0103157 + 1 | 0; //@line 6893
   if (($$0103157 | 0) >= ($23 | 0)) {
    $$0136$lcssa = $51; //@line 6898
    break;
   } else {
    $$0136156 = $51; //@line 6896
   }
  }
 }
 if (($4 | 0) != 0 & ($30 | 0) != 0) {
  $$0100152 = $3; //@line 6907
  $$0104151 = 0; //@line 6907
  $$0105150 = 0; //@line 6907
  $$2149 = $$0136$lcssa; //@line 6907
 } else {
  $$098 = 0; //@line 6909
  return $$098 | 0; //@line 6910
 }
 while (1) {
  $55 = HEAP8[$$2149 >> 0] | 0; //@line 6914
  do {
   if (!($55 << 24 >> 24)) {
    $$4 = $$2149 + 1 | 0; //@line 6918
   } else {
    $59 = $55 & 255; //@line 6921
    $62 = $$2149; //@line 6921
    while (1) {
     if ($59 & 192 | 0) {
      label = 11; //@line 6926
      break;
     }
     $64 = $62 + 1 + $59 | 0; //@line 6930
     $65 = HEAP8[$64 >> 0] | 0; //@line 6931
     if (!($65 << 24 >> 24)) {
      label = 13; //@line 6935
      break;
     } else {
      $59 = $65 & 255; //@line 6938
      $62 = $64; //@line 6938
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 6942
     $$4 = $62 + 2 | 0; //@line 6944
     break;
    } else if ((label | 0) == 13) {
     label = 0; //@line 6948
     $$4 = $64 + 1 | 0; //@line 6950
     break;
    }
   }
  } while (0);
  $77 = ((HEAPU8[$$4 >> 0] | 0) << 8 | (HEAPU8[$$4 + 1 >> 0] | 0)) & 65535; //@line 6963
  $85 = (HEAPU8[$$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$$4 + 3 >> 0] | 0); //@line 6971
  $103 = (HEAPU8[$$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$$4 + 7 >> 0] | 0); //@line 6989
  $106 = $$4 + 10 | 0; //@line 6992
  $111 = (HEAPU8[$$4 + 8 >> 0] | 0) << 8 | (HEAPU8[$$4 + 9 >> 0] | 0); //@line 6997
  $112 = $111 & 65535; //@line 6998
  if (!$$0104151) {
   HEAP32[$2 >> 2] = $103 >>> 0 < 2147483647 ? $103 : 2147483647; //@line 7003
  }
  $116 = ($85 | 0) == 1; //@line 7006
  do {
   if ($77 << 16 >> 16 == 1 & $116 & $112 << 16 >> 16 == 4) {
    HEAP32[$$0100152 >> 2] = 1; //@line 7012
    HEAP8[$$0100152 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 7016
    HEAP8[$$0100152 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 7020
    HEAP8[$$0100152 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 7024
    HEAP8[$$0100152 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 7027
    $$1 = $$0100152 + 20 | 0; //@line 7031
    $$1106 = $$0105150 + 1 | 0; //@line 7031
    $$7 = $$4 + 14 | 0; //@line 7031
   } else {
    if ($77 << 16 >> 16 == 28 & $116 & $112 << 16 >> 16 == 16) {
     HEAP32[$$0100152 >> 2] = 2; //@line 7038
     HEAP8[$$0100152 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 7042
     HEAP8[$$0100152 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 7046
     HEAP8[$$0100152 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 7050
     HEAP8[$$0100152 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 7054
     HEAP8[$$0100152 + 8 >> 0] = HEAP8[$$4 + 14 >> 0] | 0; //@line 7058
     HEAP8[$$0100152 + 9 >> 0] = HEAP8[$$4 + 15 >> 0] | 0; //@line 7062
     HEAP8[$$0100152 + 10 >> 0] = HEAP8[$$4 + 16 >> 0] | 0; //@line 7066
     HEAP8[$$0100152 + 11 >> 0] = HEAP8[$$4 + 17 >> 0] | 0; //@line 7070
     HEAP8[$$0100152 + 12 >> 0] = HEAP8[$$4 + 18 >> 0] | 0; //@line 7074
     HEAP8[$$0100152 + 13 >> 0] = HEAP8[$$4 + 19 >> 0] | 0; //@line 7078
     HEAP8[$$0100152 + 14 >> 0] = HEAP8[$$4 + 20 >> 0] | 0; //@line 7082
     HEAP8[$$0100152 + 15 >> 0] = HEAP8[$$4 + 21 >> 0] | 0; //@line 7086
     HEAP8[$$0100152 + 16 >> 0] = HEAP8[$$4 + 22 >> 0] | 0; //@line 7090
     HEAP8[$$0100152 + 17 >> 0] = HEAP8[$$4 + 23 >> 0] | 0; //@line 7094
     HEAP8[$$0100152 + 18 >> 0] = HEAP8[$$4 + 24 >> 0] | 0; //@line 7098
     HEAP8[$$0100152 + 19 >> 0] = HEAP8[$$4 + 25 >> 0] | 0; //@line 7101
     $$1 = $$0100152 + 20 | 0; //@line 7105
     $$1106 = $$0105150 + 1 | 0; //@line 7105
     $$7 = $$4 + 26 | 0; //@line 7105
     break;
    } else {
     $$1 = $$0100152; //@line 7109
     $$1106 = $$0105150; //@line 7109
     $$7 = $106 + $111 | 0; //@line 7109
     break;
    }
   }
  } while (0);
  $$0104151 = $$0104151 + 1 | 0; //@line 7114
  if (!($$1106 >>> 0 < $4 >>> 0 & ($$0104151 | 0) < ($30 | 0))) {
   $$098 = $$1106; //@line 7121
   break;
  } else {
   $$0100152 = $$1; //@line 7119
   $$0105150 = $$1106; //@line 7119
   $$2149 = $$7; //@line 7119
  }
 }
 return $$098 | 0; //@line 7125
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_105($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3094
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3096
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3102
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3104
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3106
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3108
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3110
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3112
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3114
 $21 = (HEAP32[$0 + 8 >> 2] | 0) == 0; //@line 3115
 $22 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 3116
 if ($22 | 0) {
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 3120
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 3121
  FUNCTION_TABLE_vi[$25 & 511]($2); //@line 3122
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 3125
   $26 = $ReallocAsyncCtx8 + 4 | 0; //@line 3126
   HEAP32[$26 >> 2] = $8; //@line 3127
   $27 = $ReallocAsyncCtx8 + 8 | 0; //@line 3128
   HEAP32[$27 >> 2] = $10; //@line 3129
   $28 = $ReallocAsyncCtx8 + 12 | 0; //@line 3130
   HEAP32[$28 >> 2] = $12; //@line 3131
   $29 = $ReallocAsyncCtx8 + 16 | 0; //@line 3132
   $$expand_i1_val = $21 & 1; //@line 3133
   HEAP8[$29 >> 0] = $$expand_i1_val; //@line 3134
   $30 = $ReallocAsyncCtx8 + 20 | 0; //@line 3135
   HEAP32[$30 >> 2] = $14; //@line 3136
   $31 = $ReallocAsyncCtx8 + 24 | 0; //@line 3137
   HEAP32[$31 >> 2] = $16; //@line 3138
   $32 = $ReallocAsyncCtx8 + 28 | 0; //@line 3139
   HEAP32[$32 >> 2] = $18; //@line 3140
   $33 = $ReallocAsyncCtx8 + 32 | 0; //@line 3141
   HEAP32[$33 >> 2] = $20; //@line 3142
   sp = STACKTOP; //@line 3143
   return;
  }
  ___async_unwind = 0; //@line 3146
  HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 3147
  $26 = $ReallocAsyncCtx8 + 4 | 0; //@line 3148
  HEAP32[$26 >> 2] = $8; //@line 3149
  $27 = $ReallocAsyncCtx8 + 8 | 0; //@line 3150
  HEAP32[$27 >> 2] = $10; //@line 3151
  $28 = $ReallocAsyncCtx8 + 12 | 0; //@line 3152
  HEAP32[$28 >> 2] = $12; //@line 3153
  $29 = $ReallocAsyncCtx8 + 16 | 0; //@line 3154
  $$expand_i1_val = $21 & 1; //@line 3155
  HEAP8[$29 >> 0] = $$expand_i1_val; //@line 3156
  $30 = $ReallocAsyncCtx8 + 20 | 0; //@line 3157
  HEAP32[$30 >> 2] = $14; //@line 3158
  $31 = $ReallocAsyncCtx8 + 24 | 0; //@line 3159
  HEAP32[$31 >> 2] = $16; //@line 3160
  $32 = $ReallocAsyncCtx8 + 28 | 0; //@line 3161
  HEAP32[$32 >> 2] = $18; //@line 3162
  $33 = $ReallocAsyncCtx8 + 32 | 0; //@line 3163
  HEAP32[$33 >> 2] = $20; //@line 3164
  sp = STACKTOP; //@line 3165
  return;
 }
 if ($21) {
  HEAP8[8724] = 1; //@line 3169
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 3170
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 3171
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3174
   $50 = $ReallocAsyncCtx13 + 4 | 0; //@line 3175
   HEAP32[$50 >> 2] = $10; //@line 3176
   $51 = $ReallocAsyncCtx13 + 8 | 0; //@line 3177
   HEAP32[$51 >> 2] = $8; //@line 3178
   sp = STACKTOP; //@line 3179
   return;
  }
  ___async_unwind = 0; //@line 3182
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3183
  $50 = $ReallocAsyncCtx13 + 4 | 0; //@line 3184
  HEAP32[$50 >> 2] = $10; //@line 3185
  $51 = $ReallocAsyncCtx13 + 8 | 0; //@line 3186
  HEAP32[$51 >> 2] = $8; //@line 3187
  sp = STACKTOP; //@line 3188
  return;
 }
 $34 = HEAP32[$14 >> 2] | 0; //@line 3191
 if ($34 | 0) {
  __ZdlPv($34); //@line 3194
 }
 $36 = HEAP32[$16 >> 2] | 0; //@line 3196
 if ($36 | 0) {
  $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 3200
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 3201
  FUNCTION_TABLE_vi[$39 & 511]($18); //@line 3202
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 3205
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 3206
   HEAP32[$40 >> 2] = $12; //@line 3207
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 3208
   HEAP32[$41 >> 2] = $20; //@line 3209
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 3210
   HEAP32[$42 >> 2] = $8; //@line 3211
   sp = STACKTOP; //@line 3212
   return;
  }
  ___async_unwind = 0; //@line 3215
  HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 3216
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 3217
  HEAP32[$40 >> 2] = $12; //@line 3218
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 3219
  HEAP32[$41 >> 2] = $20; //@line 3220
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 3221
  HEAP32[$42 >> 2] = $8; //@line 3222
  sp = STACKTOP; //@line 3223
  return;
 }
 $44 = HEAP32[$12 + 28 >> 2] | 0; //@line 3227
 if (!$44) {
  __ZdlPv($12); //@line 3230
  HEAP32[___async_retval >> 2] = -3007; //@line 3232
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 3236
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 3237
 FUNCTION_TABLE_vi[$47 & 511]($20); //@line 3238
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3241
  $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 3242
  HEAP32[$48 >> 2] = $12; //@line 3243
  $49 = $ReallocAsyncCtx10 + 8 | 0; //@line 3244
  HEAP32[$49 >> 2] = $8; //@line 3245
  sp = STACKTOP; //@line 3246
  return;
 }
 ___async_unwind = 0; //@line 3249
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3250
 $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 3251
 HEAP32[$48 >> 2] = $12; //@line 3252
 $49 = $ReallocAsyncCtx10 + 8 | 0; //@line 3253
 HEAP32[$49 >> 2] = $8; //@line 3254
 sp = STACKTOP; //@line 3255
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $53 = 0, $58 = 0, $6 = 0, $61 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12323
 STACKTOP = STACKTOP + 32 | 0; //@line 12324
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12324
 $3 = sp + 16 | 0; //@line 12325
 $4 = sp; //@line 12326
 $5 = $2 + 12 | 0; //@line 12327
 $6 = HEAP32[$5 >> 2] | 0; //@line 12328
 do {
  if (!$6) {
   $16 = 0; //@line 12332
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 12335
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 12336
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 12337
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 270; //@line 12340
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 12342
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 12344
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 12346
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 12348
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 12350
    sp = STACKTOP; //@line 12351
    STACKTOP = sp; //@line 12352
    return 0; //@line 12352
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12354
    $16 = HEAP32[$5 >> 2] | 0; //@line 12356
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 12361
 HEAP32[$15 >> 2] = $16; //@line 12362
 $17 = $0 + 12 | 0; //@line 12363
 $18 = HEAP32[$17 >> 2] | 0; //@line 12364
 $20 = $16; //@line 12366
 do {
  if (!$18) {
   $AsyncCtx16 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12369
   _mbed_assert_internal(4019, 4024, 1677); //@line 12370
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 271; //@line 12373
    HEAP32[$AsyncCtx16 + 4 >> 2] = $17; //@line 12375
    HEAP32[$AsyncCtx16 + 8 >> 2] = $15; //@line 12377
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 12379
    HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 12381
    HEAP32[$AsyncCtx16 + 20 >> 2] = $1; //@line 12383
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 12385
    HEAP32[$AsyncCtx16 + 28 >> 2] = $3; //@line 12387
    HEAP32[$AsyncCtx16 + 32 >> 2] = $15; //@line 12389
    sp = STACKTOP; //@line 12390
    STACKTOP = sp; //@line 12391
    return 0; //@line 12391
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 12393
    $30 = HEAP32[$17 >> 2] | 0; //@line 12396
    $32 = HEAP32[$15 >> 2] | 0; //@line 12396
    break;
   }
  } else {
   $30 = $18; //@line 12400
   $32 = $20; //@line 12400
  }
 } while (0);
 $29 = HEAP32[$30 >> 2] | 0; //@line 12403
 do {
  if (!$32) {
   $44 = 0; //@line 12407
  } else {
   $34 = HEAP32[$32 + 4 >> 2] | 0; //@line 12410
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12411
   FUNCTION_TABLE_vii[$34 & 7]($3, $4); //@line 12412
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 272; //@line 12415
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 12417
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 12419
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 12421
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 12423
    HEAP32[$AsyncCtx2 + 20 >> 2] = $29; //@line 12425
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 12427
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 12429
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 12431
    sp = STACKTOP; //@line 12432
    STACKTOP = sp; //@line 12433
    return 0; //@line 12433
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12435
    $44 = HEAP32[$15 >> 2] | 0; //@line 12437
    break;
   }
  }
 } while (0);
 $43 = $3 + 12 | 0; //@line 12442
 HEAP32[$43 >> 2] = $44; //@line 12443
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12444
 $45 = FUNCTION_TABLE_iiii[$29 & 31]($0, $1, $3) | 0; //@line 12445
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 273; //@line 12448
  HEAP32[$AsyncCtx5 + 4 >> 2] = $43; //@line 12450
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 12452
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 12454
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 12456
  sp = STACKTOP; //@line 12457
  STACKTOP = sp; //@line 12458
  return 0; //@line 12458
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12460
 $50 = HEAP32[$43 >> 2] | 0; //@line 12461
 do {
  if ($50 | 0) {
   $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 12466
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12467
   FUNCTION_TABLE_vi[$53 & 511]($3); //@line 12468
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 274; //@line 12471
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 12473
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 12475
    HEAP32[$AsyncCtx9 + 12 >> 2] = $45; //@line 12477
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 12479
    sp = STACKTOP; //@line 12480
    STACKTOP = sp; //@line 12481
    return 0; //@line 12481
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12483
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$15 >> 2] | 0; //@line 12488
 if (!$58) {
  STACKTOP = sp; //@line 12491
  return $45 | 0; //@line 12491
 }
 $61 = HEAP32[$58 + 8 >> 2] | 0; //@line 12494
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12495
 FUNCTION_TABLE_vi[$61 & 511]($4); //@line 12496
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 275; //@line 12499
  HEAP32[$AsyncCtx13 + 4 >> 2] = $45; //@line 12501
  sp = STACKTOP; //@line 12502
  STACKTOP = sp; //@line 12503
  return 0; //@line 12503
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12505
 STACKTOP = sp; //@line 12506
 return $45 | 0; //@line 12506
}
function __ZN13SocketAddress14set_ip_addressEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016$i = 0, $$02537$i = 0, $$02636$i = 0, $$1$1$i = 0, $$1$2$i = 0, $$1$3$i = 0, $$1$i = 0, $2 = 0, $26 = 0, $35 = 0, $4 = 0, $45 = 0, $56 = 0, $6 = 0, $68 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4581
 STACKTOP = STACKTOP + 32 | 0; //@line 4582
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4582
 $vararg_buffer7 = sp + 24 | 0; //@line 4583
 $vararg_buffer4 = sp + 16 | 0; //@line 4584
 $vararg_buffer1 = sp + 8 | 0; //@line 4585
 $vararg_buffer = sp; //@line 4586
 $2 = sp + 28 | 0; //@line 4587
 HEAP8[$0 >> 0] = 0; //@line 4588
 L1 : do {
  if ($1 | 0) {
   $4 = HEAP8[$1 >> 0] | 0; //@line 4592
   do {
    if ($4 << 24 >> 24) {
     $$016$i = 0; //@line 4596
     $6 = $4; //@line 4596
     while (1) {
      if (!($6 << 24 >> 24 == 46 | ($6 + -48 & 255) < 10)) {
       $$02537$i = 0; //@line 4603
       $$02636$i = 0; //@line 4603
       $56 = $4; //@line 4603
       break;
      }
      $9 = $$016$i + 1 | 0; //@line 4606
      $6 = HEAP8[$1 + $9 >> 0] | 0; //@line 4608
      if (!($6 << 24 >> 24)) {
       label = 5; //@line 4611
       break;
      } else {
       $$016$i = $9; //@line 4614
      }
     }
     if ((label | 0) == 5) {
      if (($$016$i | 0) <= -1) {
       break;
      }
      if ((HEAP8[$1 + $$016$i >> 0] | 0) == 46) {
       $$02537$i = 0; //@line 4626
       $$02636$i = 0; //@line 4626
       $56 = $4; //@line 4626
      } else {
       break;
      }
     }
     do {
      if (!(($56 + -48 & 255) < 10 | ($56 + -97 & 255) < 6)) {
       switch ($56 << 24 >> 24) {
       case 58:
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
        {
         break;
        }
       default:
        {
         break L1;
        }
       }
      }
      $$02636$i = $$02636$i + ($56 << 24 >> 24 == 58 & 1) | 0; //@line 4649
      $$02537$i = $$02537$i + 1 | 0; //@line 4650
      $56 = HEAP8[$1 + $$02537$i >> 0] | 0; //@line 4652
     } while ($56 << 24 >> 24 != 0);
     if (($$02636$i | 0) <= 1) {
      break L1;
     }
     HEAP32[$0 + 40 >> 2] = 2; //@line 4665
     _stoip6($1, _strlen($1) | 0, $0 + 44 | 0); //@line 4668
     $$0 = 1; //@line 4669
     STACKTOP = sp; //@line 4670
     return $$0 | 0; //@line 4670
    }
   } while (0);
   HEAP32[$0 + 40 >> 2] = 1; //@line 4674
   HEAP32[$vararg_buffer >> 2] = $2; //@line 4675
   L19 : do {
    if ((_sscanf($1, 3700, $vararg_buffer) | 0) >= 1) {
     HEAP8[$0 + 44 >> 0] = HEAP32[$2 >> 2]; //@line 4683
     $$1$i = 0; //@line 4684
     L21 : while (1) {
      switch (HEAP8[$1 + $$1$i >> 0] | 0) {
      case 0:
       {
        break L19;
        break;
       }
      case 46:
       {
        break L21;
        break;
       }
      default:
       {}
      }
      $$1$i = $$1$i + 1 | 0; //@line 4701
     }
     $26 = $$1$i + 1 | 0; //@line 4703
     HEAP32[$vararg_buffer1 >> 2] = $2; //@line 4705
     if ((_sscanf($1 + $26 | 0, 3700, $vararg_buffer1) | 0) >= 1) {
      HEAP8[$0 + 45 >> 0] = HEAP32[$2 >> 2]; //@line 4712
      $$1$1$i = $26; //@line 4713
      L26 : while (1) {
       switch (HEAP8[$1 + $$1$1$i >> 0] | 0) {
       case 0:
        {
         break L19;
         break;
        }
       case 46:
        {
         break L26;
         break;
        }
       default:
        {}
       }
       $$1$1$i = $$1$1$i + 1 | 0; //@line 4730
      }
      $35 = $$1$1$i + 1 | 0; //@line 4732
      HEAP32[$vararg_buffer4 >> 2] = $2; //@line 4734
      if ((_sscanf($1 + $35 | 0, 3700, $vararg_buffer4) | 0) >= 1) {
       HEAP8[$0 + 46 >> 0] = HEAP32[$2 >> 2]; //@line 4741
       $$1$2$i = $35; //@line 4742
       L31 : while (1) {
        switch (HEAP8[$1 + $$1$2$i >> 0] | 0) {
        case 0:
         {
          break L19;
          break;
         }
        case 46:
         {
          break L31;
          break;
         }
        default:
         {}
        }
        $$1$2$i = $$1$2$i + 1 | 0; //@line 4759
       }
       $45 = $$1$2$i + 1 | 0; //@line 4761
       HEAP32[$vararg_buffer7 >> 2] = $2; //@line 4763
       if ((_sscanf($1 + $45 | 0, 3700, $vararg_buffer7) | 0) >= 1) {
        HEAP8[$0 + 47 >> 0] = HEAP32[$2 >> 2]; //@line 4770
        $$1$3$i = $45; //@line 4771
        L36 : while (1) {
         switch (HEAP8[$1 + $$1$3$i >> 0] | 0) {
         case 0:
          {
           break L19;
           break;
          }
         case 46:
          {
           break L36;
           break;
          }
         default:
          {}
         }
         $$1$3$i = $$1$3$i + 1 | 0; //@line 4788
        }
        $$0 = 1; //@line 4790
        STACKTOP = sp; //@line 4791
        return $$0 | 0; //@line 4791
       }
      }
     }
    }
   } while (0);
   $$0 = 1; //@line 4797
   STACKTOP = sp; //@line 4798
   return $$0 | 0; //@line 4798
  }
 } while (0);
 $68 = $0 + 40 | 0; //@line 4801
 HEAP32[$68 >> 2] = 0; //@line 4802
 HEAP32[$68 + 4 >> 2] = 0; //@line 4802
 HEAP32[$68 + 8 >> 2] = 0; //@line 4802
 HEAP32[$68 + 12 >> 2] = 0; //@line 4802
 HEAP32[$68 + 16 >> 2] = 0; //@line 4802
 $$0 = 0; //@line 4803
 STACKTOP = sp; //@line 4804
 return $$0 | 0; //@line 4804
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_205($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx19 = 0, sp = 0;
 sp = STACKTOP; //@line 16769
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16771
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16773
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16775
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16777
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16779
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16781
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16783
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16785
 if ($AsyncRetVal | 0) {
  __ZN9UDPSocketC2Ev($AsyncRetVal); //@line 16788
  $17 = HEAP32[$14 >> 2] | 0; //@line 16789
  $ReallocAsyncCtx19 = _emscripten_realloc_async_context(40) | 0; //@line 16790
  $18 = __ZN6Socket4openEP12NetworkStack($AsyncRetVal, $17) | 0; //@line 16791
  if (___async) {
   HEAP32[$ReallocAsyncCtx19 >> 2] = 213; //@line 16794
   $19 = $ReallocAsyncCtx19 + 4 | 0; //@line 16795
   HEAP32[$19 >> 2] = $2; //@line 16796
   $20 = $ReallocAsyncCtx19 + 8 | 0; //@line 16797
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 16798
   $21 = $ReallocAsyncCtx19 + 12 | 0; //@line 16799
   HEAP32[$21 >> 2] = $AsyncRetVal; //@line 16800
   $22 = $ReallocAsyncCtx19 + 16 | 0; //@line 16801
   HEAP32[$22 >> 2] = $6; //@line 16802
   $23 = $ReallocAsyncCtx19 + 20 | 0; //@line 16803
   HEAP32[$23 >> 2] = $8; //@line 16804
   $24 = $ReallocAsyncCtx19 + 24 | 0; //@line 16805
   HEAP32[$24 >> 2] = $10; //@line 16806
   $25 = $ReallocAsyncCtx19 + 28 | 0; //@line 16807
   HEAP32[$25 >> 2] = $12; //@line 16808
   $26 = $ReallocAsyncCtx19 + 32 | 0; //@line 16809
   HEAP32[$26 >> 2] = $14; //@line 16810
   $27 = $ReallocAsyncCtx19 + 36 | 0; //@line 16811
   HEAP32[$27 >> 2] = $AsyncRetVal; //@line 16812
   sp = STACKTOP; //@line 16813
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 16817
  ___async_unwind = 0; //@line 16818
  HEAP32[$ReallocAsyncCtx19 >> 2] = 213; //@line 16819
  $19 = $ReallocAsyncCtx19 + 4 | 0; //@line 16820
  HEAP32[$19 >> 2] = $2; //@line 16821
  $20 = $ReallocAsyncCtx19 + 8 | 0; //@line 16822
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 16823
  $21 = $ReallocAsyncCtx19 + 12 | 0; //@line 16824
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 16825
  $22 = $ReallocAsyncCtx19 + 16 | 0; //@line 16826
  HEAP32[$22 >> 2] = $6; //@line 16827
  $23 = $ReallocAsyncCtx19 + 20 | 0; //@line 16828
  HEAP32[$23 >> 2] = $8; //@line 16829
  $24 = $ReallocAsyncCtx19 + 24 | 0; //@line 16830
  HEAP32[$24 >> 2] = $10; //@line 16831
  $25 = $ReallocAsyncCtx19 + 28 | 0; //@line 16832
  HEAP32[$25 >> 2] = $12; //@line 16833
  $26 = $ReallocAsyncCtx19 + 32 | 0; //@line 16834
  HEAP32[$26 >> 2] = $14; //@line 16835
  $27 = $ReallocAsyncCtx19 + 36 | 0; //@line 16836
  HEAP32[$27 >> 2] = $AsyncRetVal; //@line 16837
  sp = STACKTOP; //@line 16838
  return;
 }
 $29 = $2 + 28 | 0; //@line 16841
 $30 = HEAP32[$29 >> 2] | 0; //@line 16842
 if (!$30) {
  $39 = $4 + 12 | 0; //@line 16845
  HEAP32[$39 >> 2] = 0; //@line 16846
  $40 = HEAP32[$2 >> 2] | 0; //@line 16847
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 16848
  __ZL28nsapi_dns_query_async_deletei($40); //@line 16849
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 215; //@line 16852
   $41 = $ReallocAsyncCtx15 + 4 | 0; //@line 16853
   HEAP32[$41 >> 2] = $39; //@line 16854
   $42 = $ReallocAsyncCtx15 + 8 | 0; //@line 16855
   HEAP32[$42 >> 2] = $4; //@line 16856
   sp = STACKTOP; //@line 16857
   return;
  }
  ___async_unwind = 0; //@line 16860
  HEAP32[$ReallocAsyncCtx15 >> 2] = 215; //@line 16861
  $41 = $ReallocAsyncCtx15 + 4 | 0; //@line 16862
  HEAP32[$41 >> 2] = $39; //@line 16863
  $42 = $ReallocAsyncCtx15 + 8 | 0; //@line 16864
  HEAP32[$42 >> 2] = $4; //@line 16865
  sp = STACKTOP; //@line 16866
  return;
 } else {
  $34 = HEAP32[$30 + 4 >> 2] | 0; //@line 16871
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 16872
  FUNCTION_TABLE_vii[$34 & 7]($4, $2 + 16 | 0); //@line 16873
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 214; //@line 16876
   $35 = $ReallocAsyncCtx + 4 | 0; //@line 16877
   HEAP32[$35 >> 2] = $29; //@line 16878
   $36 = $ReallocAsyncCtx + 8 | 0; //@line 16879
   HEAP32[$36 >> 2] = $4; //@line 16880
   $37 = $ReallocAsyncCtx + 12 | 0; //@line 16881
   HEAP32[$37 >> 2] = $2; //@line 16882
   $38 = $ReallocAsyncCtx + 16 | 0; //@line 16883
   HEAP32[$38 >> 2] = $4; //@line 16884
   sp = STACKTOP; //@line 16885
   return;
  }
  ___async_unwind = 0; //@line 16888
  HEAP32[$ReallocAsyncCtx >> 2] = 214; //@line 16889
  $35 = $ReallocAsyncCtx + 4 | 0; //@line 16890
  HEAP32[$35 >> 2] = $29; //@line 16891
  $36 = $ReallocAsyncCtx + 8 | 0; //@line 16892
  HEAP32[$36 >> 2] = $4; //@line 16893
  $37 = $ReallocAsyncCtx + 12 | 0; //@line 16894
  HEAP32[$37 >> 2] = $2; //@line 16895
  $38 = $ReallocAsyncCtx + 16 | 0; //@line 16896
  HEAP32[$38 >> 2] = $4; //@line 16897
  sp = STACKTOP; //@line 16898
  return;
 }
}
function _mbed_vtracef__async_cb_119($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $10 = 0, $14 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $32 = 0, $36 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5259
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 5262
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5264
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5266
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5268
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5270
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5274
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5278
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 5280
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 5282
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 5284
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 5286
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 5288
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 5292
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 5296
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 5300
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 5302
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 5304
 HEAP32[$44 >> 2] = HEAP32[___async_retval >> 2]; //@line 5311
 $50 = _snprintf($22, $24, 3567, $44) | 0; //@line 5312
 $$10 = ($50 | 0) >= ($24 | 0) ? 0 : $50; //@line 5314
 $53 = $22 + $$10 | 0; //@line 5316
 $54 = $24 - $$10 | 0; //@line 5317
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 5321
   $$3169 = $53; //@line 5321
   label = 4; //@line 5322
  }
 } else {
  $$3147168 = $24; //@line 5325
  $$3169 = $22; //@line 5325
  label = 4; //@line 5326
 }
 if ((label | 0) == 4) {
  $56 = $26 + -2 | 0; //@line 5329
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$28 >> 2] = $10; //@line 5335
    $$5156 = _snprintf($$3169, $$3147168, 3570, $28) | 0; //@line 5337
    break;
   }
  case 1:
   {
    HEAP32[$32 >> 2] = $10; //@line 5341
    $$5156 = _snprintf($$3169, $$3147168, 3585, $32) | 0; //@line 5343
    break;
   }
  case 3:
   {
    HEAP32[$36 >> 2] = $10; //@line 5347
    $$5156 = _snprintf($$3169, $$3147168, 3600, $36) | 0; //@line 5349
    break;
   }
  case 7:
   {
    HEAP32[$8 >> 2] = $10; //@line 5353
    $$5156 = _snprintf($$3169, $$3147168, 3615, $8) | 0; //@line 5355
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 3630, $14) | 0; //@line 5360
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 5364
  $67 = $$3169 + $$5156$ | 0; //@line 5366
  $68 = $$3147168 - $$5156$ | 0; //@line 5367
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 5371
   $70 = _vsnprintf($67, $68, $18, $20) | 0; //@line 5372
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 5375
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 5376
    $$expand_i1_val = $2 & 1; //@line 5377
    HEAP8[$71 >> 0] = $$expand_i1_val; //@line 5378
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 5379
    HEAP32[$72 >> 2] = $4; //@line 5380
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 5381
    HEAP32[$73 >> 2] = $6; //@line 5382
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 5383
    HEAP32[$74 >> 2] = $40; //@line 5384
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 5385
    HEAP32[$75 >> 2] = $42; //@line 5386
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 5387
    HEAP32[$76 >> 2] = $68; //@line 5388
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 5389
    HEAP32[$77 >> 2] = $67; //@line 5390
    sp = STACKTOP; //@line 5391
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 5395
   ___async_unwind = 0; //@line 5396
   HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 5397
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 5398
   $$expand_i1_val = $2 & 1; //@line 5399
   HEAP8[$71 >> 0] = $$expand_i1_val; //@line 5400
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 5401
   HEAP32[$72 >> 2] = $4; //@line 5402
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 5403
   HEAP32[$73 >> 2] = $6; //@line 5404
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 5405
   HEAP32[$74 >> 2] = $40; //@line 5406
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 5407
   HEAP32[$75 >> 2] = $42; //@line 5408
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 5409
   HEAP32[$76 >> 2] = $68; //@line 5410
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 5411
   HEAP32[$77 >> 2] = $67; //@line 5412
   sp = STACKTOP; //@line 5413
   return;
  }
 }
 $79 = HEAP32[133] | 0; //@line 5417
 $80 = HEAP32[126] | 0; //@line 5418
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 5419
 FUNCTION_TABLE_vi[$79 & 511]($80); //@line 5420
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 5423
  sp = STACKTOP; //@line 5424
  return;
 }
 ___async_unwind = 0; //@line 5427
 HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 5428
 sp = STACKTOP; //@line 5429
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_160($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14250
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14254
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14256
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14258
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14260
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14262
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14264
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14266
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14268
 $19 = $4 + 12 | 0; //@line 14270
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14271
 $20 = $10 + 12 | 0; //@line 14272
 $21 = HEAP32[$20 >> 2] | 0; //@line 14273
 if (!$21) {
  $34 = $8 + 12 | 0; //@line 14276
  HEAP32[$34 >> 2] = 0; //@line 14277
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 14278
  $35 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($12, $14, $4, $8, $16) | 0; //@line 14279
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 14282
   $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 14283
   HEAP32[$36 >> 2] = $34; //@line 14284
   $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 14285
   HEAP32[$37 >> 2] = $19; //@line 14286
   $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 14287
   HEAP32[$38 >> 2] = $8; //@line 14288
   $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 14289
   HEAP32[$39 >> 2] = $20; //@line 14290
   $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 14291
   HEAP32[$40 >> 2] = $4; //@line 14292
   $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 14293
   HEAP32[$41 >> 2] = $6; //@line 14294
   $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 14295
   HEAP32[$42 >> 2] = $18; //@line 14296
   sp = STACKTOP; //@line 14297
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 14301
  ___async_unwind = 0; //@line 14302
  HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 14303
  $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 14304
  HEAP32[$36 >> 2] = $34; //@line 14305
  $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 14306
  HEAP32[$37 >> 2] = $19; //@line 14307
  $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 14308
  HEAP32[$38 >> 2] = $8; //@line 14309
  $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 14310
  HEAP32[$39 >> 2] = $20; //@line 14311
  $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 14312
  HEAP32[$40 >> 2] = $4; //@line 14313
  $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 14314
  HEAP32[$41 >> 2] = $6; //@line 14315
  $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 14316
  HEAP32[$42 >> 2] = $18; //@line 14317
  sp = STACKTOP; //@line 14318
  return;
 } else {
  $24 = HEAP32[$21 + 4 >> 2] | 0; //@line 14322
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 14323
  FUNCTION_TABLE_vii[$24 & 7]($8, $6); //@line 14324
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 14327
   $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 14328
   HEAP32[$25 >> 2] = $4; //@line 14329
   $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 14330
   HEAP32[$26 >> 2] = $19; //@line 14331
   $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 14332
   HEAP32[$27 >> 2] = $6; //@line 14333
   $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 14334
   HEAP32[$28 >> 2] = $20; //@line 14335
   $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 14336
   HEAP32[$29 >> 2] = $8; //@line 14337
   $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 14338
   HEAP32[$30 >> 2] = $12; //@line 14339
   $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 14340
   HEAP32[$31 >> 2] = $14; //@line 14341
   $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 14342
   HEAP32[$32 >> 2] = $16; //@line 14343
   $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 14344
   HEAP32[$33 >> 2] = $18; //@line 14345
   sp = STACKTOP; //@line 14346
   return;
  }
  ___async_unwind = 0; //@line 14349
  HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 14350
  $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 14351
  HEAP32[$25 >> 2] = $4; //@line 14352
  $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 14353
  HEAP32[$26 >> 2] = $19; //@line 14354
  $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 14355
  HEAP32[$27 >> 2] = $6; //@line 14356
  $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 14357
  HEAP32[$28 >> 2] = $20; //@line 14358
  $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 14359
  HEAP32[$29 >> 2] = $8; //@line 14360
  $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 14361
  HEAP32[$30 >> 2] = $12; //@line 14362
  $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 14363
  HEAP32[$31 >> 2] = $14; //@line 14364
  $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 14365
  HEAP32[$32 >> 2] = $16; //@line 14366
  $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 14367
  HEAP32[$33 >> 2] = $18; //@line 14368
  sp = STACKTOP; //@line 14369
  return;
 }
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$unpack$i = 0, $$unpack4$i = 0, $15 = 0, $16 = 0, $20 = 0, $3 = 0, $30 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $5 = 0, $50 = 0, $55 = 0, $58 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3821
 STACKTOP = STACKTOP + 32 | 0; //@line 3822
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3822
 $3 = sp + 16 | 0; //@line 3823
 $4 = sp; //@line 3824
 $5 = $2 + 12 | 0; //@line 3825
 $6 = HEAP32[$5 >> 2] | 0; //@line 3826
 do {
  if (!$6) {
   $16 = 0; //@line 3830
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 3833
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 3834
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 3835
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 114; //@line 3838
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3840
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 3842
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 3844
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 3846
    HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 3848
    sp = STACKTOP; //@line 3849
    STACKTOP = sp; //@line 3850
    return 0; //@line 3850
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3852
    $16 = HEAP32[$5 >> 2] | 0; //@line 3854
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 3859
 HEAP32[$15 >> 2] = $16; //@line 3860
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 3863
 $$unpack4$i = HEAP32[$0 + 4 >> 2] | 0; //@line 3865
 $20 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 3867
 if (!($$unpack4$i & 1)) {
  $36 = $$unpack$i; //@line 3873
 } else {
  $36 = HEAP32[(HEAP32[$20 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 3878
 }
 do {
  if (!$16) {
   $41 = 0; //@line 3883
  } else {
   $30 = HEAP32[$16 + 4 >> 2] | 0; //@line 3886
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 3887
   FUNCTION_TABLE_vii[$30 & 7]($3, $4); //@line 3888
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 115; //@line 3891
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 3893
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 3895
    HEAP32[$AsyncCtx2 + 12 >> 2] = $20; //@line 3897
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 3899
    HEAP32[$AsyncCtx2 + 20 >> 2] = $36; //@line 3901
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3903
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 3905
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 3907
    sp = STACKTOP; //@line 3908
    STACKTOP = sp; //@line 3909
    return 0; //@line 3909
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3911
    $41 = HEAP32[$15 >> 2] | 0; //@line 3913
    break;
   }
  }
 } while (0);
 $40 = $3 + 12 | 0; //@line 3918
 HEAP32[$40 >> 2] = $41; //@line 3919
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3920
 $42 = FUNCTION_TABLE_iiii[$36 & 31]($20, $1, $3) | 0; //@line 3921
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 116; //@line 3924
  HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 3926
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 3928
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 3930
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 3932
  sp = STACKTOP; //@line 3933
  STACKTOP = sp; //@line 3934
  return 0; //@line 3934
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3936
 $47 = HEAP32[$40 >> 2] | 0; //@line 3937
 do {
  if ($47 | 0) {
   $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 3942
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3943
   FUNCTION_TABLE_vi[$50 & 511]($3); //@line 3944
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 117; //@line 3947
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 3949
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 3951
    HEAP32[$AsyncCtx9 + 12 >> 2] = $42; //@line 3953
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 3955
    sp = STACKTOP; //@line 3956
    STACKTOP = sp; //@line 3957
    return 0; //@line 3957
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 3959
    break;
   }
  }
 } while (0);
 $55 = HEAP32[$15 >> 2] | 0; //@line 3964
 if (!$55) {
  STACKTOP = sp; //@line 3967
  return $42 | 0; //@line 3967
 }
 $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 3970
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3971
 FUNCTION_TABLE_vi[$58 & 511]($4); //@line 3972
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 118; //@line 3975
  HEAP32[$AsyncCtx13 + 4 >> 2] = $42; //@line 3977
  sp = STACKTOP; //@line 3978
  STACKTOP = sp; //@line 3979
  return 0; //@line 3979
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 3981
 STACKTOP = sp; //@line 3982
 return $42 | 0; //@line 3982
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_165($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14575
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14579
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14581
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14583
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14585
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14587
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14589
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14591
 $16 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14592
 if ($16 | 0) {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 14596
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 14597
  FUNCTION_TABLE_vi[$19 & 511]($6); //@line 14598
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 98; //@line 14601
   $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 14602
   HEAP32[$20 >> 2] = $4; //@line 14603
   $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 14604
   HEAP32[$21 >> 2] = $8; //@line 14605
   $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 14606
   HEAP32[$22 >> 2] = $10; //@line 14607
   $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 14608
   HEAP32[$23 >> 2] = $12; //@line 14609
   $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 14610
   HEAP32[$24 >> 2] = $AsyncRetVal; //@line 14611
   $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 14612
   HEAP32[$25 >> 2] = $14; //@line 14613
   sp = STACKTOP; //@line 14614
   return;
  }
  ___async_unwind = 0; //@line 14617
  HEAP32[$ReallocAsyncCtx6 >> 2] = 98; //@line 14618
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 14619
  HEAP32[$20 >> 2] = $4; //@line 14620
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 14621
  HEAP32[$21 >> 2] = $8; //@line 14622
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 14623
  HEAP32[$22 >> 2] = $10; //@line 14624
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 14625
  HEAP32[$23 >> 2] = $12; //@line 14626
  $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 14627
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 14628
  $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 14629
  HEAP32[$25 >> 2] = $14; //@line 14630
  sp = STACKTOP; //@line 14631
  return;
 }
 $26 = HEAP32[$4 >> 2] | 0; //@line 14634
 if ($26 | 0) {
  $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 14638
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 14639
  FUNCTION_TABLE_vi[$29 & 511]($10); //@line 14640
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 14643
   $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 14644
   HEAP32[$30 >> 2] = $8; //@line 14645
   $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 14646
   HEAP32[$31 >> 2] = $12; //@line 14647
   $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 14648
   HEAP32[$32 >> 2] = $AsyncRetVal; //@line 14649
   $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 14650
   HEAP32[$33 >> 2] = $14; //@line 14651
   sp = STACKTOP; //@line 14652
   return;
  }
  ___async_unwind = 0; //@line 14655
  HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 14656
  $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 14657
  HEAP32[$30 >> 2] = $8; //@line 14658
  $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 14659
  HEAP32[$31 >> 2] = $12; //@line 14660
  $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 14661
  HEAP32[$32 >> 2] = $AsyncRetVal; //@line 14662
  $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 14663
  HEAP32[$33 >> 2] = $14; //@line 14664
  sp = STACKTOP; //@line 14665
  return;
 }
 $34 = HEAP32[$8 >> 2] | 0; //@line 14668
 if (!$34) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 14672
  return;
 }
 $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 14676
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 14677
 FUNCTION_TABLE_vi[$37 & 511]($12); //@line 14678
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 14681
  $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 14682
  HEAP32[$38 >> 2] = $12; //@line 14683
  $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 14684
  HEAP32[$39 >> 2] = $AsyncRetVal; //@line 14685
  $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 14686
  HEAP32[$40 >> 2] = $14; //@line 14687
  sp = STACKTOP; //@line 14688
  return;
 }
 ___async_unwind = 0; //@line 14691
 HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 14692
 $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 14693
 HEAP32[$38 >> 2] = $12; //@line 14694
 $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 14695
 HEAP32[$39 >> 2] = $AsyncRetVal; //@line 14696
 $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 14697
 HEAP32[$40 >> 2] = $14; //@line 14698
 sp = STACKTOP; //@line 14699
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7336
 STACKTOP = STACKTOP + 32 | 0; //@line 7337
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7337
 $5 = sp + 16 | 0; //@line 7338
 $6 = sp; //@line 7339
 $7 = $2 + 12 | 0; //@line 7340
 $8 = HEAP32[$7 >> 2] | 0; //@line 7341
 do {
  if (!$8) {
   $20 = 0; //@line 7345
  } else {
   $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 7348
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 7349
   FUNCTION_TABLE_vii[$11 & 7]($5, $2); //@line 7350
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 165; //@line 7353
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 7355
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 7357
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 7359
    HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 7361
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 7363
    HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 7365
    HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 7367
    sp = STACKTOP; //@line 7368
    STACKTOP = sp; //@line 7369
    return 0; //@line 7369
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7371
    $20 = HEAP32[$7 >> 2] | 0; //@line 7373
    break;
   }
  }
 } while (0);
 $19 = $5 + 12 | 0; //@line 7378
 HEAP32[$19 >> 2] = $20; //@line 7379
 $21 = $3 + 12 | 0; //@line 7380
 $22 = HEAP32[$21 >> 2] | 0; //@line 7381
 do {
  if (!$22) {
   $34 = 0; //@line 7385
  } else {
   $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 7388
   $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7389
   FUNCTION_TABLE_vii[$25 & 7]($6, $3); //@line 7390
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 166; //@line 7393
    HEAP32[$AsyncCtx2 + 4 >> 2] = $21; //@line 7395
    HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 7397
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 7399
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 7401
    HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 7403
    HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 7405
    HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 7407
    sp = STACKTOP; //@line 7408
    STACKTOP = sp; //@line 7409
    return 0; //@line 7409
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7411
    $34 = HEAP32[$21 >> 2] | 0; //@line 7413
    break;
   }
  }
 } while (0);
 $33 = $6 + 12 | 0; //@line 7418
 HEAP32[$33 >> 2] = $34; //@line 7419
 $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7420
 $35 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $5, 0, $6, $4) | 0; //@line 7421
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 167; //@line 7424
  HEAP32[$AsyncCtx13 + 4 >> 2] = $33; //@line 7426
  HEAP32[$AsyncCtx13 + 8 >> 2] = $19; //@line 7428
  HEAP32[$AsyncCtx13 + 12 >> 2] = $6; //@line 7430
  HEAP32[$AsyncCtx13 + 16 >> 2] = $5; //@line 7432
  sp = STACKTOP; //@line 7433
  STACKTOP = sp; //@line 7434
  return 0; //@line 7434
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7436
 $40 = HEAP32[$33 >> 2] | 0; //@line 7437
 do {
  if ($40 | 0) {
   $43 = HEAP32[$40 + 8 >> 2] | 0; //@line 7442
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7443
   FUNCTION_TABLE_vi[$43 & 511]($6); //@line 7444
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 168; //@line 7447
    HEAP32[$AsyncCtx6 + 4 >> 2] = $19; //@line 7449
    HEAP32[$AsyncCtx6 + 8 >> 2] = $35; //@line 7451
    HEAP32[$AsyncCtx6 + 12 >> 2] = $5; //@line 7453
    sp = STACKTOP; //@line 7454
    STACKTOP = sp; //@line 7455
    return 0; //@line 7455
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7457
    break;
   }
  }
 } while (0);
 $47 = HEAP32[$19 >> 2] | 0; //@line 7462
 if (!$47) {
  STACKTOP = sp; //@line 7465
  return $35 | 0; //@line 7465
 }
 $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 7468
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7469
 FUNCTION_TABLE_vi[$50 & 511]($5); //@line 7470
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 169; //@line 7473
  HEAP32[$AsyncCtx10 + 4 >> 2] = $35; //@line 7475
  sp = STACKTOP; //@line 7476
  STACKTOP = sp; //@line 7477
  return 0; //@line 7477
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7479
 STACKTOP = sp; //@line 7480
 return $35 | 0; //@line 7480
}
function __ZN9TCPSocket7connectEPKct__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$expand_i1_val = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23330
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23332
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 23334
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23336
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23338
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23340
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -3009; //@line 23345
  $42 = ___async_retval; //@line 23346
  HEAP32[$42 >> 2] = $$0; //@line 23347
  return;
 }
 __ZN13SocketAddress8set_portEt($2, $4); //@line 23350
 $13 = $6 + 57 | 0; //@line 23351
 if (HEAP8[$13 >> 0] | 0) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 23355
  _mbed_assert_internal(3726, 3746, 52); //@line 23356
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 23359
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 23360
   HEAP32[$16 >> 2] = $13; //@line 23361
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 23362
   HEAP32[$17 >> 2] = $6; //@line 23363
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 23364
   HEAP32[$18 >> 2] = $10; //@line 23365
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 23366
   HEAP32[$19 >> 2] = $2; //@line 23367
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 23368
   HEAP32[$20 >> 2] = $8; //@line 23369
   sp = STACKTOP; //@line 23370
   return;
  }
  ___async_unwind = 0; //@line 23373
  HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 23374
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 23375
  HEAP32[$16 >> 2] = $13; //@line 23376
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 23377
  HEAP32[$17 >> 2] = $6; //@line 23378
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 23379
  HEAP32[$18 >> 2] = $10; //@line 23380
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 23381
  HEAP32[$19 >> 2] = $2; //@line 23382
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 23383
  HEAP32[$20 >> 2] = $8; //@line 23384
  sp = STACKTOP; //@line 23385
  return;
 }
 HEAP8[$13 >> 0] = 1; //@line 23388
 $21 = $6 + 8 | 0; //@line 23389
 $22 = $6 + 52 | 0; //@line 23390
 $23 = $6 + 12 | 0; //@line 23391
 $24 = HEAP32[$21 >> 2] | 0; //@line 23392
 if (!$24) {
  HEAP8[$13 >> 0] = 0; //@line 23395
  $$0 = 0 & -3005 == -3015 ? 0 : -3005; //@line 23399
  $42 = ___async_retval; //@line 23400
  HEAP32[$42 >> 2] = $$0; //@line 23401
  return;
 }
 HEAP32[$22 >> 2] = 0; //@line 23404
 $26 = HEAP32[$10 >> 2] | 0; //@line 23405
 $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 23408
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 23409
 $30 = FUNCTION_TABLE_iiii[$29 & 31]($26, $24, $2) | 0; //@line 23410
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 23413
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 23414
  HEAP32[$31 >> 2] = $23; //@line 23415
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 23416
  HEAP32[$32 >> 2] = $21; //@line 23417
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 23418
  HEAP32[$33 >> 2] = $13; //@line 23419
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 23420
  $$expand_i1_val = 0; //@line 23421
  HEAP8[$34 >> 0] = $$expand_i1_val; //@line 23422
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 23423
  HEAP32[$35 >> 2] = $8; //@line 23424
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 23425
  HEAP32[$36 >> 2] = $22; //@line 23426
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 23427
  HEAP32[$37 >> 2] = $10; //@line 23428
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 23429
  HEAP32[$38 >> 2] = $2; //@line 23430
  sp = STACKTOP; //@line 23431
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 23435
 ___async_unwind = 0; //@line 23436
 HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 23437
 $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 23438
 HEAP32[$31 >> 2] = $23; //@line 23439
 $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 23440
 HEAP32[$32 >> 2] = $21; //@line 23441
 $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 23442
 HEAP32[$33 >> 2] = $13; //@line 23443
 $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 23444
 $$expand_i1_val = 0; //@line 23445
 HEAP8[$34 >> 0] = $$expand_i1_val; //@line 23446
 $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 23447
 HEAP32[$35 >> 2] = $8; //@line 23448
 $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 23449
 HEAP32[$36 >> 2] = $22; //@line 23450
 $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 23451
 HEAP32[$37 >> 2] = $10; //@line 23452
 $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 23453
 HEAP32[$38 >> 2] = $2; //@line 23454
 sp = STACKTOP; //@line 23455
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_201($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16351
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16353
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16355
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16357
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16359
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16361
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16363
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16365
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16367
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16369
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16371
 $21 = $8 + 44 | 0; //@line 16372
 $22 = HEAP32[$21 >> 2] | 0; //@line 16373
 if ($22 | 0) {
  $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 16377
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 16378
  FUNCTION_TABLE_vii[$25 & 7]($10, $12); //@line 16379
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 16382
   $26 = $ReallocAsyncCtx9 + 4 | 0; //@line 16383
   HEAP32[$26 >> 2] = $21; //@line 16384
   $27 = $ReallocAsyncCtx9 + 8 | 0; //@line 16385
   HEAP32[$27 >> 2] = $18; //@line 16386
   $28 = $ReallocAsyncCtx9 + 12 | 0; //@line 16387
   HEAP32[$28 >> 2] = $20; //@line 16388
   $29 = $ReallocAsyncCtx9 + 16 | 0; //@line 16389
   HEAP32[$29 >> 2] = $14; //@line 16390
   $30 = $ReallocAsyncCtx9 + 20 | 0; //@line 16391
   HEAP32[$30 >> 2] = $6; //@line 16392
   $31 = $ReallocAsyncCtx9 + 24 | 0; //@line 16393
   HEAP32[$31 >> 2] = $16; //@line 16394
   $32 = $ReallocAsyncCtx9 + 28 | 0; //@line 16395
   HEAP32[$32 >> 2] = $2; //@line 16396
   $33 = $ReallocAsyncCtx9 + 32 | 0; //@line 16397
   HEAP32[$33 >> 2] = $4; //@line 16398
   $34 = $ReallocAsyncCtx9 + 36 | 0; //@line 16399
   HEAP32[$34 >> 2] = $8; //@line 16400
   sp = STACKTOP; //@line 16401
   return;
  }
  ___async_unwind = 0; //@line 16404
  HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 16405
  $26 = $ReallocAsyncCtx9 + 4 | 0; //@line 16406
  HEAP32[$26 >> 2] = $21; //@line 16407
  $27 = $ReallocAsyncCtx9 + 8 | 0; //@line 16408
  HEAP32[$27 >> 2] = $18; //@line 16409
  $28 = $ReallocAsyncCtx9 + 12 | 0; //@line 16410
  HEAP32[$28 >> 2] = $20; //@line 16411
  $29 = $ReallocAsyncCtx9 + 16 | 0; //@line 16412
  HEAP32[$29 >> 2] = $14; //@line 16413
  $30 = $ReallocAsyncCtx9 + 20 | 0; //@line 16414
  HEAP32[$30 >> 2] = $6; //@line 16415
  $31 = $ReallocAsyncCtx9 + 24 | 0; //@line 16416
  HEAP32[$31 >> 2] = $16; //@line 16417
  $32 = $ReallocAsyncCtx9 + 28 | 0; //@line 16418
  HEAP32[$32 >> 2] = $2; //@line 16419
  $33 = $ReallocAsyncCtx9 + 32 | 0; //@line 16420
  HEAP32[$33 >> 2] = $4; //@line 16421
  $34 = $ReallocAsyncCtx9 + 36 | 0; //@line 16422
  HEAP32[$34 >> 2] = $8; //@line 16423
  sp = STACKTOP; //@line 16424
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 16427
 $$pre85 = HEAP32[$20 >> 2] | 0; //@line 16428
 HEAP32[$$pre85 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 16432
 HEAP32[$6 + 8 >> 2] = 0; //@line 16434
 HEAP32[$6 >> 2] = 228; //@line 16435
 HEAP32[$6 + 4 >> 2] = $$pre85; //@line 16437
 $39 = $6 + 12 | 0; //@line 16438
 HEAP32[$39 >> 2] = 764; //@line 16439
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 16440
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($16, $6); //@line 16441
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 16444
  $40 = $ReallocAsyncCtx18 + 4 | 0; //@line 16445
  HEAP32[$40 >> 2] = $39; //@line 16446
  $41 = $ReallocAsyncCtx18 + 8 | 0; //@line 16447
  HEAP32[$41 >> 2] = $2; //@line 16448
  $42 = $ReallocAsyncCtx18 + 12 | 0; //@line 16449
  HEAP32[$42 >> 2] = $4; //@line 16450
  $43 = $ReallocAsyncCtx18 + 16 | 0; //@line 16451
  HEAP32[$43 >> 2] = $6; //@line 16452
  $44 = $ReallocAsyncCtx18 + 20 | 0; //@line 16453
  HEAP32[$44 >> 2] = $8; //@line 16454
  sp = STACKTOP; //@line 16455
  return;
 }
 ___async_unwind = 0; //@line 16458
 HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 16459
 $40 = $ReallocAsyncCtx18 + 4 | 0; //@line 16460
 HEAP32[$40 >> 2] = $39; //@line 16461
 $41 = $ReallocAsyncCtx18 + 8 | 0; //@line 16462
 HEAP32[$41 >> 2] = $2; //@line 16463
 $42 = $ReallocAsyncCtx18 + 12 | 0; //@line 16464
 HEAP32[$42 >> 2] = $4; //@line 16465
 $43 = $ReallocAsyncCtx18 + 16 | 0; //@line 16466
 HEAP32[$43 >> 2] = $6; //@line 16467
 $44 = $ReallocAsyncCtx18 + 20 | 0; //@line 16468
 HEAP32[$44 >> 2] = $8; //@line 16469
 sp = STACKTOP; //@line 16470
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$04 = 0, $11 = 0, $15 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9268
 STACKTOP = STACKTOP + 32 | 0; //@line 9269
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9269
 $3 = sp + 16 | 0; //@line 9270
 $4 = sp; //@line 9271
 $7 = $2 + 12 | 0; //@line 9274
 $8 = HEAP32[$7 >> 2] | 0; //@line 9275
 $9 = ($8 | 0) == 0; //@line 9276
 if (!(HEAP32[1957] | 0)) {
  do {
   if ($9) {
    $30 = 0; //@line 9280
   } else {
    $24 = HEAP32[$8 + 4 >> 2] | 0; //@line 9283
    $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9284
    FUNCTION_TABLE_vii[$24 & 7]($4, $2); //@line 9285
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 204; //@line 9288
     HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 9290
     HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 9292
     HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 9294
     HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 9296
     sp = STACKTOP; //@line 9297
     STACKTOP = sp; //@line 9298
     return 0; //@line 9298
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9300
     $30 = HEAP32[$7 >> 2] | 0; //@line 9302
     break;
    }
   }
  } while (0);
  $29 = $4 + 12 | 0; //@line 9307
  HEAP32[$29 >> 2] = $30; //@line 9308
  $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9309
  $31 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $4) | 0; //@line 9310
  if (___async) {
   HEAP32[$AsyncCtx14 >> 2] = 205; //@line 9313
   HEAP32[$AsyncCtx14 + 4 >> 2] = $29; //@line 9315
   HEAP32[$AsyncCtx14 + 8 >> 2] = $4; //@line 9317
   sp = STACKTOP; //@line 9318
   STACKTOP = sp; //@line 9319
   return 0; //@line 9319
  }
  _emscripten_free_async_context($AsyncCtx14 | 0); //@line 9321
  $34 = HEAP32[$29 >> 2] | 0; //@line 9322
  if (!$34) {
   $$04 = $31; //@line 9325
   STACKTOP = sp; //@line 9326
   return $$04 | 0; //@line 9326
  }
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 9329
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9330
  FUNCTION_TABLE_vi[$37 & 511]($4); //@line 9331
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 206; //@line 9334
   HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 9336
   sp = STACKTOP; //@line 9337
   STACKTOP = sp; //@line 9338
   return 0; //@line 9338
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9340
  $$04 = $31; //@line 9341
  STACKTOP = sp; //@line 9342
  return $$04 | 0; //@line 9342
 } else {
  do {
   if ($9) {
    $16 = 0; //@line 9346
   } else {
    $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 9349
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9350
    FUNCTION_TABLE_vii[$11 & 7]($3, $2); //@line 9351
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 201; //@line 9354
     HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 9356
     HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 9358
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 9360
     sp = STACKTOP; //@line 9361
     STACKTOP = sp; //@line 9362
     return 0; //@line 9362
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9364
     $16 = HEAP32[$7 >> 2] | 0; //@line 9366
     break;
    }
   }
  } while (0);
  $15 = $3 + 12 | 0; //@line 9371
  HEAP32[$15 >> 2] = $16; //@line 9372
  $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9373
  __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(7816, $1, $3) | 0; //@line 9374
  if (___async) {
   HEAP32[$AsyncCtx17 >> 2] = 202; //@line 9377
   HEAP32[$AsyncCtx17 + 4 >> 2] = $15; //@line 9379
   HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 9381
   sp = STACKTOP; //@line 9382
   STACKTOP = sp; //@line 9383
   return 0; //@line 9383
  }
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 9385
  $19 = HEAP32[$15 >> 2] | 0; //@line 9386
  if (!$19) {
   $$04 = 0; //@line 9389
   STACKTOP = sp; //@line 9390
   return $$04 | 0; //@line 9390
  }
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 9393
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9394
  FUNCTION_TABLE_vi[$22 & 511]($3); //@line 9395
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 203; //@line 9398
   sp = STACKTOP; //@line 9399
   STACKTOP = sp; //@line 9400
   return 0; //@line 9400
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9402
  $$04 = 0; //@line 9403
  STACKTOP = sp; //@line 9404
  return $$04 | 0; //@line 9404
 }
 return 0; //@line 9406
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_48($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $7 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18979
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18981
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18983
 $7 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 18986
 if ($7 | 0) {
  $11 = HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0; //@line 18991
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 18992
  FUNCTION_TABLE_vi[$11 & 511]($7); //@line 18993
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 234; //@line 18996
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 18997
   HEAP32[$12 >> 2] = $2; //@line 18998
   $13 = $ReallocAsyncCtx + 8 | 0; //@line 18999
   HEAP32[$13 >> 2] = $4; //@line 19000
   sp = STACKTOP; //@line 19001
   return;
  }
  ___async_unwind = 0; //@line 19004
  HEAP32[$ReallocAsyncCtx >> 2] = 234; //@line 19005
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 19006
  HEAP32[$12 >> 2] = $2; //@line 19007
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 19008
  HEAP32[$13 >> 2] = $4; //@line 19009
  sp = STACKTOP; //@line 19010
  return;
 }
 $15 = HEAP32[$2 + 60 >> 2] | 0; //@line 19014
 do {
  if ($15 | 0) {
   $18 = HEAP32[$15 + 12 >> 2] | 0; //@line 19019
   if (!$18) {
    __ZdlPv($15); //@line 19022
    break;
   }
   $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 19026
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 19027
   FUNCTION_TABLE_vi[$21 & 511]($15); //@line 19028
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 19031
    $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 19032
    HEAP32[$22 >> 2] = $15; //@line 19033
    $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 19034
    HEAP32[$23 >> 2] = $2; //@line 19035
    $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 19036
    HEAP32[$24 >> 2] = $4; //@line 19037
    sp = STACKTOP; //@line 19038
    return;
   }
   ___async_unwind = 0; //@line 19041
   HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 19042
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 19043
   HEAP32[$22 >> 2] = $15; //@line 19044
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 19045
   HEAP32[$23 >> 2] = $2; //@line 19046
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 19047
   HEAP32[$24 >> 2] = $4; //@line 19048
   sp = STACKTOP; //@line 19049
   return;
  }
 } while (0);
 $26 = HEAP32[$2 + 64 >> 2] | 0; //@line 19054
 if ($26 | 0) {
  __ZdaPv($26); //@line 19057
 }
 $29 = HEAP32[$2 + 12 >> 2] | 0; //@line 19060
 if ($29 | 0) {
  __ZdlPv($29); //@line 19063
 }
 $32 = HEAP32[$2 + 44 >> 2] | 0; //@line 19066
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 19071
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 19072
  FUNCTION_TABLE_vi[$36 & 511]($2 + 32 | 0); //@line 19073
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 19076
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 19077
   HEAP32[$37 >> 2] = $2; //@line 19078
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 19079
   HEAP32[$38 >> 2] = $4; //@line 19080
   sp = STACKTOP; //@line 19081
   return;
  }
  ___async_unwind = 0; //@line 19084
  HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 19085
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 19086
  HEAP32[$37 >> 2] = $2; //@line 19087
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 19088
  HEAP32[$38 >> 2] = $4; //@line 19089
  sp = STACKTOP; //@line 19090
  return;
 }
 $40 = HEAP32[$2 + 28 >> 2] | 0; //@line 19094
 if (!$40) {
  __ZdlPv($2); //@line 19097
  HEAP32[7844 + ($4 << 2) >> 2] = 0; //@line 19099
  return;
 }
 $44 = HEAP32[$40 + 8 >> 2] | 0; //@line 19104
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 19105
 FUNCTION_TABLE_vi[$44 & 511]($2 + 16 | 0); //@line 19106
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 19109
  $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 19110
  HEAP32[$45 >> 2] = $2; //@line 19111
  $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 19112
  HEAP32[$46 >> 2] = $4; //@line 19113
  sp = STACKTOP; //@line 19114
  return;
 }
 ___async_unwind = 0; //@line 19117
 HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 19118
 $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 19119
 HEAP32[$45 >> 2] = $2; //@line 19120
 $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 19121
 HEAP32[$46 >> 2] = $4; //@line 19122
 sp = STACKTOP; //@line 19123
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_29($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17649
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17651
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17653
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17655
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17657
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17659
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17661
 if (!$AsyncRetVal) {
  $28 = 0 == 0; //@line 17664
  $29 = HEAP32[$2 >> 2] | 0; //@line 17665
  if (!$29) {
   if ($28) {
    $$06 = -3007; //@line 17669
    $34 = ___async_retval; //@line 17670
    HEAP32[$34 >> 2] = $$06; //@line 17671
    return;
   }
   $$06 = 0; //@line 17674
   $34 = ___async_retval; //@line 17675
   HEAP32[$34 >> 2] = $$06; //@line 17676
   return;
  } else {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 17680
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17681
   FUNCTION_TABLE_vi[$32 & 511]($8); //@line 17682
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 17685
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 17686
    $$expand_i1_val = $28 & 1; //@line 17687
    HEAP8[$33 >> 0] = $$expand_i1_val; //@line 17688
    sp = STACKTOP; //@line 17689
    return;
   }
   ___async_unwind = 0; //@line 17692
   HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 17693
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 17694
   $$expand_i1_val = $28 & 1; //@line 17695
   HEAP8[$33 >> 0] = $$expand_i1_val; //@line 17696
   sp = STACKTOP; //@line 17697
   return;
  }
 } else {
  $13 = HEAP32[$2 >> 2] | 0; //@line 17701
  if (!$13) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 17705
   _equeue_event_delay($AsyncRetVal, $4); //@line 17706
   _equeue_event_dtor($AsyncRetVal, 105); //@line 17707
   $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 17708
   $24 = _equeue_post($6, 106, $AsyncRetVal) | 0; //@line 17709
   if (___async) {
    HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 17712
    $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 17713
    HEAP32[$25 >> 2] = $2; //@line 17714
    $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 17715
    HEAP32[$26 >> 2] = $8; //@line 17716
    sp = STACKTOP; //@line 17717
    return;
   }
   HEAP32[___async_retval >> 2] = $24; //@line 17721
   ___async_unwind = 0; //@line 17722
   HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 17723
   $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 17724
   HEAP32[$25 >> 2] = $2; //@line 17725
   $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 17726
   HEAP32[$26 >> 2] = $8; //@line 17727
   sp = STACKTOP; //@line 17728
   return;
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 17732
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 17733
   FUNCTION_TABLE_vii[$16 & 7]($AsyncRetVal, $8); //@line 17734
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 17737
    $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 17738
    HEAP32[$17 >> 2] = $10; //@line 17739
    $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 17740
    HEAP32[$18 >> 2] = $AsyncRetVal; //@line 17741
    $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 17742
    HEAP32[$19 >> 2] = $4; //@line 17743
    $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 17744
    HEAP32[$20 >> 2] = $6; //@line 17745
    $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 17746
    HEAP32[$21 >> 2] = $2; //@line 17747
    $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 17748
    HEAP32[$22 >> 2] = $8; //@line 17749
    sp = STACKTOP; //@line 17750
    return;
   }
   ___async_unwind = 0; //@line 17753
   HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 17754
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 17755
   HEAP32[$17 >> 2] = $10; //@line 17756
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 17757
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 17758
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 17759
   HEAP32[$19 >> 2] = $4; //@line 17760
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 17761
   HEAP32[$20 >> 2] = $6; //@line 17762
   $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 17763
   HEAP32[$21 >> 2] = $2; //@line 17764
   $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 17765
   HEAP32[$22 >> 2] = $8; //@line 17766
   sp = STACKTOP; //@line 17767
   return;
  }
 }
}
function __ZN9TCPSocket7connectEPKct($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$off0$i = 0, $$08$i = 0, $$byval_copy = 0, $16 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5237
 STACKTOP = STACKTOP + 112 | 0; //@line 5238
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 5238
 $$byval_copy = sp + 88 | 0; //@line 5239
 $3 = sp + 24 | 0; //@line 5240
 $4 = sp; //@line 5241
 HEAP32[$4 >> 2] = 0; //@line 5242
 HEAP32[$4 + 4 >> 2] = 0; //@line 5242
 HEAP32[$4 + 8 >> 2] = 0; //@line 5242
 HEAP32[$4 + 12 >> 2] = 0; //@line 5242
 HEAP32[$4 + 16 >> 2] = 0; //@line 5242
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 5243
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 5243
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 5243
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 5243
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 5243
 __ZN13SocketAddressC2E10nsapi_addrt($3, $$byval_copy, 0); //@line 5244
 $5 = $0 + 4 | 0; //@line 5245
 $6 = HEAP32[$5 >> 2] | 0; //@line 5246
 $8 = HEAP32[HEAP32[$6 >> 2] >> 2] | 0; //@line 5248
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 5249
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($6, $1, $3, 0) | 0; //@line 5250
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 141; //@line 5253
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 5255
  HEAP16[$AsyncCtx + 8 >> 1] = $2; //@line 5257
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5259
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 5261
  HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 5263
  sp = STACKTOP; //@line 5264
  STACKTOP = sp; //@line 5265
  return 0; //@line 5265
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5267
 if ($9 | 0) {
  $$0 = -3009; //@line 5270
  STACKTOP = sp; //@line 5271
  return $$0 | 0; //@line 5271
 }
 __ZN13SocketAddress8set_portEt($3, $2); //@line 5273
 $16 = $0 + 57 | 0; //@line 5274
 do {
  if (HEAP8[$16 >> 0] | 0) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5279
   _mbed_assert_internal(3726, 3746, 52); //@line 5280
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 142; //@line 5283
    HEAP32[$AsyncCtx7 + 4 >> 2] = $16; //@line 5285
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 5287
    HEAP32[$AsyncCtx7 + 12 >> 2] = $5; //@line 5289
    HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 5291
    HEAP32[$AsyncCtx7 + 20 >> 2] = $3; //@line 5293
    sp = STACKTOP; //@line 5294
    STACKTOP = sp; //@line 5295
    return 0; //@line 5295
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5297
    break;
   }
  }
 } while (0);
 HEAP8[$16 >> 0] = 1; //@line 5302
 $24 = $0 + 8 | 0; //@line 5303
 $25 = $0 + 52 | 0; //@line 5304
 $26 = $0 + 12 | 0; //@line 5305
 $$0$off0$i = 0; //@line 5306
 while (1) {
  $27 = HEAP32[$24 >> 2] | 0; //@line 5308
  if (!$27) {
   $$08$i = -3005; //@line 5311
   break;
  }
  HEAP32[$25 >> 2] = 0; //@line 5314
  $29 = HEAP32[$5 >> 2] | 0; //@line 5315
  $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 60 >> 2] | 0; //@line 5318
  $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5319
  $33 = FUNCTION_TABLE_iiii[$32 & 31]($29, $27, $3) | 0; //@line 5320
  if (___async) {
   label = 11; //@line 5323
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5326
  if ((HEAP32[$26 >> 2] | 0) != 0 & ($33 | 1 | 0) == -3013) {
   $$0$off0$i = 1; //@line 5333
  } else {
   $$08$i = $33; //@line 5335
   break;
  }
 }
 if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 143; //@line 5340
  HEAP32[$AsyncCtx3 + 4 >> 2] = $26; //@line 5342
  HEAP32[$AsyncCtx3 + 8 >> 2] = $24; //@line 5344
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 5346
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$0$off0$i & 1; //@line 5349
  HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 5351
  HEAP32[$AsyncCtx3 + 24 >> 2] = $25; //@line 5353
  HEAP32[$AsyncCtx3 + 28 >> 2] = $5; //@line 5355
  HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 5357
  sp = STACKTOP; //@line 5358
  STACKTOP = sp; //@line 5359
  return 0; //@line 5359
 }
 HEAP8[$16 >> 0] = 0; //@line 5361
 $$0 = $$0$off0$i & ($$08$i | 0) == -3015 ? 0 : $$08$i; //@line 5365
 STACKTOP = sp; //@line 5366
 return $$0 | 0; //@line 5366
}
function __Z28nsapi_dns_query_async_canceli($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $31 = 0, $35 = 0, $39 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12545
 STACKTOP = STACKTOP + 16 | 0; //@line 12546
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12546
 $1 = sp; //@line 12547
 $2 = HEAP32[1961] | 0; //@line 12548
 if (!$2) {
  label = 3; //@line 12551
 } else {
  if ((HEAP32[$2 >> 2] | 0) == ($0 | 0)) {
   $$lcssa = $2; //@line 12556
  } else {
   label = 3; //@line 12558
  }
 }
 do {
  if ((label | 0) == 3) {
   $6 = HEAP32[1962] | 0; //@line 12563
   if ($6 | 0) {
    if ((HEAP32[$6 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $6; //@line 12569
     break;
    }
   }
   $35 = HEAP32[1963] | 0; //@line 12573
   if ($35 | 0) {
    if ((HEAP32[$35 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $35; //@line 12579
     break;
    }
   }
   $39 = HEAP32[1964] | 0; //@line 12583
   if ($39 | 0) {
    if ((HEAP32[$39 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $39; //@line 12589
     break;
    }
   }
   $43 = HEAP32[1965] | 0; //@line 12593
   if (!$43) {
    $$0 = -3003; //@line 12596
    STACKTOP = sp; //@line 12597
    return $$0 | 0; //@line 12597
   }
   if ((HEAP32[$43 >> 2] | 0) == ($0 | 0)) {
    $$lcssa = $43; //@line 12602
   } else {
    $$0 = -3003; //@line 12604
    STACKTOP = sp; //@line 12605
    return $$0 | 0; //@line 12605
   }
  }
 } while (0);
 $8 = $$lcssa + 88 | 0; //@line 12609
 if ((HEAP32[$8 >> 2] | 0) == 2) {
  $$0 = -3003; //@line 12613
  STACKTOP = sp; //@line 12614
  return $$0 | 0; //@line 12614
 }
 HEAP32[$8 >> 2] = 2; //@line 12616
 HEAP32[$1 >> 2] = 0; //@line 12617
 HEAP32[$1 + 4 >> 2] = 0; //@line 12617
 HEAP32[$1 + 8 >> 2] = 0; //@line 12617
 HEAP32[$1 + 12 >> 2] = 0; //@line 12617
 $11 = $$lcssa + 16 | 0; //@line 12618
 do {
  if (($11 | 0) != ($1 | 0)) {
   $13 = $$lcssa + 28 | 0; //@line 12622
   $14 = HEAP32[$13 >> 2] | 0; //@line 12623
   if ($14 | 0) {
    $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 12627
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 12628
    FUNCTION_TABLE_vi[$17 & 511]($11); //@line 12629
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 277; //@line 12632
     HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12634
     HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 12636
     HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 12638
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 12640
     sp = STACKTOP; //@line 12641
     STACKTOP = sp; //@line 12642
     return 0; //@line 12642
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12644
    $$phi$trans$insert = $1 + 12 | 0; //@line 12645
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 12646
    if ($$pre | 0) {
     $24 = HEAP32[$$pre + 4 >> 2] | 0; //@line 12650
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12651
     FUNCTION_TABLE_vii[$24 & 7]($11, $1); //@line 12652
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 278; //@line 12655
      HEAP32[$AsyncCtx2 + 4 >> 2] = $$phi$trans$insert; //@line 12657
      HEAP32[$AsyncCtx2 + 8 >> 2] = $13; //@line 12659
      HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 12661
      sp = STACKTOP; //@line 12662
      STACKTOP = sp; //@line 12663
      return 0; //@line 12663
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12665
     $$pre$i$i = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 12666
     HEAP32[$13 >> 2] = $$pre$i$i; //@line 12667
     if (!$$pre$i$i) {
      break;
     }
     $31 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 12674
     $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12675
     FUNCTION_TABLE_vi[$31 & 511]($1); //@line 12676
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 279; //@line 12679
      HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 12681
      sp = STACKTOP; //@line 12682
      STACKTOP = sp; //@line 12683
      return 0; //@line 12683
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12685
      break;
     }
    }
   }
   HEAP32[$13 >> 2] = 0; //@line 12690
  }
 } while (0);
 $$0 = 0; //@line 12693
 STACKTOP = sp; //@line 12694
 return $$0 | 0; //@line 12694
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $$unpack$i = 0, $$unpack4$i = 0, $10 = 0, $11 = 0, $15 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16848
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16850
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16852
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16854
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16858
 $$pre$i = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 16859
 $11 = $2 + 12 | 0; //@line 16860
 HEAP32[$11 >> 2] = $$pre$i; //@line 16861
 $$unpack$i = HEAP32[$6 >> 2] | 0; //@line 16864
 $$unpack4$i = HEAP32[$6 + 4 >> 2] | 0; //@line 16866
 $15 = (HEAP32[$6 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 16868
 $18 = $$pre$i; //@line 16871
 if (!($$unpack4$i & 1)) {
  $31 = $$unpack$i; //@line 16874
 } else {
  $31 = HEAP32[(HEAP32[$15 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 16879
 }
 if (!$$pre$i) {
  $35 = $4 + 12 | 0; //@line 16883
  HEAP32[$35 >> 2] = 0; //@line 16884
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 16885
  $36 = FUNCTION_TABLE_iiii[$31 & 31]($15, $10, $4) | 0; //@line 16886
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 16889
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 16890
   HEAP32[$37 >> 2] = $35; //@line 16891
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 16892
   HEAP32[$38 >> 2] = $4; //@line 16893
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 16894
   HEAP32[$39 >> 2] = $11; //@line 16895
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 16896
   HEAP32[$40 >> 2] = $2; //@line 16897
   sp = STACKTOP; //@line 16898
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 16902
  ___async_unwind = 0; //@line 16903
  HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 16904
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 16905
  HEAP32[$37 >> 2] = $35; //@line 16906
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 16907
  HEAP32[$38 >> 2] = $4; //@line 16908
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 16909
  HEAP32[$39 >> 2] = $11; //@line 16910
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 16911
  HEAP32[$40 >> 2] = $2; //@line 16912
  sp = STACKTOP; //@line 16913
  return;
 } else {
  $25 = HEAP32[$18 + 4 >> 2] | 0; //@line 16917
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 16918
  FUNCTION_TABLE_vii[$25 & 7]($4, $2); //@line 16919
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 16922
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 16923
   HEAP32[$26 >> 2] = $11; //@line 16924
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 16925
   HEAP32[$27 >> 2] = $4; //@line 16926
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 16927
   HEAP32[$28 >> 2] = $15; //@line 16928
   $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 16929
   HEAP32[$29 >> 2] = $10; //@line 16930
   $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 16931
   HEAP32[$30 >> 2] = $31; //@line 16932
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 16933
   HEAP32[$32 >> 2] = $4; //@line 16934
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 16935
   HEAP32[$33 >> 2] = $11; //@line 16936
   $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 16937
   HEAP32[$34 >> 2] = $2; //@line 16938
   sp = STACKTOP; //@line 16939
   return;
  }
  ___async_unwind = 0; //@line 16942
  HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 16943
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 16944
  HEAP32[$26 >> 2] = $11; //@line 16945
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 16946
  HEAP32[$27 >> 2] = $4; //@line 16947
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 16948
  HEAP32[$28 >> 2] = $15; //@line 16949
  $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 16950
  HEAP32[$29 >> 2] = $10; //@line 16951
  $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 16952
  HEAP32[$30 >> 2] = $31; //@line 16953
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 16954
  HEAP32[$32 >> 2] = $4; //@line 16955
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 16956
  HEAP32[$33 >> 2] = $11; //@line 16957
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 16958
  HEAP32[$34 >> 2] = $2; //@line 16959
  sp = STACKTOP; //@line 16960
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_174($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15265
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15267
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15269
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15271
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15273
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15275
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15277
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 15280
 $16 = HEAP8[$0 + 29 >> 0] & 1; //@line 15283
 $18 = HEAP8[$0 + 30 >> 0] & 1; //@line 15286
 $20 = HEAP32[$0 + 32 >> 2] | 0; //@line 15288
 $22 = HEAP32[$0 + 36 >> 2] | 0; //@line 15290
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 15292
 $26 = HEAP32[$0 + 44 >> 2] | 0; //@line 15294
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 15296
 L2 : do {
  if (!(HEAP8[$24 >> 0] | 0)) {
   do {
    if (!(HEAP8[$8 >> 0] | 0)) {
     $$182$off0 = $16; //@line 15305
     $$186$off0 = $18; //@line 15305
    } else {
     if (!(HEAP8[$6 >> 0] | 0)) {
      if (!(HEAP32[$22 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $18; //@line 15314
       $$283$off0 = 1; //@line 15314
       label = 13; //@line 15315
       break L2;
      } else {
       $$182$off0 = 1; //@line 15318
       $$186$off0 = $18; //@line 15318
       break;
      }
     }
     if ((HEAP32[$4 >> 2] | 0) == 1) {
      label = 18; //@line 15325
      break L2;
     }
     if (!(HEAP32[$22 >> 2] & 2)) {
      label = 18; //@line 15332
      break L2;
     } else {
      $$182$off0 = 1; //@line 15335
      $$186$off0 = 1; //@line 15335
     }
    }
   } while (0);
   $30 = $20 + 8 | 0; //@line 15339
   if ($30 >>> 0 < $2 >>> 0) {
    HEAP8[$6 >> 0] = 0; //@line 15342
    HEAP8[$8 >> 0] = 0; //@line 15343
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(52) | 0; //@line 15344
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $10, $12, $12, 1, $14); //@line 15345
    if (!___async) {
     ___async_unwind = 0; //@line 15348
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 356; //@line 15350
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 15352
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 15354
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 15356
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 15358
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 15360
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 15362
    HEAP8[$ReallocAsyncCtx5 + 28 >> 0] = $14 & 1; //@line 15365
    HEAP8[$ReallocAsyncCtx5 + 29 >> 0] = $$182$off0 & 1; //@line 15368
    HEAP8[$ReallocAsyncCtx5 + 30 >> 0] = $$186$off0 & 1; //@line 15371
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $30; //@line 15373
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $22; //@line 15375
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $24; //@line 15377
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $26; //@line 15379
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 15381
    sp = STACKTOP; //@line 15382
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 15385
    $$283$off0 = $$182$off0; //@line 15385
    label = 13; //@line 15386
   }
  } else {
   $$085$off0$reg2mem$0 = $18; //@line 15389
   $$283$off0 = $16; //@line 15389
   label = 13; //@line 15390
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$26 >> 2] = $12; //@line 15396
    $59 = $10 + 40 | 0; //@line 15397
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 15400
    if ((HEAP32[$10 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$4 >> 2] | 0) == 2) {
      HEAP8[$24 >> 0] = 1; //@line 15408
      if ($$283$off0) {
       label = 18; //@line 15410
       break;
      } else {
       $67 = 4; //@line 15413
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 15420
   } else {
    $67 = 4; //@line 15422
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 15427
 }
 HEAP32[$28 >> 2] = $67; //@line 15429
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_28($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17528
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17530
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17532
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17534
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17536
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17538
 if (!$AsyncRetVal) {
  $25 = 0 == 0; //@line 17541
  $26 = HEAP32[$2 >> 2] | 0; //@line 17542
  if (!$26) {
   if ($25) {
    $$06 = -3007; //@line 17546
    $31 = ___async_retval; //@line 17547
    HEAP32[$31 >> 2] = $$06; //@line 17548
    return;
   }
   $$06 = 0; //@line 17551
   $31 = ___async_retval; //@line 17552
   HEAP32[$31 >> 2] = $$06; //@line 17553
   return;
  } else {
   $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 17557
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17558
   FUNCTION_TABLE_vi[$29 & 511]($6); //@line 17559
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 17562
    $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 17563
    $$expand_i1_val = $25 & 1; //@line 17564
    HEAP8[$30 >> 0] = $$expand_i1_val; //@line 17565
    sp = STACKTOP; //@line 17566
    return;
   }
   ___async_unwind = 0; //@line 17569
   HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 17570
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 17571
   $$expand_i1_val = $25 & 1; //@line 17572
   HEAP8[$30 >> 0] = $$expand_i1_val; //@line 17573
   sp = STACKTOP; //@line 17574
   return;
  }
 } else {
  $11 = HEAP32[$2 >> 2] | 0; //@line 17578
  if (!$11) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 17582
   _equeue_event_dtor($AsyncRetVal, 105); //@line 17583
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 17584
   $21 = _equeue_post($4, 106, $AsyncRetVal) | 0; //@line 17585
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 17588
    $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 17589
    HEAP32[$22 >> 2] = $2; //@line 17590
    $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 17591
    HEAP32[$23 >> 2] = $6; //@line 17592
    sp = STACKTOP; //@line 17593
    return;
   }
   HEAP32[___async_retval >> 2] = $21; //@line 17597
   ___async_unwind = 0; //@line 17598
   HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 17599
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 17600
   HEAP32[$22 >> 2] = $2; //@line 17601
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 17602
   HEAP32[$23 >> 2] = $6; //@line 17603
   sp = STACKTOP; //@line 17604
   return;
  } else {
   $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 17608
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 17609
   FUNCTION_TABLE_vii[$14 & 7]($AsyncRetVal, $6); //@line 17610
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 17613
    $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 17614
    HEAP32[$15 >> 2] = $8; //@line 17615
    $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 17616
    HEAP32[$16 >> 2] = $AsyncRetVal; //@line 17617
    $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 17618
    HEAP32[$17 >> 2] = $4; //@line 17619
    $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 17620
    HEAP32[$18 >> 2] = $2; //@line 17621
    $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 17622
    HEAP32[$19 >> 2] = $6; //@line 17623
    sp = STACKTOP; //@line 17624
    return;
   }
   ___async_unwind = 0; //@line 17627
   HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 17628
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 17629
   HEAP32[$15 >> 2] = $8; //@line 17630
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 17631
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 17632
   $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 17633
   HEAP32[$17 >> 2] = $4; //@line 17634
   $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 17635
   HEAP32[$18 >> 2] = $2; //@line 17636
   $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 17637
   HEAP32[$19 >> 2] = $6; //@line 17638
   sp = STACKTOP; //@line 17639
   return;
  }
 }
}
function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0; //@line 9183
 $3 = HEAP32[$2 >> 2] | 0; //@line 9184
 $4 = $0 + 100 | 0; //@line 9185
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1; //@line 9190
  $11 = HEAPU8[$3 >> 0] | 0; //@line 9193
 } else {
  $11 = ___shgetc($0) | 0; //@line 9196
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1; //@line 9201
   $14 = HEAP32[$2 >> 2] | 0; //@line 9202
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1; //@line 9207
    $22 = HEAPU8[$14 >> 0] | 0; //@line 9210
   } else {
    $22 = ___shgetc($0) | 0; //@line 9213
   }
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$4 >> 2] | 0)) {
     $$0 = $13; //@line 9223
     $$049 = $22; //@line 9223
    } else {
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9227
     $$0 = $13; //@line 9228
     $$049 = $22; //@line 9228
    }
   } else {
    $$0 = $13; //@line 9231
    $$049 = $22; //@line 9231
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 9236
   $$049 = $11; //@line 9236
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $100 = -2147483648; //@line 9245
   $101 = 0; //@line 9245
  } else {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9249
   $100 = -2147483648; //@line 9250
   $101 = 0; //@line 9250
  }
 } else {
  $$04860 = 0; //@line 9253
  $$159 = $$049; //@line 9253
  while (1) {
   $$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0; //@line 9257
   $38 = HEAP32[$2 >> 2] | 0; //@line 9258
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1; //@line 9263
    $$1$be = HEAPU8[$38 >> 0] | 0; //@line 9266
   } else {
    $$1$be = ___shgetc($0) | 0; //@line 9269
   }
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) {
    break;
   } else {
    $$159 = $$1$be; //@line 9276
   }
  }
  $50 = (($$04860 | 0) < 0) << 31 >> 31; //@line 9282
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be; //@line 9286
   $55 = $$04860; //@line 9286
   $56 = $50; //@line 9286
   while (1) {
    $57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0; //@line 9288
    $58 = tempRet0; //@line 9289
    $61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 9292
    $63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0; //@line 9294
    $64 = tempRet0; //@line 9295
    $65 = HEAP32[$2 >> 2] | 0; //@line 9296
    if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $65 + 1; //@line 9301
     $$2$be = HEAPU8[$65 >> 0] | 0; //@line 9304
    } else {
     $$2$be = ___shgetc($0) | 0; //@line 9307
    }
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
     $$254 = $$2$be; //@line 9318
     $55 = $63; //@line 9318
     $56 = $64; //@line 9318
    } else {
     $$2$lcssa = $$2$be; //@line 9320
     $94 = $63; //@line 9320
     $95 = $64; //@line 9320
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be; //@line 9325
   $94 = $$04860; //@line 9325
   $95 = $50; //@line 9325
  }
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $80 = HEAP32[$2 >> 2] | 0; //@line 9331
    if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $80 + 1; //@line 9336
     $$3$be = HEAPU8[$80 >> 0] | 0; //@line 9339
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 9342
    }
   } while (($$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9356
  }
  $93 = ($$0 | 0) != 0; //@line 9358
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0; //@line 9359
  $100 = $93 ? tempRet0 : $95; //@line 9363
  $101 = $93 ? $96 : $94; //@line 9363
 }
 tempRet0 = $100; //@line 9365
 return $101 | 0; //@line 9366
}
function _ip6tos($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$049$be78 = 0, $$04962 = 0, $$05075 = 0, $$05274 = 0, $$05573 = 0, $$05872 = 0, $$1 = 0, $$151$lcssa = 0, $$15165 = 0, $$15364 = 0, $$2 = 0, $$254 = 0, $$257 = 0, $$260 = 0, $$3 = 0, $$461 = 0, $$lcssa = 0, $$shrunk = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $23 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $42 = 0, $45 = 0, $57 = 0, $59 = 0, $9 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2390
 STACKTOP = STACKTOP + 16 | 0; //@line 2391
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2391
 $vararg_buffer = sp; //@line 2392
 $$05075 = 0; //@line 2393
 $$05274 = $0; //@line 2393
 $$05573 = 1; //@line 2393
 $$05872 = -1; //@line 2393
 $15 = 0; //@line 2393
 while (1) {
  $9 = $$05274 + 2 | 0; //@line 2399
  if (!((HEAPU8[$$05274 >> 0] | 0) << 8 | (HEAPU8[$$05274 + 1 >> 0] | 0))) {
   $14 = $15 + 1 | 0; //@line 2405
   $16 = $14 & 255; //@line 2406
   $17 = $14 & 255; //@line 2407
   L5 : do {
    if (($16 & 255) < 8) {
     $$15165 = $16; //@line 2411
     $$15364 = $9; //@line 2411
     $indvars$iv = $17; //@line 2411
     while (1) {
      $23 = $$15364 + 2 | 0; //@line 2417
      if ((HEAPU8[$$15364 >> 0] | 0) << 8 | (HEAPU8[$$15364 + 1 >> 0] | 0) | 0) {
       $$151$lcssa = $indvars$iv & 255; //@line 2424
       $$254 = $23; //@line 2424
       $$lcssa = $indvars$iv; //@line 2424
       break L5;
      }
      $indvars$iv$next = $indvars$iv + 1 | 0; //@line 2427
      $29 = $$15165 + 1 << 24 >> 24; //@line 2428
      if ($indvars$iv$next >>> 0 < 8) {
       $$15165 = $29; //@line 2431
       $$15364 = $23; //@line 2431
       $indvars$iv = $indvars$iv$next; //@line 2431
      } else {
       $$151$lcssa = $29; //@line 2433
       $$254 = $23; //@line 2433
       $$lcssa = $indvars$iv$next; //@line 2433
       break;
      }
     }
    } else {
     $$151$lcssa = $16; //@line 2438
     $$254 = $9; //@line 2438
     $$lcssa = $17; //@line 2438
    }
   } while (0);
   $31 = $$lcssa - $15 | 0; //@line 2441
   $33 = ($31 | 0) > ($$05573 & 255 | 0); //@line 2443
   $$2 = $$151$lcssa; //@line 2447
   $$257 = $33 ? $31 & 255 : $$05573; //@line 2447
   $$260 = $33 ? $$05075 : $$05872; //@line 2447
   $$3 = $$254; //@line 2447
  } else {
   $$2 = $$05075; //@line 2449
   $$257 = $$05573; //@line 2449
   $$260 = $$05872; //@line 2449
   $$3 = $9; //@line 2449
  }
  $35 = $$2 + 1 << 24 >> 24; //@line 2451
  if (($35 & 255) < 8) {
   $$05075 = $35; //@line 2455
   $$05274 = $$3; //@line 2455
   $$05573 = $$257; //@line 2455
   $$05872 = $$260; //@line 2455
   $15 = $35 & 255; //@line 2455
  } else {
   break;
  }
 }
 $2 = $$257 & 255; //@line 2460
 $3 = $2 << 1; //@line 2461
 $4 = $$260 << 24 >> 24 == 0; //@line 2462
 $$04962 = $1; //@line 2463
 $$461 = $0; //@line 2463
 $$shrunk = 0; //@line 2463
 while (1) {
  $42 = $$shrunk & 255; //@line 2465
  if ($$shrunk << 24 >> 24 != $$260 << 24 >> 24) {
   $57 = $$shrunk + 1 << 24 >> 24; //@line 2475
   HEAP32[$vararg_buffer >> 2] = (HEAPU8[$$461 >> 0] | 0) << 8 | (HEAPU8[$$461 + 1 >> 0] | 0); //@line 2476
   $59 = $$04962 + (_sprintf($$04962, 3650, $vararg_buffer) | 0) | 0; //@line 2478
   if ($57 << 24 >> 24 == 8) {
    $$049$be78 = $59; //@line 2481
    label = 9; //@line 2482
    break;
   }
   HEAP8[$59 >> 0] = 58; //@line 2487
   $$04962 = $59 + 1 | 0; //@line 2488
   $$461 = $$461 + 2 | 0; //@line 2488
   $$shrunk = $57; //@line 2488
   continue;
  }
  if ($4) {
   HEAP8[$$04962 >> 0] = 58; //@line 2493
   $$1 = $$04962 + 1 | 0; //@line 2494
  } else {
   $$1 = $$04962; //@line 2496
  }
  $45 = $$1 + 1 | 0; //@line 2498
  HEAP8[$$1 >> 0] = 58; //@line 2499
  $$shrunk = $42 + $2 & 255; //@line 2502
  if (($$shrunk & 255) >= 8) {
   $$049$be78 = $45; //@line 2507
   label = 9; //@line 2508
   break;
  } else {
   $$04962 = $45; //@line 2505
   $$461 = $$461 + $3 | 0; //@line 2505
  }
 }
 if ((label | 0) == 9) {
  HEAP8[$$049$be78 >> 0] = 0; //@line 2513
  STACKTOP = sp; //@line 2518
  return $$049$be78 - $1 & 255 | 0; //@line 2518
 }
 return 0; //@line 2520
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_173($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15109
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15111
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15113
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15115
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15117
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 15120
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15122
 $15 = $12 + 24 | 0; //@line 15125
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 15130
   if (!($18 & 2)) {
    $21 = $4 + 36 | 0; //@line 15134
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $4 + 54 | 0; //@line 15141
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 15152
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 15153
      if (!___async) {
       ___async_unwind = 0; //@line 15156
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 360; //@line 15158
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 15160
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 15162
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 15164
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 15166
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $4; //@line 15168
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $6; //@line 15170
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $8; //@line 15172
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $10 & 1; //@line 15175
      sp = STACKTOP; //@line 15176
      return;
     }
     $36 = $4 + 24 | 0; //@line 15179
     $37 = $4 + 54 | 0; //@line 15180
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 15195
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 15196
     if (!___async) {
      ___async_unwind = 0; //@line 15199
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 359; //@line 15201
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 15203
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 15205
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 15207
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 15209
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 15211
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $4; //@line 15213
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 15215
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 15217
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $10 & 1; //@line 15220
     sp = STACKTOP; //@line 15221
     return;
    }
   }
   $24 = $4 + 54 | 0; //@line 15225
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 15229
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 15230
    if (!___async) {
     ___async_unwind = 0; //@line 15233
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 358; //@line 15235
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 15237
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 15239
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 15241
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $4; //@line 15243
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 15245
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 15247
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $10 & 1; //@line 15250
    sp = STACKTOP; //@line 15251
    return;
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14982
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14987
 } else {
  $9 = $1 + 52 | 0; //@line 14989
  $10 = HEAP8[$9 >> 0] | 0; //@line 14990
  $11 = $1 + 53 | 0; //@line 14991
  $12 = HEAP8[$11 >> 0] | 0; //@line 14992
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 14995
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 14996
  HEAP8[$9 >> 0] = 0; //@line 14997
  HEAP8[$11 >> 0] = 0; //@line 14998
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14999
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 15000
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 354; //@line 15003
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 15005
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15007
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15009
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 15011
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 15013
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 15015
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 15017
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 15019
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 15021
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 15023
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 15026
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 15028
   sp = STACKTOP; //@line 15029
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15032
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 15037
    $32 = $0 + 8 | 0; //@line 15038
    $33 = $1 + 54 | 0; //@line 15039
    $$0 = $0 + 24 | 0; //@line 15040
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 15073
     HEAP8[$11 >> 0] = 0; //@line 15074
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 15075
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 15076
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15081
     $62 = $$0 + 8 | 0; //@line 15082
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 15085
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 355; //@line 15090
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 15092
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 15094
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 15096
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 15098
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 15100
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 15102
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 15104
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 15106
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 15108
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 15110
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 15112
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 15114
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 15116
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 15119
    sp = STACKTOP; //@line 15120
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 15124
  HEAP8[$11 >> 0] = $12; //@line 15125
 }
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24064
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24068
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24070
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24072
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24074
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24076
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24078
 $15 = $4 + 12 | 0; //@line 24080
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24081
 $16 = $6 + 12 | 0; //@line 24082
 $17 = HEAP32[$16 >> 2] | 0; //@line 24083
 if (!$17) {
  $28 = $8 + 12 | 0; //@line 24086
  HEAP32[$28 >> 2] = 0; //@line 24087
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 24088
  $29 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($10, $12, $4, 0, $8, $14) | 0; //@line 24089
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 24092
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 24093
   HEAP32[$30 >> 2] = $28; //@line 24094
   $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 24095
   HEAP32[$31 >> 2] = $15; //@line 24096
   $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 24097
   HEAP32[$32 >> 2] = $8; //@line 24098
   $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 24099
   HEAP32[$33 >> 2] = $4; //@line 24100
   sp = STACKTOP; //@line 24101
   return;
  }
  HEAP32[___async_retval >> 2] = $29; //@line 24105
  ___async_unwind = 0; //@line 24106
  HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 24107
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 24108
  HEAP32[$30 >> 2] = $28; //@line 24109
  $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 24110
  HEAP32[$31 >> 2] = $15; //@line 24111
  $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 24112
  HEAP32[$32 >> 2] = $8; //@line 24113
  $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 24114
  HEAP32[$33 >> 2] = $4; //@line 24115
  sp = STACKTOP; //@line 24116
  return;
 } else {
  $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 24120
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 24121
  FUNCTION_TABLE_vii[$20 & 7]($8, $6); //@line 24122
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 166; //@line 24125
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 24126
   HEAP32[$21 >> 2] = $16; //@line 24127
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 24128
   HEAP32[$22 >> 2] = $8; //@line 24129
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 24130
   HEAP32[$23 >> 2] = $10; //@line 24131
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 24132
   HEAP32[$24 >> 2] = $12; //@line 24133
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 24134
   HEAP32[$25 >> 2] = $4; //@line 24135
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 24136
   HEAP32[$26 >> 2] = $14; //@line 24137
   $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 24138
   HEAP32[$27 >> 2] = $15; //@line 24139
   sp = STACKTOP; //@line 24140
   return;
  }
  ___async_unwind = 0; //@line 24143
  HEAP32[$ReallocAsyncCtx2 >> 2] = 166; //@line 24144
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 24145
  HEAP32[$21 >> 2] = $16; //@line 24146
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 24147
  HEAP32[$22 >> 2] = $8; //@line 24148
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 24149
  HEAP32[$23 >> 2] = $10; //@line 24150
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 24151
  HEAP32[$24 >> 2] = $12; //@line 24152
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 24153
  HEAP32[$25 >> 2] = $4; //@line 24154
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 24155
  HEAP32[$26 >> 2] = $14; //@line 24156
  $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 24157
  HEAP32[$27 >> 2] = $15; //@line 24158
  sp = STACKTOP; //@line 24159
  return;
 }
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11057
      $10 = HEAP32[$9 >> 2] | 0; //@line 11058
      HEAP32[$2 >> 2] = $9 + 4; //@line 11060
      HEAP32[$0 >> 2] = $10; //@line 11061
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11077
      $17 = HEAP32[$16 >> 2] | 0; //@line 11078
      HEAP32[$2 >> 2] = $16 + 4; //@line 11080
      $20 = $0; //@line 11083
      HEAP32[$20 >> 2] = $17; //@line 11085
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 11088
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11104
      $30 = HEAP32[$29 >> 2] | 0; //@line 11105
      HEAP32[$2 >> 2] = $29 + 4; //@line 11107
      $31 = $0; //@line 11108
      HEAP32[$31 >> 2] = $30; //@line 11110
      HEAP32[$31 + 4 >> 2] = 0; //@line 11113
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11129
      $41 = $40; //@line 11130
      $43 = HEAP32[$41 >> 2] | 0; //@line 11132
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 11135
      HEAP32[$2 >> 2] = $40 + 8; //@line 11137
      $47 = $0; //@line 11138
      HEAP32[$47 >> 2] = $43; //@line 11140
      HEAP32[$47 + 4 >> 2] = $46; //@line 11143
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11159
      $57 = HEAP32[$56 >> 2] | 0; //@line 11160
      HEAP32[$2 >> 2] = $56 + 4; //@line 11162
      $59 = ($57 & 65535) << 16 >> 16; //@line 11164
      $62 = $0; //@line 11167
      HEAP32[$62 >> 2] = $59; //@line 11169
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 11172
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11188
      $72 = HEAP32[$71 >> 2] | 0; //@line 11189
      HEAP32[$2 >> 2] = $71 + 4; //@line 11191
      $73 = $0; //@line 11193
      HEAP32[$73 >> 2] = $72 & 65535; //@line 11195
      HEAP32[$73 + 4 >> 2] = 0; //@line 11198
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11214
      $83 = HEAP32[$82 >> 2] | 0; //@line 11215
      HEAP32[$2 >> 2] = $82 + 4; //@line 11217
      $85 = ($83 & 255) << 24 >> 24; //@line 11219
      $88 = $0; //@line 11222
      HEAP32[$88 >> 2] = $85; //@line 11224
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 11227
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11243
      $98 = HEAP32[$97 >> 2] | 0; //@line 11244
      HEAP32[$2 >> 2] = $97 + 4; //@line 11246
      $99 = $0; //@line 11248
      HEAP32[$99 >> 2] = $98 & 255; //@line 11250
      HEAP32[$99 + 4 >> 2] = 0; //@line 11253
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11269
      $109 = +HEAPF64[$108 >> 3]; //@line 11270
      HEAP32[$2 >> 2] = $108 + 8; //@line 11272
      HEAPF64[$0 >> 3] = $109; //@line 11273
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11289
      $116 = +HEAPF64[$115 >> 3]; //@line 11290
      HEAP32[$2 >> 2] = $115 + 8; //@line 11292
      HEAPF64[$0 >> 3] = $116; //@line 11293
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$2 = 0, $$pr = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $27 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $54 = 0, $59 = 0, $61 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $80 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7136
 if (!$2) {
  return;
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, HEAP32[$1 >> 2] | 0, 0) | 0)) {
  return;
 }
 $7 = HEAP32[1958] | 0; //@line 7147
 if (!$7) {
  $$2 = 0; //@line 7150
 } else {
  $10 = $7 + 32 | 0; //@line 7153
  $12 = HEAP32[$10 >> 2] | 0; //@line 7155
  $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 7158
  $16 = HEAP32[1959] | 0; //@line 7159
  if (!$16) {
   $$2 = 1; //@line 7162
  } else {
   $59 = $16 + 32 | 0; //@line 7165
   $61 = HEAP32[$59 >> 2] | 0; //@line 7167
   $64 = HEAP32[$59 + 4 >> 2] | 0; //@line 7170
   $69 = $64 >>> 0 > $15 >>> 0 | ($64 | 0) == ($15 | 0) & $61 >>> 0 > $12 >>> 0; //@line 7175
   $70 = HEAP32[1960] | 0; //@line 7176
   if (!$70) {
    $$2 = 2; //@line 7179
   } else {
    $73 = $69 ? $15 : $64; //@line 7184
    $75 = $70 + 32 | 0; //@line 7186
    $80 = HEAP32[$75 + 4 >> 2] | 0; //@line 7191
    $$2 = $80 >>> 0 > $73 >>> 0 | (($80 | 0) == ($73 | 0) ? (HEAP32[$75 >> 2] | 0) >>> 0 > ($69 ? $12 : $61) >>> 0 : 0) ? ($69 ^ 1) & 1 : 2; //@line 7198
   }
  }
 }
 $18 = 7832 + ($$2 << 2) | 0; //@line 7202
 $19 = HEAP32[$18 >> 2] | 0; //@line 7203
 do {
  if (!$19) {
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7207
   $21 = __ZnwjRKSt9nothrow_t(40, 9765) | 0; //@line 7208
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 162; //@line 7211
    HEAP32[$AsyncCtx + 4 >> 2] = $18; //@line 7213
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7215
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7217
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7219
    sp = STACKTOP; //@line 7220
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7223
    HEAP32[$18 >> 2] = $21; //@line 7224
    $30 = $21; //@line 7225
    $31 = $21; //@line 7225
    break;
   }
  } else {
   $27 = HEAP32[$19 + 20 >> 2] | 0; //@line 7230
   if (!$27) {
    $$pr = $19; //@line 7233
   } else {
    __ZdlPv($27); //@line 7235
    $$pr = HEAP32[$18 >> 2] | 0; //@line 7237
   }
   $30 = $$pr; //@line 7239
   $31 = $$pr; //@line 7239
  }
 } while (0);
 if (!$30) {
  return;
 }
 HEAP32[$31 >> 2] = HEAP32[$1 >> 2]; //@line 7246
 HEAP32[$31 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7246
 HEAP32[$31 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7246
 HEAP32[$31 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 7246
 HEAP32[$31 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 7246
 $33 = (_strlen($0) | 0) + 1 | 0; //@line 7248
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7249
 $34 = __ZnajRKSt9nothrow_t($33, 9765) | 0; //@line 7250
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 163; //@line 7253
  HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 7255
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 7257
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 7259
  HEAP32[$AsyncCtx3 + 16 >> 2] = $18; //@line 7261
  sp = STACKTOP; //@line 7262
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7265
 HEAP32[$30 + 20 >> 2] = $34; //@line 7267
 _strcpy($34, $0) | 0; //@line 7268
 $40 = _emscripten_asm_const_i(9) | 0; //@line 7269
 $42 = (($40 | 0) < 0) << 31 >> 31; //@line 7271
 $43 = ___muldi3($2 | 0, 0, 1e3, 0) | 0; //@line 7272
 $45 = _i64Add($43 | 0, tempRet0 | 0, $40 | 0, $42 | 0) | 0; //@line 7274
 $47 = HEAP32[$18 >> 2] | 0; //@line 7276
 $49 = $47 + 24 | 0; //@line 7278
 HEAP32[$49 >> 2] = $45; //@line 7280
 HEAP32[$49 + 4 >> 2] = tempRet0; //@line 7283
 $54 = $47 + 32 | 0; //@line 7285
 HEAP32[$54 >> 2] = $40; //@line 7287
 HEAP32[$54 + 4 >> 2] = $42; //@line 7290
 return;
}
function __ZN9TCPSocket4sendEPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$024 = 0, $$1 = 0, $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 164
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 166
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 168
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 170
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 172
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 174
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 176
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 178
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 180
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 182
 if (($AsyncRetVal | 0) > -1) {
  $37 = $AsyncRetVal + $2 | 0; //@line 185
  if ($37 >>> 0 < $4 >>> 0) {
   $$1 = $37; //@line 188
   label = 8; //@line 189
  } else {
   $$024 = $AsyncRetVal; //@line 191
   $$2 = $37; //@line 191
  }
 } else {
  $$1 = $2; //@line 194
  label = 8; //@line 195
 }
 if ((label | 0) == 8) {
  if (!(HEAP32[$6 >> 2] | 0)) {
   $$024 = $AsyncRetVal; //@line 201
   $$2 = $$1; //@line 201
  } else {
   if (($AsyncRetVal | 0) != -3001 & ($AsyncRetVal | 0) < 0) {
    $$024 = $AsyncRetVal; //@line 207
    $$2 = $$1; //@line 207
   } else {
    $18 = HEAP32[$10 >> 2] | 0; //@line 209
    if (!$18) {
     $$024 = -3005; //@line 212
     $$2 = $$1; //@line 212
    } else {
     HEAP32[$12 >> 2] = 0; //@line 214
     $20 = HEAP32[$14 >> 2] | 0; //@line 215
     $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 68 >> 2] | 0; //@line 218
     $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 221
     $26 = FUNCTION_TABLE_iiiii[$23 & 15]($20, $18, $16 + $$1 | 0, $4 - $$1 | 0) | 0; //@line 222
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 225
      $27 = $ReallocAsyncCtx + 4 | 0; //@line 226
      HEAP32[$27 >> 2] = $$1; //@line 227
      $28 = $ReallocAsyncCtx + 8 | 0; //@line 228
      HEAP32[$28 >> 2] = $4; //@line 229
      $29 = $ReallocAsyncCtx + 12 | 0; //@line 230
      HEAP32[$29 >> 2] = $6; //@line 231
      $30 = $ReallocAsyncCtx + 16 | 0; //@line 232
      HEAP32[$30 >> 2] = $8; //@line 233
      $31 = $ReallocAsyncCtx + 20 | 0; //@line 234
      HEAP32[$31 >> 2] = $10; //@line 235
      $32 = $ReallocAsyncCtx + 24 | 0; //@line 236
      HEAP32[$32 >> 2] = $12; //@line 237
      $33 = $ReallocAsyncCtx + 28 | 0; //@line 238
      HEAP32[$33 >> 2] = $14; //@line 239
      $34 = $ReallocAsyncCtx + 32 | 0; //@line 240
      HEAP32[$34 >> 2] = $16; //@line 241
      sp = STACKTOP; //@line 242
      return;
     }
     HEAP32[___async_retval >> 2] = $26; //@line 246
     ___async_unwind = 0; //@line 247
     HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 248
     $27 = $ReallocAsyncCtx + 4 | 0; //@line 249
     HEAP32[$27 >> 2] = $$1; //@line 250
     $28 = $ReallocAsyncCtx + 8 | 0; //@line 251
     HEAP32[$28 >> 2] = $4; //@line 252
     $29 = $ReallocAsyncCtx + 12 | 0; //@line 253
     HEAP32[$29 >> 2] = $6; //@line 254
     $30 = $ReallocAsyncCtx + 16 | 0; //@line 255
     HEAP32[$30 >> 2] = $8; //@line 256
     $31 = $ReallocAsyncCtx + 20 | 0; //@line 257
     HEAP32[$31 >> 2] = $10; //@line 258
     $32 = $ReallocAsyncCtx + 24 | 0; //@line 259
     HEAP32[$32 >> 2] = $12; //@line 260
     $33 = $ReallocAsyncCtx + 28 | 0; //@line 261
     HEAP32[$33 >> 2] = $14; //@line 262
     $34 = $ReallocAsyncCtx + 32 | 0; //@line 263
     HEAP32[$34 >> 2] = $16; //@line 264
     sp = STACKTOP; //@line 265
     return;
    }
   }
  }
 }
 HEAP8[$8 >> 0] = 0; //@line 271
 HEAP32[___async_retval >> 2] = ($$024 | 0) < 1 & ($$024 | 0) != -3001 ? $$024 : ($$2 | 0) == 0 ? -3001 : $$2; //@line 279
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_81($0) {
 $0 = $0 | 0;
 var $$051 = 0, $$byval_copy11 = 0, $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23883
 STACKTOP = STACKTOP + 32 | 0; //@line 23884
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 23884
 $$byval_copy11 = sp; //@line 23885
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23887
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23889
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23891
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23895
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23897
 if (!$AsyncRetVal) {
  $27 = 0; //@line 23900
 } else {
  $13 = $AsyncRetVal + (HEAP32[$0 + 16 >> 2] << 6) | 0; //@line 23902
  $14 = $AsyncRetVal; //@line 23903
  do {
   HEAP32[$10 >> 2] = 0; //@line 23905
   HEAP32[$10 + 4 >> 2] = 0; //@line 23905
   HEAP32[$10 + 8 >> 2] = 0; //@line 23905
   HEAP32[$10 + 12 >> 2] = 0; //@line 23905
   HEAP32[$10 + 16 >> 2] = 0; //@line 23905
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$10 >> 2]; //@line 23906
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 23906
   HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 23906
   HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$10 + 12 >> 2]; //@line 23906
   HEAP32[$$byval_copy11 + 16 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 23906
   __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy11, 0); //@line 23907
   $14 = $14 + 64 | 0; //@line 23908
  } while (($14 | 0) != ($13 | 0));
  $27 = $AsyncRetVal; //@line 23911
 }
 $$pre = $2 + 64 | 0; //@line 23920
 if (HEAP8[$6 >> 0] | 0) {
  $$051 = 0; //@line 23922
  do {
   $29 = $27 + ($$051 << 6) | 0; //@line 23924
   $31 = (HEAP32[$$pre >> 2] | 0) + ($$051 * 20 | 0) | 0; //@line 23926
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$31 >> 2]; //@line 23927
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 23927
   HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$31 + 8 >> 2]; //@line 23927
   HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$31 + 12 >> 2]; //@line 23927
   HEAP32[$$byval_copy11 + 16 >> 2] = HEAP32[$31 + 16 >> 2]; //@line 23927
   __ZN13SocketAddress8set_addrE10nsapi_addr($29, $$byval_copy11); //@line 23928
   $$051 = $$051 + 1 | 0; //@line 23929
  } while (($$051 | 0) < (HEAPU8[$6 >> 0] | 0));
 }
 $20 = HEAP32[$2 + 12 >> 2] | 0; //@line 23941
 $21 = HEAP32[$$pre >> 2] | 0; //@line 23942
 $23 = HEAP32[$2 + 68 >> 2] | 0; //@line 23944
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 23945
 __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($20, $21, $23); //@line 23946
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 264; //@line 23949
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 23950
  HEAP32[$24 >> 2] = $2; //@line 23951
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 23952
  HEAP32[$25 >> 2] = $4; //@line 23953
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 23954
  HEAP32[$26 >> 2] = $27; //@line 23955
  $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 23956
  HEAP32[$28 >> 2] = $6; //@line 23957
  sp = STACKTOP; //@line 23958
  STACKTOP = sp; //@line 23959
  return;
 }
 ___async_unwind = 0; //@line 23961
 HEAP32[$ReallocAsyncCtx4 >> 2] = 264; //@line 23962
 $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 23963
 HEAP32[$24 >> 2] = $2; //@line 23964
 $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 23965
 HEAP32[$25 >> 2] = $4; //@line 23966
 $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 23967
 HEAP32[$26 >> 2] = $27; //@line 23968
 $28 = $ReallocAsyncCtx4 + 16 | 0; //@line 23969
 HEAP32[$28 >> 2] = $6; //@line 23970
 sp = STACKTOP; //@line 23971
 STACKTOP = sp; //@line 23972
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 9957
 STACKTOP = STACKTOP + 224 | 0; //@line 9958
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 9958
 $3 = sp + 120 | 0; //@line 9959
 $4 = sp + 80 | 0; //@line 9960
 $5 = sp; //@line 9961
 $6 = sp + 136 | 0; //@line 9962
 dest = $4; //@line 9963
 stop = dest + 40 | 0; //@line 9963
 do {
  HEAP32[dest >> 2] = 0; //@line 9963
  dest = dest + 4 | 0; //@line 9963
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 9965
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 9969
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 9976
  } else {
   $43 = 0; //@line 9978
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 9980
  $14 = $13 & 32; //@line 9981
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 9987
  }
  $19 = $0 + 48 | 0; //@line 9989
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 9994
    $24 = HEAP32[$23 >> 2] | 0; //@line 9995
    HEAP32[$23 >> 2] = $6; //@line 9996
    $25 = $0 + 28 | 0; //@line 9997
    HEAP32[$25 >> 2] = $6; //@line 9998
    $26 = $0 + 20 | 0; //@line 9999
    HEAP32[$26 >> 2] = $6; //@line 10000
    HEAP32[$19 >> 2] = 80; //@line 10001
    $28 = $0 + 16 | 0; //@line 10003
    HEAP32[$28 >> 2] = $6 + 80; //@line 10004
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10005
    if (!$24) {
     $$1 = $29; //@line 10008
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 10011
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 10012
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 10013
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 327; //@line 10016
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 10018
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 10020
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 10022
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 10024
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 10026
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 10028
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 10030
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 10032
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 10034
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 10036
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 10038
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 10040
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 10042
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 10044
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 10046
      sp = STACKTOP; //@line 10047
      STACKTOP = sp; //@line 10048
      return 0; //@line 10048
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10050
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 10053
      HEAP32[$23 >> 2] = $24; //@line 10054
      HEAP32[$19 >> 2] = 0; //@line 10055
      HEAP32[$28 >> 2] = 0; //@line 10056
      HEAP32[$25 >> 2] = 0; //@line 10057
      HEAP32[$26 >> 2] = 0; //@line 10058
      $$1 = $$; //@line 10059
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10065
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 10068
  HEAP32[$0 >> 2] = $51 | $14; //@line 10073
  if ($43 | 0) {
   ___unlockfile($0); //@line 10076
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 10078
 }
 STACKTOP = sp; //@line 10080
 return $$0 | 0; //@line 10080
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14517
 STACKTOP = STACKTOP + 64 | 0; //@line 14518
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14518
 $4 = sp; //@line 14519
 $5 = HEAP32[$0 >> 2] | 0; //@line 14520
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 14523
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 14525
 HEAP32[$4 >> 2] = $2; //@line 14526
 HEAP32[$4 + 4 >> 2] = $0; //@line 14528
 HEAP32[$4 + 8 >> 2] = $1; //@line 14530
 HEAP32[$4 + 12 >> 2] = $3; //@line 14532
 $14 = $4 + 16 | 0; //@line 14533
 $15 = $4 + 20 | 0; //@line 14534
 $16 = $4 + 24 | 0; //@line 14535
 $17 = $4 + 28 | 0; //@line 14536
 $18 = $4 + 32 | 0; //@line 14537
 $19 = $4 + 40 | 0; //@line 14538
 dest = $14; //@line 14539
 stop = dest + 36 | 0; //@line 14539
 do {
  HEAP32[dest >> 2] = 0; //@line 14539
  dest = dest + 4 | 0; //@line 14539
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 14539
 HEAP8[$14 + 38 >> 0] = 0; //@line 14539
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 14544
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14547
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14548
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 14549
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 346; //@line 14552
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 14554
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 14556
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 14558
    sp = STACKTOP; //@line 14559
    STACKTOP = sp; //@line 14560
    return 0; //@line 14560
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14562
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 14566
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 14570
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 14573
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14574
   FUNCTION_TABLE_viiiii[$33 & 3]($10, $4, $8, 1, 0); //@line 14575
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 347; //@line 14578
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 14580
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 14582
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 14584
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 14586
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 14588
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 14590
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 14592
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 14594
    sp = STACKTOP; //@line 14595
    STACKTOP = sp; //@line 14596
    return 0; //@line 14596
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14598
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 14612
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 14620
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 14636
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 14641
  }
 } while (0);
 STACKTOP = sp; //@line 14644
 return $$0 | 0; //@line 14644
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_132($0) {
 $0 = $0 | 0;
 var $$pre74 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 7925
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7927
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7929
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7931
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7933
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7935
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7937
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7939
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7941
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7943
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7945
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7947
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7949
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7951
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7955
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 7957
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 7959
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 7961
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 7963
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 7965
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 7967
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 7969
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 7971
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 7973
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 7975
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 7977
 $$pre74 = HEAP32[$30 >> 2] | 0; //@line 7979
 HEAP32[$34 >> 2] = HEAP32[HEAP32[$0 + 56 >> 2] >> 2]; //@line 7980
 $53 = HEAP32[$$pre74 >> 2] | 0; //@line 7981
 HEAP32[$36 >> 2] = 0; //@line 7982
 HEAP32[$38 >> 2] = 193; //@line 7983
 HEAP32[$40 >> 2] = $53; //@line 7984
 HEAP32[$6 >> 2] = 764; //@line 7985
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 7986
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 7987
 if (!___async) {
  ___async_unwind = 0; //@line 7990
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 7992
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $2; //@line 7994
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $4; //@line 7996
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $6; //@line 7998
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $8; //@line 8000
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $10; //@line 8002
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $12; //@line 8004
 HEAP32[$ReallocAsyncCtx13 + 28 >> 2] = $14; //@line 8006
 HEAP32[$ReallocAsyncCtx13 + 32 >> 2] = $16; //@line 8008
 HEAP32[$ReallocAsyncCtx13 + 36 >> 2] = $18; //@line 8010
 HEAP32[$ReallocAsyncCtx13 + 40 >> 2] = $20; //@line 8012
 HEAP32[$ReallocAsyncCtx13 + 44 >> 2] = $22; //@line 8014
 HEAP32[$ReallocAsyncCtx13 + 48 >> 2] = $24; //@line 8016
 HEAP32[$ReallocAsyncCtx13 + 52 >> 2] = $26; //@line 8018
 HEAP32[$ReallocAsyncCtx13 + 56 >> 2] = $32; //@line 8020
 HEAP32[$ReallocAsyncCtx13 + 60 >> 2] = $34; //@line 8022
 HEAP32[$ReallocAsyncCtx13 + 64 >> 2] = $36; //@line 8024
 HEAP32[$ReallocAsyncCtx13 + 68 >> 2] = $38; //@line 8026
 HEAP32[$ReallocAsyncCtx13 + 72 >> 2] = $40; //@line 8028
 HEAP32[$ReallocAsyncCtx13 + 76 >> 2] = $42; //@line 8030
 HEAP32[$ReallocAsyncCtx13 + 80 >> 2] = $44; //@line 8032
 HEAP32[$ReallocAsyncCtx13 + 84 >> 2] = $46; //@line 8034
 HEAP32[$ReallocAsyncCtx13 + 88 >> 2] = $48; //@line 8036
 HEAP32[$ReallocAsyncCtx13 + 92 >> 2] = $50; //@line 8038
 HEAP32[$ReallocAsyncCtx13 + 96 >> 2] = $52; //@line 8040
 HEAP32[$ReallocAsyncCtx13 + 100 >> 2] = $30; //@line 8042
 sp = STACKTOP; //@line 8043
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 6042
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6044
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6046
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6048
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6050
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6052
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6054
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6056
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6058
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6060
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6062
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6064
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6068
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6070
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6072
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6074
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6076
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6078
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 6080
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 6082
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 6084
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 6086
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 6088
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 6090
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 6092
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 6094
 $$pre = HEAP32[$26 >> 2] | 0; //@line 6096
 HEAP32[$8 >> 2] = HEAP32[HEAP32[$0 + 48 >> 2] >> 2]; //@line 6097
 $53 = HEAP32[$$pre >> 2] | 0; //@line 6098
 HEAP32[$10 >> 2] = 0; //@line 6099
 HEAP32[$12 >> 2] = 188; //@line 6100
 HEAP32[$14 >> 2] = $53; //@line 6101
 HEAP32[$16 >> 2] = 764; //@line 6102
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 6103
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 0, $20) | 0; //@line 6104
 if (!___async) {
  ___async_unwind = 0; //@line 6107
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 6109
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 6111
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 6113
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $6; //@line 6115
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $8; //@line 6117
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $10; //@line 6119
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $12; //@line 6121
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $14; //@line 6123
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $16; //@line 6125
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $18; //@line 6127
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $20; //@line 6129
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $22; //@line 6131
 HEAP32[$ReallocAsyncCtx14 + 48 >> 2] = $28; //@line 6133
 HEAP32[$ReallocAsyncCtx14 + 52 >> 2] = $30; //@line 6135
 HEAP32[$ReallocAsyncCtx14 + 56 >> 2] = $32; //@line 6137
 HEAP32[$ReallocAsyncCtx14 + 60 >> 2] = $34; //@line 6139
 HEAP32[$ReallocAsyncCtx14 + 64 >> 2] = $36; //@line 6141
 HEAP32[$ReallocAsyncCtx14 + 68 >> 2] = $38; //@line 6143
 HEAP32[$ReallocAsyncCtx14 + 72 >> 2] = $40; //@line 6145
 HEAP32[$ReallocAsyncCtx14 + 76 >> 2] = $42; //@line 6147
 HEAP32[$ReallocAsyncCtx14 + 80 >> 2] = $44; //@line 6149
 HEAP32[$ReallocAsyncCtx14 + 84 >> 2] = $46; //@line 6151
 HEAP32[$ReallocAsyncCtx14 + 88 >> 2] = $48; //@line 6153
 HEAP32[$ReallocAsyncCtx14 + 92 >> 2] = $26; //@line 6155
 HEAP32[$ReallocAsyncCtx14 + 96 >> 2] = $50; //@line 6157
 HEAP32[$ReallocAsyncCtx14 + 100 >> 2] = $52; //@line 6159
 sp = STACKTOP; //@line 6160
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18717
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18719
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18721
 $6 = HEAP32[$2 + 60 >> 2] | 0; //@line 18723
 do {
  if ($6 | 0) {
   $9 = HEAP32[$6 + 12 >> 2] | 0; //@line 18728
   if (!$9) {
    __ZdlPv($6); //@line 18731
    break;
   }
   $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 18735
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 18736
   FUNCTION_TABLE_vi[$12 & 511]($6); //@line 18737
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 18740
    $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 18741
    HEAP32[$13 >> 2] = $6; //@line 18742
    $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 18743
    HEAP32[$14 >> 2] = $2; //@line 18744
    $15 = $ReallocAsyncCtx2 + 12 | 0; //@line 18745
    HEAP32[$15 >> 2] = $4; //@line 18746
    sp = STACKTOP; //@line 18747
    return;
   }
   ___async_unwind = 0; //@line 18750
   HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 18751
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 18752
   HEAP32[$13 >> 2] = $6; //@line 18753
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 18754
   HEAP32[$14 >> 2] = $2; //@line 18755
   $15 = $ReallocAsyncCtx2 + 12 | 0; //@line 18756
   HEAP32[$15 >> 2] = $4; //@line 18757
   sp = STACKTOP; //@line 18758
   return;
  }
 } while (0);
 $17 = HEAP32[$2 + 64 >> 2] | 0; //@line 18763
 if ($17 | 0) {
  __ZdaPv($17); //@line 18766
 }
 $20 = HEAP32[$2 + 12 >> 2] | 0; //@line 18769
 if ($20 | 0) {
  __ZdlPv($20); //@line 18772
 }
 $23 = HEAP32[$2 + 44 >> 2] | 0; //@line 18775
 if ($23 | 0) {
  $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 18780
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 18781
  FUNCTION_TABLE_vi[$27 & 511]($2 + 32 | 0); //@line 18782
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 18785
   $28 = $ReallocAsyncCtx3 + 4 | 0; //@line 18786
   HEAP32[$28 >> 2] = $2; //@line 18787
   $29 = $ReallocAsyncCtx3 + 8 | 0; //@line 18788
   HEAP32[$29 >> 2] = $4; //@line 18789
   sp = STACKTOP; //@line 18790
   return;
  }
  ___async_unwind = 0; //@line 18793
  HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 18794
  $28 = $ReallocAsyncCtx3 + 4 | 0; //@line 18795
  HEAP32[$28 >> 2] = $2; //@line 18796
  $29 = $ReallocAsyncCtx3 + 8 | 0; //@line 18797
  HEAP32[$29 >> 2] = $4; //@line 18798
  sp = STACKTOP; //@line 18799
  return;
 }
 $31 = HEAP32[$2 + 28 >> 2] | 0; //@line 18803
 if (!$31) {
  __ZdlPv($2); //@line 18806
  HEAP32[7844 + ($4 << 2) >> 2] = 0; //@line 18808
  return;
 }
 $35 = HEAP32[$31 + 8 >> 2] | 0; //@line 18813
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 18814
 FUNCTION_TABLE_vi[$35 & 511]($2 + 16 | 0); //@line 18815
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 18818
  $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 18819
  HEAP32[$36 >> 2] = $2; //@line 18820
  $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 18821
  HEAP32[$37 >> 2] = $4; //@line 18822
  sp = STACKTOP; //@line 18823
  return;
 }
 ___async_unwind = 0; //@line 18826
 HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 18827
 $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 18828
 HEAP32[$36 >> 2] = $2; //@line 18829
 $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 18830
 HEAP32[$37 >> 2] = $4; //@line 18831
 sp = STACKTOP; //@line 18832
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_106($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3263
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3265
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3267
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3269
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3274
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3276
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3278
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3280
 if (HEAP8[$0 + 16 >> 0] & 1) {
  HEAP8[8724] = 1; //@line 3282
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 3283
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 3284
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3287
   $33 = $ReallocAsyncCtx13 + 4 | 0; //@line 3288
   HEAP32[$33 >> 2] = $4; //@line 3289
   $34 = $ReallocAsyncCtx13 + 8 | 0; //@line 3290
   HEAP32[$34 >> 2] = $2; //@line 3291
   sp = STACKTOP; //@line 3292
   return;
  }
  ___async_unwind = 0; //@line 3295
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3296
  $33 = $ReallocAsyncCtx13 + 4 | 0; //@line 3297
  HEAP32[$33 >> 2] = $4; //@line 3298
  $34 = $ReallocAsyncCtx13 + 8 | 0; //@line 3299
  HEAP32[$34 >> 2] = $2; //@line 3300
  sp = STACKTOP; //@line 3301
  return;
 }
 $17 = HEAP32[$10 >> 2] | 0; //@line 3304
 if ($17 | 0) {
  __ZdlPv($17); //@line 3307
 }
 $19 = HEAP32[$12 >> 2] | 0; //@line 3309
 if ($19 | 0) {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 3313
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 3314
  FUNCTION_TABLE_vi[$22 & 511]($14); //@line 3315
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 3318
   $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 3319
   HEAP32[$23 >> 2] = $6; //@line 3320
   $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 3321
   HEAP32[$24 >> 2] = $16; //@line 3322
   $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 3323
   HEAP32[$25 >> 2] = $2; //@line 3324
   sp = STACKTOP; //@line 3325
   return;
  }
  ___async_unwind = 0; //@line 3328
  HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 3329
  $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 3330
  HEAP32[$23 >> 2] = $6; //@line 3331
  $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 3332
  HEAP32[$24 >> 2] = $16; //@line 3333
  $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 3334
  HEAP32[$25 >> 2] = $2; //@line 3335
  sp = STACKTOP; //@line 3336
  return;
 }
 $27 = HEAP32[$6 + 28 >> 2] | 0; //@line 3340
 if (!$27) {
  __ZdlPv($6); //@line 3343
  HEAP32[___async_retval >> 2] = -3007; //@line 3345
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 3349
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 3350
 FUNCTION_TABLE_vi[$30 & 511]($16); //@line 3351
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3354
  $31 = $ReallocAsyncCtx10 + 4 | 0; //@line 3355
  HEAP32[$31 >> 2] = $6; //@line 3356
  $32 = $ReallocAsyncCtx10 + 8 | 0; //@line 3357
  HEAP32[$32 >> 2] = $2; //@line 3358
  sp = STACKTOP; //@line 3359
  return;
 }
 ___async_unwind = 0; //@line 3362
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3363
 $31 = $ReallocAsyncCtx10 + 4 | 0; //@line 3364
 HEAP32[$31 >> 2] = $6; //@line 3365
 $32 = $ReallocAsyncCtx10 + 8 | 0; //@line 3366
 HEAP32[$32 >> 2] = $2; //@line 3367
 sp = STACKTOP; //@line 3368
 return;
}
function _stoip6($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$0$lcssa6667 = 0, $$015$i = 0, $$016$i = 0, $$04857 = 0, $$049 = 0, $$050$lcssa = 0, $$05056 = 0, $$052$lcssa = 0, $$052$lcssa6568 = 0, $$05255 = 0, $$058 = 0, $$1 = 0, $$151 = 0, $$sink18$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $6 = 0, $9 = 0;
 if ($1 >>> 0 > 39) {
  return;
 }
 $4 = $0; //@line 2535
 do {
  if (!$1) {
   $$0$lcssa6667 = $2; //@line 2539
   $$052$lcssa6568 = 0; //@line 2539
  } else {
   $$04857 = $0; //@line 2541
   $$05056 = -1; //@line 2541
   $$05255 = 0; //@line 2541
   $$058 = $2; //@line 2541
   while (1) {
    $6 = HEAP8[$$04857 >> 0] | 0; //@line 2543
    if ($$05255 << 24 >> 24 < 8 & $6 << 24 >> 24 != 0) {
     $$049 = $$04857; //@line 2548
     $9 = $6; //@line 2548
    } else {
     $$0$lcssa = $$058; //@line 2550
     $$050$lcssa = $$05056; //@line 2550
     $$052$lcssa = $$05255; //@line 2550
     break;
    }
    L7 : while (1) {
     switch ($9 << 24 >> 24) {
     case 58:
     case 0:
      {
       $$015$i = $$04857; //@line 2556
       $$016$i = 0; //@line 2556
       $13 = $6; //@line 2556
       break L7;
       break;
      }
     default:
      {}
     }
     $10 = $$049 + 1 | 0; //@line 2563
     $$049 = $10; //@line 2565
     $9 = HEAP8[$10 >> 0] | 0; //@line 2565
    }
    while (1) {
     $11 = $$015$i + 1 | 0; //@line 2568
     $12 = $13 << 24 >> 24; //@line 2569
     if (($13 + -48 & 255) < 10) {
      $$sink18$i = -48; //@line 2573
     } else {
      if (($13 + -65 & 255) < 6) {
       $$sink18$i = -55; //@line 2578
      } else {
       if (($13 + -97 & 255) < 6) {
        $$sink18$i = 65449; //@line 2583
       } else {
        break;
       }
      }
     }
     $$015$i = $11; //@line 2595
     $$016$i = ($$sink18$i + $12 | ($$016$i & 65535) << 4) & 65535; //@line 2595
     $13 = HEAP8[$11 >> 0] | 0; //@line 2595
    }
    $21 = _common_write_16_bit($$016$i, $$058) | 0; //@line 2597
    $22 = $$05255 + 1 << 24 >> 24; //@line 2598
    if (($$049 - $4 | 0) >>> 0 < $1 >>> 0) {
     if ((HEAP8[$$049 >> 0] | 0) == 58) {
      $27 = $$049 + 1 | 0; //@line 2606
      $29 = (HEAP8[$27 >> 0] | 0) == 58; //@line 2608
      $$1 = $29 ? $27 : $$049; //@line 2611
      $$151 = $29 ? $22 : $$05056; //@line 2611
     } else {
      $$1 = $$049; //@line 2613
      $$151 = $$05056; //@line 2613
     }
    } else {
     $$1 = $$049; //@line 2616
     $$151 = $$05056; //@line 2616
    }
    $$04857 = $$1 + 1 | 0; //@line 2618
    if (($$04857 - $4 | 0) >>> 0 >= $1 >>> 0) {
     $$0$lcssa = $21; //@line 2625
     $$050$lcssa = $$151; //@line 2625
     $$052$lcssa = $22; //@line 2625
     break;
    } else {
     $$05056 = $$151; //@line 2623
     $$05255 = $22; //@line 2623
     $$058 = $21; //@line 2623
    }
   }
   if ($$050$lcssa << 24 >> 24 == -1) {
    if ($$052$lcssa << 24 >> 24 != 8) {
     $$0$lcssa6667 = $$0$lcssa; //@line 2633
     $$052$lcssa6568 = $$052$lcssa; //@line 2633
     break;
    }
    return;
   } else {
    $36 = $$050$lcssa << 24 >> 24 << 1; //@line 2639
    $39 = 8 - ($$052$lcssa << 24 >> 24) << 1; //@line 2642
    $42 = $39 & 254; //@line 2645
    $44 = $2 + ($36 & 254) | 0; //@line 2647
    _memmove($44 + $42 | 0, $44 | 0, 16 - $36 - $39 & 254 | 0) | 0; //@line 2650
    _memset($44 | 0, 0, $42 | 0) | 0; //@line 2651
    return;
   }
  }
 } while (0);
 _memset($$0$lcssa6667 | 0, 0, 16 - ($$052$lcssa6568 << 24 >> 24 << 1) | 0) | 0; //@line 2659
 return;
}
function __ZN9TCPSocket7connectEPKct__async_cb_76($0) {
 $0 = $0 | 0;
 var $$0$off0$i$reg2mem$0 = 0, $$08$i = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23463
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23465
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23467
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23469
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 23472
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23474
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23476
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23478
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23480
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23482
 if ((HEAP32[$2 >> 2] | 0) != 0 & ($AsyncRetVal | 1 | 0) == -3013) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 23489
  if (!$18) {
   $$0$off0$i$reg2mem$0 = 1; //@line 23492
   $$08$i = -3005; //@line 23492
  } else {
   HEAP32[$12 >> 2] = 0; //@line 23494
   $20 = HEAP32[$14 >> 2] | 0; //@line 23495
   $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 60 >> 2] | 0; //@line 23498
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 23499
   $24 = FUNCTION_TABLE_iiii[$23 & 31]($20, $18, $16) | 0; //@line 23500
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 23503
    $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 23504
    HEAP32[$25 >> 2] = $2; //@line 23505
    $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 23506
    HEAP32[$26 >> 2] = $4; //@line 23507
    $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 23508
    HEAP32[$27 >> 2] = $6; //@line 23509
    $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 23510
    $$expand_i1_val = 1; //@line 23511
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 23512
    $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 23513
    HEAP32[$29 >> 2] = $10; //@line 23514
    $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 23515
    HEAP32[$30 >> 2] = $12; //@line 23516
    $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 23517
    HEAP32[$31 >> 2] = $14; //@line 23518
    $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 23519
    HEAP32[$32 >> 2] = $16; //@line 23520
    sp = STACKTOP; //@line 23521
    return;
   }
   HEAP32[___async_retval >> 2] = $24; //@line 23525
   ___async_unwind = 0; //@line 23526
   HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 23527
   $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 23528
   HEAP32[$25 >> 2] = $2; //@line 23529
   $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 23530
   HEAP32[$26 >> 2] = $4; //@line 23531
   $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 23532
   HEAP32[$27 >> 2] = $6; //@line 23533
   $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 23534
   $$expand_i1_val = 1; //@line 23535
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 23536
   $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 23537
   HEAP32[$29 >> 2] = $10; //@line 23538
   $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 23539
   HEAP32[$30 >> 2] = $12; //@line 23540
   $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 23541
   HEAP32[$31 >> 2] = $14; //@line 23542
   $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 23543
   HEAP32[$32 >> 2] = $16; //@line 23544
   sp = STACKTOP; //@line 23545
   return;
  }
 } else {
  $$0$off0$i$reg2mem$0 = $8; //@line 23549
  $$08$i = $AsyncRetVal; //@line 23549
 }
 HEAP8[$6 >> 0] = 0; //@line 23551
 HEAP32[___async_retval >> 2] = $$0$off0$i$reg2mem$0 & ($$08$i | 0) == -3015 ? 0 : $$08$i; //@line 23556
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_80($0) {
 $0 = $0 | 0;
 var $$049 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23782
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23784
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23786
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23788
 if (!(HEAP32[$2 + 48 >> 2] | 0)) {
  $$049 = 0; //@line 23795
 } else {
  $$049 = HEAPU8[HEAP32[$0 + 16 >> 2] >> 0] | 0; //@line 23799
 }
 $14 = $2 + 28 | 0; //@line 23801
 $15 = HEAP32[$14 >> 2] | 0; //@line 23802
 if (!$15) {
  $26 = $4 + 12 | 0; //@line 23805
  HEAP32[$26 >> 2] = 0; //@line 23806
  $27 = HEAP32[$2 >> 2] | 0; //@line 23807
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 23808
  __ZL28nsapi_dns_query_async_deletei($27); //@line 23809
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 266; //@line 23812
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 23813
   HEAP32[$28 >> 2] = $26; //@line 23814
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 23815
   HEAP32[$29 >> 2] = $4; //@line 23816
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 23817
   HEAP32[$30 >> 2] = $6; //@line 23818
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 23819
   HEAP32[$31 >> 2] = $$049; //@line 23820
   sp = STACKTOP; //@line 23821
   return;
  }
  ___async_unwind = 0; //@line 23824
  HEAP32[$ReallocAsyncCtx6 >> 2] = 266; //@line 23825
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 23826
  HEAP32[$28 >> 2] = $26; //@line 23827
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 23828
  HEAP32[$29 >> 2] = $4; //@line 23829
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 23830
  HEAP32[$30 >> 2] = $6; //@line 23831
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 23832
  HEAP32[$31 >> 2] = $$049; //@line 23833
  sp = STACKTOP; //@line 23834
  return;
 } else {
  $19 = HEAP32[$15 + 4 >> 2] | 0; //@line 23839
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 23840
  FUNCTION_TABLE_vii[$19 & 7]($4, $2 + 16 | 0); //@line 23841
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 265; //@line 23844
   $20 = $ReallocAsyncCtx + 4 | 0; //@line 23845
   HEAP32[$20 >> 2] = $14; //@line 23846
   $21 = $ReallocAsyncCtx + 8 | 0; //@line 23847
   HEAP32[$21 >> 2] = $4; //@line 23848
   $22 = $ReallocAsyncCtx + 12 | 0; //@line 23849
   HEAP32[$22 >> 2] = $2; //@line 23850
   $23 = $ReallocAsyncCtx + 16 | 0; //@line 23851
   HEAP32[$23 >> 2] = $4; //@line 23852
   $24 = $ReallocAsyncCtx + 20 | 0; //@line 23853
   HEAP32[$24 >> 2] = $6; //@line 23854
   $25 = $ReallocAsyncCtx + 24 | 0; //@line 23855
   HEAP32[$25 >> 2] = $$049; //@line 23856
   sp = STACKTOP; //@line 23857
   return;
  }
  ___async_unwind = 0; //@line 23860
  HEAP32[$ReallocAsyncCtx >> 2] = 265; //@line 23861
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 23862
  HEAP32[$20 >> 2] = $14; //@line 23863
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 23864
  HEAP32[$21 >> 2] = $4; //@line 23865
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 23866
  HEAP32[$22 >> 2] = $2; //@line 23867
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 23868
  HEAP32[$23 >> 2] = $4; //@line 23869
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 23870
  HEAP32[$24 >> 2] = $6; //@line 23871
  $25 = $ReallocAsyncCtx + 24 | 0; //@line 23872
  HEAP32[$25 >> 2] = $$049; //@line 23873
  sp = STACKTOP; //@line 23874
  return;
 }
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 9829
 $7 = ($2 | 0) != 0; //@line 9833
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 9837
   $$03555 = $0; //@line 9838
   $$03654 = $2; //@line 9838
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 9843
     $$036$lcssa64 = $$03654; //@line 9843
     label = 6; //@line 9844
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 9847
    $12 = $$03654 + -1 | 0; //@line 9848
    $16 = ($12 | 0) != 0; //@line 9852
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 9855
     $$03654 = $12; //@line 9855
    } else {
     $$035$lcssa = $11; //@line 9857
     $$036$lcssa = $12; //@line 9857
     $$lcssa = $16; //@line 9857
     label = 5; //@line 9858
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 9863
   $$036$lcssa = $2; //@line 9863
   $$lcssa = $7; //@line 9863
   label = 5; //@line 9864
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 9869
   $$036$lcssa64 = $$036$lcssa; //@line 9869
   label = 6; //@line 9870
  } else {
   $$2 = $$035$lcssa; //@line 9872
   $$3 = 0; //@line 9872
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 9878
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 9881
    $$3 = $$036$lcssa64; //@line 9881
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 9883
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 9887
      $$13745 = $$036$lcssa64; //@line 9887
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 9890
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 9899
       $30 = $$13745 + -4 | 0; //@line 9900
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 9903
        $$13745 = $30; //@line 9903
       } else {
        $$0$lcssa = $29; //@line 9905
        $$137$lcssa = $30; //@line 9905
        label = 11; //@line 9906
        break L11;
       }
      }
      $$140 = $$046; //@line 9910
      $$23839 = $$13745; //@line 9910
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 9912
      $$137$lcssa = $$036$lcssa64; //@line 9912
      label = 11; //@line 9913
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 9919
      $$3 = 0; //@line 9919
      break;
     } else {
      $$140 = $$0$lcssa; //@line 9922
      $$23839 = $$137$lcssa; //@line 9922
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 9929
      $$3 = $$23839; //@line 9929
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 9932
     $$23839 = $$23839 + -1 | 0; //@line 9933
     if (!$$23839) {
      $$2 = $35; //@line 9936
      $$3 = 0; //@line 9936
      break;
     } else {
      $$140 = $35; //@line 9939
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 9947
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 5358
 do {
  if (!$0) {
   do {
    if (!(HEAP32[476] | 0)) {
     $34 = 0; //@line 5366
    } else {
     $12 = HEAP32[476] | 0; //@line 5368
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5369
     $13 = _fflush($12) | 0; //@line 5370
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 323; //@line 5373
      sp = STACKTOP; //@line 5374
      return 0; //@line 5375
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 5377
      $34 = $13; //@line 5378
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 5384
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 5388
    } else {
     $$02327 = $$02325; //@line 5390
     $$02426 = $34; //@line 5390
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 5397
      } else {
       $28 = 0; //@line 5399
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5407
       $25 = ___fflush_unlocked($$02327) | 0; //@line 5408
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 5413
       $$1 = $25 | $$02426; //@line 5415
      } else {
       $$1 = $$02426; //@line 5417
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 5421
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 5424
      if (!$$023) {
       $$024$lcssa = $$1; //@line 5427
       break L9;
      } else {
       $$02327 = $$023; //@line 5430
       $$02426 = $$1; //@line 5430
      }
     }
     HEAP32[$AsyncCtx >> 2] = 324; //@line 5433
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 5435
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 5437
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 5439
     sp = STACKTOP; //@line 5440
     return 0; //@line 5441
    }
   } while (0);
   ___ofl_unlock(); //@line 5444
   $$0 = $$024$lcssa; //@line 5445
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5451
    $5 = ___fflush_unlocked($0) | 0; //@line 5452
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 321; //@line 5455
     sp = STACKTOP; //@line 5456
     return 0; //@line 5457
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5459
     $$0 = $5; //@line 5460
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 5465
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5466
   $7 = ___fflush_unlocked($0) | 0; //@line 5467
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 322; //@line 5470
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 5473
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5475
    sp = STACKTOP; //@line 5476
    return 0; //@line 5477
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5479
   if ($phitmp) {
    $$0 = $7; //@line 5481
   } else {
    ___unlockfile($0); //@line 5483
    $$0 = $7; //@line 5484
   }
  }
 } while (0);
 return $$0 | 0; //@line 5488
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14699
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14705
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 14711
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 14714
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14715
    FUNCTION_TABLE_viiiii[$53 & 3]($50, $1, $2, $3, $4); //@line 14716
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 350; //@line 14719
     sp = STACKTOP; //@line 14720
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14723
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 14731
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 14736
     $19 = $1 + 44 | 0; //@line 14737
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 14743
     HEAP8[$22 >> 0] = 0; //@line 14744
     $23 = $1 + 53 | 0; //@line 14745
     HEAP8[$23 >> 0] = 0; //@line 14746
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 14748
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 14751
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14752
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 14753
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 349; //@line 14756
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 14758
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14760
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 14762
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 14764
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 14766
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 14768
      sp = STACKTOP; //@line 14769
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14772
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 14776
      label = 13; //@line 14777
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 14782
       label = 13; //@line 14783
      } else {
       $$037$off039 = 3; //@line 14785
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 14789
      $39 = $1 + 40 | 0; //@line 14790
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 14793
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14803
        $$037$off039 = $$037$off038; //@line 14804
       } else {
        $$037$off039 = $$037$off038; //@line 14806
       }
      } else {
       $$037$off039 = $$037$off038; //@line 14809
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 14812
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 14819
   }
  }
 } while (0);
 return;
}
function _mbed_vtracef__async_cb_124($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5589
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 5592
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5594
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5596
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5598
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5600
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5602
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5606
 $$13 = ($AsyncRetVal | 0) >= ($12 | 0) ? 0 : $AsyncRetVal; //@line 5608
 $18 = (HEAP32[$0 + 28 >> 2] | 0) + $$13 | 0; //@line 5610
 $19 = $12 - $$13 | 0; //@line 5611
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[132] | 0; //@line 5615
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $2 ^ 1) {
     break;
    }
    _snprintf($18, $19, 3645, $4) | 0; //@line 5627
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 5630
   $23 = FUNCTION_TABLE_i[$21 & 0]() | 0; //@line 5631
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 72; //@line 5634
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 5635
    HEAP32[$24 >> 2] = $8; //@line 5636
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 5637
    HEAP32[$25 >> 2] = $18; //@line 5638
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 5639
    HEAP32[$26 >> 2] = $19; //@line 5640
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 5641
    HEAP32[$27 >> 2] = $10; //@line 5642
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 5643
    $$expand_i1_val = $2 & 1; //@line 5644
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 5645
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 5646
    HEAP32[$29 >> 2] = $4; //@line 5647
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 5648
    HEAP32[$30 >> 2] = $6; //@line 5649
    sp = STACKTOP; //@line 5650
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 5654
   ___async_unwind = 0; //@line 5655
   HEAP32[$ReallocAsyncCtx6 >> 2] = 72; //@line 5656
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 5657
   HEAP32[$24 >> 2] = $8; //@line 5658
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 5659
   HEAP32[$25 >> 2] = $18; //@line 5660
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 5661
   HEAP32[$26 >> 2] = $19; //@line 5662
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 5663
   HEAP32[$27 >> 2] = $10; //@line 5664
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 5665
   $$expand_i1_val = $2 & 1; //@line 5666
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 5667
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 5668
   HEAP32[$29 >> 2] = $4; //@line 5669
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 5670
   HEAP32[$30 >> 2] = $6; //@line 5671
   sp = STACKTOP; //@line 5672
   return;
  }
 } while (0);
 $34 = HEAP32[133] | 0; //@line 5676
 $35 = HEAP32[126] | 0; //@line 5677
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 5678
 FUNCTION_TABLE_vi[$34 & 511]($35); //@line 5679
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 5682
  sp = STACKTOP; //@line 5683
  return;
 }
 ___async_unwind = 0; //@line 5686
 HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 5687
 sp = STACKTOP; //@line 5688
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1418
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 1429
 $14 = $1 + 20 | 0; //@line 1430
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1432
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 1437
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 1441
 $24 = $0 + 128 | 0; //@line 1442
 _equeue_mutex_lock($24); //@line 1443
 $25 = HEAP32[$0 >> 2] | 0; //@line 1444
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 1448
   label = 5; //@line 1449
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 1451
   $$053 = $0; //@line 1452
   $29 = $25; //@line 1452
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 1461
    $34 = HEAP32[$33 >> 2] | 0; //@line 1462
    if (!$34) {
     $$051$ph = $33; //@line 1465
     label = 5; //@line 1466
     break L1;
    } else {
     $$053 = $33; //@line 1469
     $29 = $34; //@line 1469
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 1477
    HEAP32[$49 >> 2] = $29; //@line 1478
    HEAP32[$29 + 16 >> 2] = $49; //@line 1480
    $$0515859 = $$053; //@line 1481
    label = 11; //@line 1482
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 1486
   $43 = $1 + 8 | 0; //@line 1487
   HEAP32[$43 >> 2] = $42; //@line 1488
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 1492
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 1494
   $47 = $1 + 12 | 0; //@line 1495
   HEAP32[$47 >> 2] = $46; //@line 1496
   HEAP32[$46 + 16 >> 2] = $47; //@line 1498
   $$05157 = $$053; //@line 1499
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 1504
  $$0515859 = $$051$ph; //@line 1505
  label = 11; //@line 1506
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 1510
  $$05157 = $$0515859; //@line 1511
 }
 HEAP32[$$05157 >> 2] = $1; //@line 1513
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 1515
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 1517
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 1520
  return $13 | 0; //@line 1521
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 1527
  return $13 | 0; //@line 1528
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 1533
  return $13 | 0; //@line 1534
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 1540
  return $13 | 0; //@line 1541
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 1544
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1546
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1550
 FUNCTION_TABLE_vii[$54 & 7]($65, $67 & ~($67 >> 31)); //@line 1551
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 61; //@line 1554
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 1556
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 1558
  sp = STACKTOP; //@line 1559
  return 0; //@line 1560
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1562
 _equeue_mutex_unlock($24); //@line 1563
 return $13 | 0; //@line 1564
}
function __ZL37nsapi_dns_query_async_socket_callbackPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $26 = 0, $29 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10759
 STACKTOP = STACKTOP + 32 | 0; //@line 10760
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10760
 $1 = sp + 16 | 0; //@line 10761
 $2 = sp; //@line 10762
 if (!$0) {
  STACKTOP = sp; //@line 10765
  return;
 }
 $4 = $0 + 12 | 0; //@line 10767
 $5 = HEAP32[$4 >> 2] | 0; //@line 10768
 do {
  if (!$5) {
   $14 = 0; //@line 10772
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 10775
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10776
   FUNCTION_TABLE_vii[$8 & 7]($1, $0); //@line 10777
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 238; //@line 10780
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10782
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10784
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 10786
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 10788
    sp = STACKTOP; //@line 10789
    STACKTOP = sp; //@line 10790
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10792
    $14 = HEAP32[$4 >> 2] | 0; //@line 10794
    break;
   }
  }
 } while (0);
 $13 = $1 + 12 | 0; //@line 10799
 HEAP32[$13 >> 2] = $14; //@line 10800
 $16 = HEAP32[$0 + 16 >> 2] | 0; //@line 10802
 HEAP32[$2 + 8 >> 2] = 0; //@line 10804
 HEAP32[$2 >> 2] = 239; //@line 10805
 HEAP32[$2 + 4 >> 2] = $16; //@line 10807
 $18 = $2 + 12 | 0; //@line 10808
 HEAP32[$18 >> 2] = 776; //@line 10809
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10810
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 10811
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 240; //@line 10814
  HEAP32[$AsyncCtx10 + 4 >> 2] = $18; //@line 10816
  HEAP32[$AsyncCtx10 + 8 >> 2] = $13; //@line 10818
  HEAP32[$AsyncCtx10 + 12 >> 2] = $2; //@line 10820
  HEAP32[$AsyncCtx10 + 16 >> 2] = $1; //@line 10822
  sp = STACKTOP; //@line 10823
  STACKTOP = sp; //@line 10824
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10826
 $23 = HEAP32[$18 >> 2] | 0; //@line 10827
 do {
  if ($23 | 0) {
   $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 10832
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10833
   FUNCTION_TABLE_vi[$26 & 511]($2); //@line 10834
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 241; //@line 10837
    HEAP32[$AsyncCtx3 + 4 >> 2] = $13; //@line 10839
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 10841
    sp = STACKTOP; //@line 10842
    STACKTOP = sp; //@line 10843
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10845
    break;
   }
  }
 } while (0);
 $29 = HEAP32[$13 >> 2] | 0; //@line 10850
 if (!$29) {
  STACKTOP = sp; //@line 10853
  return;
 }
 $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 10856
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10857
 FUNCTION_TABLE_vi[$32 & 511]($1); //@line 10858
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 242; //@line 10861
  sp = STACKTOP; //@line 10862
  STACKTOP = sp; //@line 10863
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10865
 STACKTOP = sp; //@line 10866
 return;
}
function _mbed_vtracef__async_cb_125($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5698
 $2 = HEAP8[$0 + 4 >> 0] & 1; //@line 5701
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5703
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5705
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5707
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5709
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5711
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5713
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5715
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5717
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 5719
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 5721
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 5723
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 5725
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 5727
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 5729
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 5731
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 5733
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 5735
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 5737
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 5739
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 5741
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 5743
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 5745
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 5747
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 5749
 $55 = ($50 | 0 ? 4 : 0) + $50 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 5755
 $56 = HEAP32[131] | 0; //@line 5756
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 5757
 $57 = FUNCTION_TABLE_ii[$56 & 31]($55) | 0; //@line 5758
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 5762
  ___async_unwind = 0; //@line 5763
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 70; //@line 5765
 HEAP8[$ReallocAsyncCtx5 + 4 >> 0] = $2 & 1; //@line 5768
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 5770
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 5772
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 5774
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 5776
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 5778
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 5780
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 5782
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 5784
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 5786
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 5788
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 5790
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $26; //@line 5792
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $28; //@line 5794
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $30; //@line 5796
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $32; //@line 5798
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $34; //@line 5800
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $36; //@line 5802
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $38; //@line 5804
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $40; //@line 5806
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $42; //@line 5808
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $44; //@line 5810
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $46; //@line 5812
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $48; //@line 5814
 sp = STACKTOP; //@line 5815
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 14011
 STACKTOP = STACKTOP + 48 | 0; //@line 14012
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14012
 $vararg_buffer10 = sp + 32 | 0; //@line 14013
 $vararg_buffer7 = sp + 24 | 0; //@line 14014
 $vararg_buffer3 = sp + 16 | 0; //@line 14015
 $vararg_buffer = sp; //@line 14016
 $0 = sp + 36 | 0; //@line 14017
 $1 = ___cxa_get_globals_fast() | 0; //@line 14018
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 14021
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 14026
   $9 = HEAP32[$7 >> 2] | 0; //@line 14028
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 14031
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 7146; //@line 14037
    _abort_message(7096, $vararg_buffer7); //@line 14038
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 14047
   } else {
    $22 = $3 + 80 | 0; //@line 14049
   }
   HEAP32[$0 >> 2] = $22; //@line 14051
   $23 = HEAP32[$3 >> 2] | 0; //@line 14052
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 14054
   $28 = HEAP32[(HEAP32[30] | 0) + 16 >> 2] | 0; //@line 14057
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14058
   $29 = FUNCTION_TABLE_iiii[$28 & 31](120, $23, $0) | 0; //@line 14059
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 340; //@line 14062
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14064
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 14066
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 14068
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 14070
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 14072
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 14074
    sp = STACKTOP; //@line 14075
    STACKTOP = sp; //@line 14076
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14078
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 7146; //@line 14080
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 14082
    _abort_message(7055, $vararg_buffer3); //@line 14083
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 14086
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 14089
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14090
   $40 = FUNCTION_TABLE_ii[$39 & 31]($36) | 0; //@line 14091
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 341; //@line 14094
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 14096
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 14098
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 14100
    sp = STACKTOP; //@line 14101
    STACKTOP = sp; //@line 14102
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14104
    HEAP32[$vararg_buffer >> 2] = 7146; //@line 14105
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 14107
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 14109
    _abort_message(7010, $vararg_buffer); //@line 14110
   }
  }
 }
 _abort_message(7134, $vararg_buffer10); //@line 14115
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $35 = 0, $4 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2776
 STACKTOP = STACKTOP + 16 | 0; //@line 2777
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2777
 $4 = sp; //@line 2778
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2781
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 2782
 $8 = FUNCTION_TABLE_ii[$7 & 31]($0) | 0; //@line 2783
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 81; //@line 2786
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 2788
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 2790
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 2792
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 2794
  sp = STACKTOP; //@line 2795
  STACKTOP = sp; //@line 2796
  return 0; //@line 2796
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2798
 $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0; //@line 2801
 $16 = $2 + 12 | 0; //@line 2802
 $17 = HEAP32[$16 >> 2] | 0; //@line 2803
 do {
  if (!$17) {
   $28 = 0; //@line 2807
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 2810
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 2811
   FUNCTION_TABLE_vii[$20 & 7]($4, $2); //@line 2812
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 82; //@line 2815
    HEAP32[$AsyncCtx3 + 4 >> 2] = $16; //@line 2817
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 2819
    HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 2821
    HEAP32[$AsyncCtx3 + 16 >> 2] = $1; //@line 2823
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 2825
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 2827
    sp = STACKTOP; //@line 2828
    STACKTOP = sp; //@line 2829
    return 0; //@line 2829
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2831
    $28 = HEAP32[$16 >> 2] | 0; //@line 2833
    break;
   }
  }
 } while (0);
 $27 = $4 + 12 | 0; //@line 2838
 HEAP32[$27 >> 2] = $28; //@line 2839
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2840
 $29 = FUNCTION_TABLE_iiiii[$15 & 15]($8, $1, $4, $3) | 0; //@line 2841
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 83; //@line 2844
  HEAP32[$AsyncCtx6 + 4 >> 2] = $27; //@line 2846
  HEAP32[$AsyncCtx6 + 8 >> 2] = $4; //@line 2848
  sp = STACKTOP; //@line 2849
  STACKTOP = sp; //@line 2850
  return 0; //@line 2850
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2852
 $32 = HEAP32[$27 >> 2] | 0; //@line 2853
 if (!$32) {
  STACKTOP = sp; //@line 2856
  return $29 | 0; //@line 2856
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 2859
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2860
 FUNCTION_TABLE_vi[$35 & 511]($4); //@line 2861
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 84; //@line 2864
  HEAP32[$AsyncCtx10 + 4 >> 2] = $29; //@line 2866
  sp = STACKTOP; //@line 2867
  STACKTOP = sp; //@line 2868
  return 0; //@line 2868
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 2870
 STACKTOP = sp; //@line 2871
 return $29 | 0; //@line 2871
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1$i = 0, $14 = 0, $15 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 820
 $5 = $0 + -4 | 0; //@line 821
 $6 = $1 + 8 | 0; //@line 822
 do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   label = 7; //@line 827
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$6 >> 0] | 0)) {
     label = 7; //@line 835
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 841
   _puts(2646) | 0; //@line 842
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 53; //@line 845
    sp = STACKTOP; //@line 846
    return 0; //@line 847
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 849
   $$1$i = -3012; //@line 850
   return $$1$i | 0; //@line 851
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $14 = HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0; //@line 858
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 859
   $15 = FUNCTION_TABLE_iiii[$14 & 31]($5, $1, $2) | 0; //@line 860
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 54; //@line 863
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 865
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 867
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 869
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 871
    HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 873
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 875
    sp = STACKTOP; //@line 876
    return 0; //@line 877
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 879
   if (($15 | 0) < 0) {
    $$1$i = $15; //@line 882
    return $$1$i | 0; //@line 883
   } else {
    $23 = $1 + 12 | 0; //@line 885
    dest = $23; //@line 886
    src = $2; //@line 886
    stop = dest + 60 | 0; //@line 886
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 886
     dest = dest + 4 | 0; //@line 886
     src = src + 4 | 0; //@line 886
    } while ((dest | 0) < (stop | 0));
    HEAP16[$23 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 886
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 891
 _wait_ms(1); //@line 892
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 55; //@line 895
  HEAP32[$AsyncCtx10 + 4 >> 2] = $5; //@line 897
  HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 899
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 901
  HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 903
  HEAP32[$AsyncCtx10 + 20 >> 2] = $4; //@line 905
  sp = STACKTOP; //@line 906
  return 0; //@line 907
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 909
 $31 = HEAP32[(HEAP32[$5 >> 2] | 0) + 116 >> 2] | 0; //@line 912
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 913
 $32 = FUNCTION_TABLE_iiiii[$31 & 15]($5, $1, $3, $4) | 0; //@line 914
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 56; //@line 917
  sp = STACKTOP; //@line 918
  return 0; //@line 919
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 921
 $$1$i = $32; //@line 922
 return $$1$i | 0; //@line 923
}
function _main__async_cb_98($0) {
 $0 = $0 | 0;
 var $12 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 856
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 858
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 860
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 864
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 868
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 872
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 874
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 876
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 878
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 880
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 882
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 884
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 886
 $30 = __ZN17EthernetInterface11get_gatewayEv(788) | 0; //@line 887
 HEAP32[$4 >> 2] = $2 | 0 ? $2 : 4132; //@line 890
 _printf(4137, $4) | 0; //@line 891
 HEAP32[$8 >> 2] = $AsyncRetVal | 0 ? $AsyncRetVal : 4132; //@line 894
 _printf(4153, $8) | 0; //@line 895
 HEAP32[$12 >> 2] = $30 | 0 ? $30 : 4132; //@line 898
 _printf(4170, $12) | 0; //@line 899
 __ZN9TCPSocketC2Ev($16); //@line 900
 $39 = HEAP32[(HEAP32[197] | 0) + 88 >> 2] | 0; //@line 903
 $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 904
 $40 = FUNCTION_TABLE_ii[$39 & 31](788) | 0; //@line 905
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 309; //@line 908
  $41 = $ReallocAsyncCtx + 4 | 0; //@line 909
  HEAP32[$41 >> 2] = $16; //@line 910
  $42 = $ReallocAsyncCtx + 8 | 0; //@line 911
  HEAP32[$42 >> 2] = $16; //@line 912
  $43 = $ReallocAsyncCtx + 12 | 0; //@line 913
  HEAP32[$43 >> 2] = $26; //@line 914
  $44 = $ReallocAsyncCtx + 16 | 0; //@line 915
  HEAP32[$44 >> 2] = $28; //@line 916
  $45 = $ReallocAsyncCtx + 20 | 0; //@line 917
  HEAP32[$45 >> 2] = $16; //@line 918
  $46 = $ReallocAsyncCtx + 24 | 0; //@line 919
  HEAP32[$46 >> 2] = $18; //@line 920
  $47 = $ReallocAsyncCtx + 28 | 0; //@line 921
  HEAP32[$47 >> 2] = $20; //@line 922
  $48 = $ReallocAsyncCtx + 32 | 0; //@line 923
  HEAP32[$48 >> 2] = $22; //@line 924
  $49 = $ReallocAsyncCtx + 36 | 0; //@line 925
  HEAP32[$49 >> 2] = $24; //@line 926
  sp = STACKTOP; //@line 927
  return;
 }
 HEAP32[___async_retval >> 2] = $40; //@line 931
 ___async_unwind = 0; //@line 932
 HEAP32[$ReallocAsyncCtx >> 2] = 309; //@line 933
 $41 = $ReallocAsyncCtx + 4 | 0; //@line 934
 HEAP32[$41 >> 2] = $16; //@line 935
 $42 = $ReallocAsyncCtx + 8 | 0; //@line 936
 HEAP32[$42 >> 2] = $16; //@line 937
 $43 = $ReallocAsyncCtx + 12 | 0; //@line 938
 HEAP32[$43 >> 2] = $26; //@line 939
 $44 = $ReallocAsyncCtx + 16 | 0; //@line 940
 HEAP32[$44 >> 2] = $28; //@line 941
 $45 = $ReallocAsyncCtx + 20 | 0; //@line 942
 HEAP32[$45 >> 2] = $16; //@line 943
 $46 = $ReallocAsyncCtx + 24 | 0; //@line 944
 HEAP32[$46 >> 2] = $18; //@line 945
 $47 = $ReallocAsyncCtx + 28 | 0; //@line 946
 HEAP32[$47 >> 2] = $20; //@line 947
 $48 = $ReallocAsyncCtx + 32 | 0; //@line 948
 HEAP32[$48 >> 2] = $22; //@line 949
 $49 = $ReallocAsyncCtx + 36 | 0; //@line 950
 HEAP32[$49 >> 2] = $24; //@line 951
 sp = STACKTOP; //@line 952
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19213
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19215
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19219
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19221
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19223
 $12 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 4 >> 2] | 0; //@line 19226
 $13 = $2 + 12 | 0; //@line 19227
 $14 = HEAP32[$13 >> 2] | 0; //@line 19228
 if (!$14) {
  $24 = $4 + 12 | 0; //@line 19231
  HEAP32[$24 >> 2] = 0; //@line 19232
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 19233
  $25 = FUNCTION_TABLE_iiiii[$12 & 15]($AsyncRetVal, $6, $4, $8) | 0; //@line 19234
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 19237
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 19238
   HEAP32[$26 >> 2] = $24; //@line 19239
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 19240
   HEAP32[$27 >> 2] = $4; //@line 19241
   sp = STACKTOP; //@line 19242
   return;
  }
  HEAP32[___async_retval >> 2] = $25; //@line 19246
  ___async_unwind = 0; //@line 19247
  HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 19248
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 19249
  HEAP32[$26 >> 2] = $24; //@line 19250
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 19251
  HEAP32[$27 >> 2] = $4; //@line 19252
  sp = STACKTOP; //@line 19253
  return;
 } else {
  $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 19257
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 19258
  FUNCTION_TABLE_vii[$17 & 7]($4, $2); //@line 19259
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 82; //@line 19262
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 19263
   HEAP32[$18 >> 2] = $13; //@line 19264
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 19265
   HEAP32[$19 >> 2] = $4; //@line 19266
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 19267
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 19268
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 19269
   HEAP32[$21 >> 2] = $6; //@line 19270
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 19271
   HEAP32[$22 >> 2] = $8; //@line 19272
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 19273
   HEAP32[$23 >> 2] = $12; //@line 19274
   sp = STACKTOP; //@line 19275
   return;
  }
  ___async_unwind = 0; //@line 19278
  HEAP32[$ReallocAsyncCtx2 >> 2] = 82; //@line 19279
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 19280
  HEAP32[$18 >> 2] = $13; //@line 19281
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 19282
  HEAP32[$19 >> 2] = $4; //@line 19283
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 19284
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 19285
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 19286
  HEAP32[$21 >> 2] = $6; //@line 19287
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 19288
  HEAP32[$22 >> 2] = $8; //@line 19289
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 19290
  HEAP32[$23 >> 2] = $12; //@line 19291
  sp = STACKTOP; //@line 19292
  return;
 }
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_67($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $42 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21751
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21753
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21755
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21757
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21759
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21761
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21763
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21765
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21767
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21769
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21771
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21773
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21775
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21777
 $42 = HEAP32[$6 >> 2] | 0; //@line 21778
 if (!$42) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 21781
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 21782
  if (!___async) {
   HEAP32[___async_retval >> 2] = $27; //@line 21786
   ___async_unwind = 0; //@line 21787
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 21789
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 21791
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 21793
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 21795
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 21797
  HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 21799
  HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 21801
  HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 21803
  HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 21805
  HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 21807
  HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 21809
  HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 21811
  HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 21813
  HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 21815
  sp = STACKTOP; //@line 21816
  return;
 } else {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 21820
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 21821
  FUNCTION_TABLE_vi[$45 & 511]($4); //@line 21822
  if (!___async) {
   ___async_unwind = 0; //@line 21825
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 261; //@line 21827
  HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 21829
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 21831
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 21833
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 21835
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 21837
  HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 21839
  HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 21841
  HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 21843
  HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 21845
  HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 21847
  HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 21849
  HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 21851
  HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $26; //@line 21853
  sp = STACKTOP; //@line 21854
  return;
 }
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15838
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15840
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15842
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15844
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[1966] | 0)) {
  _serial_init(7868, 2, 3); //@line 15852
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 15854
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 15860
  _serial_putc(7868, $9 << 24 >> 24); //@line 15861
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 300; //@line 15864
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 15865
   HEAP32[$18 >> 2] = 0; //@line 15866
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 15867
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 15868
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 15869
   HEAP32[$20 >> 2] = $2; //@line 15870
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 15871
   HEAP8[$21 >> 0] = $9; //@line 15872
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 15873
   HEAP32[$22 >> 2] = $4; //@line 15874
   sp = STACKTOP; //@line 15875
   return;
  }
  ___async_unwind = 0; //@line 15878
  HEAP32[$ReallocAsyncCtx2 >> 2] = 300; //@line 15879
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 15880
  HEAP32[$18 >> 2] = 0; //@line 15881
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 15882
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 15883
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 15884
  HEAP32[$20 >> 2] = $2; //@line 15885
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 15886
  HEAP8[$21 >> 0] = $9; //@line 15887
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 15888
  HEAP32[$22 >> 2] = $4; //@line 15889
  sp = STACKTOP; //@line 15890
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 15893
  _serial_putc(7868, 13); //@line 15894
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 299; //@line 15897
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 15898
   HEAP8[$12 >> 0] = $9; //@line 15899
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 15900
   HEAP32[$13 >> 2] = 0; //@line 15901
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 15902
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 15903
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 15904
   HEAP32[$15 >> 2] = $2; //@line 15905
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 15906
   HEAP32[$16 >> 2] = $4; //@line 15907
   sp = STACKTOP; //@line 15908
   return;
  }
  ___async_unwind = 0; //@line 15911
  HEAP32[$ReallocAsyncCtx3 >> 2] = 299; //@line 15912
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 15913
  HEAP8[$12 >> 0] = $9; //@line 15914
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 15915
  HEAP32[$13 >> 2] = 0; //@line 15916
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 15917
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 15918
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 15919
  HEAP32[$15 >> 2] = $2; //@line 15920
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 15921
  HEAP32[$16 >> 2] = $4; //@line 15922
  sp = STACKTOP; //@line 15923
  return;
 }
}
function _mbed_error_vfprintf__async_cb_1($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15931
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15935
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15937
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15941
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 15942
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 15948
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 15954
  _serial_putc(7868, $13 << 24 >> 24); //@line 15955
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 300; //@line 15958
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 15959
   HEAP32[$22 >> 2] = $12; //@line 15960
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 15961
   HEAP32[$23 >> 2] = $4; //@line 15962
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 15963
   HEAP32[$24 >> 2] = $6; //@line 15964
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 15965
   HEAP8[$25 >> 0] = $13; //@line 15966
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 15967
   HEAP32[$26 >> 2] = $10; //@line 15968
   sp = STACKTOP; //@line 15969
   return;
  }
  ___async_unwind = 0; //@line 15972
  HEAP32[$ReallocAsyncCtx2 >> 2] = 300; //@line 15973
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 15974
  HEAP32[$22 >> 2] = $12; //@line 15975
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 15976
  HEAP32[$23 >> 2] = $4; //@line 15977
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 15978
  HEAP32[$24 >> 2] = $6; //@line 15979
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 15980
  HEAP8[$25 >> 0] = $13; //@line 15981
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 15982
  HEAP32[$26 >> 2] = $10; //@line 15983
  sp = STACKTOP; //@line 15984
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 15987
  _serial_putc(7868, 13); //@line 15988
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 299; //@line 15991
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 15992
   HEAP8[$16 >> 0] = $13; //@line 15993
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 15994
   HEAP32[$17 >> 2] = $12; //@line 15995
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 15996
   HEAP32[$18 >> 2] = $4; //@line 15997
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 15998
   HEAP32[$19 >> 2] = $6; //@line 15999
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 16000
   HEAP32[$20 >> 2] = $10; //@line 16001
   sp = STACKTOP; //@line 16002
   return;
  }
  ___async_unwind = 0; //@line 16005
  HEAP32[$ReallocAsyncCtx3 >> 2] = 299; //@line 16006
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 16007
  HEAP8[$16 >> 0] = $13; //@line 16008
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 16009
  HEAP32[$17 >> 2] = $12; //@line 16010
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 16011
  HEAP32[$18 >> 2] = $4; //@line 16012
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 16013
  HEAP32[$19 >> 2] = $6; //@line 16014
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 16015
  HEAP32[$20 >> 2] = $10; //@line 16016
  sp = STACKTOP; //@line 16017
  return;
 }
}
function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6766
 STACKTOP = STACKTOP + 16 | 0; //@line 6767
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6767
 $4 = sp; //@line 6768
 $$ = ($3 | 0) == 0 ? 8452 : $3; //@line 6770
 $6 = HEAP32[$$ >> 2] | 0; //@line 6771
 L1 : do {
  if (!$1) {
   if (!$6) {
    $$0 = 0; //@line 6777
   } else {
    label = 17; //@line 6779
   }
  } else {
   $$47 = ($0 | 0) == 0 ? $4 : $0; //@line 6783
   if (!$2) {
    $$0 = -2; //@line 6786
   } else {
    if (!$6) {
     $12 = HEAP8[$1 >> 0] | 0; //@line 6790
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$$47 >> 2] = $12 & 255; //@line 6794
      $$0 = $12 << 24 >> 24 != 0 & 1; //@line 6797
      break;
     }
     $21 = (HEAP32[HEAP32[(___pthread_self_913() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 6804
     $22 = HEAP8[$1 >> 0] | 0; //@line 6805
     if ($21) {
      HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343; //@line 6809
      $$0 = 1; //@line 6810
      break;
     }
     $26 = ($22 & 255) + -194 | 0; //@line 6814
     if ($26 >>> 0 > 50) {
      label = 17; //@line 6817
      break;
     }
     $30 = HEAP32[1908 + ($26 << 2) >> 2] | 0; //@line 6822
     $31 = $2 + -1 | 0; //@line 6823
     if (!$31) {
      $$2 = $30; //@line 6826
     } else {
      $$03952 = $1 + 1 | 0; //@line 6828
      $$04051 = $30; //@line 6828
      $$04350 = $31; //@line 6828
      label = 11; //@line 6829
     }
    } else {
     $$03952 = $1; //@line 6832
     $$04051 = $6; //@line 6832
     $$04350 = $2; //@line 6832
     label = 11; //@line 6833
    }
    L14 : do {
     if ((label | 0) == 11) {
      $33 = HEAP8[$$03952 >> 0] | 0; //@line 6837
      $35 = ($33 & 255) >>> 3; //@line 6839
      if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
       label = 17; //@line 6846
       break L1;
      } else {
       $$1 = $$03952; //@line 6849
       $$141 = $$04051; //@line 6849
       $$144 = $$04350; //@line 6849
       $44 = $33; //@line 6849
      }
      while (1) {
       $$1 = $$1 + 1 | 0; //@line 6853
       $$141 = ($44 & 255) + -128 | $$141 << 6; //@line 6856
       $$144 = $$144 + -1 | 0; //@line 6857
       if (($$141 | 0) >= 0) {
        break;
       }
       if (!$$144) {
        $$2 = $$141; //@line 6864
        break L14;
       }
       $44 = HEAP8[$$1 >> 0] | 0; //@line 6867
       if (($44 & -64) << 24 >> 24 != -128) {
        label = 17; //@line 6873
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0; //@line 6877
      HEAP32[$$47 >> 2] = $$141; //@line 6878
      $$0 = $2 - $$144 | 0; //@line 6880
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2; //@line 6884
    $$0 = -2; //@line 6885
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0; //@line 6890
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 6892
  $$0 = -1; //@line 6893
 }
 STACKTOP = sp; //@line 6895
 return $$0 | 0; //@line 6895
}
function __ZN6Socket4openEP12NetworkStack__async_cb_144($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13211
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13213
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13215
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13217
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13219
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13221
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13223
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13225
 $$pre = HEAP32[$2 >> 2] | 0; //@line 13226
 if ($$pre | 0) {
  $17 = HEAP32[$$pre + 4 >> 2] | 0; //@line 13230
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 13231
  FUNCTION_TABLE_vii[$17 & 7]($6, $8); //@line 13232
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 13235
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 13236
   HEAP32[$18 >> 2] = $2; //@line 13237
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 13238
   HEAP32[$19 >> 2] = $4; //@line 13239
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 13240
   HEAP32[$20 >> 2] = $8; //@line 13241
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 13242
   HEAP32[$21 >> 2] = $10; //@line 13243
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 13244
   HEAP32[$22 >> 2] = $12; //@line 13245
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 13246
   HEAP32[$23 >> 2] = $6; //@line 13247
   $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 13248
   HEAP32[$24 >> 2] = $14; //@line 13249
   sp = STACKTOP; //@line 13250
   return;
  }
  ___async_unwind = 0; //@line 13253
  HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 13254
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 13255
  HEAP32[$18 >> 2] = $2; //@line 13256
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 13257
  HEAP32[$19 >> 2] = $4; //@line 13258
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 13259
  HEAP32[$20 >> 2] = $8; //@line 13260
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 13261
  HEAP32[$21 >> 2] = $10; //@line 13262
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 13263
  HEAP32[$22 >> 2] = $12; //@line 13264
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 13265
  HEAP32[$23 >> 2] = $6; //@line 13266
  $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 13267
  HEAP32[$24 >> 2] = $14; //@line 13268
  sp = STACKTOP; //@line 13269
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 13272
 $25 = HEAP32[$10 >> 2] | 0; //@line 13273
 $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 84 >> 2] | 0; //@line 13276
 $29 = HEAP32[$12 >> 2] | 0; //@line 13277
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 13278
 FUNCTION_TABLE_viiii[$28 & 7]($25, $29, 126, $6); //@line 13279
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 13282
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 13283
  HEAP32[$30 >> 2] = $14; //@line 13284
  sp = STACKTOP; //@line 13285
  return;
 }
 ___async_unwind = 0; //@line 13288
 HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 13289
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 13290
 HEAP32[$30 >> 2] = $14; //@line 13291
 sp = STACKTOP; //@line 13292
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_138($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 9890
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9892
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9894
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9896
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9898
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9900
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9902
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9904
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9906
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9908
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9910
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9912
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9914
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9916
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 9918
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 9920
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 9922
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 9924
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 9926
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 9928
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 9930
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 9932
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 9934
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 9936
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 9938
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(100) | 0; //@line 9939
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9940
 if (!___async) {
  ___async_unwind = 0; //@line 9943
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 186; //@line 9945
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 9947
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 9949
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 9951
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 9953
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $10; //@line 9955
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $12; //@line 9957
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $14; //@line 9959
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $16; //@line 9961
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $18; //@line 9963
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $20; //@line 9965
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $22; //@line 9967
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $24; //@line 9969
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $26; //@line 9971
 HEAP32[$ReallocAsyncCtx11 + 56 >> 2] = $28; //@line 9973
 HEAP32[$ReallocAsyncCtx11 + 60 >> 2] = $30; //@line 9975
 HEAP32[$ReallocAsyncCtx11 + 64 >> 2] = $32; //@line 9977
 HEAP32[$ReallocAsyncCtx11 + 68 >> 2] = $34; //@line 9979
 HEAP32[$ReallocAsyncCtx11 + 72 >> 2] = $36; //@line 9981
 HEAP32[$ReallocAsyncCtx11 + 76 >> 2] = $38; //@line 9983
 HEAP32[$ReallocAsyncCtx11 + 80 >> 2] = $40; //@line 9985
 HEAP32[$ReallocAsyncCtx11 + 84 >> 2] = $42; //@line 9987
 HEAP32[$ReallocAsyncCtx11 + 88 >> 2] = $44; //@line 9989
 HEAP32[$ReallocAsyncCtx11 + 92 >> 2] = $46; //@line 9991
 HEAP32[$ReallocAsyncCtx11 + 96 >> 2] = $48; //@line 9993
 sp = STACKTOP; //@line 9994
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1 = 0, $13 = 0, $14 = 0, $21 = 0, $28 = 0, $29 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 416
 $5 = $1 + 8 | 0; //@line 417
 do {
  if (!(HEAP8[$5 >> 0] | 0)) {
   label = 7; //@line 422
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$5 >> 0] | 0)) {
     label = 7; //@line 430
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 436
   _puts(2646) | 0; //@line 437
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 40; //@line 440
    sp = STACKTOP; //@line 441
    return 0; //@line 442
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 444
   $$1 = -3012; //@line 445
   return $$1 | 0; //@line 446
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 108 >> 2] | 0; //@line 453
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 454
   $14 = FUNCTION_TABLE_iiii[$13 & 31]($0, $1, $2) | 0; //@line 455
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 41; //@line 458
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 460
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 462
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 464
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 466
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 468
    sp = STACKTOP; //@line 469
    return 0; //@line 470
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 472
   if (($14 | 0) < 0) {
    $$1 = $14; //@line 475
    return $$1 | 0; //@line 476
   } else {
    $21 = $1 + 12 | 0; //@line 478
    dest = $21; //@line 479
    src = $2; //@line 479
    stop = dest + 60 | 0; //@line 479
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 479
     dest = dest + 4 | 0; //@line 479
     src = src + 4 | 0; //@line 479
    } while ((dest | 0) < (stop | 0));
    HEAP16[$21 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 479
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 484
 _wait_ms(1); //@line 485
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 42; //@line 488
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 490
  HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 492
  HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 494
  HEAP32[$AsyncCtx10 + 16 >> 2] = $4; //@line 496
  sp = STACKTOP; //@line 497
  return 0; //@line 498
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 500
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 116 >> 2] | 0; //@line 503
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 504
 $29 = FUNCTION_TABLE_iiiii[$28 & 15]($0, $1, $3, $4) | 0; //@line 505
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 43; //@line 508
  sp = STACKTOP; //@line 509
  return 0; //@line 510
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 512
 $$1 = $29; //@line 513
 return $$1 | 0; //@line 514
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$010 = 0, $$1 = 0, $$byval_copy = 0, $14 = 0, $15 = 0, $24 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2970
 STACKTOP = STACKTOP + 112 | 0; //@line 2971
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 2971
 $$byval_copy = sp + 88 | 0; //@line 2972
 $4 = sp + 24 | 0; //@line 2973
 $5 = sp; //@line 2974
 if (!(HEAP8[$1 >> 0] | 0)) {
  $$010 = -3003; //@line 2978
  STACKTOP = sp; //@line 2979
  return $$010 | 0; //@line 2979
 }
 $9 = ($3 | 0) == 0; //@line 2982
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, $1) | 0) {
  if (!$9) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($2) | 0) != ($3 | 0)) {
    $$010 = -3009; //@line 2988
    STACKTOP = sp; //@line 2989
    return $$010 | 0; //@line 2989
   }
  }
  $$010 = 0; //@line 2992
  STACKTOP = sp; //@line 2993
  return $$010 | 0; //@line 2993
 }
 if ($9) {
  HEAP32[$5 >> 2] = 0; //@line 2996
  HEAP32[$5 + 4 >> 2] = 0; //@line 2996
  HEAP32[$5 + 8 >> 2] = 0; //@line 2996
  HEAP32[$5 + 12 >> 2] = 0; //@line 2996
  HEAP32[$5 + 16 >> 2] = 0; //@line 2996
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 2997
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 2997
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 2997
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 2997
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 2997
  __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 0); //@line 2998
  $14 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3001
  $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 3002
  $15 = FUNCTION_TABLE_ii[$14 & 31]($0) | 0; //@line 3003
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 89; //@line 3006
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3008
   HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3010
   HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 3012
   HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 3014
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 3016
   HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 3018
   sp = STACKTOP; //@line 3019
   STACKTOP = sp; //@line 3020
   return 0; //@line 3020
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3022
  if (__ZN13SocketAddress14set_ip_addressEPKc($4, $15) | 0) {
   $$0 = __ZNK13SocketAddress14get_ip_versionEv($4) | 0; //@line 3026
  } else {
   $$0 = 0; //@line 3028
  }
  $$1 = $$0; //@line 3030
 } else {
  $$1 = $3; //@line 3032
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3034
 $24 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $$1) | 0; //@line 3035
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 90; //@line 3038
  sp = STACKTOP; //@line 3039
  STACKTOP = sp; //@line 3040
  return 0; //@line 3040
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3042
 $$010 = $24; //@line 3043
 STACKTOP = sp; //@line 3044
 return $$010 | 0; //@line 3044
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4388
 STACKTOP = STACKTOP + 48 | 0; //@line 4389
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 4389
 $vararg_buffer3 = sp + 16 | 0; //@line 4390
 $vararg_buffer = sp; //@line 4391
 $3 = sp + 32 | 0; //@line 4392
 $4 = $0 + 28 | 0; //@line 4393
 $5 = HEAP32[$4 >> 2] | 0; //@line 4394
 HEAP32[$3 >> 2] = $5; //@line 4395
 $7 = $0 + 20 | 0; //@line 4397
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 4399
 HEAP32[$3 + 4 >> 2] = $9; //@line 4400
 HEAP32[$3 + 8 >> 2] = $1; //@line 4402
 HEAP32[$3 + 12 >> 2] = $2; //@line 4404
 $12 = $9 + $2 | 0; //@line 4405
 $13 = $0 + 60 | 0; //@line 4406
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 4409
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 4411
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 4413
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 4415
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 4419
  } else {
   $$04756 = 2; //@line 4421
   $$04855 = $12; //@line 4421
   $$04954 = $3; //@line 4421
   $27 = $17; //@line 4421
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 4427
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 4429
    $38 = $27 >>> 0 > $37 >>> 0; //@line 4430
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 4432
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 4434
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 4436
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 4439
    $44 = $$150 + 4 | 0; //@line 4440
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 4443
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 4446
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 4448
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 4450
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 4452
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 4455
     break L1;
    } else {
     $$04756 = $$1; //@line 4458
     $$04954 = $$150; //@line 4458
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 4462
   HEAP32[$4 >> 2] = 0; //@line 4463
   HEAP32[$7 >> 2] = 0; //@line 4464
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 4467
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 4470
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 4475
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 4481
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4486
  $25 = $20; //@line 4487
  HEAP32[$4 >> 2] = $25; //@line 4488
  HEAP32[$7 >> 2] = $25; //@line 4489
  $$051 = $2; //@line 4490
 }
 STACKTOP = sp; //@line 4492
 return $$051 | 0; //@line 4492
}
function __ZN9TCPSocket4sendEPKvj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $22 = 0, $3 = 0, $32 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5375
 $3 = $0 + 57 | 0; //@line 5376
 do {
  if (HEAP8[$3 >> 0] | 0) {
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5381
   _mbed_assert_internal(3726, 3746, 125); //@line 5382
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 144; //@line 5385
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 5387
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5389
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5391
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 5393
    sp = STACKTOP; //@line 5394
    return 0; //@line 5395
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5397
    break;
   }
  }
 } while (0);
 HEAP8[$3 >> 0] = 1; //@line 5402
 $10 = $0 + 8 | 0; //@line 5403
 $11 = $0 + 52 | 0; //@line 5404
 $12 = $0 + 4 | 0; //@line 5405
 $13 = $0 + 12 | 0; //@line 5406
 $$0 = 0; //@line 5407
 while (1) {
  $14 = HEAP32[$10 >> 2] | 0; //@line 5409
  if (!$14) {
   $$024 = -3005; //@line 5412
   $$2 = $$0; //@line 5412
   label = 13; //@line 5413
   break;
  }
  HEAP32[$11 >> 2] = 0; //@line 5416
  $16 = HEAP32[$12 >> 2] | 0; //@line 5417
  $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 68 >> 2] | 0; //@line 5420
  $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 5423
  $22 = FUNCTION_TABLE_iiiii[$19 & 15]($16, $14, $1 + $$0 | 0, $2 - $$0 | 0) | 0; //@line 5424
  if (___async) {
   label = 8; //@line 5427
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5430
  if (($22 | 0) > -1) {
   $32 = $22 + $$0 | 0; //@line 5433
   if ($32 >>> 0 < $2 >>> 0) {
    $$1 = $32; //@line 5436
   } else {
    $$024 = $22; //@line 5438
    $$2 = $32; //@line 5438
    label = 13; //@line 5439
    break;
   }
  } else {
   $$1 = $$0; //@line 5443
  }
  if (!(HEAP32[$13 >> 2] | 0)) {
   $$024 = $22; //@line 5448
   $$2 = $$1; //@line 5448
   label = 13; //@line 5449
   break;
  }
  if (($22 | 0) != -3001 & ($22 | 0) < 0) {
   $$024 = $22; //@line 5456
   $$2 = $$1; //@line 5456
   label = 13; //@line 5457
   break;
  } else {
   $$0 = $$1; //@line 5460
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx >> 2] = 145; //@line 5464
  HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 5466
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5468
  HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 5470
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 5472
  HEAP32[$AsyncCtx + 20 >> 2] = $10; //@line 5474
  HEAP32[$AsyncCtx + 24 >> 2] = $11; //@line 5476
  HEAP32[$AsyncCtx + 28 >> 2] = $12; //@line 5478
  HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 5480
  sp = STACKTOP; //@line 5481
  return 0; //@line 5482
 } else if ((label | 0) == 13) {
  HEAP8[$3 >> 0] = 0; //@line 5485
  return (($$024 | 0) < 1 & ($$024 | 0) != -3001 ? $$024 : ($$2 | 0) == 0 ? -3001 : $$2) | 0; //@line 5492
 }
 return 0; //@line 5494
}
function __ZN9TCPSocket7connectEPKct__async_cb_77($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23563
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23565
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23567
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23569
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23571
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23573
 HEAP8[$2 >> 0] = 1; //@line 23574
 $11 = $4 + 8 | 0; //@line 23575
 $12 = $4 + 52 | 0; //@line 23576
 $13 = $4 + 12 | 0; //@line 23577
 $14 = HEAP32[$11 >> 2] | 0; //@line 23578
 if (!$14) {
  HEAP8[$2 >> 0] = 0; //@line 23581
  HEAP32[___async_retval >> 2] = 0 & -3005 == -3015 ? 0 : -3005; //@line 23586
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 23589
 $16 = HEAP32[$6 >> 2] | 0; //@line 23590
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 60 >> 2] | 0; //@line 23593
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 23594
 $20 = FUNCTION_TABLE_iiii[$19 & 31]($16, $14, $8) | 0; //@line 23595
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 23598
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 23599
  HEAP32[$21 >> 2] = $13; //@line 23600
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 23601
  HEAP32[$22 >> 2] = $11; //@line 23602
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 23603
  HEAP32[$23 >> 2] = $2; //@line 23604
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 23605
  $$expand_i1_val = 0; //@line 23606
  HEAP8[$24 >> 0] = $$expand_i1_val; //@line 23607
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 23608
  HEAP32[$25 >> 2] = $10; //@line 23609
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 23610
  HEAP32[$26 >> 2] = $12; //@line 23611
  $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 23612
  HEAP32[$27 >> 2] = $6; //@line 23613
  $28 = $ReallocAsyncCtx2 + 32 | 0; //@line 23614
  HEAP32[$28 >> 2] = $8; //@line 23615
  sp = STACKTOP; //@line 23616
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 23620
 ___async_unwind = 0; //@line 23621
 HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 23622
 $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 23623
 HEAP32[$21 >> 2] = $13; //@line 23624
 $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 23625
 HEAP32[$22 >> 2] = $11; //@line 23626
 $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 23627
 HEAP32[$23 >> 2] = $2; //@line 23628
 $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 23629
 $$expand_i1_val = 0; //@line 23630
 HEAP8[$24 >> 0] = $$expand_i1_val; //@line 23631
 $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 23632
 HEAP32[$25 >> 2] = $10; //@line 23633
 $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 23634
 HEAP32[$26 >> 2] = $12; //@line 23635
 $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 23636
 HEAP32[$27 >> 2] = $6; //@line 23637
 $28 = $ReallocAsyncCtx2 + 32 | 0; //@line 23638
 HEAP32[$28 >> 2] = $8; //@line 23639
 sp = STACKTOP; //@line 23640
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_197($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16196
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16198
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16200
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16202
 $7 = $2 + 28 | 0; //@line 16203
 $8 = HEAP32[$7 >> 2] | 0; //@line 16204
 if (!$8) {
  $18 = $4 + 12 | 0; //@line 16207
  HEAP32[$18 >> 2] = 0; //@line 16208
  $19 = HEAP32[$2 >> 2] | 0; //@line 16209
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 16210
  __ZL28nsapi_dns_query_async_deletei($19); //@line 16211
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 221; //@line 16214
   $20 = $ReallocAsyncCtx14 + 4 | 0; //@line 16215
   HEAP32[$20 >> 2] = $18; //@line 16216
   $21 = $ReallocAsyncCtx14 + 8 | 0; //@line 16217
   HEAP32[$21 >> 2] = $4; //@line 16218
   $22 = $ReallocAsyncCtx14 + 12 | 0; //@line 16219
   HEAP32[$22 >> 2] = $6; //@line 16220
   sp = STACKTOP; //@line 16221
   return;
  }
  ___async_unwind = 0; //@line 16224
  HEAP32[$ReallocAsyncCtx14 >> 2] = 221; //@line 16225
  $20 = $ReallocAsyncCtx14 + 4 | 0; //@line 16226
  HEAP32[$20 >> 2] = $18; //@line 16227
  $21 = $ReallocAsyncCtx14 + 8 | 0; //@line 16228
  HEAP32[$21 >> 2] = $4; //@line 16229
  $22 = $ReallocAsyncCtx14 + 12 | 0; //@line 16230
  HEAP32[$22 >> 2] = $6; //@line 16231
  sp = STACKTOP; //@line 16232
  return;
 } else {
  $12 = HEAP32[$8 + 4 >> 2] | 0; //@line 16237
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 16238
  FUNCTION_TABLE_vii[$12 & 7]($4, $2 + 16 | 0); //@line 16239
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 220; //@line 16242
   $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 16243
   HEAP32[$13 >> 2] = $7; //@line 16244
   $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 16245
   HEAP32[$14 >> 2] = $4; //@line 16246
   $15 = $ReallocAsyncCtx5 + 12 | 0; //@line 16247
   HEAP32[$15 >> 2] = $2; //@line 16248
   $16 = $ReallocAsyncCtx5 + 16 | 0; //@line 16249
   HEAP32[$16 >> 2] = $4; //@line 16250
   $17 = $ReallocAsyncCtx5 + 20 | 0; //@line 16251
   HEAP32[$17 >> 2] = $6; //@line 16252
   sp = STACKTOP; //@line 16253
   return;
  }
  ___async_unwind = 0; //@line 16256
  HEAP32[$ReallocAsyncCtx5 >> 2] = 220; //@line 16257
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 16258
  HEAP32[$13 >> 2] = $7; //@line 16259
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 16260
  HEAP32[$14 >> 2] = $4; //@line 16261
  $15 = $ReallocAsyncCtx5 + 12 | 0; //@line 16262
  HEAP32[$15 >> 2] = $2; //@line 16263
  $16 = $ReallocAsyncCtx5 + 16 | 0; //@line 16264
  HEAP32[$16 >> 2] = $4; //@line 16265
  $17 = $ReallocAsyncCtx5 + 20 | 0; //@line 16266
  HEAP32[$17 >> 2] = $6; //@line 16267
  sp = STACKTOP; //@line 16268
  return;
 }
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16470
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16472
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16474
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16476
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16478
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16480
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16482
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16484
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16486
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 16492
  $34 = ___async_retval; //@line 16493
  HEAP32[$34 >> 2] = $$2; //@line 16494
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 16497
 if (!$16) {
  $$2 = -3005; //@line 16500
  $34 = ___async_retval; //@line 16501
  HEAP32[$34 >> 2] = $$2; //@line 16502
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 16505
 $18 = HEAP32[$8 >> 2] | 0; //@line 16506
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 80 >> 2] | 0; //@line 16509
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 16510
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 16511
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 154; //@line 16514
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 16515
  HEAP32[$23 >> 2] = $2; //@line 16516
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 16517
  HEAP32[$24 >> 2] = $4; //@line 16518
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 16519
  HEAP32[$25 >> 2] = $6; //@line 16520
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 16521
  HEAP32[$26 >> 2] = $8; //@line 16522
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 16523
  HEAP32[$27 >> 2] = $10; //@line 16524
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 16525
  HEAP32[$28 >> 2] = $12; //@line 16526
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 16527
  HEAP32[$29 >> 2] = $14; //@line 16528
  sp = STACKTOP; //@line 16529
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 16533
 ___async_unwind = 0; //@line 16534
 HEAP32[$ReallocAsyncCtx >> 2] = 154; //@line 16535
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 16536
 HEAP32[$23 >> 2] = $2; //@line 16537
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 16538
 HEAP32[$24 >> 2] = $4; //@line 16539
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 16540
 HEAP32[$25 >> 2] = $6; //@line 16541
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 16542
 HEAP32[$26 >> 2] = $8; //@line 16543
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 16544
 HEAP32[$27 >> 2] = $10; //@line 16545
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 16546
 HEAP32[$28 >> 2] = $12; //@line 16547
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 16548
 HEAP32[$29 >> 2] = $14; //@line 16549
 sp = STACKTOP; //@line 16550
 return;
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16105
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16107
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16109
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16111
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16113
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16115
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16117
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16119
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16121
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 16127
  $34 = ___async_retval; //@line 16128
  HEAP32[$34 >> 2] = $$2; //@line 16129
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 16132
 if (!$16) {
  $$2 = -3005; //@line 16135
  $34 = ___async_retval; //@line 16136
  HEAP32[$34 >> 2] = $$2; //@line 16137
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 16140
 $18 = HEAP32[$8 >> 2] | 0; //@line 16141
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 76 >> 2] | 0; //@line 16144
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 16145
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 16146
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 153; //@line 16149
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 16150
  HEAP32[$23 >> 2] = $2; //@line 16151
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 16152
  HEAP32[$24 >> 2] = $4; //@line 16153
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 16154
  HEAP32[$25 >> 2] = $6; //@line 16155
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 16156
  HEAP32[$26 >> 2] = $8; //@line 16157
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 16158
  HEAP32[$27 >> 2] = $10; //@line 16159
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 16160
  HEAP32[$28 >> 2] = $12; //@line 16161
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 16162
  HEAP32[$29 >> 2] = $14; //@line 16163
  sp = STACKTOP; //@line 16164
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 16168
 ___async_unwind = 0; //@line 16169
 HEAP32[$ReallocAsyncCtx >> 2] = 153; //@line 16170
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 16171
 HEAP32[$23 >> 2] = $2; //@line 16172
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 16173
 HEAP32[$24 >> 2] = $4; //@line 16174
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 16175
 HEAP32[$25 >> 2] = $6; //@line 16176
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 16177
 HEAP32[$26 >> 2] = $8; //@line 16178
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 16179
 HEAP32[$27 >> 2] = $10; //@line 16180
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 16181
 HEAP32[$28 >> 2] = $12; //@line 16182
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 16183
 HEAP32[$29 >> 2] = $14; //@line 16184
 sp = STACKTOP; //@line 16185
 return;
}
function __ZN9TCPSocket4recvEPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4497
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4499
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4501
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4503
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4505
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4507
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4509
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4511
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$0 = $AsyncRetVal; //@line 4517
  HEAP8[$4 >> 0] = 0; //@line 4518
  $34 = ___async_retval; //@line 4519
  HEAP32[$34 >> 2] = $$0; //@line 4520
  return;
 }
 $16 = HEAP32[$6 >> 2] | 0; //@line 4523
 if (!$16) {
  $$0 = -3005; //@line 4526
  HEAP8[$4 >> 0] = 0; //@line 4527
  $34 = ___async_retval; //@line 4528
  HEAP32[$34 >> 2] = $$0; //@line 4529
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 4532
 $18 = HEAP32[$10 >> 2] | 0; //@line 4533
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 72 >> 2] | 0; //@line 4536
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 4537
 $22 = FUNCTION_TABLE_iiiii[$21 & 15]($18, $16, $12, $14) | 0; //@line 4538
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 4541
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 4542
  HEAP32[$23 >> 2] = $2; //@line 4543
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 4544
  HEAP32[$24 >> 2] = $4; //@line 4545
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 4546
  HEAP32[$25 >> 2] = $6; //@line 4547
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 4548
  HEAP32[$26 >> 2] = $8; //@line 4549
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 4550
  HEAP32[$27 >> 2] = $10; //@line 4551
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 4552
  HEAP32[$28 >> 2] = $12; //@line 4553
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 4554
  HEAP32[$29 >> 2] = $14; //@line 4555
  sp = STACKTOP; //@line 4556
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 4560
 ___async_unwind = 0; //@line 4561
 HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 4562
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 4563
 HEAP32[$23 >> 2] = $2; //@line 4564
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 4565
 HEAP32[$24 >> 2] = $4; //@line 4566
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 4567
 HEAP32[$25 >> 2] = $6; //@line 4568
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 4569
 HEAP32[$26 >> 2] = $8; //@line 4570
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 4571
 HEAP32[$27 >> 2] = $10; //@line 4572
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 4573
 HEAP32[$28 >> 2] = $12; //@line 4574
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 4575
 HEAP32[$29 >> 2] = $14; //@line 4576
 sp = STACKTOP; //@line 4577
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_162($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14429
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14433
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14435
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14437
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14439
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14441
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14442
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 14446
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 14447
  FUNCTION_TABLE_vi[$16 & 511]($6); //@line 14448
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 14451
   $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 14452
   HEAP32[$17 >> 2] = $4; //@line 14453
   $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 14454
   HEAP32[$18 >> 2] = $8; //@line 14455
   $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 14456
   HEAP32[$19 >> 2] = $10; //@line 14457
   $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 14458
   HEAP32[$20 >> 2] = $12; //@line 14459
   sp = STACKTOP; //@line 14460
   return;
  }
  ___async_unwind = 0; //@line 14463
  HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 14464
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 14465
  HEAP32[$17 >> 2] = $4; //@line 14466
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 14467
  HEAP32[$18 >> 2] = $8; //@line 14468
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 14469
  HEAP32[$19 >> 2] = $10; //@line 14470
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 14471
  HEAP32[$20 >> 2] = $12; //@line 14472
  sp = STACKTOP; //@line 14473
  return;
 }
 $21 = HEAP32[$4 >> 2] | 0; //@line 14476
 if (!$21) {
  HEAP32[___async_retval >> 2] = $10; //@line 14480
  return;
 }
 $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 14484
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 14485
 FUNCTION_TABLE_vi[$24 & 511]($8); //@line 14486
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 14489
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 14490
  HEAP32[$25 >> 2] = $8; //@line 14491
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 14492
  HEAP32[$26 >> 2] = $10; //@line 14493
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 14494
  HEAP32[$27 >> 2] = $12; //@line 14495
  sp = STACKTOP; //@line 14496
  return;
 }
 ___async_unwind = 0; //@line 14499
 HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 14500
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 14501
 HEAP32[$25 >> 2] = $8; //@line 14502
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 14503
 HEAP32[$26 >> 2] = $10; //@line 14504
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 14505
 HEAP32[$27 >> 2] = $12; //@line 14506
 sp = STACKTOP; //@line 14507
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_35($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 18015
 STACKTOP = STACKTOP + 32 | 0; //@line 18016
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 18016
 $$byval_copy = sp; //@line 18017
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18019
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18021
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18023
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18025
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18027
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18029
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18031
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18033
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18035
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18037
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18039
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18041
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18043
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  HEAP8[$4 >> 0] = 5; //@line 18048
  $31 = 648 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 18051
  HEAP32[$$byval_copy >> 2] = HEAP32[$31 >> 2]; //@line 18052
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 18052
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$31 + 8 >> 2]; //@line 18052
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$31 + 12 >> 2]; //@line 18052
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$31 + 16 >> 2]; //@line 18052
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 18053
 }
 __ZN13SocketAddress8set_portEt($2, 53); //@line 18055
 $32 = HEAP32[$14 >> 2] | 0; //@line 18056
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 18057
 $33 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($32, $2, $16, $18) | 0; //@line 18058
 if (!___async) {
  HEAP32[___async_retval >> 2] = $33; //@line 18062
  ___async_unwind = 0; //@line 18063
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 254; //@line 18065
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $16; //@line 18067
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $20; //@line 18069
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $2; //@line 18071
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $4; //@line 18073
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $6; //@line 18075
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $8; //@line 18077
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $10; //@line 18079
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $12; //@line 18081
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $14; //@line 18083
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $18; //@line 18085
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $22; //@line 18087
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $24; //@line 18089
 HEAP32[$ReallocAsyncCtx12 + 52 >> 2] = $26; //@line 18091
 sp = STACKTOP; //@line 18092
 STACKTOP = sp; //@line 18093
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_145($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13299
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13305
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13307
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13309
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13311
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13313
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13314
 $15 = $$pre$i$i; //@line 13315
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 13316
 if (!$$pre$i$i) {
  $24 = HEAP32[$8 >> 2] | 0; //@line 13319
  $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 84 >> 2] | 0; //@line 13322
  $28 = HEAP32[$10 >> 2] | 0; //@line 13323
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 13324
  FUNCTION_TABLE_viiii[$27 & 7]($24, $28, 126, $12); //@line 13325
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 13328
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 13329
   HEAP32[$29 >> 2] = $14; //@line 13330
   sp = STACKTOP; //@line 13331
   return;
  }
  ___async_unwind = 0; //@line 13334
  HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 13335
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 13336
  HEAP32[$29 >> 2] = $14; //@line 13337
  sp = STACKTOP; //@line 13338
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 13342
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 13343
  FUNCTION_TABLE_vi[$18 & 511]($6); //@line 13344
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 13347
   $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 13348
   HEAP32[$19 >> 2] = $6; //@line 13349
   $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 13350
   HEAP32[$20 >> 2] = $8; //@line 13351
   $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 13352
   HEAP32[$21 >> 2] = $10; //@line 13353
   $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 13354
   HEAP32[$22 >> 2] = $12; //@line 13355
   $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 13356
   HEAP32[$23 >> 2] = $14; //@line 13357
   sp = STACKTOP; //@line 13358
   return;
  }
  ___async_unwind = 0; //@line 13361
  HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 13362
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 13363
  HEAP32[$19 >> 2] = $6; //@line 13364
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 13365
  HEAP32[$20 >> 2] = $8; //@line 13366
  $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 13367
  HEAP32[$21 >> 2] = $10; //@line 13368
  $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 13369
  HEAP32[$22 >> 2] = $12; //@line 13370
  $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 13371
  HEAP32[$23 >> 2] = $14; //@line 13372
  sp = STACKTOP; //@line 13373
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_157($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13906
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13910
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13912
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13914
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13916
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13918
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13920
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13922
 $$pre = HEAP32[$4 >> 2] | 0; //@line 13924
 $17 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 13925
 if ($$pre | 0) {
  $20 = HEAP32[$$pre + 4 >> 2] | 0; //@line 13929
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 13930
  FUNCTION_TABLE_vii[$20 & 7]($14, $12); //@line 13931
  if (!___async) {
   ___async_unwind = 0; //@line 13934
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 272; //@line 13936
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $16; //@line 13938
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 13940
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 13942
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $10; //@line 13944
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $17; //@line 13946
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $14; //@line 13948
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 13950
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $12; //@line 13952
  sp = STACKTOP; //@line 13953
  return;
 }
 $29 = $8 + 12 | 0; //@line 13956
 HEAP32[$29 >> 2] = 0; //@line 13957
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 13958
 $30 = FUNCTION_TABLE_iiii[$17 & 31]($6, $10, $8) | 0; //@line 13959
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 13962
  $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 13963
  HEAP32[$31 >> 2] = $29; //@line 13964
  $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 13965
  HEAP32[$32 >> 2] = $14; //@line 13966
  $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 13967
  HEAP32[$33 >> 2] = $4; //@line 13968
  $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 13969
  HEAP32[$34 >> 2] = $12; //@line 13970
  sp = STACKTOP; //@line 13971
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 13975
 ___async_unwind = 0; //@line 13976
 HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 13977
 $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 13978
 HEAP32[$31 >> 2] = $29; //@line 13979
 $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 13980
 HEAP32[$32 >> 2] = $14; //@line 13981
 $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 13982
 HEAP32[$33 >> 2] = $4; //@line 13983
 $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 13984
 HEAP32[$34 >> 2] = $12; //@line 13985
 sp = STACKTOP; //@line 13986
 return;
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 13052
 STACKTOP = STACKTOP + 128 | 0; //@line 13053
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 13053
 $2 = sp; //@line 13054
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13055
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 13056
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 298; //@line 13059
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 13061
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13063
  sp = STACKTOP; //@line 13064
  STACKTOP = sp; //@line 13065
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13067
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 13070
  return;
 }
 if (!(HEAP32[1966] | 0)) {
  _serial_init(7868, 2, 3); //@line 13075
  $$01213 = 0; //@line 13076
  $$014 = 0; //@line 13076
 } else {
  $$01213 = 0; //@line 13078
  $$014 = 0; //@line 13078
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 13082
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13087
   _serial_putc(7868, 13); //@line 13088
   if (___async) {
    label = 8; //@line 13091
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13094
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13097
  _serial_putc(7868, $$01213 << 24 >> 24); //@line 13098
  if (___async) {
   label = 11; //@line 13101
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13104
  $24 = $$014 + 1 | 0; //@line 13105
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 13108
   break;
  } else {
   $$014 = $24; //@line 13111
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 299; //@line 13115
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 13117
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 13119
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 13121
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 13123
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 13125
  sp = STACKTOP; //@line 13126
  STACKTOP = sp; //@line 13127
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 300; //@line 13130
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 13132
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 13134
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 13136
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 13138
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 13140
  sp = STACKTOP; //@line 13141
  STACKTOP = sp; //@line 13142
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 13145
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_217($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17759
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17763
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17765
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 17767
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17769
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 17771
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17773
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17775
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17777
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17779
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 17782
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17784
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 17788
   $27 = $6 + 24 | 0; //@line 17789
   $28 = $4 + 8 | 0; //@line 17790
   $29 = $6 + 54 | 0; //@line 17791
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 17821
    HEAP8[$14 >> 0] = 0; //@line 17822
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 17823
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 17824
    if (!___async) {
     ___async_unwind = 0; //@line 17827
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 355; //@line 17829
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 17831
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 17833
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 17835
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 17837
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 17839
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 17841
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 17843
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 17845
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 17847
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 17849
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 17851
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 17853
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 17855
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 17858
    sp = STACKTOP; //@line 17859
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 17864
 HEAP8[$14 >> 0] = $12; //@line 17865
 return;
}
function __ZN9TCPSocket4sendEPKvj__async_cb_88($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 286
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 288
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 290
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 292
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 294
 HEAP8[$2 >> 0] = 1; //@line 295
 $9 = $4 + 8 | 0; //@line 296
 $10 = $4 + 52 | 0; //@line 297
 $11 = $4 + 4 | 0; //@line 298
 $12 = $4 + 12 | 0; //@line 299
 $13 = HEAP32[$9 >> 2] | 0; //@line 300
 if (!$13) {
  HEAP8[$2 >> 0] = 0; //@line 303
  HEAP32[___async_retval >> 2] = -3005 < 1 & -3005 != -3001 ? -3005 : 0 == 0 ? -3001 : 0; //@line 311
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 314
 $15 = HEAP32[$11 >> 2] | 0; //@line 315
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 68 >> 2] | 0; //@line 318
 $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 320
 $20 = FUNCTION_TABLE_iiiii[$18 & 15]($15, $13, $6, $8 - 0 | 0) | 0; //@line 321
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 324
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 325
  HEAP32[$21 >> 2] = 0; //@line 326
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 327
  HEAP32[$22 >> 2] = $8; //@line 328
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 329
  HEAP32[$23 >> 2] = $12; //@line 330
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 331
  HEAP32[$24 >> 2] = $2; //@line 332
  $25 = $ReallocAsyncCtx + 20 | 0; //@line 333
  HEAP32[$25 >> 2] = $9; //@line 334
  $26 = $ReallocAsyncCtx + 24 | 0; //@line 335
  HEAP32[$26 >> 2] = $10; //@line 336
  $27 = $ReallocAsyncCtx + 28 | 0; //@line 337
  HEAP32[$27 >> 2] = $11; //@line 338
  $28 = $ReallocAsyncCtx + 32 | 0; //@line 339
  HEAP32[$28 >> 2] = $6; //@line 340
  sp = STACKTOP; //@line 341
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 345
 ___async_unwind = 0; //@line 346
 HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 347
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 348
 HEAP32[$21 >> 2] = 0; //@line 349
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 350
 HEAP32[$22 >> 2] = $8; //@line 351
 $23 = $ReallocAsyncCtx + 12 | 0; //@line 352
 HEAP32[$23 >> 2] = $12; //@line 353
 $24 = $ReallocAsyncCtx + 16 | 0; //@line 354
 HEAP32[$24 >> 2] = $2; //@line 355
 $25 = $ReallocAsyncCtx + 20 | 0; //@line 356
 HEAP32[$25 >> 2] = $9; //@line 357
 $26 = $ReallocAsyncCtx + 24 | 0; //@line 358
 HEAP32[$26 >> 2] = $10; //@line 359
 $27 = $ReallocAsyncCtx + 28 | 0; //@line 360
 HEAP32[$27 >> 2] = $11; //@line 361
 $28 = $ReallocAsyncCtx + 32 | 0; //@line 362
 HEAP32[$28 >> 2] = $6; //@line 363
 sp = STACKTOP; //@line 364
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17643
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17647
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17649
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 17651
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17653
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 17655
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17657
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17659
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17661
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17663
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17665
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 17667
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17669
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 17672
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 17673
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 17706
    HEAP8[$14 >> 0] = 0; //@line 17707
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 17708
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 17709
    if (!___async) {
     ___async_unwind = 0; //@line 17712
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 355; //@line 17714
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 17716
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 17718
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 17720
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 17722
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 17724
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 17726
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 17728
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 17730
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 17732
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 17734
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 17736
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 17738
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 17740
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 17743
    sp = STACKTOP; //@line 17744
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 17749
 HEAP8[$14 >> 0] = $12; //@line 17750
 return;
}
function ___stpcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $9 = 0, label = 0;
 $2 = $1; //@line 13468
 L1 : do {
  if (!(($2 ^ $0) & 3)) {
   if (!($2 & 3)) {
    $$026$lcssa = $1; //@line 13478
    $$027$lcssa = $0; //@line 13478
   } else {
    $$02642 = $1; //@line 13480
    $$02741 = $0; //@line 13480
    while (1) {
     $9 = HEAP8[$$02642 >> 0] | 0; //@line 13482
     HEAP8[$$02741 >> 0] = $9; //@line 13483
     if (!($9 << 24 >> 24)) {
      $$029 = $$02741; //@line 13486
      break L1;
     }
     $11 = $$02642 + 1 | 0; //@line 13489
     $12 = $$02741 + 1 | 0; //@line 13490
     if (!($11 & 3)) {
      $$026$lcssa = $11; //@line 13495
      $$027$lcssa = $12; //@line 13495
      break;
     } else {
      $$02642 = $11; //@line 13498
      $$02741 = $12; //@line 13498
     }
    }
   }
   $16 = HEAP32[$$026$lcssa >> 2] | 0; //@line 13502
   if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
    $$02536 = $$027$lcssa; //@line 13509
    $$037 = $$026$lcssa; //@line 13509
    $24 = $16; //@line 13509
    while (1) {
     $22 = $$037 + 4 | 0; //@line 13511
     $23 = $$02536 + 4 | 0; //@line 13512
     HEAP32[$$02536 >> 2] = $24; //@line 13513
     $24 = HEAP32[$22 >> 2] | 0; //@line 13514
     if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
      $$0$lcssa = $22; //@line 13523
      $$025$lcssa = $23; //@line 13523
      break;
     } else {
      $$02536 = $23; //@line 13521
      $$037 = $22; //@line 13521
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa; //@line 13528
    $$025$lcssa = $$027$lcssa; //@line 13528
   }
   $$1$ph = $$0$lcssa; //@line 13530
   $$128$ph = $$025$lcssa; //@line 13530
   label = 8; //@line 13531
  } else {
   $$1$ph = $1; //@line 13533
   $$128$ph = $0; //@line 13533
   label = 8; //@line 13534
  }
 } while (0);
 if ((label | 0) == 8) {
  $31 = HEAP8[$$1$ph >> 0] | 0; //@line 13538
  HEAP8[$$128$ph >> 0] = $31; //@line 13539
  if (!($31 << 24 >> 24)) {
   $$029 = $$128$ph; //@line 13542
  } else {
   $$12834 = $$128$ph; //@line 13544
   $$135 = $$1$ph; //@line 13544
   while (1) {
    $$135 = $$135 + 1 | 0; //@line 13546
    $34 = $$12834 + 1 | 0; //@line 13547
    $35 = HEAP8[$$135 >> 0] | 0; //@line 13548
    HEAP8[$34 >> 0] = $35; //@line 13549
    if (!($35 << 24 >> 24)) {
     $$029 = $34; //@line 13552
     break;
    } else {
     $$12834 = $34; //@line 13555
    }
   }
  }
 }
 return $$029 | 0; //@line 13560
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1270
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1276
   _wait_ms(10); //@line 1277
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 59; //@line 1280
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1282
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1284
    sp = STACKTOP; //@line 1285
    return 0; //@line 1286
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1288
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 1294
 $9 = $0 + 156 | 0; //@line 1295
 _equeue_mutex_lock($9); //@line 1296
 $10 = $0 + 24 | 0; //@line 1297
 $11 = HEAP32[$10 >> 2] | 0; //@line 1298
 L7 : do {
  if (!$11) {
   label = 11; //@line 1302
  } else {
   $$03842$i = $10; //@line 1304
   $14 = $11; //@line 1304
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 1311
    $21 = HEAP32[$20 >> 2] | 0; //@line 1312
    if (!$21) {
     label = 11; //@line 1315
     break L7;
    } else {
     $$03842$i = $20; //@line 1318
     $14 = $21; //@line 1318
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 1322
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 1325
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 1327
    $$038$sink$i = $17 + 8 | 0; //@line 1329
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 1333
   _equeue_mutex_unlock($9); //@line 1334
   $$1$i9 = $14; //@line 1335
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 1340
   $24 = HEAP32[$23 >> 2] | 0; //@line 1341
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 1344
    $$0 = 0; //@line 1345
    return $$0 | 0; //@line 1346
   } else {
    $26 = $0 + 32 | 0; //@line 1348
    $27 = HEAP32[$26 >> 2] | 0; //@line 1349
    HEAP32[$26 >> 2] = $27 + $8; //@line 1351
    HEAP32[$23 >> 2] = $24 - $8; //@line 1353
    HEAP32[$27 >> 2] = $8; //@line 1354
    HEAP8[$27 + 4 >> 0] = 1; //@line 1356
    _equeue_mutex_unlock($9); //@line 1357
    if (!$27) {
     $$0 = 0; //@line 1360
    } else {
     $$1$i9 = $27; //@line 1362
     break;
    }
    return $$0 | 0; //@line 1365
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 1370
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 1372
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 1374
 $$0 = $$1$i9 + 36 | 0; //@line 1376
 return $$0 | 0; //@line 1377
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 10
 }
 ret = dest | 0; //@line 13
 dest_end = dest + num | 0; //@line 14
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 18
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 19
   dest = dest + 1 | 0; //@line 20
   src = src + 1 | 0; //@line 21
   num = num - 1 | 0; //@line 22
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 24
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 25
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 27
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 28
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 29
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 30
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 31
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 32
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 33
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 34
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 35
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 36
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 37
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 38
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 39
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 40
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 41
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 42
   dest = dest + 64 | 0; //@line 43
   src = src + 64 | 0; //@line 44
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 47
   dest = dest + 4 | 0; //@line 48
   src = src + 4 | 0; //@line 49
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 53
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 55
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 56
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 57
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 58
   dest = dest + 4 | 0; //@line 59
   src = src + 4 | 0; //@line 60
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 65
  dest = dest + 1 | 0; //@line 66
  src = src + 1 | 0; //@line 67
 }
 return ret | 0; //@line 69
}
function __ZN9TCPSocket4recvEPvj__async_cb_114($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4584
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4586
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4588
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4590
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4592
 HEAP8[$2 >> 0] = 1; //@line 4593
 $9 = $4 + 8 | 0; //@line 4594
 $10 = $4 + 52 | 0; //@line 4595
 $11 = $4 + 4 | 0; //@line 4596
 $12 = $4 + 12 | 0; //@line 4597
 $13 = HEAP32[$9 >> 2] | 0; //@line 4598
 if (!$13) {
  HEAP8[$2 >> 0] = 0; //@line 4601
  HEAP32[___async_retval >> 2] = -3005; //@line 4603
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 4606
 $15 = HEAP32[$11 >> 2] | 0; //@line 4607
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 72 >> 2] | 0; //@line 4610
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 4611
 $19 = FUNCTION_TABLE_iiiii[$18 & 15]($15, $13, $6, $8) | 0; //@line 4612
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 4615
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 4616
  HEAP32[$20 >> 2] = $12; //@line 4617
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 4618
  HEAP32[$21 >> 2] = $2; //@line 4619
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 4620
  HEAP32[$22 >> 2] = $9; //@line 4621
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 4622
  HEAP32[$23 >> 2] = $10; //@line 4623
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 4624
  HEAP32[$24 >> 2] = $11; //@line 4625
  $25 = $ReallocAsyncCtx + 24 | 0; //@line 4626
  HEAP32[$25 >> 2] = $6; //@line 4627
  $26 = $ReallocAsyncCtx + 28 | 0; //@line 4628
  HEAP32[$26 >> 2] = $8; //@line 4629
  sp = STACKTOP; //@line 4630
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 4634
 ___async_unwind = 0; //@line 4635
 HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 4636
 $20 = $ReallocAsyncCtx + 4 | 0; //@line 4637
 HEAP32[$20 >> 2] = $12; //@line 4638
 $21 = $ReallocAsyncCtx + 8 | 0; //@line 4639
 HEAP32[$21 >> 2] = $2; //@line 4640
 $22 = $ReallocAsyncCtx + 12 | 0; //@line 4641
 HEAP32[$22 >> 2] = $9; //@line 4642
 $23 = $ReallocAsyncCtx + 16 | 0; //@line 4643
 HEAP32[$23 >> 2] = $10; //@line 4644
 $24 = $ReallocAsyncCtx + 20 | 0; //@line 4645
 HEAP32[$24 >> 2] = $11; //@line 4646
 $25 = $ReallocAsyncCtx + 24 | 0; //@line 4647
 HEAP32[$25 >> 2] = $6; //@line 4648
 $26 = $ReallocAsyncCtx + 28 | 0; //@line 4649
 HEAP32[$26 >> 2] = $8; //@line 4650
 sp = STACKTOP; //@line 4651
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_15($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17012
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17016
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17018
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17020
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17022
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17023
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 17027
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 17028
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 17029
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 17032
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 17033
   HEAP32[$14 >> 2] = $4; //@line 17034
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 17035
   HEAP32[$15 >> 2] = $6; //@line 17036
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 17037
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 17038
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 17039
   HEAP32[$17 >> 2] = $8; //@line 17040
   sp = STACKTOP; //@line 17041
   return;
  }
  ___async_unwind = 0; //@line 17044
  HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 17045
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 17046
  HEAP32[$14 >> 2] = $4; //@line 17047
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 17048
  HEAP32[$15 >> 2] = $6; //@line 17049
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 17050
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 17051
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 17052
  HEAP32[$17 >> 2] = $8; //@line 17053
  sp = STACKTOP; //@line 17054
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 17057
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 17061
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 17065
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17066
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 17067
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 17070
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 17071
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 17072
  sp = STACKTOP; //@line 17073
  return;
 }
 ___async_unwind = 0; //@line 17076
 HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 17077
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 17078
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 17079
 sp = STACKTOP; //@line 17080
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_154($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13782
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13786
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13788
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13790
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13792
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13793
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 13797
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 13798
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 13799
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 13802
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 13803
   HEAP32[$14 >> 2] = $4; //@line 13804
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 13805
   HEAP32[$15 >> 2] = $6; //@line 13806
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 13807
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 13808
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 13809
   HEAP32[$17 >> 2] = $8; //@line 13810
   sp = STACKTOP; //@line 13811
   return;
  }
  ___async_unwind = 0; //@line 13814
  HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 13815
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 13816
  HEAP32[$14 >> 2] = $4; //@line 13817
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 13818
  HEAP32[$15 >> 2] = $6; //@line 13819
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 13820
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 13821
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 13822
  HEAP32[$17 >> 2] = $8; //@line 13823
  sp = STACKTOP; //@line 13824
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 13827
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 13831
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 13835
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13836
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 13837
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 13840
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 13841
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 13842
  sp = STACKTOP; //@line 13843
  return;
 }
 ___async_unwind = 0; //@line 13846
 HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 13847
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 13848
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 13849
 sp = STACKTOP; //@line 13850
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14200
 STACKTOP = STACKTOP + 64 | 0; //@line 14201
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14201
 $3 = sp; //@line 14202
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 14205
 } else {
  if (!$1) {
   $$2 = 0; //@line 14209
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14211
   $6 = ___dynamic_cast($1, 144, 128, 0) | 0; //@line 14212
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 344; //@line 14215
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 14217
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14219
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 14221
    sp = STACKTOP; //@line 14222
    STACKTOP = sp; //@line 14223
    return 0; //@line 14223
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14225
   if (!$6) {
    $$2 = 0; //@line 14228
   } else {
    dest = $3 + 4 | 0; //@line 14231
    stop = dest + 52 | 0; //@line 14231
    do {
     HEAP32[dest >> 2] = 0; //@line 14231
     dest = dest + 4 | 0; //@line 14231
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 14232
    HEAP32[$3 + 8 >> 2] = $0; //@line 14234
    HEAP32[$3 + 12 >> 2] = -1; //@line 14236
    HEAP32[$3 + 48 >> 2] = 1; //@line 14238
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 14241
    $18 = HEAP32[$2 >> 2] | 0; //@line 14242
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14243
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 14244
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 345; //@line 14247
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14249
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14251
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14253
     sp = STACKTOP; //@line 14254
     STACKTOP = sp; //@line 14255
     return 0; //@line 14255
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14257
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 14264
     $$0 = 1; //@line 14265
    } else {
     $$0 = 0; //@line 14267
    }
    $$2 = $$0; //@line 14269
   }
  }
 }
 STACKTOP = sp; //@line 14273
 return $$2 | 0; //@line 14273
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_109($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 3431
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3433
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3435
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3437
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3439
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3441
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3443
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3445
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3447
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3449
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3451
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3453
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3455
 if (!$AsyncRetVal) {
  HEAP32[___async_retval >> 2] = -3007; //@line 3459
  return;
 }
 $25 = $AsyncRetVal + 16 | 0; //@line 3462
 HEAP32[$25 >> 2] = 0; //@line 3463
 HEAP32[$25 + 4 >> 2] = 0; //@line 3463
 HEAP32[$25 + 8 >> 2] = 0; //@line 3463
 HEAP32[$25 + 12 >> 2] = 0; //@line 3463
 HEAP32[$25 + 16 >> 2] = 0; //@line 3463
 HEAP32[$25 + 20 >> 2] = 0; //@line 3463
 HEAP32[$25 + 24 >> 2] = 0; //@line 3463
 HEAP32[$25 + 28 >> 2] = 0; //@line 3463
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(52) | 0; //@line 3467
 $29 = __ZnajRKSt9nothrow_t(($20 | 0) < -1 ? -1 : $20 + 1 | 0, 9765) | 0; //@line 3468
 if (!___async) {
  HEAP32[___async_retval >> 2] = $29; //@line 3472
  ___async_unwind = 0; //@line 3473
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 173; //@line 3475
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $AsyncRetVal; //@line 3477
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $2; //@line 3479
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $4; //@line 3481
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $6; //@line 3483
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $8; //@line 3485
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $10; //@line 3487
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $12; //@line 3489
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $14; //@line 3491
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $16; //@line 3493
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $18; //@line 3495
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $25; //@line 3497
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $22; //@line 3499
 sp = STACKTOP; //@line 3500
 return;
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 13362
 STACKTOP = STACKTOP + 128 | 0; //@line 13363
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 13363
 $4 = sp + 124 | 0; //@line 13364
 $5 = sp; //@line 13365
 dest = $5; //@line 13366
 src = 2396; //@line 13366
 stop = dest + 124 | 0; //@line 13366
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 13366
  dest = dest + 4 | 0; //@line 13366
  src = src + 4 | 0; //@line 13366
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 13372
   $$015 = 1; //@line 13372
   label = 4; //@line 13373
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 13376
   $$0 = -1; //@line 13377
  }
 } else {
  $$014 = $0; //@line 13380
  $$015 = $1; //@line 13380
  label = 4; //@line 13381
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 13385
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 13387
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 13389
  $14 = $5 + 20 | 0; //@line 13390
  HEAP32[$14 >> 2] = $$014; //@line 13391
  HEAP32[$5 + 44 >> 2] = $$014; //@line 13393
  $16 = $$014 + $$$015 | 0; //@line 13394
  $17 = $5 + 16 | 0; //@line 13395
  HEAP32[$17 >> 2] = $16; //@line 13396
  HEAP32[$5 + 28 >> 2] = $16; //@line 13398
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 13399
  $19 = _vfprintf($5, $2, $3) | 0; //@line 13400
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 329; //@line 13403
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 13405
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 13407
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 13409
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 13411
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 13413
   sp = STACKTOP; //@line 13414
   STACKTOP = sp; //@line 13415
   return 0; //@line 13415
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13417
  if (!$$$015) {
   $$0 = $19; //@line 13420
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 13422
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 13427
   $$0 = $19; //@line 13428
  }
 }
 STACKTOP = sp; //@line 13431
 return $$0 | 0; //@line 13431
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16659
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 16661
 $7 = $4 + 156 | 0; //@line 16662
 _equeue_mutex_lock($7); //@line 16663
 $8 = $4 + 24 | 0; //@line 16664
 $9 = HEAP32[$8 >> 2] | 0; //@line 16665
 L3 : do {
  if (!$9) {
   label = 9; //@line 16669
  } else {
   $$03842$i = $8; //@line 16671
   $12 = $9; //@line 16671
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 16678
    $19 = HEAP32[$18 >> 2] | 0; //@line 16679
    if (!$19) {
     label = 9; //@line 16682
     break L3;
    } else {
     $$03842$i = $18; //@line 16685
     $12 = $19; //@line 16685
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 16689
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 16692
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 16694
    $$038$sink$i = $15 + 8 | 0; //@line 16696
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 16700
   _equeue_mutex_unlock($7); //@line 16701
   $$1$i9 = $12; //@line 16702
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 16707
   $22 = HEAP32[$21 >> 2] | 0; //@line 16708
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 16711
    $$0 = 0; //@line 16712
    $34 = ___async_retval; //@line 16713
    HEAP32[$34 >> 2] = $$0; //@line 16714
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 16717
    $25 = HEAP32[$24 >> 2] | 0; //@line 16718
    HEAP32[$24 >> 2] = $25 + $6; //@line 16720
    HEAP32[$21 >> 2] = $22 - $6; //@line 16722
    HEAP32[$25 >> 2] = $6; //@line 16723
    HEAP8[$25 + 4 >> 0] = 1; //@line 16725
    _equeue_mutex_unlock($7); //@line 16726
    if (!$25) {
     $$0 = 0; //@line 16729
    } else {
     $$1$i9 = $25; //@line 16731
     break;
    }
    $34 = ___async_retval; //@line 16734
    HEAP32[$34 >> 2] = $$0; //@line 16735
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 16741
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 16743
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 16745
 $$0 = $$1$i9 + 36 | 0; //@line 16747
 $34 = ___async_retval; //@line 16748
 HEAP32[$34 >> 2] = $$0; //@line 16749
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15532
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15538
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 15542
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 15543
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15544
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 15545
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 361; //@line 15548
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 15550
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15552
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15554
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 15556
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 15558
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 15560
    sp = STACKTOP; //@line 15561
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15564
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 15568
    $$0 = $0 + 24 | 0; //@line 15569
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15571
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 15572
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15577
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 15583
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 15586
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 362; //@line 15591
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15593
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 15595
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 15597
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15599
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15601
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 15603
    sp = STACKTOP; //@line 15604
    return;
   }
  }
 } while (0);
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 622
 STACKTOP = STACKTOP + 48 | 0; //@line 623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 623
 $$byval_copy = sp + 20 | 0; //@line 624
 $3 = sp; //@line 625
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 626
 $4 = __Znwj(76) | 0; //@line 627
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 630
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 632
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 634
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 636
  sp = STACKTOP; //@line 637
  STACKTOP = sp; //@line 638
  return 0; //@line 638
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 640
 dest = $4; //@line 641
 stop = dest + 76 | 0; //@line 641
 do {
  HEAP32[dest >> 2] = 0; //@line 641
  dest = dest + 4 | 0; //@line 641
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 642
 HEAP32[$3 >> 2] = 0; //@line 643
 HEAP32[$3 + 4 >> 2] = 0; //@line 643
 HEAP32[$3 + 8 >> 2] = 0; //@line 643
 HEAP32[$3 + 12 >> 2] = 0; //@line 643
 HEAP32[$3 + 16 >> 2] = 0; //@line 643
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 644
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 644
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 644
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 644
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 644
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 645
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 646
 if (($9 | 0) == -1) {
  $$0$i = -3001; //@line 649
  STACKTOP = sp; //@line 650
  return $$0$i | 0; //@line 650
 }
 HEAP32[$4 >> 2] = $9; //@line 652
 HEAP8[$4 + 8 >> 0] = 0; //@line 654
 HEAP32[$4 + 4 >> 2] = $2; //@line 656
 HEAP32[$1 >> 2] = $4; //@line 657
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 658
 _wait_ms(1); //@line 659
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 48; //@line 662
  sp = STACKTOP; //@line 663
  STACKTOP = sp; //@line 664
  return 0; //@line 664
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 666
 $$0$i = 0; //@line 667
 STACKTOP = sp; //@line 668
 return $$0$i | 0; //@line 668
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 219
 STACKTOP = STACKTOP + 48 | 0; //@line 220
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 220
 $$byval_copy = sp + 20 | 0; //@line 221
 $3 = sp; //@line 222
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 223
 $4 = __Znwj(76) | 0; //@line 224
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 34; //@line 227
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 229
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 231
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 233
  sp = STACKTOP; //@line 234
  STACKTOP = sp; //@line 235
  return 0; //@line 235
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 237
 dest = $4; //@line 238
 stop = dest + 76 | 0; //@line 238
 do {
  HEAP32[dest >> 2] = 0; //@line 238
  dest = dest + 4 | 0; //@line 238
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 239
 HEAP32[$3 >> 2] = 0; //@line 240
 HEAP32[$3 + 4 >> 2] = 0; //@line 240
 HEAP32[$3 + 8 >> 2] = 0; //@line 240
 HEAP32[$3 + 12 >> 2] = 0; //@line 240
 HEAP32[$3 + 16 >> 2] = 0; //@line 240
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 241
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 241
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 241
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 241
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 241
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 242
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 243
 if (($9 | 0) == -1) {
  $$0 = -3001; //@line 246
  STACKTOP = sp; //@line 247
  return $$0 | 0; //@line 247
 }
 HEAP32[$4 >> 2] = $9; //@line 249
 HEAP8[$4 + 8 >> 0] = 0; //@line 251
 HEAP32[$4 + 4 >> 2] = $2; //@line 253
 HEAP32[$1 >> 2] = $4; //@line 254
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 255
 _wait_ms(1); //@line 256
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 35; //@line 259
  sp = STACKTOP; //@line 260
  STACKTOP = sp; //@line 261
  return 0; //@line 261
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 263
 $$0 = 0; //@line 264
 STACKTOP = sp; //@line 265
 return $$0 | 0; //@line 265
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_45($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18839
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18843
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18845
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 18846
 $8 = HEAP32[$4 + 64 >> 2] | 0; //@line 18848
 if ($8 | 0) {
  __ZdaPv($8); //@line 18851
 }
 $11 = HEAP32[$4 + 12 >> 2] | 0; //@line 18854
 if ($11 | 0) {
  __ZdlPv($11); //@line 18857
 }
 $14 = HEAP32[$4 + 44 >> 2] | 0; //@line 18860
 if ($14 | 0) {
  $18 = HEAP32[$14 + 8 >> 2] | 0; //@line 18865
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 18866
  FUNCTION_TABLE_vi[$18 & 511]($4 + 32 | 0); //@line 18867
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 18870
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 18871
   HEAP32[$19 >> 2] = $4; //@line 18872
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 18873
   HEAP32[$20 >> 2] = $6; //@line 18874
   sp = STACKTOP; //@line 18875
   return;
  }
  ___async_unwind = 0; //@line 18878
  HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 18879
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 18880
  HEAP32[$19 >> 2] = $4; //@line 18881
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 18882
  HEAP32[$20 >> 2] = $6; //@line 18883
  sp = STACKTOP; //@line 18884
  return;
 }
 $22 = HEAP32[$4 + 28 >> 2] | 0; //@line 18888
 if (!$22) {
  __ZdlPv($4); //@line 18891
  HEAP32[7844 + ($6 << 2) >> 2] = 0; //@line 18893
  return;
 }
 $26 = HEAP32[$22 + 8 >> 2] | 0; //@line 18898
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 18899
 FUNCTION_TABLE_vi[$26 & 511]($4 + 16 | 0); //@line 18900
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 18903
  $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 18904
  HEAP32[$27 >> 2] = $4; //@line 18905
  $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 18906
  HEAP32[$28 >> 2] = $6; //@line 18907
  sp = STACKTOP; //@line 18908
  return;
 }
 ___async_unwind = 0; //@line 18911
 HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 18912
 $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 18913
 HEAP32[$27 >> 2] = $4; //@line 18914
 $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 18915
 HEAP32[$28 >> 2] = $6; //@line 18916
 sp = STACKTOP; //@line 18917
 return;
}
function __ZN9TCPSocket4recvEPvj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5502
 $3 = $0 + 56 | 0; //@line 5503
 do {
  if (HEAP8[$3 >> 0] | 0) {
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5508
   _mbed_assert_internal(3843, 3746, 190); //@line 5509
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 146; //@line 5512
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 5514
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5516
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5518
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 5520
    sp = STACKTOP; //@line 5521
    return 0; //@line 5522
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5524
    break;
   }
  }
 } while (0);
 HEAP8[$3 >> 0] = 1; //@line 5529
 $10 = $0 + 8 | 0; //@line 5530
 $11 = $0 + 52 | 0; //@line 5531
 $12 = $0 + 4 | 0; //@line 5532
 $13 = $0 + 12 | 0; //@line 5533
 while (1) {
  $14 = HEAP32[$10 >> 2] | 0; //@line 5535
  if (!$14) {
   $$0 = -3005; //@line 5538
   label = 10; //@line 5539
   break;
  }
  HEAP32[$11 >> 2] = 0; //@line 5542
  $16 = HEAP32[$12 >> 2] | 0; //@line 5543
  $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 72 >> 2] | 0; //@line 5546
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5547
  $20 = FUNCTION_TABLE_iiiii[$19 & 15]($16, $14, $1, $2) | 0; //@line 5548
  if (___async) {
   label = 8; //@line 5551
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5554
  if (($20 | 0) != -3001 | (HEAP32[$13 >> 2] | 0) == 0) {
   $$0 = $20; //@line 5560
   label = 10; //@line 5561
   break;
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx >> 2] = 147; //@line 5566
  HEAP32[$AsyncCtx + 4 >> 2] = $13; //@line 5568
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 5570
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 5572
  HEAP32[$AsyncCtx + 16 >> 2] = $11; //@line 5574
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 5576
  HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 5578
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 5580
  sp = STACKTOP; //@line 5581
  return 0; //@line 5582
 } else if ((label | 0) == 10) {
  HEAP8[$3 >> 0] = 0; //@line 5585
  return $$0 | 0; //@line 5586
 }
 return 0; //@line 5588
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 21671
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21673
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21675
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21677
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21679
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21681
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21683
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21685
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21687
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21689
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21691
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21693
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21695
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21699
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21701
 HEAP32[$10 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] >> 2]; //@line 21703
 $31 = HEAP32[$12 >> 2] | 0; //@line 21704
 HEAP32[$14 >> 2] = 0; //@line 21705
 HEAP32[$16 >> 2] = 188; //@line 21706
 HEAP32[$18 >> 2] = $31; //@line 21707
 HEAP32[$20 >> 2] = 764; //@line 21708
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 21709
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 21710
 if (!___async) {
  ___async_unwind = 0; //@line 21713
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 21715
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 21717
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 21719
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 21721
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 21723
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 21725
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 21727
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 21729
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 21731
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 21733
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 21735
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 21737
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 21739
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 21741
 sp = STACKTOP; //@line 21742
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 92
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 96
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 98
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 100
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 102
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 103
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 107
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 108
  FUNCTION_TABLE_vi[$13 & 511]($6); //@line 109
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 168; //@line 112
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 113
   HEAP32[$14 >> 2] = $4; //@line 114
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 115
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 116
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 117
   HEAP32[$16 >> 2] = $8; //@line 118
   sp = STACKTOP; //@line 119
   return;
  }
  ___async_unwind = 0; //@line 122
  HEAP32[$ReallocAsyncCtx3 >> 2] = 168; //@line 123
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 124
  HEAP32[$14 >> 2] = $4; //@line 125
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 126
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 127
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 128
  HEAP32[$16 >> 2] = $8; //@line 129
  sp = STACKTOP; //@line 130
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 133
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 137
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 141
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 142
 FUNCTION_TABLE_vi[$20 & 511]($8); //@line 143
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 146
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 147
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 148
  sp = STACKTOP; //@line 149
  return;
 }
 ___async_unwind = 0; //@line 152
 HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 153
 $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 154
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 155
 sp = STACKTOP; //@line 156
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13634
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 13639
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 13644
  } else {
   $20 = $0 & 255; //@line 13646
   $21 = $0 & 255; //@line 13647
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 13653
   } else {
    $26 = $1 + 20 | 0; //@line 13655
    $27 = HEAP32[$26 >> 2] | 0; //@line 13656
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 13662
     HEAP8[$27 >> 0] = $20; //@line 13663
     $34 = $21; //@line 13664
    } else {
     label = 12; //@line 13666
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13671
     $32 = ___overflow($1, $0) | 0; //@line 13672
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 334; //@line 13675
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13677
      sp = STACKTOP; //@line 13678
      return 0; //@line 13679
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 13681
      $34 = $32; //@line 13682
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 13687
   $$0 = $34; //@line 13688
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 13693
   $8 = $0 & 255; //@line 13694
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 13700
    $14 = HEAP32[$13 >> 2] | 0; //@line 13701
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 13707
     HEAP8[$14 >> 0] = $7; //@line 13708
     $$0 = $8; //@line 13709
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13713
   $19 = ___overflow($1, $0) | 0; //@line 13714
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 333; //@line 13717
    sp = STACKTOP; //@line 13718
    return 0; //@line 13719
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13721
    $$0 = $19; //@line 13722
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 13727
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 5109
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 5112
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 5115
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 5118
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 5124
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 5133
     $24 = $13 >>> 2; //@line 5134
     $$090 = 0; //@line 5135
     $$094 = $7; //@line 5135
     while (1) {
      $25 = $$094 >>> 1; //@line 5137
      $26 = $$090 + $25 | 0; //@line 5138
      $27 = $26 << 1; //@line 5139
      $28 = $27 + $23 | 0; //@line 5140
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 5143
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5147
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 5153
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 5161
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 5165
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 5171
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 5176
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 5179
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 5179
      }
     }
     $46 = $27 + $24 | 0; //@line 5182
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 5185
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5189
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 5201
     } else {
      $$4 = 0; //@line 5203
     }
    } else {
     $$4 = 0; //@line 5206
    }
   } else {
    $$4 = 0; //@line 5209
   }
  } else {
   $$4 = 0; //@line 5212
  }
 } while (0);
 return $$4 | 0; //@line 5215
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_202($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 16477
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16483
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16485
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16487
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16489
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16491
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16493
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16495
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16497
 $$pre85 = HEAP32[$6 >> 2] | 0; //@line 16498
 HEAP32[$$pre85 + 16 >> 2] = HEAP32[$8 >> 2]; //@line 16502
 HEAP32[$10 + 8 >> 2] = 0; //@line 16504
 HEAP32[$10 >> 2] = 228; //@line 16505
 HEAP32[$10 + 4 >> 2] = $$pre85; //@line 16507
 $23 = $10 + 12 | 0; //@line 16508
 HEAP32[$23 >> 2] = 764; //@line 16509
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 16510
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $10); //@line 16511
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 16514
  $24 = $ReallocAsyncCtx18 + 4 | 0; //@line 16515
  HEAP32[$24 >> 2] = $23; //@line 16516
  $25 = $ReallocAsyncCtx18 + 8 | 0; //@line 16517
  HEAP32[$25 >> 2] = $14; //@line 16518
  $26 = $ReallocAsyncCtx18 + 12 | 0; //@line 16519
  HEAP32[$26 >> 2] = $16; //@line 16520
  $27 = $ReallocAsyncCtx18 + 16 | 0; //@line 16521
  HEAP32[$27 >> 2] = $10; //@line 16522
  $28 = $ReallocAsyncCtx18 + 20 | 0; //@line 16523
  HEAP32[$28 >> 2] = $18; //@line 16524
  sp = STACKTOP; //@line 16525
  return;
 }
 ___async_unwind = 0; //@line 16528
 HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 16529
 $24 = $ReallocAsyncCtx18 + 4 | 0; //@line 16530
 HEAP32[$24 >> 2] = $23; //@line 16531
 $25 = $ReallocAsyncCtx18 + 8 | 0; //@line 16532
 HEAP32[$25 >> 2] = $14; //@line 16533
 $26 = $ReallocAsyncCtx18 + 12 | 0; //@line 16534
 HEAP32[$26 >> 2] = $16; //@line 16535
 $27 = $ReallocAsyncCtx18 + 16 | 0; //@line 16536
 HEAP32[$27 >> 2] = $10; //@line 16537
 $28 = $ReallocAsyncCtx18 + 20 | 0; //@line 16538
 HEAP32[$28 >> 2] = $18; //@line 16539
 sp = STACKTOP; //@line 16540
 return;
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4774
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 4779
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 4784
  } else {
   $20 = $0 & 255; //@line 4786
   $21 = $0 & 255; //@line 4787
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 4793
   } else {
    $26 = $1 + 20 | 0; //@line 4795
    $27 = HEAP32[$26 >> 2] | 0; //@line 4796
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 4802
     HEAP8[$27 >> 0] = $20; //@line 4803
     $34 = $21; //@line 4804
    } else {
     label = 12; //@line 4806
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4811
     $32 = ___overflow($1, $0) | 0; //@line 4812
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 319; //@line 4815
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4817
      sp = STACKTOP; //@line 4818
      return 0; //@line 4819
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4821
      $34 = $32; //@line 4822
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 4827
   $$0 = $34; //@line 4828
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 4833
   $8 = $0 & 255; //@line 4834
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 4840
    $14 = HEAP32[$13 >> 2] | 0; //@line 4841
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 4847
     HEAP8[$14 >> 0] = $7; //@line 4848
     $$0 = $8; //@line 4849
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4853
   $19 = ___overflow($1, $0) | 0; //@line 4854
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 318; //@line 4857
    sp = STACKTOP; //@line 4858
    return 0; //@line 4859
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4861
    $$0 = $19; //@line 4862
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 4867
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5494
 $1 = $0 + 20 | 0; //@line 5495
 $3 = $0 + 28 | 0; //@line 5497
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 5503
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5504
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 5505
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 325; //@line 5508
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5510
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5512
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 5514
    sp = STACKTOP; //@line 5515
    return 0; //@line 5516
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5518
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 5522
     break;
    } else {
     label = 5; //@line 5525
     break;
    }
   }
  } else {
   label = 5; //@line 5530
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 5534
  $14 = HEAP32[$13 >> 2] | 0; //@line 5535
  $15 = $0 + 8 | 0; //@line 5536
  $16 = HEAP32[$15 >> 2] | 0; //@line 5537
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 5545
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5546
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 5547
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 326; //@line 5550
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5552
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 5554
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5556
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 5558
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 5560
     sp = STACKTOP; //@line 5561
     return 0; //@line 5562
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5564
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 5570
  HEAP32[$3 >> 2] = 0; //@line 5571
  HEAP32[$1 >> 2] = 0; //@line 5572
  HEAP32[$15 >> 2] = 0; //@line 5573
  HEAP32[$13 >> 2] = 0; //@line 5574
  $$0 = 0; //@line 5575
 }
 return $$0 | 0; //@line 5577
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 15442
 STACKTOP = STACKTOP + 32 | 0; //@line 15443
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15443
 $$byval_copy = sp; //@line 15444
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15446
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15448
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15450
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15452
 dest = $AsyncRetVal; //@line 15453
 stop = dest + 76 | 0; //@line 15453
 do {
  HEAP32[dest >> 2] = 0; //@line 15453
  dest = dest + 4 | 0; //@line 15453
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 15454
 HEAP32[$2 >> 2] = 0; //@line 15455
 HEAP32[$2 + 4 >> 2] = 0; //@line 15455
 HEAP32[$2 + 8 >> 2] = 0; //@line 15455
 HEAP32[$2 + 12 >> 2] = 0; //@line 15455
 HEAP32[$2 + 16 >> 2] = 0; //@line 15455
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 15456
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 15456
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 15456
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 15456
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 15456
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 15457
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 15458
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 15462
  STACKTOP = sp; //@line 15463
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 15465
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 15467
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 15469
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 15470
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15471
 _wait_ms(1); //@line 15472
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 48; //@line 15475
  sp = STACKTOP; //@line 15476
  STACKTOP = sp; //@line 15477
  return;
 }
 ___async_unwind = 0; //@line 15479
 HEAP32[$ReallocAsyncCtx2 >> 2] = 48; //@line 15480
 sp = STACKTOP; //@line 15481
 STACKTOP = sp; //@line 15482
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 17884
 STACKTOP = STACKTOP + 32 | 0; //@line 17885
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17885
 $$byval_copy = sp; //@line 17886
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17888
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17890
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17892
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17894
 dest = $AsyncRetVal; //@line 17895
 stop = dest + 76 | 0; //@line 17895
 do {
  HEAP32[dest >> 2] = 0; //@line 17895
  dest = dest + 4 | 0; //@line 17895
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 17896
 HEAP32[$2 >> 2] = 0; //@line 17897
 HEAP32[$2 + 4 >> 2] = 0; //@line 17897
 HEAP32[$2 + 8 >> 2] = 0; //@line 17897
 HEAP32[$2 + 12 >> 2] = 0; //@line 17897
 HEAP32[$2 + 16 >> 2] = 0; //@line 17897
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 17898
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 17898
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 17898
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 17898
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 17898
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 17899
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 17900
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 17904
  STACKTOP = sp; //@line 17905
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 17907
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 17909
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 17911
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 17912
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17913
 _wait_ms(1); //@line 17914
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 35; //@line 17917
  sp = STACKTOP; //@line 17918
  STACKTOP = sp; //@line 17919
  return;
 }
 ___async_unwind = 0; //@line 17921
 HEAP32[$ReallocAsyncCtx2 >> 2] = 35; //@line 17922
 sp = STACKTOP; //@line 17923
 STACKTOP = sp; //@line 17924
 return;
}
function __ZN6Socket5closeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4391
 $1 = $0 + 8 | 0; //@line 4392
 $2 = HEAP32[$1 >> 2] | 0; //@line 4393
 $$pre = $0 + 4 | 0; //@line 4395
 do {
  if (!$2) {
   $$0 = 0; //@line 4398
  } else {
   $4 = HEAP32[$$pre >> 2] | 0; //@line 4400
   $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 84 >> 2] | 0; //@line 4403
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4404
   FUNCTION_TABLE_viiii[$7 & 7]($4, $2, 0, 0); //@line 4405
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 131; //@line 4408
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4410
    HEAP32[$AsyncCtx + 8 >> 2] = $$pre; //@line 4412
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4414
    sp = STACKTOP; //@line 4415
    return 0; //@line 4416
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4418
   $11 = HEAP32[$1 >> 2] | 0; //@line 4419
   HEAP32[$1 >> 2] = 0; //@line 4420
   $12 = HEAP32[$$pre >> 2] | 0; //@line 4421
   $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 48 >> 2] | 0; //@line 4424
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4425
   $16 = FUNCTION_TABLE_iii[$15 & 15]($12, $11) | 0; //@line 4426
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 132; //@line 4429
    HEAP32[$AsyncCtx2 + 4 >> 2] = $$pre; //@line 4431
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4433
    sp = STACKTOP; //@line 4434
    return 0; //@line 4435
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4437
    $$0 = $16; //@line 4438
    break;
   }
  }
 } while (0);
 HEAP32[$$pre >> 2] = 0; //@line 4443
 $21 = HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0; //@line 4446
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4447
 FUNCTION_TABLE_vi[$21 & 511]($0); //@line 4448
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 133; //@line 4451
  HEAP32[$AsyncCtx5 + 4 >> 2] = $$0; //@line 4453
  sp = STACKTOP; //@line 4454
  return 0; //@line 4455
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4457
  return $$0 | 0; //@line 4458
 }
 return 0; //@line 4460
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 1020
 STACKTOP = STACKTOP + 48 | 0; //@line 1021
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1021
 $vararg_buffer12 = sp + 32 | 0; //@line 1022
 $vararg_buffer8 = sp + 24 | 0; //@line 1023
 $vararg_buffer4 = sp + 16 | 0; //@line 1024
 $vararg_buffer = sp; //@line 1025
 $6 = $4 & 255; //@line 1026
 $7 = $5 & 255; //@line 1027
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1028
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1030
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1032
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1034
 _mbed_tracef(16, 3305, 3310, $vararg_buffer); //@line 1035
 _emscripten_asm_const_i(8) | 0; //@line 1036
 $10 = HEAP32[$0 + 752 >> 2] | 0; //@line 1038
 if (($10 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $10; //@line 1041
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1043
  _mbed_tracef(16, 3305, 3392, $vararg_buffer4); //@line 1044
  STACKTOP = sp; //@line 1045
  return;
 }
 $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 1048
 if (($13 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $13; //@line 1051
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1053
  _mbed_tracef(16, 3305, 3439, $vararg_buffer8); //@line 1054
  STACKTOP = sp; //@line 1055
  return;
 }
 $16 = HEAP32[$0 + 692 >> 2] | 0; //@line 1058
 if (($16 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1062
  HEAP8[$0 + 782 >> 0] = $2; //@line 1065
  HEAP8[$0 + 781 >> 0] = -35; //@line 1067
  HEAP8[$0 + 780 >> 0] = -5; //@line 1069
  HEAP8[$0 + 783 >> 0] = 1; //@line 1071
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(9) | 0; //@line 1074
  STACKTOP = sp; //@line 1075
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $16; //@line 1077
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1079
  _mbed_tracef(16, 3305, 3486, $vararg_buffer12); //@line 1080
  STACKTOP = sp; //@line 1081
  return;
 }
}
function __ZNK13SocketAddresscvbEv($0) {
 $0 = $0 | 0;
 var $12 = 0;
 switch (HEAP32[$0 + 40 >> 2] | 0) {
 case 1:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 4906
    return $12 | 0; //@line 4907
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 4913
    return $12 | 0; //@line 4914
   }
   if (!(HEAP8[$0 + 46 >> 0] | 0)) {
    return (HEAP8[$0 + 47 >> 0] | 0) != 0 | 0; //@line 4923
   } else {
    $12 = 1; //@line 4925
    return $12 | 0; //@line 4926
   }
   break;
  }
 case 2:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 4935
    return $12 | 0; //@line 4936
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 4942
    return $12 | 0; //@line 4943
   }
   if (HEAP8[$0 + 46 >> 0] | 0) {
    $12 = 1; //@line 4949
    return $12 | 0; //@line 4950
   }
   if (HEAP8[$0 + 47 >> 0] | 0) {
    $12 = 1; //@line 4956
    return $12 | 0; //@line 4957
   }
   if (HEAP8[$0 + 48 >> 0] | 0) {
    $12 = 1; //@line 4963
    return $12 | 0; //@line 4964
   }
   if (HEAP8[$0 + 49 >> 0] | 0) {
    $12 = 1; //@line 4970
    return $12 | 0; //@line 4971
   }
   if (HEAP8[$0 + 50 >> 0] | 0) {
    $12 = 1; //@line 4977
    return $12 | 0; //@line 4978
   }
   if (HEAP8[$0 + 51 >> 0] | 0) {
    $12 = 1; //@line 4984
    return $12 | 0; //@line 4985
   }
   if (HEAP8[$0 + 52 >> 0] | 0) {
    $12 = 1; //@line 4991
    return $12 | 0; //@line 4992
   }
   if (HEAP8[$0 + 53 >> 0] | 0) {
    $12 = 1; //@line 4998
    return $12 | 0; //@line 4999
   }
   if (HEAP8[$0 + 54 >> 0] | 0) {
    $12 = 1; //@line 5005
    return $12 | 0; //@line 5006
   }
   if (HEAP8[$0 + 55 >> 0] | 0) {
    $12 = 1; //@line 5012
    return $12 | 0; //@line 5013
   }
   if (HEAP8[$0 + 56 >> 0] | 0) {
    $12 = 1; //@line 5019
    return $12 | 0; //@line 5020
   }
   if (HEAP8[$0 + 57 >> 0] | 0) {
    $12 = 1; //@line 5026
    return $12 | 0; //@line 5027
   }
   if (HEAP8[$0 + 58 >> 0] | 0) {
    $12 = 1; //@line 5033
    return $12 | 0; //@line 5034
   }
   $12 = (HEAP8[$0 + 59 >> 0] | 0) != 0; //@line 5039
   return $12 | 0; //@line 5040
  }
 default:
  {
   $12 = 0; //@line 5044
   return $12 | 0; //@line 5045
  }
 }
 return 0; //@line 5048
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23012
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23014
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23016
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23018
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23020
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23022
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 23023
 if (!$AsyncRetVal) {
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = HEAP32[$4 >> 2]; //@line 23028
 HEAP32[$AsyncRetVal + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 23028
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 23028
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 23028
 HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 23028
 $12 = (_strlen($6) | 0) + 1 | 0; //@line 23030
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 23031
 $13 = __ZnajRKSt9nothrow_t($12, 9765) | 0; //@line 23032
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 163; //@line 23035
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 23036
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 23037
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 23038
  HEAP32[$15 >> 2] = $6; //@line 23039
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 23040
  HEAP32[$16 >> 2] = $8; //@line 23041
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 23042
  HEAP32[$17 >> 2] = $2; //@line 23043
  sp = STACKTOP; //@line 23044
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 23048
 ___async_unwind = 0; //@line 23049
 HEAP32[$ReallocAsyncCtx2 >> 2] = 163; //@line 23050
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 23051
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 23052
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 23053
 HEAP32[$15 >> 2] = $6; //@line 23054
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 23055
 HEAP32[$16 >> 2] = $8; //@line 23056
 $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 23057
 HEAP32[$17 >> 2] = $2; //@line 23058
 sp = STACKTOP; //@line 23059
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 16225
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16227
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16229
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16231
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16233
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16235
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16237
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16241
  return;
 }
 $13 = $2 + 12 | 0; //@line 16244
 dest = $13; //@line 16245
 src = $4; //@line 16245
 stop = dest + 60 | 0; //@line 16245
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 16245
  dest = dest + 4 | 0; //@line 16245
  src = src + 4 | 0; //@line 16245
 } while ((dest | 0) < (stop | 0));
 HEAP16[$13 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 16245
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 16246
 _wait_ms(1); //@line 16247
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 42; //@line 16250
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 16251
  HEAP32[$14 >> 2] = $6; //@line 16252
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 16253
  HEAP32[$15 >> 2] = $2; //@line 16254
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 16255
  HEAP32[$16 >> 2] = $8; //@line 16256
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 16257
  HEAP32[$17 >> 2] = $10; //@line 16258
  sp = STACKTOP; //@line 16259
  return;
 }
 ___async_unwind = 0; //@line 16262
 HEAP32[$ReallocAsyncCtx4 >> 2] = 42; //@line 16263
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 16264
 HEAP32[$14 >> 2] = $6; //@line 16265
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 16266
 HEAP32[$15 >> 2] = $2; //@line 16267
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 16268
 HEAP32[$16 >> 2] = $8; //@line 16269
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 16270
 HEAP32[$17 >> 2] = $10; //@line 16271
 sp = STACKTOP; //@line 16272
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_104($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 3020
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3022
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3024
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3026
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3028
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3030
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3034
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3036
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3038
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3040
 $21 = $2 + 12 | 0; //@line 3042
 HEAP32[$21 >> 2] = HEAP32[HEAP32[$0 + 24 >> 2] >> 2]; //@line 3043
 $23 = $4 + 4 | 0; //@line 3045
 HEAP32[$23 >> 2] = 0; //@line 3047
 HEAP32[$23 + 4 >> 2] = 0; //@line 3050
 HEAP32[$4 >> 2] = 3; //@line 3051
 $27 = $4 + 12 | 0; //@line 3052
 HEAP32[$27 >> 2] = 752; //@line 3053
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 3054
 $28 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $4) | 0; //@line 3055
 if (!___async) {
  HEAP32[___async_retval >> 2] = $28; //@line 3059
  ___async_unwind = 0; //@line 3060
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 3062
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $27; //@line 3064
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $2; //@line 3066
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $21; //@line 3068
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $4; //@line 3070
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $6; //@line 3072
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $10; //@line 3074
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $20; //@line 3076
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $8; //@line 3078
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $14; //@line 3080
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $16; //@line 3082
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $18; //@line 3084
 sp = STACKTOP; //@line 3085
 return;
}
function _main__async_cb_99($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 960
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 962
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 964
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 966
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 968
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 970
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 972
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 974
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 976
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 978
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 980
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 982
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 984
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 986
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 988
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(60) | 0; //@line 989
 $28 = __ZN17EthernetInterface15get_mac_addressEv(788) | 0; //@line 990
 if (!___async) {
  HEAP32[___async_retval >> 2] = $28; //@line 994
  ___async_unwind = 0; //@line 995
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 308; //@line 997
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $AsyncRetVal; //@line 999
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $2; //@line 1001
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $4; //@line 1003
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $6; //@line 1005
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $8; //@line 1007
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $10; //@line 1009
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $12; //@line 1011
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $14; //@line 1013
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $16; //@line 1015
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $18; //@line 1017
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $20; //@line 1019
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $22; //@line 1021
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $24; //@line 1023
 HEAP32[$ReallocAsyncCtx11 + 56 >> 2] = $26; //@line 1025
 sp = STACKTOP; //@line 1026
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_68($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21863
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21865
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21867
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21869
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21871
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21873
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21875
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21877
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21879
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21881
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21883
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21885
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21887
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21889
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 21890
 $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 21891
 if (!___async) {
  HEAP32[___async_retval >> 2] = $27; //@line 21895
  ___async_unwind = 0; //@line 21896
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 21898
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 21900
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 21902
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 21904
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 21906
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 21908
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 21910
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 21912
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 21914
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 21916
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 21918
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 21920
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 21922
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 21924
 sp = STACKTOP; //@line 21925
 return;
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 5258
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 5264
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 5270
   } else {
    $7 = $1 & 255; //@line 5272
    $$03039 = $0; //@line 5273
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 5275
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 5280
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 5283
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 5288
      break;
     } else {
      $$03039 = $13; //@line 5291
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 5295
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 5296
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 5304
     $25 = $18; //@line 5304
     while (1) {
      $24 = $25 ^ $17; //@line 5306
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 5313
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 5316
      $25 = HEAP32[$31 >> 2] | 0; //@line 5317
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 5326
       break;
      } else {
       $$02936 = $31; //@line 5324
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 5331
    }
   } while (0);
   $38 = $1 & 255; //@line 5334
   $$1 = $$029$lcssa; //@line 5335
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 5337
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 5343
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 5346
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 5351
}
function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0; //@line 6584
 $2 = HEAP32[$1 >> 2] | 0; //@line 6585
 if (!$2) {
  label = 3; //@line 6588
 } else {
  if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 6594
  } else {
   label = 4; //@line 6596
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0; //@line 6600
  if (($7 | 0) < 0) {
   label = 4; //@line 6603
  } else {
   $10 = HEAP32[$1 >> 2] | 0; //@line 6605
   $$phi$trans$insert = $0 + 8 | 0; //@line 6607
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6609
    $$sink = $$pre; //@line 6610
    $26 = $$pre; //@line 6610
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6612
    $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 6614
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0; //@line 6619
    $21 = $12; //@line 6621
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$sink = $21; //@line 6623
     $26 = $21; //@line 6623
    } else {
     $$sink = $14 + ($19 + -1) | 0; //@line 6627
     $26 = $21; //@line 6627
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink; //@line 6631
   $$phi$trans$insert29 = $0 + 4 | 0; //@line 6633
   if (!$26) {
    $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6636
   } else {
    $27 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6638
    $29 = $0 + 108 | 0; //@line 6640
    HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0); //@line 6645
    $36 = $27; //@line 6647
   }
   $35 = $36 + -1 | 0; //@line 6649
   if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) {
    $$0 = $7; //@line 6654
   } else {
    HEAP8[$35 >> 0] = $7; //@line 6657
    $$0 = $7; //@line 6658
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0; //@line 6664
  $$0 = -1; //@line 6665
 }
 return $$0 | 0; //@line 6667
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_211($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 17032
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17036
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17038
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17040
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17042
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17043
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 17047
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 17048
  FUNCTION_TABLE_vi[$14 & 511]($8); //@line 17049
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 230; //@line 17052
   $15 = $ReallocAsyncCtx10 + 4 | 0; //@line 17053
   HEAP32[$15 >> 2] = $4; //@line 17054
   $16 = $ReallocAsyncCtx10 + 8 | 0; //@line 17055
   HEAP32[$16 >> 2] = $6; //@line 17056
   $17 = $ReallocAsyncCtx10 + 12 | 0; //@line 17057
   HEAP32[$17 >> 2] = $10; //@line 17058
   sp = STACKTOP; //@line 17059
   return;
  }
  ___async_unwind = 0; //@line 17062
  HEAP32[$ReallocAsyncCtx10 >> 2] = 230; //@line 17063
  $15 = $ReallocAsyncCtx10 + 4 | 0; //@line 17064
  HEAP32[$15 >> 2] = $4; //@line 17065
  $16 = $ReallocAsyncCtx10 + 8 | 0; //@line 17066
  HEAP32[$16 >> 2] = $6; //@line 17067
  $17 = $ReallocAsyncCtx10 + 12 | 0; //@line 17068
  HEAP32[$17 >> 2] = $10; //@line 17069
  sp = STACKTOP; //@line 17070
  return;
 }
 HEAP32[$4 >> 2] = $6; //@line 17073
 $18 = HEAP32[$10 >> 2] | 0; //@line 17074
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 17075
 __ZL26nsapi_dns_query_async_sendPv($18); //@line 17076
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 17079
  sp = STACKTOP; //@line 17080
  return;
 }
 ___async_unwind = 0; //@line 17083
 HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 17084
 sp = STACKTOP; //@line 17085
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 5000
 $4 = HEAP32[$3 >> 2] | 0; //@line 5001
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 5008
   label = 5; //@line 5009
  } else {
   $$1 = 0; //@line 5011
  }
 } else {
  $12 = $4; //@line 5015
  label = 5; //@line 5016
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 5020
   $10 = HEAP32[$9 >> 2] | 0; //@line 5021
   $14 = $10; //@line 5024
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 5029
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 5037
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 5041
       $$141 = $0; //@line 5041
       $$143 = $1; //@line 5041
       $31 = $14; //@line 5041
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 5044
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 5051
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 5056
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 5059
      break L5;
     }
     $$139 = $$038; //@line 5065
     $$141 = $0 + $$038 | 0; //@line 5065
     $$143 = $1 - $$038 | 0; //@line 5065
     $31 = HEAP32[$9 >> 2] | 0; //@line 5065
    } else {
     $$139 = 0; //@line 5067
     $$141 = $0; //@line 5067
     $$143 = $1; //@line 5067
     $31 = $14; //@line 5067
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 5070
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 5073
   $$1 = $$139 + $$143 | 0; //@line 5075
  }
 } while (0);
 return $$1 | 0; //@line 5078
}
function _main__async_cb_89($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 431
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 433
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 435
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 437
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 439
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 441
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 443
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 445
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 447
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 449
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 451
 dest = $AsyncRetVal; //@line 452
 src = 4197; //@line 452
 stop = dest + 40 | 0; //@line 452
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 452
  dest = dest + 1 | 0; //@line 452
  src = src + 1 | 0; //@line 452
 } while ((dest | 0) < (stop | 0));
 $20 = _strlen($AsyncRetVal) | 0; //@line 453
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 454
 $21 = __ZN9TCPSocket4sendEPKvj($2, $AsyncRetVal, $20) | 0; //@line 455
 if (!___async) {
  HEAP32[___async_retval >> 2] = $21; //@line 459
  ___async_unwind = 0; //@line 460
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 313; //@line 462
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $AsyncRetVal; //@line 464
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 466
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 468
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $2; //@line 470
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $8; //@line 472
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $10; //@line 474
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $12; //@line 476
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $14; //@line 478
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $16; //@line 480
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $18; //@line 482
 sp = STACKTOP; //@line 483
 return;
}
function _main__async_cb_91($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 511
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 513
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 515
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 517
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 519
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 521
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 523
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 525
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 527
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 529
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 531
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 533
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 535
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 537
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 538
 $27 = __ZN17EthernetInterface14get_ip_addressEv(788) | 0; //@line 539
 if (!___async) {
  HEAP32[___async_retval >> 2] = $27; //@line 543
  ___async_unwind = 0; //@line 544
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 307; //@line 546
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 548
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 550
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 552
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 554
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 556
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 558
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 560
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $20; //@line 562
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $22; //@line 564
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $24; //@line 566
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $26; //@line 568
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $16; //@line 570
 HEAP32[$ReallocAsyncCtx12 + 52 >> 2] = $18; //@line 572
 sp = STACKTOP; //@line 573
 return;
}
function _main__async_cb_92($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 580
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 582
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 584
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 586
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 590
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 594
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 596
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 598
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 600
 $22 = (_strstr($2, 4237) | 0) - $4 | 0; //@line 603
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 604
 HEAP32[$6 + 4 >> 2] = $22; //@line 606
 HEAP32[$6 + 8 >> 2] = $2; //@line 608
 _printf(4256, $6) | 0; //@line 609
 $24 = (_strstr($2, 4272) | 0) + 4 | 0; //@line 611
 HEAP32[$10 >> 2] = $AsyncRetVal + $4 - $24; //@line 615
 HEAP32[$10 + 4 >> 2] = $24; //@line 617
 _printf(4277, $10) | 0; //@line 618
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 619
 __ZN6Socket5closeEv($14) | 0; //@line 620
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 315; //@line 623
  $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 624
  HEAP32[$28 >> 2] = $2; //@line 625
  $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 626
  HEAP32[$29 >> 2] = $16; //@line 627
  $30 = $ReallocAsyncCtx9 + 12 | 0; //@line 628
  HEAP32[$30 >> 2] = $18; //@line 629
  sp = STACKTOP; //@line 630
  return;
 }
 ___async_unwind = 0; //@line 633
 HEAP32[$ReallocAsyncCtx9 >> 2] = 315; //@line 634
 $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 635
 HEAP32[$28 >> 2] = $2; //@line 636
 $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 637
 HEAP32[$29 >> 2] = $16; //@line 638
 $30 = $ReallocAsyncCtx9 + 12 | 0; //@line 639
 HEAP32[$30 >> 2] = $18; //@line 640
 sp = STACKTOP; //@line 641
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_171($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14980
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14984
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14986
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14988
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14990
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14992
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14994
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14996
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 14999
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 15000
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 15016
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 15017
    if (!___async) {
     ___async_unwind = 0; //@line 15020
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 359; //@line 15022
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 15024
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 15026
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 15028
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 15030
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 15032
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 15034
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 15036
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 15038
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 15041
    sp = STACKTOP; //@line 15042
    return;
   }
  }
 } while (0);
 return;
}
function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13798
 STACKTOP = STACKTOP + 32 | 0; //@line 13799
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13799
 $2 = sp; //@line 13800
 $3 = HEAP8[$1 >> 0] | 0; //@line 13801
 L1 : do {
  if (!($3 << 24 >> 24)) {
   label = 3; //@line 13805
  } else {
   if (!(HEAP8[$1 + 1 >> 0] | 0)) {
    label = 3; //@line 13811
   } else {
    _memset($2 | 0, 0, 32) | 0; //@line 13813
    $10 = HEAP8[$1 >> 0] | 0; //@line 13814
    if ($10 << 24 >> 24) {
     $$01824 = $1; //@line 13817
     $15 = $10; //@line 13817
     do {
      $19 = $2 + ((($15 & 255) >>> 5 & 255) << 2) | 0; //@line 13824
      HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($15 & 31); //@line 13827
      $$01824 = $$01824 + 1 | 0; //@line 13828
      $15 = HEAP8[$$01824 >> 0] | 0; //@line 13829
     } while ($15 << 24 >> 24 != 0);
    }
    $12 = HEAP8[$0 >> 0] | 0; //@line 13838
    if (!($12 << 24 >> 24)) {
     $$019$sink = $0; //@line 13841
    } else {
     $$01922 = $0; //@line 13843
     $25 = $12; //@line 13843
     while (1) {
      if (HEAP32[$2 + ((($25 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($25 & 31) | 0) {
       $$019$sink = $$01922; //@line 13855
       break L1;
      }
      $34 = $$01922 + 1 | 0; //@line 13858
      $25 = HEAP8[$34 >> 0] | 0; //@line 13859
      if (!($25 << 24 >> 24)) {
       $$019$sink = $34; //@line 13862
       break;
      } else {
       $$01922 = $34; //@line 13865
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $$019$sink = ___strchrnul($0, $3 << 24 >> 24) | 0; //@line 13875
 }
 STACKTOP = sp; //@line 13880
 return $$019$sink - $0 | 0; //@line 13880
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 21284
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21288
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21290
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21292
 $9 = $4 + 12 | 0; //@line 21294
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21295
 $11 = HEAP32[$6 + 16 >> 2] | 0; //@line 21297
 HEAP32[$8 + 8 >> 2] = 0; //@line 21299
 HEAP32[$8 >> 2] = 239; //@line 21300
 HEAP32[$8 + 4 >> 2] = $11; //@line 21302
 $13 = $8 + 12 | 0; //@line 21303
 HEAP32[$13 >> 2] = 776; //@line 21304
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 21305
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 21306
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 240; //@line 21309
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 21310
  HEAP32[$14 >> 2] = $13; //@line 21311
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 21312
  HEAP32[$15 >> 2] = $9; //@line 21313
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 21314
  HEAP32[$16 >> 2] = $8; //@line 21315
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 21316
  HEAP32[$17 >> 2] = $4; //@line 21317
  sp = STACKTOP; //@line 21318
  return;
 }
 ___async_unwind = 0; //@line 21321
 HEAP32[$ReallocAsyncCtx4 >> 2] = 240; //@line 21322
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 21323
 HEAP32[$14 >> 2] = $13; //@line 21324
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 21325
 HEAP32[$15 >> 2] = $9; //@line 21326
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 21327
 HEAP32[$16 >> 2] = $8; //@line 21328
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 21329
 HEAP32[$17 >> 2] = $4; //@line 21330
 sp = STACKTOP; //@line 21331
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14737
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14741
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14743
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14745
 $9 = $4 + 12 | 0; //@line 14747
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14748
 $10 = HEAP32[$6 >> 2] | 0; //@line 14749
 HEAP32[$8 + 8 >> 2] = 0; //@line 14751
 HEAP32[$8 >> 2] = 208; //@line 14752
 HEAP32[$8 + 4 >> 2] = $10; //@line 14754
 $12 = $8 + 12 | 0; //@line 14755
 HEAP32[$12 >> 2] = 764; //@line 14756
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 14757
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 14758
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 209; //@line 14761
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 14762
  HEAP32[$13 >> 2] = $12; //@line 14763
  $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 14764
  HEAP32[$14 >> 2] = $9; //@line 14765
  $15 = $ReallocAsyncCtx4 + 12 | 0; //@line 14766
  HEAP32[$15 >> 2] = $8; //@line 14767
  $16 = $ReallocAsyncCtx4 + 16 | 0; //@line 14768
  HEAP32[$16 >> 2] = $4; //@line 14769
  sp = STACKTOP; //@line 14770
  return;
 }
 ___async_unwind = 0; //@line 14773
 HEAP32[$ReallocAsyncCtx4 >> 2] = 209; //@line 14774
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 14775
 HEAP32[$13 >> 2] = $12; //@line 14776
 $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 14777
 HEAP32[$14 >> 2] = $9; //@line 14778
 $15 = $ReallocAsyncCtx4 + 12 | 0; //@line 14779
 HEAP32[$15 >> 2] = $8; //@line 14780
 $16 = $ReallocAsyncCtx4 + 16 | 0; //@line 14781
 HEAP32[$16 >> 2] = $4; //@line 14782
 sp = STACKTOP; //@line 14783
 return;
}
function _main__async_cb_93($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 649
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 651
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 653
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 657
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 659
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 661
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 663
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 665
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 667
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 669
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 671
 $24 = $2; //@line 674
 $25 = (_strstr($2, 4237) | 0) - $24 | 0; //@line 675
 HEAP32[$4 >> 2] = $AsyncRetVal; //@line 676
 HEAP32[$4 + 4 >> 2] = $25; //@line 678
 HEAP32[$4 + 8 >> 2] = $2; //@line 680
 _printf(4240, $4) | 0; //@line 681
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 682
 $26 = __ZN9TCPSocket4recvEPvj($8, $2, 256) | 0; //@line 683
 if (!___async) {
  HEAP32[___async_retval >> 2] = $26; //@line 687
  ___async_unwind = 0; //@line 688
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 314; //@line 690
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 692
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $24; //@line 694
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 696
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $12; //@line 698
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $14; //@line 700
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $16; //@line 702
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 704
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $8; //@line 706
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 708
 sp = STACKTOP; //@line 709
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_62($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21376
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21378
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21380
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21381
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 21385
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 21386
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 21387
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 241; //@line 21390
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 21391
   HEAP32[$13 >> 2] = $4; //@line 21392
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 21393
   HEAP32[$14 >> 2] = $8; //@line 21394
   sp = STACKTOP; //@line 21395
   return;
  }
  ___async_unwind = 0; //@line 21398
  HEAP32[$ReallocAsyncCtx2 >> 2] = 241; //@line 21399
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 21400
  HEAP32[$13 >> 2] = $4; //@line 21401
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 21402
  HEAP32[$14 >> 2] = $8; //@line 21403
  sp = STACKTOP; //@line 21404
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 21407
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 21413
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 21414
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 21415
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 242; //@line 21418
  sp = STACKTOP; //@line 21419
  return;
 }
 ___async_unwind = 0; //@line 21422
 HEAP32[$ReallocAsyncCtx3 >> 2] = 242; //@line 21423
 sp = STACKTOP; //@line 21424
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4886
 STACKTOP = STACKTOP + 16 | 0; //@line 4887
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4887
 $2 = sp; //@line 4888
 $3 = $1 & 255; //@line 4889
 HEAP8[$2 >> 0] = $3; //@line 4890
 $4 = $0 + 16 | 0; //@line 4891
 $5 = HEAP32[$4 >> 2] | 0; //@line 4892
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 4899
   label = 4; //@line 4900
  } else {
   $$0 = -1; //@line 4902
  }
 } else {
  $12 = $5; //@line 4905
  label = 4; //@line 4906
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 4910
   $10 = HEAP32[$9 >> 2] | 0; //@line 4911
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 4914
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 4921
     HEAP8[$10 >> 0] = $3; //@line 4922
     $$0 = $13; //@line 4923
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 4928
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4929
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 4930
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 320; //@line 4933
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 4935
    sp = STACKTOP; //@line 4936
    STACKTOP = sp; //@line 4937
    return 0; //@line 4937
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4939
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 4944
   } else {
    $$0 = -1; //@line 4946
   }
  }
 } while (0);
 STACKTOP = sp; //@line 4950
 return $$0 | 0; //@line 4950
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_169($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14824
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14828
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14830
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14832
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14833
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 14837
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 14838
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 14839
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 210; //@line 14842
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 14843
   HEAP32[$13 >> 2] = $4; //@line 14844
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 14845
   HEAP32[$14 >> 2] = $8; //@line 14846
   sp = STACKTOP; //@line 14847
   return;
  }
  ___async_unwind = 0; //@line 14850
  HEAP32[$ReallocAsyncCtx2 >> 2] = 210; //@line 14851
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 14852
  HEAP32[$13 >> 2] = $4; //@line 14853
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 14854
  HEAP32[$14 >> 2] = $8; //@line 14855
  sp = STACKTOP; //@line 14856
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 14859
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 14865
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 14866
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 14867
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 14870
  sp = STACKTOP; //@line 14871
  return;
 }
 ___async_unwind = 0; //@line 14874
 HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 14875
 sp = STACKTOP; //@line 14876
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_158($0) {
 $0 = $0 | 0;
 var $$011 = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14003
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14005
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14007
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14009
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14011
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14013
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14015
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14017
 $18 = HEAP32[$0 + 40 >> 2] | 0; //@line 14021
 if (__ZN13SocketAddress14set_ip_addressEPKc($14, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$011 = __ZNK13SocketAddress14get_ip_versionEv($14) | 0; //@line 14027
 } else {
  $$011 = 0; //@line 14029
 }
 $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 96 >> 2] | 0; //@line 14033
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 14034
 FUNCTION_TABLE_vii[$24 & 7]($8, $10); //@line 14035
 if (!___async) {
  ___async_unwind = 0; //@line 14038
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 94; //@line 14040
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 14042
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $8; //@line 14044
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $4; //@line 14046
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $6; //@line 14048
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $8; //@line 14050
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $10; //@line 14052
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $12; //@line 14054
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $$011; //@line 14056
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 14058
 sp = STACKTOP; //@line 14059
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_140($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10812
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10814
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10816
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10817
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 10821
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 10822
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 10823
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 199; //@line 10826
   $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 10827
   HEAP32[$13 >> 2] = $4; //@line 10828
   $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 10829
   HEAP32[$14 >> 2] = $8; //@line 10830
   sp = STACKTOP; //@line 10831
   return;
  }
  ___async_unwind = 0; //@line 10834
  HEAP32[$ReallocAsyncCtx8 >> 2] = 199; //@line 10835
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 10836
  HEAP32[$13 >> 2] = $4; //@line 10837
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 10838
  HEAP32[$14 >> 2] = $8; //@line 10839
  sp = STACKTOP; //@line 10840
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 10843
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 10849
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 10850
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 10851
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 200; //@line 10854
  sp = STACKTOP; //@line 10855
  return;
 }
 ___async_unwind = 0; //@line 10858
 HEAP32[$ReallocAsyncCtx9 >> 2] = 200; //@line 10859
 sp = STACKTOP; //@line 10860
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_135($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 9801
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9805
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9807
 $7 = $4 + 12 | 0; //@line 9809
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9810
 $9 = $6 + 4 | 0; //@line 9812
 HEAP32[$9 >> 2] = 0; //@line 9814
 HEAP32[$9 + 4 >> 2] = 0; //@line 9817
 HEAP32[$6 >> 2] = 3; //@line 9818
 $13 = $6 + 12 | 0; //@line 9819
 HEAP32[$13 >> 2] = 752; //@line 9820
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 9821
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $6) | 0; //@line 9822
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 9825
  $14 = $ReallocAsyncCtx12 + 4 | 0; //@line 9826
  HEAP32[$14 >> 2] = $13; //@line 9827
  $15 = $ReallocAsyncCtx12 + 8 | 0; //@line 9828
  HEAP32[$15 >> 2] = $7; //@line 9829
  $16 = $ReallocAsyncCtx12 + 12 | 0; //@line 9830
  HEAP32[$16 >> 2] = $6; //@line 9831
  $17 = $ReallocAsyncCtx12 + 16 | 0; //@line 9832
  HEAP32[$17 >> 2] = $4; //@line 9833
  sp = STACKTOP; //@line 9834
  return;
 }
 ___async_unwind = 0; //@line 9837
 HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 9838
 $14 = $ReallocAsyncCtx12 + 4 | 0; //@line 9839
 HEAP32[$14 >> 2] = $13; //@line 9840
 $15 = $ReallocAsyncCtx12 + 8 | 0; //@line 9841
 HEAP32[$15 >> 2] = $7; //@line 9842
 $16 = $ReallocAsyncCtx12 + 12 | 0; //@line 9843
 HEAP32[$16 >> 2] = $6; //@line 9844
 $17 = $ReallocAsyncCtx12 + 16 | 0; //@line 9845
 HEAP32[$17 >> 2] = $4; //@line 9846
 sp = STACKTOP; //@line 9847
 return;
}
function _fflush__async_cb_194($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16048
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16050
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 16052
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 16056
  } else {
   $$02327 = $$02325; //@line 16058
   $$02426 = $AsyncRetVal; //@line 16058
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 16065
    } else {
     $16 = 0; //@line 16067
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 16079
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 16082
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 16085
     break L3;
    } else {
     $$02327 = $$023; //@line 16088
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 16091
   $13 = ___fflush_unlocked($$02327) | 0; //@line 16092
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 16096
    ___async_unwind = 0; //@line 16097
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 324; //@line 16099
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 16101
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 16103
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 16105
   sp = STACKTOP; //@line 16106
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 16110
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 16112
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4478
 $2 = $0 + 32 | 0; //@line 4479
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 44 | 0; //@line 4484
 $5 = HEAP32[$4 >> 2] | 0; //@line 4485
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 4490
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4491
   FUNCTION_TABLE_vi[$8 & 511]($2); //@line 4492
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 134; //@line 4495
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4497
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4499
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 4501
    sp = STACKTOP; //@line 4502
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4505
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 4510
 $13 = HEAP32[$12 >> 2] | 0; //@line 4511
 do {
  if (!$13) {
   $19 = 0; //@line 4515
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 4518
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4519
   FUNCTION_TABLE_vii[$16 & 7]($2, $1); //@line 4520
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 135; //@line 4523
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 4525
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 4527
    sp = STACKTOP; //@line 4528
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4531
    $19 = HEAP32[$12 >> 2] | 0; //@line 4533
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 4538
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_161($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14377
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14379
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14381
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14383
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14385
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14387
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14389
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14391
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14393
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14395
 $19 = $10 + 12 | 0; //@line 14397
 HEAP32[$19 >> 2] = HEAP32[$8 >> 2]; //@line 14398
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 14399
 $20 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($12, $14, $2, $10, $16) | 0; //@line 14400
 if (!___async) {
  HEAP32[___async_retval >> 2] = $20; //@line 14404
  ___async_unwind = 0; //@line 14405
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 14407
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $19; //@line 14409
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 14411
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $10; //@line 14413
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 14415
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $2; //@line 14417
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $6; //@line 14419
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $18; //@line 14421
 sp = STACKTOP; //@line 14422
 return;
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5794
 $4 = $0 + 8 | 0; //@line 5795
 $5 = $0 + 52 | 0; //@line 5796
 $6 = $0 + 4 | 0; //@line 5797
 $7 = $0 + 12 | 0; //@line 5798
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 5800
  if (!$8) {
   $$2 = -3005; //@line 5803
   label = 6; //@line 5804
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 5807
  $10 = HEAP32[$6 >> 2] | 0; //@line 5808
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 80 >> 2] | 0; //@line 5811
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5812
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 5813
  if (___async) {
   label = 4; //@line 5816
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5819
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 5825
   label = 6; //@line 5826
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 154; //@line 5831
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 5833
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5835
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 5837
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 5839
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 5841
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 5843
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 5845
  sp = STACKTOP; //@line 5846
  return 0; //@line 5847
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 5850
 }
 return 0; //@line 5852
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5727
 $4 = $0 + 8 | 0; //@line 5728
 $5 = $0 + 52 | 0; //@line 5729
 $6 = $0 + 4 | 0; //@line 5730
 $7 = $0 + 12 | 0; //@line 5731
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 5733
  if (!$8) {
   $$2 = -3005; //@line 5736
   label = 6; //@line 5737
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 5740
  $10 = HEAP32[$6 >> 2] | 0; //@line 5741
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 5744
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5745
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 5746
  if (___async) {
   label = 4; //@line 5749
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5752
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 5758
   label = 6; //@line 5759
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 153; //@line 5764
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 5766
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5768
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 5770
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 5772
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 5774
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 5776
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 5778
  sp = STACKTOP; //@line 5779
  return 0; //@line 5780
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 5783
 }
 return 0; //@line 5785
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14917
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14921
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14923
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14925
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14927
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14929
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14931
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 14934
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 14935
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 14944
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 14945
    if (!___async) {
     ___async_unwind = 0; //@line 14948
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 360; //@line 14950
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 14952
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 14954
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 14956
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 14958
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 14960
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 14962
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 14964
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 14967
    sp = STACKTOP; //@line 14968
    return;
   }
  }
 }
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 16372
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16374
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16376
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16378
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16380
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16382
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16384
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16386
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16390
  return;
 }
 $15 = $2 + 12 | 0; //@line 16393
 dest = $15; //@line 16394
 src = $4; //@line 16394
 stop = dest + 60 | 0; //@line 16394
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 16394
  dest = dest + 4 | 0; //@line 16394
  src = src + 4 | 0; //@line 16394
 } while ((dest | 0) < (stop | 0));
 HEAP16[$15 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 16394
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 16395
 _wait_ms(1); //@line 16396
 if (!___async) {
  ___async_unwind = 0; //@line 16399
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 55; //@line 16401
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $6; //@line 16403
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $8; //@line 16405
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $2; //@line 16407
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 16409
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $12; //@line 16411
 sp = STACKTOP; //@line 16412
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 94
 value = value & 255; //@line 96
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 99
   ptr = ptr + 1 | 0; //@line 100
  }
  aligned_end = end & -4 | 0; //@line 103
  block_aligned_end = aligned_end - 64 | 0; //@line 104
  value4 = value | value << 8 | value << 16 | value << 24; //@line 105
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 108
   HEAP32[ptr + 4 >> 2] = value4; //@line 109
   HEAP32[ptr + 8 >> 2] = value4; //@line 110
   HEAP32[ptr + 12 >> 2] = value4; //@line 111
   HEAP32[ptr + 16 >> 2] = value4; //@line 112
   HEAP32[ptr + 20 >> 2] = value4; //@line 113
   HEAP32[ptr + 24 >> 2] = value4; //@line 114
   HEAP32[ptr + 28 >> 2] = value4; //@line 115
   HEAP32[ptr + 32 >> 2] = value4; //@line 116
   HEAP32[ptr + 36 >> 2] = value4; //@line 117
   HEAP32[ptr + 40 >> 2] = value4; //@line 118
   HEAP32[ptr + 44 >> 2] = value4; //@line 119
   HEAP32[ptr + 48 >> 2] = value4; //@line 120
   HEAP32[ptr + 52 >> 2] = value4; //@line 121
   HEAP32[ptr + 56 >> 2] = value4; //@line 122
   HEAP32[ptr + 60 >> 2] = value4; //@line 123
   ptr = ptr + 64 | 0; //@line 124
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 128
   ptr = ptr + 4 | 0; //@line 129
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 134
  ptr = ptr + 1 | 0; //@line 135
 }
 return end - num | 0; //@line 137
}
function __Z28nsapi_dns_query_async_canceli__async_cb($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17433
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17437
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17439
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17441
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 17442
 $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 17443
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 17446
  HEAP32[___async_retval >> 2] = 0; //@line 17448
  return;
 }
 $11 = HEAP32[$$pre + 4 >> 2] | 0; //@line 17452
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 17453
 FUNCTION_TABLE_vii[$11 & 7]($6, $8); //@line 17454
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 278; //@line 17457
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 17458
  HEAP32[$12 >> 2] = $$phi$trans$insert; //@line 17459
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 17460
  HEAP32[$13 >> 2] = $4; //@line 17461
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 17462
  HEAP32[$14 >> 2] = $8; //@line 17463
  sp = STACKTOP; //@line 17464
  return;
 }
 ___async_unwind = 0; //@line 17467
 HEAP32[$ReallocAsyncCtx2 >> 2] = 278; //@line 17468
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 17469
 HEAP32[$12 >> 2] = $$phi$trans$insert; //@line 17470
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 17471
 HEAP32[$13 >> 2] = $4; //@line 17472
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 17473
 HEAP32[$14 >> 2] = $8; //@line 17474
 sp = STACKTOP; //@line 17475
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15949
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 15959
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 15959
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 15959
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 15963
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 15966
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 15969
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 15977
  } else {
   $20 = 0; //@line 15979
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 15989
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 15993
  HEAP32[___async_retval >> 2] = $$1; //@line 15995
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 15998
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 15999
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 16003
  ___async_unwind = 0; //@line 16004
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 324; //@line 16006
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 16008
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 16010
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 16012
 sp = STACKTOP; //@line 16013
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $14 = 0, $5 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 933
 $5 = $0 + -4 | 0; //@line 934
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 120 >> 2] | 0; //@line 937
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 938
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($5, $1, $3, $4) | 0; //@line 939
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 57; //@line 942
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 944
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 946
  sp = STACKTOP; //@line 947
  return 0; //@line 948
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 950
 if (($2 | 0) != 0 & ($9 | 0) > -1) {
  $14 = $1 + 12 | 0; //@line 955
  dest = $2; //@line 956
  src = $14; //@line 956
  stop = dest + 60 | 0; //@line 956
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 956
   dest = dest + 4 | 0; //@line 956
   src = src + 4 | 0; //@line 956
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$14 + 60 >> 1] | 0; //@line 956
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 958
 _wait_ms(1); //@line 959
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 58; //@line 962
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 964
  sp = STACKTOP; //@line 965
  return 0; //@line 966
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 968
  return $9 | 0; //@line 969
 }
 return 0; //@line 971
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 1121
 if (!$2) {
  $$0 = -1; //@line 1124
  return $$0 | 0; //@line 1125
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 1128
 $5 = $0 + 20 | 0; //@line 1129
 HEAP32[$5 >> 2] = 0; //@line 1130
 $6 = $0 + 16 | 0; //@line 1131
 HEAP32[$6 >> 2] = 0; //@line 1132
 if ($1 | 0) {
  $$034$i = $1; //@line 1135
  $23 = 0; //@line 1135
  do {
   $23 = $23 + 1 | 0; //@line 1137
   $$034$i = $$034$i >>> 1; //@line 1138
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 1146
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1149
 HEAP32[$0 + 28 >> 2] = $1; //@line 1151
 HEAP32[$0 + 32 >> 2] = $2; //@line 1153
 HEAP32[$0 >> 2] = 0; //@line 1154
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1157
 HEAP8[$0 + 9 >> 0] = 0; //@line 1159
 HEAP8[$0 + 8 >> 0] = 0; //@line 1161
 HEAP8[$0 + 36 >> 0] = 0; //@line 1163
 HEAP32[$0 + 40 >> 2] = 0; //@line 1165
 HEAP32[$0 + 44 >> 2] = 0; //@line 1167
 HEAP8[$0 + 184 >> 0] = 0; //@line 1169
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1171
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 1174
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1177
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 1180
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1183
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 1186
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 1189
 $$0 = $$033$i; //@line 1190
 return $$0 | 0; //@line 1191
}
function __ZN9UDPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5594
 HEAP32[$0 >> 2] = 632; //@line 5595
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5596
 __ZN6Socket5closeEv($0) | 0; //@line 5597
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 148; //@line 5600
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5602
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 5604
  sp = STACKTOP; //@line 5605
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5608
 HEAP32[$0 >> 2] = 572; //@line 5609
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 5611
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 5617
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5618
   FUNCTION_TABLE_vi[$8 & 511]($0 + 32 | 0); //@line 5619
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 149; //@line 5622
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5624
    sp = STACKTOP; //@line 5625
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5628
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 5634
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 5641
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5642
 FUNCTION_TABLE_vi[$15 & 511]($0 + 16 | 0); //@line 5643
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 150; //@line 5646
  sp = STACKTOP; //@line 5647
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5650
 return;
}
function __ZN9TCPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5100
 HEAP32[$0 >> 2] = 608; //@line 5101
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5102
 __ZN6Socket5closeEv($0) | 0; //@line 5103
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 136; //@line 5106
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5108
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 5110
  sp = STACKTOP; //@line 5111
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5114
 HEAP32[$0 >> 2] = 572; //@line 5115
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 5117
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 5123
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5124
   FUNCTION_TABLE_vi[$8 & 511]($0 + 32 | 0); //@line 5125
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 137; //@line 5128
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5130
    sp = STACKTOP; //@line 5131
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5134
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 5140
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 5147
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5148
 FUNCTION_TABLE_vi[$15 & 511]($0 + 16 | 0); //@line 5149
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 138; //@line 5152
  sp = STACKTOP; //@line 5153
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5156
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5953
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5955
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5957
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5959
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 5964
  } else {
   $9 = $4 + 4 | 0; //@line 5966
   $10 = HEAP32[$9 >> 2] | 0; //@line 5967
   $11 = $4 + 8 | 0; //@line 5968
   $12 = HEAP32[$11 >> 2] | 0; //@line 5969
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 5973
    HEAP32[$6 >> 2] = 0; //@line 5974
    HEAP32[$2 >> 2] = 0; //@line 5975
    HEAP32[$11 >> 2] = 0; //@line 5976
    HEAP32[$9 >> 2] = 0; //@line 5977
    $$0 = 0; //@line 5978
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 5985
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 5986
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 5987
   if (!___async) {
    ___async_unwind = 0; //@line 5990
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 326; //@line 5992
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 5994
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 5996
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 5998
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 6000
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 6002
   sp = STACKTOP; //@line 6003
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 6008
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 523
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 120 >> 2] | 0; //@line 526
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 527
 $8 = FUNCTION_TABLE_iiiii[$7 & 15]($0, $1, $3, $4) | 0; //@line 528
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 44; //@line 531
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 533
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 535
  sp = STACKTOP; //@line 536
  return 0; //@line 537
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 539
 if (($2 | 0) != 0 & ($8 | 0) > -1) {
  $13 = $1 + 12 | 0; //@line 544
  dest = $2; //@line 545
  src = $13; //@line 545
  stop = dest + 60 | 0; //@line 545
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 545
   dest = dest + 4 | 0; //@line 545
   src = src + 4 | 0; //@line 545
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$13 + 60 >> 1] | 0; //@line 545
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 547
 _wait_ms(1); //@line 548
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 45; //@line 551
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 553
  sp = STACKTOP; //@line 554
  return 0; //@line 555
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 557
  return $8 | 0; //@line 558
 }
 return 0; //@line 560
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_83($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 24007
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24009
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24011
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24013
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24015
 $9 = HEAP32[$2 >> 2] | 0; //@line 24016
 if (!$9) {
  if (!$6) {
   return;
  }
  __ZdaPv($6); //@line 24023
  return;
 } else {
  $11 = HEAP32[$9 >> 2] | 0; //@line 24026
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 24027
  FUNCTION_TABLE_viii[$11 & 0]($4, $8, $6); //@line 24028
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 268; //@line 24031
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 24032
   HEAP32[$12 >> 2] = $2; //@line 24033
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 24034
   HEAP32[$13 >> 2] = $4; //@line 24035
   $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 24036
   HEAP32[$14 >> 2] = $6; //@line 24037
   sp = STACKTOP; //@line 24038
   return;
  }
  ___async_unwind = 0; //@line 24041
  HEAP32[$ReallocAsyncCtx2 >> 2] = 268; //@line 24042
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 24043
  HEAP32[$12 >> 2] = $2; //@line 24044
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 24045
  HEAP32[$13 >> 2] = $4; //@line 24046
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 24047
  HEAP32[$14 >> 2] = $6; //@line 24048
  sp = STACKTOP; //@line 24049
  return;
 }
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7299
 STACKTOP = STACKTOP + 48 | 0; //@line 7300
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7300
 $$byval_copy = sp + 20 | 0; //@line 7301
 $4 = sp; //@line 7302
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 7303
 $5 = __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $4, 1, $3) | 0; //@line 7304
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 164; //@line 7307
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7309
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 7311
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 7313
  sp = STACKTOP; //@line 7314
  STACKTOP = sp; //@line 7315
  return 0; //@line 7315
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7317
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 7318
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 7318
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 7318
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 7318
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 7318
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 7319
  STACKTOP = sp; //@line 7322
  return (($5 | 0) < 0 ? $5 : 0) | 0; //@line 7322
 }
 return 0; //@line 7324
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 12508
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 12513
    $$0 = 1; //@line 12514
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 12527
     $$0 = 1; //@line 12528
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12532
     $$0 = -1; //@line 12533
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 12543
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 12547
    $$0 = 2; //@line 12548
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 12560
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 12566
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 12570
    $$0 = 3; //@line 12571
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 12581
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 12587
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 12593
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 12597
    $$0 = 4; //@line 12598
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12602
    $$0 = -1; //@line 12603
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 12608
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_44($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 18653
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18655
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18657
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18659
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18661
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 18666
  return;
 }
 dest = $2 + 4 | 0; //@line 18670
 stop = dest + 52 | 0; //@line 18670
 do {
  HEAP32[dest >> 2] = 0; //@line 18670
  dest = dest + 4 | 0; //@line 18670
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 18671
 HEAP32[$2 + 8 >> 2] = $4; //@line 18673
 HEAP32[$2 + 12 >> 2] = -1; //@line 18675
 HEAP32[$2 + 48 >> 2] = 1; //@line 18677
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 18680
 $16 = HEAP32[$6 >> 2] | 0; //@line 18681
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 18682
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 18683
 if (!___async) {
  ___async_unwind = 0; //@line 18686
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 345; //@line 18688
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 18690
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 18692
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 18694
 sp = STACKTOP; //@line 18695
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_163($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14513
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14517
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14519
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14521
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14522
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 14526
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 14530
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 14531
 FUNCTION_TABLE_vi[$12 & 511]($4); //@line 14532
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 14535
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 14536
  HEAP32[$13 >> 2] = $4; //@line 14537
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 14538
  HEAP32[$14 >> 2] = $6; //@line 14539
  $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 14540
  HEAP32[$15 >> 2] = $8; //@line 14541
  sp = STACKTOP; //@line 14542
  return;
 }
 ___async_unwind = 0; //@line 14545
 HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 14546
 $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 14547
 HEAP32[$13 >> 2] = $4; //@line 14548
 $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 14549
 HEAP32[$14 >> 2] = $6; //@line 14550
 $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 14551
 HEAP32[$15 >> 2] = $8; //@line 14552
 sp = STACKTOP; //@line 14553
 return;
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 377
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 379
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 381
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 383
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 385
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 387
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 389
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 391
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 393
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 395
 $20 = __Z18nsapi_create_stackP12NetworkStack(HEAP32[___async_retval >> 2] | 0) | 0; //@line 398
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(40) | 0; //@line 399
 __ZN6Socket4openEP12NetworkStack($4, $20) | 0; //@line 400
 if (!___async) {
  ___async_unwind = 0; //@line 403
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 310; //@line 405
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $10; //@line 407
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $6; //@line 409
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $8; //@line 411
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $12; //@line 413
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $14; //@line 415
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $16; //@line 417
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $18; //@line 419
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $4; //@line 421
 HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $2; //@line 423
 sp = STACKTOP; //@line 424
 return;
}
function __ZN9TCPSocketD2Ev__async_cb_31($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17832
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17836
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 572; //@line 17837
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 17839
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 17844
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 17845
  FUNCTION_TABLE_vi[$10 & 511]($4 + 32 | 0); //@line 17846
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 137; //@line 17849
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 17850
   HEAP32[$11 >> 2] = $4; //@line 17851
   sp = STACKTOP; //@line 17852
   return;
  }
  ___async_unwind = 0; //@line 17855
  HEAP32[$ReallocAsyncCtx >> 2] = 137; //@line 17856
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 17857
  HEAP32[$11 >> 2] = $4; //@line 17858
  sp = STACKTOP; //@line 17859
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 17863
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 17870
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17871
 FUNCTION_TABLE_vi[$17 & 511]($4 + 16 | 0); //@line 17872
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 17875
  sp = STACKTOP; //@line 17876
  return;
 }
 ___async_unwind = 0; //@line 17879
 HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 17880
 sp = STACKTOP; //@line 17881
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_172($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15053
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15057
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15059
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15061
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15063
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15065
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 15068
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 15069
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 15075
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 15076
   if (!___async) {
    ___async_unwind = 0; //@line 15079
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 358; //@line 15081
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 15083
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 15085
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 15087
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 15089
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 15091
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 15093
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 15096
   sp = STACKTOP; //@line 15097
   return;
  }
 }
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_128($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5897
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5901
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 572; //@line 5902
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 5904
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 5909
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 5910
  FUNCTION_TABLE_vi[$10 & 511]($4 + 32 | 0); //@line 5911
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 149; //@line 5914
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 5915
   HEAP32[$11 >> 2] = $4; //@line 5916
   sp = STACKTOP; //@line 5917
   return;
  }
  ___async_unwind = 0; //@line 5920
  HEAP32[$ReallocAsyncCtx >> 2] = 149; //@line 5921
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 5922
  HEAP32[$11 >> 2] = $4; //@line 5923
  sp = STACKTOP; //@line 5924
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 5928
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 5935
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5936
 FUNCTION_TABLE_vi[$17 & 511]($4 + 16 | 0); //@line 5937
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 5940
  sp = STACKTOP; //@line 5941
  return;
 }
 ___async_unwind = 0; //@line 5944
 HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 5945
 sp = STACKTOP; //@line 5946
 return;
}
function __ZNK13SocketAddress14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4827
 STACKTOP = STACKTOP + 16 | 0; //@line 4828
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4828
 $vararg_buffer = sp; //@line 4829
 $2 = HEAP32[$0 + 40 >> 2] | 0; //@line 4831
 if (!$2) {
  $$0 = 0; //@line 4834
  STACKTOP = sp; //@line 4835
  return $$0 | 0; //@line 4835
 }
 if (HEAP8[$0 >> 0] | 0) {
  $$0 = $0; //@line 4840
  STACKTOP = sp; //@line 4841
  return $$0 | 0; //@line 4841
 }
 switch ($2 | 0) {
 case 1:
  {
   $11 = HEAPU8[$0 + 45 >> 0] | 0; //@line 4850
   $14 = HEAPU8[$0 + 46 >> 0] | 0; //@line 4853
   $17 = HEAPU8[$0 + 47 >> 0] | 0; //@line 4856
   HEAP32[$vararg_buffer >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 4857
   HEAP32[$vararg_buffer + 4 >> 2] = $11; //@line 4859
   HEAP32[$vararg_buffer + 8 >> 2] = $14; //@line 4861
   HEAP32[$vararg_buffer + 12 >> 2] = $17; //@line 4863
   _sprintf($0, 3703, $vararg_buffer) | 0; //@line 4864
   $$0 = $0; //@line 4865
   STACKTOP = sp; //@line 4866
   return $$0 | 0; //@line 4866
  }
 case 2:
  {
   _ip6tos($0 + 44 | 0, $0) | 0; //@line 4871
   $$0 = $0; //@line 4872
   STACKTOP = sp; //@line 4873
   return $$0 | 0; //@line 4873
  }
 default:
  {
   $$0 = $0; //@line 4877
   STACKTOP = sp; //@line 4878
   return $$0 | 0; //@line 4878
  }
 }
 return 0; //@line 4881
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_50($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19300
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19304
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19306
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19308
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19310
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19312
 $13 = $4 + 12 | 0; //@line 19314
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19315
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 19316
 $14 = FUNCTION_TABLE_iiiii[$12 & 15]($6, $8, $4, $10) | 0; //@line 19317
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 19320
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 19321
  HEAP32[$15 >> 2] = $13; //@line 19322
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 19323
  HEAP32[$16 >> 2] = $4; //@line 19324
  sp = STACKTOP; //@line 19325
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 19329
 ___async_unwind = 0; //@line 19330
 HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 19331
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 19332
 HEAP32[$15 >> 2] = $13; //@line 19333
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 19334
 HEAP32[$16 >> 2] = $4; //@line 19335
 sp = STACKTOP; //@line 19336
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_37($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 18137
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18141
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18143
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18145
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18146
 if (!$$pr$i) {
  _free($6); //@line 18149
  return;
 }
 $11 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 18153
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 18154
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 18155
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 253; //@line 18158
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 18159
  HEAP32[$12 >> 2] = $4; //@line 18160
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 18161
  HEAP32[$13 >> 2] = $6; //@line 18162
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 18163
  HEAP32[$14 >> 2] = $8; //@line 18164
  sp = STACKTOP; //@line 18165
  return;
 }
 ___async_unwind = 0; //@line 18168
 HEAP32[$ReallocAsyncCtx7 >> 2] = 253; //@line 18169
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 18170
 HEAP32[$12 >> 2] = $4; //@line 18171
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 18172
 HEAP32[$13 >> 2] = $6; //@line 18173
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 18174
 HEAP32[$14 >> 2] = $8; //@line 18175
 sp = STACKTOP; //@line 18176
 return;
}
function _main__async_cb_94($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 716
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 718
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 720
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 722
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 724
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 726
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 728
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 730
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 732
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 734
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 735
 $19 = __Znaj(256) | 0; //@line 736
 if (!___async) {
  HEAP32[___async_retval >> 2] = $19; //@line 740
  ___async_unwind = 0; //@line 741
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 312; //@line 743
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 745
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 747
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 749
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 751
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 753
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 755
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 757
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 759
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 761
 sp = STACKTOP; //@line 762
 return;
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 1201
 HEAP32[$0 + 20 >> 2] = 0; //@line 1203
 $5 = $0 + 16 | 0; //@line 1204
 HEAP32[$5 >> 2] = 0; //@line 1205
 if ($1 | 0) {
  $$034 = $1; //@line 1208
  $22 = 0; //@line 1208
  do {
   $22 = $22 + 1 | 0; //@line 1210
   $$034 = $$034 >>> 1; //@line 1211
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 1219
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1222
 HEAP32[$0 + 28 >> 2] = $1; //@line 1224
 HEAP32[$0 + 32 >> 2] = $2; //@line 1226
 HEAP32[$0 >> 2] = 0; //@line 1227
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1230
 HEAP8[$0 + 9 >> 0] = 0; //@line 1232
 HEAP8[$0 + 8 >> 0] = 0; //@line 1234
 HEAP8[$0 + 36 >> 0] = 0; //@line 1236
 HEAP32[$0 + 40 >> 2] = 0; //@line 1238
 HEAP32[$0 + 44 >> 2] = 0; //@line 1240
 HEAP8[$0 + 184 >> 0] = 0; //@line 1242
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1244
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 1247
  return $$033 | 0; //@line 1248
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1251
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 1254
  return $$033 | 0; //@line 1255
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1258
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 1261
 return $$033 | 0; //@line 1262
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_27($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17479
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17483
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 17486
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17487
 if (!$7) {
  if ($6) {
   $$06 = -3007; //@line 17491
   $12 = ___async_retval; //@line 17492
   HEAP32[$12 >> 2] = $$06; //@line 17493
   return;
  }
  $$06 = 0; //@line 17496
  $12 = ___async_retval; //@line 17497
  HEAP32[$12 >> 2] = $$06; //@line 17498
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 17502
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17503
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 17504
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 17507
   $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 17508
   $$expand_i1_val = $6 & 1; //@line 17509
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 17510
   sp = STACKTOP; //@line 17511
   return;
  }
  ___async_unwind = 0; //@line 17514
  HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 17515
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 17516
  $$expand_i1_val = $6 & 1; //@line 17517
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 17518
  sp = STACKTOP; //@line 17519
  return;
 }
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_26($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 17432
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17436
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 17439
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17440
 if (!$7) {
  if ($6) {
   $$06 = -3007; //@line 17444
   $12 = ___async_retval; //@line 17445
   HEAP32[$12 >> 2] = $$06; //@line 17446
   return;
  }
  $$06 = 0; //@line 17449
  $12 = ___async_retval; //@line 17450
  HEAP32[$12 >> 2] = $$06; //@line 17451
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 17455
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17456
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 17457
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 17460
   $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 17461
   $$expand_i1_val = $6 & 1; //@line 17462
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 17463
   sp = STACKTOP; //@line 17464
   return;
  }
  ___async_unwind = 0; //@line 17467
  HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 17468
  $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 17469
  $$expand_i1_val = $6 & 1; //@line 17470
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 17471
  sp = STACKTOP; //@line 17472
  return;
 }
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 11392
  $8 = $0; //@line 11392
  $9 = $1; //@line 11392
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11394
   $$0914 = $$0914 + -1 | 0; //@line 11398
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 11399
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11400
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 11408
   }
  }
  $$010$lcssa$off0 = $8; //@line 11413
  $$09$lcssa = $$0914; //@line 11413
 } else {
  $$010$lcssa$off0 = $0; //@line 11415
  $$09$lcssa = $2; //@line 11415
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 11419
 } else {
  $$012 = $$010$lcssa$off0; //@line 11421
  $$111 = $$09$lcssa; //@line 11421
  while (1) {
   $26 = $$111 + -1 | 0; //@line 11426
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 11427
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 11431
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 11434
    $$111 = $26; //@line 11434
   }
  }
 }
 return $$1$lcssa | 0; //@line 11438
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_21($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17282
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17286
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17288
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17290
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17292
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17294
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 17297
 _equeue_event_delay($4, $6); //@line 17298
 _equeue_event_dtor($4, 105); //@line 17299
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 17300
 $14 = _equeue_post($8, 106, $4) | 0; //@line 17301
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 17304
  $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 17305
  HEAP32[$15 >> 2] = $10; //@line 17306
  $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 17307
  HEAP32[$16 >> 2] = $12; //@line 17308
  sp = STACKTOP; //@line 17309
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 17313
 ___async_unwind = 0; //@line 17314
 HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 17315
 $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 17316
 HEAP32[$15 >> 2] = $10; //@line 17317
 $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 17318
 HEAP32[$16 >> 2] = $12; //@line 17319
 sp = STACKTOP; //@line 17320
 return;
}
function _main__async_cb_97($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 804
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 806
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 808
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 810
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 812
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 814
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 816
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 818
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 820
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 822
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 823
 __ZN9TCPSocket7connectEPKct($2, 4183, 80) | 0; //@line 824
 if (!___async) {
  ___async_unwind = 0; //@line 827
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 311; //@line 829
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 831
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 833
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 835
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 837
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 839
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 841
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 843
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 845
 HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 847
 sp = STACKTOP; //@line 848
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23215
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23221
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23223
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23225
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23227
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 23231
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 23234
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 23235
   if (!___async) {
    ___async_unwind = 0; //@line 23238
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 23240
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 23242
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 23244
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 23246
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 23248
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 23250
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 23252
   sp = STACKTOP; //@line 23253
   return;
  }
 }
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_107($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 3374
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3376
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3378
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3380
 $8 = HEAP32[$2 + 28 >> 2] | 0; //@line 3382
 if (!$8) {
  __ZdlPv($2); //@line 3385
  HEAP32[___async_retval >> 2] = -3007; //@line 3387
  return;
 }
 $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 3391
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 3392
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 3393
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3396
  $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 3397
  HEAP32[$12 >> 2] = $2; //@line 3398
  $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 3399
  HEAP32[$13 >> 2] = $6; //@line 3400
  sp = STACKTOP; //@line 3401
  return;
 }
 ___async_unwind = 0; //@line 3404
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3405
 $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 3406
 HEAP32[$12 >> 2] = $2; //@line 3407
 $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 3408
 HEAP32[$13 >> 2] = $6; //@line 3409
 sp = STACKTOP; //@line 3410
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 16059
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16061
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16065
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 16070
  dest = $2; //@line 16071
  src = $8; //@line 16071
  stop = dest + 60 | 0; //@line 16071
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 16071
   dest = dest + 4 | 0; //@line 16071
   src = src + 4 | 0; //@line 16071
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 16071
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16073
 _wait_ms(1); //@line 16074
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 58; //@line 16077
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 16078
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 16079
  sp = STACKTOP; //@line 16080
  return;
 }
 ___async_unwind = 0; //@line 16083
 HEAP32[$ReallocAsyncCtx2 >> 2] = 58; //@line 16084
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 16085
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 16086
 sp = STACKTOP; //@line 16087
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 4652
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 4657
   label = 4; //@line 4658
  } else {
   $$01519 = $0; //@line 4660
   $23 = $1; //@line 4660
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 4665
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 4668
    $23 = $6; //@line 4669
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 4673
     label = 4; //@line 4674
     break;
    } else {
     $$01519 = $6; //@line 4677
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 4683
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 4685
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 4693
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 4701
  } else {
   $$pn = $$0; //@line 4703
   while (1) {
    $19 = $$pn + 1 | 0; //@line 4705
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 4709
     break;
    } else {
     $$pn = $19; //@line 4712
    }
   }
  }
  $$sink = $$1$lcssa; //@line 4717
 }
 return $$sink - $1 | 0; //@line 4720
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 16574
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16576
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16580
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 16585
  dest = $2; //@line 16586
  src = $8; //@line 16586
  stop = dest + 60 | 0; //@line 16586
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 16586
   dest = dest + 4 | 0; //@line 16586
   src = src + 4 | 0; //@line 16586
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 16586
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16588
 _wait_ms(1); //@line 16589
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 16592
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 16593
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 16594
  sp = STACKTOP; //@line 16595
  return;
 }
 ___async_unwind = 0; //@line 16598
 HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 16599
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 16600
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 16601
 sp = STACKTOP; //@line 16602
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 14447
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 14454
   $10 = $1 + 16 | 0; //@line 14455
   $11 = HEAP32[$10 >> 2] | 0; //@line 14456
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 14459
    HEAP32[$1 + 24 >> 2] = $4; //@line 14461
    HEAP32[$1 + 36 >> 2] = 1; //@line 14463
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 14473
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 14478
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 14481
    HEAP8[$1 + 54 >> 0] = 1; //@line 14483
    break;
   }
   $21 = $1 + 24 | 0; //@line 14486
   $22 = HEAP32[$21 >> 2] | 0; //@line 14487
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 14490
    $28 = $4; //@line 14491
   } else {
    $28 = $22; //@line 14493
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 14502
   }
  }
 } while (0);
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_84($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18
 $15 = $4 + 12 | 0; //@line 20
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 21
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 22
 $16 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($6, $8, $10, 0, $4, $12) | 0; //@line 23
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 27
  ___async_unwind = 0; //@line 28
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 30
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $15; //@line 32
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $14; //@line 34
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $4; //@line 36
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 38
 sp = STACKTOP; //@line 39
 return;
}
function __ZN6Socket5closeEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 21548
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21550
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21552
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21554
 $7 = HEAP32[$2 >> 2] | 0; //@line 21555
 HEAP32[$2 >> 2] = 0; //@line 21556
 $8 = HEAP32[$4 >> 2] | 0; //@line 21557
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0; //@line 21560
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 21561
 $12 = FUNCTION_TABLE_iii[$11 & 15]($8, $7) | 0; //@line 21562
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 132; //@line 21565
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 21566
  HEAP32[$13 >> 2] = $4; //@line 21567
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 21568
  HEAP32[$14 >> 2] = $6; //@line 21569
  sp = STACKTOP; //@line 21570
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 21574
 ___async_unwind = 0; //@line 21575
 HEAP32[$ReallocAsyncCtx2 >> 2] = 132; //@line 21576
 $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 21577
 HEAP32[$13 >> 2] = $4; //@line 21578
 $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 21579
 HEAP32[$14 >> 2] = $6; //@line 21580
 sp = STACKTOP; //@line 21581
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_14($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16968
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16972
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16974
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16976
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16978
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16980
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16982
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16984
 $17 = $4 + 12 | 0; //@line 16986
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16987
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 16988
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 16989
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 16993
  ___async_unwind = 0; //@line 16994
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 16996
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 16998
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 17000
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 17002
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 17004
 sp = STACKTOP; //@line 17005
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_24($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17375
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17379
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17381
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17383
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17385
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 17388
 _equeue_event_dtor($4, 105); //@line 17389
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 17390
 $12 = _equeue_post($6, 106, $4) | 0; //@line 17391
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 17394
  $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 17395
  HEAP32[$13 >> 2] = $8; //@line 17396
  $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 17397
  HEAP32[$14 >> 2] = $10; //@line 17398
  sp = STACKTOP; //@line 17399
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 17403
 ___async_unwind = 0; //@line 17404
 HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 17405
 $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 17406
 HEAP32[$13 >> 2] = $8; //@line 17407
 $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 17408
 HEAP32[$14 >> 2] = $10; //@line 17409
 sp = STACKTOP; //@line 17410
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13733
 $1 = HEAP32[444] | 0; //@line 13734
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 13740
 } else {
  $19 = 0; //@line 13742
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 13748
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 13754
    $12 = HEAP32[$11 >> 2] | 0; //@line 13755
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 13761
     HEAP8[$12 >> 0] = 10; //@line 13762
     $22 = 0; //@line 13763
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13767
   $17 = ___overflow($1, 10) | 0; //@line 13768
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 335; //@line 13771
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 13773
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 13775
    sp = STACKTOP; //@line 13776
    return 0; //@line 13777
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13779
    $22 = $17 >> 31; //@line 13781
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 13788
 }
 return $22 | 0; //@line 13790
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_149($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13461
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13465
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13467
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13469
 $9 = $4 + 12 | 0; //@line 13471
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13472
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 13473
 $10 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($6, $8, $4) | 0; //@line 13474
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 205; //@line 13477
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 13478
  HEAP32[$11 >> 2] = $9; //@line 13479
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 13480
  HEAP32[$12 >> 2] = $4; //@line 13481
  sp = STACKTOP; //@line 13482
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 13486
 ___async_unwind = 0; //@line 13487
 HEAP32[$ReallocAsyncCtx5 >> 2] = 205; //@line 13488
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 13489
 HEAP32[$11 >> 2] = $9; //@line 13490
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 13491
 HEAP32[$12 >> 2] = $4; //@line 13492
 sp = STACKTOP; //@line 13493
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13005
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13007
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13009
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13011
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13013
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13015
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13017
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13019
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13021
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 13022
 $16 = FUNCTION_TABLE_iiii[$8 & 31]($4, $6, $AsyncRetVal) | 0; //@line 13023
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 13027
  ___async_unwind = 0; //@line 13028
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 122; //@line 13030
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 13032
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 13034
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 13036
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $12; //@line 13038
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 13040
 sp = STACKTOP; //@line 13041
 return;
}
function _mbed_vtracef__async_cb_120($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5436
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5438
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5440
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5442
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 5447
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5449
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 5454
 $16 = _snprintf($4, $6, 3567, $2) | 0; //@line 5455
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 5457
 $19 = $4 + $$18 | 0; //@line 5459
 $20 = $6 - $$18 | 0; //@line 5460
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 3645, $12) | 0; //@line 5468
  }
 }
 $23 = HEAP32[133] | 0; //@line 5471
 $24 = HEAP32[126] | 0; //@line 5472
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 5473
 FUNCTION_TABLE_vi[$23 & 511]($24); //@line 5474
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 5477
  sp = STACKTOP; //@line 5478
  return;
 }
 ___async_unwind = 0; //@line 5481
 HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 5482
 sp = STACKTOP; //@line 5483
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19400
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19402
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19404
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19406
 $7 = $2 + 12 | 0; //@line 19407
 $8 = HEAP32[$7 >> 2] | 0; //@line 19408
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 19411
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 19415
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 19416
 FUNCTION_TABLE_vii[$11 & 7]($6, $2); //@line 19417
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 19420
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 19421
  HEAP32[$12 >> 2] = $7; //@line 19422
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 19423
  HEAP32[$13 >> 2] = $4; //@line 19424
  sp = STACKTOP; //@line 19425
  return;
 }
 ___async_unwind = 0; //@line 19428
 HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 19429
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 19430
 HEAP32[$12 >> 2] = $7; //@line 19431
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 19432
 HEAP32[$13 >> 2] = $4; //@line 19433
 sp = STACKTOP; //@line 19434
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_75($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 23263
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23269
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23271
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23273
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23275
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 23280
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 23282
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 23283
 if (!___async) {
  ___async_unwind = 0; //@line 23286
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 23288
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 23290
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 23292
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 23294
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 23296
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 23298
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 23300
 sp = STACKTOP; //@line 23301
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_153($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13738
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13742
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13744
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13746
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13748
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13750
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13752
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13754
 $17 = $4 + 12 | 0; //@line 13756
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13757
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 13758
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 13759
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 13763
  ___async_unwind = 0; //@line 13764
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 13766
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 13768
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 13770
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 13772
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 13774
 sp = STACKTOP; //@line 13775
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_78($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23723
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23727
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23729
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23730
 if (!$$pr$i) {
  if (!$6) {
   return;
  }
  __ZdaPv($6); //@line 23737
  return;
 } else {
  $9 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 23741
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 23742
  FUNCTION_TABLE_vi[$9 & 511]($4); //@line 23743
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 269; //@line 23746
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 23747
   HEAP32[$10 >> 2] = $4; //@line 23748
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 23749
   HEAP32[$11 >> 2] = $6; //@line 23750
   sp = STACKTOP; //@line 23751
   return;
  }
  ___async_unwind = 0; //@line 23754
  HEAP32[$ReallocAsyncCtx3 >> 2] = 269; //@line 23755
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 23756
  HEAP32[$10 >> 2] = $4; //@line 23757
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 23758
  HEAP32[$11 >> 2] = $6; //@line 23759
  sp = STACKTOP; //@line 23760
  return;
 }
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2734
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2737
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2738
 $7 = FUNCTION_TABLE_ii[$6 & 31]($0) | 0; //@line 2739
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 79; //@line 2742
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2744
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2746
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 2748
  sp = STACKTOP; //@line 2749
  return 0; //@line 2750
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2752
 $12 = HEAP32[HEAP32[$7 >> 2] >> 2] | 0; //@line 2754
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2755
 $13 = FUNCTION_TABLE_iiiii[$12 & 15]($7, $1, $2, $3) | 0; //@line 2756
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 80; //@line 2759
  sp = STACKTOP; //@line 2760
  return 0; //@line 2761
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2763
  return $13 | 0; //@line 2764
 }
 return 0; //@line 2766
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17368
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17370
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17372
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17374
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 17376
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 17378
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 7146; //@line 17383
  HEAP32[$4 + 4 >> 2] = $6; //@line 17385
  _abort_message(7055, $4); //@line 17386
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 17389
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 17392
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 17393
 $16 = FUNCTION_TABLE_ii[$15 & 31]($12) | 0; //@line 17394
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 17398
  ___async_unwind = 0; //@line 17399
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 341; //@line 17401
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 17403
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 17405
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 17407
 sp = STACKTOP; //@line 17408
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23112
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23114
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23116
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23120
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 23124
  label = 4; //@line 23125
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 23130
   label = 4; //@line 23131
  } else {
   $$037$off039 = 3; //@line 23133
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 23137
  $17 = $8 + 40 | 0; //@line 23138
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 23141
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 23151
    $$037$off039 = $$037$off038; //@line 23152
   } else {
    $$037$off039 = $$037$off038; //@line 23154
   }
  } else {
   $$037$off039 = $$037$off038; //@line 23157
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 23160
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_46($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 18923
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18925
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18927
 $6 = HEAP32[$2 + 28 >> 2] | 0; //@line 18929
 if (!$6) {
  __ZdlPv($2); //@line 18932
  HEAP32[7844 + ($4 << 2) >> 2] = 0; //@line 18934
  return;
 }
 $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 18939
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 18940
 FUNCTION_TABLE_vi[$10 & 511]($2 + 16 | 0); //@line 18941
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 18944
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 18945
  HEAP32[$11 >> 2] = $2; //@line 18946
  $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 18947
  HEAP32[$12 >> 2] = $4; //@line 18948
  sp = STACKTOP; //@line 18949
  return;
 }
 ___async_unwind = 0; //@line 18952
 HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 18953
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 18954
 HEAP32[$11 >> 2] = $2; //@line 18955
 $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 18956
 HEAP32[$12 >> 2] = $4; //@line 18957
 sp = STACKTOP; //@line 18958
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14306
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 14315
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 14320
      HEAP32[$13 >> 2] = $2; //@line 14321
      $19 = $1 + 40 | 0; //@line 14322
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 14325
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14335
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 14339
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 14346
    }
   }
  }
 } while (0);
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 12628
 while (1) {
  if ((HEAPU8[5118 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 12635
   break;
  }
  $7 = $$016 + 1 | 0; //@line 12638
  if (($7 | 0) == 87) {
   $$01214 = 5206; //@line 12641
   $$115 = 87; //@line 12641
   label = 5; //@line 12642
   break;
  } else {
   $$016 = $7; //@line 12645
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 5206; //@line 12651
  } else {
   $$01214 = 5206; //@line 12653
   $$115 = $$016; //@line 12653
   label = 5; //@line 12654
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 12659
   $$113 = $$01214; //@line 12660
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 12664
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 12671
   if (!$$115) {
    $$012$lcssa = $$113; //@line 12674
    break;
   } else {
    $$01214 = $$113; //@line 12677
    label = 5; //@line 12678
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 12685
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_58($0) {
 $0 = $0 | 0;
 var $$4$ = 0, $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20814
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20818
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20820
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20822
 $$4$ = ($AsyncRetVal | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : $AsyncRetVal; //@line 20824
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 20825
 __ZN9UDPSocketD2Ev($4); //@line 20826
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 20829
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 20830
  HEAP32[$9 >> 2] = $6; //@line 20831
  $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 20832
  HEAP32[$10 >> 2] = $$4$; //@line 20833
  sp = STACKTOP; //@line 20834
  return;
 }
 ___async_unwind = 0; //@line 20837
 HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 20838
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 20839
 HEAP32[$9 >> 2] = $6; //@line 20840
 $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 20841
 HEAP32[$10 >> 2] = $$4$; //@line 20842
 sp = STACKTOP; //@line 20843
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 16118
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16124
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16126
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 16128
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16129
 $10 = HEAP32[$6 >> 2] | 0; //@line 16130
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 16131
 __ZL28nsapi_dns_query_async_deletei($10); //@line 16132
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 215; //@line 16135
  $11 = $ReallocAsyncCtx15 + 4 | 0; //@line 16136
  HEAP32[$11 >> 2] = $9; //@line 16137
  $12 = $ReallocAsyncCtx15 + 8 | 0; //@line 16138
  HEAP32[$12 >> 2] = $8; //@line 16139
  sp = STACKTOP; //@line 16140
  return;
 }
 ___async_unwind = 0; //@line 16143
 HEAP32[$ReallocAsyncCtx15 >> 2] = 215; //@line 16144
 $11 = $ReallocAsyncCtx15 + 4 | 0; //@line 16145
 HEAP32[$11 >> 2] = $9; //@line 16146
 $12 = $ReallocAsyncCtx15 + 8 | 0; //@line 16147
 HEAP32[$12 >> 2] = $8; //@line 16148
 sp = STACKTOP; //@line 16149
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 12701
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 12705
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 12708
   if (!$5) {
    $$0 = 0; //@line 12711
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 12717
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 12723
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 12730
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 12737
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 12744
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 12751
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 12758
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 12762
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 12772
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17936
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17942
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17944
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 17946
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 17947
 $10 = HEAP32[$6 >> 2] | 0; //@line 17948
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 17949
 __ZL28nsapi_dns_query_async_deletei($10); //@line 17950
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 244; //@line 17953
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 17954
  HEAP32[$11 >> 2] = $9; //@line 17955
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 17956
  HEAP32[$12 >> 2] = $8; //@line 17957
  sp = STACKTOP; //@line 17958
  return;
 }
 ___async_unwind = 0; //@line 17961
 HEAP32[$ReallocAsyncCtx9 >> 2] = 244; //@line 17962
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 17963
 HEAP32[$11 >> 2] = $9; //@line 17964
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 17965
 HEAP32[$12 >> 2] = $8; //@line 17966
 sp = STACKTOP; //@line 17967
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_209($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16959
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16961
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16963
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16965
 $7 = HEAP32[$2 >> 2] | 0; //@line 16966
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 16971
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 16972
 FUNCTION_TABLE_viii[$9 & 0]($4, $6, 0); //@line 16973
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 223; //@line 16976
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 16977
  HEAP32[$10 >> 2] = $2; //@line 16978
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 16979
  HEAP32[$11 >> 2] = $4; //@line 16980
  sp = STACKTOP; //@line 16981
  return;
 }
 ___async_unwind = 0; //@line 16984
 HEAP32[$ReallocAsyncCtx6 >> 2] = 223; //@line 16985
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 16986
 HEAP32[$10 >> 2] = $2; //@line 16987
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 16988
 HEAP32[$11 >> 2] = $4; //@line 16989
 sp = STACKTOP; //@line 16990
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2688
 $1 = $0 + 12 | 0; //@line 2689
 $2 = HEAP32[$1 >> 2] | 0; //@line 2690
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2694
   _mbed_assert_internal(4019, 4024, 528); //@line 2695
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 77; //@line 2698
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 2700
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 2702
    sp = STACKTOP; //@line 2703
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2706
    $7 = HEAP32[$1 >> 2] | 0; //@line 2708
    break;
   }
  } else {
   $7 = $2; //@line 2712
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 2715
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2716
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 2717
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 78; //@line 2720
  sp = STACKTOP; //@line 2721
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2724
  return;
 }
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 12897
 $32 = $0 + 3 | 0; //@line 12911
 $33 = HEAP8[$32 >> 0] | 0; //@line 12912
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 12914
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 12919
  $$sink21$lcssa = $32; //@line 12919
 } else {
  $$sink2123 = $32; //@line 12921
  $39 = $35; //@line 12921
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 12924
   $41 = HEAP8[$40 >> 0] | 0; //@line 12925
   $39 = $39 << 8 | $41 & 255; //@line 12927
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 12932
    $$sink21$lcssa = $40; //@line 12932
    break;
   } else {
    $$sink2123 = $40; //@line 12935
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 12942
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4299
 $1 = $0 + 12 | 0; //@line 4300
 $2 = HEAP32[$1 >> 2] | 0; //@line 4301
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4305
   _mbed_assert_internal(4019, 4024, 528); //@line 4306
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 128; //@line 4309
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 4311
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4313
    sp = STACKTOP; //@line 4314
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4317
    $7 = HEAP32[$1 >> 2] | 0; //@line 4319
    break;
   }
  } else {
   $7 = $2; //@line 4323
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 4326
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4327
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 4328
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 129; //@line 4331
  sp = STACKTOP; //@line 4332
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4335
  return;
 }
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13226
 $2 = $0 + 12 | 0; //@line 13228
 $3 = HEAP32[$2 >> 2] | 0; //@line 13229
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13233
   _mbed_assert_internal(4019, 4024, 528); //@line 13234
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 303; //@line 13237
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 13239
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 13241
    sp = STACKTOP; //@line 13242
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13245
    $8 = HEAP32[$2 >> 2] | 0; //@line 13247
    break;
   }
  } else {
   $8 = $3; //@line 13251
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 13254
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13256
 FUNCTION_TABLE_vi[$7 & 511]($0); //@line 13257
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 304; //@line 13260
  sp = STACKTOP; //@line 13261
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13264
  return;
 }
}
function _mbed_vtracef__async_cb_126($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 5821
 $3 = HEAP32[134] | 0; //@line 5825
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[126] | 0; //@line 5829
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5830
  FUNCTION_TABLE_vi[$3 & 511]($5); //@line 5831
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 5834
   sp = STACKTOP; //@line 5835
   return;
  }
  ___async_unwind = 0; //@line 5838
  HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 5839
  sp = STACKTOP; //@line 5840
  return;
 } else {
  $6 = HEAP32[133] | 0; //@line 5843
  $7 = HEAP32[126] | 0; //@line 5844
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 5845
  FUNCTION_TABLE_vi[$6 & 511]($7); //@line 5846
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 68; //@line 5849
   sp = STACKTOP; //@line 5850
   return;
  }
  ___async_unwind = 0; //@line 5853
  HEAP32[$ReallocAsyncCtx4 >> 2] = 68; //@line 5854
  sp = STACKTOP; //@line 5855
  return;
 }
}
function __ZN6SocketD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4022
 HEAP32[$0 >> 2] = 572; //@line 4023
 $2 = HEAP32[$0 + 44 >> 2] | 0; //@line 4025
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4031
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4032
   FUNCTION_TABLE_vi[$6 & 511]($0 + 32 | 0); //@line 4033
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 119; //@line 4036
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4038
    sp = STACKTOP; //@line 4039
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4042
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 28 >> 2] | 0; //@line 4048
 if (!$9) {
  return;
 }
 $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 4055
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4056
 FUNCTION_TABLE_vi[$13 & 511]($0 + 16 | 0); //@line 4057
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 120; //@line 4060
  sp = STACKTOP; //@line 4061
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4064
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19342
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19346
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19348
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19349
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 19353
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19357
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19358
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 19359
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 84; //@line 19362
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19363
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19364
  sp = STACKTOP; //@line 19365
  return;
 }
 ___async_unwind = 0; //@line 19368
 HEAP32[$ReallocAsyncCtx4 >> 2] = 84; //@line 19369
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19370
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19371
 sp = STACKTOP; //@line 19372
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_210($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16996
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16998
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17000
 $5 = HEAP32[$2 >> 2] | 0; //@line 17001
 if (!$5) {
  return;
 }
 $7 = HEAP32[$5 >> 2] | 0; //@line 17006
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 17007
 FUNCTION_TABLE_viii[$7 & 0]($4, -3007, 0); //@line 17008
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 217; //@line 17011
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 17012
  HEAP32[$8 >> 2] = $2; //@line 17013
  $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 17014
  HEAP32[$9 >> 2] = $4; //@line 17015
  sp = STACKTOP; //@line 17016
  return;
 }
 ___async_unwind = 0; //@line 17019
 HEAP32[$ReallocAsyncCtx2 >> 2] = 217; //@line 17020
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 17021
 HEAP32[$8 >> 2] = $2; //@line 17022
 $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 17023
 HEAP32[$9 >> 2] = $4; //@line 17024
 sp = STACKTOP; //@line 17025
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_42($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18284
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18286
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18288
 $5 = HEAP32[$2 >> 2] | 0; //@line 18289
 if (!$5) {
  return;
 }
 $7 = HEAP32[$5 >> 2] | 0; //@line 18294
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 18295
 FUNCTION_TABLE_viii[$7 & 0]($4, -3007, 0); //@line 18296
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 246; //@line 18299
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 18300
  HEAP32[$8 >> 2] = $2; //@line 18301
  $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 18302
  HEAP32[$9 >> 2] = $4; //@line 18303
  sp = STACKTOP; //@line 18304
  return;
 }
 ___async_unwind = 0; //@line 18307
 HEAP32[$ReallocAsyncCtx2 >> 2] = 246; //@line 18308
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 18309
 HEAP32[$8 >> 2] = $2; //@line 18310
 $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 18311
 HEAP32[$9 >> 2] = $4; //@line 18312
 sp = STACKTOP; //@line 18313
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14139
 STACKTOP = STACKTOP + 16 | 0; //@line 14140
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14140
 $1 = sp; //@line 14141
 HEAP32[$1 >> 2] = $varargs; //@line 14142
 $2 = HEAP32[412] | 0; //@line 14143
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14144
 _vfprintf($2, $0, $1) | 0; //@line 14145
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 342; //@line 14148
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14150
  sp = STACKTOP; //@line 14151
  STACKTOP = sp; //@line 14152
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14154
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14155
 _fputc(10, $2) | 0; //@line 14156
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 343; //@line 14159
  sp = STACKTOP; //@line 14160
  STACKTOP = sp; //@line 14161
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14163
  _abort(); //@line 14164
 }
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15886
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15888
 $6 = HEAP32[$0 + 16 >> 2] | 0; //@line 15892
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 15894
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 15896
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$0 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 15902
 } else {
  $$0 = 0; //@line 15904
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15906
 $14 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($6, $8, $10, $$0) | 0; //@line 15907
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 90; //@line 15910
  sp = STACKTOP; //@line 15911
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 15915
 ___async_unwind = 0; //@line 15916
 HEAP32[$ReallocAsyncCtx2 >> 2] = 90; //@line 15917
 sp = STACKTOP; //@line 15918
 return;
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 12831
 $23 = $0 + 2 | 0; //@line 12840
 $24 = HEAP8[$23 >> 0] | 0; //@line 12841
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 12844
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 12849
  $$lcssa = $24; //@line 12849
 } else {
  $$01618 = $23; //@line 12851
  $$019 = $27; //@line 12851
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 12853
   $31 = HEAP8[$30 >> 0] | 0; //@line 12854
   $$019 = ($$019 | $31 & 255) << 8; //@line 12857
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 12862
    $$lcssa = $31; //@line 12862
    break;
   } else {
    $$01618 = $30; //@line 12865
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 12872
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_151($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13509
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13513
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13515
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13516
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 13520
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 13524
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 13525
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 13526
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 13529
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 13530
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 13531
  sp = STACKTOP; //@line 13532
  return;
 }
 ___async_unwind = 0; //@line 13535
 HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 13536
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 13537
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 13538
 sp = STACKTOP; //@line 13539
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_16($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 17086
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17092
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17094
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 17095
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 17099
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 17103
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 17104
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 17105
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 17108
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 17109
  HEAP32[$13 >> 2] = $6; //@line 17110
  sp = STACKTOP; //@line 17111
  return;
 }
 ___async_unwind = 0; //@line 17114
 HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 17115
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 17116
 HEAP32[$13 >> 2] = $6; //@line 17117
 sp = STACKTOP; //@line 17118
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2912
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2915
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2916
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 2917
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 87; //@line 2920
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2922
  sp = STACKTOP; //@line 2923
  return 0; //@line 2924
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2926
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0; //@line 2929
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2930
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 2931
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 88; //@line 2934
  sp = STACKTOP; //@line 2935
  return 0; //@line 2936
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2938
  return $10 | 0; //@line 2939
 }
 return 0; //@line 2941
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12459
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12459
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12460
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 12461
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 12470
    $$016 = $9; //@line 12473
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 12473
   } else {
    $$016 = $0; //@line 12475
    $storemerge = 0; //@line 12475
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 12477
   $$0 = $$016; //@line 12478
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 12482
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 12488
   HEAP32[tempDoublePtr >> 2] = $2; //@line 12491
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 12491
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 12492
  }
 }
 return +$$0;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2877
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2880
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2881
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 2882
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 2885
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2887
  sp = STACKTOP; //@line 2888
  return 0; //@line 2889
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2891
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0; //@line 2894
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2895
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 2896
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 86; //@line 2899
  sp = STACKTOP; //@line 2900
  return 0; //@line 2901
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2903
  return $10 | 0; //@line 2904
 }
 return 0; //@line 2906
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23685
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23691
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23693
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23695
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23697
 $13 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 23699
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23700
 $14 = HEAP32[$6 >> 2] | 0; //@line 23701
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 23702
 __ZL28nsapi_dns_query_async_deletei($14); //@line 23703
 if (!___async) {
  ___async_unwind = 0; //@line 23706
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 266; //@line 23708
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $13; //@line 23710
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 23712
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $10; //@line 23714
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 23716
 sp = STACKTOP; //@line 23717
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_36($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 18099
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18105
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18107
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18109
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18111
 $13 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 18113
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18114
 $14 = HEAP32[$6 >> 2] | 0; //@line 18115
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 18116
 __ZL28nsapi_dns_query_async_deletei($14); //@line 18117
 if (!___async) {
  ___async_unwind = 0; //@line 18120
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 250; //@line 18122
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $13; //@line 18124
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $8; //@line 18126
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $10; //@line 18128
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $12; //@line 18130
 sp = STACKTOP; //@line 18131
 return;
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15777
 STACKTOP = STACKTOP + 16 | 0; //@line 15778
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15778
 $3 = sp; //@line 15779
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 15781
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 15784
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15785
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 15786
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 366; //@line 15789
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15791
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15793
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 15795
  sp = STACKTOP; //@line 15796
  STACKTOP = sp; //@line 15797
  return 0; //@line 15797
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15799
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 15803
 }
 STACKTOP = sp; //@line 15805
 return $8 & 1 | 0; //@line 15805
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, sp = 0;
 sp = STACKTOP; //@line 23646
 STACKTOP = STACKTOP + 32 | 0; //@line 23647
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 23647
 $$byval_copy = sp; //@line 23648
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23650
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23652
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23656
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 23657
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 23657
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 23657
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 23657
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 23657
 __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 23658
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) < 0 ? $AsyncRetVal : 0; //@line 23662
 STACKTOP = sp; //@line 23663
 return;
}
function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8.98846567431158e+307; //@line 9376
  $5 = ($1 | 0) > 2046; //@line 9378
  $7 = $1 + -2046 | 0; //@line 9380
  $$0 = $5 ? $3 * 8.98846567431158e+307 : $3; //@line 9385
  $$020 = $5 ? ($7 | 0) < 1023 ? $7 : 1023 : $1 + -1023 | 0; //@line 9385
 } else {
  if (($1 | 0) < -1022) {
   $10 = $0 * 2.2250738585072014e-308; //@line 9389
   $12 = ($1 | 0) < -2044; //@line 9391
   $14 = $1 + 2044 | 0; //@line 9393
   $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10; //@line 9398
   $$020 = $12 ? ($14 | 0) > -1022 ? $14 : -1022 : $1 + 1022 | 0; //@line 9398
  } else {
   $$0 = $0; //@line 9400
   $$020 = $1; //@line 9400
  }
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0; //@line 9404
 $18 = tempRet0; //@line 9405
 HEAP32[tempDoublePtr >> 2] = $17; //@line 9406
 HEAP32[tempDoublePtr + 4 >> 2] = $18; //@line 9406
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 17244
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17246
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17248
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17252
 $9 = $2 + 12 | 0; //@line 17254
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 17255
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 17256
 $10 = _equeue_alloc($4, 16) | 0; //@line 17257
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 17261
  ___async_unwind = 0; //@line 17262
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 103; //@line 17264
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $9; //@line 17266
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $8; //@line 17268
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 17270
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $2; //@line 17272
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $9; //@line 17274
 sp = STACKTOP; //@line 17275
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19133
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19141
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19143
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19145
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19147
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19149
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19151
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19153
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 19164
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 19165
 HEAP32[$10 >> 2] = 0; //@line 19166
 HEAP32[$12 >> 2] = 0; //@line 19167
 HEAP32[$14 >> 2] = 0; //@line 19168
 HEAP32[$2 >> 2] = 0; //@line 19169
 $33 = HEAP32[$16 >> 2] | 0; //@line 19170
 HEAP32[$16 >> 2] = $33 | $18; //@line 19175
 if ($20 | 0) {
  ___unlockfile($22); //@line 19178
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 19181
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_73($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23070
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23072
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23074
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23076
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 20 >> 2] = $AsyncRetVal; //@line 23078
 _strcpy($AsyncRetVal, $4) | 0; //@line 23079
 $11 = _emscripten_asm_const_i(9) | 0; //@line 23080
 $13 = (($11 | 0) < 0) << 31 >> 31; //@line 23082
 $14 = ___muldi3($6 | 0, 0, 1e3, 0) | 0; //@line 23083
 $16 = _i64Add($14 | 0, tempRet0 | 0, $11 | 0, $13 | 0) | 0; //@line 23085
 $18 = HEAP32[$8 >> 2] | 0; //@line 23087
 $20 = $18 + 24 | 0; //@line 23089
 HEAP32[$20 >> 2] = $16; //@line 23091
 HEAP32[$20 + 4 >> 2] = tempRet0; //@line 23094
 $25 = $18 + 32 | 0; //@line 23096
 HEAP32[$25 >> 2] = $11; //@line 23098
 HEAP32[$25 + 4 >> 2] = $13; //@line 23101
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_146($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13380
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13388
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13390
 $11 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 13391
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 84 >> 2] | 0; //@line 13394
 $15 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 13395
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 13396
 FUNCTION_TABLE_viiii[$14 & 7]($11, $15, 126, $8); //@line 13397
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 13400
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 13401
  HEAP32[$16 >> 2] = $10; //@line 13402
  sp = STACKTOP; //@line 13403
  return;
 }
 ___async_unwind = 0; //@line 13406
 HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 13407
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 13408
 HEAP32[$16 >> 2] = $10; //@line 13409
 sp = STACKTOP; //@line 13410
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb_214($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17481
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17487
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17488
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 17489
 if (!$$pre$i$i) {
  HEAP32[___async_retval >> 2] = 0; //@line 17493
  return;
 }
 $10 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 17498
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17499
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 17500
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 279; //@line 17503
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 17504
  HEAP32[$11 >> 2] = $6; //@line 17505
  sp = STACKTOP; //@line 17506
  return;
 }
 ___async_unwind = 0; //@line 17509
 HEAP32[$ReallocAsyncCtx3 >> 2] = 279; //@line 17510
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 17511
 HEAP32[$11 >> 2] = $6; //@line 17512
 sp = STACKTOP; //@line 17513
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_85($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 45
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 49
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 51
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 52
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 56
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 60
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 61
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 62
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 65
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 66
  HEAP32[$11 >> 2] = $4; //@line 67
  sp = STACKTOP; //@line 68
  return;
 }
 ___async_unwind = 0; //@line 71
 HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 72
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 73
 HEAP32[$11 >> 2] = $4; //@line 74
 sp = STACKTOP; //@line 75
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14662
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14668
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 14671
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14674
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14675
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 14676
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 348; //@line 14679
    sp = STACKTOP; //@line 14680
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14683
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_vtracef__async_cb_123($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 5552
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5556
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 5561
 $$pre = HEAP32[136] | 0; //@line 5562
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 5563
 FUNCTION_TABLE_v[$$pre & 7](); //@line 5564
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 5567
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 5568
  HEAP32[$6 >> 2] = $4; //@line 5569
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 5570
  HEAP32[$7 >> 2] = $5; //@line 5571
  sp = STACKTOP; //@line 5572
  return;
 }
 ___async_unwind = 0; //@line 5575
 HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 5576
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 5577
 HEAP32[$6 >> 2] = $4; //@line 5578
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 5579
 HEAP32[$7 >> 2] = $5; //@line 5580
 sp = STACKTOP; //@line 5581
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_41($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18247
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18249
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18251
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18253
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18255
 $9 = HEAP32[$2 >> 2] | 0; //@line 18256
 if (!$9) {
  _free($6); //@line 18259
  return;
 }
 $11 = HEAP32[$9 >> 2] | 0; //@line 18262
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 18263
 FUNCTION_TABLE_viii[$11 & 0]($4, -3019, 0); //@line 18264
 if (!___async) {
  ___async_unwind = 0; //@line 18267
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 252; //@line 18269
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 18271
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 18273
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 18275
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 18277
 sp = STACKTOP; //@line 18278
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_155($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 13856
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13862
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13864
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 13865
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 13869
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 13873
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 13874
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 13875
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 13878
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 13879
  HEAP32[$13 >> 2] = $6; //@line 13880
  sp = STACKTOP; //@line 13881
  return;
 }
 ___async_unwind = 0; //@line 13884
 HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 13885
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 13886
 HEAP32[$13 >> 2] = $6; //@line 13887
 sp = STACKTOP; //@line 13888
 return;
}
function _mbed_vtracef__async_cb_122($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 5519
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5521
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 5526
 $$pre = HEAP32[136] | 0; //@line 5527
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 5528
 FUNCTION_TABLE_v[$$pre & 7](); //@line 5529
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 5532
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 5533
  HEAP32[$5 >> 2] = $2; //@line 5534
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 5535
  HEAP32[$6 >> 2] = $4; //@line 5536
  sp = STACKTOP; //@line 5537
  return;
 }
 ___async_unwind = 0; //@line 5540
 HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 5541
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 5542
 HEAP32[$5 >> 2] = $2; //@line 5543
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 5544
 HEAP32[$6 >> 2] = $4; //@line 5545
 sp = STACKTOP; //@line 5546
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_166($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14705
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14709
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14711
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14713
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 14715
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 14716
 FUNCTION_TABLE_viii[$9 & 0]($4, 0, $6); //@line 14717
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 92; //@line 14720
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 14721
  HEAP32[$10 >> 2] = $8; //@line 14722
  sp = STACKTOP; //@line 14723
  return;
 }
 ___async_unwind = 0; //@line 14726
 HEAP32[$ReallocAsyncCtx >> 2] = 92; //@line 14727
 $10 = $ReallocAsyncCtx + 4 | 0; //@line 14728
 HEAP32[$10 >> 2] = $8; //@line 14729
 sp = STACKTOP; //@line 14730
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15661
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 15663
 $8 = $7 >> 8; //@line 15664
 if (!($7 & 1)) {
  $$0 = $8; //@line 15668
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 15673
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 15675
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 15678
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15683
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 15684
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 364; //@line 15687
  sp = STACKTOP; //@line 15688
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15691
  return;
 }
}
function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $2 = 0, $4 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13885
 $$ = ($0 | 0) == 0 ? 1 : $0; //@line 13887
 while (1) {
  $2 = _malloc($$) | 0; //@line 13889
  if ($2 | 0) {
   $$lcssa = $2; //@line 13892
   label = 7; //@line 13893
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0; //@line 13896
  if (!$4) {
   $$lcssa = 0; //@line 13899
   label = 7; //@line 13900
   break;
  }
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13903
  FUNCTION_TABLE_v[$4 & 7](); //@line 13904
  if (___async) {
   label = 5; //@line 13907
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13910
 }
 if ((label | 0) == 5) {
  HEAP32[$AsyncCtx >> 2] = 336; //@line 13913
  HEAP32[$AsyncCtx + 4 >> 2] = $$; //@line 13915
  sp = STACKTOP; //@line 13916
  return 0; //@line 13917
 } else if ((label | 0) == 7) {
  return $$lcssa | 0; //@line 13920
 }
 return 0; //@line 13922
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14831
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14837
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 14840
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 14843
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14844
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 14845
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 351; //@line 14848
    sp = STACKTOP; //@line 14849
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14852
    break;
   }
  }
 } while (0);
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_54($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19705
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19707
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19715
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19717
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19719
 _free(HEAP32[$0 + 16 >> 2] | 0); //@line 19720
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 19721
 $15 = __ZN6Socket5closeEv($10) | 0; //@line 19722
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 19726
  ___async_unwind = 0; //@line 19727
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 19729
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 19731
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $12; //@line 19733
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $14; //@line 19735
 sp = STACKTOP; //@line 19736
 return;
}
function _mbed_error_vfprintf__async_cb_2($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16024
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 16026
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16028
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16030
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16032
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16034
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 16036
 _serial_putc(7868, $2 << 24 >> 24); //@line 16037
 if (!___async) {
  ___async_unwind = 0; //@line 16040
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 300; //@line 16042
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 16044
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 16046
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 16048
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 16050
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 16052
 sp = STACKTOP; //@line 16053
 return;
}
function ___dynamic_cast__async_cb_216($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17579
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17581
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17583
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17589
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 17604
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 17620
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 17625
    break;
   }
  default:
   {
    $$0 = 0; //@line 17629
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 17634
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15703
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 15705
 $7 = $6 >> 8; //@line 15706
 if (!($6 & 1)) {
  $$0 = $7; //@line 15710
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 15715
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 15717
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 15720
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15725
 FUNCTION_TABLE_viiiii[$16 & 3]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 15726
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 365; //@line 15729
  sp = STACKTOP; //@line 15730
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15733
  return;
 }
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_198($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 16275
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16281
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16283
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16285
 $11 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 16287
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16288
 $12 = HEAP32[$6 >> 2] | 0; //@line 16289
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 16290
 __ZL28nsapi_dns_query_async_deletei($12); //@line 16291
 if (!___async) {
  ___async_unwind = 0; //@line 16294
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 221; //@line 16296
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $11; //@line 16298
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $8; //@line 16300
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $10; //@line 16302
 sp = STACKTOP; //@line 16303
 return;
}
function __ZN6Socket5closeEv__async_cb_65($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21587
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21591
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21593
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 21594
 $8 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0; //@line 21597
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 21598
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 21599
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 133; //@line 21602
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 21603
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 21604
  sp = STACKTOP; //@line 21605
  return;
 }
 ___async_unwind = 0; //@line 21608
 HEAP32[$ReallocAsyncCtx3 >> 2] = 133; //@line 21609
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 21610
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 21611
 sp = STACKTOP; //@line 21612
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17897
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17899
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17901
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17903
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17905
 $9 = HEAP32[HEAP32[$AsyncRetVal >> 2] >> 2] | 0; //@line 17907
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17908
 $10 = FUNCTION_TABLE_iiiii[$9 & 15]($AsyncRetVal, $2, $4, $6) | 0; //@line 17909
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 80; //@line 17912
  sp = STACKTOP; //@line 17913
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 17917
 ___async_unwind = 0; //@line 17918
 HEAP32[$ReallocAsyncCtx2 >> 2] = 80; //@line 17919
 sp = STACKTOP; //@line 17920
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15618
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 15620
 $6 = $5 >> 8; //@line 15621
 if (!($5 & 1)) {
  $$0 = $6; //@line 15625
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 15630
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 15632
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 15635
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15640
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 15641
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 363; //@line 15644
  sp = STACKTOP; //@line 15645
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15648
  return;
 }
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_10($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16436
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16440
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16442
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16444
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16446
 $13 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 116 >> 2] | 0; //@line 16449
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16450
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($4, $6, $8, $10) | 0; //@line 16451
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 56; //@line 16454
  sp = STACKTOP; //@line 16455
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 16459
 ___async_unwind = 0; //@line 16460
 HEAP32[$ReallocAsyncCtx2 >> 2] = 56; //@line 16461
 sp = STACKTOP; //@line 16462
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_23($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17342
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17344
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17346
 $7 = $2 + 12 | 0; //@line 17350
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 17351
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 17352
 $8 = _equeue_alloc($4, 16) | 0; //@line 17353
 if (!___async) {
  HEAP32[___async_retval >> 2] = $8; //@line 17357
  ___async_unwind = 0; //@line 17358
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 110; //@line 17360
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $7; //@line 17362
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 17364
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $2; //@line 17366
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $7; //@line 17368
 sp = STACKTOP; //@line 17369
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 11457
 STACKTOP = STACKTOP + 256 | 0; //@line 11458
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 11458
 $5 = sp; //@line 11459
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 11465
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 11469
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 11472
   $$011 = $9; //@line 11473
   do {
    _out_670($0, $5, 256); //@line 11475
    $$011 = $$011 + -256 | 0; //@line 11476
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 11485
  } else {
   $$0$lcssa = $9; //@line 11487
  }
  _out_670($0, $5, $$0$lcssa); //@line 11489
 }
 STACKTOP = sp; //@line 11491
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_113($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4447
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4451
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4453
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4455
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4457
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 4459
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 4460
 FUNCTION_TABLE_viii[$11 & 0]($4, 0, $6); //@line 4461
 if (!___async) {
  ___async_unwind = 0; //@line 4464
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 171; //@line 4466
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 4468
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 4470
 sp = STACKTOP; //@line 4471
 return;
}
function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0; //@line 9750
 $3 = HEAP8[$1 >> 0] | 0; //@line 9752
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 9756
 $7 = $0 + 20 | 0; //@line 9757
 $9 = $0 + 28 | 0; //@line 9759
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0; //@line 9765
 }
 HEAP32[$0 + 16 >> 2] = 0; //@line 9768
 HEAP32[$9 >> 2] = 0; //@line 9769
 HEAP32[$7 >> 2] = 0; //@line 9770
 $15 = HEAP32[$0 >> 2] | 0; //@line 9771
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 9779
  HEAP32[$0 + 8 >> 2] = $23; //@line 9781
  HEAP32[$0 + 4 >> 2] = $23; //@line 9783
  $$0 = $15 << 27 >> 31; //@line 9786
 } else {
  HEAP32[$0 >> 2] = $15 | 32; //@line 9789
  $$0 = -1; //@line 9790
 }
 return $$0 | 0; //@line 9792
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_199($0) {
 $0 = $0 | 0;
 var $$pr$i72 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16309
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16313
 $$pr$i72 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16314
 if (!$$pr$i72) {
  return;
 }
 $7 = HEAP32[$$pr$i72 + 8 >> 2] | 0; //@line 16320
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 16321
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 16322
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 224; //@line 16325
  $8 = $ReallocAsyncCtx7 + 4 | 0; //@line 16326
  HEAP32[$8 >> 2] = $4; //@line 16327
  sp = STACKTOP; //@line 16328
  return;
 }
 ___async_unwind = 0; //@line 16331
 HEAP32[$ReallocAsyncCtx7 >> 2] = 224; //@line 16332
 $8 = $ReallocAsyncCtx7 + 4 | 0; //@line 16333
 HEAP32[$8 >> 2] = $4; //@line 16334
 sp = STACKTOP; //@line 16335
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_6($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16296
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16298
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16300
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16302
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16304
 $11 = HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] | 0; //@line 16307
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16308
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($2, $4, $6, $8) | 0; //@line 16309
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 43; //@line 16312
  sp = STACKTOP; //@line 16313
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 16317
 ___async_unwind = 0; //@line 16318
 HEAP32[$ReallocAsyncCtx2 >> 2] = 43; //@line 16319
 sp = STACKTOP; //@line 16320
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_33($0) {
 $0 = $0 | 0;
 var $$pr$i52 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17973
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17977
 $$pr$i52 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17978
 if (!$$pr$i52) {
  return;
 }
 $7 = HEAP32[$$pr$i52 + 8 >> 2] | 0; //@line 17984
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 17985
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 17986
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 247; //@line 17989
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 17990
  HEAP32[$8 >> 2] = $4; //@line 17991
  sp = STACKTOP; //@line 17992
  return;
 }
 ___async_unwind = 0; //@line 17995
 HEAP32[$ReallocAsyncCtx3 >> 2] = 247; //@line 17996
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 17997
 HEAP32[$8 >> 2] = $4; //@line 17998
 sp = STACKTOP; //@line 17999
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 720
 $3 = HEAP32[$1 >> 2] | 0; //@line 721
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 723
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0$i = -3012; //@line 729
  return $$0$i | 0; //@line 730
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 732
 _wait_ms(1); //@line 733
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 50; //@line 736
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 738
  sp = STACKTOP; //@line 739
  return 0; //@line 740
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 742
 HEAP8[$1 + 8 >> 0] = 1; //@line 744
 $$0$i = 0; //@line 745
 return $$0$i | 0; //@line 746
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_195($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16155
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16159
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16160
 if (!$$pr$i) {
  return;
 }
 $7 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 16166
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 16167
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 16168
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 16171
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 16172
  HEAP32[$8 >> 2] = $4; //@line 16173
  sp = STACKTOP; //@line 16174
  return;
 }
 ___async_unwind = 0; //@line 16177
 HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 16178
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 16179
 HEAP32[$8 >> 2] = $4; //@line 16180
 sp = STACKTOP; //@line 16181
 return;
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 3155
  return $$1 | 0; //@line 3156
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 3161
  $$1 = 0; //@line 3162
  return $$1 | 0; //@line 3163
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 3170
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 3174
  return $$1 | 0; //@line 3175
 }
 $14 = _malloc($1) | 0; //@line 3177
 if (!$14) {
  $$1 = 0; //@line 3180
  return $$1 | 0; //@line 3181
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0; //@line 3184
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 3189
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 3192
 _free($0); //@line 3193
 $$1 = $14; //@line 3194
 return $$1 | 0; //@line 3195
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 317
 $3 = HEAP32[$1 >> 2] | 0; //@line 318
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 320
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0 = -3012; //@line 326
  return $$0 | 0; //@line 327
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 329
 _wait_ms(1); //@line 330
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 37; //@line 333
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 335
  sp = STACKTOP; //@line 336
  return 0; //@line 337
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 339
 HEAP8[$1 + 8 >> 0] = 1; //@line 341
 $$0 = 0; //@line 342
 return $$0 | 0; //@line 343
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 12701
 STACKTOP = STACKTOP + 16 | 0; //@line 12702
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12702
 $vararg_buffer = sp; //@line 12703
 HEAP32[$vararg_buffer >> 2] = $0; //@line 12704
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 12706
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 12708
 _mbed_error_printf(3896, $vararg_buffer); //@line 12709
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12710
 _mbed_die(); //@line 12711
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 280; //@line 12714
  sp = STACKTOP; //@line 12715
  STACKTOP = sp; //@line 12716
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12718
  STACKTOP = sp; //@line 12719
  return;
 }
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_39($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 18195
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18197
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18199
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18201
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18203
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 18204
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 18205
 if (!___async) {
  ___async_unwind = 0; //@line 18208
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 251; //@line 18210
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 18212
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 18214
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $6; //@line 18216
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $8; //@line 18218
 sp = STACKTOP; //@line 18219
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_82($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 23977
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23979
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23981
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23983
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23985
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 23986
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 23987
 if (!___async) {
  ___async_unwind = 0; //@line 23990
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 267; //@line 23992
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 23994
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 23996
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 23998
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 24000
 sp = STACKTOP; //@line 24001
 return;
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4499
 STACKTOP = STACKTOP + 32 | 0; //@line 4500
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4500
 $vararg_buffer = sp; //@line 4501
 $3 = sp + 20 | 0; //@line 4502
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4506
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 4508
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 4510
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 4512
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 4514
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 4519
  $10 = -1; //@line 4520
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 4523
 }
 STACKTOP = sp; //@line 4525
 return $10 | 0; //@line 4525
}
function __ZN12NetworkStack14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 3429
 STACKTOP = STACKTOP + 48 | 0; //@line 3430
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 3430
 $$byval_copy = sp + 20 | 0; //@line 3431
 $2 = sp; //@line 3432
 __ZNK13SocketAddress8get_addrEv($2, $1); //@line 3433
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 3434
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 3434
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 3434
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 3434
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 3434
 $3 = _nsapi_dns_add_server($$byval_copy) | 0; //@line 3435
 STACKTOP = sp; //@line 3436
 return $3 | 0; //@line 3436
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13609
 STACKTOP = STACKTOP + 16 | 0; //@line 13610
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13610
 $1 = sp; //@line 13611
 HEAP32[$1 >> 2] = $varargs; //@line 13612
 $2 = HEAP32[444] | 0; //@line 13613
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13614
 $3 = _vfprintf($2, $0, $1) | 0; //@line 13615
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 332; //@line 13618
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13620
  sp = STACKTOP; //@line 13621
  STACKTOP = sp; //@line 13622
  return 0; //@line 13622
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13624
  STACKTOP = sp; //@line 13625
  return $3 | 0; //@line 13625
 }
 return 0; //@line 13627
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13336
 STACKTOP = STACKTOP + 16 | 0; //@line 13337
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13337
 $3 = sp; //@line 13338
 HEAP32[$3 >> 2] = $varargs; //@line 13339
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13340
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 13341
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 328; //@line 13344
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 13346
  sp = STACKTOP; //@line 13347
  STACKTOP = sp; //@line 13348
  return 0; //@line 13348
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13350
  STACKTOP = sp; //@line 13351
  return $4 | 0; //@line 13351
 }
 return 0; //@line 13353
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4342
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 4345
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 4347
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 4349
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 4354
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 4359
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4361
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 4362
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 130; //@line 4365
  sp = STACKTOP; //@line 4366
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4369
  return;
 }
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13567
 STACKTOP = STACKTOP + 16 | 0; //@line 13568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13568
 $2 = sp; //@line 13569
 HEAP32[$2 >> 2] = $varargs; //@line 13570
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13571
 $3 = _vsprintf($0, $1, $2) | 0; //@line 13572
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 330; //@line 13575
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 13577
  sp = STACKTOP; //@line 13578
  STACKTOP = sp; //@line 13579
  return 0; //@line 13579
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13581
  STACKTOP = sp; //@line 13582
  return $3 | 0; //@line 13582
 }
 return 0; //@line 13584
}
function _mbed_vtracef__async_cb_121($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 5489
 HEAP32[130] = HEAP32[128]; //@line 5491
 $2 = HEAP32[136] | 0; //@line 5492
 if (!$2) {
  return;
 }
 $4 = HEAP32[137] | 0; //@line 5497
 HEAP32[137] = 0; //@line 5498
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 5499
 FUNCTION_TABLE_v[$2 & 7](); //@line 5500
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 5503
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 5504
  HEAP32[$5 >> 2] = $4; //@line 5505
  sp = STACKTOP; //@line 5506
  return;
 }
 ___async_unwind = 0; //@line 5509
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 5510
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 5511
 HEAP32[$5 >> 2] = $4; //@line 5512
 sp = STACKTOP; //@line 5513
 return;
}
function _mbed_vtracef__async_cb_118($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 5225
 HEAP32[130] = HEAP32[128]; //@line 5227
 $2 = HEAP32[136] | 0; //@line 5228
 if (!$2) {
  return;
 }
 $4 = HEAP32[137] | 0; //@line 5233
 HEAP32[137] = 0; //@line 5234
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 5235
 FUNCTION_TABLE_v[$2 & 7](); //@line 5236
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 5239
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 5240
  HEAP32[$5 >> 2] = $4; //@line 5241
  sp = STACKTOP; //@line 5242
  return;
 }
 ___async_unwind = 0; //@line 5245
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 5246
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 5247
 HEAP32[$5 >> 2] = $4; //@line 5248
 sp = STACKTOP; //@line 5249
 return;
}
function _mbed_vtracef__async_cb_117($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 5195
 HEAP32[130] = HEAP32[128]; //@line 5197
 $2 = HEAP32[136] | 0; //@line 5198
 if (!$2) {
  return;
 }
 $4 = HEAP32[137] | 0; //@line 5203
 HEAP32[137] = 0; //@line 5204
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 5205
 FUNCTION_TABLE_v[$2 & 7](); //@line 5206
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 5209
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 5210
  HEAP32[$5 >> 2] = $4; //@line 5211
  sp = STACKTOP; //@line 5212
  return;
 }
 ___async_unwind = 0; //@line 5215
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 5216
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 5217
 HEAP32[$5 >> 2] = $4; //@line 5218
 sp = STACKTOP; //@line 5219
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 14384
 $5 = HEAP32[$4 >> 2] | 0; //@line 14385
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 14389
   HEAP32[$1 + 24 >> 2] = $3; //@line 14391
   HEAP32[$1 + 36 >> 2] = 1; //@line 14393
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 14397
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 14400
    HEAP32[$1 + 24 >> 2] = 2; //@line 14402
    HEAP8[$1 + 54 >> 0] = 1; //@line 14404
    break;
   }
   $10 = $1 + 24 | 0; //@line 14407
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 14411
   }
  }
 } while (0);
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17143
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17145
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17147
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 12 >> 2] | 0; //@line 17150
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17151
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 17152
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 88; //@line 17155
  sp = STACKTOP; //@line 17156
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 17160
 ___async_unwind = 0; //@line 17161
 HEAP32[$ReallocAsyncCtx2 >> 2] = 88; //@line 17162
 sp = STACKTOP; //@line 17163
 return;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16765
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16767
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16769
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 8 >> 2] | 0; //@line 16772
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16773
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 16774
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 86; //@line 16777
  sp = STACKTOP; //@line 16778
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 16782
 ___async_unwind = 0; //@line 16783
 HEAP32[$ReallocAsyncCtx2 >> 2] = 86; //@line 16784
 sp = STACKTOP; //@line 16785
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1384
 $4 = _equeue_tick() | 0; //@line 1386
 HEAP32[$2 + -4 >> 2] = $1; //@line 1388
 $6 = $2 + -16 | 0; //@line 1389
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 1392
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1393
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 1394
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 60; //@line 1397
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1399
  sp = STACKTOP; //@line 1400
  return 0; //@line 1401
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1403
  _equeue_sema_signal($0 + 48 | 0); //@line 1405
  return $9 | 0; //@line 1406
 }
 return 0; //@line 1408
}
function __ZneRK13SocketAddressS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $5 = 0, label = 0;
 if (__ZNK13SocketAddresscvbEv($0) | 0) {
  label = 3; //@line 5057
 } else {
  if (__ZNK13SocketAddresscvbEv($1) | 0) {
   label = 3; //@line 5061
  } else {
   $$0$i = 1; //@line 5063
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = HEAP32[$0 + 40 >> 2] | 0; //@line 5069
   if (($5 | 0) == (HEAP32[$1 + 40 >> 2] | 0)) {
    $10 = $0 + 44 | 0; //@line 5075
    $11 = $1 + 44 | 0; //@line 5076
    if (($5 | 0) == 1) {
     $$0$i = (_memcmp($10, $11, 4) | 0) == 0; //@line 5080
     break;
    } else {
     $$0$i = (_memcmp($10, $11, 16) | 0) == 0; //@line 5085
     break;
    }
   } else {
    $$0$i = 0; //@line 5089
   }
  }
 } while (0);
 return $$0$i ^ 1 | 0; //@line 5094
}
function __Znwj__async_cb($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16191
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16193
 $3 = _malloc($2) | 0; //@line 16194
 if (!$3) {
  $5 = __ZSt15get_new_handlerv() | 0; //@line 16197
  if (!$5) {
   $$lcssa = 0; //@line 16200
  } else {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 16202
   FUNCTION_TABLE_v[$5 & 7](); //@line 16203
   if (!___async) {
    ___async_unwind = 0; //@line 16206
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 336; //@line 16208
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 16210
   sp = STACKTOP; //@line 16211
   return;
  }
 } else {
  $$lcssa = $3; //@line 16215
 }
 HEAP32[___async_retval >> 2] = $$lcssa; //@line 16218
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13198
 $2 = HEAP32[444] | 0; //@line 13199
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13200
 _putc($1, $2) | 0; //@line 13201
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 301; //@line 13204
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 13206
  sp = STACKTOP; //@line 13207
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13210
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13211
 _fflush($2) | 0; //@line 13212
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 302; //@line 13215
  sp = STACKTOP; //@line 13216
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13219
  return;
 }
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 13426
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13430
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13432
 $7 = $4 + 12 | 0; //@line 13434
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 13435
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 13436
 __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(7816, $6, $4) | 0; //@line 13437
 if (!___async) {
  ___async_unwind = 0; //@line 13440
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 202; //@line 13442
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $7; //@line 13444
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 13446
 sp = STACKTOP; //@line 13447
 return;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14934
 STACKTOP = STACKTOP + 16 | 0; //@line 14935
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14935
 $vararg_buffer = sp; //@line 14936
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14937
 FUNCTION_TABLE_v[$0 & 7](); //@line 14938
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 353; //@line 14941
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 14943
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14945
  sp = STACKTOP; //@line 14946
  STACKTOP = sp; //@line 14947
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14949
  _abort_message(7437, $vararg_buffer); //@line 14950
 }
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 4606
 $3 = HEAP8[$1 >> 0] | 0; //@line 4607
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 4612
  $$lcssa8 = $2; //@line 4612
 } else {
  $$011 = $1; //@line 4614
  $$0710 = $0; //@line 4614
  do {
   $$0710 = $$0710 + 1 | 0; //@line 4616
   $$011 = $$011 + 1 | 0; //@line 4617
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 4618
   $9 = HEAP8[$$011 >> 0] | 0; //@line 4619
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 4624
  $$lcssa8 = $8; //@line 4624
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 4634
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 13301
  } else {
   $$01318 = $0; //@line 13303
   $$01417 = $2; //@line 13303
   $$019 = $1; //@line 13303
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 13305
    $5 = HEAP8[$$019 >> 0] | 0; //@line 13306
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 13311
    if (!$$01417) {
     $14 = 0; //@line 13316
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 13319
     $$019 = $$019 + 1 | 0; //@line 13319
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 13325
  }
 } while (0);
 return $14 | 0; //@line 13328
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_152($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13545
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13549
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 13550
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 13554
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 13558
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 13559
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 13560
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 203; //@line 13563
  sp = STACKTOP; //@line 13564
  return;
 }
 ___async_unwind = 0; //@line 13567
 HEAP32[$ReallocAsyncCtx2 >> 2] = 203; //@line 13568
 sp = STACKTOP; //@line 13569
 return;
}
function _mbed_die__async_cb_189($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 15840
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15842
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15844
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 15845
 _wait_ms(150); //@line 15846
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 283; //@line 15849
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 15850
  HEAP32[$4 >> 2] = $2; //@line 15851
  sp = STACKTOP; //@line 15852
  return;
 }
 ___async_unwind = 0; //@line 15855
 HEAP32[$ReallocAsyncCtx14 >> 2] = 283; //@line 15856
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 15857
 HEAP32[$4 >> 2] = $2; //@line 15858
 sp = STACKTOP; //@line 15859
 return;
}
function _mbed_die__async_cb_188($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 15815
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15817
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15819
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 15820
 _wait_ms(150); //@line 15821
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 284; //@line 15824
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 15825
  HEAP32[$4 >> 2] = $2; //@line 15826
  sp = STACKTOP; //@line 15827
  return;
 }
 ___async_unwind = 0; //@line 15830
 HEAP32[$ReallocAsyncCtx13 >> 2] = 284; //@line 15831
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 15832
 HEAP32[$4 >> 2] = $2; //@line 15833
 sp = STACKTOP; //@line 15834
 return;
}
function _mbed_die__async_cb_187($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 15790
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15792
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15794
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 15795
 _wait_ms(150); //@line 15796
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 285; //@line 15799
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 15800
  HEAP32[$4 >> 2] = $2; //@line 15801
  sp = STACKTOP; //@line 15802
  return;
 }
 ___async_unwind = 0; //@line 15805
 HEAP32[$ReallocAsyncCtx12 >> 2] = 285; //@line 15806
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 15807
 HEAP32[$4 >> 2] = $2; //@line 15808
 sp = STACKTOP; //@line 15809
 return;
}
function _mbed_die__async_cb_186($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 15765
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15767
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15769
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 15770
 _wait_ms(150); //@line 15771
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 286; //@line 15774
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 15775
  HEAP32[$4 >> 2] = $2; //@line 15776
  sp = STACKTOP; //@line 15777
  return;
 }
 ___async_unwind = 0; //@line 15780
 HEAP32[$ReallocAsyncCtx11 >> 2] = 286; //@line 15781
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 15782
 HEAP32[$4 >> 2] = $2; //@line 15783
 sp = STACKTOP; //@line 15784
 return;
}
function _mbed_die__async_cb_185($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 15740
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15742
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15744
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 15745
 _wait_ms(150); //@line 15746
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 287; //@line 15749
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 15750
  HEAP32[$4 >> 2] = $2; //@line 15751
  sp = STACKTOP; //@line 15752
  return;
 }
 ___async_unwind = 0; //@line 15755
 HEAP32[$ReallocAsyncCtx10 >> 2] = 287; //@line 15756
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 15757
 HEAP32[$4 >> 2] = $2; //@line 15758
 sp = STACKTOP; //@line 15759
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1675
 STACKTOP = STACKTOP + 16 | 0; //@line 1676
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1676
 $3 = sp; //@line 1677
 HEAP32[$3 >> 2] = $varargs; //@line 1678
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1679
 _mbed_vtracef($0, $1, $2, $3); //@line 1680
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 63; //@line 1683
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 1685
  sp = STACKTOP; //@line 1686
  STACKTOP = sp; //@line 1687
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1689
  STACKTOP = sp; //@line 1690
  return;
 }
}
function _mbed_die__async_cb_184($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15715
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15717
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15719
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 15720
 _wait_ms(150); //@line 15721
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 288; //@line 15724
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 15725
  HEAP32[$4 >> 2] = $2; //@line 15726
  sp = STACKTOP; //@line 15727
  return;
 }
 ___async_unwind = 0; //@line 15730
 HEAP32[$ReallocAsyncCtx9 >> 2] = 288; //@line 15731
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 15732
 HEAP32[$4 >> 2] = $2; //@line 15733
 sp = STACKTOP; //@line 15734
 return;
}
function _mbed_die__async_cb_183($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 15690
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15692
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15694
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 15695
 _wait_ms(400); //@line 15696
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 289; //@line 15699
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 15700
  HEAP32[$4 >> 2] = $2; //@line 15701
  sp = STACKTOP; //@line 15702
  return;
 }
 ___async_unwind = 0; //@line 15705
 HEAP32[$ReallocAsyncCtx8 >> 2] = 289; //@line 15706
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 15707
 HEAP32[$4 >> 2] = $2; //@line 15708
 sp = STACKTOP; //@line 15709
 return;
}
function _mbed_die__async_cb_182($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15665
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15667
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15669
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 15670
 _wait_ms(400); //@line 15671
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 290; //@line 15674
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 15675
  HEAP32[$4 >> 2] = $2; //@line 15676
  sp = STACKTOP; //@line 15677
  return;
 }
 ___async_unwind = 0; //@line 15680
 HEAP32[$ReallocAsyncCtx7 >> 2] = 290; //@line 15681
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 15682
 HEAP32[$4 >> 2] = $2; //@line 15683
 sp = STACKTOP; //@line 15684
 return;
}
function _mbed_die__async_cb_181($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15640
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15642
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15644
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 15645
 _wait_ms(400); //@line 15646
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 291; //@line 15649
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 15650
  HEAP32[$4 >> 2] = $2; //@line 15651
  sp = STACKTOP; //@line 15652
  return;
 }
 ___async_unwind = 0; //@line 15655
 HEAP32[$ReallocAsyncCtx6 >> 2] = 291; //@line 15656
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 15657
 HEAP32[$4 >> 2] = $2; //@line 15658
 sp = STACKTOP; //@line 15659
 return;
}
function _mbed_die__async_cb_180($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15615
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15617
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15619
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 15620
 _wait_ms(400); //@line 15621
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 292; //@line 15624
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 15625
  HEAP32[$4 >> 2] = $2; //@line 15626
  sp = STACKTOP; //@line 15627
  return;
 }
 ___async_unwind = 0; //@line 15630
 HEAP32[$ReallocAsyncCtx5 >> 2] = 292; //@line 15631
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 15632
 HEAP32[$4 >> 2] = $2; //@line 15633
 sp = STACKTOP; //@line 15634
 return;
}
function _mbed_die__async_cb_179($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 15590
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15592
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15594
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 15595
 _wait_ms(400); //@line 15596
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 293; //@line 15599
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 15600
  HEAP32[$4 >> 2] = $2; //@line 15601
  sp = STACKTOP; //@line 15602
  return;
 }
 ___async_unwind = 0; //@line 15605
 HEAP32[$ReallocAsyncCtx4 >> 2] = 293; //@line 15606
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 15607
 HEAP32[$4 >> 2] = $2; //@line 15608
 sp = STACKTOP; //@line 15609
 return;
}
function _mbed_die__async_cb_178($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15565
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15567
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15569
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 15570
 _wait_ms(400); //@line 15571
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 294; //@line 15574
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 15575
  HEAP32[$4 >> 2] = $2; //@line 15576
  sp = STACKTOP; //@line 15577
  return;
 }
 ___async_unwind = 0; //@line 15580
 HEAP32[$ReallocAsyncCtx3 >> 2] = 294; //@line 15581
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 15582
 HEAP32[$4 >> 2] = $2; //@line 15583
 sp = STACKTOP; //@line 15584
 return;
}
function _mbed_die__async_cb_177($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15540
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15542
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15544
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 15545
 _wait_ms(400); //@line 15546
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 15549
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 15550
  HEAP32[$4 >> 2] = $2; //@line 15551
  sp = STACKTOP; //@line 15552
  return;
 }
 ___async_unwind = 0; //@line 15555
 HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 15556
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 15557
 HEAP32[$4 >> 2] = $2; //@line 15558
 sp = STACKTOP; //@line 15559
 return;
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4558
 STACKTOP = STACKTOP + 32 | 0; //@line 4559
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4559
 $vararg_buffer = sp; //@line 4560
 HEAP32[$0 + 36 >> 2] = 12; //@line 4563
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4571
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 4573
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 4575
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 4580
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 4583
 STACKTOP = sp; //@line 4584
 return $14 | 0; //@line 4584
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_207($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 16911
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16913
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16915
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16917
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 16918
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 16919
 if (!___async) {
  ___async_unwind = 0; //@line 16922
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 222; //@line 16924
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 16926
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $4; //@line 16928
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $6; //@line 16930
 sp = STACKTOP; //@line 16931
 return;
}
function _mbed_die__async_cb_176($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15515
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15517
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15519
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 15520
 _wait_ms(400); //@line 15521
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 15524
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 15525
  HEAP32[$4 >> 2] = $2; //@line 15526
  sp = STACKTOP; //@line 15527
  return;
 }
 ___async_unwind = 0; //@line 15530
 HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 15531
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 15532
 HEAP32[$4 >> 2] = $2; //@line 15533
 sp = STACKTOP; //@line 15534
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13029
 STACKTOP = STACKTOP + 16 | 0; //@line 13030
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13030
 $1 = sp; //@line 13031
 HEAP32[$1 >> 2] = $varargs; //@line 13032
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13033
 _mbed_error_vfprintf($0, $1); //@line 13034
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 297; //@line 13037
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13039
  sp = STACKTOP; //@line 13040
  STACKTOP = sp; //@line 13041
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13043
  STACKTOP = sp; //@line 13044
  return;
 }
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 788
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 791
 if (($6 | 0) < 0) {
  $$0$i = -3001; //@line 794
  return $$0$i | 0; //@line 795
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 797
 _wait_ms(1); //@line 798
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 52; //@line 801
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 803
  sp = STACKTOP; //@line 804
  return 0; //@line 805
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 807
 $$0$i = $6; //@line 808
 return $$0$i | 0; //@line 809
}
function _store_int_728($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do {
  if ($0 | 0) {
   switch ($1 | 0) {
   case -2:
    {
     HEAP8[$0 >> 0] = $2; //@line 6719
     break L1;
     break;
    }
   case -1:
    {
     HEAP16[$0 >> 1] = $2; //@line 6725
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2; //@line 6730
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2; //@line 6735
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0; //@line 6740
     HEAP32[$7 >> 2] = $2; //@line 6742
     HEAP32[$7 + 4 >> 2] = $3; //@line 6745
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}
function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5596
 STACKTOP = STACKTOP + 128 | 0; //@line 5597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 5597
 $3 = sp; //@line 5598
 dest = $3; //@line 5599
 stop = dest + 124 | 0; //@line 5599
 do {
  HEAP32[dest >> 2] = 0; //@line 5599
  dest = dest + 4 | 0; //@line 5599
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 17; //@line 5601
 HEAP32[$3 + 44 >> 2] = $0; //@line 5603
 HEAP32[$3 + 76 >> 2] = -1; //@line 5605
 HEAP32[$3 + 84 >> 2] = $0; //@line 5607
 $8 = _vfscanf($3, $1, $2) | 0; //@line 5608
 STACKTOP = sp; //@line 5609
 return $8 | 0; //@line 5609
}
function __ZN17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 385
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 388
 if (($6 | 0) < 0) {
  $$0 = -3001; //@line 391
  return $$0 | 0; //@line 392
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 394
 _wait_ms(1); //@line 395
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 39; //@line 398
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 400
  sp = STACKTOP; //@line 401
  return 0; //@line 402
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 404
 $$0 = $6; //@line 405
 return $$0 | 0; //@line 406
}
function __ZThn4_N17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 674
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 676
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 677
 _wait_ms(1); //@line 678
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 681
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 683
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 685
  sp = STACKTOP; //@line 686
  return 0; //@line 687
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 689
 HEAP8[$1 + 8 >> 0] = 0; //@line 691
 if (!$1) {
  return $3 | 0; //@line 694
 }
 __ZdlPv($1); //@line 696
 return $3 | 0; //@line 697
}
function __ZN17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 271
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 273
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 274
 _wait_ms(1); //@line 275
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 36; //@line 278
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 280
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 282
  sp = STACKTOP; //@line 283
  return 0; //@line 284
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 286
 HEAP8[$1 + 8 >> 0] = 0; //@line 288
 if (!$1) {
  return $3 | 0; //@line 291
 }
 __ZdlPv($1); //@line 293
 return $3 | 0; //@line 294
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_60($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 21337
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21341
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21342
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 21348
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 21349
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 21350
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 242; //@line 21353
  sp = STACKTOP; //@line 21354
  return;
 }
 ___async_unwind = 0; //@line 21357
 HEAP32[$ReallocAsyncCtx3 >> 2] = 242; //@line 21358
 sp = STACKTOP; //@line 21359
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_167($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14789
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14793
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 14794
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 14800
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 14801
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 14802
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 14805
  sp = STACKTOP; //@line 14806
  return;
 }
 ___async_unwind = 0; //@line 14809
 HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 14810
 sp = STACKTOP; //@line 14811
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 11318
 } else {
  $$056 = $2; //@line 11320
  $15 = $1; //@line 11320
  $8 = $0; //@line 11320
  while (1) {
   $14 = $$056 + -1 | 0; //@line 11328
   HEAP8[$14 >> 0] = HEAPU8[5100 + ($8 & 15) >> 0] | 0 | $3; //@line 11329
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 11330
   $15 = tempRet0; //@line 11331
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 11336
    break;
   } else {
    $$056 = $14; //@line 11339
   }
  }
 }
 return $$05$lcssa | 0; //@line 11343
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 4740
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 4742
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 4748
  $11 = ___fwritex($0, $4, $3) | 0; //@line 4749
  if ($phitmp) {
   $13 = $11; //@line 4751
  } else {
   ___unlockfile($3); //@line 4753
   $13 = $11; //@line 4754
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 4758
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 4762
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 4765
 }
 return $15 | 0; //@line 4767
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 153
 newDynamicTop = oldDynamicTop + increment | 0; //@line 154
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 158
  ___setErrNo(12); //@line 159
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 163
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 167
   ___setErrNo(12); //@line 168
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 172
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_136($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9853
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9857
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9858
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 9864
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 9865
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 9866
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 200; //@line 9869
  sp = STACKTOP; //@line 9870
  return;
 }
 ___async_unwind = 0; //@line 9873
 HEAP32[$ReallocAsyncCtx9 >> 2] = 200; //@line 9874
 sp = STACKTOP; //@line 9875
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 14899
 $0 = ___cxa_get_globals_fast() | 0; //@line 14900
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 14903
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 14907
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 14919
    _emscripten_alloc_async_context(4, sp) | 0; //@line 14920
    __ZSt11__terminatePFvvE($16); //@line 14921
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 14926
 _emscripten_alloc_async_context(4, sp) | 0; //@line 14927
 __ZSt11__terminatePFvvE($17); //@line 14928
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_203($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 16546
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16552
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 16553
 $7 = HEAP32[$6 >> 2] | 0; //@line 16554
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 16555
 __ZL26nsapi_dns_query_async_sendPv($7); //@line 16556
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 16559
  sp = STACKTOP; //@line 16560
  return;
 }
 ___async_unwind = 0; //@line 16563
 HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 16564
 sp = STACKTOP; //@line 16565
 return;
}
function __ZN9UDPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5681
 $1 = $0 + 52 | 0; //@line 5682
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 5685
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 5688
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 5698
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5699
 FUNCTION_TABLE_vi[$$pre & 511]($0 + 32 | 0); //@line 5700
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 152; //@line 5703
  sp = STACKTOP; //@line 5704
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5707
 return;
}
function __ZN9TCPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5187
 $1 = $0 + 52 | 0; //@line 5188
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 5191
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 5194
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 5204
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5205
 FUNCTION_TABLE_vi[$$pre & 511]($0 + 32 | 0); //@line 5206
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 140; //@line 5209
  sp = STACKTOP; //@line 5210
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5213
 return;
}
function __ZN9TCPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17797
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17799
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 17801
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 17808
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17809
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 17810
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 17813
  sp = STACKTOP; //@line 17814
  return;
 }
 ___async_unwind = 0; //@line 17817
 HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 17818
 sp = STACKTOP; //@line 17819
 return;
}
function __ZN6SocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14882
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14884
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 14886
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 14893
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 14894
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 14895
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 120; //@line 14898
  sp = STACKTOP; //@line 14899
  return;
 }
 ___async_unwind = 0; //@line 14902
 HEAP32[$ReallocAsyncCtx2 >> 2] = 120; //@line 14903
 sp = STACKTOP; //@line 14904
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 4957
 $3 = HEAP8[$1 >> 0] | 0; //@line 4959
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 4963
 $7 = HEAP32[$0 >> 2] | 0; //@line 4964
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 4969
  HEAP32[$0 + 4 >> 2] = 0; //@line 4971
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 4973
  HEAP32[$0 + 28 >> 2] = $14; //@line 4975
  HEAP32[$0 + 20 >> 2] = $14; //@line 4977
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4983
  $$0 = 0; //@line 4984
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 4987
  $$0 = -1; //@line 4988
 }
 return $$0 | 0; //@line 4990
}
function __ZN9UDPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5862
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5864
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 5866
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 5873
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5874
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 5875
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 5878
  sp = STACKTOP; //@line 5879
  return;
 }
 ___async_unwind = 0; //@line 5882
 HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 5883
 sp = STACKTOP; //@line 5884
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_63($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 21468
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21472
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 21474
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 21475
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 21476
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 78; //@line 21479
  sp = STACKTOP; //@line 21480
  return;
 }
 ___async_unwind = 0; //@line 21483
 HEAP32[$ReallocAsyncCtx >> 2] = 78; //@line 21484
 sp = STACKTOP; //@line 21485
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 766
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 767
 _wait_ms(1); //@line 768
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 51; //@line 771
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 773
  sp = STACKTOP; //@line 774
  return 0; //@line 775
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 777
  return $6 | 0; //@line 778
 }
 return 0; //@line 780
}
function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0; //@line 9800
 $4 = HEAP32[$3 >> 2] | 0; //@line 9801
 $5 = $2 + 256 | 0; //@line 9802
 $6 = _memchr($4, 0, $5) | 0; //@line 9803
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0; //@line 9808
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2; //@line 9810
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0; //@line 9811
 HEAP32[$0 + 4 >> 2] = $4 + $$027$; //@line 9814
 $14 = $4 + $$027 | 0; //@line 9815
 HEAP32[$0 + 8 >> 2] = $14; //@line 9817
 HEAP32[$3 >> 2] = $14; //@line 9818
 return $$027$ | 0; //@line 9819
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 12786
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 12789
 $$sink17$sink = $0; //@line 12789
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 12791
  $12 = HEAP8[$11 >> 0] | 0; //@line 12792
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 12800
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 12805
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 12810
}
function __ZN17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 360
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 363
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 364
 _wait_ms(1); //@line 365
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 38; //@line 368
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 370
  sp = STACKTOP; //@line 371
  return 0; //@line 372
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 374
  return $6 | 0; //@line 375
 }
 return 0; //@line 377
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 11355
 } else {
  $$06 = $2; //@line 11357
  $11 = $1; //@line 11357
  $7 = $0; //@line 11357
  while (1) {
   $10 = $$06 + -1 | 0; //@line 11362
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 11363
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 11364
   $11 = tempRet0; //@line 11365
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 11370
    break;
   } else {
    $$06 = $10; //@line 11373
   }
  }
 }
 return $$0$lcssa | 0; //@line 11377
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_208($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 16937
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16939
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16941
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 16942
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 16943
 if (!___async) {
  ___async_unwind = 0; //@line 16946
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 216; //@line 16948
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $2; //@line 16950
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $4; //@line 16952
 sp = STACKTOP; //@line 16953
 return;
}
function _arg_n_727($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 6674
 STACKTOP = STACKTOP + 16 | 0; //@line 6675
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6675
 $2 = sp; //@line 6676
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2]; //@line 6678
 $$0 = $1; //@line 6679
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 6693
  $10 = HEAP32[$9 >> 2] | 0; //@line 6694
  HEAP32[$2 >> 2] = $9 + 4; //@line 6696
  if ($$0 >>> 0 > 1) {
   $$0 = $$0 + -1 | 0; //@line 6699
  } else {
   break;
  }
 }
 STACKTOP = sp; //@line 6704
 return $10 | 0; //@line 6704
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_40($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 18225
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18227
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18229
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 18230
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 18231
 if (!___async) {
  ___async_unwind = 0; //@line 18234
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 245; //@line 18236
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 18238
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 18240
 sp = STACKTOP; //@line 18241
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_115($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4663
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4667
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 4669
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 4670
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 4671
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 4674
  sp = STACKTOP; //@line 4675
  return;
 }
 ___async_unwind = 0; //@line 4678
 HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 4679
 sp = STACKTOP; //@line 4680
 return;
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15810
 do {
  if (!$0) {
   $3 = 0; //@line 15814
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15816
   $2 = ___dynamic_cast($0, 144, 200, 0) | 0; //@line 15817
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 367; //@line 15820
    sp = STACKTOP; //@line 15821
    return 0; //@line 15822
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15824
    $3 = ($2 | 0) != 0 & 1; //@line 15827
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 15832
}
function _main__async_cb_96($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 778
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 782
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 784
 __ZdaPv(HEAP32[$0 + 4 >> 2] | 0); //@line 785
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 786
 _puts(4304) | 0; //@line 787
 if (!___async) {
  ___async_unwind = 0; //@line 790
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 316; //@line 792
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 794
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 796
 sp = STACKTOP; //@line 797
 return;
}
function _invoke_ticker__async_cb_20($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17219
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 17225
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 17226
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 17227
 FUNCTION_TABLE_vi[$5 & 511]($6); //@line 17228
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 304; //@line 17231
  sp = STACKTOP; //@line 17232
  return;
 }
 ___async_unwind = 0; //@line 17235
 HEAP32[$ReallocAsyncCtx >> 2] = 304; //@line 17236
 sp = STACKTOP; //@line 17237
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 10999
 } else {
  $$04 = 0; //@line 11001
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 11004
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 11008
   $12 = $7 + 1 | 0; //@line 11009
   HEAP32[$0 >> 2] = $12; //@line 11010
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 11016
    break;
   } else {
    $$04 = $11; //@line 11019
   }
  }
 }
 return $$0$lcssa | 0; //@line 11023
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 17955
 $y_sroa_0_0_extract_trunc = $b$0; //@line 17956
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 17957
 $1$1 = tempRet0; //@line 17958
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 17960
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11967
 $1 = HEAP32[$0 >> 2] | 0; //@line 11968
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 11970
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11971
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 11972
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 262; //@line 11975
  sp = STACKTOP; //@line 11976
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11979
  return;
 }
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 17940
 $2 = $b & 65535; //@line 17941
 $3 = Math_imul($2, $1) | 0; //@line 17942
 $6 = $a >>> 16; //@line 17943
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 17944
 $11 = $b >>> 16; //@line 17945
 $12 = Math_imul($11, $1) | 0; //@line 17946
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 17947
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10385
 $1 = HEAP32[$0 >> 2] | 0; //@line 10386
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 10388
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10389
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 10390
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 232; //@line 10393
  sp = STACKTOP; //@line 10394
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10397
  return;
 }
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 593
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 595
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 596
 _wait_ms(1); //@line 597
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 600
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 602
  sp = STACKTOP; //@line 603
  return 0; //@line 604
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 606
  return $2 | 0; //@line 607
 }
 return 0; //@line 609
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2665
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 2667
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 2673
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2674
 FUNCTION_TABLE_vi[$5 & 511]($0); //@line 2675
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 76; //@line 2678
  sp = STACKTOP; //@line 2679
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2682
 return;
}
function __ZN6SocketC2Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 572; //@line 4008
 HEAP32[$0 + 4 >> 2] = 0; //@line 4010
 HEAP32[$0 + 8 >> 2] = 0; //@line 4012
 HEAP32[$0 + 12 >> 2] = -1; //@line 4014
 $4 = $0 + 16 | 0; //@line 4015
 HEAP32[$4 >> 2] = 0; //@line 4016
 HEAP32[$4 + 4 >> 2] = 0; //@line 4016
 HEAP32[$4 + 8 >> 2] = 0; //@line 4016
 HEAP32[$4 + 12 >> 2] = 0; //@line 4016
 HEAP32[$4 + 16 >> 2] = 0; //@line 4016
 HEAP32[$4 + 20 >> 2] = 0; //@line 4016
 HEAP32[$4 + 24 >> 2] = 0; //@line 4016
 HEAP32[$4 + 28 >> 2] = 0; //@line 4016
 return;
}
function __ZN17EthernetInterface11get_netmaskEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 103
 $2 = _emscripten_asm_const_ii(2, 0) | 0; //@line 105
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 106
 _wait_ms(1); //@line 107
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 31; //@line 110
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 112
  sp = STACKTOP; //@line 113
  return 0; //@line 114
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 116
  return $2 | 0; //@line 117
 }
 return 0; //@line 119
}
function _mbed_die__async_cb_190($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 15865
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15867
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15869
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 15870
 _wait_ms(150); //@line 15871
 if (!___async) {
  ___async_unwind = 0; //@line 15874
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 282; //@line 15876
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 15878
 sp = STACKTOP; //@line 15879
 return;
}
function __ZN17EthernetInterface15get_mac_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 61
 $2 = _emscripten_asm_const_ii(0, 0) | 0; //@line 63
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 64
 _wait_ms(1); //@line 65
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 29; //@line 68
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 70
  sp = STACKTOP; //@line 71
  return 0; //@line 72
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 74
  return $2 | 0; //@line 75
 }
 return 0; //@line 77
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 15495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15497
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15499
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 15500
 _wait_ms(150); //@line 15501
 if (!___async) {
  ___async_unwind = 0; //@line 15504
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 281; //@line 15506
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 15508
 sp = STACKTOP; //@line 15509
 return;
}
function __ZN17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 82
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 84
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _wait_ms(1); //@line 86
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 30; //@line 89
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 91
  sp = STACKTOP; //@line 92
  return 0; //@line 93
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 95
  return $2 | 0; //@line 96
 }
 return 0; //@line 98
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 76
  src = src + num | 0; //@line 77
  dest = dest + num | 0; //@line 78
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 80
   src = src - 1 | 0; //@line 81
   num = num - 1 | 0; //@line 82
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 83
  }
  dest = ret; //@line 85
 } else {
  _memcpy(dest, src, num) | 0; //@line 87
 }
 return dest | 0; //@line 89
}
function ___fflush_unlocked__async_cb_129($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6018
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6020
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6022
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6024
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 6026
 HEAP32[$4 >> 2] = 0; //@line 6027
 HEAP32[$6 >> 2] = 0; //@line 6028
 HEAP32[$8 >> 2] = 0; //@line 6029
 HEAP32[$10 >> 2] = 0; //@line 6030
 HEAP32[___async_retval >> 2] = 0; //@line 6032
 return;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3411
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3412
 $2 = __Z28nsapi_dns_query_async_canceli($1) | 0; //@line 3413
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 101; //@line 3416
  sp = STACKTOP; //@line 3417
  return 0; //@line 3418
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3420
  return $2 | 0; //@line 3421
 }
 return 0; //@line 3423
}
function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 9723
 STACKTOP = STACKTOP + 16 | 0; //@line 9724
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9724
 $1 = sp; //@line 9725
 if (!(___toread($0) | 0)) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 31]($0, $1, 1) | 0) == 1) {
   $$0 = HEAPU8[$1 >> 0] | 0; //@line 9736
  } else {
   $$0 = -1; //@line 9738
  }
 } else {
  $$0 = -1; //@line 9741
 }
 STACKTOP = sp; //@line 9743
 return $$0 | 0; //@line 9743
}
function _mbed_vtracef__async_cb_116($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5177
 $1 = HEAP32[134] | 0; //@line 5178
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 5179
 FUNCTION_TABLE_vi[$1 & 511](3535); //@line 5180
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 67; //@line 5183
  sp = STACKTOP; //@line 5184
  return;
 }
 ___async_unwind = 0; //@line 5187
 HEAP32[$ReallocAsyncCtx3 >> 2] = 67; //@line 5188
 sp = STACKTOP; //@line 5189
 return;
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13591
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13592
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 13593
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 331; //@line 13596
  sp = STACKTOP; //@line 13597
  return 0; //@line 13598
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13600
  return $3 | 0; //@line 13601
 }
 return 0; //@line 13603
}
function _main__async_cb_90($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 489
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 491
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 493
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 494
 __ZN9TCPSocketD2Ev($2); //@line 495
 if (!___async) {
  ___async_unwind = 0; //@line 498
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 317; //@line 500
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $4; //@line 502
 sp = STACKTOP; //@line 503
 return;
}
function _serial_putc__async_cb_49($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19193
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19195
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 19196
 _fflush($2) | 0; //@line 19197
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 302; //@line 19200
  sp = STACKTOP; //@line 19201
  return;
 }
 ___async_unwind = 0; //@line 19204
 HEAP32[$ReallocAsyncCtx >> 2] = 302; //@line 19205
 sp = STACKTOP; //@line 19206
 return;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 133
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 134
 _puts(3131) | 0; //@line 135
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 32; //@line 138
  sp = STACKTOP; //@line 139
  return 0; //@line 140
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 142
  return 0; //@line 143
 }
 return 0; //@line 145
}
function __ZN13SocketAddressC2E10nsapi_addrt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP8[$0 >> 0] = 0; //@line 4547
 $3 = $0 + 40 | 0; //@line 4548
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2]; //@line 4549
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4549
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4549
 HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 4549
 HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 4549
 HEAP16[$0 + 60 >> 1] = $2; //@line 4551
 return;
}
function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9704
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9704
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9705
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9706
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647; //@line 9710
 HEAP32[tempDoublePtr >> 2] = $2; //@line 9711
 HEAP32[tempDoublePtr + 4 >> 2] = $8; //@line 9711
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function _emscripten_async_resume() {
 ___async = 0; //@line 18273
 ___async_unwind = 1; //@line 18274
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 18280
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 18284
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 18288
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 18290
 }
}
function __ZnwjRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13928
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13929
 $2 = __Znwj($0) | 0; //@line 13930
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 337; //@line 13933
  sp = STACKTOP; //@line 13934
  return 0; //@line 13935
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13937
  return $2 | 0; //@line 13938
 }
 return 0; //@line 13940
}
function __ZnajRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13963
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13964
 $2 = __Znaj($0) | 0; //@line 13965
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 339; //@line 13968
  sp = STACKTOP; //@line 13969
  return 0; //@line 13970
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13972
  return $2 | 0; //@line 13973
 }
 return 0; //@line 13975
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12511
 $1 = HEAP32[$0 >> 2] | 0; //@line 12512
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12513
 FUNCTION_TABLE_v[$1 & 7](); //@line 12514
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 276; //@line 12517
  sp = STACKTOP; //@line 12518
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12521
  return;
 }
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4369
 STACKTOP = STACKTOP + 16 | 0; //@line 4370
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4370
 $vararg_buffer = sp; //@line 4371
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 4375
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 4377
 STACKTOP = sp; //@line 4378
 return $5 | 0; //@line 4378
}
function __ZN9UDPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5656
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5657
 __ZN9UDPSocketD2Ev($0); //@line 5658
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 5661
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5663
  sp = STACKTOP; //@line 5664
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5667
  __ZdlPv($0); //@line 5668
  return;
 }
}
function __ZN9TCPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5162
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5163
 __ZN9TCPSocketD2Ev($0); //@line 5164
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 5167
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5169
  sp = STACKTOP; //@line 5170
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5173
  __ZdlPv($0); //@line 5174
  return;
 }
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 18215
 STACKTOP = STACKTOP + 16 | 0; //@line 18216
 $rem = __stackBase__ | 0; //@line 18217
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 18218
 STACKTOP = __stackBase__; //@line 18219
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 18220
}
function __ZN17EthernetInterface8set_dhcpEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 151
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 152
 _puts(3086) | 0; //@line 153
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 33; //@line 156
  sp = STACKTOP; //@line 157
  return 0; //@line 158
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 160
  return 0; //@line 161
 }
 return 0; //@line 163
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 17985
 if ((ret | 0) < 8) return ret | 0; //@line 17986
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 17987
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 17988
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 17989
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 17990
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 17991
}
function __Znaj($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13945
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13946
 $1 = __Znwj($0) | 0; //@line 13947
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 338; //@line 13950
  sp = STACKTOP; //@line 13951
  return 0; //@line 13952
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13954
  return $1 | 0; //@line 13955
 }
 return 0; //@line 13957
}
function __ZN13SocketAddress8set_addrE10nsapi_addr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP8[$0 >> 0] = 0; //@line 4559
 $2 = $0 + 40 | 0; //@line 4560
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2]; //@line 4561
 HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4561
 HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4561
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 4561
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 4561
 return;
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 14120
 STACKTOP = STACKTOP + 16 | 0; //@line 14121
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14121
 if (!(_pthread_once(8456, 4) | 0)) {
  $3 = _pthread_getspecific(HEAP32[2115] | 0) | 0; //@line 14127
  STACKTOP = sp; //@line 14128
  return $3 | 0; //@line 14128
 } else {
  _abort_message(7285, sp); //@line 14130
 }
 return 0; //@line 14133
}
function __ZThn4_N17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23309
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23311
 HEAP8[$2 + 8 >> 0] = 0; //@line 23313
 if (!$2) {
  $7 = ___async_retval; //@line 23316
  HEAP32[$7 >> 2] = $4; //@line 23317
  return;
 }
 __ZdlPv($2); //@line 23320
 $7 = ___async_retval; //@line 23321
 HEAP32[$7 >> 2] = $4; //@line 23322
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14288
 }
 return;
}
function __ZL25default_terminate_handlerv__async_cb_213($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17416
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17418
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17420
 HEAP32[$2 >> 2] = 7146; //@line 17421
 HEAP32[$2 + 4 >> 2] = $4; //@line 17423
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 17425
 _abort_message(7010, $2); //@line 17426
}
function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 5584
 STACKTOP = STACKTOP + 16 | 0; //@line 5585
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5585
 $2 = sp; //@line 5586
 HEAP32[$2 >> 2] = $varargs; //@line 5587
 $3 = _vsscanf($0, $1, $2) | 0; //@line 5588
 STACKTOP = sp; //@line 5589
 return $3 | 0; //@line 5589
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 13441
 $6 = HEAP32[$5 >> 2] | 0; //@line 13442
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 13443
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 13445
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 13447
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 13450
 return $2 | 0; //@line 13451
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 1090
 HEAP32[$3 >> 2] = 0; //@line 1091
 HEAP32[$3 + 4 >> 2] = 0; //@line 1091
 HEAP32[$3 + 8 >> 2] = 0; //@line 1091
 HEAP32[$3 + 12 >> 2] = 0; //@line 1091
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 1094
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 1097
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16348
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16350
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16351
 _fputc(10, $2) | 0; //@line 16352
 if (!___async) {
  ___async_unwind = 0; //@line 16355
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 343; //@line 16357
 sp = STACKTOP; //@line 16358
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18628
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 18639
  $$0 = 1; //@line 18640
 } else {
  $$0 = 0; //@line 18642
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 18646
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23185
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 23188
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 23193
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 23196
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 14882
 STACKTOP = STACKTOP + 16 | 0; //@line 14883
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14883
 _free($0); //@line 14885
 if (!(_pthread_setspecific(HEAP32[2115] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 14890
  return;
 } else {
  _abort_message(7384, sp); //@line 14892
 }
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 13177
 HEAP32[$0 >> 2] = $1; //@line 13178
 HEAP32[1966] = 1; //@line 13179
 $4 = $0; //@line 13180
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 13185
 $10 = 7868; //@line 13186
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 13188
 HEAP32[$10 + 4 >> 2] = $9; //@line 13191
 return;
}
function __ZNK13SocketAddress8get_addrEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1 + 40 | 0; //@line 4811
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 4812
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 4812
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 4812
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 4812
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 4812
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14364
 }
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13281
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13282
 _emscripten_sleep($0 | 0); //@line 13283
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 305; //@line 13286
  sp = STACKTOP; //@line 13287
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13290
  return;
 }
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1656
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1657
 _puts($0) | 0; //@line 1658
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 62; //@line 1661
  sp = STACKTOP; //@line 1662
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1665
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 1623
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 1627
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 1631
   $$0 = 0; //@line 1632
  } else {
   $$0 = $4; //@line 1634
  }
 } else {
  $$0 = $1; //@line 1637
 }
 return $$0 | 0; //@line 1639
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 1586
 STACKTOP = STACKTOP + 16 | 0; //@line 1587
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1587
 $0 = sp; //@line 1588
 _gettimeofday($0 | 0, 0) | 0; //@line 1589
 STACKTOP = sp; //@line 1596
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 1596
}
function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1; //@line 6559
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6561
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 6563
 $7 = $4 - $6 | 0; //@line 6564
 HEAP32[$0 + 108 >> 2] = $7; //@line 6566
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4; //@line 6575
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 14428
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 14432
  }
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 14867
 STACKTOP = STACKTOP + 16 | 0; //@line 14868
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14868
 if (!(_pthread_key_create(8460, 352) | 0)) {
  STACKTOP = sp; //@line 14873
  return;
 } else {
  _abort_message(7334, sp); //@line 14875
 }
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 11988
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 11993
 $8 = $0; //@line 11994
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 11996
 HEAP32[$8 + 4 >> 2] = $7; //@line 11999
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 18249
 HEAP32[new_frame + 4 >> 2] = sp; //@line 18251
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 18253
 ___async_cur_frame = new_frame; //@line 18254
 return ___async_cur_frame + 8 | 0; //@line 18255
}
function _nsapi_dns_add_server($0) {
 $0 = $0 | 0;
 _memmove(668, 648, 80) | 0; //@line 5858
 HEAP32[162] = HEAP32[$0 >> 2]; //@line 5859
 HEAP32[163] = HEAP32[$0 + 4 >> 2]; //@line 5859
 HEAP32[164] = HEAP32[$0 + 8 >> 2]; //@line 5859
 HEAP32[165] = HEAP32[$0 + 12 >> 2]; //@line 5859
 HEAP32[166] = HEAP32[$0 + 16 >> 2]; //@line 5859
 return 0; //@line 5860
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 10406
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 10411
 $8 = $0; //@line 10412
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 10414
 HEAP32[$8 + 4 >> 2] = $7; //@line 10417
 return;
}
function __ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + -4 | 0; //@line 980
 $5 = HEAP32[$1 >> 2] | 0; //@line 981
 HEAP32[$4 + 60 + ($5 << 3) >> 2] = $2; //@line 983
 HEAP32[$4 + 60 + ($5 << 3) + 4 >> 2] = $3; //@line 985
 return;
}
function __ZN17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16558
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16560
 HEAP8[$2 + 8 >> 0] = 0; //@line 16562
 if ($2 | 0) {
  __ZdlPv($2); //@line 16565
 }
 HEAP32[___async_retval >> 2] = $4; //@line 16568
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 3989
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 3989
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 3989
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 16833
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16837
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 16840
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 18238
  return low << bits; //@line 18239
 }
 tempRet0 = low << bits - 32; //@line 18241
 return 0; //@line 18242
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 18227
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 18228
 }
 tempRet0 = 0; //@line 18230
 return high >>> bits - 32 | 0; //@line 18231
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 4378
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4378
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4378
 return;
}
function __ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2] | 0; //@line 569
 HEAP32[$0 + 60 + ($4 << 3) >> 2] = $2; //@line 571
 HEAP32[$0 + 60 + ($4 << 3) + 4 >> 2] = $3; //@line 573
 return;
}
function _fflush__async_cb_192($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16026
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 16028
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16031
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_108($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 3421
 HEAP32[___async_retval >> 2] = -3007; //@line 3423
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15938
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 15940
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15942
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 21657
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 21660
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 21663
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 16642
 } else {
  $$0 = -1; //@line 16644
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 16647
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 221
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_25($0) {
 $0 = $0 | 0;
 var $$06 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$06 = -3007; //@line 17421
 } else {
  $$06 = 0; //@line 17423
 }
 HEAP32[___async_retval >> 2] = $$06; //@line 17426
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_22($0) {
 $0 = $0 | 0;
 var $$06 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$06 = -3007; //@line 17331
 } else {
  $$06 = 0; //@line 17333
 }
 HEAP32[___async_retval >> 2] = $$06; //@line 17336
 return;
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 5087
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 5093
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 5097
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_111($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4208
 return;
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 18261
 stackRestore(___async_cur_frame | 0); //@line 18262
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 18263
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 270
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 21511
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 21512
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 21514
 return;
}
function __ZN12NetworkStack20get_call_in_callbackEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 100; //@line 3494
 HEAP32[$0 + 4 >> 2] = 1; //@line 3496
 HEAP32[$0 + 8 >> 2] = $1; //@line 3498
 HEAP32[$0 + 12 >> 2] = 552; //@line 3499
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16805
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 16806
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 16808
 return;
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 13153
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 13159
 _emscripten_asm_const_iii(11, $0 | 0, $1 | 0) | 0; //@line 13160
 return;
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12440
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12440
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12442
 return $1 | 0; //@line 12443
}
function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9694
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9694
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9696
 return $1 | 0; //@line 9697
}
function __ZN9TCPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 5220
 HEAP32[$0 >> 2] = 608; //@line 5221
 HEAP32[$0 + 52 >> 2] = 0; //@line 5223
 HEAP8[$0 + 56 >> 0] = 0; //@line 5225
 HEAP8[$0 + 57 >> 0] = 0; //@line 5227
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1645
 HEAP8[$0 + 76 >> 0] = 1; //@line 1647
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 1649
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1650
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 17978
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 17979
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 17980
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 4535
  $$0 = -1; //@line 4536
 } else {
  $$0 = $0; //@line 4538
 }
 return $$0 | 0; //@line 4540
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_47($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18968
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 18969
 HEAP32[7844 + ($4 << 2) >> 2] = 0; //@line 18971
 return;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 214
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_86($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 85
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17539
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 17540
 HEAP32[___async_retval >> 2] = $4; //@line 17542
 return;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 263
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 991
 ___cxa_begin_catch($0 | 0) | 0; //@line 992
 _emscripten_alloc_async_context(4, sp) | 0; //@line 993
 __ZSt9terminatev(); //@line 994
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 1008
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 15744
 } else {
  HEAP8[$0 >> 0] = 1; //@line 15746
  $$0 = 1; //@line 15747
 }
 return $$0 | 0; //@line 15749
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_17($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 17128
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 1038
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 19392
 HEAP32[___async_retval >> 2] = 0; //@line 19394
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 17789
 HEAP32[___async_retval >> 2] = 0; //@line 17791
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_52($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 19382
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_164($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 14567
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 207
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 17970
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 17972
}
function __ZN4mbed16mbed_event_queueEv() {
 if (!(HEAP8[7592] | 0)) {
  if (___cxa_guard_acquire(7592) | 0) {
   __ZN6events10EventQueueC2EjPh(7608, 256, 8468); //@line 1110
  }
 }
 return 7608; //@line 1113
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 256
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_32($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17930
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 11500
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 11503
 }
 return $$0 | 0; //@line 11505
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 5232
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 5237
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_191($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15928
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_57($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 20808
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_79($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23771
 if ($4 | 0) {
  __ZdaPv($4); //@line 23774
 }
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_8($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16422
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 13996
 return;
}
function _common_write_16_bit($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$1 >> 0] = ($0 & 65535) >>> 8; //@line 2376
 HEAP8[$1 + 1 >> 0] = $0; //@line 2379
 return $1 + 2 | 0; //@line 2380
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_4($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16282
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 200
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 18207
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_3($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16097
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 17565
 return;
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 4727
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 4731
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_18($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17173
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_11($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16612
 return;
}
function b53(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 412
 return 0; //@line 412
}
function b52(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 409
 return 0; //@line 409
}
function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) {
  $4 = 1; //@line 6903
 } else {
  $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1; //@line 6908
 }
 return $4 | 0; //@line 6910
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 18268
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 18269
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_12($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16795
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_150($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13503
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_53($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19446
 return;
}
function __ZN12NetworkStack10getsockoptEPviiS0_Pj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 0](a1 | 0, a2 | 0, a3 | 0); //@line 249
}
function __ZN12NetworkStack10setsockoptEPviiPKvj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12998
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_9($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 16430
 return;
}
function __ZN9UDPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 5714
 HEAP32[$0 >> 2] = 632; //@line 5715
 HEAP32[$0 + 52 >> 2] = 0; //@line 5717
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14967
 __ZdlPv($0); //@line 14968
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14650
 __ZdlPv($0); //@line 14651
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 5223
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 5225
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_5($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 16290
 return;
}
function __ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14178
 __ZdlPv($0); //@line 14179
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 21542
 return;
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 21495
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_175($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 15489
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_156($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13898
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 10985
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 17185
 return;
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12988
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function b50(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 406
 return 0; //@line 406
}
function b49(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 403
 return 0; //@line 403
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_148($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 13455
 return;
}
function __ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 12531
 return;
}
function __ZN17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 21456
 return;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 21644
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0; //@line 193
}
function b216(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 883
}
function __ZN17EthernetInterface15get_mac_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 23678
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_218($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 17931
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 14375
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[2116] | 0; //@line 15766
 HEAP32[2116] = $0 + 0; //@line 15768
 return $0 | 0; //@line 15770
}
function __ZN17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 4481
 return;
}
function __ZN12NetworkStack11setstackoptEiiPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN12NetworkStack11getstackoptEiiPvPj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN17EthernetInterface11get_netmaskEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 17891
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[630] | 0; //@line 14957
 HEAP32[630] = $0 + 0; //@line 14959
 return $0 | 0; //@line 14961
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0); //@line 242
}
function __ZnwjRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16342
 return;
}
function __ZnajRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17207
 return;
}
function __ZN6Socket11set_timeoutEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 12 >> 2] = ($1 | 0) > -1 ? $1 : -1; //@line 4470
 return;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 21440
 return;
}
function b47(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(15); //@line 400
 return 0; //@line 400
}
function b46(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(14); //@line 397
 return 0; //@line 397
}
function b45(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(13); //@line 394
 return 0; //@line 394
}
function b44(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(12); //@line 391
 return 0; //@line 391
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b43(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 388
 return 0; //@line 388
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 18295
}
function __ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_74($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b214(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 880
}
function __ZN6Socket5closeEv__async_cb_66($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 21622
 return;
}
function __ZN17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function _fflush__async_cb_193($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16041
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb_215($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 17523
 return;
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 11448
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17779
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16332
 return;
}
function _fputc__async_cb_64($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21524
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_147($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 13420
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17877
 return;
}
function _putc__async_cb_13($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16818
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12NetworkStack14get_dns_serverEiP13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_38($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 8 >> 2] | 0); //@line 18189
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 21634
 return;
}
function __ZN17EthernetInterface8set_dhcpEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 21532
 return;
}
function __Znaj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16759
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0; //@line 186
}
function __ZThn4_N17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN13SocketAddress8set_portEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP16[$0 + 60 >> 1] = $1; //@line 4570
 return;
}
function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0; //@line 5618
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(7437, HEAP32[$0 + 4 >> 2] | 0); //@line 17137
}
function b41(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 385
 return 0; //@line 385
}
function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 382
 return 0; //@line 382
}
function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 379
 return 0; //@line 379
}
function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 376
 return 0; //@line 376
}
function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 373
 return 0; //@line 373
}
function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 370
 return 0; //@line 370
}
function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 367
 return 0; //@line 367
}
function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 364
 return 0; //@line 364
}
function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 361
 return 0; //@line 361
}
function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 358
 return 0; //@line 358
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 355
 return 0; //@line 355
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 352
 return 0; //@line 352
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 349
 return 0; //@line 349
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(18); //@line 346
 return 0; //@line 346
}
function b27(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 343
 return 0; //@line 343
}
function _strcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 ___stpcpy($0, $1) | 0; //@line 13458
 return $0 | 0; //@line 13459
}
function __ZN17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 511](a1 | 0); //@line 235
}
function b212(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 877
}
function b211(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 874
}
function b210(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 871
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 1572
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 1581
 return;
}
function __ZN9UDPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 13578
 return;
}
function __ZN9TCPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 16627
 return;
}
function __ZNK13SocketAddress14get_ip_versionEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 40 >> 2] | 0; //@line 4889
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 4645
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 12693
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1616
 return;
}
function __ZNK13SocketAddress8get_portEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 60 >> 1] | 0; //@line 4821
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 1603
}
function __ZdlPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdlPv($0); //@line 13989
 return;
}
function __ZdaPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdaPv($0); //@line 14004
 return;
}
function __ZThn4_N17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0 + -4 | 0); //@line 587
 return;
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(15); //@line 340
 return 0; //@line 340
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(14); //@line 337
 return 0; //@line 337
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(13); //@line 334
 return 0; //@line 334
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(12); //@line 331
 return 0; //@line 331
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(11); //@line 328
 return 0; //@line 328
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(10); //@line 325
 return 0; //@line 325
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(9); //@line 322
 return 0; //@line 322
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 319
 return 0; //@line 319
}
function _main__async_cb_95($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 772
 return;
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1609
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 0]() | 0; //@line 179
}
function b208(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 868
}
function __ZN16NetworkInterface12set_blockingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterface9get_stackEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 212
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_61($0) {
 $0 = $0 | 0;
 return;
}
function __Z18nsapi_create_stackP12NetworkStack($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 4002
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_168($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12NetworkStack19onboardNetworkStackEv($0) {
 $0 = $0 | 0;
 return 0; //@line 615
}
function __ZNK16NetworkInterface21get_connection_statusEv($0) {
 $0 = $0 | 0;
 return -3002;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 228
}
function __ZN16NetworkInterface13wifiInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 187
}
function __ZN16NetworkInterface13meshInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 193
}
function __ZN16NetworkInterface13emacInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 205
}
function __ZN17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 55
 return;
}
function __ZN17EthernetInterface11get_gatewayEv($0) {
 $0 = $0 | 0;
 return 0; //@line 125
}
function __ZN16NetworkInterface12ethInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 181
}
function __ZN16NetworkInterface12cellularBaseEv($0) {
 $0 = $0 | 0;
 return 0; //@line 199
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 4593
}
function __ZN17EthernetInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 175
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_137($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_206($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_200($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_196($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b16(p0) {
 p0 = p0 | 0;
 nullFunc_ii(31); //@line 316
 return 0; //@line 316
}
function b15(p0) {
 p0 = p0 | 0;
 nullFunc_ii(30); //@line 313
 return 0; //@line 313
}
function b14(p0) {
 p0 = p0 | 0;
 nullFunc_ii(29); //@line 310
 return 0; //@line 310
}
function b13(p0) {
 p0 = p0 | 0;
 nullFunc_ii(28); //@line 307
 return 0; //@line 307
}
function b12(p0) {
 p0 = p0 | 0;
 nullFunc_ii(27); //@line 304
 return 0; //@line 304
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(26); //@line 301
 return 0; //@line 301
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(25); //@line 298
 return 0; //@line 298
}
function __ZN17EthernetInterface7connectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 169
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_34($0) {
 $0 = $0 | 0;
 return;
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(24); //@line 295
 return 0; //@line 295
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(23); //@line 292
 return 0; //@line 292
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(22); //@line 289
 return 0; //@line 289
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(21); //@line 286
 return 0; //@line 286
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(20); //@line 283
 return 0; //@line 283
}
function b4(p0) {
 p0 = p0 | 0;
 nullFunc_ii(19); //@line 280
 return 0; //@line 280
}
function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 277
 return 0; //@line 277
}
function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}
function b206(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 865
}
function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _abort_message__async_cb_7($0) {
 $0 = $0 | 0;
 _abort(); //@line 16365
}
function ___ofl_lock() {
 ___lock(8440); //@line 5242
 return 8448; //@line 5243
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN9UDPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 1; //@line 5676
}
function __ZN9TCPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 0; //@line 5182
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 418
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 12614
}
function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}
function ___pthread_self_913() {
 return _pthread_self() | 0; //@line 9718
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 12620
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZdaPv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 13996
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function __ZN6SocketD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 4071
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 13981
 return;
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 145
}
function __ZThn4_N17EthernetInterfaceD1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_127($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9TCPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9TCPSocketD2Ev__async_cb_30($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 141
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function __ZN6SocketD2Ev__async_cb_170($0) {
 $0 = $0 | 0;
 return;
}
function b1() {
 nullFunc_i(0); //@line 274
 return 0; //@line 274
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(8440); //@line 5248
 return;
}
function __ZN17EthernetInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(511); //@line 862
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(510); //@line 859
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(509); //@line 856
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(508); //@line 853
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(507); //@line 850
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(506); //@line 847
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(505); //@line 844
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(504); //@line 841
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(503); //@line 838
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(502); //@line 835
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(501); //@line 832
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(500); //@line 829
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(499); //@line 826
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(498); //@line 823
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(497); //@line 820
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(496); //@line 817
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(495); //@line 814
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(494); //@line 811
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(493); //@line 808
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(492); //@line 805
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(491); //@line 802
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(490); //@line 799
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(489); //@line 796
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(488); //@line 793
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(487); //@line 790
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(486); //@line 787
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(485); //@line 784
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(484); //@line 781
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(483); //@line 778
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(482); //@line 775
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(481); //@line 772
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(480); //@line 769
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(479); //@line 766
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(478); //@line 763
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(477); //@line 760
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(476); //@line 757
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(475); //@line 754
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(474); //@line 751
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(473); //@line 748
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(472); //@line 745
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(471); //@line 742
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(470); //@line 739
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(469); //@line 736
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(468); //@line 733
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(467); //@line 730
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(466); //@line 727
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(465); //@line 724
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(464); //@line 721
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(463); //@line 718
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(462); //@line 715
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(461); //@line 712
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(460); //@line 709
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(459); //@line 706
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(458); //@line 703
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(457); //@line 700
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(456); //@line 697
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(455); //@line 694
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(454); //@line 691
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(453); //@line 688
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(452); //@line 685
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(451); //@line 682
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(450); //@line 679
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(449); //@line 676
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(448); //@line 673
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(447); //@line 670
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(446); //@line 667
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(445); //@line 664
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(444); //@line 661
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(443); //@line 658
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(442); //@line 655
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(441); //@line 652
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(440); //@line 649
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(439); //@line 646
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(438); //@line 643
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(437); //@line 640
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(436); //@line 637
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(435); //@line 634
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(434); //@line 631
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(433); //@line 628
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(432); //@line 625
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(431); //@line 622
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(430); //@line 619
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(429); //@line 616
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(428); //@line 613
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(427); //@line 610
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(426); //@line 607
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(425); //@line 604
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(424); //@line 601
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(423); //@line 598
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(422); //@line 595
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(421); //@line 592
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(420); //@line 589
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(419); //@line 586
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(418); //@line 583
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(417); //@line 580
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(416); //@line 577
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(415); //@line 574
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(414); //@line 571
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(413); //@line 568
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(412); //@line 565
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(411); //@line 562
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(410); //@line 559
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(409); //@line 556
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(408); //@line 553
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(407); //@line 550
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 4551
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 4879
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(406); //@line 547
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(405); //@line 544
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(404); //@line 541
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(403); //@line 538
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(402); //@line 535
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(401); //@line 532
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(400); //@line 529
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(399); //@line 526
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(398); //@line 523
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(397); //@line 520
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(396); //@line 517
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(395); //@line 514
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(394); //@line 511
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(393); //@line 508
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(392); //@line 505
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(391); //@line 502
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(390); //@line 499
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(389); //@line 496
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(388); //@line 493
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(387); //@line 490
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(386); //@line 487
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(385); //@line 484
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(384); //@line 481
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(383); //@line 478
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(382); //@line 475
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(381); //@line 472
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(380); //@line 469
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(379); //@line 466
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(378); //@line 463
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(377); //@line 460
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(376); //@line 457
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(375); //@line 454
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(374); //@line 451
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(373); //@line 448
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(372); //@line 445
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(371); //@line 442
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(370); //@line 439
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(369); //@line 436
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(368); //@line 433
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 430
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt9terminatev__async_cb_19($0) {
 $0 = $0 | 0;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function ___errno_location() {
 return 8436; //@line 4545
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _pthread_self() {
 return 2112; //@line 4598
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b58() {
 nullFunc_v(7); //@line 427
}
function b57() {
 nullFunc_v(6); //@line 424
}
function b56() {
 nullFunc_v(5); //@line 421
}
function b55() {
 nullFunc_v(0); //@line 415
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1];
var FUNCTION_TABLE_ii = [b3,__ZN17EthernetInterface15get_mac_addressEv,__ZN17EthernetInterface14get_ip_addressEv,__ZN17EthernetInterface11get_netmaskEv,__ZN17EthernetInterface11get_gatewayEv,__ZN17EthernetInterface7connectEv,__ZN17EthernetInterface10disconnectEv,__ZNK16NetworkInterface21get_connection_statusEv,__ZN16NetworkInterface12ethInterfaceEv,__ZN16NetworkInterface13wifiInterfaceEv,__ZN16NetworkInterface13meshInterfaceEv,__ZN16NetworkInterface12cellularBaseEv,__ZN16NetworkInterface13emacInterfaceEv,__ZN17EthernetInterface9get_stackEv,__ZThn4_N17EthernetInterface14get_ip_addressEv,__ZN12NetworkStack19onboardNetworkStackEv,__ZN9TCPSocket9get_protoEv,__ZN9UDPSocket9get_protoEv,___stdio_close,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13
,b14,b15,b16];
var FUNCTION_TABLE_iii = [b18,__ZN16NetworkInterface26gethostbyname_async_cancelEi,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress,__ZN17EthernetInterface8set_dhcpEb,__ZN16NetworkInterface12set_blockingEb,__ZN17EthernetInterface12socket_closeEPv,__ZN12NetworkStack26gethostbyname_async_cancelEi,__ZN12NetworkStack14add_dns_serverERK13SocketAddress,__ZThn4_N17EthernetInterface12socket_closeEPv,b19,b20,b21,b22,b23,b24,b25];
var FUNCTION_TABLE_iiii = [b27,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZN17EthernetInterface13socket_listenEPvi,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack14get_dns_serverEiP13SocketAddress,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZThn4_N17EthernetInterface13socket_listenEPvi,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_do_read,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38
,b39,b40,b41];
var FUNCTION_TABLE_iiiii = [b43,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZN17EthernetInterface11set_networkEPKcS1_S1_,__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZN17EthernetInterface11socket_sendEPvPKvj,__ZN17EthernetInterface11socket_recvEPvS0_j,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j,b44,b45,b46,b47];
var FUNCTION_TABLE_iiiiii = [b49,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,__ZN12NetworkStack11setstackoptEiiPKvj,__ZN12NetworkStack11getstackoptEiiPvPj,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,b50];
var FUNCTION_TABLE_iiiiiii = [b52,__ZN12NetworkStack10setsockoptEPviiPKvj,__ZN12NetworkStack10getsockoptEPviiS0_Pj,b53];
var FUNCTION_TABLE_v = [b55,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZL29nsapi_dns_query_async_timeoutv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b56,b57,b58];
var FUNCTION_TABLE_vi = [b60,__ZN17EthernetInterfaceD2Ev,__ZN17EthernetInterfaceD0Ev,__ZThn4_N17EthernetInterfaceD1Ev,__ZThn4_N17EthernetInterfaceD0Ev,_mbed_trace_default_print,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv,__ZN6SocketD2Ev,__ZN6SocketD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv,__ZN9TCPSocketD2Ev,__ZN9TCPSocketD0Ev,__ZN9TCPSocket5eventEv,__ZN9UDPSocketD2Ev,__ZN9UDPSocketD0Ev,__ZN9UDPSocket5eventEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev
,__ZN17EthernetInterface15get_mac_addressEv__async_cb,__ZN17EthernetInterface14get_ip_addressEv__async_cb,__ZN17EthernetInterface11get_netmaskEv__async_cb,__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb,__ZN17EthernetInterface8set_dhcpEb__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_218,__ZN17EthernetInterface12socket_closeEPv__async_cb,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_5,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_6,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_4,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_11,__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_175,__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_9,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_10,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_8,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_3
,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_126,_mbed_vtracef__async_cb_116,_mbed_vtracef__async_cb_117,_mbed_vtracef__async_cb_118,_mbed_vtracef__async_cb_125,_mbed_vtracef__async_cb_119,_mbed_vtracef__async_cb_124,_mbed_vtracef__async_cb_120,_mbed_vtracef__async_cb_121,_mbed_vtracef__async_cb_122,_mbed_vtracef__async_cb_123,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_63,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_32,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_50,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_51,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_52,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_12,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_18
,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_191,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_166,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_158,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_159,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_160,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_161,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_165,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_162,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_163,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_164,__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_29,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_21,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_27,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_22,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_23,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_28,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_24,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_26,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_25,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_14,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_15,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_16,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_17
,__ZN6SocketD2Ev__async_cb,__ZN6SocketD2Ev__async_cb_170,__ZN6Socket4openEP12NetworkStack__async_cb,__ZN6Socket4openEP12NetworkStack__async_cb_143,__ZN6Socket4openEP12NetworkStack__async_cb_144,__ZN6Socket4openEP12NetworkStack__async_cb_145,__ZN6Socket4openEP12NetworkStack__async_cb_146,__ZN4mbed8CallbackIFvvEE5thunkEPv,__ZN6Socket4openEP12NetworkStack__async_cb_147,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_115,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb,__ZN6Socket5closeEv__async_cb,__ZN6Socket5closeEv__async_cb_65,__ZN6Socket5closeEv__async_cb_66,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_53,__ZN9TCPSocketD2Ev__async_cb_31,__ZN9TCPSocketD2Ev__async_cb,__ZN9TCPSocketD2Ev__async_cb_30,__ZN9TCPSocketD0Ev__async_cb,__ZN9TCPSocket5eventEv__async_cb,__ZN9TCPSocket7connectEPKct__async_cb,__ZN9TCPSocket7connectEPKct__async_cb_77,__ZN9TCPSocket7connectEPKct__async_cb_76,__ZN9TCPSocket4sendEPKvj__async_cb_88,__ZN9TCPSocket4sendEPKvj__async_cb,__ZN9TCPSocket4recvEPvj__async_cb_114,__ZN9TCPSocket4recvEPvj__async_cb,__ZN9UDPSocketD2Ev__async_cb_128
,__ZN9UDPSocketD2Ev__async_cb,__ZN9UDPSocketD2Ev__async_cb_127,__ZN9UDPSocketD0Ev__async_cb,__ZN9UDPSocket5eventEv__async_cb,__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb,__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_59,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_56,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_55,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_54,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_58,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_57,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_73,__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_84,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_85,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_86,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_113,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_109,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_110,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_100,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_101,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_102,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_103,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_104
,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_112,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_105,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_106,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_107,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_108,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_111,__ZL29nsapi_dns_query_async_timeoutv__async_cb_138,__ZL29nsapi_dns_query_async_timeoutv__async_cb_139,__ZL29nsapi_dns_query_async_timeoutv__async_cb,__ZL30nsapi_dns_query_async_responsePv,__ZL29nsapi_dns_query_async_timeoutv__async_cb_142,__ZL29nsapi_dns_query_async_timeoutv__async_cb_130,__ZL29nsapi_dns_query_async_timeoutv__async_cb_131,__ZL29nsapi_dns_query_async_timeoutv__async_cb_132,__ZL26nsapi_dns_query_async_sendPv,__ZL29nsapi_dns_query_async_timeoutv__async_cb_141,__ZL29nsapi_dns_query_async_timeoutv__async_cb_133,__ZL29nsapi_dns_query_async_timeoutv__async_cb_134,__ZL29nsapi_dns_query_async_timeoutv__async_cb_135,__ZL29nsapi_dns_query_async_timeoutv__async_cb_140,__ZL29nsapi_dns_query_async_timeoutv__async_cb_136,__ZL29nsapi_dns_query_async_timeoutv__async_cb_137,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_152,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_148,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_149,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_151,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_150,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb,__ZL28nsapi_dns_query_async_createPv
,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_169,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_167,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_168,__ZL28nsapi_dns_query_async_createPv__async_cb_205,__ZL28nsapi_dns_query_async_createPv__async_cb_212,__ZL28nsapi_dns_query_async_createPv__async_cb,__ZL28nsapi_dns_query_async_createPv__async_cb_208,__ZL28nsapi_dns_query_async_createPv__async_cb_210,__ZL28nsapi_dns_query_async_createPv__async_cb_195,__ZL28nsapi_dns_query_async_createPv__async_cb_196,__ZL28nsapi_dns_query_async_createPv__async_cb_197,__ZL28nsapi_dns_query_async_createPv__async_cb_198,__ZL28nsapi_dns_query_async_createPv__async_cb_207,__ZL28nsapi_dns_query_async_createPv__async_cb_209,__ZL28nsapi_dns_query_async_createPv__async_cb_199,__ZL28nsapi_dns_query_async_createPv__async_cb_200,__ZL28nsapi_dns_query_async_createPv__async_cb_204,__ZL28nsapi_dns_query_async_createPv__async_cb_201,__ZL28nsapi_dns_query_async_createPv__async_cb_202,__ZL37nsapi_dns_query_async_socket_callbackPv,__ZL28nsapi_dns_query_async_createPv__async_cb_211,__ZL28nsapi_dns_query_async_createPv__async_cb_203,__ZL28nsapi_dns_query_async_createPv__async_cb_206,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_48,__ZL28nsapi_dns_query_async_deletei__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_45,__ZL28nsapi_dns_query_async_deletei__async_cb_46,__ZL28nsapi_dns_query_async_deletei__async_cb_47,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb
,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_62,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_60,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_61,__ZL26nsapi_dns_query_async_sendPv__async_cb,__ZL26nsapi_dns_query_async_sendPv__async_cb_40,__ZL26nsapi_dns_query_async_sendPv__async_cb_42,__ZL26nsapi_dns_query_async_sendPv__async_cb_33,__ZL26nsapi_dns_query_async_sendPv__async_cb_34,__ZL26nsapi_dns_query_async_sendPv__async_cb_35,__ZL26nsapi_dns_query_async_sendPv__async_cb_36,__ZL26nsapi_dns_query_async_sendPv__async_cb_39,__ZL26nsapi_dns_query_async_sendPv__async_cb_41,__ZL26nsapi_dns_query_async_sendPv__async_cb_37,__ZL26nsapi_dns_query_async_sendPv__async_cb_38,__ZL26nsapi_dns_query_async_sendPv__async_cb_43,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_72,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_71,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_69,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_70,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_67,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_68,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_81,__ZL30nsapi_dns_query_async_responsePv__async_cb_80,__ZL30nsapi_dns_query_async_responsePv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_82,__ZL30nsapi_dns_query_async_responsePv__async_cb_83,__ZL30nsapi_dns_query_async_responsePv__async_cb_78
,__ZL30nsapi_dns_query_async_responsePv__async_cb_79,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_157,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_153,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_154,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_155,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_156,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb_214,__Z28nsapi_dns_query_async_canceli__async_cb_215,_mbed_assert_internal__async_cb,_mbed_die__async_cb_190,_mbed_die__async_cb_189,_mbed_die__async_cb_188,_mbed_die__async_cb_187,_mbed_die__async_cb_186,_mbed_die__async_cb_185,_mbed_die__async_cb_184,_mbed_die__async_cb_183,_mbed_die__async_cb_182,_mbed_die__async_cb_181,_mbed_die__async_cb_180,_mbed_die__async_cb_179,_mbed_die__async_cb_178,_mbed_die__async_cb_177,_mbed_die__async_cb_176,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb
,_mbed_error_vfprintf__async_cb_2,_mbed_error_vfprintf__async_cb_1,_serial_putc__async_cb_49,_serial_putc__async_cb,_invoke_ticker__async_cb_20,_invoke_ticker__async_cb,_wait_ms__async_cb,_main__async_cb_91,_main__async_cb_99,_main__async_cb_98,_main__async_cb,_main__async_cb_97,_main__async_cb_94,_main__async_cb_89,_main__async_cb_93,_main__async_cb_92,_main__async_cb_96,_main__async_cb_90,_main__async_cb_95,_putc__async_cb_13,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_193,_fflush__async_cb_192,_fflush__async_cb_194,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_129,_vfprintf__async_cb,_snprintf__async_cb
,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_fputc__async_cb_64,_fputc__async_cb,_puts__async_cb,__Znwj__async_cb,__ZnwjRKSt9nothrow_t__async_cb,__Znaj__async_cb,__ZnajRKSt9nothrow_t__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_213,_abort_message__async_cb,_abort_message__async_cb_7,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_44,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_216,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_74,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_217,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_174,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_173,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_172
,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_171,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_75,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81
,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111
,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141
,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171
,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201
,b202,b203,b204];
var FUNCTION_TABLE_vii = [b206,__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE,__ZN12NetworkStack20get_call_in_callbackEv,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv];
var FUNCTION_TABLE_viii = [b208];
var FUNCTION_TABLE_viiii = [b210,__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b211,b212];
var FUNCTION_TABLE_viiiii = [b214,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b216,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=network.js.map