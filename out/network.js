// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0) { return window.MbedJSHal.network.get_mac_address(); },
 function($0) { return window.MbedJSHal.network.get_ip_address(); },
 function($0) { return window.MbedJSHal.network.get_netmask(); },
 function($0) { return window.MbedJSHal.network.socket_open($0); },
 function($0) { return window.MbedJSHal.network.socket_close($0); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_connect($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_send($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_recv($0, $1, $2); },
 function() { console.log('rx_frame', Date.now()); },
 function() { return Date.now(); },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 9776;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "network.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0"];
var debug_table_ii = ["0", "__ZN17EthernetInterface15get_mac_addressEv", "__ZN17EthernetInterface14get_ip_addressEv", "__ZN17EthernetInterface11get_netmaskEv", "__ZN17EthernetInterface11get_gatewayEv", "__ZN17EthernetInterface7connectEv", "__ZN17EthernetInterface10disconnectEv", "__ZNK16NetworkInterface21get_connection_statusEv", "__ZN16NetworkInterface12ethInterfaceEv", "__ZN16NetworkInterface13wifiInterfaceEv", "__ZN16NetworkInterface13meshInterfaceEv", "__ZN16NetworkInterface12cellularBaseEv", "__ZN16NetworkInterface13emacInterfaceEv", "__ZN17EthernetInterface9get_stackEv", "__ZThn4_N17EthernetInterface14get_ip_addressEv", "__ZN12NetworkStack19onboardNetworkStackEv", "__ZN9TCPSocket9get_protoEv", "__ZN9UDPSocket9get_protoEv", "___stdio_close", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16NetworkInterface26gethostbyname_async_cancelEi", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress", "__ZN17EthernetInterface8set_dhcpEb", "__ZN16NetworkInterface12set_blockingEb", "__ZN17EthernetInterface12socket_closeEPv", "__ZN12NetworkStack26gethostbyname_async_cancelEi", "__ZN12NetworkStack14add_dns_serverERK13SocketAddress", "__ZThn4_N17EthernetInterface12socket_closeEPv", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZN17EthernetInterface13socket_listenEPvi", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack14get_dns_serverEiP13SocketAddress", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface13socket_listenEPvi", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_do_read", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZN17EthernetInterface11set_networkEPKcS1_S1_", "__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZN17EthernetInterface11socket_sendEPvPKvj", "__ZN17EthernetInterface11socket_recvEPvS0_j", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j", "0", "0", "0", "0"];
var debug_table_iiiiii = ["0", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "__ZN12NetworkStack11setstackoptEiiPKvj", "__ZN12NetworkStack11getstackoptEiiPvPj", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "0"];
var debug_table_iiiiiii = ["0", "__ZN12NetworkStack10setsockoptEPviiPKvj", "__ZN12NetworkStack10getsockoptEPviiS0_Pj", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "__ZL25default_terminate_handlerv", "__Z29nsapi_dns_query_async_timeoutv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN17EthernetInterfaceD2Ev", "__ZN17EthernetInterfaceD0Ev", "__ZThn4_N17EthernetInterfaceD1Ev", "__ZThn4_N17EthernetInterfaceD0Ev", "_mbed_trace_default_print", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv", "__ZN6SocketD2Ev", "__ZN6SocketD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv", "__ZN9TCPSocketD2Ev", "__ZN9TCPSocketD0Ev", "__ZN9TCPSocket5eventEv", "__ZN9UDPSocketD2Ev", "__ZN9UDPSocketD0Ev", "__ZN9UDPSocket5eventEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN17EthernetInterface15get_mac_addressEv__async_cb", "__ZN17EthernetInterface14get_ip_addressEv__async_cb", "__ZN17EthernetInterface11get_netmaskEv__async_cb", "__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb", "__ZN17EthernetInterface8set_dhcpEb__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_131", "__ZN17EthernetInterface12socket_closeEPv__async_cb", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_41", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_42", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_40", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_89", "__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_126", "__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_2", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_3", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_1", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_101", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_185", "_mbed_vtracef__async_cb_175", "_mbed_vtracef__async_cb_176", "_mbed_vtracef__async_cb_177", "_mbed_vtracef__async_cb_184", "_mbed_vtracef__async_cb_178", "_mbed_vtracef__async_cb_183", "_mbed_vtracef__async_cb_179", "_mbed_vtracef__async_cb_180", "_mbed_vtracef__async_cb_181", "_mbed_vtracef__async_cb_182", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_123", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_136", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_138", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_139", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_140", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_152", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_57", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_6", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_39", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_31", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_32", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_33", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_34", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_38", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_35", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_36", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_37", "__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_150", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_142", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_148", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_143", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_144", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_149", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_145", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_147", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_146", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_163", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_164", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_165", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_166", "__ZN6SocketD2Ev__async_cb", "__ZN6SocketD2Ev__async_cb_30", "__ZN6Socket4openEP12NetworkStack__async_cb", "__ZN6Socket4openEP12NetworkStack__async_cb_45", "__ZN6Socket4openEP12NetworkStack__async_cb_46", "__ZN6Socket4openEP12NetworkStack__async_cb_47", "__ZN6Socket4openEP12NetworkStack__async_cb_48", "__ZN4mbed8CallbackIFvvEE5thunkEPv", "__ZN6Socket4openEP12NetworkStack__async_cb_49", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_50", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb", "__ZN6Socket5closeEv__async_cb", "__ZN6Socket5closeEv__async_cb_189", "__ZN6Socket5closeEv__async_cb_190", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_122", "__ZN9TCPSocketD2Ev__async_cb_44", "__ZN9TCPSocketD2Ev__async_cb", "__ZN9TCPSocketD2Ev__async_cb_43", "__ZN9TCPSocketD0Ev__async_cb", "__ZN9TCPSocket5eventEv__async_cb", "__ZN9TCPSocket7connectEPKct__async_cb", "__ZN9TCPSocket7connectEPKct__async_cb_125", "__ZN9TCPSocket7connectEPKct__async_cb_124", "__ZN9TCPSocket4sendEPKvj__async_cb_159", "__ZN9TCPSocket4sendEPKvj__async_cb", "__ZN9TCPSocket4recvEPvj__async_cb_151", "__ZN9TCPSocket4recvEPvj__async_cb", "__ZN9UDPSocketD2Ev__async_cb_69", "__ZN9UDPSocketD2Ev__async_cb", "__ZN9UDPSocketD2Ev__async_cb_68", "__ZN9UDPSocketD0Ev__async_cb", "__ZN9UDPSocket5eventEv__async_cb", "__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb", "__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_200", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_197", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_196", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_195", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_199", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_198", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_186", "__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_127", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_130", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_128", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_129", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_88", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_84", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_85", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_70", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_71", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_72", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_73", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_74", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_75", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_76", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_77", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_78", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_79", "__ZL28nsapi_dns_query_async_createPv", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_86", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_80", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_81", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_82", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_83", "__Z29nsapi_dns_query_async_timeoutv__async_cb", "__ZL30nsapi_dns_query_async_responsePv", "__Z29nsapi_dns_query_async_timeoutv__async_cb_117", "__Z29nsapi_dns_query_async_timeoutv__async_cb_107", "__Z29nsapi_dns_query_async_timeoutv__async_cb_108", "__Z29nsapi_dns_query_async_timeoutv__async_cb_109", "__ZL26nsapi_dns_query_async_sendPv", "__Z29nsapi_dns_query_async_timeoutv__async_cb_116", "__Z29nsapi_dns_query_async_timeoutv__async_cb_110", "__Z29nsapi_dns_query_async_timeoutv__async_cb_111", "__Z29nsapi_dns_query_async_timeoutv__async_cb_112", "__Z29nsapi_dns_query_async_timeoutv__async_cb_115", "__Z29nsapi_dns_query_async_timeoutv__async_cb_113", "__Z29nsapi_dns_query_async_timeoutv__async_cb_114", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_56", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_52", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_53", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_55", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_54", "__ZL28nsapi_dns_query_async_createPv__async_cb_62", "__ZL28nsapi_dns_query_async_createPv__async_cb_67", "__ZL28nsapi_dns_query_async_createPv__async_cb_65", "__ZL28nsapi_dns_query_async_createPv__async_cb", "__ZL28nsapi_dns_query_async_createPv__async_cb_64", "__ZL28nsapi_dns_query_async_createPv__async_cb_61", "__ZL28nsapi_dns_query_async_createPv__async_cb_58", "__ZL28nsapi_dns_query_async_createPv__async_cb_59", "__ZL37nsapi_dns_query_async_socket_callbackPv", "__ZL28nsapi_dns_query_async_createPv__async_cb_66", "__ZL28nsapi_dns_query_async_createPv__async_cb_60", "__ZL28nsapi_dns_query_async_createPv__async_cb_63", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_12", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_7", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_13", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_8", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_9", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_14", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_10", "__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_11", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_193", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_191", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_192", "__ZL26nsapi_dns_query_async_sendPv__async_cb_204", "__ZL26nsapi_dns_query_async_sendPv__async_cb", "__ZL26nsapi_dns_query_async_sendPv__async_cb_203", "__ZL26nsapi_dns_query_async_sendPv__async_cb_205", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_174", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_171", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_173", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_172", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_169", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_170", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_121", "__ZL30nsapi_dns_query_async_responsePv__async_cb_119", "__ZL30nsapi_dns_query_async_responsePv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_120", "__ZL28nsapi_dns_query_async_deletei__async_cb_135", "__ZL28nsapi_dns_query_async_deletei__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_132", "__ZL28nsapi_dns_query_async_deletei__async_cb_133", "__ZL28nsapi_dns_query_async_deletei__async_cb_134", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_106", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_102", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_103", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_104", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_105", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_29", "_mbed_die__async_cb_28", "_mbed_die__async_cb_27", "_mbed_die__async_cb_26", "_mbed_die__async_cb_25", "_mbed_die__async_cb_24", "_mbed_die__async_cb_23", "_mbed_die__async_cb_22", "_mbed_die__async_cb_21", "_mbed_die__async_cb_20", "_mbed_die__async_cb_19", "_mbed_die__async_cb_18", "_mbed_die__async_cb_17", "_mbed_die__async_cb_16", "_mbed_die__async_cb_15", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_202", "_mbed_error_vfprintf__async_cb_201", "_serial_putc__async_cb_167", "_serial_putc__async_cb", "_invoke_ticker__async_cb_154", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "_main__async_cb_92", "_main__async_cb_100", "_main__async_cb_99", "_main__async_cb", "_main__async_cb_98", "_main__async_cb_95", "_main__async_cb_90", "_main__async_cb_94", "_main__async_cb_93", "_main__async_cb_97", "_main__async_cb_91", "_main__async_cb_96", "_putc__async_cb_194", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_161", "_fflush__async_cb_160", "_fflush__async_cb_162", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_168", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_fputc__async_cb_188", "_fputc__async_cb", "_puts__async_cb", "__Znwj__async_cb", "__ZnwjRKSt9nothrow_t__async_cb", "__Znaj__async_cb", "__ZnajRKSt9nothrow_t__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_141", "_abort_message__async_cb", "_abort_message__async_cb_4", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_187", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_153", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_118", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_51", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_158", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_157", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_156", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_155", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_137", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE", "__ZN12NetworkStack20get_call_in_callbackEv", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv"];
var debug_table_viii = ["0"];
var debug_table_viiii = ["0", "__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 61
 STACKTOP = STACKTOP + 16 | 0; //@line 62
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62
 $1 = sp; //@line 63
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 70
   $7 = $6 >>> 3; //@line 71
   $8 = HEAP32[1968] | 0; //@line 72
   $9 = $8 >>> $7; //@line 73
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 79
    $16 = 7912 + ($14 << 1 << 2) | 0; //@line 81
    $17 = $16 + 8 | 0; //@line 82
    $18 = HEAP32[$17 >> 2] | 0; //@line 83
    $19 = $18 + 8 | 0; //@line 84
    $20 = HEAP32[$19 >> 2] | 0; //@line 85
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[1968] = $8 & ~(1 << $14); //@line 92
     } else {
      if ((HEAP32[1972] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 97
      }
      $27 = $20 + 12 | 0; //@line 100
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 104
       HEAP32[$17 >> 2] = $20; //@line 105
       break;
      } else {
       _abort(); //@line 108
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 113
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 116
    $34 = $18 + $30 + 4 | 0; //@line 118
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 121
    $$0 = $19; //@line 122
    STACKTOP = sp; //@line 123
    return $$0 | 0; //@line 123
   }
   $37 = HEAP32[1970] | 0; //@line 125
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 131
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 134
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 137
     $49 = $47 >>> 12 & 16; //@line 139
     $50 = $47 >>> $49; //@line 140
     $52 = $50 >>> 5 & 8; //@line 142
     $54 = $50 >>> $52; //@line 144
     $56 = $54 >>> 2 & 4; //@line 146
     $58 = $54 >>> $56; //@line 148
     $60 = $58 >>> 1 & 2; //@line 150
     $62 = $58 >>> $60; //@line 152
     $64 = $62 >>> 1 & 1; //@line 154
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 157
     $69 = 7912 + ($67 << 1 << 2) | 0; //@line 159
     $70 = $69 + 8 | 0; //@line 160
     $71 = HEAP32[$70 >> 2] | 0; //@line 161
     $72 = $71 + 8 | 0; //@line 162
     $73 = HEAP32[$72 >> 2] | 0; //@line 163
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 169
       HEAP32[1968] = $77; //@line 170
       $98 = $77; //@line 171
      } else {
       if ((HEAP32[1972] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 176
       }
       $80 = $73 + 12 | 0; //@line 179
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 183
        HEAP32[$70 >> 2] = $73; //@line 184
        $98 = $8; //@line 185
        break;
       } else {
        _abort(); //@line 188
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 193
     $84 = $83 - $6 | 0; //@line 194
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 197
     $87 = $71 + $6 | 0; //@line 198
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 201
     HEAP32[$71 + $83 >> 2] = $84; //@line 203
     if ($37 | 0) {
      $92 = HEAP32[1973] | 0; //@line 206
      $93 = $37 >>> 3; //@line 207
      $95 = 7912 + ($93 << 1 << 2) | 0; //@line 209
      $96 = 1 << $93; //@line 210
      if (!($98 & $96)) {
       HEAP32[1968] = $98 | $96; //@line 215
       $$0199 = $95; //@line 217
       $$pre$phiZ2D = $95 + 8 | 0; //@line 217
      } else {
       $101 = $95 + 8 | 0; //@line 219
       $102 = HEAP32[$101 >> 2] | 0; //@line 220
       if ((HEAP32[1972] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 224
       } else {
        $$0199 = $102; //@line 227
        $$pre$phiZ2D = $101; //@line 227
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 230
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 232
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 234
      HEAP32[$92 + 12 >> 2] = $95; //@line 236
     }
     HEAP32[1970] = $84; //@line 238
     HEAP32[1973] = $87; //@line 239
     $$0 = $72; //@line 240
     STACKTOP = sp; //@line 241
     return $$0 | 0; //@line 241
    }
    $108 = HEAP32[1969] | 0; //@line 243
    if (!$108) {
     $$0197 = $6; //@line 246
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 250
     $114 = $112 >>> 12 & 16; //@line 252
     $115 = $112 >>> $114; //@line 253
     $117 = $115 >>> 5 & 8; //@line 255
     $119 = $115 >>> $117; //@line 257
     $121 = $119 >>> 2 & 4; //@line 259
     $123 = $119 >>> $121; //@line 261
     $125 = $123 >>> 1 & 2; //@line 263
     $127 = $123 >>> $125; //@line 265
     $129 = $127 >>> 1 & 1; //@line 267
     $134 = HEAP32[8176 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 272
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 276
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 282
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 285
      $$0193$lcssa$i = $138; //@line 285
     } else {
      $$01926$i = $134; //@line 287
      $$01935$i = $138; //@line 287
      $146 = $143; //@line 287
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 292
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 293
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 294
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 295
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 301
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 304
        $$0193$lcssa$i = $$$0193$i; //@line 304
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 307
        $$01935$i = $$$0193$i; //@line 307
       }
      }
     }
     $157 = HEAP32[1972] | 0; //@line 311
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 314
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 317
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 320
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 324
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 326
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 330
       $176 = HEAP32[$175 >> 2] | 0; //@line 331
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 334
        $179 = HEAP32[$178 >> 2] | 0; //@line 335
        if (!$179) {
         $$3$i = 0; //@line 338
         break;
        } else {
         $$1196$i = $179; //@line 341
         $$1198$i = $178; //@line 341
        }
       } else {
        $$1196$i = $176; //@line 344
        $$1198$i = $175; //@line 344
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 347
        $182 = HEAP32[$181 >> 2] | 0; //@line 348
        if ($182 | 0) {
         $$1196$i = $182; //@line 351
         $$1198$i = $181; //@line 351
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 354
        $185 = HEAP32[$184 >> 2] | 0; //@line 355
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 360
         $$1198$i = $184; //@line 360
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 365
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 368
        $$3$i = $$1196$i; //@line 369
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 374
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 377
       }
       $169 = $167 + 12 | 0; //@line 380
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 384
       }
       $172 = $164 + 8 | 0; //@line 387
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 391
        HEAP32[$172 >> 2] = $167; //@line 392
        $$3$i = $164; //@line 393
        break;
       } else {
        _abort(); //@line 396
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 405
       $191 = 8176 + ($190 << 2) | 0; //@line 406
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 411
         if (!$$3$i) {
          HEAP32[1969] = $108 & ~(1 << $190); //@line 417
          break L73;
         }
        } else {
         if ((HEAP32[1972] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 424
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 432
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[1972] | 0; //@line 442
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 445
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 449
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 451
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 457
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 461
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 463
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 469
       if ($214 | 0) {
        if ((HEAP32[1972] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 475
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 479
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 481
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 489
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 492
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 494
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 497
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 501
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 504
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 506
      if ($37 | 0) {
       $234 = HEAP32[1973] | 0; //@line 509
       $235 = $37 >>> 3; //@line 510
       $237 = 7912 + ($235 << 1 << 2) | 0; //@line 512
       $238 = 1 << $235; //@line 513
       if (!($8 & $238)) {
        HEAP32[1968] = $8 | $238; //@line 518
        $$0189$i = $237; //@line 520
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 520
       } else {
        $242 = $237 + 8 | 0; //@line 522
        $243 = HEAP32[$242 >> 2] | 0; //@line 523
        if ((HEAP32[1972] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 527
        } else {
         $$0189$i = $243; //@line 530
         $$pre$phi$iZ2D = $242; //@line 530
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 533
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 535
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 537
       HEAP32[$234 + 12 >> 2] = $237; //@line 539
      }
      HEAP32[1970] = $$0193$lcssa$i; //@line 541
      HEAP32[1973] = $159; //@line 542
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 545
     STACKTOP = sp; //@line 546
     return $$0 | 0; //@line 546
    }
   } else {
    $$0197 = $6; //@line 549
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 554
   } else {
    $251 = $0 + 11 | 0; //@line 556
    $252 = $251 & -8; //@line 557
    $253 = HEAP32[1969] | 0; //@line 558
    if (!$253) {
     $$0197 = $252; //@line 561
    } else {
     $255 = 0 - $252 | 0; //@line 563
     $256 = $251 >>> 8; //@line 564
     if (!$256) {
      $$0358$i = 0; //@line 567
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 571
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 575
       $262 = $256 << $261; //@line 576
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 579
       $267 = $262 << $265; //@line 581
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 584
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 589
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 595
      }
     }
     $282 = HEAP32[8176 + ($$0358$i << 2) >> 2] | 0; //@line 599
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 603
       $$3$i203 = 0; //@line 603
       $$3350$i = $255; //@line 603
       label = 81; //@line 604
      } else {
       $$0342$i = 0; //@line 611
       $$0347$i = $255; //@line 611
       $$0353$i = $282; //@line 611
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 611
       $$0362$i = 0; //@line 611
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 616
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 621
          $$435113$i = 0; //@line 621
          $$435712$i = $$0353$i; //@line 621
          label = 85; //@line 622
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 625
          $$1348$i = $292; //@line 625
         }
        } else {
         $$1343$i = $$0342$i; //@line 628
         $$1348$i = $$0347$i; //@line 628
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 631
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 634
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 638
        $302 = ($$0353$i | 0) == 0; //@line 639
        if ($302) {
         $$2355$i = $$1363$i; //@line 644
         $$3$i203 = $$1343$i; //@line 644
         $$3350$i = $$1348$i; //@line 644
         label = 81; //@line 645
         break;
        } else {
         $$0342$i = $$1343$i; //@line 648
         $$0347$i = $$1348$i; //@line 648
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 648
         $$0362$i = $$1363$i; //@line 648
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 658
       $309 = $253 & ($306 | 0 - $306); //@line 661
       if (!$309) {
        $$0197 = $252; //@line 664
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 669
       $315 = $313 >>> 12 & 16; //@line 671
       $316 = $313 >>> $315; //@line 672
       $318 = $316 >>> 5 & 8; //@line 674
       $320 = $316 >>> $318; //@line 676
       $322 = $320 >>> 2 & 4; //@line 678
       $324 = $320 >>> $322; //@line 680
       $326 = $324 >>> 1 & 2; //@line 682
       $328 = $324 >>> $326; //@line 684
       $330 = $328 >>> 1 & 1; //@line 686
       $$4$ph$i = 0; //@line 692
       $$4357$ph$i = HEAP32[8176 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 692
      } else {
       $$4$ph$i = $$3$i203; //@line 694
       $$4357$ph$i = $$2355$i; //@line 694
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 698
       $$4351$lcssa$i = $$3350$i; //@line 698
      } else {
       $$414$i = $$4$ph$i; //@line 700
       $$435113$i = $$3350$i; //@line 700
       $$435712$i = $$4357$ph$i; //@line 700
       label = 85; //@line 701
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 706
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 710
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 711
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 712
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 713
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 719
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 722
        $$4351$lcssa$i = $$$4351$i; //@line 722
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 725
        $$435113$i = $$$4351$i; //@line 725
        label = 85; //@line 726
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 732
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[1970] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[1972] | 0; //@line 738
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 741
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 744
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 747
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 751
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 753
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 757
         $371 = HEAP32[$370 >> 2] | 0; //@line 758
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 761
          $374 = HEAP32[$373 >> 2] | 0; //@line 762
          if (!$374) {
           $$3372$i = 0; //@line 765
           break;
          } else {
           $$1370$i = $374; //@line 768
           $$1374$i = $373; //@line 768
          }
         } else {
          $$1370$i = $371; //@line 771
          $$1374$i = $370; //@line 771
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 774
          $377 = HEAP32[$376 >> 2] | 0; //@line 775
          if ($377 | 0) {
           $$1370$i = $377; //@line 778
           $$1374$i = $376; //@line 778
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 781
          $380 = HEAP32[$379 >> 2] | 0; //@line 782
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 787
           $$1374$i = $379; //@line 787
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 792
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 795
          $$3372$i = $$1370$i; //@line 796
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 801
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 804
         }
         $364 = $362 + 12 | 0; //@line 807
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 811
         }
         $367 = $359 + 8 | 0; //@line 814
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 818
          HEAP32[$367 >> 2] = $362; //@line 819
          $$3372$i = $359; //@line 820
          break;
         } else {
          _abort(); //@line 823
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 831
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 834
         $386 = 8176 + ($385 << 2) | 0; //@line 835
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 840
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 845
            HEAP32[1969] = $391; //@line 846
            $475 = $391; //@line 847
            break L164;
           }
          } else {
           if ((HEAP32[1972] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 854
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 862
            if (!$$3372$i) {
             $475 = $253; //@line 865
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[1972] | 0; //@line 873
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 876
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 880
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 882
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 888
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 892
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 894
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 900
         if (!$409) {
          $475 = $253; //@line 903
         } else {
          if ((HEAP32[1972] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 908
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 912
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 914
           $475 = $253; //@line 915
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 924
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 927
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 929
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 932
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 936
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 939
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 941
         $428 = $$4351$lcssa$i >>> 3; //@line 942
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 7912 + ($428 << 1 << 2) | 0; //@line 946
          $432 = HEAP32[1968] | 0; //@line 947
          $433 = 1 << $428; //@line 948
          if (!($432 & $433)) {
           HEAP32[1968] = $432 | $433; //@line 953
           $$0368$i = $431; //@line 955
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 955
          } else {
           $437 = $431 + 8 | 0; //@line 957
           $438 = HEAP32[$437 >> 2] | 0; //@line 958
           if ((HEAP32[1972] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 962
           } else {
            $$0368$i = $438; //@line 965
            $$pre$phi$i211Z2D = $437; //@line 965
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 968
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 970
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 972
          HEAP32[$354 + 12 >> 2] = $431; //@line 974
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 977
         if (!$444) {
          $$0361$i = 0; //@line 980
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 984
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 988
           $450 = $444 << $449; //@line 989
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 992
           $455 = $450 << $453; //@line 994
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 997
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 1002
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 1008
          }
         }
         $469 = 8176 + ($$0361$i << 2) | 0; //@line 1011
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 1013
         $471 = $354 + 16 | 0; //@line 1014
         HEAP32[$471 + 4 >> 2] = 0; //@line 1016
         HEAP32[$471 >> 2] = 0; //@line 1017
         $473 = 1 << $$0361$i; //@line 1018
         if (!($475 & $473)) {
          HEAP32[1969] = $475 | $473; //@line 1023
          HEAP32[$469 >> 2] = $354; //@line 1024
          HEAP32[$354 + 24 >> 2] = $469; //@line 1026
          HEAP32[$354 + 12 >> 2] = $354; //@line 1028
          HEAP32[$354 + 8 >> 2] = $354; //@line 1030
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 1039
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 1039
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 1046
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 1050
          $494 = HEAP32[$492 >> 2] | 0; //@line 1052
          if (!$494) {
           label = 136; //@line 1055
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 1058
           $$0345$i = $494; //@line 1058
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[1972] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 1065
          } else {
           HEAP32[$492 >> 2] = $354; //@line 1068
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 1070
           HEAP32[$354 + 12 >> 2] = $354; //@line 1072
           HEAP32[$354 + 8 >> 2] = $354; //@line 1074
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 1079
          $502 = HEAP32[$501 >> 2] | 0; //@line 1080
          $503 = HEAP32[1972] | 0; //@line 1081
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 1087
           HEAP32[$501 >> 2] = $354; //@line 1088
           HEAP32[$354 + 8 >> 2] = $502; //@line 1090
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 1092
           HEAP32[$354 + 24 >> 2] = 0; //@line 1094
           break;
          } else {
           _abort(); //@line 1097
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 1104
       STACKTOP = sp; //@line 1105
       return $$0 | 0; //@line 1105
      } else {
       $$0197 = $252; //@line 1107
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[1970] | 0; //@line 1114
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 1117
  $515 = HEAP32[1973] | 0; //@line 1118
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 1121
   HEAP32[1973] = $517; //@line 1122
   HEAP32[1970] = $514; //@line 1123
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 1126
   HEAP32[$515 + $512 >> 2] = $514; //@line 1128
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 1131
  } else {
   HEAP32[1970] = 0; //@line 1133
   HEAP32[1973] = 0; //@line 1134
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 1137
   $526 = $515 + $512 + 4 | 0; //@line 1139
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 1142
  }
  $$0 = $515 + 8 | 0; //@line 1145
  STACKTOP = sp; //@line 1146
  return $$0 | 0; //@line 1146
 }
 $530 = HEAP32[1971] | 0; //@line 1148
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 1151
  HEAP32[1971] = $532; //@line 1152
  $533 = HEAP32[1974] | 0; //@line 1153
  $534 = $533 + $$0197 | 0; //@line 1154
  HEAP32[1974] = $534; //@line 1155
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 1158
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 1161
  $$0 = $533 + 8 | 0; //@line 1163
  STACKTOP = sp; //@line 1164
  return $$0 | 0; //@line 1164
 }
 if (!(HEAP32[2086] | 0)) {
  HEAP32[2088] = 4096; //@line 1169
  HEAP32[2087] = 4096; //@line 1170
  HEAP32[2089] = -1; //@line 1171
  HEAP32[2090] = -1; //@line 1172
  HEAP32[2091] = 0; //@line 1173
  HEAP32[2079] = 0; //@line 1174
  HEAP32[2086] = $1 & -16 ^ 1431655768; //@line 1178
  $548 = 4096; //@line 1179
 } else {
  $548 = HEAP32[2088] | 0; //@line 1182
 }
 $545 = $$0197 + 48 | 0; //@line 1184
 $546 = $$0197 + 47 | 0; //@line 1185
 $547 = $548 + $546 | 0; //@line 1186
 $549 = 0 - $548 | 0; //@line 1187
 $550 = $547 & $549; //@line 1188
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 1191
  STACKTOP = sp; //@line 1192
  return $$0 | 0; //@line 1192
 }
 $552 = HEAP32[2078] | 0; //@line 1194
 if ($552 | 0) {
  $554 = HEAP32[2076] | 0; //@line 1197
  $555 = $554 + $550 | 0; //@line 1198
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 1203
   STACKTOP = sp; //@line 1204
   return $$0 | 0; //@line 1204
  }
 }
 L244 : do {
  if (!(HEAP32[2079] & 4)) {
   $561 = HEAP32[1974] | 0; //@line 1212
   L246 : do {
    if (!$561) {
     label = 163; //@line 1216
    } else {
     $$0$i$i = 8320; //@line 1218
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 1220
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 1223
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 1232
      if (!$570) {
       label = 163; //@line 1235
       break L246;
      } else {
       $$0$i$i = $570; //@line 1238
      }
     }
     $595 = $547 - $530 & $549; //@line 1242
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 1245
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 1253
       } else {
        $$723947$i = $595; //@line 1255
        $$748$i = $597; //@line 1255
        label = 180; //@line 1256
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 1260
       $$2253$ph$i = $595; //@line 1260
       label = 171; //@line 1261
      }
     } else {
      $$2234243136$i = 0; //@line 1264
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 1270
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 1273
     } else {
      $574 = $572; //@line 1275
      $575 = HEAP32[2087] | 0; //@line 1276
      $576 = $575 + -1 | 0; //@line 1277
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 1285
      $584 = HEAP32[2076] | 0; //@line 1286
      $585 = $$$i + $584 | 0; //@line 1287
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[2078] | 0; //@line 1292
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 1299
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 1303
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 1306
        $$748$i = $572; //@line 1306
        label = 180; //@line 1307
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 1310
        $$2253$ph$i = $$$i; //@line 1310
        label = 171; //@line 1311
       }
      } else {
       $$2234243136$i = 0; //@line 1314
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 1321
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 1330
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 1333
       $$748$i = $$2247$ph$i; //@line 1333
       label = 180; //@line 1334
       break L244;
      }
     }
     $607 = HEAP32[2088] | 0; //@line 1338
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 1342
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 1345
      $$748$i = $$2247$ph$i; //@line 1345
      label = 180; //@line 1346
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 1352
      $$2234243136$i = 0; //@line 1353
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 1357
      $$748$i = $$2247$ph$i; //@line 1357
      label = 180; //@line 1358
      break L244;
     }
    }
   } while (0);
   HEAP32[2079] = HEAP32[2079] | 4; //@line 1365
   $$4236$i = $$2234243136$i; //@line 1366
   label = 178; //@line 1367
  } else {
   $$4236$i = 0; //@line 1369
   label = 178; //@line 1370
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 1376
   $621 = _sbrk(0) | 0; //@line 1377
   $627 = $621 - $620 | 0; //@line 1385
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 1387
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 1395
    $$748$i = $620; //@line 1395
    label = 180; //@line 1396
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[2076] | 0) + $$723947$i | 0; //@line 1402
  HEAP32[2076] = $633; //@line 1403
  if ($633 >>> 0 > (HEAP32[2077] | 0) >>> 0) {
   HEAP32[2077] = $633; //@line 1407
  }
  $636 = HEAP32[1974] | 0; //@line 1409
  do {
   if (!$636) {
    $638 = HEAP32[1972] | 0; //@line 1413
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[1972] = $$748$i; //@line 1418
    }
    HEAP32[2080] = $$748$i; //@line 1420
    HEAP32[2081] = $$723947$i; //@line 1421
    HEAP32[2083] = 0; //@line 1422
    HEAP32[1977] = HEAP32[2086]; //@line 1424
    HEAP32[1976] = -1; //@line 1425
    HEAP32[1981] = 7912; //@line 1426
    HEAP32[1980] = 7912; //@line 1427
    HEAP32[1983] = 7920; //@line 1428
    HEAP32[1982] = 7920; //@line 1429
    HEAP32[1985] = 7928; //@line 1430
    HEAP32[1984] = 7928; //@line 1431
    HEAP32[1987] = 7936; //@line 1432
    HEAP32[1986] = 7936; //@line 1433
    HEAP32[1989] = 7944; //@line 1434
    HEAP32[1988] = 7944; //@line 1435
    HEAP32[1991] = 7952; //@line 1436
    HEAP32[1990] = 7952; //@line 1437
    HEAP32[1993] = 7960; //@line 1438
    HEAP32[1992] = 7960; //@line 1439
    HEAP32[1995] = 7968; //@line 1440
    HEAP32[1994] = 7968; //@line 1441
    HEAP32[1997] = 7976; //@line 1442
    HEAP32[1996] = 7976; //@line 1443
    HEAP32[1999] = 7984; //@line 1444
    HEAP32[1998] = 7984; //@line 1445
    HEAP32[2001] = 7992; //@line 1446
    HEAP32[2e3] = 7992; //@line 1447
    HEAP32[2003] = 8e3; //@line 1448
    HEAP32[2002] = 8e3; //@line 1449
    HEAP32[2005] = 8008; //@line 1450
    HEAP32[2004] = 8008; //@line 1451
    HEAP32[2007] = 8016; //@line 1452
    HEAP32[2006] = 8016; //@line 1453
    HEAP32[2009] = 8024; //@line 1454
    HEAP32[2008] = 8024; //@line 1455
    HEAP32[2011] = 8032; //@line 1456
    HEAP32[2010] = 8032; //@line 1457
    HEAP32[2013] = 8040; //@line 1458
    HEAP32[2012] = 8040; //@line 1459
    HEAP32[2015] = 8048; //@line 1460
    HEAP32[2014] = 8048; //@line 1461
    HEAP32[2017] = 8056; //@line 1462
    HEAP32[2016] = 8056; //@line 1463
    HEAP32[2019] = 8064; //@line 1464
    HEAP32[2018] = 8064; //@line 1465
    HEAP32[2021] = 8072; //@line 1466
    HEAP32[2020] = 8072; //@line 1467
    HEAP32[2023] = 8080; //@line 1468
    HEAP32[2022] = 8080; //@line 1469
    HEAP32[2025] = 8088; //@line 1470
    HEAP32[2024] = 8088; //@line 1471
    HEAP32[2027] = 8096; //@line 1472
    HEAP32[2026] = 8096; //@line 1473
    HEAP32[2029] = 8104; //@line 1474
    HEAP32[2028] = 8104; //@line 1475
    HEAP32[2031] = 8112; //@line 1476
    HEAP32[2030] = 8112; //@line 1477
    HEAP32[2033] = 8120; //@line 1478
    HEAP32[2032] = 8120; //@line 1479
    HEAP32[2035] = 8128; //@line 1480
    HEAP32[2034] = 8128; //@line 1481
    HEAP32[2037] = 8136; //@line 1482
    HEAP32[2036] = 8136; //@line 1483
    HEAP32[2039] = 8144; //@line 1484
    HEAP32[2038] = 8144; //@line 1485
    HEAP32[2041] = 8152; //@line 1486
    HEAP32[2040] = 8152; //@line 1487
    HEAP32[2043] = 8160; //@line 1488
    HEAP32[2042] = 8160; //@line 1489
    $642 = $$723947$i + -40 | 0; //@line 1490
    $644 = $$748$i + 8 | 0; //@line 1492
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 1497
    $650 = $$748$i + $649 | 0; //@line 1498
    $651 = $642 - $649 | 0; //@line 1499
    HEAP32[1974] = $650; //@line 1500
    HEAP32[1971] = $651; //@line 1501
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 1504
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 1507
    HEAP32[1975] = HEAP32[2090]; //@line 1509
   } else {
    $$024367$i = 8320; //@line 1511
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 1513
     $658 = $$024367$i + 4 | 0; //@line 1514
     $659 = HEAP32[$658 >> 2] | 0; //@line 1515
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 1519
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 1523
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 1528
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 1542
       $673 = (HEAP32[1971] | 0) + $$723947$i | 0; //@line 1544
       $675 = $636 + 8 | 0; //@line 1546
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 1551
       $681 = $636 + $680 | 0; //@line 1552
       $682 = $673 - $680 | 0; //@line 1553
       HEAP32[1974] = $681; //@line 1554
       HEAP32[1971] = $682; //@line 1555
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 1558
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 1561
       HEAP32[1975] = HEAP32[2090]; //@line 1563
       break;
      }
     }
    }
    $688 = HEAP32[1972] | 0; //@line 1568
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[1972] = $$748$i; //@line 1571
     $753 = $$748$i; //@line 1572
    } else {
     $753 = $688; //@line 1574
    }
    $690 = $$748$i + $$723947$i | 0; //@line 1576
    $$124466$i = 8320; //@line 1577
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 1582
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 1586
     if (!$694) {
      $$0$i$i$i = 8320; //@line 1589
      break;
     } else {
      $$124466$i = $694; //@line 1592
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 1601
      $700 = $$124466$i + 4 | 0; //@line 1602
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 1605
      $704 = $$748$i + 8 | 0; //@line 1607
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 1613
      $712 = $690 + 8 | 0; //@line 1615
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 1621
      $722 = $710 + $$0197 | 0; //@line 1625
      $723 = $718 - $710 - $$0197 | 0; //@line 1626
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 1629
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[1971] | 0) + $723 | 0; //@line 1634
        HEAP32[1971] = $728; //@line 1635
        HEAP32[1974] = $722; //@line 1636
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 1639
       } else {
        if ((HEAP32[1973] | 0) == ($718 | 0)) {
         $734 = (HEAP32[1970] | 0) + $723 | 0; //@line 1645
         HEAP32[1970] = $734; //@line 1646
         HEAP32[1973] = $722; //@line 1647
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 1650
         HEAP32[$722 + $734 >> 2] = $734; //@line 1652
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 1656
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 1660
         $743 = $739 >>> 3; //@line 1661
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 1666
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 1668
           $750 = 7912 + ($743 << 1 << 2) | 0; //@line 1670
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 1676
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 1685
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[1968] = HEAP32[1968] & ~(1 << $743); //@line 1695
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 1702
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 1706
             }
             $764 = $748 + 8 | 0; //@line 1709
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 1713
              break;
             }
             _abort(); //@line 1716
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 1721
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 1722
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 1725
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 1727
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 1731
             $783 = $782 + 4 | 0; //@line 1732
             $784 = HEAP32[$783 >> 2] | 0; //@line 1733
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 1736
              if (!$786) {
               $$3$i$i = 0; //@line 1739
               break;
              } else {
               $$1291$i$i = $786; //@line 1742
               $$1293$i$i = $782; //@line 1742
              }
             } else {
              $$1291$i$i = $784; //@line 1745
              $$1293$i$i = $783; //@line 1745
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 1748
              $789 = HEAP32[$788 >> 2] | 0; //@line 1749
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 1752
               $$1293$i$i = $788; //@line 1752
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 1755
              $792 = HEAP32[$791 >> 2] | 0; //@line 1756
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 1761
               $$1293$i$i = $791; //@line 1761
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 1766
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 1769
              $$3$i$i = $$1291$i$i; //@line 1770
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 1775
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 1778
             }
             $776 = $774 + 12 | 0; //@line 1781
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 1785
             }
             $779 = $771 + 8 | 0; //@line 1788
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 1792
              HEAP32[$779 >> 2] = $774; //@line 1793
              $$3$i$i = $771; //@line 1794
              break;
             } else {
              _abort(); //@line 1797
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 1807
           $798 = 8176 + ($797 << 2) | 0; //@line 1808
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 1813
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[1969] = HEAP32[1969] & ~(1 << $797); //@line 1822
             break L311;
            } else {
             if ((HEAP32[1972] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 1828
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 1836
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[1972] | 0; //@line 1846
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 1849
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 1853
           $815 = $718 + 16 | 0; //@line 1854
           $816 = HEAP32[$815 >> 2] | 0; //@line 1855
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 1861
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 1865
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 1867
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 1873
           if (!$822) {
            break;
           }
           if ((HEAP32[1972] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 1881
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 1885
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 1887
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 1894
         $$0287$i$i = $742 + $723 | 0; //@line 1894
        } else {
         $$0$i17$i = $718; //@line 1896
         $$0287$i$i = $723; //@line 1896
        }
        $830 = $$0$i17$i + 4 | 0; //@line 1898
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 1901
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 1904
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 1906
        $836 = $$0287$i$i >>> 3; //@line 1907
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 7912 + ($836 << 1 << 2) | 0; //@line 1911
         $840 = HEAP32[1968] | 0; //@line 1912
         $841 = 1 << $836; //@line 1913
         do {
          if (!($840 & $841)) {
           HEAP32[1968] = $840 | $841; //@line 1919
           $$0295$i$i = $839; //@line 1921
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 1921
          } else {
           $845 = $839 + 8 | 0; //@line 1923
           $846 = HEAP32[$845 >> 2] | 0; //@line 1924
           if ((HEAP32[1972] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 1928
            $$pre$phi$i19$iZ2D = $845; //@line 1928
            break;
           }
           _abort(); //@line 1931
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 1935
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 1937
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 1939
         HEAP32[$722 + 12 >> 2] = $839; //@line 1941
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 1944
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 1948
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 1952
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 1957
          $858 = $852 << $857; //@line 1958
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 1961
          $863 = $858 << $861; //@line 1963
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 1966
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 1971
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 1977
         }
        } while (0);
        $877 = 8176 + ($$0296$i$i << 2) | 0; //@line 1980
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 1982
        $879 = $722 + 16 | 0; //@line 1983
        HEAP32[$879 + 4 >> 2] = 0; //@line 1985
        HEAP32[$879 >> 2] = 0; //@line 1986
        $881 = HEAP32[1969] | 0; //@line 1987
        $882 = 1 << $$0296$i$i; //@line 1988
        if (!($881 & $882)) {
         HEAP32[1969] = $881 | $882; //@line 1993
         HEAP32[$877 >> 2] = $722; //@line 1994
         HEAP32[$722 + 24 >> 2] = $877; //@line 1996
         HEAP32[$722 + 12 >> 2] = $722; //@line 1998
         HEAP32[$722 + 8 >> 2] = $722; //@line 2000
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 2009
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 2009
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 2016
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 2020
         $902 = HEAP32[$900 >> 2] | 0; //@line 2022
         if (!$902) {
          label = 260; //@line 2025
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 2028
          $$0289$i$i = $902; //@line 2028
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[1972] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 2035
         } else {
          HEAP32[$900 >> 2] = $722; //@line 2038
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 2040
          HEAP32[$722 + 12 >> 2] = $722; //@line 2042
          HEAP32[$722 + 8 >> 2] = $722; //@line 2044
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 2049
         $910 = HEAP32[$909 >> 2] | 0; //@line 2050
         $911 = HEAP32[1972] | 0; //@line 2051
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 2057
          HEAP32[$909 >> 2] = $722; //@line 2058
          HEAP32[$722 + 8 >> 2] = $910; //@line 2060
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 2062
          HEAP32[$722 + 24 >> 2] = 0; //@line 2064
          break;
         } else {
          _abort(); //@line 2067
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 2074
      STACKTOP = sp; //@line 2075
      return $$0 | 0; //@line 2075
     } else {
      $$0$i$i$i = 8320; //@line 2077
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 2081
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 2086
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 2094
    }
    $927 = $923 + -47 | 0; //@line 2096
    $929 = $927 + 8 | 0; //@line 2098
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 2104
    $936 = $636 + 16 | 0; //@line 2105
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 2107
    $939 = $938 + 8 | 0; //@line 2108
    $940 = $938 + 24 | 0; //@line 2109
    $941 = $$723947$i + -40 | 0; //@line 2110
    $943 = $$748$i + 8 | 0; //@line 2112
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 2117
    $949 = $$748$i + $948 | 0; //@line 2118
    $950 = $941 - $948 | 0; //@line 2119
    HEAP32[1974] = $949; //@line 2120
    HEAP32[1971] = $950; //@line 2121
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 2124
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 2127
    HEAP32[1975] = HEAP32[2090]; //@line 2129
    $956 = $938 + 4 | 0; //@line 2130
    HEAP32[$956 >> 2] = 27; //@line 2131
    HEAP32[$939 >> 2] = HEAP32[2080]; //@line 2132
    HEAP32[$939 + 4 >> 2] = HEAP32[2081]; //@line 2132
    HEAP32[$939 + 8 >> 2] = HEAP32[2082]; //@line 2132
    HEAP32[$939 + 12 >> 2] = HEAP32[2083]; //@line 2132
    HEAP32[2080] = $$748$i; //@line 2133
    HEAP32[2081] = $$723947$i; //@line 2134
    HEAP32[2083] = 0; //@line 2135
    HEAP32[2082] = $939; //@line 2136
    $958 = $940; //@line 2137
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 2139
     HEAP32[$958 >> 2] = 7; //@line 2140
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 2153
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 2156
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 2159
     HEAP32[$938 >> 2] = $964; //@line 2160
     $969 = $964 >>> 3; //@line 2161
     if ($964 >>> 0 < 256) {
      $972 = 7912 + ($969 << 1 << 2) | 0; //@line 2165
      $973 = HEAP32[1968] | 0; //@line 2166
      $974 = 1 << $969; //@line 2167
      if (!($973 & $974)) {
       HEAP32[1968] = $973 | $974; //@line 2172
       $$0211$i$i = $972; //@line 2174
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 2174
      } else {
       $978 = $972 + 8 | 0; //@line 2176
       $979 = HEAP32[$978 >> 2] | 0; //@line 2177
       if ((HEAP32[1972] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 2181
       } else {
        $$0211$i$i = $979; //@line 2184
        $$pre$phi$i$iZ2D = $978; //@line 2184
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 2187
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 2189
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 2191
      HEAP32[$636 + 12 >> 2] = $972; //@line 2193
      break;
     }
     $985 = $964 >>> 8; //@line 2196
     if (!$985) {
      $$0212$i$i = 0; //@line 2199
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 2203
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 2207
       $991 = $985 << $990; //@line 2208
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 2211
       $996 = $991 << $994; //@line 2213
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 2216
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 2221
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 2227
      }
     }
     $1010 = 8176 + ($$0212$i$i << 2) | 0; //@line 2230
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 2232
     HEAP32[$636 + 20 >> 2] = 0; //@line 2234
     HEAP32[$936 >> 2] = 0; //@line 2235
     $1013 = HEAP32[1969] | 0; //@line 2236
     $1014 = 1 << $$0212$i$i; //@line 2237
     if (!($1013 & $1014)) {
      HEAP32[1969] = $1013 | $1014; //@line 2242
      HEAP32[$1010 >> 2] = $636; //@line 2243
      HEAP32[$636 + 24 >> 2] = $1010; //@line 2245
      HEAP32[$636 + 12 >> 2] = $636; //@line 2247
      HEAP32[$636 + 8 >> 2] = $636; //@line 2249
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 2258
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 2258
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 2265
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 2269
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 2271
      if (!$1034) {
       label = 286; //@line 2274
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 2277
       $$0207$i$i = $1034; //@line 2277
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[1972] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 2284
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 2287
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 2289
       HEAP32[$636 + 12 >> 2] = $636; //@line 2291
       HEAP32[$636 + 8 >> 2] = $636; //@line 2293
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 2298
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 2299
      $1043 = HEAP32[1972] | 0; //@line 2300
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 2306
       HEAP32[$1041 >> 2] = $636; //@line 2307
       HEAP32[$636 + 8 >> 2] = $1042; //@line 2309
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 2311
       HEAP32[$636 + 24 >> 2] = 0; //@line 2313
       break;
      } else {
       _abort(); //@line 2316
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[1971] | 0; //@line 2323
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 2326
   HEAP32[1971] = $1054; //@line 2327
   $1055 = HEAP32[1974] | 0; //@line 2328
   $1056 = $1055 + $$0197 | 0; //@line 2329
   HEAP32[1974] = $1056; //@line 2330
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 2333
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 2336
   $$0 = $1055 + 8 | 0; //@line 2338
   STACKTOP = sp; //@line 2339
   return $$0 | 0; //@line 2339
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 2343
 $$0 = 0; //@line 2344
 STACKTOP = sp; //@line 2345
 return $$0 | 0; //@line 2345
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_117($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $186 = 0, $187 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $247 = 0, $248 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $258 = 0, $26 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 7146
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7148
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7150
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7152
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7154
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7156
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7158
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7160
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7162
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7164
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7166
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 7168
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7170
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7172
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 7174
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7176
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 7178
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 7180
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 7182
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 7184
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 7186
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 7188
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 7190
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 7192
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 7194
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 7196
 $122 = HEAP32[$22 >> 2] | 0; //@line 7197
 if ($122 | 0) {
  $125 = HEAP32[$122 + 8 >> 2] | 0; //@line 7201
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(104) | 0; //@line 7202
  FUNCTION_TABLE_vi[$125 & 511]($28); //@line 7203
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 194; //@line 7206
   $126 = $ReallocAsyncCtx2 + 4 | 0; //@line 7207
   HEAP32[$126 >> 2] = $2; //@line 7208
   $127 = $ReallocAsyncCtx2 + 8 | 0; //@line 7209
   HEAP32[$127 >> 2] = $4; //@line 7210
   $128 = $ReallocAsyncCtx2 + 12 | 0; //@line 7211
   HEAP32[$128 >> 2] = $6; //@line 7212
   $129 = $ReallocAsyncCtx2 + 16 | 0; //@line 7213
   HEAP32[$129 >> 2] = $8; //@line 7214
   $130 = $ReallocAsyncCtx2 + 20 | 0; //@line 7215
   HEAP32[$130 >> 2] = $12; //@line 7216
   $131 = $ReallocAsyncCtx2 + 24 | 0; //@line 7217
   HEAP32[$131 >> 2] = $14; //@line 7218
   $132 = $ReallocAsyncCtx2 + 28 | 0; //@line 7219
   HEAP32[$132 >> 2] = $16; //@line 7220
   $133 = $ReallocAsyncCtx2 + 32 | 0; //@line 7221
   HEAP32[$133 >> 2] = $18; //@line 7222
   $134 = $ReallocAsyncCtx2 + 36 | 0; //@line 7223
   HEAP32[$134 >> 2] = $20; //@line 7224
   $135 = $ReallocAsyncCtx2 + 40 | 0; //@line 7225
   HEAP32[$135 >> 2] = $22; //@line 7226
   $136 = $ReallocAsyncCtx2 + 44 | 0; //@line 7227
   HEAP32[$136 >> 2] = $24; //@line 7228
   $137 = $ReallocAsyncCtx2 + 48 | 0; //@line 7229
   HEAP32[$137 >> 2] = $26; //@line 7230
   $138 = $ReallocAsyncCtx2 + 52 | 0; //@line 7231
   HEAP32[$138 >> 2] = $10; //@line 7232
   $139 = $ReallocAsyncCtx2 + 56 | 0; //@line 7233
   HEAP32[$139 >> 2] = $28; //@line 7234
   $140 = $ReallocAsyncCtx2 + 60 | 0; //@line 7235
   HEAP32[$140 >> 2] = $30; //@line 7236
   $141 = $ReallocAsyncCtx2 + 64 | 0; //@line 7237
   HEAP32[$141 >> 2] = $32; //@line 7238
   $142 = $ReallocAsyncCtx2 + 68 | 0; //@line 7239
   HEAP32[$142 >> 2] = $34; //@line 7240
   $143 = $ReallocAsyncCtx2 + 72 | 0; //@line 7241
   HEAP32[$143 >> 2] = $36; //@line 7242
   $144 = $ReallocAsyncCtx2 + 76 | 0; //@line 7243
   HEAP32[$144 >> 2] = $38; //@line 7244
   $145 = $ReallocAsyncCtx2 + 80 | 0; //@line 7245
   HEAP32[$145 >> 2] = $40; //@line 7246
   $146 = $ReallocAsyncCtx2 + 84 | 0; //@line 7247
   HEAP32[$146 >> 2] = $42; //@line 7248
   $147 = $ReallocAsyncCtx2 + 88 | 0; //@line 7249
   HEAP32[$147 >> 2] = $44; //@line 7250
   $148 = $ReallocAsyncCtx2 + 92 | 0; //@line 7251
   HEAP32[$148 >> 2] = $46; //@line 7252
   $149 = $ReallocAsyncCtx2 + 96 | 0; //@line 7253
   HEAP32[$149 >> 2] = $48; //@line 7254
   $150 = $ReallocAsyncCtx2 + 100 | 0; //@line 7255
   HEAP32[$150 >> 2] = $50; //@line 7256
   sp = STACKTOP; //@line 7257
   return;
  }
  ___async_unwind = 0; //@line 7260
  HEAP32[$ReallocAsyncCtx2 >> 2] = 194; //@line 7261
  $126 = $ReallocAsyncCtx2 + 4 | 0; //@line 7262
  HEAP32[$126 >> 2] = $2; //@line 7263
  $127 = $ReallocAsyncCtx2 + 8 | 0; //@line 7264
  HEAP32[$127 >> 2] = $4; //@line 7265
  $128 = $ReallocAsyncCtx2 + 12 | 0; //@line 7266
  HEAP32[$128 >> 2] = $6; //@line 7267
  $129 = $ReallocAsyncCtx2 + 16 | 0; //@line 7268
  HEAP32[$129 >> 2] = $8; //@line 7269
  $130 = $ReallocAsyncCtx2 + 20 | 0; //@line 7270
  HEAP32[$130 >> 2] = $12; //@line 7271
  $131 = $ReallocAsyncCtx2 + 24 | 0; //@line 7272
  HEAP32[$131 >> 2] = $14; //@line 7273
  $132 = $ReallocAsyncCtx2 + 28 | 0; //@line 7274
  HEAP32[$132 >> 2] = $16; //@line 7275
  $133 = $ReallocAsyncCtx2 + 32 | 0; //@line 7276
  HEAP32[$133 >> 2] = $18; //@line 7277
  $134 = $ReallocAsyncCtx2 + 36 | 0; //@line 7278
  HEAP32[$134 >> 2] = $20; //@line 7279
  $135 = $ReallocAsyncCtx2 + 40 | 0; //@line 7280
  HEAP32[$135 >> 2] = $22; //@line 7281
  $136 = $ReallocAsyncCtx2 + 44 | 0; //@line 7282
  HEAP32[$136 >> 2] = $24; //@line 7283
  $137 = $ReallocAsyncCtx2 + 48 | 0; //@line 7284
  HEAP32[$137 >> 2] = $26; //@line 7285
  $138 = $ReallocAsyncCtx2 + 52 | 0; //@line 7286
  HEAP32[$138 >> 2] = $10; //@line 7287
  $139 = $ReallocAsyncCtx2 + 56 | 0; //@line 7288
  HEAP32[$139 >> 2] = $28; //@line 7289
  $140 = $ReallocAsyncCtx2 + 60 | 0; //@line 7290
  HEAP32[$140 >> 2] = $30; //@line 7291
  $141 = $ReallocAsyncCtx2 + 64 | 0; //@line 7292
  HEAP32[$141 >> 2] = $32; //@line 7293
  $142 = $ReallocAsyncCtx2 + 68 | 0; //@line 7294
  HEAP32[$142 >> 2] = $34; //@line 7295
  $143 = $ReallocAsyncCtx2 + 72 | 0; //@line 7296
  HEAP32[$143 >> 2] = $36; //@line 7297
  $144 = $ReallocAsyncCtx2 + 76 | 0; //@line 7298
  HEAP32[$144 >> 2] = $38; //@line 7299
  $145 = $ReallocAsyncCtx2 + 80 | 0; //@line 7300
  HEAP32[$145 >> 2] = $40; //@line 7301
  $146 = $ReallocAsyncCtx2 + 84 | 0; //@line 7302
  HEAP32[$146 >> 2] = $42; //@line 7303
  $147 = $ReallocAsyncCtx2 + 88 | 0; //@line 7304
  HEAP32[$147 >> 2] = $44; //@line 7305
  $148 = $ReallocAsyncCtx2 + 92 | 0; //@line 7306
  HEAP32[$148 >> 2] = $46; //@line 7307
  $149 = $ReallocAsyncCtx2 + 96 | 0; //@line 7308
  HEAP32[$149 >> 2] = $48; //@line 7309
  $150 = $ReallocAsyncCtx2 + 100 | 0; //@line 7310
  HEAP32[$150 >> 2] = $50; //@line 7311
  sp = STACKTOP; //@line 7312
  return;
 }
 $151 = HEAP32[$30 >> 2] | 0; //@line 7315
 if (!$151) {
  $$02972$reg2mem$0 = $4; //@line 7318
  $$03071$reg2mem$0 = $2; //@line 7318
  $$reg2mem$0 = $6; //@line 7318
 } else {
  $154 = HEAP32[$151 + 8 >> 2] | 0; //@line 7321
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 7322
  FUNCTION_TABLE_vi[$154 & 511]($8); //@line 7323
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 195; //@line 7326
   $155 = $ReallocAsyncCtx3 + 4 | 0; //@line 7327
   HEAP32[$155 >> 2] = $2; //@line 7328
   $156 = $ReallocAsyncCtx3 + 8 | 0; //@line 7329
   HEAP32[$156 >> 2] = $4; //@line 7330
   $157 = $ReallocAsyncCtx3 + 12 | 0; //@line 7331
   HEAP32[$157 >> 2] = $6; //@line 7332
   $158 = $ReallocAsyncCtx3 + 16 | 0; //@line 7333
   HEAP32[$158 >> 2] = $8; //@line 7334
   $159 = $ReallocAsyncCtx3 + 20 | 0; //@line 7335
   HEAP32[$159 >> 2] = $12; //@line 7336
   $160 = $ReallocAsyncCtx3 + 24 | 0; //@line 7337
   HEAP32[$160 >> 2] = $14; //@line 7338
   $161 = $ReallocAsyncCtx3 + 28 | 0; //@line 7339
   HEAP32[$161 >> 2] = $16; //@line 7340
   $162 = $ReallocAsyncCtx3 + 32 | 0; //@line 7341
   HEAP32[$162 >> 2] = $18; //@line 7342
   $163 = $ReallocAsyncCtx3 + 36 | 0; //@line 7343
   HEAP32[$163 >> 2] = $20; //@line 7344
   $164 = $ReallocAsyncCtx3 + 40 | 0; //@line 7345
   HEAP32[$164 >> 2] = $22; //@line 7346
   $165 = $ReallocAsyncCtx3 + 44 | 0; //@line 7347
   HEAP32[$165 >> 2] = $24; //@line 7348
   $166 = $ReallocAsyncCtx3 + 48 | 0; //@line 7349
   HEAP32[$166 >> 2] = $26; //@line 7350
   $167 = $ReallocAsyncCtx3 + 52 | 0; //@line 7351
   HEAP32[$167 >> 2] = $10; //@line 7352
   $168 = $ReallocAsyncCtx3 + 56 | 0; //@line 7353
   HEAP32[$168 >> 2] = $28; //@line 7354
   $169 = $ReallocAsyncCtx3 + 60 | 0; //@line 7355
   HEAP32[$169 >> 2] = $30; //@line 7356
   $170 = $ReallocAsyncCtx3 + 64 | 0; //@line 7357
   HEAP32[$170 >> 2] = $32; //@line 7358
   $171 = $ReallocAsyncCtx3 + 68 | 0; //@line 7359
   HEAP32[$171 >> 2] = $34; //@line 7360
   $172 = $ReallocAsyncCtx3 + 72 | 0; //@line 7361
   HEAP32[$172 >> 2] = $36; //@line 7362
   $173 = $ReallocAsyncCtx3 + 76 | 0; //@line 7363
   HEAP32[$173 >> 2] = $38; //@line 7364
   $174 = $ReallocAsyncCtx3 + 80 | 0; //@line 7365
   HEAP32[$174 >> 2] = $40; //@line 7366
   $175 = $ReallocAsyncCtx3 + 84 | 0; //@line 7367
   HEAP32[$175 >> 2] = $42; //@line 7368
   $176 = $ReallocAsyncCtx3 + 88 | 0; //@line 7369
   HEAP32[$176 >> 2] = $44; //@line 7370
   $177 = $ReallocAsyncCtx3 + 92 | 0; //@line 7371
   HEAP32[$177 >> 2] = $46; //@line 7372
   $178 = $ReallocAsyncCtx3 + 96 | 0; //@line 7373
   HEAP32[$178 >> 2] = $48; //@line 7374
   $179 = $ReallocAsyncCtx3 + 100 | 0; //@line 7375
   HEAP32[$179 >> 2] = $50; //@line 7376
   sp = STACKTOP; //@line 7377
   return;
  }
  ___async_unwind = 0; //@line 7380
  HEAP32[$ReallocAsyncCtx3 >> 2] = 195; //@line 7381
  $155 = $ReallocAsyncCtx3 + 4 | 0; //@line 7382
  HEAP32[$155 >> 2] = $2; //@line 7383
  $156 = $ReallocAsyncCtx3 + 8 | 0; //@line 7384
  HEAP32[$156 >> 2] = $4; //@line 7385
  $157 = $ReallocAsyncCtx3 + 12 | 0; //@line 7386
  HEAP32[$157 >> 2] = $6; //@line 7387
  $158 = $ReallocAsyncCtx3 + 16 | 0; //@line 7388
  HEAP32[$158 >> 2] = $8; //@line 7389
  $159 = $ReallocAsyncCtx3 + 20 | 0; //@line 7390
  HEAP32[$159 >> 2] = $12; //@line 7391
  $160 = $ReallocAsyncCtx3 + 24 | 0; //@line 7392
  HEAP32[$160 >> 2] = $14; //@line 7393
  $161 = $ReallocAsyncCtx3 + 28 | 0; //@line 7394
  HEAP32[$161 >> 2] = $16; //@line 7395
  $162 = $ReallocAsyncCtx3 + 32 | 0; //@line 7396
  HEAP32[$162 >> 2] = $18; //@line 7397
  $163 = $ReallocAsyncCtx3 + 36 | 0; //@line 7398
  HEAP32[$163 >> 2] = $20; //@line 7399
  $164 = $ReallocAsyncCtx3 + 40 | 0; //@line 7400
  HEAP32[$164 >> 2] = $22; //@line 7401
  $165 = $ReallocAsyncCtx3 + 44 | 0; //@line 7402
  HEAP32[$165 >> 2] = $24; //@line 7403
  $166 = $ReallocAsyncCtx3 + 48 | 0; //@line 7404
  HEAP32[$166 >> 2] = $26; //@line 7405
  $167 = $ReallocAsyncCtx3 + 52 | 0; //@line 7406
  HEAP32[$167 >> 2] = $10; //@line 7407
  $168 = $ReallocAsyncCtx3 + 56 | 0; //@line 7408
  HEAP32[$168 >> 2] = $28; //@line 7409
  $169 = $ReallocAsyncCtx3 + 60 | 0; //@line 7410
  HEAP32[$169 >> 2] = $30; //@line 7411
  $170 = $ReallocAsyncCtx3 + 64 | 0; //@line 7412
  HEAP32[$170 >> 2] = $32; //@line 7413
  $171 = $ReallocAsyncCtx3 + 68 | 0; //@line 7414
  HEAP32[$171 >> 2] = $34; //@line 7415
  $172 = $ReallocAsyncCtx3 + 72 | 0; //@line 7416
  HEAP32[$172 >> 2] = $36; //@line 7417
  $173 = $ReallocAsyncCtx3 + 76 | 0; //@line 7418
  HEAP32[$173 >> 2] = $38; //@line 7419
  $174 = $ReallocAsyncCtx3 + 80 | 0; //@line 7420
  HEAP32[$174 >> 2] = $40; //@line 7421
  $175 = $ReallocAsyncCtx3 + 84 | 0; //@line 7422
  HEAP32[$175 >> 2] = $42; //@line 7423
  $176 = $ReallocAsyncCtx3 + 88 | 0; //@line 7424
  HEAP32[$176 >> 2] = $44; //@line 7425
  $177 = $ReallocAsyncCtx3 + 92 | 0; //@line 7426
  HEAP32[$177 >> 2] = $46; //@line 7427
  $178 = $ReallocAsyncCtx3 + 96 | 0; //@line 7428
  HEAP32[$178 >> 2] = $48; //@line 7429
  $179 = $ReallocAsyncCtx3 + 100 | 0; //@line 7430
  HEAP32[$179 >> 2] = $50; //@line 7431
  sp = STACKTOP; //@line 7432
  return;
 }
 L15 : while (1) {
  $180 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 7436
  $181 = $180 + 76 | 0; //@line 7437
  $182 = HEAP32[$181 >> 2] | 0; //@line 7438
  if ($182 | 0) {
   if ($182 >>> 0 <= 100) {
    label = 25; //@line 7443
    break;
   }
   HEAP32[$181 >> 2] = $182 + -100; //@line 7447
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 7452
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 7452
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 7454
   $$131 = $$03071$reg2mem$0; //@line 7454
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 7457
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 7460
    break L15;
   }
   $52 = 7840 + ($$02972$reg2mem$1 << 2) | 0; //@line 7463
   $54 = HEAP32[$52 >> 2] | 0; //@line 7464
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 7472
  $57 = HEAP32[$56 >> 2] | 0; //@line 7473
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 7477
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 7478
   $$03071$reg2mem$0 = $$131; //@line 7478
   $$reg2mem$0 = $52; //@line 7478
   continue;
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 7485
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 7488
    $$03071$reg2mem$0 = $$131; //@line 7488
    $$reg2mem$0 = $52; //@line 7488
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $247 = $$131 + 44 | 0; //@line 7498
  $248 = HEAP32[$247 >> 2] | 0; //@line 7499
  if (!$248) {
   $256 = $12 + 12 | 0; //@line 7502
   HEAP32[$256 >> 2] = 0; //@line 7503
   $258 = $10 + 4 | 0; //@line 7505
   HEAP32[$258 >> 2] = 0; //@line 7507
   HEAP32[$258 + 4 >> 2] = 0; //@line 7510
   HEAP32[$10 >> 2] = 3; //@line 7511
   $262 = $10 + 12 | 0; //@line 7512
   HEAP32[$262 >> 2] = 752; //@line 7513
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 7514
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($12, 100, $10) | 0; //@line 7515
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 7518
    $263 = $ReallocAsyncCtx10 + 4 | 0; //@line 7519
    HEAP32[$263 >> 2] = $262; //@line 7520
    $264 = $ReallocAsyncCtx10 + 8 | 0; //@line 7521
    HEAP32[$264 >> 2] = $256; //@line 7522
    $265 = $ReallocAsyncCtx10 + 12 | 0; //@line 7523
    HEAP32[$265 >> 2] = $10; //@line 7524
    $266 = $ReallocAsyncCtx10 + 16 | 0; //@line 7525
    HEAP32[$266 >> 2] = $12; //@line 7526
    sp = STACKTOP; //@line 7527
    return;
   }
   ___async_unwind = 0; //@line 7530
   HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 7531
   $263 = $ReallocAsyncCtx10 + 4 | 0; //@line 7532
   HEAP32[$263 >> 2] = $262; //@line 7533
   $264 = $ReallocAsyncCtx10 + 8 | 0; //@line 7534
   HEAP32[$264 >> 2] = $256; //@line 7535
   $265 = $ReallocAsyncCtx10 + 12 | 0; //@line 7536
   HEAP32[$265 >> 2] = $10; //@line 7537
   $266 = $ReallocAsyncCtx10 + 16 | 0; //@line 7538
   HEAP32[$266 >> 2] = $12; //@line 7539
   sp = STACKTOP; //@line 7540
   return;
  } else {
   $252 = HEAP32[$248 + 4 >> 2] | 0; //@line 7545
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 7546
   FUNCTION_TABLE_vii[$252 & 7]($12, $$131 + 32 | 0); //@line 7547
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 7550
    $253 = $ReallocAsyncCtx7 + 4 | 0; //@line 7551
    HEAP32[$253 >> 2] = $247; //@line 7552
    $254 = $ReallocAsyncCtx7 + 8 | 0; //@line 7553
    HEAP32[$254 >> 2] = $12; //@line 7554
    $255 = $ReallocAsyncCtx7 + 12 | 0; //@line 7555
    HEAP32[$255 >> 2] = $10; //@line 7556
    sp = STACKTOP; //@line 7557
    return;
   }
   ___async_unwind = 0; //@line 7560
   HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 7561
   $253 = $ReallocAsyncCtx7 + 4 | 0; //@line 7562
   HEAP32[$253 >> 2] = $247; //@line 7563
   $254 = $ReallocAsyncCtx7 + 8 | 0; //@line 7564
   HEAP32[$254 >> 2] = $12; //@line 7565
   $255 = $ReallocAsyncCtx7 + 12 | 0; //@line 7566
   HEAP32[$255 >> 2] = $10; //@line 7567
   sp = STACKTOP; //@line 7568
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 7574
  $64 = $54 + 44 | 0; //@line 7575
  $65 = HEAP32[$64 >> 2] | 0; //@line 7576
  if (!$65) {
   HEAP32[$14 >> 2] = 0; //@line 7579
   $96 = HEAP32[$54 >> 2] | 0; //@line 7580
   HEAP32[$16 >> 2] = 0; //@line 7581
   HEAP32[$18 >> 2] = 192; //@line 7582
   HEAP32[$20 >> 2] = $96; //@line 7583
   HEAP32[$22 >> 2] = 764; //@line 7584
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 7585
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 7586
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 7589
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 7590
    HEAP32[$97 >> 2] = $$131; //@line 7591
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 7592
    HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 7593
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 7594
    HEAP32[$99 >> 2] = $52; //@line 7595
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 7596
    HEAP32[$100 >> 2] = $8; //@line 7597
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 7598
    HEAP32[$101 >> 2] = $10; //@line 7599
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 7600
    HEAP32[$102 >> 2] = $12; //@line 7601
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 7602
    HEAP32[$103 >> 2] = $14; //@line 7603
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 7604
    HEAP32[$104 >> 2] = $16; //@line 7605
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 7606
    HEAP32[$105 >> 2] = $18; //@line 7607
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 7608
    HEAP32[$106 >> 2] = $20; //@line 7609
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 7610
    HEAP32[$107 >> 2] = $22; //@line 7611
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 7612
    HEAP32[$108 >> 2] = $24; //@line 7613
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 7614
    HEAP32[$109 >> 2] = $26; //@line 7615
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 7616
    HEAP32[$110 >> 2] = $28; //@line 7617
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 7618
    HEAP32[$111 >> 2] = $30; //@line 7619
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 7620
    HEAP32[$112 >> 2] = $32; //@line 7621
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 7622
    HEAP32[$113 >> 2] = $34; //@line 7623
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 7624
    HEAP32[$114 >> 2] = $36; //@line 7625
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 7626
    HEAP32[$115 >> 2] = $38; //@line 7627
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 7628
    HEAP32[$116 >> 2] = $40; //@line 7629
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 7630
    HEAP32[$117 >> 2] = $42; //@line 7631
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 7632
    HEAP32[$118 >> 2] = $44; //@line 7633
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 7634
    HEAP32[$119 >> 2] = $46; //@line 7635
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 7636
    HEAP32[$120 >> 2] = $48; //@line 7637
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 7638
    HEAP32[$121 >> 2] = $50; //@line 7639
    sp = STACKTOP; //@line 7640
    return;
   }
   ___async_unwind = 0; //@line 7643
   HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 7644
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 7645
   HEAP32[$97 >> 2] = $$131; //@line 7646
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 7647
   HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 7648
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 7649
   HEAP32[$99 >> 2] = $52; //@line 7650
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 7651
   HEAP32[$100 >> 2] = $8; //@line 7652
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 7653
   HEAP32[$101 >> 2] = $10; //@line 7654
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 7655
   HEAP32[$102 >> 2] = $12; //@line 7656
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 7657
   HEAP32[$103 >> 2] = $14; //@line 7658
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 7659
   HEAP32[$104 >> 2] = $16; //@line 7660
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 7661
   HEAP32[$105 >> 2] = $18; //@line 7662
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 7663
   HEAP32[$106 >> 2] = $20; //@line 7664
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 7665
   HEAP32[$107 >> 2] = $22; //@line 7666
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 7667
   HEAP32[$108 >> 2] = $24; //@line 7668
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 7669
   HEAP32[$109 >> 2] = $26; //@line 7670
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 7671
   HEAP32[$110 >> 2] = $28; //@line 7672
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 7673
   HEAP32[$111 >> 2] = $30; //@line 7674
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 7675
   HEAP32[$112 >> 2] = $32; //@line 7676
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 7677
   HEAP32[$113 >> 2] = $34; //@line 7678
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 7679
   HEAP32[$114 >> 2] = $36; //@line 7680
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 7681
   HEAP32[$115 >> 2] = $38; //@line 7682
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 7683
   HEAP32[$116 >> 2] = $40; //@line 7684
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 7685
   HEAP32[$117 >> 2] = $42; //@line 7686
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 7687
   HEAP32[$118 >> 2] = $44; //@line 7688
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 7689
   HEAP32[$119 >> 2] = $46; //@line 7690
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 7691
   HEAP32[$120 >> 2] = $48; //@line 7692
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 7693
   HEAP32[$121 >> 2] = $50; //@line 7694
   sp = STACKTOP; //@line 7695
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 7700
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 7701
   FUNCTION_TABLE_vii[$69 & 7]($8, $54 + 32 | 0); //@line 7702
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 7705
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 7706
    HEAP32[$70 >> 2] = $$131; //@line 7707
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 7708
    HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 7709
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 7710
    HEAP32[$72 >> 2] = $52; //@line 7711
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 7712
    HEAP32[$73 >> 2] = $8; //@line 7713
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 7714
    HEAP32[$74 >> 2] = $12; //@line 7715
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 7716
    HEAP32[$75 >> 2] = $14; //@line 7717
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 7718
    HEAP32[$76 >> 2] = $16; //@line 7719
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 7720
    HEAP32[$77 >> 2] = $18; //@line 7721
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 7722
    HEAP32[$78 >> 2] = $20; //@line 7723
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 7724
    HEAP32[$79 >> 2] = $22; //@line 7725
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 7726
    HEAP32[$80 >> 2] = $24; //@line 7727
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 7728
    HEAP32[$81 >> 2] = $26; //@line 7729
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 7730
    HEAP32[$82 >> 2] = $10; //@line 7731
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 7732
    HEAP32[$83 >> 2] = $28; //@line 7733
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 7734
    HEAP32[$84 >> 2] = $30; //@line 7735
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 7736
    HEAP32[$85 >> 2] = $64; //@line 7737
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 7738
    HEAP32[$86 >> 2] = $32; //@line 7739
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 7740
    HEAP32[$87 >> 2] = $34; //@line 7741
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 7742
    HEAP32[$88 >> 2] = $36; //@line 7743
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 7744
    HEAP32[$89 >> 2] = $38; //@line 7745
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 7746
    HEAP32[$90 >> 2] = $40; //@line 7747
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 7748
    HEAP32[$91 >> 2] = $42; //@line 7749
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 7750
    HEAP32[$92 >> 2] = $44; //@line 7751
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 7752
    HEAP32[$93 >> 2] = $46; //@line 7753
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 7754
    HEAP32[$94 >> 2] = $48; //@line 7755
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 7756
    HEAP32[$95 >> 2] = $50; //@line 7757
    sp = STACKTOP; //@line 7758
    return;
   }
   ___async_unwind = 0; //@line 7761
   HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 7762
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 7763
   HEAP32[$70 >> 2] = $$131; //@line 7764
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 7765
   HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 7766
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 7767
   HEAP32[$72 >> 2] = $52; //@line 7768
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 7769
   HEAP32[$73 >> 2] = $8; //@line 7770
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 7771
   HEAP32[$74 >> 2] = $12; //@line 7772
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 7773
   HEAP32[$75 >> 2] = $14; //@line 7774
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 7775
   HEAP32[$76 >> 2] = $16; //@line 7776
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 7777
   HEAP32[$77 >> 2] = $18; //@line 7778
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 7779
   HEAP32[$78 >> 2] = $20; //@line 7780
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 7781
   HEAP32[$79 >> 2] = $22; //@line 7782
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 7783
   HEAP32[$80 >> 2] = $24; //@line 7784
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 7785
   HEAP32[$81 >> 2] = $26; //@line 7786
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 7787
   HEAP32[$82 >> 2] = $10; //@line 7788
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 7789
   HEAP32[$83 >> 2] = $28; //@line 7790
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 7791
   HEAP32[$84 >> 2] = $30; //@line 7792
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 7793
   HEAP32[$85 >> 2] = $64; //@line 7794
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 7795
   HEAP32[$86 >> 2] = $32; //@line 7796
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 7797
   HEAP32[$87 >> 2] = $34; //@line 7798
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 7799
   HEAP32[$88 >> 2] = $36; //@line 7800
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 7801
   HEAP32[$89 >> 2] = $38; //@line 7802
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 7803
   HEAP32[$90 >> 2] = $40; //@line 7804
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 7805
   HEAP32[$91 >> 2] = $42; //@line 7806
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 7807
   HEAP32[$92 >> 2] = $44; //@line 7808
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 7809
   HEAP32[$93 >> 2] = $46; //@line 7810
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 7811
   HEAP32[$94 >> 2] = $48; //@line 7812
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 7813
   HEAP32[$95 >> 2] = $50; //@line 7814
   sp = STACKTOP; //@line 7815
   return;
  }
 } else if ((label | 0) == 25) {
  HEAP32[$181 >> 2] = 0; //@line 7820
  $186 = $180 + 44 | 0; //@line 7821
  $187 = HEAP32[$186 >> 2] | 0; //@line 7822
  if (!$187) {
   HEAP32[$32 >> 2] = 0; //@line 7825
   $218 = HEAP32[$180 >> 2] | 0; //@line 7826
   HEAP32[$34 >> 2] = 0; //@line 7827
   HEAP32[$36 >> 2] = 197; //@line 7828
   HEAP32[$38 >> 2] = $218; //@line 7829
   HEAP32[$40 >> 2] = 764; //@line 7830
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 7831
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 7832
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 7835
    $219 = $ReallocAsyncCtx11 + 4 | 0; //@line 7836
    HEAP32[$219 >> 2] = $$03071$reg2mem$0; //@line 7837
    $220 = $ReallocAsyncCtx11 + 8 | 0; //@line 7838
    HEAP32[$220 >> 2] = $$02972$reg2mem$0; //@line 7839
    $221 = $ReallocAsyncCtx11 + 12 | 0; //@line 7840
    HEAP32[$221 >> 2] = $$reg2mem$0; //@line 7841
    $222 = $ReallocAsyncCtx11 + 16 | 0; //@line 7842
    HEAP32[$222 >> 2] = $8; //@line 7843
    $223 = $ReallocAsyncCtx11 + 20 | 0; //@line 7844
    HEAP32[$223 >> 2] = $10; //@line 7845
    $224 = $ReallocAsyncCtx11 + 24 | 0; //@line 7846
    HEAP32[$224 >> 2] = $12; //@line 7847
    $225 = $ReallocAsyncCtx11 + 28 | 0; //@line 7848
    HEAP32[$225 >> 2] = $14; //@line 7849
    $226 = $ReallocAsyncCtx11 + 32 | 0; //@line 7850
    HEAP32[$226 >> 2] = $16; //@line 7851
    $227 = $ReallocAsyncCtx11 + 36 | 0; //@line 7852
    HEAP32[$227 >> 2] = $18; //@line 7853
    $228 = $ReallocAsyncCtx11 + 40 | 0; //@line 7854
    HEAP32[$228 >> 2] = $20; //@line 7855
    $229 = $ReallocAsyncCtx11 + 44 | 0; //@line 7856
    HEAP32[$229 >> 2] = $22; //@line 7857
    $230 = $ReallocAsyncCtx11 + 48 | 0; //@line 7858
    HEAP32[$230 >> 2] = $24; //@line 7859
    $231 = $ReallocAsyncCtx11 + 52 | 0; //@line 7860
    HEAP32[$231 >> 2] = $26; //@line 7861
    $232 = $ReallocAsyncCtx11 + 56 | 0; //@line 7862
    HEAP32[$232 >> 2] = $28; //@line 7863
    $233 = $ReallocAsyncCtx11 + 60 | 0; //@line 7864
    HEAP32[$233 >> 2] = $30; //@line 7865
    $234 = $ReallocAsyncCtx11 + 64 | 0; //@line 7866
    HEAP32[$234 >> 2] = $32; //@line 7867
    $235 = $ReallocAsyncCtx11 + 68 | 0; //@line 7868
    HEAP32[$235 >> 2] = $34; //@line 7869
    $236 = $ReallocAsyncCtx11 + 72 | 0; //@line 7870
    HEAP32[$236 >> 2] = $36; //@line 7871
    $237 = $ReallocAsyncCtx11 + 76 | 0; //@line 7872
    HEAP32[$237 >> 2] = $38; //@line 7873
    $238 = $ReallocAsyncCtx11 + 80 | 0; //@line 7874
    HEAP32[$238 >> 2] = $40; //@line 7875
    $239 = $ReallocAsyncCtx11 + 84 | 0; //@line 7876
    HEAP32[$239 >> 2] = $42; //@line 7877
    $240 = $ReallocAsyncCtx11 + 88 | 0; //@line 7878
    HEAP32[$240 >> 2] = $44; //@line 7879
    $241 = $ReallocAsyncCtx11 + 92 | 0; //@line 7880
    HEAP32[$241 >> 2] = $46; //@line 7881
    $242 = $ReallocAsyncCtx11 + 96 | 0; //@line 7882
    HEAP32[$242 >> 2] = $48; //@line 7883
    $243 = $ReallocAsyncCtx11 + 100 | 0; //@line 7884
    HEAP32[$243 >> 2] = $50; //@line 7885
    sp = STACKTOP; //@line 7886
    return;
   }
   ___async_unwind = 0; //@line 7889
   HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 7890
   $219 = $ReallocAsyncCtx11 + 4 | 0; //@line 7891
   HEAP32[$219 >> 2] = $$03071$reg2mem$0; //@line 7892
   $220 = $ReallocAsyncCtx11 + 8 | 0; //@line 7893
   HEAP32[$220 >> 2] = $$02972$reg2mem$0; //@line 7894
   $221 = $ReallocAsyncCtx11 + 12 | 0; //@line 7895
   HEAP32[$221 >> 2] = $$reg2mem$0; //@line 7896
   $222 = $ReallocAsyncCtx11 + 16 | 0; //@line 7897
   HEAP32[$222 >> 2] = $8; //@line 7898
   $223 = $ReallocAsyncCtx11 + 20 | 0; //@line 7899
   HEAP32[$223 >> 2] = $10; //@line 7900
   $224 = $ReallocAsyncCtx11 + 24 | 0; //@line 7901
   HEAP32[$224 >> 2] = $12; //@line 7902
   $225 = $ReallocAsyncCtx11 + 28 | 0; //@line 7903
   HEAP32[$225 >> 2] = $14; //@line 7904
   $226 = $ReallocAsyncCtx11 + 32 | 0; //@line 7905
   HEAP32[$226 >> 2] = $16; //@line 7906
   $227 = $ReallocAsyncCtx11 + 36 | 0; //@line 7907
   HEAP32[$227 >> 2] = $18; //@line 7908
   $228 = $ReallocAsyncCtx11 + 40 | 0; //@line 7909
   HEAP32[$228 >> 2] = $20; //@line 7910
   $229 = $ReallocAsyncCtx11 + 44 | 0; //@line 7911
   HEAP32[$229 >> 2] = $22; //@line 7912
   $230 = $ReallocAsyncCtx11 + 48 | 0; //@line 7913
   HEAP32[$230 >> 2] = $24; //@line 7914
   $231 = $ReallocAsyncCtx11 + 52 | 0; //@line 7915
   HEAP32[$231 >> 2] = $26; //@line 7916
   $232 = $ReallocAsyncCtx11 + 56 | 0; //@line 7917
   HEAP32[$232 >> 2] = $28; //@line 7918
   $233 = $ReallocAsyncCtx11 + 60 | 0; //@line 7919
   HEAP32[$233 >> 2] = $30; //@line 7920
   $234 = $ReallocAsyncCtx11 + 64 | 0; //@line 7921
   HEAP32[$234 >> 2] = $32; //@line 7922
   $235 = $ReallocAsyncCtx11 + 68 | 0; //@line 7923
   HEAP32[$235 >> 2] = $34; //@line 7924
   $236 = $ReallocAsyncCtx11 + 72 | 0; //@line 7925
   HEAP32[$236 >> 2] = $36; //@line 7926
   $237 = $ReallocAsyncCtx11 + 76 | 0; //@line 7927
   HEAP32[$237 >> 2] = $38; //@line 7928
   $238 = $ReallocAsyncCtx11 + 80 | 0; //@line 7929
   HEAP32[$238 >> 2] = $40; //@line 7930
   $239 = $ReallocAsyncCtx11 + 84 | 0; //@line 7931
   HEAP32[$239 >> 2] = $42; //@line 7932
   $240 = $ReallocAsyncCtx11 + 88 | 0; //@line 7933
   HEAP32[$240 >> 2] = $44; //@line 7934
   $241 = $ReallocAsyncCtx11 + 92 | 0; //@line 7935
   HEAP32[$241 >> 2] = $46; //@line 7936
   $242 = $ReallocAsyncCtx11 + 96 | 0; //@line 7937
   HEAP32[$242 >> 2] = $48; //@line 7938
   $243 = $ReallocAsyncCtx11 + 100 | 0; //@line 7939
   HEAP32[$243 >> 2] = $50; //@line 7940
   sp = STACKTOP; //@line 7941
   return;
  } else {
   $191 = HEAP32[$187 + 4 >> 2] | 0; //@line 7946
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 7947
   FUNCTION_TABLE_vii[$191 & 7]($46, $180 + 32 | 0); //@line 7948
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 7951
    $192 = $ReallocAsyncCtx4 + 4 | 0; //@line 7952
    HEAP32[$192 >> 2] = $$03071$reg2mem$0; //@line 7953
    $193 = $ReallocAsyncCtx4 + 8 | 0; //@line 7954
    HEAP32[$193 >> 2] = $$02972$reg2mem$0; //@line 7955
    $194 = $ReallocAsyncCtx4 + 12 | 0; //@line 7956
    HEAP32[$194 >> 2] = $$reg2mem$0; //@line 7957
    $195 = $ReallocAsyncCtx4 + 16 | 0; //@line 7958
    HEAP32[$195 >> 2] = $8; //@line 7959
    $196 = $ReallocAsyncCtx4 + 20 | 0; //@line 7960
    HEAP32[$196 >> 2] = $12; //@line 7961
    $197 = $ReallocAsyncCtx4 + 24 | 0; //@line 7962
    HEAP32[$197 >> 2] = $14; //@line 7963
    $198 = $ReallocAsyncCtx4 + 28 | 0; //@line 7964
    HEAP32[$198 >> 2] = $16; //@line 7965
    $199 = $ReallocAsyncCtx4 + 32 | 0; //@line 7966
    HEAP32[$199 >> 2] = $18; //@line 7967
    $200 = $ReallocAsyncCtx4 + 36 | 0; //@line 7968
    HEAP32[$200 >> 2] = $20; //@line 7969
    $201 = $ReallocAsyncCtx4 + 40 | 0; //@line 7970
    HEAP32[$201 >> 2] = $22; //@line 7971
    $202 = $ReallocAsyncCtx4 + 44 | 0; //@line 7972
    HEAP32[$202 >> 2] = $24; //@line 7973
    $203 = $ReallocAsyncCtx4 + 48 | 0; //@line 7974
    HEAP32[$203 >> 2] = $26; //@line 7975
    $204 = $ReallocAsyncCtx4 + 52 | 0; //@line 7976
    HEAP32[$204 >> 2] = $10; //@line 7977
    $205 = $ReallocAsyncCtx4 + 56 | 0; //@line 7978
    HEAP32[$205 >> 2] = $186; //@line 7979
    $206 = $ReallocAsyncCtx4 + 60 | 0; //@line 7980
    HEAP32[$206 >> 2] = $28; //@line 7981
    $207 = $ReallocAsyncCtx4 + 64 | 0; //@line 7982
    HEAP32[$207 >> 2] = $30; //@line 7983
    $208 = $ReallocAsyncCtx4 + 68 | 0; //@line 7984
    HEAP32[$208 >> 2] = $32; //@line 7985
    $209 = $ReallocAsyncCtx4 + 72 | 0; //@line 7986
    HEAP32[$209 >> 2] = $34; //@line 7987
    $210 = $ReallocAsyncCtx4 + 76 | 0; //@line 7988
    HEAP32[$210 >> 2] = $36; //@line 7989
    $211 = $ReallocAsyncCtx4 + 80 | 0; //@line 7990
    HEAP32[$211 >> 2] = $38; //@line 7991
    $212 = $ReallocAsyncCtx4 + 84 | 0; //@line 7992
    HEAP32[$212 >> 2] = $40; //@line 7993
    $213 = $ReallocAsyncCtx4 + 88 | 0; //@line 7994
    HEAP32[$213 >> 2] = $42; //@line 7995
    $214 = $ReallocAsyncCtx4 + 92 | 0; //@line 7996
    HEAP32[$214 >> 2] = $44; //@line 7997
    $215 = $ReallocAsyncCtx4 + 96 | 0; //@line 7998
    HEAP32[$215 >> 2] = $46; //@line 7999
    $216 = $ReallocAsyncCtx4 + 100 | 0; //@line 8000
    HEAP32[$216 >> 2] = $48; //@line 8001
    $217 = $ReallocAsyncCtx4 + 104 | 0; //@line 8002
    HEAP32[$217 >> 2] = $50; //@line 8003
    sp = STACKTOP; //@line 8004
    return;
   }
   ___async_unwind = 0; //@line 8007
   HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 8008
   $192 = $ReallocAsyncCtx4 + 4 | 0; //@line 8009
   HEAP32[$192 >> 2] = $$03071$reg2mem$0; //@line 8010
   $193 = $ReallocAsyncCtx4 + 8 | 0; //@line 8011
   HEAP32[$193 >> 2] = $$02972$reg2mem$0; //@line 8012
   $194 = $ReallocAsyncCtx4 + 12 | 0; //@line 8013
   HEAP32[$194 >> 2] = $$reg2mem$0; //@line 8014
   $195 = $ReallocAsyncCtx4 + 16 | 0; //@line 8015
   HEAP32[$195 >> 2] = $8; //@line 8016
   $196 = $ReallocAsyncCtx4 + 20 | 0; //@line 8017
   HEAP32[$196 >> 2] = $12; //@line 8018
   $197 = $ReallocAsyncCtx4 + 24 | 0; //@line 8019
   HEAP32[$197 >> 2] = $14; //@line 8020
   $198 = $ReallocAsyncCtx4 + 28 | 0; //@line 8021
   HEAP32[$198 >> 2] = $16; //@line 8022
   $199 = $ReallocAsyncCtx4 + 32 | 0; //@line 8023
   HEAP32[$199 >> 2] = $18; //@line 8024
   $200 = $ReallocAsyncCtx4 + 36 | 0; //@line 8025
   HEAP32[$200 >> 2] = $20; //@line 8026
   $201 = $ReallocAsyncCtx4 + 40 | 0; //@line 8027
   HEAP32[$201 >> 2] = $22; //@line 8028
   $202 = $ReallocAsyncCtx4 + 44 | 0; //@line 8029
   HEAP32[$202 >> 2] = $24; //@line 8030
   $203 = $ReallocAsyncCtx4 + 48 | 0; //@line 8031
   HEAP32[$203 >> 2] = $26; //@line 8032
   $204 = $ReallocAsyncCtx4 + 52 | 0; //@line 8033
   HEAP32[$204 >> 2] = $10; //@line 8034
   $205 = $ReallocAsyncCtx4 + 56 | 0; //@line 8035
   HEAP32[$205 >> 2] = $186; //@line 8036
   $206 = $ReallocAsyncCtx4 + 60 | 0; //@line 8037
   HEAP32[$206 >> 2] = $28; //@line 8038
   $207 = $ReallocAsyncCtx4 + 64 | 0; //@line 8039
   HEAP32[$207 >> 2] = $30; //@line 8040
   $208 = $ReallocAsyncCtx4 + 68 | 0; //@line 8041
   HEAP32[$208 >> 2] = $32; //@line 8042
   $209 = $ReallocAsyncCtx4 + 72 | 0; //@line 8043
   HEAP32[$209 >> 2] = $34; //@line 8044
   $210 = $ReallocAsyncCtx4 + 76 | 0; //@line 8045
   HEAP32[$210 >> 2] = $36; //@line 8046
   $211 = $ReallocAsyncCtx4 + 80 | 0; //@line 8047
   HEAP32[$211 >> 2] = $38; //@line 8048
   $212 = $ReallocAsyncCtx4 + 84 | 0; //@line 8049
   HEAP32[$212 >> 2] = $40; //@line 8050
   $213 = $ReallocAsyncCtx4 + 88 | 0; //@line 8051
   HEAP32[$213 >> 2] = $42; //@line 8052
   $214 = $ReallocAsyncCtx4 + 92 | 0; //@line 8053
   HEAP32[$214 >> 2] = $44; //@line 8054
   $215 = $ReallocAsyncCtx4 + 96 | 0; //@line 8055
   HEAP32[$215 >> 2] = $46; //@line 8056
   $216 = $ReallocAsyncCtx4 + 100 | 0; //@line 8057
   HEAP32[$216 >> 2] = $48; //@line 8058
   $217 = $ReallocAsyncCtx4 + 104 | 0; //@line 8059
   HEAP32[$217 >> 2] = $50; //@line 8060
   sp = STACKTOP; //@line 8061
   return;
  }
 }
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_116($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $247 = 0, $248 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $258 = 0, $26 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 6211
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6213
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6215
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6217
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6219
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6221
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6223
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6225
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6227
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6229
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6231
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6233
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6235
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6237
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6239
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6241
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6243
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 6245
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 6247
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 6249
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 6251
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 6253
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 6255
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 6257
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 6259
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 6261
 $186 = HEAP32[$40 >> 2] | 0; //@line 6262
 if ($186 | 0) {
  $189 = HEAP32[$186 + 8 >> 2] | 0; //@line 6266
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(104) | 0; //@line 6267
  FUNCTION_TABLE_vi[$189 & 511]($48); //@line 6268
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 199; //@line 6271
   $190 = $ReallocAsyncCtx5 + 4 | 0; //@line 6272
   HEAP32[$190 >> 2] = $2; //@line 6273
   $191 = $ReallocAsyncCtx5 + 8 | 0; //@line 6274
   HEAP32[$191 >> 2] = $4; //@line 6275
   $192 = $ReallocAsyncCtx5 + 12 | 0; //@line 6276
   HEAP32[$192 >> 2] = $6; //@line 6277
   $193 = $ReallocAsyncCtx5 + 16 | 0; //@line 6278
   HEAP32[$193 >> 2] = $8; //@line 6279
   $194 = $ReallocAsyncCtx5 + 20 | 0; //@line 6280
   HEAP32[$194 >> 2] = $12; //@line 6281
   $195 = $ReallocAsyncCtx5 + 24 | 0; //@line 6282
   HEAP32[$195 >> 2] = $14; //@line 6283
   $196 = $ReallocAsyncCtx5 + 28 | 0; //@line 6284
   HEAP32[$196 >> 2] = $16; //@line 6285
   $197 = $ReallocAsyncCtx5 + 32 | 0; //@line 6286
   HEAP32[$197 >> 2] = $18; //@line 6287
   $198 = $ReallocAsyncCtx5 + 36 | 0; //@line 6288
   HEAP32[$198 >> 2] = $20; //@line 6289
   $199 = $ReallocAsyncCtx5 + 40 | 0; //@line 6290
   HEAP32[$199 >> 2] = $22; //@line 6291
   $200 = $ReallocAsyncCtx5 + 44 | 0; //@line 6292
   HEAP32[$200 >> 2] = $24; //@line 6293
   $201 = $ReallocAsyncCtx5 + 48 | 0; //@line 6294
   HEAP32[$201 >> 2] = $26; //@line 6295
   $202 = $ReallocAsyncCtx5 + 52 | 0; //@line 6296
   HEAP32[$202 >> 2] = $10; //@line 6297
   $203 = $ReallocAsyncCtx5 + 56 | 0; //@line 6298
   HEAP32[$203 >> 2] = $28; //@line 6299
   $204 = $ReallocAsyncCtx5 + 60 | 0; //@line 6300
   HEAP32[$204 >> 2] = $30; //@line 6301
   $205 = $ReallocAsyncCtx5 + 64 | 0; //@line 6302
   HEAP32[$205 >> 2] = $32; //@line 6303
   $206 = $ReallocAsyncCtx5 + 68 | 0; //@line 6304
   HEAP32[$206 >> 2] = $34; //@line 6305
   $207 = $ReallocAsyncCtx5 + 72 | 0; //@line 6306
   HEAP32[$207 >> 2] = $36; //@line 6307
   $208 = $ReallocAsyncCtx5 + 76 | 0; //@line 6308
   HEAP32[$208 >> 2] = $38; //@line 6309
   $209 = $ReallocAsyncCtx5 + 80 | 0; //@line 6310
   HEAP32[$209 >> 2] = $40; //@line 6311
   $210 = $ReallocAsyncCtx5 + 84 | 0; //@line 6312
   HEAP32[$210 >> 2] = $42; //@line 6313
   $211 = $ReallocAsyncCtx5 + 88 | 0; //@line 6314
   HEAP32[$211 >> 2] = $44; //@line 6315
   $212 = $ReallocAsyncCtx5 + 92 | 0; //@line 6316
   HEAP32[$212 >> 2] = $46; //@line 6317
   $213 = $ReallocAsyncCtx5 + 96 | 0; //@line 6318
   HEAP32[$213 >> 2] = $48; //@line 6319
   $214 = $ReallocAsyncCtx5 + 100 | 0; //@line 6320
   HEAP32[$214 >> 2] = $50; //@line 6321
   sp = STACKTOP; //@line 6322
   return;
  }
  ___async_unwind = 0; //@line 6325
  HEAP32[$ReallocAsyncCtx5 >> 2] = 199; //@line 6326
  $190 = $ReallocAsyncCtx5 + 4 | 0; //@line 6327
  HEAP32[$190 >> 2] = $2; //@line 6328
  $191 = $ReallocAsyncCtx5 + 8 | 0; //@line 6329
  HEAP32[$191 >> 2] = $4; //@line 6330
  $192 = $ReallocAsyncCtx5 + 12 | 0; //@line 6331
  HEAP32[$192 >> 2] = $6; //@line 6332
  $193 = $ReallocAsyncCtx5 + 16 | 0; //@line 6333
  HEAP32[$193 >> 2] = $8; //@line 6334
  $194 = $ReallocAsyncCtx5 + 20 | 0; //@line 6335
  HEAP32[$194 >> 2] = $12; //@line 6336
  $195 = $ReallocAsyncCtx5 + 24 | 0; //@line 6337
  HEAP32[$195 >> 2] = $14; //@line 6338
  $196 = $ReallocAsyncCtx5 + 28 | 0; //@line 6339
  HEAP32[$196 >> 2] = $16; //@line 6340
  $197 = $ReallocAsyncCtx5 + 32 | 0; //@line 6341
  HEAP32[$197 >> 2] = $18; //@line 6342
  $198 = $ReallocAsyncCtx5 + 36 | 0; //@line 6343
  HEAP32[$198 >> 2] = $20; //@line 6344
  $199 = $ReallocAsyncCtx5 + 40 | 0; //@line 6345
  HEAP32[$199 >> 2] = $22; //@line 6346
  $200 = $ReallocAsyncCtx5 + 44 | 0; //@line 6347
  HEAP32[$200 >> 2] = $24; //@line 6348
  $201 = $ReallocAsyncCtx5 + 48 | 0; //@line 6349
  HEAP32[$201 >> 2] = $26; //@line 6350
  $202 = $ReallocAsyncCtx5 + 52 | 0; //@line 6351
  HEAP32[$202 >> 2] = $10; //@line 6352
  $203 = $ReallocAsyncCtx5 + 56 | 0; //@line 6353
  HEAP32[$203 >> 2] = $28; //@line 6354
  $204 = $ReallocAsyncCtx5 + 60 | 0; //@line 6355
  HEAP32[$204 >> 2] = $30; //@line 6356
  $205 = $ReallocAsyncCtx5 + 64 | 0; //@line 6357
  HEAP32[$205 >> 2] = $32; //@line 6358
  $206 = $ReallocAsyncCtx5 + 68 | 0; //@line 6359
  HEAP32[$206 >> 2] = $34; //@line 6360
  $207 = $ReallocAsyncCtx5 + 72 | 0; //@line 6361
  HEAP32[$207 >> 2] = $36; //@line 6362
  $208 = $ReallocAsyncCtx5 + 76 | 0; //@line 6363
  HEAP32[$208 >> 2] = $38; //@line 6364
  $209 = $ReallocAsyncCtx5 + 80 | 0; //@line 6365
  HEAP32[$209 >> 2] = $40; //@line 6366
  $210 = $ReallocAsyncCtx5 + 84 | 0; //@line 6367
  HEAP32[$210 >> 2] = $42; //@line 6368
  $211 = $ReallocAsyncCtx5 + 88 | 0; //@line 6369
  HEAP32[$211 >> 2] = $44; //@line 6370
  $212 = $ReallocAsyncCtx5 + 92 | 0; //@line 6371
  HEAP32[$212 >> 2] = $46; //@line 6372
  $213 = $ReallocAsyncCtx5 + 96 | 0; //@line 6373
  HEAP32[$213 >> 2] = $48; //@line 6374
  $214 = $ReallocAsyncCtx5 + 100 | 0; //@line 6375
  HEAP32[$214 >> 2] = $50; //@line 6376
  sp = STACKTOP; //@line 6377
  return;
 }
 $215 = HEAP32[$50 >> 2] | 0; //@line 6380
 if (!$215) {
  $$02972$reg2mem$0 = $4; //@line 6383
  $$03071$reg2mem$0 = $2; //@line 6383
  $$reg2mem$0 = $6; //@line 6383
 } else {
  $218 = HEAP32[$215 + 8 >> 2] | 0; //@line 6386
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 6387
  FUNCTION_TABLE_vi[$218 & 511]($46); //@line 6388
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 200; //@line 6391
   $219 = $ReallocAsyncCtx6 + 4 | 0; //@line 6392
   HEAP32[$219 >> 2] = $2; //@line 6393
   $220 = $ReallocAsyncCtx6 + 8 | 0; //@line 6394
   HEAP32[$220 >> 2] = $4; //@line 6395
   $221 = $ReallocAsyncCtx6 + 12 | 0; //@line 6396
   HEAP32[$221 >> 2] = $6; //@line 6397
   $222 = $ReallocAsyncCtx6 + 16 | 0; //@line 6398
   HEAP32[$222 >> 2] = $8; //@line 6399
   $223 = $ReallocAsyncCtx6 + 20 | 0; //@line 6400
   HEAP32[$223 >> 2] = $12; //@line 6401
   $224 = $ReallocAsyncCtx6 + 24 | 0; //@line 6402
   HEAP32[$224 >> 2] = $14; //@line 6403
   $225 = $ReallocAsyncCtx6 + 28 | 0; //@line 6404
   HEAP32[$225 >> 2] = $16; //@line 6405
   $226 = $ReallocAsyncCtx6 + 32 | 0; //@line 6406
   HEAP32[$226 >> 2] = $18; //@line 6407
   $227 = $ReallocAsyncCtx6 + 36 | 0; //@line 6408
   HEAP32[$227 >> 2] = $20; //@line 6409
   $228 = $ReallocAsyncCtx6 + 40 | 0; //@line 6410
   HEAP32[$228 >> 2] = $22; //@line 6411
   $229 = $ReallocAsyncCtx6 + 44 | 0; //@line 6412
   HEAP32[$229 >> 2] = $24; //@line 6413
   $230 = $ReallocAsyncCtx6 + 48 | 0; //@line 6414
   HEAP32[$230 >> 2] = $26; //@line 6415
   $231 = $ReallocAsyncCtx6 + 52 | 0; //@line 6416
   HEAP32[$231 >> 2] = $10; //@line 6417
   $232 = $ReallocAsyncCtx6 + 56 | 0; //@line 6418
   HEAP32[$232 >> 2] = $28; //@line 6419
   $233 = $ReallocAsyncCtx6 + 60 | 0; //@line 6420
   HEAP32[$233 >> 2] = $30; //@line 6421
   $234 = $ReallocAsyncCtx6 + 64 | 0; //@line 6422
   HEAP32[$234 >> 2] = $32; //@line 6423
   $235 = $ReallocAsyncCtx6 + 68 | 0; //@line 6424
   HEAP32[$235 >> 2] = $34; //@line 6425
   $236 = $ReallocAsyncCtx6 + 72 | 0; //@line 6426
   HEAP32[$236 >> 2] = $36; //@line 6427
   $237 = $ReallocAsyncCtx6 + 76 | 0; //@line 6428
   HEAP32[$237 >> 2] = $38; //@line 6429
   $238 = $ReallocAsyncCtx6 + 80 | 0; //@line 6430
   HEAP32[$238 >> 2] = $40; //@line 6431
   $239 = $ReallocAsyncCtx6 + 84 | 0; //@line 6432
   HEAP32[$239 >> 2] = $42; //@line 6433
   $240 = $ReallocAsyncCtx6 + 88 | 0; //@line 6434
   HEAP32[$240 >> 2] = $44; //@line 6435
   $241 = $ReallocAsyncCtx6 + 92 | 0; //@line 6436
   HEAP32[$241 >> 2] = $46; //@line 6437
   $242 = $ReallocAsyncCtx6 + 96 | 0; //@line 6438
   HEAP32[$242 >> 2] = $48; //@line 6439
   $243 = $ReallocAsyncCtx6 + 100 | 0; //@line 6440
   HEAP32[$243 >> 2] = $50; //@line 6441
   sp = STACKTOP; //@line 6442
   return;
  }
  ___async_unwind = 0; //@line 6445
  HEAP32[$ReallocAsyncCtx6 >> 2] = 200; //@line 6446
  $219 = $ReallocAsyncCtx6 + 4 | 0; //@line 6447
  HEAP32[$219 >> 2] = $2; //@line 6448
  $220 = $ReallocAsyncCtx6 + 8 | 0; //@line 6449
  HEAP32[$220 >> 2] = $4; //@line 6450
  $221 = $ReallocAsyncCtx6 + 12 | 0; //@line 6451
  HEAP32[$221 >> 2] = $6; //@line 6452
  $222 = $ReallocAsyncCtx6 + 16 | 0; //@line 6453
  HEAP32[$222 >> 2] = $8; //@line 6454
  $223 = $ReallocAsyncCtx6 + 20 | 0; //@line 6455
  HEAP32[$223 >> 2] = $12; //@line 6456
  $224 = $ReallocAsyncCtx6 + 24 | 0; //@line 6457
  HEAP32[$224 >> 2] = $14; //@line 6458
  $225 = $ReallocAsyncCtx6 + 28 | 0; //@line 6459
  HEAP32[$225 >> 2] = $16; //@line 6460
  $226 = $ReallocAsyncCtx6 + 32 | 0; //@line 6461
  HEAP32[$226 >> 2] = $18; //@line 6462
  $227 = $ReallocAsyncCtx6 + 36 | 0; //@line 6463
  HEAP32[$227 >> 2] = $20; //@line 6464
  $228 = $ReallocAsyncCtx6 + 40 | 0; //@line 6465
  HEAP32[$228 >> 2] = $22; //@line 6466
  $229 = $ReallocAsyncCtx6 + 44 | 0; //@line 6467
  HEAP32[$229 >> 2] = $24; //@line 6468
  $230 = $ReallocAsyncCtx6 + 48 | 0; //@line 6469
  HEAP32[$230 >> 2] = $26; //@line 6470
  $231 = $ReallocAsyncCtx6 + 52 | 0; //@line 6471
  HEAP32[$231 >> 2] = $10; //@line 6472
  $232 = $ReallocAsyncCtx6 + 56 | 0; //@line 6473
  HEAP32[$232 >> 2] = $28; //@line 6474
  $233 = $ReallocAsyncCtx6 + 60 | 0; //@line 6475
  HEAP32[$233 >> 2] = $30; //@line 6476
  $234 = $ReallocAsyncCtx6 + 64 | 0; //@line 6477
  HEAP32[$234 >> 2] = $32; //@line 6478
  $235 = $ReallocAsyncCtx6 + 68 | 0; //@line 6479
  HEAP32[$235 >> 2] = $34; //@line 6480
  $236 = $ReallocAsyncCtx6 + 72 | 0; //@line 6481
  HEAP32[$236 >> 2] = $36; //@line 6482
  $237 = $ReallocAsyncCtx6 + 76 | 0; //@line 6483
  HEAP32[$237 >> 2] = $38; //@line 6484
  $238 = $ReallocAsyncCtx6 + 80 | 0; //@line 6485
  HEAP32[$238 >> 2] = $40; //@line 6486
  $239 = $ReallocAsyncCtx6 + 84 | 0; //@line 6487
  HEAP32[$239 >> 2] = $42; //@line 6488
  $240 = $ReallocAsyncCtx6 + 88 | 0; //@line 6489
  HEAP32[$240 >> 2] = $44; //@line 6490
  $241 = $ReallocAsyncCtx6 + 92 | 0; //@line 6491
  HEAP32[$241 >> 2] = $46; //@line 6492
  $242 = $ReallocAsyncCtx6 + 96 | 0; //@line 6493
  HEAP32[$242 >> 2] = $48; //@line 6494
  $243 = $ReallocAsyncCtx6 + 100 | 0; //@line 6495
  HEAP32[$243 >> 2] = $50; //@line 6496
  sp = STACKTOP; //@line 6497
  return;
 }
 L15 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 6504
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 6504
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 6506
   $$131 = $$03071$reg2mem$0; //@line 6506
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 6509
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 6512
    break L15;
   }
   $52 = 7840 + ($$02972$reg2mem$1 << 2) | 0; //@line 6515
   $54 = HEAP32[$52 >> 2] | 0; //@line 6516
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 6524
  $57 = HEAP32[$56 >> 2] | 0; //@line 6525
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 6529
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 6535
    break;
   }
  }
  $122 = HEAP32[$52 >> 2] | 0; //@line 6539
  $123 = $122 + 76 | 0; //@line 6540
  $124 = HEAP32[$123 >> 2] | 0; //@line 6541
  if (!$124) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 6544
   $$03071$reg2mem$0 = $$131; //@line 6544
   $$reg2mem$0 = $52; //@line 6544
   continue;
  }
  if ($124 >>> 0 <= 100) {
   label = 17; //@line 6549
   break;
  }
  HEAP32[$123 >> 2] = $124 + -100; //@line 6553
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 6554
  $$03071$reg2mem$0 = $$131; //@line 6554
  $$reg2mem$0 = $52; //@line 6554
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $247 = $$131 + 44 | 0; //@line 6561
  $248 = HEAP32[$247 >> 2] | 0; //@line 6562
  if (!$248) {
   $256 = $12 + 12 | 0; //@line 6565
   HEAP32[$256 >> 2] = 0; //@line 6566
   $258 = $10 + 4 | 0; //@line 6568
   HEAP32[$258 >> 2] = 0; //@line 6570
   HEAP32[$258 + 4 >> 2] = 0; //@line 6573
   HEAP32[$10 >> 2] = 3; //@line 6574
   $262 = $10 + 12 | 0; //@line 6575
   HEAP32[$262 >> 2] = 752; //@line 6576
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 6577
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($12, 100, $10) | 0; //@line 6578
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 6581
    $263 = $ReallocAsyncCtx10 + 4 | 0; //@line 6582
    HEAP32[$263 >> 2] = $262; //@line 6583
    $264 = $ReallocAsyncCtx10 + 8 | 0; //@line 6584
    HEAP32[$264 >> 2] = $256; //@line 6585
    $265 = $ReallocAsyncCtx10 + 12 | 0; //@line 6586
    HEAP32[$265 >> 2] = $10; //@line 6587
    $266 = $ReallocAsyncCtx10 + 16 | 0; //@line 6588
    HEAP32[$266 >> 2] = $12; //@line 6589
    sp = STACKTOP; //@line 6590
    return;
   }
   ___async_unwind = 0; //@line 6593
   HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 6594
   $263 = $ReallocAsyncCtx10 + 4 | 0; //@line 6595
   HEAP32[$263 >> 2] = $262; //@line 6596
   $264 = $ReallocAsyncCtx10 + 8 | 0; //@line 6597
   HEAP32[$264 >> 2] = $256; //@line 6598
   $265 = $ReallocAsyncCtx10 + 12 | 0; //@line 6599
   HEAP32[$265 >> 2] = $10; //@line 6600
   $266 = $ReallocAsyncCtx10 + 16 | 0; //@line 6601
   HEAP32[$266 >> 2] = $12; //@line 6602
   sp = STACKTOP; //@line 6603
   return;
  } else {
   $252 = HEAP32[$248 + 4 >> 2] | 0; //@line 6608
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 6609
   FUNCTION_TABLE_vii[$252 & 7]($12, $$131 + 32 | 0); //@line 6610
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 6613
    $253 = $ReallocAsyncCtx7 + 4 | 0; //@line 6614
    HEAP32[$253 >> 2] = $247; //@line 6615
    $254 = $ReallocAsyncCtx7 + 8 | 0; //@line 6616
    HEAP32[$254 >> 2] = $12; //@line 6617
    $255 = $ReallocAsyncCtx7 + 12 | 0; //@line 6618
    HEAP32[$255 >> 2] = $10; //@line 6619
    sp = STACKTOP; //@line 6620
    return;
   }
   ___async_unwind = 0; //@line 6623
   HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 6624
   $253 = $ReallocAsyncCtx7 + 4 | 0; //@line 6625
   HEAP32[$253 >> 2] = $247; //@line 6626
   $254 = $ReallocAsyncCtx7 + 8 | 0; //@line 6627
   HEAP32[$254 >> 2] = $12; //@line 6628
   $255 = $ReallocAsyncCtx7 + 12 | 0; //@line 6629
   HEAP32[$255 >> 2] = $10; //@line 6630
   sp = STACKTOP; //@line 6631
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 6637
  $64 = $54 + 44 | 0; //@line 6638
  $65 = HEAP32[$64 >> 2] | 0; //@line 6639
  if (!$65) {
   HEAP32[$14 >> 2] = 0; //@line 6642
   $96 = HEAP32[$54 >> 2] | 0; //@line 6643
   HEAP32[$16 >> 2] = 0; //@line 6644
   HEAP32[$18 >> 2] = 192; //@line 6645
   HEAP32[$20 >> 2] = $96; //@line 6646
   HEAP32[$22 >> 2] = 764; //@line 6647
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 6648
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 6649
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 6652
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 6653
    HEAP32[$97 >> 2] = $$131; //@line 6654
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 6655
    HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 6656
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 6657
    HEAP32[$99 >> 2] = $52; //@line 6658
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 6659
    HEAP32[$100 >> 2] = $8; //@line 6660
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 6661
    HEAP32[$101 >> 2] = $10; //@line 6662
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 6663
    HEAP32[$102 >> 2] = $12; //@line 6664
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 6665
    HEAP32[$103 >> 2] = $14; //@line 6666
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 6667
    HEAP32[$104 >> 2] = $16; //@line 6668
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 6669
    HEAP32[$105 >> 2] = $18; //@line 6670
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 6671
    HEAP32[$106 >> 2] = $20; //@line 6672
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 6673
    HEAP32[$107 >> 2] = $22; //@line 6674
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 6675
    HEAP32[$108 >> 2] = $24; //@line 6676
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 6677
    HEAP32[$109 >> 2] = $26; //@line 6678
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 6679
    HEAP32[$110 >> 2] = $28; //@line 6680
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 6681
    HEAP32[$111 >> 2] = $30; //@line 6682
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 6683
    HEAP32[$112 >> 2] = $32; //@line 6684
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 6685
    HEAP32[$113 >> 2] = $34; //@line 6686
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 6687
    HEAP32[$114 >> 2] = $36; //@line 6688
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 6689
    HEAP32[$115 >> 2] = $38; //@line 6690
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 6691
    HEAP32[$116 >> 2] = $40; //@line 6692
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 6693
    HEAP32[$117 >> 2] = $42; //@line 6694
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 6695
    HEAP32[$118 >> 2] = $44; //@line 6696
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 6697
    HEAP32[$119 >> 2] = $46; //@line 6698
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 6699
    HEAP32[$120 >> 2] = $48; //@line 6700
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 6701
    HEAP32[$121 >> 2] = $50; //@line 6702
    sp = STACKTOP; //@line 6703
    return;
   }
   ___async_unwind = 0; //@line 6706
   HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 6707
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 6708
   HEAP32[$97 >> 2] = $$131; //@line 6709
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 6710
   HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 6711
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 6712
   HEAP32[$99 >> 2] = $52; //@line 6713
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 6714
   HEAP32[$100 >> 2] = $8; //@line 6715
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 6716
   HEAP32[$101 >> 2] = $10; //@line 6717
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 6718
   HEAP32[$102 >> 2] = $12; //@line 6719
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 6720
   HEAP32[$103 >> 2] = $14; //@line 6721
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 6722
   HEAP32[$104 >> 2] = $16; //@line 6723
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 6724
   HEAP32[$105 >> 2] = $18; //@line 6725
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 6726
   HEAP32[$106 >> 2] = $20; //@line 6727
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 6728
   HEAP32[$107 >> 2] = $22; //@line 6729
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 6730
   HEAP32[$108 >> 2] = $24; //@line 6731
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 6732
   HEAP32[$109 >> 2] = $26; //@line 6733
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 6734
   HEAP32[$110 >> 2] = $28; //@line 6735
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 6736
   HEAP32[$111 >> 2] = $30; //@line 6737
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 6738
   HEAP32[$112 >> 2] = $32; //@line 6739
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 6740
   HEAP32[$113 >> 2] = $34; //@line 6741
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 6742
   HEAP32[$114 >> 2] = $36; //@line 6743
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 6744
   HEAP32[$115 >> 2] = $38; //@line 6745
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 6746
   HEAP32[$116 >> 2] = $40; //@line 6747
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 6748
   HEAP32[$117 >> 2] = $42; //@line 6749
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 6750
   HEAP32[$118 >> 2] = $44; //@line 6751
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 6752
   HEAP32[$119 >> 2] = $46; //@line 6753
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 6754
   HEAP32[$120 >> 2] = $48; //@line 6755
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 6756
   HEAP32[$121 >> 2] = $50; //@line 6757
   sp = STACKTOP; //@line 6758
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 6763
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 6764
   FUNCTION_TABLE_vii[$69 & 7]($8, $54 + 32 | 0); //@line 6765
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 6768
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 6769
    HEAP32[$70 >> 2] = $$131; //@line 6770
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 6771
    HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 6772
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 6773
    HEAP32[$72 >> 2] = $52; //@line 6774
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 6775
    HEAP32[$73 >> 2] = $8; //@line 6776
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 6777
    HEAP32[$74 >> 2] = $12; //@line 6778
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 6779
    HEAP32[$75 >> 2] = $14; //@line 6780
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 6781
    HEAP32[$76 >> 2] = $16; //@line 6782
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 6783
    HEAP32[$77 >> 2] = $18; //@line 6784
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 6785
    HEAP32[$78 >> 2] = $20; //@line 6786
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 6787
    HEAP32[$79 >> 2] = $22; //@line 6788
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 6789
    HEAP32[$80 >> 2] = $24; //@line 6790
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 6791
    HEAP32[$81 >> 2] = $26; //@line 6792
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 6793
    HEAP32[$82 >> 2] = $10; //@line 6794
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 6795
    HEAP32[$83 >> 2] = $28; //@line 6796
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 6797
    HEAP32[$84 >> 2] = $30; //@line 6798
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 6799
    HEAP32[$85 >> 2] = $64; //@line 6800
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 6801
    HEAP32[$86 >> 2] = $32; //@line 6802
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 6803
    HEAP32[$87 >> 2] = $34; //@line 6804
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 6805
    HEAP32[$88 >> 2] = $36; //@line 6806
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 6807
    HEAP32[$89 >> 2] = $38; //@line 6808
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 6809
    HEAP32[$90 >> 2] = $40; //@line 6810
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 6811
    HEAP32[$91 >> 2] = $42; //@line 6812
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 6813
    HEAP32[$92 >> 2] = $44; //@line 6814
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 6815
    HEAP32[$93 >> 2] = $46; //@line 6816
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 6817
    HEAP32[$94 >> 2] = $48; //@line 6818
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 6819
    HEAP32[$95 >> 2] = $50; //@line 6820
    sp = STACKTOP; //@line 6821
    return;
   }
   ___async_unwind = 0; //@line 6824
   HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 6825
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 6826
   HEAP32[$70 >> 2] = $$131; //@line 6827
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 6828
   HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 6829
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 6830
   HEAP32[$72 >> 2] = $52; //@line 6831
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 6832
   HEAP32[$73 >> 2] = $8; //@line 6833
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 6834
   HEAP32[$74 >> 2] = $12; //@line 6835
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 6836
   HEAP32[$75 >> 2] = $14; //@line 6837
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 6838
   HEAP32[$76 >> 2] = $16; //@line 6839
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 6840
   HEAP32[$77 >> 2] = $18; //@line 6841
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 6842
   HEAP32[$78 >> 2] = $20; //@line 6843
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 6844
   HEAP32[$79 >> 2] = $22; //@line 6845
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 6846
   HEAP32[$80 >> 2] = $24; //@line 6847
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 6848
   HEAP32[$81 >> 2] = $26; //@line 6849
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 6850
   HEAP32[$82 >> 2] = $10; //@line 6851
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 6852
   HEAP32[$83 >> 2] = $28; //@line 6853
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 6854
   HEAP32[$84 >> 2] = $30; //@line 6855
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 6856
   HEAP32[$85 >> 2] = $64; //@line 6857
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 6858
   HEAP32[$86 >> 2] = $32; //@line 6859
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 6860
   HEAP32[$87 >> 2] = $34; //@line 6861
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 6862
   HEAP32[$88 >> 2] = $36; //@line 6863
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 6864
   HEAP32[$89 >> 2] = $38; //@line 6865
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 6866
   HEAP32[$90 >> 2] = $40; //@line 6867
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 6868
   HEAP32[$91 >> 2] = $42; //@line 6869
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 6870
   HEAP32[$92 >> 2] = $44; //@line 6871
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 6872
   HEAP32[$93 >> 2] = $46; //@line 6873
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 6874
   HEAP32[$94 >> 2] = $48; //@line 6875
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 6876
   HEAP32[$95 >> 2] = $50; //@line 6877
   sp = STACKTOP; //@line 6878
   return;
  }
 } else if ((label | 0) == 17) {
  HEAP32[$123 >> 2] = 0; //@line 6883
  $128 = $122 + 44 | 0; //@line 6884
  $129 = HEAP32[$128 >> 2] | 0; //@line 6885
  if (!$129) {
   HEAP32[$32 >> 2] = 0; //@line 6888
   $160 = HEAP32[$122 >> 2] | 0; //@line 6889
   HEAP32[$34 >> 2] = 0; //@line 6890
   HEAP32[$36 >> 2] = 197; //@line 6891
   HEAP32[$38 >> 2] = $160; //@line 6892
   HEAP32[$40 >> 2] = 764; //@line 6893
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 6894
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 6895
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 6898
    $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 6899
    HEAP32[$161 >> 2] = $$131; //@line 6900
    $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 6901
    HEAP32[$162 >> 2] = $$02972$reg2mem$1; //@line 6902
    $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 6903
    HEAP32[$163 >> 2] = $52; //@line 6904
    $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 6905
    HEAP32[$164 >> 2] = $8; //@line 6906
    $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 6907
    HEAP32[$165 >> 2] = $10; //@line 6908
    $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 6909
    HEAP32[$166 >> 2] = $12; //@line 6910
    $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 6911
    HEAP32[$167 >> 2] = $14; //@line 6912
    $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 6913
    HEAP32[$168 >> 2] = $16; //@line 6914
    $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 6915
    HEAP32[$169 >> 2] = $18; //@line 6916
    $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 6917
    HEAP32[$170 >> 2] = $20; //@line 6918
    $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 6919
    HEAP32[$171 >> 2] = $22; //@line 6920
    $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 6921
    HEAP32[$172 >> 2] = $24; //@line 6922
    $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 6923
    HEAP32[$173 >> 2] = $26; //@line 6924
    $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 6925
    HEAP32[$174 >> 2] = $28; //@line 6926
    $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 6927
    HEAP32[$175 >> 2] = $30; //@line 6928
    $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 6929
    HEAP32[$176 >> 2] = $32; //@line 6930
    $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 6931
    HEAP32[$177 >> 2] = $34; //@line 6932
    $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 6933
    HEAP32[$178 >> 2] = $36; //@line 6934
    $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 6935
    HEAP32[$179 >> 2] = $38; //@line 6936
    $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 6937
    HEAP32[$180 >> 2] = $40; //@line 6938
    $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 6939
    HEAP32[$181 >> 2] = $42; //@line 6940
    $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 6941
    HEAP32[$182 >> 2] = $44; //@line 6942
    $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 6943
    HEAP32[$183 >> 2] = $46; //@line 6944
    $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 6945
    HEAP32[$184 >> 2] = $48; //@line 6946
    $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 6947
    HEAP32[$185 >> 2] = $50; //@line 6948
    sp = STACKTOP; //@line 6949
    return;
   }
   ___async_unwind = 0; //@line 6952
   HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 6953
   $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 6954
   HEAP32[$161 >> 2] = $$131; //@line 6955
   $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 6956
   HEAP32[$162 >> 2] = $$02972$reg2mem$1; //@line 6957
   $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 6958
   HEAP32[$163 >> 2] = $52; //@line 6959
   $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 6960
   HEAP32[$164 >> 2] = $8; //@line 6961
   $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 6962
   HEAP32[$165 >> 2] = $10; //@line 6963
   $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 6964
   HEAP32[$166 >> 2] = $12; //@line 6965
   $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 6966
   HEAP32[$167 >> 2] = $14; //@line 6967
   $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 6968
   HEAP32[$168 >> 2] = $16; //@line 6969
   $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 6970
   HEAP32[$169 >> 2] = $18; //@line 6971
   $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 6972
   HEAP32[$170 >> 2] = $20; //@line 6973
   $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 6974
   HEAP32[$171 >> 2] = $22; //@line 6975
   $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 6976
   HEAP32[$172 >> 2] = $24; //@line 6977
   $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 6978
   HEAP32[$173 >> 2] = $26; //@line 6979
   $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 6980
   HEAP32[$174 >> 2] = $28; //@line 6981
   $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 6982
   HEAP32[$175 >> 2] = $30; //@line 6983
   $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 6984
   HEAP32[$176 >> 2] = $32; //@line 6985
   $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 6986
   HEAP32[$177 >> 2] = $34; //@line 6987
   $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 6988
   HEAP32[$178 >> 2] = $36; //@line 6989
   $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 6990
   HEAP32[$179 >> 2] = $38; //@line 6991
   $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 6992
   HEAP32[$180 >> 2] = $40; //@line 6993
   $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 6994
   HEAP32[$181 >> 2] = $42; //@line 6995
   $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 6996
   HEAP32[$182 >> 2] = $44; //@line 6997
   $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 6998
   HEAP32[$183 >> 2] = $46; //@line 6999
   $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 7000
   HEAP32[$184 >> 2] = $48; //@line 7001
   $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 7002
   HEAP32[$185 >> 2] = $50; //@line 7003
   sp = STACKTOP; //@line 7004
   return;
  } else {
   $133 = HEAP32[$129 + 4 >> 2] | 0; //@line 7009
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 7010
   FUNCTION_TABLE_vii[$133 & 7]($46, $122 + 32 | 0); //@line 7011
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 7014
    $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 7015
    HEAP32[$134 >> 2] = $$131; //@line 7016
    $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 7017
    HEAP32[$135 >> 2] = $$02972$reg2mem$1; //@line 7018
    $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 7019
    HEAP32[$136 >> 2] = $52; //@line 7020
    $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 7021
    HEAP32[$137 >> 2] = $8; //@line 7022
    $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 7023
    HEAP32[$138 >> 2] = $12; //@line 7024
    $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 7025
    HEAP32[$139 >> 2] = $14; //@line 7026
    $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 7027
    HEAP32[$140 >> 2] = $16; //@line 7028
    $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 7029
    HEAP32[$141 >> 2] = $18; //@line 7030
    $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 7031
    HEAP32[$142 >> 2] = $20; //@line 7032
    $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 7033
    HEAP32[$143 >> 2] = $22; //@line 7034
    $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 7035
    HEAP32[$144 >> 2] = $24; //@line 7036
    $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 7037
    HEAP32[$145 >> 2] = $26; //@line 7038
    $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 7039
    HEAP32[$146 >> 2] = $10; //@line 7040
    $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 7041
    HEAP32[$147 >> 2] = $128; //@line 7042
    $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 7043
    HEAP32[$148 >> 2] = $28; //@line 7044
    $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 7045
    HEAP32[$149 >> 2] = $30; //@line 7046
    $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 7047
    HEAP32[$150 >> 2] = $32; //@line 7048
    $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 7049
    HEAP32[$151 >> 2] = $34; //@line 7050
    $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 7051
    HEAP32[$152 >> 2] = $36; //@line 7052
    $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 7053
    HEAP32[$153 >> 2] = $38; //@line 7054
    $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 7055
    HEAP32[$154 >> 2] = $40; //@line 7056
    $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 7057
    HEAP32[$155 >> 2] = $42; //@line 7058
    $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 7059
    HEAP32[$156 >> 2] = $44; //@line 7060
    $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 7061
    HEAP32[$157 >> 2] = $46; //@line 7062
    $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 7063
    HEAP32[$158 >> 2] = $48; //@line 7064
    $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 7065
    HEAP32[$159 >> 2] = $50; //@line 7066
    sp = STACKTOP; //@line 7067
    return;
   }
   ___async_unwind = 0; //@line 7070
   HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 7071
   $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 7072
   HEAP32[$134 >> 2] = $$131; //@line 7073
   $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 7074
   HEAP32[$135 >> 2] = $$02972$reg2mem$1; //@line 7075
   $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 7076
   HEAP32[$136 >> 2] = $52; //@line 7077
   $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 7078
   HEAP32[$137 >> 2] = $8; //@line 7079
   $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 7080
   HEAP32[$138 >> 2] = $12; //@line 7081
   $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 7082
   HEAP32[$139 >> 2] = $14; //@line 7083
   $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 7084
   HEAP32[$140 >> 2] = $16; //@line 7085
   $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 7086
   HEAP32[$141 >> 2] = $18; //@line 7087
   $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 7088
   HEAP32[$142 >> 2] = $20; //@line 7089
   $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 7090
   HEAP32[$143 >> 2] = $22; //@line 7091
   $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 7092
   HEAP32[$144 >> 2] = $24; //@line 7093
   $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 7094
   HEAP32[$145 >> 2] = $26; //@line 7095
   $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 7096
   HEAP32[$146 >> 2] = $10; //@line 7097
   $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 7098
   HEAP32[$147 >> 2] = $128; //@line 7099
   $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 7100
   HEAP32[$148 >> 2] = $28; //@line 7101
   $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 7102
   HEAP32[$149 >> 2] = $30; //@line 7103
   $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 7104
   HEAP32[$150 >> 2] = $32; //@line 7105
   $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 7106
   HEAP32[$151 >> 2] = $34; //@line 7107
   $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 7108
   HEAP32[$152 >> 2] = $36; //@line 7109
   $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 7110
   HEAP32[$153 >> 2] = $38; //@line 7111
   $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 7112
   HEAP32[$154 >> 2] = $40; //@line 7113
   $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 7114
   HEAP32[$155 >> 2] = $42; //@line 7115
   $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 7116
   HEAP32[$156 >> 2] = $44; //@line 7117
   $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 7118
   HEAP32[$157 >> 2] = $46; //@line 7119
   $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 7120
   HEAP32[$158 >> 2] = $48; //@line 7121
   $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 7122
   HEAP32[$159 >> 2] = $50; //@line 7123
   sp = STACKTOP; //@line 7124
   return;
  }
 }
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_107($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $157 = 0, $158 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $219 = 0, $22 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 2911
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2913
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2915
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2917
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2919
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2921
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2923
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2925
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2927
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2929
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2931
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2933
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2935
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2937
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2939
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2941
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 2943
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 2945
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 2947
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 2949
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 2951
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 2953
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 2955
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 2957
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 2959
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 2961
 $122 = HEAP32[$30 >> 2] | 0; //@line 2962
 if (!$122) {
  $$02972$reg2mem$0 = $4; //@line 2965
  $$03071$reg2mem$0 = $2; //@line 2965
  $$reg2mem$0 = $6; //@line 2965
 } else {
  $125 = HEAP32[$122 + 8 >> 2] | 0; //@line 2968
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 2969
  FUNCTION_TABLE_vi[$125 & 511]($8); //@line 2970
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 195; //@line 2973
   $126 = $ReallocAsyncCtx3 + 4 | 0; //@line 2974
   HEAP32[$126 >> 2] = $2; //@line 2975
   $127 = $ReallocAsyncCtx3 + 8 | 0; //@line 2976
   HEAP32[$127 >> 2] = $4; //@line 2977
   $128 = $ReallocAsyncCtx3 + 12 | 0; //@line 2978
   HEAP32[$128 >> 2] = $6; //@line 2979
   $129 = $ReallocAsyncCtx3 + 16 | 0; //@line 2980
   HEAP32[$129 >> 2] = $8; //@line 2981
   $130 = $ReallocAsyncCtx3 + 20 | 0; //@line 2982
   HEAP32[$130 >> 2] = $10; //@line 2983
   $131 = $ReallocAsyncCtx3 + 24 | 0; //@line 2984
   HEAP32[$131 >> 2] = $12; //@line 2985
   $132 = $ReallocAsyncCtx3 + 28 | 0; //@line 2986
   HEAP32[$132 >> 2] = $14; //@line 2987
   $133 = $ReallocAsyncCtx3 + 32 | 0; //@line 2988
   HEAP32[$133 >> 2] = $16; //@line 2989
   $134 = $ReallocAsyncCtx3 + 36 | 0; //@line 2990
   HEAP32[$134 >> 2] = $18; //@line 2991
   $135 = $ReallocAsyncCtx3 + 40 | 0; //@line 2992
   HEAP32[$135 >> 2] = $20; //@line 2993
   $136 = $ReallocAsyncCtx3 + 44 | 0; //@line 2994
   HEAP32[$136 >> 2] = $22; //@line 2995
   $137 = $ReallocAsyncCtx3 + 48 | 0; //@line 2996
   HEAP32[$137 >> 2] = $24; //@line 2997
   $138 = $ReallocAsyncCtx3 + 52 | 0; //@line 2998
   HEAP32[$138 >> 2] = $26; //@line 2999
   $139 = $ReallocAsyncCtx3 + 56 | 0; //@line 3000
   HEAP32[$139 >> 2] = $28; //@line 3001
   $140 = $ReallocAsyncCtx3 + 60 | 0; //@line 3002
   HEAP32[$140 >> 2] = $30; //@line 3003
   $141 = $ReallocAsyncCtx3 + 64 | 0; //@line 3004
   HEAP32[$141 >> 2] = $32; //@line 3005
   $142 = $ReallocAsyncCtx3 + 68 | 0; //@line 3006
   HEAP32[$142 >> 2] = $34; //@line 3007
   $143 = $ReallocAsyncCtx3 + 72 | 0; //@line 3008
   HEAP32[$143 >> 2] = $36; //@line 3009
   $144 = $ReallocAsyncCtx3 + 76 | 0; //@line 3010
   HEAP32[$144 >> 2] = $38; //@line 3011
   $145 = $ReallocAsyncCtx3 + 80 | 0; //@line 3012
   HEAP32[$145 >> 2] = $40; //@line 3013
   $146 = $ReallocAsyncCtx3 + 84 | 0; //@line 3014
   HEAP32[$146 >> 2] = $42; //@line 3015
   $147 = $ReallocAsyncCtx3 + 88 | 0; //@line 3016
   HEAP32[$147 >> 2] = $44; //@line 3017
   $148 = $ReallocAsyncCtx3 + 92 | 0; //@line 3018
   HEAP32[$148 >> 2] = $46; //@line 3019
   $149 = $ReallocAsyncCtx3 + 96 | 0; //@line 3020
   HEAP32[$149 >> 2] = $48; //@line 3021
   $150 = $ReallocAsyncCtx3 + 100 | 0; //@line 3022
   HEAP32[$150 >> 2] = $50; //@line 3023
   sp = STACKTOP; //@line 3024
   return;
  }
  ___async_unwind = 0; //@line 3027
  HEAP32[$ReallocAsyncCtx3 >> 2] = 195; //@line 3028
  $126 = $ReallocAsyncCtx3 + 4 | 0; //@line 3029
  HEAP32[$126 >> 2] = $2; //@line 3030
  $127 = $ReallocAsyncCtx3 + 8 | 0; //@line 3031
  HEAP32[$127 >> 2] = $4; //@line 3032
  $128 = $ReallocAsyncCtx3 + 12 | 0; //@line 3033
  HEAP32[$128 >> 2] = $6; //@line 3034
  $129 = $ReallocAsyncCtx3 + 16 | 0; //@line 3035
  HEAP32[$129 >> 2] = $8; //@line 3036
  $130 = $ReallocAsyncCtx3 + 20 | 0; //@line 3037
  HEAP32[$130 >> 2] = $10; //@line 3038
  $131 = $ReallocAsyncCtx3 + 24 | 0; //@line 3039
  HEAP32[$131 >> 2] = $12; //@line 3040
  $132 = $ReallocAsyncCtx3 + 28 | 0; //@line 3041
  HEAP32[$132 >> 2] = $14; //@line 3042
  $133 = $ReallocAsyncCtx3 + 32 | 0; //@line 3043
  HEAP32[$133 >> 2] = $16; //@line 3044
  $134 = $ReallocAsyncCtx3 + 36 | 0; //@line 3045
  HEAP32[$134 >> 2] = $18; //@line 3046
  $135 = $ReallocAsyncCtx3 + 40 | 0; //@line 3047
  HEAP32[$135 >> 2] = $20; //@line 3048
  $136 = $ReallocAsyncCtx3 + 44 | 0; //@line 3049
  HEAP32[$136 >> 2] = $22; //@line 3050
  $137 = $ReallocAsyncCtx3 + 48 | 0; //@line 3051
  HEAP32[$137 >> 2] = $24; //@line 3052
  $138 = $ReallocAsyncCtx3 + 52 | 0; //@line 3053
  HEAP32[$138 >> 2] = $26; //@line 3054
  $139 = $ReallocAsyncCtx3 + 56 | 0; //@line 3055
  HEAP32[$139 >> 2] = $28; //@line 3056
  $140 = $ReallocAsyncCtx3 + 60 | 0; //@line 3057
  HEAP32[$140 >> 2] = $30; //@line 3058
  $141 = $ReallocAsyncCtx3 + 64 | 0; //@line 3059
  HEAP32[$141 >> 2] = $32; //@line 3060
  $142 = $ReallocAsyncCtx3 + 68 | 0; //@line 3061
  HEAP32[$142 >> 2] = $34; //@line 3062
  $143 = $ReallocAsyncCtx3 + 72 | 0; //@line 3063
  HEAP32[$143 >> 2] = $36; //@line 3064
  $144 = $ReallocAsyncCtx3 + 76 | 0; //@line 3065
  HEAP32[$144 >> 2] = $38; //@line 3066
  $145 = $ReallocAsyncCtx3 + 80 | 0; //@line 3067
  HEAP32[$145 >> 2] = $40; //@line 3068
  $146 = $ReallocAsyncCtx3 + 84 | 0; //@line 3069
  HEAP32[$146 >> 2] = $42; //@line 3070
  $147 = $ReallocAsyncCtx3 + 88 | 0; //@line 3071
  HEAP32[$147 >> 2] = $44; //@line 3072
  $148 = $ReallocAsyncCtx3 + 92 | 0; //@line 3073
  HEAP32[$148 >> 2] = $46; //@line 3074
  $149 = $ReallocAsyncCtx3 + 96 | 0; //@line 3075
  HEAP32[$149 >> 2] = $48; //@line 3076
  $150 = $ReallocAsyncCtx3 + 100 | 0; //@line 3077
  HEAP32[$150 >> 2] = $50; //@line 3078
  sp = STACKTOP; //@line 3079
  return;
 }
 L9 : while (1) {
  $151 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 3083
  $152 = $151 + 76 | 0; //@line 3084
  $153 = HEAP32[$152 >> 2] | 0; //@line 3085
  if ($153 | 0) {
   if ($153 >>> 0 <= 100) {
    label = 22; //@line 3090
    break;
   }
   HEAP32[$152 >> 2] = $153 + -100; //@line 3094
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 3099
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 3099
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 3101
   $$131 = $$03071$reg2mem$0; //@line 3101
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 3104
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 3107
    break L9;
   }
   $52 = 7840 + ($$02972$reg2mem$1 << 2) | 0; //@line 3110
   $54 = HEAP32[$52 >> 2] | 0; //@line 3111
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 3119
  $57 = HEAP32[$56 >> 2] | 0; //@line 3120
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 3124
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 3125
   $$03071$reg2mem$0 = $$131; //@line 3125
   $$reg2mem$0 = $52; //@line 3125
   continue;
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 3132
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 3135
    $$03071$reg2mem$0 = $$131; //@line 3135
    $$reg2mem$0 = $52; //@line 3135
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $218 = $$131 + 44 | 0; //@line 3145
  $219 = HEAP32[$218 >> 2] | 0; //@line 3146
  if (!$219) {
   $227 = $10 + 12 | 0; //@line 3149
   HEAP32[$227 >> 2] = 0; //@line 3150
   $229 = $26 + 4 | 0; //@line 3152
   HEAP32[$229 >> 2] = 0; //@line 3154
   HEAP32[$229 + 4 >> 2] = 0; //@line 3157
   HEAP32[$26 >> 2] = 3; //@line 3158
   $233 = $26 + 12 | 0; //@line 3159
   HEAP32[$233 >> 2] = 752; //@line 3160
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 3161
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $26) | 0; //@line 3162
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 3165
    $234 = $ReallocAsyncCtx10 + 4 | 0; //@line 3166
    HEAP32[$234 >> 2] = $233; //@line 3167
    $235 = $ReallocAsyncCtx10 + 8 | 0; //@line 3168
    HEAP32[$235 >> 2] = $227; //@line 3169
    $236 = $ReallocAsyncCtx10 + 12 | 0; //@line 3170
    HEAP32[$236 >> 2] = $26; //@line 3171
    $237 = $ReallocAsyncCtx10 + 16 | 0; //@line 3172
    HEAP32[$237 >> 2] = $10; //@line 3173
    sp = STACKTOP; //@line 3174
    return;
   }
   ___async_unwind = 0; //@line 3177
   HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 3178
   $234 = $ReallocAsyncCtx10 + 4 | 0; //@line 3179
   HEAP32[$234 >> 2] = $233; //@line 3180
   $235 = $ReallocAsyncCtx10 + 8 | 0; //@line 3181
   HEAP32[$235 >> 2] = $227; //@line 3182
   $236 = $ReallocAsyncCtx10 + 12 | 0; //@line 3183
   HEAP32[$236 >> 2] = $26; //@line 3184
   $237 = $ReallocAsyncCtx10 + 16 | 0; //@line 3185
   HEAP32[$237 >> 2] = $10; //@line 3186
   sp = STACKTOP; //@line 3187
   return;
  } else {
   $223 = HEAP32[$219 + 4 >> 2] | 0; //@line 3192
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 3193
   FUNCTION_TABLE_vii[$223 & 7]($10, $$131 + 32 | 0); //@line 3194
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 3197
    $224 = $ReallocAsyncCtx7 + 4 | 0; //@line 3198
    HEAP32[$224 >> 2] = $218; //@line 3199
    $225 = $ReallocAsyncCtx7 + 8 | 0; //@line 3200
    HEAP32[$225 >> 2] = $10; //@line 3201
    $226 = $ReallocAsyncCtx7 + 12 | 0; //@line 3202
    HEAP32[$226 >> 2] = $26; //@line 3203
    sp = STACKTOP; //@line 3204
    return;
   }
   ___async_unwind = 0; //@line 3207
   HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 3208
   $224 = $ReallocAsyncCtx7 + 4 | 0; //@line 3209
   HEAP32[$224 >> 2] = $218; //@line 3210
   $225 = $ReallocAsyncCtx7 + 8 | 0; //@line 3211
   HEAP32[$225 >> 2] = $10; //@line 3212
   $226 = $ReallocAsyncCtx7 + 12 | 0; //@line 3213
   HEAP32[$226 >> 2] = $26; //@line 3214
   sp = STACKTOP; //@line 3215
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 3221
  $64 = $54 + 44 | 0; //@line 3222
  $65 = HEAP32[$64 >> 2] | 0; //@line 3223
  if (!$65) {
   HEAP32[$12 >> 2] = 0; //@line 3226
   $96 = HEAP32[$54 >> 2] | 0; //@line 3227
   HEAP32[$14 >> 2] = 0; //@line 3228
   HEAP32[$16 >> 2] = 192; //@line 3229
   HEAP32[$18 >> 2] = $96; //@line 3230
   HEAP32[$20 >> 2] = 764; //@line 3231
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 3232
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 3233
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 3236
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 3237
    HEAP32[$97 >> 2] = $$131; //@line 3238
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 3239
    HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 3240
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 3241
    HEAP32[$99 >> 2] = $52; //@line 3242
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 3243
    HEAP32[$100 >> 2] = $8; //@line 3244
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 3245
    HEAP32[$101 >> 2] = $26; //@line 3246
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 3247
    HEAP32[$102 >> 2] = $10; //@line 3248
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 3249
    HEAP32[$103 >> 2] = $12; //@line 3250
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 3251
    HEAP32[$104 >> 2] = $14; //@line 3252
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 3253
    HEAP32[$105 >> 2] = $16; //@line 3254
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 3255
    HEAP32[$106 >> 2] = $18; //@line 3256
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 3257
    HEAP32[$107 >> 2] = $20; //@line 3258
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 3259
    HEAP32[$108 >> 2] = $22; //@line 3260
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 3261
    HEAP32[$109 >> 2] = $24; //@line 3262
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 3263
    HEAP32[$110 >> 2] = $28; //@line 3264
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 3265
    HEAP32[$111 >> 2] = $30; //@line 3266
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 3267
    HEAP32[$112 >> 2] = $32; //@line 3268
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 3269
    HEAP32[$113 >> 2] = $34; //@line 3270
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 3271
    HEAP32[$114 >> 2] = $36; //@line 3272
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 3273
    HEAP32[$115 >> 2] = $38; //@line 3274
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 3275
    HEAP32[$116 >> 2] = $40; //@line 3276
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 3277
    HEAP32[$117 >> 2] = $42; //@line 3278
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 3279
    HEAP32[$118 >> 2] = $44; //@line 3280
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 3281
    HEAP32[$119 >> 2] = $46; //@line 3282
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 3283
    HEAP32[$120 >> 2] = $48; //@line 3284
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 3285
    HEAP32[$121 >> 2] = $50; //@line 3286
    sp = STACKTOP; //@line 3287
    return;
   }
   ___async_unwind = 0; //@line 3290
   HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 3291
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 3292
   HEAP32[$97 >> 2] = $$131; //@line 3293
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 3294
   HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 3295
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 3296
   HEAP32[$99 >> 2] = $52; //@line 3297
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 3298
   HEAP32[$100 >> 2] = $8; //@line 3299
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 3300
   HEAP32[$101 >> 2] = $26; //@line 3301
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 3302
   HEAP32[$102 >> 2] = $10; //@line 3303
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 3304
   HEAP32[$103 >> 2] = $12; //@line 3305
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 3306
   HEAP32[$104 >> 2] = $14; //@line 3307
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 3308
   HEAP32[$105 >> 2] = $16; //@line 3309
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 3310
   HEAP32[$106 >> 2] = $18; //@line 3311
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 3312
   HEAP32[$107 >> 2] = $20; //@line 3313
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 3314
   HEAP32[$108 >> 2] = $22; //@line 3315
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 3316
   HEAP32[$109 >> 2] = $24; //@line 3317
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 3318
   HEAP32[$110 >> 2] = $28; //@line 3319
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 3320
   HEAP32[$111 >> 2] = $30; //@line 3321
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 3322
   HEAP32[$112 >> 2] = $32; //@line 3323
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 3324
   HEAP32[$113 >> 2] = $34; //@line 3325
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 3326
   HEAP32[$114 >> 2] = $36; //@line 3327
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 3328
   HEAP32[$115 >> 2] = $38; //@line 3329
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 3330
   HEAP32[$116 >> 2] = $40; //@line 3331
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 3332
   HEAP32[$117 >> 2] = $42; //@line 3333
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 3334
   HEAP32[$118 >> 2] = $44; //@line 3335
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 3336
   HEAP32[$119 >> 2] = $46; //@line 3337
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 3338
   HEAP32[$120 >> 2] = $48; //@line 3339
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 3340
   HEAP32[$121 >> 2] = $50; //@line 3341
   sp = STACKTOP; //@line 3342
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 3347
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 3348
   FUNCTION_TABLE_vii[$69 & 7]($8, $54 + 32 | 0); //@line 3349
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 3352
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 3353
    HEAP32[$70 >> 2] = $$131; //@line 3354
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 3355
    HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 3356
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 3357
    HEAP32[$72 >> 2] = $52; //@line 3358
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 3359
    HEAP32[$73 >> 2] = $8; //@line 3360
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 3361
    HEAP32[$74 >> 2] = $10; //@line 3362
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 3363
    HEAP32[$75 >> 2] = $12; //@line 3364
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 3365
    HEAP32[$76 >> 2] = $14; //@line 3366
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 3367
    HEAP32[$77 >> 2] = $16; //@line 3368
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 3369
    HEAP32[$78 >> 2] = $18; //@line 3370
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 3371
    HEAP32[$79 >> 2] = $20; //@line 3372
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 3373
    HEAP32[$80 >> 2] = $22; //@line 3374
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 3375
    HEAP32[$81 >> 2] = $24; //@line 3376
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 3377
    HEAP32[$82 >> 2] = $26; //@line 3378
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 3379
    HEAP32[$83 >> 2] = $28; //@line 3380
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 3381
    HEAP32[$84 >> 2] = $30; //@line 3382
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 3383
    HEAP32[$85 >> 2] = $64; //@line 3384
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 3385
    HEAP32[$86 >> 2] = $32; //@line 3386
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 3387
    HEAP32[$87 >> 2] = $34; //@line 3388
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 3389
    HEAP32[$88 >> 2] = $36; //@line 3390
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 3391
    HEAP32[$89 >> 2] = $38; //@line 3392
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 3393
    HEAP32[$90 >> 2] = $40; //@line 3394
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 3395
    HEAP32[$91 >> 2] = $42; //@line 3396
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 3397
    HEAP32[$92 >> 2] = $44; //@line 3398
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 3399
    HEAP32[$93 >> 2] = $46; //@line 3400
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 3401
    HEAP32[$94 >> 2] = $48; //@line 3402
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 3403
    HEAP32[$95 >> 2] = $50; //@line 3404
    sp = STACKTOP; //@line 3405
    return;
   }
   ___async_unwind = 0; //@line 3408
   HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 3409
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 3410
   HEAP32[$70 >> 2] = $$131; //@line 3411
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 3412
   HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 3413
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 3414
   HEAP32[$72 >> 2] = $52; //@line 3415
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 3416
   HEAP32[$73 >> 2] = $8; //@line 3417
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 3418
   HEAP32[$74 >> 2] = $10; //@line 3419
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 3420
   HEAP32[$75 >> 2] = $12; //@line 3421
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 3422
   HEAP32[$76 >> 2] = $14; //@line 3423
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 3424
   HEAP32[$77 >> 2] = $16; //@line 3425
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 3426
   HEAP32[$78 >> 2] = $18; //@line 3427
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 3428
   HEAP32[$79 >> 2] = $20; //@line 3429
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 3430
   HEAP32[$80 >> 2] = $22; //@line 3431
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 3432
   HEAP32[$81 >> 2] = $24; //@line 3433
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 3434
   HEAP32[$82 >> 2] = $26; //@line 3435
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 3436
   HEAP32[$83 >> 2] = $28; //@line 3437
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 3438
   HEAP32[$84 >> 2] = $30; //@line 3439
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 3440
   HEAP32[$85 >> 2] = $64; //@line 3441
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 3442
   HEAP32[$86 >> 2] = $32; //@line 3443
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 3444
   HEAP32[$87 >> 2] = $34; //@line 3445
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 3446
   HEAP32[$88 >> 2] = $36; //@line 3447
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 3448
   HEAP32[$89 >> 2] = $38; //@line 3449
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 3450
   HEAP32[$90 >> 2] = $40; //@line 3451
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 3452
   HEAP32[$91 >> 2] = $42; //@line 3453
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 3454
   HEAP32[$92 >> 2] = $44; //@line 3455
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 3456
   HEAP32[$93 >> 2] = $46; //@line 3457
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 3458
   HEAP32[$94 >> 2] = $48; //@line 3459
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 3460
   HEAP32[$95 >> 2] = $50; //@line 3461
   sp = STACKTOP; //@line 3462
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$152 >> 2] = 0; //@line 3467
  $157 = $151 + 44 | 0; //@line 3468
  $158 = HEAP32[$157 >> 2] | 0; //@line 3469
  if (!$158) {
   HEAP32[$32 >> 2] = 0; //@line 3472
   $189 = HEAP32[$151 >> 2] | 0; //@line 3473
   HEAP32[$34 >> 2] = 0; //@line 3474
   HEAP32[$36 >> 2] = 197; //@line 3475
   HEAP32[$38 >> 2] = $189; //@line 3476
   HEAP32[$40 >> 2] = 764; //@line 3477
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 3478
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 3479
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 3482
    $190 = $ReallocAsyncCtx11 + 4 | 0; //@line 3483
    HEAP32[$190 >> 2] = $$03071$reg2mem$0; //@line 3484
    $191 = $ReallocAsyncCtx11 + 8 | 0; //@line 3485
    HEAP32[$191 >> 2] = $$02972$reg2mem$0; //@line 3486
    $192 = $ReallocAsyncCtx11 + 12 | 0; //@line 3487
    HEAP32[$192 >> 2] = $$reg2mem$0; //@line 3488
    $193 = $ReallocAsyncCtx11 + 16 | 0; //@line 3489
    HEAP32[$193 >> 2] = $8; //@line 3490
    $194 = $ReallocAsyncCtx11 + 20 | 0; //@line 3491
    HEAP32[$194 >> 2] = $26; //@line 3492
    $195 = $ReallocAsyncCtx11 + 24 | 0; //@line 3493
    HEAP32[$195 >> 2] = $10; //@line 3494
    $196 = $ReallocAsyncCtx11 + 28 | 0; //@line 3495
    HEAP32[$196 >> 2] = $12; //@line 3496
    $197 = $ReallocAsyncCtx11 + 32 | 0; //@line 3497
    HEAP32[$197 >> 2] = $14; //@line 3498
    $198 = $ReallocAsyncCtx11 + 36 | 0; //@line 3499
    HEAP32[$198 >> 2] = $16; //@line 3500
    $199 = $ReallocAsyncCtx11 + 40 | 0; //@line 3501
    HEAP32[$199 >> 2] = $18; //@line 3502
    $200 = $ReallocAsyncCtx11 + 44 | 0; //@line 3503
    HEAP32[$200 >> 2] = $20; //@line 3504
    $201 = $ReallocAsyncCtx11 + 48 | 0; //@line 3505
    HEAP32[$201 >> 2] = $22; //@line 3506
    $202 = $ReallocAsyncCtx11 + 52 | 0; //@line 3507
    HEAP32[$202 >> 2] = $24; //@line 3508
    $203 = $ReallocAsyncCtx11 + 56 | 0; //@line 3509
    HEAP32[$203 >> 2] = $28; //@line 3510
    $204 = $ReallocAsyncCtx11 + 60 | 0; //@line 3511
    HEAP32[$204 >> 2] = $30; //@line 3512
    $205 = $ReallocAsyncCtx11 + 64 | 0; //@line 3513
    HEAP32[$205 >> 2] = $32; //@line 3514
    $206 = $ReallocAsyncCtx11 + 68 | 0; //@line 3515
    HEAP32[$206 >> 2] = $34; //@line 3516
    $207 = $ReallocAsyncCtx11 + 72 | 0; //@line 3517
    HEAP32[$207 >> 2] = $36; //@line 3518
    $208 = $ReallocAsyncCtx11 + 76 | 0; //@line 3519
    HEAP32[$208 >> 2] = $38; //@line 3520
    $209 = $ReallocAsyncCtx11 + 80 | 0; //@line 3521
    HEAP32[$209 >> 2] = $40; //@line 3522
    $210 = $ReallocAsyncCtx11 + 84 | 0; //@line 3523
    HEAP32[$210 >> 2] = $42; //@line 3524
    $211 = $ReallocAsyncCtx11 + 88 | 0; //@line 3525
    HEAP32[$211 >> 2] = $44; //@line 3526
    $212 = $ReallocAsyncCtx11 + 92 | 0; //@line 3527
    HEAP32[$212 >> 2] = $46; //@line 3528
    $213 = $ReallocAsyncCtx11 + 96 | 0; //@line 3529
    HEAP32[$213 >> 2] = $48; //@line 3530
    $214 = $ReallocAsyncCtx11 + 100 | 0; //@line 3531
    HEAP32[$214 >> 2] = $50; //@line 3532
    sp = STACKTOP; //@line 3533
    return;
   }
   ___async_unwind = 0; //@line 3536
   HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 3537
   $190 = $ReallocAsyncCtx11 + 4 | 0; //@line 3538
   HEAP32[$190 >> 2] = $$03071$reg2mem$0; //@line 3539
   $191 = $ReallocAsyncCtx11 + 8 | 0; //@line 3540
   HEAP32[$191 >> 2] = $$02972$reg2mem$0; //@line 3541
   $192 = $ReallocAsyncCtx11 + 12 | 0; //@line 3542
   HEAP32[$192 >> 2] = $$reg2mem$0; //@line 3543
   $193 = $ReallocAsyncCtx11 + 16 | 0; //@line 3544
   HEAP32[$193 >> 2] = $8; //@line 3545
   $194 = $ReallocAsyncCtx11 + 20 | 0; //@line 3546
   HEAP32[$194 >> 2] = $26; //@line 3547
   $195 = $ReallocAsyncCtx11 + 24 | 0; //@line 3548
   HEAP32[$195 >> 2] = $10; //@line 3549
   $196 = $ReallocAsyncCtx11 + 28 | 0; //@line 3550
   HEAP32[$196 >> 2] = $12; //@line 3551
   $197 = $ReallocAsyncCtx11 + 32 | 0; //@line 3552
   HEAP32[$197 >> 2] = $14; //@line 3553
   $198 = $ReallocAsyncCtx11 + 36 | 0; //@line 3554
   HEAP32[$198 >> 2] = $16; //@line 3555
   $199 = $ReallocAsyncCtx11 + 40 | 0; //@line 3556
   HEAP32[$199 >> 2] = $18; //@line 3557
   $200 = $ReallocAsyncCtx11 + 44 | 0; //@line 3558
   HEAP32[$200 >> 2] = $20; //@line 3559
   $201 = $ReallocAsyncCtx11 + 48 | 0; //@line 3560
   HEAP32[$201 >> 2] = $22; //@line 3561
   $202 = $ReallocAsyncCtx11 + 52 | 0; //@line 3562
   HEAP32[$202 >> 2] = $24; //@line 3563
   $203 = $ReallocAsyncCtx11 + 56 | 0; //@line 3564
   HEAP32[$203 >> 2] = $28; //@line 3565
   $204 = $ReallocAsyncCtx11 + 60 | 0; //@line 3566
   HEAP32[$204 >> 2] = $30; //@line 3567
   $205 = $ReallocAsyncCtx11 + 64 | 0; //@line 3568
   HEAP32[$205 >> 2] = $32; //@line 3569
   $206 = $ReallocAsyncCtx11 + 68 | 0; //@line 3570
   HEAP32[$206 >> 2] = $34; //@line 3571
   $207 = $ReallocAsyncCtx11 + 72 | 0; //@line 3572
   HEAP32[$207 >> 2] = $36; //@line 3573
   $208 = $ReallocAsyncCtx11 + 76 | 0; //@line 3574
   HEAP32[$208 >> 2] = $38; //@line 3575
   $209 = $ReallocAsyncCtx11 + 80 | 0; //@line 3576
   HEAP32[$209 >> 2] = $40; //@line 3577
   $210 = $ReallocAsyncCtx11 + 84 | 0; //@line 3578
   HEAP32[$210 >> 2] = $42; //@line 3579
   $211 = $ReallocAsyncCtx11 + 88 | 0; //@line 3580
   HEAP32[$211 >> 2] = $44; //@line 3581
   $212 = $ReallocAsyncCtx11 + 92 | 0; //@line 3582
   HEAP32[$212 >> 2] = $46; //@line 3583
   $213 = $ReallocAsyncCtx11 + 96 | 0; //@line 3584
   HEAP32[$213 >> 2] = $48; //@line 3585
   $214 = $ReallocAsyncCtx11 + 100 | 0; //@line 3586
   HEAP32[$214 >> 2] = $50; //@line 3587
   sp = STACKTOP; //@line 3588
   return;
  } else {
   $162 = HEAP32[$158 + 4 >> 2] | 0; //@line 3593
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 3594
   FUNCTION_TABLE_vii[$162 & 7]($46, $151 + 32 | 0); //@line 3595
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 3598
    $163 = $ReallocAsyncCtx4 + 4 | 0; //@line 3599
    HEAP32[$163 >> 2] = $$03071$reg2mem$0; //@line 3600
    $164 = $ReallocAsyncCtx4 + 8 | 0; //@line 3601
    HEAP32[$164 >> 2] = $$02972$reg2mem$0; //@line 3602
    $165 = $ReallocAsyncCtx4 + 12 | 0; //@line 3603
    HEAP32[$165 >> 2] = $$reg2mem$0; //@line 3604
    $166 = $ReallocAsyncCtx4 + 16 | 0; //@line 3605
    HEAP32[$166 >> 2] = $8; //@line 3606
    $167 = $ReallocAsyncCtx4 + 20 | 0; //@line 3607
    HEAP32[$167 >> 2] = $10; //@line 3608
    $168 = $ReallocAsyncCtx4 + 24 | 0; //@line 3609
    HEAP32[$168 >> 2] = $12; //@line 3610
    $169 = $ReallocAsyncCtx4 + 28 | 0; //@line 3611
    HEAP32[$169 >> 2] = $14; //@line 3612
    $170 = $ReallocAsyncCtx4 + 32 | 0; //@line 3613
    HEAP32[$170 >> 2] = $16; //@line 3614
    $171 = $ReallocAsyncCtx4 + 36 | 0; //@line 3615
    HEAP32[$171 >> 2] = $18; //@line 3616
    $172 = $ReallocAsyncCtx4 + 40 | 0; //@line 3617
    HEAP32[$172 >> 2] = $20; //@line 3618
    $173 = $ReallocAsyncCtx4 + 44 | 0; //@line 3619
    HEAP32[$173 >> 2] = $22; //@line 3620
    $174 = $ReallocAsyncCtx4 + 48 | 0; //@line 3621
    HEAP32[$174 >> 2] = $24; //@line 3622
    $175 = $ReallocAsyncCtx4 + 52 | 0; //@line 3623
    HEAP32[$175 >> 2] = $26; //@line 3624
    $176 = $ReallocAsyncCtx4 + 56 | 0; //@line 3625
    HEAP32[$176 >> 2] = $157; //@line 3626
    $177 = $ReallocAsyncCtx4 + 60 | 0; //@line 3627
    HEAP32[$177 >> 2] = $28; //@line 3628
    $178 = $ReallocAsyncCtx4 + 64 | 0; //@line 3629
    HEAP32[$178 >> 2] = $30; //@line 3630
    $179 = $ReallocAsyncCtx4 + 68 | 0; //@line 3631
    HEAP32[$179 >> 2] = $32; //@line 3632
    $180 = $ReallocAsyncCtx4 + 72 | 0; //@line 3633
    HEAP32[$180 >> 2] = $34; //@line 3634
    $181 = $ReallocAsyncCtx4 + 76 | 0; //@line 3635
    HEAP32[$181 >> 2] = $36; //@line 3636
    $182 = $ReallocAsyncCtx4 + 80 | 0; //@line 3637
    HEAP32[$182 >> 2] = $38; //@line 3638
    $183 = $ReallocAsyncCtx4 + 84 | 0; //@line 3639
    HEAP32[$183 >> 2] = $40; //@line 3640
    $184 = $ReallocAsyncCtx4 + 88 | 0; //@line 3641
    HEAP32[$184 >> 2] = $42; //@line 3642
    $185 = $ReallocAsyncCtx4 + 92 | 0; //@line 3643
    HEAP32[$185 >> 2] = $44; //@line 3644
    $186 = $ReallocAsyncCtx4 + 96 | 0; //@line 3645
    HEAP32[$186 >> 2] = $46; //@line 3646
    $187 = $ReallocAsyncCtx4 + 100 | 0; //@line 3647
    HEAP32[$187 >> 2] = $48; //@line 3648
    $188 = $ReallocAsyncCtx4 + 104 | 0; //@line 3649
    HEAP32[$188 >> 2] = $50; //@line 3650
    sp = STACKTOP; //@line 3651
    return;
   }
   ___async_unwind = 0; //@line 3654
   HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 3655
   $163 = $ReallocAsyncCtx4 + 4 | 0; //@line 3656
   HEAP32[$163 >> 2] = $$03071$reg2mem$0; //@line 3657
   $164 = $ReallocAsyncCtx4 + 8 | 0; //@line 3658
   HEAP32[$164 >> 2] = $$02972$reg2mem$0; //@line 3659
   $165 = $ReallocAsyncCtx4 + 12 | 0; //@line 3660
   HEAP32[$165 >> 2] = $$reg2mem$0; //@line 3661
   $166 = $ReallocAsyncCtx4 + 16 | 0; //@line 3662
   HEAP32[$166 >> 2] = $8; //@line 3663
   $167 = $ReallocAsyncCtx4 + 20 | 0; //@line 3664
   HEAP32[$167 >> 2] = $10; //@line 3665
   $168 = $ReallocAsyncCtx4 + 24 | 0; //@line 3666
   HEAP32[$168 >> 2] = $12; //@line 3667
   $169 = $ReallocAsyncCtx4 + 28 | 0; //@line 3668
   HEAP32[$169 >> 2] = $14; //@line 3669
   $170 = $ReallocAsyncCtx4 + 32 | 0; //@line 3670
   HEAP32[$170 >> 2] = $16; //@line 3671
   $171 = $ReallocAsyncCtx4 + 36 | 0; //@line 3672
   HEAP32[$171 >> 2] = $18; //@line 3673
   $172 = $ReallocAsyncCtx4 + 40 | 0; //@line 3674
   HEAP32[$172 >> 2] = $20; //@line 3675
   $173 = $ReallocAsyncCtx4 + 44 | 0; //@line 3676
   HEAP32[$173 >> 2] = $22; //@line 3677
   $174 = $ReallocAsyncCtx4 + 48 | 0; //@line 3678
   HEAP32[$174 >> 2] = $24; //@line 3679
   $175 = $ReallocAsyncCtx4 + 52 | 0; //@line 3680
   HEAP32[$175 >> 2] = $26; //@line 3681
   $176 = $ReallocAsyncCtx4 + 56 | 0; //@line 3682
   HEAP32[$176 >> 2] = $157; //@line 3683
   $177 = $ReallocAsyncCtx4 + 60 | 0; //@line 3684
   HEAP32[$177 >> 2] = $28; //@line 3685
   $178 = $ReallocAsyncCtx4 + 64 | 0; //@line 3686
   HEAP32[$178 >> 2] = $30; //@line 3687
   $179 = $ReallocAsyncCtx4 + 68 | 0; //@line 3688
   HEAP32[$179 >> 2] = $32; //@line 3689
   $180 = $ReallocAsyncCtx4 + 72 | 0; //@line 3690
   HEAP32[$180 >> 2] = $34; //@line 3691
   $181 = $ReallocAsyncCtx4 + 76 | 0; //@line 3692
   HEAP32[$181 >> 2] = $36; //@line 3693
   $182 = $ReallocAsyncCtx4 + 80 | 0; //@line 3694
   HEAP32[$182 >> 2] = $38; //@line 3695
   $183 = $ReallocAsyncCtx4 + 84 | 0; //@line 3696
   HEAP32[$183 >> 2] = $40; //@line 3697
   $184 = $ReallocAsyncCtx4 + 88 | 0; //@line 3698
   HEAP32[$184 >> 2] = $42; //@line 3699
   $185 = $ReallocAsyncCtx4 + 92 | 0; //@line 3700
   HEAP32[$185 >> 2] = $44; //@line 3701
   $186 = $ReallocAsyncCtx4 + 96 | 0; //@line 3702
   HEAP32[$186 >> 2] = $46; //@line 3703
   $187 = $ReallocAsyncCtx4 + 100 | 0; //@line 3704
   HEAP32[$187 >> 2] = $48; //@line 3705
   $188 = $ReallocAsyncCtx4 + 104 | 0; //@line 3706
   HEAP32[$188 >> 2] = $50; //@line 3707
   sp = STACKTOP; //@line 3708
   return;
  }
 }
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_110($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $219 = 0, $22 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $229 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $6 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 4553
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4555
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4557
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4559
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4561
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4563
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4565
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4567
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4569
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4571
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4573
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4575
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4577
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 4579
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 4581
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 4583
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 4585
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 4587
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 4589
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 4591
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 4593
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 4595
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 4597
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 4599
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 4601
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 4603
 $186 = HEAP32[$50 >> 2] | 0; //@line 4604
 if (!$186) {
  $$02972$reg2mem$0 = $4; //@line 4607
  $$03071$reg2mem$0 = $2; //@line 4607
  $$reg2mem$0 = $6; //@line 4607
 } else {
  $189 = HEAP32[$186 + 8 >> 2] | 0; //@line 4610
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 4611
  FUNCTION_TABLE_vi[$189 & 511]($46); //@line 4612
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 200; //@line 4615
   $190 = $ReallocAsyncCtx6 + 4 | 0; //@line 4616
   HEAP32[$190 >> 2] = $2; //@line 4617
   $191 = $ReallocAsyncCtx6 + 8 | 0; //@line 4618
   HEAP32[$191 >> 2] = $4; //@line 4619
   $192 = $ReallocAsyncCtx6 + 12 | 0; //@line 4620
   HEAP32[$192 >> 2] = $6; //@line 4621
   $193 = $ReallocAsyncCtx6 + 16 | 0; //@line 4622
   HEAP32[$193 >> 2] = $8; //@line 4623
   $194 = $ReallocAsyncCtx6 + 20 | 0; //@line 4624
   HEAP32[$194 >> 2] = $10; //@line 4625
   $195 = $ReallocAsyncCtx6 + 24 | 0; //@line 4626
   HEAP32[$195 >> 2] = $12; //@line 4627
   $196 = $ReallocAsyncCtx6 + 28 | 0; //@line 4628
   HEAP32[$196 >> 2] = $14; //@line 4629
   $197 = $ReallocAsyncCtx6 + 32 | 0; //@line 4630
   HEAP32[$197 >> 2] = $16; //@line 4631
   $198 = $ReallocAsyncCtx6 + 36 | 0; //@line 4632
   HEAP32[$198 >> 2] = $18; //@line 4633
   $199 = $ReallocAsyncCtx6 + 40 | 0; //@line 4634
   HEAP32[$199 >> 2] = $20; //@line 4635
   $200 = $ReallocAsyncCtx6 + 44 | 0; //@line 4636
   HEAP32[$200 >> 2] = $22; //@line 4637
   $201 = $ReallocAsyncCtx6 + 48 | 0; //@line 4638
   HEAP32[$201 >> 2] = $24; //@line 4639
   $202 = $ReallocAsyncCtx6 + 52 | 0; //@line 4640
   HEAP32[$202 >> 2] = $26; //@line 4641
   $203 = $ReallocAsyncCtx6 + 56 | 0; //@line 4642
   HEAP32[$203 >> 2] = $28; //@line 4643
   $204 = $ReallocAsyncCtx6 + 60 | 0; //@line 4644
   HEAP32[$204 >> 2] = $30; //@line 4645
   $205 = $ReallocAsyncCtx6 + 64 | 0; //@line 4646
   HEAP32[$205 >> 2] = $32; //@line 4647
   $206 = $ReallocAsyncCtx6 + 68 | 0; //@line 4648
   HEAP32[$206 >> 2] = $34; //@line 4649
   $207 = $ReallocAsyncCtx6 + 72 | 0; //@line 4650
   HEAP32[$207 >> 2] = $36; //@line 4651
   $208 = $ReallocAsyncCtx6 + 76 | 0; //@line 4652
   HEAP32[$208 >> 2] = $38; //@line 4653
   $209 = $ReallocAsyncCtx6 + 80 | 0; //@line 4654
   HEAP32[$209 >> 2] = $40; //@line 4655
   $210 = $ReallocAsyncCtx6 + 84 | 0; //@line 4656
   HEAP32[$210 >> 2] = $42; //@line 4657
   $211 = $ReallocAsyncCtx6 + 88 | 0; //@line 4658
   HEAP32[$211 >> 2] = $44; //@line 4659
   $212 = $ReallocAsyncCtx6 + 92 | 0; //@line 4660
   HEAP32[$212 >> 2] = $46; //@line 4661
   $213 = $ReallocAsyncCtx6 + 96 | 0; //@line 4662
   HEAP32[$213 >> 2] = $48; //@line 4663
   $214 = $ReallocAsyncCtx6 + 100 | 0; //@line 4664
   HEAP32[$214 >> 2] = $50; //@line 4665
   sp = STACKTOP; //@line 4666
   return;
  }
  ___async_unwind = 0; //@line 4669
  HEAP32[$ReallocAsyncCtx6 >> 2] = 200; //@line 4670
  $190 = $ReallocAsyncCtx6 + 4 | 0; //@line 4671
  HEAP32[$190 >> 2] = $2; //@line 4672
  $191 = $ReallocAsyncCtx6 + 8 | 0; //@line 4673
  HEAP32[$191 >> 2] = $4; //@line 4674
  $192 = $ReallocAsyncCtx6 + 12 | 0; //@line 4675
  HEAP32[$192 >> 2] = $6; //@line 4676
  $193 = $ReallocAsyncCtx6 + 16 | 0; //@line 4677
  HEAP32[$193 >> 2] = $8; //@line 4678
  $194 = $ReallocAsyncCtx6 + 20 | 0; //@line 4679
  HEAP32[$194 >> 2] = $10; //@line 4680
  $195 = $ReallocAsyncCtx6 + 24 | 0; //@line 4681
  HEAP32[$195 >> 2] = $12; //@line 4682
  $196 = $ReallocAsyncCtx6 + 28 | 0; //@line 4683
  HEAP32[$196 >> 2] = $14; //@line 4684
  $197 = $ReallocAsyncCtx6 + 32 | 0; //@line 4685
  HEAP32[$197 >> 2] = $16; //@line 4686
  $198 = $ReallocAsyncCtx6 + 36 | 0; //@line 4687
  HEAP32[$198 >> 2] = $18; //@line 4688
  $199 = $ReallocAsyncCtx6 + 40 | 0; //@line 4689
  HEAP32[$199 >> 2] = $20; //@line 4690
  $200 = $ReallocAsyncCtx6 + 44 | 0; //@line 4691
  HEAP32[$200 >> 2] = $22; //@line 4692
  $201 = $ReallocAsyncCtx6 + 48 | 0; //@line 4693
  HEAP32[$201 >> 2] = $24; //@line 4694
  $202 = $ReallocAsyncCtx6 + 52 | 0; //@line 4695
  HEAP32[$202 >> 2] = $26; //@line 4696
  $203 = $ReallocAsyncCtx6 + 56 | 0; //@line 4697
  HEAP32[$203 >> 2] = $28; //@line 4698
  $204 = $ReallocAsyncCtx6 + 60 | 0; //@line 4699
  HEAP32[$204 >> 2] = $30; //@line 4700
  $205 = $ReallocAsyncCtx6 + 64 | 0; //@line 4701
  HEAP32[$205 >> 2] = $32; //@line 4702
  $206 = $ReallocAsyncCtx6 + 68 | 0; //@line 4703
  HEAP32[$206 >> 2] = $34; //@line 4704
  $207 = $ReallocAsyncCtx6 + 72 | 0; //@line 4705
  HEAP32[$207 >> 2] = $36; //@line 4706
  $208 = $ReallocAsyncCtx6 + 76 | 0; //@line 4707
  HEAP32[$208 >> 2] = $38; //@line 4708
  $209 = $ReallocAsyncCtx6 + 80 | 0; //@line 4709
  HEAP32[$209 >> 2] = $40; //@line 4710
  $210 = $ReallocAsyncCtx6 + 84 | 0; //@line 4711
  HEAP32[$210 >> 2] = $42; //@line 4712
  $211 = $ReallocAsyncCtx6 + 88 | 0; //@line 4713
  HEAP32[$211 >> 2] = $44; //@line 4714
  $212 = $ReallocAsyncCtx6 + 92 | 0; //@line 4715
  HEAP32[$212 >> 2] = $46; //@line 4716
  $213 = $ReallocAsyncCtx6 + 96 | 0; //@line 4717
  HEAP32[$213 >> 2] = $48; //@line 4718
  $214 = $ReallocAsyncCtx6 + 100 | 0; //@line 4719
  HEAP32[$214 >> 2] = $50; //@line 4720
  sp = STACKTOP; //@line 4721
  return;
 }
 L9 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 4728
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 4728
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 4730
   $$131 = $$03071$reg2mem$0; //@line 4730
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 4733
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 4736
    break L9;
   }
   $52 = 7840 + ($$02972$reg2mem$1 << 2) | 0; //@line 4739
   $54 = HEAP32[$52 >> 2] | 0; //@line 4740
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 4748
  $57 = HEAP32[$56 >> 2] | 0; //@line 4749
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 4753
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 4759
    break;
   }
  }
  $122 = HEAP32[$52 >> 2] | 0; //@line 4763
  $123 = $122 + 76 | 0; //@line 4764
  $124 = HEAP32[$123 >> 2] | 0; //@line 4765
  if (!$124) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 4768
   $$03071$reg2mem$0 = $$131; //@line 4768
   $$reg2mem$0 = $52; //@line 4768
   continue;
  }
  if ($124 >>> 0 <= 100) {
   label = 17; //@line 4773
   break;
  }
  HEAP32[$123 >> 2] = $124 + -100; //@line 4777
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 4778
  $$03071$reg2mem$0 = $$131; //@line 4778
  $$reg2mem$0 = $52; //@line 4778
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $218 = $$131 + 44 | 0; //@line 4785
  $219 = HEAP32[$218 >> 2] | 0; //@line 4786
  if (!$219) {
   $227 = $10 + 12 | 0; //@line 4789
   HEAP32[$227 >> 2] = 0; //@line 4790
   $229 = $26 + 4 | 0; //@line 4792
   HEAP32[$229 >> 2] = 0; //@line 4794
   HEAP32[$229 + 4 >> 2] = 0; //@line 4797
   HEAP32[$26 >> 2] = 3; //@line 4798
   $233 = $26 + 12 | 0; //@line 4799
   HEAP32[$233 >> 2] = 752; //@line 4800
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 4801
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $26) | 0; //@line 4802
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 4805
    $234 = $ReallocAsyncCtx10 + 4 | 0; //@line 4806
    HEAP32[$234 >> 2] = $233; //@line 4807
    $235 = $ReallocAsyncCtx10 + 8 | 0; //@line 4808
    HEAP32[$235 >> 2] = $227; //@line 4809
    $236 = $ReallocAsyncCtx10 + 12 | 0; //@line 4810
    HEAP32[$236 >> 2] = $26; //@line 4811
    $237 = $ReallocAsyncCtx10 + 16 | 0; //@line 4812
    HEAP32[$237 >> 2] = $10; //@line 4813
    sp = STACKTOP; //@line 4814
    return;
   }
   ___async_unwind = 0; //@line 4817
   HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 4818
   $234 = $ReallocAsyncCtx10 + 4 | 0; //@line 4819
   HEAP32[$234 >> 2] = $233; //@line 4820
   $235 = $ReallocAsyncCtx10 + 8 | 0; //@line 4821
   HEAP32[$235 >> 2] = $227; //@line 4822
   $236 = $ReallocAsyncCtx10 + 12 | 0; //@line 4823
   HEAP32[$236 >> 2] = $26; //@line 4824
   $237 = $ReallocAsyncCtx10 + 16 | 0; //@line 4825
   HEAP32[$237 >> 2] = $10; //@line 4826
   sp = STACKTOP; //@line 4827
   return;
  } else {
   $223 = HEAP32[$219 + 4 >> 2] | 0; //@line 4832
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 4833
   FUNCTION_TABLE_vii[$223 & 7]($10, $$131 + 32 | 0); //@line 4834
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 4837
    $224 = $ReallocAsyncCtx7 + 4 | 0; //@line 4838
    HEAP32[$224 >> 2] = $218; //@line 4839
    $225 = $ReallocAsyncCtx7 + 8 | 0; //@line 4840
    HEAP32[$225 >> 2] = $10; //@line 4841
    $226 = $ReallocAsyncCtx7 + 12 | 0; //@line 4842
    HEAP32[$226 >> 2] = $26; //@line 4843
    sp = STACKTOP; //@line 4844
    return;
   }
   ___async_unwind = 0; //@line 4847
   HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 4848
   $224 = $ReallocAsyncCtx7 + 4 | 0; //@line 4849
   HEAP32[$224 >> 2] = $218; //@line 4850
   $225 = $ReallocAsyncCtx7 + 8 | 0; //@line 4851
   HEAP32[$225 >> 2] = $10; //@line 4852
   $226 = $ReallocAsyncCtx7 + 12 | 0; //@line 4853
   HEAP32[$226 >> 2] = $26; //@line 4854
   sp = STACKTOP; //@line 4855
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 4861
  $64 = $54 + 44 | 0; //@line 4862
  $65 = HEAP32[$64 >> 2] | 0; //@line 4863
  if (!$65) {
   HEAP32[$12 >> 2] = 0; //@line 4866
   $96 = HEAP32[$54 >> 2] | 0; //@line 4867
   HEAP32[$14 >> 2] = 0; //@line 4868
   HEAP32[$16 >> 2] = 192; //@line 4869
   HEAP32[$18 >> 2] = $96; //@line 4870
   HEAP32[$20 >> 2] = 764; //@line 4871
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 4872
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 4873
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 4876
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 4877
    HEAP32[$97 >> 2] = $$131; //@line 4878
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 4879
    HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 4880
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 4881
    HEAP32[$99 >> 2] = $52; //@line 4882
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 4883
    HEAP32[$100 >> 2] = $8; //@line 4884
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 4885
    HEAP32[$101 >> 2] = $26; //@line 4886
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 4887
    HEAP32[$102 >> 2] = $10; //@line 4888
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 4889
    HEAP32[$103 >> 2] = $12; //@line 4890
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 4891
    HEAP32[$104 >> 2] = $14; //@line 4892
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 4893
    HEAP32[$105 >> 2] = $16; //@line 4894
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 4895
    HEAP32[$106 >> 2] = $18; //@line 4896
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 4897
    HEAP32[$107 >> 2] = $20; //@line 4898
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 4899
    HEAP32[$108 >> 2] = $22; //@line 4900
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 4901
    HEAP32[$109 >> 2] = $24; //@line 4902
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 4903
    HEAP32[$110 >> 2] = $28; //@line 4904
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 4905
    HEAP32[$111 >> 2] = $30; //@line 4906
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 4907
    HEAP32[$112 >> 2] = $32; //@line 4908
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 4909
    HEAP32[$113 >> 2] = $34; //@line 4910
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 4911
    HEAP32[$114 >> 2] = $36; //@line 4912
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 4913
    HEAP32[$115 >> 2] = $38; //@line 4914
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 4915
    HEAP32[$116 >> 2] = $40; //@line 4916
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 4917
    HEAP32[$117 >> 2] = $42; //@line 4918
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 4919
    HEAP32[$118 >> 2] = $44; //@line 4920
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 4921
    HEAP32[$119 >> 2] = $46; //@line 4922
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 4923
    HEAP32[$120 >> 2] = $48; //@line 4924
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 4925
    HEAP32[$121 >> 2] = $50; //@line 4926
    sp = STACKTOP; //@line 4927
    return;
   }
   ___async_unwind = 0; //@line 4930
   HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 4931
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 4932
   HEAP32[$97 >> 2] = $$131; //@line 4933
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 4934
   HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 4935
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 4936
   HEAP32[$99 >> 2] = $52; //@line 4937
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 4938
   HEAP32[$100 >> 2] = $8; //@line 4939
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 4940
   HEAP32[$101 >> 2] = $26; //@line 4941
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 4942
   HEAP32[$102 >> 2] = $10; //@line 4943
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 4944
   HEAP32[$103 >> 2] = $12; //@line 4945
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 4946
   HEAP32[$104 >> 2] = $14; //@line 4947
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 4948
   HEAP32[$105 >> 2] = $16; //@line 4949
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 4950
   HEAP32[$106 >> 2] = $18; //@line 4951
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 4952
   HEAP32[$107 >> 2] = $20; //@line 4953
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 4954
   HEAP32[$108 >> 2] = $22; //@line 4955
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 4956
   HEAP32[$109 >> 2] = $24; //@line 4957
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 4958
   HEAP32[$110 >> 2] = $28; //@line 4959
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 4960
   HEAP32[$111 >> 2] = $30; //@line 4961
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 4962
   HEAP32[$112 >> 2] = $32; //@line 4963
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 4964
   HEAP32[$113 >> 2] = $34; //@line 4965
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 4966
   HEAP32[$114 >> 2] = $36; //@line 4967
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 4968
   HEAP32[$115 >> 2] = $38; //@line 4969
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 4970
   HEAP32[$116 >> 2] = $40; //@line 4971
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 4972
   HEAP32[$117 >> 2] = $42; //@line 4973
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 4974
   HEAP32[$118 >> 2] = $44; //@line 4975
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 4976
   HEAP32[$119 >> 2] = $46; //@line 4977
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 4978
   HEAP32[$120 >> 2] = $48; //@line 4979
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 4980
   HEAP32[$121 >> 2] = $50; //@line 4981
   sp = STACKTOP; //@line 4982
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 4987
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 4988
   FUNCTION_TABLE_vii[$69 & 7]($8, $54 + 32 | 0); //@line 4989
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 4992
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 4993
    HEAP32[$70 >> 2] = $$131; //@line 4994
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 4995
    HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 4996
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 4997
    HEAP32[$72 >> 2] = $52; //@line 4998
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 4999
    HEAP32[$73 >> 2] = $8; //@line 5000
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 5001
    HEAP32[$74 >> 2] = $10; //@line 5002
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 5003
    HEAP32[$75 >> 2] = $12; //@line 5004
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 5005
    HEAP32[$76 >> 2] = $14; //@line 5006
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 5007
    HEAP32[$77 >> 2] = $16; //@line 5008
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 5009
    HEAP32[$78 >> 2] = $18; //@line 5010
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 5011
    HEAP32[$79 >> 2] = $20; //@line 5012
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 5013
    HEAP32[$80 >> 2] = $22; //@line 5014
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 5015
    HEAP32[$81 >> 2] = $24; //@line 5016
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 5017
    HEAP32[$82 >> 2] = $26; //@line 5018
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 5019
    HEAP32[$83 >> 2] = $28; //@line 5020
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 5021
    HEAP32[$84 >> 2] = $30; //@line 5022
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 5023
    HEAP32[$85 >> 2] = $64; //@line 5024
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 5025
    HEAP32[$86 >> 2] = $32; //@line 5026
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 5027
    HEAP32[$87 >> 2] = $34; //@line 5028
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 5029
    HEAP32[$88 >> 2] = $36; //@line 5030
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 5031
    HEAP32[$89 >> 2] = $38; //@line 5032
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 5033
    HEAP32[$90 >> 2] = $40; //@line 5034
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 5035
    HEAP32[$91 >> 2] = $42; //@line 5036
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 5037
    HEAP32[$92 >> 2] = $44; //@line 5038
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 5039
    HEAP32[$93 >> 2] = $46; //@line 5040
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 5041
    HEAP32[$94 >> 2] = $48; //@line 5042
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 5043
    HEAP32[$95 >> 2] = $50; //@line 5044
    sp = STACKTOP; //@line 5045
    return;
   }
   ___async_unwind = 0; //@line 5048
   HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 5049
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 5050
   HEAP32[$70 >> 2] = $$131; //@line 5051
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 5052
   HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 5053
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 5054
   HEAP32[$72 >> 2] = $52; //@line 5055
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 5056
   HEAP32[$73 >> 2] = $8; //@line 5057
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 5058
   HEAP32[$74 >> 2] = $10; //@line 5059
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 5060
   HEAP32[$75 >> 2] = $12; //@line 5061
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 5062
   HEAP32[$76 >> 2] = $14; //@line 5063
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 5064
   HEAP32[$77 >> 2] = $16; //@line 5065
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 5066
   HEAP32[$78 >> 2] = $18; //@line 5067
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 5068
   HEAP32[$79 >> 2] = $20; //@line 5069
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 5070
   HEAP32[$80 >> 2] = $22; //@line 5071
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 5072
   HEAP32[$81 >> 2] = $24; //@line 5073
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 5074
   HEAP32[$82 >> 2] = $26; //@line 5075
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 5076
   HEAP32[$83 >> 2] = $28; //@line 5077
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 5078
   HEAP32[$84 >> 2] = $30; //@line 5079
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 5080
   HEAP32[$85 >> 2] = $64; //@line 5081
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 5082
   HEAP32[$86 >> 2] = $32; //@line 5083
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 5084
   HEAP32[$87 >> 2] = $34; //@line 5085
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 5086
   HEAP32[$88 >> 2] = $36; //@line 5087
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 5088
   HEAP32[$89 >> 2] = $38; //@line 5089
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 5090
   HEAP32[$90 >> 2] = $40; //@line 5091
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 5092
   HEAP32[$91 >> 2] = $42; //@line 5093
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 5094
   HEAP32[$92 >> 2] = $44; //@line 5095
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 5096
   HEAP32[$93 >> 2] = $46; //@line 5097
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 5098
   HEAP32[$94 >> 2] = $48; //@line 5099
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 5100
   HEAP32[$95 >> 2] = $50; //@line 5101
   sp = STACKTOP; //@line 5102
   return;
  }
 } else if ((label | 0) == 17) {
  HEAP32[$123 >> 2] = 0; //@line 5107
  $128 = $122 + 44 | 0; //@line 5108
  $129 = HEAP32[$128 >> 2] | 0; //@line 5109
  if (!$129) {
   HEAP32[$32 >> 2] = 0; //@line 5112
   $160 = HEAP32[$122 >> 2] | 0; //@line 5113
   HEAP32[$34 >> 2] = 0; //@line 5114
   HEAP32[$36 >> 2] = 197; //@line 5115
   HEAP32[$38 >> 2] = $160; //@line 5116
   HEAP32[$40 >> 2] = 764; //@line 5117
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 5118
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 5119
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 5122
    $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 5123
    HEAP32[$161 >> 2] = $$131; //@line 5124
    $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 5125
    HEAP32[$162 >> 2] = $$02972$reg2mem$1; //@line 5126
    $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 5127
    HEAP32[$163 >> 2] = $52; //@line 5128
    $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 5129
    HEAP32[$164 >> 2] = $8; //@line 5130
    $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 5131
    HEAP32[$165 >> 2] = $26; //@line 5132
    $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 5133
    HEAP32[$166 >> 2] = $10; //@line 5134
    $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 5135
    HEAP32[$167 >> 2] = $12; //@line 5136
    $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 5137
    HEAP32[$168 >> 2] = $14; //@line 5138
    $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 5139
    HEAP32[$169 >> 2] = $16; //@line 5140
    $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 5141
    HEAP32[$170 >> 2] = $18; //@line 5142
    $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 5143
    HEAP32[$171 >> 2] = $20; //@line 5144
    $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 5145
    HEAP32[$172 >> 2] = $22; //@line 5146
    $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 5147
    HEAP32[$173 >> 2] = $24; //@line 5148
    $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 5149
    HEAP32[$174 >> 2] = $28; //@line 5150
    $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 5151
    HEAP32[$175 >> 2] = $30; //@line 5152
    $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 5153
    HEAP32[$176 >> 2] = $32; //@line 5154
    $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 5155
    HEAP32[$177 >> 2] = $34; //@line 5156
    $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 5157
    HEAP32[$178 >> 2] = $36; //@line 5158
    $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 5159
    HEAP32[$179 >> 2] = $38; //@line 5160
    $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 5161
    HEAP32[$180 >> 2] = $40; //@line 5162
    $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 5163
    HEAP32[$181 >> 2] = $42; //@line 5164
    $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 5165
    HEAP32[$182 >> 2] = $44; //@line 5166
    $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 5167
    HEAP32[$183 >> 2] = $46; //@line 5168
    $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 5169
    HEAP32[$184 >> 2] = $48; //@line 5170
    $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 5171
    HEAP32[$185 >> 2] = $50; //@line 5172
    sp = STACKTOP; //@line 5173
    return;
   }
   ___async_unwind = 0; //@line 5176
   HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 5177
   $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 5178
   HEAP32[$161 >> 2] = $$131; //@line 5179
   $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 5180
   HEAP32[$162 >> 2] = $$02972$reg2mem$1; //@line 5181
   $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 5182
   HEAP32[$163 >> 2] = $52; //@line 5183
   $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 5184
   HEAP32[$164 >> 2] = $8; //@line 5185
   $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 5186
   HEAP32[$165 >> 2] = $26; //@line 5187
   $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 5188
   HEAP32[$166 >> 2] = $10; //@line 5189
   $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 5190
   HEAP32[$167 >> 2] = $12; //@line 5191
   $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 5192
   HEAP32[$168 >> 2] = $14; //@line 5193
   $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 5194
   HEAP32[$169 >> 2] = $16; //@line 5195
   $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 5196
   HEAP32[$170 >> 2] = $18; //@line 5197
   $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 5198
   HEAP32[$171 >> 2] = $20; //@line 5199
   $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 5200
   HEAP32[$172 >> 2] = $22; //@line 5201
   $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 5202
   HEAP32[$173 >> 2] = $24; //@line 5203
   $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 5204
   HEAP32[$174 >> 2] = $28; //@line 5205
   $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 5206
   HEAP32[$175 >> 2] = $30; //@line 5207
   $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 5208
   HEAP32[$176 >> 2] = $32; //@line 5209
   $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 5210
   HEAP32[$177 >> 2] = $34; //@line 5211
   $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 5212
   HEAP32[$178 >> 2] = $36; //@line 5213
   $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 5214
   HEAP32[$179 >> 2] = $38; //@line 5215
   $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 5216
   HEAP32[$180 >> 2] = $40; //@line 5217
   $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 5218
   HEAP32[$181 >> 2] = $42; //@line 5219
   $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 5220
   HEAP32[$182 >> 2] = $44; //@line 5221
   $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 5222
   HEAP32[$183 >> 2] = $46; //@line 5223
   $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 5224
   HEAP32[$184 >> 2] = $48; //@line 5225
   $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 5226
   HEAP32[$185 >> 2] = $50; //@line 5227
   sp = STACKTOP; //@line 5228
   return;
  } else {
   $133 = HEAP32[$129 + 4 >> 2] | 0; //@line 5233
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 5234
   FUNCTION_TABLE_vii[$133 & 7]($46, $122 + 32 | 0); //@line 5235
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 5238
    $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 5239
    HEAP32[$134 >> 2] = $$131; //@line 5240
    $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 5241
    HEAP32[$135 >> 2] = $$02972$reg2mem$1; //@line 5242
    $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 5243
    HEAP32[$136 >> 2] = $52; //@line 5244
    $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 5245
    HEAP32[$137 >> 2] = $8; //@line 5246
    $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 5247
    HEAP32[$138 >> 2] = $10; //@line 5248
    $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 5249
    HEAP32[$139 >> 2] = $12; //@line 5250
    $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 5251
    HEAP32[$140 >> 2] = $14; //@line 5252
    $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 5253
    HEAP32[$141 >> 2] = $16; //@line 5254
    $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 5255
    HEAP32[$142 >> 2] = $18; //@line 5256
    $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 5257
    HEAP32[$143 >> 2] = $20; //@line 5258
    $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 5259
    HEAP32[$144 >> 2] = $22; //@line 5260
    $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 5261
    HEAP32[$145 >> 2] = $24; //@line 5262
    $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 5263
    HEAP32[$146 >> 2] = $26; //@line 5264
    $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 5265
    HEAP32[$147 >> 2] = $128; //@line 5266
    $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 5267
    HEAP32[$148 >> 2] = $28; //@line 5268
    $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 5269
    HEAP32[$149 >> 2] = $30; //@line 5270
    $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 5271
    HEAP32[$150 >> 2] = $32; //@line 5272
    $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 5273
    HEAP32[$151 >> 2] = $34; //@line 5274
    $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 5275
    HEAP32[$152 >> 2] = $36; //@line 5276
    $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 5277
    HEAP32[$153 >> 2] = $38; //@line 5278
    $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 5279
    HEAP32[$154 >> 2] = $40; //@line 5280
    $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 5281
    HEAP32[$155 >> 2] = $42; //@line 5282
    $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 5283
    HEAP32[$156 >> 2] = $44; //@line 5284
    $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 5285
    HEAP32[$157 >> 2] = $46; //@line 5286
    $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 5287
    HEAP32[$158 >> 2] = $48; //@line 5288
    $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 5289
    HEAP32[$159 >> 2] = $50; //@line 5290
    sp = STACKTOP; //@line 5291
    return;
   }
   ___async_unwind = 0; //@line 5294
   HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 5295
   $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 5296
   HEAP32[$134 >> 2] = $$131; //@line 5297
   $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 5298
   HEAP32[$135 >> 2] = $$02972$reg2mem$1; //@line 5299
   $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 5300
   HEAP32[$136 >> 2] = $52; //@line 5301
   $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 5302
   HEAP32[$137 >> 2] = $8; //@line 5303
   $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 5304
   HEAP32[$138 >> 2] = $10; //@line 5305
   $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 5306
   HEAP32[$139 >> 2] = $12; //@line 5307
   $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 5308
   HEAP32[$140 >> 2] = $14; //@line 5309
   $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 5310
   HEAP32[$141 >> 2] = $16; //@line 5311
   $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 5312
   HEAP32[$142 >> 2] = $18; //@line 5313
   $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 5314
   HEAP32[$143 >> 2] = $20; //@line 5315
   $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 5316
   HEAP32[$144 >> 2] = $22; //@line 5317
   $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 5318
   HEAP32[$145 >> 2] = $24; //@line 5319
   $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 5320
   HEAP32[$146 >> 2] = $26; //@line 5321
   $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 5322
   HEAP32[$147 >> 2] = $128; //@line 5323
   $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 5324
   HEAP32[$148 >> 2] = $28; //@line 5325
   $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 5326
   HEAP32[$149 >> 2] = $30; //@line 5327
   $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 5328
   HEAP32[$150 >> 2] = $32; //@line 5329
   $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 5330
   HEAP32[$151 >> 2] = $34; //@line 5331
   $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 5332
   HEAP32[$152 >> 2] = $36; //@line 5333
   $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 5334
   HEAP32[$153 >> 2] = $38; //@line 5335
   $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 5336
   HEAP32[$154 >> 2] = $40; //@line 5337
   $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 5338
   HEAP32[$155 >> 2] = $42; //@line 5339
   $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 5340
   HEAP32[$156 >> 2] = $44; //@line 5341
   $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 5342
   HEAP32[$157 >> 2] = $46; //@line 5343
   $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 5344
   HEAP32[$158 >> 2] = $48; //@line 5345
   $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 5346
   HEAP32[$159 >> 2] = $50; //@line 5347
   sp = STACKTOP; //@line 5348
   return;
  }
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$ = 0, $$092129$lcssa = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$391 = 0, $$5 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $119 = 0, $135 = 0, $136 = 0, $139 = 0, $14 = 0, $155 = 0, $159 = 0, $160 = 0, $167 = 0, $168 = 0, $171 = 0, $174 = 0, $181 = 0, $183 = 0, $184 = 0, $187 = 0, $200 = 0, $201 = 0, $203 = 0, $207 = 0, $208 = 0, $21 = 0, $22 = 0, $223 = 0, $226 = 0, $240 = 0, $241 = 0, $244 = 0, $256 = 0, $258 = 0, $261 = 0, $266 = 0, $269 = 0, $272 = 0, $275 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $290 = 0, $291 = 0, $30 = 0, $303 = 0, $306 = 0, $317 = 0, $318 = 0, $321 = 0, $330 = 0, $332 = 0, $335 = 0, $340 = 0, $343 = 0, $347 = 0, $349 = 0, $35 = 0, $357 = 0, $360 = 0, $362 = 0, $370 = 0, $373 = 0, $375 = 0, $383 = 0, $386 = 0, $388 = 0, $408 = 0, $409 = 0, $410 = 0, $50 = 0, $54 = 0, $6 = 0, $69 = 0, $7 = 0, $72 = 0, $73 = 0, $76 = 0, $8 = 0, $9 = 0, $92 = 0, $93 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx50 = 0, $AsyncCtx54 = 0, $AsyncCtx58 = 0, $AsyncCtx6 = 0, $AsyncCtx62 = 0, $AsyncCtx65 = 0, $AsyncCtx68 = 0, $AsyncCtx72 = 0, sp = 0;
 sp = STACKTOP; //@line 7690
 STACKTOP = STACKTOP + 176 | 0; //@line 7691
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 7691
 $$byval_copy = sp + 148 | 0; //@line 7692
 $6 = sp + 128 | 0; //@line 7693
 $7 = sp + 64 | 0; //@line 7694
 $8 = sp + 48 | 0; //@line 7695
 $9 = sp + 32 | 0; //@line 7696
 $10 = sp + 16 | 0; //@line 7697
 $11 = sp; //@line 7698
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$5 = -3003; //@line 7703
  STACKTOP = sp; //@line 7704
  return $$5 | 0; //@line 7704
 }
 $14 = _strlen($1) | 0; //@line 7706
 if (($14 | 0) > 255 | ($14 | 0) == 0) {
  $$5 = -3003; //@line 7711
  STACKTOP = sp; //@line 7712
  return $$5 | 0; //@line 7712
 }
 do {
  if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $5, $6) | 0)) {
   HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 7718
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 7718
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 7718
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 7718
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 7718
   __ZN13SocketAddressC2E10nsapi_addrt($7, $$byval_copy, 0); //@line 7719
   $21 = $2 + 12 | 0; //@line 7720
   $22 = HEAP32[$21 >> 2] | 0; //@line 7721
   do {
    if (!$22) {
     $AsyncCtx72 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7725
     _mbed_assert_internal(4029, 4034, 1677); //@line 7726
     if (___async) {
      HEAP32[$AsyncCtx72 >> 2] = 170; //@line 7729
      HEAP32[$AsyncCtx72 + 4 >> 2] = $21; //@line 7731
      HEAP32[$AsyncCtx72 + 8 >> 2] = $2; //@line 7733
      HEAP32[$AsyncCtx72 + 12 >> 2] = $7; //@line 7735
      HEAP32[$AsyncCtx72 + 16 >> 2] = $7; //@line 7737
      HEAP32[$AsyncCtx72 + 20 >> 2] = $6; //@line 7739
      sp = STACKTOP; //@line 7740
      STACKTOP = sp; //@line 7741
      return 0; //@line 7741
     } else {
      _emscripten_free_async_context($AsyncCtx72 | 0); //@line 7743
      $30 = HEAP32[$21 >> 2] | 0; //@line 7745
      break;
     }
    } else {
     $30 = $22; //@line 7749
    }
   } while (0);
   $29 = HEAP32[$30 >> 2] | 0; //@line 7752
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7753
   FUNCTION_TABLE_viii[$29 & 0]($2, 0, $7); //@line 7754
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 171; //@line 7757
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 7759
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 7761
    sp = STACKTOP; //@line 7762
    STACKTOP = sp; //@line 7763
    return 0; //@line 7763
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7765
    $$391 = 0; //@line 7766
    break;
   }
  } else {
   if (!(HEAP32[1960] | 0)) {
    $$092129$lcssa = 0; //@line 7773
   } else {
    if (!(HEAP32[1961] | 0)) {
     $$092129$lcssa = 1; //@line 7778
    } else {
     if (!(HEAP32[1962] | 0)) {
      $$092129$lcssa = 2; //@line 7783
     } else {
      if (!(HEAP32[1963] | 0)) {
       $$092129$lcssa = 3; //@line 7788
      } else {
       if (!(HEAP32[1964] | 0)) {
        $$092129$lcssa = 4; //@line 7793
       } else {
        $$391 = -3007; //@line 7795
        break;
       }
      }
     }
    }
   }
   $AsyncCtx58 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7802
   $35 = __ZnwjRKSt9nothrow_t(88, 9760) | 0; //@line 7803
   if (___async) {
    HEAP32[$AsyncCtx58 >> 2] = 172; //@line 7806
    HEAP32[$AsyncCtx58 + 4 >> 2] = $8; //@line 7808
    HEAP32[$AsyncCtx58 + 8 >> 2] = $10; //@line 7810
    HEAP32[$AsyncCtx58 + 12 >> 2] = $9; //@line 7812
    HEAP32[$AsyncCtx58 + 16 >> 2] = $11; //@line 7814
    HEAP32[$AsyncCtx58 + 20 >> 2] = $6; //@line 7816
    HEAP32[$AsyncCtx58 + 24 >> 2] = $$092129$lcssa; //@line 7818
    HEAP32[$AsyncCtx58 + 28 >> 2] = $0; //@line 7820
    HEAP32[$AsyncCtx58 + 32 >> 2] = $4; //@line 7822
    HEAP32[$AsyncCtx58 + 36 >> 2] = $3; //@line 7824
    HEAP32[$AsyncCtx58 + 40 >> 2] = $5; //@line 7826
    HEAP32[$AsyncCtx58 + 44 >> 2] = $2; //@line 7828
    HEAP32[$AsyncCtx58 + 48 >> 2] = $1; //@line 7830
    HEAP32[$AsyncCtx58 + 52 >> 2] = $14; //@line 7832
    sp = STACKTOP; //@line 7833
    STACKTOP = sp; //@line 7834
    return 0; //@line 7834
   }
   _emscripten_free_async_context($AsyncCtx58 | 0); //@line 7836
   if (!$35) {
    $$391 = -3007; //@line 7839
   } else {
    $50 = $35 + 16 | 0; //@line 7841
    HEAP32[$50 >> 2] = 0; //@line 7842
    HEAP32[$50 + 4 >> 2] = 0; //@line 7842
    HEAP32[$50 + 8 >> 2] = 0; //@line 7842
    HEAP32[$50 + 12 >> 2] = 0; //@line 7842
    HEAP32[$50 + 16 >> 2] = 0; //@line 7842
    HEAP32[$50 + 20 >> 2] = 0; //@line 7842
    HEAP32[$50 + 24 >> 2] = 0; //@line 7842
    HEAP32[$50 + 28 >> 2] = 0; //@line 7842
    $AsyncCtx62 = _emscripten_alloc_async_context(60, sp) | 0; //@line 7846
    $54 = __ZnajRKSt9nothrow_t(($14 | 0) < -1 ? -1 : $14 + 1 | 0, 9760) | 0; //@line 7847
    if (___async) {
     HEAP32[$AsyncCtx62 >> 2] = 173; //@line 7850
     HEAP32[$AsyncCtx62 + 4 >> 2] = $35; //@line 7852
     HEAP32[$AsyncCtx62 + 8 >> 2] = $8; //@line 7854
     HEAP32[$AsyncCtx62 + 12 >> 2] = $50; //@line 7856
     HEAP32[$AsyncCtx62 + 16 >> 2] = $10; //@line 7858
     HEAP32[$AsyncCtx62 + 20 >> 2] = $9; //@line 7860
     HEAP32[$AsyncCtx62 + 24 >> 2] = $11; //@line 7862
     HEAP32[$AsyncCtx62 + 28 >> 2] = $6; //@line 7864
     HEAP32[$AsyncCtx62 + 32 >> 2] = $$092129$lcssa; //@line 7866
     HEAP32[$AsyncCtx62 + 36 >> 2] = $0; //@line 7868
     HEAP32[$AsyncCtx62 + 40 >> 2] = $4; //@line 7870
     HEAP32[$AsyncCtx62 + 44 >> 2] = $3; //@line 7872
     HEAP32[$AsyncCtx62 + 48 >> 2] = $5; //@line 7874
     HEAP32[$AsyncCtx62 + 52 >> 2] = $2; //@line 7876
     HEAP32[$AsyncCtx62 + 56 >> 2] = $1; //@line 7878
     sp = STACKTOP; //@line 7879
     STACKTOP = sp; //@line 7880
     return 0; //@line 7880
    }
    _emscripten_free_async_context($AsyncCtx62 | 0); //@line 7882
    $69 = $35 + 12 | 0; //@line 7883
    HEAP32[$69 >> 2] = $54; //@line 7884
    _strcpy($54, $1) | 0; //@line 7885
    HEAP32[$35 + 4 >> 2] = -3012; //@line 7887
    if (($50 | 0) != ($2 | 0)) {
     $72 = $35 + 28 | 0; //@line 7890
     $73 = HEAP32[$72 >> 2] | 0; //@line 7891
     do {
      if ($73 | 0) {
       $76 = HEAP32[$73 + 8 >> 2] | 0; //@line 7896
       $AsyncCtx2 = _emscripten_alloc_async_context(64, sp) | 0; //@line 7897
       FUNCTION_TABLE_vi[$76 & 511]($50); //@line 7898
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 174; //@line 7901
        HEAP32[$AsyncCtx2 + 4 >> 2] = $35; //@line 7903
        HEAP32[$AsyncCtx2 + 8 >> 2] = $50; //@line 7905
        HEAP32[$AsyncCtx2 + 12 >> 2] = $10; //@line 7907
        HEAP32[$AsyncCtx2 + 16 >> 2] = $69; //@line 7909
        HEAP32[$AsyncCtx2 + 20 >> 2] = $11; //@line 7911
        HEAP32[$AsyncCtx2 + 24 >> 2] = $$092129$lcssa; //@line 7913
        HEAP32[$AsyncCtx2 + 28 >> 2] = $8; //@line 7915
        HEAP32[$AsyncCtx2 + 32 >> 2] = $0; //@line 7917
        HEAP32[$AsyncCtx2 + 36 >> 2] = $9; //@line 7919
        HEAP32[$AsyncCtx2 + 40 >> 2] = $4; //@line 7921
        HEAP32[$AsyncCtx2 + 44 >> 2] = $3; //@line 7923
        HEAP32[$AsyncCtx2 + 48 >> 2] = $5; //@line 7925
        HEAP32[$AsyncCtx2 + 52 >> 2] = $2; //@line 7927
        HEAP32[$AsyncCtx2 + 56 >> 2] = $6; //@line 7929
        HEAP32[$AsyncCtx2 + 60 >> 2] = $72; //@line 7931
        sp = STACKTOP; //@line 7932
        STACKTOP = sp; //@line 7933
        return 0; //@line 7933
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7935
        break;
       }
      }
     } while (0);
     $92 = $2 + 12 | 0; //@line 7940
     $93 = HEAP32[$92 >> 2] | 0; //@line 7941
     do {
      if (!$93) {
       $112 = 0; //@line 7945
      } else {
       $96 = HEAP32[$93 + 4 >> 2] | 0; //@line 7948
       $AsyncCtx6 = _emscripten_alloc_async_context(64, sp) | 0; //@line 7949
       FUNCTION_TABLE_vii[$96 & 7]($50, $2); //@line 7950
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 175; //@line 7953
        HEAP32[$AsyncCtx6 + 4 >> 2] = $8; //@line 7955
        HEAP32[$AsyncCtx6 + 8 >> 2] = $69; //@line 7957
        HEAP32[$AsyncCtx6 + 12 >> 2] = $35; //@line 7959
        HEAP32[$AsyncCtx6 + 16 >> 2] = $50; //@line 7961
        HEAP32[$AsyncCtx6 + 20 >> 2] = $$092129$lcssa; //@line 7963
        HEAP32[$AsyncCtx6 + 24 >> 2] = $0; //@line 7965
        HEAP32[$AsyncCtx6 + 28 >> 2] = $10; //@line 7967
        HEAP32[$AsyncCtx6 + 32 >> 2] = $9; //@line 7969
        HEAP32[$AsyncCtx6 + 36 >> 2] = $92; //@line 7971
        HEAP32[$AsyncCtx6 + 40 >> 2] = $4; //@line 7973
        HEAP32[$AsyncCtx6 + 44 >> 2] = $3; //@line 7975
        HEAP32[$AsyncCtx6 + 48 >> 2] = $5; //@line 7977
        HEAP32[$AsyncCtx6 + 52 >> 2] = $11; //@line 7979
        HEAP32[$AsyncCtx6 + 56 >> 2] = $6; //@line 7981
        HEAP32[$AsyncCtx6 + 60 >> 2] = $72; //@line 7983
        sp = STACKTOP; //@line 7984
        STACKTOP = sp; //@line 7985
        return 0; //@line 7985
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7987
        $112 = HEAP32[$92 >> 2] | 0; //@line 7989
        break;
       }
      }
     } while (0);
     HEAP32[$72 >> 2] = $112; //@line 7994
    }
    $113 = $35 + 32 | 0; //@line 7996
    if (($113 | 0) != ($4 | 0)) {
     $115 = $35 + 44 | 0; //@line 7999
     $116 = HEAP32[$115 >> 2] | 0; //@line 8000
     do {
      if ($116 | 0) {
       $119 = HEAP32[$116 + 8 >> 2] | 0; //@line 8005
       $AsyncCtx10 = _emscripten_alloc_async_context(64, sp) | 0; //@line 8006
       FUNCTION_TABLE_vi[$119 & 511]($113); //@line 8007
       if (___async) {
        HEAP32[$AsyncCtx10 >> 2] = 176; //@line 8010
        HEAP32[$AsyncCtx10 + 4 >> 2] = $8; //@line 8012
        HEAP32[$AsyncCtx10 + 8 >> 2] = $69; //@line 8014
        HEAP32[$AsyncCtx10 + 12 >> 2] = $35; //@line 8016
        HEAP32[$AsyncCtx10 + 16 >> 2] = $50; //@line 8018
        HEAP32[$AsyncCtx10 + 20 >> 2] = $$092129$lcssa; //@line 8020
        HEAP32[$AsyncCtx10 + 24 >> 2] = $113; //@line 8022
        HEAP32[$AsyncCtx10 + 28 >> 2] = $0; //@line 8024
        HEAP32[$AsyncCtx10 + 32 >> 2] = $10; //@line 8026
        HEAP32[$AsyncCtx10 + 36 >> 2] = $9; //@line 8028
        HEAP32[$AsyncCtx10 + 40 >> 2] = $4; //@line 8030
        HEAP32[$AsyncCtx10 + 44 >> 2] = $3; //@line 8032
        HEAP32[$AsyncCtx10 + 48 >> 2] = $5; //@line 8034
        HEAP32[$AsyncCtx10 + 52 >> 2] = $115; //@line 8036
        HEAP32[$AsyncCtx10 + 56 >> 2] = $11; //@line 8038
        HEAP32[$AsyncCtx10 + 60 >> 2] = $6; //@line 8040
        sp = STACKTOP; //@line 8041
        STACKTOP = sp; //@line 8042
        return 0; //@line 8042
       } else {
        _emscripten_free_async_context($AsyncCtx10 | 0); //@line 8044
        break;
       }
      }
     } while (0);
     $135 = $4 + 12 | 0; //@line 8049
     $136 = HEAP32[$135 >> 2] | 0; //@line 8050
     do {
      if (!$136) {
       $155 = 0; //@line 8054
      } else {
       $139 = HEAP32[$136 + 4 >> 2] | 0; //@line 8057
       $AsyncCtx14 = _emscripten_alloc_async_context(64, sp) | 0; //@line 8058
       FUNCTION_TABLE_vii[$139 & 7]($113, $4); //@line 8059
       if (___async) {
        HEAP32[$AsyncCtx14 >> 2] = 177; //@line 8062
        HEAP32[$AsyncCtx14 + 4 >> 2] = $8; //@line 8064
        HEAP32[$AsyncCtx14 + 8 >> 2] = $69; //@line 8066
        HEAP32[$AsyncCtx14 + 12 >> 2] = $35; //@line 8068
        HEAP32[$AsyncCtx14 + 16 >> 2] = $50; //@line 8070
        HEAP32[$AsyncCtx14 + 20 >> 2] = $$092129$lcssa; //@line 8072
        HEAP32[$AsyncCtx14 + 24 >> 2] = $113; //@line 8074
        HEAP32[$AsyncCtx14 + 28 >> 2] = $0; //@line 8076
        HEAP32[$AsyncCtx14 + 32 >> 2] = $135; //@line 8078
        HEAP32[$AsyncCtx14 + 36 >> 2] = $10; //@line 8080
        HEAP32[$AsyncCtx14 + 40 >> 2] = $9; //@line 8082
        HEAP32[$AsyncCtx14 + 44 >> 2] = $3; //@line 8084
        HEAP32[$AsyncCtx14 + 48 >> 2] = $5; //@line 8086
        HEAP32[$AsyncCtx14 + 52 >> 2] = $115; //@line 8088
        HEAP32[$AsyncCtx14 + 56 >> 2] = $11; //@line 8090
        HEAP32[$AsyncCtx14 + 60 >> 2] = $6; //@line 8092
        sp = STACKTOP; //@line 8093
        STACKTOP = sp; //@line 8094
        return 0; //@line 8094
       } else {
        _emscripten_free_async_context($AsyncCtx14 | 0); //@line 8096
        $155 = HEAP32[$135 >> 2] | 0; //@line 8098
        break;
       }
      }
     } while (0);
     HEAP32[$115 >> 2] = $155; //@line 8103
    }
    HEAP32[$35 + 8 >> 2] = $0; //@line 8106
    HEAP32[$35 + 48 >> 2] = $3; //@line 8108
    HEAP32[$35 + 52 >> 2] = $5; //@line 8110
    $159 = $35 + 56 | 0; //@line 8111
    HEAP32[$159 >> 2] = 0; //@line 8112
    $160 = $35 + 60 | 0; //@line 8113
    HEAP32[$160 >> 2] = 0; //@line 8114
    HEAP32[$35 + 64 >> 2] = 0; //@line 8116
    HEAP8[$35 + 82 >> 0] = 0; //@line 8118
    HEAP8[$35 + 83 >> 0] = 1; //@line 8120
    HEAP8[$35 + 84 >> 0] = 3; //@line 8122
    HEAP16[$35 + 80 >> 1] = 0; //@line 8124
    HEAP32[$35 + 76 >> 2] = 0; //@line 8126
    $167 = $35 + 72 | 0; //@line 8127
    HEAP32[$167 >> 2] = 15500; //@line 8128
    $168 = HEAP32[187] | 0; //@line 8129
    HEAP32[187] = $168 + 1; //@line 8131
    $$ = ($168 | 0) > 32767 ? 1 : $168; //@line 8133
    HEAP32[$35 >> 2] = $$; //@line 8134
    $171 = HEAP32[1960] | 0; //@line 8135
    if (!$171) {
     $$1 = 0; //@line 8138
     $347 = 0; //@line 8138
    } else {
     $174 = HEAP32[$171 + 56 >> 2] | 0; //@line 8141
     if (!$174) {
      $$1 = 1; //@line 8144
      $347 = 0; //@line 8144
     } else {
      if ((HEAP32[$171 + 8 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$159 >> 2] = $174; //@line 8150
       HEAP32[$160 >> 2] = HEAP32[$171 + 60 >> 2]; //@line 8153
       $$1 = 1; //@line 8154
       $347 = $174; //@line 8154
      } else {
       $$1 = 1; //@line 8156
       $347 = 0; //@line 8156
      }
     }
    }
    $181 = HEAP32[1961] | 0; //@line 8160
    if (!$181) {
     $$1$1 = $$1; //@line 8163
     $360 = $347; //@line 8163
    } else {
     if (!$347) {
      $349 = HEAP32[$181 + 56 >> 2] | 0; //@line 8168
      if (!$349) {
       $408 = 0; //@line 8171
      } else {
       if ((HEAP32[$181 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$159 >> 2] = $349; //@line 8177
        HEAP32[$160 >> 2] = HEAP32[$181 + 60 >> 2]; //@line 8180
        $408 = $349; //@line 8181
       } else {
        $408 = 0; //@line 8183
       }
      }
     } else {
      $408 = $347; //@line 8187
     }
     $$1$1 = $$1 + 1 | 0; //@line 8190
     $360 = $408; //@line 8190
    }
    $357 = HEAP32[1962] | 0; //@line 8192
    if (!$357) {
     $$1$2 = $$1$1; //@line 8195
     $373 = $360; //@line 8195
    } else {
     if (!$360) {
      $362 = HEAP32[$357 + 56 >> 2] | 0; //@line 8200
      if (!$362) {
       $409 = 0; //@line 8203
      } else {
       if ((HEAP32[$357 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$159 >> 2] = $362; //@line 8209
        HEAP32[$160 >> 2] = HEAP32[$357 + 60 >> 2]; //@line 8212
        $409 = $362; //@line 8213
       } else {
        $409 = 0; //@line 8215
       }
      }
     } else {
      $409 = $360; //@line 8219
     }
     $$1$2 = $$1$1 + 1 | 0; //@line 8222
     $373 = $409; //@line 8222
    }
    $370 = HEAP32[1963] | 0; //@line 8224
    if (!$370) {
     $$1$3 = $$1$2; //@line 8227
     $386 = $373; //@line 8227
    } else {
     if (!$373) {
      $375 = HEAP32[$370 + 56 >> 2] | 0; //@line 8232
      if (!$375) {
       $410 = 0; //@line 8235
      } else {
       if ((HEAP32[$370 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$159 >> 2] = $375; //@line 8241
        HEAP32[$160 >> 2] = HEAP32[$370 + 60 >> 2]; //@line 8244
        $410 = $375; //@line 8245
       } else {
        $410 = 0; //@line 8247
       }
      }
     } else {
      $410 = $373; //@line 8251
     }
     $$1$3 = $$1$2 + 1 | 0; //@line 8254
     $386 = $410; //@line 8254
    }
    $383 = HEAP32[1964] | 0; //@line 8256
    if ($383 | 0) {
     if (!$386) {
      $388 = HEAP32[$383 + 56 >> 2] | 0; //@line 8262
      if ($388 | 0) {
       if ((HEAP32[$383 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$159 >> 2] = $388; //@line 8269
        HEAP32[$160 >> 2] = HEAP32[$383 + 60 >> 2]; //@line 8272
       }
      }
     }
     HEAP32[7840 + ($$092129$lcssa << 2) >> 2] = $35; //@line 8277
     HEAP32[$167 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 8280
     $$391 = $$; //@line 8281
     break;
    }
    HEAP32[7840 + ($$092129$lcssa << 2) >> 2] = $35; //@line 8285
    HEAP32[$167 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 8288
    if (!$$1$3) {
     $183 = $35 + 44 | 0; //@line 8291
     $184 = HEAP32[$183 >> 2] | 0; //@line 8292
     do {
      if (!$184) {
       $201 = 0; //@line 8296
      } else {
       $187 = HEAP32[$184 + 4 >> 2] | 0; //@line 8299
       $AsyncCtx18 = _emscripten_alloc_async_context(52, sp) | 0; //@line 8300
       FUNCTION_TABLE_vii[$187 & 7]($8, $113); //@line 8301
       if (___async) {
        HEAP32[$AsyncCtx18 >> 2] = 178; //@line 8304
        HEAP32[$AsyncCtx18 + 4 >> 2] = $8; //@line 8306
        HEAP32[$AsyncCtx18 + 8 >> 2] = $35; //@line 8308
        HEAP32[$AsyncCtx18 + 12 >> 2] = $69; //@line 8310
        HEAP32[$AsyncCtx18 + 16 >> 2] = $50; //@line 8312
        HEAP32[$AsyncCtx18 + 20 >> 2] = $113; //@line 8314
        HEAP32[$AsyncCtx18 + 24 >> 2] = $183; //@line 8316
        HEAP32[$AsyncCtx18 + 28 >> 2] = $35; //@line 8318
        HEAP32[$AsyncCtx18 + 32 >> 2] = $183; //@line 8320
        HEAP32[$AsyncCtx18 + 36 >> 2] = $10; //@line 8322
        HEAP32[$AsyncCtx18 + 40 >> 2] = $9; //@line 8324
        HEAP32[$AsyncCtx18 + 44 >> 2] = $11; //@line 8326
        HEAP32[$AsyncCtx18 + 48 >> 2] = $6; //@line 8328
        sp = STACKTOP; //@line 8329
        STACKTOP = sp; //@line 8330
        return 0; //@line 8330
       } else {
        _emscripten_free_async_context($AsyncCtx18 | 0); //@line 8332
        $201 = HEAP32[$183 >> 2] | 0; //@line 8334
        break;
       }
      }
     } while (0);
     $200 = $8 + 12 | 0; //@line 8339
     HEAP32[$200 >> 2] = $201; //@line 8340
     $203 = $9 + 4 | 0; //@line 8342
     HEAP32[$203 >> 2] = 0; //@line 8344
     HEAP32[$203 + 4 >> 2] = 0; //@line 8347
     HEAP32[$9 >> 2] = 3; //@line 8348
     $207 = $9 + 12 | 0; //@line 8349
     HEAP32[$207 >> 2] = 752; //@line 8350
     $AsyncCtx68 = _emscripten_alloc_async_context(60, sp) | 0; //@line 8351
     $208 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $9) | 0; //@line 8352
     if (___async) {
      HEAP32[$AsyncCtx68 >> 2] = 179; //@line 8355
      HEAP32[$AsyncCtx68 + 4 >> 2] = $8; //@line 8357
      HEAP32[$AsyncCtx68 + 8 >> 2] = $35; //@line 8359
      HEAP32[$AsyncCtx68 + 12 >> 2] = $69; //@line 8361
      HEAP32[$AsyncCtx68 + 16 >> 2] = $50; //@line 8363
      HEAP32[$AsyncCtx68 + 20 >> 2] = $113; //@line 8365
      HEAP32[$AsyncCtx68 + 24 >> 2] = $183; //@line 8367
      HEAP32[$AsyncCtx68 + 28 >> 2] = $6; //@line 8369
      HEAP32[$AsyncCtx68 + 32 >> 2] = $35; //@line 8371
      HEAP32[$AsyncCtx68 + 36 >> 2] = $183; //@line 8373
      HEAP32[$AsyncCtx68 + 40 >> 2] = $10; //@line 8375
      HEAP32[$AsyncCtx68 + 44 >> 2] = $200; //@line 8377
      HEAP32[$AsyncCtx68 + 48 >> 2] = $11; //@line 8379
      HEAP32[$AsyncCtx68 + 52 >> 2] = $9; //@line 8381
      HEAP32[$AsyncCtx68 + 56 >> 2] = $207; //@line 8383
      sp = STACKTOP; //@line 8384
      STACKTOP = sp; //@line 8385
      return 0; //@line 8385
     }
     _emscripten_free_async_context($AsyncCtx68 | 0); //@line 8387
     $223 = HEAP32[$207 >> 2] | 0; //@line 8388
     do {
      if ($223 | 0) {
       $226 = HEAP32[$223 + 8 >> 2] | 0; //@line 8393
       $AsyncCtx22 = _emscripten_alloc_async_context(56, sp) | 0; //@line 8394
       FUNCTION_TABLE_vi[$226 & 511]($9); //@line 8395
       if (___async) {
        HEAP32[$AsyncCtx22 >> 2] = 180; //@line 8398
        HEAP32[$AsyncCtx22 + 4 >> 2] = $8; //@line 8400
        HEAP32[$AsyncCtx22 + 8 >> 2] = $35; //@line 8402
        HEAP32[$AsyncCtx22 + 12 >> 2] = $69; //@line 8404
        HEAP32[$AsyncCtx22 + 16 >> 2] = $50; //@line 8406
        HEAP32[$AsyncCtx22 + 20 >> 2] = $113; //@line 8408
        HEAP32[$AsyncCtx22 + 24 >> 2] = $183; //@line 8410
        HEAP32[$AsyncCtx22 + 28 >> 2] = $35; //@line 8412
        HEAP32[$AsyncCtx22 + 32 >> 2] = $183; //@line 8414
        HEAP32[$AsyncCtx22 + 36 >> 2] = $10; //@line 8416
        HEAP32[$AsyncCtx22 + 40 >> 2] = $208; //@line 8418
        HEAP32[$AsyncCtx22 + 44 >> 2] = $200; //@line 8420
        HEAP32[$AsyncCtx22 + 48 >> 2] = $11; //@line 8422
        HEAP32[$AsyncCtx22 + 52 >> 2] = $6; //@line 8424
        sp = STACKTOP; //@line 8425
        STACKTOP = sp; //@line 8426
        return 0; //@line 8426
       } else {
        _emscripten_free_async_context($AsyncCtx22 | 0); //@line 8428
        break;
       }
      }
     } while (0);
     $240 = ($208 | 0) == 0; //@line 8433
     $241 = HEAP32[$200 >> 2] | 0; //@line 8434
     do {
      if ($241 | 0) {
       $244 = HEAP32[$241 + 8 >> 2] | 0; //@line 8439
       $AsyncCtx26 = _emscripten_alloc_async_context(48, sp) | 0; //@line 8440
       FUNCTION_TABLE_vi[$244 & 511]($8); //@line 8441
       if (___async) {
        HEAP32[$AsyncCtx26 >> 2] = 181; //@line 8444
        HEAP8[$AsyncCtx26 + 4 >> 0] = $240 & 1; //@line 8447
        HEAP32[$AsyncCtx26 + 8 >> 2] = $35; //@line 8449
        HEAP32[$AsyncCtx26 + 12 >> 2] = $69; //@line 8451
        HEAP32[$AsyncCtx26 + 16 >> 2] = $50; //@line 8453
        HEAP32[$AsyncCtx26 + 20 >> 2] = $113; //@line 8455
        HEAP32[$AsyncCtx26 + 24 >> 2] = $183; //@line 8457
        HEAP32[$AsyncCtx26 + 28 >> 2] = $35; //@line 8459
        HEAP32[$AsyncCtx26 + 32 >> 2] = $183; //@line 8461
        HEAP32[$AsyncCtx26 + 36 >> 2] = $10; //@line 8463
        HEAP32[$AsyncCtx26 + 40 >> 2] = $11; //@line 8465
        HEAP32[$AsyncCtx26 + 44 >> 2] = $6; //@line 8467
        sp = STACKTOP; //@line 8468
        STACKTOP = sp; //@line 8469
        return 0; //@line 8469
       } else {
        _emscripten_free_async_context($AsyncCtx26 | 0); //@line 8471
        break;
       }
      }
     } while (0);
     if (!$240) {
      $256 = HEAP32[$69 >> 2] | 0; //@line 8477
      if ($256 | 0) {
       __ZdlPv($256); //@line 8480
      }
      $258 = HEAP32[$183 >> 2] | 0; //@line 8482
      do {
       if ($258 | 0) {
        $261 = HEAP32[$258 + 8 >> 2] | 0; //@line 8487
        $AsyncCtx30 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8488
        FUNCTION_TABLE_vi[$261 & 511]($113); //@line 8489
        if (___async) {
         HEAP32[$AsyncCtx30 >> 2] = 182; //@line 8492
         HEAP32[$AsyncCtx30 + 4 >> 2] = $35; //@line 8494
         HEAP32[$AsyncCtx30 + 8 >> 2] = $50; //@line 8496
         HEAP32[$AsyncCtx30 + 12 >> 2] = $6; //@line 8498
         sp = STACKTOP; //@line 8499
         STACKTOP = sp; //@line 8500
         return 0; //@line 8500
        } else {
         _emscripten_free_async_context($AsyncCtx30 | 0); //@line 8502
         break;
        }
       }
      } while (0);
      $266 = HEAP32[$35 + 28 >> 2] | 0; //@line 8508
      do {
       if ($266 | 0) {
        $269 = HEAP32[$266 + 8 >> 2] | 0; //@line 8513
        $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8514
        FUNCTION_TABLE_vi[$269 & 511]($50); //@line 8515
        if (___async) {
         HEAP32[$AsyncCtx34 >> 2] = 183; //@line 8518
         HEAP32[$AsyncCtx34 + 4 >> 2] = $35; //@line 8520
         HEAP32[$AsyncCtx34 + 8 >> 2] = $6; //@line 8522
         sp = STACKTOP; //@line 8523
         STACKTOP = sp; //@line 8524
         return 0; //@line 8524
        } else {
         _emscripten_free_async_context($AsyncCtx34 | 0); //@line 8526
         break;
        }
       }
      } while (0);
      __ZdlPv($35); //@line 8531
      $$391 = -3007; //@line 8532
      break;
     }
     $272 = HEAP32[$183 >> 2] | 0; //@line 8535
     do {
      if (!$272) {
       $287 = 0; //@line 8539
      } else {
       $275 = HEAP32[$272 + 4 >> 2] | 0; //@line 8542
       $AsyncCtx38 = _emscripten_alloc_async_context(44, sp) | 0; //@line 8543
       FUNCTION_TABLE_vii[$275 & 7]($10, $113); //@line 8544
       if (___async) {
        HEAP32[$AsyncCtx38 >> 2] = 184; //@line 8547
        HEAP32[$AsyncCtx38 + 4 >> 2] = $35; //@line 8549
        HEAP32[$AsyncCtx38 + 8 >> 2] = $50; //@line 8551
        HEAP32[$AsyncCtx38 + 12 >> 2] = $35; //@line 8553
        HEAP32[$AsyncCtx38 + 16 >> 2] = $183; //@line 8555
        HEAP32[$AsyncCtx38 + 20 >> 2] = $10; //@line 8557
        HEAP32[$AsyncCtx38 + 24 >> 2] = $183; //@line 8559
        HEAP32[$AsyncCtx38 + 28 >> 2] = $113; //@line 8561
        HEAP32[$AsyncCtx38 + 32 >> 2] = $69; //@line 8563
        HEAP32[$AsyncCtx38 + 36 >> 2] = $11; //@line 8565
        HEAP32[$AsyncCtx38 + 40 >> 2] = $6; //@line 8567
        sp = STACKTOP; //@line 8568
        STACKTOP = sp; //@line 8569
        return 0; //@line 8569
       } else {
        _emscripten_free_async_context($AsyncCtx38 | 0); //@line 8571
        $287 = HEAP32[$183 >> 2] | 0; //@line 8573
        break;
       }
      }
     } while (0);
     $286 = $10 + 12 | 0; //@line 8578
     HEAP32[$286 >> 2] = $287; //@line 8579
     $288 = HEAP32[$35 >> 2] | 0; //@line 8580
     HEAP32[$11 + 8 >> 2] = 0; //@line 8582
     HEAP32[$11 >> 2] = 185; //@line 8583
     HEAP32[$11 + 4 >> 2] = $288; //@line 8585
     $290 = $11 + 12 | 0; //@line 8586
     HEAP32[$290 >> 2] = 764; //@line 8587
     $AsyncCtx65 = _emscripten_alloc_async_context(48, sp) | 0; //@line 8588
     $291 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 0, $11) | 0; //@line 8589
     if (___async) {
      HEAP32[$AsyncCtx65 >> 2] = 186; //@line 8592
      HEAP32[$AsyncCtx65 + 4 >> 2] = $290; //@line 8594
      HEAP32[$AsyncCtx65 + 8 >> 2] = $35; //@line 8596
      HEAP32[$AsyncCtx65 + 12 >> 2] = $50; //@line 8598
      HEAP32[$AsyncCtx65 + 16 >> 2] = $35; //@line 8600
      HEAP32[$AsyncCtx65 + 20 >> 2] = $6; //@line 8602
      HEAP32[$AsyncCtx65 + 24 >> 2] = $286; //@line 8604
      HEAP32[$AsyncCtx65 + 28 >> 2] = $10; //@line 8606
      HEAP32[$AsyncCtx65 + 32 >> 2] = $183; //@line 8608
      HEAP32[$AsyncCtx65 + 36 >> 2] = $113; //@line 8610
      HEAP32[$AsyncCtx65 + 40 >> 2] = $69; //@line 8612
      HEAP32[$AsyncCtx65 + 44 >> 2] = $11; //@line 8614
      sp = STACKTOP; //@line 8615
      STACKTOP = sp; //@line 8616
      return 0; //@line 8616
     }
     _emscripten_free_async_context($AsyncCtx65 | 0); //@line 8618
     $303 = HEAP32[$290 >> 2] | 0; //@line 8619
     do {
      if ($303 | 0) {
       $306 = HEAP32[$303 + 8 >> 2] | 0; //@line 8624
       $AsyncCtx42 = _emscripten_alloc_async_context(44, sp) | 0; //@line 8625
       FUNCTION_TABLE_vi[$306 & 511]($11); //@line 8626
       if (___async) {
        HEAP32[$AsyncCtx42 >> 2] = 187; //@line 8629
        HEAP32[$AsyncCtx42 + 4 >> 2] = $35; //@line 8631
        HEAP32[$AsyncCtx42 + 8 >> 2] = $50; //@line 8633
        HEAP32[$AsyncCtx42 + 12 >> 2] = $35; //@line 8635
        HEAP32[$AsyncCtx42 + 16 >> 2] = $291; //@line 8637
        HEAP32[$AsyncCtx42 + 20 >> 2] = $286; //@line 8639
        HEAP32[$AsyncCtx42 + 24 >> 2] = $10; //@line 8641
        HEAP32[$AsyncCtx42 + 28 >> 2] = $183; //@line 8643
        HEAP32[$AsyncCtx42 + 32 >> 2] = $113; //@line 8645
        HEAP32[$AsyncCtx42 + 36 >> 2] = $69; //@line 8647
        HEAP32[$AsyncCtx42 + 40 >> 2] = $6; //@line 8649
        sp = STACKTOP; //@line 8650
        STACKTOP = sp; //@line 8651
        return 0; //@line 8651
       } else {
        _emscripten_free_async_context($AsyncCtx42 | 0); //@line 8653
        break;
       }
      }
     } while (0);
     $317 = ($291 | 0) == 0; //@line 8658
     $318 = HEAP32[$286 >> 2] | 0; //@line 8659
     do {
      if ($318 | 0) {
       $321 = HEAP32[$318 + 8 >> 2] | 0; //@line 8664
       $AsyncCtx46 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8665
       FUNCTION_TABLE_vi[$321 & 511]($10); //@line 8666
       if (___async) {
        HEAP32[$AsyncCtx46 >> 2] = 188; //@line 8669
        HEAP8[$AsyncCtx46 + 4 >> 0] = $317 & 1; //@line 8672
        HEAP32[$AsyncCtx46 + 8 >> 2] = $35; //@line 8674
        HEAP32[$AsyncCtx46 + 12 >> 2] = $69; //@line 8676
        HEAP32[$AsyncCtx46 + 16 >> 2] = $183; //@line 8678
        HEAP32[$AsyncCtx46 + 20 >> 2] = $35; //@line 8680
        HEAP32[$AsyncCtx46 + 24 >> 2] = $113; //@line 8682
        HEAP32[$AsyncCtx46 + 28 >> 2] = $50; //@line 8684
        HEAP32[$AsyncCtx46 + 32 >> 2] = $6; //@line 8686
        sp = STACKTOP; //@line 8687
        STACKTOP = sp; //@line 8688
        return 0; //@line 8688
       } else {
        _emscripten_free_async_context($AsyncCtx46 | 0); //@line 8690
        break;
       }
      }
     } while (0);
     if ($317) {
      $$391 = HEAP32[$35 >> 2] | 0; //@line 8697
      break;
     }
     $330 = HEAP32[$69 >> 2] | 0; //@line 8700
     if ($330 | 0) {
      __ZdlPv($330); //@line 8703
     }
     $332 = HEAP32[$183 >> 2] | 0; //@line 8705
     do {
      if ($332 | 0) {
       $335 = HEAP32[$332 + 8 >> 2] | 0; //@line 8710
       $AsyncCtx50 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8711
       FUNCTION_TABLE_vi[$335 & 511]($113); //@line 8712
       if (___async) {
        HEAP32[$AsyncCtx50 >> 2] = 189; //@line 8715
        HEAP32[$AsyncCtx50 + 4 >> 2] = $35; //@line 8717
        HEAP32[$AsyncCtx50 + 8 >> 2] = $50; //@line 8719
        HEAP32[$AsyncCtx50 + 12 >> 2] = $6; //@line 8721
        sp = STACKTOP; //@line 8722
        STACKTOP = sp; //@line 8723
        return 0; //@line 8723
       } else {
        _emscripten_free_async_context($AsyncCtx50 | 0); //@line 8725
        break;
       }
      }
     } while (0);
     $340 = HEAP32[$35 + 28 >> 2] | 0; //@line 8731
     do {
      if ($340 | 0) {
       $343 = HEAP32[$340 + 8 >> 2] | 0; //@line 8736
       $AsyncCtx54 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8737
       FUNCTION_TABLE_vi[$343 & 511]($50); //@line 8738
       if (___async) {
        HEAP32[$AsyncCtx54 >> 2] = 190; //@line 8741
        HEAP32[$AsyncCtx54 + 4 >> 2] = $35; //@line 8743
        HEAP32[$AsyncCtx54 + 8 >> 2] = $6; //@line 8745
        sp = STACKTOP; //@line 8746
        STACKTOP = sp; //@line 8747
        return 0; //@line 8747
       } else {
        _emscripten_free_async_context($AsyncCtx54 | 0); //@line 8749
        break;
       }
      }
     } while (0);
     __ZdlPv($35); //@line 8754
     $$391 = -3007; //@line 8755
    } else {
     $$391 = $$; //@line 8757
    }
   }
  }
 } while (0);
 $$5 = $$391; //@line 8762
 STACKTOP = sp; //@line 8763
 return $$5 | 0; //@line 8763
}
function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$ph = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $13 = 0, $134 = 0, $14 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $227 = 0, $23 = 0, $235 = 0, $236 = 0, $239 = 0, $247 = 0, $254 = 0, $262 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $292 = 0.0, $3 = 0, $312 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $65 = 0, $90 = 0, $91 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5645
 STACKTOP = STACKTOP + 288 | 0; //@line 5646
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 5646
 $3 = sp + 8 | 0; //@line 5647
 $4 = sp + 17 | 0; //@line 5648
 $5 = sp; //@line 5649
 $6 = sp + 16 | 0; //@line 5650
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $314 = ___lockfile($0) | 0; //@line 5656
 } else {
  $314 = 0; //@line 5658
 }
 $11 = HEAP8[$1 >> 0] | 0; //@line 5660
 L4 : do {
  if (!($11 << 24 >> 24)) {
   $$3291 = 0; //@line 5664
  } else {
   $13 = $0 + 4 | 0; //@line 5666
   $14 = $0 + 100 | 0; //@line 5667
   $15 = $0 + 108 | 0; //@line 5668
   $16 = $0 + 8 | 0; //@line 5669
   $17 = $4 + 10 | 0; //@line 5670
   $18 = $4 + 33 | 0; //@line 5671
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0; //@line 5672
   $$0273408 = $1; //@line 5673
   $$0283407 = 0; //@line 5673
   $$0288404 = 0; //@line 5673
   $$0305402 = 0; //@line 5673
   $20 = $11; //@line 5673
   $315 = 0; //@line 5673
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($20 & 255) | 0)) {
      $50 = (HEAP8[$$0273408 >> 0] | 0) == 37; //@line 5681
      L10 : do {
       if ($50) {
        $51 = $$0273408 + 1 | 0; //@line 5684
        $52 = HEAP8[$51 >> 0] | 0; //@line 5685
        L12 : do {
         switch ($52 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $$0293 = 0; //@line 5694
           $$2275 = $$0273408 + 2 | 0; //@line 5694
           break;
          }
         default:
          {
           if (_isdigit($52 & 255) | 0) {
            if ((HEAP8[$$0273408 + 2 >> 0] | 0) == 36) {
             $$0293 = _arg_n_727($2, (HEAPU8[$51 >> 0] | 0) + -48 | 0) | 0; //@line 5711
             $$2275 = $$0273408 + 3 | 0; //@line 5711
             break L12;
            }
           }
           $90 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5726
           $91 = HEAP32[$90 >> 2] | 0; //@line 5727
           HEAP32[$2 >> 2] = $90 + 4; //@line 5729
           $$0293 = $91; //@line 5730
           $$2275 = $51; //@line 5730
          }
         }
        } while (0);
        if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
         $$0266$lcssa = 0; //@line 5739
         $$3$lcssa = $$2275; //@line 5739
        } else {
         $$0266397 = 0; //@line 5741
         $$3396 = $$2275; //@line 5741
         while (1) {
          $100 = ($$0266397 * 10 | 0) + -48 + (HEAPU8[$$3396 >> 0] | 0) | 0; //@line 5747
          $101 = $$3396 + 1 | 0; //@line 5748
          if (!(_isdigit(HEAPU8[$101 >> 0] | 0) | 0)) {
           $$0266$lcssa = $100; //@line 5754
           $$3$lcssa = $101; //@line 5754
           break;
          } else {
           $$0266397 = $100; //@line 5757
           $$3396 = $101; //@line 5757
          }
         }
        }
        $106 = HEAP8[$$3$lcssa >> 0] | 0; //@line 5761
        $108 = $$3$lcssa + 1 | 0; //@line 5763
        if ($106 << 24 >> 24 == 109) {
         $$0270 = ($$0293 | 0) != 0 & 1; //@line 5768
         $$1306 = 0; //@line 5768
         $$4 = $108; //@line 5768
         $112 = HEAP8[$108 >> 0] | 0; //@line 5768
         $318 = 0; //@line 5768
        } else {
         $$0270 = 0; //@line 5770
         $$1306 = $$0305402; //@line 5770
         $$4 = $$3$lcssa; //@line 5770
         $112 = $106; //@line 5770
         $318 = $315; //@line 5770
        }
        $111 = $$4 + 1 | 0; //@line 5772
        switch ($112 << 24 >> 24) {
        case 104:
         {
          $114 = (HEAP8[$111 >> 0] | 0) == 104; //@line 5776
          $$0268 = $114 ? -2 : -1; //@line 5780
          $$5 = $114 ? $$4 + 2 | 0 : $111; //@line 5780
          break;
         }
        case 108:
         {
          $117 = (HEAP8[$111 >> 0] | 0) == 108; //@line 5785
          $$0268 = $117 ? 3 : 1; //@line 5789
          $$5 = $117 ? $$4 + 2 | 0 : $111; //@line 5789
          break;
         }
        case 106:
         {
          $$0268 = 3; //@line 5793
          $$5 = $111; //@line 5793
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1; //@line 5797
          $$5 = $111; //@line 5797
          break;
         }
        case 76:
         {
          $$0268 = 2; //@line 5801
          $$5 = $111; //@line 5801
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0; //@line 5805
          $$5 = $$4; //@line 5805
          break;
         }
        default:
         {
          $$7312 = $$1306; //@line 5809
          $319 = $318; //@line 5809
          label = 136; //@line 5810
          break L6;
         }
        }
        $120 = HEAPU8[$$5 >> 0] | 0; //@line 5815
        $122 = ($120 & 47 | 0) == 3; //@line 5817
        $$ = $122 ? $120 | 32 : $120; //@line 5819
        $$$0268 = $122 ? 1 : $$0268; //@line 5820
        $trunc = $$ & 255; //@line 5821
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1; //@line 5826
          $$1284 = $$0283407; //@line 5826
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa; //@line 5830
          $$1284 = $$0283407; //@line 5830
          break;
         }
        case 110:
         {
          _store_int_728($$0293, $$$0268, $$0283407, (($$0283407 | 0) < 0) << 31 >> 31); //@line 5836
          $$11 = $$5; //@line 5837
          $$1289 = $$0288404; //@line 5837
          $$2285 = $$0283407; //@line 5837
          $$6311 = $$1306; //@line 5837
          $316 = $318; //@line 5837
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0); //@line 5842
          do {
           $127 = HEAP32[$13 >> 2] | 0; //@line 5844
           if ($127 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $127 + 1; //@line 5849
            $134 = HEAPU8[$127 >> 0] | 0; //@line 5852
           } else {
            $134 = ___shgetc($0) | 0; //@line 5855
           }
          } while ((_isspace($134) | 0) != 0);
          if (!(HEAP32[$14 >> 2] | 0)) {
           $146 = HEAP32[$13 >> 2] | 0; //@line 5867
          } else {
           $140 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 5870
           HEAP32[$13 >> 2] = $140; //@line 5871
           $146 = $140; //@line 5873
          }
          $$1267 = $$0266$lcssa; //@line 5880
          $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $146 - (HEAP32[$16 >> 2] | 0) | 0; //@line 5880
         }
        }
        ___shlim($0, $$1267); //@line 5883
        $148 = HEAP32[$13 >> 2] | 0; //@line 5884
        $149 = HEAP32[$14 >> 2] | 0; //@line 5885
        if ($148 >>> 0 < $149 >>> 0) {
         HEAP32[$13 >> 2] = $148 + 1; //@line 5889
         $155 = $149; //@line 5890
        } else {
         if ((___shgetc($0) | 0) < 0) {
          $$7312 = $$1306; //@line 5895
          $319 = $318; //@line 5895
          label = 136; //@line 5896
          break L6;
         }
         $155 = HEAP32[$14 >> 2] | 0; //@line 5900
        }
        if ($155 | 0) {
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 5906
        }
        L58 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $158 = ($$ | 0) == 99; //@line 5911
           L60 : do {
            if (($$ | 16 | 0) == 115) {
             _memset($4 | 0, -1, 257) | 0; //@line 5917
             HEAP8[$4 >> 0] = 0; //@line 5918
             if (($$ | 0) == 115) {
              HEAP8[$18 >> 0] = 0; //@line 5920
              HEAP8[$17 >> 0] = 0; //@line 5921
              HEAP8[$17 + 1 >> 0] = 0; //@line 5921
              HEAP8[$17 + 2 >> 0] = 0; //@line 5921
              HEAP8[$17 + 3 >> 0] = 0; //@line 5921
              HEAP8[$17 + 4 >> 0] = 0; //@line 5921
              $$9 = $$5; //@line 5922
             } else {
              $$9 = $$5; //@line 5924
             }
            } else {
             $162 = $$5 + 1 | 0; //@line 5927
             $164 = (HEAP8[$162 >> 0] | 0) == 94; //@line 5929
             $$0292 = $164 & 1; //@line 5931
             $$6 = $164 ? $$5 + 2 | 0 : $162; //@line 5932
             _memset($4 | 0, $$0292 | 0, 257) | 0; //@line 5933
             HEAP8[$4 >> 0] = 0; //@line 5934
             $166 = HEAP8[$$6 >> 0] | 0; //@line 5935
             switch ($166 << 24 >> 24) {
             case 45:
              {
               $$6$pn = $$6; //@line 5938
               $$sink330 = 46; //@line 5938
               label = 65; //@line 5939
               break;
              }
             case 93:
              {
               $$6$pn = $$6; //@line 5943
               $$sink330 = 94; //@line 5943
               label = 65; //@line 5944
               break;
              }
             default:
              {
               $$7 = $$6; //@line 5948
               $168 = $166; //@line 5948
              }
             }
             while (1) {
              if ((label | 0) == 65) {
               label = 0; //@line 5953
               HEAP8[$4 + $$sink330 >> 0] = $$0292 ^ 1; //@line 5957
               $$7$ph = $$6$pn + 1 | 0; //@line 5958
               $$7 = $$7$ph; //@line 5960
               $168 = HEAP8[$$7$ph >> 0] | 0; //@line 5960
              }
              L70 : do {
               switch ($168 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$1306; //@line 5965
                 $319 = $318; //@line 5965
                 label = 136; //@line 5966
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7; //@line 5971
                 break L60;
                 break;
                }
               case 45:
                {
                 $169 = $$7 + 1 | 0; //@line 5976
                 $170 = HEAP8[$169 >> 0] | 0; //@line 5977
                 switch ($170 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7; //@line 5980
                   $183 = 45; //@line 5980
                   break L70;
                   break;
                  }
                 default:
                  {}
                 }
                 $172 = HEAP8[$$7 + -1 >> 0] | 0; //@line 5988
                 if (($172 & 255) < ($170 & 255)) {
                  $176 = ($$0292 ^ 1) & 255; //@line 5993
                  $$0286399 = $172 & 255; //@line 5994
                  do {
                   $$0286399 = $$0286399 + 1 | 0; //@line 5996
                   HEAP8[$4 + $$0286399 >> 0] = $176; //@line 5998
                   $179 = HEAP8[$169 >> 0] | 0; //@line 5999
                  } while (($$0286399 | 0) < ($179 & 255 | 0));
                  $$8 = $169; //@line 6005
                  $183 = $179; //@line 6005
                 } else {
                  $$8 = $169; //@line 6010
                  $183 = $170; //@line 6010
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7; //@line 6015
                 $183 = $168; //@line 6015
                }
               }
              } while (0);
              $$6$pn = $$8; //@line 6021
              $$sink330 = ($183 & 255) + 1 | 0; //@line 6021
              label = 65; //@line 6022
             }
            }
           } while (0);
           $186 = $158 ? $$1267 + 1 | 0 : 31; //@line 6027
           $187 = ($$$0268 | 0) == 1; //@line 6028
           $188 = ($$0270 | 0) != 0; //@line 6029
           L78 : do {
            if ($187) {
             if ($188) {
              $190 = _malloc($186 << 2) | 0; //@line 6034
              if (!$190) {
               $$7312 = 0; //@line 6037
               $319 = 0; //@line 6037
               label = 136; //@line 6038
               break L6;
              } else {
               $321 = $190; //@line 6041
              }
             } else {
              $321 = $$0293; //@line 6044
             }
             HEAP32[$3 >> 2] = 0; //@line 6046
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0; //@line 6047
             $$0276$ph = $186; //@line 6048
             $$0278$ph = 0; //@line 6048
             $$ph = $321; //@line 6048
             L83 : while (1) {
              $192 = ($$ph | 0) == 0; //@line 6050
              $$0278$ph336 = $$0278$ph; //@line 6051
              while (1) {
               L87 : while (1) {
                $193 = HEAP32[$13 >> 2] | 0; //@line 6054
                if ($193 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $193 + 1; //@line 6059
                 $201 = HEAPU8[$193 >> 0] | 0; //@line 6062
                } else {
                 $201 = ___shgetc($0) | 0; //@line 6065
                }
                if (!(HEAP8[$4 + ($201 + 1) >> 0] | 0)) {
                 break L83;
                }
                HEAP8[$6 >> 0] = $201; //@line 6075
                switch (_mbrtowc($5, $6, 1, $3) | 0) {
                case -1:
                 {
                  $$7312 = 0; //@line 6079
                  $319 = $$ph; //@line 6079
                  label = 136; //@line 6080
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L87;
                 }
                }
               }
               if ($192) {
                $$1279 = $$0278$ph336; //@line 6093
               } else {
                HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2]; //@line 6098
                $$1279 = $$0278$ph336 + 1 | 0; //@line 6099
               }
               if ($188 & ($$1279 | 0) == ($$0276$ph | 0)) {
                break;
               } else {
                $$0278$ph336 = $$1279; //@line 6106
               }
              }
              $211 = $$0276$ph << 1 | 1; //@line 6110
              $213 = _realloc($$ph, $211 << 2) | 0; //@line 6112
              if (!$213) {
               $$7312 = 0; //@line 6115
               $319 = $$ph; //@line 6115
               label = 136; //@line 6116
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph; //@line 6119
               $$0276$ph = $211; //@line 6119
               $$ph = $213; //@line 6119
               $$0278$ph = $$0278$ph$phi; //@line 6119
              }
             }
             if (!(_mbsinit($3) | 0)) {
              $$7312 = 0; //@line 6125
              $319 = $$ph; //@line 6125
              label = 136; //@line 6126
              break L6;
             } else {
              $$4282 = $$0278$ph336; //@line 6129
              $$4309 = 0; //@line 6129
              $$5299 = $$ph; //@line 6129
              $322 = $$ph; //@line 6129
             }
            } else {
             if ($188) {
              $217 = _malloc($186) | 0; //@line 6133
              if (!$217) {
               $$7312 = 0; //@line 6136
               $319 = 0; //@line 6136
               label = 136; //@line 6137
               break L6;
              } else {
               $$1277$ph = $186; //@line 6140
               $$2280$ph = 0; //@line 6140
               $$2307$ph = $217; //@line 6140
              }
              while (1) {
               $$2280 = $$2280$ph; //@line 6143
               do {
                $219 = HEAP32[$13 >> 2] | 0; //@line 6145
                if ($219 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $219 + 1; //@line 6150
                 $227 = HEAPU8[$219 >> 0] | 0; //@line 6153
                } else {
                 $227 = ___shgetc($0) | 0; //@line 6156
                }
                if (!(HEAP8[$4 + ($227 + 1) >> 0] | 0)) {
                 $$4282 = $$2280; //@line 6163
                 $$4309 = $$2307$ph; //@line 6163
                 $$5299 = 0; //@line 6163
                 $322 = 0; //@line 6163
                 break L78;
                }
                HEAP8[$$2307$ph + $$2280 >> 0] = $227; //@line 6169
                $$2280 = $$2280 + 1 | 0; //@line 6167
               } while (($$2280 | 0) != ($$1277$ph | 0));
               $235 = $$1277$ph << 1 | 1; //@line 6178
               $236 = _realloc($$2307$ph, $235) | 0; //@line 6179
               if (!$236) {
                $$7312 = $$2307$ph; //@line 6182
                $319 = 0; //@line 6182
                label = 136; //@line 6183
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph; //@line 6186
                $$1277$ph = $235; //@line 6186
                $$2307$ph = $236; //@line 6186
                $$2280$ph = $$2280$ph$phi; //@line 6186
               }
              }
             }
             if (!$$0293) {
              while (1) {
               $254 = HEAP32[$13 >> 2] | 0; //@line 6193
               if ($254 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                HEAP32[$13 >> 2] = $254 + 1; //@line 6198
                $262 = HEAPU8[$254 >> 0] | 0; //@line 6201
               } else {
                $262 = ___shgetc($0) | 0; //@line 6204
               }
               if (!(HEAP8[$4 + ($262 + 1) >> 0] | 0)) {
                $$4282 = 0; //@line 6211
                $$4309 = 0; //@line 6211
                $$5299 = 0; //@line 6211
                $322 = 0; //@line 6211
                break L78;
               }
              }
             } else {
              $$3281 = 0; //@line 6216
             }
             while (1) {
              $239 = HEAP32[$13 >> 2] | 0; //@line 6219
              if ($239 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
               HEAP32[$13 >> 2] = $239 + 1; //@line 6224
               $247 = HEAPU8[$239 >> 0] | 0; //@line 6227
              } else {
               $247 = ___shgetc($0) | 0; //@line 6230
              }
              if (!(HEAP8[$4 + ($247 + 1) >> 0] | 0)) {
               $$4282 = $$3281; //@line 6237
               $$4309 = $$0293; //@line 6237
               $$5299 = 0; //@line 6237
               $322 = 0; //@line 6237
               break L78;
              }
              HEAP8[$$0293 + $$3281 >> 0] = $247; //@line 6243
              $$3281 = $$3281 + 1 | 0; //@line 6244
             }
            }
           } while (0);
           if (!(HEAP32[$14 >> 2] | 0)) {
            $274 = HEAP32[$13 >> 2] | 0; //@line 6252
           } else {
            $269 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6255
            HEAP32[$13 >> 2] = $269; //@line 6256
            $274 = $269; //@line 6258
           }
           $275 = $274 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0; //@line 6263
           if (!$275) {
            $$2 = $$0270; //@line 6266
            $$2290 = $$0288404; //@line 6266
            $$9314 = $$4309; //@line 6266
            $312 = $322; //@line 6266
            break L6;
           }
           if (!(($275 | 0) == ($$1267 | 0) | $158 ^ 1)) {
            $$2 = $$0270; //@line 6273
            $$2290 = $$0288404; //@line 6273
            $$9314 = $$4309; //@line 6273
            $312 = $322; //@line 6273
            break L6;
           }
           do {
            if ($188) {
             if ($187) {
              HEAP32[$$0293 >> 2] = $$5299; //@line 6279
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309; //@line 6282
              break;
             }
            }
           } while (0);
           if ($158) {
            $$10 = $$9; //@line 6288
            $$5310 = $$4309; //@line 6288
            $320 = $322; //@line 6288
           } else {
            if ($$5299 | 0) {
             HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0; //@line 6293
            }
            if (!$$4309) {
             $$10 = $$9; //@line 6297
             $$5310 = 0; //@line 6297
             $320 = $322; //@line 6297
             break L58;
            }
            HEAP8[$$4309 + $$4282 >> 0] = 0; //@line 6301
            $$10 = $$9; //@line 6302
            $$5310 = $$4309; //@line 6302
            $320 = $322; //@line 6302
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16; //@line 6307
           label = 124; //@line 6308
           break;
          }
         case 111:
          {
           $$0272 = 8; //@line 6312
           label = 124; //@line 6313
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10; //@line 6317
           label = 124; //@line 6318
           break;
          }
         case 105:
          {
           $$0272 = 0; //@line 6322
           label = 124; //@line 6323
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $292 = +___floatscan($0, $$$0268, 0); //@line 6327
           if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
            $$2 = $$0270; //@line 6334
            $$2290 = $$0288404; //@line 6334
            $$9314 = $$1306; //@line 6334
            $312 = $318; //@line 6334
            break L6;
           }
           if (!$$0293) {
            $$10 = $$5; //@line 6339
            $$5310 = $$1306; //@line 6339
            $320 = $318; //@line 6339
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              HEAPF32[$$0293 >> 2] = $292; //@line 6344
              $$10 = $$5; //@line 6345
              $$5310 = $$1306; //@line 6345
              $320 = $318; //@line 6345
              break L58;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6350
              $$10 = $$5; //@line 6351
              $$5310 = $$1306; //@line 6351
              $320 = $318; //@line 6351
              break L58;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6356
              $$10 = $$5; //@line 6357
              $$5310 = $$1306; //@line 6357
              $320 = $318; //@line 6357
              break L58;
              break;
             }
            default:
             {
              $$10 = $$5; //@line 6362
              $$5310 = $$1306; //@line 6362
              $320 = $318; //@line 6362
              break L58;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5; //@line 6370
           $$5310 = $$1306; //@line 6370
           $320 = $318; //@line 6370
          }
         }
        } while (0);
        do {
         if ((label | 0) == 124) {
          label = 0; //@line 6376
          $282 = ___intscan($0, $$0272, 0, -1, -1) | 0; //@line 6377
          if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
           $$2 = $$0270; //@line 6385
           $$2290 = $$0288404; //@line 6385
           $$9314 = $$1306; //@line 6385
           $312 = $318; //@line 6385
           break L6;
          }
          if (($$0293 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$$0293 >> 2] = $282; //@line 6393
           $$10 = $$5; //@line 6394
           $$5310 = $$1306; //@line 6394
           $320 = $318; //@line 6394
           break;
          } else {
           _store_int_728($$0293, $$$0268, $282, tempRet0); //@line 6397
           $$10 = $$5; //@line 6398
           $$5310 = $$1306; //@line 6398
           $320 = $318; //@line 6398
           break;
          }
         }
        } while (0);
        $$11 = $$10; //@line 6412
        $$1289 = $$0288404 + (($$0293 | 0) != 0 & 1) | 0; //@line 6412
        $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0; //@line 6412
        $$6311 = $$5310; //@line 6412
        $316 = $320; //@line 6412
        break L8;
       }
      } while (0);
      $54 = $$0273408 + ($50 & 1) | 0; //@line 6417
      ___shlim($0, 0); //@line 6418
      $55 = HEAP32[$13 >> 2] | 0; //@line 6419
      if ($55 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
       HEAP32[$13 >> 2] = $55 + 1; //@line 6424
       $65 = HEAPU8[$55 >> 0] | 0; //@line 6427
      } else {
       $65 = ___shgetc($0) | 0; //@line 6430
      }
      if (($65 | 0) != (HEAPU8[$54 >> 0] | 0)) {
       label = 22; //@line 6436
       break L6;
      }
      $$11 = $54; //@line 6440
      $$1289 = $$0288404; //@line 6440
      $$2285 = $$0283407 + 1 | 0; //@line 6440
      $$6311 = $$0305402; //@line 6440
      $316 = $315; //@line 6440
     } else {
      $$1274 = $$0273408; //@line 6442
      while (1) {
       $23 = $$1274 + 1 | 0; //@line 6444
       if (!(_isspace(HEAPU8[$23 >> 0] | 0) | 0)) {
        break;
       } else {
        $$1274 = $23; //@line 6452
       }
      }
      ___shlim($0, 0); //@line 6455
      do {
       $28 = HEAP32[$13 >> 2] | 0; //@line 6457
       if ($28 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
        HEAP32[$13 >> 2] = $28 + 1; //@line 6462
        $35 = HEAPU8[$28 >> 0] | 0; //@line 6465
       } else {
        $35 = ___shgetc($0) | 0; //@line 6468
       }
      } while ((_isspace($35) | 0) != 0);
      if (!(HEAP32[$14 >> 2] | 0)) {
       $47 = HEAP32[$13 >> 2] | 0; //@line 6480
      } else {
       $41 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6483
       HEAP32[$13 >> 2] = $41; //@line 6484
       $47 = $41; //@line 6486
      }
      $$11 = $$1274; //@line 6493
      $$1289 = $$0288404; //@line 6493
      $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $47 - (HEAP32[$16 >> 2] | 0) | 0; //@line 6493
      $$6311 = $$0305402; //@line 6493
      $316 = $315; //@line 6493
     }
    } while (0);
    $$0273408 = $$11 + 1 | 0; //@line 6496
    $20 = HEAP8[$$0273408 >> 0] | 0; //@line 6497
    if (!($20 << 24 >> 24)) {
     $$3291 = $$1289; //@line 6500
     break L4;
    } else {
     $$0283407 = $$2285; //@line 6503
     $$0288404 = $$1289; //@line 6503
     $$0305402 = $$6311; //@line 6503
     $315 = $316; //@line 6503
    }
   }
   if ((label | 0) == 22) {
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 6512
    }
    if (($$0288404 | 0) != 0 | ($65 | 0) > -1) {
     $$3291 = $$0288404; //@line 6518
     break;
    } else {
     $$1271 = 0; //@line 6521
     $$8313 = $$0305402; //@line 6521
     $317 = $315; //@line 6521
     label = 137; //@line 6522
    }
   } else if ((label | 0) == 136) {
    if (!$$0288404) {
     $$1271 = $$0270; //@line 6528
     $$8313 = $$7312; //@line 6528
     $317 = $319; //@line 6528
     label = 137; //@line 6529
    } else {
     $$2 = $$0270; //@line 6531
     $$2290 = $$0288404; //@line 6531
     $$9314 = $$7312; //@line 6531
     $312 = $319; //@line 6531
    }
   }
   if ((label | 0) == 137) {
    $$2 = $$1271; //@line 6535
    $$2290 = -1; //@line 6535
    $$9314 = $$8313; //@line 6535
    $312 = $317; //@line 6535
   }
   if (!$$2) {
    $$3291 = $$2290; //@line 6539
   } else {
    _free($$9314); //@line 6541
    _free($312); //@line 6542
    $$3291 = $$2290; //@line 6543
   }
  }
 } while (0);
 if ($314 | 0) {
  ___unlockfile($0); //@line 6549
 }
 STACKTOP = sp; //@line 6551
 return $$3291 | 0; //@line 6551
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_108($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $189 = 0, $190 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 3727
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3735
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3737
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3739
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3741
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3743
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3745
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3747
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3749
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 3751
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 3753
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 3755
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 3757
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 3759
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 3761
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 3763
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 3765
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 3767
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 3769
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 3771
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 3773
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 3775
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 3777
 $$02972$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 3778
 $$03071$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 3778
 $$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 3778
 L2 : while (1) {
  $122 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 3780
  $123 = $122 + 76 | 0; //@line 3781
  $124 = HEAP32[$123 >> 2] | 0; //@line 3782
  if ($124 | 0) {
   if ($124 >>> 0 <= 100) {
    label = 18; //@line 3787
    break;
   }
   HEAP32[$123 >> 2] = $124 + -100; //@line 3791
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 3796
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 3796
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 3798
   $$131 = $$03071$reg2mem$0; //@line 3798
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 3801
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 3804
    break L2;
   }
   $52 = 7840 + ($$02972$reg2mem$1 << 2) | 0; //@line 3807
   $54 = HEAP32[$52 >> 2] | 0; //@line 3808
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 3816
  $57 = HEAP32[$56 >> 2] | 0; //@line 3817
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 3821
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 3822
   $$03071$reg2mem$0 = $$131; //@line 3822
   $$reg2mem$0 = $52; //@line 3822
   continue;
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 3829
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 3832
    $$03071$reg2mem$0 = $$131; //@line 3832
    $$reg2mem$0 = $52; //@line 3832
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $189 = $$131 + 44 | 0; //@line 3842
  $190 = HEAP32[$189 >> 2] | 0; //@line 3843
  if (!$190) {
   $198 = $10 + 12 | 0; //@line 3846
   HEAP32[$198 >> 2] = 0; //@line 3847
   $200 = $26 + 4 | 0; //@line 3849
   HEAP32[$200 >> 2] = 0; //@line 3851
   HEAP32[$200 + 4 >> 2] = 0; //@line 3854
   HEAP32[$26 >> 2] = 3; //@line 3855
   $204 = $26 + 12 | 0; //@line 3856
   HEAP32[$204 >> 2] = 752; //@line 3857
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 3858
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $26) | 0; //@line 3859
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 3862
    $205 = $ReallocAsyncCtx10 + 4 | 0; //@line 3863
    HEAP32[$205 >> 2] = $204; //@line 3864
    $206 = $ReallocAsyncCtx10 + 8 | 0; //@line 3865
    HEAP32[$206 >> 2] = $198; //@line 3866
    $207 = $ReallocAsyncCtx10 + 12 | 0; //@line 3867
    HEAP32[$207 >> 2] = $26; //@line 3868
    $208 = $ReallocAsyncCtx10 + 16 | 0; //@line 3869
    HEAP32[$208 >> 2] = $10; //@line 3870
    sp = STACKTOP; //@line 3871
    return;
   }
   ___async_unwind = 0; //@line 3874
   HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 3875
   $205 = $ReallocAsyncCtx10 + 4 | 0; //@line 3876
   HEAP32[$205 >> 2] = $204; //@line 3877
   $206 = $ReallocAsyncCtx10 + 8 | 0; //@line 3878
   HEAP32[$206 >> 2] = $198; //@line 3879
   $207 = $ReallocAsyncCtx10 + 12 | 0; //@line 3880
   HEAP32[$207 >> 2] = $26; //@line 3881
   $208 = $ReallocAsyncCtx10 + 16 | 0; //@line 3882
   HEAP32[$208 >> 2] = $10; //@line 3883
   sp = STACKTOP; //@line 3884
   return;
  } else {
   $194 = HEAP32[$190 + 4 >> 2] | 0; //@line 3889
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 3890
   FUNCTION_TABLE_vii[$194 & 7]($10, $$131 + 32 | 0); //@line 3891
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 3894
    $195 = $ReallocAsyncCtx7 + 4 | 0; //@line 3895
    HEAP32[$195 >> 2] = $189; //@line 3896
    $196 = $ReallocAsyncCtx7 + 8 | 0; //@line 3897
    HEAP32[$196 >> 2] = $10; //@line 3898
    $197 = $ReallocAsyncCtx7 + 12 | 0; //@line 3899
    HEAP32[$197 >> 2] = $26; //@line 3900
    sp = STACKTOP; //@line 3901
    return;
   }
   ___async_unwind = 0; //@line 3904
   HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 3905
   $195 = $ReallocAsyncCtx7 + 4 | 0; //@line 3906
   HEAP32[$195 >> 2] = $189; //@line 3907
   $196 = $ReallocAsyncCtx7 + 8 | 0; //@line 3908
   HEAP32[$196 >> 2] = $10; //@line 3909
   $197 = $ReallocAsyncCtx7 + 12 | 0; //@line 3910
   HEAP32[$197 >> 2] = $26; //@line 3911
   sp = STACKTOP; //@line 3912
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 3918
  $64 = $54 + 44 | 0; //@line 3919
  $65 = HEAP32[$64 >> 2] | 0; //@line 3920
  if (!$65) {
   HEAP32[$12 >> 2] = 0; //@line 3923
   $96 = HEAP32[$54 >> 2] | 0; //@line 3924
   HEAP32[$14 >> 2] = 0; //@line 3925
   HEAP32[$16 >> 2] = 192; //@line 3926
   HEAP32[$18 >> 2] = $96; //@line 3927
   HEAP32[$20 >> 2] = 764; //@line 3928
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 3929
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 3930
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 3933
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 3934
    HEAP32[$97 >> 2] = $$131; //@line 3935
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 3936
    HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 3937
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 3938
    HEAP32[$99 >> 2] = $52; //@line 3939
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 3940
    HEAP32[$100 >> 2] = $8; //@line 3941
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 3942
    HEAP32[$101 >> 2] = $26; //@line 3943
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 3944
    HEAP32[$102 >> 2] = $10; //@line 3945
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 3946
    HEAP32[$103 >> 2] = $12; //@line 3947
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 3948
    HEAP32[$104 >> 2] = $14; //@line 3949
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 3950
    HEAP32[$105 >> 2] = $16; //@line 3951
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 3952
    HEAP32[$106 >> 2] = $18; //@line 3953
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 3954
    HEAP32[$107 >> 2] = $20; //@line 3955
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 3956
    HEAP32[$108 >> 2] = $22; //@line 3957
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 3958
    HEAP32[$109 >> 2] = $24; //@line 3959
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 3960
    HEAP32[$110 >> 2] = $28; //@line 3961
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 3962
    HEAP32[$111 >> 2] = $30; //@line 3963
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 3964
    HEAP32[$112 >> 2] = $32; //@line 3965
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 3966
    HEAP32[$113 >> 2] = $34; //@line 3967
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 3968
    HEAP32[$114 >> 2] = $36; //@line 3969
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 3970
    HEAP32[$115 >> 2] = $38; //@line 3971
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 3972
    HEAP32[$116 >> 2] = $40; //@line 3973
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 3974
    HEAP32[$117 >> 2] = $42; //@line 3975
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 3976
    HEAP32[$118 >> 2] = $44; //@line 3977
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 3978
    HEAP32[$119 >> 2] = $46; //@line 3979
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 3980
    HEAP32[$120 >> 2] = $48; //@line 3981
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 3982
    HEAP32[$121 >> 2] = $50; //@line 3983
    sp = STACKTOP; //@line 3984
    return;
   }
   ___async_unwind = 0; //@line 3987
   HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 3988
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 3989
   HEAP32[$97 >> 2] = $$131; //@line 3990
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 3991
   HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 3992
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 3993
   HEAP32[$99 >> 2] = $52; //@line 3994
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 3995
   HEAP32[$100 >> 2] = $8; //@line 3996
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 3997
   HEAP32[$101 >> 2] = $26; //@line 3998
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 3999
   HEAP32[$102 >> 2] = $10; //@line 4000
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 4001
   HEAP32[$103 >> 2] = $12; //@line 4002
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 4003
   HEAP32[$104 >> 2] = $14; //@line 4004
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 4005
   HEAP32[$105 >> 2] = $16; //@line 4006
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 4007
   HEAP32[$106 >> 2] = $18; //@line 4008
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 4009
   HEAP32[$107 >> 2] = $20; //@line 4010
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 4011
   HEAP32[$108 >> 2] = $22; //@line 4012
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 4013
   HEAP32[$109 >> 2] = $24; //@line 4014
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 4015
   HEAP32[$110 >> 2] = $28; //@line 4016
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 4017
   HEAP32[$111 >> 2] = $30; //@line 4018
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 4019
   HEAP32[$112 >> 2] = $32; //@line 4020
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 4021
   HEAP32[$113 >> 2] = $34; //@line 4022
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 4023
   HEAP32[$114 >> 2] = $36; //@line 4024
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 4025
   HEAP32[$115 >> 2] = $38; //@line 4026
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 4027
   HEAP32[$116 >> 2] = $40; //@line 4028
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 4029
   HEAP32[$117 >> 2] = $42; //@line 4030
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 4031
   HEAP32[$118 >> 2] = $44; //@line 4032
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 4033
   HEAP32[$119 >> 2] = $46; //@line 4034
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 4035
   HEAP32[$120 >> 2] = $48; //@line 4036
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 4037
   HEAP32[$121 >> 2] = $50; //@line 4038
   sp = STACKTOP; //@line 4039
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 4044
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 4045
   FUNCTION_TABLE_vii[$69 & 7]($8, $54 + 32 | 0); //@line 4046
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 4049
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 4050
    HEAP32[$70 >> 2] = $$131; //@line 4051
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 4052
    HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 4053
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 4054
    HEAP32[$72 >> 2] = $52; //@line 4055
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 4056
    HEAP32[$73 >> 2] = $8; //@line 4057
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 4058
    HEAP32[$74 >> 2] = $10; //@line 4059
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 4060
    HEAP32[$75 >> 2] = $12; //@line 4061
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 4062
    HEAP32[$76 >> 2] = $14; //@line 4063
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 4064
    HEAP32[$77 >> 2] = $16; //@line 4065
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 4066
    HEAP32[$78 >> 2] = $18; //@line 4067
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 4068
    HEAP32[$79 >> 2] = $20; //@line 4069
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 4070
    HEAP32[$80 >> 2] = $22; //@line 4071
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 4072
    HEAP32[$81 >> 2] = $24; //@line 4073
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 4074
    HEAP32[$82 >> 2] = $26; //@line 4075
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 4076
    HEAP32[$83 >> 2] = $28; //@line 4077
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 4078
    HEAP32[$84 >> 2] = $30; //@line 4079
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 4080
    HEAP32[$85 >> 2] = $64; //@line 4081
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 4082
    HEAP32[$86 >> 2] = $32; //@line 4083
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 4084
    HEAP32[$87 >> 2] = $34; //@line 4085
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 4086
    HEAP32[$88 >> 2] = $36; //@line 4087
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 4088
    HEAP32[$89 >> 2] = $38; //@line 4089
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 4090
    HEAP32[$90 >> 2] = $40; //@line 4091
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 4092
    HEAP32[$91 >> 2] = $42; //@line 4093
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 4094
    HEAP32[$92 >> 2] = $44; //@line 4095
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 4096
    HEAP32[$93 >> 2] = $46; //@line 4097
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 4098
    HEAP32[$94 >> 2] = $48; //@line 4099
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 4100
    HEAP32[$95 >> 2] = $50; //@line 4101
    sp = STACKTOP; //@line 4102
    return;
   }
   ___async_unwind = 0; //@line 4105
   HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 4106
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 4107
   HEAP32[$70 >> 2] = $$131; //@line 4108
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 4109
   HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 4110
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 4111
   HEAP32[$72 >> 2] = $52; //@line 4112
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 4113
   HEAP32[$73 >> 2] = $8; //@line 4114
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 4115
   HEAP32[$74 >> 2] = $10; //@line 4116
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 4117
   HEAP32[$75 >> 2] = $12; //@line 4118
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 4119
   HEAP32[$76 >> 2] = $14; //@line 4120
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 4121
   HEAP32[$77 >> 2] = $16; //@line 4122
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 4123
   HEAP32[$78 >> 2] = $18; //@line 4124
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 4125
   HEAP32[$79 >> 2] = $20; //@line 4126
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 4127
   HEAP32[$80 >> 2] = $22; //@line 4128
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 4129
   HEAP32[$81 >> 2] = $24; //@line 4130
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 4131
   HEAP32[$82 >> 2] = $26; //@line 4132
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 4133
   HEAP32[$83 >> 2] = $28; //@line 4134
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 4135
   HEAP32[$84 >> 2] = $30; //@line 4136
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 4137
   HEAP32[$85 >> 2] = $64; //@line 4138
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 4139
   HEAP32[$86 >> 2] = $32; //@line 4140
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 4141
   HEAP32[$87 >> 2] = $34; //@line 4142
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 4143
   HEAP32[$88 >> 2] = $36; //@line 4144
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 4145
   HEAP32[$89 >> 2] = $38; //@line 4146
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 4147
   HEAP32[$90 >> 2] = $40; //@line 4148
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 4149
   HEAP32[$91 >> 2] = $42; //@line 4150
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 4151
   HEAP32[$92 >> 2] = $44; //@line 4152
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 4153
   HEAP32[$93 >> 2] = $46; //@line 4154
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 4155
   HEAP32[$94 >> 2] = $48; //@line 4156
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 4157
   HEAP32[$95 >> 2] = $50; //@line 4158
   sp = STACKTOP; //@line 4159
   return;
  }
 } else if ((label | 0) == 18) {
  HEAP32[$123 >> 2] = 0; //@line 4164
  $128 = $122 + 44 | 0; //@line 4165
  $129 = HEAP32[$128 >> 2] | 0; //@line 4166
  if (!$129) {
   HEAP32[$32 >> 2] = 0; //@line 4169
   $160 = HEAP32[$122 >> 2] | 0; //@line 4170
   HEAP32[$34 >> 2] = 0; //@line 4171
   HEAP32[$36 >> 2] = 197; //@line 4172
   HEAP32[$38 >> 2] = $160; //@line 4173
   HEAP32[$40 >> 2] = 764; //@line 4174
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 4175
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 4176
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 4179
    $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 4180
    HEAP32[$161 >> 2] = $$03071$reg2mem$0; //@line 4181
    $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 4182
    HEAP32[$162 >> 2] = $$02972$reg2mem$0; //@line 4183
    $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 4184
    HEAP32[$163 >> 2] = $$reg2mem$0; //@line 4185
    $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 4186
    HEAP32[$164 >> 2] = $8; //@line 4187
    $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 4188
    HEAP32[$165 >> 2] = $26; //@line 4189
    $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 4190
    HEAP32[$166 >> 2] = $10; //@line 4191
    $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 4192
    HEAP32[$167 >> 2] = $12; //@line 4193
    $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 4194
    HEAP32[$168 >> 2] = $14; //@line 4195
    $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 4196
    HEAP32[$169 >> 2] = $16; //@line 4197
    $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 4198
    HEAP32[$170 >> 2] = $18; //@line 4199
    $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 4200
    HEAP32[$171 >> 2] = $20; //@line 4201
    $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 4202
    HEAP32[$172 >> 2] = $22; //@line 4203
    $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 4204
    HEAP32[$173 >> 2] = $24; //@line 4205
    $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 4206
    HEAP32[$174 >> 2] = $28; //@line 4207
    $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 4208
    HEAP32[$175 >> 2] = $30; //@line 4209
    $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 4210
    HEAP32[$176 >> 2] = $32; //@line 4211
    $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 4212
    HEAP32[$177 >> 2] = $34; //@line 4213
    $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 4214
    HEAP32[$178 >> 2] = $36; //@line 4215
    $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 4216
    HEAP32[$179 >> 2] = $38; //@line 4217
    $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 4218
    HEAP32[$180 >> 2] = $40; //@line 4219
    $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 4220
    HEAP32[$181 >> 2] = $42; //@line 4221
    $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 4222
    HEAP32[$182 >> 2] = $44; //@line 4223
    $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 4224
    HEAP32[$183 >> 2] = $46; //@line 4225
    $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 4226
    HEAP32[$184 >> 2] = $48; //@line 4227
    $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 4228
    HEAP32[$185 >> 2] = $50; //@line 4229
    sp = STACKTOP; //@line 4230
    return;
   }
   ___async_unwind = 0; //@line 4233
   HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 4234
   $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 4235
   HEAP32[$161 >> 2] = $$03071$reg2mem$0; //@line 4236
   $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 4237
   HEAP32[$162 >> 2] = $$02972$reg2mem$0; //@line 4238
   $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 4239
   HEAP32[$163 >> 2] = $$reg2mem$0; //@line 4240
   $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 4241
   HEAP32[$164 >> 2] = $8; //@line 4242
   $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 4243
   HEAP32[$165 >> 2] = $26; //@line 4244
   $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 4245
   HEAP32[$166 >> 2] = $10; //@line 4246
   $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 4247
   HEAP32[$167 >> 2] = $12; //@line 4248
   $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 4249
   HEAP32[$168 >> 2] = $14; //@line 4250
   $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 4251
   HEAP32[$169 >> 2] = $16; //@line 4252
   $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 4253
   HEAP32[$170 >> 2] = $18; //@line 4254
   $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 4255
   HEAP32[$171 >> 2] = $20; //@line 4256
   $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 4257
   HEAP32[$172 >> 2] = $22; //@line 4258
   $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 4259
   HEAP32[$173 >> 2] = $24; //@line 4260
   $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 4261
   HEAP32[$174 >> 2] = $28; //@line 4262
   $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 4263
   HEAP32[$175 >> 2] = $30; //@line 4264
   $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 4265
   HEAP32[$176 >> 2] = $32; //@line 4266
   $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 4267
   HEAP32[$177 >> 2] = $34; //@line 4268
   $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 4269
   HEAP32[$178 >> 2] = $36; //@line 4270
   $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 4271
   HEAP32[$179 >> 2] = $38; //@line 4272
   $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 4273
   HEAP32[$180 >> 2] = $40; //@line 4274
   $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 4275
   HEAP32[$181 >> 2] = $42; //@line 4276
   $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 4277
   HEAP32[$182 >> 2] = $44; //@line 4278
   $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 4279
   HEAP32[$183 >> 2] = $46; //@line 4280
   $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 4281
   HEAP32[$184 >> 2] = $48; //@line 4282
   $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 4283
   HEAP32[$185 >> 2] = $50; //@line 4284
   sp = STACKTOP; //@line 4285
   return;
  } else {
   $133 = HEAP32[$129 + 4 >> 2] | 0; //@line 4290
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 4291
   FUNCTION_TABLE_vii[$133 & 7]($46, $122 + 32 | 0); //@line 4292
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 4295
    $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 4296
    HEAP32[$134 >> 2] = $$03071$reg2mem$0; //@line 4297
    $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 4298
    HEAP32[$135 >> 2] = $$02972$reg2mem$0; //@line 4299
    $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 4300
    HEAP32[$136 >> 2] = $$reg2mem$0; //@line 4301
    $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 4302
    HEAP32[$137 >> 2] = $8; //@line 4303
    $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 4304
    HEAP32[$138 >> 2] = $10; //@line 4305
    $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 4306
    HEAP32[$139 >> 2] = $12; //@line 4307
    $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 4308
    HEAP32[$140 >> 2] = $14; //@line 4309
    $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 4310
    HEAP32[$141 >> 2] = $16; //@line 4311
    $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 4312
    HEAP32[$142 >> 2] = $18; //@line 4313
    $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 4314
    HEAP32[$143 >> 2] = $20; //@line 4315
    $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 4316
    HEAP32[$144 >> 2] = $22; //@line 4317
    $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 4318
    HEAP32[$145 >> 2] = $24; //@line 4319
    $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 4320
    HEAP32[$146 >> 2] = $26; //@line 4321
    $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 4322
    HEAP32[$147 >> 2] = $128; //@line 4323
    $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 4324
    HEAP32[$148 >> 2] = $28; //@line 4325
    $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 4326
    HEAP32[$149 >> 2] = $30; //@line 4327
    $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 4328
    HEAP32[$150 >> 2] = $32; //@line 4329
    $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 4330
    HEAP32[$151 >> 2] = $34; //@line 4331
    $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 4332
    HEAP32[$152 >> 2] = $36; //@line 4333
    $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 4334
    HEAP32[$153 >> 2] = $38; //@line 4335
    $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 4336
    HEAP32[$154 >> 2] = $40; //@line 4337
    $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 4338
    HEAP32[$155 >> 2] = $42; //@line 4339
    $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 4340
    HEAP32[$156 >> 2] = $44; //@line 4341
    $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 4342
    HEAP32[$157 >> 2] = $46; //@line 4343
    $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 4344
    HEAP32[$158 >> 2] = $48; //@line 4345
    $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 4346
    HEAP32[$159 >> 2] = $50; //@line 4347
    sp = STACKTOP; //@line 4348
    return;
   }
   ___async_unwind = 0; //@line 4351
   HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 4352
   $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 4353
   HEAP32[$134 >> 2] = $$03071$reg2mem$0; //@line 4354
   $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 4355
   HEAP32[$135 >> 2] = $$02972$reg2mem$0; //@line 4356
   $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 4357
   HEAP32[$136 >> 2] = $$reg2mem$0; //@line 4358
   $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 4359
   HEAP32[$137 >> 2] = $8; //@line 4360
   $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 4361
   HEAP32[$138 >> 2] = $10; //@line 4362
   $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 4363
   HEAP32[$139 >> 2] = $12; //@line 4364
   $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 4365
   HEAP32[$140 >> 2] = $14; //@line 4366
   $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 4367
   HEAP32[$141 >> 2] = $16; //@line 4368
   $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 4369
   HEAP32[$142 >> 2] = $18; //@line 4370
   $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 4371
   HEAP32[$143 >> 2] = $20; //@line 4372
   $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 4373
   HEAP32[$144 >> 2] = $22; //@line 4374
   $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 4375
   HEAP32[$145 >> 2] = $24; //@line 4376
   $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 4377
   HEAP32[$146 >> 2] = $26; //@line 4378
   $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 4379
   HEAP32[$147 >> 2] = $128; //@line 4380
   $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 4381
   HEAP32[$148 >> 2] = $28; //@line 4382
   $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 4383
   HEAP32[$149 >> 2] = $30; //@line 4384
   $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 4385
   HEAP32[$150 >> 2] = $32; //@line 4386
   $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 4387
   HEAP32[$151 >> 2] = $34; //@line 4388
   $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 4389
   HEAP32[$152 >> 2] = $36; //@line 4390
   $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 4391
   HEAP32[$153 >> 2] = $38; //@line 4392
   $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 4393
   HEAP32[$154 >> 2] = $40; //@line 4394
   $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 4395
   HEAP32[$155 >> 2] = $42; //@line 4396
   $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 4397
   HEAP32[$156 >> 2] = $44; //@line 4398
   $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 4399
   HEAP32[$157 >> 2] = $46; //@line 4400
   $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 4401
   HEAP32[$158 >> 2] = $48; //@line 4402
   $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 4403
   HEAP32[$159 >> 2] = $50; //@line 4404
   sp = STACKTOP; //@line 4405
   return;
  }
 }
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_111($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $128 = 0, $129 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $189 = 0, $190 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $20 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $64 = 0, $65 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 5367
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5375
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5377
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5379
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5381
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5383
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 5385
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 5387
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 5389
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 5391
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 5393
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 5395
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 5397
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 5399
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 5401
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 5403
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 5405
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 5407
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 5409
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 5411
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 5413
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 5415
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 5417
 $$02972$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 5418
 $$03071$reg2mem$0 = HEAP32[$0 + 4 >> 2] | 0; //@line 5418
 $$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 5418
 L2 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 5423
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 5423
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 5425
   $$131 = $$03071$reg2mem$0; //@line 5425
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 5428
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 5431
    break L2;
   }
   $52 = 7840 + ($$02972$reg2mem$1 << 2) | 0; //@line 5434
   $54 = HEAP32[$52 >> 2] | 0; //@line 5435
  } while (!($54 | 0));
  $56 = $54 + 72 | 0; //@line 5443
  $57 = HEAP32[$56 >> 2] | 0; //@line 5444
  if ($57 >>> 0 > 100) {
   HEAP32[$56 >> 2] = $57 + -100; //@line 5448
  } else {
   if ((HEAP32[$$131 + 4 >> 2] | 0) == -3012) {
    label = 7; //@line 5454
    break;
   }
  }
  $122 = HEAP32[$52 >> 2] | 0; //@line 5458
  $123 = $122 + 76 | 0; //@line 5459
  $124 = HEAP32[$123 >> 2] | 0; //@line 5460
  if (!$124) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 5463
   $$03071$reg2mem$0 = $$131; //@line 5463
   $$reg2mem$0 = $52; //@line 5463
   continue;
  }
  if ($124 >>> 0 <= 100) {
   label = 17; //@line 5468
   break;
  }
  HEAP32[$123 >> 2] = $124 + -100; //@line 5472
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 5473
  $$03071$reg2mem$0 = $$131; //@line 5473
  $$reg2mem$0 = $52; //@line 5473
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   return;
  }
  $189 = $$131 + 44 | 0; //@line 5480
  $190 = HEAP32[$189 >> 2] | 0; //@line 5481
  if (!$190) {
   $198 = $10 + 12 | 0; //@line 5484
   HEAP32[$198 >> 2] = 0; //@line 5485
   $200 = $26 + 4 | 0; //@line 5487
   HEAP32[$200 >> 2] = 0; //@line 5489
   HEAP32[$200 + 4 >> 2] = 0; //@line 5492
   HEAP32[$26 >> 2] = 3; //@line 5493
   $204 = $26 + 12 | 0; //@line 5494
   HEAP32[$204 >> 2] = 752; //@line 5495
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 5496
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 100, $26) | 0; //@line 5497
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 5500
    $205 = $ReallocAsyncCtx10 + 4 | 0; //@line 5501
    HEAP32[$205 >> 2] = $204; //@line 5502
    $206 = $ReallocAsyncCtx10 + 8 | 0; //@line 5503
    HEAP32[$206 >> 2] = $198; //@line 5504
    $207 = $ReallocAsyncCtx10 + 12 | 0; //@line 5505
    HEAP32[$207 >> 2] = $26; //@line 5506
    $208 = $ReallocAsyncCtx10 + 16 | 0; //@line 5507
    HEAP32[$208 >> 2] = $10; //@line 5508
    sp = STACKTOP; //@line 5509
    return;
   }
   ___async_unwind = 0; //@line 5512
   HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 5513
   $205 = $ReallocAsyncCtx10 + 4 | 0; //@line 5514
   HEAP32[$205 >> 2] = $204; //@line 5515
   $206 = $ReallocAsyncCtx10 + 8 | 0; //@line 5516
   HEAP32[$206 >> 2] = $198; //@line 5517
   $207 = $ReallocAsyncCtx10 + 12 | 0; //@line 5518
   HEAP32[$207 >> 2] = $26; //@line 5519
   $208 = $ReallocAsyncCtx10 + 16 | 0; //@line 5520
   HEAP32[$208 >> 2] = $10; //@line 5521
   sp = STACKTOP; //@line 5522
   return;
  } else {
   $194 = HEAP32[$190 + 4 >> 2] | 0; //@line 5527
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 5528
   FUNCTION_TABLE_vii[$194 & 7]($10, $$131 + 32 | 0); //@line 5529
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 5532
    $195 = $ReallocAsyncCtx7 + 4 | 0; //@line 5533
    HEAP32[$195 >> 2] = $189; //@line 5534
    $196 = $ReallocAsyncCtx7 + 8 | 0; //@line 5535
    HEAP32[$196 >> 2] = $10; //@line 5536
    $197 = $ReallocAsyncCtx7 + 12 | 0; //@line 5537
    HEAP32[$197 >> 2] = $26; //@line 5538
    sp = STACKTOP; //@line 5539
    return;
   }
   ___async_unwind = 0; //@line 5542
   HEAP32[$ReallocAsyncCtx7 >> 2] = 201; //@line 5543
   $195 = $ReallocAsyncCtx7 + 4 | 0; //@line 5544
   HEAP32[$195 >> 2] = $189; //@line 5545
   $196 = $ReallocAsyncCtx7 + 8 | 0; //@line 5546
   HEAP32[$196 >> 2] = $10; //@line 5547
   $197 = $ReallocAsyncCtx7 + 12 | 0; //@line 5548
   HEAP32[$197 >> 2] = $26; //@line 5549
   sp = STACKTOP; //@line 5550
   return;
  }
 } else if ((label | 0) == 7) {
  HEAP32[$$131 + 76 >> 2] = 0; //@line 5556
  $64 = $54 + 44 | 0; //@line 5557
  $65 = HEAP32[$64 >> 2] | 0; //@line 5558
  if (!$65) {
   HEAP32[$12 >> 2] = 0; //@line 5561
   $96 = HEAP32[$54 >> 2] | 0; //@line 5562
   HEAP32[$14 >> 2] = 0; //@line 5563
   HEAP32[$16 >> 2] = 192; //@line 5564
   HEAP32[$18 >> 2] = $96; //@line 5565
   HEAP32[$20 >> 2] = 764; //@line 5566
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 5567
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 5568
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 5571
    $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 5572
    HEAP32[$97 >> 2] = $$131; //@line 5573
    $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 5574
    HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 5575
    $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 5576
    HEAP32[$99 >> 2] = $52; //@line 5577
    $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 5578
    HEAP32[$100 >> 2] = $8; //@line 5579
    $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 5580
    HEAP32[$101 >> 2] = $26; //@line 5581
    $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 5582
    HEAP32[$102 >> 2] = $10; //@line 5583
    $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 5584
    HEAP32[$103 >> 2] = $12; //@line 5585
    $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 5586
    HEAP32[$104 >> 2] = $14; //@line 5587
    $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 5588
    HEAP32[$105 >> 2] = $16; //@line 5589
    $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 5590
    HEAP32[$106 >> 2] = $18; //@line 5591
    $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 5592
    HEAP32[$107 >> 2] = $20; //@line 5593
    $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 5594
    HEAP32[$108 >> 2] = $22; //@line 5595
    $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 5596
    HEAP32[$109 >> 2] = $24; //@line 5597
    $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 5598
    HEAP32[$110 >> 2] = $28; //@line 5599
    $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 5600
    HEAP32[$111 >> 2] = $30; //@line 5601
    $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 5602
    HEAP32[$112 >> 2] = $32; //@line 5603
    $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 5604
    HEAP32[$113 >> 2] = $34; //@line 5605
    $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 5606
    HEAP32[$114 >> 2] = $36; //@line 5607
    $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 5608
    HEAP32[$115 >> 2] = $38; //@line 5609
    $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 5610
    HEAP32[$116 >> 2] = $40; //@line 5611
    $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 5612
    HEAP32[$117 >> 2] = $42; //@line 5613
    $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 5614
    HEAP32[$118 >> 2] = $44; //@line 5615
    $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 5616
    HEAP32[$119 >> 2] = $46; //@line 5617
    $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 5618
    HEAP32[$120 >> 2] = $48; //@line 5619
    $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 5620
    HEAP32[$121 >> 2] = $50; //@line 5621
    sp = STACKTOP; //@line 5622
    return;
   }
   ___async_unwind = 0; //@line 5625
   HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 5626
   $97 = $ReallocAsyncCtx12 + 4 | 0; //@line 5627
   HEAP32[$97 >> 2] = $$131; //@line 5628
   $98 = $ReallocAsyncCtx12 + 8 | 0; //@line 5629
   HEAP32[$98 >> 2] = $$02972$reg2mem$1; //@line 5630
   $99 = $ReallocAsyncCtx12 + 12 | 0; //@line 5631
   HEAP32[$99 >> 2] = $52; //@line 5632
   $100 = $ReallocAsyncCtx12 + 16 | 0; //@line 5633
   HEAP32[$100 >> 2] = $8; //@line 5634
   $101 = $ReallocAsyncCtx12 + 20 | 0; //@line 5635
   HEAP32[$101 >> 2] = $26; //@line 5636
   $102 = $ReallocAsyncCtx12 + 24 | 0; //@line 5637
   HEAP32[$102 >> 2] = $10; //@line 5638
   $103 = $ReallocAsyncCtx12 + 28 | 0; //@line 5639
   HEAP32[$103 >> 2] = $12; //@line 5640
   $104 = $ReallocAsyncCtx12 + 32 | 0; //@line 5641
   HEAP32[$104 >> 2] = $14; //@line 5642
   $105 = $ReallocAsyncCtx12 + 36 | 0; //@line 5643
   HEAP32[$105 >> 2] = $16; //@line 5644
   $106 = $ReallocAsyncCtx12 + 40 | 0; //@line 5645
   HEAP32[$106 >> 2] = $18; //@line 5646
   $107 = $ReallocAsyncCtx12 + 44 | 0; //@line 5647
   HEAP32[$107 >> 2] = $20; //@line 5648
   $108 = $ReallocAsyncCtx12 + 48 | 0; //@line 5649
   HEAP32[$108 >> 2] = $22; //@line 5650
   $109 = $ReallocAsyncCtx12 + 52 | 0; //@line 5651
   HEAP32[$109 >> 2] = $24; //@line 5652
   $110 = $ReallocAsyncCtx12 + 56 | 0; //@line 5653
   HEAP32[$110 >> 2] = $28; //@line 5654
   $111 = $ReallocAsyncCtx12 + 60 | 0; //@line 5655
   HEAP32[$111 >> 2] = $30; //@line 5656
   $112 = $ReallocAsyncCtx12 + 64 | 0; //@line 5657
   HEAP32[$112 >> 2] = $32; //@line 5658
   $113 = $ReallocAsyncCtx12 + 68 | 0; //@line 5659
   HEAP32[$113 >> 2] = $34; //@line 5660
   $114 = $ReallocAsyncCtx12 + 72 | 0; //@line 5661
   HEAP32[$114 >> 2] = $36; //@line 5662
   $115 = $ReallocAsyncCtx12 + 76 | 0; //@line 5663
   HEAP32[$115 >> 2] = $38; //@line 5664
   $116 = $ReallocAsyncCtx12 + 80 | 0; //@line 5665
   HEAP32[$116 >> 2] = $40; //@line 5666
   $117 = $ReallocAsyncCtx12 + 84 | 0; //@line 5667
   HEAP32[$117 >> 2] = $42; //@line 5668
   $118 = $ReallocAsyncCtx12 + 88 | 0; //@line 5669
   HEAP32[$118 >> 2] = $44; //@line 5670
   $119 = $ReallocAsyncCtx12 + 92 | 0; //@line 5671
   HEAP32[$119 >> 2] = $46; //@line 5672
   $120 = $ReallocAsyncCtx12 + 96 | 0; //@line 5673
   HEAP32[$120 >> 2] = $48; //@line 5674
   $121 = $ReallocAsyncCtx12 + 100 | 0; //@line 5675
   HEAP32[$121 >> 2] = $50; //@line 5676
   sp = STACKTOP; //@line 5677
   return;
  } else {
   $69 = HEAP32[$65 + 4 >> 2] | 0; //@line 5682
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 5683
   FUNCTION_TABLE_vii[$69 & 7]($8, $54 + 32 | 0); //@line 5684
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 5687
    $70 = $ReallocAsyncCtx + 4 | 0; //@line 5688
    HEAP32[$70 >> 2] = $$131; //@line 5689
    $71 = $ReallocAsyncCtx + 8 | 0; //@line 5690
    HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 5691
    $72 = $ReallocAsyncCtx + 12 | 0; //@line 5692
    HEAP32[$72 >> 2] = $52; //@line 5693
    $73 = $ReallocAsyncCtx + 16 | 0; //@line 5694
    HEAP32[$73 >> 2] = $8; //@line 5695
    $74 = $ReallocAsyncCtx + 20 | 0; //@line 5696
    HEAP32[$74 >> 2] = $10; //@line 5697
    $75 = $ReallocAsyncCtx + 24 | 0; //@line 5698
    HEAP32[$75 >> 2] = $12; //@line 5699
    $76 = $ReallocAsyncCtx + 28 | 0; //@line 5700
    HEAP32[$76 >> 2] = $14; //@line 5701
    $77 = $ReallocAsyncCtx + 32 | 0; //@line 5702
    HEAP32[$77 >> 2] = $16; //@line 5703
    $78 = $ReallocAsyncCtx + 36 | 0; //@line 5704
    HEAP32[$78 >> 2] = $18; //@line 5705
    $79 = $ReallocAsyncCtx + 40 | 0; //@line 5706
    HEAP32[$79 >> 2] = $20; //@line 5707
    $80 = $ReallocAsyncCtx + 44 | 0; //@line 5708
    HEAP32[$80 >> 2] = $22; //@line 5709
    $81 = $ReallocAsyncCtx + 48 | 0; //@line 5710
    HEAP32[$81 >> 2] = $24; //@line 5711
    $82 = $ReallocAsyncCtx + 52 | 0; //@line 5712
    HEAP32[$82 >> 2] = $26; //@line 5713
    $83 = $ReallocAsyncCtx + 56 | 0; //@line 5714
    HEAP32[$83 >> 2] = $28; //@line 5715
    $84 = $ReallocAsyncCtx + 60 | 0; //@line 5716
    HEAP32[$84 >> 2] = $30; //@line 5717
    $85 = $ReallocAsyncCtx + 64 | 0; //@line 5718
    HEAP32[$85 >> 2] = $64; //@line 5719
    $86 = $ReallocAsyncCtx + 68 | 0; //@line 5720
    HEAP32[$86 >> 2] = $32; //@line 5721
    $87 = $ReallocAsyncCtx + 72 | 0; //@line 5722
    HEAP32[$87 >> 2] = $34; //@line 5723
    $88 = $ReallocAsyncCtx + 76 | 0; //@line 5724
    HEAP32[$88 >> 2] = $36; //@line 5725
    $89 = $ReallocAsyncCtx + 80 | 0; //@line 5726
    HEAP32[$89 >> 2] = $38; //@line 5727
    $90 = $ReallocAsyncCtx + 84 | 0; //@line 5728
    HEAP32[$90 >> 2] = $40; //@line 5729
    $91 = $ReallocAsyncCtx + 88 | 0; //@line 5730
    HEAP32[$91 >> 2] = $42; //@line 5731
    $92 = $ReallocAsyncCtx + 92 | 0; //@line 5732
    HEAP32[$92 >> 2] = $44; //@line 5733
    $93 = $ReallocAsyncCtx + 96 | 0; //@line 5734
    HEAP32[$93 >> 2] = $46; //@line 5735
    $94 = $ReallocAsyncCtx + 100 | 0; //@line 5736
    HEAP32[$94 >> 2] = $48; //@line 5737
    $95 = $ReallocAsyncCtx + 104 | 0; //@line 5738
    HEAP32[$95 >> 2] = $50; //@line 5739
    sp = STACKTOP; //@line 5740
    return;
   }
   ___async_unwind = 0; //@line 5743
   HEAP32[$ReallocAsyncCtx >> 2] = 191; //@line 5744
   $70 = $ReallocAsyncCtx + 4 | 0; //@line 5745
   HEAP32[$70 >> 2] = $$131; //@line 5746
   $71 = $ReallocAsyncCtx + 8 | 0; //@line 5747
   HEAP32[$71 >> 2] = $$02972$reg2mem$1; //@line 5748
   $72 = $ReallocAsyncCtx + 12 | 0; //@line 5749
   HEAP32[$72 >> 2] = $52; //@line 5750
   $73 = $ReallocAsyncCtx + 16 | 0; //@line 5751
   HEAP32[$73 >> 2] = $8; //@line 5752
   $74 = $ReallocAsyncCtx + 20 | 0; //@line 5753
   HEAP32[$74 >> 2] = $10; //@line 5754
   $75 = $ReallocAsyncCtx + 24 | 0; //@line 5755
   HEAP32[$75 >> 2] = $12; //@line 5756
   $76 = $ReallocAsyncCtx + 28 | 0; //@line 5757
   HEAP32[$76 >> 2] = $14; //@line 5758
   $77 = $ReallocAsyncCtx + 32 | 0; //@line 5759
   HEAP32[$77 >> 2] = $16; //@line 5760
   $78 = $ReallocAsyncCtx + 36 | 0; //@line 5761
   HEAP32[$78 >> 2] = $18; //@line 5762
   $79 = $ReallocAsyncCtx + 40 | 0; //@line 5763
   HEAP32[$79 >> 2] = $20; //@line 5764
   $80 = $ReallocAsyncCtx + 44 | 0; //@line 5765
   HEAP32[$80 >> 2] = $22; //@line 5766
   $81 = $ReallocAsyncCtx + 48 | 0; //@line 5767
   HEAP32[$81 >> 2] = $24; //@line 5768
   $82 = $ReallocAsyncCtx + 52 | 0; //@line 5769
   HEAP32[$82 >> 2] = $26; //@line 5770
   $83 = $ReallocAsyncCtx + 56 | 0; //@line 5771
   HEAP32[$83 >> 2] = $28; //@line 5772
   $84 = $ReallocAsyncCtx + 60 | 0; //@line 5773
   HEAP32[$84 >> 2] = $30; //@line 5774
   $85 = $ReallocAsyncCtx + 64 | 0; //@line 5775
   HEAP32[$85 >> 2] = $64; //@line 5776
   $86 = $ReallocAsyncCtx + 68 | 0; //@line 5777
   HEAP32[$86 >> 2] = $32; //@line 5778
   $87 = $ReallocAsyncCtx + 72 | 0; //@line 5779
   HEAP32[$87 >> 2] = $34; //@line 5780
   $88 = $ReallocAsyncCtx + 76 | 0; //@line 5781
   HEAP32[$88 >> 2] = $36; //@line 5782
   $89 = $ReallocAsyncCtx + 80 | 0; //@line 5783
   HEAP32[$89 >> 2] = $38; //@line 5784
   $90 = $ReallocAsyncCtx + 84 | 0; //@line 5785
   HEAP32[$90 >> 2] = $40; //@line 5786
   $91 = $ReallocAsyncCtx + 88 | 0; //@line 5787
   HEAP32[$91 >> 2] = $42; //@line 5788
   $92 = $ReallocAsyncCtx + 92 | 0; //@line 5789
   HEAP32[$92 >> 2] = $44; //@line 5790
   $93 = $ReallocAsyncCtx + 96 | 0; //@line 5791
   HEAP32[$93 >> 2] = $46; //@line 5792
   $94 = $ReallocAsyncCtx + 100 | 0; //@line 5793
   HEAP32[$94 >> 2] = $48; //@line 5794
   $95 = $ReallocAsyncCtx + 104 | 0; //@line 5795
   HEAP32[$95 >> 2] = $50; //@line 5796
   sp = STACKTOP; //@line 5797
   return;
  }
 } else if ((label | 0) == 17) {
  HEAP32[$123 >> 2] = 0; //@line 5802
  $128 = $122 + 44 | 0; //@line 5803
  $129 = HEAP32[$128 >> 2] | 0; //@line 5804
  if (!$129) {
   HEAP32[$32 >> 2] = 0; //@line 5807
   $160 = HEAP32[$122 >> 2] | 0; //@line 5808
   HEAP32[$34 >> 2] = 0; //@line 5809
   HEAP32[$36 >> 2] = 197; //@line 5810
   HEAP32[$38 >> 2] = $160; //@line 5811
   HEAP32[$40 >> 2] = 764; //@line 5812
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 5813
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 5814
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 5817
    $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 5818
    HEAP32[$161 >> 2] = $$131; //@line 5819
    $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 5820
    HEAP32[$162 >> 2] = $$02972$reg2mem$1; //@line 5821
    $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 5822
    HEAP32[$163 >> 2] = $52; //@line 5823
    $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 5824
    HEAP32[$164 >> 2] = $8; //@line 5825
    $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 5826
    HEAP32[$165 >> 2] = $26; //@line 5827
    $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 5828
    HEAP32[$166 >> 2] = $10; //@line 5829
    $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 5830
    HEAP32[$167 >> 2] = $12; //@line 5831
    $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 5832
    HEAP32[$168 >> 2] = $14; //@line 5833
    $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 5834
    HEAP32[$169 >> 2] = $16; //@line 5835
    $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 5836
    HEAP32[$170 >> 2] = $18; //@line 5837
    $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 5838
    HEAP32[$171 >> 2] = $20; //@line 5839
    $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 5840
    HEAP32[$172 >> 2] = $22; //@line 5841
    $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 5842
    HEAP32[$173 >> 2] = $24; //@line 5843
    $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 5844
    HEAP32[$174 >> 2] = $28; //@line 5845
    $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 5846
    HEAP32[$175 >> 2] = $30; //@line 5847
    $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 5848
    HEAP32[$176 >> 2] = $32; //@line 5849
    $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 5850
    HEAP32[$177 >> 2] = $34; //@line 5851
    $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 5852
    HEAP32[$178 >> 2] = $36; //@line 5853
    $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 5854
    HEAP32[$179 >> 2] = $38; //@line 5855
    $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 5856
    HEAP32[$180 >> 2] = $40; //@line 5857
    $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 5858
    HEAP32[$181 >> 2] = $42; //@line 5859
    $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 5860
    HEAP32[$182 >> 2] = $44; //@line 5861
    $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 5862
    HEAP32[$183 >> 2] = $46; //@line 5863
    $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 5864
    HEAP32[$184 >> 2] = $48; //@line 5865
    $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 5866
    HEAP32[$185 >> 2] = $50; //@line 5867
    sp = STACKTOP; //@line 5868
    return;
   }
   ___async_unwind = 0; //@line 5871
   HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 5872
   $161 = $ReallocAsyncCtx11 + 4 | 0; //@line 5873
   HEAP32[$161 >> 2] = $$131; //@line 5874
   $162 = $ReallocAsyncCtx11 + 8 | 0; //@line 5875
   HEAP32[$162 >> 2] = $$02972$reg2mem$1; //@line 5876
   $163 = $ReallocAsyncCtx11 + 12 | 0; //@line 5877
   HEAP32[$163 >> 2] = $52; //@line 5878
   $164 = $ReallocAsyncCtx11 + 16 | 0; //@line 5879
   HEAP32[$164 >> 2] = $8; //@line 5880
   $165 = $ReallocAsyncCtx11 + 20 | 0; //@line 5881
   HEAP32[$165 >> 2] = $26; //@line 5882
   $166 = $ReallocAsyncCtx11 + 24 | 0; //@line 5883
   HEAP32[$166 >> 2] = $10; //@line 5884
   $167 = $ReallocAsyncCtx11 + 28 | 0; //@line 5885
   HEAP32[$167 >> 2] = $12; //@line 5886
   $168 = $ReallocAsyncCtx11 + 32 | 0; //@line 5887
   HEAP32[$168 >> 2] = $14; //@line 5888
   $169 = $ReallocAsyncCtx11 + 36 | 0; //@line 5889
   HEAP32[$169 >> 2] = $16; //@line 5890
   $170 = $ReallocAsyncCtx11 + 40 | 0; //@line 5891
   HEAP32[$170 >> 2] = $18; //@line 5892
   $171 = $ReallocAsyncCtx11 + 44 | 0; //@line 5893
   HEAP32[$171 >> 2] = $20; //@line 5894
   $172 = $ReallocAsyncCtx11 + 48 | 0; //@line 5895
   HEAP32[$172 >> 2] = $22; //@line 5896
   $173 = $ReallocAsyncCtx11 + 52 | 0; //@line 5897
   HEAP32[$173 >> 2] = $24; //@line 5898
   $174 = $ReallocAsyncCtx11 + 56 | 0; //@line 5899
   HEAP32[$174 >> 2] = $28; //@line 5900
   $175 = $ReallocAsyncCtx11 + 60 | 0; //@line 5901
   HEAP32[$175 >> 2] = $30; //@line 5902
   $176 = $ReallocAsyncCtx11 + 64 | 0; //@line 5903
   HEAP32[$176 >> 2] = $32; //@line 5904
   $177 = $ReallocAsyncCtx11 + 68 | 0; //@line 5905
   HEAP32[$177 >> 2] = $34; //@line 5906
   $178 = $ReallocAsyncCtx11 + 72 | 0; //@line 5907
   HEAP32[$178 >> 2] = $36; //@line 5908
   $179 = $ReallocAsyncCtx11 + 76 | 0; //@line 5909
   HEAP32[$179 >> 2] = $38; //@line 5910
   $180 = $ReallocAsyncCtx11 + 80 | 0; //@line 5911
   HEAP32[$180 >> 2] = $40; //@line 5912
   $181 = $ReallocAsyncCtx11 + 84 | 0; //@line 5913
   HEAP32[$181 >> 2] = $42; //@line 5914
   $182 = $ReallocAsyncCtx11 + 88 | 0; //@line 5915
   HEAP32[$182 >> 2] = $44; //@line 5916
   $183 = $ReallocAsyncCtx11 + 92 | 0; //@line 5917
   HEAP32[$183 >> 2] = $46; //@line 5918
   $184 = $ReallocAsyncCtx11 + 96 | 0; //@line 5919
   HEAP32[$184 >> 2] = $48; //@line 5920
   $185 = $ReallocAsyncCtx11 + 100 | 0; //@line 5921
   HEAP32[$185 >> 2] = $50; //@line 5922
   sp = STACKTOP; //@line 5923
   return;
  } else {
   $133 = HEAP32[$129 + 4 >> 2] | 0; //@line 5928
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 5929
   FUNCTION_TABLE_vii[$133 & 7]($46, $122 + 32 | 0); //@line 5930
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 5933
    $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 5934
    HEAP32[$134 >> 2] = $$131; //@line 5935
    $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 5936
    HEAP32[$135 >> 2] = $$02972$reg2mem$1; //@line 5937
    $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 5938
    HEAP32[$136 >> 2] = $52; //@line 5939
    $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 5940
    HEAP32[$137 >> 2] = $8; //@line 5941
    $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 5942
    HEAP32[$138 >> 2] = $10; //@line 5943
    $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 5944
    HEAP32[$139 >> 2] = $12; //@line 5945
    $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 5946
    HEAP32[$140 >> 2] = $14; //@line 5947
    $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 5948
    HEAP32[$141 >> 2] = $16; //@line 5949
    $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 5950
    HEAP32[$142 >> 2] = $18; //@line 5951
    $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 5952
    HEAP32[$143 >> 2] = $20; //@line 5953
    $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 5954
    HEAP32[$144 >> 2] = $22; //@line 5955
    $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 5956
    HEAP32[$145 >> 2] = $24; //@line 5957
    $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 5958
    HEAP32[$146 >> 2] = $26; //@line 5959
    $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 5960
    HEAP32[$147 >> 2] = $128; //@line 5961
    $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 5962
    HEAP32[$148 >> 2] = $28; //@line 5963
    $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 5964
    HEAP32[$149 >> 2] = $30; //@line 5965
    $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 5966
    HEAP32[$150 >> 2] = $32; //@line 5967
    $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 5968
    HEAP32[$151 >> 2] = $34; //@line 5969
    $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 5970
    HEAP32[$152 >> 2] = $36; //@line 5971
    $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 5972
    HEAP32[$153 >> 2] = $38; //@line 5973
    $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 5974
    HEAP32[$154 >> 2] = $40; //@line 5975
    $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 5976
    HEAP32[$155 >> 2] = $42; //@line 5977
    $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 5978
    HEAP32[$156 >> 2] = $44; //@line 5979
    $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 5980
    HEAP32[$157 >> 2] = $46; //@line 5981
    $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 5982
    HEAP32[$158 >> 2] = $48; //@line 5983
    $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 5984
    HEAP32[$159 >> 2] = $50; //@line 5985
    sp = STACKTOP; //@line 5986
    return;
   }
   ___async_unwind = 0; //@line 5989
   HEAP32[$ReallocAsyncCtx4 >> 2] = 196; //@line 5990
   $134 = $ReallocAsyncCtx4 + 4 | 0; //@line 5991
   HEAP32[$134 >> 2] = $$131; //@line 5992
   $135 = $ReallocAsyncCtx4 + 8 | 0; //@line 5993
   HEAP32[$135 >> 2] = $$02972$reg2mem$1; //@line 5994
   $136 = $ReallocAsyncCtx4 + 12 | 0; //@line 5995
   HEAP32[$136 >> 2] = $52; //@line 5996
   $137 = $ReallocAsyncCtx4 + 16 | 0; //@line 5997
   HEAP32[$137 >> 2] = $8; //@line 5998
   $138 = $ReallocAsyncCtx4 + 20 | 0; //@line 5999
   HEAP32[$138 >> 2] = $10; //@line 6000
   $139 = $ReallocAsyncCtx4 + 24 | 0; //@line 6001
   HEAP32[$139 >> 2] = $12; //@line 6002
   $140 = $ReallocAsyncCtx4 + 28 | 0; //@line 6003
   HEAP32[$140 >> 2] = $14; //@line 6004
   $141 = $ReallocAsyncCtx4 + 32 | 0; //@line 6005
   HEAP32[$141 >> 2] = $16; //@line 6006
   $142 = $ReallocAsyncCtx4 + 36 | 0; //@line 6007
   HEAP32[$142 >> 2] = $18; //@line 6008
   $143 = $ReallocAsyncCtx4 + 40 | 0; //@line 6009
   HEAP32[$143 >> 2] = $20; //@line 6010
   $144 = $ReallocAsyncCtx4 + 44 | 0; //@line 6011
   HEAP32[$144 >> 2] = $22; //@line 6012
   $145 = $ReallocAsyncCtx4 + 48 | 0; //@line 6013
   HEAP32[$145 >> 2] = $24; //@line 6014
   $146 = $ReallocAsyncCtx4 + 52 | 0; //@line 6015
   HEAP32[$146 >> 2] = $26; //@line 6016
   $147 = $ReallocAsyncCtx4 + 56 | 0; //@line 6017
   HEAP32[$147 >> 2] = $128; //@line 6018
   $148 = $ReallocAsyncCtx4 + 60 | 0; //@line 6019
   HEAP32[$148 >> 2] = $28; //@line 6020
   $149 = $ReallocAsyncCtx4 + 64 | 0; //@line 6021
   HEAP32[$149 >> 2] = $30; //@line 6022
   $150 = $ReallocAsyncCtx4 + 68 | 0; //@line 6023
   HEAP32[$150 >> 2] = $32; //@line 6024
   $151 = $ReallocAsyncCtx4 + 72 | 0; //@line 6025
   HEAP32[$151 >> 2] = $34; //@line 6026
   $152 = $ReallocAsyncCtx4 + 76 | 0; //@line 6027
   HEAP32[$152 >> 2] = $36; //@line 6028
   $153 = $ReallocAsyncCtx4 + 80 | 0; //@line 6029
   HEAP32[$153 >> 2] = $38; //@line 6030
   $154 = $ReallocAsyncCtx4 + 84 | 0; //@line 6031
   HEAP32[$154 >> 2] = $40; //@line 6032
   $155 = $ReallocAsyncCtx4 + 88 | 0; //@line 6033
   HEAP32[$155 >> 2] = $42; //@line 6034
   $156 = $ReallocAsyncCtx4 + 92 | 0; //@line 6035
   HEAP32[$156 >> 2] = $44; //@line 6036
   $157 = $ReallocAsyncCtx4 + 96 | 0; //@line 6037
   HEAP32[$157 >> 2] = $46; //@line 6038
   $158 = $ReallocAsyncCtx4 + 100 | 0; //@line 6039
   HEAP32[$158 >> 2] = $48; //@line 6040
   $159 = $ReallocAsyncCtx4 + 104 | 0; //@line 6041
   HEAP32[$159 >> 2] = $50; //@line 6042
   sp = STACKTOP; //@line 6043
   return;
  }
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_85($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $118 = 0, $119 = 0, $12 = 0, $126 = 0, $127 = 0, $130 = 0, $133 = 0, $14 = 0, $140 = 0, $142 = 0, $143 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $161 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $184 = 0, $186 = 0, $194 = 0, $197 = 0, $199 = 0, $2 = 0, $20 = 0, $207 = 0, $210 = 0, $212 = 0, $22 = 0, $220 = 0, $223 = 0, $225 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $26 = 0, $28 = 0, $30 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 255
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 257
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 259
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 261
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 263
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 265
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 267
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 269
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 271
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 273
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 275
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 277
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 279
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 281
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 283
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 285
 $30 = $2 + 12 | 0; //@line 286
 HEAP32[$30 >> 2] = $AsyncRetVal; //@line 287
 _strcpy($AsyncRetVal, $28) | 0; //@line 288
 HEAP32[$2 + 4 >> 2] = -3012; //@line 290
 do {
  if (($6 | 0) != ($26 | 0)) {
   $33 = $2 + 28 | 0; //@line 294
   $34 = HEAP32[$33 >> 2] | 0; //@line 295
   if ($34 | 0) {
    $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 299
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(64) | 0; //@line 300
    FUNCTION_TABLE_vi[$37 & 511]($6); //@line 301
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 174; //@line 304
     $38 = $ReallocAsyncCtx2 + 4 | 0; //@line 305
     HEAP32[$38 >> 2] = $2; //@line 306
     $39 = $ReallocAsyncCtx2 + 8 | 0; //@line 307
     HEAP32[$39 >> 2] = $6; //@line 308
     $40 = $ReallocAsyncCtx2 + 12 | 0; //@line 309
     HEAP32[$40 >> 2] = $8; //@line 310
     $41 = $ReallocAsyncCtx2 + 16 | 0; //@line 311
     HEAP32[$41 >> 2] = $30; //@line 312
     $42 = $ReallocAsyncCtx2 + 20 | 0; //@line 313
     HEAP32[$42 >> 2] = $12; //@line 314
     $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 315
     HEAP32[$43 >> 2] = $16; //@line 316
     $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 317
     HEAP32[$44 >> 2] = $4; //@line 318
     $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 319
     HEAP32[$45 >> 2] = $18; //@line 320
     $46 = $ReallocAsyncCtx2 + 36 | 0; //@line 321
     HEAP32[$46 >> 2] = $10; //@line 322
     $47 = $ReallocAsyncCtx2 + 40 | 0; //@line 323
     HEAP32[$47 >> 2] = $20; //@line 324
     $48 = $ReallocAsyncCtx2 + 44 | 0; //@line 325
     HEAP32[$48 >> 2] = $22; //@line 326
     $49 = $ReallocAsyncCtx2 + 48 | 0; //@line 327
     HEAP32[$49 >> 2] = $24; //@line 328
     $50 = $ReallocAsyncCtx2 + 52 | 0; //@line 329
     HEAP32[$50 >> 2] = $26; //@line 330
     $51 = $ReallocAsyncCtx2 + 56 | 0; //@line 331
     HEAP32[$51 >> 2] = $14; //@line 332
     $52 = $ReallocAsyncCtx2 + 60 | 0; //@line 333
     HEAP32[$52 >> 2] = $33; //@line 334
     sp = STACKTOP; //@line 335
     return;
    }
    ___async_unwind = 0; //@line 338
    HEAP32[$ReallocAsyncCtx2 >> 2] = 174; //@line 339
    $38 = $ReallocAsyncCtx2 + 4 | 0; //@line 340
    HEAP32[$38 >> 2] = $2; //@line 341
    $39 = $ReallocAsyncCtx2 + 8 | 0; //@line 342
    HEAP32[$39 >> 2] = $6; //@line 343
    $40 = $ReallocAsyncCtx2 + 12 | 0; //@line 344
    HEAP32[$40 >> 2] = $8; //@line 345
    $41 = $ReallocAsyncCtx2 + 16 | 0; //@line 346
    HEAP32[$41 >> 2] = $30; //@line 347
    $42 = $ReallocAsyncCtx2 + 20 | 0; //@line 348
    HEAP32[$42 >> 2] = $12; //@line 349
    $43 = $ReallocAsyncCtx2 + 24 | 0; //@line 350
    HEAP32[$43 >> 2] = $16; //@line 351
    $44 = $ReallocAsyncCtx2 + 28 | 0; //@line 352
    HEAP32[$44 >> 2] = $4; //@line 353
    $45 = $ReallocAsyncCtx2 + 32 | 0; //@line 354
    HEAP32[$45 >> 2] = $18; //@line 355
    $46 = $ReallocAsyncCtx2 + 36 | 0; //@line 356
    HEAP32[$46 >> 2] = $10; //@line 357
    $47 = $ReallocAsyncCtx2 + 40 | 0; //@line 358
    HEAP32[$47 >> 2] = $20; //@line 359
    $48 = $ReallocAsyncCtx2 + 44 | 0; //@line 360
    HEAP32[$48 >> 2] = $22; //@line 361
    $49 = $ReallocAsyncCtx2 + 48 | 0; //@line 362
    HEAP32[$49 >> 2] = $24; //@line 363
    $50 = $ReallocAsyncCtx2 + 52 | 0; //@line 364
    HEAP32[$50 >> 2] = $26; //@line 365
    $51 = $ReallocAsyncCtx2 + 56 | 0; //@line 366
    HEAP32[$51 >> 2] = $14; //@line 367
    $52 = $ReallocAsyncCtx2 + 60 | 0; //@line 368
    HEAP32[$52 >> 2] = $33; //@line 369
    sp = STACKTOP; //@line 370
    return;
   }
   $53 = $26 + 12 | 0; //@line 373
   $54 = HEAP32[$53 >> 2] | 0; //@line 374
   if (!$54) {
    HEAP32[$33 >> 2] = 0; //@line 377
    break;
   }
   $57 = HEAP32[$54 + 4 >> 2] | 0; //@line 381
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 382
   FUNCTION_TABLE_vii[$57 & 7]($6, $26); //@line 383
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 386
    $58 = $ReallocAsyncCtx3 + 4 | 0; //@line 387
    HEAP32[$58 >> 2] = $4; //@line 388
    $59 = $ReallocAsyncCtx3 + 8 | 0; //@line 389
    HEAP32[$59 >> 2] = $30; //@line 390
    $60 = $ReallocAsyncCtx3 + 12 | 0; //@line 391
    HEAP32[$60 >> 2] = $2; //@line 392
    $61 = $ReallocAsyncCtx3 + 16 | 0; //@line 393
    HEAP32[$61 >> 2] = $6; //@line 394
    $62 = $ReallocAsyncCtx3 + 20 | 0; //@line 395
    HEAP32[$62 >> 2] = $16; //@line 396
    $63 = $ReallocAsyncCtx3 + 24 | 0; //@line 397
    HEAP32[$63 >> 2] = $18; //@line 398
    $64 = $ReallocAsyncCtx3 + 28 | 0; //@line 399
    HEAP32[$64 >> 2] = $8; //@line 400
    $65 = $ReallocAsyncCtx3 + 32 | 0; //@line 401
    HEAP32[$65 >> 2] = $10; //@line 402
    $66 = $ReallocAsyncCtx3 + 36 | 0; //@line 403
    HEAP32[$66 >> 2] = $53; //@line 404
    $67 = $ReallocAsyncCtx3 + 40 | 0; //@line 405
    HEAP32[$67 >> 2] = $20; //@line 406
    $68 = $ReallocAsyncCtx3 + 44 | 0; //@line 407
    HEAP32[$68 >> 2] = $22; //@line 408
    $69 = $ReallocAsyncCtx3 + 48 | 0; //@line 409
    HEAP32[$69 >> 2] = $24; //@line 410
    $70 = $ReallocAsyncCtx3 + 52 | 0; //@line 411
    HEAP32[$70 >> 2] = $12; //@line 412
    $71 = $ReallocAsyncCtx3 + 56 | 0; //@line 413
    HEAP32[$71 >> 2] = $14; //@line 414
    $72 = $ReallocAsyncCtx3 + 60 | 0; //@line 415
    HEAP32[$72 >> 2] = $33; //@line 416
    sp = STACKTOP; //@line 417
    return;
   }
   ___async_unwind = 0; //@line 420
   HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 421
   $58 = $ReallocAsyncCtx3 + 4 | 0; //@line 422
   HEAP32[$58 >> 2] = $4; //@line 423
   $59 = $ReallocAsyncCtx3 + 8 | 0; //@line 424
   HEAP32[$59 >> 2] = $30; //@line 425
   $60 = $ReallocAsyncCtx3 + 12 | 0; //@line 426
   HEAP32[$60 >> 2] = $2; //@line 427
   $61 = $ReallocAsyncCtx3 + 16 | 0; //@line 428
   HEAP32[$61 >> 2] = $6; //@line 429
   $62 = $ReallocAsyncCtx3 + 20 | 0; //@line 430
   HEAP32[$62 >> 2] = $16; //@line 431
   $63 = $ReallocAsyncCtx3 + 24 | 0; //@line 432
   HEAP32[$63 >> 2] = $18; //@line 433
   $64 = $ReallocAsyncCtx3 + 28 | 0; //@line 434
   HEAP32[$64 >> 2] = $8; //@line 435
   $65 = $ReallocAsyncCtx3 + 32 | 0; //@line 436
   HEAP32[$65 >> 2] = $10; //@line 437
   $66 = $ReallocAsyncCtx3 + 36 | 0; //@line 438
   HEAP32[$66 >> 2] = $53; //@line 439
   $67 = $ReallocAsyncCtx3 + 40 | 0; //@line 440
   HEAP32[$67 >> 2] = $20; //@line 441
   $68 = $ReallocAsyncCtx3 + 44 | 0; //@line 442
   HEAP32[$68 >> 2] = $22; //@line 443
   $69 = $ReallocAsyncCtx3 + 48 | 0; //@line 444
   HEAP32[$69 >> 2] = $24; //@line 445
   $70 = $ReallocAsyncCtx3 + 52 | 0; //@line 446
   HEAP32[$70 >> 2] = $12; //@line 447
   $71 = $ReallocAsyncCtx3 + 56 | 0; //@line 448
   HEAP32[$71 >> 2] = $14; //@line 449
   $72 = $ReallocAsyncCtx3 + 60 | 0; //@line 450
   HEAP32[$72 >> 2] = $33; //@line 451
   sp = STACKTOP; //@line 452
   return;
  }
 } while (0);
 $73 = $2 + 32 | 0; //@line 456
 do {
  if (($73 | 0) != ($20 | 0)) {
   $75 = $2 + 44 | 0; //@line 460
   $76 = HEAP32[$75 >> 2] | 0; //@line 461
   if ($76 | 0) {
    $79 = HEAP32[$76 + 8 >> 2] | 0; //@line 465
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 466
    FUNCTION_TABLE_vi[$79 & 511]($73); //@line 467
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 470
     $80 = $ReallocAsyncCtx4 + 4 | 0; //@line 471
     HEAP32[$80 >> 2] = $4; //@line 472
     $81 = $ReallocAsyncCtx4 + 8 | 0; //@line 473
     HEAP32[$81 >> 2] = $30; //@line 474
     $82 = $ReallocAsyncCtx4 + 12 | 0; //@line 475
     HEAP32[$82 >> 2] = $2; //@line 476
     $83 = $ReallocAsyncCtx4 + 16 | 0; //@line 477
     HEAP32[$83 >> 2] = $6; //@line 478
     $84 = $ReallocAsyncCtx4 + 20 | 0; //@line 479
     HEAP32[$84 >> 2] = $16; //@line 480
     $85 = $ReallocAsyncCtx4 + 24 | 0; //@line 481
     HEAP32[$85 >> 2] = $73; //@line 482
     $86 = $ReallocAsyncCtx4 + 28 | 0; //@line 483
     HEAP32[$86 >> 2] = $18; //@line 484
     $87 = $ReallocAsyncCtx4 + 32 | 0; //@line 485
     HEAP32[$87 >> 2] = $8; //@line 486
     $88 = $ReallocAsyncCtx4 + 36 | 0; //@line 487
     HEAP32[$88 >> 2] = $10; //@line 488
     $89 = $ReallocAsyncCtx4 + 40 | 0; //@line 489
     HEAP32[$89 >> 2] = $20; //@line 490
     $90 = $ReallocAsyncCtx4 + 44 | 0; //@line 491
     HEAP32[$90 >> 2] = $22; //@line 492
     $91 = $ReallocAsyncCtx4 + 48 | 0; //@line 493
     HEAP32[$91 >> 2] = $24; //@line 494
     $92 = $ReallocAsyncCtx4 + 52 | 0; //@line 495
     HEAP32[$92 >> 2] = $75; //@line 496
     $93 = $ReallocAsyncCtx4 + 56 | 0; //@line 497
     HEAP32[$93 >> 2] = $12; //@line 498
     $94 = $ReallocAsyncCtx4 + 60 | 0; //@line 499
     HEAP32[$94 >> 2] = $14; //@line 500
     sp = STACKTOP; //@line 501
     return;
    }
    ___async_unwind = 0; //@line 504
    HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 505
    $80 = $ReallocAsyncCtx4 + 4 | 0; //@line 506
    HEAP32[$80 >> 2] = $4; //@line 507
    $81 = $ReallocAsyncCtx4 + 8 | 0; //@line 508
    HEAP32[$81 >> 2] = $30; //@line 509
    $82 = $ReallocAsyncCtx4 + 12 | 0; //@line 510
    HEAP32[$82 >> 2] = $2; //@line 511
    $83 = $ReallocAsyncCtx4 + 16 | 0; //@line 512
    HEAP32[$83 >> 2] = $6; //@line 513
    $84 = $ReallocAsyncCtx4 + 20 | 0; //@line 514
    HEAP32[$84 >> 2] = $16; //@line 515
    $85 = $ReallocAsyncCtx4 + 24 | 0; //@line 516
    HEAP32[$85 >> 2] = $73; //@line 517
    $86 = $ReallocAsyncCtx4 + 28 | 0; //@line 518
    HEAP32[$86 >> 2] = $18; //@line 519
    $87 = $ReallocAsyncCtx4 + 32 | 0; //@line 520
    HEAP32[$87 >> 2] = $8; //@line 521
    $88 = $ReallocAsyncCtx4 + 36 | 0; //@line 522
    HEAP32[$88 >> 2] = $10; //@line 523
    $89 = $ReallocAsyncCtx4 + 40 | 0; //@line 524
    HEAP32[$89 >> 2] = $20; //@line 525
    $90 = $ReallocAsyncCtx4 + 44 | 0; //@line 526
    HEAP32[$90 >> 2] = $22; //@line 527
    $91 = $ReallocAsyncCtx4 + 48 | 0; //@line 528
    HEAP32[$91 >> 2] = $24; //@line 529
    $92 = $ReallocAsyncCtx4 + 52 | 0; //@line 530
    HEAP32[$92 >> 2] = $75; //@line 531
    $93 = $ReallocAsyncCtx4 + 56 | 0; //@line 532
    HEAP32[$93 >> 2] = $12; //@line 533
    $94 = $ReallocAsyncCtx4 + 60 | 0; //@line 534
    HEAP32[$94 >> 2] = $14; //@line 535
    sp = STACKTOP; //@line 536
    return;
   }
   $95 = $20 + 12 | 0; //@line 539
   $96 = HEAP32[$95 >> 2] | 0; //@line 540
   if (!$96) {
    HEAP32[$75 >> 2] = 0; //@line 543
    break;
   }
   $99 = HEAP32[$96 + 4 >> 2] | 0; //@line 547
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 548
   FUNCTION_TABLE_vii[$99 & 7]($73, $20); //@line 549
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 552
    $100 = $ReallocAsyncCtx5 + 4 | 0; //@line 553
    HEAP32[$100 >> 2] = $4; //@line 554
    $101 = $ReallocAsyncCtx5 + 8 | 0; //@line 555
    HEAP32[$101 >> 2] = $30; //@line 556
    $102 = $ReallocAsyncCtx5 + 12 | 0; //@line 557
    HEAP32[$102 >> 2] = $2; //@line 558
    $103 = $ReallocAsyncCtx5 + 16 | 0; //@line 559
    HEAP32[$103 >> 2] = $6; //@line 560
    $104 = $ReallocAsyncCtx5 + 20 | 0; //@line 561
    HEAP32[$104 >> 2] = $16; //@line 562
    $105 = $ReallocAsyncCtx5 + 24 | 0; //@line 563
    HEAP32[$105 >> 2] = $73; //@line 564
    $106 = $ReallocAsyncCtx5 + 28 | 0; //@line 565
    HEAP32[$106 >> 2] = $18; //@line 566
    $107 = $ReallocAsyncCtx5 + 32 | 0; //@line 567
    HEAP32[$107 >> 2] = $95; //@line 568
    $108 = $ReallocAsyncCtx5 + 36 | 0; //@line 569
    HEAP32[$108 >> 2] = $8; //@line 570
    $109 = $ReallocAsyncCtx5 + 40 | 0; //@line 571
    HEAP32[$109 >> 2] = $10; //@line 572
    $110 = $ReallocAsyncCtx5 + 44 | 0; //@line 573
    HEAP32[$110 >> 2] = $22; //@line 574
    $111 = $ReallocAsyncCtx5 + 48 | 0; //@line 575
    HEAP32[$111 >> 2] = $24; //@line 576
    $112 = $ReallocAsyncCtx5 + 52 | 0; //@line 577
    HEAP32[$112 >> 2] = $75; //@line 578
    $113 = $ReallocAsyncCtx5 + 56 | 0; //@line 579
    HEAP32[$113 >> 2] = $12; //@line 580
    $114 = $ReallocAsyncCtx5 + 60 | 0; //@line 581
    HEAP32[$114 >> 2] = $14; //@line 582
    sp = STACKTOP; //@line 583
    return;
   }
   ___async_unwind = 0; //@line 586
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 587
   $100 = $ReallocAsyncCtx5 + 4 | 0; //@line 588
   HEAP32[$100 >> 2] = $4; //@line 589
   $101 = $ReallocAsyncCtx5 + 8 | 0; //@line 590
   HEAP32[$101 >> 2] = $30; //@line 591
   $102 = $ReallocAsyncCtx5 + 12 | 0; //@line 592
   HEAP32[$102 >> 2] = $2; //@line 593
   $103 = $ReallocAsyncCtx5 + 16 | 0; //@line 594
   HEAP32[$103 >> 2] = $6; //@line 595
   $104 = $ReallocAsyncCtx5 + 20 | 0; //@line 596
   HEAP32[$104 >> 2] = $16; //@line 597
   $105 = $ReallocAsyncCtx5 + 24 | 0; //@line 598
   HEAP32[$105 >> 2] = $73; //@line 599
   $106 = $ReallocAsyncCtx5 + 28 | 0; //@line 600
   HEAP32[$106 >> 2] = $18; //@line 601
   $107 = $ReallocAsyncCtx5 + 32 | 0; //@line 602
   HEAP32[$107 >> 2] = $95; //@line 603
   $108 = $ReallocAsyncCtx5 + 36 | 0; //@line 604
   HEAP32[$108 >> 2] = $8; //@line 605
   $109 = $ReallocAsyncCtx5 + 40 | 0; //@line 606
   HEAP32[$109 >> 2] = $10; //@line 607
   $110 = $ReallocAsyncCtx5 + 44 | 0; //@line 608
   HEAP32[$110 >> 2] = $22; //@line 609
   $111 = $ReallocAsyncCtx5 + 48 | 0; //@line 610
   HEAP32[$111 >> 2] = $24; //@line 611
   $112 = $ReallocAsyncCtx5 + 52 | 0; //@line 612
   HEAP32[$112 >> 2] = $75; //@line 613
   $113 = $ReallocAsyncCtx5 + 56 | 0; //@line 614
   HEAP32[$113 >> 2] = $12; //@line 615
   $114 = $ReallocAsyncCtx5 + 60 | 0; //@line 616
   HEAP32[$114 >> 2] = $14; //@line 617
   sp = STACKTOP; //@line 618
   return;
  }
 } while (0);
 HEAP32[$2 + 8 >> 2] = $18; //@line 623
 HEAP32[$2 + 48 >> 2] = $22; //@line 625
 HEAP32[$2 + 52 >> 2] = $24; //@line 627
 $118 = $2 + 56 | 0; //@line 628
 HEAP32[$118 >> 2] = 0; //@line 629
 $119 = $2 + 60 | 0; //@line 630
 HEAP32[$119 >> 2] = 0; //@line 631
 HEAP32[$2 + 64 >> 2] = 0; //@line 633
 HEAP8[$2 + 82 >> 0] = 0; //@line 635
 HEAP8[$2 + 83 >> 0] = 1; //@line 637
 HEAP8[$2 + 84 >> 0] = 3; //@line 639
 HEAP16[$2 + 80 >> 1] = 0; //@line 641
 HEAP32[$2 + 76 >> 2] = 0; //@line 643
 $126 = $2 + 72 | 0; //@line 644
 HEAP32[$126 >> 2] = 15500; //@line 645
 $127 = HEAP32[187] | 0; //@line 646
 HEAP32[187] = $127 + 1; //@line 648
 $$ = ($127 | 0) > 32767 ? 1 : $127; //@line 650
 HEAP32[$2 >> 2] = $$; //@line 651
 $130 = HEAP32[1960] | 0; //@line 652
 if (!$130) {
  $$1 = 0; //@line 655
  $184 = 0; //@line 655
 } else {
  $133 = HEAP32[$130 + 56 >> 2] | 0; //@line 658
  if (!$133) {
   $$1 = 1; //@line 661
   $184 = 0; //@line 661
  } else {
   if ((HEAP32[$130 + 8 >> 2] | 0) == ($18 | 0)) {
    HEAP32[$118 >> 2] = $133; //@line 667
    HEAP32[$119 >> 2] = HEAP32[$130 + 60 >> 2]; //@line 670
    $$1 = 1; //@line 671
    $184 = $133; //@line 671
   } else {
    $$1 = 1; //@line 673
    $184 = 0; //@line 673
   }
  }
 }
 $140 = HEAP32[1961] | 0; //@line 677
 if (!$140) {
  $$1$1 = $$1; //@line 680
  $197 = $184; //@line 680
 } else {
  if (!$184) {
   $186 = HEAP32[$140 + 56 >> 2] | 0; //@line 685
   if (!$186) {
    $239 = 0; //@line 688
   } else {
    if ((HEAP32[$140 + 8 >> 2] | 0) == ($18 | 0)) {
     HEAP32[$118 >> 2] = $186; //@line 694
     HEAP32[$119 >> 2] = HEAP32[$140 + 60 >> 2]; //@line 697
     $239 = $186; //@line 698
    } else {
     $239 = 0; //@line 700
    }
   }
  } else {
   $239 = $184; //@line 704
  }
  $$1$1 = $$1 + 1 | 0; //@line 707
  $197 = $239; //@line 707
 }
 $194 = HEAP32[1962] | 0; //@line 709
 if (!$194) {
  $$1$2 = $$1$1; //@line 712
  $210 = $197; //@line 712
 } else {
  if (!$197) {
   $199 = HEAP32[$194 + 56 >> 2] | 0; //@line 717
   if (!$199) {
    $240 = 0; //@line 720
   } else {
    if ((HEAP32[$194 + 8 >> 2] | 0) == ($18 | 0)) {
     HEAP32[$118 >> 2] = $199; //@line 726
     HEAP32[$119 >> 2] = HEAP32[$194 + 60 >> 2]; //@line 729
     $240 = $199; //@line 730
    } else {
     $240 = 0; //@line 732
    }
   }
  } else {
   $240 = $197; //@line 736
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 739
  $210 = $240; //@line 739
 }
 $207 = HEAP32[1963] | 0; //@line 741
 if (!$207) {
  $$1$3 = $$1$2; //@line 744
  $223 = $210; //@line 744
 } else {
  if (!$210) {
   $212 = HEAP32[$207 + 56 >> 2] | 0; //@line 749
   if (!$212) {
    $241 = 0; //@line 752
   } else {
    if ((HEAP32[$207 + 8 >> 2] | 0) == ($18 | 0)) {
     HEAP32[$118 >> 2] = $212; //@line 758
     HEAP32[$119 >> 2] = HEAP32[$207 + 60 >> 2]; //@line 761
     $241 = $212; //@line 762
    } else {
     $241 = 0; //@line 764
    }
   }
  } else {
   $241 = $210; //@line 768
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 771
  $223 = $241; //@line 771
 }
 $220 = HEAP32[1964] | 0; //@line 773
 if (!$220) {
  HEAP32[7840 + ($16 << 2) >> 2] = $2; //@line 777
  HEAP32[$126 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 780
  if (!$$1$3) {
   $142 = $2 + 44 | 0; //@line 783
   $143 = HEAP32[$142 >> 2] | 0; //@line 784
   if (!$143) {
    $159 = $4 + 12 | 0; //@line 787
    HEAP32[$159 >> 2] = 0; //@line 788
    $161 = $10 + 4 | 0; //@line 790
    HEAP32[$161 >> 2] = 0; //@line 792
    HEAP32[$161 + 4 >> 2] = 0; //@line 795
    HEAP32[$10 >> 2] = 3; //@line 796
    $165 = $10 + 12 | 0; //@line 797
    HEAP32[$165 >> 2] = 752; //@line 798
    $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 799
    $166 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $10) | 0; //@line 800
    if (___async) {
     HEAP32[$ReallocAsyncCtx19 >> 2] = 179; //@line 803
     $167 = $ReallocAsyncCtx19 + 4 | 0; //@line 804
     HEAP32[$167 >> 2] = $4; //@line 805
     $168 = $ReallocAsyncCtx19 + 8 | 0; //@line 806
     HEAP32[$168 >> 2] = $2; //@line 807
     $169 = $ReallocAsyncCtx19 + 12 | 0; //@line 808
     HEAP32[$169 >> 2] = $30; //@line 809
     $170 = $ReallocAsyncCtx19 + 16 | 0; //@line 810
     HEAP32[$170 >> 2] = $6; //@line 811
     $171 = $ReallocAsyncCtx19 + 20 | 0; //@line 812
     HEAP32[$171 >> 2] = $73; //@line 813
     $172 = $ReallocAsyncCtx19 + 24 | 0; //@line 814
     HEAP32[$172 >> 2] = $142; //@line 815
     $173 = $ReallocAsyncCtx19 + 28 | 0; //@line 816
     HEAP32[$173 >> 2] = $14; //@line 817
     $174 = $ReallocAsyncCtx19 + 32 | 0; //@line 818
     HEAP32[$174 >> 2] = $2; //@line 819
     $175 = $ReallocAsyncCtx19 + 36 | 0; //@line 820
     HEAP32[$175 >> 2] = $142; //@line 821
     $176 = $ReallocAsyncCtx19 + 40 | 0; //@line 822
     HEAP32[$176 >> 2] = $8; //@line 823
     $177 = $ReallocAsyncCtx19 + 44 | 0; //@line 824
     HEAP32[$177 >> 2] = $159; //@line 825
     $178 = $ReallocAsyncCtx19 + 48 | 0; //@line 826
     HEAP32[$178 >> 2] = $12; //@line 827
     $179 = $ReallocAsyncCtx19 + 52 | 0; //@line 828
     HEAP32[$179 >> 2] = $10; //@line 829
     $180 = $ReallocAsyncCtx19 + 56 | 0; //@line 830
     HEAP32[$180 >> 2] = $165; //@line 831
     sp = STACKTOP; //@line 832
     return;
    }
    HEAP32[___async_retval >> 2] = $166; //@line 836
    ___async_unwind = 0; //@line 837
    HEAP32[$ReallocAsyncCtx19 >> 2] = 179; //@line 838
    $167 = $ReallocAsyncCtx19 + 4 | 0; //@line 839
    HEAP32[$167 >> 2] = $4; //@line 840
    $168 = $ReallocAsyncCtx19 + 8 | 0; //@line 841
    HEAP32[$168 >> 2] = $2; //@line 842
    $169 = $ReallocAsyncCtx19 + 12 | 0; //@line 843
    HEAP32[$169 >> 2] = $30; //@line 844
    $170 = $ReallocAsyncCtx19 + 16 | 0; //@line 845
    HEAP32[$170 >> 2] = $6; //@line 846
    $171 = $ReallocAsyncCtx19 + 20 | 0; //@line 847
    HEAP32[$171 >> 2] = $73; //@line 848
    $172 = $ReallocAsyncCtx19 + 24 | 0; //@line 849
    HEAP32[$172 >> 2] = $142; //@line 850
    $173 = $ReallocAsyncCtx19 + 28 | 0; //@line 851
    HEAP32[$173 >> 2] = $14; //@line 852
    $174 = $ReallocAsyncCtx19 + 32 | 0; //@line 853
    HEAP32[$174 >> 2] = $2; //@line 854
    $175 = $ReallocAsyncCtx19 + 36 | 0; //@line 855
    HEAP32[$175 >> 2] = $142; //@line 856
    $176 = $ReallocAsyncCtx19 + 40 | 0; //@line 857
    HEAP32[$176 >> 2] = $8; //@line 858
    $177 = $ReallocAsyncCtx19 + 44 | 0; //@line 859
    HEAP32[$177 >> 2] = $159; //@line 860
    $178 = $ReallocAsyncCtx19 + 48 | 0; //@line 861
    HEAP32[$178 >> 2] = $12; //@line 862
    $179 = $ReallocAsyncCtx19 + 52 | 0; //@line 863
    HEAP32[$179 >> 2] = $10; //@line 864
    $180 = $ReallocAsyncCtx19 + 56 | 0; //@line 865
    HEAP32[$180 >> 2] = $165; //@line 866
    sp = STACKTOP; //@line 867
    return;
   } else {
    $146 = HEAP32[$143 + 4 >> 2] | 0; //@line 871
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(52) | 0; //@line 872
    FUNCTION_TABLE_vii[$146 & 7]($4, $73); //@line 873
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 876
     $147 = $ReallocAsyncCtx6 + 4 | 0; //@line 877
     HEAP32[$147 >> 2] = $4; //@line 878
     $148 = $ReallocAsyncCtx6 + 8 | 0; //@line 879
     HEAP32[$148 >> 2] = $2; //@line 880
     $149 = $ReallocAsyncCtx6 + 12 | 0; //@line 881
     HEAP32[$149 >> 2] = $30; //@line 882
     $150 = $ReallocAsyncCtx6 + 16 | 0; //@line 883
     HEAP32[$150 >> 2] = $6; //@line 884
     $151 = $ReallocAsyncCtx6 + 20 | 0; //@line 885
     HEAP32[$151 >> 2] = $73; //@line 886
     $152 = $ReallocAsyncCtx6 + 24 | 0; //@line 887
     HEAP32[$152 >> 2] = $142; //@line 888
     $153 = $ReallocAsyncCtx6 + 28 | 0; //@line 889
     HEAP32[$153 >> 2] = $2; //@line 890
     $154 = $ReallocAsyncCtx6 + 32 | 0; //@line 891
     HEAP32[$154 >> 2] = $142; //@line 892
     $155 = $ReallocAsyncCtx6 + 36 | 0; //@line 893
     HEAP32[$155 >> 2] = $8; //@line 894
     $156 = $ReallocAsyncCtx6 + 40 | 0; //@line 895
     HEAP32[$156 >> 2] = $10; //@line 896
     $157 = $ReallocAsyncCtx6 + 44 | 0; //@line 897
     HEAP32[$157 >> 2] = $12; //@line 898
     $158 = $ReallocAsyncCtx6 + 48 | 0; //@line 899
     HEAP32[$158 >> 2] = $14; //@line 900
     sp = STACKTOP; //@line 901
     return;
    }
    ___async_unwind = 0; //@line 904
    HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 905
    $147 = $ReallocAsyncCtx6 + 4 | 0; //@line 906
    HEAP32[$147 >> 2] = $4; //@line 907
    $148 = $ReallocAsyncCtx6 + 8 | 0; //@line 908
    HEAP32[$148 >> 2] = $2; //@line 909
    $149 = $ReallocAsyncCtx6 + 12 | 0; //@line 910
    HEAP32[$149 >> 2] = $30; //@line 911
    $150 = $ReallocAsyncCtx6 + 16 | 0; //@line 912
    HEAP32[$150 >> 2] = $6; //@line 913
    $151 = $ReallocAsyncCtx6 + 20 | 0; //@line 914
    HEAP32[$151 >> 2] = $73; //@line 915
    $152 = $ReallocAsyncCtx6 + 24 | 0; //@line 916
    HEAP32[$152 >> 2] = $142; //@line 917
    $153 = $ReallocAsyncCtx6 + 28 | 0; //@line 918
    HEAP32[$153 >> 2] = $2; //@line 919
    $154 = $ReallocAsyncCtx6 + 32 | 0; //@line 920
    HEAP32[$154 >> 2] = $142; //@line 921
    $155 = $ReallocAsyncCtx6 + 36 | 0; //@line 922
    HEAP32[$155 >> 2] = $8; //@line 923
    $156 = $ReallocAsyncCtx6 + 40 | 0; //@line 924
    HEAP32[$156 >> 2] = $10; //@line 925
    $157 = $ReallocAsyncCtx6 + 44 | 0; //@line 926
    HEAP32[$157 >> 2] = $12; //@line 927
    $158 = $ReallocAsyncCtx6 + 48 | 0; //@line 928
    HEAP32[$158 >> 2] = $14; //@line 929
    sp = STACKTOP; //@line 930
    return;
   }
  }
 } else {
  if (!$223) {
   $225 = HEAP32[$220 + 56 >> 2] | 0; //@line 938
   if ($225 | 0) {
    if ((HEAP32[$220 + 8 >> 2] | 0) == ($18 | 0)) {
     HEAP32[$118 >> 2] = $225; //@line 945
     HEAP32[$119 >> 2] = HEAP32[$220 + 60 >> 2]; //@line 948
    }
   }
  }
  HEAP32[7840 + ($16 << 2) >> 2] = $2; //@line 953
  HEAP32[$126 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 956
 }
 HEAP32[___async_retval >> 2] = $$; //@line 959
 return;
}
function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $134 = 0, $136 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $289 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8368
 STACKTOP = STACKTOP + 512 | 0; //@line 8369
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 8369
 $6 = sp; //@line 8370
 $sum = $3 + $2 | 0; //@line 8371
 $7 = 0 - $sum | 0; //@line 8372
 $8 = $0 + 4 | 0; //@line 8373
 $9 = $0 + 100 | 0; //@line 8374
 $$0329 = $1; //@line 8375
 $$0396 = 0; //@line 8375
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6; //@line 8379
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0; //@line 8387
    $$2 = $$0329; //@line 8387
    $$2398 = $$0396; //@line 8387
    $368 = 0; //@line 8387
    $369 = 0; //@line 8387
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0; //@line 8391
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1; //@line 8396
   $$0329 = HEAPU8[$10 >> 0] | 0; //@line 8399
   $$0396 = 1; //@line 8399
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0; //@line 8403
   $$0396 = 1; //@line 8403
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 8408
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1; //@line 8413
   $$1330$ph = HEAPU8[$17 >> 0] | 0; //@line 8416
  } else {
   $$1330$ph = ___shgetc($0) | 0; //@line 8419
  }
  if (($$1330$ph | 0) == 48) {
   $25 = 0; //@line 8423
   $26 = 0; //@line 8423
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0; //@line 8425
    $28 = tempRet0; //@line 8426
    $29 = HEAP32[$8 >> 2] | 0; //@line 8427
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1; //@line 8432
     $$1330$be = HEAPU8[$29 >> 0] | 0; //@line 8435
    } else {
     $$1330$be = ___shgetc($0) | 0; //@line 8438
    }
    if (($$1330$be | 0) == 48) {
     $25 = $27; //@line 8442
     $26 = $28; //@line 8442
    } else {
     $$0393 = 1; //@line 8444
     $$2 = $$1330$be; //@line 8444
     $$2398 = 1; //@line 8444
     $368 = $27; //@line 8444
     $369 = $28; //@line 8444
     break;
    }
   }
  } else {
   $$0393 = 1; //@line 8449
   $$2 = $$1330$ph; //@line 8449
   $$2398 = $$0396; //@line 8449
   $368 = 0; //@line 8449
   $369 = 0; //@line 8449
  }
 }
 HEAP32[$6 >> 2] = 0; //@line 8452
 $37 = $$2 + -48 | 0; //@line 8453
 $39 = ($$2 | 0) == 46; //@line 8455
 L20 : do {
  if ($39 | $37 >>> 0 < 10) {
   $41 = $6 + 496 | 0; //@line 8459
   $$0341511 = 0; //@line 8460
   $$0345510 = 0; //@line 8460
   $$0401507 = 0; //@line 8460
   $$1394509 = $$0393; //@line 8460
   $$3399508 = $$2398; //@line 8460
   $$3512 = $$2; //@line 8460
   $370 = $39; //@line 8460
   $371 = $37; //@line 8460
   $372 = $368; //@line 8460
   $373 = $369; //@line 8460
   $44 = 0; //@line 8460
   $45 = 0; //@line 8460
   L22 : while (1) {
    do {
     if ($370) {
      if (!$$1394509) {
       $$2343 = $$0341511; //@line 8466
       $$2347 = $$0345510; //@line 8466
       $$2395 = 1; //@line 8466
       $$2403 = $$0401507; //@line 8466
       $$4400 = $$3399508; //@line 8466
       $374 = $44; //@line 8466
       $375 = $45; //@line 8466
       $376 = $44; //@line 8466
       $377 = $45; //@line 8466
      } else {
       break L22;
      }
     } else {
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0; //@line 8472
      $47 = tempRet0; //@line 8473
      $48 = ($$3512 | 0) != 48; //@line 8474
      if (($$0345510 | 0) >= 125) {
       if (!$48) {
        $$2343 = $$0341511; //@line 8477
        $$2347 = $$0345510; //@line 8477
        $$2395 = $$1394509; //@line 8477
        $$2403 = $$0401507; //@line 8477
        $$4400 = $$3399508; //@line 8477
        $374 = $372; //@line 8477
        $375 = $373; //@line 8477
        $376 = $46; //@line 8477
        $377 = $47; //@line 8477
        break;
       }
       HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1; //@line 8482
       $$2343 = $$0341511; //@line 8483
       $$2347 = $$0345510; //@line 8483
       $$2395 = $$1394509; //@line 8483
       $$2403 = $$0401507; //@line 8483
       $$4400 = $$3399508; //@line 8483
       $374 = $372; //@line 8483
       $375 = $373; //@line 8483
       $376 = $46; //@line 8483
       $377 = $47; //@line 8483
       break;
      }
      $$pre551 = $6 + ($$0345510 << 2) | 0; //@line 8488
      if (!$$0341511) {
       $$sink = $371; //@line 8490
      } else {
       $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0; //@line 8496
      }
      HEAP32[$$pre551 >> 2] = $$sink; //@line 8498
      $54 = $$0341511 + 1 | 0; //@line 8499
      $55 = ($54 | 0) == 9; //@line 8500
      $$2343 = $55 ? 0 : $54; //@line 8504
      $$2347 = $$0345510 + ($55 & 1) | 0; //@line 8504
      $$2395 = $$1394509; //@line 8504
      $$2403 = $48 ? $46 : $$0401507; //@line 8504
      $$4400 = 1; //@line 8504
      $374 = $372; //@line 8504
      $375 = $373; //@line 8504
      $376 = $46; //@line 8504
      $377 = $47; //@line 8504
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0; //@line 8507
    if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $59 + 1; //@line 8512
     $$3$be = HEAPU8[$59 >> 0] | 0; //@line 8515
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 8518
    }
    $371 = $$3$be + -48 | 0; //@line 8520
    $370 = ($$3$be | 0) == 46; //@line 8522
    if (!($370 | $371 >>> 0 < 10)) {
     $$0341$lcssa = $$2343; //@line 8527
     $$0345$lcssa = $$2347; //@line 8527
     $$0401$lcssa = $$2403; //@line 8527
     $$1394$lcssa = $$2395; //@line 8527
     $$3$lcssa = $$3$be; //@line 8527
     $$3399$lcssa = $$4400; //@line 8527
     $72 = $376; //@line 8527
     $73 = $374; //@line 8527
     $75 = $377; //@line 8527
     $76 = $375; //@line 8527
     label = 29; //@line 8528
     break L20;
    } else {
     $$0341511 = $$2343; //@line 8525
     $$0345510 = $$2347; //@line 8525
     $$0401507 = $$2403; //@line 8525
     $$1394509 = $$2395; //@line 8525
     $$3399508 = $$4400; //@line 8525
     $$3512 = $$3$be; //@line 8525
     $372 = $374; //@line 8525
     $373 = $375; //@line 8525
     $44 = $376; //@line 8525
     $45 = $377; //@line 8525
    }
   }
   $$0341463 = $$0341511; //@line 8533
   $$0345467 = $$0345510; //@line 8533
   $$0401473 = $$0401507; //@line 8533
   $378 = $44; //@line 8533
   $379 = $45; //@line 8533
   $380 = $372; //@line 8533
   $381 = $373; //@line 8533
   $382 = ($$3399508 | 0) != 0; //@line 8533
   label = 37; //@line 8534
  } else {
   $$0341$lcssa = 0; //@line 8536
   $$0345$lcssa = 0; //@line 8536
   $$0401$lcssa = 0; //@line 8536
   $$1394$lcssa = $$0393; //@line 8536
   $$3$lcssa = $$2; //@line 8536
   $$3399$lcssa = $$2398; //@line 8536
   $72 = 0; //@line 8536
   $73 = $368; //@line 8536
   $75 = 0; //@line 8536
   $76 = $369; //@line 8536
   label = 29; //@line 8537
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0; //@line 8542
   $71 = $70 ? $72 : $73; //@line 8543
   $74 = $70 ? $75 : $76; //@line 8544
   $77 = ($$3399$lcssa | 0) != 0; //@line 8545
   if (!($77 & ($$3$lcssa | 32 | 0) == 101)) {
    if (($$3$lcssa | 0) > -1) {
     $$0341463 = $$0341$lcssa; //@line 8552
     $$0345467 = $$0345$lcssa; //@line 8552
     $$0401473 = $$0401$lcssa; //@line 8552
     $378 = $72; //@line 8552
     $379 = $75; //@line 8552
     $380 = $71; //@line 8552
     $381 = $74; //@line 8552
     $382 = $77; //@line 8552
     label = 37; //@line 8553
     break;
    } else {
     $$0341462 = $$0341$lcssa; //@line 8556
     $$0345466 = $$0345$lcssa; //@line 8556
     $$0401472 = $$0401$lcssa; //@line 8556
     $383 = $72; //@line 8556
     $384 = $75; //@line 8556
     $385 = $77; //@line 8556
     $386 = $71; //@line 8556
     $387 = $74; //@line 8556
     label = 39; //@line 8557
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0; //@line 8561
   $81 = tempRet0; //@line 8562
   if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
    if (!$5) {
     ___shlim($0, 0); //@line 8569
     $$1 = 0.0; //@line 8570
     break;
    }
    if (!(HEAP32[$9 >> 2] | 0)) {
     $90 = 0; //@line 8576
     $91 = 0; //@line 8576
    } else {
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8580
     $90 = 0; //@line 8581
     $91 = 0; //@line 8581
    }
   } else {
    $90 = $80; //@line 8584
    $91 = $81; //@line 8584
   }
   $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0; //@line 8586
   $$0341461 = $$0341$lcssa; //@line 8588
   $$0345465 = $$0345$lcssa; //@line 8588
   $$0401471 = $$0401$lcssa; //@line 8588
   $105 = $92; //@line 8588
   $106 = $72; //@line 8588
   $108 = tempRet0; //@line 8588
   $109 = $75; //@line 8588
   label = 41; //@line 8589
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!(HEAP32[$9 >> 2] | 0)) {
   $$0341462 = $$0341463; //@line 8596
   $$0345466 = $$0345467; //@line 8596
   $$0401472 = $$0401473; //@line 8596
   $383 = $378; //@line 8596
   $384 = $379; //@line 8596
   $385 = $382; //@line 8596
   $386 = $380; //@line 8596
   $387 = $381; //@line 8596
   label = 39; //@line 8597
  } else {
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8601
   if ($382) {
    $$0341461 = $$0341463; //@line 8603
    $$0345465 = $$0345467; //@line 8603
    $$0401471 = $$0401473; //@line 8603
    $105 = $380; //@line 8603
    $106 = $378; //@line 8603
    $108 = $381; //@line 8603
    $109 = $379; //@line 8603
    label = 41; //@line 8604
   } else {
    label = 40; //@line 8606
   }
  }
 }
 if ((label | 0) == 39) {
  if ($385) {
   $$0341461 = $$0341462; //@line 8612
   $$0345465 = $$0345466; //@line 8612
   $$0401471 = $$0401472; //@line 8612
   $105 = $386; //@line 8612
   $106 = $383; //@line 8612
   $108 = $387; //@line 8612
   $109 = $384; //@line 8612
   label = 41; //@line 8613
  } else {
   label = 40; //@line 8615
  }
 }
 do {
  if ((label | 0) == 40) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 8621
   ___shlim($0, 0); //@line 8622
   $$1 = 0.0; //@line 8623
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0; //@line 8626
   if (!$100) {
    $$1 = +($4 | 0) * 0.0; //@line 8631
    break;
   }
   if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) {
    if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
     $$1 = +($4 | 0) * +($100 >>> 0); //@line 8652
     break;
    }
   }
   $122 = ($3 | 0) / -2 | 0; //@line 8656
   $124 = (($122 | 0) < 0) << 31 >> 31; //@line 8658
   if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8666
    $$1 = +($4 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8670
    break;
   }
   $134 = $3 + -106 | 0; //@line 8673
   $136 = (($134 | 0) < 0) << 31 >> 31; //@line 8675
   if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8683
    $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8687
    break;
   }
   if (!$$0341461) {
    $$3348 = $$0345465; //@line 8692
   } else {
    if (($$0341461 | 0) < 9) {
     $148 = $6 + ($$0345465 << 2) | 0; //@line 8696
     $$3344501 = $$0341461; //@line 8698
     $150 = HEAP32[$148 >> 2] | 0; //@line 8698
     while (1) {
      $150 = $150 * 10 | 0; //@line 8700
      if (($$3344501 | 0) >= 8) {
       break;
      } else {
       $$3344501 = $$3344501 + 1 | 0; //@line 8704
      }
     }
     HEAP32[$148 >> 2] = $150; //@line 8709
    }
    $$3348 = $$0345465 + 1 | 0; //@line 8712
   }
   if (($$0401471 | 0) < 9) {
    if (($$0401471 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
     if (($105 | 0) == 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0); //@line 8726
      break;
     }
     if (($105 | 0) < 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[2356 + (8 - $105 << 2) >> 2] | 0); //@line 8740
      break;
     }
     $172 = $2 + 27 + (Math_imul($105, -3) | 0) | 0; //@line 8745
     $$pre = HEAP32[$6 >> 2] | 0; //@line 8747
     if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
      $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[2356 + ($105 + -10 << 2) >> 2] | 0); //@line 8760
      break;
     }
    }
   }
   $184 = ($105 | 0) % 9 | 0; //@line 8765
   if (!$184) {
    $$0380$ph = 0; //@line 8768
    $$1373$ph446 = $$3348; //@line 8768
    $$2352$ph447 = 0; //@line 8768
    $$2387$ph445 = $105; //@line 8768
   } else {
    $188 = ($105 | 0) > -1 ? $184 : $184 + 9 | 0; //@line 8772
    $191 = HEAP32[2356 + (8 - $188 << 2) >> 2] | 0; //@line 8775
    if (!$$3348) {
     $$0350$lcssa553 = 0; //@line 8778
     $$0372 = 0; //@line 8778
     $$0385$lcssa552 = $105; //@line 8778
    } else {
     $193 = 1e9 / ($191 | 0) | 0; //@line 8780
     $$0340494 = 0; //@line 8781
     $$0350492 = 0; //@line 8781
     $$0385491 = $105; //@line 8781
     $$4349493 = 0; //@line 8781
     do {
      $194 = $6 + ($$4349493 << 2) | 0; //@line 8783
      $195 = HEAP32[$194 >> 2] | 0; //@line 8784
      $198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0; //@line 8787
      HEAP32[$194 >> 2] = $198; //@line 8788
      $$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0; //@line 8789
      $or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0; //@line 8792
      $$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491; //@line 8796
      $$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492; //@line 8797
      $$4349493 = $$4349493 + 1 | 0; //@line 8798
     } while (($$4349493 | 0) != ($$3348 | 0));
     if (!$$0340494) {
      $$0350$lcssa553 = $$0350492; //@line 8808
      $$0372 = $$3348; //@line 8808
      $$0385$lcssa552 = $$0385491; //@line 8808
     } else {
      HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494; //@line 8812
      $$0350$lcssa553 = $$0350492; //@line 8813
      $$0372 = $$3348 + 1 | 0; //@line 8813
      $$0385$lcssa552 = $$0385491; //@line 8813
     }
    }
    $$0380$ph = 0; //@line 8818
    $$1373$ph446 = $$0372; //@line 8818
    $$2352$ph447 = $$0350$lcssa553; //@line 8818
    $$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0; //@line 8818
   }
   L101 : while (1) {
    $212 = ($$2387$ph445 | 0) < 18; //@line 8821
    $213 = ($$2387$ph445 | 0) == 18; //@line 8822
    $214 = $6 + ($$2352$ph447 << 2) | 0; //@line 8823
    $$0380 = $$0380$ph; //@line 8824
    $$1373 = $$1373$ph446; //@line 8824
    while (1) {
     if (!$212) {
      if (!$213) {
       $$1381$ph = $$0380; //@line 8828
       $$4354$ph = $$2352$ph447; //@line 8828
       $$4389$ph443 = $$2387$ph445; //@line 8828
       $$6378$ph = $$1373; //@line 8828
       break L101;
      }
      if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
       $$1381$ph = $$0380; //@line 8834
       $$4354$ph = $$2352$ph447; //@line 8834
       $$4389$ph443 = 18; //@line 8834
       $$6378$ph = $$1373; //@line 8834
       break L101;
      }
     }
     $$0334 = 0; //@line 8839
     $$2374 = $$1373; //@line 8839
     $$5$in = $$1373 + 127 | 0; //@line 8839
     while (1) {
      $$5 = $$5$in & 127; //@line 8841
      $218 = $6 + ($$5 << 2) | 0; //@line 8842
      $220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0; //@line 8844
      $222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0; //@line 8846
      $223 = tempRet0; //@line 8847
      if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
       $229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8854
       $231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8856
       $$1335 = $229; //@line 8858
       $$sink419$off0 = $231; //@line 8858
      } else {
       $$1335 = 0; //@line 8860
       $$sink419$off0 = $222; //@line 8860
      }
      HEAP32[$218 >> 2] = $$sink419$off0; //@line 8862
      $236 = ($$5 | 0) == ($$2352$ph447 | 0); //@line 8866
      $$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374; //@line 8871
      if ($236) {
       break;
      } else {
       $$0334 = $$1335; //@line 8876
       $$5$in = $$5 + -1 | 0; //@line 8876
      }
     }
     $$0380 = $$0380 + -29 | 0; //@line 8879
     if ($$1335 | 0) {
      break;
     } else {
      $$1373 = $$2374; //@line 8882
     }
    }
    $243 = $$2352$ph447 + 127 & 127; //@line 8889
    $246 = $$2374 + 127 & 127; //@line 8892
    $249 = $6 + (($$2374 + 126 & 127) << 2) | 0; //@line 8895
    if (($243 | 0) == ($$2374 | 0)) {
     HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2]; //@line 8901
     $$4376 = $246; //@line 8902
    } else {
     $$4376 = $$2374; //@line 8904
    }
    HEAP32[$6 + ($243 << 2) >> 2] = $$1335; //@line 8907
    $$0380$ph = $$0380; //@line 8908
    $$1373$ph446 = $$4376; //@line 8908
    $$2352$ph447 = $243; //@line 8908
    $$2387$ph445 = $$2387$ph445 + 9 | 0; //@line 8908
   }
   L119 : while (1) {
    $289 = $$6378$ph + 1 & 127; //@line 8912
    $294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0; //@line 8915
    $$1381$ph557 = $$1381$ph; //@line 8916
    $$4354$ph558 = $$4354$ph; //@line 8916
    $$4389$ph = $$4389$ph443; //@line 8916
    while (1) {
     $267 = ($$4389$ph | 0) == 18; //@line 8918
     $$423 = ($$4389$ph | 0) > 27 ? 9 : 1; //@line 8920
     $$1381 = $$1381$ph557; //@line 8921
     $$4354 = $$4354$ph558; //@line 8921
     while (1) {
      $$0336484 = 0; //@line 8923
      while (1) {
       $256 = $$0336484 + $$4354 & 127; //@line 8926
       if (($256 | 0) == ($$6378$ph | 0)) {
        $$1337 = 2; //@line 8929
        label = 88; //@line 8930
        break;
       }
       $259 = HEAP32[$6 + ($256 << 2) >> 2] | 0; //@line 8934
       $261 = HEAP32[2388 + ($$0336484 << 2) >> 2] | 0; //@line 8936
       if ($259 >>> 0 < $261 >>> 0) {
        $$1337 = 2; //@line 8939
        label = 88; //@line 8940
        break;
       }
       if ($259 >>> 0 > $261 >>> 0) {
        break;
       }
       $264 = $$0336484 + 1 | 0; //@line 8947
       if (($$0336484 | 0) < 1) {
        $$0336484 = $264; //@line 8950
       } else {
        $$1337 = $264; //@line 8952
        label = 88; //@line 8953
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0; //@line 8958
       if ($267 & ($$1337 | 0) == 2) {
        $$0365482 = 0.0; //@line 8962
        $$4483 = 0; //@line 8962
        $$9481 = $$6378$ph; //@line 8962
        break L119;
       }
      }
      $268 = $$423 + $$1381 | 0; //@line 8966
      if (($$4354 | 0) == ($$6378$ph | 0)) {
       $$1381 = $268; //@line 8969
       $$4354 = $$6378$ph; //@line 8969
      } else {
       break;
      }
     }
     $271 = (1 << $$423) + -1 | 0; //@line 8975
     $272 = 1e9 >>> $$423; //@line 8976
     $$0332488 = 0; //@line 8977
     $$5355486 = $$4354; //@line 8977
     $$5390485 = $$4389$ph; //@line 8977
     $$6487 = $$4354; //@line 8977
     do {
      $273 = $6 + ($$6487 << 2) | 0; //@line 8979
      $274 = HEAP32[$273 >> 2] | 0; //@line 8980
      $277 = ($274 >>> $$423) + $$0332488 | 0; //@line 8983
      HEAP32[$273 >> 2] = $277; //@line 8984
      $$0332488 = Math_imul($274 & $271, $272) | 0; //@line 8985
      $or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0; //@line 8988
      $$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485; //@line 8992
      $$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486; //@line 8993
      $$6487 = $$6487 + 1 & 127; //@line 8995
     } while (($$6487 | 0) != ($$6378$ph | 0));
     if (!$$0332488) {
      $$1381$ph557 = $268; //@line 9005
      $$4354$ph558 = $$5355486; //@line 9005
      $$4389$ph = $$5390485; //@line 9005
      continue;
     }
     if (($289 | 0) != ($$5355486 | 0)) {
      break;
     }
     HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1; //@line 9014
     $$1381$ph557 = $268; //@line 9015
     $$4354$ph558 = $$5355486; //@line 9015
     $$4389$ph = $$5390485; //@line 9015
    }
    HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488; //@line 9018
    $$1381$ph = $268; //@line 9019
    $$4354$ph = $$5355486; //@line 9019
    $$4389$ph443 = $$5390485; //@line 9019
    $$6378$ph = $289; //@line 9019
   }
   while (1) {
    $299 = $$4483 + $$4354 & 127; //@line 9023
    $302 = $$9481 + 1 & 127; //@line 9026
    if (($299 | 0) == ($$9481 | 0)) {
     HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0; //@line 9030
     $$10 = $302; //@line 9031
    } else {
     $$10 = $$9481; //@line 9033
    }
    $$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0); //@line 9039
    $$4483 = $$4483 + 1 | 0; //@line 9040
    if (($$4483 | 0) == 2) {
     break;
    } else {
     $$9481 = $$10; //@line 9045
    }
   }
   $311 = +($4 | 0); //@line 9048
   $312 = $$0365482 * $311; //@line 9049
   $313 = $$1381 + 53 | 0; //@line 9050
   $314 = $313 - $3 | 0; //@line 9051
   $315 = ($314 | 0) < ($2 | 0); //@line 9052
   $$0333 = $315 ? ($314 | 0) > 0 ? $314 : 0 : $2; //@line 9055
   if (($$0333 | 0) < 53) {
    $320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312); //@line 9060
    $323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0)); //@line 9063
    $$0360 = $320; //@line 9066
    $$0361 = $323; //@line 9066
    $$1366 = $320 + ($312 - $323); //@line 9066
   } else {
    $$0360 = 0.0; //@line 9068
    $$0361 = 0.0; //@line 9068
    $$1366 = $312; //@line 9068
   }
   $327 = $$4354 + 2 & 127; //@line 9071
   if (($327 | 0) == ($$10 | 0)) {
    $$3364 = $$0361; //@line 9074
   } else {
    $330 = HEAP32[$6 + ($327 << 2) >> 2] | 0; //@line 9077
    do {
     if ($330 >>> 0 < 5e8) {
      if (!$330) {
       if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
        $$1362 = $$0361; //@line 9087
        break;
       }
      }
      $$1362 = $311 * .25 + $$0361; //@line 9093
     } else {
      if (($330 | 0) != 5e8) {
       $$1362 = $311 * .75 + $$0361; //@line 9099
       break;
      }
      if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
       $$1362 = $311 * .5 + $$0361; //@line 9108
       break;
      } else {
       $$1362 = $311 * .75 + $$0361; //@line 9113
       break;
      }
     }
    } while (0);
    if ((53 - $$0333 | 0) > 1) {
     if (+_fmodl($$1362, 1.0) != 0.0) {
      $$3364 = $$1362; //@line 9124
     } else {
      $$3364 = $$1362 + 1.0; //@line 9127
     }
    } else {
     $$3364 = $$1362; //@line 9130
    }
   }
   $354 = $$1366 + $$3364 - $$0360; //@line 9134
   do {
    if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
     $359 = !(+Math_abs(+$354) >= 9007199254740992.0); //@line 9141
     $$3383 = $$1381 + (($359 ^ 1) & 1) | 0; //@line 9145
     $$2367 = $359 ? $354 : $354 * .5; //@line 9146
     if (($$3383 + 50 | 0) <= ($7 | 0)) {
      if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
       $$3368 = $$2367; //@line 9156
       $$4384 = $$3383; //@line 9156
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 9161
     $$3368 = $$2367; //@line 9162
     $$4384 = $$3383; //@line 9162
    } else {
     $$3368 = $354; //@line 9164
     $$4384 = $$1381; //@line 9164
    }
   } while (0);
   $$1 = +_scalbnl($$3368, $$4384); //@line 9168
  }
 } while (0);
 STACKTOP = sp; //@line 9171
 return +$$1;
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11540
 STACKTOP = STACKTOP + 560 | 0; //@line 11541
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 11541
 $6 = sp + 8 | 0; //@line 11542
 $7 = sp; //@line 11543
 $8 = sp + 524 | 0; //@line 11544
 $9 = $8; //@line 11545
 $10 = sp + 512 | 0; //@line 11546
 HEAP32[$7 >> 2] = 0; //@line 11547
 $11 = $10 + 12 | 0; //@line 11548
 ___DOUBLE_BITS_677($1) | 0; //@line 11549
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 11554
  $$0520 = 1; //@line 11554
  $$0521 = 5075; //@line 11554
 } else {
  $$0471 = $1; //@line 11565
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 11565
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 5076 : 5081 : 5078; //@line 11565
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 11567
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 11576
   $31 = $$0520 + 3 | 0; //@line 11581
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 11583
   _out_670($0, $$0521, $$0520); //@line 11584
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 5102 : 5106 : $27 ? 5094 : 5098, 3); //@line 11585
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 11587
   $$sink560 = $31; //@line 11588
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 11591
   $36 = $35 != 0.0; //@line 11592
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 11596
   }
   $39 = $5 | 32; //@line 11598
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 11601
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 11604
    $44 = $$0520 | 2; //@line 11605
    $46 = 12 - $3 | 0; //@line 11607
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 11612
     } else {
      $$0509585 = 8.0; //@line 11614
      $$1508586 = $46; //@line 11614
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 11616
       $$0509585 = $$0509585 * 16.0; //@line 11617
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 11632
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 11637
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 11642
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 11645
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 11648
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 11651
     HEAP8[$68 >> 0] = 48; //@line 11652
     $$0511 = $68; //@line 11653
    } else {
     $$0511 = $66; //@line 11655
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 11662
    $76 = $$0511 + -2 | 0; //@line 11665
    HEAP8[$76 >> 0] = $5 + 15; //@line 11666
    $77 = ($3 | 0) < 1; //@line 11667
    $79 = ($4 & 8 | 0) == 0; //@line 11669
    $$0523 = $8; //@line 11670
    $$2473 = $$1472; //@line 11670
    while (1) {
     $80 = ~~$$2473; //@line 11672
     $86 = $$0523 + 1 | 0; //@line 11678
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[5110 + $80 >> 0]; //@line 11679
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 11682
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 11691
      } else {
       HEAP8[$86 >> 0] = 46; //@line 11694
       $$1524 = $$0523 + 2 | 0; //@line 11695
      }
     } else {
      $$1524 = $86; //@line 11698
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 11702
     }
    }
    $$pre693 = $$1524; //@line 11708
    if (!$3) {
     label = 24; //@line 11710
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 11718
      $$sink = $3 + 2 | 0; //@line 11718
     } else {
      label = 24; //@line 11720
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 11724
     $$pre$phi691Z2D = $101; //@line 11725
     $$sink = $101; //@line 11725
    }
    $104 = $11 - $76 | 0; //@line 11729
    $106 = $104 + $44 + $$sink | 0; //@line 11731
    _pad_676($0, 32, $2, $106, $4); //@line 11732
    _out_670($0, $$0521$, $44); //@line 11733
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 11735
    _out_670($0, $8, $$pre$phi691Z2D); //@line 11736
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 11738
    _out_670($0, $76, $104); //@line 11739
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 11741
    $$sink560 = $106; //@line 11742
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 11746
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 11750
    HEAP32[$7 >> 2] = $113; //@line 11751
    $$3 = $35 * 268435456.0; //@line 11752
    $$pr = $113; //@line 11752
   } else {
    $$3 = $35; //@line 11755
    $$pr = HEAP32[$7 >> 2] | 0; //@line 11755
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 11759
   $$0498 = $$561; //@line 11760
   $$4 = $$3; //@line 11760
   do {
    $116 = ~~$$4 >>> 0; //@line 11762
    HEAP32[$$0498 >> 2] = $116; //@line 11763
    $$0498 = $$0498 + 4 | 0; //@line 11764
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 11767
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 11777
    $$1499662 = $$0498; //@line 11777
    $124 = $$pr; //@line 11777
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 11780
     $$0488655 = $$1499662 + -4 | 0; //@line 11781
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 11784
     } else {
      $$0488657 = $$0488655; //@line 11786
      $$0497656 = 0; //@line 11786
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 11789
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 11791
       $131 = tempRet0; //@line 11792
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11793
       HEAP32[$$0488657 >> 2] = $132; //@line 11795
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11796
       $$0488657 = $$0488657 + -4 | 0; //@line 11798
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 11808
      } else {
       $138 = $$1482663 + -4 | 0; //@line 11810
       HEAP32[$138 >> 2] = $$0497656; //@line 11811
       $$2483$ph = $138; //@line 11812
      }
     }
     $$2500 = $$1499662; //@line 11815
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 11821
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 11825
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 11831
     HEAP32[$7 >> 2] = $144; //@line 11832
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 11835
      $$1499662 = $$2500; //@line 11835
      $124 = $144; //@line 11835
     } else {
      $$1482$lcssa = $$2483$ph; //@line 11837
      $$1499$lcssa = $$2500; //@line 11837
      $$pr566 = $144; //@line 11837
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 11842
    $$1499$lcssa = $$0498; //@line 11842
    $$pr566 = $$pr; //@line 11842
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 11848
    $150 = ($39 | 0) == 102; //@line 11849
    $$3484650 = $$1482$lcssa; //@line 11850
    $$3501649 = $$1499$lcssa; //@line 11850
    $152 = $$pr566; //@line 11850
    while (1) {
     $151 = 0 - $152 | 0; //@line 11852
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 11854
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 11858
      $161 = 1e9 >>> $154; //@line 11859
      $$0487644 = 0; //@line 11860
      $$1489643 = $$3484650; //@line 11860
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 11862
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 11866
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 11867
       $$1489643 = $$1489643 + 4 | 0; //@line 11868
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11879
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 11882
       $$4502 = $$3501649; //@line 11882
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 11885
       $$$3484700 = $$$3484; //@line 11886
       $$4502 = $$3501649 + 4 | 0; //@line 11886
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11893
      $$4502 = $$3501649; //@line 11893
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 11895
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 11902
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 11904
     HEAP32[$7 >> 2] = $152; //@line 11905
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 11910
      $$3501$lcssa = $$$4502; //@line 11910
      break;
     } else {
      $$3484650 = $$$3484700; //@line 11908
      $$3501649 = $$$4502; //@line 11908
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 11915
    $$3501$lcssa = $$1499$lcssa; //@line 11915
   }
   $185 = $$561; //@line 11918
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 11923
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 11924
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 11927
    } else {
     $$0514639 = $189; //@line 11929
     $$0530638 = 10; //@line 11929
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 11931
      $193 = $$0514639 + 1 | 0; //@line 11932
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 11935
       break;
      } else {
       $$0514639 = $193; //@line 11938
      }
     }
    }
   } else {
    $$1515 = 0; //@line 11943
   }
   $198 = ($39 | 0) == 103; //@line 11948
   $199 = ($$540 | 0) != 0; //@line 11949
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 11952
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 11961
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 11964
    $213 = ($209 | 0) % 9 | 0; //@line 11965
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 11968
     $$1531632 = 10; //@line 11968
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 11971
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 11974
       $$1531632 = $215; //@line 11974
      } else {
       $$1531$lcssa = $215; //@line 11976
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 11981
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 11983
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 11984
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 11987
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 11990
     $$4518 = $$1515; //@line 11990
     $$8 = $$3484$lcssa; //@line 11990
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 11995
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 11996
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 12001
     if (!$$0520) {
      $$1467 = $$$564; //@line 12004
      $$1469 = $$543; //@line 12004
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 12007
      $$1467 = $230 ? -$$$564 : $$$564; //@line 12012
      $$1469 = $230 ? -$$543 : $$543; //@line 12012
     }
     $233 = $217 - $218 | 0; //@line 12014
     HEAP32[$212 >> 2] = $233; //@line 12015
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 12019
      HEAP32[$212 >> 2] = $236; //@line 12020
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 12023
       $$sink547625 = $212; //@line 12023
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 12025
        HEAP32[$$sink547625 >> 2] = 0; //@line 12026
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 12029
         HEAP32[$240 >> 2] = 0; //@line 12030
         $$6 = $240; //@line 12031
        } else {
         $$6 = $$5486626; //@line 12033
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 12036
        HEAP32[$238 >> 2] = $242; //@line 12037
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 12040
         $$sink547625 = $238; //@line 12040
        } else {
         $$5486$lcssa = $$6; //@line 12042
         $$sink547$lcssa = $238; //@line 12042
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 12047
       $$sink547$lcssa = $212; //@line 12047
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 12052
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 12053
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 12056
       $$4518 = $247; //@line 12056
       $$8 = $$5486$lcssa; //@line 12056
      } else {
       $$2516621 = $247; //@line 12058
       $$2532620 = 10; //@line 12058
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 12060
        $251 = $$2516621 + 1 | 0; //@line 12061
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 12064
         $$4518 = $251; //@line 12064
         $$8 = $$5486$lcssa; //@line 12064
         break;
        } else {
         $$2516621 = $251; //@line 12067
        }
       }
      }
     } else {
      $$4492 = $212; //@line 12072
      $$4518 = $$1515; //@line 12072
      $$8 = $$3484$lcssa; //@line 12072
     }
    }
    $253 = $$4492 + 4 | 0; //@line 12075
    $$5519$ph = $$4518; //@line 12078
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 12078
    $$9$ph = $$8; //@line 12078
   } else {
    $$5519$ph = $$1515; //@line 12080
    $$7505$ph = $$3501$lcssa; //@line 12080
    $$9$ph = $$3484$lcssa; //@line 12080
   }
   $$7505 = $$7505$ph; //@line 12082
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 12086
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 12089
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 12093
    } else {
     $$lcssa675 = 1; //@line 12095
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 12099
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 12104
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 12112
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 12112
     } else {
      $$0479 = $5 + -2 | 0; //@line 12116
      $$2476 = $$540$ + -1 | 0; //@line 12116
     }
     $267 = $4 & 8; //@line 12118
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 12123
       if (!$270) {
        $$2529 = 9; //@line 12126
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 12131
         $$3533616 = 10; //@line 12131
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 12133
          $275 = $$1528617 + 1 | 0; //@line 12134
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 12140
           break;
          } else {
           $$1528617 = $275; //@line 12138
          }
         }
        } else {
         $$2529 = 0; //@line 12145
        }
       }
      } else {
       $$2529 = 9; //@line 12149
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 12157
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 12159
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 12161
       $$1480 = $$0479; //@line 12164
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 12164
       $$pre$phi698Z2D = 0; //@line 12164
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 12168
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 12170
       $$1480 = $$0479; //@line 12173
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 12173
       $$pre$phi698Z2D = 0; //@line 12173
       break;
      }
     } else {
      $$1480 = $$0479; //@line 12177
      $$3477 = $$2476; //@line 12177
      $$pre$phi698Z2D = $267; //@line 12177
     }
    } else {
     $$1480 = $5; //@line 12181
     $$3477 = $$540; //@line 12181
     $$pre$phi698Z2D = $4 & 8; //@line 12181
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 12184
   $294 = ($292 | 0) != 0 & 1; //@line 12186
   $296 = ($$1480 | 32 | 0) == 102; //@line 12188
   if ($296) {
    $$2513 = 0; //@line 12192
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 12192
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 12195
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 12198
    $304 = $11; //@line 12199
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 12204
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 12206
      HEAP8[$308 >> 0] = 48; //@line 12207
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 12212
      } else {
       $$1512$lcssa = $308; //@line 12214
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 12219
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 12226
    $318 = $$1512$lcssa + -2 | 0; //@line 12228
    HEAP8[$318 >> 0] = $$1480; //@line 12229
    $$2513 = $318; //@line 12232
    $$pn = $304 - $318 | 0; //@line 12232
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 12237
   _pad_676($0, 32, $2, $323, $4); //@line 12238
   _out_670($0, $$0521, $$0520); //@line 12239
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 12241
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 12244
    $326 = $8 + 9 | 0; //@line 12245
    $327 = $326; //@line 12246
    $328 = $8 + 8 | 0; //@line 12247
    $$5493600 = $$0496$$9; //@line 12248
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 12251
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 12256
       $$1465 = $328; //@line 12257
      } else {
       $$1465 = $330; //@line 12259
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 12266
       $$0464597 = $330; //@line 12267
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 12269
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 12272
        } else {
         $$1465 = $335; //@line 12274
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 12279
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 12284
     $$5493600 = $$5493600 + 4 | 0; //@line 12285
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 5126, 1); //@line 12295
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 12301
     $$6494592 = $$5493600; //@line 12301
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 12304
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 12309
       $$0463587 = $347; //@line 12310
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 12312
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 12315
        } else {
         $$0463$lcssa = $351; //@line 12317
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 12322
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 12326
      $$6494592 = $$6494592 + 4 | 0; //@line 12327
      $356 = $$4478593 + -9 | 0; //@line 12328
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 12335
       break;
      } else {
       $$4478593 = $356; //@line 12333
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 12340
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 12343
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 12346
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 12349
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 12350
     $365 = $363; //@line 12351
     $366 = 0 - $9 | 0; //@line 12352
     $367 = $8 + 8 | 0; //@line 12353
     $$5605 = $$3477; //@line 12354
     $$7495604 = $$9$ph; //@line 12354
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 12357
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 12360
       $$0 = $367; //@line 12361
      } else {
       $$0 = $369; //@line 12363
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 12368
        _out_670($0, $$0, 1); //@line 12369
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 12373
         break;
        }
        _out_670($0, 5126, 1); //@line 12376
        $$2 = $375; //@line 12377
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 12381
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 12386
        $$1601 = $$0; //@line 12387
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 12389
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 12392
         } else {
          $$2 = $373; //@line 12394
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 12401
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 12404
      $381 = $$5605 - $378 | 0; //@line 12405
      $$7495604 = $$7495604 + 4 | 0; //@line 12406
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 12413
       break;
      } else {
       $$5605 = $381; //@line 12411
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 12418
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 12421
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 12425
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 12428
   $$sink560 = $323; //@line 12429
  }
 } while (0);
 STACKTOP = sp; //@line 12434
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 12434
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_197($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$191 = 0, $$byval_copy = 0, $$byval_copy22 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $56 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $92 = 0, $95 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15933
 STACKTOP = STACKTOP + 48 | 0; //@line 15934
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 15934
 $$byval_copy22 = sp + 20 | 0; //@line 15935
 $$byval_copy = sp; //@line 15936
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15938
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15940
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15942
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 15944
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15946
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15948
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15950
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15952
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15954
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15956
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15958
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15960
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15962
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15964
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 15966
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 15968
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 15970
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 15972
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 15974
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 15976
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 15978
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 15980
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 15982
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 15984
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 15986
 $52 = HEAP8[$0 + 101 >> 0] | 0; //@line 15988
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $144 = $50 + -1 << 24 >> 24; //@line 15993
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 15994
  $145 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($2, 0, $4, 512) | 0; //@line 15995
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 158; //@line 15998
   $146 = $ReallocAsyncCtx3 + 4 | 0; //@line 15999
   HEAP32[$146 >> 2] = $2; //@line 16000
   $147 = $ReallocAsyncCtx3 + 8 | 0; //@line 16001
   HEAP32[$147 >> 2] = $4; //@line 16002
   $148 = $ReallocAsyncCtx3 + 12 | 0; //@line 16003
   HEAP32[$148 >> 2] = $6; //@line 16004
   $149 = $ReallocAsyncCtx3 + 16 | 0; //@line 16005
   HEAP8[$149 >> 0] = $8; //@line 16006
   $150 = $ReallocAsyncCtx3 + 20 | 0; //@line 16007
   HEAP32[$150 >> 2] = $10; //@line 16008
   $151 = $ReallocAsyncCtx3 + 24 | 0; //@line 16009
   HEAP32[$151 >> 2] = $12; //@line 16010
   $152 = $ReallocAsyncCtx3 + 28 | 0; //@line 16011
   HEAP32[$152 >> 2] = $14; //@line 16012
   $153 = $ReallocAsyncCtx3 + 32 | 0; //@line 16013
   HEAP32[$153 >> 2] = $16; //@line 16014
   $154 = $ReallocAsyncCtx3 + 36 | 0; //@line 16015
   HEAP32[$154 >> 2] = $18; //@line 16016
   $155 = $ReallocAsyncCtx3 + 40 | 0; //@line 16017
   HEAP32[$155 >> 2] = $20; //@line 16018
   $156 = $ReallocAsyncCtx3 + 44 | 0; //@line 16019
   HEAP32[$156 >> 2] = $22; //@line 16020
   $157 = $ReallocAsyncCtx3 + 48 | 0; //@line 16021
   HEAP32[$157 >> 2] = $24; //@line 16022
   $158 = $ReallocAsyncCtx3 + 52 | 0; //@line 16023
   HEAP32[$158 >> 2] = $26; //@line 16024
   $159 = $ReallocAsyncCtx3 + 56 | 0; //@line 16025
   HEAP32[$159 >> 2] = $28; //@line 16026
   $160 = $ReallocAsyncCtx3 + 60 | 0; //@line 16027
   HEAP32[$160 >> 2] = $30; //@line 16028
   $161 = $ReallocAsyncCtx3 + 64 | 0; //@line 16029
   HEAP32[$161 >> 2] = $32; //@line 16030
   $162 = $ReallocAsyncCtx3 + 68 | 0; //@line 16031
   HEAP32[$162 >> 2] = $34; //@line 16032
   $163 = $ReallocAsyncCtx3 + 72 | 0; //@line 16033
   HEAP32[$163 >> 2] = $36; //@line 16034
   $164 = $ReallocAsyncCtx3 + 76 | 0; //@line 16035
   HEAP32[$164 >> 2] = $38; //@line 16036
   $165 = $ReallocAsyncCtx3 + 80 | 0; //@line 16037
   HEAP32[$165 >> 2] = $40; //@line 16038
   $166 = $ReallocAsyncCtx3 + 84 | 0; //@line 16039
   HEAP32[$166 >> 2] = $42; //@line 16040
   $167 = $ReallocAsyncCtx3 + 88 | 0; //@line 16041
   HEAP32[$167 >> 2] = $44; //@line 16042
   $168 = $ReallocAsyncCtx3 + 92 | 0; //@line 16043
   HEAP32[$168 >> 2] = $46; //@line 16044
   $169 = $ReallocAsyncCtx3 + 96 | 0; //@line 16045
   HEAP32[$169 >> 2] = $48; //@line 16046
   $170 = $ReallocAsyncCtx3 + 100 | 0; //@line 16047
   HEAP8[$170 >> 0] = $144; //@line 16048
   $171 = $ReallocAsyncCtx3 + 101 | 0; //@line 16049
   HEAP8[$171 >> 0] = $52; //@line 16050
   sp = STACKTOP; //@line 16051
   STACKTOP = sp; //@line 16052
   return;
  }
  HEAP32[___async_retval >> 2] = $145; //@line 16055
  ___async_unwind = 0; //@line 16056
  HEAP32[$ReallocAsyncCtx3 >> 2] = 158; //@line 16057
  $146 = $ReallocAsyncCtx3 + 4 | 0; //@line 16058
  HEAP32[$146 >> 2] = $2; //@line 16059
  $147 = $ReallocAsyncCtx3 + 8 | 0; //@line 16060
  HEAP32[$147 >> 2] = $4; //@line 16061
  $148 = $ReallocAsyncCtx3 + 12 | 0; //@line 16062
  HEAP32[$148 >> 2] = $6; //@line 16063
  $149 = $ReallocAsyncCtx3 + 16 | 0; //@line 16064
  HEAP8[$149 >> 0] = $8; //@line 16065
  $150 = $ReallocAsyncCtx3 + 20 | 0; //@line 16066
  HEAP32[$150 >> 2] = $10; //@line 16067
  $151 = $ReallocAsyncCtx3 + 24 | 0; //@line 16068
  HEAP32[$151 >> 2] = $12; //@line 16069
  $152 = $ReallocAsyncCtx3 + 28 | 0; //@line 16070
  HEAP32[$152 >> 2] = $14; //@line 16071
  $153 = $ReallocAsyncCtx3 + 32 | 0; //@line 16072
  HEAP32[$153 >> 2] = $16; //@line 16073
  $154 = $ReallocAsyncCtx3 + 36 | 0; //@line 16074
  HEAP32[$154 >> 2] = $18; //@line 16075
  $155 = $ReallocAsyncCtx3 + 40 | 0; //@line 16076
  HEAP32[$155 >> 2] = $20; //@line 16077
  $156 = $ReallocAsyncCtx3 + 44 | 0; //@line 16078
  HEAP32[$156 >> 2] = $22; //@line 16079
  $157 = $ReallocAsyncCtx3 + 48 | 0; //@line 16080
  HEAP32[$157 >> 2] = $24; //@line 16081
  $158 = $ReallocAsyncCtx3 + 52 | 0; //@line 16082
  HEAP32[$158 >> 2] = $26; //@line 16083
  $159 = $ReallocAsyncCtx3 + 56 | 0; //@line 16084
  HEAP32[$159 >> 2] = $28; //@line 16085
  $160 = $ReallocAsyncCtx3 + 60 | 0; //@line 16086
  HEAP32[$160 >> 2] = $30; //@line 16087
  $161 = $ReallocAsyncCtx3 + 64 | 0; //@line 16088
  HEAP32[$161 >> 2] = $32; //@line 16089
  $162 = $ReallocAsyncCtx3 + 68 | 0; //@line 16090
  HEAP32[$162 >> 2] = $34; //@line 16091
  $163 = $ReallocAsyncCtx3 + 72 | 0; //@line 16092
  HEAP32[$163 >> 2] = $36; //@line 16093
  $164 = $ReallocAsyncCtx3 + 76 | 0; //@line 16094
  HEAP32[$164 >> 2] = $38; //@line 16095
  $165 = $ReallocAsyncCtx3 + 80 | 0; //@line 16096
  HEAP32[$165 >> 2] = $40; //@line 16097
  $166 = $ReallocAsyncCtx3 + 84 | 0; //@line 16098
  HEAP32[$166 >> 2] = $42; //@line 16099
  $167 = $ReallocAsyncCtx3 + 88 | 0; //@line 16100
  HEAP32[$167 >> 2] = $44; //@line 16101
  $168 = $ReallocAsyncCtx3 + 92 | 0; //@line 16102
  HEAP32[$168 >> 2] = $46; //@line 16103
  $169 = $ReallocAsyncCtx3 + 96 | 0; //@line 16104
  HEAP32[$169 >> 2] = $48; //@line 16105
  $170 = $ReallocAsyncCtx3 + 100 | 0; //@line 16106
  HEAP8[$170 >> 0] = $144; //@line 16107
  $171 = $ReallocAsyncCtx3 + 101 | 0; //@line 16108
  HEAP8[$171 >> 0] = $52; //@line 16109
  sp = STACKTOP; //@line 16110
  STACKTOP = sp; //@line 16111
  return;
 }
 $56 = $52 + 1 << 24 >> 24; //@line 16113
 HEAP32[$26 >> 2] = 0; //@line 16114
 HEAP32[$26 + 4 >> 2] = 0; //@line 16114
 HEAP32[$26 + 8 >> 2] = 0; //@line 16114
 HEAP32[$26 + 12 >> 2] = 0; //@line 16114
 HEAP32[$26 + 16 >> 2] = 0; //@line 16114
 HEAP32[$$byval_copy >> 2] = HEAP32[$28 >> 2]; //@line 16115
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$28 + 4 >> 2]; //@line 16115
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$28 + 8 >> 2]; //@line 16115
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$28 + 12 >> 2]; //@line 16115
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$28 + 16 >> 2]; //@line 16115
 __ZN13SocketAddressC2E10nsapi_addrt($12, $$byval_copy, 0); //@line 16116
 if (!($50 << 24 >> 24)) {
  _free($4); //@line 16119
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 16120
  $173 = __ZN6Socket5closeEv($30) | 0; //@line 16121
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 16124
   $174 = $ReallocAsyncCtx6 + 4 | 0; //@line 16125
   HEAP32[$174 >> 2] = -3009; //@line 16126
   $175 = $ReallocAsyncCtx6 + 8 | 0; //@line 16127
   HEAP32[$175 >> 2] = $2; //@line 16128
   $176 = $ReallocAsyncCtx6 + 12 | 0; //@line 16129
   HEAP32[$176 >> 2] = $44; //@line 16130
   sp = STACKTOP; //@line 16131
   STACKTOP = sp; //@line 16132
   return;
  }
  HEAP32[___async_retval >> 2] = $173; //@line 16135
  ___async_unwind = 0; //@line 16136
  HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 16137
  $174 = $ReallocAsyncCtx6 + 4 | 0; //@line 16138
  HEAP32[$174 >> 2] = -3009; //@line 16139
  $175 = $ReallocAsyncCtx6 + 8 | 0; //@line 16140
  HEAP32[$175 >> 2] = $2; //@line 16141
  $176 = $ReallocAsyncCtx6 + 12 | 0; //@line 16142
  HEAP32[$176 >> 2] = $44; //@line 16143
  sp = STACKTOP; //@line 16144
  STACKTOP = sp; //@line 16145
  return;
 }
 if (($56 & 255) > 9) {
  $$191 = 0; //@line 16149
 } else {
  if (($56 & 255) < 5) {
   $$191 = $56; //@line 16153
  } else {
   $92 = 648 + ((($56 & 255) + -5 | 0) * 20 | 0) | 0; //@line 16157
   HEAP32[$$byval_copy22 >> 2] = HEAP32[$92 >> 2]; //@line 16158
   HEAP32[$$byval_copy22 + 4 >> 2] = HEAP32[$92 + 4 >> 2]; //@line 16158
   HEAP32[$$byval_copy22 + 8 >> 2] = HEAP32[$92 + 8 >> 2]; //@line 16158
   HEAP32[$$byval_copy22 + 12 >> 2] = HEAP32[$92 + 12 >> 2]; //@line 16158
   HEAP32[$$byval_copy22 + 16 >> 2] = HEAP32[$92 + 16 >> 2]; //@line 16158
   __ZN13SocketAddress8set_addrE10nsapi_addr($12, $$byval_copy22); //@line 16159
   __ZN13SocketAddress8set_portEt($12, 53); //@line 16160
   HEAP8[$4 >> 0] = 0; //@line 16161
   HEAP8[$32 >> 0] = 1; //@line 16162
   HEAP8[$34 >> 0] = 1; //@line 16163
   HEAP8[$36 >> 0] = 0; //@line 16164
   HEAP8[$38 >> 0] = 0; //@line 16165
   HEAP8[$40 >> 0] = 1; //@line 16166
   HEAP8[$42 >> 0] = 0; //@line 16167
   HEAP8[$42 + 1 >> 0] = 0; //@line 16167
   HEAP8[$42 + 2 >> 0] = 0; //@line 16167
   HEAP8[$42 + 3 >> 0] = 0; //@line 16167
   HEAP8[$42 + 4 >> 0] = 0; //@line 16167
   HEAP8[$42 + 5 >> 0] = 0; //@line 16167
   if (!(HEAP8[$14 >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $6; //@line 16171
   } else {
    $$048$i = $14; //@line 16173
    $$sroa$0$0$in47$i = $6; //@line 16173
    while (1) {
     $95 = _strcspn($$048$i, 5126) | 0; //@line 16175
     $97 = $$sroa$0$0$in47$i + 1 | 0; //@line 16177
     HEAP8[$$sroa$0$0$in47$i >> 0] = $95; //@line 16178
     $98 = $95 & 255; //@line 16179
     _memcpy($97 | 0, $$048$i | 0, $98 | 0) | 0; //@line 16180
     $99 = $97 + $98 | 0; //@line 16181
     $$048$i = $$048$i + ($95 + ((HEAP8[$$048$i + $95 >> 0] | 0) == 46 & 1)) | 0; //@line 16187
     if (!(HEAP8[$$048$i >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $99; //@line 16191
      break;
     } else {
      $$sroa$0$0$in47$i = $99; //@line 16194
     }
    }
   }
   HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 16199
   HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 16201
   HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $8; //@line 16203
   HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 16205
   HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 16208
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 16210
   $115 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($2, $12, $4, $$sroa$0$0$in$lcssa$i + 5 - $10 | 0) | 0; //@line 16211
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 16214
    $116 = $ReallocAsyncCtx4 + 4 | 0; //@line 16215
    HEAP32[$116 >> 2] = $2; //@line 16216
    $117 = $ReallocAsyncCtx4 + 8 | 0; //@line 16217
    HEAP32[$117 >> 2] = $4; //@line 16218
    $118 = $ReallocAsyncCtx4 + 12 | 0; //@line 16219
    HEAP32[$118 >> 2] = $6; //@line 16220
    $119 = $ReallocAsyncCtx4 + 16 | 0; //@line 16221
    HEAP8[$119 >> 0] = $8; //@line 16222
    $120 = $ReallocAsyncCtx4 + 20 | 0; //@line 16223
    HEAP32[$120 >> 2] = $10; //@line 16224
    $121 = $ReallocAsyncCtx4 + 24 | 0; //@line 16225
    HEAP32[$121 >> 2] = $12; //@line 16226
    $122 = $ReallocAsyncCtx4 + 28 | 0; //@line 16227
    HEAP32[$122 >> 2] = $14; //@line 16228
    $123 = $ReallocAsyncCtx4 + 32 | 0; //@line 16229
    HEAP32[$123 >> 2] = $16; //@line 16230
    $124 = $ReallocAsyncCtx4 + 36 | 0; //@line 16231
    HEAP32[$124 >> 2] = $18; //@line 16232
    $125 = $ReallocAsyncCtx4 + 40 | 0; //@line 16233
    HEAP32[$125 >> 2] = $20; //@line 16234
    $126 = $ReallocAsyncCtx4 + 44 | 0; //@line 16235
    HEAP32[$126 >> 2] = $22; //@line 16236
    $127 = $ReallocAsyncCtx4 + 48 | 0; //@line 16237
    HEAP32[$127 >> 2] = $24; //@line 16238
    $128 = $ReallocAsyncCtx4 + 52 | 0; //@line 16239
    HEAP32[$128 >> 2] = $26; //@line 16240
    $129 = $ReallocAsyncCtx4 + 56 | 0; //@line 16241
    HEAP32[$129 >> 2] = $28; //@line 16242
    $130 = $ReallocAsyncCtx4 + 60 | 0; //@line 16243
    HEAP32[$130 >> 2] = $30; //@line 16244
    $131 = $ReallocAsyncCtx4 + 64 | 0; //@line 16245
    HEAP32[$131 >> 2] = $32; //@line 16246
    $132 = $ReallocAsyncCtx4 + 68 | 0; //@line 16247
    HEAP32[$132 >> 2] = $34; //@line 16248
    $133 = $ReallocAsyncCtx4 + 72 | 0; //@line 16249
    HEAP32[$133 >> 2] = $36; //@line 16250
    $134 = $ReallocAsyncCtx4 + 76 | 0; //@line 16251
    HEAP32[$134 >> 2] = $38; //@line 16252
    $135 = $ReallocAsyncCtx4 + 80 | 0; //@line 16253
    HEAP32[$135 >> 2] = $40; //@line 16254
    $136 = $ReallocAsyncCtx4 + 84 | 0; //@line 16255
    HEAP32[$136 >> 2] = $42; //@line 16256
    $137 = $ReallocAsyncCtx4 + 88 | 0; //@line 16257
    HEAP32[$137 >> 2] = $44; //@line 16258
    $138 = $ReallocAsyncCtx4 + 92 | 0; //@line 16259
    HEAP32[$138 >> 2] = $46; //@line 16260
    $139 = $ReallocAsyncCtx4 + 96 | 0; //@line 16261
    HEAP32[$139 >> 2] = $48; //@line 16262
    $140 = $ReallocAsyncCtx4 + 100 | 0; //@line 16263
    HEAP8[$140 >> 0] = $50; //@line 16264
    $141 = $ReallocAsyncCtx4 + 101 | 0; //@line 16265
    HEAP8[$141 >> 0] = $56; //@line 16266
    sp = STACKTOP; //@line 16267
    STACKTOP = sp; //@line 16268
    return;
   }
   HEAP32[___async_retval >> 2] = $115; //@line 16271
   ___async_unwind = 0; //@line 16272
   HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 16273
   $116 = $ReallocAsyncCtx4 + 4 | 0; //@line 16274
   HEAP32[$116 >> 2] = $2; //@line 16275
   $117 = $ReallocAsyncCtx4 + 8 | 0; //@line 16276
   HEAP32[$117 >> 2] = $4; //@line 16277
   $118 = $ReallocAsyncCtx4 + 12 | 0; //@line 16278
   HEAP32[$118 >> 2] = $6; //@line 16279
   $119 = $ReallocAsyncCtx4 + 16 | 0; //@line 16280
   HEAP8[$119 >> 0] = $8; //@line 16281
   $120 = $ReallocAsyncCtx4 + 20 | 0; //@line 16282
   HEAP32[$120 >> 2] = $10; //@line 16283
   $121 = $ReallocAsyncCtx4 + 24 | 0; //@line 16284
   HEAP32[$121 >> 2] = $12; //@line 16285
   $122 = $ReallocAsyncCtx4 + 28 | 0; //@line 16286
   HEAP32[$122 >> 2] = $14; //@line 16287
   $123 = $ReallocAsyncCtx4 + 32 | 0; //@line 16288
   HEAP32[$123 >> 2] = $16; //@line 16289
   $124 = $ReallocAsyncCtx4 + 36 | 0; //@line 16290
   HEAP32[$124 >> 2] = $18; //@line 16291
   $125 = $ReallocAsyncCtx4 + 40 | 0; //@line 16292
   HEAP32[$125 >> 2] = $20; //@line 16293
   $126 = $ReallocAsyncCtx4 + 44 | 0; //@line 16294
   HEAP32[$126 >> 2] = $22; //@line 16295
   $127 = $ReallocAsyncCtx4 + 48 | 0; //@line 16296
   HEAP32[$127 >> 2] = $24; //@line 16297
   $128 = $ReallocAsyncCtx4 + 52 | 0; //@line 16298
   HEAP32[$128 >> 2] = $26; //@line 16299
   $129 = $ReallocAsyncCtx4 + 56 | 0; //@line 16300
   HEAP32[$129 >> 2] = $28; //@line 16301
   $130 = $ReallocAsyncCtx4 + 60 | 0; //@line 16302
   HEAP32[$130 >> 2] = $30; //@line 16303
   $131 = $ReallocAsyncCtx4 + 64 | 0; //@line 16304
   HEAP32[$131 >> 2] = $32; //@line 16305
   $132 = $ReallocAsyncCtx4 + 68 | 0; //@line 16306
   HEAP32[$132 >> 2] = $34; //@line 16307
   $133 = $ReallocAsyncCtx4 + 72 | 0; //@line 16308
   HEAP32[$133 >> 2] = $36; //@line 16309
   $134 = $ReallocAsyncCtx4 + 76 | 0; //@line 16310
   HEAP32[$134 >> 2] = $38; //@line 16311
   $135 = $ReallocAsyncCtx4 + 80 | 0; //@line 16312
   HEAP32[$135 >> 2] = $40; //@line 16313
   $136 = $ReallocAsyncCtx4 + 84 | 0; //@line 16314
   HEAP32[$136 >> 2] = $42; //@line 16315
   $137 = $ReallocAsyncCtx4 + 88 | 0; //@line 16316
   HEAP32[$137 >> 2] = $44; //@line 16317
   $138 = $ReallocAsyncCtx4 + 92 | 0; //@line 16318
   HEAP32[$138 >> 2] = $46; //@line 16319
   $139 = $ReallocAsyncCtx4 + 96 | 0; //@line 16320
   HEAP32[$139 >> 2] = $48; //@line 16321
   $140 = $ReallocAsyncCtx4 + 100 | 0; //@line 16322
   HEAP8[$140 >> 0] = $50; //@line 16323
   $141 = $ReallocAsyncCtx4 + 101 | 0; //@line 16324
   HEAP8[$141 >> 0] = $56; //@line 16325
   sp = STACKTOP; //@line 16326
   STACKTOP = sp; //@line 16327
   return;
  }
 }
 $61 = HEAP32[(HEAP32[$46 >> 2] | 0) + 28 >> 2] | 0; //@line 16333
 $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 16334
 $62 = FUNCTION_TABLE_iiii[$61 & 31]($48, $$191 & 255, $12) | 0; //@line 16335
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 16338
  $63 = $ReallocAsyncCtx + 4 | 0; //@line 16339
  HEAP8[$63 >> 0] = $50; //@line 16340
  $64 = $ReallocAsyncCtx + 8 | 0; //@line 16341
  HEAP32[$64 >> 2] = $2; //@line 16342
  $65 = $ReallocAsyncCtx + 12 | 0; //@line 16343
  HEAP32[$65 >> 2] = $4; //@line 16344
  $66 = $ReallocAsyncCtx + 16 | 0; //@line 16345
  HEAP32[$66 >> 2] = $6; //@line 16346
  $67 = $ReallocAsyncCtx + 20 | 0; //@line 16347
  HEAP8[$67 >> 0] = $8; //@line 16348
  $68 = $ReallocAsyncCtx + 24 | 0; //@line 16349
  HEAP32[$68 >> 2] = $10; //@line 16350
  $69 = $ReallocAsyncCtx + 28 | 0; //@line 16351
  HEAP32[$69 >> 2] = $12; //@line 16352
  $70 = $ReallocAsyncCtx + 32 | 0; //@line 16353
  HEAP32[$70 >> 2] = $14; //@line 16354
  $71 = $ReallocAsyncCtx + 36 | 0; //@line 16355
  HEAP32[$71 >> 2] = $16; //@line 16356
  $72 = $ReallocAsyncCtx + 40 | 0; //@line 16357
  HEAP32[$72 >> 2] = $18; //@line 16358
  $73 = $ReallocAsyncCtx + 44 | 0; //@line 16359
  HEAP32[$73 >> 2] = $20; //@line 16360
  $74 = $ReallocAsyncCtx + 48 | 0; //@line 16361
  HEAP32[$74 >> 2] = $22; //@line 16362
  $75 = $ReallocAsyncCtx + 52 | 0; //@line 16363
  HEAP32[$75 >> 2] = $24; //@line 16364
  $76 = $ReallocAsyncCtx + 56 | 0; //@line 16365
  HEAP32[$76 >> 2] = $26; //@line 16366
  $77 = $ReallocAsyncCtx + 60 | 0; //@line 16367
  HEAP32[$77 >> 2] = $28; //@line 16368
  $78 = $ReallocAsyncCtx + 64 | 0; //@line 16369
  HEAP32[$78 >> 2] = $30; //@line 16370
  $79 = $ReallocAsyncCtx + 68 | 0; //@line 16371
  HEAP8[$79 >> 0] = $$191; //@line 16372
  $80 = $ReallocAsyncCtx + 72 | 0; //@line 16373
  HEAP32[$80 >> 2] = $32; //@line 16374
  $81 = $ReallocAsyncCtx + 76 | 0; //@line 16375
  HEAP32[$81 >> 2] = $34; //@line 16376
  $82 = $ReallocAsyncCtx + 80 | 0; //@line 16377
  HEAP32[$82 >> 2] = $36; //@line 16378
  $83 = $ReallocAsyncCtx + 84 | 0; //@line 16379
  HEAP32[$83 >> 2] = $38; //@line 16380
  $84 = $ReallocAsyncCtx + 88 | 0; //@line 16381
  HEAP32[$84 >> 2] = $40; //@line 16382
  $85 = $ReallocAsyncCtx + 92 | 0; //@line 16383
  HEAP32[$85 >> 2] = $42; //@line 16384
  $86 = $ReallocAsyncCtx + 96 | 0; //@line 16385
  HEAP32[$86 >> 2] = $44; //@line 16386
  $87 = $ReallocAsyncCtx + 100 | 0; //@line 16387
  HEAP32[$87 >> 2] = $46; //@line 16388
  $88 = $ReallocAsyncCtx + 104 | 0; //@line 16389
  HEAP32[$88 >> 2] = $48; //@line 16390
  sp = STACKTOP; //@line 16391
  STACKTOP = sp; //@line 16392
  return;
 }
 HEAP32[___async_retval >> 2] = $62; //@line 16395
 ___async_unwind = 0; //@line 16396
 HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 16397
 $63 = $ReallocAsyncCtx + 4 | 0; //@line 16398
 HEAP8[$63 >> 0] = $50; //@line 16399
 $64 = $ReallocAsyncCtx + 8 | 0; //@line 16400
 HEAP32[$64 >> 2] = $2; //@line 16401
 $65 = $ReallocAsyncCtx + 12 | 0; //@line 16402
 HEAP32[$65 >> 2] = $4; //@line 16403
 $66 = $ReallocAsyncCtx + 16 | 0; //@line 16404
 HEAP32[$66 >> 2] = $6; //@line 16405
 $67 = $ReallocAsyncCtx + 20 | 0; //@line 16406
 HEAP8[$67 >> 0] = $8; //@line 16407
 $68 = $ReallocAsyncCtx + 24 | 0; //@line 16408
 HEAP32[$68 >> 2] = $10; //@line 16409
 $69 = $ReallocAsyncCtx + 28 | 0; //@line 16410
 HEAP32[$69 >> 2] = $12; //@line 16411
 $70 = $ReallocAsyncCtx + 32 | 0; //@line 16412
 HEAP32[$70 >> 2] = $14; //@line 16413
 $71 = $ReallocAsyncCtx + 36 | 0; //@line 16414
 HEAP32[$71 >> 2] = $16; //@line 16415
 $72 = $ReallocAsyncCtx + 40 | 0; //@line 16416
 HEAP32[$72 >> 2] = $18; //@line 16417
 $73 = $ReallocAsyncCtx + 44 | 0; //@line 16418
 HEAP32[$73 >> 2] = $20; //@line 16419
 $74 = $ReallocAsyncCtx + 48 | 0; //@line 16420
 HEAP32[$74 >> 2] = $22; //@line 16421
 $75 = $ReallocAsyncCtx + 52 | 0; //@line 16422
 HEAP32[$75 >> 2] = $24; //@line 16423
 $76 = $ReallocAsyncCtx + 56 | 0; //@line 16424
 HEAP32[$76 >> 2] = $26; //@line 16425
 $77 = $ReallocAsyncCtx + 60 | 0; //@line 16426
 HEAP32[$77 >> 2] = $28; //@line 16427
 $78 = $ReallocAsyncCtx + 64 | 0; //@line 16428
 HEAP32[$78 >> 2] = $30; //@line 16429
 $79 = $ReallocAsyncCtx + 68 | 0; //@line 16430
 HEAP8[$79 >> 0] = $$191; //@line 16431
 $80 = $ReallocAsyncCtx + 72 | 0; //@line 16432
 HEAP32[$80 >> 2] = $32; //@line 16433
 $81 = $ReallocAsyncCtx + 76 | 0; //@line 16434
 HEAP32[$81 >> 2] = $34; //@line 16435
 $82 = $ReallocAsyncCtx + 80 | 0; //@line 16436
 HEAP32[$82 >> 2] = $36; //@line 16437
 $83 = $ReallocAsyncCtx + 84 | 0; //@line 16438
 HEAP32[$83 >> 2] = $38; //@line 16439
 $84 = $ReallocAsyncCtx + 88 | 0; //@line 16440
 HEAP32[$84 >> 2] = $40; //@line 16441
 $85 = $ReallocAsyncCtx + 92 | 0; //@line 16442
 HEAP32[$85 >> 2] = $42; //@line 16443
 $86 = $ReallocAsyncCtx + 96 | 0; //@line 16444
 HEAP32[$86 >> 2] = $44; //@line 16445
 $87 = $ReallocAsyncCtx + 100 | 0; //@line 16446
 HEAP32[$87 >> 2] = $46; //@line 16447
 $88 = $ReallocAsyncCtx + 104 | 0; //@line 16448
 HEAP32[$88 >> 2] = $48; //@line 16449
 sp = STACKTOP; //@line 16450
 STACKTOP = sp; //@line 16451
 return;
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 10112
 STACKTOP = STACKTOP + 64 | 0; //@line 10113
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 10113
 $5 = sp + 16 | 0; //@line 10114
 $6 = sp; //@line 10115
 $7 = sp + 24 | 0; //@line 10116
 $8 = sp + 8 | 0; //@line 10117
 $9 = sp + 20 | 0; //@line 10118
 HEAP32[$5 >> 2] = $1; //@line 10119
 $10 = ($0 | 0) != 0; //@line 10120
 $11 = $7 + 40 | 0; //@line 10121
 $12 = $11; //@line 10122
 $13 = $7 + 39 | 0; //@line 10123
 $14 = $8 + 4 | 0; //@line 10124
 $$0243 = 0; //@line 10125
 $$0247 = 0; //@line 10125
 $$0269 = 0; //@line 10125
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 10134
     $$1248 = -1; //@line 10135
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 10139
     break;
    }
   } else {
    $$1248 = $$0247; //@line 10143
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 10146
  $21 = HEAP8[$20 >> 0] | 0; //@line 10147
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 10150
   break;
  } else {
   $23 = $21; //@line 10153
   $25 = $20; //@line 10153
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 10158
     $27 = $25; //@line 10158
     label = 9; //@line 10159
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 10164
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 10171
   HEAP32[$5 >> 2] = $24; //@line 10172
   $23 = HEAP8[$24 >> 0] | 0; //@line 10174
   $25 = $24; //@line 10174
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 10179
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 10184
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 10187
     $27 = $27 + 2 | 0; //@line 10188
     HEAP32[$5 >> 2] = $27; //@line 10189
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 10196
      break;
     } else {
      $$0249303 = $30; //@line 10193
      label = 9; //@line 10194
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 10204
  if ($10) {
   _out_670($0, $20, $36); //@line 10206
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 10210
   $$0247 = $$1248; //@line 10210
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 10218
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 10219
  if ($43) {
   $$0253 = -1; //@line 10221
   $$1270 = $$0269; //@line 10221
   $$sink = 1; //@line 10221
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 10231
    $$1270 = 1; //@line 10231
    $$sink = 3; //@line 10231
   } else {
    $$0253 = -1; //@line 10233
    $$1270 = $$0269; //@line 10233
    $$sink = 1; //@line 10233
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 10236
  HEAP32[$5 >> 2] = $51; //@line 10237
  $52 = HEAP8[$51 >> 0] | 0; //@line 10238
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 10240
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 10247
   $$lcssa291 = $52; //@line 10247
   $$lcssa292 = $51; //@line 10247
  } else {
   $$0262309 = 0; //@line 10249
   $60 = $52; //@line 10249
   $65 = $51; //@line 10249
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 10254
    $64 = $65 + 1 | 0; //@line 10255
    HEAP32[$5 >> 2] = $64; //@line 10256
    $66 = HEAP8[$64 >> 0] | 0; //@line 10257
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 10259
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 10266
     $$lcssa291 = $66; //@line 10266
     $$lcssa292 = $64; //@line 10266
     break;
    } else {
     $$0262309 = $63; //@line 10269
     $60 = $66; //@line 10269
     $65 = $64; //@line 10269
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 10281
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 10283
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 10288
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10293
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10305
     $$2271 = 1; //@line 10305
     $storemerge274 = $79 + 3 | 0; //@line 10305
    } else {
     label = 23; //@line 10307
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 10311
    if ($$1270 | 0) {
     $$0 = -1; //@line 10314
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10329
     $106 = HEAP32[$105 >> 2] | 0; //@line 10330
     HEAP32[$2 >> 2] = $105 + 4; //@line 10332
     $363 = $106; //@line 10333
    } else {
     $363 = 0; //@line 10335
    }
    $$0259 = $363; //@line 10339
    $$2271 = 0; //@line 10339
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 10339
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 10341
   $109 = ($$0259 | 0) < 0; //@line 10342
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 10347
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 10347
   $$3272 = $$2271; //@line 10347
   $115 = $storemerge274; //@line 10347
  } else {
   $112 = _getint_671($5) | 0; //@line 10349
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 10352
    break;
   }
   $$1260 = $112; //@line 10356
   $$1263 = $$0262$lcssa; //@line 10356
   $$3272 = $$1270; //@line 10356
   $115 = HEAP32[$5 >> 2] | 0; //@line 10356
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 10367
     $156 = _getint_671($5) | 0; //@line 10368
     $$0254 = $156; //@line 10370
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 10370
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 10379
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 10384
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10389
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10396
      $144 = $125 + 4 | 0; //@line 10400
      HEAP32[$5 >> 2] = $144; //@line 10401
      $$0254 = $140; //@line 10402
      $$pre345 = $144; //@line 10402
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 10408
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10423
     $152 = HEAP32[$151 >> 2] | 0; //@line 10424
     HEAP32[$2 >> 2] = $151 + 4; //@line 10426
     $364 = $152; //@line 10427
    } else {
     $364 = 0; //@line 10429
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 10432
    HEAP32[$5 >> 2] = $154; //@line 10433
    $$0254 = $364; //@line 10434
    $$pre345 = $154; //@line 10434
   } else {
    $$0254 = -1; //@line 10436
    $$pre345 = $115; //@line 10436
   }
  } while (0);
  $$0252 = 0; //@line 10439
  $158 = $$pre345; //@line 10439
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 10446
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 10449
   HEAP32[$5 >> 2] = $158; //@line 10450
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (4594 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 10455
   $168 = $167 & 255; //@line 10456
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 10460
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 10467
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 10471
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 10475
     break L1;
    } else {
     label = 50; //@line 10478
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 10483
     $176 = $3 + ($$0253 << 3) | 0; //@line 10485
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 10490
     $182 = $6; //@line 10491
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 10493
     HEAP32[$182 + 4 >> 2] = $181; //@line 10496
     label = 50; //@line 10497
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 10501
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 10504
    $187 = HEAP32[$5 >> 2] | 0; //@line 10506
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 10510
   if ($10) {
    $187 = $158; //@line 10512
   } else {
    $$0243 = 0; //@line 10514
    $$0247 = $$1248; //@line 10514
    $$0269 = $$3272; //@line 10514
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 10520
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 10526
  $196 = $$1263 & -65537; //@line 10529
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 10530
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10538
       $$0243 = 0; //@line 10539
       $$0247 = $$1248; //@line 10539
       $$0269 = $$3272; //@line 10539
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10545
       $$0243 = 0; //@line 10546
       $$0247 = $$1248; //@line 10546
       $$0269 = $$3272; //@line 10546
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 10554
       HEAP32[$208 >> 2] = $$1248; //@line 10556
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10559
       $$0243 = 0; //@line 10560
       $$0247 = $$1248; //@line 10560
       $$0269 = $$3272; //@line 10560
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 10567
       $$0243 = 0; //@line 10568
       $$0247 = $$1248; //@line 10568
       $$0269 = $$3272; //@line 10568
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 10575
       $$0243 = 0; //@line 10576
       $$0247 = $$1248; //@line 10576
       $$0269 = $$3272; //@line 10576
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10582
       $$0243 = 0; //@line 10583
       $$0247 = $$1248; //@line 10583
       $$0269 = $$3272; //@line 10583
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 10591
       HEAP32[$220 >> 2] = $$1248; //@line 10593
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10596
       $$0243 = 0; //@line 10597
       $$0247 = $$1248; //@line 10597
       $$0269 = $$3272; //@line 10597
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 10602
       $$0247 = $$1248; //@line 10602
       $$0269 = $$3272; //@line 10602
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 10612
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 10612
     $$3265 = $$1263$ | 8; //@line 10612
     label = 62; //@line 10613
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 10617
     $$1255 = $$0254; //@line 10617
     $$3265 = $$1263$; //@line 10617
     label = 62; //@line 10618
     break;
    }
   case 111:
    {
     $242 = $6; //@line 10622
     $244 = HEAP32[$242 >> 2] | 0; //@line 10624
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 10627
     $248 = _fmt_o($244, $247, $11) | 0; //@line 10628
     $252 = $12 - $248 | 0; //@line 10632
     $$0228 = $248; //@line 10637
     $$1233 = 0; //@line 10637
     $$1238 = 5058; //@line 10637
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 10637
     $$4266 = $$1263$; //@line 10637
     $281 = $244; //@line 10637
     $283 = $247; //@line 10637
     label = 68; //@line 10638
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 10642
     $258 = HEAP32[$256 >> 2] | 0; //@line 10644
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 10647
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 10650
      $264 = tempRet0; //@line 10651
      $265 = $6; //@line 10652
      HEAP32[$265 >> 2] = $263; //@line 10654
      HEAP32[$265 + 4 >> 2] = $264; //@line 10657
      $$0232 = 1; //@line 10658
      $$0237 = 5058; //@line 10658
      $275 = $263; //@line 10658
      $276 = $264; //@line 10658
      label = 67; //@line 10659
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 10671
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 5058 : 5060 : 5059; //@line 10671
      $275 = $258; //@line 10671
      $276 = $261; //@line 10671
      label = 67; //@line 10672
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 10678
     $$0232 = 0; //@line 10684
     $$0237 = 5058; //@line 10684
     $275 = HEAP32[$197 >> 2] | 0; //@line 10684
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 10684
     label = 67; //@line 10685
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 10696
     $$2 = $13; //@line 10697
     $$2234 = 0; //@line 10697
     $$2239 = 5058; //@line 10697
     $$2251 = $11; //@line 10697
     $$5 = 1; //@line 10697
     $$6268 = $196; //@line 10697
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 10704
     label = 72; //@line 10705
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 10709
     $$1 = $302 | 0 ? $302 : 5068; //@line 10712
     label = 72; //@line 10713
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 10723
     HEAP32[$14 >> 2] = 0; //@line 10724
     HEAP32[$6 >> 2] = $8; //@line 10725
     $$4258354 = -1; //@line 10726
     $365 = $8; //@line 10726
     label = 76; //@line 10727
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 10731
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 10734
      $$0240$lcssa356 = 0; //@line 10735
      label = 85; //@line 10736
     } else {
      $$4258354 = $$0254; //@line 10738
      $365 = $$pre348; //@line 10738
      label = 76; //@line 10739
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 10746
     $$0247 = $$1248; //@line 10746
     $$0269 = $$3272; //@line 10746
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 10751
     $$2234 = 0; //@line 10751
     $$2239 = 5058; //@line 10751
     $$2251 = $11; //@line 10751
     $$5 = $$0254; //@line 10751
     $$6268 = $$1263$; //@line 10751
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 10757
    $227 = $6; //@line 10758
    $229 = HEAP32[$227 >> 2] | 0; //@line 10760
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 10763
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 10765
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 10771
    $$0228 = $234; //@line 10776
    $$1233 = $or$cond278 ? 0 : 2; //@line 10776
    $$1238 = $or$cond278 ? 5058 : 5058 + ($$1236 >> 4) | 0; //@line 10776
    $$2256 = $$1255; //@line 10776
    $$4266 = $$3265; //@line 10776
    $281 = $229; //@line 10776
    $283 = $232; //@line 10776
    label = 68; //@line 10777
   } else if ((label | 0) == 67) {
    label = 0; //@line 10780
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 10782
    $$1233 = $$0232; //@line 10782
    $$1238 = $$0237; //@line 10782
    $$2256 = $$0254; //@line 10782
    $$4266 = $$1263$; //@line 10782
    $281 = $275; //@line 10782
    $283 = $276; //@line 10782
    label = 68; //@line 10783
   } else if ((label | 0) == 72) {
    label = 0; //@line 10786
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 10787
    $306 = ($305 | 0) == 0; //@line 10788
    $$2 = $$1; //@line 10795
    $$2234 = 0; //@line 10795
    $$2239 = 5058; //@line 10795
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 10795
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 10795
    $$6268 = $196; //@line 10795
   } else if ((label | 0) == 76) {
    label = 0; //@line 10798
    $$0229316 = $365; //@line 10799
    $$0240315 = 0; //@line 10799
    $$1244314 = 0; //@line 10799
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 10801
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 10804
      $$2245 = $$1244314; //@line 10804
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 10807
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 10813
      $$2245 = $320; //@line 10813
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 10817
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 10820
      $$0240315 = $325; //@line 10820
      $$1244314 = $320; //@line 10820
     } else {
      $$0240$lcssa = $325; //@line 10822
      $$2245 = $320; //@line 10822
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 10828
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 10831
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 10834
     label = 85; //@line 10835
    } else {
     $$1230327 = $365; //@line 10837
     $$1241326 = 0; //@line 10837
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 10839
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10842
       label = 85; //@line 10843
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 10846
      $$1241326 = $331 + $$1241326 | 0; //@line 10847
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10850
       label = 85; //@line 10851
       break L97;
      }
      _out_670($0, $9, $331); //@line 10855
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10860
       label = 85; //@line 10861
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 10858
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 10869
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 10875
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 10877
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 10882
   $$2 = $or$cond ? $$0228 : $11; //@line 10887
   $$2234 = $$1233; //@line 10887
   $$2239 = $$1238; //@line 10887
   $$2251 = $11; //@line 10887
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 10887
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 10887
  } else if ((label | 0) == 85) {
   label = 0; //@line 10890
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 10892
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 10895
   $$0247 = $$1248; //@line 10895
   $$0269 = $$3272; //@line 10895
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 10900
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 10902
  $345 = $$$5 + $$2234 | 0; //@line 10903
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 10905
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 10906
  _out_670($0, $$2239, $$2234); //@line 10907
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 10909
  _pad_676($0, 48, $$$5, $343, 0); //@line 10910
  _out_670($0, $$2, $343); //@line 10911
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 10913
  $$0243 = $$2261; //@line 10914
  $$0247 = $$1248; //@line 10914
  $$0269 = $$3272; //@line 10914
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 10922
    } else {
     $$2242302 = 1; //@line 10924
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 10927
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 10930
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 10934
      $356 = $$2242302 + 1 | 0; //@line 10935
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 10938
      } else {
       $$2242$lcssa = $356; //@line 10940
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 10946
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 10952
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 10958
       } else {
        $$0 = 1; //@line 10960
        break;
       }
      }
     } else {
      $$0 = 1; //@line 10965
     }
    }
   } else {
    $$0 = $$1248; //@line 10969
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10973
 return $$0 | 0; //@line 10973
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_70($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $10 = 0, $104 = 0, $105 = 0, $108 = 0, $111 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $139 = 0, $14 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $172 = 0, $175 = 0, $177 = 0, $18 = 0, $185 = 0, $188 = 0, $190 = 0, $198 = 0, $2 = 0, $20 = 0, $201 = 0, $203 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $96 = 0, $97 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 20575
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20577
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20579
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20581
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20583
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20585
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20587
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20589
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20591
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20593
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20595
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20597
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20599
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20601
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20603
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20605
 $31 = $26 + 12 | 0; //@line 20606
 $32 = HEAP32[$31 >> 2] | 0; //@line 20607
 if ($32 | 0) {
  $35 = HEAP32[$32 + 4 >> 2] | 0; //@line 20611
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(64) | 0; //@line 20612
  FUNCTION_TABLE_vii[$35 & 7]($4, $26); //@line 20613
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 20616
   $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 20617
   HEAP32[$36 >> 2] = $14; //@line 20618
   $37 = $ReallocAsyncCtx3 + 8 | 0; //@line 20619
   HEAP32[$37 >> 2] = $8; //@line 20620
   $38 = $ReallocAsyncCtx3 + 12 | 0; //@line 20621
   HEAP32[$38 >> 2] = $2; //@line 20622
   $39 = $ReallocAsyncCtx3 + 16 | 0; //@line 20623
   HEAP32[$39 >> 2] = $4; //@line 20624
   $40 = $ReallocAsyncCtx3 + 20 | 0; //@line 20625
   HEAP32[$40 >> 2] = $12; //@line 20626
   $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 20627
   HEAP32[$41 >> 2] = $16; //@line 20628
   $42 = $ReallocAsyncCtx3 + 28 | 0; //@line 20629
   HEAP32[$42 >> 2] = $6; //@line 20630
   $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 20631
   HEAP32[$43 >> 2] = $18; //@line 20632
   $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 20633
   HEAP32[$44 >> 2] = $31; //@line 20634
   $45 = $ReallocAsyncCtx3 + 40 | 0; //@line 20635
   HEAP32[$45 >> 2] = $20; //@line 20636
   $46 = $ReallocAsyncCtx3 + 44 | 0; //@line 20637
   HEAP32[$46 >> 2] = $22; //@line 20638
   $47 = $ReallocAsyncCtx3 + 48 | 0; //@line 20639
   HEAP32[$47 >> 2] = $24; //@line 20640
   $48 = $ReallocAsyncCtx3 + 52 | 0; //@line 20641
   HEAP32[$48 >> 2] = $10; //@line 20642
   $49 = $ReallocAsyncCtx3 + 56 | 0; //@line 20643
   HEAP32[$49 >> 2] = $28; //@line 20644
   $50 = $ReallocAsyncCtx3 + 60 | 0; //@line 20645
   HEAP32[$50 >> 2] = $30; //@line 20646
   sp = STACKTOP; //@line 20647
   return;
  }
  ___async_unwind = 0; //@line 20650
  HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 20651
  $36 = $ReallocAsyncCtx3 + 4 | 0; //@line 20652
  HEAP32[$36 >> 2] = $14; //@line 20653
  $37 = $ReallocAsyncCtx3 + 8 | 0; //@line 20654
  HEAP32[$37 >> 2] = $8; //@line 20655
  $38 = $ReallocAsyncCtx3 + 12 | 0; //@line 20656
  HEAP32[$38 >> 2] = $2; //@line 20657
  $39 = $ReallocAsyncCtx3 + 16 | 0; //@line 20658
  HEAP32[$39 >> 2] = $4; //@line 20659
  $40 = $ReallocAsyncCtx3 + 20 | 0; //@line 20660
  HEAP32[$40 >> 2] = $12; //@line 20661
  $41 = $ReallocAsyncCtx3 + 24 | 0; //@line 20662
  HEAP32[$41 >> 2] = $16; //@line 20663
  $42 = $ReallocAsyncCtx3 + 28 | 0; //@line 20664
  HEAP32[$42 >> 2] = $6; //@line 20665
  $43 = $ReallocAsyncCtx3 + 32 | 0; //@line 20666
  HEAP32[$43 >> 2] = $18; //@line 20667
  $44 = $ReallocAsyncCtx3 + 36 | 0; //@line 20668
  HEAP32[$44 >> 2] = $31; //@line 20669
  $45 = $ReallocAsyncCtx3 + 40 | 0; //@line 20670
  HEAP32[$45 >> 2] = $20; //@line 20671
  $46 = $ReallocAsyncCtx3 + 44 | 0; //@line 20672
  HEAP32[$46 >> 2] = $22; //@line 20673
  $47 = $ReallocAsyncCtx3 + 48 | 0; //@line 20674
  HEAP32[$47 >> 2] = $24; //@line 20675
  $48 = $ReallocAsyncCtx3 + 52 | 0; //@line 20676
  HEAP32[$48 >> 2] = $10; //@line 20677
  $49 = $ReallocAsyncCtx3 + 56 | 0; //@line 20678
  HEAP32[$49 >> 2] = $28; //@line 20679
  $50 = $ReallocAsyncCtx3 + 60 | 0; //@line 20680
  HEAP32[$50 >> 2] = $30; //@line 20681
  sp = STACKTOP; //@line 20682
  return;
 }
 HEAP32[$30 >> 2] = 0; //@line 20685
 $51 = $2 + 32 | 0; //@line 20686
 do {
  if (($51 | 0) != ($20 | 0)) {
   $53 = $2 + 44 | 0; //@line 20690
   $54 = HEAP32[$53 >> 2] | 0; //@line 20691
   if ($54 | 0) {
    $57 = HEAP32[$54 + 8 >> 2] | 0; //@line 20695
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 20696
    FUNCTION_TABLE_vi[$57 & 511]($51); //@line 20697
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 20700
     $58 = $ReallocAsyncCtx4 + 4 | 0; //@line 20701
     HEAP32[$58 >> 2] = $14; //@line 20702
     $59 = $ReallocAsyncCtx4 + 8 | 0; //@line 20703
     HEAP32[$59 >> 2] = $8; //@line 20704
     $60 = $ReallocAsyncCtx4 + 12 | 0; //@line 20705
     HEAP32[$60 >> 2] = $2; //@line 20706
     $61 = $ReallocAsyncCtx4 + 16 | 0; //@line 20707
     HEAP32[$61 >> 2] = $4; //@line 20708
     $62 = $ReallocAsyncCtx4 + 20 | 0; //@line 20709
     HEAP32[$62 >> 2] = $12; //@line 20710
     $63 = $ReallocAsyncCtx4 + 24 | 0; //@line 20711
     HEAP32[$63 >> 2] = $51; //@line 20712
     $64 = $ReallocAsyncCtx4 + 28 | 0; //@line 20713
     HEAP32[$64 >> 2] = $16; //@line 20714
     $65 = $ReallocAsyncCtx4 + 32 | 0; //@line 20715
     HEAP32[$65 >> 2] = $6; //@line 20716
     $66 = $ReallocAsyncCtx4 + 36 | 0; //@line 20717
     HEAP32[$66 >> 2] = $18; //@line 20718
     $67 = $ReallocAsyncCtx4 + 40 | 0; //@line 20719
     HEAP32[$67 >> 2] = $20; //@line 20720
     $68 = $ReallocAsyncCtx4 + 44 | 0; //@line 20721
     HEAP32[$68 >> 2] = $22; //@line 20722
     $69 = $ReallocAsyncCtx4 + 48 | 0; //@line 20723
     HEAP32[$69 >> 2] = $24; //@line 20724
     $70 = $ReallocAsyncCtx4 + 52 | 0; //@line 20725
     HEAP32[$70 >> 2] = $53; //@line 20726
     $71 = $ReallocAsyncCtx4 + 56 | 0; //@line 20727
     HEAP32[$71 >> 2] = $10; //@line 20728
     $72 = $ReallocAsyncCtx4 + 60 | 0; //@line 20729
     HEAP32[$72 >> 2] = $28; //@line 20730
     sp = STACKTOP; //@line 20731
     return;
    }
    ___async_unwind = 0; //@line 20734
    HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 20735
    $58 = $ReallocAsyncCtx4 + 4 | 0; //@line 20736
    HEAP32[$58 >> 2] = $14; //@line 20737
    $59 = $ReallocAsyncCtx4 + 8 | 0; //@line 20738
    HEAP32[$59 >> 2] = $8; //@line 20739
    $60 = $ReallocAsyncCtx4 + 12 | 0; //@line 20740
    HEAP32[$60 >> 2] = $2; //@line 20741
    $61 = $ReallocAsyncCtx4 + 16 | 0; //@line 20742
    HEAP32[$61 >> 2] = $4; //@line 20743
    $62 = $ReallocAsyncCtx4 + 20 | 0; //@line 20744
    HEAP32[$62 >> 2] = $12; //@line 20745
    $63 = $ReallocAsyncCtx4 + 24 | 0; //@line 20746
    HEAP32[$63 >> 2] = $51; //@line 20747
    $64 = $ReallocAsyncCtx4 + 28 | 0; //@line 20748
    HEAP32[$64 >> 2] = $16; //@line 20749
    $65 = $ReallocAsyncCtx4 + 32 | 0; //@line 20750
    HEAP32[$65 >> 2] = $6; //@line 20751
    $66 = $ReallocAsyncCtx4 + 36 | 0; //@line 20752
    HEAP32[$66 >> 2] = $18; //@line 20753
    $67 = $ReallocAsyncCtx4 + 40 | 0; //@line 20754
    HEAP32[$67 >> 2] = $20; //@line 20755
    $68 = $ReallocAsyncCtx4 + 44 | 0; //@line 20756
    HEAP32[$68 >> 2] = $22; //@line 20757
    $69 = $ReallocAsyncCtx4 + 48 | 0; //@line 20758
    HEAP32[$69 >> 2] = $24; //@line 20759
    $70 = $ReallocAsyncCtx4 + 52 | 0; //@line 20760
    HEAP32[$70 >> 2] = $53; //@line 20761
    $71 = $ReallocAsyncCtx4 + 56 | 0; //@line 20762
    HEAP32[$71 >> 2] = $10; //@line 20763
    $72 = $ReallocAsyncCtx4 + 60 | 0; //@line 20764
    HEAP32[$72 >> 2] = $28; //@line 20765
    sp = STACKTOP; //@line 20766
    return;
   }
   $73 = $20 + 12 | 0; //@line 20769
   $74 = HEAP32[$73 >> 2] | 0; //@line 20770
   if (!$74) {
    HEAP32[$53 >> 2] = 0; //@line 20773
    break;
   }
   $77 = HEAP32[$74 + 4 >> 2] | 0; //@line 20777
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 20778
   FUNCTION_TABLE_vii[$77 & 7]($51, $20); //@line 20779
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 20782
    $78 = $ReallocAsyncCtx5 + 4 | 0; //@line 20783
    HEAP32[$78 >> 2] = $14; //@line 20784
    $79 = $ReallocAsyncCtx5 + 8 | 0; //@line 20785
    HEAP32[$79 >> 2] = $8; //@line 20786
    $80 = $ReallocAsyncCtx5 + 12 | 0; //@line 20787
    HEAP32[$80 >> 2] = $2; //@line 20788
    $81 = $ReallocAsyncCtx5 + 16 | 0; //@line 20789
    HEAP32[$81 >> 2] = $4; //@line 20790
    $82 = $ReallocAsyncCtx5 + 20 | 0; //@line 20791
    HEAP32[$82 >> 2] = $12; //@line 20792
    $83 = $ReallocAsyncCtx5 + 24 | 0; //@line 20793
    HEAP32[$83 >> 2] = $51; //@line 20794
    $84 = $ReallocAsyncCtx5 + 28 | 0; //@line 20795
    HEAP32[$84 >> 2] = $16; //@line 20796
    $85 = $ReallocAsyncCtx5 + 32 | 0; //@line 20797
    HEAP32[$85 >> 2] = $73; //@line 20798
    $86 = $ReallocAsyncCtx5 + 36 | 0; //@line 20799
    HEAP32[$86 >> 2] = $6; //@line 20800
    $87 = $ReallocAsyncCtx5 + 40 | 0; //@line 20801
    HEAP32[$87 >> 2] = $18; //@line 20802
    $88 = $ReallocAsyncCtx5 + 44 | 0; //@line 20803
    HEAP32[$88 >> 2] = $22; //@line 20804
    $89 = $ReallocAsyncCtx5 + 48 | 0; //@line 20805
    HEAP32[$89 >> 2] = $24; //@line 20806
    $90 = $ReallocAsyncCtx5 + 52 | 0; //@line 20807
    HEAP32[$90 >> 2] = $53; //@line 20808
    $91 = $ReallocAsyncCtx5 + 56 | 0; //@line 20809
    HEAP32[$91 >> 2] = $10; //@line 20810
    $92 = $ReallocAsyncCtx5 + 60 | 0; //@line 20811
    HEAP32[$92 >> 2] = $28; //@line 20812
    sp = STACKTOP; //@line 20813
    return;
   }
   ___async_unwind = 0; //@line 20816
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 20817
   $78 = $ReallocAsyncCtx5 + 4 | 0; //@line 20818
   HEAP32[$78 >> 2] = $14; //@line 20819
   $79 = $ReallocAsyncCtx5 + 8 | 0; //@line 20820
   HEAP32[$79 >> 2] = $8; //@line 20821
   $80 = $ReallocAsyncCtx5 + 12 | 0; //@line 20822
   HEAP32[$80 >> 2] = $2; //@line 20823
   $81 = $ReallocAsyncCtx5 + 16 | 0; //@line 20824
   HEAP32[$81 >> 2] = $4; //@line 20825
   $82 = $ReallocAsyncCtx5 + 20 | 0; //@line 20826
   HEAP32[$82 >> 2] = $12; //@line 20827
   $83 = $ReallocAsyncCtx5 + 24 | 0; //@line 20828
   HEAP32[$83 >> 2] = $51; //@line 20829
   $84 = $ReallocAsyncCtx5 + 28 | 0; //@line 20830
   HEAP32[$84 >> 2] = $16; //@line 20831
   $85 = $ReallocAsyncCtx5 + 32 | 0; //@line 20832
   HEAP32[$85 >> 2] = $73; //@line 20833
   $86 = $ReallocAsyncCtx5 + 36 | 0; //@line 20834
   HEAP32[$86 >> 2] = $6; //@line 20835
   $87 = $ReallocAsyncCtx5 + 40 | 0; //@line 20836
   HEAP32[$87 >> 2] = $18; //@line 20837
   $88 = $ReallocAsyncCtx5 + 44 | 0; //@line 20838
   HEAP32[$88 >> 2] = $22; //@line 20839
   $89 = $ReallocAsyncCtx5 + 48 | 0; //@line 20840
   HEAP32[$89 >> 2] = $24; //@line 20841
   $90 = $ReallocAsyncCtx5 + 52 | 0; //@line 20842
   HEAP32[$90 >> 2] = $53; //@line 20843
   $91 = $ReallocAsyncCtx5 + 56 | 0; //@line 20844
   HEAP32[$91 >> 2] = $10; //@line 20845
   $92 = $ReallocAsyncCtx5 + 60 | 0; //@line 20846
   HEAP32[$92 >> 2] = $28; //@line 20847
   sp = STACKTOP; //@line 20848
   return;
  }
 } while (0);
 HEAP32[$2 + 8 >> 2] = $16; //@line 20853
 HEAP32[$2 + 48 >> 2] = $22; //@line 20855
 HEAP32[$2 + 52 >> 2] = $24; //@line 20857
 $96 = $2 + 56 | 0; //@line 20858
 HEAP32[$96 >> 2] = 0; //@line 20859
 $97 = $2 + 60 | 0; //@line 20860
 HEAP32[$97 >> 2] = 0; //@line 20861
 HEAP32[$2 + 64 >> 2] = 0; //@line 20863
 HEAP8[$2 + 82 >> 0] = 0; //@line 20865
 HEAP8[$2 + 83 >> 0] = 1; //@line 20867
 HEAP8[$2 + 84 >> 0] = 3; //@line 20869
 HEAP16[$2 + 80 >> 1] = 0; //@line 20871
 HEAP32[$2 + 76 >> 2] = 0; //@line 20873
 $104 = $2 + 72 | 0; //@line 20874
 HEAP32[$104 >> 2] = 15500; //@line 20875
 $105 = HEAP32[187] | 0; //@line 20876
 HEAP32[187] = $105 + 1; //@line 20878
 $$ = ($105 | 0) > 32767 ? 1 : $105; //@line 20880
 HEAP32[$2 >> 2] = $$; //@line 20881
 $108 = HEAP32[1960] | 0; //@line 20882
 if (!$108) {
  $$1 = 0; //@line 20885
  $162 = 0; //@line 20885
 } else {
  $111 = HEAP32[$108 + 56 >> 2] | 0; //@line 20888
  if (!$111) {
   $$1 = 1; //@line 20891
   $162 = 0; //@line 20891
  } else {
   if ((HEAP32[$108 + 8 >> 2] | 0) == ($16 | 0)) {
    HEAP32[$96 >> 2] = $111; //@line 20897
    HEAP32[$97 >> 2] = HEAP32[$108 + 60 >> 2]; //@line 20900
    $$1 = 1; //@line 20901
    $162 = $111; //@line 20901
   } else {
    $$1 = 1; //@line 20903
    $162 = 0; //@line 20903
   }
  }
 }
 $118 = HEAP32[1961] | 0; //@line 20907
 if (!$118) {
  $$1$1 = $$1; //@line 20910
  $175 = $162; //@line 20910
 } else {
  if (!$162) {
   $164 = HEAP32[$118 + 56 >> 2] | 0; //@line 20915
   if (!$164) {
    $217 = 0; //@line 20918
   } else {
    if ((HEAP32[$118 + 8 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$96 >> 2] = $164; //@line 20924
     HEAP32[$97 >> 2] = HEAP32[$118 + 60 >> 2]; //@line 20927
     $217 = $164; //@line 20928
    } else {
     $217 = 0; //@line 20930
    }
   }
  } else {
   $217 = $162; //@line 20934
  }
  $$1$1 = $$1 + 1 | 0; //@line 20937
  $175 = $217; //@line 20937
 }
 $172 = HEAP32[1962] | 0; //@line 20939
 if (!$172) {
  $$1$2 = $$1$1; //@line 20942
  $188 = $175; //@line 20942
 } else {
  if (!$175) {
   $177 = HEAP32[$172 + 56 >> 2] | 0; //@line 20947
   if (!$177) {
    $218 = 0; //@line 20950
   } else {
    if ((HEAP32[$172 + 8 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$96 >> 2] = $177; //@line 20956
     HEAP32[$97 >> 2] = HEAP32[$172 + 60 >> 2]; //@line 20959
     $218 = $177; //@line 20960
    } else {
     $218 = 0; //@line 20962
    }
   }
  } else {
   $218 = $175; //@line 20966
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 20969
  $188 = $218; //@line 20969
 }
 $185 = HEAP32[1963] | 0; //@line 20971
 if (!$185) {
  $$1$3 = $$1$2; //@line 20974
  $201 = $188; //@line 20974
 } else {
  if (!$188) {
   $190 = HEAP32[$185 + 56 >> 2] | 0; //@line 20979
   if (!$190) {
    $219 = 0; //@line 20982
   } else {
    if ((HEAP32[$185 + 8 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$96 >> 2] = $190; //@line 20988
     HEAP32[$97 >> 2] = HEAP32[$185 + 60 >> 2]; //@line 20991
     $219 = $190; //@line 20992
    } else {
     $219 = 0; //@line 20994
    }
   }
  } else {
   $219 = $188; //@line 20998
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 21001
  $201 = $219; //@line 21001
 }
 $198 = HEAP32[1964] | 0; //@line 21003
 if (!$198) {
  HEAP32[7840 + ($12 << 2) >> 2] = $2; //@line 21007
  HEAP32[$104 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 21010
  if (!$$1$3) {
   $120 = $2 + 44 | 0; //@line 21013
   $121 = HEAP32[$120 >> 2] | 0; //@line 21014
   if (!$121) {
    $137 = $14 + 12 | 0; //@line 21017
    HEAP32[$137 >> 2] = 0; //@line 21018
    $139 = $18 + 4 | 0; //@line 21020
    HEAP32[$139 >> 2] = 0; //@line 21022
    HEAP32[$139 + 4 >> 2] = 0; //@line 21025
    HEAP32[$18 >> 2] = 3; //@line 21026
    $143 = $18 + 12 | 0; //@line 21027
    HEAP32[$143 >> 2] = 752; //@line 21028
    $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 21029
    $144 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($14, 100, $18) | 0; //@line 21030
    if (___async) {
     HEAP32[$ReallocAsyncCtx19 >> 2] = 179; //@line 21033
     $145 = $ReallocAsyncCtx19 + 4 | 0; //@line 21034
     HEAP32[$145 >> 2] = $14; //@line 21035
     $146 = $ReallocAsyncCtx19 + 8 | 0; //@line 21036
     HEAP32[$146 >> 2] = $2; //@line 21037
     $147 = $ReallocAsyncCtx19 + 12 | 0; //@line 21038
     HEAP32[$147 >> 2] = $8; //@line 21039
     $148 = $ReallocAsyncCtx19 + 16 | 0; //@line 21040
     HEAP32[$148 >> 2] = $4; //@line 21041
     $149 = $ReallocAsyncCtx19 + 20 | 0; //@line 21042
     HEAP32[$149 >> 2] = $51; //@line 21043
     $150 = $ReallocAsyncCtx19 + 24 | 0; //@line 21044
     HEAP32[$150 >> 2] = $120; //@line 21045
     $151 = $ReallocAsyncCtx19 + 28 | 0; //@line 21046
     HEAP32[$151 >> 2] = $28; //@line 21047
     $152 = $ReallocAsyncCtx19 + 32 | 0; //@line 21048
     HEAP32[$152 >> 2] = $2; //@line 21049
     $153 = $ReallocAsyncCtx19 + 36 | 0; //@line 21050
     HEAP32[$153 >> 2] = $120; //@line 21051
     $154 = $ReallocAsyncCtx19 + 40 | 0; //@line 21052
     HEAP32[$154 >> 2] = $6; //@line 21053
     $155 = $ReallocAsyncCtx19 + 44 | 0; //@line 21054
     HEAP32[$155 >> 2] = $137; //@line 21055
     $156 = $ReallocAsyncCtx19 + 48 | 0; //@line 21056
     HEAP32[$156 >> 2] = $10; //@line 21057
     $157 = $ReallocAsyncCtx19 + 52 | 0; //@line 21058
     HEAP32[$157 >> 2] = $18; //@line 21059
     $158 = $ReallocAsyncCtx19 + 56 | 0; //@line 21060
     HEAP32[$158 >> 2] = $143; //@line 21061
     sp = STACKTOP; //@line 21062
     return;
    }
    HEAP32[___async_retval >> 2] = $144; //@line 21066
    ___async_unwind = 0; //@line 21067
    HEAP32[$ReallocAsyncCtx19 >> 2] = 179; //@line 21068
    $145 = $ReallocAsyncCtx19 + 4 | 0; //@line 21069
    HEAP32[$145 >> 2] = $14; //@line 21070
    $146 = $ReallocAsyncCtx19 + 8 | 0; //@line 21071
    HEAP32[$146 >> 2] = $2; //@line 21072
    $147 = $ReallocAsyncCtx19 + 12 | 0; //@line 21073
    HEAP32[$147 >> 2] = $8; //@line 21074
    $148 = $ReallocAsyncCtx19 + 16 | 0; //@line 21075
    HEAP32[$148 >> 2] = $4; //@line 21076
    $149 = $ReallocAsyncCtx19 + 20 | 0; //@line 21077
    HEAP32[$149 >> 2] = $51; //@line 21078
    $150 = $ReallocAsyncCtx19 + 24 | 0; //@line 21079
    HEAP32[$150 >> 2] = $120; //@line 21080
    $151 = $ReallocAsyncCtx19 + 28 | 0; //@line 21081
    HEAP32[$151 >> 2] = $28; //@line 21082
    $152 = $ReallocAsyncCtx19 + 32 | 0; //@line 21083
    HEAP32[$152 >> 2] = $2; //@line 21084
    $153 = $ReallocAsyncCtx19 + 36 | 0; //@line 21085
    HEAP32[$153 >> 2] = $120; //@line 21086
    $154 = $ReallocAsyncCtx19 + 40 | 0; //@line 21087
    HEAP32[$154 >> 2] = $6; //@line 21088
    $155 = $ReallocAsyncCtx19 + 44 | 0; //@line 21089
    HEAP32[$155 >> 2] = $137; //@line 21090
    $156 = $ReallocAsyncCtx19 + 48 | 0; //@line 21091
    HEAP32[$156 >> 2] = $10; //@line 21092
    $157 = $ReallocAsyncCtx19 + 52 | 0; //@line 21093
    HEAP32[$157 >> 2] = $18; //@line 21094
    $158 = $ReallocAsyncCtx19 + 56 | 0; //@line 21095
    HEAP32[$158 >> 2] = $143; //@line 21096
    sp = STACKTOP; //@line 21097
    return;
   } else {
    $124 = HEAP32[$121 + 4 >> 2] | 0; //@line 21101
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(52) | 0; //@line 21102
    FUNCTION_TABLE_vii[$124 & 7]($14, $51); //@line 21103
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 21106
     $125 = $ReallocAsyncCtx6 + 4 | 0; //@line 21107
     HEAP32[$125 >> 2] = $14; //@line 21108
     $126 = $ReallocAsyncCtx6 + 8 | 0; //@line 21109
     HEAP32[$126 >> 2] = $2; //@line 21110
     $127 = $ReallocAsyncCtx6 + 12 | 0; //@line 21111
     HEAP32[$127 >> 2] = $8; //@line 21112
     $128 = $ReallocAsyncCtx6 + 16 | 0; //@line 21113
     HEAP32[$128 >> 2] = $4; //@line 21114
     $129 = $ReallocAsyncCtx6 + 20 | 0; //@line 21115
     HEAP32[$129 >> 2] = $51; //@line 21116
     $130 = $ReallocAsyncCtx6 + 24 | 0; //@line 21117
     HEAP32[$130 >> 2] = $120; //@line 21118
     $131 = $ReallocAsyncCtx6 + 28 | 0; //@line 21119
     HEAP32[$131 >> 2] = $2; //@line 21120
     $132 = $ReallocAsyncCtx6 + 32 | 0; //@line 21121
     HEAP32[$132 >> 2] = $120; //@line 21122
     $133 = $ReallocAsyncCtx6 + 36 | 0; //@line 21123
     HEAP32[$133 >> 2] = $6; //@line 21124
     $134 = $ReallocAsyncCtx6 + 40 | 0; //@line 21125
     HEAP32[$134 >> 2] = $18; //@line 21126
     $135 = $ReallocAsyncCtx6 + 44 | 0; //@line 21127
     HEAP32[$135 >> 2] = $10; //@line 21128
     $136 = $ReallocAsyncCtx6 + 48 | 0; //@line 21129
     HEAP32[$136 >> 2] = $28; //@line 21130
     sp = STACKTOP; //@line 21131
     return;
    }
    ___async_unwind = 0; //@line 21134
    HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 21135
    $125 = $ReallocAsyncCtx6 + 4 | 0; //@line 21136
    HEAP32[$125 >> 2] = $14; //@line 21137
    $126 = $ReallocAsyncCtx6 + 8 | 0; //@line 21138
    HEAP32[$126 >> 2] = $2; //@line 21139
    $127 = $ReallocAsyncCtx6 + 12 | 0; //@line 21140
    HEAP32[$127 >> 2] = $8; //@line 21141
    $128 = $ReallocAsyncCtx6 + 16 | 0; //@line 21142
    HEAP32[$128 >> 2] = $4; //@line 21143
    $129 = $ReallocAsyncCtx6 + 20 | 0; //@line 21144
    HEAP32[$129 >> 2] = $51; //@line 21145
    $130 = $ReallocAsyncCtx6 + 24 | 0; //@line 21146
    HEAP32[$130 >> 2] = $120; //@line 21147
    $131 = $ReallocAsyncCtx6 + 28 | 0; //@line 21148
    HEAP32[$131 >> 2] = $2; //@line 21149
    $132 = $ReallocAsyncCtx6 + 32 | 0; //@line 21150
    HEAP32[$132 >> 2] = $120; //@line 21151
    $133 = $ReallocAsyncCtx6 + 36 | 0; //@line 21152
    HEAP32[$133 >> 2] = $6; //@line 21153
    $134 = $ReallocAsyncCtx6 + 40 | 0; //@line 21154
    HEAP32[$134 >> 2] = $18; //@line 21155
    $135 = $ReallocAsyncCtx6 + 44 | 0; //@line 21156
    HEAP32[$135 >> 2] = $10; //@line 21157
    $136 = $ReallocAsyncCtx6 + 48 | 0; //@line 21158
    HEAP32[$136 >> 2] = $28; //@line 21159
    sp = STACKTOP; //@line 21160
    return;
   }
  }
 } else {
  if (!$201) {
   $203 = HEAP32[$198 + 56 >> 2] | 0; //@line 21168
   if ($203 | 0) {
    if ((HEAP32[$198 + 8 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$96 >> 2] = $203; //@line 21175
     HEAP32[$97 >> 2] = HEAP32[$198 + 60 >> 2]; //@line 21178
    }
   }
  }
  HEAP32[7840 + ($12 << 2) >> 2] = $2; //@line 21183
  HEAP32[$104 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 21186
 }
 HEAP32[___async_retval >> 2] = $$; //@line 21189
 return;
}
function __Z29nsapi_dns_query_async_timeoutv() {
 var $$02972 = 0, $$03071 = 0, $$131 = 0, $$sroa_idx5$i$i = 0, $$sroa_idx5$i$i43 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $113 = 0, $116 = 0, $13 = 0, $14 = 0, $142 = 0, $143 = 0, $144 = 0, $148 = 0, $149 = 0, $153 = 0, $16 = 0, $17 = 0, $180 = 0, $181 = 0, $182 = 0, $2 = 0, $208 = 0, $211 = 0, $237 = 0, $24 = 0, $240 = 0, $25 = 0, $270 = 0, $271 = 0, $275 = 0, $279 = 0, $280 = 0, $282 = 0, $286 = 0, $29 = 0, $291 = 0, $294 = 0, $297 = 0, $3 = 0, $300 = 0, $4 = 0, $5 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $84 = 0, $87 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx34 = 0, $AsyncCtx37 = 0, $AsyncCtx40 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8783
 STACKTOP = STACKTOP + 96 | 0; //@line 8784
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 8784
 $0 = sp + 80 | 0; //@line 8785
 $1 = sp + 64 | 0; //@line 8786
 $2 = sp + 48 | 0; //@line 8787
 $3 = sp + 32 | 0; //@line 8788
 $4 = sp + 16 | 0; //@line 8789
 $5 = sp; //@line 8790
 $6 = $2 + 12 | 0; //@line 8791
 $7 = $3 + 8 | 0; //@line 8792
 $$sroa_idx5$i$i43 = $3 + 4 | 0; //@line 8793
 $8 = $3 + 12 | 0; //@line 8794
 $9 = $0 + 12 | 0; //@line 8795
 $10 = $1 + 8 | 0; //@line 8796
 $$sroa_idx5$i$i = $1 + 4 | 0; //@line 8797
 $11 = $1 + 12 | 0; //@line 8798
 $$02972 = 0; //@line 8799
 $$03071 = 0; //@line 8799
 L1 : while (1) {
  $13 = 7840 + ($$02972 << 2) | 0; //@line 8801
  $14 = HEAP32[$13 >> 2] | 0; //@line 8802
  if (!$14) {
   $$131 = $$03071; //@line 8805
  } else {
   $16 = $14 + 72 | 0; //@line 8807
   $17 = HEAP32[$16 >> 2] | 0; //@line 8808
   if ($17 >>> 0 > 100) {
    HEAP32[$16 >> 2] = $17 + -100; //@line 8812
   } else {
    if ((HEAP32[$$03071 + 4 >> 2] | 0) == -3012) {
     HEAP32[$$03071 + 76 >> 2] = 0; //@line 8819
     $24 = $14 + 44 | 0; //@line 8820
     $25 = HEAP32[$24 >> 2] | 0; //@line 8821
     if (!$25) {
      $56 = 0; //@line 8824
      $58 = $14; //@line 8824
     } else {
      $29 = HEAP32[$25 + 4 >> 2] | 0; //@line 8828
      $AsyncCtx = _emscripten_alloc_async_context(108, sp) | 0; //@line 8829
      FUNCTION_TABLE_vii[$29 & 7]($0, $14 + 32 | 0); //@line 8830
      if (___async) {
       label = 9; //@line 8833
       break;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 8836
      $56 = HEAP32[$24 >> 2] | 0; //@line 8839
      $58 = HEAP32[$13 >> 2] | 0; //@line 8839
     }
     HEAP32[$9 >> 2] = $56; //@line 8841
     $57 = HEAP32[$58 >> 2] | 0; //@line 8842
     HEAP32[$10 >> 2] = 0; //@line 8843
     HEAP32[$1 >> 2] = 192; //@line 8844
     HEAP32[$$sroa_idx5$i$i >> 2] = $57; //@line 8845
     HEAP32[$11 >> 2] = 764; //@line 8846
     $AsyncCtx40 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8847
     __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 8848
     if (___async) {
      label = 12; //@line 8851
      break;
     }
     _emscripten_free_async_context($AsyncCtx40 | 0); //@line 8854
     $84 = HEAP32[$11 >> 2] | 0; //@line 8855
     if ($84 | 0) {
      $87 = HEAP32[$84 + 8 >> 2] | 0; //@line 8859
      $AsyncCtx3 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8860
      FUNCTION_TABLE_vi[$87 & 511]($1); //@line 8861
      if (___async) {
       label = 15; //@line 8864
       break;
      }
      _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8867
     }
     $113 = HEAP32[$9 >> 2] | 0; //@line 8869
     if ($113 | 0) {
      $116 = HEAP32[$113 + 8 >> 2] | 0; //@line 8873
      $AsyncCtx7 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8874
      FUNCTION_TABLE_vi[$116 & 511]($0); //@line 8875
      if (___async) {
       label = 19; //@line 8878
       break;
      }
      _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8881
     }
    }
   }
   $142 = HEAP32[$13 >> 2] | 0; //@line 8885
   $143 = $142 + 76 | 0; //@line 8886
   $144 = HEAP32[$143 >> 2] | 0; //@line 8887
   do {
    if ($144 | 0) {
     if ($144 >>> 0 > 100) {
      HEAP32[$143 >> 2] = $144 + -100; //@line 8894
      break;
     }
     HEAP32[$143 >> 2] = 0; //@line 8897
     $148 = $142 + 44 | 0; //@line 8898
     $149 = HEAP32[$148 >> 2] | 0; //@line 8899
     if (!$149) {
      $180 = 0; //@line 8902
      $182 = $142; //@line 8902
     } else {
      $153 = HEAP32[$149 + 4 >> 2] | 0; //@line 8906
      $AsyncCtx11 = _emscripten_alloc_async_context(108, sp) | 0; //@line 8907
      FUNCTION_TABLE_vii[$153 & 7]($2, $142 + 32 | 0); //@line 8908
      if (___async) {
       label = 26; //@line 8911
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8914
      $180 = HEAP32[$148 >> 2] | 0; //@line 8917
      $182 = HEAP32[$13 >> 2] | 0; //@line 8917
     }
     HEAP32[$6 >> 2] = $180; //@line 8919
     $181 = HEAP32[$182 >> 2] | 0; //@line 8920
     HEAP32[$7 >> 2] = 0; //@line 8921
     HEAP32[$3 >> 2] = 197; //@line 8922
     HEAP32[$$sroa_idx5$i$i43 >> 2] = $181; //@line 8923
     HEAP32[$8 >> 2] = 764; //@line 8924
     $AsyncCtx37 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8925
     __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 0, $3) | 0; //@line 8926
     if (___async) {
      label = 29; //@line 8929
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx37 | 0); //@line 8932
     $208 = HEAP32[$8 >> 2] | 0; //@line 8933
     if ($208 | 0) {
      $211 = HEAP32[$208 + 8 >> 2] | 0; //@line 8937
      $AsyncCtx15 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8938
      FUNCTION_TABLE_vi[$211 & 511]($3); //@line 8939
      if (___async) {
       label = 32; //@line 8942
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8945
     }
     $237 = HEAP32[$6 >> 2] | 0; //@line 8947
     if ($237 | 0) {
      $240 = HEAP32[$237 + 8 >> 2] | 0; //@line 8951
      $AsyncCtx19 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8952
      FUNCTION_TABLE_vi[$240 & 511]($2); //@line 8953
      if (___async) {
       label = 36; //@line 8956
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx19 | 0); //@line 8959
     }
    }
   } while (0);
   if (!$$03071) {
    $$131 = HEAP32[$13 >> 2] | 0; //@line 8966
   } else {
    $$131 = $$03071; //@line 8968
   }
  }
  if (($$02972 | 0) < 4) {
   $$02972 = $$02972 + 1 | 0; //@line 8974
   $$03071 = $$131; //@line 8974
  } else {
   label = 2; //@line 8976
   break;
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   STACKTOP = sp; //@line 8983
   return;
  }
  $270 = $$131 + 44 | 0; //@line 8985
  $271 = HEAP32[$270 >> 2] | 0; //@line 8986
  do {
   if (!$271) {
    $280 = 0; //@line 8990
   } else {
    $275 = HEAP32[$271 + 4 >> 2] | 0; //@line 8994
    $AsyncCtx23 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8995
    FUNCTION_TABLE_vii[$275 & 7]($4, $$131 + 32 | 0); //@line 8996
    if (___async) {
     HEAP32[$AsyncCtx23 >> 2] = 201; //@line 8999
     HEAP32[$AsyncCtx23 + 4 >> 2] = $270; //@line 9001
     HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 9003
     HEAP32[$AsyncCtx23 + 12 >> 2] = $5; //@line 9005
     sp = STACKTOP; //@line 9006
     STACKTOP = sp; //@line 9007
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 9009
     $280 = HEAP32[$270 >> 2] | 0; //@line 9011
     break;
    }
   }
  } while (0);
  $279 = $4 + 12 | 0; //@line 9016
  HEAP32[$279 >> 2] = $280; //@line 9017
  $282 = $5 + 4 | 0; //@line 9019
  HEAP32[$282 >> 2] = 0; //@line 9021
  HEAP32[$282 + 4 >> 2] = 0; //@line 9024
  HEAP32[$5 >> 2] = 3; //@line 9025
  $286 = $5 + 12 | 0; //@line 9026
  HEAP32[$286 >> 2] = 752; //@line 9027
  $AsyncCtx34 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9028
  __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $5) | 0; //@line 9029
  if (___async) {
   HEAP32[$AsyncCtx34 >> 2] = 202; //@line 9032
   HEAP32[$AsyncCtx34 + 4 >> 2] = $286; //@line 9034
   HEAP32[$AsyncCtx34 + 8 >> 2] = $279; //@line 9036
   HEAP32[$AsyncCtx34 + 12 >> 2] = $5; //@line 9038
   HEAP32[$AsyncCtx34 + 16 >> 2] = $4; //@line 9040
   sp = STACKTOP; //@line 9041
   STACKTOP = sp; //@line 9042
   return;
  }
  _emscripten_free_async_context($AsyncCtx34 | 0); //@line 9044
  $291 = HEAP32[$286 >> 2] | 0; //@line 9045
  do {
   if ($291 | 0) {
    $294 = HEAP32[$291 + 8 >> 2] | 0; //@line 9050
    $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9051
    FUNCTION_TABLE_vi[$294 & 511]($5); //@line 9052
    if (___async) {
     HEAP32[$AsyncCtx27 >> 2] = 203; //@line 9055
     HEAP32[$AsyncCtx27 + 4 >> 2] = $279; //@line 9057
     HEAP32[$AsyncCtx27 + 8 >> 2] = $4; //@line 9059
     sp = STACKTOP; //@line 9060
     STACKTOP = sp; //@line 9061
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx27 | 0); //@line 9063
     break;
    }
   }
  } while (0);
  $297 = HEAP32[$279 >> 2] | 0; //@line 9068
  if (!$297) {
   STACKTOP = sp; //@line 9071
   return;
  }
  $300 = HEAP32[$297 + 8 >> 2] | 0; //@line 9074
  $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9075
  FUNCTION_TABLE_vi[$300 & 511]($4); //@line 9076
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 204; //@line 9079
   sp = STACKTOP; //@line 9080
   STACKTOP = sp; //@line 9081
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 9083
  STACKTOP = sp; //@line 9084
  return;
 } else if ((label | 0) == 9) {
  HEAP32[$AsyncCtx >> 2] = 191; //@line 9087
  HEAP32[$AsyncCtx + 4 >> 2] = $$03071; //@line 9089
  HEAP32[$AsyncCtx + 8 >> 2] = $$02972; //@line 9091
  HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 9093
  HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 9095
  HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 9097
  HEAP32[$AsyncCtx + 24 >> 2] = $9; //@line 9099
  HEAP32[$AsyncCtx + 28 >> 2] = $10; //@line 9101
  HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 9103
  HEAP32[$AsyncCtx + 36 >> 2] = $$sroa_idx5$i$i; //@line 9105
  HEAP32[$AsyncCtx + 40 >> 2] = $11; //@line 9107
  HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 9109
  HEAP32[$AsyncCtx + 48 >> 2] = $1; //@line 9111
  HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 9113
  HEAP32[$AsyncCtx + 56 >> 2] = $1; //@line 9115
  HEAP32[$AsyncCtx + 60 >> 2] = $9; //@line 9117
  HEAP32[$AsyncCtx + 64 >> 2] = $24; //@line 9119
  HEAP32[$AsyncCtx + 68 >> 2] = $6; //@line 9121
  HEAP32[$AsyncCtx + 72 >> 2] = $7; //@line 9123
  HEAP32[$AsyncCtx + 76 >> 2] = $3; //@line 9125
  HEAP32[$AsyncCtx + 80 >> 2] = $$sroa_idx5$i$i43; //@line 9127
  HEAP32[$AsyncCtx + 84 >> 2] = $8; //@line 9129
  HEAP32[$AsyncCtx + 88 >> 2] = $2; //@line 9131
  HEAP32[$AsyncCtx + 92 >> 2] = $3; //@line 9133
  HEAP32[$AsyncCtx + 96 >> 2] = $2; //@line 9135
  HEAP32[$AsyncCtx + 100 >> 2] = $3; //@line 9137
  HEAP32[$AsyncCtx + 104 >> 2] = $6; //@line 9139
  sp = STACKTOP; //@line 9140
  STACKTOP = sp; //@line 9141
  return;
 } else if ((label | 0) == 12) {
  HEAP32[$AsyncCtx40 >> 2] = 193; //@line 9144
  HEAP32[$AsyncCtx40 + 4 >> 2] = $$03071; //@line 9146
  HEAP32[$AsyncCtx40 + 8 >> 2] = $$02972; //@line 9148
  HEAP32[$AsyncCtx40 + 12 >> 2] = $13; //@line 9150
  HEAP32[$AsyncCtx40 + 16 >> 2] = $0; //@line 9152
  HEAP32[$AsyncCtx40 + 20 >> 2] = $5; //@line 9154
  HEAP32[$AsyncCtx40 + 24 >> 2] = $4; //@line 9156
  HEAP32[$AsyncCtx40 + 28 >> 2] = $9; //@line 9158
  HEAP32[$AsyncCtx40 + 32 >> 2] = $10; //@line 9160
  HEAP32[$AsyncCtx40 + 36 >> 2] = $1; //@line 9162
  HEAP32[$AsyncCtx40 + 40 >> 2] = $$sroa_idx5$i$i; //@line 9164
  HEAP32[$AsyncCtx40 + 44 >> 2] = $11; //@line 9166
  HEAP32[$AsyncCtx40 + 48 >> 2] = $0; //@line 9168
  HEAP32[$AsyncCtx40 + 52 >> 2] = $1; //@line 9170
  HEAP32[$AsyncCtx40 + 56 >> 2] = $1; //@line 9172
  HEAP32[$AsyncCtx40 + 60 >> 2] = $9; //@line 9174
  HEAP32[$AsyncCtx40 + 64 >> 2] = $6; //@line 9176
  HEAP32[$AsyncCtx40 + 68 >> 2] = $7; //@line 9178
  HEAP32[$AsyncCtx40 + 72 >> 2] = $3; //@line 9180
  HEAP32[$AsyncCtx40 + 76 >> 2] = $$sroa_idx5$i$i43; //@line 9182
  HEAP32[$AsyncCtx40 + 80 >> 2] = $8; //@line 9184
  HEAP32[$AsyncCtx40 + 84 >> 2] = $2; //@line 9186
  HEAP32[$AsyncCtx40 + 88 >> 2] = $3; //@line 9188
  HEAP32[$AsyncCtx40 + 92 >> 2] = $2; //@line 9190
  HEAP32[$AsyncCtx40 + 96 >> 2] = $3; //@line 9192
  HEAP32[$AsyncCtx40 + 100 >> 2] = $6; //@line 9194
  sp = STACKTOP; //@line 9195
  STACKTOP = sp; //@line 9196
  return;
 } else if ((label | 0) == 15) {
  HEAP32[$AsyncCtx3 >> 2] = 194; //@line 9199
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$03071; //@line 9201
  HEAP32[$AsyncCtx3 + 8 >> 2] = $$02972; //@line 9203
  HEAP32[$AsyncCtx3 + 12 >> 2] = $13; //@line 9205
  HEAP32[$AsyncCtx3 + 16 >> 2] = $0; //@line 9207
  HEAP32[$AsyncCtx3 + 20 >> 2] = $4; //@line 9209
  HEAP32[$AsyncCtx3 + 24 >> 2] = $9; //@line 9211
  HEAP32[$AsyncCtx3 + 28 >> 2] = $10; //@line 9213
  HEAP32[$AsyncCtx3 + 32 >> 2] = $1; //@line 9215
  HEAP32[$AsyncCtx3 + 36 >> 2] = $$sroa_idx5$i$i; //@line 9217
  HEAP32[$AsyncCtx3 + 40 >> 2] = $11; //@line 9219
  HEAP32[$AsyncCtx3 + 44 >> 2] = $0; //@line 9221
  HEAP32[$AsyncCtx3 + 48 >> 2] = $1; //@line 9223
  HEAP32[$AsyncCtx3 + 52 >> 2] = $5; //@line 9225
  HEAP32[$AsyncCtx3 + 56 >> 2] = $1; //@line 9227
  HEAP32[$AsyncCtx3 + 60 >> 2] = $9; //@line 9229
  HEAP32[$AsyncCtx3 + 64 >> 2] = $6; //@line 9231
  HEAP32[$AsyncCtx3 + 68 >> 2] = $7; //@line 9233
  HEAP32[$AsyncCtx3 + 72 >> 2] = $3; //@line 9235
  HEAP32[$AsyncCtx3 + 76 >> 2] = $$sroa_idx5$i$i43; //@line 9237
  HEAP32[$AsyncCtx3 + 80 >> 2] = $8; //@line 9239
  HEAP32[$AsyncCtx3 + 84 >> 2] = $2; //@line 9241
  HEAP32[$AsyncCtx3 + 88 >> 2] = $3; //@line 9243
  HEAP32[$AsyncCtx3 + 92 >> 2] = $2; //@line 9245
  HEAP32[$AsyncCtx3 + 96 >> 2] = $3; //@line 9247
  HEAP32[$AsyncCtx3 + 100 >> 2] = $6; //@line 9249
  sp = STACKTOP; //@line 9250
  STACKTOP = sp; //@line 9251
  return;
 } else if ((label | 0) == 19) {
  HEAP32[$AsyncCtx7 >> 2] = 195; //@line 9254
  HEAP32[$AsyncCtx7 + 4 >> 2] = $$03071; //@line 9256
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$02972; //@line 9258
  HEAP32[$AsyncCtx7 + 12 >> 2] = $13; //@line 9260
  HEAP32[$AsyncCtx7 + 16 >> 2] = $0; //@line 9262
  HEAP32[$AsyncCtx7 + 20 >> 2] = $4; //@line 9264
  HEAP32[$AsyncCtx7 + 24 >> 2] = $9; //@line 9266
  HEAP32[$AsyncCtx7 + 28 >> 2] = $10; //@line 9268
  HEAP32[$AsyncCtx7 + 32 >> 2] = $1; //@line 9270
  HEAP32[$AsyncCtx7 + 36 >> 2] = $$sroa_idx5$i$i; //@line 9272
  HEAP32[$AsyncCtx7 + 40 >> 2] = $11; //@line 9274
  HEAP32[$AsyncCtx7 + 44 >> 2] = $0; //@line 9276
  HEAP32[$AsyncCtx7 + 48 >> 2] = $1; //@line 9278
  HEAP32[$AsyncCtx7 + 52 >> 2] = $5; //@line 9280
  HEAP32[$AsyncCtx7 + 56 >> 2] = $1; //@line 9282
  HEAP32[$AsyncCtx7 + 60 >> 2] = $9; //@line 9284
  HEAP32[$AsyncCtx7 + 64 >> 2] = $6; //@line 9286
  HEAP32[$AsyncCtx7 + 68 >> 2] = $7; //@line 9288
  HEAP32[$AsyncCtx7 + 72 >> 2] = $3; //@line 9290
  HEAP32[$AsyncCtx7 + 76 >> 2] = $$sroa_idx5$i$i43; //@line 9292
  HEAP32[$AsyncCtx7 + 80 >> 2] = $8; //@line 9294
  HEAP32[$AsyncCtx7 + 84 >> 2] = $2; //@line 9296
  HEAP32[$AsyncCtx7 + 88 >> 2] = $3; //@line 9298
  HEAP32[$AsyncCtx7 + 92 >> 2] = $2; //@line 9300
  HEAP32[$AsyncCtx7 + 96 >> 2] = $3; //@line 9302
  HEAP32[$AsyncCtx7 + 100 >> 2] = $6; //@line 9304
  sp = STACKTOP; //@line 9305
  STACKTOP = sp; //@line 9306
  return;
 } else if ((label | 0) == 26) {
  HEAP32[$AsyncCtx11 >> 2] = 196; //@line 9309
  HEAP32[$AsyncCtx11 + 4 >> 2] = $$03071; //@line 9311
  HEAP32[$AsyncCtx11 + 8 >> 2] = $$02972; //@line 9313
  HEAP32[$AsyncCtx11 + 12 >> 2] = $13; //@line 9315
  HEAP32[$AsyncCtx11 + 16 >> 2] = $0; //@line 9317
  HEAP32[$AsyncCtx11 + 20 >> 2] = $4; //@line 9319
  HEAP32[$AsyncCtx11 + 24 >> 2] = $9; //@line 9321
  HEAP32[$AsyncCtx11 + 28 >> 2] = $10; //@line 9323
  HEAP32[$AsyncCtx11 + 32 >> 2] = $1; //@line 9325
  HEAP32[$AsyncCtx11 + 36 >> 2] = $$sroa_idx5$i$i; //@line 9327
  HEAP32[$AsyncCtx11 + 40 >> 2] = $11; //@line 9329
  HEAP32[$AsyncCtx11 + 44 >> 2] = $0; //@line 9331
  HEAP32[$AsyncCtx11 + 48 >> 2] = $1; //@line 9333
  HEAP32[$AsyncCtx11 + 52 >> 2] = $5; //@line 9335
  HEAP32[$AsyncCtx11 + 56 >> 2] = $148; //@line 9337
  HEAP32[$AsyncCtx11 + 60 >> 2] = $1; //@line 9339
  HEAP32[$AsyncCtx11 + 64 >> 2] = $9; //@line 9341
  HEAP32[$AsyncCtx11 + 68 >> 2] = $6; //@line 9343
  HEAP32[$AsyncCtx11 + 72 >> 2] = $7; //@line 9345
  HEAP32[$AsyncCtx11 + 76 >> 2] = $3; //@line 9347
  HEAP32[$AsyncCtx11 + 80 >> 2] = $$sroa_idx5$i$i43; //@line 9349
  HEAP32[$AsyncCtx11 + 84 >> 2] = $8; //@line 9351
  HEAP32[$AsyncCtx11 + 88 >> 2] = $2; //@line 9353
  HEAP32[$AsyncCtx11 + 92 >> 2] = $3; //@line 9355
  HEAP32[$AsyncCtx11 + 96 >> 2] = $2; //@line 9357
  HEAP32[$AsyncCtx11 + 100 >> 2] = $3; //@line 9359
  HEAP32[$AsyncCtx11 + 104 >> 2] = $6; //@line 9361
  sp = STACKTOP; //@line 9362
  STACKTOP = sp; //@line 9363
  return;
 } else if ((label | 0) == 29) {
  HEAP32[$AsyncCtx37 >> 2] = 198; //@line 9366
  HEAP32[$AsyncCtx37 + 4 >> 2] = $$03071; //@line 9368
  HEAP32[$AsyncCtx37 + 8 >> 2] = $$02972; //@line 9370
  HEAP32[$AsyncCtx37 + 12 >> 2] = $13; //@line 9372
  HEAP32[$AsyncCtx37 + 16 >> 2] = $0; //@line 9374
  HEAP32[$AsyncCtx37 + 20 >> 2] = $5; //@line 9376
  HEAP32[$AsyncCtx37 + 24 >> 2] = $4; //@line 9378
  HEAP32[$AsyncCtx37 + 28 >> 2] = $9; //@line 9380
  HEAP32[$AsyncCtx37 + 32 >> 2] = $10; //@line 9382
  HEAP32[$AsyncCtx37 + 36 >> 2] = $1; //@line 9384
  HEAP32[$AsyncCtx37 + 40 >> 2] = $$sroa_idx5$i$i; //@line 9386
  HEAP32[$AsyncCtx37 + 44 >> 2] = $11; //@line 9388
  HEAP32[$AsyncCtx37 + 48 >> 2] = $0; //@line 9390
  HEAP32[$AsyncCtx37 + 52 >> 2] = $1; //@line 9392
  HEAP32[$AsyncCtx37 + 56 >> 2] = $1; //@line 9394
  HEAP32[$AsyncCtx37 + 60 >> 2] = $9; //@line 9396
  HEAP32[$AsyncCtx37 + 64 >> 2] = $6; //@line 9398
  HEAP32[$AsyncCtx37 + 68 >> 2] = $7; //@line 9400
  HEAP32[$AsyncCtx37 + 72 >> 2] = $3; //@line 9402
  HEAP32[$AsyncCtx37 + 76 >> 2] = $$sroa_idx5$i$i43; //@line 9404
  HEAP32[$AsyncCtx37 + 80 >> 2] = $8; //@line 9406
  HEAP32[$AsyncCtx37 + 84 >> 2] = $2; //@line 9408
  HEAP32[$AsyncCtx37 + 88 >> 2] = $3; //@line 9410
  HEAP32[$AsyncCtx37 + 92 >> 2] = $2; //@line 9412
  HEAP32[$AsyncCtx37 + 96 >> 2] = $3; //@line 9414
  HEAP32[$AsyncCtx37 + 100 >> 2] = $6; //@line 9416
  sp = STACKTOP; //@line 9417
  STACKTOP = sp; //@line 9418
  return;
 } else if ((label | 0) == 32) {
  HEAP32[$AsyncCtx15 >> 2] = 199; //@line 9421
  HEAP32[$AsyncCtx15 + 4 >> 2] = $$03071; //@line 9423
  HEAP32[$AsyncCtx15 + 8 >> 2] = $$02972; //@line 9425
  HEAP32[$AsyncCtx15 + 12 >> 2] = $13; //@line 9427
  HEAP32[$AsyncCtx15 + 16 >> 2] = $0; //@line 9429
  HEAP32[$AsyncCtx15 + 20 >> 2] = $4; //@line 9431
  HEAP32[$AsyncCtx15 + 24 >> 2] = $9; //@line 9433
  HEAP32[$AsyncCtx15 + 28 >> 2] = $10; //@line 9435
  HEAP32[$AsyncCtx15 + 32 >> 2] = $1; //@line 9437
  HEAP32[$AsyncCtx15 + 36 >> 2] = $$sroa_idx5$i$i; //@line 9439
  HEAP32[$AsyncCtx15 + 40 >> 2] = $11; //@line 9441
  HEAP32[$AsyncCtx15 + 44 >> 2] = $0; //@line 9443
  HEAP32[$AsyncCtx15 + 48 >> 2] = $1; //@line 9445
  HEAP32[$AsyncCtx15 + 52 >> 2] = $5; //@line 9447
  HEAP32[$AsyncCtx15 + 56 >> 2] = $1; //@line 9449
  HEAP32[$AsyncCtx15 + 60 >> 2] = $9; //@line 9451
  HEAP32[$AsyncCtx15 + 64 >> 2] = $6; //@line 9453
  HEAP32[$AsyncCtx15 + 68 >> 2] = $7; //@line 9455
  HEAP32[$AsyncCtx15 + 72 >> 2] = $3; //@line 9457
  HEAP32[$AsyncCtx15 + 76 >> 2] = $$sroa_idx5$i$i43; //@line 9459
  HEAP32[$AsyncCtx15 + 80 >> 2] = $8; //@line 9461
  HEAP32[$AsyncCtx15 + 84 >> 2] = $2; //@line 9463
  HEAP32[$AsyncCtx15 + 88 >> 2] = $3; //@line 9465
  HEAP32[$AsyncCtx15 + 92 >> 2] = $2; //@line 9467
  HEAP32[$AsyncCtx15 + 96 >> 2] = $3; //@line 9469
  HEAP32[$AsyncCtx15 + 100 >> 2] = $6; //@line 9471
  sp = STACKTOP; //@line 9472
  STACKTOP = sp; //@line 9473
  return;
 } else if ((label | 0) == 36) {
  HEAP32[$AsyncCtx19 >> 2] = 200; //@line 9476
  HEAP32[$AsyncCtx19 + 4 >> 2] = $$03071; //@line 9478
  HEAP32[$AsyncCtx19 + 8 >> 2] = $$02972; //@line 9480
  HEAP32[$AsyncCtx19 + 12 >> 2] = $13; //@line 9482
  HEAP32[$AsyncCtx19 + 16 >> 2] = $0; //@line 9484
  HEAP32[$AsyncCtx19 + 20 >> 2] = $4; //@line 9486
  HEAP32[$AsyncCtx19 + 24 >> 2] = $9; //@line 9488
  HEAP32[$AsyncCtx19 + 28 >> 2] = $10; //@line 9490
  HEAP32[$AsyncCtx19 + 32 >> 2] = $1; //@line 9492
  HEAP32[$AsyncCtx19 + 36 >> 2] = $$sroa_idx5$i$i; //@line 9494
  HEAP32[$AsyncCtx19 + 40 >> 2] = $11; //@line 9496
  HEAP32[$AsyncCtx19 + 44 >> 2] = $0; //@line 9498
  HEAP32[$AsyncCtx19 + 48 >> 2] = $1; //@line 9500
  HEAP32[$AsyncCtx19 + 52 >> 2] = $5; //@line 9502
  HEAP32[$AsyncCtx19 + 56 >> 2] = $1; //@line 9504
  HEAP32[$AsyncCtx19 + 60 >> 2] = $9; //@line 9506
  HEAP32[$AsyncCtx19 + 64 >> 2] = $6; //@line 9508
  HEAP32[$AsyncCtx19 + 68 >> 2] = $7; //@line 9510
  HEAP32[$AsyncCtx19 + 72 >> 2] = $3; //@line 9512
  HEAP32[$AsyncCtx19 + 76 >> 2] = $$sroa_idx5$i$i43; //@line 9514
  HEAP32[$AsyncCtx19 + 80 >> 2] = $8; //@line 9516
  HEAP32[$AsyncCtx19 + 84 >> 2] = $2; //@line 9518
  HEAP32[$AsyncCtx19 + 88 >> 2] = $3; //@line 9520
  HEAP32[$AsyncCtx19 + 92 >> 2] = $2; //@line 9522
  HEAP32[$AsyncCtx19 + 96 >> 2] = $3; //@line 9524
  HEAP32[$AsyncCtx19 + 100 >> 2] = $6; //@line 9526
  sp = STACKTOP; //@line 9527
  STACKTOP = sp; //@line 9528
  return;
 }
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1713
 STACKTOP = STACKTOP + 96 | 0; //@line 1714
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 1714
 $vararg_buffer23 = sp + 72 | 0; //@line 1715
 $vararg_buffer20 = sp + 64 | 0; //@line 1716
 $vararg_buffer18 = sp + 56 | 0; //@line 1717
 $vararg_buffer15 = sp + 48 | 0; //@line 1718
 $vararg_buffer12 = sp + 40 | 0; //@line 1719
 $vararg_buffer9 = sp + 32 | 0; //@line 1720
 $vararg_buffer6 = sp + 24 | 0; //@line 1721
 $vararg_buffer3 = sp + 16 | 0; //@line 1722
 $vararg_buffer1 = sp + 8 | 0; //@line 1723
 $vararg_buffer = sp; //@line 1724
 $4 = sp + 80 | 0; //@line 1725
 $5 = HEAP32[135] | 0; //@line 1726
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 1730
   FUNCTION_TABLE_v[$5 & 7](); //@line 1731
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 64; //@line 1734
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer6; //@line 1736
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1738
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer6; //@line 1740
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer9; //@line 1742
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer9; //@line 1744
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer3; //@line 1746
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer3; //@line 1748
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer12; //@line 1750
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer12; //@line 1752
    HEAP32[$AsyncCtx + 40 >> 2] = $vararg_buffer15; //@line 1754
    HEAP32[$AsyncCtx + 44 >> 2] = $vararg_buffer15; //@line 1756
    HEAP32[$AsyncCtx + 48 >> 2] = $vararg_buffer18; //@line 1758
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer18; //@line 1760
    HEAP8[$AsyncCtx + 56 >> 0] = $0; //@line 1762
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer1; //@line 1764
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer1; //@line 1766
    HEAP32[$AsyncCtx + 68 >> 2] = $4; //@line 1768
    HEAP32[$AsyncCtx + 72 >> 2] = $3; //@line 1770
    HEAP32[$AsyncCtx + 76 >> 2] = $2; //@line 1772
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer; //@line 1774
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer; //@line 1776
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer20; //@line 1778
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer20; //@line 1780
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer23; //@line 1782
    HEAP32[$AsyncCtx + 100 >> 2] = $vararg_buffer23; //@line 1784
    sp = STACKTOP; //@line 1785
    STACKTOP = sp; //@line 1786
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1788
    HEAP32[137] = (HEAP32[137] | 0) + 1; //@line 1791
    break;
   }
  }
 } while (0);
 $34 = HEAP32[126] | 0; //@line 1796
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 1800
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[123] | 0; //@line 1806
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 1813
       break;
      }
     }
     $43 = HEAP32[124] | 0; //@line 1817
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 1821
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 1826
      } else {
       label = 11; //@line 1828
      }
     }
    } else {
     label = 11; //@line 1832
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 1836
   }
   if (!((HEAP32[133] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[130] = HEAP32[128]; //@line 1848
    break;
   }
   $54 = HEAPU8[488] | 0; //@line 1852
   $55 = $0 & 255; //@line 1853
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 1858
    $$lobit = $59 >>> 6; //@line 1859
    $60 = $$lobit & 255; //@line 1860
    $64 = ($54 & 32 | 0) == 0; //@line 1864
    $65 = HEAP32[127] | 0; //@line 1865
    $66 = HEAP32[126] | 0; //@line 1866
    $67 = $0 << 24 >> 24 == 1; //@line 1867
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1871
      _vsnprintf($66, $65, $2, $3) | 0; //@line 1872
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 65; //@line 1875
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 1878
       sp = STACKTOP; //@line 1879
       STACKTOP = sp; //@line 1880
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 1882
      $69 = HEAP32[134] | 0; //@line 1883
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[133] | 0; //@line 1887
       $74 = HEAP32[126] | 0; //@line 1888
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1889
       FUNCTION_TABLE_vi[$73 & 511]($74); //@line 1890
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 68; //@line 1893
        sp = STACKTOP; //@line 1894
        STACKTOP = sp; //@line 1895
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1897
        break;
       }
      }
      $71 = HEAP32[126] | 0; //@line 1901
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1902
      FUNCTION_TABLE_vi[$69 & 511]($71); //@line 1903
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 66; //@line 1906
       sp = STACKTOP; //@line 1907
       STACKTOP = sp; //@line 1908
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 1910
      $72 = HEAP32[134] | 0; //@line 1911
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1912
      FUNCTION_TABLE_vi[$72 & 511](3535); //@line 1913
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 67; //@line 1916
       sp = STACKTOP; //@line 1917
       STACKTOP = sp; //@line 1918
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1920
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 1927
       $$1143 = $66; //@line 1927
       $$1145 = $65; //@line 1927
       $$3154 = 0; //@line 1927
       label = 38; //@line 1928
      } else {
       if ($64) {
        $$0142 = $66; //@line 1931
        $$0144 = $65; //@line 1931
       } else {
        $76 = _snprintf($66, $65, 3537, $vararg_buffer) | 0; //@line 1933
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 1935
        $78 = ($$ | 0) > 0; //@line 1936
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 1941
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 1941
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 1945
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 3555; //@line 1951
          label = 35; //@line 1952
          break;
         }
        case 1:
         {
          $$sink = 3561; //@line 1956
          label = 35; //@line 1957
          break;
         }
        case 3:
         {
          $$sink = 3549; //@line 1961
          label = 35; //@line 1962
          break;
         }
        case 7:
         {
          $$sink = 3543; //@line 1966
          label = 35; //@line 1967
          break;
         }
        default:
         {
          $$0141 = 0; //@line 1971
          $$1152 = 0; //@line 1971
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 1975
         $$0141 = $60 & 1; //@line 1978
         $$1152 = _snprintf($$0142, $$0144, 3567, $vararg_buffer1) | 0; //@line 1978
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 1981
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 1983
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 1985
         $$1$off0 = $extract$t159; //@line 1990
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 1990
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 1990
         $$3154 = $$1152; //@line 1990
         label = 38; //@line 1991
        } else {
         $$1$off0 = $extract$t159; //@line 1993
         $$1143 = $$0142; //@line 1993
         $$1145 = $$0144; //@line 1993
         $$3154 = $$1152$; //@line 1993
         label = 38; //@line 1994
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[131] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 2007
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 2008
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 2009
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 69; //@line 2012
           HEAP32[$AsyncCtx60 + 4 >> 2] = $$1143; //@line 2014
           HEAP32[$AsyncCtx60 + 8 >> 2] = $$1145; //@line 2016
           HEAP32[$AsyncCtx60 + 12 >> 2] = $55; //@line 2018
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer6; //@line 2020
           HEAP32[$AsyncCtx60 + 20 >> 2] = $1; //@line 2022
           HEAP32[$AsyncCtx60 + 24 >> 2] = $vararg_buffer6; //@line 2024
           HEAP32[$AsyncCtx60 + 28 >> 2] = $vararg_buffer9; //@line 2026
           HEAP32[$AsyncCtx60 + 32 >> 2] = $vararg_buffer9; //@line 2028
           HEAP32[$AsyncCtx60 + 36 >> 2] = $vararg_buffer3; //@line 2030
           HEAP32[$AsyncCtx60 + 40 >> 2] = $vararg_buffer3; //@line 2032
           HEAP32[$AsyncCtx60 + 44 >> 2] = $4; //@line 2034
           HEAP32[$AsyncCtx60 + 48 >> 2] = $vararg_buffer12; //@line 2036
           HEAP32[$AsyncCtx60 + 52 >> 2] = $vararg_buffer12; //@line 2038
           HEAP32[$AsyncCtx60 + 56 >> 2] = $$3154; //@line 2040
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer15; //@line 2042
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer15; //@line 2044
           HEAP8[$AsyncCtx60 + 68 >> 0] = $$1$off0 & 1; //@line 2047
           HEAP32[$AsyncCtx60 + 72 >> 2] = $vararg_buffer20; //@line 2049
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer20; //@line 2051
           HEAP32[$AsyncCtx60 + 80 >> 2] = $vararg_buffer23; //@line 2053
           HEAP32[$AsyncCtx60 + 84 >> 2] = $vararg_buffer23; //@line 2055
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer18; //@line 2057
           HEAP32[$AsyncCtx60 + 92 >> 2] = $vararg_buffer18; //@line 2059
           HEAP32[$AsyncCtx60 + 96 >> 2] = $2; //@line 2061
           HEAP32[$AsyncCtx60 + 100 >> 2] = $3; //@line 2063
           sp = STACKTOP; //@line 2064
           STACKTOP = sp; //@line 2065
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 2067
          $125 = HEAP32[131] | 0; //@line 2072
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 2073
          $126 = FUNCTION_TABLE_ii[$125 & 31](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 2074
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 70; //@line 2077
           HEAP32[$AsyncCtx38 + 4 >> 2] = $$1143; //@line 2079
           HEAP32[$AsyncCtx38 + 8 >> 2] = $$1145; //@line 2081
           HEAP32[$AsyncCtx38 + 12 >> 2] = $55; //@line 2083
           HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer6; //@line 2085
           HEAP32[$AsyncCtx38 + 20 >> 2] = $1; //@line 2087
           HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer6; //@line 2089
           HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer9; //@line 2091
           HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer9; //@line 2093
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer3; //@line 2095
           HEAP32[$AsyncCtx38 + 40 >> 2] = $vararg_buffer3; //@line 2097
           HEAP32[$AsyncCtx38 + 44 >> 2] = $4; //@line 2099
           HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer12; //@line 2101
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer12; //@line 2103
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer15; //@line 2105
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer15; //@line 2107
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer18; //@line 2109
           HEAP32[$AsyncCtx38 + 68 >> 2] = $vararg_buffer18; //@line 2111
           HEAP32[$AsyncCtx38 + 72 >> 2] = $2; //@line 2113
           HEAP32[$AsyncCtx38 + 76 >> 2] = $3; //@line 2115
           HEAP8[$AsyncCtx38 + 80 >> 0] = $$1$off0 & 1; //@line 2118
           HEAP32[$AsyncCtx38 + 84 >> 2] = $vararg_buffer20; //@line 2120
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer20; //@line 2122
           HEAP32[$AsyncCtx38 + 92 >> 2] = $vararg_buffer23; //@line 2124
           HEAP32[$AsyncCtx38 + 96 >> 2] = $vararg_buffer23; //@line 2126
           sp = STACKTOP; //@line 2127
           STACKTOP = sp; //@line 2128
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 2130
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 2131
           $151 = _snprintf($$1143, $$1145, 3567, $vararg_buffer3) | 0; //@line 2132
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 2134
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 2139
            $$3147 = $$1145 - $$10 | 0; //@line 2139
            label = 44; //@line 2140
            break;
           } else {
            $$3147168 = $$1145; //@line 2143
            $$3169 = $$1143; //@line 2143
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 2148
          $$3147 = $$1145; //@line 2148
          label = 44; //@line 2149
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 2155
          $$3169 = $$3; //@line 2155
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 2160
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 2166
          $$5156 = _snprintf($$3169, $$3147168, 3570, $vararg_buffer6) | 0; //@line 2168
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 2172
          $$5156 = _snprintf($$3169, $$3147168, 3585, $vararg_buffer9) | 0; //@line 2174
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 2178
          $$5156 = _snprintf($$3169, $$3147168, 3600, $vararg_buffer12) | 0; //@line 2180
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 2184
          $$5156 = _snprintf($$3169, $$3147168, 3615, $vararg_buffer15) | 0; //@line 2186
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 3630, $vararg_buffer18) | 0; //@line 2191
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 2195
        $168 = $$3169 + $$5156$ | 0; //@line 2197
        $169 = $$3147168 - $$5156$ | 0; //@line 2198
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2202
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 2203
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 71; //@line 2206
          HEAP32[$AsyncCtx56 + 4 >> 2] = $169; //@line 2208
          HEAP32[$AsyncCtx56 + 8 >> 2] = $168; //@line 2210
          HEAP8[$AsyncCtx56 + 12 >> 0] = $$1$off0 & 1; //@line 2213
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer20; //@line 2215
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer20; //@line 2217
          HEAP32[$AsyncCtx56 + 24 >> 2] = $vararg_buffer23; //@line 2219
          HEAP32[$AsyncCtx56 + 28 >> 2] = $vararg_buffer23; //@line 2221
          sp = STACKTOP; //@line 2222
          STACKTOP = sp; //@line 2223
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 2225
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 2227
         $181 = $168 + $$13 | 0; //@line 2229
         $182 = $169 - $$13 | 0; //@line 2230
         if (($$13 | 0) > 0) {
          $184 = HEAP32[132] | 0; //@line 2233
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2238
            $186 = FUNCTION_TABLE_i[$184 & 0]() | 0; //@line 2239
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 72; //@line 2242
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 2244
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 2246
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 2248
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 2250
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 2253
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 2255
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 2257
             sp = STACKTOP; //@line 2258
             STACKTOP = sp; //@line 2259
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 2261
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 2262
             $194 = _snprintf($181, $182, 3567, $vararg_buffer20) | 0; //@line 2263
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 2265
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 2270
              $$6150 = $182 - $$18 | 0; //@line 2270
              $$9 = $$18; //@line 2270
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 2277
            $$6150 = $182; //@line 2277
            $$9 = $$13; //@line 2277
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 3645, $vararg_buffer23) | 0; //@line 2286
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[133] | 0; //@line 2292
      $202 = HEAP32[126] | 0; //@line 2293
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2294
      FUNCTION_TABLE_vi[$201 & 511]($202); //@line 2295
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 73; //@line 2298
       sp = STACKTOP; //@line 2299
       STACKTOP = sp; //@line 2300
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 2302
       break;
      }
     }
    } while (0);
    HEAP32[130] = HEAP32[128]; //@line 2308
   }
  }
 } while (0);
 $204 = HEAP32[136] | 0; //@line 2312
 if (!$204) {
  STACKTOP = sp; //@line 2315
  return;
 }
 $206 = HEAP32[137] | 0; //@line 2317
 HEAP32[137] = 0; //@line 2318
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2319
 FUNCTION_TABLE_v[$204 & 7](); //@line 2320
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 74; //@line 2323
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 2325
  sp = STACKTOP; //@line 2326
  STACKTOP = sp; //@line 2327
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 2329
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 2332
 } else {
  STACKTOP = sp; //@line 2334
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 2337
  $$pre = HEAP32[136] | 0; //@line 2338
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2339
  FUNCTION_TABLE_v[$$pre & 7](); //@line 2340
  if (___async) {
   label = 70; //@line 2343
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 2346
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 2349
  } else {
   label = 72; //@line 2351
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 75; //@line 2356
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 2358
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 2360
  sp = STACKTOP; //@line 2361
  STACKTOP = sp; //@line 2362
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 2365
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_196($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$048$i = 0, $$090 = 0, $$191 = 0, $$4$ph = 0, $$498 = 0, $$byval_copy = 0, $$byval_copy20 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $144 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $91 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15447
 STACKTOP = STACKTOP + 48 | 0; //@line 15448
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 15448
 $$byval_copy20 = sp + 20 | 0; //@line 15449
 $$byval_copy = sp; //@line 15450
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15452
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15454
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15456
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 15458
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15460
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15462
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15464
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15466
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15468
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15470
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15472
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15474
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15476
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15478
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 15480
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 15482
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 15484
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 15486
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 15488
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 15490
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 15492
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 15494
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 15496
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 15498
 $50 = HEAP8[$0 + 100 >> 0] | 0; //@line 15500
 $52 = HEAP8[$0 + 101 >> 0] | 0; //@line 15502
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15504
 do {
  if (($AsyncRetVal | 0) == -3001) {
   $$0 = $50; //@line 15509
   $$090 = $52 + 1 << 24 >> 24; //@line 15509
   label = 2; //@line 15510
  } else {
   if (($AsyncRetVal | 0) < 0) {
    $$4$ph = $AsyncRetVal; //@line 15514
    label = 22; //@line 15515
   } else {
    $144 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($4, 1, $20, $22, $24) | 0; //@line 15517
    if (($144 | 0) <= 0) {
     if (($144 | 0) < 0) {
      $$0 = $50; //@line 15522
      $$090 = $52; //@line 15522
      label = 2; //@line 15523
      break;
     } else {
      $$498 = -3009; //@line 15526
      break;
     }
    }
    $146 = HEAP32[$20 >> 2] | 0; //@line 15530
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 15531
    __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($14, $22, $146); //@line 15532
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 15535
     $147 = $ReallocAsyncCtx2 + 4 | 0; //@line 15536
     HEAP32[$147 >> 2] = $144; //@line 15537
     $148 = $ReallocAsyncCtx2 + 8 | 0; //@line 15538
     HEAP32[$148 >> 2] = $16; //@line 15539
     $149 = $ReallocAsyncCtx2 + 12 | 0; //@line 15540
     HEAP32[$149 >> 2] = $18; //@line 15541
     $150 = $ReallocAsyncCtx2 + 16 | 0; //@line 15542
     HEAP32[$150 >> 2] = $4; //@line 15543
     $151 = $ReallocAsyncCtx2 + 20 | 0; //@line 15544
     HEAP32[$151 >> 2] = $30; //@line 15545
     $152 = $ReallocAsyncCtx2 + 24 | 0; //@line 15546
     HEAP32[$152 >> 2] = $2; //@line 15547
     $153 = $ReallocAsyncCtx2 + 28 | 0; //@line 15548
     HEAP32[$153 >> 2] = $44; //@line 15549
     sp = STACKTOP; //@line 15550
     STACKTOP = sp; //@line 15551
     return;
    }
    ___async_unwind = 0; //@line 15553
    HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 15554
    $147 = $ReallocAsyncCtx2 + 4 | 0; //@line 15555
    HEAP32[$147 >> 2] = $144; //@line 15556
    $148 = $ReallocAsyncCtx2 + 8 | 0; //@line 15557
    HEAP32[$148 >> 2] = $16; //@line 15558
    $149 = $ReallocAsyncCtx2 + 12 | 0; //@line 15559
    HEAP32[$149 >> 2] = $18; //@line 15560
    $150 = $ReallocAsyncCtx2 + 16 | 0; //@line 15561
    HEAP32[$150 >> 2] = $4; //@line 15562
    $151 = $ReallocAsyncCtx2 + 20 | 0; //@line 15563
    HEAP32[$151 >> 2] = $30; //@line 15564
    $152 = $ReallocAsyncCtx2 + 24 | 0; //@line 15565
    HEAP32[$152 >> 2] = $2; //@line 15566
    $153 = $ReallocAsyncCtx2 + 28 | 0; //@line 15567
    HEAP32[$153 >> 2] = $44; //@line 15568
    sp = STACKTOP; //@line 15569
    STACKTOP = sp; //@line 15570
    return;
   }
  }
 } while (0);
 if ((label | 0) == 2) {
  HEAP32[$26 >> 2] = 0; //@line 15575
  HEAP32[$26 + 4 >> 2] = 0; //@line 15575
  HEAP32[$26 + 8 >> 2] = 0; //@line 15575
  HEAP32[$26 + 12 >> 2] = 0; //@line 15575
  HEAP32[$26 + 16 >> 2] = 0; //@line 15575
  HEAP32[$$byval_copy >> 2] = HEAP32[$28 >> 2]; //@line 15576
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$28 + 4 >> 2]; //@line 15576
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$28 + 8 >> 2]; //@line 15576
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$28 + 12 >> 2]; //@line 15576
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$28 + 16 >> 2]; //@line 15576
  __ZN13SocketAddressC2E10nsapi_addrt($12, $$byval_copy, 0); //@line 15577
  if (!($$0 << 24 >> 24)) {
   $$4$ph = -3009; //@line 15580
   label = 22; //@line 15581
  } else {
   if (($$090 & 255) > 9) {
    $$191 = 0; //@line 15585
   } else {
    if (($$090 & 255) < 5) {
     $$191 = $$090; //@line 15589
    } else {
     $91 = 648 + ((($$090 & 255) + -5 | 0) * 20 | 0) | 0; //@line 15593
     HEAP32[$$byval_copy20 >> 2] = HEAP32[$91 >> 2]; //@line 15594
     HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$91 + 4 >> 2]; //@line 15594
     HEAP32[$$byval_copy20 + 8 >> 2] = HEAP32[$91 + 8 >> 2]; //@line 15594
     HEAP32[$$byval_copy20 + 12 >> 2] = HEAP32[$91 + 12 >> 2]; //@line 15594
     HEAP32[$$byval_copy20 + 16 >> 2] = HEAP32[$91 + 16 >> 2]; //@line 15594
     __ZN13SocketAddress8set_addrE10nsapi_addr($12, $$byval_copy20); //@line 15595
     __ZN13SocketAddress8set_portEt($12, 53); //@line 15596
     HEAP8[$4 >> 0] = 0; //@line 15597
     HEAP8[$32 >> 0] = 1; //@line 15598
     HEAP8[$34 >> 0] = 1; //@line 15599
     HEAP8[$36 >> 0] = 0; //@line 15600
     HEAP8[$38 >> 0] = 0; //@line 15601
     HEAP8[$40 >> 0] = 1; //@line 15602
     HEAP8[$42 >> 0] = 0; //@line 15603
     HEAP8[$42 + 1 >> 0] = 0; //@line 15603
     HEAP8[$42 + 2 >> 0] = 0; //@line 15603
     HEAP8[$42 + 3 >> 0] = 0; //@line 15603
     HEAP8[$42 + 4 >> 0] = 0; //@line 15603
     HEAP8[$42 + 5 >> 0] = 0; //@line 15603
     if (!(HEAP8[$14 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $6; //@line 15607
     } else {
      $$048$i = $14; //@line 15609
      $$sroa$0$0$in47$i = $6; //@line 15609
      while (1) {
       $94 = _strcspn($$048$i, 5126) | 0; //@line 15611
       $96 = $$sroa$0$0$in47$i + 1 | 0; //@line 15613
       HEAP8[$$sroa$0$0$in47$i >> 0] = $94; //@line 15614
       $97 = $94 & 255; //@line 15615
       _memcpy($96 | 0, $$048$i | 0, $97 | 0) | 0; //@line 15616
       $98 = $96 + $97 | 0; //@line 15617
       $$048$i = $$048$i + ($94 + ((HEAP8[$$048$i + $94 >> 0] | 0) == 46 & 1)) | 0; //@line 15623
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $98; //@line 15627
        break;
       } else {
        $$sroa$0$0$in47$i = $98; //@line 15630
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 15635
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 15637
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $8; //@line 15639
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 15641
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 15644
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 15646
     $114 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($2, $12, $4, $$sroa$0$0$in$lcssa$i + 5 - $10 | 0) | 0; //@line 15647
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 15650
      $115 = $ReallocAsyncCtx4 + 4 | 0; //@line 15651
      HEAP32[$115 >> 2] = $2; //@line 15652
      $116 = $ReallocAsyncCtx4 + 8 | 0; //@line 15653
      HEAP32[$116 >> 2] = $4; //@line 15654
      $117 = $ReallocAsyncCtx4 + 12 | 0; //@line 15655
      HEAP32[$117 >> 2] = $6; //@line 15656
      $118 = $ReallocAsyncCtx4 + 16 | 0; //@line 15657
      HEAP8[$118 >> 0] = $8; //@line 15658
      $119 = $ReallocAsyncCtx4 + 20 | 0; //@line 15659
      HEAP32[$119 >> 2] = $10; //@line 15660
      $120 = $ReallocAsyncCtx4 + 24 | 0; //@line 15661
      HEAP32[$120 >> 2] = $12; //@line 15662
      $121 = $ReallocAsyncCtx4 + 28 | 0; //@line 15663
      HEAP32[$121 >> 2] = $14; //@line 15664
      $122 = $ReallocAsyncCtx4 + 32 | 0; //@line 15665
      HEAP32[$122 >> 2] = $16; //@line 15666
      $123 = $ReallocAsyncCtx4 + 36 | 0; //@line 15667
      HEAP32[$123 >> 2] = $18; //@line 15668
      $124 = $ReallocAsyncCtx4 + 40 | 0; //@line 15669
      HEAP32[$124 >> 2] = $20; //@line 15670
      $125 = $ReallocAsyncCtx4 + 44 | 0; //@line 15671
      HEAP32[$125 >> 2] = $22; //@line 15672
      $126 = $ReallocAsyncCtx4 + 48 | 0; //@line 15673
      HEAP32[$126 >> 2] = $24; //@line 15674
      $127 = $ReallocAsyncCtx4 + 52 | 0; //@line 15675
      HEAP32[$127 >> 2] = $26; //@line 15676
      $128 = $ReallocAsyncCtx4 + 56 | 0; //@line 15677
      HEAP32[$128 >> 2] = $28; //@line 15678
      $129 = $ReallocAsyncCtx4 + 60 | 0; //@line 15679
      HEAP32[$129 >> 2] = $30; //@line 15680
      $130 = $ReallocAsyncCtx4 + 64 | 0; //@line 15681
      HEAP32[$130 >> 2] = $32; //@line 15682
      $131 = $ReallocAsyncCtx4 + 68 | 0; //@line 15683
      HEAP32[$131 >> 2] = $34; //@line 15684
      $132 = $ReallocAsyncCtx4 + 72 | 0; //@line 15685
      HEAP32[$132 >> 2] = $36; //@line 15686
      $133 = $ReallocAsyncCtx4 + 76 | 0; //@line 15687
      HEAP32[$133 >> 2] = $38; //@line 15688
      $134 = $ReallocAsyncCtx4 + 80 | 0; //@line 15689
      HEAP32[$134 >> 2] = $40; //@line 15690
      $135 = $ReallocAsyncCtx4 + 84 | 0; //@line 15691
      HEAP32[$135 >> 2] = $42; //@line 15692
      $136 = $ReallocAsyncCtx4 + 88 | 0; //@line 15693
      HEAP32[$136 >> 2] = $44; //@line 15694
      $137 = $ReallocAsyncCtx4 + 92 | 0; //@line 15695
      HEAP32[$137 >> 2] = $46; //@line 15696
      $138 = $ReallocAsyncCtx4 + 96 | 0; //@line 15697
      HEAP32[$138 >> 2] = $48; //@line 15698
      $139 = $ReallocAsyncCtx4 + 100 | 0; //@line 15699
      HEAP8[$139 >> 0] = $$0; //@line 15700
      $140 = $ReallocAsyncCtx4 + 101 | 0; //@line 15701
      HEAP8[$140 >> 0] = $$090; //@line 15702
      sp = STACKTOP; //@line 15703
      STACKTOP = sp; //@line 15704
      return;
     }
     HEAP32[___async_retval >> 2] = $114; //@line 15707
     ___async_unwind = 0; //@line 15708
     HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 15709
     $115 = $ReallocAsyncCtx4 + 4 | 0; //@line 15710
     HEAP32[$115 >> 2] = $2; //@line 15711
     $116 = $ReallocAsyncCtx4 + 8 | 0; //@line 15712
     HEAP32[$116 >> 2] = $4; //@line 15713
     $117 = $ReallocAsyncCtx4 + 12 | 0; //@line 15714
     HEAP32[$117 >> 2] = $6; //@line 15715
     $118 = $ReallocAsyncCtx4 + 16 | 0; //@line 15716
     HEAP8[$118 >> 0] = $8; //@line 15717
     $119 = $ReallocAsyncCtx4 + 20 | 0; //@line 15718
     HEAP32[$119 >> 2] = $10; //@line 15719
     $120 = $ReallocAsyncCtx4 + 24 | 0; //@line 15720
     HEAP32[$120 >> 2] = $12; //@line 15721
     $121 = $ReallocAsyncCtx4 + 28 | 0; //@line 15722
     HEAP32[$121 >> 2] = $14; //@line 15723
     $122 = $ReallocAsyncCtx4 + 32 | 0; //@line 15724
     HEAP32[$122 >> 2] = $16; //@line 15725
     $123 = $ReallocAsyncCtx4 + 36 | 0; //@line 15726
     HEAP32[$123 >> 2] = $18; //@line 15727
     $124 = $ReallocAsyncCtx4 + 40 | 0; //@line 15728
     HEAP32[$124 >> 2] = $20; //@line 15729
     $125 = $ReallocAsyncCtx4 + 44 | 0; //@line 15730
     HEAP32[$125 >> 2] = $22; //@line 15731
     $126 = $ReallocAsyncCtx4 + 48 | 0; //@line 15732
     HEAP32[$126 >> 2] = $24; //@line 15733
     $127 = $ReallocAsyncCtx4 + 52 | 0; //@line 15734
     HEAP32[$127 >> 2] = $26; //@line 15735
     $128 = $ReallocAsyncCtx4 + 56 | 0; //@line 15736
     HEAP32[$128 >> 2] = $28; //@line 15737
     $129 = $ReallocAsyncCtx4 + 60 | 0; //@line 15738
     HEAP32[$129 >> 2] = $30; //@line 15739
     $130 = $ReallocAsyncCtx4 + 64 | 0; //@line 15740
     HEAP32[$130 >> 2] = $32; //@line 15741
     $131 = $ReallocAsyncCtx4 + 68 | 0; //@line 15742
     HEAP32[$131 >> 2] = $34; //@line 15743
     $132 = $ReallocAsyncCtx4 + 72 | 0; //@line 15744
     HEAP32[$132 >> 2] = $36; //@line 15745
     $133 = $ReallocAsyncCtx4 + 76 | 0; //@line 15746
     HEAP32[$133 >> 2] = $38; //@line 15747
     $134 = $ReallocAsyncCtx4 + 80 | 0; //@line 15748
     HEAP32[$134 >> 2] = $40; //@line 15749
     $135 = $ReallocAsyncCtx4 + 84 | 0; //@line 15750
     HEAP32[$135 >> 2] = $42; //@line 15751
     $136 = $ReallocAsyncCtx4 + 88 | 0; //@line 15752
     HEAP32[$136 >> 2] = $44; //@line 15753
     $137 = $ReallocAsyncCtx4 + 92 | 0; //@line 15754
     HEAP32[$137 >> 2] = $46; //@line 15755
     $138 = $ReallocAsyncCtx4 + 96 | 0; //@line 15756
     HEAP32[$138 >> 2] = $48; //@line 15757
     $139 = $ReallocAsyncCtx4 + 100 | 0; //@line 15758
     HEAP8[$139 >> 0] = $$0; //@line 15759
     $140 = $ReallocAsyncCtx4 + 101 | 0; //@line 15760
     HEAP8[$140 >> 0] = $$090; //@line 15761
     sp = STACKTOP; //@line 15762
     STACKTOP = sp; //@line 15763
     return;
    }
   }
   $60 = HEAP32[(HEAP32[$46 >> 2] | 0) + 28 >> 2] | 0; //@line 15769
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 15770
   $61 = FUNCTION_TABLE_iiii[$60 & 31]($48, $$191 & 255, $12) | 0; //@line 15771
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 15774
    $62 = $ReallocAsyncCtx + 4 | 0; //@line 15775
    HEAP8[$62 >> 0] = $$0; //@line 15776
    $63 = $ReallocAsyncCtx + 8 | 0; //@line 15777
    HEAP32[$63 >> 2] = $2; //@line 15778
    $64 = $ReallocAsyncCtx + 12 | 0; //@line 15779
    HEAP32[$64 >> 2] = $4; //@line 15780
    $65 = $ReallocAsyncCtx + 16 | 0; //@line 15781
    HEAP32[$65 >> 2] = $6; //@line 15782
    $66 = $ReallocAsyncCtx + 20 | 0; //@line 15783
    HEAP8[$66 >> 0] = $8; //@line 15784
    $67 = $ReallocAsyncCtx + 24 | 0; //@line 15785
    HEAP32[$67 >> 2] = $10; //@line 15786
    $68 = $ReallocAsyncCtx + 28 | 0; //@line 15787
    HEAP32[$68 >> 2] = $12; //@line 15788
    $69 = $ReallocAsyncCtx + 32 | 0; //@line 15789
    HEAP32[$69 >> 2] = $14; //@line 15790
    $70 = $ReallocAsyncCtx + 36 | 0; //@line 15791
    HEAP32[$70 >> 2] = $16; //@line 15792
    $71 = $ReallocAsyncCtx + 40 | 0; //@line 15793
    HEAP32[$71 >> 2] = $18; //@line 15794
    $72 = $ReallocAsyncCtx + 44 | 0; //@line 15795
    HEAP32[$72 >> 2] = $20; //@line 15796
    $73 = $ReallocAsyncCtx + 48 | 0; //@line 15797
    HEAP32[$73 >> 2] = $22; //@line 15798
    $74 = $ReallocAsyncCtx + 52 | 0; //@line 15799
    HEAP32[$74 >> 2] = $24; //@line 15800
    $75 = $ReallocAsyncCtx + 56 | 0; //@line 15801
    HEAP32[$75 >> 2] = $26; //@line 15802
    $76 = $ReallocAsyncCtx + 60 | 0; //@line 15803
    HEAP32[$76 >> 2] = $28; //@line 15804
    $77 = $ReallocAsyncCtx + 64 | 0; //@line 15805
    HEAP32[$77 >> 2] = $30; //@line 15806
    $78 = $ReallocAsyncCtx + 68 | 0; //@line 15807
    HEAP8[$78 >> 0] = $$191; //@line 15808
    $79 = $ReallocAsyncCtx + 72 | 0; //@line 15809
    HEAP32[$79 >> 2] = $32; //@line 15810
    $80 = $ReallocAsyncCtx + 76 | 0; //@line 15811
    HEAP32[$80 >> 2] = $34; //@line 15812
    $81 = $ReallocAsyncCtx + 80 | 0; //@line 15813
    HEAP32[$81 >> 2] = $36; //@line 15814
    $82 = $ReallocAsyncCtx + 84 | 0; //@line 15815
    HEAP32[$82 >> 2] = $38; //@line 15816
    $83 = $ReallocAsyncCtx + 88 | 0; //@line 15817
    HEAP32[$83 >> 2] = $40; //@line 15818
    $84 = $ReallocAsyncCtx + 92 | 0; //@line 15819
    HEAP32[$84 >> 2] = $42; //@line 15820
    $85 = $ReallocAsyncCtx + 96 | 0; //@line 15821
    HEAP32[$85 >> 2] = $44; //@line 15822
    $86 = $ReallocAsyncCtx + 100 | 0; //@line 15823
    HEAP32[$86 >> 2] = $46; //@line 15824
    $87 = $ReallocAsyncCtx + 104 | 0; //@line 15825
    HEAP32[$87 >> 2] = $48; //@line 15826
    sp = STACKTOP; //@line 15827
    STACKTOP = sp; //@line 15828
    return;
   }
   HEAP32[___async_retval >> 2] = $61; //@line 15831
   ___async_unwind = 0; //@line 15832
   HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 15833
   $62 = $ReallocAsyncCtx + 4 | 0; //@line 15834
   HEAP8[$62 >> 0] = $$0; //@line 15835
   $63 = $ReallocAsyncCtx + 8 | 0; //@line 15836
   HEAP32[$63 >> 2] = $2; //@line 15837
   $64 = $ReallocAsyncCtx + 12 | 0; //@line 15838
   HEAP32[$64 >> 2] = $4; //@line 15839
   $65 = $ReallocAsyncCtx + 16 | 0; //@line 15840
   HEAP32[$65 >> 2] = $6; //@line 15841
   $66 = $ReallocAsyncCtx + 20 | 0; //@line 15842
   HEAP8[$66 >> 0] = $8; //@line 15843
   $67 = $ReallocAsyncCtx + 24 | 0; //@line 15844
   HEAP32[$67 >> 2] = $10; //@line 15845
   $68 = $ReallocAsyncCtx + 28 | 0; //@line 15846
   HEAP32[$68 >> 2] = $12; //@line 15847
   $69 = $ReallocAsyncCtx + 32 | 0; //@line 15848
   HEAP32[$69 >> 2] = $14; //@line 15849
   $70 = $ReallocAsyncCtx + 36 | 0; //@line 15850
   HEAP32[$70 >> 2] = $16; //@line 15851
   $71 = $ReallocAsyncCtx + 40 | 0; //@line 15852
   HEAP32[$71 >> 2] = $18; //@line 15853
   $72 = $ReallocAsyncCtx + 44 | 0; //@line 15854
   HEAP32[$72 >> 2] = $20; //@line 15855
   $73 = $ReallocAsyncCtx + 48 | 0; //@line 15856
   HEAP32[$73 >> 2] = $22; //@line 15857
   $74 = $ReallocAsyncCtx + 52 | 0; //@line 15858
   HEAP32[$74 >> 2] = $24; //@line 15859
   $75 = $ReallocAsyncCtx + 56 | 0; //@line 15860
   HEAP32[$75 >> 2] = $26; //@line 15861
   $76 = $ReallocAsyncCtx + 60 | 0; //@line 15862
   HEAP32[$76 >> 2] = $28; //@line 15863
   $77 = $ReallocAsyncCtx + 64 | 0; //@line 15864
   HEAP32[$77 >> 2] = $30; //@line 15865
   $78 = $ReallocAsyncCtx + 68 | 0; //@line 15866
   HEAP8[$78 >> 0] = $$191; //@line 15867
   $79 = $ReallocAsyncCtx + 72 | 0; //@line 15868
   HEAP32[$79 >> 2] = $32; //@line 15869
   $80 = $ReallocAsyncCtx + 76 | 0; //@line 15870
   HEAP32[$80 >> 2] = $34; //@line 15871
   $81 = $ReallocAsyncCtx + 80 | 0; //@line 15872
   HEAP32[$81 >> 2] = $36; //@line 15873
   $82 = $ReallocAsyncCtx + 84 | 0; //@line 15874
   HEAP32[$82 >> 2] = $38; //@line 15875
   $83 = $ReallocAsyncCtx + 88 | 0; //@line 15876
   HEAP32[$83 >> 2] = $40; //@line 15877
   $84 = $ReallocAsyncCtx + 92 | 0; //@line 15878
   HEAP32[$84 >> 2] = $42; //@line 15879
   $85 = $ReallocAsyncCtx + 96 | 0; //@line 15880
   HEAP32[$85 >> 2] = $44; //@line 15881
   $86 = $ReallocAsyncCtx + 100 | 0; //@line 15882
   HEAP32[$86 >> 2] = $46; //@line 15883
   $87 = $ReallocAsyncCtx + 104 | 0; //@line 15884
   HEAP32[$87 >> 2] = $48; //@line 15885
   sp = STACKTOP; //@line 15886
   STACKTOP = sp; //@line 15887
   return;
  }
 }
 if ((label | 0) == 22) {
  $$498 = $$4$ph; //@line 15891
 }
 _free($4); //@line 15893
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 15894
 $156 = __ZN6Socket5closeEv($30) | 0; //@line 15895
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 15898
  $157 = $ReallocAsyncCtx6 + 4 | 0; //@line 15899
  HEAP32[$157 >> 2] = $$498; //@line 15900
  $158 = $ReallocAsyncCtx6 + 8 | 0; //@line 15901
  HEAP32[$158 >> 2] = $2; //@line 15902
  $159 = $ReallocAsyncCtx6 + 12 | 0; //@line 15903
  HEAP32[$159 >> 2] = $44; //@line 15904
  sp = STACKTOP; //@line 15905
  STACKTOP = sp; //@line 15906
  return;
 }
 HEAP32[___async_retval >> 2] = $156; //@line 15909
 ___async_unwind = 0; //@line 15910
 HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 15911
 $157 = $ReallocAsyncCtx6 + 4 | 0; //@line 15912
 HEAP32[$157 >> 2] = $$498; //@line 15913
 $158 = $ReallocAsyncCtx6 + 8 | 0; //@line 15914
 HEAP32[$158 >> 2] = $2; //@line 15915
 $159 = $ReallocAsyncCtx6 + 12 | 0; //@line 15916
 HEAP32[$159 >> 2] = $44; //@line 15917
 sp = STACKTOP; //@line 15918
 STACKTOP = sp; //@line 15919
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_71($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $10 = 0, $100 = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $142 = 0, $144 = 0, $152 = 0, $155 = 0, $157 = 0, $16 = 0, $165 = 0, $168 = 0, $170 = 0, $178 = 0, $181 = 0, $183 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $31 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $77 = 0, $8 = 0, $84 = 0, $85 = 0, $88 = 0, $91 = 0, $98 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21205
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21207
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21209
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21211
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21213
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21215
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21217
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21219
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21221
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21225
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21227
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21229
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21231
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21233
 HEAP32[HEAP32[$0 + 60 >> 2] >> 2] = HEAP32[HEAP32[$0 + 36 >> 2] >> 2]; //@line 21237
 $31 = $6 + 32 | 0; //@line 21238
 do {
  if (($31 | 0) != ($20 | 0)) {
   $33 = $6 + 44 | 0; //@line 21242
   $34 = HEAP32[$33 >> 2] | 0; //@line 21243
   if ($34 | 0) {
    $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 21247
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(64) | 0; //@line 21248
    FUNCTION_TABLE_vi[$37 & 511]($31); //@line 21249
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 21252
     $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 21253
     HEAP32[$38 >> 2] = $2; //@line 21254
     $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 21255
     HEAP32[$39 >> 2] = $4; //@line 21256
     $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 21257
     HEAP32[$40 >> 2] = $6; //@line 21258
     $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 21259
     HEAP32[$41 >> 2] = $8; //@line 21260
     $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 21261
     HEAP32[$42 >> 2] = $10; //@line 21262
     $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 21263
     HEAP32[$43 >> 2] = $31; //@line 21264
     $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 21265
     HEAP32[$44 >> 2] = $12; //@line 21266
     $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 21267
     HEAP32[$45 >> 2] = $14; //@line 21268
     $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 21269
     HEAP32[$46 >> 2] = $16; //@line 21270
     $47 = $ReallocAsyncCtx4 + 40 | 0; //@line 21271
     HEAP32[$47 >> 2] = $20; //@line 21272
     $48 = $ReallocAsyncCtx4 + 44 | 0; //@line 21273
     HEAP32[$48 >> 2] = $22; //@line 21274
     $49 = $ReallocAsyncCtx4 + 48 | 0; //@line 21275
     HEAP32[$49 >> 2] = $24; //@line 21276
     $50 = $ReallocAsyncCtx4 + 52 | 0; //@line 21277
     HEAP32[$50 >> 2] = $33; //@line 21278
     $51 = $ReallocAsyncCtx4 + 56 | 0; //@line 21279
     HEAP32[$51 >> 2] = $26; //@line 21280
     $52 = $ReallocAsyncCtx4 + 60 | 0; //@line 21281
     HEAP32[$52 >> 2] = $28; //@line 21282
     sp = STACKTOP; //@line 21283
     return;
    }
    ___async_unwind = 0; //@line 21286
    HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 21287
    $38 = $ReallocAsyncCtx4 + 4 | 0; //@line 21288
    HEAP32[$38 >> 2] = $2; //@line 21289
    $39 = $ReallocAsyncCtx4 + 8 | 0; //@line 21290
    HEAP32[$39 >> 2] = $4; //@line 21291
    $40 = $ReallocAsyncCtx4 + 12 | 0; //@line 21292
    HEAP32[$40 >> 2] = $6; //@line 21293
    $41 = $ReallocAsyncCtx4 + 16 | 0; //@line 21294
    HEAP32[$41 >> 2] = $8; //@line 21295
    $42 = $ReallocAsyncCtx4 + 20 | 0; //@line 21296
    HEAP32[$42 >> 2] = $10; //@line 21297
    $43 = $ReallocAsyncCtx4 + 24 | 0; //@line 21298
    HEAP32[$43 >> 2] = $31; //@line 21299
    $44 = $ReallocAsyncCtx4 + 28 | 0; //@line 21300
    HEAP32[$44 >> 2] = $12; //@line 21301
    $45 = $ReallocAsyncCtx4 + 32 | 0; //@line 21302
    HEAP32[$45 >> 2] = $14; //@line 21303
    $46 = $ReallocAsyncCtx4 + 36 | 0; //@line 21304
    HEAP32[$46 >> 2] = $16; //@line 21305
    $47 = $ReallocAsyncCtx4 + 40 | 0; //@line 21306
    HEAP32[$47 >> 2] = $20; //@line 21307
    $48 = $ReallocAsyncCtx4 + 44 | 0; //@line 21308
    HEAP32[$48 >> 2] = $22; //@line 21309
    $49 = $ReallocAsyncCtx4 + 48 | 0; //@line 21310
    HEAP32[$49 >> 2] = $24; //@line 21311
    $50 = $ReallocAsyncCtx4 + 52 | 0; //@line 21312
    HEAP32[$50 >> 2] = $33; //@line 21313
    $51 = $ReallocAsyncCtx4 + 56 | 0; //@line 21314
    HEAP32[$51 >> 2] = $26; //@line 21315
    $52 = $ReallocAsyncCtx4 + 60 | 0; //@line 21316
    HEAP32[$52 >> 2] = $28; //@line 21317
    sp = STACKTOP; //@line 21318
    return;
   }
   $53 = $20 + 12 | 0; //@line 21321
   $54 = HEAP32[$53 >> 2] | 0; //@line 21322
   if (!$54) {
    HEAP32[$33 >> 2] = 0; //@line 21325
    break;
   }
   $57 = HEAP32[$54 + 4 >> 2] | 0; //@line 21329
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 21330
   FUNCTION_TABLE_vii[$57 & 7]($31, $20); //@line 21331
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 21334
    $58 = $ReallocAsyncCtx5 + 4 | 0; //@line 21335
    HEAP32[$58 >> 2] = $2; //@line 21336
    $59 = $ReallocAsyncCtx5 + 8 | 0; //@line 21337
    HEAP32[$59 >> 2] = $4; //@line 21338
    $60 = $ReallocAsyncCtx5 + 12 | 0; //@line 21339
    HEAP32[$60 >> 2] = $6; //@line 21340
    $61 = $ReallocAsyncCtx5 + 16 | 0; //@line 21341
    HEAP32[$61 >> 2] = $8; //@line 21342
    $62 = $ReallocAsyncCtx5 + 20 | 0; //@line 21343
    HEAP32[$62 >> 2] = $10; //@line 21344
    $63 = $ReallocAsyncCtx5 + 24 | 0; //@line 21345
    HEAP32[$63 >> 2] = $31; //@line 21346
    $64 = $ReallocAsyncCtx5 + 28 | 0; //@line 21347
    HEAP32[$64 >> 2] = $12; //@line 21348
    $65 = $ReallocAsyncCtx5 + 32 | 0; //@line 21349
    HEAP32[$65 >> 2] = $53; //@line 21350
    $66 = $ReallocAsyncCtx5 + 36 | 0; //@line 21351
    HEAP32[$66 >> 2] = $14; //@line 21352
    $67 = $ReallocAsyncCtx5 + 40 | 0; //@line 21353
    HEAP32[$67 >> 2] = $16; //@line 21354
    $68 = $ReallocAsyncCtx5 + 44 | 0; //@line 21355
    HEAP32[$68 >> 2] = $22; //@line 21356
    $69 = $ReallocAsyncCtx5 + 48 | 0; //@line 21357
    HEAP32[$69 >> 2] = $24; //@line 21358
    $70 = $ReallocAsyncCtx5 + 52 | 0; //@line 21359
    HEAP32[$70 >> 2] = $33; //@line 21360
    $71 = $ReallocAsyncCtx5 + 56 | 0; //@line 21361
    HEAP32[$71 >> 2] = $26; //@line 21362
    $72 = $ReallocAsyncCtx5 + 60 | 0; //@line 21363
    HEAP32[$72 >> 2] = $28; //@line 21364
    sp = STACKTOP; //@line 21365
    return;
   }
   ___async_unwind = 0; //@line 21368
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 21369
   $58 = $ReallocAsyncCtx5 + 4 | 0; //@line 21370
   HEAP32[$58 >> 2] = $2; //@line 21371
   $59 = $ReallocAsyncCtx5 + 8 | 0; //@line 21372
   HEAP32[$59 >> 2] = $4; //@line 21373
   $60 = $ReallocAsyncCtx5 + 12 | 0; //@line 21374
   HEAP32[$60 >> 2] = $6; //@line 21375
   $61 = $ReallocAsyncCtx5 + 16 | 0; //@line 21376
   HEAP32[$61 >> 2] = $8; //@line 21377
   $62 = $ReallocAsyncCtx5 + 20 | 0; //@line 21378
   HEAP32[$62 >> 2] = $10; //@line 21379
   $63 = $ReallocAsyncCtx5 + 24 | 0; //@line 21380
   HEAP32[$63 >> 2] = $31; //@line 21381
   $64 = $ReallocAsyncCtx5 + 28 | 0; //@line 21382
   HEAP32[$64 >> 2] = $12; //@line 21383
   $65 = $ReallocAsyncCtx5 + 32 | 0; //@line 21384
   HEAP32[$65 >> 2] = $53; //@line 21385
   $66 = $ReallocAsyncCtx5 + 36 | 0; //@line 21386
   HEAP32[$66 >> 2] = $14; //@line 21387
   $67 = $ReallocAsyncCtx5 + 40 | 0; //@line 21388
   HEAP32[$67 >> 2] = $16; //@line 21389
   $68 = $ReallocAsyncCtx5 + 44 | 0; //@line 21390
   HEAP32[$68 >> 2] = $22; //@line 21391
   $69 = $ReallocAsyncCtx5 + 48 | 0; //@line 21392
   HEAP32[$69 >> 2] = $24; //@line 21393
   $70 = $ReallocAsyncCtx5 + 52 | 0; //@line 21394
   HEAP32[$70 >> 2] = $33; //@line 21395
   $71 = $ReallocAsyncCtx5 + 56 | 0; //@line 21396
   HEAP32[$71 >> 2] = $26; //@line 21397
   $72 = $ReallocAsyncCtx5 + 60 | 0; //@line 21398
   HEAP32[$72 >> 2] = $28; //@line 21399
   sp = STACKTOP; //@line 21400
   return;
  }
 } while (0);
 HEAP32[$6 + 8 >> 2] = $12; //@line 21405
 HEAP32[$6 + 48 >> 2] = $22; //@line 21407
 HEAP32[$6 + 52 >> 2] = $24; //@line 21409
 $76 = $6 + 56 | 0; //@line 21410
 HEAP32[$76 >> 2] = 0; //@line 21411
 $77 = $6 + 60 | 0; //@line 21412
 HEAP32[$77 >> 2] = 0; //@line 21413
 HEAP32[$6 + 64 >> 2] = 0; //@line 21415
 HEAP8[$6 + 82 >> 0] = 0; //@line 21417
 HEAP8[$6 + 83 >> 0] = 1; //@line 21419
 HEAP8[$6 + 84 >> 0] = 3; //@line 21421
 HEAP16[$6 + 80 >> 1] = 0; //@line 21423
 HEAP32[$6 + 76 >> 2] = 0; //@line 21425
 $84 = $6 + 72 | 0; //@line 21426
 HEAP32[$84 >> 2] = 15500; //@line 21427
 $85 = HEAP32[187] | 0; //@line 21428
 HEAP32[187] = $85 + 1; //@line 21430
 $$ = ($85 | 0) > 32767 ? 1 : $85; //@line 21432
 HEAP32[$6 >> 2] = $$; //@line 21433
 $88 = HEAP32[1960] | 0; //@line 21434
 if (!$88) {
  $$1 = 0; //@line 21437
  $142 = 0; //@line 21437
 } else {
  $91 = HEAP32[$88 + 56 >> 2] | 0; //@line 21440
  if (!$91) {
   $$1 = 1; //@line 21443
   $142 = 0; //@line 21443
  } else {
   if ((HEAP32[$88 + 8 >> 2] | 0) == ($12 | 0)) {
    HEAP32[$76 >> 2] = $91; //@line 21449
    HEAP32[$77 >> 2] = HEAP32[$88 + 60 >> 2]; //@line 21452
    $$1 = 1; //@line 21453
    $142 = $91; //@line 21453
   } else {
    $$1 = 1; //@line 21455
    $142 = 0; //@line 21455
   }
  }
 }
 $98 = HEAP32[1961] | 0; //@line 21459
 if (!$98) {
  $$1$1 = $$1; //@line 21462
  $155 = $142; //@line 21462
 } else {
  if (!$142) {
   $144 = HEAP32[$98 + 56 >> 2] | 0; //@line 21467
   if (!$144) {
    $197 = 0; //@line 21470
   } else {
    if ((HEAP32[$98 + 8 >> 2] | 0) == ($12 | 0)) {
     HEAP32[$76 >> 2] = $144; //@line 21476
     HEAP32[$77 >> 2] = HEAP32[$98 + 60 >> 2]; //@line 21479
     $197 = $144; //@line 21480
    } else {
     $197 = 0; //@line 21482
    }
   }
  } else {
   $197 = $142; //@line 21486
  }
  $$1$1 = $$1 + 1 | 0; //@line 21489
  $155 = $197; //@line 21489
 }
 $152 = HEAP32[1962] | 0; //@line 21491
 if (!$152) {
  $$1$2 = $$1$1; //@line 21494
  $168 = $155; //@line 21494
 } else {
  if (!$155) {
   $157 = HEAP32[$152 + 56 >> 2] | 0; //@line 21499
   if (!$157) {
    $198 = 0; //@line 21502
   } else {
    if ((HEAP32[$152 + 8 >> 2] | 0) == ($12 | 0)) {
     HEAP32[$76 >> 2] = $157; //@line 21508
     HEAP32[$77 >> 2] = HEAP32[$152 + 60 >> 2]; //@line 21511
     $198 = $157; //@line 21512
    } else {
     $198 = 0; //@line 21514
    }
   }
  } else {
   $198 = $155; //@line 21518
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 21521
  $168 = $198; //@line 21521
 }
 $165 = HEAP32[1963] | 0; //@line 21523
 if (!$165) {
  $$1$3 = $$1$2; //@line 21526
  $181 = $168; //@line 21526
 } else {
  if (!$168) {
   $170 = HEAP32[$165 + 56 >> 2] | 0; //@line 21531
   if (!$170) {
    $199 = 0; //@line 21534
   } else {
    if ((HEAP32[$165 + 8 >> 2] | 0) == ($12 | 0)) {
     HEAP32[$76 >> 2] = $170; //@line 21540
     HEAP32[$77 >> 2] = HEAP32[$165 + 60 >> 2]; //@line 21543
     $199 = $170; //@line 21544
    } else {
     $199 = 0; //@line 21546
    }
   }
  } else {
   $199 = $168; //@line 21550
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 21553
  $181 = $199; //@line 21553
 }
 $178 = HEAP32[1964] | 0; //@line 21555
 if (!$178) {
  HEAP32[7840 + ($10 << 2) >> 2] = $6; //@line 21559
  HEAP32[$84 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 21562
  if (!$$1$3) {
   $100 = $6 + 44 | 0; //@line 21565
   $101 = HEAP32[$100 >> 2] | 0; //@line 21566
   if (!$101) {
    $117 = $2 + 12 | 0; //@line 21569
    HEAP32[$117 >> 2] = 0; //@line 21570
    $119 = $16 + 4 | 0; //@line 21572
    HEAP32[$119 >> 2] = 0; //@line 21574
    HEAP32[$119 + 4 >> 2] = 0; //@line 21577
    HEAP32[$16 >> 2] = 3; //@line 21578
    $123 = $16 + 12 | 0; //@line 21579
    HEAP32[$123 >> 2] = 752; //@line 21580
    $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 21581
    $124 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $16) | 0; //@line 21582
    if (___async) {
     HEAP32[$ReallocAsyncCtx19 >> 2] = 179; //@line 21585
     $125 = $ReallocAsyncCtx19 + 4 | 0; //@line 21586
     HEAP32[$125 >> 2] = $2; //@line 21587
     $126 = $ReallocAsyncCtx19 + 8 | 0; //@line 21588
     HEAP32[$126 >> 2] = $6; //@line 21589
     $127 = $ReallocAsyncCtx19 + 12 | 0; //@line 21590
     HEAP32[$127 >> 2] = $4; //@line 21591
     $128 = $ReallocAsyncCtx19 + 16 | 0; //@line 21592
     HEAP32[$128 >> 2] = $8; //@line 21593
     $129 = $ReallocAsyncCtx19 + 20 | 0; //@line 21594
     HEAP32[$129 >> 2] = $31; //@line 21595
     $130 = $ReallocAsyncCtx19 + 24 | 0; //@line 21596
     HEAP32[$130 >> 2] = $100; //@line 21597
     $131 = $ReallocAsyncCtx19 + 28 | 0; //@line 21598
     HEAP32[$131 >> 2] = $28; //@line 21599
     $132 = $ReallocAsyncCtx19 + 32 | 0; //@line 21600
     HEAP32[$132 >> 2] = $6; //@line 21601
     $133 = $ReallocAsyncCtx19 + 36 | 0; //@line 21602
     HEAP32[$133 >> 2] = $100; //@line 21603
     $134 = $ReallocAsyncCtx19 + 40 | 0; //@line 21604
     HEAP32[$134 >> 2] = $14; //@line 21605
     $135 = $ReallocAsyncCtx19 + 44 | 0; //@line 21606
     HEAP32[$135 >> 2] = $117; //@line 21607
     $136 = $ReallocAsyncCtx19 + 48 | 0; //@line 21608
     HEAP32[$136 >> 2] = $26; //@line 21609
     $137 = $ReallocAsyncCtx19 + 52 | 0; //@line 21610
     HEAP32[$137 >> 2] = $16; //@line 21611
     $138 = $ReallocAsyncCtx19 + 56 | 0; //@line 21612
     HEAP32[$138 >> 2] = $123; //@line 21613
     sp = STACKTOP; //@line 21614
     return;
    }
    HEAP32[___async_retval >> 2] = $124; //@line 21618
    ___async_unwind = 0; //@line 21619
    HEAP32[$ReallocAsyncCtx19 >> 2] = 179; //@line 21620
    $125 = $ReallocAsyncCtx19 + 4 | 0; //@line 21621
    HEAP32[$125 >> 2] = $2; //@line 21622
    $126 = $ReallocAsyncCtx19 + 8 | 0; //@line 21623
    HEAP32[$126 >> 2] = $6; //@line 21624
    $127 = $ReallocAsyncCtx19 + 12 | 0; //@line 21625
    HEAP32[$127 >> 2] = $4; //@line 21626
    $128 = $ReallocAsyncCtx19 + 16 | 0; //@line 21627
    HEAP32[$128 >> 2] = $8; //@line 21628
    $129 = $ReallocAsyncCtx19 + 20 | 0; //@line 21629
    HEAP32[$129 >> 2] = $31; //@line 21630
    $130 = $ReallocAsyncCtx19 + 24 | 0; //@line 21631
    HEAP32[$130 >> 2] = $100; //@line 21632
    $131 = $ReallocAsyncCtx19 + 28 | 0; //@line 21633
    HEAP32[$131 >> 2] = $28; //@line 21634
    $132 = $ReallocAsyncCtx19 + 32 | 0; //@line 21635
    HEAP32[$132 >> 2] = $6; //@line 21636
    $133 = $ReallocAsyncCtx19 + 36 | 0; //@line 21637
    HEAP32[$133 >> 2] = $100; //@line 21638
    $134 = $ReallocAsyncCtx19 + 40 | 0; //@line 21639
    HEAP32[$134 >> 2] = $14; //@line 21640
    $135 = $ReallocAsyncCtx19 + 44 | 0; //@line 21641
    HEAP32[$135 >> 2] = $117; //@line 21642
    $136 = $ReallocAsyncCtx19 + 48 | 0; //@line 21643
    HEAP32[$136 >> 2] = $26; //@line 21644
    $137 = $ReallocAsyncCtx19 + 52 | 0; //@line 21645
    HEAP32[$137 >> 2] = $16; //@line 21646
    $138 = $ReallocAsyncCtx19 + 56 | 0; //@line 21647
    HEAP32[$138 >> 2] = $123; //@line 21648
    sp = STACKTOP; //@line 21649
    return;
   } else {
    $104 = HEAP32[$101 + 4 >> 2] | 0; //@line 21653
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(52) | 0; //@line 21654
    FUNCTION_TABLE_vii[$104 & 7]($2, $31); //@line 21655
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 21658
     $105 = $ReallocAsyncCtx6 + 4 | 0; //@line 21659
     HEAP32[$105 >> 2] = $2; //@line 21660
     $106 = $ReallocAsyncCtx6 + 8 | 0; //@line 21661
     HEAP32[$106 >> 2] = $6; //@line 21662
     $107 = $ReallocAsyncCtx6 + 12 | 0; //@line 21663
     HEAP32[$107 >> 2] = $4; //@line 21664
     $108 = $ReallocAsyncCtx6 + 16 | 0; //@line 21665
     HEAP32[$108 >> 2] = $8; //@line 21666
     $109 = $ReallocAsyncCtx6 + 20 | 0; //@line 21667
     HEAP32[$109 >> 2] = $31; //@line 21668
     $110 = $ReallocAsyncCtx6 + 24 | 0; //@line 21669
     HEAP32[$110 >> 2] = $100; //@line 21670
     $111 = $ReallocAsyncCtx6 + 28 | 0; //@line 21671
     HEAP32[$111 >> 2] = $6; //@line 21672
     $112 = $ReallocAsyncCtx6 + 32 | 0; //@line 21673
     HEAP32[$112 >> 2] = $100; //@line 21674
     $113 = $ReallocAsyncCtx6 + 36 | 0; //@line 21675
     HEAP32[$113 >> 2] = $14; //@line 21676
     $114 = $ReallocAsyncCtx6 + 40 | 0; //@line 21677
     HEAP32[$114 >> 2] = $16; //@line 21678
     $115 = $ReallocAsyncCtx6 + 44 | 0; //@line 21679
     HEAP32[$115 >> 2] = $26; //@line 21680
     $116 = $ReallocAsyncCtx6 + 48 | 0; //@line 21681
     HEAP32[$116 >> 2] = $28; //@line 21682
     sp = STACKTOP; //@line 21683
     return;
    }
    ___async_unwind = 0; //@line 21686
    HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 21687
    $105 = $ReallocAsyncCtx6 + 4 | 0; //@line 21688
    HEAP32[$105 >> 2] = $2; //@line 21689
    $106 = $ReallocAsyncCtx6 + 8 | 0; //@line 21690
    HEAP32[$106 >> 2] = $6; //@line 21691
    $107 = $ReallocAsyncCtx6 + 12 | 0; //@line 21692
    HEAP32[$107 >> 2] = $4; //@line 21693
    $108 = $ReallocAsyncCtx6 + 16 | 0; //@line 21694
    HEAP32[$108 >> 2] = $8; //@line 21695
    $109 = $ReallocAsyncCtx6 + 20 | 0; //@line 21696
    HEAP32[$109 >> 2] = $31; //@line 21697
    $110 = $ReallocAsyncCtx6 + 24 | 0; //@line 21698
    HEAP32[$110 >> 2] = $100; //@line 21699
    $111 = $ReallocAsyncCtx6 + 28 | 0; //@line 21700
    HEAP32[$111 >> 2] = $6; //@line 21701
    $112 = $ReallocAsyncCtx6 + 32 | 0; //@line 21702
    HEAP32[$112 >> 2] = $100; //@line 21703
    $113 = $ReallocAsyncCtx6 + 36 | 0; //@line 21704
    HEAP32[$113 >> 2] = $14; //@line 21705
    $114 = $ReallocAsyncCtx6 + 40 | 0; //@line 21706
    HEAP32[$114 >> 2] = $16; //@line 21707
    $115 = $ReallocAsyncCtx6 + 44 | 0; //@line 21708
    HEAP32[$115 >> 2] = $26; //@line 21709
    $116 = $ReallocAsyncCtx6 + 48 | 0; //@line 21710
    HEAP32[$116 >> 2] = $28; //@line 21711
    sp = STACKTOP; //@line 21712
    return;
   }
  }
 } else {
  if (!$181) {
   $183 = HEAP32[$178 + 56 >> 2] | 0; //@line 21720
   if ($183 | 0) {
    if ((HEAP32[$178 + 8 >> 2] | 0) == ($12 | 0)) {
     HEAP32[$76 >> 2] = $183; //@line 21727
     HEAP32[$77 >> 2] = HEAP32[$178 + 60 >> 2]; //@line 21730
    }
   }
  }
  HEAP32[7840 + ($10 << 2) >> 2] = $6; //@line 21735
  HEAP32[$84 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 21738
 }
 HEAP32[___async_retval >> 2] = $$; //@line 21741
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_200($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$191 = 0, $$2 = 0, $$byval_copy = 0, $$byval_copy16 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $129 = 0, $130 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16510
 STACKTOP = STACKTOP + 48 | 0; //@line 16511
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 16511
 $$byval_copy16 = sp + 20 | 0; //@line 16512
 $$byval_copy = sp; //@line 16513
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16515
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16517
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16519
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16521
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16523
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16525
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16527
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16529
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16531
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16533
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16535
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16537
 if (!$AsyncRetVal) {
  __ZN6Socket11set_timeoutEi($16, 5e3); //@line 16540
  $25 = _malloc(512) | 0; //@line 16541
  if (!$25) {
   $$2 = -3007; //@line 16544
  } else {
   $27 = $25; //@line 16546
   $28 = $25 + 1 | 0; //@line 16547
   $29 = $25 + 2 | 0; //@line 16548
   $30 = $25 + 3 | 0; //@line 16549
   $31 = $25 + 4 | 0; //@line 16550
   $32 = $25 + 5 | 0; //@line 16551
   $33 = $25 + 6 | 0; //@line 16552
   $34 = $25 + 12 | 0; //@line 16553
   $$sink$i = ($22 | 0) == 2 ? 28 : 1; //@line 16555
   HEAP32[$14 >> 2] = 0; //@line 16556
   HEAP32[$14 + 4 >> 2] = 0; //@line 16556
   HEAP32[$14 + 8 >> 2] = 0; //@line 16556
   HEAP32[$14 + 12 >> 2] = 0; //@line 16556
   HEAP32[$14 + 16 >> 2] = 0; //@line 16556
   HEAP32[$$byval_copy >> 2] = HEAP32[$14 >> 2]; //@line 16557
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$14 + 4 >> 2]; //@line 16557
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$14 + 8 >> 2]; //@line 16557
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$14 + 12 >> 2]; //@line 16557
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$14 + 16 >> 2]; //@line 16557
   __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 0); //@line 16558
   if (!3) {
    _free($25); //@line 16561
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 16562
    $124 = __ZN6Socket5closeEv($16) | 0; //@line 16563
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 16566
     $125 = $ReallocAsyncCtx6 + 4 | 0; //@line 16567
     HEAP32[$125 >> 2] = -3009; //@line 16568
     $126 = $ReallocAsyncCtx6 + 8 | 0; //@line 16569
     HEAP32[$126 >> 2] = $2; //@line 16570
     $127 = $ReallocAsyncCtx6 + 12 | 0; //@line 16571
     HEAP32[$127 >> 2] = $18; //@line 16572
     sp = STACKTOP; //@line 16573
     STACKTOP = sp; //@line 16574
     return;
    }
    HEAP32[___async_retval >> 2] = $124; //@line 16577
    ___async_unwind = 0; //@line 16578
    HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 16579
    $125 = $ReallocAsyncCtx6 + 4 | 0; //@line 16580
    HEAP32[$125 >> 2] = -3009; //@line 16581
    $126 = $ReallocAsyncCtx6 + 8 | 0; //@line 16582
    HEAP32[$126 >> 2] = $2; //@line 16583
    $127 = $ReallocAsyncCtx6 + 12 | 0; //@line 16584
    HEAP32[$127 >> 2] = $18; //@line 16585
    sp = STACKTOP; //@line 16586
    STACKTOP = sp; //@line 16587
    return;
   }
   if (0 > 9) {
    $$191 = 0; //@line 16591
   } else {
    if (0 < 5) {
     $$191 = 0; //@line 16595
    } else {
     $73 = 648 + ((0 + -5 | 0) * 20 | 0) | 0; //@line 16599
     HEAP32[$$byval_copy16 >> 2] = HEAP32[$73 >> 2]; //@line 16600
     HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$73 + 4 >> 2]; //@line 16600
     HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$73 + 8 >> 2]; //@line 16600
     HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$73 + 12 >> 2]; //@line 16600
     HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$73 + 16 >> 2]; //@line 16600
     __ZN13SocketAddress8set_addrE10nsapi_addr($4, $$byval_copy16); //@line 16601
     __ZN13SocketAddress8set_portEt($4, 53); //@line 16602
     HEAP8[$25 >> 0] = 0; //@line 16603
     HEAP8[$28 >> 0] = 1; //@line 16604
     HEAP8[$29 >> 0] = 1; //@line 16605
     HEAP8[$30 >> 0] = 0; //@line 16606
     HEAP8[$31 >> 0] = 0; //@line 16607
     HEAP8[$32 >> 0] = 1; //@line 16608
     HEAP8[$33 >> 0] = 0; //@line 16609
     HEAP8[$33 + 1 >> 0] = 0; //@line 16609
     HEAP8[$33 + 2 >> 0] = 0; //@line 16609
     HEAP8[$33 + 3 >> 0] = 0; //@line 16609
     HEAP8[$33 + 4 >> 0] = 0; //@line 16609
     HEAP8[$33 + 5 >> 0] = 0; //@line 16609
     if (!(HEAP8[$6 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $34; //@line 16613
     } else {
      $$048$i = $6; //@line 16615
      $$sroa$0$0$in47$i = $34; //@line 16615
      while (1) {
       $76 = _strcspn($$048$i, 5126) | 0; //@line 16617
       $78 = $$sroa$0$0$in47$i + 1 | 0; //@line 16619
       HEAP8[$$sroa$0$0$in47$i >> 0] = $76; //@line 16620
       $79 = $76 & 255; //@line 16621
       _memcpy($78 | 0, $$048$i | 0, $79 | 0) | 0; //@line 16622
       $80 = $78 + $79 | 0; //@line 16623
       $$048$i = $$048$i + ($76 + ((HEAP8[$$048$i + $76 >> 0] | 0) == 46 & 1)) | 0; //@line 16629
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $80; //@line 16633
        break;
       } else {
        $$sroa$0$0$in47$i = $80; //@line 16636
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 16641
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 16643
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 16645
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 16647
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 16650
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 16652
     $96 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($2, $4, $25, $$sroa$0$0$in$lcssa$i + 5 - $27 | 0) | 0; //@line 16653
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 16656
      $97 = $ReallocAsyncCtx4 + 4 | 0; //@line 16657
      HEAP32[$97 >> 2] = $2; //@line 16658
      $98 = $ReallocAsyncCtx4 + 8 | 0; //@line 16659
      HEAP32[$98 >> 2] = $25; //@line 16660
      $99 = $ReallocAsyncCtx4 + 12 | 0; //@line 16661
      HEAP32[$99 >> 2] = $34; //@line 16662
      $100 = $ReallocAsyncCtx4 + 16 | 0; //@line 16663
      HEAP8[$100 >> 0] = $$sink$i; //@line 16664
      $101 = $ReallocAsyncCtx4 + 20 | 0; //@line 16665
      HEAP32[$101 >> 2] = $27; //@line 16666
      $102 = $ReallocAsyncCtx4 + 24 | 0; //@line 16667
      HEAP32[$102 >> 2] = $4; //@line 16668
      $103 = $ReallocAsyncCtx4 + 28 | 0; //@line 16669
      HEAP32[$103 >> 2] = $6; //@line 16670
      $104 = $ReallocAsyncCtx4 + 32 | 0; //@line 16671
      HEAP32[$104 >> 2] = $8; //@line 16672
      $105 = $ReallocAsyncCtx4 + 36 | 0; //@line 16673
      HEAP32[$105 >> 2] = $4; //@line 16674
      $106 = $ReallocAsyncCtx4 + 40 | 0; //@line 16675
      HEAP32[$106 >> 2] = $8; //@line 16676
      $107 = $ReallocAsyncCtx4 + 44 | 0; //@line 16677
      HEAP32[$107 >> 2] = $10; //@line 16678
      $108 = $ReallocAsyncCtx4 + 48 | 0; //@line 16679
      HEAP32[$108 >> 2] = $12; //@line 16680
      $109 = $ReallocAsyncCtx4 + 52 | 0; //@line 16681
      HEAP32[$109 >> 2] = $14; //@line 16682
      $110 = $ReallocAsyncCtx4 + 56 | 0; //@line 16683
      HEAP32[$110 >> 2] = $14; //@line 16684
      $111 = $ReallocAsyncCtx4 + 60 | 0; //@line 16685
      HEAP32[$111 >> 2] = $16; //@line 16686
      $112 = $ReallocAsyncCtx4 + 64 | 0; //@line 16687
      HEAP32[$112 >> 2] = $28; //@line 16688
      $113 = $ReallocAsyncCtx4 + 68 | 0; //@line 16689
      HEAP32[$113 >> 2] = $29; //@line 16690
      $114 = $ReallocAsyncCtx4 + 72 | 0; //@line 16691
      HEAP32[$114 >> 2] = $30; //@line 16692
      $115 = $ReallocAsyncCtx4 + 76 | 0; //@line 16693
      HEAP32[$115 >> 2] = $31; //@line 16694
      $116 = $ReallocAsyncCtx4 + 80 | 0; //@line 16695
      HEAP32[$116 >> 2] = $32; //@line 16696
      $117 = $ReallocAsyncCtx4 + 84 | 0; //@line 16697
      HEAP32[$117 >> 2] = $33; //@line 16698
      $118 = $ReallocAsyncCtx4 + 88 | 0; //@line 16699
      HEAP32[$118 >> 2] = $18; //@line 16700
      $119 = $ReallocAsyncCtx4 + 92 | 0; //@line 16701
      HEAP32[$119 >> 2] = $20; //@line 16702
      $120 = $ReallocAsyncCtx4 + 96 | 0; //@line 16703
      HEAP32[$120 >> 2] = $20; //@line 16704
      $121 = $ReallocAsyncCtx4 + 100 | 0; //@line 16705
      HEAP8[$121 >> 0] = 3; //@line 16706
      $122 = $ReallocAsyncCtx4 + 101 | 0; //@line 16707
      HEAP8[$122 >> 0] = 0; //@line 16708
      sp = STACKTOP; //@line 16709
      STACKTOP = sp; //@line 16710
      return;
     }
     HEAP32[___async_retval >> 2] = $96; //@line 16713
     ___async_unwind = 0; //@line 16714
     HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 16715
     $97 = $ReallocAsyncCtx4 + 4 | 0; //@line 16716
     HEAP32[$97 >> 2] = $2; //@line 16717
     $98 = $ReallocAsyncCtx4 + 8 | 0; //@line 16718
     HEAP32[$98 >> 2] = $25; //@line 16719
     $99 = $ReallocAsyncCtx4 + 12 | 0; //@line 16720
     HEAP32[$99 >> 2] = $34; //@line 16721
     $100 = $ReallocAsyncCtx4 + 16 | 0; //@line 16722
     HEAP8[$100 >> 0] = $$sink$i; //@line 16723
     $101 = $ReallocAsyncCtx4 + 20 | 0; //@line 16724
     HEAP32[$101 >> 2] = $27; //@line 16725
     $102 = $ReallocAsyncCtx4 + 24 | 0; //@line 16726
     HEAP32[$102 >> 2] = $4; //@line 16727
     $103 = $ReallocAsyncCtx4 + 28 | 0; //@line 16728
     HEAP32[$103 >> 2] = $6; //@line 16729
     $104 = $ReallocAsyncCtx4 + 32 | 0; //@line 16730
     HEAP32[$104 >> 2] = $8; //@line 16731
     $105 = $ReallocAsyncCtx4 + 36 | 0; //@line 16732
     HEAP32[$105 >> 2] = $4; //@line 16733
     $106 = $ReallocAsyncCtx4 + 40 | 0; //@line 16734
     HEAP32[$106 >> 2] = $8; //@line 16735
     $107 = $ReallocAsyncCtx4 + 44 | 0; //@line 16736
     HEAP32[$107 >> 2] = $10; //@line 16737
     $108 = $ReallocAsyncCtx4 + 48 | 0; //@line 16738
     HEAP32[$108 >> 2] = $12; //@line 16739
     $109 = $ReallocAsyncCtx4 + 52 | 0; //@line 16740
     HEAP32[$109 >> 2] = $14; //@line 16741
     $110 = $ReallocAsyncCtx4 + 56 | 0; //@line 16742
     HEAP32[$110 >> 2] = $14; //@line 16743
     $111 = $ReallocAsyncCtx4 + 60 | 0; //@line 16744
     HEAP32[$111 >> 2] = $16; //@line 16745
     $112 = $ReallocAsyncCtx4 + 64 | 0; //@line 16746
     HEAP32[$112 >> 2] = $28; //@line 16747
     $113 = $ReallocAsyncCtx4 + 68 | 0; //@line 16748
     HEAP32[$113 >> 2] = $29; //@line 16749
     $114 = $ReallocAsyncCtx4 + 72 | 0; //@line 16750
     HEAP32[$114 >> 2] = $30; //@line 16751
     $115 = $ReallocAsyncCtx4 + 76 | 0; //@line 16752
     HEAP32[$115 >> 2] = $31; //@line 16753
     $116 = $ReallocAsyncCtx4 + 80 | 0; //@line 16754
     HEAP32[$116 >> 2] = $32; //@line 16755
     $117 = $ReallocAsyncCtx4 + 84 | 0; //@line 16756
     HEAP32[$117 >> 2] = $33; //@line 16757
     $118 = $ReallocAsyncCtx4 + 88 | 0; //@line 16758
     HEAP32[$118 >> 2] = $18; //@line 16759
     $119 = $ReallocAsyncCtx4 + 92 | 0; //@line 16760
     HEAP32[$119 >> 2] = $20; //@line 16761
     $120 = $ReallocAsyncCtx4 + 96 | 0; //@line 16762
     HEAP32[$120 >> 2] = $20; //@line 16763
     $121 = $ReallocAsyncCtx4 + 100 | 0; //@line 16764
     HEAP8[$121 >> 0] = 3; //@line 16765
     $122 = $ReallocAsyncCtx4 + 101 | 0; //@line 16766
     HEAP8[$122 >> 0] = 0; //@line 16767
     sp = STACKTOP; //@line 16768
     STACKTOP = sp; //@line 16769
     return;
    }
   }
   $42 = HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0; //@line 16775
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 16776
   $43 = FUNCTION_TABLE_iiii[$42 & 31]($20, $$191 & 255, $4) | 0; //@line 16777
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 16780
    $44 = $ReallocAsyncCtx + 4 | 0; //@line 16781
    HEAP8[$44 >> 0] = 3; //@line 16782
    $45 = $ReallocAsyncCtx + 8 | 0; //@line 16783
    HEAP32[$45 >> 2] = $2; //@line 16784
    $46 = $ReallocAsyncCtx + 12 | 0; //@line 16785
    HEAP32[$46 >> 2] = $25; //@line 16786
    $47 = $ReallocAsyncCtx + 16 | 0; //@line 16787
    HEAP32[$47 >> 2] = $34; //@line 16788
    $48 = $ReallocAsyncCtx + 20 | 0; //@line 16789
    HEAP8[$48 >> 0] = $$sink$i; //@line 16790
    $49 = $ReallocAsyncCtx + 24 | 0; //@line 16791
    HEAP32[$49 >> 2] = $27; //@line 16792
    $50 = $ReallocAsyncCtx + 28 | 0; //@line 16793
    HEAP32[$50 >> 2] = $4; //@line 16794
    $51 = $ReallocAsyncCtx + 32 | 0; //@line 16795
    HEAP32[$51 >> 2] = $6; //@line 16796
    $52 = $ReallocAsyncCtx + 36 | 0; //@line 16797
    HEAP32[$52 >> 2] = $8; //@line 16798
    $53 = $ReallocAsyncCtx + 40 | 0; //@line 16799
    HEAP32[$53 >> 2] = $4; //@line 16800
    $54 = $ReallocAsyncCtx + 44 | 0; //@line 16801
    HEAP32[$54 >> 2] = $8; //@line 16802
    $55 = $ReallocAsyncCtx + 48 | 0; //@line 16803
    HEAP32[$55 >> 2] = $10; //@line 16804
    $56 = $ReallocAsyncCtx + 52 | 0; //@line 16805
    HEAP32[$56 >> 2] = $12; //@line 16806
    $57 = $ReallocAsyncCtx + 56 | 0; //@line 16807
    HEAP32[$57 >> 2] = $14; //@line 16808
    $58 = $ReallocAsyncCtx + 60 | 0; //@line 16809
    HEAP32[$58 >> 2] = $14; //@line 16810
    $59 = $ReallocAsyncCtx + 64 | 0; //@line 16811
    HEAP32[$59 >> 2] = $16; //@line 16812
    $60 = $ReallocAsyncCtx + 68 | 0; //@line 16813
    HEAP8[$60 >> 0] = $$191; //@line 16814
    $61 = $ReallocAsyncCtx + 72 | 0; //@line 16815
    HEAP32[$61 >> 2] = $28; //@line 16816
    $62 = $ReallocAsyncCtx + 76 | 0; //@line 16817
    HEAP32[$62 >> 2] = $29; //@line 16818
    $63 = $ReallocAsyncCtx + 80 | 0; //@line 16819
    HEAP32[$63 >> 2] = $30; //@line 16820
    $64 = $ReallocAsyncCtx + 84 | 0; //@line 16821
    HEAP32[$64 >> 2] = $31; //@line 16822
    $65 = $ReallocAsyncCtx + 88 | 0; //@line 16823
    HEAP32[$65 >> 2] = $32; //@line 16824
    $66 = $ReallocAsyncCtx + 92 | 0; //@line 16825
    HEAP32[$66 >> 2] = $33; //@line 16826
    $67 = $ReallocAsyncCtx + 96 | 0; //@line 16827
    HEAP32[$67 >> 2] = $18; //@line 16828
    $68 = $ReallocAsyncCtx + 100 | 0; //@line 16829
    HEAP32[$68 >> 2] = $20; //@line 16830
    $69 = $ReallocAsyncCtx + 104 | 0; //@line 16831
    HEAP32[$69 >> 2] = $20; //@line 16832
    sp = STACKTOP; //@line 16833
    STACKTOP = sp; //@line 16834
    return;
   }
   HEAP32[___async_retval >> 2] = $43; //@line 16837
   ___async_unwind = 0; //@line 16838
   HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 16839
   $44 = $ReallocAsyncCtx + 4 | 0; //@line 16840
   HEAP8[$44 >> 0] = 3; //@line 16841
   $45 = $ReallocAsyncCtx + 8 | 0; //@line 16842
   HEAP32[$45 >> 2] = $2; //@line 16843
   $46 = $ReallocAsyncCtx + 12 | 0; //@line 16844
   HEAP32[$46 >> 2] = $25; //@line 16845
   $47 = $ReallocAsyncCtx + 16 | 0; //@line 16846
   HEAP32[$47 >> 2] = $34; //@line 16847
   $48 = $ReallocAsyncCtx + 20 | 0; //@line 16848
   HEAP8[$48 >> 0] = $$sink$i; //@line 16849
   $49 = $ReallocAsyncCtx + 24 | 0; //@line 16850
   HEAP32[$49 >> 2] = $27; //@line 16851
   $50 = $ReallocAsyncCtx + 28 | 0; //@line 16852
   HEAP32[$50 >> 2] = $4; //@line 16853
   $51 = $ReallocAsyncCtx + 32 | 0; //@line 16854
   HEAP32[$51 >> 2] = $6; //@line 16855
   $52 = $ReallocAsyncCtx + 36 | 0; //@line 16856
   HEAP32[$52 >> 2] = $8; //@line 16857
   $53 = $ReallocAsyncCtx + 40 | 0; //@line 16858
   HEAP32[$53 >> 2] = $4; //@line 16859
   $54 = $ReallocAsyncCtx + 44 | 0; //@line 16860
   HEAP32[$54 >> 2] = $8; //@line 16861
   $55 = $ReallocAsyncCtx + 48 | 0; //@line 16862
   HEAP32[$55 >> 2] = $10; //@line 16863
   $56 = $ReallocAsyncCtx + 52 | 0; //@line 16864
   HEAP32[$56 >> 2] = $12; //@line 16865
   $57 = $ReallocAsyncCtx + 56 | 0; //@line 16866
   HEAP32[$57 >> 2] = $14; //@line 16867
   $58 = $ReallocAsyncCtx + 60 | 0; //@line 16868
   HEAP32[$58 >> 2] = $14; //@line 16869
   $59 = $ReallocAsyncCtx + 64 | 0; //@line 16870
   HEAP32[$59 >> 2] = $16; //@line 16871
   $60 = $ReallocAsyncCtx + 68 | 0; //@line 16872
   HEAP8[$60 >> 0] = $$191; //@line 16873
   $61 = $ReallocAsyncCtx + 72 | 0; //@line 16874
   HEAP32[$61 >> 2] = $28; //@line 16875
   $62 = $ReallocAsyncCtx + 76 | 0; //@line 16876
   HEAP32[$62 >> 2] = $29; //@line 16877
   $63 = $ReallocAsyncCtx + 80 | 0; //@line 16878
   HEAP32[$63 >> 2] = $30; //@line 16879
   $64 = $ReallocAsyncCtx + 84 | 0; //@line 16880
   HEAP32[$64 >> 2] = $31; //@line 16881
   $65 = $ReallocAsyncCtx + 88 | 0; //@line 16882
   HEAP32[$65 >> 2] = $32; //@line 16883
   $66 = $ReallocAsyncCtx + 92 | 0; //@line 16884
   HEAP32[$66 >> 2] = $33; //@line 16885
   $67 = $ReallocAsyncCtx + 96 | 0; //@line 16886
   HEAP32[$67 >> 2] = $18; //@line 16887
   $68 = $ReallocAsyncCtx + 100 | 0; //@line 16888
   HEAP32[$68 >> 2] = $20; //@line 16889
   $69 = $ReallocAsyncCtx + 104 | 0; //@line 16890
   HEAP32[$69 >> 2] = $20; //@line 16891
   sp = STACKTOP; //@line 16892
   STACKTOP = sp; //@line 16893
   return;
  }
 } else {
  $$2 = $AsyncRetVal; //@line 16896
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 16898
 __ZN9UDPSocketD2Ev($2); //@line 16899
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 16902
  $129 = $ReallocAsyncCtx5 + 4 | 0; //@line 16903
  HEAP32[$129 >> 2] = $18; //@line 16904
  $130 = $ReallocAsyncCtx5 + 8 | 0; //@line 16905
  HEAP32[$130 >> 2] = $$2; //@line 16906
  sp = STACKTOP; //@line 16907
  STACKTOP = sp; //@line 16908
  return;
 }
 ___async_unwind = 0; //@line 16910
 HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 16911
 $129 = $ReallocAsyncCtx5 + 4 | 0; //@line 16912
 HEAP32[$129 >> 2] = $18; //@line 16913
 $130 = $ReallocAsyncCtx5 + 8 | 0; //@line 16914
 HEAP32[$130 >> 2] = $$2; //@line 16915
 sp = STACKTOP; //@line 16916
 STACKTOP = sp; //@line 16917
 return;
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13495
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13497
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13499
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13501
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13503
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13505
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13507
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13509
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13511
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13513
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13515
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13517
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13519
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13521
 $28 = HEAP8[$0 + 56 >> 0] | 0; //@line 13523
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 13525
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 13529
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 13531
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 13533
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 13535
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 13539
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 13541
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 13543
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 13545
 HEAP32[137] = (HEAP32[137] | 0) + 1; //@line 13548
 $53 = HEAP32[126] | 0; //@line 13549
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 13553
   do {
    if ($28 << 24 >> 24 > -1 & ($4 | 0) != 0) {
     $57 = HEAP32[123] | 0; //@line 13559
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $4) | 0) {
       $$0$i = 1; //@line 13566
       break;
      }
     }
     $62 = HEAP32[124] | 0; //@line 13570
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 13574
     } else {
      if (!(_strstr($62, $4) | 0)) {
       $$0$i = 1; //@line 13579
      } else {
       label = 9; //@line 13581
      }
     }
    } else {
     label = 9; //@line 13585
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 13589
   }
   if (!((HEAP32[133] | 0) != 0 & ((($4 | 0) == 0 | (($38 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[130] = HEAP32[128]; //@line 13601
    break;
   }
   $73 = HEAPU8[488] | 0; //@line 13605
   $74 = $28 & 255; //@line 13606
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 13611
    $$lobit = $78 >>> 6; //@line 13612
    $79 = $$lobit & 255; //@line 13613
    $83 = ($73 & 32 | 0) == 0; //@line 13617
    $84 = HEAP32[127] | 0; //@line 13618
    $85 = HEAP32[126] | 0; //@line 13619
    $86 = $28 << 24 >> 24 == 1; //@line 13620
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 13623
     _vsnprintf($85, $84, $38, $36) | 0; //@line 13624
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 65; //@line 13627
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 13628
      $$expand_i1_val = $86 & 1; //@line 13629
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 13630
      sp = STACKTOP; //@line 13631
      return;
     }
     ___async_unwind = 0; //@line 13634
     HEAP32[$ReallocAsyncCtx12 >> 2] = 65; //@line 13635
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 13636
     $$expand_i1_val = $86 & 1; //@line 13637
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 13638
     sp = STACKTOP; //@line 13639
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 13645
     $$1143 = $85; //@line 13645
     $$1145 = $84; //@line 13645
     $$3154 = 0; //@line 13645
     label = 28; //@line 13646
    } else {
     if ($83) {
      $$0142 = $85; //@line 13649
      $$0144 = $84; //@line 13649
     } else {
      $89 = _snprintf($85, $84, 3537, $40) | 0; //@line 13651
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 13653
      $91 = ($$ | 0) > 0; //@line 13654
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 13659
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 13659
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 13663
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 3555; //@line 13669
        label = 25; //@line 13670
        break;
       }
      case 1:
       {
        $$sink = 3561; //@line 13674
        label = 25; //@line 13675
        break;
       }
      case 3:
       {
        $$sink = 3549; //@line 13679
        label = 25; //@line 13680
        break;
       }
      case 7:
       {
        $$sink = 3543; //@line 13684
        label = 25; //@line 13685
        break;
       }
      default:
       {
        $$0141 = 0; //@line 13689
        $$1152 = 0; //@line 13689
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$30 >> 2] = $$sink; //@line 13693
       $$0141 = $79 & 1; //@line 13696
       $$1152 = _snprintf($$0142, $$0144, 3567, $30) | 0; //@line 13696
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 13699
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 13701
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 13703
       $$1$off0 = $extract$t159; //@line 13708
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 13708
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 13708
       $$3154 = $$1152; //@line 13708
       label = 28; //@line 13709
      } else {
       $$1$off0 = $extract$t159; //@line 13711
       $$1143 = $$0142; //@line 13711
       $$1145 = $$0144; //@line 13711
       $$3154 = $$1152$; //@line 13711
       label = 28; //@line 13712
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[131] | 0) != 0) {
      HEAP32[$34 >> 2] = HEAP32[$36 >> 2]; //@line 13723
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 13724
      $108 = _vsnprintf(0, 0, $38, $34) | 0; //@line 13725
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 69; //@line 13728
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 13729
       HEAP32[$109 >> 2] = $$1143; //@line 13730
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 13731
       HEAP32[$110 >> 2] = $$1145; //@line 13732
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 13733
       HEAP32[$111 >> 2] = $74; //@line 13734
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 13735
       HEAP32[$112 >> 2] = $2; //@line 13736
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 13737
       HEAP32[$113 >> 2] = $4; //@line 13738
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 13739
       HEAP32[$114 >> 2] = $6; //@line 13740
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 13741
       HEAP32[$115 >> 2] = $8; //@line 13742
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 13743
       HEAP32[$116 >> 2] = $10; //@line 13744
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 13745
       HEAP32[$117 >> 2] = $12; //@line 13746
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 13747
       HEAP32[$118 >> 2] = $14; //@line 13748
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 13749
       HEAP32[$119 >> 2] = $34; //@line 13750
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 13751
       HEAP32[$120 >> 2] = $16; //@line 13752
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 13753
       HEAP32[$121 >> 2] = $18; //@line 13754
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 13755
       HEAP32[$122 >> 2] = $$3154; //@line 13756
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 13757
       HEAP32[$123 >> 2] = $20; //@line 13758
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 13759
       HEAP32[$124 >> 2] = $22; //@line 13760
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 13761
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 13762
       HEAP8[$125 >> 0] = $$1$off0$expand_i1_val; //@line 13763
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 13764
       HEAP32[$126 >> 2] = $44; //@line 13765
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 13766
       HEAP32[$127 >> 2] = $46; //@line 13767
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 13768
       HEAP32[$128 >> 2] = $48; //@line 13769
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 13770
       HEAP32[$129 >> 2] = $50; //@line 13771
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 13772
       HEAP32[$130 >> 2] = $24; //@line 13773
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 13774
       HEAP32[$131 >> 2] = $26; //@line 13775
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 13776
       HEAP32[$132 >> 2] = $38; //@line 13777
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 13778
       HEAP32[$133 >> 2] = $36; //@line 13779
       sp = STACKTOP; //@line 13780
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 13784
      ___async_unwind = 0; //@line 13785
      HEAP32[$ReallocAsyncCtx11 >> 2] = 69; //@line 13786
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 13787
      HEAP32[$109 >> 2] = $$1143; //@line 13788
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 13789
      HEAP32[$110 >> 2] = $$1145; //@line 13790
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 13791
      HEAP32[$111 >> 2] = $74; //@line 13792
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 13793
      HEAP32[$112 >> 2] = $2; //@line 13794
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 13795
      HEAP32[$113 >> 2] = $4; //@line 13796
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 13797
      HEAP32[$114 >> 2] = $6; //@line 13798
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 13799
      HEAP32[$115 >> 2] = $8; //@line 13800
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 13801
      HEAP32[$116 >> 2] = $10; //@line 13802
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 13803
      HEAP32[$117 >> 2] = $12; //@line 13804
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 13805
      HEAP32[$118 >> 2] = $14; //@line 13806
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 13807
      HEAP32[$119 >> 2] = $34; //@line 13808
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 13809
      HEAP32[$120 >> 2] = $16; //@line 13810
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 13811
      HEAP32[$121 >> 2] = $18; //@line 13812
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 13813
      HEAP32[$122 >> 2] = $$3154; //@line 13814
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 13815
      HEAP32[$123 >> 2] = $20; //@line 13816
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 13817
      HEAP32[$124 >> 2] = $22; //@line 13818
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 13819
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 13820
      HEAP8[$125 >> 0] = $$1$off0$expand_i1_val; //@line 13821
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 13822
      HEAP32[$126 >> 2] = $44; //@line 13823
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 13824
      HEAP32[$127 >> 2] = $46; //@line 13825
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 13826
      HEAP32[$128 >> 2] = $48; //@line 13827
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 13828
      HEAP32[$129 >> 2] = $50; //@line 13829
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 13830
      HEAP32[$130 >> 2] = $24; //@line 13831
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 13832
      HEAP32[$131 >> 2] = $26; //@line 13833
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 13834
      HEAP32[$132 >> 2] = $38; //@line 13835
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 13836
      HEAP32[$133 >> 2] = $36; //@line 13837
      sp = STACKTOP; //@line 13838
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 13843
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$2 >> 2] = $4; //@line 13849
        $$5156 = _snprintf($$1143, $$1145, 3570, $2) | 0; //@line 13851
        break;
       }
      case 1:
       {
        HEAP32[$8 >> 2] = $4; //@line 13855
        $$5156 = _snprintf($$1143, $$1145, 3585, $8) | 0; //@line 13857
        break;
       }
      case 3:
       {
        HEAP32[$16 >> 2] = $4; //@line 13861
        $$5156 = _snprintf($$1143, $$1145, 3600, $16) | 0; //@line 13863
        break;
       }
      case 7:
       {
        HEAP32[$20 >> 2] = $4; //@line 13867
        $$5156 = _snprintf($$1143, $$1145, 3615, $20) | 0; //@line 13869
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 3630, $24) | 0; //@line 13874
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 13878
      $147 = $$1143 + $$5156$ | 0; //@line 13880
      $148 = $$1145 - $$5156$ | 0; //@line 13881
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 13885
       $150 = _vsnprintf($147, $148, $38, $36) | 0; //@line 13886
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 13889
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 13890
        HEAP32[$151 >> 2] = $148; //@line 13891
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 13892
        HEAP32[$152 >> 2] = $147; //@line 13893
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 13894
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 13895
        HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 13896
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 13897
        HEAP32[$154 >> 2] = $44; //@line 13898
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 13899
        HEAP32[$155 >> 2] = $46; //@line 13900
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 13901
        HEAP32[$156 >> 2] = $48; //@line 13902
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 13903
        HEAP32[$157 >> 2] = $50; //@line 13904
        sp = STACKTOP; //@line 13905
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 13909
       ___async_unwind = 0; //@line 13910
       HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 13911
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 13912
       HEAP32[$151 >> 2] = $148; //@line 13913
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 13914
       HEAP32[$152 >> 2] = $147; //@line 13915
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 13916
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 13917
       HEAP8[$153 >> 0] = $$1$off0$expand_i1_val18; //@line 13918
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 13919
       HEAP32[$154 >> 2] = $44; //@line 13920
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 13921
       HEAP32[$155 >> 2] = $46; //@line 13922
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 13923
       HEAP32[$156 >> 2] = $48; //@line 13924
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 13925
       HEAP32[$157 >> 2] = $50; //@line 13926
       sp = STACKTOP; //@line 13927
       return;
      }
     }
    }
    $159 = HEAP32[133] | 0; //@line 13932
    $160 = HEAP32[126] | 0; //@line 13933
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 13934
    FUNCTION_TABLE_vi[$159 & 511]($160); //@line 13935
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 13938
     sp = STACKTOP; //@line 13939
     return;
    }
    ___async_unwind = 0; //@line 13942
    HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 13943
    sp = STACKTOP; //@line 13944
    return;
   }
  }
 } while (0);
 $161 = HEAP32[136] | 0; //@line 13949
 if (!$161) {
  return;
 }
 $163 = HEAP32[137] | 0; //@line 13954
 HEAP32[137] = 0; //@line 13955
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 13956
 FUNCTION_TABLE_v[$161 & 7](); //@line 13957
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 13960
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 13961
  HEAP32[$164 >> 2] = $163; //@line 13962
  sp = STACKTOP; //@line 13963
  return;
 }
 ___async_unwind = 0; //@line 13966
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 13967
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 13968
 HEAP32[$164 >> 2] = $163; //@line 13969
 sp = STACKTOP; //@line 13970
 return;
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 2372
 $3 = HEAP32[1972] | 0; //@line 2373
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 2376
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 2380
 $7 = $6 & 3; //@line 2381
 if (($7 | 0) == 1) {
  _abort(); //@line 2384
 }
 $9 = $6 & -8; //@line 2387
 $10 = $2 + $9 | 0; //@line 2388
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 2393
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 2399
   $17 = $13 + $9 | 0; //@line 2400
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 2403
   }
   if ((HEAP32[1973] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 2409
    $106 = HEAP32[$105 >> 2] | 0; //@line 2410
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 2414
     $$1382 = $17; //@line 2414
     $114 = $16; //@line 2414
     break;
    }
    HEAP32[1970] = $17; //@line 2417
    HEAP32[$105 >> 2] = $106 & -2; //@line 2419
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 2422
    HEAP32[$16 + $17 >> 2] = $17; //@line 2424
    return;
   }
   $21 = $13 >>> 3; //@line 2427
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 2431
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 2433
    $28 = 7912 + ($21 << 1 << 2) | 0; //@line 2435
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 2440
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2447
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[1968] = HEAP32[1968] & ~(1 << $21); //@line 2457
     $$1 = $16; //@line 2458
     $$1382 = $17; //@line 2458
     $114 = $16; //@line 2458
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 2464
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 2468
     }
     $41 = $26 + 8 | 0; //@line 2471
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 2475
     } else {
      _abort(); //@line 2477
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 2482
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 2483
    $$1 = $16; //@line 2484
    $$1382 = $17; //@line 2484
    $114 = $16; //@line 2484
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 2488
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 2490
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 2494
     $60 = $59 + 4 | 0; //@line 2495
     $61 = HEAP32[$60 >> 2] | 0; //@line 2496
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 2499
      if (!$63) {
       $$3 = 0; //@line 2502
       break;
      } else {
       $$1387 = $63; //@line 2505
       $$1390 = $59; //@line 2505
      }
     } else {
      $$1387 = $61; //@line 2508
      $$1390 = $60; //@line 2508
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 2511
      $66 = HEAP32[$65 >> 2] | 0; //@line 2512
      if ($66 | 0) {
       $$1387 = $66; //@line 2515
       $$1390 = $65; //@line 2515
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 2518
      $69 = HEAP32[$68 >> 2] | 0; //@line 2519
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 2524
       $$1390 = $68; //@line 2524
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 2529
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 2532
      $$3 = $$1387; //@line 2533
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 2538
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 2541
     }
     $53 = $51 + 12 | 0; //@line 2544
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2548
     }
     $56 = $48 + 8 | 0; //@line 2551
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 2555
      HEAP32[$56 >> 2] = $51; //@line 2556
      $$3 = $48; //@line 2557
      break;
     } else {
      _abort(); //@line 2560
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 2567
    $$1382 = $17; //@line 2567
    $114 = $16; //@line 2567
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 2570
    $75 = 8176 + ($74 << 2) | 0; //@line 2571
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 2576
      if (!$$3) {
       HEAP32[1969] = HEAP32[1969] & ~(1 << $74); //@line 2583
       $$1 = $16; //@line 2584
       $$1382 = $17; //@line 2584
       $114 = $16; //@line 2584
       break L10;
      }
     } else {
      if ((HEAP32[1972] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 2591
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 2599
       if (!$$3) {
        $$1 = $16; //@line 2602
        $$1382 = $17; //@line 2602
        $114 = $16; //@line 2602
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[1972] | 0; //@line 2610
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 2613
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 2617
    $92 = $16 + 16 | 0; //@line 2618
    $93 = HEAP32[$92 >> 2] | 0; //@line 2619
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 2625
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 2629
       HEAP32[$93 + 24 >> 2] = $$3; //@line 2631
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 2637
    if (!$99) {
     $$1 = $16; //@line 2640
     $$1382 = $17; //@line 2640
     $114 = $16; //@line 2640
    } else {
     if ((HEAP32[1972] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 2645
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 2649
      HEAP32[$99 + 24 >> 2] = $$3; //@line 2651
      $$1 = $16; //@line 2652
      $$1382 = $17; //@line 2652
      $114 = $16; //@line 2652
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 2658
   $$1382 = $9; //@line 2658
   $114 = $2; //@line 2658
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 2663
 }
 $115 = $10 + 4 | 0; //@line 2666
 $116 = HEAP32[$115 >> 2] | 0; //@line 2667
 if (!($116 & 1)) {
  _abort(); //@line 2671
 }
 if (!($116 & 2)) {
  if ((HEAP32[1974] | 0) == ($10 | 0)) {
   $124 = (HEAP32[1971] | 0) + $$1382 | 0; //@line 2681
   HEAP32[1971] = $124; //@line 2682
   HEAP32[1974] = $$1; //@line 2683
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 2686
   if (($$1 | 0) != (HEAP32[1973] | 0)) {
    return;
   }
   HEAP32[1973] = 0; //@line 2692
   HEAP32[1970] = 0; //@line 2693
   return;
  }
  if ((HEAP32[1973] | 0) == ($10 | 0)) {
   $132 = (HEAP32[1970] | 0) + $$1382 | 0; //@line 2700
   HEAP32[1970] = $132; //@line 2701
   HEAP32[1973] = $114; //@line 2702
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 2705
   HEAP32[$114 + $132 >> 2] = $132; //@line 2707
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 2711
  $138 = $116 >>> 3; //@line 2712
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 2717
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 2719
    $145 = 7912 + ($138 << 1 << 2) | 0; //@line 2721
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[1972] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 2727
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 2734
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[1968] = HEAP32[1968] & ~(1 << $138); //@line 2744
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 2750
    } else {
     if ((HEAP32[1972] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 2755
     }
     $160 = $143 + 8 | 0; //@line 2758
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 2762
     } else {
      _abort(); //@line 2764
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 2769
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 2770
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 2773
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 2775
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 2779
      $180 = $179 + 4 | 0; //@line 2780
      $181 = HEAP32[$180 >> 2] | 0; //@line 2781
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 2784
       if (!$183) {
        $$3400 = 0; //@line 2787
        break;
       } else {
        $$1398 = $183; //@line 2790
        $$1402 = $179; //@line 2790
       }
      } else {
       $$1398 = $181; //@line 2793
       $$1402 = $180; //@line 2793
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 2796
       $186 = HEAP32[$185 >> 2] | 0; //@line 2797
       if ($186 | 0) {
        $$1398 = $186; //@line 2800
        $$1402 = $185; //@line 2800
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 2803
       $189 = HEAP32[$188 >> 2] | 0; //@line 2804
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 2809
        $$1402 = $188; //@line 2809
       }
      }
      if ((HEAP32[1972] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 2815
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 2818
       $$3400 = $$1398; //@line 2819
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 2824
      if ((HEAP32[1972] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 2828
      }
      $173 = $170 + 12 | 0; //@line 2831
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 2835
      }
      $176 = $167 + 8 | 0; //@line 2838
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 2842
       HEAP32[$176 >> 2] = $170; //@line 2843
       $$3400 = $167; //@line 2844
       break;
      } else {
       _abort(); //@line 2847
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 2855
     $196 = 8176 + ($195 << 2) | 0; //@line 2856
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 2861
       if (!$$3400) {
        HEAP32[1969] = HEAP32[1969] & ~(1 << $195); //@line 2868
        break L108;
       }
      } else {
       if ((HEAP32[1972] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 2875
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 2883
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[1972] | 0; //@line 2893
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 2896
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 2900
     $213 = $10 + 16 | 0; //@line 2901
     $214 = HEAP32[$213 >> 2] | 0; //@line 2902
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 2908
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 2912
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 2914
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 2920
     if ($220 | 0) {
      if ((HEAP32[1972] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 2926
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 2930
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 2932
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 2941
  HEAP32[$114 + $137 >> 2] = $137; //@line 2943
  if (($$1 | 0) == (HEAP32[1973] | 0)) {
   HEAP32[1970] = $137; //@line 2947
   return;
  } else {
   $$2 = $137; //@line 2950
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 2954
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 2957
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 2959
  $$2 = $$1382; //@line 2960
 }
 $235 = $$2 >>> 3; //@line 2962
 if ($$2 >>> 0 < 256) {
  $238 = 7912 + ($235 << 1 << 2) | 0; //@line 2966
  $239 = HEAP32[1968] | 0; //@line 2967
  $240 = 1 << $235; //@line 2968
  if (!($239 & $240)) {
   HEAP32[1968] = $239 | $240; //@line 2973
   $$0403 = $238; //@line 2975
   $$pre$phiZ2D = $238 + 8 | 0; //@line 2975
  } else {
   $244 = $238 + 8 | 0; //@line 2977
   $245 = HEAP32[$244 >> 2] | 0; //@line 2978
   if ((HEAP32[1972] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 2982
   } else {
    $$0403 = $245; //@line 2985
    $$pre$phiZ2D = $244; //@line 2985
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 2988
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 2990
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 2992
  HEAP32[$$1 + 12 >> 2] = $238; //@line 2994
  return;
 }
 $251 = $$2 >>> 8; //@line 2997
 if (!$251) {
  $$0396 = 0; //@line 3000
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 3004
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 3008
   $257 = $251 << $256; //@line 3009
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 3012
   $262 = $257 << $260; //@line 3014
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 3017
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 3022
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 3028
  }
 }
 $276 = 8176 + ($$0396 << 2) | 0; //@line 3031
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 3033
 HEAP32[$$1 + 20 >> 2] = 0; //@line 3036
 HEAP32[$$1 + 16 >> 2] = 0; //@line 3037
 $280 = HEAP32[1969] | 0; //@line 3038
 $281 = 1 << $$0396; //@line 3039
 do {
  if (!($280 & $281)) {
   HEAP32[1969] = $280 | $281; //@line 3045
   HEAP32[$276 >> 2] = $$1; //@line 3046
   HEAP32[$$1 + 24 >> 2] = $276; //@line 3048
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 3050
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 3052
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 3060
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 3060
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 3067
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 3071
    $301 = HEAP32[$299 >> 2] | 0; //@line 3073
    if (!$301) {
     label = 121; //@line 3076
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 3079
     $$0384 = $301; //@line 3079
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[1972] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 3086
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 3089
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 3091
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 3093
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 3095
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 3100
    $309 = HEAP32[$308 >> 2] | 0; //@line 3101
    $310 = HEAP32[1972] | 0; //@line 3102
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 3108
     HEAP32[$308 >> 2] = $$1; //@line 3109
     HEAP32[$$1 + 8 >> 2] = $309; //@line 3111
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 3113
     HEAP32[$$1 + 24 >> 2] = 0; //@line 3115
     break;
    } else {
     _abort(); //@line 3118
    }
   }
  }
 } while (0);
 $319 = (HEAP32[1976] | 0) + -1 | 0; //@line 3125
 HEAP32[1976] = $319; //@line 3126
 if (!$319) {
  $$0212$in$i = 8328; //@line 3129
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 3134
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 3140
  }
 }
 HEAP32[1976] = -1; //@line 3143
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$048$i = 0, $$090 = 0, $$170 = 0, $$191 = 0, $$2 = 0, $$289$ph101 = 0, $$292 = 0, $$3 = 0, $$393 = 0, $$4$ph = 0, $$498 = 0, $$byval_copy29 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $126 = 0, $127 = 0, $14 = 0, $156 = 0, $158 = 0, $168 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $75 = 0, $78 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6073
 STACKTOP = STACKTOP + 176 | 0; //@line 6074
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 6074
 $$byval_copy29 = sp + 144 | 0; //@line 6075
 $5 = sp + 88 | 0; //@line 6076
 $6 = sp; //@line 6077
 $7 = sp + 64 | 0; //@line 6078
 if (!$1) {
  $$3 = -3003; //@line 6081
  STACKTOP = sp; //@line 6082
  return $$3 | 0; //@line 6082
 }
 $9 = _strlen($1) | 0; //@line 6084
 if (($9 | 0) > 255 | ($9 | 0) == 0) {
  $$3 = -3003; //@line 6089
  STACKTOP = sp; //@line 6090
  return $$3 | 0; //@line 6090
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $4, $2) | 0)) {
  $$3 = 1; //@line 6095
  STACKTOP = sp; //@line 6096
  return $$3 | 0; //@line 6096
 }
 __ZN9UDPSocketC2Ev($5); //@line 6098
 $AsyncCtx21 = _emscripten_alloc_async_context(48, sp) | 0; //@line 6099
 $14 = __ZN6Socket4openEP12NetworkStack($5, $0) | 0; //@line 6100
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 155; //@line 6103
  HEAP32[$AsyncCtx21 + 4 >> 2] = $5; //@line 6105
  HEAP32[$AsyncCtx21 + 8 >> 2] = $6; //@line 6107
  HEAP32[$AsyncCtx21 + 12 >> 2] = $1; //@line 6109
  HEAP32[$AsyncCtx21 + 16 >> 2] = $$byval_copy29; //@line 6111
  HEAP32[$AsyncCtx21 + 20 >> 2] = $2; //@line 6113
  HEAP32[$AsyncCtx21 + 24 >> 2] = $3; //@line 6115
  HEAP32[$AsyncCtx21 + 28 >> 2] = $7; //@line 6117
  HEAP32[$AsyncCtx21 + 32 >> 2] = $5; //@line 6119
  HEAP32[$AsyncCtx21 + 36 >> 2] = $5; //@line 6121
  HEAP32[$AsyncCtx21 + 40 >> 2] = $0; //@line 6123
  HEAP32[$AsyncCtx21 + 44 >> 2] = $4; //@line 6125
  sp = STACKTOP; //@line 6126
  STACKTOP = sp; //@line 6127
  return 0; //@line 6127
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 6129
 do {
  if (!$14) {
   __ZN6Socket11set_timeoutEi($5, 5e3); //@line 6133
   $27 = _malloc(512) | 0; //@line 6134
   if (!$27) {
    $$2 = -3007; //@line 6137
   } else {
    $29 = $27; //@line 6139
    $30 = $27 + 1 | 0; //@line 6140
    $31 = $27 + 2 | 0; //@line 6141
    $32 = $27 + 3 | 0; //@line 6142
    $33 = $27 + 4 | 0; //@line 6143
    $34 = $27 + 5 | 0; //@line 6144
    $35 = $27 + 6 | 0; //@line 6145
    $36 = $27 + 12 | 0; //@line 6146
    $$sink$i = ($4 | 0) == 2 ? 28 : 1; //@line 6148
    $$0 = 3; //@line 6149
    $$090 = 0; //@line 6149
    while (1) {
     HEAP32[$7 >> 2] = 0; //@line 6151
     HEAP32[$7 + 4 >> 2] = 0; //@line 6151
     HEAP32[$7 + 8 >> 2] = 0; //@line 6151
     HEAP32[$7 + 12 >> 2] = 0; //@line 6151
     HEAP32[$7 + 16 >> 2] = 0; //@line 6151
     HEAP32[$$byval_copy29 >> 2] = HEAP32[$7 >> 2]; //@line 6152
     HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 6152
     HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 6152
     HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 6152
     HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 6152
     __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy29, 0); //@line 6153
     if (!($$0 << 24 >> 24)) {
      $$4$ph = -3009; //@line 6156
      label = 31; //@line 6157
      break;
     }
     if (($$090 & 255) > 9) {
      $$191 = 0; //@line 6162
      label = 12; //@line 6163
     } else {
      if (($$090 & 255) < 5) {
       $$191 = $$090; //@line 6167
       label = 12; //@line 6168
      } else {
       $$292 = $$090; //@line 6170
       label = 15; //@line 6171
      }
     }
     if ((label | 0) == 12) {
      label = 0; //@line 6175
      $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0; //@line 6179
      $AsyncCtx = _emscripten_alloc_async_context(108, sp) | 0; //@line 6180
      $45 = FUNCTION_TABLE_iiii[$44 & 31]($0, $$191 & 255, $6) | 0; //@line 6181
      if (___async) {
       label = 13; //@line 6184
       break;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 6187
      if (($45 | 0) < 0) {
       $$292 = 5; //@line 6190
       label = 15; //@line 6191
      } else {
       $$393 = $$191; //@line 6193
      }
     }
     if ((label | 0) == 15) {
      label = 0; //@line 6197
      $75 = 648 + ((($$292 & 255) + -5 | 0) * 20 | 0) | 0; //@line 6200
      HEAP32[$$byval_copy29 >> 2] = HEAP32[$75 >> 2]; //@line 6201
      HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$75 + 4 >> 2]; //@line 6201
      HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$75 + 8 >> 2]; //@line 6201
      HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$75 + 12 >> 2]; //@line 6201
      HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$75 + 16 >> 2]; //@line 6201
      __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy29); //@line 6202
      $$393 = $$292; //@line 6203
     }
     __ZN13SocketAddress8set_portEt($6, 53); //@line 6205
     HEAP8[$27 >> 0] = 0; //@line 6206
     HEAP8[$30 >> 0] = 1; //@line 6207
     HEAP8[$31 >> 0] = 1; //@line 6208
     HEAP8[$32 >> 0] = 0; //@line 6209
     HEAP8[$33 >> 0] = 0; //@line 6210
     HEAP8[$34 >> 0] = 1; //@line 6211
     HEAP8[$35 >> 0] = 0; //@line 6212
     HEAP8[$35 + 1 >> 0] = 0; //@line 6212
     HEAP8[$35 + 2 >> 0] = 0; //@line 6212
     HEAP8[$35 + 3 >> 0] = 0; //@line 6212
     HEAP8[$35 + 4 >> 0] = 0; //@line 6212
     HEAP8[$35 + 5 >> 0] = 0; //@line 6212
     if (!(HEAP8[$1 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $36; //@line 6216
     } else {
      $$048$i = $1; //@line 6218
      $$sroa$0$0$in47$i = $36; //@line 6218
      while (1) {
       $78 = _strcspn($$048$i, 5126) | 0; //@line 6220
       $80 = $$sroa$0$0$in47$i + 1 | 0; //@line 6222
       HEAP8[$$sroa$0$0$in47$i >> 0] = $78; //@line 6223
       $81 = $78 & 255; //@line 6224
       _memcpy($80 | 0, $$048$i | 0, $81 | 0) | 0; //@line 6225
       $82 = $80 + $81 | 0; //@line 6226
       $$048$i = $$048$i + ($78 + ((HEAP8[$$048$i + $78 >> 0] | 0) == 46 & 1)) | 0; //@line 6232
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $82; //@line 6236
        break;
       } else {
        $$sroa$0$0$in47$i = $82; //@line 6239
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 6244
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 6246
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 6248
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 6250
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 6253
     $AsyncCtx9 = _emscripten_alloc_async_context(104, sp) | 0; //@line 6255
     $98 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $27, $$sroa$0$0$in$lcssa$i + 5 - $29 | 0) | 0; //@line 6256
     if (___async) {
      label = 19; //@line 6259
      break;
     }
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6262
     if (($98 | 0) < 0) {
      $$289$ph101 = $$0; //@line 6265
     } else {
      $126 = $$0 + -1 << 24 >> 24; //@line 6267
      $AsyncCtx6 = _emscripten_alloc_async_context(104, sp) | 0; //@line 6268
      $127 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $27, 512) | 0; //@line 6269
      if (___async) {
       label = 22; //@line 6272
       break;
      }
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 6275
      if (($127 | 0) == -3001) {
       $$289$ph101 = $126; //@line 6278
      } else {
       if (($127 | 0) < 0) {
        $$4$ph = $127; //@line 6282
        label = 31; //@line 6283
        break;
       }
       $156 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($27, 1, $$byval_copy29, $2, $3) | 0; //@line 6286
       if (($156 | 0) > 0) {
        label = 26; //@line 6289
        break;
       }
       if (($156 | 0) >= 0) {
        $$170 = -3009; //@line 6294
        label = 30; //@line 6295
        break;
       }
       $$0 = $126; //@line 6298
       $$090 = $$393; //@line 6298
       continue;
      }
     }
     $$0 = $$289$ph101; //@line 6303
     $$090 = $$393 + 1 << 24 >> 24; //@line 6303
    }
    do {
     if ((label | 0) == 13) {
      HEAP32[$AsyncCtx >> 2] = 156; //@line 6307
      HEAP8[$AsyncCtx + 4 >> 0] = $$0; //@line 6309
      HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 6311
      HEAP32[$AsyncCtx + 12 >> 2] = $27; //@line 6313
      HEAP32[$AsyncCtx + 16 >> 2] = $36; //@line 6315
      HEAP8[$AsyncCtx + 20 >> 0] = $$sink$i; //@line 6317
      HEAP32[$AsyncCtx + 24 >> 2] = $29; //@line 6319
      HEAP32[$AsyncCtx + 28 >> 2] = $6; //@line 6321
      HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 6323
      HEAP32[$AsyncCtx + 36 >> 2] = $$byval_copy29; //@line 6325
      HEAP32[$AsyncCtx + 40 >> 2] = $6; //@line 6327
      HEAP32[$AsyncCtx + 44 >> 2] = $$byval_copy29; //@line 6329
      HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 6331
      HEAP32[$AsyncCtx + 52 >> 2] = $3; //@line 6333
      HEAP32[$AsyncCtx + 56 >> 2] = $7; //@line 6335
      HEAP32[$AsyncCtx + 60 >> 2] = $7; //@line 6337
      HEAP32[$AsyncCtx + 64 >> 2] = $5; //@line 6339
      HEAP8[$AsyncCtx + 68 >> 0] = $$191; //@line 6341
      HEAP32[$AsyncCtx + 72 >> 2] = $30; //@line 6343
      HEAP32[$AsyncCtx + 76 >> 2] = $31; //@line 6345
      HEAP32[$AsyncCtx + 80 >> 2] = $32; //@line 6347
      HEAP32[$AsyncCtx + 84 >> 2] = $33; //@line 6349
      HEAP32[$AsyncCtx + 88 >> 2] = $34; //@line 6351
      HEAP32[$AsyncCtx + 92 >> 2] = $35; //@line 6353
      HEAP32[$AsyncCtx + 96 >> 2] = $5; //@line 6355
      HEAP32[$AsyncCtx + 100 >> 2] = $0; //@line 6357
      HEAP32[$AsyncCtx + 104 >> 2] = $0; //@line 6359
      sp = STACKTOP; //@line 6360
      STACKTOP = sp; //@line 6361
      return 0; //@line 6361
     } else if ((label | 0) == 19) {
      HEAP32[$AsyncCtx9 >> 2] = 157; //@line 6364
      HEAP32[$AsyncCtx9 + 4 >> 2] = $5; //@line 6366
      HEAP32[$AsyncCtx9 + 8 >> 2] = $27; //@line 6368
      HEAP32[$AsyncCtx9 + 12 >> 2] = $36; //@line 6370
      HEAP8[$AsyncCtx9 + 16 >> 0] = $$sink$i; //@line 6372
      HEAP32[$AsyncCtx9 + 20 >> 2] = $29; //@line 6374
      HEAP32[$AsyncCtx9 + 24 >> 2] = $6; //@line 6376
      HEAP32[$AsyncCtx9 + 28 >> 2] = $1; //@line 6378
      HEAP32[$AsyncCtx9 + 32 >> 2] = $$byval_copy29; //@line 6380
      HEAP32[$AsyncCtx9 + 36 >> 2] = $6; //@line 6382
      HEAP32[$AsyncCtx9 + 40 >> 2] = $$byval_copy29; //@line 6384
      HEAP32[$AsyncCtx9 + 44 >> 2] = $2; //@line 6386
      HEAP32[$AsyncCtx9 + 48 >> 2] = $3; //@line 6388
      HEAP32[$AsyncCtx9 + 52 >> 2] = $7; //@line 6390
      HEAP32[$AsyncCtx9 + 56 >> 2] = $7; //@line 6392
      HEAP32[$AsyncCtx9 + 60 >> 2] = $5; //@line 6394
      HEAP32[$AsyncCtx9 + 64 >> 2] = $30; //@line 6396
      HEAP32[$AsyncCtx9 + 68 >> 2] = $31; //@line 6398
      HEAP32[$AsyncCtx9 + 72 >> 2] = $32; //@line 6400
      HEAP32[$AsyncCtx9 + 76 >> 2] = $33; //@line 6402
      HEAP32[$AsyncCtx9 + 80 >> 2] = $34; //@line 6404
      HEAP32[$AsyncCtx9 + 84 >> 2] = $35; //@line 6406
      HEAP32[$AsyncCtx9 + 88 >> 2] = $5; //@line 6408
      HEAP32[$AsyncCtx9 + 92 >> 2] = $0; //@line 6410
      HEAP32[$AsyncCtx9 + 96 >> 2] = $0; //@line 6412
      HEAP8[$AsyncCtx9 + 100 >> 0] = $$0; //@line 6414
      HEAP8[$AsyncCtx9 + 101 >> 0] = $$393; //@line 6416
      sp = STACKTOP; //@line 6417
      STACKTOP = sp; //@line 6418
      return 0; //@line 6418
     } else if ((label | 0) == 22) {
      HEAP32[$AsyncCtx6 >> 2] = 158; //@line 6421
      HEAP32[$AsyncCtx6 + 4 >> 2] = $5; //@line 6423
      HEAP32[$AsyncCtx6 + 8 >> 2] = $27; //@line 6425
      HEAP32[$AsyncCtx6 + 12 >> 2] = $36; //@line 6427
      HEAP8[$AsyncCtx6 + 16 >> 0] = $$sink$i; //@line 6429
      HEAP32[$AsyncCtx6 + 20 >> 2] = $29; //@line 6431
      HEAP32[$AsyncCtx6 + 24 >> 2] = $6; //@line 6433
      HEAP32[$AsyncCtx6 + 28 >> 2] = $1; //@line 6435
      HEAP32[$AsyncCtx6 + 32 >> 2] = $$byval_copy29; //@line 6437
      HEAP32[$AsyncCtx6 + 36 >> 2] = $6; //@line 6439
      HEAP32[$AsyncCtx6 + 40 >> 2] = $$byval_copy29; //@line 6441
      HEAP32[$AsyncCtx6 + 44 >> 2] = $2; //@line 6443
      HEAP32[$AsyncCtx6 + 48 >> 2] = $3; //@line 6445
      HEAP32[$AsyncCtx6 + 52 >> 2] = $7; //@line 6447
      HEAP32[$AsyncCtx6 + 56 >> 2] = $7; //@line 6449
      HEAP32[$AsyncCtx6 + 60 >> 2] = $5; //@line 6451
      HEAP32[$AsyncCtx6 + 64 >> 2] = $30; //@line 6453
      HEAP32[$AsyncCtx6 + 68 >> 2] = $31; //@line 6455
      HEAP32[$AsyncCtx6 + 72 >> 2] = $32; //@line 6457
      HEAP32[$AsyncCtx6 + 76 >> 2] = $33; //@line 6459
      HEAP32[$AsyncCtx6 + 80 >> 2] = $34; //@line 6461
      HEAP32[$AsyncCtx6 + 84 >> 2] = $35; //@line 6463
      HEAP32[$AsyncCtx6 + 88 >> 2] = $5; //@line 6465
      HEAP32[$AsyncCtx6 + 92 >> 2] = $0; //@line 6467
      HEAP32[$AsyncCtx6 + 96 >> 2] = $0; //@line 6469
      HEAP8[$AsyncCtx6 + 100 >> 0] = $126; //@line 6471
      HEAP8[$AsyncCtx6 + 101 >> 0] = $$393; //@line 6473
      sp = STACKTOP; //@line 6474
      STACKTOP = sp; //@line 6475
      return 0; //@line 6475
     } else if ((label | 0) == 26) {
      $158 = HEAP32[$$byval_copy29 >> 2] | 0; //@line 6478
      $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6479
      __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($1, $2, $158); //@line 6480
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 159; //@line 6483
       HEAP32[$AsyncCtx2 + 4 >> 2] = $156; //@line 6485
       HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy29; //@line 6487
       HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 6489
       HEAP32[$AsyncCtx2 + 16 >> 2] = $27; //@line 6491
       HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 6493
       HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 6495
       HEAP32[$AsyncCtx2 + 28 >> 2] = $5; //@line 6497
       sp = STACKTOP; //@line 6498
       STACKTOP = sp; //@line 6499
       return 0; //@line 6499
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6501
       $$170 = $156; //@line 6502
       label = 30; //@line 6503
       break;
      }
     } else if ((label | 0) == 31) {
      $$498 = $$4$ph; //@line 6508
     }
    } while (0);
    if ((label | 0) == 30) {
     $$498 = $$170; //@line 6512
    }
    _free($27); //@line 6514
    $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6515
    $168 = __ZN6Socket5closeEv($5) | 0; //@line 6516
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 160; //@line 6519
     HEAP32[$AsyncCtx17 + 4 >> 2] = $$498; //@line 6521
     HEAP32[$AsyncCtx17 + 8 >> 2] = $5; //@line 6523
     HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 6525
     sp = STACKTOP; //@line 6526
     STACKTOP = sp; //@line 6527
     return 0; //@line 6527
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6529
     $$2 = ($168 | 0) == 0 ? $$498 : $168; //@line 6532
     break;
    }
   }
  } else {
   $$2 = $14; //@line 6537
  }
 } while (0);
 $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6540
 __ZN9UDPSocketD2Ev($5); //@line 6541
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 161; //@line 6544
  HEAP32[$AsyncCtx13 + 4 >> 2] = $5; //@line 6546
  HEAP32[$AsyncCtx13 + 8 >> 2] = $$2; //@line 6548
  sp = STACKTOP; //@line 6549
  STACKTOP = sp; //@line 6550
  return 0; //@line 6550
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6552
 $$3 = $$2; //@line 6553
 STACKTOP = sp; //@line 6554
 return $$3 | 0; //@line 6554
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 3639
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 3641
 L1 : do {
  if (!($4 & 1)) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 3646
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 3653
   $12 = $7 + $1 | 0; //@line 3654
   $13 = HEAP32[1972] | 0; //@line 3655
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 3658
   }
   if ((HEAP32[1973] | 0) == ($11 | 0)) {
    $101 = $2 + 4 | 0; //@line 3664
    $102 = HEAP32[$101 >> 2] | 0; //@line 3665
    if (($102 & 3 | 0) != 3) {
     $$1 = $11; //@line 3669
     $$1418 = $12; //@line 3669
     break;
    }
    HEAP32[1970] = $12; //@line 3672
    HEAP32[$101 >> 2] = $102 & -2; //@line 3674
    HEAP32[$11 + 4 >> 2] = $12 | 1; //@line 3677
    HEAP32[$2 >> 2] = $12; //@line 3678
    return;
   }
   $17 = $7 >>> 3; //@line 3681
   if ($7 >>> 0 < 256) {
    $20 = HEAP32[$11 + 8 >> 2] | 0; //@line 3685
    $22 = HEAP32[$11 + 12 >> 2] | 0; //@line 3687
    $24 = 7912 + ($17 << 1 << 2) | 0; //@line 3689
    if (($20 | 0) != ($24 | 0)) {
     if ($13 >>> 0 > $20 >>> 0) {
      _abort(); //@line 3694
     }
     if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3701
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     HEAP32[1968] = HEAP32[1968] & ~(1 << $17); //@line 3711
     $$1 = $11; //@line 3712
     $$1418 = $12; //@line 3712
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi25Z2D = $22 + 8 | 0; //@line 3718
    } else {
     if ($13 >>> 0 > $22 >>> 0) {
      _abort(); //@line 3722
     }
     $37 = $22 + 8 | 0; //@line 3725
     if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) {
      $$pre$phi25Z2D = $37; //@line 3729
     } else {
      _abort(); //@line 3731
     }
    }
    HEAP32[$20 + 12 >> 2] = $22; //@line 3736
    HEAP32[$$pre$phi25Z2D >> 2] = $20; //@line 3737
    $$1 = $11; //@line 3738
    $$1418 = $12; //@line 3738
    break;
   }
   $42 = HEAP32[$11 + 24 >> 2] | 0; //@line 3742
   $44 = HEAP32[$11 + 12 >> 2] | 0; //@line 3744
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 3748
     $56 = $55 + 4 | 0; //@line 3749
     $57 = HEAP32[$56 >> 2] | 0; //@line 3750
     if (!$57) {
      $59 = HEAP32[$55 >> 2] | 0; //@line 3753
      if (!$59) {
       $$3 = 0; //@line 3756
       break;
      } else {
       $$1426 = $59; //@line 3759
       $$1429 = $55; //@line 3759
      }
     } else {
      $$1426 = $57; //@line 3762
      $$1429 = $56; //@line 3762
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 3765
      $62 = HEAP32[$61 >> 2] | 0; //@line 3766
      if ($62 | 0) {
       $$1426 = $62; //@line 3769
       $$1429 = $61; //@line 3769
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 3772
      $65 = HEAP32[$64 >> 2] | 0; //@line 3773
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 3778
       $$1429 = $64; //@line 3778
      }
     }
     if ($13 >>> 0 > $$1429 >>> 0) {
      _abort(); //@line 3783
     } else {
      HEAP32[$$1429 >> 2] = 0; //@line 3786
      $$3 = $$1426; //@line 3787
      break;
     }
    } else {
     $47 = HEAP32[$11 + 8 >> 2] | 0; //@line 3792
     if ($13 >>> 0 > $47 >>> 0) {
      _abort(); //@line 3795
     }
     $49 = $47 + 12 | 0; //@line 3798
     if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3802
     }
     $52 = $44 + 8 | 0; //@line 3805
     if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$49 >> 2] = $44; //@line 3809
      HEAP32[$52 >> 2] = $47; //@line 3810
      $$3 = $44; //@line 3811
      break;
     } else {
      _abort(); //@line 3814
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 3821
    $$1418 = $12; //@line 3821
   } else {
    $70 = HEAP32[$11 + 28 >> 2] | 0; //@line 3824
    $71 = 8176 + ($70 << 2) | 0; //@line 3825
    do {
     if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$71 >> 2] = $$3; //@line 3830
      if (!$$3) {
       HEAP32[1969] = HEAP32[1969] & ~(1 << $70); //@line 3837
       $$1 = $11; //@line 3838
       $$1418 = $12; //@line 3838
       break L1;
      }
     } else {
      if ((HEAP32[1972] | 0) >>> 0 > $42 >>> 0) {
       _abort(); //@line 3845
      } else {
       HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3; //@line 3853
       if (!$$3) {
        $$1 = $11; //@line 3856
        $$1418 = $12; //@line 3856
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $85 = HEAP32[1972] | 0; //@line 3864
    if ($85 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3867
    }
    HEAP32[$$3 + 24 >> 2] = $42; //@line 3871
    $88 = $11 + 16 | 0; //@line 3872
    $89 = HEAP32[$88 >> 2] | 0; //@line 3873
    do {
     if ($89 | 0) {
      if ($85 >>> 0 > $89 >>> 0) {
       _abort(); //@line 3879
      } else {
       HEAP32[$$3 + 16 >> 2] = $89; //@line 3883
       HEAP32[$89 + 24 >> 2] = $$3; //@line 3885
       break;
      }
     }
    } while (0);
    $95 = HEAP32[$88 + 4 >> 2] | 0; //@line 3891
    if (!$95) {
     $$1 = $11; //@line 3894
     $$1418 = $12; //@line 3894
    } else {
     if ((HEAP32[1972] | 0) >>> 0 > $95 >>> 0) {
      _abort(); //@line 3899
     } else {
      HEAP32[$$3 + 20 >> 2] = $95; //@line 3903
      HEAP32[$95 + 24 >> 2] = $$3; //@line 3905
      $$1 = $11; //@line 3906
      $$1418 = $12; //@line 3906
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 3912
   $$1418 = $1; //@line 3912
  }
 } while (0);
 $108 = HEAP32[1972] | 0; //@line 3915
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 3918
 }
 $110 = $2 + 4 | 0; //@line 3921
 $111 = HEAP32[$110 >> 2] | 0; //@line 3922
 if (!($111 & 2)) {
  if ((HEAP32[1974] | 0) == ($2 | 0)) {
   $117 = (HEAP32[1971] | 0) + $$1418 | 0; //@line 3930
   HEAP32[1971] = $117; //@line 3931
   HEAP32[1974] = $$1; //@line 3932
   HEAP32[$$1 + 4 >> 2] = $117 | 1; //@line 3935
   if (($$1 | 0) != (HEAP32[1973] | 0)) {
    return;
   }
   HEAP32[1973] = 0; //@line 3941
   HEAP32[1970] = 0; //@line 3942
   return;
  }
  if ((HEAP32[1973] | 0) == ($2 | 0)) {
   $125 = (HEAP32[1970] | 0) + $$1418 | 0; //@line 3949
   HEAP32[1970] = $125; //@line 3950
   HEAP32[1973] = $$1; //@line 3951
   HEAP32[$$1 + 4 >> 2] = $125 | 1; //@line 3954
   HEAP32[$$1 + $125 >> 2] = $125; //@line 3956
   return;
  }
  $130 = ($111 & -8) + $$1418 | 0; //@line 3960
  $131 = $111 >>> 3; //@line 3961
  L96 : do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$2 + 8 >> 2] | 0; //@line 3966
    $136 = HEAP32[$2 + 12 >> 2] | 0; //@line 3968
    $138 = 7912 + ($131 << 1 << 2) | 0; //@line 3970
    if (($134 | 0) != ($138 | 0)) {
     if ($108 >>> 0 > $134 >>> 0) {
      _abort(); //@line 3975
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) {
      _abort(); //@line 3982
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[1968] = HEAP32[1968] & ~(1 << $131); //@line 3992
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi23Z2D = $136 + 8 | 0; //@line 3998
    } else {
     if ($108 >>> 0 > $136 >>> 0) {
      _abort(); //@line 4002
     }
     $151 = $136 + 8 | 0; //@line 4005
     if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) {
      $$pre$phi23Z2D = $151; //@line 4009
     } else {
      _abort(); //@line 4011
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 4016
    HEAP32[$$pre$phi23Z2D >> 2] = $134; //@line 4017
   } else {
    $156 = HEAP32[$2 + 24 >> 2] | 0; //@line 4020
    $158 = HEAP32[$2 + 12 >> 2] | 0; //@line 4022
    do {
     if (($158 | 0) == ($2 | 0)) {
      $169 = $2 + 16 | 0; //@line 4026
      $170 = $169 + 4 | 0; //@line 4027
      $171 = HEAP32[$170 >> 2] | 0; //@line 4028
      if (!$171) {
       $173 = HEAP32[$169 >> 2] | 0; //@line 4031
       if (!$173) {
        $$3435 = 0; //@line 4034
        break;
       } else {
        $$1433 = $173; //@line 4037
        $$1437 = $169; //@line 4037
       }
      } else {
       $$1433 = $171; //@line 4040
       $$1437 = $170; //@line 4040
      }
      while (1) {
       $175 = $$1433 + 20 | 0; //@line 4043
       $176 = HEAP32[$175 >> 2] | 0; //@line 4044
       if ($176 | 0) {
        $$1433 = $176; //@line 4047
        $$1437 = $175; //@line 4047
        continue;
       }
       $178 = $$1433 + 16 | 0; //@line 4050
       $179 = HEAP32[$178 >> 2] | 0; //@line 4051
       if (!$179) {
        break;
       } else {
        $$1433 = $179; //@line 4056
        $$1437 = $178; //@line 4056
       }
      }
      if ($108 >>> 0 > $$1437 >>> 0) {
       _abort(); //@line 4061
      } else {
       HEAP32[$$1437 >> 2] = 0; //@line 4064
       $$3435 = $$1433; //@line 4065
       break;
      }
     } else {
      $161 = HEAP32[$2 + 8 >> 2] | 0; //@line 4070
      if ($108 >>> 0 > $161 >>> 0) {
       _abort(); //@line 4073
      }
      $163 = $161 + 12 | 0; //@line 4076
      if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) {
       _abort(); //@line 4080
      }
      $166 = $158 + 8 | 0; //@line 4083
      if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 4087
       HEAP32[$166 >> 2] = $161; //@line 4088
       $$3435 = $158; //@line 4089
       break;
      } else {
       _abort(); //@line 4092
      }
     }
    } while (0);
    if ($156 | 0) {
     $184 = HEAP32[$2 + 28 >> 2] | 0; //@line 4100
     $185 = 8176 + ($184 << 2) | 0; //@line 4101
     do {
      if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$185 >> 2] = $$3435; //@line 4106
       if (!$$3435) {
        HEAP32[1969] = HEAP32[1969] & ~(1 << $184); //@line 4113
        break L96;
       }
      } else {
       if ((HEAP32[1972] | 0) >>> 0 > $156 >>> 0) {
        _abort(); //@line 4120
       } else {
        HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435; //@line 4128
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $199 = HEAP32[1972] | 0; //@line 4138
     if ($199 >>> 0 > $$3435 >>> 0) {
      _abort(); //@line 4141
     }
     HEAP32[$$3435 + 24 >> 2] = $156; //@line 4145
     $202 = $2 + 16 | 0; //@line 4146
     $203 = HEAP32[$202 >> 2] | 0; //@line 4147
     do {
      if ($203 | 0) {
       if ($199 >>> 0 > $203 >>> 0) {
        _abort(); //@line 4153
       } else {
        HEAP32[$$3435 + 16 >> 2] = $203; //@line 4157
        HEAP32[$203 + 24 >> 2] = $$3435; //@line 4159
        break;
       }
      }
     } while (0);
     $209 = HEAP32[$202 + 4 >> 2] | 0; //@line 4165
     if ($209 | 0) {
      if ((HEAP32[1972] | 0) >>> 0 > $209 >>> 0) {
       _abort(); //@line 4171
      } else {
       HEAP32[$$3435 + 20 >> 2] = $209; //@line 4175
       HEAP32[$209 + 24 >> 2] = $$3435; //@line 4177
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1; //@line 4186
  HEAP32[$$1 + $130 >> 2] = $130; //@line 4188
  if (($$1 | 0) == (HEAP32[1973] | 0)) {
   HEAP32[1970] = $130; //@line 4192
   return;
  } else {
   $$2 = $130; //@line 4195
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 4199
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1; //@line 4202
  HEAP32[$$1 + $$1418 >> 2] = $$1418; //@line 4204
  $$2 = $$1418; //@line 4205
 }
 $224 = $$2 >>> 3; //@line 4207
 if ($$2 >>> 0 < 256) {
  $227 = 7912 + ($224 << 1 << 2) | 0; //@line 4211
  $228 = HEAP32[1968] | 0; //@line 4212
  $229 = 1 << $224; //@line 4213
  if (!($228 & $229)) {
   HEAP32[1968] = $228 | $229; //@line 4218
   $$0438 = $227; //@line 4220
   $$pre$phiZ2D = $227 + 8 | 0; //@line 4220
  } else {
   $233 = $227 + 8 | 0; //@line 4222
   $234 = HEAP32[$233 >> 2] | 0; //@line 4223
   if ((HEAP32[1972] | 0) >>> 0 > $234 >>> 0) {
    _abort(); //@line 4227
   } else {
    $$0438 = $234; //@line 4230
    $$pre$phiZ2D = $233; //@line 4230
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 4233
  HEAP32[$$0438 + 12 >> 2] = $$1; //@line 4235
  HEAP32[$$1 + 8 >> 2] = $$0438; //@line 4237
  HEAP32[$$1 + 12 >> 2] = $227; //@line 4239
  return;
 }
 $240 = $$2 >>> 8; //@line 4242
 if (!$240) {
  $$0431 = 0; //@line 4245
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 4249
  } else {
   $245 = ($240 + 1048320 | 0) >>> 16 & 8; //@line 4253
   $246 = $240 << $245; //@line 4254
   $249 = ($246 + 520192 | 0) >>> 16 & 4; //@line 4257
   $251 = $246 << $249; //@line 4259
   $254 = ($251 + 245760 | 0) >>> 16 & 2; //@line 4262
   $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0; //@line 4267
   $$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1; //@line 4273
  }
 }
 $265 = 8176 + ($$0431 << 2) | 0; //@line 4276
 HEAP32[$$1 + 28 >> 2] = $$0431; //@line 4278
 HEAP32[$$1 + 20 >> 2] = 0; //@line 4281
 HEAP32[$$1 + 16 >> 2] = 0; //@line 4282
 $269 = HEAP32[1969] | 0; //@line 4283
 $270 = 1 << $$0431; //@line 4284
 if (!($269 & $270)) {
  HEAP32[1969] = $269 | $270; //@line 4289
  HEAP32[$265 >> 2] = $$1; //@line 4290
  HEAP32[$$1 + 24 >> 2] = $265; //@line 4292
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4294
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4296
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 4305
 $$0420 = HEAP32[$265 >> 2] | 0; //@line 4305
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 4312
   break;
  }
  $288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 4316
  $290 = HEAP32[$288 >> 2] | 0; //@line 4318
  if (!$290) {
   label = 118; //@line 4321
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 4324
   $$0420 = $290; //@line 4324
  }
 }
 if ((label | 0) == 118) {
  if ((HEAP32[1972] | 0) >>> 0 > $288 >>> 0) {
   _abort(); //@line 4331
  }
  HEAP32[$288 >> 2] = $$1; //@line 4334
  HEAP32[$$1 + 24 >> 2] = $$0420; //@line 4336
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4338
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4340
  return;
 } else if ((label | 0) == 121) {
  $297 = $$0420 + 8 | 0; //@line 4344
  $298 = HEAP32[$297 >> 2] | 0; //@line 4345
  $299 = HEAP32[1972] | 0; //@line 4346
  if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) {
   _abort(); //@line 4351
  }
  HEAP32[$298 + 12 >> 2] = $$1; //@line 4355
  HEAP32[$297 >> 2] = $$1; //@line 4356
  HEAP32[$$1 + 8 >> 2] = $298; //@line 4358
  HEAP32[$$1 + 12 >> 2] = $$0420; //@line 4360
  HEAP32[$$1 + 24 >> 2] = 0; //@line 4362
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_72($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $12 = 0, $120 = 0, $122 = 0, $130 = 0, $133 = 0, $135 = 0, $14 = 0, $143 = 0, $146 = 0, $148 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $54 = 0, $55 = 0, $6 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $97 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 21756
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21758
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21760
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21762
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21764
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21766
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21768
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21770
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21772
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21774
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21776
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21778
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21780
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21782
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21784
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21786
 $31 = $20 + 12 | 0; //@line 21787
 $32 = HEAP32[$31 >> 2] | 0; //@line 21788
 if ($32 | 0) {
  $35 = HEAP32[$32 + 4 >> 2] | 0; //@line 21792
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(64) | 0; //@line 21793
  FUNCTION_TABLE_vii[$35 & 7]($12, $20); //@line 21794
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 21797
   $36 = $ReallocAsyncCtx5 + 4 | 0; //@line 21798
   HEAP32[$36 >> 2] = $2; //@line 21799
   $37 = $ReallocAsyncCtx5 + 8 | 0; //@line 21800
   HEAP32[$37 >> 2] = $4; //@line 21801
   $38 = $ReallocAsyncCtx5 + 12 | 0; //@line 21802
   HEAP32[$38 >> 2] = $6; //@line 21803
   $39 = $ReallocAsyncCtx5 + 16 | 0; //@line 21804
   HEAP32[$39 >> 2] = $8; //@line 21805
   $40 = $ReallocAsyncCtx5 + 20 | 0; //@line 21806
   HEAP32[$40 >> 2] = $10; //@line 21807
   $41 = $ReallocAsyncCtx5 + 24 | 0; //@line 21808
   HEAP32[$41 >> 2] = $12; //@line 21809
   $42 = $ReallocAsyncCtx5 + 28 | 0; //@line 21810
   HEAP32[$42 >> 2] = $14; //@line 21811
   $43 = $ReallocAsyncCtx5 + 32 | 0; //@line 21812
   HEAP32[$43 >> 2] = $31; //@line 21813
   $44 = $ReallocAsyncCtx5 + 36 | 0; //@line 21814
   HEAP32[$44 >> 2] = $16; //@line 21815
   $45 = $ReallocAsyncCtx5 + 40 | 0; //@line 21816
   HEAP32[$45 >> 2] = $18; //@line 21817
   $46 = $ReallocAsyncCtx5 + 44 | 0; //@line 21818
   HEAP32[$46 >> 2] = $22; //@line 21819
   $47 = $ReallocAsyncCtx5 + 48 | 0; //@line 21820
   HEAP32[$47 >> 2] = $24; //@line 21821
   $48 = $ReallocAsyncCtx5 + 52 | 0; //@line 21822
   HEAP32[$48 >> 2] = $26; //@line 21823
   $49 = $ReallocAsyncCtx5 + 56 | 0; //@line 21824
   HEAP32[$49 >> 2] = $28; //@line 21825
   $50 = $ReallocAsyncCtx5 + 60 | 0; //@line 21826
   HEAP32[$50 >> 2] = $30; //@line 21827
   sp = STACKTOP; //@line 21828
   return;
  }
  ___async_unwind = 0; //@line 21831
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 21832
  $36 = $ReallocAsyncCtx5 + 4 | 0; //@line 21833
  HEAP32[$36 >> 2] = $2; //@line 21834
  $37 = $ReallocAsyncCtx5 + 8 | 0; //@line 21835
  HEAP32[$37 >> 2] = $4; //@line 21836
  $38 = $ReallocAsyncCtx5 + 12 | 0; //@line 21837
  HEAP32[$38 >> 2] = $6; //@line 21838
  $39 = $ReallocAsyncCtx5 + 16 | 0; //@line 21839
  HEAP32[$39 >> 2] = $8; //@line 21840
  $40 = $ReallocAsyncCtx5 + 20 | 0; //@line 21841
  HEAP32[$40 >> 2] = $10; //@line 21842
  $41 = $ReallocAsyncCtx5 + 24 | 0; //@line 21843
  HEAP32[$41 >> 2] = $12; //@line 21844
  $42 = $ReallocAsyncCtx5 + 28 | 0; //@line 21845
  HEAP32[$42 >> 2] = $14; //@line 21846
  $43 = $ReallocAsyncCtx5 + 32 | 0; //@line 21847
  HEAP32[$43 >> 2] = $31; //@line 21848
  $44 = $ReallocAsyncCtx5 + 36 | 0; //@line 21849
  HEAP32[$44 >> 2] = $16; //@line 21850
  $45 = $ReallocAsyncCtx5 + 40 | 0; //@line 21851
  HEAP32[$45 >> 2] = $18; //@line 21852
  $46 = $ReallocAsyncCtx5 + 44 | 0; //@line 21853
  HEAP32[$46 >> 2] = $22; //@line 21854
  $47 = $ReallocAsyncCtx5 + 48 | 0; //@line 21855
  HEAP32[$47 >> 2] = $24; //@line 21856
  $48 = $ReallocAsyncCtx5 + 52 | 0; //@line 21857
  HEAP32[$48 >> 2] = $26; //@line 21858
  $49 = $ReallocAsyncCtx5 + 56 | 0; //@line 21859
  HEAP32[$49 >> 2] = $28; //@line 21860
  $50 = $ReallocAsyncCtx5 + 60 | 0; //@line 21861
  HEAP32[$50 >> 2] = $30; //@line 21862
  sp = STACKTOP; //@line 21863
  return;
 }
 HEAP32[$26 >> 2] = 0; //@line 21866
 HEAP32[$6 + 8 >> 2] = $14; //@line 21868
 HEAP32[$6 + 48 >> 2] = $22; //@line 21870
 HEAP32[$6 + 52 >> 2] = $24; //@line 21872
 $54 = $6 + 56 | 0; //@line 21873
 HEAP32[$54 >> 2] = 0; //@line 21874
 $55 = $6 + 60 | 0; //@line 21875
 HEAP32[$55 >> 2] = 0; //@line 21876
 HEAP32[$6 + 64 >> 2] = 0; //@line 21878
 HEAP8[$6 + 82 >> 0] = 0; //@line 21880
 HEAP8[$6 + 83 >> 0] = 1; //@line 21882
 HEAP8[$6 + 84 >> 0] = 3; //@line 21884
 HEAP16[$6 + 80 >> 1] = 0; //@line 21886
 HEAP32[$6 + 76 >> 2] = 0; //@line 21888
 $62 = $6 + 72 | 0; //@line 21889
 HEAP32[$62 >> 2] = 15500; //@line 21890
 $63 = HEAP32[187] | 0; //@line 21891
 HEAP32[187] = $63 + 1; //@line 21893
 $$ = ($63 | 0) > 32767 ? 1 : $63; //@line 21895
 HEAP32[$6 >> 2] = $$; //@line 21896
 $66 = HEAP32[1960] | 0; //@line 21897
 if (!$66) {
  $$1 = 0; //@line 21900
  $120 = 0; //@line 21900
 } else {
  $69 = HEAP32[$66 + 56 >> 2] | 0; //@line 21903
  if (!$69) {
   $$1 = 1; //@line 21906
   $120 = 0; //@line 21906
  } else {
   if ((HEAP32[$66 + 8 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$54 >> 2] = $69; //@line 21912
    HEAP32[$55 >> 2] = HEAP32[$66 + 60 >> 2]; //@line 21915
    $$1 = 1; //@line 21916
    $120 = $69; //@line 21916
   } else {
    $$1 = 1; //@line 21918
    $120 = 0; //@line 21918
   }
  }
 }
 $76 = HEAP32[1961] | 0; //@line 21922
 if (!$76) {
  $$1$1 = $$1; //@line 21925
  $133 = $120; //@line 21925
 } else {
  if (!$120) {
   $122 = HEAP32[$76 + 56 >> 2] | 0; //@line 21930
   if (!$122) {
    $175 = 0; //@line 21933
   } else {
    if ((HEAP32[$76 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$54 >> 2] = $122; //@line 21939
     HEAP32[$55 >> 2] = HEAP32[$76 + 60 >> 2]; //@line 21942
     $175 = $122; //@line 21943
    } else {
     $175 = 0; //@line 21945
    }
   }
  } else {
   $175 = $120; //@line 21949
  }
  $$1$1 = $$1 + 1 | 0; //@line 21952
  $133 = $175; //@line 21952
 }
 $130 = HEAP32[1962] | 0; //@line 21954
 if (!$130) {
  $$1$2 = $$1$1; //@line 21957
  $146 = $133; //@line 21957
 } else {
  if (!$133) {
   $135 = HEAP32[$130 + 56 >> 2] | 0; //@line 21962
   if (!$135) {
    $176 = 0; //@line 21965
   } else {
    if ((HEAP32[$130 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$54 >> 2] = $135; //@line 21971
     HEAP32[$55 >> 2] = HEAP32[$130 + 60 >> 2]; //@line 21974
     $176 = $135; //@line 21975
    } else {
     $176 = 0; //@line 21977
    }
   }
  } else {
   $176 = $133; //@line 21981
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 21984
  $146 = $176; //@line 21984
 }
 $143 = HEAP32[1963] | 0; //@line 21986
 if (!$143) {
  $$1$3 = $$1$2; //@line 21989
  $159 = $146; //@line 21989
 } else {
  if (!$146) {
   $148 = HEAP32[$143 + 56 >> 2] | 0; //@line 21994
   if (!$148) {
    $177 = 0; //@line 21997
   } else {
    if ((HEAP32[$143 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$54 >> 2] = $148; //@line 22003
     HEAP32[$55 >> 2] = HEAP32[$143 + 60 >> 2]; //@line 22006
     $177 = $148; //@line 22007
    } else {
     $177 = 0; //@line 22009
    }
   }
  } else {
   $177 = $146; //@line 22013
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 22016
  $159 = $177; //@line 22016
 }
 $156 = HEAP32[1964] | 0; //@line 22018
 if (!$156) {
  HEAP32[7840 + ($10 << 2) >> 2] = $6; //@line 22022
  HEAP32[$62 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 22025
  if (!$$1$3) {
   $78 = $6 + 44 | 0; //@line 22028
   $79 = HEAP32[$78 >> 2] | 0; //@line 22029
   if (!$79) {
    $95 = $2 + 12 | 0; //@line 22032
    HEAP32[$95 >> 2] = 0; //@line 22033
    $97 = $18 + 4 | 0; //@line 22035
    HEAP32[$97 >> 2] = 0; //@line 22037
    HEAP32[$97 + 4 >> 2] = 0; //@line 22040
    HEAP32[$18 >> 2] = 3; //@line 22041
    $101 = $18 + 12 | 0; //@line 22042
    HEAP32[$101 >> 2] = 752; //@line 22043
    $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 22044
    $102 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $18) | 0; //@line 22045
    if (___async) {
     HEAP32[$ReallocAsyncCtx19 >> 2] = 179; //@line 22048
     $103 = $ReallocAsyncCtx19 + 4 | 0; //@line 22049
     HEAP32[$103 >> 2] = $2; //@line 22050
     $104 = $ReallocAsyncCtx19 + 8 | 0; //@line 22051
     HEAP32[$104 >> 2] = $6; //@line 22052
     $105 = $ReallocAsyncCtx19 + 12 | 0; //@line 22053
     HEAP32[$105 >> 2] = $4; //@line 22054
     $106 = $ReallocAsyncCtx19 + 16 | 0; //@line 22055
     HEAP32[$106 >> 2] = $8; //@line 22056
     $107 = $ReallocAsyncCtx19 + 20 | 0; //@line 22057
     HEAP32[$107 >> 2] = $12; //@line 22058
     $108 = $ReallocAsyncCtx19 + 24 | 0; //@line 22059
     HEAP32[$108 >> 2] = $78; //@line 22060
     $109 = $ReallocAsyncCtx19 + 28 | 0; //@line 22061
     HEAP32[$109 >> 2] = $30; //@line 22062
     $110 = $ReallocAsyncCtx19 + 32 | 0; //@line 22063
     HEAP32[$110 >> 2] = $6; //@line 22064
     $111 = $ReallocAsyncCtx19 + 36 | 0; //@line 22065
     HEAP32[$111 >> 2] = $78; //@line 22066
     $112 = $ReallocAsyncCtx19 + 40 | 0; //@line 22067
     HEAP32[$112 >> 2] = $16; //@line 22068
     $113 = $ReallocAsyncCtx19 + 44 | 0; //@line 22069
     HEAP32[$113 >> 2] = $95; //@line 22070
     $114 = $ReallocAsyncCtx19 + 48 | 0; //@line 22071
     HEAP32[$114 >> 2] = $28; //@line 22072
     $115 = $ReallocAsyncCtx19 + 52 | 0; //@line 22073
     HEAP32[$115 >> 2] = $18; //@line 22074
     $116 = $ReallocAsyncCtx19 + 56 | 0; //@line 22075
     HEAP32[$116 >> 2] = $101; //@line 22076
     sp = STACKTOP; //@line 22077
     return;
    }
    HEAP32[___async_retval >> 2] = $102; //@line 22081
    ___async_unwind = 0; //@line 22082
    HEAP32[$ReallocAsyncCtx19 >> 2] = 179; //@line 22083
    $103 = $ReallocAsyncCtx19 + 4 | 0; //@line 22084
    HEAP32[$103 >> 2] = $2; //@line 22085
    $104 = $ReallocAsyncCtx19 + 8 | 0; //@line 22086
    HEAP32[$104 >> 2] = $6; //@line 22087
    $105 = $ReallocAsyncCtx19 + 12 | 0; //@line 22088
    HEAP32[$105 >> 2] = $4; //@line 22089
    $106 = $ReallocAsyncCtx19 + 16 | 0; //@line 22090
    HEAP32[$106 >> 2] = $8; //@line 22091
    $107 = $ReallocAsyncCtx19 + 20 | 0; //@line 22092
    HEAP32[$107 >> 2] = $12; //@line 22093
    $108 = $ReallocAsyncCtx19 + 24 | 0; //@line 22094
    HEAP32[$108 >> 2] = $78; //@line 22095
    $109 = $ReallocAsyncCtx19 + 28 | 0; //@line 22096
    HEAP32[$109 >> 2] = $30; //@line 22097
    $110 = $ReallocAsyncCtx19 + 32 | 0; //@line 22098
    HEAP32[$110 >> 2] = $6; //@line 22099
    $111 = $ReallocAsyncCtx19 + 36 | 0; //@line 22100
    HEAP32[$111 >> 2] = $78; //@line 22101
    $112 = $ReallocAsyncCtx19 + 40 | 0; //@line 22102
    HEAP32[$112 >> 2] = $16; //@line 22103
    $113 = $ReallocAsyncCtx19 + 44 | 0; //@line 22104
    HEAP32[$113 >> 2] = $95; //@line 22105
    $114 = $ReallocAsyncCtx19 + 48 | 0; //@line 22106
    HEAP32[$114 >> 2] = $28; //@line 22107
    $115 = $ReallocAsyncCtx19 + 52 | 0; //@line 22108
    HEAP32[$115 >> 2] = $18; //@line 22109
    $116 = $ReallocAsyncCtx19 + 56 | 0; //@line 22110
    HEAP32[$116 >> 2] = $101; //@line 22111
    sp = STACKTOP; //@line 22112
    return;
   } else {
    $82 = HEAP32[$79 + 4 >> 2] | 0; //@line 22116
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(52) | 0; //@line 22117
    FUNCTION_TABLE_vii[$82 & 7]($2, $12); //@line 22118
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 22121
     $83 = $ReallocAsyncCtx6 + 4 | 0; //@line 22122
     HEAP32[$83 >> 2] = $2; //@line 22123
     $84 = $ReallocAsyncCtx6 + 8 | 0; //@line 22124
     HEAP32[$84 >> 2] = $6; //@line 22125
     $85 = $ReallocAsyncCtx6 + 12 | 0; //@line 22126
     HEAP32[$85 >> 2] = $4; //@line 22127
     $86 = $ReallocAsyncCtx6 + 16 | 0; //@line 22128
     HEAP32[$86 >> 2] = $8; //@line 22129
     $87 = $ReallocAsyncCtx6 + 20 | 0; //@line 22130
     HEAP32[$87 >> 2] = $12; //@line 22131
     $88 = $ReallocAsyncCtx6 + 24 | 0; //@line 22132
     HEAP32[$88 >> 2] = $78; //@line 22133
     $89 = $ReallocAsyncCtx6 + 28 | 0; //@line 22134
     HEAP32[$89 >> 2] = $6; //@line 22135
     $90 = $ReallocAsyncCtx6 + 32 | 0; //@line 22136
     HEAP32[$90 >> 2] = $78; //@line 22137
     $91 = $ReallocAsyncCtx6 + 36 | 0; //@line 22138
     HEAP32[$91 >> 2] = $16; //@line 22139
     $92 = $ReallocAsyncCtx6 + 40 | 0; //@line 22140
     HEAP32[$92 >> 2] = $18; //@line 22141
     $93 = $ReallocAsyncCtx6 + 44 | 0; //@line 22142
     HEAP32[$93 >> 2] = $28; //@line 22143
     $94 = $ReallocAsyncCtx6 + 48 | 0; //@line 22144
     HEAP32[$94 >> 2] = $30; //@line 22145
     sp = STACKTOP; //@line 22146
     return;
    }
    ___async_unwind = 0; //@line 22149
    HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 22150
    $83 = $ReallocAsyncCtx6 + 4 | 0; //@line 22151
    HEAP32[$83 >> 2] = $2; //@line 22152
    $84 = $ReallocAsyncCtx6 + 8 | 0; //@line 22153
    HEAP32[$84 >> 2] = $6; //@line 22154
    $85 = $ReallocAsyncCtx6 + 12 | 0; //@line 22155
    HEAP32[$85 >> 2] = $4; //@line 22156
    $86 = $ReallocAsyncCtx6 + 16 | 0; //@line 22157
    HEAP32[$86 >> 2] = $8; //@line 22158
    $87 = $ReallocAsyncCtx6 + 20 | 0; //@line 22159
    HEAP32[$87 >> 2] = $12; //@line 22160
    $88 = $ReallocAsyncCtx6 + 24 | 0; //@line 22161
    HEAP32[$88 >> 2] = $78; //@line 22162
    $89 = $ReallocAsyncCtx6 + 28 | 0; //@line 22163
    HEAP32[$89 >> 2] = $6; //@line 22164
    $90 = $ReallocAsyncCtx6 + 32 | 0; //@line 22165
    HEAP32[$90 >> 2] = $78; //@line 22166
    $91 = $ReallocAsyncCtx6 + 36 | 0; //@line 22167
    HEAP32[$91 >> 2] = $16; //@line 22168
    $92 = $ReallocAsyncCtx6 + 40 | 0; //@line 22169
    HEAP32[$92 >> 2] = $18; //@line 22170
    $93 = $ReallocAsyncCtx6 + 44 | 0; //@line 22171
    HEAP32[$93 >> 2] = $28; //@line 22172
    $94 = $ReallocAsyncCtx6 + 48 | 0; //@line 22173
    HEAP32[$94 >> 2] = $30; //@line 22174
    sp = STACKTOP; //@line 22175
    return;
   }
  }
 } else {
  if (!$159) {
   $161 = HEAP32[$156 + 56 >> 2] | 0; //@line 22183
   if ($161 | 0) {
    if ((HEAP32[$156 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$54 >> 2] = $161; //@line 22190
     HEAP32[$55 >> 2] = HEAP32[$156 + 60 >> 2]; //@line 22193
    }
   }
  }
  HEAP32[7840 + ($10 << 2) >> 2] = $6; //@line 22198
  HEAP32[$62 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 22201
 }
 HEAP32[___async_retval >> 2] = $$; //@line 22204
 return;
}
function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $263 = 0, $265 = 0, $275 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do {
  if ($1 >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 6940
   $289 = 0; //@line 6941
   $290 = 0; //@line 6941
  } else {
   $6 = $0 + 4 | 0; //@line 6943
   $7 = $0 + 100 | 0; //@line 6944
   do {
    $9 = HEAP32[$6 >> 2] | 0; //@line 6946
    if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $9 + 1; //@line 6951
     $16 = HEAPU8[$9 >> 0] | 0; //@line 6954
    } else {
     $16 = ___shgetc($0) | 0; //@line 6957
    }
   } while ((_isspace($16) | 0) != 0);
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $20 = (($16 | 0) == 45) << 31 >> 31; //@line 6969
      $21 = HEAP32[$6 >> 2] | 0; //@line 6970
      if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $21 + 1; //@line 6975
       $$0157 = $20; //@line 6978
       $$0159 = HEAPU8[$21 >> 0] | 0; //@line 6978
       break L11;
      } else {
       $$0157 = $20; //@line 6982
       $$0159 = ___shgetc($0) | 0; //@line 6982
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0; //@line 6988
      $$0159 = $16; //@line 6988
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0; //@line 6992
   do {
    if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
     $32 = HEAP32[$6 >> 2] | 0; //@line 6999
     if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $32 + 1; //@line 7004
      $40 = HEAPU8[$32 >> 0] | 0; //@line 7007
     } else {
      $40 = ___shgetc($0) | 0; //@line 7010
     }
     if (($40 | 32 | 0) != 120) {
      if ($28) {
       $$1160169 = $40; //@line 7016
       $$1165167 = 8; //@line 7016
       label = 46; //@line 7017
       break;
      } else {
       $$1160 = $40; //@line 7020
       $$1165 = $1; //@line 7020
       label = 32; //@line 7021
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0; //@line 7025
     if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $42 + 1; //@line 7030
      $50 = HEAPU8[$42 >> 0] | 0; //@line 7033
     } else {
      $50 = ___shgetc($0) | 0; //@line 7036
     }
     if ((HEAPU8[4329 + $50 >> 0] | 0) > 15) {
      $54 = (HEAP32[$7 >> 2] | 0) == 0; //@line 7043
      if (!$54) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7047
      }
      if (!$2) {
       ___shlim($0, 0); //@line 7051
       $289 = 0; //@line 7052
       $290 = 0; //@line 7052
       break L1;
      }
      if ($54) {
       $289 = 0; //@line 7056
       $290 = 0; //@line 7056
       break L1;
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7061
      $289 = 0; //@line 7062
      $290 = 0; //@line 7062
      break L1;
     } else {
      $$1160169 = $50; //@line 7065
      $$1165167 = 16; //@line 7065
      label = 46; //@line 7066
     }
    } else {
     $$166 = $28 ? 10 : $1; //@line 7069
     if ($$166 >>> 0 > (HEAPU8[4329 + $$0159 >> 0] | 0) >>> 0) {
      $$1160 = $$0159; //@line 7075
      $$1165 = $$166; //@line 7075
      label = 32; //@line 7076
     } else {
      if (HEAP32[$7 >> 2] | 0) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7083
      }
      ___shlim($0, 0); //@line 7085
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7087
      $289 = 0; //@line 7088
      $290 = 0; //@line 7088
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     if (($$1165 | 0) == 10) {
      $70 = $$1160 + -48 | 0; //@line 7097
      if ($70 >>> 0 < 10) {
       $$0154222 = 0; //@line 7100
       $74 = $70; //@line 7100
       do {
        $$0154222 = ($$0154222 * 10 | 0) + $74 | 0; //@line 7103
        $75 = HEAP32[$6 >> 2] | 0; //@line 7104
        if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $75 + 1; //@line 7109
         $$2161$be = HEAPU8[$75 >> 0] | 0; //@line 7112
        } else {
         $$2161$be = ___shgetc($0) | 0; //@line 7115
        }
        $74 = $$2161$be + -48 | 0; //@line 7117
       } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
       $$2161$lcssa = $$2161$be; //@line 7127
       $291 = $$0154222; //@line 7127
       $292 = 0; //@line 7127
      } else {
       $$2161$lcssa = $$1160; //@line 7129
       $291 = 0; //@line 7129
       $292 = 0; //@line 7129
      }
      $86 = $$2161$lcssa + -48 | 0; //@line 7131
      if ($86 >>> 0 < 10) {
       $$3162215 = $$2161$lcssa; //@line 7134
       $88 = $291; //@line 7134
       $89 = $292; //@line 7134
       $93 = $86; //@line 7134
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0; //@line 7136
        $91 = tempRet0; //@line 7137
        $94 = (($93 | 0) < 0) << 31 >> 31; //@line 7139
        $96 = ~$94; //@line 7141
        if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
         $$1165168 = 10; //@line 7148
         $$8 = $$3162215; //@line 7148
         $293 = $88; //@line 7148
         $294 = $89; //@line 7148
         label = 72; //@line 7149
         break L43;
        }
        $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0; //@line 7152
        $89 = tempRet0; //@line 7153
        $104 = HEAP32[$6 >> 2] | 0; //@line 7154
        if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $104 + 1; //@line 7159
         $$3162$be = HEAPU8[$104 >> 0] | 0; //@line 7162
        } else {
         $$3162$be = ___shgetc($0) | 0; //@line 7165
        }
        $93 = $$3162$be + -48 | 0; //@line 7167
        if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) {
         break;
        } else {
         $$3162215 = $$3162$be; //@line 7176
        }
       }
       if ($93 >>> 0 > 9) {
        $$1158 = $$0157; //@line 7183
        $263 = $89; //@line 7183
        $265 = $88; //@line 7183
       } else {
        $$1165168 = 10; //@line 7185
        $$8 = $$3162$be; //@line 7185
        $293 = $88; //@line 7185
        $294 = $89; //@line 7185
        label = 72; //@line 7186
       }
      } else {
       $$1158 = $$0157; //@line 7189
       $263 = $292; //@line 7189
       $265 = $291; //@line 7189
      }
     } else {
      $$1160169 = $$1160; //@line 7192
      $$1165167 = $$1165; //@line 7192
      label = 46; //@line 7193
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$1165167 + -1 & $$1165167)) {
      $131 = HEAP8[4585 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 7208
      $133 = HEAP8[4329 + $$1160169 >> 0] | 0; //@line 7210
      $134 = $133 & 255; //@line 7211
      if ($$1165167 >>> 0 > $134 >>> 0) {
       $$1155192 = 0; //@line 7214
       $138 = $134; //@line 7214
       do {
        $$1155192 = $138 | $$1155192 << $131; //@line 7217
        $139 = HEAP32[$6 >> 2] | 0; //@line 7218
        if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $139 + 1; //@line 7223
         $$4163$be = HEAPU8[$139 >> 0] | 0; //@line 7226
        } else {
         $$4163$be = ___shgetc($0) | 0; //@line 7229
        }
        $147 = HEAP8[4329 + $$4163$be >> 0] | 0; //@line 7232
        $138 = $147 & 255; //@line 7233
       } while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
       $$4163$lcssa = $$4163$be; //@line 7243
       $155 = $147; //@line 7243
       $158 = 0; //@line 7243
       $160 = $$1155192; //@line 7243
      } else {
       $$4163$lcssa = $$1160169; //@line 7245
       $155 = $133; //@line 7245
       $158 = 0; //@line 7245
       $160 = 0; //@line 7245
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0; //@line 7247
      $153 = tempRet0; //@line 7248
      if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
       $$1165168 = $$1165167; //@line 7258
       $$8 = $$4163$lcssa; //@line 7258
       $293 = $160; //@line 7258
       $294 = $158; //@line 7258
       label = 72; //@line 7259
       break;
      } else {
       $164 = $160; //@line 7262
       $165 = $158; //@line 7262
       $169 = $155; //@line 7262
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0; //@line 7265
       $167 = tempRet0; //@line 7266
       $170 = $166 | $169 & 255; //@line 7268
       $171 = HEAP32[$6 >> 2] | 0; //@line 7269
       if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $171 + 1; //@line 7274
        $$5$be = HEAPU8[$171 >> 0] | 0; //@line 7277
       } else {
        $$5$be = ___shgetc($0) | 0; //@line 7280
       }
       $169 = HEAP8[4329 + $$5$be >> 0] | 0; //@line 7283
       if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
        $$1165168 = $$1165167; //@line 7293
        $$8 = $$5$be; //@line 7293
        $293 = $170; //@line 7293
        $294 = $167; //@line 7293
        label = 72; //@line 7294
        break L63;
       } else {
        $164 = $170; //@line 7297
        $165 = $167; //@line 7297
       }
      }
     }
     $123 = HEAP8[4329 + $$1160169 >> 0] | 0; //@line 7302
     $124 = $123 & 255; //@line 7303
     if ($$1165167 >>> 0 > $124 >>> 0) {
      $$2156210 = 0; //@line 7306
      $189 = $124; //@line 7306
      do {
       $$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0; //@line 7309
       $190 = HEAP32[$6 >> 2] | 0; //@line 7310
       if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $190 + 1; //@line 7315
        $$6$be = HEAPU8[$190 >> 0] | 0; //@line 7318
       } else {
        $$6$be = ___shgetc($0) | 0; //@line 7321
       }
       $198 = HEAP8[4329 + $$6$be >> 0] | 0; //@line 7324
       $189 = $198 & 255; //@line 7325
      } while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
      $$6$lcssa = $$6$be; //@line 7335
      $204 = $198; //@line 7335
      $295 = $$2156210; //@line 7335
      $296 = 0; //@line 7335
     } else {
      $$6$lcssa = $$1160169; //@line 7337
      $204 = $123; //@line 7337
      $295 = 0; //@line 7337
      $296 = 0; //@line 7337
     }
     if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
      $206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0; //@line 7342
      $207 = tempRet0; //@line 7343
      $$7198 = $$6$lcssa; //@line 7344
      $209 = $296; //@line 7344
      $211 = $295; //@line 7344
      $218 = $204; //@line 7344
      while (1) {
       if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
        $$1165168 = $$1165167; //@line 7352
        $$8 = $$7198; //@line 7352
        $293 = $211; //@line 7352
        $294 = $209; //@line 7352
        label = 72; //@line 7353
        break L63;
       }
       $215 = ___muldi3($211 | 0, $209 | 0, $$1165167 | 0, 0) | 0; //@line 7356
       $216 = tempRet0; //@line 7357
       $217 = $218 & 255; //@line 7358
       if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
        $$1165168 = $$1165167; //@line 7366
        $$8 = $$7198; //@line 7366
        $293 = $211; //@line 7366
        $294 = $209; //@line 7366
        label = 72; //@line 7367
        break L63;
       }
       $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0; //@line 7370
       $226 = tempRet0; //@line 7371
       $227 = HEAP32[$6 >> 2] | 0; //@line 7372
       if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $227 + 1; //@line 7377
        $$7$be = HEAPU8[$227 >> 0] | 0; //@line 7380
       } else {
        $$7$be = ___shgetc($0) | 0; //@line 7383
       }
       $218 = HEAP8[4329 + $$7$be >> 0] | 0; //@line 7386
       if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
        $$1165168 = $$1165167; //@line 7392
        $$8 = $$7$be; //@line 7392
        $293 = $225; //@line 7392
        $294 = $226; //@line 7392
        label = 72; //@line 7393
        break;
       } else {
        $$7198 = $$7$be; //@line 7390
        $209 = $226; //@line 7390
        $211 = $225; //@line 7390
       }
      }
     } else {
      $$1165168 = $$1165167; //@line 7398
      $$8 = $$6$lcssa; //@line 7398
      $293 = $295; //@line 7398
      $294 = $296; //@line 7398
      label = 72; //@line 7399
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ($$1165168 >>> 0 > (HEAPU8[4329 + $$8 >> 0] | 0) >>> 0) {
     do {
      $242 = HEAP32[$6 >> 2] | 0; //@line 7410
      if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $242 + 1; //@line 7415
       $$9$be = HEAPU8[$242 >> 0] | 0; //@line 7418
      } else {
       $$9$be = ___shgetc($0) | 0; //@line 7421
      }
     } while ($$1165168 >>> 0 > (HEAPU8[4329 + $$9$be >> 0] | 0) >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7432
     $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0; //@line 7438
     $263 = $4; //@line 7438
     $265 = $3; //@line 7438
    } else {
     $$1158 = $$0157; //@line 7440
     $263 = $294; //@line 7440
     $265 = $293; //@line 7440
    }
   }
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7448
   }
   if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
    if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7464
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0; //@line 7465
     $289 = tempRet0; //@line 7467
     $290 = $275; //@line 7467
     break;
    }
    if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7477
     $289 = $4; //@line 7478
     $290 = $3; //@line 7478
     break;
    }
   }
   $284 = (($$1158 | 0) < 0) << 31 >> 31; //@line 7483
   $287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0; //@line 7486
   $289 = tempRet0; //@line 7488
   $290 = $287; //@line 7488
  }
 } while (0);
 tempRet0 = $289; //@line 7491
 return $290 | 0; //@line 7492
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $73 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1190
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1192
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1194
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1196
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1198
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1200
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1202
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1204
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1206
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1208
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1210
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1212
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 1214
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 1216
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1220
 $30 = HEAP32[HEAP32[$0 + 56 >> 2] >> 2] | 0; //@line 1221
 if ($30 | 0) {
  $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 1225
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(56) | 0; //@line 1226
  FUNCTION_TABLE_vi[$33 & 511]($26); //@line 1227
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 180; //@line 1230
   $34 = $ReallocAsyncCtx7 + 4 | 0; //@line 1231
   HEAP32[$34 >> 2] = $2; //@line 1232
   $35 = $ReallocAsyncCtx7 + 8 | 0; //@line 1233
   HEAP32[$35 >> 2] = $4; //@line 1234
   $36 = $ReallocAsyncCtx7 + 12 | 0; //@line 1235
   HEAP32[$36 >> 2] = $6; //@line 1236
   $37 = $ReallocAsyncCtx7 + 16 | 0; //@line 1237
   HEAP32[$37 >> 2] = $8; //@line 1238
   $38 = $ReallocAsyncCtx7 + 20 | 0; //@line 1239
   HEAP32[$38 >> 2] = $10; //@line 1240
   $39 = $ReallocAsyncCtx7 + 24 | 0; //@line 1241
   HEAP32[$39 >> 2] = $12; //@line 1242
   $40 = $ReallocAsyncCtx7 + 28 | 0; //@line 1243
   HEAP32[$40 >> 2] = $16; //@line 1244
   $41 = $ReallocAsyncCtx7 + 32 | 0; //@line 1245
   HEAP32[$41 >> 2] = $18; //@line 1246
   $42 = $ReallocAsyncCtx7 + 36 | 0; //@line 1247
   HEAP32[$42 >> 2] = $20; //@line 1248
   $43 = $ReallocAsyncCtx7 + 40 | 0; //@line 1249
   HEAP32[$43 >> 2] = $AsyncRetVal; //@line 1250
   $44 = $ReallocAsyncCtx7 + 44 | 0; //@line 1251
   HEAP32[$44 >> 2] = $22; //@line 1252
   $45 = $ReallocAsyncCtx7 + 48 | 0; //@line 1253
   HEAP32[$45 >> 2] = $24; //@line 1254
   $46 = $ReallocAsyncCtx7 + 52 | 0; //@line 1255
   HEAP32[$46 >> 2] = $14; //@line 1256
   sp = STACKTOP; //@line 1257
   return;
  }
  ___async_unwind = 0; //@line 1260
  HEAP32[$ReallocAsyncCtx7 >> 2] = 180; //@line 1261
  $34 = $ReallocAsyncCtx7 + 4 | 0; //@line 1262
  HEAP32[$34 >> 2] = $2; //@line 1263
  $35 = $ReallocAsyncCtx7 + 8 | 0; //@line 1264
  HEAP32[$35 >> 2] = $4; //@line 1265
  $36 = $ReallocAsyncCtx7 + 12 | 0; //@line 1266
  HEAP32[$36 >> 2] = $6; //@line 1267
  $37 = $ReallocAsyncCtx7 + 16 | 0; //@line 1268
  HEAP32[$37 >> 2] = $8; //@line 1269
  $38 = $ReallocAsyncCtx7 + 20 | 0; //@line 1270
  HEAP32[$38 >> 2] = $10; //@line 1271
  $39 = $ReallocAsyncCtx7 + 24 | 0; //@line 1272
  HEAP32[$39 >> 2] = $12; //@line 1273
  $40 = $ReallocAsyncCtx7 + 28 | 0; //@line 1274
  HEAP32[$40 >> 2] = $16; //@line 1275
  $41 = $ReallocAsyncCtx7 + 32 | 0; //@line 1276
  HEAP32[$41 >> 2] = $18; //@line 1277
  $42 = $ReallocAsyncCtx7 + 36 | 0; //@line 1278
  HEAP32[$42 >> 2] = $20; //@line 1279
  $43 = $ReallocAsyncCtx7 + 40 | 0; //@line 1280
  HEAP32[$43 >> 2] = $AsyncRetVal; //@line 1281
  $44 = $ReallocAsyncCtx7 + 44 | 0; //@line 1282
  HEAP32[$44 >> 2] = $22; //@line 1283
  $45 = $ReallocAsyncCtx7 + 48 | 0; //@line 1284
  HEAP32[$45 >> 2] = $24; //@line 1285
  $46 = $ReallocAsyncCtx7 + 52 | 0; //@line 1286
  HEAP32[$46 >> 2] = $14; //@line 1287
  sp = STACKTOP; //@line 1288
  return;
 }
 $47 = ($AsyncRetVal | 0) == 0; //@line 1291
 $48 = HEAP32[$22 >> 2] | 0; //@line 1292
 if ($48 | 0) {
  $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 1296
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(48) | 0; //@line 1297
  FUNCTION_TABLE_vi[$51 & 511]($2); //@line 1298
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 1301
   $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 1302
   $$expand_i1_val = $47 & 1; //@line 1303
   HEAP8[$52 >> 0] = $$expand_i1_val; //@line 1304
   $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 1305
   HEAP32[$53 >> 2] = $4; //@line 1306
   $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 1307
   HEAP32[$54 >> 2] = $6; //@line 1308
   $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 1309
   HEAP32[$55 >> 2] = $8; //@line 1310
   $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 1311
   HEAP32[$56 >> 2] = $10; //@line 1312
   $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 1313
   HEAP32[$57 >> 2] = $12; //@line 1314
   $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 1315
   HEAP32[$58 >> 2] = $16; //@line 1316
   $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 1317
   HEAP32[$59 >> 2] = $18; //@line 1318
   $60 = $ReallocAsyncCtx8 + 36 | 0; //@line 1319
   HEAP32[$60 >> 2] = $20; //@line 1320
   $61 = $ReallocAsyncCtx8 + 40 | 0; //@line 1321
   HEAP32[$61 >> 2] = $24; //@line 1322
   $62 = $ReallocAsyncCtx8 + 44 | 0; //@line 1323
   HEAP32[$62 >> 2] = $14; //@line 1324
   sp = STACKTOP; //@line 1325
   return;
  }
  ___async_unwind = 0; //@line 1328
  HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 1329
  $52 = $ReallocAsyncCtx8 + 4 | 0; //@line 1330
  $$expand_i1_val = $47 & 1; //@line 1331
  HEAP8[$52 >> 0] = $$expand_i1_val; //@line 1332
  $53 = $ReallocAsyncCtx8 + 8 | 0; //@line 1333
  HEAP32[$53 >> 2] = $4; //@line 1334
  $54 = $ReallocAsyncCtx8 + 12 | 0; //@line 1335
  HEAP32[$54 >> 2] = $6; //@line 1336
  $55 = $ReallocAsyncCtx8 + 16 | 0; //@line 1337
  HEAP32[$55 >> 2] = $8; //@line 1338
  $56 = $ReallocAsyncCtx8 + 20 | 0; //@line 1339
  HEAP32[$56 >> 2] = $10; //@line 1340
  $57 = $ReallocAsyncCtx8 + 24 | 0; //@line 1341
  HEAP32[$57 >> 2] = $12; //@line 1342
  $58 = $ReallocAsyncCtx8 + 28 | 0; //@line 1343
  HEAP32[$58 >> 2] = $16; //@line 1344
  $59 = $ReallocAsyncCtx8 + 32 | 0; //@line 1345
  HEAP32[$59 >> 2] = $18; //@line 1346
  $60 = $ReallocAsyncCtx8 + 36 | 0; //@line 1347
  HEAP32[$60 >> 2] = $20; //@line 1348
  $61 = $ReallocAsyncCtx8 + 40 | 0; //@line 1349
  HEAP32[$61 >> 2] = $24; //@line 1350
  $62 = $ReallocAsyncCtx8 + 44 | 0; //@line 1351
  HEAP32[$62 >> 2] = $14; //@line 1352
  sp = STACKTOP; //@line 1353
  return;
 }
 if ($47) {
  $79 = HEAP32[$12 >> 2] | 0; //@line 1357
  if (!$79) {
   $93 = $20 + 12 | 0; //@line 1360
   HEAP32[$93 >> 2] = 0; //@line 1361
   $94 = HEAP32[$16 >> 2] | 0; //@line 1362
   HEAP32[$24 + 8 >> 2] = 0; //@line 1364
   HEAP32[$24 >> 2] = 185; //@line 1365
   HEAP32[$24 + 4 >> 2] = $94; //@line 1367
   $96 = $24 + 12 | 0; //@line 1368
   HEAP32[$96 >> 2] = 764; //@line 1369
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(48) | 0; //@line 1370
   $97 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 0, $24) | 0; //@line 1371
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 186; //@line 1374
    $98 = $ReallocAsyncCtx18 + 4 | 0; //@line 1375
    HEAP32[$98 >> 2] = $96; //@line 1376
    $99 = $ReallocAsyncCtx18 + 8 | 0; //@line 1377
    HEAP32[$99 >> 2] = $4; //@line 1378
    $100 = $ReallocAsyncCtx18 + 12 | 0; //@line 1379
    HEAP32[$100 >> 2] = $8; //@line 1380
    $101 = $ReallocAsyncCtx18 + 16 | 0; //@line 1381
    HEAP32[$101 >> 2] = $16; //@line 1382
    $102 = $ReallocAsyncCtx18 + 20 | 0; //@line 1383
    HEAP32[$102 >> 2] = $14; //@line 1384
    $103 = $ReallocAsyncCtx18 + 24 | 0; //@line 1385
    HEAP32[$103 >> 2] = $93; //@line 1386
    $104 = $ReallocAsyncCtx18 + 28 | 0; //@line 1387
    HEAP32[$104 >> 2] = $20; //@line 1388
    $105 = $ReallocAsyncCtx18 + 32 | 0; //@line 1389
    HEAP32[$105 >> 2] = $12; //@line 1390
    $106 = $ReallocAsyncCtx18 + 36 | 0; //@line 1391
    HEAP32[$106 >> 2] = $10; //@line 1392
    $107 = $ReallocAsyncCtx18 + 40 | 0; //@line 1393
    HEAP32[$107 >> 2] = $6; //@line 1394
    $108 = $ReallocAsyncCtx18 + 44 | 0; //@line 1395
    HEAP32[$108 >> 2] = $24; //@line 1396
    sp = STACKTOP; //@line 1397
    return;
   }
   HEAP32[___async_retval >> 2] = $97; //@line 1401
   ___async_unwind = 0; //@line 1402
   HEAP32[$ReallocAsyncCtx18 >> 2] = 186; //@line 1403
   $98 = $ReallocAsyncCtx18 + 4 | 0; //@line 1404
   HEAP32[$98 >> 2] = $96; //@line 1405
   $99 = $ReallocAsyncCtx18 + 8 | 0; //@line 1406
   HEAP32[$99 >> 2] = $4; //@line 1407
   $100 = $ReallocAsyncCtx18 + 12 | 0; //@line 1408
   HEAP32[$100 >> 2] = $8; //@line 1409
   $101 = $ReallocAsyncCtx18 + 16 | 0; //@line 1410
   HEAP32[$101 >> 2] = $16; //@line 1411
   $102 = $ReallocAsyncCtx18 + 20 | 0; //@line 1412
   HEAP32[$102 >> 2] = $14; //@line 1413
   $103 = $ReallocAsyncCtx18 + 24 | 0; //@line 1414
   HEAP32[$103 >> 2] = $93; //@line 1415
   $104 = $ReallocAsyncCtx18 + 28 | 0; //@line 1416
   HEAP32[$104 >> 2] = $20; //@line 1417
   $105 = $ReallocAsyncCtx18 + 32 | 0; //@line 1418
   HEAP32[$105 >> 2] = $12; //@line 1419
   $106 = $ReallocAsyncCtx18 + 36 | 0; //@line 1420
   HEAP32[$106 >> 2] = $10; //@line 1421
   $107 = $ReallocAsyncCtx18 + 40 | 0; //@line 1422
   HEAP32[$107 >> 2] = $6; //@line 1423
   $108 = $ReallocAsyncCtx18 + 44 | 0; //@line 1424
   HEAP32[$108 >> 2] = $24; //@line 1425
   sp = STACKTOP; //@line 1426
   return;
  } else {
   $82 = HEAP32[$79 + 4 >> 2] | 0; //@line 1430
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(44) | 0; //@line 1431
   FUNCTION_TABLE_vii[$82 & 7]($20, $10); //@line 1432
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 184; //@line 1435
    $83 = $ReallocAsyncCtx11 + 4 | 0; //@line 1436
    HEAP32[$83 >> 2] = $4; //@line 1437
    $84 = $ReallocAsyncCtx11 + 8 | 0; //@line 1438
    HEAP32[$84 >> 2] = $8; //@line 1439
    $85 = $ReallocAsyncCtx11 + 12 | 0; //@line 1440
    HEAP32[$85 >> 2] = $16; //@line 1441
    $86 = $ReallocAsyncCtx11 + 16 | 0; //@line 1442
    HEAP32[$86 >> 2] = $18; //@line 1443
    $87 = $ReallocAsyncCtx11 + 20 | 0; //@line 1444
    HEAP32[$87 >> 2] = $20; //@line 1445
    $88 = $ReallocAsyncCtx11 + 24 | 0; //@line 1446
    HEAP32[$88 >> 2] = $12; //@line 1447
    $89 = $ReallocAsyncCtx11 + 28 | 0; //@line 1448
    HEAP32[$89 >> 2] = $10; //@line 1449
    $90 = $ReallocAsyncCtx11 + 32 | 0; //@line 1450
    HEAP32[$90 >> 2] = $6; //@line 1451
    $91 = $ReallocAsyncCtx11 + 36 | 0; //@line 1452
    HEAP32[$91 >> 2] = $24; //@line 1453
    $92 = $ReallocAsyncCtx11 + 40 | 0; //@line 1454
    HEAP32[$92 >> 2] = $14; //@line 1455
    sp = STACKTOP; //@line 1456
    return;
   }
   ___async_unwind = 0; //@line 1459
   HEAP32[$ReallocAsyncCtx11 >> 2] = 184; //@line 1460
   $83 = $ReallocAsyncCtx11 + 4 | 0; //@line 1461
   HEAP32[$83 >> 2] = $4; //@line 1462
   $84 = $ReallocAsyncCtx11 + 8 | 0; //@line 1463
   HEAP32[$84 >> 2] = $8; //@line 1464
   $85 = $ReallocAsyncCtx11 + 12 | 0; //@line 1465
   HEAP32[$85 >> 2] = $16; //@line 1466
   $86 = $ReallocAsyncCtx11 + 16 | 0; //@line 1467
   HEAP32[$86 >> 2] = $18; //@line 1468
   $87 = $ReallocAsyncCtx11 + 20 | 0; //@line 1469
   HEAP32[$87 >> 2] = $20; //@line 1470
   $88 = $ReallocAsyncCtx11 + 24 | 0; //@line 1471
   HEAP32[$88 >> 2] = $12; //@line 1472
   $89 = $ReallocAsyncCtx11 + 28 | 0; //@line 1473
   HEAP32[$89 >> 2] = $10; //@line 1474
   $90 = $ReallocAsyncCtx11 + 32 | 0; //@line 1475
   HEAP32[$90 >> 2] = $6; //@line 1476
   $91 = $ReallocAsyncCtx11 + 36 | 0; //@line 1477
   HEAP32[$91 >> 2] = $24; //@line 1478
   $92 = $ReallocAsyncCtx11 + 40 | 0; //@line 1479
   HEAP32[$92 >> 2] = $14; //@line 1480
   sp = STACKTOP; //@line 1481
   return;
  }
 }
 $63 = HEAP32[$6 >> 2] | 0; //@line 1485
 if ($63 | 0) {
  __ZdlPv($63); //@line 1488
 }
 $65 = HEAP32[$12 >> 2] | 0; //@line 1490
 if ($65 | 0) {
  $68 = HEAP32[$65 + 8 >> 2] | 0; //@line 1494
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 1495
  FUNCTION_TABLE_vi[$68 & 511]($10); //@line 1496
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 1499
   $69 = $ReallocAsyncCtx9 + 4 | 0; //@line 1500
   HEAP32[$69 >> 2] = $4; //@line 1501
   $70 = $ReallocAsyncCtx9 + 8 | 0; //@line 1502
   HEAP32[$70 >> 2] = $8; //@line 1503
   $71 = $ReallocAsyncCtx9 + 12 | 0; //@line 1504
   HEAP32[$71 >> 2] = $14; //@line 1505
   sp = STACKTOP; //@line 1506
   return;
  }
  ___async_unwind = 0; //@line 1509
  HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 1510
  $69 = $ReallocAsyncCtx9 + 4 | 0; //@line 1511
  HEAP32[$69 >> 2] = $4; //@line 1512
  $70 = $ReallocAsyncCtx9 + 8 | 0; //@line 1513
  HEAP32[$70 >> 2] = $8; //@line 1514
  $71 = $ReallocAsyncCtx9 + 12 | 0; //@line 1515
  HEAP32[$71 >> 2] = $14; //@line 1516
  sp = STACKTOP; //@line 1517
  return;
 }
 $73 = HEAP32[$4 + 28 >> 2] | 0; //@line 1521
 if (!$73) {
  __ZdlPv($4); //@line 1524
  HEAP32[___async_retval >> 2] = -3007; //@line 1526
  return;
 }
 $76 = HEAP32[$73 + 8 >> 2] | 0; //@line 1530
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 1531
 FUNCTION_TABLE_vi[$76 & 511]($8); //@line 1532
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 1535
  $77 = $ReallocAsyncCtx10 + 4 | 0; //@line 1536
  HEAP32[$77 >> 2] = $4; //@line 1537
  $78 = $ReallocAsyncCtx10 + 8 | 0; //@line 1538
  HEAP32[$78 >> 2] = $14; //@line 1539
  sp = STACKTOP; //@line 1540
  return;
 }
 ___async_unwind = 0; //@line 1543
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 1544
 $77 = $ReallocAsyncCtx10 + 4 | 0; //@line 1545
 HEAP32[$77 >> 2] = $4; //@line 1546
 $78 = $ReallocAsyncCtx10 + 8 | 0; //@line 1547
 HEAP32[$78 >> 2] = $14; //@line 1548
 sp = STACKTOP; //@line 1549
 return;
}
function _main() {
 var $105 = 0, $106 = 0, $107 = 0, $119 = 0, $121 = 0, $13 = 0, $27 = 0, $42 = 0, $51 = 0, $52 = 0, $62 = 0, $81 = 0, $91 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx54 = 0, $AsyncCtx58 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 13057
 STACKTOP = STACKTOP + 128 | 0; //@line 13058
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 13058
 $vararg_buffer17 = sp + 112 | 0; //@line 13059
 $vararg_buffer12 = sp + 96 | 0; //@line 13060
 $vararg_buffer7 = sp + 80 | 0; //@line 13061
 $vararg_buffer4 = sp + 16 | 0; //@line 13062
 $vararg_buffer1 = sp + 8 | 0; //@line 13063
 $vararg_buffer = sp; //@line 13064
 $AsyncCtx29 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13065
 _puts(4118) | 0; //@line 13066
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 293; //@line 13069
  HEAP32[$AsyncCtx29 + 4 >> 2] = $vararg_buffer4; //@line 13071
  HEAP32[$AsyncCtx29 + 8 >> 2] = $vararg_buffer7; //@line 13073
  HEAP32[$AsyncCtx29 + 12 >> 2] = $vararg_buffer7; //@line 13075
  HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer12; //@line 13077
  HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer12; //@line 13079
  HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer17; //@line 13081
  HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer17; //@line 13083
  HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer; //@line 13085
  HEAP32[$AsyncCtx29 + 36 >> 2] = $vararg_buffer; //@line 13087
  HEAP32[$AsyncCtx29 + 40 >> 2] = $vararg_buffer1; //@line 13089
  HEAP32[$AsyncCtx29 + 44 >> 2] = $vararg_buffer1; //@line 13091
  HEAP32[$AsyncCtx29 + 48 >> 2] = $vararg_buffer4; //@line 13093
  HEAP32[$AsyncCtx29 + 52 >> 2] = $vararg_buffer4; //@line 13095
  sp = STACKTOP; //@line 13096
  STACKTOP = sp; //@line 13097
  return 0; //@line 13097
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 13099
 $AsyncCtx58 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13100
 $13 = __ZN17EthernetInterface14get_ip_addressEv(788) | 0; //@line 13101
 if (___async) {
  HEAP32[$AsyncCtx58 >> 2] = 294; //@line 13104
  HEAP32[$AsyncCtx58 + 4 >> 2] = $vararg_buffer4; //@line 13106
  HEAP32[$AsyncCtx58 + 8 >> 2] = $vararg_buffer7; //@line 13108
  HEAP32[$AsyncCtx58 + 12 >> 2] = $vararg_buffer7; //@line 13110
  HEAP32[$AsyncCtx58 + 16 >> 2] = $vararg_buffer12; //@line 13112
  HEAP32[$AsyncCtx58 + 20 >> 2] = $vararg_buffer12; //@line 13114
  HEAP32[$AsyncCtx58 + 24 >> 2] = $vararg_buffer17; //@line 13116
  HEAP32[$AsyncCtx58 + 28 >> 2] = $vararg_buffer17; //@line 13118
  HEAP32[$AsyncCtx58 + 32 >> 2] = $vararg_buffer; //@line 13120
  HEAP32[$AsyncCtx58 + 36 >> 2] = $vararg_buffer; //@line 13122
  HEAP32[$AsyncCtx58 + 40 >> 2] = $vararg_buffer1; //@line 13124
  HEAP32[$AsyncCtx58 + 44 >> 2] = $vararg_buffer1; //@line 13126
  HEAP32[$AsyncCtx58 + 48 >> 2] = $vararg_buffer4; //@line 13128
  HEAP32[$AsyncCtx58 + 52 >> 2] = $vararg_buffer4; //@line 13130
  sp = STACKTOP; //@line 13131
  STACKTOP = sp; //@line 13132
  return 0; //@line 13132
 }
 _emscripten_free_async_context($AsyncCtx58 | 0); //@line 13134
 $AsyncCtx54 = _emscripten_alloc_async_context(60, sp) | 0; //@line 13135
 $27 = __ZN17EthernetInterface15get_mac_addressEv(788) | 0; //@line 13136
 if (___async) {
  HEAP32[$AsyncCtx54 >> 2] = 295; //@line 13139
  HEAP32[$AsyncCtx54 + 4 >> 2] = $vararg_buffer4; //@line 13141
  HEAP32[$AsyncCtx54 + 8 >> 2] = $vararg_buffer7; //@line 13143
  HEAP32[$AsyncCtx54 + 12 >> 2] = $vararg_buffer7; //@line 13145
  HEAP32[$AsyncCtx54 + 16 >> 2] = $vararg_buffer12; //@line 13147
  HEAP32[$AsyncCtx54 + 20 >> 2] = $vararg_buffer12; //@line 13149
  HEAP32[$AsyncCtx54 + 24 >> 2] = $vararg_buffer17; //@line 13151
  HEAP32[$AsyncCtx54 + 28 >> 2] = $vararg_buffer17; //@line 13153
  HEAP32[$AsyncCtx54 + 32 >> 2] = $13; //@line 13155
  HEAP32[$AsyncCtx54 + 36 >> 2] = $vararg_buffer; //@line 13157
  HEAP32[$AsyncCtx54 + 40 >> 2] = $vararg_buffer; //@line 13159
  HEAP32[$AsyncCtx54 + 44 >> 2] = $vararg_buffer1; //@line 13161
  HEAP32[$AsyncCtx54 + 48 >> 2] = $vararg_buffer1; //@line 13163
  HEAP32[$AsyncCtx54 + 52 >> 2] = $vararg_buffer4; //@line 13165
  HEAP32[$AsyncCtx54 + 56 >> 2] = $vararg_buffer4; //@line 13167
  sp = STACKTOP; //@line 13168
  STACKTOP = sp; //@line 13169
  return 0; //@line 13169
 }
 _emscripten_free_async_context($AsyncCtx54 | 0); //@line 13171
 $42 = __ZN17EthernetInterface11get_gatewayEv(788) | 0; //@line 13172
 HEAP32[$vararg_buffer >> 2] = $13 | 0 ? $13 : 4142; //@line 13175
 _printf(4147, $vararg_buffer) | 0; //@line 13176
 HEAP32[$vararg_buffer1 >> 2] = $27 | 0 ? $27 : 4142; //@line 13179
 _printf(4163, $vararg_buffer1) | 0; //@line 13180
 HEAP32[$vararg_buffer4 >> 2] = $42 | 0 ? $42 : 4142; //@line 13183
 _printf(4180, $vararg_buffer4) | 0; //@line 13184
 __ZN9TCPSocketC2Ev($vararg_buffer4); //@line 13185
 $51 = HEAP32[(HEAP32[197] | 0) + 88 >> 2] | 0; //@line 13188
 $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 13189
 $52 = FUNCTION_TABLE_ii[$51 & 31](788) | 0; //@line 13190
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 296; //@line 13193
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer4; //@line 13195
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer4; //@line 13197
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer12; //@line 13199
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer12; //@line 13201
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer17; //@line 13203
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer17; //@line 13205
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer4; //@line 13207
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer7; //@line 13209
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer7; //@line 13211
  sp = STACKTOP; //@line 13212
  STACKTOP = sp; //@line 13213
  return 0; //@line 13213
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13215
 $62 = __Z18nsapi_create_stackP12NetworkStack($52) | 0; //@line 13216
 $AsyncCtx51 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13217
 __ZN6Socket4openEP12NetworkStack($vararg_buffer4, $62) | 0; //@line 13218
 if (___async) {
  HEAP32[$AsyncCtx51 >> 2] = 297; //@line 13221
  HEAP32[$AsyncCtx51 + 4 >> 2] = $vararg_buffer4; //@line 13223
  HEAP32[$AsyncCtx51 + 8 >> 2] = $vararg_buffer7; //@line 13225
  HEAP32[$AsyncCtx51 + 12 >> 2] = $vararg_buffer7; //@line 13227
  HEAP32[$AsyncCtx51 + 16 >> 2] = $vararg_buffer12; //@line 13229
  HEAP32[$AsyncCtx51 + 20 >> 2] = $vararg_buffer12; //@line 13231
  HEAP32[$AsyncCtx51 + 24 >> 2] = $vararg_buffer17; //@line 13233
  HEAP32[$AsyncCtx51 + 28 >> 2] = $vararg_buffer17; //@line 13235
  HEAP32[$AsyncCtx51 + 32 >> 2] = $vararg_buffer4; //@line 13237
  HEAP32[$AsyncCtx51 + 36 >> 2] = $vararg_buffer4; //@line 13239
  sp = STACKTOP; //@line 13240
  STACKTOP = sp; //@line 13241
  return 0; //@line 13241
 }
 _emscripten_free_async_context($AsyncCtx51 | 0); //@line 13243
 $AsyncCtx41 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13244
 __ZN9TCPSocket7connectEPKct($vararg_buffer4, 4193, 80) | 0; //@line 13245
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 298; //@line 13248
  HEAP32[$AsyncCtx41 + 4 >> 2] = $vararg_buffer4; //@line 13250
  HEAP32[$AsyncCtx41 + 8 >> 2] = $vararg_buffer7; //@line 13252
  HEAP32[$AsyncCtx41 + 12 >> 2] = $vararg_buffer7; //@line 13254
  HEAP32[$AsyncCtx41 + 16 >> 2] = $vararg_buffer12; //@line 13256
  HEAP32[$AsyncCtx41 + 20 >> 2] = $vararg_buffer12; //@line 13258
  HEAP32[$AsyncCtx41 + 24 >> 2] = $vararg_buffer17; //@line 13260
  HEAP32[$AsyncCtx41 + 28 >> 2] = $vararg_buffer17; //@line 13262
  HEAP32[$AsyncCtx41 + 32 >> 2] = $vararg_buffer4; //@line 13264
  HEAP32[$AsyncCtx41 + 36 >> 2] = $vararg_buffer4; //@line 13266
  sp = STACKTOP; //@line 13267
  STACKTOP = sp; //@line 13268
  return 0; //@line 13268
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 13270
 $AsyncCtx22 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13271
 $81 = __Znaj(256) | 0; //@line 13272
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 299; //@line 13275
  HEAP32[$AsyncCtx22 + 4 >> 2] = $vararg_buffer4; //@line 13277
  HEAP32[$AsyncCtx22 + 8 >> 2] = $vararg_buffer7; //@line 13279
  HEAP32[$AsyncCtx22 + 12 >> 2] = $vararg_buffer7; //@line 13281
  HEAP32[$AsyncCtx22 + 16 >> 2] = $vararg_buffer12; //@line 13283
  HEAP32[$AsyncCtx22 + 20 >> 2] = $vararg_buffer12; //@line 13285
  HEAP32[$AsyncCtx22 + 24 >> 2] = $vararg_buffer17; //@line 13287
  HEAP32[$AsyncCtx22 + 28 >> 2] = $vararg_buffer17; //@line 13289
  HEAP32[$AsyncCtx22 + 32 >> 2] = $vararg_buffer4; //@line 13291
  HEAP32[$AsyncCtx22 + 36 >> 2] = $vararg_buffer4; //@line 13293
  sp = STACKTOP; //@line 13294
  STACKTOP = sp; //@line 13295
  return 0; //@line 13295
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 13297
 dest = $81; //@line 13298
 src = 4207; //@line 13298
 stop = dest + 40 | 0; //@line 13298
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 13298
  dest = dest + 1 | 0; //@line 13298
  src = src + 1 | 0; //@line 13298
 } while ((dest | 0) < (stop | 0));
 $91 = _strlen($81) | 0; //@line 13299
 $AsyncCtx37 = _emscripten_alloc_async_context(44, sp) | 0; //@line 13300
 $92 = __ZN9TCPSocket4sendEPKvj($vararg_buffer4, $81, $91) | 0; //@line 13301
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 300; //@line 13304
  HEAP32[$AsyncCtx37 + 4 >> 2] = $81; //@line 13306
  HEAP32[$AsyncCtx37 + 8 >> 2] = $vararg_buffer7; //@line 13308
  HEAP32[$AsyncCtx37 + 12 >> 2] = $vararg_buffer7; //@line 13310
  HEAP32[$AsyncCtx37 + 16 >> 2] = $vararg_buffer4; //@line 13312
  HEAP32[$AsyncCtx37 + 20 >> 2] = $vararg_buffer12; //@line 13314
  HEAP32[$AsyncCtx37 + 24 >> 2] = $vararg_buffer12; //@line 13316
  HEAP32[$AsyncCtx37 + 28 >> 2] = $vararg_buffer17; //@line 13318
  HEAP32[$AsyncCtx37 + 32 >> 2] = $vararg_buffer17; //@line 13320
  HEAP32[$AsyncCtx37 + 36 >> 2] = $vararg_buffer4; //@line 13322
  HEAP32[$AsyncCtx37 + 40 >> 2] = $vararg_buffer4; //@line 13324
  sp = STACKTOP; //@line 13325
  STACKTOP = sp; //@line 13326
  return 0; //@line 13326
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 13328
 $105 = $81; //@line 13331
 $106 = (_strstr($81, 4247) | 0) - $105 | 0; //@line 13332
 HEAP32[$vararg_buffer7 >> 2] = $92; //@line 13333
 HEAP32[$vararg_buffer7 + 4 >> 2] = $106; //@line 13335
 HEAP32[$vararg_buffer7 + 8 >> 2] = $81; //@line 13337
 _printf(4250, $vararg_buffer7) | 0; //@line 13338
 $AsyncCtx33 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13339
 $107 = __ZN9TCPSocket4recvEPvj($vararg_buffer4, $81, 256) | 0; //@line 13340
 if (___async) {
  HEAP32[$AsyncCtx33 >> 2] = 301; //@line 13343
  HEAP32[$AsyncCtx33 + 4 >> 2] = $81; //@line 13345
  HEAP32[$AsyncCtx33 + 8 >> 2] = $105; //@line 13347
  HEAP32[$AsyncCtx33 + 12 >> 2] = $vararg_buffer12; //@line 13349
  HEAP32[$AsyncCtx33 + 16 >> 2] = $vararg_buffer12; //@line 13351
  HEAP32[$AsyncCtx33 + 20 >> 2] = $vararg_buffer17; //@line 13353
  HEAP32[$AsyncCtx33 + 24 >> 2] = $vararg_buffer17; //@line 13355
  HEAP32[$AsyncCtx33 + 28 >> 2] = $vararg_buffer4; //@line 13357
  HEAP32[$AsyncCtx33 + 32 >> 2] = $vararg_buffer4; //@line 13359
  HEAP32[$AsyncCtx33 + 36 >> 2] = $vararg_buffer4; //@line 13361
  sp = STACKTOP; //@line 13362
  STACKTOP = sp; //@line 13363
  return 0; //@line 13363
 }
 _emscripten_free_async_context($AsyncCtx33 | 0); //@line 13365
 $119 = (_strstr($81, 4247) | 0) - $105 | 0; //@line 13368
 HEAP32[$vararg_buffer12 >> 2] = $107; //@line 13369
 HEAP32[$vararg_buffer12 + 4 >> 2] = $119; //@line 13371
 HEAP32[$vararg_buffer12 + 8 >> 2] = $81; //@line 13373
 _printf(4266, $vararg_buffer12) | 0; //@line 13374
 $121 = (_strstr($81, 4282) | 0) + 4 | 0; //@line 13376
 HEAP32[$vararg_buffer17 >> 2] = $107 + $105 - $121; //@line 13380
 HEAP32[$vararg_buffer17 + 4 >> 2] = $121; //@line 13382
 _printf(4287, $vararg_buffer17) | 0; //@line 13383
 $AsyncCtx47 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13384
 __ZN6Socket5closeEv($vararg_buffer4) | 0; //@line 13385
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 302; //@line 13388
  HEAP32[$AsyncCtx47 + 4 >> 2] = $81; //@line 13390
  HEAP32[$AsyncCtx47 + 8 >> 2] = $vararg_buffer4; //@line 13392
  HEAP32[$AsyncCtx47 + 12 >> 2] = $vararg_buffer4; //@line 13394
  sp = STACKTOP; //@line 13395
  STACKTOP = sp; //@line 13396
  return 0; //@line 13396
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 13398
 __ZdaPv($81); //@line 13399
 $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13400
 _puts(4314) | 0; //@line 13401
 if (___async) {
  HEAP32[$AsyncCtx25 >> 2] = 303; //@line 13404
  HEAP32[$AsyncCtx25 + 4 >> 2] = $vararg_buffer4; //@line 13406
  HEAP32[$AsyncCtx25 + 8 >> 2] = $vararg_buffer4; //@line 13408
  sp = STACKTOP; //@line 13409
  STACKTOP = sp; //@line 13410
  return 0; //@line 13410
 }
 _emscripten_free_async_context($AsyncCtx25 | 0); //@line 13412
 $AsyncCtx44 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13413
 __ZN9TCPSocketD2Ev($vararg_buffer4); //@line 13414
 if (___async) {
  HEAP32[$AsyncCtx44 >> 2] = 304; //@line 13417
  HEAP32[$AsyncCtx44 + 4 >> 2] = $vararg_buffer4; //@line 13419
  sp = STACKTOP; //@line 13420
  STACKTOP = sp; //@line 13421
  return 0; //@line 13421
 } else {
  _emscripten_free_async_context($AsyncCtx44 | 0); //@line 13423
  STACKTOP = sp; //@line 13424
  return 0; //@line 13424
 }
 return 0; //@line 13426
}
function __ZL28nsapi_dns_query_async_createPv($0) {
 $0 = $0 | 0;
 var $$169$off0 = 0, $$169$off0$1 = 0, $$169$off0$2 = 0, $$169$off0$3 = 0, $$lcssa = 0, $$pre = 0, $1 = 0, $103 = 0, $105 = 0, $106 = 0, $11 = 0, $112 = 0, $115 = 0, $119 = 0, $123 = 0, $134 = 0, $140 = 0, $151 = 0, $157 = 0, $16 = 0, $168 = 0, $174 = 0, $187 = 0, $191 = 0, $195 = 0, $199 = 0, $2 = 0, $27 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $40 = 0, $52 = 0, $55 = 0, $57 = 0, $58 = 0, $67 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx28 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9692
 STACKTOP = STACKTOP + 16 | 0; //@line 9693
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9693
 $1 = sp; //@line 9694
 $2 = $0; //@line 9695
 $3 = HEAP32[1960] | 0; //@line 9696
 $4 = ($3 | 0) == 0; //@line 9697
 if ($4) {
  label = 4; //@line 9699
 } else {
  if ((HEAP32[$3 >> 2] | 0) == ($2 | 0)) {
   $$lcssa = $3; //@line 9704
  } else {
   label = 4; //@line 9706
  }
 }
 do {
  if ((label | 0) == 4) {
   $11 = HEAP32[1961] | 0; //@line 9711
   if ($11 | 0) {
    if ((HEAP32[$11 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $11; //@line 9717
     break;
    }
   }
   $187 = HEAP32[1962] | 0; //@line 9721
   if ($187 | 0) {
    if ((HEAP32[$187 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $187; //@line 9727
     break;
    }
   }
   $191 = HEAP32[1963] | 0; //@line 9731
   if ($191 | 0) {
    if ((HEAP32[$191 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $191; //@line 9737
     break;
    }
   }
   $195 = HEAP32[1964] | 0; //@line 9741
   if (!$195) {
    STACKTOP = sp; //@line 9744
    return;
   }
   if ((HEAP32[$195 >> 2] | 0) == ($2 | 0)) {
    $$lcssa = $195; //@line 9749
   } else {
    STACKTOP = sp; //@line 9751
    return;
   }
  }
 } while (0);
 $7 = $$lcssa + 56 | 0; //@line 9755
 $8 = $$lcssa + 8 | 0; //@line 9756
 $9 = $$lcssa + 60 | 0; //@line 9757
 if ($4 | ($3 | 0) == ($$lcssa | 0)) {
  $$169$off0 = 0; //@line 9761
 } else {
  if (!(HEAP32[$7 >> 2] | 0)) {
   $16 = HEAP32[$3 + 56 >> 2] | 0; //@line 9767
   if ($16 | 0) {
    if ((HEAP32[$3 + 8 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     HEAP32[$7 >> 2] = $16; //@line 9775
     HEAP32[$9 >> 2] = HEAP32[$3 + 60 >> 2]; //@line 9778
    }
   }
  }
  $$169$off0 = (HEAP16[$3 + 80 >> 1] | 0) != 0; //@line 9785
 }
 $27 = HEAP32[1961] | 0; //@line 9787
 if (($27 | 0) == 0 | ($27 | 0) == ($$lcssa | 0)) {
  $$169$off0$1 = $$169$off0; //@line 9792
 } else {
  if (!(HEAP32[$7 >> 2] | 0)) {
   $123 = HEAP32[$27 + 56 >> 2] | 0; //@line 9798
   if ($123 | 0) {
    if ((HEAP32[$27 + 8 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     HEAP32[$7 >> 2] = $123; //@line 9806
     HEAP32[$9 >> 2] = HEAP32[$27 + 60 >> 2]; //@line 9809
    }
   }
  }
  $$169$off0$1 = $$169$off0 | (HEAP16[$27 + 80 >> 1] | 0) != 0; //@line 9817
 }
 $134 = HEAP32[1962] | 0; //@line 9819
 if (($134 | 0) == 0 | ($134 | 0) == ($$lcssa | 0)) {
  $$169$off0$2 = $$169$off0$1; //@line 9824
 } else {
  if (!(HEAP32[$7 >> 2] | 0)) {
   $140 = HEAP32[$134 + 56 >> 2] | 0; //@line 9830
   if ($140 | 0) {
    if ((HEAP32[$134 + 8 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     HEAP32[$7 >> 2] = $140; //@line 9838
     HEAP32[$9 >> 2] = HEAP32[$134 + 60 >> 2]; //@line 9841
    }
   }
  }
  $$169$off0$2 = $$169$off0$1 | (HEAP16[$134 + 80 >> 1] | 0) != 0; //@line 9849
 }
 $151 = HEAP32[1963] | 0; //@line 9851
 if (($151 | 0) == 0 | ($151 | 0) == ($$lcssa | 0)) {
  $$169$off0$3 = $$169$off0$2; //@line 9856
 } else {
  if (!(HEAP32[$7 >> 2] | 0)) {
   $157 = HEAP32[$151 + 56 >> 2] | 0; //@line 9862
   if ($157 | 0) {
    if ((HEAP32[$151 + 8 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     HEAP32[$7 >> 2] = $157; //@line 9870
     HEAP32[$9 >> 2] = HEAP32[$151 + 60 >> 2]; //@line 9873
    }
   }
  }
  $$169$off0$3 = $$169$off0$2 | (HEAP16[$151 + 80 >> 1] | 0) != 0; //@line 9881
 }
 $168 = HEAP32[1964] | 0; //@line 9883
 if (($168 | 0) == 0 | ($168 | 0) == ($$lcssa | 0)) {
  if ($$169$off0$3) {
   STACKTOP = sp; //@line 9889
   return;
  }
 } else {
  if (!(HEAP32[$7 >> 2] | 0)) {
   $174 = HEAP32[$168 + 56 >> 2] | 0; //@line 9896
   if ($174 | 0) {
    if ((HEAP32[$168 + 8 >> 2] | 0) == (HEAP32[$8 >> 2] | 0)) {
     HEAP32[$7 >> 2] = $174; //@line 9904
     HEAP32[$9 >> 2] = HEAP32[$168 + 60 >> 2]; //@line 9907
    }
   }
  }
  if ($$169$off0$3 | (HEAP16[$168 + 80 >> 1] | 0) != 0) {
   STACKTOP = sp; //@line 9916
   return;
  }
 }
 if (!(HEAP32[$7 >> 2] | 0)) {
  $AsyncCtx18 = _emscripten_alloc_async_context(24, sp) | 0; //@line 9922
  $32 = __ZnwjRKSt9nothrow_t(56, 9760) | 0; //@line 9923
  if (___async) {
   HEAP32[$AsyncCtx18 >> 2] = 211; //@line 9926
   HEAP32[$AsyncCtx18 + 4 >> 2] = $$lcssa; //@line 9928
   HEAP32[$AsyncCtx18 + 8 >> 2] = $7; //@line 9930
   HEAP32[$AsyncCtx18 + 12 >> 2] = $9; //@line 9932
   HEAP32[$AsyncCtx18 + 16 >> 2] = $1; //@line 9934
   HEAP32[$AsyncCtx18 + 20 >> 2] = $8; //@line 9936
   sp = STACKTOP; //@line 9937
   STACKTOP = sp; //@line 9938
   return;
  }
  _emscripten_free_async_context($AsyncCtx18 | 0); //@line 9940
  if (!$32) {
   $AsyncCtx28 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9943
   __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa, -3007, 0); //@line 9944
   if (___async) {
    HEAP32[$AsyncCtx28 >> 2] = 213; //@line 9947
    sp = STACKTOP; //@line 9948
    STACKTOP = sp; //@line 9949
    return;
   }
   _emscripten_free_async_context($AsyncCtx28 | 0); //@line 9951
   STACKTOP = sp; //@line 9952
   return;
  }
  __ZN9UDPSocketC2Ev($32); //@line 9954
  $39 = HEAP32[$8 >> 2] | 0; //@line 9955
  $AsyncCtx35 = _emscripten_alloc_async_context(36, sp) | 0; //@line 9956
  $40 = __ZN6Socket4openEP12NetworkStack($32, $39) | 0; //@line 9957
  if (___async) {
   HEAP32[$AsyncCtx35 >> 2] = 212; //@line 9960
   HEAP32[$AsyncCtx35 + 4 >> 2] = $$lcssa; //@line 9962
   HEAP32[$AsyncCtx35 + 8 >> 2] = $7; //@line 9964
   HEAP32[$AsyncCtx35 + 12 >> 2] = $32; //@line 9966
   HEAP32[$AsyncCtx35 + 16 >> 2] = $1; //@line 9968
   HEAP32[$AsyncCtx35 + 20 >> 2] = $9; //@line 9970
   HEAP32[$AsyncCtx35 + 24 >> 2] = $32; //@line 9972
   HEAP32[$AsyncCtx35 + 28 >> 2] = $8; //@line 9974
   HEAP32[$AsyncCtx35 + 32 >> 2] = $32; //@line 9976
   sp = STACKTOP; //@line 9977
   STACKTOP = sp; //@line 9978
   return;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 9980
  if ($40 | 0) {
   $52 = HEAP32[(HEAP32[$32 >> 2] | 0) + 4 >> 2] | 0; //@line 9985
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 9986
   FUNCTION_TABLE_vi[$52 & 511]($32); //@line 9987
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 214; //@line 9990
    HEAP32[$AsyncCtx + 4 >> 2] = $$lcssa; //@line 9992
    HEAP32[$AsyncCtx + 8 >> 2] = $40; //@line 9994
    sp = STACKTOP; //@line 9995
    STACKTOP = sp; //@line 9996
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 9998
   $AsyncCtx25 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9999
   __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa, $40, 0); //@line 10000
   if (___async) {
    HEAP32[$AsyncCtx25 >> 2] = 215; //@line 10003
    sp = STACKTOP; //@line 10004
    STACKTOP = sp; //@line 10005
    return;
   }
   _emscripten_free_async_context($AsyncCtx25 | 0); //@line 10007
   STACKTOP = sp; //@line 10008
   return;
  }
  __ZN6Socket11set_timeoutEi($32, 0); //@line 10010
  $55 = HEAP32[$9 >> 2] | 0; //@line 10011
  $57 = $55; //@line 10013
  do {
   if (!$55) {
    $AsyncCtx14 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10016
    $58 = __Znwj(20) | 0; //@line 10017
    if (___async) {
     HEAP32[$AsyncCtx14 >> 2] = 216; //@line 10020
     HEAP32[$AsyncCtx14 + 4 >> 2] = $$lcssa; //@line 10022
     HEAP32[$AsyncCtx14 + 8 >> 2] = $7; //@line 10024
     HEAP32[$AsyncCtx14 + 12 >> 2] = $32; //@line 10026
     HEAP32[$AsyncCtx14 + 16 >> 2] = $9; //@line 10028
     HEAP32[$AsyncCtx14 + 20 >> 2] = $1; //@line 10030
     HEAP32[$AsyncCtx14 + 24 >> 2] = $8; //@line 10032
     HEAP32[$AsyncCtx14 + 28 >> 2] = $32; //@line 10034
     sp = STACKTOP; //@line 10035
     STACKTOP = sp; //@line 10036
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx14 | 0); //@line 10038
     HEAP32[$58 >> 2] = 0; //@line 10039
     HEAP32[$58 + 4 >> 2] = 0; //@line 10039
     HEAP32[$58 + 8 >> 2] = 0; //@line 10039
     HEAP32[$58 + 12 >> 2] = 0; //@line 10039
     HEAP32[$9 >> 2] = $58; //@line 10040
     $199 = $58; //@line 10042
     $69 = $58; //@line 10042
     break;
    }
   } else {
    $199 = $57; //@line 10046
    $69 = $55; //@line 10046
   }
  } while (0);
  $67 = $$lcssa + 32 | 0; //@line 10049
  if (($69 | 0) == ($67 | 0)) {
   $103 = $69; //@line 10052
   $105 = $199; //@line 10052
  } else {
   $70 = $69 + 12 | 0; //@line 10054
   $71 = HEAP32[$70 >> 2] | 0; //@line 10055
   do {
    if ($71 | 0) {
     $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 10060
     $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 10061
     FUNCTION_TABLE_vi[$74 & 511]($69); //@line 10062
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 217; //@line 10065
      HEAP32[$AsyncCtx2 + 4 >> 2] = $$lcssa; //@line 10067
      HEAP32[$AsyncCtx2 + 8 >> 2] = $7; //@line 10069
      HEAP32[$AsyncCtx2 + 12 >> 2] = $32; //@line 10071
      HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 10073
      HEAP32[$AsyncCtx2 + 20 >> 2] = $8; //@line 10075
      HEAP32[$AsyncCtx2 + 24 >> 2] = $32; //@line 10077
      HEAP32[$AsyncCtx2 + 28 >> 2] = $70; //@line 10079
      HEAP32[$AsyncCtx2 + 32 >> 2] = $9; //@line 10081
      HEAP32[$AsyncCtx2 + 36 >> 2] = $69; //@line 10083
      HEAP32[$AsyncCtx2 + 40 >> 2] = $67; //@line 10085
      sp = STACKTOP; //@line 10086
      STACKTOP = sp; //@line 10087
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10089
      break;
     }
    }
   } while (0);
   $85 = $$lcssa + 44 | 0; //@line 10094
   $86 = HEAP32[$85 >> 2] | 0; //@line 10095
   do {
    if (!$86) {
     $99 = 0; //@line 10099
    } else {
     $89 = HEAP32[$86 + 4 >> 2] | 0; //@line 10102
     $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10103
     FUNCTION_TABLE_vii[$89 & 7]($69, $67); //@line 10104
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 218; //@line 10107
      HEAP32[$AsyncCtx6 + 4 >> 2] = $85; //@line 10109
      HEAP32[$AsyncCtx6 + 8 >> 2] = $70; //@line 10111
      HEAP32[$AsyncCtx6 + 12 >> 2] = $9; //@line 10113
      HEAP32[$AsyncCtx6 + 16 >> 2] = $8; //@line 10115
      HEAP32[$AsyncCtx6 + 20 >> 2] = $1; //@line 10117
      HEAP32[$AsyncCtx6 + 24 >> 2] = $32; //@line 10119
      HEAP32[$AsyncCtx6 + 28 >> 2] = $7; //@line 10121
      HEAP32[$AsyncCtx6 + 32 >> 2] = $32; //@line 10123
      HEAP32[$AsyncCtx6 + 36 >> 2] = $$lcssa; //@line 10125
      sp = STACKTOP; //@line 10126
      STACKTOP = sp; //@line 10127
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10129
      $99 = HEAP32[$85 >> 2] | 0; //@line 10131
      break;
     }
    }
   } while (0);
   HEAP32[$70 >> 2] = $99; //@line 10136
   $$pre = HEAP32[$9 >> 2] | 0; //@line 10137
   $103 = $$pre; //@line 10139
   $105 = $$pre; //@line 10139
  }
  HEAP32[$103 + 16 >> 2] = HEAP32[$8 >> 2]; //@line 10143
  HEAP32[$1 + 8 >> 2] = 0; //@line 10145
  HEAP32[$1 >> 2] = 219; //@line 10146
  HEAP32[$1 + 4 >> 2] = $105; //@line 10148
  $106 = $1 + 12 | 0; //@line 10149
  HEAP32[$106 >> 2] = 764; //@line 10150
  $AsyncCtx31 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10151
  __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($32, $1); //@line 10152
  if (___async) {
   HEAP32[$AsyncCtx31 >> 2] = 220; //@line 10155
   HEAP32[$AsyncCtx31 + 4 >> 2] = $106; //@line 10157
   HEAP32[$AsyncCtx31 + 8 >> 2] = $7; //@line 10159
   HEAP32[$AsyncCtx31 + 12 >> 2] = $32; //@line 10161
   HEAP32[$AsyncCtx31 + 16 >> 2] = $1; //@line 10163
   HEAP32[$AsyncCtx31 + 20 >> 2] = $$lcssa; //@line 10165
   sp = STACKTOP; //@line 10166
   STACKTOP = sp; //@line 10167
   return;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 10169
  $112 = HEAP32[$106 >> 2] | 0; //@line 10170
  do {
   if ($112 | 0) {
    $115 = HEAP32[$112 + 8 >> 2] | 0; //@line 10175
    $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10176
    FUNCTION_TABLE_vi[$115 & 511]($1); //@line 10177
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 221; //@line 10180
     HEAP32[$AsyncCtx10 + 4 >> 2] = $7; //@line 10182
     HEAP32[$AsyncCtx10 + 8 >> 2] = $32; //@line 10184
     HEAP32[$AsyncCtx10 + 12 >> 2] = $$lcssa; //@line 10186
     sp = STACKTOP; //@line 10187
     STACKTOP = sp; //@line 10188
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10190
     break;
    }
   }
  } while (0);
  HEAP32[$7 >> 2] = $32; //@line 10195
 }
 $119 = HEAP32[$$lcssa >> 2] | 0; //@line 10197
 $AsyncCtx22 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10198
 __ZL26nsapi_dns_query_async_sendPv($119); //@line 10199
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 222; //@line 10202
  sp = STACKTOP; //@line 10203
  STACKTOP = sp; //@line 10204
  return;
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 10206
 STACKTOP = sp; //@line 10207
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa87 = 0, $$sroa_idx5$i$i = 0, $1 = 0, $107 = 0, $108 = 0, $11 = 0, $122 = 0, $125 = 0, $13 = 0, $139 = 0, $142 = 0, $15 = 0, $160 = 0, $166 = 0, $172 = 0, $181 = 0, $186 = 0, $191 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $41 = 0, $44 = 0, $61 = 0, $63 = 0, $65 = 0, $67 = 0, $8 = 0, $86 = 0, $87 = 0, $91 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11071
 STACKTOP = STACKTOP + 32 | 0; //@line 11072
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11072
 $1 = sp + 16 | 0; //@line 11073
 $2 = sp; //@line 11074
 $3 = HEAP32[1960] | 0; //@line 11075
 if (!$3) {
  label = 3; //@line 11078
 } else {
  if ((HEAP32[$3 + 8 >> 2] | 0) == ($0 | 0)) {
   $$lcssa87 = $3; //@line 11084
  } else {
   label = 3; //@line 11086
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1961] | 0; //@line 11091
   if ($8 | 0) {
    if ((HEAP32[$8 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa87 = $8; //@line 11098
     break;
    }
   }
   $181 = HEAP32[1962] | 0; //@line 11102
   if ($181 | 0) {
    if ((HEAP32[$181 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa87 = $181; //@line 11109
     break;
    }
   }
   $186 = HEAP32[1963] | 0; //@line 11113
   if ($186 | 0) {
    if ((HEAP32[$186 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa87 = $186; //@line 11120
     break;
    }
   }
   $191 = HEAP32[1964] | 0; //@line 11124
   if (!$191) {
    STACKTOP = sp; //@line 11127
    return;
   }
   if ((HEAP32[$191 + 8 >> 2] | 0) == ($0 | 0)) {
    $$lcssa87 = $191; //@line 11133
   } else {
    STACKTOP = sp; //@line 11135
    return;
   }
  }
 } while (0);
 $11 = HEAP32[$$lcssa87 + 56 >> 2] | 0; //@line 11140
 if (!$11) {
  STACKTOP = sp; //@line 11143
  return;
 }
 $13 = _malloc(512) | 0; //@line 11145
 if (!$13) {
  STACKTOP = sp; //@line 11148
  return;
 }
 $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11150
 $15 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 11151
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 242; //@line 11154
  HEAP32[$AsyncCtx20 + 4 >> 2] = $11; //@line 11156
  HEAP32[$AsyncCtx20 + 8 >> 2] = $13; //@line 11158
  HEAP32[$AsyncCtx20 + 12 >> 2] = $1; //@line 11160
  HEAP32[$AsyncCtx20 + 16 >> 2] = $2; //@line 11162
  sp = STACKTOP; //@line 11163
  STACKTOP = sp; //@line 11164
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 11166
 L28 : do {
  if (($15 | 0) >= 12) {
   $21 = $13 + 1 | 0; //@line 11170
   $22 = $1 + 12 | 0; //@line 11171
   $23 = $2 + 8 | 0; //@line 11172
   $$sroa_idx5$i$i = $2 + 4 | 0; //@line 11173
   $24 = $2 + 12 | 0; //@line 11174
   L30 : while (1) {
    $30 = (HEAPU8[$13 >> 0] | 0) << 8 | (HEAPU8[$21 >> 0] | 0); //@line 11181
    $31 = $30 & 65535; //@line 11182
    $32 = HEAP32[1960] | 0; //@line 11183
    if (!$32) {
     label = 12; //@line 11186
    } else {
     if (($30 | 0) == (HEAPU16[$32 + 80 >> 1] | 0 | 0)) {
      $$lcssa = $32; //@line 11193
      label = 13; //@line 11194
     } else {
      label = 12; //@line 11196
     }
    }
    do {
     if ((label | 0) == 12) {
      label = 0; //@line 11201
      $38 = HEAP32[1961] | 0; //@line 11202
      if ($38 | 0) {
       if (($30 | 0) == (HEAPU16[$38 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $38; //@line 11210
        label = 13; //@line 11211
        break;
       }
      }
      $160 = HEAP32[1962] | 0; //@line 11215
      if ($160 | 0) {
       if (($30 | 0) == (HEAPU16[$160 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $160; //@line 11223
        label = 13; //@line 11224
        break;
       }
      }
      $166 = HEAP32[1963] | 0; //@line 11228
      if ($166 | 0) {
       if (($30 | 0) == (HEAPU16[$166 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $166; //@line 11236
        label = 13; //@line 11237
        break;
       }
      }
      $172 = HEAP32[1964] | 0; //@line 11241
      if ($172 | 0) {
       if (($30 | 0) == (HEAPU16[$172 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $172; //@line 11249
        label = 13; //@line 11250
       }
      }
     }
    } while (0);
    do {
     if ((label | 0) == 13) {
      label = 0; //@line 11257
      $41 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 11259
      $$ = $41 >>> 0 > 1 ? $41 : 1; //@line 11261
      $AsyncCtx11 = _emscripten_alloc_async_context(68, sp) | 0; //@line 11265
      $44 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 9760) | 0; //@line 11266
      if (___async) {
       label = 14; //@line 11269
       break L30;
      }
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11272
      $61 = $$lcssa + 64 | 0; //@line 11273
      HEAP32[$61 >> 2] = $44; //@line 11274
      $63 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($13, $31, $$lcssa + 68 | 0, $44, $$) | 0; //@line 11276
      if (($63 | 0) < 0) {
       $65 = HEAP32[$61 >> 2] | 0; //@line 11279
       if ($65 | 0) {
        __ZdaPv($65); //@line 11282
       }
       HEAP32[$61 >> 2] = 0; //@line 11284
       break;
      }
      HEAP8[$$lcssa + 85 >> 0] = $63; //@line 11289
      HEAP32[$$lcssa + 4 >> 2] = -3009; //@line 11291
      HEAP32[$$lcssa + 76 >> 2] = 0; //@line 11293
      $86 = $$lcssa + 44 | 0; //@line 11294
      $87 = HEAP32[$86 >> 2] | 0; //@line 11295
      if (!$87) {
       $107 = 0; //@line 11298
      } else {
       $91 = HEAP32[$87 + 4 >> 2] | 0; //@line 11302
       $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 11303
       FUNCTION_TABLE_vii[$91 & 7]($1, $$lcssa + 32 | 0); //@line 11304
       if (___async) {
        label = 24; //@line 11307
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 11310
       $107 = HEAP32[$86 >> 2] | 0; //@line 11312
      }
      HEAP32[$22 >> 2] = $107; //@line 11314
      $108 = HEAP32[$$lcssa >> 2] | 0; //@line 11315
      HEAP32[$23 >> 2] = 0; //@line 11316
      HEAP32[$2 >> 2] = 192; //@line 11317
      HEAP32[$$sroa_idx5$i$i >> 2] = $108; //@line 11318
      HEAP32[$24 >> 2] = 764; //@line 11319
      $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11320
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 11321
      if (___async) {
       label = 27; //@line 11324
       break L30;
      }
      _emscripten_free_async_context($AsyncCtx14 | 0); //@line 11327
      $122 = HEAP32[$24 >> 2] | 0; //@line 11328
      if ($122 | 0) {
       $125 = HEAP32[$122 + 8 >> 2] | 0; //@line 11332
       $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11333
       FUNCTION_TABLE_vi[$125 & 511]($2); //@line 11334
       if (___async) {
        label = 30; //@line 11337
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11340
      }
      $139 = HEAP32[$22 >> 2] | 0; //@line 11342
      if ($139 | 0) {
       $142 = HEAP32[$139 + 8 >> 2] | 0; //@line 11346
       $AsyncCtx7 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11347
       FUNCTION_TABLE_vi[$142 & 511]($1); //@line 11348
       if (___async) {
        label = 34; //@line 11351
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11354
      }
     }
    } while (0);
    $AsyncCtx17 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11358
    $67 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 11359
    if (___async) {
     label = 20; //@line 11362
     break;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11365
    if (($67 | 0) < 12) {
     break L28;
    }
   }
   if ((label | 0) == 14) {
    HEAP32[$AsyncCtx11 >> 2] = 243; //@line 11372
    HEAP32[$AsyncCtx11 + 4 >> 2] = $11; //@line 11374
    HEAP32[$AsyncCtx11 + 8 >> 2] = $13; //@line 11376
    HEAP32[$AsyncCtx11 + 12 >> 2] = $$lcssa; //@line 11378
    HEAP32[$AsyncCtx11 + 16 >> 2] = $2; //@line 11380
    HEAP32[$AsyncCtx11 + 20 >> 2] = $21; //@line 11382
    HEAP32[$AsyncCtx11 + 24 >> 2] = $22; //@line 11384
    HEAP32[$AsyncCtx11 + 28 >> 2] = $23; //@line 11386
    HEAP32[$AsyncCtx11 + 32 >> 2] = $2; //@line 11388
    HEAP32[$AsyncCtx11 + 36 >> 2] = $$sroa_idx5$i$i; //@line 11390
    HEAP32[$AsyncCtx11 + 40 >> 2] = $24; //@line 11392
    HEAP32[$AsyncCtx11 + 44 >> 2] = $1; //@line 11394
    HEAP32[$AsyncCtx11 + 48 >> 2] = $2; //@line 11396
    HEAP32[$AsyncCtx11 + 52 >> 2] = $1; //@line 11398
    HEAP32[$AsyncCtx11 + 56 >> 2] = $22; //@line 11400
    HEAP16[$AsyncCtx11 + 60 >> 1] = $31; //@line 11402
    HEAP32[$AsyncCtx11 + 64 >> 2] = $$; //@line 11404
    sp = STACKTOP; //@line 11405
    STACKTOP = sp; //@line 11406
    return;
   } else if ((label | 0) == 20) {
    HEAP32[$AsyncCtx17 >> 2] = 244; //@line 11409
    HEAP32[$AsyncCtx17 + 4 >> 2] = $11; //@line 11411
    HEAP32[$AsyncCtx17 + 8 >> 2] = $13; //@line 11413
    HEAP32[$AsyncCtx17 + 12 >> 2] = $2; //@line 11415
    HEAP32[$AsyncCtx17 + 16 >> 2] = $21; //@line 11417
    HEAP32[$AsyncCtx17 + 20 >> 2] = $22; //@line 11419
    HEAP32[$AsyncCtx17 + 24 >> 2] = $23; //@line 11421
    HEAP32[$AsyncCtx17 + 28 >> 2] = $2; //@line 11423
    HEAP32[$AsyncCtx17 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11425
    HEAP32[$AsyncCtx17 + 36 >> 2] = $24; //@line 11427
    HEAP32[$AsyncCtx17 + 40 >> 2] = $1; //@line 11429
    HEAP32[$AsyncCtx17 + 44 >> 2] = $2; //@line 11431
    HEAP32[$AsyncCtx17 + 48 >> 2] = $1; //@line 11433
    HEAP32[$AsyncCtx17 + 52 >> 2] = $22; //@line 11435
    sp = STACKTOP; //@line 11436
    STACKTOP = sp; //@line 11437
    return;
   } else if ((label | 0) == 24) {
    HEAP32[$AsyncCtx >> 2] = 245; //@line 11440
    HEAP32[$AsyncCtx + 4 >> 2] = $11; //@line 11442
    HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 11444
    HEAP32[$AsyncCtx + 12 >> 2] = $86; //@line 11446
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 11448
    HEAP32[$AsyncCtx + 20 >> 2] = $21; //@line 11450
    HEAP32[$AsyncCtx + 24 >> 2] = $22; //@line 11452
    HEAP32[$AsyncCtx + 28 >> 2] = $$lcssa; //@line 11454
    HEAP32[$AsyncCtx + 32 >> 2] = $23; //@line 11456
    HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 11458
    HEAP32[$AsyncCtx + 40 >> 2] = $$sroa_idx5$i$i; //@line 11460
    HEAP32[$AsyncCtx + 44 >> 2] = $24; //@line 11462
    HEAP32[$AsyncCtx + 48 >> 2] = $1; //@line 11464
    HEAP32[$AsyncCtx + 52 >> 2] = $2; //@line 11466
    HEAP32[$AsyncCtx + 56 >> 2] = $1; //@line 11468
    HEAP32[$AsyncCtx + 60 >> 2] = $22; //@line 11470
    sp = STACKTOP; //@line 11471
    STACKTOP = sp; //@line 11472
    return;
   } else if ((label | 0) == 27) {
    HEAP32[$AsyncCtx14 >> 2] = 246; //@line 11475
    HEAP32[$AsyncCtx14 + 4 >> 2] = $11; //@line 11477
    HEAP32[$AsyncCtx14 + 8 >> 2] = $13; //@line 11479
    HEAP32[$AsyncCtx14 + 12 >> 2] = $2; //@line 11481
    HEAP32[$AsyncCtx14 + 16 >> 2] = $21; //@line 11483
    HEAP32[$AsyncCtx14 + 20 >> 2] = $22; //@line 11485
    HEAP32[$AsyncCtx14 + 24 >> 2] = $23; //@line 11487
    HEAP32[$AsyncCtx14 + 28 >> 2] = $2; //@line 11489
    HEAP32[$AsyncCtx14 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11491
    HEAP32[$AsyncCtx14 + 36 >> 2] = $24; //@line 11493
    HEAP32[$AsyncCtx14 + 40 >> 2] = $1; //@line 11495
    HEAP32[$AsyncCtx14 + 44 >> 2] = $2; //@line 11497
    HEAP32[$AsyncCtx14 + 48 >> 2] = $1; //@line 11499
    HEAP32[$AsyncCtx14 + 52 >> 2] = $22; //@line 11501
    sp = STACKTOP; //@line 11502
    STACKTOP = sp; //@line 11503
    return;
   } else if ((label | 0) == 30) {
    HEAP32[$AsyncCtx3 >> 2] = 247; //@line 11506
    HEAP32[$AsyncCtx3 + 4 >> 2] = $11; //@line 11508
    HEAP32[$AsyncCtx3 + 8 >> 2] = $13; //@line 11510
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 11512
    HEAP32[$AsyncCtx3 + 16 >> 2] = $21; //@line 11514
    HEAP32[$AsyncCtx3 + 20 >> 2] = $22; //@line 11516
    HEAP32[$AsyncCtx3 + 24 >> 2] = $23; //@line 11518
    HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 11520
    HEAP32[$AsyncCtx3 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11522
    HEAP32[$AsyncCtx3 + 36 >> 2] = $24; //@line 11524
    HEAP32[$AsyncCtx3 + 40 >> 2] = $1; //@line 11526
    HEAP32[$AsyncCtx3 + 44 >> 2] = $2; //@line 11528
    HEAP32[$AsyncCtx3 + 48 >> 2] = $1; //@line 11530
    HEAP32[$AsyncCtx3 + 52 >> 2] = $22; //@line 11532
    sp = STACKTOP; //@line 11533
    STACKTOP = sp; //@line 11534
    return;
   } else if ((label | 0) == 34) {
    HEAP32[$AsyncCtx7 >> 2] = 248; //@line 11537
    HEAP32[$AsyncCtx7 + 4 >> 2] = $11; //@line 11539
    HEAP32[$AsyncCtx7 + 8 >> 2] = $13; //@line 11541
    HEAP32[$AsyncCtx7 + 12 >> 2] = $2; //@line 11543
    HEAP32[$AsyncCtx7 + 16 >> 2] = $21; //@line 11545
    HEAP32[$AsyncCtx7 + 20 >> 2] = $22; //@line 11547
    HEAP32[$AsyncCtx7 + 24 >> 2] = $23; //@line 11549
    HEAP32[$AsyncCtx7 + 28 >> 2] = $2; //@line 11551
    HEAP32[$AsyncCtx7 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11553
    HEAP32[$AsyncCtx7 + 36 >> 2] = $24; //@line 11555
    HEAP32[$AsyncCtx7 + 40 >> 2] = $1; //@line 11557
    HEAP32[$AsyncCtx7 + 44 >> 2] = $2; //@line 11559
    HEAP32[$AsyncCtx7 + 48 >> 2] = $1; //@line 11561
    HEAP32[$AsyncCtx7 + 52 >> 2] = $22; //@line 11563
    sp = STACKTOP; //@line 11564
    STACKTOP = sp; //@line 11565
    return;
   }
  }
 } while (0);
 _free($13); //@line 11569
 STACKTOP = sp; //@line 11570
 return;
}
function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $153 = 0, $155 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
 $5 = $0 + 4 | 0; //@line 7915
 $6 = HEAP32[$5 >> 2] | 0; //@line 7916
 $7 = $0 + 100 | 0; //@line 7917
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1; //@line 7922
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 7925
  $$0142 = 0; //@line 7925
 } else {
  $$0 = ___shgetc($0) | 0; //@line 7928
  $$0142 = 0; //@line 7928
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8; //@line 7933
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0; //@line 7941
    $$0148 = 0; //@line 7941
    $$0152 = 1.0; //@line 7941
    $$0155 = 0.0; //@line 7941
    $$0159 = 0; //@line 7941
    $$2 = $$0; //@line 7941
    $$2144 = $$0142; //@line 7941
    $51 = 0; //@line 7941
    $53 = 0; //@line 7941
    $96 = 0; //@line 7941
    $98 = 0; //@line 7941
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0; //@line 7945
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1; //@line 7950
   $$0 = HEAPU8[$14 >> 0] | 0; //@line 7953
   $$0142 = 1; //@line 7953
   continue;
  } else {
   $$0 = ___shgetc($0) | 0; //@line 7957
   $$0142 = 1; //@line 7957
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0; //@line 7962
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1; //@line 7967
   $$1$ph = HEAPU8[$21 >> 0] | 0; //@line 7970
  } else {
   $$1$ph = ___shgetc($0) | 0; //@line 7973
  }
  if (($$1$ph | 0) == 48) {
   $36 = 0; //@line 7977
   $37 = 0; //@line 7977
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0; //@line 7979
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1; //@line 7984
     $41 = HEAPU8[$29 >> 0] | 0; //@line 7987
    } else {
     $41 = ___shgetc($0) | 0; //@line 7990
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0; //@line 7992
    $39 = tempRet0; //@line 7993
    if (($41 | 0) == 48) {
     $36 = $38; //@line 7996
     $37 = $39; //@line 7996
    } else {
     $$0146 = 1; //@line 7998
     $$0148 = 0; //@line 7998
     $$0152 = 1.0; //@line 7998
     $$0155 = 0.0; //@line 7998
     $$0159 = 0; //@line 7998
     $$2 = $41; //@line 7998
     $$2144 = 1; //@line 7998
     $51 = 0; //@line 7998
     $53 = 0; //@line 7998
     $96 = $38; //@line 7998
     $98 = $39; //@line 7998
     break;
    }
   }
  } else {
   $$0146 = 1; //@line 8003
   $$0148 = 0; //@line 8003
   $$0152 = 1.0; //@line 8003
   $$0155 = 0.0; //@line 8003
   $$0159 = 0; //@line 8003
   $$2 = $$1$ph; //@line 8003
   $$2144 = $$0142; //@line 8003
   $51 = 0; //@line 8003
   $53 = 0; //@line 8003
   $96 = 0; //@line 8003
   $98 = 0; //@line 8003
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0; //@line 8007
  $$pre = $$2 | 32; //@line 8009
  if ($42 >>> 0 < 10) {
   label = 20; //@line 8011
  } else {
   $46 = ($$2 | 0) == 46; //@line 8015
   if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$2$lcssa = $$2; //@line 8018
    break;
   }
   if ($46) {
    if (!$$0146) {
     $$1147 = 1; //@line 8024
     $$2150 = $$0148; //@line 8024
     $$2154 = $$0152; //@line 8024
     $$2157 = $$0155; //@line 8024
     $$2161 = $$0159; //@line 8024
     $$3145 = $$2144; //@line 8024
     $211 = $53; //@line 8024
     $212 = $51; //@line 8024
     $213 = $53; //@line 8024
     $214 = $51; //@line 8024
    } else {
     $$2$lcssa = 46; //@line 8026
     break;
    }
   } else {
    label = 20; //@line 8030
   }
  }
  if ((label | 0) == 20) {
   label = 0; //@line 8034
   $$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42; //@line 8037
   do {
    if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
     $$1149 = $$0148; //@line 8047
     $$1153 = $$0152; //@line 8047
     $$1156 = $$0155; //@line 8047
     $$1160 = $$0133 + ($$0159 << 4) | 0; //@line 8047
    } else {
     if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
      $65 = $$0152 * .0625; //@line 8056
      $$1149 = $$0148; //@line 8059
      $$1153 = $65; //@line 8059
      $$1156 = $$0155 + $65 * +($$0133 | 0); //@line 8059
      $$1160 = $$0159; //@line 8059
      break;
     } else {
      $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0; //@line 8064
      $$1149 = $or$cond ? $$0148 : 1; //@line 8069
      $$1153 = $$0152; //@line 8069
      $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5; //@line 8069
      $$1160 = $$0159; //@line 8069
      break;
     }
    }
   } while (0);
   $72 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0; //@line 8074
   $$1147 = $$0146; //@line 8076
   $$2150 = $$1149; //@line 8076
   $$2154 = $$1153; //@line 8076
   $$2157 = $$1156; //@line 8076
   $$2161 = $$1160; //@line 8076
   $$3145 = 1; //@line 8076
   $211 = $96; //@line 8076
   $212 = $98; //@line 8076
   $213 = $72; //@line 8076
   $214 = tempRet0; //@line 8076
  }
  $74 = HEAP32[$5 >> 2] | 0; //@line 8078
  if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $74 + 1; //@line 8083
   $$0146 = $$1147; //@line 8086
   $$0148 = $$2150; //@line 8086
   $$0152 = $$2154; //@line 8086
   $$0155 = $$2157; //@line 8086
   $$0159 = $$2161; //@line 8086
   $$2 = HEAPU8[$74 >> 0] | 0; //@line 8086
   $$2144 = $$3145; //@line 8086
   $51 = $214; //@line 8086
   $53 = $213; //@line 8086
   $96 = $211; //@line 8086
   $98 = $212; //@line 8086
   continue;
  } else {
   $$0146 = $$1147; //@line 8090
   $$0148 = $$2150; //@line 8090
   $$0152 = $$2154; //@line 8090
   $$0155 = $$2157; //@line 8090
   $$0159 = $$2161; //@line 8090
   $$2 = ___shgetc($0) | 0; //@line 8090
   $$2144 = $$3145; //@line 8090
   $51 = $214; //@line 8090
   $53 = $213; //@line 8090
   $96 = $211; //@line 8090
   $98 = $212; //@line 8090
   continue;
  }
 }
 do {
  if (!$$2144) {
   $83 = (HEAP32[$7 >> 2] | 0) == 0; //@line 8098
   if (!$83) {
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8102
   }
   if (!$4) {
    ___shlim($0, 0); //@line 8106
   } else {
    if (!$83) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8111
    }
    if (!(($$0146 | 0) == 0 | $83)) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8118
    }
   }
   $$0165 = +($3 | 0) * 0.0; //@line 8123
  } else {
   $94 = ($$0146 | 0) == 0; //@line 8125
   $95 = $94 ? $53 : $96; //@line 8126
   $97 = $94 ? $51 : $98; //@line 8127
   if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$3162183 = $$0159; //@line 8134
    $105 = $53; //@line 8134
    $106 = $51; //@line 8134
    while (1) {
     $104 = $$3162183 << 4; //@line 8136
     $105$looptemp = $105;
     $105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 8137
     if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
      $$3162$lcssa = $104; //@line 8147
      break;
     } else {
      $$3162183 = $104; //@line 8145
      $106 = tempRet0; //@line 8145
     }
    }
   } else {
    $$3162$lcssa = $$0159; //@line 8152
   }
   if (($$2$lcssa | 32 | 0) == 112) {
    $116 = _scanexp($0, $4) | 0; //@line 8157
    $117 = tempRet0; //@line 8158
    if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
     if (!$4) {
      ___shlim($0, 0); //@line 8165
      $$0165 = 0.0; //@line 8166
      break;
     }
     if (!(HEAP32[$7 >> 2] | 0)) {
      $134 = 0; //@line 8172
      $135 = 0; //@line 8172
     } else {
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8176
      $134 = 0; //@line 8177
      $135 = 0; //@line 8177
     }
    } else {
     $134 = $116; //@line 8180
     $135 = $117; //@line 8180
    }
   } else {
    if (!(HEAP32[$7 >> 2] | 0)) {
     $134 = 0; //@line 8186
     $135 = 0; //@line 8186
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8190
     $134 = 0; //@line 8191
     $135 = 0; //@line 8191
    }
   }
   $130 = _bitshift64Shl($95 | 0, $97 | 0, 2) | 0; //@line 8194
   $132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0; //@line 8196
   $136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0; //@line 8198
   $137 = tempRet0; //@line 8199
   if (!$$3162$lcssa) {
    $$0165 = +($3 | 0) * 0.0; //@line 8204
    break;
   }
   $141 = 0 - $2 | 0; //@line 8207
   $143 = (($141 | 0) < 0) << 31 >> 31; //@line 8209
   if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8217
    $$0165 = +($3 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8221
    break;
   }
   $153 = $2 + -106 | 0; //@line 8224
   $155 = (($153 | 0) < 0) << 31 >> 31; //@line 8226
   if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8234
    $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8238
    break;
   }
   if (($$3162$lcssa | 0) > -1) {
    $$3158179 = $$0155; //@line 8243
    $$4163178 = $$3162$lcssa; //@line 8243
    $170 = $136; //@line 8243
    $171 = $137; //@line 8243
    while (1) {
     $166 = !($$3158179 >= .5); //@line 8245
     $$5164 = $$4163178 << 1 | ($166 ^ 1) & 1; //@line 8250
     $$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0); //@line 8252
     $172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0; //@line 8253
     $173 = tempRet0; //@line 8254
     if (($$5164 | 0) > -1) {
      $$3158179 = $$4; //@line 8257
      $$4163178 = $$5164; //@line 8257
      $170 = $172; //@line 8257
      $171 = $173; //@line 8257
     } else {
      $$3158$lcssa = $$4; //@line 8259
      $$4163$lcssa = $$5164; //@line 8259
      $181 = $172; //@line 8259
      $182 = $173; //@line 8259
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155; //@line 8264
    $$4163$lcssa = $$3162$lcssa; //@line 8264
    $181 = $136; //@line 8264
    $182 = $137; //@line 8264
   }
   $176 = (($1 | 0) < 0) << 31 >> 31; //@line 8267
   $179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0; //@line 8270
   $183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0; //@line 8272
   $184 = tempRet0; //@line 8273
   if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) {
    if (($183 | 0) > 0) {
     $$0166 = $183; //@line 8282
     label = 59; //@line 8283
    } else {
     $$0166170 = 0; //@line 8285
     $194 = 84; //@line 8285
     label = 61; //@line 8286
    }
   } else {
    $$0166 = $1; //@line 8289
    label = 59; //@line 8290
   }
   if ((label | 0) == 59) {
    if (($$0166 | 0) < 53) {
     $$0166170 = $$0166; //@line 8296
     $194 = 84 - $$0166 | 0; //@line 8296
     label = 61; //@line 8297
    } else {
     $$0151 = 0.0; //@line 8300
     $$0166169 = $$0166; //@line 8300
     $$pre$phi201Z2D = +($3 | 0); //@line 8300
    }
   }
   if ((label | 0) == 61) {
    $193 = +($3 | 0); //@line 8304
    $$0151 = +_copysignl(+_scalbn(1.0, $194), $193); //@line 8307
    $$0166169 = $$0166170; //@line 8307
    $$pre$phi201Z2D = $193; //@line 8307
   }
   $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32); //@line 8314
   $207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151; //@line 8323
   if (!($207 != 0.0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8327
   }
   $$0165 = +_scalbnl($207, $181); //@line 8330
  }
 } while (0);
 return +$$0165;
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12956
 STACKTOP = STACKTOP + 1056 | 0; //@line 12957
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 12957
 $2 = sp + 1024 | 0; //@line 12958
 $3 = sp; //@line 12959
 HEAP32[$2 >> 2] = 0; //@line 12960
 HEAP32[$2 + 4 >> 2] = 0; //@line 12960
 HEAP32[$2 + 8 >> 2] = 0; //@line 12960
 HEAP32[$2 + 12 >> 2] = 0; //@line 12960
 HEAP32[$2 + 16 >> 2] = 0; //@line 12960
 HEAP32[$2 + 20 >> 2] = 0; //@line 12960
 HEAP32[$2 + 24 >> 2] = 0; //@line 12960
 HEAP32[$2 + 28 >> 2] = 0; //@line 12960
 $4 = HEAP8[$1 >> 0] | 0; //@line 12961
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 12965
   $$0185$ph$lcssa327 = -1; //@line 12965
   $$0187219$ph325326 = 0; //@line 12965
   $$1176$ph$ph$lcssa208 = 1; //@line 12965
   $$1186$ph$lcssa = -1; //@line 12965
   label = 26; //@line 12966
  } else {
   $$0187263 = 0; //@line 12968
   $10 = $4; //@line 12968
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 12974
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 12982
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 12985
    $$0187263 = $$0187263 + 1 | 0; //@line 12986
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 12989
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 12991
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 12999
   if ($23) {
    $$0183$ph260 = 0; //@line 13001
    $$0185$ph259 = -1; //@line 13001
    $130 = 1; //@line 13001
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 13003
     $$0183$ph197$ph253 = $$0183$ph260; //@line 13003
     $131 = $130; //@line 13003
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 13005
      $132 = $131; //@line 13005
      L10 : while (1) {
       $$0179242 = 1; //@line 13007
       $25 = $132; //@line 13007
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 13011
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 13013
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 13019
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 13023
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 13028
         $$0185$ph$lcssa = $$0185$ph259; //@line 13028
         break L6;
        } else {
         $25 = $27; //@line 13026
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 13032
       $132 = $37 + 1 | 0; //@line 13033
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 13038
        $$0185$ph$lcssa = $$0185$ph259; //@line 13038
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 13036
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 13043
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 13047
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 13052
       $$0185$ph$lcssa = $$0185$ph259; //@line 13052
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 13050
       $$0183$ph197$ph253 = $25; //@line 13050
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 13057
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 13062
      $$0185$ph$lcssa = $$0183$ph197248; //@line 13062
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 13060
      $$0185$ph259 = $$0183$ph197248; //@line 13060
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 13067
     $$1186$ph238 = -1; //@line 13067
     $133 = 1; //@line 13067
     while (1) {
      $$1176$ph$ph233 = 1; //@line 13069
      $$1184$ph193$ph232 = $$1184$ph239; //@line 13069
      $135 = $133; //@line 13069
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 13071
       $134 = $135; //@line 13071
       L25 : while (1) {
        $$1180222 = 1; //@line 13073
        $52 = $134; //@line 13073
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 13077
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 13079
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 13085
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 13089
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13094
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13094
          $$0187219$ph325326 = $$0187263; //@line 13094
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 13094
          $$1186$ph$lcssa = $$1186$ph238; //@line 13094
          label = 26; //@line 13095
          break L1;
         } else {
          $52 = $45; //@line 13092
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 13099
        $134 = $56 + 1 | 0; //@line 13100
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13105
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13105
         $$0187219$ph325326 = $$0187263; //@line 13105
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 13105
         $$1186$ph$lcssa = $$1186$ph238; //@line 13105
         label = 26; //@line 13106
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 13103
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 13111
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 13115
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13120
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13120
        $$0187219$ph325326 = $$0187263; //@line 13120
        $$1176$ph$ph$lcssa208 = $60; //@line 13120
        $$1186$ph$lcssa = $$1186$ph238; //@line 13120
        label = 26; //@line 13121
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 13118
        $$1184$ph193$ph232 = $52; //@line 13118
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 13126
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13131
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13131
       $$0187219$ph325326 = $$0187263; //@line 13131
       $$1176$ph$ph$lcssa208 = 1; //@line 13131
       $$1186$ph$lcssa = $$1184$ph193227; //@line 13131
       label = 26; //@line 13132
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 13129
       $$1186$ph238 = $$1184$ph193227; //@line 13129
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13137
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13137
     $$0187219$ph325326 = $$0187263; //@line 13137
     $$1176$ph$ph$lcssa208 = 1; //@line 13137
     $$1186$ph$lcssa = -1; //@line 13137
     label = 26; //@line 13138
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 13141
    $$0185$ph$lcssa327 = -1; //@line 13141
    $$0187219$ph325326 = $$0187263; //@line 13141
    $$1176$ph$ph$lcssa208 = 1; //@line 13141
    $$1186$ph$lcssa = -1; //@line 13141
    label = 26; //@line 13142
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 13150
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 13151
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 13152
   $70 = $$1186$$0185 + 1 | 0; //@line 13154
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 13159
    $$3178 = $$1176$$0175; //@line 13159
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 13162
    $$0168 = 0; //@line 13166
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 13166
   }
   $78 = $$0187219$ph325326 | 63; //@line 13168
   $79 = $$0187219$ph325326 + -1 | 0; //@line 13169
   $80 = ($$0168 | 0) != 0; //@line 13170
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 13171
   $$0166 = $0; //@line 13172
   $$0169 = 0; //@line 13172
   $$0170 = $0; //@line 13172
   while (1) {
    $83 = $$0166; //@line 13175
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 13180
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 13184
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 13191
        break L35;
       } else {
        $$3173 = $86; //@line 13194
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 13199
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 13203
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 13215
      $$2181$sink = $$0187219$ph325326; //@line 13215
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 13220
      if ($105 | 0) {
       $$0169$be = 0; //@line 13228
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 13228
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 13232
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 13234
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 13238
       } else {
        $$3182221 = $111; //@line 13240
        $$pr = $113; //@line 13240
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 13248
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 13250
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 13253
          break L54;
         } else {
          $$3182221 = $118; //@line 13256
         }
        }
        $$0169$be = 0; //@line 13260
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 13260
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 13267
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 13270
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 13279
        $$2181$sink = $$3178; //@line 13279
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 13286
    $$0169 = $$0169$be; //@line 13286
    $$0170 = $$3173; //@line 13286
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13290
 return $$3 | 0; //@line 13290
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_73($0) {
 $0 = $0 | 0;
 var $$ = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $10 = 0, $100 = 0, $102 = 0, $110 = 0, $113 = 0, $115 = 0, $12 = 0, $123 = 0, $126 = 0, $128 = 0, $136 = 0, $139 = 0, $14 = 0, $141 = 0, $155 = 0, $156 = 0, $157 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $30 = 0, $34 = 0, $35 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $49 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $77 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $ReallocAsyncCtx19 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 22218
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22220
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22222
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22224
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22226
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22228
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22230
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22232
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22236
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22238
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22240
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22242
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22246
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22248
 HEAP32[HEAP32[$0 + 52 >> 2] >> 2] = HEAP32[HEAP32[$0 + 32 >> 2] >> 2]; //@line 22250
 HEAP32[$6 + 8 >> 2] = $14; //@line 22252
 HEAP32[$6 + 48 >> 2] = $22; //@line 22254
 HEAP32[$6 + 52 >> 2] = $24; //@line 22256
 $34 = $6 + 56 | 0; //@line 22257
 HEAP32[$34 >> 2] = 0; //@line 22258
 $35 = $6 + 60 | 0; //@line 22259
 HEAP32[$35 >> 2] = 0; //@line 22260
 HEAP32[$6 + 64 >> 2] = 0; //@line 22262
 HEAP8[$6 + 82 >> 0] = 0; //@line 22264
 HEAP8[$6 + 83 >> 0] = 1; //@line 22266
 HEAP8[$6 + 84 >> 0] = 3; //@line 22268
 HEAP16[$6 + 80 >> 1] = 0; //@line 22270
 HEAP32[$6 + 76 >> 2] = 0; //@line 22272
 $42 = $6 + 72 | 0; //@line 22273
 HEAP32[$42 >> 2] = 15500; //@line 22274
 $43 = HEAP32[187] | 0; //@line 22275
 HEAP32[187] = $43 + 1; //@line 22277
 $$ = ($43 | 0) > 32767 ? 1 : $43; //@line 22279
 HEAP32[$6 >> 2] = $$; //@line 22280
 $46 = HEAP32[1960] | 0; //@line 22281
 if (!$46) {
  $$1 = 0; //@line 22284
  $100 = 0; //@line 22284
 } else {
  $49 = HEAP32[$46 + 56 >> 2] | 0; //@line 22287
  if (!$49) {
   $$1 = 1; //@line 22290
   $100 = 0; //@line 22290
  } else {
   if ((HEAP32[$46 + 8 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$34 >> 2] = $49; //@line 22296
    HEAP32[$35 >> 2] = HEAP32[$46 + 60 >> 2]; //@line 22299
    $$1 = 1; //@line 22300
    $100 = $49; //@line 22300
   } else {
    $$1 = 1; //@line 22302
    $100 = 0; //@line 22302
   }
  }
 }
 $56 = HEAP32[1961] | 0; //@line 22306
 if (!$56) {
  $$1$1 = $$1; //@line 22309
  $113 = $100; //@line 22309
 } else {
  if (!$100) {
   $102 = HEAP32[$56 + 56 >> 2] | 0; //@line 22314
   if (!$102) {
    $155 = 0; //@line 22317
   } else {
    if ((HEAP32[$56 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$34 >> 2] = $102; //@line 22323
     HEAP32[$35 >> 2] = HEAP32[$56 + 60 >> 2]; //@line 22326
     $155 = $102; //@line 22327
    } else {
     $155 = 0; //@line 22329
    }
   }
  } else {
   $155 = $100; //@line 22333
  }
  $$1$1 = $$1 + 1 | 0; //@line 22336
  $113 = $155; //@line 22336
 }
 $110 = HEAP32[1962] | 0; //@line 22338
 if (!$110) {
  $$1$2 = $$1$1; //@line 22341
  $126 = $113; //@line 22341
 } else {
  if (!$113) {
   $115 = HEAP32[$110 + 56 >> 2] | 0; //@line 22346
   if (!$115) {
    $156 = 0; //@line 22349
   } else {
    if ((HEAP32[$110 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$34 >> 2] = $115; //@line 22355
     HEAP32[$35 >> 2] = HEAP32[$110 + 60 >> 2]; //@line 22358
     $156 = $115; //@line 22359
    } else {
     $156 = 0; //@line 22361
    }
   }
  } else {
   $156 = $113; //@line 22365
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 22368
  $126 = $156; //@line 22368
 }
 $123 = HEAP32[1963] | 0; //@line 22370
 if (!$123) {
  $$1$3 = $$1$2; //@line 22373
  $139 = $126; //@line 22373
 } else {
  if (!$126) {
   $128 = HEAP32[$123 + 56 >> 2] | 0; //@line 22378
   if (!$128) {
    $157 = 0; //@line 22381
   } else {
    if ((HEAP32[$123 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$34 >> 2] = $128; //@line 22387
     HEAP32[$35 >> 2] = HEAP32[$123 + 60 >> 2]; //@line 22390
     $157 = $128; //@line 22391
    } else {
     $157 = 0; //@line 22393
    }
   }
  } else {
   $157 = $126; //@line 22397
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 22400
  $139 = $157; //@line 22400
 }
 $136 = HEAP32[1964] | 0; //@line 22402
 if (!$136) {
  HEAP32[7840 + ($10 << 2) >> 2] = $6; //@line 22406
  HEAP32[$42 >> 2] = ($$1$3 * 500 | 0) + 15500; //@line 22409
  if (!$$1$3) {
   $58 = $6 + 44 | 0; //@line 22412
   $59 = HEAP32[$58 >> 2] | 0; //@line 22413
   if (!$59) {
    $75 = $2 + 12 | 0; //@line 22416
    HEAP32[$75 >> 2] = 0; //@line 22417
    $77 = $20 + 4 | 0; //@line 22419
    HEAP32[$77 >> 2] = 0; //@line 22421
    HEAP32[$77 + 4 >> 2] = 0; //@line 22424
    HEAP32[$20 >> 2] = 3; //@line 22425
    $81 = $20 + 12 | 0; //@line 22426
    HEAP32[$81 >> 2] = 752; //@line 22427
    $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 22428
    $82 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $20) | 0; //@line 22429
    if (___async) {
     HEAP32[$ReallocAsyncCtx19 >> 2] = 179; //@line 22432
     $83 = $ReallocAsyncCtx19 + 4 | 0; //@line 22433
     HEAP32[$83 >> 2] = $2; //@line 22434
     $84 = $ReallocAsyncCtx19 + 8 | 0; //@line 22435
     HEAP32[$84 >> 2] = $6; //@line 22436
     $85 = $ReallocAsyncCtx19 + 12 | 0; //@line 22437
     HEAP32[$85 >> 2] = $4; //@line 22438
     $86 = $ReallocAsyncCtx19 + 16 | 0; //@line 22439
     HEAP32[$86 >> 2] = $8; //@line 22440
     $87 = $ReallocAsyncCtx19 + 20 | 0; //@line 22441
     HEAP32[$87 >> 2] = $12; //@line 22442
     $88 = $ReallocAsyncCtx19 + 24 | 0; //@line 22443
     HEAP32[$88 >> 2] = $58; //@line 22444
     $89 = $ReallocAsyncCtx19 + 28 | 0; //@line 22445
     HEAP32[$89 >> 2] = $30; //@line 22446
     $90 = $ReallocAsyncCtx19 + 32 | 0; //@line 22447
     HEAP32[$90 >> 2] = $6; //@line 22448
     $91 = $ReallocAsyncCtx19 + 36 | 0; //@line 22449
     HEAP32[$91 >> 2] = $58; //@line 22450
     $92 = $ReallocAsyncCtx19 + 40 | 0; //@line 22451
     HEAP32[$92 >> 2] = $18; //@line 22452
     $93 = $ReallocAsyncCtx19 + 44 | 0; //@line 22453
     HEAP32[$93 >> 2] = $75; //@line 22454
     $94 = $ReallocAsyncCtx19 + 48 | 0; //@line 22455
     HEAP32[$94 >> 2] = $28; //@line 22456
     $95 = $ReallocAsyncCtx19 + 52 | 0; //@line 22457
     HEAP32[$95 >> 2] = $20; //@line 22458
     $96 = $ReallocAsyncCtx19 + 56 | 0; //@line 22459
     HEAP32[$96 >> 2] = $81; //@line 22460
     sp = STACKTOP; //@line 22461
     return;
    }
    HEAP32[___async_retval >> 2] = $82; //@line 22465
    ___async_unwind = 0; //@line 22466
    HEAP32[$ReallocAsyncCtx19 >> 2] = 179; //@line 22467
    $83 = $ReallocAsyncCtx19 + 4 | 0; //@line 22468
    HEAP32[$83 >> 2] = $2; //@line 22469
    $84 = $ReallocAsyncCtx19 + 8 | 0; //@line 22470
    HEAP32[$84 >> 2] = $6; //@line 22471
    $85 = $ReallocAsyncCtx19 + 12 | 0; //@line 22472
    HEAP32[$85 >> 2] = $4; //@line 22473
    $86 = $ReallocAsyncCtx19 + 16 | 0; //@line 22474
    HEAP32[$86 >> 2] = $8; //@line 22475
    $87 = $ReallocAsyncCtx19 + 20 | 0; //@line 22476
    HEAP32[$87 >> 2] = $12; //@line 22477
    $88 = $ReallocAsyncCtx19 + 24 | 0; //@line 22478
    HEAP32[$88 >> 2] = $58; //@line 22479
    $89 = $ReallocAsyncCtx19 + 28 | 0; //@line 22480
    HEAP32[$89 >> 2] = $30; //@line 22481
    $90 = $ReallocAsyncCtx19 + 32 | 0; //@line 22482
    HEAP32[$90 >> 2] = $6; //@line 22483
    $91 = $ReallocAsyncCtx19 + 36 | 0; //@line 22484
    HEAP32[$91 >> 2] = $58; //@line 22485
    $92 = $ReallocAsyncCtx19 + 40 | 0; //@line 22486
    HEAP32[$92 >> 2] = $18; //@line 22487
    $93 = $ReallocAsyncCtx19 + 44 | 0; //@line 22488
    HEAP32[$93 >> 2] = $75; //@line 22489
    $94 = $ReallocAsyncCtx19 + 48 | 0; //@line 22490
    HEAP32[$94 >> 2] = $28; //@line 22491
    $95 = $ReallocAsyncCtx19 + 52 | 0; //@line 22492
    HEAP32[$95 >> 2] = $20; //@line 22493
    $96 = $ReallocAsyncCtx19 + 56 | 0; //@line 22494
    HEAP32[$96 >> 2] = $81; //@line 22495
    sp = STACKTOP; //@line 22496
    return;
   } else {
    $62 = HEAP32[$59 + 4 >> 2] | 0; //@line 22500
    $ReallocAsyncCtx6 = _emscripten_realloc_async_context(52) | 0; //@line 22501
    FUNCTION_TABLE_vii[$62 & 7]($2, $12); //@line 22502
    if (___async) {
     HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 22505
     $63 = $ReallocAsyncCtx6 + 4 | 0; //@line 22506
     HEAP32[$63 >> 2] = $2; //@line 22507
     $64 = $ReallocAsyncCtx6 + 8 | 0; //@line 22508
     HEAP32[$64 >> 2] = $6; //@line 22509
     $65 = $ReallocAsyncCtx6 + 12 | 0; //@line 22510
     HEAP32[$65 >> 2] = $4; //@line 22511
     $66 = $ReallocAsyncCtx6 + 16 | 0; //@line 22512
     HEAP32[$66 >> 2] = $8; //@line 22513
     $67 = $ReallocAsyncCtx6 + 20 | 0; //@line 22514
     HEAP32[$67 >> 2] = $12; //@line 22515
     $68 = $ReallocAsyncCtx6 + 24 | 0; //@line 22516
     HEAP32[$68 >> 2] = $58; //@line 22517
     $69 = $ReallocAsyncCtx6 + 28 | 0; //@line 22518
     HEAP32[$69 >> 2] = $6; //@line 22519
     $70 = $ReallocAsyncCtx6 + 32 | 0; //@line 22520
     HEAP32[$70 >> 2] = $58; //@line 22521
     $71 = $ReallocAsyncCtx6 + 36 | 0; //@line 22522
     HEAP32[$71 >> 2] = $18; //@line 22523
     $72 = $ReallocAsyncCtx6 + 40 | 0; //@line 22524
     HEAP32[$72 >> 2] = $20; //@line 22525
     $73 = $ReallocAsyncCtx6 + 44 | 0; //@line 22526
     HEAP32[$73 >> 2] = $28; //@line 22527
     $74 = $ReallocAsyncCtx6 + 48 | 0; //@line 22528
     HEAP32[$74 >> 2] = $30; //@line 22529
     sp = STACKTOP; //@line 22530
     return;
    }
    ___async_unwind = 0; //@line 22533
    HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 22534
    $63 = $ReallocAsyncCtx6 + 4 | 0; //@line 22535
    HEAP32[$63 >> 2] = $2; //@line 22536
    $64 = $ReallocAsyncCtx6 + 8 | 0; //@line 22537
    HEAP32[$64 >> 2] = $6; //@line 22538
    $65 = $ReallocAsyncCtx6 + 12 | 0; //@line 22539
    HEAP32[$65 >> 2] = $4; //@line 22540
    $66 = $ReallocAsyncCtx6 + 16 | 0; //@line 22541
    HEAP32[$66 >> 2] = $8; //@line 22542
    $67 = $ReallocAsyncCtx6 + 20 | 0; //@line 22543
    HEAP32[$67 >> 2] = $12; //@line 22544
    $68 = $ReallocAsyncCtx6 + 24 | 0; //@line 22545
    HEAP32[$68 >> 2] = $58; //@line 22546
    $69 = $ReallocAsyncCtx6 + 28 | 0; //@line 22547
    HEAP32[$69 >> 2] = $6; //@line 22548
    $70 = $ReallocAsyncCtx6 + 32 | 0; //@line 22549
    HEAP32[$70 >> 2] = $58; //@line 22550
    $71 = $ReallocAsyncCtx6 + 36 | 0; //@line 22551
    HEAP32[$71 >> 2] = $18; //@line 22552
    $72 = $ReallocAsyncCtx6 + 40 | 0; //@line 22553
    HEAP32[$72 >> 2] = $20; //@line 22554
    $73 = $ReallocAsyncCtx6 + 44 | 0; //@line 22555
    HEAP32[$73 >> 2] = $28; //@line 22556
    $74 = $ReallocAsyncCtx6 + 48 | 0; //@line 22557
    HEAP32[$74 >> 2] = $30; //@line 22558
    sp = STACKTOP; //@line 22559
    return;
   }
  }
 } else {
  if (!$139) {
   $141 = HEAP32[$136 + 56 >> 2] | 0; //@line 22567
   if ($141 | 0) {
    if ((HEAP32[$136 + 8 >> 2] | 0) == ($14 | 0)) {
     HEAP32[$34 >> 2] = $141; //@line 22574
     HEAP32[$35 >> 2] = HEAP32[$136 + 60 >> 2]; //@line 22577
    }
   }
  }
  HEAP32[7840 + ($10 << 2) >> 2] = $6; //@line 22582
  HEAP32[$42 >> 2] = ($$1$3 * 500 | 0) + 16e3; //@line 22585
 }
 HEAP32[___async_retval >> 2] = $$; //@line 22588
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$010 = 0, $$012 = 0, $$111 = 0, $$byval_copy42 = 0, $102 = 0, $105 = 0, $11 = 0, $110 = 0, $113 = 0, $14 = 0, $15 = 0, $21 = 0, $22 = 0, $26 = 0, $27 = 0, $4 = 0, $42 = 0, $5 = 0, $52 = 0, $53 = 0, $56 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $72 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $92 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 2759
 STACKTOP = STACKTOP + 224 | 0; //@line 2760
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 2760
 $$byval_copy42 = sp + 204 | 0; //@line 2761
 $4 = sp + 120 | 0; //@line 2762
 $5 = sp + 184 | 0; //@line 2763
 $6 = sp + 56 | 0; //@line 2764
 $7 = sp + 32 | 0; //@line 2765
 $8 = sp + 16 | 0; //@line 2766
 $9 = sp; //@line 2767
 HEAP32[$5 >> 2] = 0; //@line 2768
 HEAP32[$5 + 4 >> 2] = 0; //@line 2768
 HEAP32[$5 + 8 >> 2] = 0; //@line 2768
 HEAP32[$5 + 12 >> 2] = 0; //@line 2768
 HEAP32[$5 + 16 >> 2] = 0; //@line 2768
 HEAP32[$$byval_copy42 >> 2] = HEAP32[$5 >> 2]; //@line 2769
 HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 2769
 HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 2769
 HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 2769
 HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 2769
 __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy42, 0); //@line 2770
 $11 = ($3 | 0) == 0; //@line 2772
 if (__ZN13SocketAddress14set_ip_addressEPKc($4, $1) | 0) {
  if (!$11) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($4) | 0) != ($3 | 0)) {
    $$012 = -3009; //@line 2778
    STACKTOP = sp; //@line 2779
    return $$012 | 0; //@line 2779
   }
  }
  $14 = $2 + 12 | 0; //@line 2782
  $15 = HEAP32[$14 >> 2] | 0; //@line 2783
  do {
   if (!$15) {
    $AsyncCtx31 = _emscripten_alloc_async_context(20, sp) | 0; //@line 2787
    _mbed_assert_internal(4029, 4034, 1677); //@line 2788
    if (___async) {
     HEAP32[$AsyncCtx31 >> 2] = 91; //@line 2791
     HEAP32[$AsyncCtx31 + 4 >> 2] = $14; //@line 2793
     HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 2795
     HEAP32[$AsyncCtx31 + 12 >> 2] = $4; //@line 2797
     HEAP32[$AsyncCtx31 + 16 >> 2] = $4; //@line 2799
     sp = STACKTOP; //@line 2800
     STACKTOP = sp; //@line 2801
     return 0; //@line 2801
    } else {
     _emscripten_free_async_context($AsyncCtx31 | 0); //@line 2803
     $22 = HEAP32[$14 >> 2] | 0; //@line 2805
     break;
    }
   } else {
    $22 = $15; //@line 2809
   }
  } while (0);
  $21 = HEAP32[$22 >> 2] | 0; //@line 2812
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2813
  FUNCTION_TABLE_viii[$21 & 0]($2, 0, $4); //@line 2814
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 92; //@line 2817
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 2819
   sp = STACKTOP; //@line 2820
   STACKTOP = sp; //@line 2821
   return 0; //@line 2821
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2823
  $$012 = 0; //@line 2824
  STACKTOP = sp; //@line 2825
  return $$012 | 0; //@line 2825
 }
 if ($11) {
  HEAP32[$7 >> 2] = 0; //@line 2828
  HEAP32[$7 + 4 >> 2] = 0; //@line 2828
  HEAP32[$7 + 8 >> 2] = 0; //@line 2828
  HEAP32[$7 + 12 >> 2] = 0; //@line 2828
  HEAP32[$7 + 16 >> 2] = 0; //@line 2828
  HEAP32[$$byval_copy42 >> 2] = HEAP32[$7 >> 2]; //@line 2829
  HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 2829
  HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 2829
  HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 2829
  HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 2829
  __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy42, 0); //@line 2830
  $26 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 2833
  $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 2834
  $27 = FUNCTION_TABLE_ii[$26 & 31]($0) | 0; //@line 2835
  if (___async) {
   HEAP32[$AsyncCtx2 >> 2] = 93; //@line 2838
   HEAP32[$AsyncCtx2 + 4 >> 2] = $6; //@line 2840
   HEAP32[$AsyncCtx2 + 8 >> 2] = $9; //@line 2842
   HEAP32[$AsyncCtx2 + 12 >> 2] = $8; //@line 2844
   HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 2846
   HEAP32[$AsyncCtx2 + 20 >> 2] = $4; //@line 2848
   HEAP32[$AsyncCtx2 + 24 >> 2] = $6; //@line 2850
   HEAP32[$AsyncCtx2 + 28 >> 2] = $3; //@line 2852
   HEAP32[$AsyncCtx2 + 32 >> 2] = $$byval_copy42; //@line 2854
   HEAP32[$AsyncCtx2 + 36 >> 2] = $0; //@line 2856
   HEAP32[$AsyncCtx2 + 40 >> 2] = $1; //@line 2858
   sp = STACKTOP; //@line 2859
   STACKTOP = sp; //@line 2860
   return 0; //@line 2860
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2862
  if (__ZN13SocketAddress14set_ip_addressEPKc($6, $27) | 0) {
   $$010 = __ZNK13SocketAddress14get_ip_versionEv($6) | 0; //@line 2866
  } else {
   $$010 = 0; //@line 2868
  }
  $$111 = $$010; //@line 2870
 } else {
  $$111 = $3; //@line 2872
 }
 $42 = HEAP32[(HEAP32[$0 >> 2] | 0) + 96 >> 2] | 0; //@line 2876
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 2877
 FUNCTION_TABLE_vii[$42 & 7]($$byval_copy42, $0); //@line 2878
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 94; //@line 2881
  HEAP32[$AsyncCtx6 + 4 >> 2] = $9; //@line 2883
  HEAP32[$AsyncCtx6 + 8 >> 2] = $8; //@line 2885
  HEAP32[$AsyncCtx6 + 12 >> 2] = $2; //@line 2887
  HEAP32[$AsyncCtx6 + 16 >> 2] = $$byval_copy42; //@line 2889
  HEAP32[$AsyncCtx6 + 20 >> 2] = $4; //@line 2891
  HEAP32[$AsyncCtx6 + 24 >> 2] = $$byval_copy42; //@line 2893
  HEAP32[$AsyncCtx6 + 28 >> 2] = $0; //@line 2895
  HEAP32[$AsyncCtx6 + 32 >> 2] = $1; //@line 2897
  HEAP32[$AsyncCtx6 + 36 >> 2] = $$111; //@line 2899
  sp = STACKTOP; //@line 2900
  STACKTOP = sp; //@line 2901
  return 0; //@line 2901
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2903
 $52 = $2 + 12 | 0; //@line 2904
 $53 = HEAP32[$52 >> 2] | 0; //@line 2905
 do {
  if (!$53) {
   $67 = 0; //@line 2909
  } else {
   $56 = HEAP32[$53 + 4 >> 2] | 0; //@line 2912
   $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 2913
   FUNCTION_TABLE_vii[$56 & 7]($8, $2); //@line 2914
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 95; //@line 2917
    HEAP32[$AsyncCtx9 + 4 >> 2] = $9; //@line 2919
    HEAP32[$AsyncCtx9 + 8 >> 2] = $8; //@line 2921
    HEAP32[$AsyncCtx9 + 12 >> 2] = $$byval_copy42; //@line 2923
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 2925
    HEAP32[$AsyncCtx9 + 20 >> 2] = $52; //@line 2927
    HEAP32[$AsyncCtx9 + 24 >> 2] = $$byval_copy42; //@line 2929
    HEAP32[$AsyncCtx9 + 28 >> 2] = $0; //@line 2931
    HEAP32[$AsyncCtx9 + 32 >> 2] = $1; //@line 2933
    HEAP32[$AsyncCtx9 + 36 >> 2] = $$111; //@line 2935
    sp = STACKTOP; //@line 2936
    STACKTOP = sp; //@line 2937
    return 0; //@line 2937
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 2939
    $67 = HEAP32[$52 >> 2] | 0; //@line 2941
    break;
   }
  }
 } while (0);
 $66 = $8 + 12 | 0; //@line 2946
 HEAP32[$66 >> 2] = $67; //@line 2947
 $68 = $$byval_copy42 + 12 | 0; //@line 2948
 $69 = HEAP32[$68 >> 2] | 0; //@line 2949
 do {
  if (!$69) {
   $83 = 0; //@line 2953
  } else {
   $72 = HEAP32[$69 + 4 >> 2] | 0; //@line 2956
   $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 2957
   FUNCTION_TABLE_vii[$72 & 7]($9, $$byval_copy42); //@line 2958
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 96; //@line 2961
    HEAP32[$AsyncCtx12 + 4 >> 2] = $9; //@line 2963
    HEAP32[$AsyncCtx12 + 8 >> 2] = $66; //@line 2965
    HEAP32[$AsyncCtx12 + 12 >> 2] = $8; //@line 2967
    HEAP32[$AsyncCtx12 + 16 >> 2] = $68; //@line 2969
    HEAP32[$AsyncCtx12 + 20 >> 2] = $$byval_copy42; //@line 2971
    HEAP32[$AsyncCtx12 + 24 >> 2] = $4; //@line 2973
    HEAP32[$AsyncCtx12 + 28 >> 2] = $0; //@line 2975
    HEAP32[$AsyncCtx12 + 32 >> 2] = $1; //@line 2977
    HEAP32[$AsyncCtx12 + 36 >> 2] = $$111; //@line 2979
    sp = STACKTOP; //@line 2980
    STACKTOP = sp; //@line 2981
    return 0; //@line 2981
   } else {
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 2983
    $83 = HEAP32[$68 >> 2] | 0; //@line 2985
    break;
   }
  }
 } while (0);
 $82 = $9 + 12 | 0; //@line 2990
 HEAP32[$82 >> 2] = $83; //@line 2991
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2992
 $84 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $8, $9, $$111) | 0; //@line 2993
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 97; //@line 2996
  HEAP32[$AsyncCtx27 + 4 >> 2] = $82; //@line 2998
  HEAP32[$AsyncCtx27 + 8 >> 2] = $66; //@line 3000
  HEAP32[$AsyncCtx27 + 12 >> 2] = $9; //@line 3002
  HEAP32[$AsyncCtx27 + 16 >> 2] = $68; //@line 3004
  HEAP32[$AsyncCtx27 + 20 >> 2] = $8; //@line 3006
  HEAP32[$AsyncCtx27 + 24 >> 2] = $$byval_copy42; //@line 3008
  HEAP32[$AsyncCtx27 + 28 >> 2] = $4; //@line 3010
  sp = STACKTOP; //@line 3011
  STACKTOP = sp; //@line 3012
  return 0; //@line 3012
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 3014
 $92 = HEAP32[$82 >> 2] | 0; //@line 3015
 do {
  if ($92 | 0) {
   $95 = HEAP32[$92 + 8 >> 2] | 0; //@line 3020
   $AsyncCtx16 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3021
   FUNCTION_TABLE_vi[$95 & 511]($9); //@line 3022
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 98; //@line 3025
    HEAP32[$AsyncCtx16 + 4 >> 2] = $66; //@line 3027
    HEAP32[$AsyncCtx16 + 8 >> 2] = $68; //@line 3029
    HEAP32[$AsyncCtx16 + 12 >> 2] = $8; //@line 3031
    HEAP32[$AsyncCtx16 + 16 >> 2] = $$byval_copy42; //@line 3033
    HEAP32[$AsyncCtx16 + 20 >> 2] = $84; //@line 3035
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 3037
    sp = STACKTOP; //@line 3038
    STACKTOP = sp; //@line 3039
    return 0; //@line 3039
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 3041
    break;
   }
  }
 } while (0);
 $102 = HEAP32[$66 >> 2] | 0; //@line 3046
 do {
  if ($102 | 0) {
   $105 = HEAP32[$102 + 8 >> 2] | 0; //@line 3051
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3052
   FUNCTION_TABLE_vi[$105 & 511]($8); //@line 3053
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 99; //@line 3056
    HEAP32[$AsyncCtx20 + 4 >> 2] = $68; //@line 3058
    HEAP32[$AsyncCtx20 + 8 >> 2] = $$byval_copy42; //@line 3060
    HEAP32[$AsyncCtx20 + 12 >> 2] = $84; //@line 3062
    HEAP32[$AsyncCtx20 + 16 >> 2] = $4; //@line 3064
    sp = STACKTOP; //@line 3065
    STACKTOP = sp; //@line 3066
    return 0; //@line 3066
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 3068
    break;
   }
  }
 } while (0);
 $110 = HEAP32[$68 >> 2] | 0; //@line 3073
 do {
  if ($110 | 0) {
   $113 = HEAP32[$110 + 8 >> 2] | 0; //@line 3078
   $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3079
   FUNCTION_TABLE_vi[$113 & 511]($$byval_copy42); //@line 3080
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 100; //@line 3083
    HEAP32[$AsyncCtx24 + 4 >> 2] = $$byval_copy42; //@line 3085
    HEAP32[$AsyncCtx24 + 8 >> 2] = $84; //@line 3087
    HEAP32[$AsyncCtx24 + 12 >> 2] = $4; //@line 3089
    sp = STACKTOP; //@line 3090
    STACKTOP = sp; //@line 3091
    return 0; //@line 3091
   } else {
    _emscripten_free_async_context($AsyncCtx24 | 0); //@line 3093
    break;
   }
  }
 } while (0);
 $$012 = $84; //@line 3098
 STACKTOP = sp; //@line 3099
 return $$012 | 0; //@line 3099
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_75($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 22682
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22684
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22686
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22688
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22690
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22692
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22694
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22696
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22698
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22700
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22706
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22708
 $27 = (HEAP32[$0 + 40 >> 2] | 0) == 0; //@line 22709
 $28 = HEAP32[HEAP32[$0 + 44 >> 2] >> 2] | 0; //@line 22710
 if ($28 | 0) {
  $31 = HEAP32[$28 + 8 >> 2] | 0; //@line 22714
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(48) | 0; //@line 22715
  FUNCTION_TABLE_vi[$31 & 511]($2); //@line 22716
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 22719
   $32 = $ReallocAsyncCtx8 + 4 | 0; //@line 22720
   $$expand_i1_val = $27 & 1; //@line 22721
   HEAP8[$32 >> 0] = $$expand_i1_val; //@line 22722
   $33 = $ReallocAsyncCtx8 + 8 | 0; //@line 22723
   HEAP32[$33 >> 2] = $4; //@line 22724
   $34 = $ReallocAsyncCtx8 + 12 | 0; //@line 22725
   HEAP32[$34 >> 2] = $6; //@line 22726
   $35 = $ReallocAsyncCtx8 + 16 | 0; //@line 22727
   HEAP32[$35 >> 2] = $8; //@line 22728
   $36 = $ReallocAsyncCtx8 + 20 | 0; //@line 22729
   HEAP32[$36 >> 2] = $10; //@line 22730
   $37 = $ReallocAsyncCtx8 + 24 | 0; //@line 22731
   HEAP32[$37 >> 2] = $12; //@line 22732
   $38 = $ReallocAsyncCtx8 + 28 | 0; //@line 22733
   HEAP32[$38 >> 2] = $14; //@line 22734
   $39 = $ReallocAsyncCtx8 + 32 | 0; //@line 22735
   HEAP32[$39 >> 2] = $16; //@line 22736
   $40 = $ReallocAsyncCtx8 + 36 | 0; //@line 22737
   HEAP32[$40 >> 2] = $18; //@line 22738
   $41 = $ReallocAsyncCtx8 + 40 | 0; //@line 22739
   HEAP32[$41 >> 2] = $24; //@line 22740
   $42 = $ReallocAsyncCtx8 + 44 | 0; //@line 22741
   HEAP32[$42 >> 2] = $26; //@line 22742
   sp = STACKTOP; //@line 22743
   return;
  }
  ___async_unwind = 0; //@line 22746
  HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 22747
  $32 = $ReallocAsyncCtx8 + 4 | 0; //@line 22748
  $$expand_i1_val = $27 & 1; //@line 22749
  HEAP8[$32 >> 0] = $$expand_i1_val; //@line 22750
  $33 = $ReallocAsyncCtx8 + 8 | 0; //@line 22751
  HEAP32[$33 >> 2] = $4; //@line 22752
  $34 = $ReallocAsyncCtx8 + 12 | 0; //@line 22753
  HEAP32[$34 >> 2] = $6; //@line 22754
  $35 = $ReallocAsyncCtx8 + 16 | 0; //@line 22755
  HEAP32[$35 >> 2] = $8; //@line 22756
  $36 = $ReallocAsyncCtx8 + 20 | 0; //@line 22757
  HEAP32[$36 >> 2] = $10; //@line 22758
  $37 = $ReallocAsyncCtx8 + 24 | 0; //@line 22759
  HEAP32[$37 >> 2] = $12; //@line 22760
  $38 = $ReallocAsyncCtx8 + 28 | 0; //@line 22761
  HEAP32[$38 >> 2] = $14; //@line 22762
  $39 = $ReallocAsyncCtx8 + 32 | 0; //@line 22763
  HEAP32[$39 >> 2] = $16; //@line 22764
  $40 = $ReallocAsyncCtx8 + 36 | 0; //@line 22765
  HEAP32[$40 >> 2] = $18; //@line 22766
  $41 = $ReallocAsyncCtx8 + 40 | 0; //@line 22767
  HEAP32[$41 >> 2] = $24; //@line 22768
  $42 = $ReallocAsyncCtx8 + 44 | 0; //@line 22769
  HEAP32[$42 >> 2] = $26; //@line 22770
  sp = STACKTOP; //@line 22771
  return;
 }
 if ($27) {
  $59 = HEAP32[$12 >> 2] | 0; //@line 22775
  if (!$59) {
   $73 = $18 + 12 | 0; //@line 22778
   HEAP32[$73 >> 2] = 0; //@line 22779
   $74 = HEAP32[$14 >> 2] | 0; //@line 22780
   HEAP32[$24 + 8 >> 2] = 0; //@line 22782
   HEAP32[$24 >> 2] = 185; //@line 22783
   HEAP32[$24 + 4 >> 2] = $74; //@line 22785
   $76 = $24 + 12 | 0; //@line 22786
   HEAP32[$76 >> 2] = 764; //@line 22787
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(48) | 0; //@line 22788
   $77 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 0, $24) | 0; //@line 22789
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 186; //@line 22792
    $78 = $ReallocAsyncCtx18 + 4 | 0; //@line 22793
    HEAP32[$78 >> 2] = $76; //@line 22794
    $79 = $ReallocAsyncCtx18 + 8 | 0; //@line 22795
    HEAP32[$79 >> 2] = $4; //@line 22796
    $80 = $ReallocAsyncCtx18 + 12 | 0; //@line 22797
    HEAP32[$80 >> 2] = $8; //@line 22798
    $81 = $ReallocAsyncCtx18 + 16 | 0; //@line 22799
    HEAP32[$81 >> 2] = $14; //@line 22800
    $82 = $ReallocAsyncCtx18 + 20 | 0; //@line 22801
    HEAP32[$82 >> 2] = $26; //@line 22802
    $83 = $ReallocAsyncCtx18 + 24 | 0; //@line 22803
    HEAP32[$83 >> 2] = $73; //@line 22804
    $84 = $ReallocAsyncCtx18 + 28 | 0; //@line 22805
    HEAP32[$84 >> 2] = $18; //@line 22806
    $85 = $ReallocAsyncCtx18 + 32 | 0; //@line 22807
    HEAP32[$85 >> 2] = $12; //@line 22808
    $86 = $ReallocAsyncCtx18 + 36 | 0; //@line 22809
    HEAP32[$86 >> 2] = $10; //@line 22810
    $87 = $ReallocAsyncCtx18 + 40 | 0; //@line 22811
    HEAP32[$87 >> 2] = $6; //@line 22812
    $88 = $ReallocAsyncCtx18 + 44 | 0; //@line 22813
    HEAP32[$88 >> 2] = $24; //@line 22814
    sp = STACKTOP; //@line 22815
    return;
   }
   HEAP32[___async_retval >> 2] = $77; //@line 22819
   ___async_unwind = 0; //@line 22820
   HEAP32[$ReallocAsyncCtx18 >> 2] = 186; //@line 22821
   $78 = $ReallocAsyncCtx18 + 4 | 0; //@line 22822
   HEAP32[$78 >> 2] = $76; //@line 22823
   $79 = $ReallocAsyncCtx18 + 8 | 0; //@line 22824
   HEAP32[$79 >> 2] = $4; //@line 22825
   $80 = $ReallocAsyncCtx18 + 12 | 0; //@line 22826
   HEAP32[$80 >> 2] = $8; //@line 22827
   $81 = $ReallocAsyncCtx18 + 16 | 0; //@line 22828
   HEAP32[$81 >> 2] = $14; //@line 22829
   $82 = $ReallocAsyncCtx18 + 20 | 0; //@line 22830
   HEAP32[$82 >> 2] = $26; //@line 22831
   $83 = $ReallocAsyncCtx18 + 24 | 0; //@line 22832
   HEAP32[$83 >> 2] = $73; //@line 22833
   $84 = $ReallocAsyncCtx18 + 28 | 0; //@line 22834
   HEAP32[$84 >> 2] = $18; //@line 22835
   $85 = $ReallocAsyncCtx18 + 32 | 0; //@line 22836
   HEAP32[$85 >> 2] = $12; //@line 22837
   $86 = $ReallocAsyncCtx18 + 36 | 0; //@line 22838
   HEAP32[$86 >> 2] = $10; //@line 22839
   $87 = $ReallocAsyncCtx18 + 40 | 0; //@line 22840
   HEAP32[$87 >> 2] = $6; //@line 22841
   $88 = $ReallocAsyncCtx18 + 44 | 0; //@line 22842
   HEAP32[$88 >> 2] = $24; //@line 22843
   sp = STACKTOP; //@line 22844
   return;
  } else {
   $62 = HEAP32[$59 + 4 >> 2] | 0; //@line 22848
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(44) | 0; //@line 22849
   FUNCTION_TABLE_vii[$62 & 7]($18, $10); //@line 22850
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 184; //@line 22853
    $63 = $ReallocAsyncCtx11 + 4 | 0; //@line 22854
    HEAP32[$63 >> 2] = $4; //@line 22855
    $64 = $ReallocAsyncCtx11 + 8 | 0; //@line 22856
    HEAP32[$64 >> 2] = $8; //@line 22857
    $65 = $ReallocAsyncCtx11 + 12 | 0; //@line 22858
    HEAP32[$65 >> 2] = $14; //@line 22859
    $66 = $ReallocAsyncCtx11 + 16 | 0; //@line 22860
    HEAP32[$66 >> 2] = $16; //@line 22861
    $67 = $ReallocAsyncCtx11 + 20 | 0; //@line 22862
    HEAP32[$67 >> 2] = $18; //@line 22863
    $68 = $ReallocAsyncCtx11 + 24 | 0; //@line 22864
    HEAP32[$68 >> 2] = $12; //@line 22865
    $69 = $ReallocAsyncCtx11 + 28 | 0; //@line 22866
    HEAP32[$69 >> 2] = $10; //@line 22867
    $70 = $ReallocAsyncCtx11 + 32 | 0; //@line 22868
    HEAP32[$70 >> 2] = $6; //@line 22869
    $71 = $ReallocAsyncCtx11 + 36 | 0; //@line 22870
    HEAP32[$71 >> 2] = $24; //@line 22871
    $72 = $ReallocAsyncCtx11 + 40 | 0; //@line 22872
    HEAP32[$72 >> 2] = $26; //@line 22873
    sp = STACKTOP; //@line 22874
    return;
   }
   ___async_unwind = 0; //@line 22877
   HEAP32[$ReallocAsyncCtx11 >> 2] = 184; //@line 22878
   $63 = $ReallocAsyncCtx11 + 4 | 0; //@line 22879
   HEAP32[$63 >> 2] = $4; //@line 22880
   $64 = $ReallocAsyncCtx11 + 8 | 0; //@line 22881
   HEAP32[$64 >> 2] = $8; //@line 22882
   $65 = $ReallocAsyncCtx11 + 12 | 0; //@line 22883
   HEAP32[$65 >> 2] = $14; //@line 22884
   $66 = $ReallocAsyncCtx11 + 16 | 0; //@line 22885
   HEAP32[$66 >> 2] = $16; //@line 22886
   $67 = $ReallocAsyncCtx11 + 20 | 0; //@line 22887
   HEAP32[$67 >> 2] = $18; //@line 22888
   $68 = $ReallocAsyncCtx11 + 24 | 0; //@line 22889
   HEAP32[$68 >> 2] = $12; //@line 22890
   $69 = $ReallocAsyncCtx11 + 28 | 0; //@line 22891
   HEAP32[$69 >> 2] = $10; //@line 22892
   $70 = $ReallocAsyncCtx11 + 32 | 0; //@line 22893
   HEAP32[$70 >> 2] = $6; //@line 22894
   $71 = $ReallocAsyncCtx11 + 36 | 0; //@line 22895
   HEAP32[$71 >> 2] = $24; //@line 22896
   $72 = $ReallocAsyncCtx11 + 40 | 0; //@line 22897
   HEAP32[$72 >> 2] = $26; //@line 22898
   sp = STACKTOP; //@line 22899
   return;
  }
 }
 $43 = HEAP32[$6 >> 2] | 0; //@line 22903
 if ($43 | 0) {
  __ZdlPv($43); //@line 22906
 }
 $45 = HEAP32[$12 >> 2] | 0; //@line 22908
 if ($45 | 0) {
  $48 = HEAP32[$45 + 8 >> 2] | 0; //@line 22912
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 22913
  FUNCTION_TABLE_vi[$48 & 511]($10); //@line 22914
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 22917
   $49 = $ReallocAsyncCtx9 + 4 | 0; //@line 22918
   HEAP32[$49 >> 2] = $4; //@line 22919
   $50 = $ReallocAsyncCtx9 + 8 | 0; //@line 22920
   HEAP32[$50 >> 2] = $8; //@line 22921
   $51 = $ReallocAsyncCtx9 + 12 | 0; //@line 22922
   HEAP32[$51 >> 2] = $26; //@line 22923
   sp = STACKTOP; //@line 22924
   return;
  }
  ___async_unwind = 0; //@line 22927
  HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 22928
  $49 = $ReallocAsyncCtx9 + 4 | 0; //@line 22929
  HEAP32[$49 >> 2] = $4; //@line 22930
  $50 = $ReallocAsyncCtx9 + 8 | 0; //@line 22931
  HEAP32[$50 >> 2] = $8; //@line 22932
  $51 = $ReallocAsyncCtx9 + 12 | 0; //@line 22933
  HEAP32[$51 >> 2] = $26; //@line 22934
  sp = STACKTOP; //@line 22935
  return;
 }
 $53 = HEAP32[$4 + 28 >> 2] | 0; //@line 22939
 if (!$53) {
  __ZdlPv($4); //@line 22942
  HEAP32[___async_retval >> 2] = -3007; //@line 22944
  return;
 }
 $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 22948
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 22949
 FUNCTION_TABLE_vi[$56 & 511]($8); //@line 22950
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 22953
  $57 = $ReallocAsyncCtx10 + 4 | 0; //@line 22954
  HEAP32[$57 >> 2] = $4; //@line 22955
  $58 = $ReallocAsyncCtx10 + 8 | 0; //@line 22956
  HEAP32[$58 >> 2] = $26; //@line 22957
  sp = STACKTOP; //@line 22958
  return;
 }
 ___async_unwind = 0; //@line 22961
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 22962
 $57 = $ReallocAsyncCtx10 + 4 | 0; //@line 22963
 HEAP32[$57 >> 2] = $4; //@line 22964
 $58 = $ReallocAsyncCtx10 + 8 | 0; //@line 22965
 HEAP32[$58 >> 2] = $26; //@line 22966
 sp = STACKTOP; //@line 22967
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_171($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12427
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12429
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12431
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12433
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12435
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12437
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12439
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12441
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12443
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12445
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12447
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12449
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12451
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12453
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12455
 $30 = HEAP16[$0 + 60 >> 1] | 0; //@line 12457
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 12459
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12461
 $34 = $6 + 64 | 0; //@line 12462
 HEAP32[$34 >> 2] = $AsyncRetVal; //@line 12463
 $36 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($4, $30, $6 + 68 | 0, $AsyncRetVal, $32) | 0; //@line 12465
 if (($36 | 0) < 0) {
  $38 = HEAP32[$34 >> 2] | 0; //@line 12468
  if ($38 | 0) {
   __ZdaPv($38); //@line 12471
  }
  HEAP32[$34 >> 2] = 0; //@line 12473
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 12474
  $40 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($2, 0, $4, 512) | 0; //@line 12475
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 12478
   $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 12479
   HEAP32[$41 >> 2] = $2; //@line 12480
   $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 12481
   HEAP32[$42 >> 2] = $4; //@line 12482
   $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 12483
   HEAP32[$43 >> 2] = $8; //@line 12484
   $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 12485
   HEAP32[$44 >> 2] = $10; //@line 12486
   $45 = $ReallocAsyncCtx6 + 20 | 0; //@line 12487
   HEAP32[$45 >> 2] = $12; //@line 12488
   $46 = $ReallocAsyncCtx6 + 24 | 0; //@line 12489
   HEAP32[$46 >> 2] = $14; //@line 12490
   $47 = $ReallocAsyncCtx6 + 28 | 0; //@line 12491
   HEAP32[$47 >> 2] = $16; //@line 12492
   $48 = $ReallocAsyncCtx6 + 32 | 0; //@line 12493
   HEAP32[$48 >> 2] = $18; //@line 12494
   $49 = $ReallocAsyncCtx6 + 36 | 0; //@line 12495
   HEAP32[$49 >> 2] = $20; //@line 12496
   $50 = $ReallocAsyncCtx6 + 40 | 0; //@line 12497
   HEAP32[$50 >> 2] = $22; //@line 12498
   $51 = $ReallocAsyncCtx6 + 44 | 0; //@line 12499
   HEAP32[$51 >> 2] = $24; //@line 12500
   $52 = $ReallocAsyncCtx6 + 48 | 0; //@line 12501
   HEAP32[$52 >> 2] = $26; //@line 12502
   $53 = $ReallocAsyncCtx6 + 52 | 0; //@line 12503
   HEAP32[$53 >> 2] = $28; //@line 12504
   sp = STACKTOP; //@line 12505
   return;
  }
  HEAP32[___async_retval >> 2] = $40; //@line 12509
  ___async_unwind = 0; //@line 12510
  HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 12511
  $41 = $ReallocAsyncCtx6 + 4 | 0; //@line 12512
  HEAP32[$41 >> 2] = $2; //@line 12513
  $42 = $ReallocAsyncCtx6 + 8 | 0; //@line 12514
  HEAP32[$42 >> 2] = $4; //@line 12515
  $43 = $ReallocAsyncCtx6 + 12 | 0; //@line 12516
  HEAP32[$43 >> 2] = $8; //@line 12517
  $44 = $ReallocAsyncCtx6 + 16 | 0; //@line 12518
  HEAP32[$44 >> 2] = $10; //@line 12519
  $45 = $ReallocAsyncCtx6 + 20 | 0; //@line 12520
  HEAP32[$45 >> 2] = $12; //@line 12521
  $46 = $ReallocAsyncCtx6 + 24 | 0; //@line 12522
  HEAP32[$46 >> 2] = $14; //@line 12523
  $47 = $ReallocAsyncCtx6 + 28 | 0; //@line 12524
  HEAP32[$47 >> 2] = $16; //@line 12525
  $48 = $ReallocAsyncCtx6 + 32 | 0; //@line 12526
  HEAP32[$48 >> 2] = $18; //@line 12527
  $49 = $ReallocAsyncCtx6 + 36 | 0; //@line 12528
  HEAP32[$49 >> 2] = $20; //@line 12529
  $50 = $ReallocAsyncCtx6 + 40 | 0; //@line 12530
  HEAP32[$50 >> 2] = $22; //@line 12531
  $51 = $ReallocAsyncCtx6 + 44 | 0; //@line 12532
  HEAP32[$51 >> 2] = $24; //@line 12533
  $52 = $ReallocAsyncCtx6 + 48 | 0; //@line 12534
  HEAP32[$52 >> 2] = $26; //@line 12535
  $53 = $ReallocAsyncCtx6 + 52 | 0; //@line 12536
  HEAP32[$53 >> 2] = $28; //@line 12537
  sp = STACKTOP; //@line 12538
  return;
 }
 HEAP8[$6 + 85 >> 0] = $36; //@line 12543
 HEAP32[$6 + 4 >> 2] = -3009; //@line 12545
 HEAP32[$6 + 76 >> 2] = 0; //@line 12547
 $59 = $6 + 44 | 0; //@line 12548
 $60 = HEAP32[$59 >> 2] | 0; //@line 12549
 if (!$60) {
  HEAP32[$12 >> 2] = 0; //@line 12552
  $80 = HEAP32[$6 >> 2] | 0; //@line 12553
  HEAP32[$14 >> 2] = 0; //@line 12554
  HEAP32[$16 >> 2] = 192; //@line 12555
  HEAP32[$18 >> 2] = $80; //@line 12556
  HEAP32[$20 >> 2] = 764; //@line 12557
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 12558
  __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 12559
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 246; //@line 12562
   $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 12563
   HEAP32[$81 >> 2] = $2; //@line 12564
   $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 12565
   HEAP32[$82 >> 2] = $4; //@line 12566
   $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 12567
   HEAP32[$83 >> 2] = $8; //@line 12568
   $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 12569
   HEAP32[$84 >> 2] = $10; //@line 12570
   $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 12571
   HEAP32[$85 >> 2] = $12; //@line 12572
   $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 12573
   HEAP32[$86 >> 2] = $14; //@line 12574
   $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 12575
   HEAP32[$87 >> 2] = $16; //@line 12576
   $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 12577
   HEAP32[$88 >> 2] = $18; //@line 12578
   $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 12579
   HEAP32[$89 >> 2] = $20; //@line 12580
   $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 12581
   HEAP32[$90 >> 2] = $22; //@line 12582
   $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 12583
   HEAP32[$91 >> 2] = $24; //@line 12584
   $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 12585
   HEAP32[$92 >> 2] = $26; //@line 12586
   $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 12587
   HEAP32[$93 >> 2] = $28; //@line 12588
   sp = STACKTOP; //@line 12589
   return;
  }
  ___async_unwind = 0; //@line 12592
  HEAP32[$ReallocAsyncCtx5 >> 2] = 246; //@line 12593
  $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 12594
  HEAP32[$81 >> 2] = $2; //@line 12595
  $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 12596
  HEAP32[$82 >> 2] = $4; //@line 12597
  $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 12598
  HEAP32[$83 >> 2] = $8; //@line 12599
  $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 12600
  HEAP32[$84 >> 2] = $10; //@line 12601
  $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 12602
  HEAP32[$85 >> 2] = $12; //@line 12603
  $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 12604
  HEAP32[$86 >> 2] = $14; //@line 12605
  $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 12606
  HEAP32[$87 >> 2] = $16; //@line 12607
  $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 12608
  HEAP32[$88 >> 2] = $18; //@line 12609
  $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 12610
  HEAP32[$89 >> 2] = $20; //@line 12611
  $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 12612
  HEAP32[$90 >> 2] = $22; //@line 12613
  $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 12614
  HEAP32[$91 >> 2] = $24; //@line 12615
  $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 12616
  HEAP32[$92 >> 2] = $26; //@line 12617
  $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 12618
  HEAP32[$93 >> 2] = $28; //@line 12619
  sp = STACKTOP; //@line 12620
  return;
 } else {
  $64 = HEAP32[$60 + 4 >> 2] | 0; //@line 12625
  $ReallocAsyncCtx = _emscripten_realloc_async_context(64) | 0; //@line 12626
  FUNCTION_TABLE_vii[$64 & 7]($26, $6 + 32 | 0); //@line 12627
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 245; //@line 12630
   $65 = $ReallocAsyncCtx + 4 | 0; //@line 12631
   HEAP32[$65 >> 2] = $2; //@line 12632
   $66 = $ReallocAsyncCtx + 8 | 0; //@line 12633
   HEAP32[$66 >> 2] = $4; //@line 12634
   $67 = $ReallocAsyncCtx + 12 | 0; //@line 12635
   HEAP32[$67 >> 2] = $59; //@line 12636
   $68 = $ReallocAsyncCtx + 16 | 0; //@line 12637
   HEAP32[$68 >> 2] = $8; //@line 12638
   $69 = $ReallocAsyncCtx + 20 | 0; //@line 12639
   HEAP32[$69 >> 2] = $10; //@line 12640
   $70 = $ReallocAsyncCtx + 24 | 0; //@line 12641
   HEAP32[$70 >> 2] = $12; //@line 12642
   $71 = $ReallocAsyncCtx + 28 | 0; //@line 12643
   HEAP32[$71 >> 2] = $6; //@line 12644
   $72 = $ReallocAsyncCtx + 32 | 0; //@line 12645
   HEAP32[$72 >> 2] = $14; //@line 12646
   $73 = $ReallocAsyncCtx + 36 | 0; //@line 12647
   HEAP32[$73 >> 2] = $16; //@line 12648
   $74 = $ReallocAsyncCtx + 40 | 0; //@line 12649
   HEAP32[$74 >> 2] = $18; //@line 12650
   $75 = $ReallocAsyncCtx + 44 | 0; //@line 12651
   HEAP32[$75 >> 2] = $20; //@line 12652
   $76 = $ReallocAsyncCtx + 48 | 0; //@line 12653
   HEAP32[$76 >> 2] = $22; //@line 12654
   $77 = $ReallocAsyncCtx + 52 | 0; //@line 12655
   HEAP32[$77 >> 2] = $24; //@line 12656
   $78 = $ReallocAsyncCtx + 56 | 0; //@line 12657
   HEAP32[$78 >> 2] = $26; //@line 12658
   $79 = $ReallocAsyncCtx + 60 | 0; //@line 12659
   HEAP32[$79 >> 2] = $28; //@line 12660
   sp = STACKTOP; //@line 12661
   return;
  }
  ___async_unwind = 0; //@line 12664
  HEAP32[$ReallocAsyncCtx >> 2] = 245; //@line 12665
  $65 = $ReallocAsyncCtx + 4 | 0; //@line 12666
  HEAP32[$65 >> 2] = $2; //@line 12667
  $66 = $ReallocAsyncCtx + 8 | 0; //@line 12668
  HEAP32[$66 >> 2] = $4; //@line 12669
  $67 = $ReallocAsyncCtx + 12 | 0; //@line 12670
  HEAP32[$67 >> 2] = $59; //@line 12671
  $68 = $ReallocAsyncCtx + 16 | 0; //@line 12672
  HEAP32[$68 >> 2] = $8; //@line 12673
  $69 = $ReallocAsyncCtx + 20 | 0; //@line 12674
  HEAP32[$69 >> 2] = $10; //@line 12675
  $70 = $ReallocAsyncCtx + 24 | 0; //@line 12676
  HEAP32[$70 >> 2] = $12; //@line 12677
  $71 = $ReallocAsyncCtx + 28 | 0; //@line 12678
  HEAP32[$71 >> 2] = $6; //@line 12679
  $72 = $ReallocAsyncCtx + 32 | 0; //@line 12680
  HEAP32[$72 >> 2] = $14; //@line 12681
  $73 = $ReallocAsyncCtx + 36 | 0; //@line 12682
  HEAP32[$73 >> 2] = $16; //@line 12683
  $74 = $ReallocAsyncCtx + 40 | 0; //@line 12684
  HEAP32[$74 >> 2] = $18; //@line 12685
  $75 = $ReallocAsyncCtx + 44 | 0; //@line 12686
  HEAP32[$75 >> 2] = $20; //@line 12687
  $76 = $ReallocAsyncCtx + 48 | 0; //@line 12688
  HEAP32[$76 >> 2] = $22; //@line 12689
  $77 = $ReallocAsyncCtx + 52 | 0; //@line 12690
  HEAP32[$77 >> 2] = $24; //@line 12691
  $78 = $ReallocAsyncCtx + 56 | 0; //@line 12692
  HEAP32[$78 >> 2] = $26; //@line 12693
  $79 = $ReallocAsyncCtx + 60 | 0; //@line 12694
  HEAP32[$79 >> 2] = $28; //@line 12695
  sp = STACKTOP; //@line 12696
  return;
 }
}
function __ZL26nsapi_dns_query_async_sendPv($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$byval_copy16 = 0, $$lcssa52 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $1 = 0, $10 = 0, $11 = 0, $112 = 0, $118 = 0, $122 = 0, $126 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $25 = 0, $27 = 0, $28 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $45 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $72 = 0, $75 = 0, $76 = 0, $8 = 0, $90 = 0, $92 = 0, $95 = 0, $96 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10720
 STACKTOP = STACKTOP + 112 | 0; //@line 10721
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 10721
 $$byval_copy16 = sp + 84 | 0; //@line 10722
 $1 = sp; //@line 10723
 $2 = sp + 64 | 0; //@line 10724
 $3 = $0; //@line 10725
 $4 = HEAP32[1960] | 0; //@line 10726
 if (!$4) {
  label = 3; //@line 10729
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa52 = $4; //@line 10734
  } else {
   label = 3; //@line 10736
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1961] | 0; //@line 10741
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa52 = $8; //@line 10747
     break;
    }
   }
   $118 = HEAP32[1962] | 0; //@line 10751
   if ($118 | 0) {
    if ((HEAP32[$118 >> 2] | 0) == ($3 | 0)) {
     $$lcssa52 = $118; //@line 10757
     break;
    }
   }
   $122 = HEAP32[1963] | 0; //@line 10761
   if ($122 | 0) {
    if ((HEAP32[$122 >> 2] | 0) == ($3 | 0)) {
     $$lcssa52 = $122; //@line 10767
     break;
    }
   }
   $126 = HEAP32[1964] | 0; //@line 10771
   if (!$126) {
    STACKTOP = sp; //@line 10774
    return;
   }
   if ((HEAP32[$126 >> 2] | 0) == ($3 | 0)) {
    $$lcssa52 = $126; //@line 10779
   } else {
    STACKTOP = sp; //@line 10781
    return;
   }
  }
 } while (0);
 $10 = $$lcssa52 + 83 | 0; //@line 10785
 $11 = HEAP8[$10 >> 0] | 0; //@line 10786
 if (!($11 << 24 >> 24)) {
  $14 = $$lcssa52 + 82 | 0; //@line 10789
  HEAP8[$14 >> 0] = (HEAP8[$14 >> 0] | 0) + 1 << 24 >> 24; //@line 10792
  $storemerge = 0; //@line 10793
 } else {
  $storemerge = $11 + -1 << 24 >> 24; //@line 10796
 }
 HEAP8[$10 >> 0] = $storemerge; //@line 10798
 $17 = HEAP16[1322] | 0; //@line 10799
 $18 = $17 + 1 << 16 >> 16; //@line 10800
 HEAP16[1322] = $18; //@line 10801
 $19 = $$lcssa52 + 80 | 0; //@line 10802
 HEAP16[$19 >> 1] = $17; //@line 10803
 if (!($18 << 16 >> 16)) {
  HEAP16[1322] = 1; //@line 10806
 }
 $21 = _malloc(512) | 0; //@line 10808
 if (!$21) {
  $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10811
  __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa52, -3007, 0); //@line 10812
  if (___async) {
   HEAP32[$AsyncCtx6 >> 2] = 238; //@line 10815
   sp = STACKTOP; //@line 10816
   STACKTOP = sp; //@line 10817
   return;
  }
  _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10819
  STACKTOP = sp; //@line 10820
  return;
 }
 $23 = HEAP16[$19 >> 1] | 0; //@line 10822
 $25 = HEAP32[$$lcssa52 + 12 >> 2] | 0; //@line 10824
 $27 = HEAP32[$$lcssa52 + 52 >> 2] | 0; //@line 10826
 $28 = $21; //@line 10827
 HEAP8[$21 >> 0] = ($23 & 65535) >>> 8; //@line 10831
 HEAP8[$21 + 1 >> 0] = $23; //@line 10834
 HEAP8[$21 + 2 >> 0] = 1; //@line 10836
 HEAP8[$21 + 3 >> 0] = 0; //@line 10838
 HEAP8[$21 + 4 >> 0] = 0; //@line 10840
 $37 = $21 + 6 | 0; //@line 10841
 HEAP8[$21 + 5 >> 0] = 1; //@line 10842
 $38 = $21 + 12 | 0; //@line 10843
 HEAP8[$37 >> 0] = 0; //@line 10844
 HEAP8[$37 + 1 >> 0] = 0; //@line 10844
 HEAP8[$37 + 2 >> 0] = 0; //@line 10844
 HEAP8[$37 + 3 >> 0] = 0; //@line 10844
 HEAP8[$37 + 4 >> 0] = 0; //@line 10844
 HEAP8[$37 + 5 >> 0] = 0; //@line 10844
 if (!(HEAP8[$25 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $38; //@line 10848
 } else {
  $$048$i = $25; //@line 10850
  $$sroa$0$0$in47$i = $38; //@line 10850
  while (1) {
   $41 = _strcspn($$048$i, 5126) | 0; //@line 10852
   $43 = $$sroa$0$0$in47$i + 1 | 0; //@line 10854
   HEAP8[$$sroa$0$0$in47$i >> 0] = $41; //@line 10855
   $44 = $41 & 255; //@line 10856
   _memcpy($43 | 0, $$048$i | 0, $44 | 0) | 0; //@line 10857
   $45 = $43 + $44 | 0; //@line 10858
   $$048$i = $$048$i + ($41 + ((HEAP8[$$048$i + $41 >> 0] | 0) == 46 & 1)) | 0; //@line 10864
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $45; //@line 10868
    break;
   } else {
    $$sroa$0$0$in47$i = $45; //@line 10871
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 10876
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 10879
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = ($27 | 0) == 2 ? 28 : 1; //@line 10882
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 10884
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 10887
 $61 = $$sroa$0$0$in$lcssa$i + 5 - $28 | 0; //@line 10888
 HEAP32[$2 >> 2] = 0; //@line 10889
 HEAP32[$2 + 4 >> 2] = 0; //@line 10889
 HEAP32[$2 + 8 >> 2] = 0; //@line 10889
 HEAP32[$2 + 12 >> 2] = 0; //@line 10889
 HEAP32[$2 + 16 >> 2] = 0; //@line 10889
 HEAP32[$$byval_copy16 >> 2] = HEAP32[$2 >> 2]; //@line 10890
 HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 10890
 HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 10890
 HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 10890
 HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 10890
 __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy16, 0); //@line 10891
 $62 = $$lcssa52 + 8 | 0; //@line 10892
 $63 = $$lcssa52 + 82 | 0; //@line 10893
 $64 = $$lcssa52 + 84 | 0; //@line 10894
 L37 : do {
  if (HEAP8[$64 >> 0] | 0) {
   $66 = $$lcssa52 + 56 | 0; //@line 10899
   while (1) {
    $67 = HEAP32[$62 >> 2] | 0; //@line 10901
    $68 = HEAP8[$63 >> 0] | 0; //@line 10902
    if (($68 & 255) > 9) {
     HEAP8[$63 >> 0] = 0; //@line 10905
     $72 = 0; //@line 10906
     label = 20; //@line 10907
    } else {
     if (($68 & 255) < 5) {
      $72 = $68; //@line 10911
      label = 20; //@line 10912
     } else {
      $90 = $68; //@line 10914
      label = 24; //@line 10915
     }
    }
    if ((label | 0) == 20) {
     label = 0; //@line 10919
     $75 = HEAP32[(HEAP32[$67 >> 2] | 0) + 28 >> 2] | 0; //@line 10923
     $AsyncCtx = _emscripten_alloc_async_context(48, sp) | 0; //@line 10924
     $76 = FUNCTION_TABLE_iiii[$75 & 31]($67, $72 & 255, $1) | 0; //@line 10925
     if (___async) {
      label = 21; //@line 10928
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 10931
     if (($76 | 0) < 0) {
      HEAP8[$63 >> 0] = 5; //@line 10934
      $90 = 5; //@line 10935
      label = 24; //@line 10936
     }
    }
    if ((label | 0) == 24) {
     label = 0; //@line 10940
     $92 = 648 + ((($90 & 255) + -5 | 0) * 20 | 0) | 0; //@line 10943
     HEAP32[$$byval_copy16 >> 2] = HEAP32[$92 >> 2]; //@line 10944
     HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$92 + 4 >> 2]; //@line 10944
     HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$92 + 8 >> 2]; //@line 10944
     HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$92 + 12 >> 2]; //@line 10944
     HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$92 + 16 >> 2]; //@line 10944
     __ZN13SocketAddress8set_addrE10nsapi_addr($1, $$byval_copy16); //@line 10945
    }
    __ZN13SocketAddress8set_portEt($1, 53); //@line 10947
    $95 = HEAP32[$66 >> 2] | 0; //@line 10948
    $AsyncCtx10 = _emscripten_alloc_async_context(48, sp) | 0; //@line 10949
    $96 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($95, $1, $21, $61) | 0; //@line 10950
    if (___async) {
     label = 29; //@line 10953
     break;
    }
    _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10956
    if (($96 | 0) >= 0) {
     label = 32; //@line 10959
     break;
    }
    HEAP8[$63 >> 0] = (HEAP8[$63 >> 0] | 0) + 1 << 24 >> 24; //@line 10964
    HEAP32[$2 >> 2] = 0; //@line 10965
    HEAP32[$2 + 4 >> 2] = 0; //@line 10965
    HEAP32[$2 + 8 >> 2] = 0; //@line 10965
    HEAP32[$2 + 12 >> 2] = 0; //@line 10965
    HEAP32[$2 + 16 >> 2] = 0; //@line 10965
    HEAP32[$$byval_copy16 >> 2] = HEAP32[$2 >> 2]; //@line 10966
    HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 10966
    HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 10966
    HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 10966
    HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 10966
    __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy16, 0); //@line 10967
    if (!(HEAP8[$64 >> 0] | 0)) {
     break L37;
    }
   }
   if ((label | 0) == 21) {
    HEAP32[$AsyncCtx >> 2] = 239; //@line 10975
    HEAP32[$AsyncCtx + 4 >> 2] = $$lcssa52; //@line 10977
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10979
    HEAP32[$AsyncCtx + 12 >> 2] = $66; //@line 10981
    HEAP32[$AsyncCtx + 16 >> 2] = $21; //@line 10983
    HEAP32[$AsyncCtx + 20 >> 2] = $61; //@line 10985
    HEAP32[$AsyncCtx + 24 >> 2] = $63; //@line 10987
    HEAP32[$AsyncCtx + 28 >> 2] = $1; //@line 10989
    HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 10991
    HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 10993
    HEAP32[$AsyncCtx + 40 >> 2] = $64; //@line 10995
    HEAP32[$AsyncCtx + 44 >> 2] = $62; //@line 10997
    sp = STACKTOP; //@line 10998
    STACKTOP = sp; //@line 10999
    return;
   } else if ((label | 0) == 29) {
    HEAP32[$AsyncCtx10 >> 2] = 241; //@line 11002
    HEAP32[$AsyncCtx10 + 4 >> 2] = $$lcssa52; //@line 11004
    HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 11006
    HEAP32[$AsyncCtx10 + 12 >> 2] = $66; //@line 11008
    HEAP32[$AsyncCtx10 + 16 >> 2] = $21; //@line 11010
    HEAP32[$AsyncCtx10 + 20 >> 2] = $61; //@line 11012
    HEAP32[$AsyncCtx10 + 24 >> 2] = $63; //@line 11014
    HEAP32[$AsyncCtx10 + 28 >> 2] = $1; //@line 11016
    HEAP32[$AsyncCtx10 + 32 >> 2] = $2; //@line 11018
    HEAP32[$AsyncCtx10 + 36 >> 2] = $2; //@line 11020
    HEAP32[$AsyncCtx10 + 40 >> 2] = $64; //@line 11022
    HEAP32[$AsyncCtx10 + 44 >> 2] = $62; //@line 11024
    sp = STACKTOP; //@line 11025
    STACKTOP = sp; //@line 11026
    return;
   } else if ((label | 0) == 32) {
    $112 = HEAP8[$64 >> 0] | 0; //@line 11029
    if ($112 << 24 >> 24) {
     HEAP8[$64 >> 0] = $112 + -1 << 24 >> 24; //@line 11033
    }
    _free($21); //@line 11035
    HEAP32[$$lcssa52 + 76 >> 2] = 5e3; //@line 11037
    STACKTOP = sp; //@line 11038
    return;
   }
  }
 } while (0);
 $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11042
 __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa52, -3009, 0); //@line 11043
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 240; //@line 11046
  HEAP32[$AsyncCtx2 + 4 >> 2] = $21; //@line 11048
  HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 11050
  sp = STACKTOP; //@line 11051
  STACKTOP = sp; //@line 11052
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11054
 _free($21); //@line 11055
 STACKTOP = sp; //@line 11056
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_67($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 20178
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20180
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20182
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20184
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20186
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20188
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20190
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20192
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20194
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20196
 if ($AsyncRetVal | 0) {
  $21 = HEAP32[(HEAP32[$6 >> 2] | 0) + 4 >> 2] | 0; //@line 20201
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 20202
  FUNCTION_TABLE_vi[$21 & 511]($16); //@line 20203
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 214; //@line 20206
   $22 = $ReallocAsyncCtx + 4 | 0; //@line 20207
   HEAP32[$22 >> 2] = $2; //@line 20208
   $23 = $ReallocAsyncCtx + 8 | 0; //@line 20209
   HEAP32[$23 >> 2] = $AsyncRetVal; //@line 20210
   sp = STACKTOP; //@line 20211
   return;
  }
  ___async_unwind = 0; //@line 20214
  HEAP32[$ReallocAsyncCtx >> 2] = 214; //@line 20215
  $22 = $ReallocAsyncCtx + 4 | 0; //@line 20216
  HEAP32[$22 >> 2] = $2; //@line 20217
  $23 = $ReallocAsyncCtx + 8 | 0; //@line 20218
  HEAP32[$23 >> 2] = $AsyncRetVal; //@line 20219
  sp = STACKTOP; //@line 20220
  return;
 }
 __ZN6Socket11set_timeoutEi($12, 0); //@line 20223
 $24 = HEAP32[$10 >> 2] | 0; //@line 20224
 $26 = $24; //@line 20226
 if (!$24) {
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(32) | 0; //@line 20228
  $27 = __Znwj(20) | 0; //@line 20229
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 216; //@line 20232
   $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 20233
   HEAP32[$28 >> 2] = $2; //@line 20234
   $29 = $ReallocAsyncCtx5 + 8 | 0; //@line 20235
   HEAP32[$29 >> 2] = $4; //@line 20236
   $30 = $ReallocAsyncCtx5 + 12 | 0; //@line 20237
   HEAP32[$30 >> 2] = $6; //@line 20238
   $31 = $ReallocAsyncCtx5 + 16 | 0; //@line 20239
   HEAP32[$31 >> 2] = $10; //@line 20240
   $32 = $ReallocAsyncCtx5 + 20 | 0; //@line 20241
   HEAP32[$32 >> 2] = $8; //@line 20242
   $33 = $ReallocAsyncCtx5 + 24 | 0; //@line 20243
   HEAP32[$33 >> 2] = $14; //@line 20244
   $34 = $ReallocAsyncCtx5 + 28 | 0; //@line 20245
   HEAP32[$34 >> 2] = $12; //@line 20246
   sp = STACKTOP; //@line 20247
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 20251
  ___async_unwind = 0; //@line 20252
  HEAP32[$ReallocAsyncCtx5 >> 2] = 216; //@line 20253
  $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 20254
  HEAP32[$28 >> 2] = $2; //@line 20255
  $29 = $ReallocAsyncCtx5 + 8 | 0; //@line 20256
  HEAP32[$29 >> 2] = $4; //@line 20257
  $30 = $ReallocAsyncCtx5 + 12 | 0; //@line 20258
  HEAP32[$30 >> 2] = $6; //@line 20259
  $31 = $ReallocAsyncCtx5 + 16 | 0; //@line 20260
  HEAP32[$31 >> 2] = $10; //@line 20261
  $32 = $ReallocAsyncCtx5 + 20 | 0; //@line 20262
  HEAP32[$32 >> 2] = $8; //@line 20263
  $33 = $ReallocAsyncCtx5 + 24 | 0; //@line 20264
  HEAP32[$33 >> 2] = $14; //@line 20265
  $34 = $ReallocAsyncCtx5 + 28 | 0; //@line 20266
  HEAP32[$34 >> 2] = $12; //@line 20267
  sp = STACKTOP; //@line 20268
  return;
 }
 $36 = $2 + 32 | 0; //@line 20271
 do {
  if (($24 | 0) == ($36 | 0)) {
   $70 = $24; //@line 20275
   $72 = $26; //@line 20275
  } else {
   $38 = $24 + 12 | 0; //@line 20277
   $39 = HEAP32[$38 >> 2] | 0; //@line 20278
   if ($39 | 0) {
    $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 20282
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 20283
    FUNCTION_TABLE_vi[$42 & 511]($24); //@line 20284
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 217; //@line 20287
     $43 = $ReallocAsyncCtx2 + 4 | 0; //@line 20288
     HEAP32[$43 >> 2] = $2; //@line 20289
     $44 = $ReallocAsyncCtx2 + 8 | 0; //@line 20290
     HEAP32[$44 >> 2] = $4; //@line 20291
     $45 = $ReallocAsyncCtx2 + 12 | 0; //@line 20292
     HEAP32[$45 >> 2] = $6; //@line 20293
     $46 = $ReallocAsyncCtx2 + 16 | 0; //@line 20294
     HEAP32[$46 >> 2] = $8; //@line 20295
     $47 = $ReallocAsyncCtx2 + 20 | 0; //@line 20296
     HEAP32[$47 >> 2] = $14; //@line 20297
     $48 = $ReallocAsyncCtx2 + 24 | 0; //@line 20298
     HEAP32[$48 >> 2] = $12; //@line 20299
     $49 = $ReallocAsyncCtx2 + 28 | 0; //@line 20300
     HEAP32[$49 >> 2] = $38; //@line 20301
     $50 = $ReallocAsyncCtx2 + 32 | 0; //@line 20302
     HEAP32[$50 >> 2] = $10; //@line 20303
     $51 = $ReallocAsyncCtx2 + 36 | 0; //@line 20304
     HEAP32[$51 >> 2] = $24; //@line 20305
     $52 = $ReallocAsyncCtx2 + 40 | 0; //@line 20306
     HEAP32[$52 >> 2] = $36; //@line 20307
     sp = STACKTOP; //@line 20308
     return;
    }
    ___async_unwind = 0; //@line 20311
    HEAP32[$ReallocAsyncCtx2 >> 2] = 217; //@line 20312
    $43 = $ReallocAsyncCtx2 + 4 | 0; //@line 20313
    HEAP32[$43 >> 2] = $2; //@line 20314
    $44 = $ReallocAsyncCtx2 + 8 | 0; //@line 20315
    HEAP32[$44 >> 2] = $4; //@line 20316
    $45 = $ReallocAsyncCtx2 + 12 | 0; //@line 20317
    HEAP32[$45 >> 2] = $6; //@line 20318
    $46 = $ReallocAsyncCtx2 + 16 | 0; //@line 20319
    HEAP32[$46 >> 2] = $8; //@line 20320
    $47 = $ReallocAsyncCtx2 + 20 | 0; //@line 20321
    HEAP32[$47 >> 2] = $14; //@line 20322
    $48 = $ReallocAsyncCtx2 + 24 | 0; //@line 20323
    HEAP32[$48 >> 2] = $12; //@line 20324
    $49 = $ReallocAsyncCtx2 + 28 | 0; //@line 20325
    HEAP32[$49 >> 2] = $38; //@line 20326
    $50 = $ReallocAsyncCtx2 + 32 | 0; //@line 20327
    HEAP32[$50 >> 2] = $10; //@line 20328
    $51 = $ReallocAsyncCtx2 + 36 | 0; //@line 20329
    HEAP32[$51 >> 2] = $24; //@line 20330
    $52 = $ReallocAsyncCtx2 + 40 | 0; //@line 20331
    HEAP32[$52 >> 2] = $36; //@line 20332
    sp = STACKTOP; //@line 20333
    return;
   }
   $53 = $2 + 44 | 0; //@line 20336
   $54 = HEAP32[$53 >> 2] | 0; //@line 20337
   if (!$54) {
    HEAP32[$38 >> 2] = 0; //@line 20340
    $$pre = HEAP32[$10 >> 2] | 0; //@line 20341
    $70 = $$pre; //@line 20343
    $72 = $$pre; //@line 20343
    break;
   }
   $57 = HEAP32[$54 + 4 >> 2] | 0; //@line 20347
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 20348
   FUNCTION_TABLE_vii[$57 & 7]($24, $36); //@line 20349
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 20352
    $58 = $ReallocAsyncCtx3 + 4 | 0; //@line 20353
    HEAP32[$58 >> 2] = $53; //@line 20354
    $59 = $ReallocAsyncCtx3 + 8 | 0; //@line 20355
    HEAP32[$59 >> 2] = $38; //@line 20356
    $60 = $ReallocAsyncCtx3 + 12 | 0; //@line 20357
    HEAP32[$60 >> 2] = $10; //@line 20358
    $61 = $ReallocAsyncCtx3 + 16 | 0; //@line 20359
    HEAP32[$61 >> 2] = $14; //@line 20360
    $62 = $ReallocAsyncCtx3 + 20 | 0; //@line 20361
    HEAP32[$62 >> 2] = $8; //@line 20362
    $63 = $ReallocAsyncCtx3 + 24 | 0; //@line 20363
    HEAP32[$63 >> 2] = $12; //@line 20364
    $64 = $ReallocAsyncCtx3 + 28 | 0; //@line 20365
    HEAP32[$64 >> 2] = $4; //@line 20366
    $65 = $ReallocAsyncCtx3 + 32 | 0; //@line 20367
    HEAP32[$65 >> 2] = $6; //@line 20368
    $66 = $ReallocAsyncCtx3 + 36 | 0; //@line 20369
    HEAP32[$66 >> 2] = $2; //@line 20370
    sp = STACKTOP; //@line 20371
    return;
   }
   ___async_unwind = 0; //@line 20374
   HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 20375
   $58 = $ReallocAsyncCtx3 + 4 | 0; //@line 20376
   HEAP32[$58 >> 2] = $53; //@line 20377
   $59 = $ReallocAsyncCtx3 + 8 | 0; //@line 20378
   HEAP32[$59 >> 2] = $38; //@line 20379
   $60 = $ReallocAsyncCtx3 + 12 | 0; //@line 20380
   HEAP32[$60 >> 2] = $10; //@line 20381
   $61 = $ReallocAsyncCtx3 + 16 | 0; //@line 20382
   HEAP32[$61 >> 2] = $14; //@line 20383
   $62 = $ReallocAsyncCtx3 + 20 | 0; //@line 20384
   HEAP32[$62 >> 2] = $8; //@line 20385
   $63 = $ReallocAsyncCtx3 + 24 | 0; //@line 20386
   HEAP32[$63 >> 2] = $12; //@line 20387
   $64 = $ReallocAsyncCtx3 + 28 | 0; //@line 20388
   HEAP32[$64 >> 2] = $4; //@line 20389
   $65 = $ReallocAsyncCtx3 + 32 | 0; //@line 20390
   HEAP32[$65 >> 2] = $6; //@line 20391
   $66 = $ReallocAsyncCtx3 + 36 | 0; //@line 20392
   HEAP32[$66 >> 2] = $2; //@line 20393
   sp = STACKTOP; //@line 20394
   return;
  }
 } while (0);
 HEAP32[$70 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 20400
 HEAP32[$8 + 8 >> 2] = 0; //@line 20402
 HEAP32[$8 >> 2] = 219; //@line 20403
 HEAP32[$8 + 4 >> 2] = $72; //@line 20405
 $73 = $8 + 12 | 0; //@line 20406
 HEAP32[$73 >> 2] = 764; //@line 20407
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 20408
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $8); //@line 20409
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 20412
  $74 = $ReallocAsyncCtx10 + 4 | 0; //@line 20413
  HEAP32[$74 >> 2] = $73; //@line 20414
  $75 = $ReallocAsyncCtx10 + 8 | 0; //@line 20415
  HEAP32[$75 >> 2] = $4; //@line 20416
  $76 = $ReallocAsyncCtx10 + 12 | 0; //@line 20417
  HEAP32[$76 >> 2] = $6; //@line 20418
  $77 = $ReallocAsyncCtx10 + 16 | 0; //@line 20419
  HEAP32[$77 >> 2] = $8; //@line 20420
  $78 = $ReallocAsyncCtx10 + 20 | 0; //@line 20421
  HEAP32[$78 >> 2] = $2; //@line 20422
  sp = STACKTOP; //@line 20423
  return;
 }
 ___async_unwind = 0; //@line 20426
 HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 20427
 $74 = $ReallocAsyncCtx10 + 4 | 0; //@line 20428
 HEAP32[$74 >> 2] = $73; //@line 20429
 $75 = $ReallocAsyncCtx10 + 8 | 0; //@line 20430
 HEAP32[$75 >> 2] = $4; //@line 20431
 $76 = $ReallocAsyncCtx10 + 12 | 0; //@line 20432
 HEAP32[$76 >> 2] = $6; //@line 20433
 $77 = $ReallocAsyncCtx10 + 16 | 0; //@line 20434
 HEAP32[$77 >> 2] = $8; //@line 20435
 $78 = $ReallocAsyncCtx10 + 20 | 0; //@line 20436
 HEAP32[$78 >> 2] = $2; //@line 20437
 sp = STACKTOP; //@line 20438
 return;
}
function __ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$2 = 0, $$2$1 = 0, $$2$us = 0, $$2$us$1 = 0, $$pre = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0, $111 = 0, $118 = 0, $12 = 0, $122 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $134 = 0, $139 = 0, $152 = 0, $157 = 0, $160 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $17 = 0, $173 = 0, $186 = 0, $191 = 0, $194 = 0, $24 = 0, $28 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $47 = 0, $54 = 0, $57 = 0, $6 = 0, $65 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $76 = 0, $81 = 0, $88 = 0, $9 = 0, $92 = 0, $98 = 0, label = 0;
 $4 = ($2 | 0) == 0; //@line 6573
 $6 = (HEAP32[1957] | 0) == 0; //@line 6575
 if (!$1) {
  do {
   if ($6) {
    $$2$us = -3006; //@line 6579
   } else {
    $7 = _emscripten_asm_const_i(9) | 0; //@line 6581
    $9 = (($7 | 0) < 0) << 31 >> 31; //@line 6583
    $10 = HEAP32[1957] | 0; //@line 6584
    $12 = $10 + 24 | 0; //@line 6586
    $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 6591
    $24 = HEAP32[$10 + 20 >> 2] | 0; //@line 6598
    if ($17 >>> 0 < $9 >>> 0 | (($17 | 0) == ($9 | 0) ? (HEAP32[$12 >> 2] | 0) >>> 0 < $7 >>> 0 : 0)) {
     if (!$24) {
      $34 = $10; //@line 6602
      label = 11; //@line 6603
     } else {
      __ZdlPv($24); //@line 6605
      $$pre35 = HEAP32[1957] | 0; //@line 6606
      if ($$pre35 | 0) {
       $34 = $$pre35; //@line 6609
       label = 11; //@line 6610
      }
     }
     if ((label | 0) == 11) {
      __ZdlPv($34); //@line 6614
     }
     HEAP32[1957] = 0; //@line 6616
     $$2$us = -3006; //@line 6617
     break;
    } else {
     if (_strcmp($24, $0) | 0) {
      $$2$us = -3006; //@line 6623
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$10 >> 2]; //@line 6627
      HEAP32[$2 + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 6627
      HEAP32[$2 + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 6627
      HEAP32[$2 + 12 >> 2] = HEAP32[$10 + 12 >> 2]; //@line 6627
      HEAP32[$2 + 16 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 6627
     }
     $28 = $10 + 32 | 0; //@line 6630
     HEAP32[$28 >> 2] = $7; //@line 6632
     HEAP32[$28 + 4 >> 2] = $9; //@line 6635
     $$2$us = 0; //@line 6636
     break;
    }
   }
  } while (0);
  do {
   if (!(HEAP32[1958] | 0)) {
    $$2$us$1 = $$2$us; //@line 6645
   } else {
    $71 = _emscripten_asm_const_i(9) | 0; //@line 6647
    $73 = (($71 | 0) < 0) << 31 >> 31; //@line 6649
    $74 = HEAP32[1958] | 0; //@line 6650
    $76 = $74 + 24 | 0; //@line 6652
    $81 = HEAP32[$76 + 4 >> 2] | 0; //@line 6657
    $88 = HEAP32[$74 + 20 >> 2] | 0; //@line 6664
    if ($81 >>> 0 < $73 >>> 0 | (($81 | 0) == ($73 | 0) ? (HEAP32[$76 >> 2] | 0) >>> 0 < $71 >>> 0 : 0)) {
     if (!$88) {
      $98 = $74; //@line 6668
      label = 33; //@line 6669
     } else {
      __ZdlPv($88); //@line 6671
      $$pre36 = HEAP32[1958] | 0; //@line 6672
      if ($$pre36 | 0) {
       $98 = $$pre36; //@line 6675
       label = 33; //@line 6676
      }
     }
     if ((label | 0) == 33) {
      __ZdlPv($98); //@line 6680
     }
     HEAP32[1958] = 0; //@line 6682
     $$2$us$1 = $$2$us; //@line 6683
     break;
    } else {
     if (_strcmp($88, $0) | 0) {
      $$2$us$1 = $$2$us; //@line 6689
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$74 >> 2]; //@line 6693
      HEAP32[$2 + 4 >> 2] = HEAP32[$74 + 4 >> 2]; //@line 6693
      HEAP32[$2 + 8 >> 2] = HEAP32[$74 + 8 >> 2]; //@line 6693
      HEAP32[$2 + 12 >> 2] = HEAP32[$74 + 12 >> 2]; //@line 6693
      HEAP32[$2 + 16 >> 2] = HEAP32[$74 + 16 >> 2]; //@line 6693
     }
     $92 = $74 + 32 | 0; //@line 6696
     HEAP32[$92 >> 2] = $71; //@line 6698
     HEAP32[$92 + 4 >> 2] = $73; //@line 6701
     $$2$us$1 = 0; //@line 6702
     break;
    }
   }
  } while (0);
  if (!(HEAP32[1959] | 0)) {
   $$0$lcssa = $$2$us$1; //@line 6710
   return $$0$lcssa | 0; //@line 6711
  }
  $101 = _emscripten_asm_const_i(9) | 0; //@line 6713
  $103 = (($101 | 0) < 0) << 31 >> 31; //@line 6715
  $104 = HEAP32[1959] | 0; //@line 6716
  $106 = $104 + 24 | 0; //@line 6718
  $111 = HEAP32[$106 + 4 >> 2] | 0; //@line 6723
  $118 = HEAP32[$104 + 20 >> 2] | 0; //@line 6730
  if ($111 >>> 0 < $103 >>> 0 | (($111 | 0) == ($103 | 0) ? (HEAP32[$106 >> 2] | 0) >>> 0 < $101 >>> 0 : 0)) {
   if (!$118) {
    $128 = $104; //@line 6734
    label = 43; //@line 6735
   } else {
    __ZdlPv($118); //@line 6737
    $$pre37 = HEAP32[1959] | 0; //@line 6738
    if ($$pre37 | 0) {
     $128 = $$pre37; //@line 6741
     label = 43; //@line 6742
    }
   }
   if ((label | 0) == 43) {
    __ZdlPv($128); //@line 6746
   }
   HEAP32[1959] = 0; //@line 6748
   $$0$lcssa = $$2$us$1; //@line 6749
   return $$0$lcssa | 0; //@line 6750
  }
  if (_strcmp($118, $0) | 0) {
   $$0$lcssa = $$2$us$1; //@line 6755
   return $$0$lcssa | 0; //@line 6756
  }
  if (!$4) {
   HEAP32[$2 >> 2] = HEAP32[$104 >> 2]; //@line 6759
   HEAP32[$2 + 4 >> 2] = HEAP32[$104 + 4 >> 2]; //@line 6759
   HEAP32[$2 + 8 >> 2] = HEAP32[$104 + 8 >> 2]; //@line 6759
   HEAP32[$2 + 12 >> 2] = HEAP32[$104 + 12 >> 2]; //@line 6759
   HEAP32[$2 + 16 >> 2] = HEAP32[$104 + 16 >> 2]; //@line 6759
  }
  $122 = $104 + 32 | 0; //@line 6762
  HEAP32[$122 >> 2] = $101; //@line 6764
  HEAP32[$122 + 4 >> 2] = $103; //@line 6767
  $$0$lcssa = 0; //@line 6768
  return $$0$lcssa | 0; //@line 6769
 }
 do {
  if ($6) {
   $$2 = -3006; //@line 6773
  } else {
   $37 = _emscripten_asm_const_i(9) | 0; //@line 6775
   $39 = (($37 | 0) < 0) << 31 >> 31; //@line 6777
   $40 = HEAP32[1957] | 0; //@line 6778
   $42 = $40 + 24 | 0; //@line 6780
   $47 = HEAP32[$42 + 4 >> 2] | 0; //@line 6785
   if ($47 >>> 0 < $39 >>> 0 | (($47 | 0) == ($39 | 0) ? (HEAP32[$42 >> 2] | 0) >>> 0 < $37 >>> 0 : 0)) {
    $54 = HEAP32[$40 + 20 >> 2] | 0; //@line 6793
    if (!$54) {
     $57 = $40; //@line 6796
     label = 18; //@line 6797
    } else {
     __ZdlPv($54); //@line 6799
     $$pre = HEAP32[1957] | 0; //@line 6800
     if ($$pre | 0) {
      $57 = $$pre; //@line 6803
      label = 18; //@line 6804
     }
    }
    if ((label | 0) == 18) {
     __ZdlPv($57); //@line 6808
    }
    HEAP32[1957] = 0; //@line 6810
    $$2 = -3006; //@line 6811
    break;
   }
   if ((HEAP32[$40 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$40 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$40 >> 2]; //@line 6823
      HEAP32[$2 + 4 >> 2] = HEAP32[$40 + 4 >> 2]; //@line 6823
      HEAP32[$2 + 8 >> 2] = HEAP32[$40 + 8 >> 2]; //@line 6823
      HEAP32[$2 + 12 >> 2] = HEAP32[$40 + 12 >> 2]; //@line 6823
      HEAP32[$2 + 16 >> 2] = HEAP32[$40 + 16 >> 2]; //@line 6823
     }
     $65 = $40 + 32 | 0; //@line 6826
     HEAP32[$65 >> 2] = $37; //@line 6828
     HEAP32[$65 + 4 >> 2] = $39; //@line 6831
     $$2 = 0; //@line 6832
    } else {
     $$2 = -3006; //@line 6834
    }
   } else {
    $$2 = -3006; //@line 6837
   }
  }
 } while (0);
 do {
  if (!(HEAP32[1958] | 0)) {
   $$2$1 = $$2; //@line 6845
  } else {
   $129 = _emscripten_asm_const_i(9) | 0; //@line 6847
   $131 = (($129 | 0) < 0) << 31 >> 31; //@line 6849
   $132 = HEAP32[1958] | 0; //@line 6850
   $134 = $132 + 24 | 0; //@line 6852
   $139 = HEAP32[$134 + 4 >> 2] | 0; //@line 6857
   if ($139 >>> 0 < $131 >>> 0 | (($139 | 0) == ($131 | 0) ? (HEAP32[$134 >> 2] | 0) >>> 0 < $129 >>> 0 : 0)) {
    $157 = HEAP32[$132 + 20 >> 2] | 0; //@line 6865
    if (!$157) {
     $160 = $132; //@line 6868
     label = 53; //@line 6869
    } else {
     __ZdlPv($157); //@line 6871
     $$pre33 = HEAP32[1958] | 0; //@line 6872
     if ($$pre33 | 0) {
      $160 = $$pre33; //@line 6875
      label = 53; //@line 6876
     }
    }
    if ((label | 0) == 53) {
     __ZdlPv($160); //@line 6880
    }
    HEAP32[1958] = 0; //@line 6882
    $$2$1 = $$2; //@line 6883
    break;
   }
   if ((HEAP32[$132 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$132 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$132 >> 2]; //@line 6895
      HEAP32[$2 + 4 >> 2] = HEAP32[$132 + 4 >> 2]; //@line 6895
      HEAP32[$2 + 8 >> 2] = HEAP32[$132 + 8 >> 2]; //@line 6895
      HEAP32[$2 + 12 >> 2] = HEAP32[$132 + 12 >> 2]; //@line 6895
      HEAP32[$2 + 16 >> 2] = HEAP32[$132 + 16 >> 2]; //@line 6895
     }
     $152 = $132 + 32 | 0; //@line 6898
     HEAP32[$152 >> 2] = $129; //@line 6900
     HEAP32[$152 + 4 >> 2] = $131; //@line 6903
     $$2$1 = 0; //@line 6904
    } else {
     $$2$1 = $$2; //@line 6906
    }
   } else {
    $$2$1 = $$2; //@line 6909
   }
  }
 } while (0);
 if (!(HEAP32[1959] | 0)) {
  $$0$lcssa = $$2$1; //@line 6916
  return $$0$lcssa | 0; //@line 6917
 }
 $163 = _emscripten_asm_const_i(9) | 0; //@line 6919
 $165 = (($163 | 0) < 0) << 31 >> 31; //@line 6921
 $166 = HEAP32[1959] | 0; //@line 6922
 $168 = $166 + 24 | 0; //@line 6924
 $173 = HEAP32[$168 + 4 >> 2] | 0; //@line 6929
 if ($173 >>> 0 < $165 >>> 0 | (($173 | 0) == ($165 | 0) ? (HEAP32[$168 >> 2] | 0) >>> 0 < $163 >>> 0 : 0)) {
  $191 = HEAP32[$166 + 20 >> 2] | 0; //@line 6937
  if (!$191) {
   $194 = $166; //@line 6940
   label = 64; //@line 6941
  } else {
   __ZdlPv($191); //@line 6943
   $$pre34 = HEAP32[1959] | 0; //@line 6944
   if ($$pre34 | 0) {
    $194 = $$pre34; //@line 6947
    label = 64; //@line 6948
   }
  }
  if ((label | 0) == 64) {
   __ZdlPv($194); //@line 6952
  }
  HEAP32[1959] = 0; //@line 6954
  $$0$lcssa = $$2$1; //@line 6955
  return $$0$lcssa | 0; //@line 6956
 }
 if ((HEAP32[$166 >> 2] | 0) != ($1 | 0)) {
  $$0$lcssa = $$2$1; //@line 6961
  return $$0$lcssa | 0; //@line 6962
 }
 if (_strcmp(HEAP32[$166 + 20 >> 2] | 0, $0) | 0) {
  $$0$lcssa = $$2$1; //@line 6969
  return $$0$lcssa | 0; //@line 6970
 }
 if (!$4) {
  HEAP32[$2 >> 2] = HEAP32[$166 >> 2]; //@line 6973
  HEAP32[$2 + 4 >> 2] = HEAP32[$166 + 4 >> 2]; //@line 6973
  HEAP32[$2 + 8 >> 2] = HEAP32[$166 + 8 >> 2]; //@line 6973
  HEAP32[$2 + 12 >> 2] = HEAP32[$166 + 12 >> 2]; //@line 6973
  HEAP32[$2 + 16 >> 2] = HEAP32[$166 + 16 >> 2]; //@line 6973
 }
 $186 = $166 + 32 | 0; //@line 6976
 HEAP32[$186 >> 2] = $163; //@line 6978
 HEAP32[$186 + 4 >> 2] = $165; //@line 6981
 $$0$lcssa = 0; //@line 6982
 return $$0$lcssa | 0; //@line 6983
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 17566
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 17567
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 17568
 $d_sroa_0_0_extract_trunc = $b$0; //@line 17569
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 17570
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 17571
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 17573
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 17576
    HEAP32[$rem + 4 >> 2] = 0; //@line 17577
   }
   $_0$1 = 0; //@line 17579
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 17580
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17581
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 17584
    $_0$0 = 0; //@line 17585
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17586
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 17588
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 17589
   $_0$1 = 0; //@line 17590
   $_0$0 = 0; //@line 17591
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17592
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 17595
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 17600
     HEAP32[$rem + 4 >> 2] = 0; //@line 17601
    }
    $_0$1 = 0; //@line 17603
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 17604
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17605
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 17609
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 17610
    }
    $_0$1 = 0; //@line 17612
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 17613
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17614
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 17616
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 17619
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 17620
    }
    $_0$1 = 0; //@line 17622
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 17623
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17624
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 17627
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 17629
    $58 = 31 - $51 | 0; //@line 17630
    $sr_1_ph = $57; //@line 17631
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 17632
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 17633
    $q_sroa_0_1_ph = 0; //@line 17634
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 17635
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 17639
    $_0$0 = 0; //@line 17640
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17641
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 17643
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 17644
   $_0$1 = 0; //@line 17645
   $_0$0 = 0; //@line 17646
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17647
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 17651
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 17653
     $126 = 31 - $119 | 0; //@line 17654
     $130 = $119 - 31 >> 31; //@line 17655
     $sr_1_ph = $125; //@line 17656
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 17657
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 17658
     $q_sroa_0_1_ph = 0; //@line 17659
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 17660
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 17664
     $_0$0 = 0; //@line 17665
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17666
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 17668
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 17669
    $_0$1 = 0; //@line 17670
    $_0$0 = 0; //@line 17671
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17672
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 17674
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 17677
    $89 = 64 - $88 | 0; //@line 17678
    $91 = 32 - $88 | 0; //@line 17679
    $92 = $91 >> 31; //@line 17680
    $95 = $88 - 32 | 0; //@line 17681
    $105 = $95 >> 31; //@line 17682
    $sr_1_ph = $88; //@line 17683
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 17684
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 17685
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 17686
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 17687
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 17691
    HEAP32[$rem + 4 >> 2] = 0; //@line 17692
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 17695
    $_0$0 = $a$0 | 0 | 0; //@line 17696
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17697
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 17699
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 17700
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 17701
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17702
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 17707
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 17708
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 17709
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 17710
  $carry_0_lcssa$1 = 0; //@line 17711
  $carry_0_lcssa$0 = 0; //@line 17712
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 17714
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 17715
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 17716
  $137$1 = tempRet0; //@line 17717
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 17718
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 17719
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 17720
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 17721
  $sr_1202 = $sr_1_ph; //@line 17722
  $carry_0203 = 0; //@line 17723
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 17725
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 17726
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 17727
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 17728
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 17729
   $150$1 = tempRet0; //@line 17730
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 17731
   $carry_0203 = $151$0 & 1; //@line 17732
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 17734
   $r_sroa_1_1200 = tempRet0; //@line 17735
   $sr_1202 = $sr_1202 - 1 | 0; //@line 17736
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 17748
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 17749
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 17750
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 17751
  $carry_0_lcssa$1 = 0; //@line 17752
  $carry_0_lcssa$0 = $carry_0203; //@line 17753
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 17755
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 17756
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 17759
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 17760
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 17762
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 17763
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17764
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15144
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15150
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15159
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15164
      $19 = $1 + 44 | 0; //@line 15165
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 15174
      $26 = $1 + 52 | 0; //@line 15175
      $27 = $1 + 53 | 0; //@line 15176
      $28 = $1 + 54 | 0; //@line 15177
      $29 = $0 + 8 | 0; //@line 15178
      $30 = $1 + 24 | 0; //@line 15179
      $$081$off0 = 0; //@line 15180
      $$084 = $0 + 16 | 0; //@line 15180
      $$085$off0 = 0; //@line 15180
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 15184
        label = 20; //@line 15185
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 15188
       HEAP8[$27 >> 0] = 0; //@line 15189
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 15190
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 15191
       if (___async) {
        label = 12; //@line 15194
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15197
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 15201
        label = 20; //@line 15202
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 15209
         $$186$off0 = $$085$off0; //@line 15209
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 15218
           label = 20; //@line 15219
           break L10;
          } else {
           $$182$off0 = 1; //@line 15222
           $$186$off0 = $$085$off0; //@line 15222
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 15229
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 15236
          break L10;
         } else {
          $$182$off0 = 1; //@line 15239
          $$186$off0 = 1; //@line 15239
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 15244
       $$084 = $$084 + 8 | 0; //@line 15244
       $$085$off0 = $$186$off0; //@line 15244
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 343; //@line 15247
       HEAP32[$AsyncCtx15 + 4 >> 2] = $19; //@line 15249
       HEAP32[$AsyncCtx15 + 8 >> 2] = $30; //@line 15251
       HEAP32[$AsyncCtx15 + 12 >> 2] = $28; //@line 15253
       HEAP8[$AsyncCtx15 + 16 >> 0] = $$081$off0 & 1; //@line 15256
       HEAP8[$AsyncCtx15 + 17 >> 0] = $$085$off0 & 1; //@line 15259
       HEAP32[$AsyncCtx15 + 20 >> 2] = $2; //@line 15261
       HEAP32[$AsyncCtx15 + 24 >> 2] = $13; //@line 15263
       HEAP32[$AsyncCtx15 + 28 >> 2] = $1; //@line 15265
       HEAP32[$AsyncCtx15 + 32 >> 2] = $29; //@line 15267
       HEAP32[$AsyncCtx15 + 36 >> 2] = $$084; //@line 15269
       HEAP32[$AsyncCtx15 + 40 >> 2] = $26; //@line 15271
       HEAP32[$AsyncCtx15 + 44 >> 2] = $27; //@line 15273
       HEAP8[$AsyncCtx15 + 48 >> 0] = $4 & 1; //@line 15276
       HEAP32[$AsyncCtx15 + 52 >> 2] = $25; //@line 15278
       sp = STACKTOP; //@line 15279
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 15285
         $61 = $1 + 40 | 0; //@line 15286
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 15289
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 15297
           if ($$283$off0) {
            label = 25; //@line 15299
            break;
           } else {
            $69 = 4; //@line 15302
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 15309
        } else {
         $69 = 4; //@line 15311
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 15316
      }
      HEAP32[$19 >> 2] = $69; //@line 15318
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 15327
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 15332
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 15333
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15334
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 15335
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 344; //@line 15338
    HEAP32[$AsyncCtx11 + 4 >> 2] = $1; //@line 15340
    HEAP32[$AsyncCtx11 + 8 >> 2] = $2; //@line 15342
    HEAP32[$AsyncCtx11 + 12 >> 2] = $3; //@line 15344
    HEAP8[$AsyncCtx11 + 16 >> 0] = $4 & 1; //@line 15347
    HEAP32[$AsyncCtx11 + 20 >> 2] = $0; //@line 15349
    HEAP32[$AsyncCtx11 + 24 >> 2] = $73; //@line 15351
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 15353
    sp = STACKTOP; //@line 15354
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15357
   $81 = $0 + 24 | 0; //@line 15358
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 15362
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 15366
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 15373
       $$2 = $81; //@line 15374
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 15386
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 15387
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 15392
        $136 = $$2 + 8 | 0; //@line 15393
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 15396
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 347; //@line 15401
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 15403
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 15405
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 15407
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 15409
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 15411
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 15413
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 15415
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 15418
       sp = STACKTOP; //@line 15419
       return;
      }
      $104 = $1 + 24 | 0; //@line 15422
      $105 = $1 + 54 | 0; //@line 15423
      $$1 = $81; //@line 15424
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15440
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 15441
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15446
       $122 = $$1 + 8 | 0; //@line 15447
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 15450
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 346; //@line 15455
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 15457
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 15459
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 15461
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 15463
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 15465
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 15467
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 15469
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 15471
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 15474
      sp = STACKTOP; //@line 15475
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 15479
    $$0 = $81; //@line 15480
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15487
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 15488
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15493
     $100 = $$0 + 8 | 0; //@line 15494
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 15497
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 345; //@line 15502
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 15504
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 15506
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 15508
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 15510
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 15512
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 15514
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 15517
    sp = STACKTOP; //@line 15518
    return;
   }
  }
 } while (0);
 return;
}
function __ZL28nsapi_dns_query_async_deletei($0) {
 $0 = $0 | 0;
 var $$03647$lcssa$ph = 0, $$03647$lcssa5456 = 0, $$03647$lcssa545760 = 0, $$03647$lcssa54576164 = 0, $$038 = 0, $$1$off0 = 0, $$1$off0$1 = 0, $$1$off0$162 = 0, $$1$off0$2 = 0, $$1$off0$266 = 0, $$1$off0$3 = 0, $$1$off0$368 = 0, $$1$off0$4 = 0, $$1$off058 = 0, $$ph = 0, $$pre$phiZ2D = 0, $1 = 0, $101 = 0, $105 = 0, $113 = 0, $118 = 0, $122 = 0, $126 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $29 = 0, $32 = 0, $33 = 0, $36 = 0, $39 = 0, $43 = 0, $44 = 0, $46 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $58 = 0, $62 = 0, $66 = 0, $69 = 0, $7 = 0, $77 = 0, $81 = 0, $89 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11823
 $1 = HEAP32[1960] | 0; //@line 11824
 $2 = ($1 | 0) == 0; //@line 11825
 if ($2) {
  label = 3; //@line 11827
 } else {
  if ((HEAP32[$1 >> 2] | 0) == ($0 | 0)) {
   $$03647$lcssa5456 = 0; //@line 11832
   $$1$off058 = 1; //@line 11832
   $130 = 7840; //@line 11832
   $77 = $1; //@line 11832
   label = 38; //@line 11833
  } else {
   label = 3; //@line 11835
  }
 }
 if ((label | 0) == 3) {
  $5 = HEAP32[1961] | 0; //@line 11839
  if (!$5) {
   label = 55; //@line 11842
  } else {
   if ((HEAP32[$5 >> 2] | 0) == ($0 | 0)) {
    $$03647$lcssa$ph = 1; //@line 11847
    $$ph = $5; //@line 11847
   } else {
    label = 55; //@line 11849
   }
  }
  do {
   if ((label | 0) == 55) {
    $118 = HEAP32[1962] | 0; //@line 11854
    if ($118 | 0) {
     if ((HEAP32[$118 >> 2] | 0) == ($0 | 0)) {
      $$03647$lcssa$ph = 2; //@line 11860
      $$ph = $118; //@line 11860
      break;
     }
    }
    $122 = HEAP32[1963] | 0; //@line 11864
    if ($122 | 0) {
     if ((HEAP32[$122 >> 2] | 0) == ($0 | 0)) {
      $$03647$lcssa$ph = 3; //@line 11870
      $$ph = $122; //@line 11870
      break;
     }
    }
    $126 = HEAP32[1964] | 0; //@line 11874
    if (!$126) {
     $$038 = -3012; //@line 11877
     return $$038 | 0; //@line 11878
    }
    if ((HEAP32[$126 >> 2] | 0) == ($0 | 0)) {
     $$03647$lcssa$ph = 4; //@line 11883
     $$ph = $126; //@line 11883
    } else {
     $$038 = -3012; //@line 11885
     return $$038 | 0; //@line 11886
    }
   }
  } while (0);
  $7 = 7840 + ($$03647$lcssa$ph << 2) | 0; //@line 11890
  if ($2) {
   $$1$off0 = 1; //@line 11892
  } else {
   if (!(HEAP32[$1 + 56 >> 2] | 0)) {
    $$1$off0 = 1; //@line 11898
   } else {
    $$1$off0 = (HEAP32[$1 + 8 >> 2] | 0) != (HEAP32[$$ph + 8 >> 2] | 0); //@line 11905
   }
  }
  if (($$03647$lcssa$ph | 0) == 1) {
   $$03647$lcssa545760 = 1; //@line 11910
   $$1$off0$162 = $$1$off0; //@line 11910
   $131 = $7; //@line 11910
   $89 = $$ph; //@line 11910
   label = 42; //@line 11911
  } else {
   $$03647$lcssa5456 = $$03647$lcssa$ph; //@line 11913
   $$1$off058 = $$1$off0; //@line 11913
   $130 = $7; //@line 11913
   $77 = $$ph; //@line 11913
   label = 38; //@line 11914
  }
 }
 if ((label | 0) == 38) {
  $69 = HEAP32[1961] | 0; //@line 11918
  if (!$69) {
   $$1$off0$1 = $$1$off058; //@line 11921
  } else {
   if (!(HEAP32[$69 + 56 >> 2] | 0)) {
    $$1$off0$1 = $$1$off058; //@line 11927
   } else {
    $$1$off0$1 = $$1$off058 & (HEAP32[$69 + 8 >> 2] | 0) != (HEAP32[$77 + 8 >> 2] | 0); //@line 11935
   }
  }
  if (($$03647$lcssa5456 | 0) == 2) {
   $$03647$lcssa54576164 = 2; //@line 11940
   $$1$off0$266 = $$1$off0$1; //@line 11940
   $101 = $77; //@line 11940
   $132 = $130; //@line 11940
   label = 46; //@line 11941
  } else {
   $$03647$lcssa545760 = $$03647$lcssa5456; //@line 11943
   $$1$off0$162 = $$1$off0$1; //@line 11943
   $131 = $130; //@line 11943
   $89 = $77; //@line 11943
   label = 42; //@line 11944
  }
 }
 if ((label | 0) == 42) {
  $81 = HEAP32[1962] | 0; //@line 11948
  if (!$81) {
   $$1$off0$2 = $$1$off0$162; //@line 11951
  } else {
   if (!(HEAP32[$81 + 56 >> 2] | 0)) {
    $$1$off0$2 = $$1$off0$162; //@line 11957
   } else {
    $$1$off0$2 = $$1$off0$162 & (HEAP32[$81 + 8 >> 2] | 0) != (HEAP32[$89 + 8 >> 2] | 0); //@line 11965
   }
  }
  if (($$03647$lcssa545760 | 0) == 3) {
   $$1$off0$368 = $$1$off0$2; //@line 11970
   $113 = $89; //@line 11970
   $133 = $131; //@line 11970
   label = 50; //@line 11971
  } else {
   $$03647$lcssa54576164 = $$03647$lcssa545760; //@line 11973
   $$1$off0$266 = $$1$off0$2; //@line 11973
   $101 = $89; //@line 11973
   $132 = $131; //@line 11973
   label = 46; //@line 11974
  }
 }
 if ((label | 0) == 46) {
  $93 = HEAP32[1963] | 0; //@line 11978
  if (!$93) {
   $$1$off0$3 = $$1$off0$266; //@line 11981
  } else {
   if (!(HEAP32[$93 + 56 >> 2] | 0)) {
    $$1$off0$3 = $$1$off0$266; //@line 11987
   } else {
    $$1$off0$3 = $$1$off0$266 & (HEAP32[$93 + 8 >> 2] | 0) != (HEAP32[$101 + 8 >> 2] | 0); //@line 11995
   }
  }
  if (($$03647$lcssa54576164 | 0) == 4) {
   $$1$off0$4 = $$1$off0$3; //@line 12000
   $134 = $132; //@line 12000
   $135 = $101; //@line 12000
   label = 53; //@line 12001
  } else {
   $$1$off0$368 = $$1$off0$3; //@line 12003
   $113 = $101; //@line 12003
   $133 = $132; //@line 12003
   label = 50; //@line 12004
  }
 }
 if ((label | 0) == 50) {
  $105 = HEAP32[1964] | 0; //@line 12008
  if (!$105) {
   $$1$off0$4 = $$1$off0$368; //@line 12011
   $134 = $133; //@line 12011
   $135 = $113; //@line 12011
   label = 53; //@line 12012
  } else {
   if (!(HEAP32[$105 + 56 >> 2] | 0)) {
    $$1$off0$4 = $$1$off0$368; //@line 12018
    $134 = $133; //@line 12018
    $135 = $113; //@line 12018
    label = 53; //@line 12019
   } else {
    if ($$1$off0$368 & (HEAP32[$105 + 8 >> 2] | 0) != (HEAP32[$113 + 8 >> 2] | 0)) {
     $18 = $113; //@line 12028
     $22 = $133; //@line 12028
     label = 8; //@line 12029
    } else {
     $43 = $113; //@line 12031
     $46 = $133; //@line 12031
    }
   }
  }
 }
 if ((label | 0) == 53) {
  if ($$1$off0$4) {
   $18 = $135; //@line 12038
   $22 = $134; //@line 12038
   label = 8; //@line 12039
  } else {
   $43 = $135; //@line 12041
   $46 = $134; //@line 12041
  }
 }
 if ((label | 0) == 8) {
  $19 = HEAP32[$18 + 56 >> 2] | 0; //@line 12046
  if (!$19) {
   $43 = $18; //@line 12049
   $46 = $22; //@line 12049
  } else {
   $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12051
   __ZN6Socket5closeEv($19) | 0; //@line 12052
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 254; //@line 12055
    HEAP32[$AsyncCtx15 + 4 >> 2] = $22; //@line 12057
    sp = STACKTOP; //@line 12058
    return 0; //@line 12059
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12061
   $23 = HEAP32[$22 >> 2] | 0; //@line 12062
   $25 = HEAP32[$23 + 56 >> 2] | 0; //@line 12064
   do {
    if (!$25) {
     $32 = $23; //@line 12068
    } else {
     $29 = HEAP32[(HEAP32[$25 >> 2] | 0) + 4 >> 2] | 0; //@line 12072
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12073
     FUNCTION_TABLE_vi[$29 & 511]($25); //@line 12074
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 255; //@line 12077
      HEAP32[$AsyncCtx + 4 >> 2] = $22; //@line 12079
      sp = STACKTOP; //@line 12080
      return 0; //@line 12081
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 12083
      $32 = HEAP32[$22 >> 2] | 0; //@line 12085
      break;
     }
    }
   } while (0);
   $33 = HEAP32[$32 + 60 >> 2] | 0; //@line 12091
   if (!$33) {
    $43 = $32; //@line 12094
    $46 = $22; //@line 12094
   } else {
    $36 = HEAP32[$33 + 12 >> 2] | 0; //@line 12097
    do {
     if (!$36) {
      $$pre$phiZ2D = $33; //@line 12101
     } else {
      $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 12104
      $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12105
      FUNCTION_TABLE_vi[$39 & 511]($33); //@line 12106
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 256; //@line 12109
       HEAP32[$AsyncCtx3 + 4 >> 2] = $33; //@line 12111
       HEAP32[$AsyncCtx3 + 8 >> 2] = $22; //@line 12113
       sp = STACKTOP; //@line 12114
       return 0; //@line 12115
      } else {
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12117
       $$pre$phiZ2D = $33; //@line 12118
       break;
      }
     }
    } while (0);
    __ZdlPv($$pre$phiZ2D); //@line 12123
    $43 = HEAP32[$22 >> 2] | 0; //@line 12125
    $46 = $22; //@line 12125
   }
  }
 }
 $44 = HEAP32[$43 + 64 >> 2] | 0; //@line 12130
 if (!$44) {
  $48 = $43; //@line 12133
 } else {
  __ZdaPv($44); //@line 12135
  $48 = HEAP32[$46 >> 2] | 0; //@line 12137
 }
 $49 = HEAP32[$48 + 12 >> 2] | 0; //@line 12140
 if (!$49) {
  $52 = $48; //@line 12143
 } else {
  __ZdlPv($49); //@line 12145
  $52 = HEAP32[$46 >> 2] | 0; //@line 12147
 }
 if ($52 | 0) {
  $54 = HEAP32[$52 + 44 >> 2] | 0; //@line 12152
  do {
   if ($54 | 0) {
    $58 = HEAP32[$54 + 8 >> 2] | 0; //@line 12158
    $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12159
    FUNCTION_TABLE_vi[$58 & 511]($52 + 32 | 0); //@line 12160
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 257; //@line 12163
     HEAP32[$AsyncCtx7 + 4 >> 2] = $52; //@line 12165
     HEAP32[$AsyncCtx7 + 8 >> 2] = $46; //@line 12167
     sp = STACKTOP; //@line 12168
     return 0; //@line 12169
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12171
     break;
    }
   }
  } while (0);
  $62 = HEAP32[$52 + 28 >> 2] | 0; //@line 12177
  do {
   if ($62 | 0) {
    $66 = HEAP32[$62 + 8 >> 2] | 0; //@line 12183
    $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12184
    FUNCTION_TABLE_vi[$66 & 511]($52 + 16 | 0); //@line 12185
    if (___async) {
     HEAP32[$AsyncCtx11 >> 2] = 258; //@line 12188
     HEAP32[$AsyncCtx11 + 4 >> 2] = $52; //@line 12190
     HEAP32[$AsyncCtx11 + 8 >> 2] = $46; //@line 12192
     sp = STACKTOP; //@line 12193
     return 0; //@line 12194
    } else {
     _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12196
     break;
    }
   }
  } while (0);
  __ZdlPv($52); //@line 12201
 }
 HEAP32[$46 >> 2] = 0; //@line 12203
 $$038 = 0; //@line 12204
 return $$038 | 0; //@line 12205
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $$124$450 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $11 = 0, $20 = 0, $21 = 0, $22 = 0, $29 = 0, $3 = 0, $32 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $52 = 0, $6 = 0, $61 = 0, $64 = 0, $7 = 0, $71 = 0, $74 = 0, $79 = 0, $85 = 0, $86 = 0, $89 = 0, $92 = 0, $94 = 0, $95 = 0, $96 = 0, $98 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10265
 STACKTOP = STACKTOP + 48 | 0; //@line 10266
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 10266
 $3 = sp + 32 | 0; //@line 10267
 $4 = sp + 16 | 0; //@line 10268
 $5 = sp; //@line 10269
 $6 = $0 + 28 | 0; //@line 10270
 $7 = HEAP32[$6 >> 2] | 0; //@line 10271
 do {
  if (!$7) {
   $21 = 0; //@line 10275
  } else {
   $11 = HEAP32[$7 + 4 >> 2] | 0; //@line 10279
   $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 10280
   FUNCTION_TABLE_vii[$11 & 7]($3, $0 + 16 | 0); //@line 10281
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 224; //@line 10284
    HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 10286
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 10288
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 10290
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 10292
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 10294
    HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 10296
    HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 10298
    HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 10300
    sp = STACKTOP; //@line 10301
    STACKTOP = sp; //@line 10302
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10304
    $21 = HEAP32[$6 >> 2] | 0; //@line 10306
    break;
   }
  }
 } while (0);
 $20 = $3 + 12 | 0; //@line 10311
 HEAP32[$20 >> 2] = $21; //@line 10312
 $22 = HEAP32[$0 >> 2] | 0; //@line 10313
 $AsyncCtx20 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10314
 __ZL28nsapi_dns_query_async_deletei($22) | 0; //@line 10315
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 225; //@line 10318
  HEAP32[$AsyncCtx20 + 4 >> 2] = $3; //@line 10320
  HEAP32[$AsyncCtx20 + 8 >> 2] = $1; //@line 10322
  HEAP32[$AsyncCtx20 + 12 >> 2] = $2; //@line 10324
  HEAP32[$AsyncCtx20 + 16 >> 2] = $20; //@line 10326
  HEAP32[$AsyncCtx20 + 20 >> 2] = $4; //@line 10328
  HEAP32[$AsyncCtx20 + 24 >> 2] = $5; //@line 10330
  sp = STACKTOP; //@line 10331
  STACKTOP = sp; //@line 10332
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 10334
 $29 = HEAP32[1960] | 0; //@line 10335
 if (!$29) {
  $$1 = 2147483647; //@line 10338
  $$124 = 0; //@line 10338
 } else {
  $$1 = HEAP32[$29 >> 2] | 0; //@line 10341
  $$124 = $29; //@line 10341
 }
 $32 = HEAP32[1961] | 0; //@line 10343
 if (!$32) {
  $$1$1 = $$1; //@line 10346
  $$124$1 = $$124; //@line 10346
 } else {
  $94 = HEAP32[$32 >> 2] | 0; //@line 10348
  $95 = ($94 | 0) > ($$1 | 0); //@line 10349
  $$1$1 = $95 ? $$1 : $94; //@line 10352
  $$124$1 = $95 ? $$124 : $32; //@line 10352
 }
 $96 = HEAP32[1962] | 0; //@line 10354
 if (!$96) {
  $$1$2 = $$1$1; //@line 10357
  $$124$2 = $$124$1; //@line 10357
 } else {
  $98 = HEAP32[$96 >> 2] | 0; //@line 10359
  $99 = ($98 | 0) > ($$1$1 | 0); //@line 10360
  $$1$2 = $99 ? $$1$1 : $98; //@line 10363
  $$124$2 = $99 ? $$124$1 : $96; //@line 10363
 }
 $100 = HEAP32[1963] | 0; //@line 10365
 if (!$100) {
  $$1$3 = $$1$2; //@line 10368
  $$124$3 = $$124$2; //@line 10368
 } else {
  $102 = HEAP32[$100 >> 2] | 0; //@line 10370
  $103 = ($102 | 0) > ($$1$2 | 0); //@line 10371
  $$1$3 = $103 ? $$1$2 : $102; //@line 10374
  $$124$3 = $103 ? $$124$2 : $100; //@line 10374
 }
 $104 = HEAP32[1964] | 0; //@line 10376
 if (!$104) {
  label = 42; //@line 10379
 } else {
  if ((HEAP32[$104 >> 2] | 0) > ($$1$3 | 0)) {
   label = 42; //@line 10384
  } else {
   $$124$450 = $104; //@line 10386
   label = 10; //@line 10387
  }
 }
 if ((label | 0) == 42) {
  if ($$124$3 | 0) {
   $$124$450 = $$124$3; //@line 10393
   label = 10; //@line 10394
  }
 }
 do {
  if ((label | 0) == 10) {
   $34 = $$124$450 + 44 | 0; //@line 10399
   $35 = HEAP32[$34 >> 2] | 0; //@line 10400
   do {
    if (!$35) {
     $49 = 0; //@line 10404
    } else {
     $39 = HEAP32[$35 + 4 >> 2] | 0; //@line 10408
     $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10409
     FUNCTION_TABLE_vii[$39 & 7]($4, $$124$450 + 32 | 0); //@line 10410
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 226; //@line 10413
      HEAP32[$AsyncCtx2 + 4 >> 2] = $3; //@line 10415
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 10417
      HEAP32[$AsyncCtx2 + 12 >> 2] = $2; //@line 10419
      HEAP32[$AsyncCtx2 + 16 >> 2] = $34; //@line 10421
      HEAP32[$AsyncCtx2 + 20 >> 2] = $20; //@line 10423
      HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 10425
      HEAP32[$AsyncCtx2 + 28 >> 2] = $$124$450; //@line 10427
      HEAP32[$AsyncCtx2 + 32 >> 2] = $5; //@line 10429
      sp = STACKTOP; //@line 10430
      STACKTOP = sp; //@line 10431
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx2 | 0); //@line 10433
      $49 = HEAP32[$34 >> 2] | 0; //@line 10435
      break;
     }
    }
   } while (0);
   $48 = $4 + 12 | 0; //@line 10440
   HEAP32[$48 >> 2] = $49; //@line 10441
   $50 = HEAP32[$$124$450 >> 2] | 0; //@line 10442
   HEAP32[$5 + 8 >> 2] = 0; //@line 10444
   HEAP32[$5 >> 2] = 185; //@line 10445
   HEAP32[$5 + 4 >> 2] = $50; //@line 10447
   $52 = $5 + 12 | 0; //@line 10448
   HEAP32[$52 >> 2] = 764; //@line 10449
   $AsyncCtx23 = _emscripten_alloc_async_context(36, sp) | 0; //@line 10450
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $5) | 0; //@line 10451
   if (___async) {
    HEAP32[$AsyncCtx23 >> 2] = 227; //@line 10454
    HEAP32[$AsyncCtx23 + 4 >> 2] = $52; //@line 10456
    HEAP32[$AsyncCtx23 + 8 >> 2] = $3; //@line 10458
    HEAP32[$AsyncCtx23 + 12 >> 2] = $1; //@line 10460
    HEAP32[$AsyncCtx23 + 16 >> 2] = $2; //@line 10462
    HEAP32[$AsyncCtx23 + 20 >> 2] = $48; //@line 10464
    HEAP32[$AsyncCtx23 + 24 >> 2] = $20; //@line 10466
    HEAP32[$AsyncCtx23 + 28 >> 2] = $4; //@line 10468
    HEAP32[$AsyncCtx23 + 32 >> 2] = $5; //@line 10470
    sp = STACKTOP; //@line 10471
    STACKTOP = sp; //@line 10472
    return;
   }
   _emscripten_free_async_context($AsyncCtx23 | 0); //@line 10474
   $61 = HEAP32[$52 >> 2] | 0; //@line 10475
   do {
    if ($61 | 0) {
     $64 = HEAP32[$61 + 8 >> 2] | 0; //@line 10480
     $AsyncCtx6 = _emscripten_alloc_async_context(28, sp) | 0; //@line 10481
     FUNCTION_TABLE_vi[$64 & 511]($5); //@line 10482
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 228; //@line 10485
      HEAP32[$AsyncCtx6 + 4 >> 2] = $48; //@line 10487
      HEAP32[$AsyncCtx6 + 8 >> 2] = $20; //@line 10489
      HEAP32[$AsyncCtx6 + 12 >> 2] = $4; //@line 10491
      HEAP32[$AsyncCtx6 + 16 >> 2] = $3; //@line 10493
      HEAP32[$AsyncCtx6 + 20 >> 2] = $1; //@line 10495
      HEAP32[$AsyncCtx6 + 24 >> 2] = $2; //@line 10497
      sp = STACKTOP; //@line 10498
      STACKTOP = sp; //@line 10499
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10501
      break;
     }
    }
   } while (0);
   $71 = HEAP32[$48 >> 2] | 0; //@line 10506
   if ($71 | 0) {
    $74 = HEAP32[$71 + 8 >> 2] | 0; //@line 10510
    $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10511
    FUNCTION_TABLE_vi[$74 & 511]($4); //@line 10512
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 229; //@line 10515
     HEAP32[$AsyncCtx10 + 4 >> 2] = $20; //@line 10517
     HEAP32[$AsyncCtx10 + 8 >> 2] = $3; //@line 10519
     HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 10521
     HEAP32[$AsyncCtx10 + 16 >> 2] = $2; //@line 10523
     sp = STACKTOP; //@line 10524
     STACKTOP = sp; //@line 10525
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10527
     break;
    }
   }
  }
 } while (0);
 $79 = HEAP32[$20 >> 2] | 0; //@line 10533
 do {
  if (!$79) {
   $AsyncCtx26 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10537
   _mbed_assert_internal(4029, 4034, 1677); //@line 10538
   if (___async) {
    HEAP32[$AsyncCtx26 >> 2] = 230; //@line 10541
    HEAP32[$AsyncCtx26 + 4 >> 2] = $20; //@line 10543
    HEAP32[$AsyncCtx26 + 8 >> 2] = $3; //@line 10545
    HEAP32[$AsyncCtx26 + 12 >> 2] = $1; //@line 10547
    HEAP32[$AsyncCtx26 + 16 >> 2] = $2; //@line 10549
    sp = STACKTOP; //@line 10550
    STACKTOP = sp; //@line 10551
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx26 | 0); //@line 10553
    $86 = HEAP32[$20 >> 2] | 0; //@line 10555
    break;
   }
  } else {
   $86 = $79; //@line 10559
  }
 } while (0);
 $85 = HEAP32[$86 >> 2] | 0; //@line 10562
 $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10563
 FUNCTION_TABLE_viii[$85 & 0]($3, $1, $2); //@line 10564
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 231; //@line 10567
  HEAP32[$AsyncCtx13 + 4 >> 2] = $20; //@line 10569
  HEAP32[$AsyncCtx13 + 8 >> 2] = $3; //@line 10571
  sp = STACKTOP; //@line 10572
  STACKTOP = sp; //@line 10573
  return;
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10575
 $89 = HEAP32[$20 >> 2] | 0; //@line 10576
 if (!$89) {
  STACKTOP = sp; //@line 10579
  return;
 }
 $92 = HEAP32[$89 + 8 >> 2] | 0; //@line 10582
 $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10583
 FUNCTION_TABLE_vi[$92 & 511]($3); //@line 10584
 if (___async) {
  HEAP32[$AsyncCtx17 >> 2] = 232; //@line 10587
  HEAP32[$AsyncCtx17 + 4 >> 2] = $3; //@line 10589
  sp = STACKTOP; //@line 10590
  STACKTOP = sp; //@line 10591
  return;
 }
 _emscripten_free_async_context($AsyncCtx17 | 0); //@line 10593
 STACKTOP = sp; //@line 10594
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_172($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12707
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12709
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12711
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12713
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12715
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12717
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12719
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12721
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12723
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12725
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12727
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12729
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12731
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12733
 $42 = HEAP32[$18 >> 2] | 0; //@line 12734
 if ($42 | 0) {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 12738
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 12739
  FUNCTION_TABLE_vi[$45 & 511]($6); //@line 12740
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 247; //@line 12743
   $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 12744
   HEAP32[$46 >> 2] = $2; //@line 12745
   $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 12746
   HEAP32[$47 >> 2] = $4; //@line 12747
   $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 12748
   HEAP32[$48 >> 2] = $6; //@line 12749
   $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 12750
   HEAP32[$49 >> 2] = $8; //@line 12751
   $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 12752
   HEAP32[$50 >> 2] = $10; //@line 12753
   $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 12754
   HEAP32[$51 >> 2] = $12; //@line 12755
   $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 12756
   HEAP32[$52 >> 2] = $14; //@line 12757
   $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 12758
   HEAP32[$53 >> 2] = $16; //@line 12759
   $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 12760
   HEAP32[$54 >> 2] = $18; //@line 12761
   $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 12762
   HEAP32[$55 >> 2] = $20; //@line 12763
   $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 12764
   HEAP32[$56 >> 2] = $22; //@line 12765
   $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 12766
   HEAP32[$57 >> 2] = $24; //@line 12767
   $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 12768
   HEAP32[$58 >> 2] = $26; //@line 12769
   sp = STACKTOP; //@line 12770
   return;
  }
  ___async_unwind = 0; //@line 12773
  HEAP32[$ReallocAsyncCtx2 >> 2] = 247; //@line 12774
  $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 12775
  HEAP32[$46 >> 2] = $2; //@line 12776
  $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 12777
  HEAP32[$47 >> 2] = $4; //@line 12778
  $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 12779
  HEAP32[$48 >> 2] = $6; //@line 12780
  $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 12781
  HEAP32[$49 >> 2] = $8; //@line 12782
  $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 12783
  HEAP32[$50 >> 2] = $10; //@line 12784
  $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 12785
  HEAP32[$51 >> 2] = $12; //@line 12786
  $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 12787
  HEAP32[$52 >> 2] = $14; //@line 12788
  $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 12789
  HEAP32[$53 >> 2] = $16; //@line 12790
  $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 12791
  HEAP32[$54 >> 2] = $18; //@line 12792
  $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 12793
  HEAP32[$55 >> 2] = $20; //@line 12794
  $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 12795
  HEAP32[$56 >> 2] = $22; //@line 12796
  $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 12797
  HEAP32[$57 >> 2] = $24; //@line 12798
  $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 12799
  HEAP32[$58 >> 2] = $26; //@line 12800
  sp = STACKTOP; //@line 12801
  return;
 }
 $59 = HEAP32[$26 >> 2] | 0; //@line 12804
 if (!$59) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 12807
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($2, 0, $4, 512) | 0; //@line 12808
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 12811
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 12812
   HEAP32[$28 >> 2] = $2; //@line 12813
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 12814
   HEAP32[$29 >> 2] = $4; //@line 12815
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 12816
   HEAP32[$30 >> 2] = $6; //@line 12817
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 12818
   HEAP32[$31 >> 2] = $8; //@line 12819
   $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 12820
   HEAP32[$32 >> 2] = $10; //@line 12821
   $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 12822
   HEAP32[$33 >> 2] = $12; //@line 12823
   $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 12824
   HEAP32[$34 >> 2] = $14; //@line 12825
   $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 12826
   HEAP32[$35 >> 2] = $16; //@line 12827
   $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 12828
   HEAP32[$36 >> 2] = $18; //@line 12829
   $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 12830
   HEAP32[$37 >> 2] = $20; //@line 12831
   $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 12832
   HEAP32[$38 >> 2] = $22; //@line 12833
   $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 12834
   HEAP32[$39 >> 2] = $24; //@line 12835
   $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 12836
   HEAP32[$40 >> 2] = $26; //@line 12837
   sp = STACKTOP; //@line 12838
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 12842
  ___async_unwind = 0; //@line 12843
  HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 12844
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 12845
  HEAP32[$28 >> 2] = $2; //@line 12846
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 12847
  HEAP32[$29 >> 2] = $4; //@line 12848
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 12849
  HEAP32[$30 >> 2] = $6; //@line 12850
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 12851
  HEAP32[$31 >> 2] = $8; //@line 12852
  $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 12853
  HEAP32[$32 >> 2] = $10; //@line 12854
  $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 12855
  HEAP32[$33 >> 2] = $12; //@line 12856
  $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 12857
  HEAP32[$34 >> 2] = $14; //@line 12858
  $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 12859
  HEAP32[$35 >> 2] = $16; //@line 12860
  $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 12861
  HEAP32[$36 >> 2] = $18; //@line 12862
  $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 12863
  HEAP32[$37 >> 2] = $20; //@line 12864
  $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 12865
  HEAP32[$38 >> 2] = $22; //@line 12866
  $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 12867
  HEAP32[$39 >> 2] = $24; //@line 12868
  $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 12869
  HEAP32[$40 >> 2] = $26; //@line 12870
  sp = STACKTOP; //@line 12871
  return;
 } else {
  $62 = HEAP32[$59 + 8 >> 2] | 0; //@line 12875
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 12876
  FUNCTION_TABLE_vi[$62 & 511]($24); //@line 12877
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 12880
   $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 12881
   HEAP32[$63 >> 2] = $2; //@line 12882
   $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 12883
   HEAP32[$64 >> 2] = $4; //@line 12884
   $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 12885
   HEAP32[$65 >> 2] = $6; //@line 12886
   $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 12887
   HEAP32[$66 >> 2] = $8; //@line 12888
   $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 12889
   HEAP32[$67 >> 2] = $10; //@line 12890
   $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 12891
   HEAP32[$68 >> 2] = $12; //@line 12892
   $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 12893
   HEAP32[$69 >> 2] = $14; //@line 12894
   $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 12895
   HEAP32[$70 >> 2] = $16; //@line 12896
   $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 12897
   HEAP32[$71 >> 2] = $18; //@line 12898
   $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 12899
   HEAP32[$72 >> 2] = $20; //@line 12900
   $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 12901
   HEAP32[$73 >> 2] = $22; //@line 12902
   $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 12903
   HEAP32[$74 >> 2] = $24; //@line 12904
   $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 12905
   HEAP32[$75 >> 2] = $26; //@line 12906
   sp = STACKTOP; //@line 12907
   return;
  }
  ___async_unwind = 0; //@line 12910
  HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 12911
  $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 12912
  HEAP32[$63 >> 2] = $2; //@line 12913
  $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 12914
  HEAP32[$64 >> 2] = $4; //@line 12915
  $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 12916
  HEAP32[$65 >> 2] = $6; //@line 12917
  $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 12918
  HEAP32[$66 >> 2] = $8; //@line 12919
  $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 12920
  HEAP32[$67 >> 2] = $10; //@line 12921
  $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 12922
  HEAP32[$68 >> 2] = $12; //@line 12923
  $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 12924
  HEAP32[$69 >> 2] = $14; //@line 12925
  $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 12926
  HEAP32[$70 >> 2] = $16; //@line 12927
  $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 12928
  HEAP32[$71 >> 2] = $18; //@line 12929
  $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 12930
  HEAP32[$72 >> 2] = $20; //@line 12931
  $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 12932
  HEAP32[$73 >> 2] = $22; //@line 12933
  $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 12934
  HEAP32[$74 >> 2] = $24; //@line 12935
  $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 12936
  HEAP32[$75 >> 2] = $26; //@line 12937
  sp = STACKTOP; //@line 12938
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$393 = 0, $$byval_copy = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $57 = 0, $6 = 0, $60 = 0, $62 = 0, $63 = 0, $64 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 15160
 STACKTOP = STACKTOP + 32 | 0; //@line 15161
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 15161
 $$byval_copy = sp; //@line 15162
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 15164
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15166
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15168
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15170
 $10 = HEAP8[$0 + 20 >> 0] | 0; //@line 15172
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15174
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15176
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15178
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15180
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15182
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 15184
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 15186
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 15188
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 15190
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 15192
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 15194
 $34 = HEAP8[$0 + 68 >> 0] | 0; //@line 15196
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 15198
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 15200
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 15202
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 15204
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 15206
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 15208
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 15210
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 15212
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 15214
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  $57 = 648 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 15221
  HEAP32[$$byval_copy >> 2] = HEAP32[$57 >> 2]; //@line 15222
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$57 + 4 >> 2]; //@line 15222
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$57 + 8 >> 2]; //@line 15222
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$57 + 12 >> 2]; //@line 15222
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$57 + 16 >> 2]; //@line 15222
  __ZN13SocketAddress8set_addrE10nsapi_addr($14, $$byval_copy); //@line 15223
  $$393 = 5; //@line 15224
 } else {
  $$393 = $34; //@line 15226
 }
 __ZN13SocketAddress8set_portEt($14, 53); //@line 15228
 HEAP8[$6 >> 0] = 0; //@line 15229
 HEAP8[$36 >> 0] = 1; //@line 15230
 HEAP8[$38 >> 0] = 1; //@line 15231
 HEAP8[$40 >> 0] = 0; //@line 15232
 HEAP8[$42 >> 0] = 0; //@line 15233
 HEAP8[$44 >> 0] = 1; //@line 15234
 HEAP8[$46 >> 0] = 0; //@line 15235
 HEAP8[$46 + 1 >> 0] = 0; //@line 15235
 HEAP8[$46 + 2 >> 0] = 0; //@line 15235
 HEAP8[$46 + 3 >> 0] = 0; //@line 15235
 HEAP8[$46 + 4 >> 0] = 0; //@line 15235
 HEAP8[$46 + 5 >> 0] = 0; //@line 15235
 if (!(HEAP8[$16 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $8; //@line 15239
 } else {
  $$048$i = $16; //@line 15241
  $$sroa$0$0$in47$i = $8; //@line 15241
  while (1) {
   $60 = _strcspn($$048$i, 5126) | 0; //@line 15243
   $62 = $$sroa$0$0$in47$i + 1 | 0; //@line 15245
   HEAP8[$$sroa$0$0$in47$i >> 0] = $60; //@line 15246
   $63 = $60 & 255; //@line 15247
   _memcpy($62 | 0, $$048$i | 0, $63 | 0) | 0; //@line 15248
   $64 = $62 + $63 | 0; //@line 15249
   $$048$i = $$048$i + ($60 + ((HEAP8[$$048$i + $60 >> 0] | 0) == 46 & 1)) | 0; //@line 15255
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $64; //@line 15259
    break;
   } else {
    $$sroa$0$0$in47$i = $64; //@line 15262
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 15267
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 15269
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $10; //@line 15271
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 15273
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 15276
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(104) | 0; //@line 15278
 $80 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($4, $14, $6, $$sroa$0$0$in$lcssa$i + 5 - $12 | 0) | 0; //@line 15279
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 15282
  $81 = $ReallocAsyncCtx4 + 4 | 0; //@line 15283
  HEAP32[$81 >> 2] = $4; //@line 15284
  $82 = $ReallocAsyncCtx4 + 8 | 0; //@line 15285
  HEAP32[$82 >> 2] = $6; //@line 15286
  $83 = $ReallocAsyncCtx4 + 12 | 0; //@line 15287
  HEAP32[$83 >> 2] = $8; //@line 15288
  $84 = $ReallocAsyncCtx4 + 16 | 0; //@line 15289
  HEAP8[$84 >> 0] = $10; //@line 15290
  $85 = $ReallocAsyncCtx4 + 20 | 0; //@line 15291
  HEAP32[$85 >> 2] = $12; //@line 15292
  $86 = $ReallocAsyncCtx4 + 24 | 0; //@line 15293
  HEAP32[$86 >> 2] = $14; //@line 15294
  $87 = $ReallocAsyncCtx4 + 28 | 0; //@line 15295
  HEAP32[$87 >> 2] = $16; //@line 15296
  $88 = $ReallocAsyncCtx4 + 32 | 0; //@line 15297
  HEAP32[$88 >> 2] = $18; //@line 15298
  $89 = $ReallocAsyncCtx4 + 36 | 0; //@line 15299
  HEAP32[$89 >> 2] = $20; //@line 15300
  $90 = $ReallocAsyncCtx4 + 40 | 0; //@line 15301
  HEAP32[$90 >> 2] = $22; //@line 15302
  $91 = $ReallocAsyncCtx4 + 44 | 0; //@line 15303
  HEAP32[$91 >> 2] = $24; //@line 15304
  $92 = $ReallocAsyncCtx4 + 48 | 0; //@line 15305
  HEAP32[$92 >> 2] = $26; //@line 15306
  $93 = $ReallocAsyncCtx4 + 52 | 0; //@line 15307
  HEAP32[$93 >> 2] = $28; //@line 15308
  $94 = $ReallocAsyncCtx4 + 56 | 0; //@line 15309
  HEAP32[$94 >> 2] = $30; //@line 15310
  $95 = $ReallocAsyncCtx4 + 60 | 0; //@line 15311
  HEAP32[$95 >> 2] = $32; //@line 15312
  $96 = $ReallocAsyncCtx4 + 64 | 0; //@line 15313
  HEAP32[$96 >> 2] = $36; //@line 15314
  $97 = $ReallocAsyncCtx4 + 68 | 0; //@line 15315
  HEAP32[$97 >> 2] = $38; //@line 15316
  $98 = $ReallocAsyncCtx4 + 72 | 0; //@line 15317
  HEAP32[$98 >> 2] = $40; //@line 15318
  $99 = $ReallocAsyncCtx4 + 76 | 0; //@line 15319
  HEAP32[$99 >> 2] = $42; //@line 15320
  $100 = $ReallocAsyncCtx4 + 80 | 0; //@line 15321
  HEAP32[$100 >> 2] = $44; //@line 15322
  $101 = $ReallocAsyncCtx4 + 84 | 0; //@line 15323
  HEAP32[$101 >> 2] = $46; //@line 15324
  $102 = $ReallocAsyncCtx4 + 88 | 0; //@line 15325
  HEAP32[$102 >> 2] = $48; //@line 15326
  $103 = $ReallocAsyncCtx4 + 92 | 0; //@line 15327
  HEAP32[$103 >> 2] = $50; //@line 15328
  $104 = $ReallocAsyncCtx4 + 96 | 0; //@line 15329
  HEAP32[$104 >> 2] = $52; //@line 15330
  $105 = $ReallocAsyncCtx4 + 100 | 0; //@line 15331
  HEAP8[$105 >> 0] = $2; //@line 15332
  $106 = $ReallocAsyncCtx4 + 101 | 0; //@line 15333
  HEAP8[$106 >> 0] = $$393; //@line 15334
  sp = STACKTOP; //@line 15335
  STACKTOP = sp; //@line 15336
  return;
 }
 HEAP32[___async_retval >> 2] = $80; //@line 15339
 ___async_unwind = 0; //@line 15340
 HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 15341
 $81 = $ReallocAsyncCtx4 + 4 | 0; //@line 15342
 HEAP32[$81 >> 2] = $4; //@line 15343
 $82 = $ReallocAsyncCtx4 + 8 | 0; //@line 15344
 HEAP32[$82 >> 2] = $6; //@line 15345
 $83 = $ReallocAsyncCtx4 + 12 | 0; //@line 15346
 HEAP32[$83 >> 2] = $8; //@line 15347
 $84 = $ReallocAsyncCtx4 + 16 | 0; //@line 15348
 HEAP8[$84 >> 0] = $10; //@line 15349
 $85 = $ReallocAsyncCtx4 + 20 | 0; //@line 15350
 HEAP32[$85 >> 2] = $12; //@line 15351
 $86 = $ReallocAsyncCtx4 + 24 | 0; //@line 15352
 HEAP32[$86 >> 2] = $14; //@line 15353
 $87 = $ReallocAsyncCtx4 + 28 | 0; //@line 15354
 HEAP32[$87 >> 2] = $16; //@line 15355
 $88 = $ReallocAsyncCtx4 + 32 | 0; //@line 15356
 HEAP32[$88 >> 2] = $18; //@line 15357
 $89 = $ReallocAsyncCtx4 + 36 | 0; //@line 15358
 HEAP32[$89 >> 2] = $20; //@line 15359
 $90 = $ReallocAsyncCtx4 + 40 | 0; //@line 15360
 HEAP32[$90 >> 2] = $22; //@line 15361
 $91 = $ReallocAsyncCtx4 + 44 | 0; //@line 15362
 HEAP32[$91 >> 2] = $24; //@line 15363
 $92 = $ReallocAsyncCtx4 + 48 | 0; //@line 15364
 HEAP32[$92 >> 2] = $26; //@line 15365
 $93 = $ReallocAsyncCtx4 + 52 | 0; //@line 15366
 HEAP32[$93 >> 2] = $28; //@line 15367
 $94 = $ReallocAsyncCtx4 + 56 | 0; //@line 15368
 HEAP32[$94 >> 2] = $30; //@line 15369
 $95 = $ReallocAsyncCtx4 + 60 | 0; //@line 15370
 HEAP32[$95 >> 2] = $32; //@line 15371
 $96 = $ReallocAsyncCtx4 + 64 | 0; //@line 15372
 HEAP32[$96 >> 2] = $36; //@line 15373
 $97 = $ReallocAsyncCtx4 + 68 | 0; //@line 15374
 HEAP32[$97 >> 2] = $38; //@line 15375
 $98 = $ReallocAsyncCtx4 + 72 | 0; //@line 15376
 HEAP32[$98 >> 2] = $40; //@line 15377
 $99 = $ReallocAsyncCtx4 + 76 | 0; //@line 15378
 HEAP32[$99 >> 2] = $42; //@line 15379
 $100 = $ReallocAsyncCtx4 + 80 | 0; //@line 15380
 HEAP32[$100 >> 2] = $44; //@line 15381
 $101 = $ReallocAsyncCtx4 + 84 | 0; //@line 15382
 HEAP32[$101 >> 2] = $46; //@line 15383
 $102 = $ReallocAsyncCtx4 + 88 | 0; //@line 15384
 HEAP32[$102 >> 2] = $48; //@line 15385
 $103 = $ReallocAsyncCtx4 + 92 | 0; //@line 15386
 HEAP32[$103 >> 2] = $50; //@line 15387
 $104 = $ReallocAsyncCtx4 + 96 | 0; //@line 15388
 HEAP32[$104 >> 2] = $52; //@line 15389
 $105 = $ReallocAsyncCtx4 + 100 | 0; //@line 15390
 HEAP8[$105 >> 0] = $2; //@line 15391
 $106 = $ReallocAsyncCtx4 + 101 | 0; //@line 15392
 HEAP8[$106 >> 0] = $$393; //@line 15393
 sp = STACKTOP; //@line 15394
 STACKTOP = sp; //@line 15395
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_205($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy8 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $69 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17276
 STACKTOP = STACKTOP + 48 | 0; //@line 17277
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 17277
 $$byval_copy8 = sp + 20 | 0; //@line 17278
 $$byval_copy = sp; //@line 17279
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17281
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17283
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17285
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17287
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17289
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17291
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17293
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17295
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17297
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17299
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17301
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $69 = HEAP8[$20 >> 0] | 0; //@line 17306
  if ($69 << 24 >> 24) {
   HEAP8[$20 >> 0] = $69 + -1 << 24 >> 24; //@line 17310
  }
  _free($8); //@line 17312
  HEAP32[$2 + 76 >> 2] = 5e3; //@line 17314
  STACKTOP = sp; //@line 17315
  return;
 }
 HEAP8[$12 >> 0] = (HEAP8[$12 >> 0] | 0) + 1 << 24 >> 24; //@line 17319
 HEAP32[$16 >> 2] = 0; //@line 17320
 HEAP32[$16 + 4 >> 2] = 0; //@line 17320
 HEAP32[$16 + 8 >> 2] = 0; //@line 17320
 HEAP32[$16 + 12 >> 2] = 0; //@line 17320
 HEAP32[$16 + 16 >> 2] = 0; //@line 17320
 HEAP32[$$byval_copy8 >> 2] = HEAP32[$18 >> 2]; //@line 17321
 HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$18 + 4 >> 2]; //@line 17321
 HEAP32[$$byval_copy8 + 8 >> 2] = HEAP32[$18 + 8 >> 2]; //@line 17321
 HEAP32[$$byval_copy8 + 12 >> 2] = HEAP32[$18 + 12 >> 2]; //@line 17321
 HEAP32[$$byval_copy8 + 16 >> 2] = HEAP32[$18 + 16 >> 2]; //@line 17321
 __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy8, 0); //@line 17322
 if (!(HEAP8[$20 >> 0] | 0)) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 17326
  __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($2, -3009, 0); //@line 17327
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 240; //@line 17330
   $49 = $ReallocAsyncCtx2 + 4 | 0; //@line 17331
   HEAP32[$49 >> 2] = $8; //@line 17332
   $50 = $ReallocAsyncCtx2 + 8 | 0; //@line 17333
   HEAP32[$50 >> 2] = $14; //@line 17334
   sp = STACKTOP; //@line 17335
   STACKTOP = sp; //@line 17336
   return;
  }
  ___async_unwind = 0; //@line 17338
  HEAP32[$ReallocAsyncCtx2 >> 2] = 240; //@line 17339
  $49 = $ReallocAsyncCtx2 + 4 | 0; //@line 17340
  HEAP32[$49 >> 2] = $8; //@line 17341
  $50 = $ReallocAsyncCtx2 + 8 | 0; //@line 17342
  HEAP32[$50 >> 2] = $14; //@line 17343
  sp = STACKTOP; //@line 17344
  STACKTOP = sp; //@line 17345
  return;
 }
 $24 = HEAP32[$22 >> 2] | 0; //@line 17347
 $25 = HEAP8[$12 >> 0] | 0; //@line 17348
 if (($25 & 255) > 9) {
  HEAP8[$12 >> 0] = 0; //@line 17351
  $29 = 0; //@line 17352
 } else {
  if (($25 & 255) < 5) {
   $29 = $25; //@line 17356
  } else {
   $48 = 648 + ((($25 & 255) + -5 | 0) * 20 | 0) | 0; //@line 17360
   HEAP32[$$byval_copy >> 2] = HEAP32[$48 >> 2]; //@line 17361
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$48 + 4 >> 2]; //@line 17361
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$48 + 8 >> 2]; //@line 17361
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$48 + 12 >> 2]; //@line 17361
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$48 + 16 >> 2]; //@line 17361
   __ZN13SocketAddress8set_addrE10nsapi_addr($4, $$byval_copy); //@line 17362
   __ZN13SocketAddress8set_portEt($4, 53); //@line 17363
   $51 = HEAP32[$6 >> 2] | 0; //@line 17364
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(48) | 0; //@line 17365
   $52 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($51, $4, $8, $10) | 0; //@line 17366
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 241; //@line 17369
    $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 17370
    HEAP32[$53 >> 2] = $2; //@line 17371
    $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 17372
    HEAP32[$54 >> 2] = $4; //@line 17373
    $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 17374
    HEAP32[$55 >> 2] = $6; //@line 17375
    $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 17376
    HEAP32[$56 >> 2] = $8; //@line 17377
    $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 17378
    HEAP32[$57 >> 2] = $10; //@line 17379
    $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 17380
    HEAP32[$58 >> 2] = $12; //@line 17381
    $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 17382
    HEAP32[$59 >> 2] = $14; //@line 17383
    $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 17384
    HEAP32[$60 >> 2] = $16; //@line 17385
    $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 17386
    HEAP32[$61 >> 2] = $18; //@line 17387
    $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 17388
    HEAP32[$62 >> 2] = $20; //@line 17389
    $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 17390
    HEAP32[$63 >> 2] = $22; //@line 17391
    sp = STACKTOP; //@line 17392
    STACKTOP = sp; //@line 17393
    return;
   }
   HEAP32[___async_retval >> 2] = $52; //@line 17396
   ___async_unwind = 0; //@line 17397
   HEAP32[$ReallocAsyncCtx4 >> 2] = 241; //@line 17398
   $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 17399
   HEAP32[$53 >> 2] = $2; //@line 17400
   $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 17401
   HEAP32[$54 >> 2] = $4; //@line 17402
   $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 17403
   HEAP32[$55 >> 2] = $6; //@line 17404
   $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 17405
   HEAP32[$56 >> 2] = $8; //@line 17406
   $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 17407
   HEAP32[$57 >> 2] = $10; //@line 17408
   $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 17409
   HEAP32[$58 >> 2] = $12; //@line 17410
   $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 17411
   HEAP32[$59 >> 2] = $14; //@line 17412
   $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 17413
   HEAP32[$60 >> 2] = $16; //@line 17414
   $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 17415
   HEAP32[$61 >> 2] = $18; //@line 17416
   $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 17417
   HEAP32[$62 >> 2] = $20; //@line 17418
   $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 17419
   HEAP32[$63 >> 2] = $22; //@line 17420
   sp = STACKTOP; //@line 17421
   STACKTOP = sp; //@line 17422
   return;
  }
 }
 $32 = HEAP32[(HEAP32[$24 >> 2] | 0) + 28 >> 2] | 0; //@line 17428
 $ReallocAsyncCtx = _emscripten_realloc_async_context(48) | 0; //@line 17429
 $33 = FUNCTION_TABLE_iiii[$32 & 31]($24, $29 & 255, $4) | 0; //@line 17430
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 239; //@line 17433
  $34 = $ReallocAsyncCtx + 4 | 0; //@line 17434
  HEAP32[$34 >> 2] = $2; //@line 17435
  $35 = $ReallocAsyncCtx + 8 | 0; //@line 17436
  HEAP32[$35 >> 2] = $4; //@line 17437
  $36 = $ReallocAsyncCtx + 12 | 0; //@line 17438
  HEAP32[$36 >> 2] = $6; //@line 17439
  $37 = $ReallocAsyncCtx + 16 | 0; //@line 17440
  HEAP32[$37 >> 2] = $8; //@line 17441
  $38 = $ReallocAsyncCtx + 20 | 0; //@line 17442
  HEAP32[$38 >> 2] = $10; //@line 17443
  $39 = $ReallocAsyncCtx + 24 | 0; //@line 17444
  HEAP32[$39 >> 2] = $12; //@line 17445
  $40 = $ReallocAsyncCtx + 28 | 0; //@line 17446
  HEAP32[$40 >> 2] = $14; //@line 17447
  $41 = $ReallocAsyncCtx + 32 | 0; //@line 17448
  HEAP32[$41 >> 2] = $16; //@line 17449
  $42 = $ReallocAsyncCtx + 36 | 0; //@line 17450
  HEAP32[$42 >> 2] = $18; //@line 17451
  $43 = $ReallocAsyncCtx + 40 | 0; //@line 17452
  HEAP32[$43 >> 2] = $20; //@line 17453
  $44 = $ReallocAsyncCtx + 44 | 0; //@line 17454
  HEAP32[$44 >> 2] = $22; //@line 17455
  sp = STACKTOP; //@line 17456
  STACKTOP = sp; //@line 17457
  return;
 }
 HEAP32[___async_retval >> 2] = $33; //@line 17460
 ___async_unwind = 0; //@line 17461
 HEAP32[$ReallocAsyncCtx >> 2] = 239; //@line 17462
 $34 = $ReallocAsyncCtx + 4 | 0; //@line 17463
 HEAP32[$34 >> 2] = $2; //@line 17464
 $35 = $ReallocAsyncCtx + 8 | 0; //@line 17465
 HEAP32[$35 >> 2] = $4; //@line 17466
 $36 = $ReallocAsyncCtx + 12 | 0; //@line 17467
 HEAP32[$36 >> 2] = $6; //@line 17468
 $37 = $ReallocAsyncCtx + 16 | 0; //@line 17469
 HEAP32[$37 >> 2] = $8; //@line 17470
 $38 = $ReallocAsyncCtx + 20 | 0; //@line 17471
 HEAP32[$38 >> 2] = $10; //@line 17472
 $39 = $ReallocAsyncCtx + 24 | 0; //@line 17473
 HEAP32[$39 >> 2] = $12; //@line 17474
 $40 = $ReallocAsyncCtx + 28 | 0; //@line 17475
 HEAP32[$40 >> 2] = $14; //@line 17476
 $41 = $ReallocAsyncCtx + 32 | 0; //@line 17477
 HEAP32[$41 >> 2] = $16; //@line 17478
 $42 = $ReallocAsyncCtx + 36 | 0; //@line 17479
 HEAP32[$42 >> 2] = $18; //@line 17480
 $43 = $ReallocAsyncCtx + 40 | 0; //@line 17481
 HEAP32[$43 >> 2] = $20; //@line 17482
 $44 = $ReallocAsyncCtx + 44 | 0; //@line 17483
 HEAP32[$44 >> 2] = $22; //@line 17484
 sp = STACKTOP; //@line 17485
 STACKTOP = sp; //@line 17486
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i24 = 0, $$010 = 0, $10 = 0, $12 = 0, $17 = 0, $18 = 0, $19 = 0, $26 = 0, $29 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $48 = 0, $5 = 0, $52 = 0, $53 = 0, $54 = 0, $60 = 0, $63 = 0, $70 = 0, $71 = 0, $74 = 0, $75 = 0, $78 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3206
 STACKTOP = STACKTOP + 32 | 0; //@line 3207
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3207
 $3 = sp + 16 | 0; //@line 3208
 $4 = sp; //@line 3209
 $5 = __ZN4mbed16mbed_event_queueEv() | 0; //@line 3210
 if (!$5) {
  $$010 = -3007; //@line 3213
  STACKTOP = sp; //@line 3214
  return $$010 | 0; //@line 3214
 }
 $8 = $2 + 12 | 0; //@line 3217
 $9 = HEAP32[$8 >> 2] | 0; //@line 3218
 $10 = ($9 | 0) == 0; //@line 3219
 if (($1 | 0) > 0) {
  do {
   if ($10) {
    $18 = 0; //@line 3223
   } else {
    $12 = HEAP32[$9 + 4 >> 2] | 0; //@line 3226
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 3227
    FUNCTION_TABLE_vii[$12 & 7]($3, $2); //@line 3228
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 102; //@line 3231
     HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 3233
     HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 3235
     HEAP32[$AsyncCtx + 12 >> 2] = $8; //@line 3237
     HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 3239
     sp = STACKTOP; //@line 3240
     STACKTOP = sp; //@line 3241
     return 0; //@line 3241
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 3243
     $18 = HEAP32[$8 >> 2] | 0; //@line 3245
     break;
    }
   }
  } while (0);
  $17 = $3 + 12 | 0; //@line 3250
  HEAP32[$17 >> 2] = $18; //@line 3251
  $AsyncCtx29 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3252
  $19 = _equeue_alloc($5, 16) | 0; //@line 3253
  if (___async) {
   HEAP32[$AsyncCtx29 >> 2] = 103; //@line 3256
   HEAP32[$AsyncCtx29 + 4 >> 2] = $17; //@line 3258
   HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 3260
   HEAP32[$AsyncCtx29 + 12 >> 2] = $5; //@line 3262
   HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 3264
   HEAP32[$AsyncCtx29 + 20 >> 2] = $17; //@line 3266
   sp = STACKTOP; //@line 3267
   STACKTOP = sp; //@line 3268
   return 0; //@line 3268
  }
  _emscripten_free_async_context($AsyncCtx29 | 0); //@line 3270
  do {
   if (!$19) {
    $$0$i = 0; //@line 3274
   } else {
    $26 = HEAP32[$17 >> 2] | 0; //@line 3276
    do {
     if (!$26) {
      $37 = 0; //@line 3280
     } else {
      $29 = HEAP32[$26 + 4 >> 2] | 0; //@line 3283
      $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3284
      FUNCTION_TABLE_vii[$29 & 7]($19, $3); //@line 3285
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 104; //@line 3288
       HEAP32[$AsyncCtx2 + 4 >> 2] = $17; //@line 3290
       HEAP32[$AsyncCtx2 + 8 >> 2] = $19; //@line 3292
       HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 3294
       HEAP32[$AsyncCtx2 + 16 >> 2] = $5; //@line 3296
       HEAP32[$AsyncCtx2 + 20 >> 2] = $17; //@line 3298
       HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3300
       sp = STACKTOP; //@line 3301
       STACKTOP = sp; //@line 3302
       return 0; //@line 3302
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3304
       $37 = HEAP32[$17 >> 2] | 0; //@line 3306
       break;
      }
     }
    } while (0);
    HEAP32[$19 + 12 >> 2] = $37; //@line 3312
    _equeue_event_delay($19, $1); //@line 3313
    _equeue_event_dtor($19, 105); //@line 3314
    $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3315
    $38 = _equeue_post($5, 106, $19) | 0; //@line 3316
    if (___async) {
     HEAP32[$AsyncCtx23 >> 2] = 107; //@line 3319
     HEAP32[$AsyncCtx23 + 4 >> 2] = $17; //@line 3321
     HEAP32[$AsyncCtx23 + 8 >> 2] = $3; //@line 3323
     sp = STACKTOP; //@line 3324
     STACKTOP = sp; //@line 3325
     return 0; //@line 3325
    } else {
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 3327
     $$0$i = $38; //@line 3328
     break;
    }
   }
  } while (0);
  $41 = ($$0$i | 0) == 0; //@line 3333
  $42 = HEAP32[$17 >> 2] | 0; //@line 3334
  do {
   if ($42 | 0) {
    $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 3339
    $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3340
    FUNCTION_TABLE_vi[$45 & 511]($3); //@line 3341
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 108; //@line 3344
     HEAP8[$AsyncCtx6 + 4 >> 0] = $41 & 1; //@line 3347
     sp = STACKTOP; //@line 3348
     STACKTOP = sp; //@line 3349
     return 0; //@line 3349
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 3351
     break;
    }
   }
  } while (0);
  if ($41) {
   $$010 = -3007; //@line 3357
   STACKTOP = sp; //@line 3358
   return $$010 | 0; //@line 3358
  }
 } else {
  do {
   if ($10) {
    $53 = 0; //@line 3363
   } else {
    $48 = HEAP32[$9 + 4 >> 2] | 0; //@line 3366
    $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3367
    FUNCTION_TABLE_vii[$48 & 7]($4, $2); //@line 3368
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 109; //@line 3371
     HEAP32[$AsyncCtx10 + 4 >> 2] = $4; //@line 3373
     HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 3375
     HEAP32[$AsyncCtx10 + 12 >> 2] = $8; //@line 3377
     sp = STACKTOP; //@line 3378
     STACKTOP = sp; //@line 3379
     return 0; //@line 3379
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 3381
     $53 = HEAP32[$8 >> 2] | 0; //@line 3383
     break;
    }
   }
  } while (0);
  $52 = $4 + 12 | 0; //@line 3388
  HEAP32[$52 >> 2] = $53; //@line 3389
  $AsyncCtx26 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3390
  $54 = _equeue_alloc($5, 16) | 0; //@line 3391
  if (___async) {
   HEAP32[$AsyncCtx26 >> 2] = 110; //@line 3394
   HEAP32[$AsyncCtx26 + 4 >> 2] = $52; //@line 3396
   HEAP32[$AsyncCtx26 + 8 >> 2] = $5; //@line 3398
   HEAP32[$AsyncCtx26 + 12 >> 2] = $4; //@line 3400
   HEAP32[$AsyncCtx26 + 16 >> 2] = $52; //@line 3402
   sp = STACKTOP; //@line 3403
   STACKTOP = sp; //@line 3404
   return 0; //@line 3404
  }
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 3406
  do {
   if (!$54) {
    $$0$i24 = 0; //@line 3410
   } else {
    $60 = HEAP32[$52 >> 2] | 0; //@line 3412
    do {
     if (!$60) {
      $70 = 0; //@line 3416
     } else {
      $63 = HEAP32[$60 + 4 >> 2] | 0; //@line 3419
      $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3420
      FUNCTION_TABLE_vii[$63 & 7]($54, $4); //@line 3421
      if (___async) {
       HEAP32[$AsyncCtx13 >> 2] = 111; //@line 3424
       HEAP32[$AsyncCtx13 + 4 >> 2] = $52; //@line 3426
       HEAP32[$AsyncCtx13 + 8 >> 2] = $54; //@line 3428
       HEAP32[$AsyncCtx13 + 12 >> 2] = $5; //@line 3430
       HEAP32[$AsyncCtx13 + 16 >> 2] = $52; //@line 3432
       HEAP32[$AsyncCtx13 + 20 >> 2] = $4; //@line 3434
       sp = STACKTOP; //@line 3435
       STACKTOP = sp; //@line 3436
       return 0; //@line 3436
      } else {
       _emscripten_free_async_context($AsyncCtx13 | 0); //@line 3438
       $70 = HEAP32[$52 >> 2] | 0; //@line 3440
       break;
      }
     }
    } while (0);
    HEAP32[$54 + 12 >> 2] = $70; //@line 3446
    _equeue_event_dtor($54, 105); //@line 3447
    $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3448
    $71 = _equeue_post($5, 106, $54) | 0; //@line 3449
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 112; //@line 3452
     HEAP32[$AsyncCtx20 + 4 >> 2] = $52; //@line 3454
     HEAP32[$AsyncCtx20 + 8 >> 2] = $4; //@line 3456
     sp = STACKTOP; //@line 3457
     STACKTOP = sp; //@line 3458
     return 0; //@line 3458
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 3460
     $$0$i24 = $71; //@line 3461
     break;
    }
   }
  } while (0);
  $74 = ($$0$i24 | 0) == 0; //@line 3466
  $75 = HEAP32[$52 >> 2] | 0; //@line 3467
  do {
   if ($75 | 0) {
    $78 = HEAP32[$75 + 8 >> 2] | 0; //@line 3472
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3473
    FUNCTION_TABLE_vi[$78 & 511]($4); //@line 3474
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 113; //@line 3477
     HEAP8[$AsyncCtx17 + 4 >> 0] = $74 & 1; //@line 3480
     sp = STACKTOP; //@line 3481
     STACKTOP = sp; //@line 3482
     return 0; //@line 3482
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 3484
     break;
    }
   }
  } while (0);
  if ($74) {
   $$010 = -3007; //@line 3490
   STACKTOP = sp; //@line 3491
   return $$010 | 0; //@line 3491
  }
 }
 $$010 = 0; //@line 3494
 STACKTOP = sp; //@line 3495
 return $$010 | 0; //@line 3495
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_12($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $$124$450 = 0, $10 = 0, $12 = 0, $13 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 16434
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16436
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16438
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16440
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16442
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16444
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16446
 $13 = HEAP32[1960] | 0; //@line 16447
 if (!$13) {
  $$1 = 2147483647; //@line 16450
  $$124 = 0; //@line 16450
 } else {
  $$1 = HEAP32[$13 >> 2] | 0; //@line 16453
  $$124 = $13; //@line 16453
 }
 $16 = HEAP32[1961] | 0; //@line 16455
 if (!$16) {
  $$1$1 = $$1; //@line 16458
  $$124$1 = $$124; //@line 16458
 } else {
  $53 = HEAP32[$16 >> 2] | 0; //@line 16460
  $54 = ($53 | 0) > ($$1 | 0); //@line 16461
  $$1$1 = $54 ? $$1 : $53; //@line 16464
  $$124$1 = $54 ? $$124 : $16; //@line 16464
 }
 $55 = HEAP32[1962] | 0; //@line 16466
 if (!$55) {
  $$1$2 = $$1$1; //@line 16469
  $$124$2 = $$124$1; //@line 16469
 } else {
  $57 = HEAP32[$55 >> 2] | 0; //@line 16471
  $58 = ($57 | 0) > ($$1$1 | 0); //@line 16472
  $$1$2 = $58 ? $$1$1 : $57; //@line 16475
  $$124$2 = $58 ? $$124$1 : $55; //@line 16475
 }
 $59 = HEAP32[1963] | 0; //@line 16477
 if (!$59) {
  $$1$3 = $$1$2; //@line 16480
  $$124$3 = $$124$2; //@line 16480
 } else {
  $61 = HEAP32[$59 >> 2] | 0; //@line 16482
  $62 = ($61 | 0) > ($$1$2 | 0); //@line 16483
  $$1$3 = $62 ? $$1$2 : $61; //@line 16486
  $$124$3 = $62 ? $$124$2 : $59; //@line 16486
 }
 $63 = HEAP32[1964] | 0; //@line 16488
 if (!$63) {
  label = 26; //@line 16491
 } else {
  if ((HEAP32[$63 >> 2] | 0) > ($$1$3 | 0)) {
   label = 26; //@line 16496
  } else {
   $$124$450 = $63; //@line 16498
  }
 }
 if ((label | 0) == 26) {
  if (!$$124$3) {
   $44 = HEAP32[$8 >> 2] | 0; //@line 16504
   if (!$44) {
    $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 16507
    _mbed_assert_internal(4029, 4034, 1677); //@line 16508
    if (___async) {
     HEAP32[$ReallocAsyncCtx9 >> 2] = 230; //@line 16511
     $46 = $ReallocAsyncCtx9 + 4 | 0; //@line 16512
     HEAP32[$46 >> 2] = $8; //@line 16513
     $47 = $ReallocAsyncCtx9 + 8 | 0; //@line 16514
     HEAP32[$47 >> 2] = $2; //@line 16515
     $48 = $ReallocAsyncCtx9 + 12 | 0; //@line 16516
     HEAP32[$48 >> 2] = $4; //@line 16517
     $49 = $ReallocAsyncCtx9 + 16 | 0; //@line 16518
     HEAP32[$49 >> 2] = $6; //@line 16519
     sp = STACKTOP; //@line 16520
     return;
    }
    ___async_unwind = 0; //@line 16523
    HEAP32[$ReallocAsyncCtx9 >> 2] = 230; //@line 16524
    $46 = $ReallocAsyncCtx9 + 4 | 0; //@line 16525
    HEAP32[$46 >> 2] = $8; //@line 16526
    $47 = $ReallocAsyncCtx9 + 8 | 0; //@line 16527
    HEAP32[$47 >> 2] = $2; //@line 16528
    $48 = $ReallocAsyncCtx9 + 12 | 0; //@line 16529
    HEAP32[$48 >> 2] = $4; //@line 16530
    $49 = $ReallocAsyncCtx9 + 16 | 0; //@line 16531
    HEAP32[$49 >> 2] = $6; //@line 16532
    sp = STACKTOP; //@line 16533
    return;
   } else {
    $50 = HEAP32[$44 >> 2] | 0; //@line 16536
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 16537
    FUNCTION_TABLE_viii[$50 & 0]($2, $4, $6); //@line 16538
    if (___async) {
     HEAP32[$ReallocAsyncCtx5 >> 2] = 231; //@line 16541
     $51 = $ReallocAsyncCtx5 + 4 | 0; //@line 16542
     HEAP32[$51 >> 2] = $8; //@line 16543
     $52 = $ReallocAsyncCtx5 + 8 | 0; //@line 16544
     HEAP32[$52 >> 2] = $2; //@line 16545
     sp = STACKTOP; //@line 16546
     return;
    }
    ___async_unwind = 0; //@line 16549
    HEAP32[$ReallocAsyncCtx5 >> 2] = 231; //@line 16550
    $51 = $ReallocAsyncCtx5 + 4 | 0; //@line 16551
    HEAP32[$51 >> 2] = $8; //@line 16552
    $52 = $ReallocAsyncCtx5 + 8 | 0; //@line 16553
    HEAP32[$52 >> 2] = $2; //@line 16554
    sp = STACKTOP; //@line 16555
    return;
   }
  } else {
   $$124$450 = $$124$3; //@line 16559
  }
 }
 $18 = $$124$450 + 44 | 0; //@line 16562
 $19 = HEAP32[$18 >> 2] | 0; //@line 16563
 if (!$19) {
  $32 = $10 + 12 | 0; //@line 16566
  HEAP32[$32 >> 2] = 0; //@line 16567
  $33 = HEAP32[$$124$450 >> 2] | 0; //@line 16568
  HEAP32[$12 + 8 >> 2] = 0; //@line 16570
  HEAP32[$12 >> 2] = 185; //@line 16571
  HEAP32[$12 + 4 >> 2] = $33; //@line 16573
  $35 = $12 + 12 | 0; //@line 16574
  HEAP32[$35 >> 2] = 764; //@line 16575
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 16576
  __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 0, $12) | 0; //@line 16577
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 227; //@line 16580
   $36 = $ReallocAsyncCtx8 + 4 | 0; //@line 16581
   HEAP32[$36 >> 2] = $35; //@line 16582
   $37 = $ReallocAsyncCtx8 + 8 | 0; //@line 16583
   HEAP32[$37 >> 2] = $2; //@line 16584
   $38 = $ReallocAsyncCtx8 + 12 | 0; //@line 16585
   HEAP32[$38 >> 2] = $4; //@line 16586
   $39 = $ReallocAsyncCtx8 + 16 | 0; //@line 16587
   HEAP32[$39 >> 2] = $6; //@line 16588
   $40 = $ReallocAsyncCtx8 + 20 | 0; //@line 16589
   HEAP32[$40 >> 2] = $32; //@line 16590
   $41 = $ReallocAsyncCtx8 + 24 | 0; //@line 16591
   HEAP32[$41 >> 2] = $8; //@line 16592
   $42 = $ReallocAsyncCtx8 + 28 | 0; //@line 16593
   HEAP32[$42 >> 2] = $10; //@line 16594
   $43 = $ReallocAsyncCtx8 + 32 | 0; //@line 16595
   HEAP32[$43 >> 2] = $12; //@line 16596
   sp = STACKTOP; //@line 16597
   return;
  }
  ___async_unwind = 0; //@line 16600
  HEAP32[$ReallocAsyncCtx8 >> 2] = 227; //@line 16601
  $36 = $ReallocAsyncCtx8 + 4 | 0; //@line 16602
  HEAP32[$36 >> 2] = $35; //@line 16603
  $37 = $ReallocAsyncCtx8 + 8 | 0; //@line 16604
  HEAP32[$37 >> 2] = $2; //@line 16605
  $38 = $ReallocAsyncCtx8 + 12 | 0; //@line 16606
  HEAP32[$38 >> 2] = $4; //@line 16607
  $39 = $ReallocAsyncCtx8 + 16 | 0; //@line 16608
  HEAP32[$39 >> 2] = $6; //@line 16609
  $40 = $ReallocAsyncCtx8 + 20 | 0; //@line 16610
  HEAP32[$40 >> 2] = $32; //@line 16611
  $41 = $ReallocAsyncCtx8 + 24 | 0; //@line 16612
  HEAP32[$41 >> 2] = $8; //@line 16613
  $42 = $ReallocAsyncCtx8 + 28 | 0; //@line 16614
  HEAP32[$42 >> 2] = $10; //@line 16615
  $43 = $ReallocAsyncCtx8 + 32 | 0; //@line 16616
  HEAP32[$43 >> 2] = $12; //@line 16617
  sp = STACKTOP; //@line 16618
  return;
 } else {
  $23 = HEAP32[$19 + 4 >> 2] | 0; //@line 16623
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 16624
  FUNCTION_TABLE_vii[$23 & 7]($10, $$124$450 + 32 | 0); //@line 16625
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 226; //@line 16628
   $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 16629
   HEAP32[$24 >> 2] = $2; //@line 16630
   $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 16631
   HEAP32[$25 >> 2] = $4; //@line 16632
   $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 16633
   HEAP32[$26 >> 2] = $6; //@line 16634
   $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 16635
   HEAP32[$27 >> 2] = $18; //@line 16636
   $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 16637
   HEAP32[$28 >> 2] = $8; //@line 16638
   $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 16639
   HEAP32[$29 >> 2] = $10; //@line 16640
   $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 16641
   HEAP32[$30 >> 2] = $$124$450; //@line 16642
   $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 16643
   HEAP32[$31 >> 2] = $12; //@line 16644
   sp = STACKTOP; //@line 16645
   return;
  }
  ___async_unwind = 0; //@line 16648
  HEAP32[$ReallocAsyncCtx2 >> 2] = 226; //@line 16649
  $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 16650
  HEAP32[$24 >> 2] = $2; //@line 16651
  $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 16652
  HEAP32[$25 >> 2] = $4; //@line 16653
  $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 16654
  HEAP32[$26 >> 2] = $6; //@line 16655
  $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 16656
  HEAP32[$27 >> 2] = $18; //@line 16657
  $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 16658
  HEAP32[$28 >> 2] = $8; //@line 16659
  $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 16660
  HEAP32[$29 >> 2] = $10; //@line 16661
  $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 16662
  HEAP32[$30 >> 2] = $$124$450; //@line 16663
  $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 16664
  HEAP32[$31 >> 2] = $12; //@line 16665
  sp = STACKTOP; //@line 16666
  return;
 }
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_173($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $85 = 0, $91 = 0, $97 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12950
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12952
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12956
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12958
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12960
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12962
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12964
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12966
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12968
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12970
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12972
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12974
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12976
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($4); //@line 12981
  return;
 }
 $33 = (HEAPU8[$4 >> 0] | 0) << 8 | (HEAPU8[$8 >> 0] | 0); //@line 12989
 $34 = $33 & 65535; //@line 12990
 $35 = HEAP32[1960] | 0; //@line 12991
 if (!$35) {
  label = 4; //@line 12994
 } else {
  if (($33 | 0) == (HEAPU16[$35 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $35; //@line 13001
  } else {
   label = 4; //@line 13003
  }
 }
 do {
  if ((label | 0) == 4) {
   $41 = HEAP32[1961] | 0; //@line 13008
   if ($41 | 0) {
    if (($33 | 0) == (HEAPU16[$41 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $41; //@line 13016
     break;
    }
   }
   $85 = HEAP32[1962] | 0; //@line 13020
   if ($85 | 0) {
    if (($33 | 0) == (HEAPU16[$85 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $85; //@line 13028
     break;
    }
   }
   $91 = HEAP32[1963] | 0; //@line 13032
   if ($91 | 0) {
    if (($33 | 0) == (HEAPU16[$91 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $91; //@line 13040
     break;
    }
   }
   $97 = HEAP32[1964] | 0; //@line 13044
   if ($97 | 0) {
    if (($33 | 0) == (HEAPU16[$97 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $97; //@line 13052
     break;
    }
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 13056
   $65 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($2, 0, $4, 512) | 0; //@line 13057
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 13060
    $66 = $ReallocAsyncCtx6 + 4 | 0; //@line 13061
    HEAP32[$66 >> 2] = $2; //@line 13062
    $67 = $ReallocAsyncCtx6 + 8 | 0; //@line 13063
    HEAP32[$67 >> 2] = $4; //@line 13064
    $68 = $ReallocAsyncCtx6 + 12 | 0; //@line 13065
    HEAP32[$68 >> 2] = $6; //@line 13066
    $69 = $ReallocAsyncCtx6 + 16 | 0; //@line 13067
    HEAP32[$69 >> 2] = $8; //@line 13068
    $70 = $ReallocAsyncCtx6 + 20 | 0; //@line 13069
    HEAP32[$70 >> 2] = $10; //@line 13070
    $71 = $ReallocAsyncCtx6 + 24 | 0; //@line 13071
    HEAP32[$71 >> 2] = $12; //@line 13072
    $72 = $ReallocAsyncCtx6 + 28 | 0; //@line 13073
    HEAP32[$72 >> 2] = $14; //@line 13074
    $73 = $ReallocAsyncCtx6 + 32 | 0; //@line 13075
    HEAP32[$73 >> 2] = $16; //@line 13076
    $74 = $ReallocAsyncCtx6 + 36 | 0; //@line 13077
    HEAP32[$74 >> 2] = $18; //@line 13078
    $75 = $ReallocAsyncCtx6 + 40 | 0; //@line 13079
    HEAP32[$75 >> 2] = $20; //@line 13080
    $76 = $ReallocAsyncCtx6 + 44 | 0; //@line 13081
    HEAP32[$76 >> 2] = $22; //@line 13082
    $77 = $ReallocAsyncCtx6 + 48 | 0; //@line 13083
    HEAP32[$77 >> 2] = $24; //@line 13084
    $78 = $ReallocAsyncCtx6 + 52 | 0; //@line 13085
    HEAP32[$78 >> 2] = $26; //@line 13086
    sp = STACKTOP; //@line 13087
    return;
   }
   HEAP32[___async_retval >> 2] = $65; //@line 13091
   ___async_unwind = 0; //@line 13092
   HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 13093
   $66 = $ReallocAsyncCtx6 + 4 | 0; //@line 13094
   HEAP32[$66 >> 2] = $2; //@line 13095
   $67 = $ReallocAsyncCtx6 + 8 | 0; //@line 13096
   HEAP32[$67 >> 2] = $4; //@line 13097
   $68 = $ReallocAsyncCtx6 + 12 | 0; //@line 13098
   HEAP32[$68 >> 2] = $6; //@line 13099
   $69 = $ReallocAsyncCtx6 + 16 | 0; //@line 13100
   HEAP32[$69 >> 2] = $8; //@line 13101
   $70 = $ReallocAsyncCtx6 + 20 | 0; //@line 13102
   HEAP32[$70 >> 2] = $10; //@line 13103
   $71 = $ReallocAsyncCtx6 + 24 | 0; //@line 13104
   HEAP32[$71 >> 2] = $12; //@line 13105
   $72 = $ReallocAsyncCtx6 + 28 | 0; //@line 13106
   HEAP32[$72 >> 2] = $14; //@line 13107
   $73 = $ReallocAsyncCtx6 + 32 | 0; //@line 13108
   HEAP32[$73 >> 2] = $16; //@line 13109
   $74 = $ReallocAsyncCtx6 + 36 | 0; //@line 13110
   HEAP32[$74 >> 2] = $18; //@line 13111
   $75 = $ReallocAsyncCtx6 + 40 | 0; //@line 13112
   HEAP32[$75 >> 2] = $20; //@line 13113
   $76 = $ReallocAsyncCtx6 + 44 | 0; //@line 13114
   HEAP32[$76 >> 2] = $22; //@line 13115
   $77 = $ReallocAsyncCtx6 + 48 | 0; //@line 13116
   HEAP32[$77 >> 2] = $24; //@line 13117
   $78 = $ReallocAsyncCtx6 + 52 | 0; //@line 13118
   HEAP32[$78 >> 2] = $26; //@line 13119
   sp = STACKTOP; //@line 13120
   return;
  }
 } while (0);
 $44 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 13125
 $$ = $44 >>> 0 > 1 ? $44 : 1; //@line 13127
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 13131
 $47 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 9760) | 0; //@line 13132
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 243; //@line 13135
  $48 = $ReallocAsyncCtx4 + 4 | 0; //@line 13136
  HEAP32[$48 >> 2] = $2; //@line 13137
  $49 = $ReallocAsyncCtx4 + 8 | 0; //@line 13138
  HEAP32[$49 >> 2] = $4; //@line 13139
  $50 = $ReallocAsyncCtx4 + 12 | 0; //@line 13140
  HEAP32[$50 >> 2] = $$lcssa; //@line 13141
  $51 = $ReallocAsyncCtx4 + 16 | 0; //@line 13142
  HEAP32[$51 >> 2] = $6; //@line 13143
  $52 = $ReallocAsyncCtx4 + 20 | 0; //@line 13144
  HEAP32[$52 >> 2] = $8; //@line 13145
  $53 = $ReallocAsyncCtx4 + 24 | 0; //@line 13146
  HEAP32[$53 >> 2] = $10; //@line 13147
  $54 = $ReallocAsyncCtx4 + 28 | 0; //@line 13148
  HEAP32[$54 >> 2] = $12; //@line 13149
  $55 = $ReallocAsyncCtx4 + 32 | 0; //@line 13150
  HEAP32[$55 >> 2] = $14; //@line 13151
  $56 = $ReallocAsyncCtx4 + 36 | 0; //@line 13152
  HEAP32[$56 >> 2] = $16; //@line 13153
  $57 = $ReallocAsyncCtx4 + 40 | 0; //@line 13154
  HEAP32[$57 >> 2] = $18; //@line 13155
  $58 = $ReallocAsyncCtx4 + 44 | 0; //@line 13156
  HEAP32[$58 >> 2] = $20; //@line 13157
  $59 = $ReallocAsyncCtx4 + 48 | 0; //@line 13158
  HEAP32[$59 >> 2] = $22; //@line 13159
  $60 = $ReallocAsyncCtx4 + 52 | 0; //@line 13160
  HEAP32[$60 >> 2] = $24; //@line 13161
  $61 = $ReallocAsyncCtx4 + 56 | 0; //@line 13162
  HEAP32[$61 >> 2] = $26; //@line 13163
  $62 = $ReallocAsyncCtx4 + 60 | 0; //@line 13164
  HEAP16[$62 >> 1] = $34; //@line 13165
  $63 = $ReallocAsyncCtx4 + 64 | 0; //@line 13166
  HEAP32[$63 >> 2] = $$; //@line 13167
  sp = STACKTOP; //@line 13168
  return;
 }
 HEAP32[___async_retval >> 2] = $47; //@line 13172
 ___async_unwind = 0; //@line 13173
 HEAP32[$ReallocAsyncCtx4 >> 2] = 243; //@line 13174
 $48 = $ReallocAsyncCtx4 + 4 | 0; //@line 13175
 HEAP32[$48 >> 2] = $2; //@line 13176
 $49 = $ReallocAsyncCtx4 + 8 | 0; //@line 13177
 HEAP32[$49 >> 2] = $4; //@line 13178
 $50 = $ReallocAsyncCtx4 + 12 | 0; //@line 13179
 HEAP32[$50 >> 2] = $$lcssa; //@line 13180
 $51 = $ReallocAsyncCtx4 + 16 | 0; //@line 13181
 HEAP32[$51 >> 2] = $6; //@line 13182
 $52 = $ReallocAsyncCtx4 + 20 | 0; //@line 13183
 HEAP32[$52 >> 2] = $8; //@line 13184
 $53 = $ReallocAsyncCtx4 + 24 | 0; //@line 13185
 HEAP32[$53 >> 2] = $10; //@line 13186
 $54 = $ReallocAsyncCtx4 + 28 | 0; //@line 13187
 HEAP32[$54 >> 2] = $12; //@line 13188
 $55 = $ReallocAsyncCtx4 + 32 | 0; //@line 13189
 HEAP32[$55 >> 2] = $14; //@line 13190
 $56 = $ReallocAsyncCtx4 + 36 | 0; //@line 13191
 HEAP32[$56 >> 2] = $16; //@line 13192
 $57 = $ReallocAsyncCtx4 + 40 | 0; //@line 13193
 HEAP32[$57 >> 2] = $18; //@line 13194
 $58 = $ReallocAsyncCtx4 + 44 | 0; //@line 13195
 HEAP32[$58 >> 2] = $20; //@line 13196
 $59 = $ReallocAsyncCtx4 + 48 | 0; //@line 13197
 HEAP32[$59 >> 2] = $22; //@line 13198
 $60 = $ReallocAsyncCtx4 + 52 | 0; //@line 13199
 HEAP32[$60 >> 2] = $24; //@line 13200
 $61 = $ReallocAsyncCtx4 + 56 | 0; //@line 13201
 HEAP32[$61 >> 2] = $26; //@line 13202
 $62 = $ReallocAsyncCtx4 + 60 | 0; //@line 13203
 HEAP16[$62 >> 1] = $34; //@line 13204
 $63 = $ReallocAsyncCtx4 + 64 | 0; //@line 13205
 HEAP32[$63 >> 2] = $$; //@line 13206
 sp = STACKTOP; //@line 13207
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_76($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $33 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 22977
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22982
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22984
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22986
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22988
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22990
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22992
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22994
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22996
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22998
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 23000
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $39 = HEAP32[$12 >> 2] | 0; //@line 23002
  if (!$39) {
   $53 = $18 + 12 | 0; //@line 23005
   HEAP32[$53 >> 2] = 0; //@line 23006
   $54 = HEAP32[$14 >> 2] | 0; //@line 23007
   HEAP32[$20 + 8 >> 2] = 0; //@line 23009
   HEAP32[$20 >> 2] = 185; //@line 23010
   HEAP32[$20 + 4 >> 2] = $54; //@line 23012
   $56 = $20 + 12 | 0; //@line 23013
   HEAP32[$56 >> 2] = 764; //@line 23014
   $ReallocAsyncCtx18 = _emscripten_realloc_async_context(48) | 0; //@line 23015
   $57 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($18, 0, $20) | 0; //@line 23016
   if (___async) {
    HEAP32[$ReallocAsyncCtx18 >> 2] = 186; //@line 23019
    $58 = $ReallocAsyncCtx18 + 4 | 0; //@line 23020
    HEAP32[$58 >> 2] = $56; //@line 23021
    $59 = $ReallocAsyncCtx18 + 8 | 0; //@line 23022
    HEAP32[$59 >> 2] = $4; //@line 23023
    $60 = $ReallocAsyncCtx18 + 12 | 0; //@line 23024
    HEAP32[$60 >> 2] = $8; //@line 23025
    $61 = $ReallocAsyncCtx18 + 16 | 0; //@line 23026
    HEAP32[$61 >> 2] = $14; //@line 23027
    $62 = $ReallocAsyncCtx18 + 20 | 0; //@line 23028
    HEAP32[$62 >> 2] = $22; //@line 23029
    $63 = $ReallocAsyncCtx18 + 24 | 0; //@line 23030
    HEAP32[$63 >> 2] = $53; //@line 23031
    $64 = $ReallocAsyncCtx18 + 28 | 0; //@line 23032
    HEAP32[$64 >> 2] = $18; //@line 23033
    $65 = $ReallocAsyncCtx18 + 32 | 0; //@line 23034
    HEAP32[$65 >> 2] = $12; //@line 23035
    $66 = $ReallocAsyncCtx18 + 36 | 0; //@line 23036
    HEAP32[$66 >> 2] = $10; //@line 23037
    $67 = $ReallocAsyncCtx18 + 40 | 0; //@line 23038
    HEAP32[$67 >> 2] = $6; //@line 23039
    $68 = $ReallocAsyncCtx18 + 44 | 0; //@line 23040
    HEAP32[$68 >> 2] = $20; //@line 23041
    sp = STACKTOP; //@line 23042
    return;
   }
   HEAP32[___async_retval >> 2] = $57; //@line 23046
   ___async_unwind = 0; //@line 23047
   HEAP32[$ReallocAsyncCtx18 >> 2] = 186; //@line 23048
   $58 = $ReallocAsyncCtx18 + 4 | 0; //@line 23049
   HEAP32[$58 >> 2] = $56; //@line 23050
   $59 = $ReallocAsyncCtx18 + 8 | 0; //@line 23051
   HEAP32[$59 >> 2] = $4; //@line 23052
   $60 = $ReallocAsyncCtx18 + 12 | 0; //@line 23053
   HEAP32[$60 >> 2] = $8; //@line 23054
   $61 = $ReallocAsyncCtx18 + 16 | 0; //@line 23055
   HEAP32[$61 >> 2] = $14; //@line 23056
   $62 = $ReallocAsyncCtx18 + 20 | 0; //@line 23057
   HEAP32[$62 >> 2] = $22; //@line 23058
   $63 = $ReallocAsyncCtx18 + 24 | 0; //@line 23059
   HEAP32[$63 >> 2] = $53; //@line 23060
   $64 = $ReallocAsyncCtx18 + 28 | 0; //@line 23061
   HEAP32[$64 >> 2] = $18; //@line 23062
   $65 = $ReallocAsyncCtx18 + 32 | 0; //@line 23063
   HEAP32[$65 >> 2] = $12; //@line 23064
   $66 = $ReallocAsyncCtx18 + 36 | 0; //@line 23065
   HEAP32[$66 >> 2] = $10; //@line 23066
   $67 = $ReallocAsyncCtx18 + 40 | 0; //@line 23067
   HEAP32[$67 >> 2] = $6; //@line 23068
   $68 = $ReallocAsyncCtx18 + 44 | 0; //@line 23069
   HEAP32[$68 >> 2] = $20; //@line 23070
   sp = STACKTOP; //@line 23071
   return;
  } else {
   $42 = HEAP32[$39 + 4 >> 2] | 0; //@line 23075
   $ReallocAsyncCtx11 = _emscripten_realloc_async_context(44) | 0; //@line 23076
   FUNCTION_TABLE_vii[$42 & 7]($18, $10); //@line 23077
   if (___async) {
    HEAP32[$ReallocAsyncCtx11 >> 2] = 184; //@line 23080
    $43 = $ReallocAsyncCtx11 + 4 | 0; //@line 23081
    HEAP32[$43 >> 2] = $4; //@line 23082
    $44 = $ReallocAsyncCtx11 + 8 | 0; //@line 23083
    HEAP32[$44 >> 2] = $8; //@line 23084
    $45 = $ReallocAsyncCtx11 + 12 | 0; //@line 23085
    HEAP32[$45 >> 2] = $14; //@line 23086
    $46 = $ReallocAsyncCtx11 + 16 | 0; //@line 23087
    HEAP32[$46 >> 2] = $16; //@line 23088
    $47 = $ReallocAsyncCtx11 + 20 | 0; //@line 23089
    HEAP32[$47 >> 2] = $18; //@line 23090
    $48 = $ReallocAsyncCtx11 + 24 | 0; //@line 23091
    HEAP32[$48 >> 2] = $12; //@line 23092
    $49 = $ReallocAsyncCtx11 + 28 | 0; //@line 23093
    HEAP32[$49 >> 2] = $10; //@line 23094
    $50 = $ReallocAsyncCtx11 + 32 | 0; //@line 23095
    HEAP32[$50 >> 2] = $6; //@line 23096
    $51 = $ReallocAsyncCtx11 + 36 | 0; //@line 23097
    HEAP32[$51 >> 2] = $20; //@line 23098
    $52 = $ReallocAsyncCtx11 + 40 | 0; //@line 23099
    HEAP32[$52 >> 2] = $22; //@line 23100
    sp = STACKTOP; //@line 23101
    return;
   }
   ___async_unwind = 0; //@line 23104
   HEAP32[$ReallocAsyncCtx11 >> 2] = 184; //@line 23105
   $43 = $ReallocAsyncCtx11 + 4 | 0; //@line 23106
   HEAP32[$43 >> 2] = $4; //@line 23107
   $44 = $ReallocAsyncCtx11 + 8 | 0; //@line 23108
   HEAP32[$44 >> 2] = $8; //@line 23109
   $45 = $ReallocAsyncCtx11 + 12 | 0; //@line 23110
   HEAP32[$45 >> 2] = $14; //@line 23111
   $46 = $ReallocAsyncCtx11 + 16 | 0; //@line 23112
   HEAP32[$46 >> 2] = $16; //@line 23113
   $47 = $ReallocAsyncCtx11 + 20 | 0; //@line 23114
   HEAP32[$47 >> 2] = $18; //@line 23115
   $48 = $ReallocAsyncCtx11 + 24 | 0; //@line 23116
   HEAP32[$48 >> 2] = $12; //@line 23117
   $49 = $ReallocAsyncCtx11 + 28 | 0; //@line 23118
   HEAP32[$49 >> 2] = $10; //@line 23119
   $50 = $ReallocAsyncCtx11 + 32 | 0; //@line 23120
   HEAP32[$50 >> 2] = $6; //@line 23121
   $51 = $ReallocAsyncCtx11 + 36 | 0; //@line 23122
   HEAP32[$51 >> 2] = $20; //@line 23123
   $52 = $ReallocAsyncCtx11 + 40 | 0; //@line 23124
   HEAP32[$52 >> 2] = $22; //@line 23125
   sp = STACKTOP; //@line 23126
   return;
  }
 }
 $23 = HEAP32[$6 >> 2] | 0; //@line 23130
 if ($23 | 0) {
  __ZdlPv($23); //@line 23133
 }
 $25 = HEAP32[$12 >> 2] | 0; //@line 23135
 if ($25 | 0) {
  $28 = HEAP32[$25 + 8 >> 2] | 0; //@line 23139
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 23140
  FUNCTION_TABLE_vi[$28 & 511]($10); //@line 23141
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 23144
   $29 = $ReallocAsyncCtx9 + 4 | 0; //@line 23145
   HEAP32[$29 >> 2] = $4; //@line 23146
   $30 = $ReallocAsyncCtx9 + 8 | 0; //@line 23147
   HEAP32[$30 >> 2] = $8; //@line 23148
   $31 = $ReallocAsyncCtx9 + 12 | 0; //@line 23149
   HEAP32[$31 >> 2] = $22; //@line 23150
   sp = STACKTOP; //@line 23151
   return;
  }
  ___async_unwind = 0; //@line 23154
  HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 23155
  $29 = $ReallocAsyncCtx9 + 4 | 0; //@line 23156
  HEAP32[$29 >> 2] = $4; //@line 23157
  $30 = $ReallocAsyncCtx9 + 8 | 0; //@line 23158
  HEAP32[$30 >> 2] = $8; //@line 23159
  $31 = $ReallocAsyncCtx9 + 12 | 0; //@line 23160
  HEAP32[$31 >> 2] = $22; //@line 23161
  sp = STACKTOP; //@line 23162
  return;
 }
 $33 = HEAP32[$4 + 28 >> 2] | 0; //@line 23166
 if (!$33) {
  __ZdlPv($4); //@line 23169
  HEAP32[___async_retval >> 2] = -3007; //@line 23171
  return;
 }
 $36 = HEAP32[$33 + 8 >> 2] | 0; //@line 23175
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 23176
 FUNCTION_TABLE_vi[$36 & 511]($8); //@line 23177
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 23180
  $37 = $ReallocAsyncCtx10 + 4 | 0; //@line 23181
  HEAP32[$37 >> 2] = $4; //@line 23182
  $38 = $ReallocAsyncCtx10 + 8 | 0; //@line 23183
  HEAP32[$38 >> 2] = $22; //@line 23184
  sp = STACKTOP; //@line 23185
  return;
 }
 ___async_unwind = 0; //@line 23188
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 23189
 $37 = $ReallocAsyncCtx10 + 4 | 0; //@line 23190
 HEAP32[$37 >> 2] = $4; //@line 23191
 $38 = $ReallocAsyncCtx10 + 8 | 0; //@line 23192
 HEAP32[$38 >> 2] = $22; //@line 23193
 sp = STACKTOP; //@line 23194
 return;
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12481
 STACKTOP = STACKTOP + 32 | 0; //@line 12482
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12482
 $0 = sp; //@line 12483
 _gpio_init_out($0, 50); //@line 12484
 while (1) {
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12487
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12488
  _wait_ms(150); //@line 12489
  if (___async) {
   label = 3; //@line 12492
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 12495
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12497
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12498
  _wait_ms(150); //@line 12499
  if (___async) {
   label = 5; //@line 12502
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 12505
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12507
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12508
  _wait_ms(150); //@line 12509
  if (___async) {
   label = 7; //@line 12512
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 12515
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12517
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12518
  _wait_ms(150); //@line 12519
  if (___async) {
   label = 9; //@line 12522
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 12525
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12527
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12528
  _wait_ms(150); //@line 12529
  if (___async) {
   label = 11; //@line 12532
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 12535
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12537
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12538
  _wait_ms(150); //@line 12539
  if (___async) {
   label = 13; //@line 12542
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 12545
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12547
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12548
  _wait_ms(150); //@line 12549
  if (___async) {
   label = 15; //@line 12552
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 12555
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12557
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12558
  _wait_ms(150); //@line 12559
  if (___async) {
   label = 17; //@line 12562
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 12565
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12567
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12568
  _wait_ms(400); //@line 12569
  if (___async) {
   label = 19; //@line 12572
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 12575
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12577
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12578
  _wait_ms(400); //@line 12579
  if (___async) {
   label = 21; //@line 12582
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 12585
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12587
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12588
  _wait_ms(400); //@line 12589
  if (___async) {
   label = 23; //@line 12592
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12595
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12597
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12598
  _wait_ms(400); //@line 12599
  if (___async) {
   label = 25; //@line 12602
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12605
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12607
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12608
  _wait_ms(400); //@line 12609
  if (___async) {
   label = 27; //@line 12612
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12615
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12617
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12618
  _wait_ms(400); //@line 12619
  if (___async) {
   label = 29; //@line 12622
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12625
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12627
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12628
  _wait_ms(400); //@line 12629
  if (___async) {
   label = 31; //@line 12632
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12635
  _emscripten_asm_const_iii(10, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12637
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12638
  _wait_ms(400); //@line 12639
  if (___async) {
   label = 33; //@line 12642
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12645
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 268; //@line 12649
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 12651
   sp = STACKTOP; //@line 12652
   STACKTOP = sp; //@line 12653
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 269; //@line 12657
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 12659
   sp = STACKTOP; //@line 12660
   STACKTOP = sp; //@line 12661
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 270; //@line 12665
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 12667
   sp = STACKTOP; //@line 12668
   STACKTOP = sp; //@line 12669
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 271; //@line 12673
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 12675
   sp = STACKTOP; //@line 12676
   STACKTOP = sp; //@line 12677
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 272; //@line 12681
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 12683
   sp = STACKTOP; //@line 12684
   STACKTOP = sp; //@line 12685
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 273; //@line 12689
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 12691
   sp = STACKTOP; //@line 12692
   STACKTOP = sp; //@line 12693
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 274; //@line 12697
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 12699
   sp = STACKTOP; //@line 12700
   STACKTOP = sp; //@line 12701
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 275; //@line 12705
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 12707
   sp = STACKTOP; //@line 12708
   STACKTOP = sp; //@line 12709
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 276; //@line 12713
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 12715
   sp = STACKTOP; //@line 12716
   STACKTOP = sp; //@line 12717
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 277; //@line 12721
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 12723
   sp = STACKTOP; //@line 12724
   STACKTOP = sp; //@line 12725
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 278; //@line 12729
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 12731
   sp = STACKTOP; //@line 12732
   STACKTOP = sp; //@line 12733
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 279; //@line 12737
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12739
   sp = STACKTOP; //@line 12740
   STACKTOP = sp; //@line 12741
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 280; //@line 12745
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12747
   sp = STACKTOP; //@line 12748
   STACKTOP = sp; //@line 12749
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 281; //@line 12753
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 12755
   sp = STACKTOP; //@line 12756
   STACKTOP = sp; //@line 12757
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 282; //@line 12761
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 12763
   sp = STACKTOP; //@line 12764
   STACKTOP = sp; //@line 12765
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 283; //@line 12769
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 12771
   sp = STACKTOP; //@line 12772
   STACKTOP = sp; //@line 12773
   return;
  }
 }
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_174($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$sroa_idx5$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $71 = 0, $77 = 0, $8 = 0, $83 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13217
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13219
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13221
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13223
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13225
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($4); //@line 13230
  return;
 }
 $11 = $4 + 1 | 0; //@line 13233
 $12 = $6 + 12 | 0; //@line 13234
 $13 = $8 + 8 | 0; //@line 13235
 $$sroa_idx5$i$i = $8 + 4 | 0; //@line 13236
 $14 = $8 + 12 | 0; //@line 13237
 $20 = (HEAPU8[$4 >> 0] | 0) << 8 | (HEAPU8[$11 >> 0] | 0); //@line 13243
 $21 = $20 & 65535; //@line 13244
 $22 = HEAP32[1960] | 0; //@line 13245
 if (!$22) {
  label = 6; //@line 13248
 } else {
  if (($20 | 0) == (HEAPU16[$22 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $22; //@line 13255
  } else {
   label = 6; //@line 13257
  }
 }
 do {
  if ((label | 0) == 6) {
   $28 = HEAP32[1961] | 0; //@line 13262
   if ($28 | 0) {
    if (($20 | 0) == (HEAPU16[$28 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $28; //@line 13270
     break;
    }
   }
   $71 = HEAP32[1962] | 0; //@line 13274
   if ($71 | 0) {
    if (($20 | 0) == (HEAPU16[$71 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $71; //@line 13282
     break;
    }
   }
   $77 = HEAP32[1963] | 0; //@line 13286
   if ($77 | 0) {
    if (($20 | 0) == (HEAPU16[$77 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $77; //@line 13294
     break;
    }
   }
   $83 = HEAP32[1964] | 0; //@line 13298
   if ($83 | 0) {
    if (($20 | 0) == (HEAPU16[$83 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $83; //@line 13306
     break;
    }
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 13310
   $52 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($2, 0, $4, 512) | 0; //@line 13311
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 13314
    $53 = $ReallocAsyncCtx6 + 4 | 0; //@line 13315
    HEAP32[$53 >> 2] = $2; //@line 13316
    $54 = $ReallocAsyncCtx6 + 8 | 0; //@line 13317
    HEAP32[$54 >> 2] = $4; //@line 13318
    $55 = $ReallocAsyncCtx6 + 12 | 0; //@line 13319
    HEAP32[$55 >> 2] = $8; //@line 13320
    $56 = $ReallocAsyncCtx6 + 16 | 0; //@line 13321
    HEAP32[$56 >> 2] = $11; //@line 13322
    $57 = $ReallocAsyncCtx6 + 20 | 0; //@line 13323
    HEAP32[$57 >> 2] = $12; //@line 13324
    $58 = $ReallocAsyncCtx6 + 24 | 0; //@line 13325
    HEAP32[$58 >> 2] = $13; //@line 13326
    $59 = $ReallocAsyncCtx6 + 28 | 0; //@line 13327
    HEAP32[$59 >> 2] = $8; //@line 13328
    $60 = $ReallocAsyncCtx6 + 32 | 0; //@line 13329
    HEAP32[$60 >> 2] = $$sroa_idx5$i$i; //@line 13330
    $61 = $ReallocAsyncCtx6 + 36 | 0; //@line 13331
    HEAP32[$61 >> 2] = $14; //@line 13332
    $62 = $ReallocAsyncCtx6 + 40 | 0; //@line 13333
    HEAP32[$62 >> 2] = $6; //@line 13334
    $63 = $ReallocAsyncCtx6 + 44 | 0; //@line 13335
    HEAP32[$63 >> 2] = $8; //@line 13336
    $64 = $ReallocAsyncCtx6 + 48 | 0; //@line 13337
    HEAP32[$64 >> 2] = $6; //@line 13338
    $65 = $ReallocAsyncCtx6 + 52 | 0; //@line 13339
    HEAP32[$65 >> 2] = $12; //@line 13340
    sp = STACKTOP; //@line 13341
    return;
   }
   HEAP32[___async_retval >> 2] = $52; //@line 13345
   ___async_unwind = 0; //@line 13346
   HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 13347
   $53 = $ReallocAsyncCtx6 + 4 | 0; //@line 13348
   HEAP32[$53 >> 2] = $2; //@line 13349
   $54 = $ReallocAsyncCtx6 + 8 | 0; //@line 13350
   HEAP32[$54 >> 2] = $4; //@line 13351
   $55 = $ReallocAsyncCtx6 + 12 | 0; //@line 13352
   HEAP32[$55 >> 2] = $8; //@line 13353
   $56 = $ReallocAsyncCtx6 + 16 | 0; //@line 13354
   HEAP32[$56 >> 2] = $11; //@line 13355
   $57 = $ReallocAsyncCtx6 + 20 | 0; //@line 13356
   HEAP32[$57 >> 2] = $12; //@line 13357
   $58 = $ReallocAsyncCtx6 + 24 | 0; //@line 13358
   HEAP32[$58 >> 2] = $13; //@line 13359
   $59 = $ReallocAsyncCtx6 + 28 | 0; //@line 13360
   HEAP32[$59 >> 2] = $8; //@line 13361
   $60 = $ReallocAsyncCtx6 + 32 | 0; //@line 13362
   HEAP32[$60 >> 2] = $$sroa_idx5$i$i; //@line 13363
   $61 = $ReallocAsyncCtx6 + 36 | 0; //@line 13364
   HEAP32[$61 >> 2] = $14; //@line 13365
   $62 = $ReallocAsyncCtx6 + 40 | 0; //@line 13366
   HEAP32[$62 >> 2] = $6; //@line 13367
   $63 = $ReallocAsyncCtx6 + 44 | 0; //@line 13368
   HEAP32[$63 >> 2] = $8; //@line 13369
   $64 = $ReallocAsyncCtx6 + 48 | 0; //@line 13370
   HEAP32[$64 >> 2] = $6; //@line 13371
   $65 = $ReallocAsyncCtx6 + 52 | 0; //@line 13372
   HEAP32[$65 >> 2] = $12; //@line 13373
   sp = STACKTOP; //@line 13374
   return;
  }
 } while (0);
 $31 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 13379
 $$ = $31 >>> 0 > 1 ? $31 : 1; //@line 13381
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 13385
 $34 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 9760) | 0; //@line 13386
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 243; //@line 13389
  $35 = $ReallocAsyncCtx4 + 4 | 0; //@line 13390
  HEAP32[$35 >> 2] = $2; //@line 13391
  $36 = $ReallocAsyncCtx4 + 8 | 0; //@line 13392
  HEAP32[$36 >> 2] = $4; //@line 13393
  $37 = $ReallocAsyncCtx4 + 12 | 0; //@line 13394
  HEAP32[$37 >> 2] = $$lcssa; //@line 13395
  $38 = $ReallocAsyncCtx4 + 16 | 0; //@line 13396
  HEAP32[$38 >> 2] = $8; //@line 13397
  $39 = $ReallocAsyncCtx4 + 20 | 0; //@line 13398
  HEAP32[$39 >> 2] = $11; //@line 13399
  $40 = $ReallocAsyncCtx4 + 24 | 0; //@line 13400
  HEAP32[$40 >> 2] = $12; //@line 13401
  $41 = $ReallocAsyncCtx4 + 28 | 0; //@line 13402
  HEAP32[$41 >> 2] = $13; //@line 13403
  $42 = $ReallocAsyncCtx4 + 32 | 0; //@line 13404
  HEAP32[$42 >> 2] = $8; //@line 13405
  $43 = $ReallocAsyncCtx4 + 36 | 0; //@line 13406
  HEAP32[$43 >> 2] = $$sroa_idx5$i$i; //@line 13407
  $44 = $ReallocAsyncCtx4 + 40 | 0; //@line 13408
  HEAP32[$44 >> 2] = $14; //@line 13409
  $45 = $ReallocAsyncCtx4 + 44 | 0; //@line 13410
  HEAP32[$45 >> 2] = $6; //@line 13411
  $46 = $ReallocAsyncCtx4 + 48 | 0; //@line 13412
  HEAP32[$46 >> 2] = $8; //@line 13413
  $47 = $ReallocAsyncCtx4 + 52 | 0; //@line 13414
  HEAP32[$47 >> 2] = $6; //@line 13415
  $48 = $ReallocAsyncCtx4 + 56 | 0; //@line 13416
  HEAP32[$48 >> 2] = $12; //@line 13417
  $49 = $ReallocAsyncCtx4 + 60 | 0; //@line 13418
  HEAP16[$49 >> 1] = $21; //@line 13419
  $50 = $ReallocAsyncCtx4 + 64 | 0; //@line 13420
  HEAP32[$50 >> 2] = $$; //@line 13421
  sp = STACKTOP; //@line 13422
  return;
 }
 HEAP32[___async_retval >> 2] = $34; //@line 13426
 ___async_unwind = 0; //@line 13427
 HEAP32[$ReallocAsyncCtx4 >> 2] = 243; //@line 13428
 $35 = $ReallocAsyncCtx4 + 4 | 0; //@line 13429
 HEAP32[$35 >> 2] = $2; //@line 13430
 $36 = $ReallocAsyncCtx4 + 8 | 0; //@line 13431
 HEAP32[$36 >> 2] = $4; //@line 13432
 $37 = $ReallocAsyncCtx4 + 12 | 0; //@line 13433
 HEAP32[$37 >> 2] = $$lcssa; //@line 13434
 $38 = $ReallocAsyncCtx4 + 16 | 0; //@line 13435
 HEAP32[$38 >> 2] = $8; //@line 13436
 $39 = $ReallocAsyncCtx4 + 20 | 0; //@line 13437
 HEAP32[$39 >> 2] = $11; //@line 13438
 $40 = $ReallocAsyncCtx4 + 24 | 0; //@line 13439
 HEAP32[$40 >> 2] = $12; //@line 13440
 $41 = $ReallocAsyncCtx4 + 28 | 0; //@line 13441
 HEAP32[$41 >> 2] = $13; //@line 13442
 $42 = $ReallocAsyncCtx4 + 32 | 0; //@line 13443
 HEAP32[$42 >> 2] = $8; //@line 13444
 $43 = $ReallocAsyncCtx4 + 36 | 0; //@line 13445
 HEAP32[$43 >> 2] = $$sroa_idx5$i$i; //@line 13446
 $44 = $ReallocAsyncCtx4 + 40 | 0; //@line 13447
 HEAP32[$44 >> 2] = $14; //@line 13448
 $45 = $ReallocAsyncCtx4 + 44 | 0; //@line 13449
 HEAP32[$45 >> 2] = $6; //@line 13450
 $46 = $ReallocAsyncCtx4 + 48 | 0; //@line 13451
 HEAP32[$46 >> 2] = $8; //@line 13452
 $47 = $ReallocAsyncCtx4 + 52 | 0; //@line 13453
 HEAP32[$47 >> 2] = $6; //@line 13454
 $48 = $ReallocAsyncCtx4 + 56 | 0; //@line 13455
 HEAP32[$48 >> 2] = $12; //@line 13456
 $49 = $ReallocAsyncCtx4 + 60 | 0; //@line 13457
 HEAP16[$49 >> 1] = $21; //@line 13458
 $50 = $ReallocAsyncCtx4 + 64 | 0; //@line 13459
 HEAP32[$50 >> 2] = $$; //@line 13460
 sp = STACKTOP; //@line 13461
 return;
}
function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149; //@line 7509
   $$0106$ph = 24; //@line 7509
   label = 4; //@line 7510
   break;
  }
 case 1:
  {
   $$0105$ph = -1074; //@line 7514
   $$0106$ph = 53; //@line 7514
   label = 4; //@line 7515
   break;
  }
 case 2:
  {
   $$0105$ph = -1074; //@line 7519
   $$0106$ph = 53; //@line 7519
   label = 4; //@line 7520
   break;
  }
 default:
  {
   $$0114 = 0.0; //@line 7524
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0; //@line 7529
   $4 = $0 + 100 | 0; //@line 7530
   do {
    $5 = HEAP32[$3 >> 2] | 0; //@line 7532
    if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $5 + 1; //@line 7537
     $12 = HEAPU8[$5 >> 0] | 0; //@line 7540
    } else {
     $12 = ___shgetc($0) | 0; //@line 7543
    }
   } while ((_isspace($12) | 0) != 0);
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0; //@line 7557
      $19 = HEAP32[$3 >> 2] | 0; //@line 7558
      if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $19 + 1; //@line 7563
       $$0 = HEAPU8[$19 >> 0] | 0; //@line 7566
       $$0113 = $18; //@line 7566
       break L13;
      } else {
       $$0 = ___shgetc($0) | 0; //@line 7570
       $$0113 = $18; //@line 7570
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12; //@line 7576
      $$0113 = 1; //@line 7576
     }
    }
   } while (0);
   $$0107127 = 0; //@line 7580
   $$1128 = $$0; //@line 7580
   while (1) {
    if (($$1128 | 32 | 0) != (HEAP8[4319 + $$0107127 >> 0] | 0)) {
     $$0107$lcssa = $$0107127; //@line 7588
     $$1$lcssa = $$1128; //@line 7588
     break;
    }
    do {
     if ($$0107127 >>> 0 < 7) {
      $32 = HEAP32[$3 >> 2] | 0; //@line 7594
      if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $32 + 1; //@line 7599
       $$2 = HEAPU8[$32 >> 0] | 0; //@line 7602
       break;
      } else {
       $$2 = ___shgetc($0) | 0; //@line 7606
       break;
      }
     } else {
      $$2 = $$1128; //@line 7610
     }
    } while (0);
    $39 = $$0107127 + 1 | 0; //@line 7613
    if ($39 >>> 0 < 8) {
     $$0107127 = $39; //@line 7616
     $$1128 = $$2; //@line 7616
    } else {
     $$0107$lcssa = $39; //@line 7618
     $$1$lcssa = $$2; //@line 7618
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 7628
      break;
     }
    default:
     {
      $42 = ($2 | 0) != 0; //@line 7633
      if ($42 & $$0107$lcssa >>> 0 > 3) {
       if (($$0107$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 7640
        break L29;
       }
      }
      L34 : do {
       if (!$$0107$lcssa) {
        $$2109125 = 0; //@line 7647
        $$3126 = $$1$lcssa; //@line 7647
        while (1) {
         if (($$3126 | 32 | 0) != (HEAP8[5102 + $$2109125 >> 0] | 0)) {
          $$3110 = $$2109125; //@line 7655
          $$5 = $$3126; //@line 7655
          break L34;
         }
         do {
          if ($$2109125 >>> 0 < 2) {
           $63 = HEAP32[$3 >> 2] | 0; //@line 7661
           if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $63 + 1; //@line 7666
            $$4 = HEAPU8[$63 >> 0] | 0; //@line 7669
            break;
           } else {
            $$4 = ___shgetc($0) | 0; //@line 7673
            break;
           }
          } else {
           $$4 = $$3126; //@line 7677
          }
         } while (0);
         $70 = $$2109125 + 1 | 0; //@line 7680
         if ($70 >>> 0 < 3) {
          $$2109125 = $70; //@line 7683
          $$3126 = $$4; //@line 7683
         } else {
          $$3110 = $70; //@line 7685
          $$5 = $$4; //@line 7685
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa; //@line 7690
        $$5 = $$1$lcssa; //@line 7690
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0; //@line 7695
        if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $72 + 1; //@line 7700
         $80 = HEAPU8[$72 >> 0] | 0; //@line 7703
        } else {
         $80 = ___shgetc($0) | 0; //@line 7706
        }
        if (($80 | 0) == 40) {
         $$4111 = 1; //@line 7710
        } else {
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$0114 = nan; //@line 7715
          break L4;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7720
         $$0114 = nan; //@line 7721
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0; //@line 7725
         if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $85 + 1; //@line 7730
          $93 = HEAPU8[$85 >> 0] | 0; //@line 7733
         } else {
          $93 = ___shgetc($0) | 0; //@line 7736
         }
         if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) {
          if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) {
           break;
          }
         }
         $$4111 = $$4111 + 1 | 0; //@line 7753
        }
        if (($93 | 0) == 41) {
         $$0114 = nan; //@line 7757
         break L4;
        }
        $102 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7761
        if (!$102) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7765
        }
        if (!$42) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7769
         ___shlim($0, 0); //@line 7770
         $$0114 = 0.0; //@line 7771
         break L4;
        }
        if (!$$4111) {
         $$0114 = nan; //@line 7776
         break L4;
        } else {
         $$in = $$4111; //@line 7779
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 7782
         if (!$102) {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7786
         }
         if (!$$in) {
          $$0114 = nan; //@line 7790
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        if (($$5 | 0) == 48) {
         $118 = HEAP32[$3 >> 2] | 0; //@line 7801
         if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $118 + 1; //@line 7806
          $126 = HEAPU8[$118 >> 0] | 0; //@line 7809
         } else {
          $126 = ___shgetc($0) | 0; //@line 7812
         }
         if (($126 | 32 | 0) == 120) {
          $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7818
          break L4;
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$6 = 48; //@line 7824
         } else {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7828
          $$6 = 48; //@line 7829
         }
        } else {
         $$6 = $$5; //@line 7832
        }
        $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7835
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$4 >> 2] | 0) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7845
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7848
        ___shlim($0, 0); //@line 7849
        $$0114 = 0.0; //@line 7850
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $45 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7859
    if (!$45) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7863
    }
    if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
     $$1108 = $$0107$lcssa; //@line 7869
     do {
      if (!$45) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7874
      }
      $$1108 = $$1108 + -1 | 0; //@line 7876
     } while ($$1108 >>> 0 > 3);
    }
   }
   $$0114 = +($$0113 | 0) * inf; //@line 7889
  }
 } while (0);
 return +$$0114;
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
 $2 = $0 + 4 | 0; //@line 3211
 $3 = HEAP32[$2 >> 2] | 0; //@line 3212
 $4 = $3 & -8; //@line 3213
 $5 = $0 + $4 | 0; //@line 3214
 $6 = HEAP32[1972] | 0; //@line 3215
 $8 = $3 & 3; //@line 3217
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) {
  _abort(); //@line 3223
 }
 $11 = $5 + 4 | 0; //@line 3226
 $12 = HEAP32[$11 >> 2] | 0; //@line 3227
 if (!($12 & 1)) {
  _abort(); //@line 3231
 }
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 3238
   return $$2 | 0; //@line 3239
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= HEAP32[2088] << 1 >>> 0) {
    $$2 = $0; //@line 3249
    return $$2 | 0; //@line 3250
   }
  }
  $$2 = 0; //@line 3253
  return $$2 | 0; //@line 3254
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0; //@line 3258
  if ($24 >>> 0 <= 15) {
   $$2 = $0; //@line 3261
   return $$2 | 0; //@line 3262
  }
  $26 = $0 + $1 | 0; //@line 3264
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3268
  HEAP32[$26 + 4 >> 2] = $24 | 3; //@line 3271
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1; //@line 3274
  _dispose_chunk($26, $24); //@line 3275
  $$2 = $0; //@line 3276
  return $$2 | 0; //@line 3277
 }
 if ((HEAP32[1974] | 0) == ($5 | 0)) {
  $37 = (HEAP32[1971] | 0) + $4 | 0; //@line 3283
  $39 = $37 - $1 | 0; //@line 3285
  $40 = $0 + $1 | 0; //@line 3286
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 3288
   return $$2 | 0; //@line 3289
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3296
  HEAP32[$40 + 4 >> 2] = $39 | 1; //@line 3297
  HEAP32[1974] = $40; //@line 3298
  HEAP32[1971] = $39; //@line 3299
  $$2 = $0; //@line 3300
  return $$2 | 0; //@line 3301
 }
 if ((HEAP32[1973] | 0) == ($5 | 0)) {
  $49 = (HEAP32[1970] | 0) + $4 | 0; //@line 3307
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 3310
   return $$2 | 0; //@line 3311
  }
  $51 = $49 - $1 | 0; //@line 3313
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0; //@line 3316
   $54 = $0 + $49 | 0; //@line 3317
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3321
   HEAP32[$53 + 4 >> 2] = $51 | 1; //@line 3324
   HEAP32[$54 >> 2] = $51; //@line 3325
   $60 = $54 + 4 | 0; //@line 3326
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2; //@line 3329
   $storemerge = $53; //@line 3330
   $storemerge4 = $51; //@line 3330
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2; //@line 3335
   $67 = $0 + $49 + 4 | 0; //@line 3337
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1; //@line 3340
   $storemerge = 0; //@line 3341
   $storemerge4 = 0; //@line 3341
  }
  HEAP32[1970] = $storemerge4; //@line 3343
  HEAP32[1973] = $storemerge; //@line 3344
  $$2 = $0; //@line 3345
  return $$2 | 0; //@line 3346
 }
 if ($12 & 2 | 0) {
  $$2 = 0; //@line 3351
  return $$2 | 0; //@line 3352
 }
 $73 = ($12 & -8) + $4 | 0; //@line 3355
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 3358
  return $$2 | 0; //@line 3359
 }
 $75 = $73 - $1 | 0; //@line 3361
 $76 = $12 >>> 3; //@line 3362
 L49 : do {
  if ($12 >>> 0 < 256) {
   $79 = HEAP32[$5 + 8 >> 2] | 0; //@line 3367
   $81 = HEAP32[$5 + 12 >> 2] | 0; //@line 3369
   $83 = 7912 + ($76 << 1 << 2) | 0; //@line 3371
   if (($79 | 0) != ($83 | 0)) {
    if ($6 >>> 0 > $79 >>> 0) {
     _abort(); //@line 3376
    }
    if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) {
     _abort(); //@line 3383
    }
   }
   if (($81 | 0) == ($79 | 0)) {
    HEAP32[1968] = HEAP32[1968] & ~(1 << $76); //@line 3393
    break;
   }
   if (($81 | 0) == ($83 | 0)) {
    $$pre$phiZ2D = $81 + 8 | 0; //@line 3399
   } else {
    if ($6 >>> 0 > $81 >>> 0) {
     _abort(); //@line 3403
    }
    $96 = $81 + 8 | 0; //@line 3406
    if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $96; //@line 3410
    } else {
     _abort(); //@line 3412
    }
   }
   HEAP32[$79 + 12 >> 2] = $81; //@line 3417
   HEAP32[$$pre$phiZ2D >> 2] = $79; //@line 3418
  } else {
   $101 = HEAP32[$5 + 24 >> 2] | 0; //@line 3421
   $103 = HEAP32[$5 + 12 >> 2] | 0; //@line 3423
   do {
    if (($103 | 0) == ($5 | 0)) {
     $114 = $5 + 16 | 0; //@line 3427
     $115 = $114 + 4 | 0; //@line 3428
     $116 = HEAP32[$115 >> 2] | 0; //@line 3429
     if (!$116) {
      $118 = HEAP32[$114 >> 2] | 0; //@line 3432
      if (!$118) {
       $$3 = 0; //@line 3435
       break;
      } else {
       $$1272 = $118; //@line 3438
       $$1275 = $114; //@line 3438
      }
     } else {
      $$1272 = $116; //@line 3441
      $$1275 = $115; //@line 3441
     }
     while (1) {
      $120 = $$1272 + 20 | 0; //@line 3444
      $121 = HEAP32[$120 >> 2] | 0; //@line 3445
      if ($121 | 0) {
       $$1272 = $121; //@line 3448
       $$1275 = $120; //@line 3448
       continue;
      }
      $123 = $$1272 + 16 | 0; //@line 3451
      $124 = HEAP32[$123 >> 2] | 0; //@line 3452
      if (!$124) {
       break;
      } else {
       $$1272 = $124; //@line 3457
       $$1275 = $123; //@line 3457
      }
     }
     if ($6 >>> 0 > $$1275 >>> 0) {
      _abort(); //@line 3462
     } else {
      HEAP32[$$1275 >> 2] = 0; //@line 3465
      $$3 = $$1272; //@line 3466
      break;
     }
    } else {
     $106 = HEAP32[$5 + 8 >> 2] | 0; //@line 3471
     if ($6 >>> 0 > $106 >>> 0) {
      _abort(); //@line 3474
     }
     $108 = $106 + 12 | 0; //@line 3477
     if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) {
      _abort(); //@line 3481
     }
     $111 = $103 + 8 | 0; //@line 3484
     if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$108 >> 2] = $103; //@line 3488
      HEAP32[$111 >> 2] = $106; //@line 3489
      $$3 = $103; //@line 3490
      break;
     } else {
      _abort(); //@line 3493
     }
    }
   } while (0);
   if ($101 | 0) {
    $129 = HEAP32[$5 + 28 >> 2] | 0; //@line 3501
    $130 = 8176 + ($129 << 2) | 0; //@line 3502
    do {
     if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$130 >> 2] = $$3; //@line 3507
      if (!$$3) {
       HEAP32[1969] = HEAP32[1969] & ~(1 << $129); //@line 3514
       break L49;
      }
     } else {
      if ((HEAP32[1972] | 0) >>> 0 > $101 >>> 0) {
       _abort(); //@line 3521
      } else {
       HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3; //@line 3529
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $144 = HEAP32[1972] | 0; //@line 3539
    if ($144 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3542
    }
    HEAP32[$$3 + 24 >> 2] = $101; //@line 3546
    $147 = $5 + 16 | 0; //@line 3547
    $148 = HEAP32[$147 >> 2] | 0; //@line 3548
    do {
     if ($148 | 0) {
      if ($144 >>> 0 > $148 >>> 0) {
       _abort(); //@line 3554
      } else {
       HEAP32[$$3 + 16 >> 2] = $148; //@line 3558
       HEAP32[$148 + 24 >> 2] = $$3; //@line 3560
       break;
      }
     }
    } while (0);
    $154 = HEAP32[$147 + 4 >> 2] | 0; //@line 3566
    if ($154 | 0) {
     if ((HEAP32[1972] | 0) >>> 0 > $154 >>> 0) {
      _abort(); //@line 3572
     } else {
      HEAP32[$$3 + 20 >> 2] = $154; //@line 3576
      HEAP32[$154 + 24 >> 2] = $$3; //@line 3578
      break;
     }
    }
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $73 | $3 & 1 | 2; //@line 3590
  $165 = $0 + $73 + 4 | 0; //@line 3592
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1; //@line 3595
  $$2 = $0; //@line 3596
  return $$2 | 0; //@line 3597
 } else {
  $168 = $0 + $1 | 0; //@line 3599
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3603
  HEAP32[$168 + 4 >> 2] = $75 | 3; //@line 3606
  $175 = $0 + $73 + 4 | 0; //@line 3608
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1; //@line 3611
  _dispose_chunk($168, $75); //@line 3612
  $$2 = $0; //@line 3613
  return $$2 | 0; //@line 3614
 }
 return 0; //@line 3616
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_86($0) {
 $0 = $0 | 0;
 var $$391 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 969
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 973
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 975
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 977
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 979
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 981
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 983
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 985
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 987
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 989
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 991
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 993
 $24 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 994
 if ($24 | 0) {
  $27 = HEAP32[$24 + 8 >> 2] | 0; //@line 998
  $ReallocAsyncCtx12 = _emscripten_realloc_async_context(44) | 0; //@line 999
  FUNCTION_TABLE_vi[$27 & 511]($22); //@line 1000
  if (___async) {
   HEAP32[$ReallocAsyncCtx12 >> 2] = 187; //@line 1003
   $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 1004
   HEAP32[$28 >> 2] = $4; //@line 1005
   $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 1006
   HEAP32[$29 >> 2] = $6; //@line 1007
   $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 1008
   HEAP32[$30 >> 2] = $8; //@line 1009
   $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 1010
   HEAP32[$31 >> 2] = $AsyncRetVal; //@line 1011
   $32 = $ReallocAsyncCtx12 + 20 | 0; //@line 1012
   HEAP32[$32 >> 2] = $12; //@line 1013
   $33 = $ReallocAsyncCtx12 + 24 | 0; //@line 1014
   HEAP32[$33 >> 2] = $14; //@line 1015
   $34 = $ReallocAsyncCtx12 + 28 | 0; //@line 1016
   HEAP32[$34 >> 2] = $16; //@line 1017
   $35 = $ReallocAsyncCtx12 + 32 | 0; //@line 1018
   HEAP32[$35 >> 2] = $18; //@line 1019
   $36 = $ReallocAsyncCtx12 + 36 | 0; //@line 1020
   HEAP32[$36 >> 2] = $20; //@line 1021
   $37 = $ReallocAsyncCtx12 + 40 | 0; //@line 1022
   HEAP32[$37 >> 2] = $10; //@line 1023
   sp = STACKTOP; //@line 1024
   return;
  }
  ___async_unwind = 0; //@line 1027
  HEAP32[$ReallocAsyncCtx12 >> 2] = 187; //@line 1028
  $28 = $ReallocAsyncCtx12 + 4 | 0; //@line 1029
  HEAP32[$28 >> 2] = $4; //@line 1030
  $29 = $ReallocAsyncCtx12 + 8 | 0; //@line 1031
  HEAP32[$29 >> 2] = $6; //@line 1032
  $30 = $ReallocAsyncCtx12 + 12 | 0; //@line 1033
  HEAP32[$30 >> 2] = $8; //@line 1034
  $31 = $ReallocAsyncCtx12 + 16 | 0; //@line 1035
  HEAP32[$31 >> 2] = $AsyncRetVal; //@line 1036
  $32 = $ReallocAsyncCtx12 + 20 | 0; //@line 1037
  HEAP32[$32 >> 2] = $12; //@line 1038
  $33 = $ReallocAsyncCtx12 + 24 | 0; //@line 1039
  HEAP32[$33 >> 2] = $14; //@line 1040
  $34 = $ReallocAsyncCtx12 + 28 | 0; //@line 1041
  HEAP32[$34 >> 2] = $16; //@line 1042
  $35 = $ReallocAsyncCtx12 + 32 | 0; //@line 1043
  HEAP32[$35 >> 2] = $18; //@line 1044
  $36 = $ReallocAsyncCtx12 + 36 | 0; //@line 1045
  HEAP32[$36 >> 2] = $20; //@line 1046
  $37 = $ReallocAsyncCtx12 + 40 | 0; //@line 1047
  HEAP32[$37 >> 2] = $10; //@line 1048
  sp = STACKTOP; //@line 1049
  return;
 }
 $38 = ($AsyncRetVal | 0) == 0; //@line 1052
 $39 = HEAP32[$12 >> 2] | 0; //@line 1053
 if ($39 | 0) {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 1057
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(36) | 0; //@line 1058
  FUNCTION_TABLE_vi[$42 & 511]($14); //@line 1059
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 188; //@line 1062
   $43 = $ReallocAsyncCtx13 + 4 | 0; //@line 1063
   $$expand_i1_val = $38 & 1; //@line 1064
   HEAP8[$43 >> 0] = $$expand_i1_val; //@line 1065
   $44 = $ReallocAsyncCtx13 + 8 | 0; //@line 1066
   HEAP32[$44 >> 2] = $8; //@line 1067
   $45 = $ReallocAsyncCtx13 + 12 | 0; //@line 1068
   HEAP32[$45 >> 2] = $20; //@line 1069
   $46 = $ReallocAsyncCtx13 + 16 | 0; //@line 1070
   HEAP32[$46 >> 2] = $16; //@line 1071
   $47 = $ReallocAsyncCtx13 + 20 | 0; //@line 1072
   HEAP32[$47 >> 2] = $4; //@line 1073
   $48 = $ReallocAsyncCtx13 + 24 | 0; //@line 1074
   HEAP32[$48 >> 2] = $18; //@line 1075
   $49 = $ReallocAsyncCtx13 + 28 | 0; //@line 1076
   HEAP32[$49 >> 2] = $6; //@line 1077
   $50 = $ReallocAsyncCtx13 + 32 | 0; //@line 1078
   HEAP32[$50 >> 2] = $10; //@line 1079
   sp = STACKTOP; //@line 1080
   return;
  }
  ___async_unwind = 0; //@line 1083
  HEAP32[$ReallocAsyncCtx13 >> 2] = 188; //@line 1084
  $43 = $ReallocAsyncCtx13 + 4 | 0; //@line 1085
  $$expand_i1_val = $38 & 1; //@line 1086
  HEAP8[$43 >> 0] = $$expand_i1_val; //@line 1087
  $44 = $ReallocAsyncCtx13 + 8 | 0; //@line 1088
  HEAP32[$44 >> 2] = $8; //@line 1089
  $45 = $ReallocAsyncCtx13 + 12 | 0; //@line 1090
  HEAP32[$45 >> 2] = $20; //@line 1091
  $46 = $ReallocAsyncCtx13 + 16 | 0; //@line 1092
  HEAP32[$46 >> 2] = $16; //@line 1093
  $47 = $ReallocAsyncCtx13 + 20 | 0; //@line 1094
  HEAP32[$47 >> 2] = $4; //@line 1095
  $48 = $ReallocAsyncCtx13 + 24 | 0; //@line 1096
  HEAP32[$48 >> 2] = $18; //@line 1097
  $49 = $ReallocAsyncCtx13 + 28 | 0; //@line 1098
  HEAP32[$49 >> 2] = $6; //@line 1099
  $50 = $ReallocAsyncCtx13 + 32 | 0; //@line 1100
  HEAP32[$50 >> 2] = $10; //@line 1101
  sp = STACKTOP; //@line 1102
  return;
 }
 do {
  if ($38) {
   $$391 = HEAP32[$8 >> 2] | 0; //@line 1108
  } else {
   $51 = HEAP32[$20 >> 2] | 0; //@line 1110
   if ($51 | 0) {
    __ZdlPv($51); //@line 1113
   }
   $53 = HEAP32[$16 >> 2] | 0; //@line 1115
   if ($53 | 0) {
    $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 1119
    $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 1120
    FUNCTION_TABLE_vi[$56 & 511]($18); //@line 1121
    if (___async) {
     HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 1124
     $57 = $ReallocAsyncCtx14 + 4 | 0; //@line 1125
     HEAP32[$57 >> 2] = $4; //@line 1126
     $58 = $ReallocAsyncCtx14 + 8 | 0; //@line 1127
     HEAP32[$58 >> 2] = $6; //@line 1128
     $59 = $ReallocAsyncCtx14 + 12 | 0; //@line 1129
     HEAP32[$59 >> 2] = $10; //@line 1130
     sp = STACKTOP; //@line 1131
     return;
    }
    ___async_unwind = 0; //@line 1134
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 1135
    $57 = $ReallocAsyncCtx14 + 4 | 0; //@line 1136
    HEAP32[$57 >> 2] = $4; //@line 1137
    $58 = $ReallocAsyncCtx14 + 8 | 0; //@line 1138
    HEAP32[$58 >> 2] = $6; //@line 1139
    $59 = $ReallocAsyncCtx14 + 12 | 0; //@line 1140
    HEAP32[$59 >> 2] = $10; //@line 1141
    sp = STACKTOP; //@line 1142
    return;
   }
   $61 = HEAP32[$4 + 28 >> 2] | 0; //@line 1146
   if (!$61) {
    __ZdlPv($4); //@line 1149
    $$391 = -3007; //@line 1150
    break;
   }
   $64 = HEAP32[$61 + 8 >> 2] | 0; //@line 1154
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 1155
   FUNCTION_TABLE_vi[$64 & 511]($6); //@line 1156
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 190; //@line 1159
    $65 = $ReallocAsyncCtx15 + 4 | 0; //@line 1160
    HEAP32[$65 >> 2] = $4; //@line 1161
    $66 = $ReallocAsyncCtx15 + 8 | 0; //@line 1162
    HEAP32[$66 >> 2] = $10; //@line 1163
    sp = STACKTOP; //@line 1164
    return;
   }
   ___async_unwind = 0; //@line 1167
   HEAP32[$ReallocAsyncCtx15 >> 2] = 190; //@line 1168
   $65 = $ReallocAsyncCtx15 + 4 | 0; //@line 1169
   HEAP32[$65 >> 2] = $4; //@line 1170
   $66 = $ReallocAsyncCtx15 + 8 | 0; //@line 1171
   HEAP32[$66 >> 2] = $10; //@line 1172
   sp = STACKTOP; //@line 1173
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$391; //@line 1178
 return;
}
function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9447
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9447
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9448
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9449
 $4 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9449
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9450
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 9451
 $8 = $6 & 2047; //@line 9453
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 9454
 $11 = $9 & 2047; //@line 9456
 $12 = $3 & -2147483648; //@line 9457
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0; //@line 9458
 $14 = tempRet0; //@line 9459
 L1 : do {
  if (($13 | 0) == 0 & ($14 | 0) == 0) {
   label = 3; //@line 9465
  } else {
   $18 = ___DOUBLE_BITS_563($1) | 0; //@line 9467
   $20 = tempRet0 & 2147483647; //@line 9469
   if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) {
    label = 3; //@line 9478
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 9480
    $30 = tempRet0; //@line 9481
    if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) {
     return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
    }
    if (!$8) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 9497
     $42 = tempRet0; //@line 9498
     if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
      $$073100 = 0; //@line 9505
      $49 = $41; //@line 9505
      $50 = $42; //@line 9505
      while (1) {
       $48 = $$073100 + -1 | 0; //@line 9507
       $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0; //@line 9508
       $50 = tempRet0; //@line 9509
       if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
        $$073$lcssa = $48; //@line 9518
        break;
       } else {
        $$073100 = $48; //@line 9516
       }
      }
     } else {
      $$073$lcssa = 0; //@line 9523
     }
     $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0; //@line 9526
     $$174 = $$073$lcssa; //@line 9528
     $87 = $59; //@line 9528
     $88 = tempRet0; //@line 9528
    } else {
     $$174 = $8; //@line 9532
     $87 = $2; //@line 9532
     $88 = $3 & 1048575 | 1048576; //@line 9532
    }
    if (!$11) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0; //@line 9536
     $65 = tempRet0; //@line 9537
     if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
      $$07194 = 0; //@line 9544
      $72 = $64; //@line 9544
      $73 = $65; //@line 9544
      while (1) {
       $71 = $$07194 + -1 | 0; //@line 9546
       $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0; //@line 9547
       $73 = tempRet0; //@line 9548
       if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
        $$071$lcssa = $71; //@line 9557
        break;
       } else {
        $$07194 = $71; //@line 9555
       }
      }
     } else {
      $$071$lcssa = 0; //@line 9562
     }
     $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0; //@line 9565
     $$172$ph = $$071$lcssa; //@line 9567
     $89 = $82; //@line 9567
     $90 = tempRet0; //@line 9567
    } else {
     $$172$ph = $11; //@line 9571
     $89 = $4; //@line 9571
     $90 = $5 & 1048575 | 1048576; //@line 9571
    }
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0; //@line 9574
    $92 = tempRet0; //@line 9575
    $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295; //@line 9580
    L23 : do {
     if (($$174 | 0) > ($$172$ph | 0)) {
      $$27586 = $$174; //@line 9583
      $101 = $92; //@line 9583
      $156 = $97; //@line 9583
      $157 = $87; //@line 9583
      $158 = $88; //@line 9583
      $99 = $91; //@line 9583
      while (1) {
       if ($156) {
        if (($99 | 0) == 0 & ($101 | 0) == 0) {
         break;
        } else {
         $104 = $99; //@line 9592
         $105 = $101; //@line 9592
        }
       } else {
        $104 = $157; //@line 9595
        $105 = $158; //@line 9595
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0; //@line 9597
       $107 = tempRet0; //@line 9598
       $108 = $$27586 + -1 | 0; //@line 9599
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0; //@line 9601
       $111 = tempRet0; //@line 9602
       $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295; //@line 9607
       if (($108 | 0) > ($$172$ph | 0)) {
        $$27586 = $108; //@line 9609
        $101 = $111; //@line 9609
        $156 = $116; //@line 9609
        $157 = $106; //@line 9609
        $158 = $107; //@line 9609
        $99 = $110; //@line 9609
       } else {
        $$275$lcssa = $108; //@line 9611
        $$lcssa = $116; //@line 9611
        $118 = $110; //@line 9611
        $120 = $111; //@line 9611
        $159 = $106; //@line 9611
        $160 = $107; //@line 9611
        break L23;
       }
      }
      $$070 = $0 * 0.0; //@line 9616
      break L1;
     } else {
      $$275$lcssa = $$174; //@line 9619
      $$lcssa = $97; //@line 9619
      $118 = $91; //@line 9619
      $120 = $92; //@line 9619
      $159 = $87; //@line 9619
      $160 = $88; //@line 9619
     }
    } while (0);
    if ($$lcssa) {
     if (($118 | 0) == 0 & ($120 | 0) == 0) {
      $$070 = $0 * 0.0; //@line 9628
      break;
     } else {
      $123 = $120; //@line 9631
      $125 = $118; //@line 9631
     }
    } else {
     $123 = $160; //@line 9634
     $125 = $159; //@line 9634
    }
    if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
     $$37683 = $$275$lcssa; //@line 9642
     $130 = $125; //@line 9642
     $131 = $123; //@line 9642
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0; //@line 9644
      $133 = tempRet0; //@line 9645
      $134 = $$37683 + -1 | 0; //@line 9646
      if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
       $$37683 = $134; //@line 9653
       $130 = $132; //@line 9653
       $131 = $133; //@line 9653
      } else {
       $$376$lcssa = $134; //@line 9655
       $141 = $132; //@line 9655
       $142 = $133; //@line 9655
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa; //@line 9660
     $141 = $125; //@line 9660
     $142 = $123; //@line 9660
    }
    if (($$376$lcssa | 0) > 0) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0; //@line 9664
     $144 = tempRet0; //@line 9665
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0; //@line 9666
     $153 = $144 | tempRet0; //@line 9670
     $154 = $143 | $145; //@line 9670
    } else {
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0; //@line 9673
     $153 = tempRet0; //@line 9675
     $154 = $150; //@line 9675
    }
    HEAP32[tempDoublePtr >> 2] = $154; //@line 9678
    HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12; //@line 9678
    $$070 = +HEAPF64[tempDoublePtr >> 3]; //@line 9679
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1; //@line 9684
  $$070 = $27 / $27; //@line 9686
 }
 return +$$070;
}
function __ZN13SocketAddress14set_ip_addressEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016$i = 0, $$025$i = 0, $$02537$i = 0, $$026$i = 0, $$02636$i = 0, $$1$1$i = 0, $$1$2$i = 0, $$1$3$i = 0, $$1$i = 0, $$pre$phi$iZ2D = 0, $100 = 0, $107 = 0, $114 = 0, $121 = 0, $128 = 0, $134 = 0, $2 = 0, $26 = 0, $35 = 0, $4 = 0, $45 = 0, $56 = 0, $6 = 0, $66 = 0, $69 = 0, $76 = 0, $80 = 0, $86 = 0, $9 = 0, $93 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4268
 STACKTOP = STACKTOP + 48 | 0; //@line 4269
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 4269
 $vararg_buffer7 = sp + 24 | 0; //@line 4270
 $vararg_buffer4 = sp + 16 | 0; //@line 4271
 $vararg_buffer1 = sp + 8 | 0; //@line 4272
 $vararg_buffer = sp; //@line 4273
 $2 = sp + 32 | 0; //@line 4274
 HEAP8[$0 >> 0] = 0; //@line 4275
 L1 : do {
  if ($1 | 0) {
   $4 = HEAP8[$1 >> 0] | 0; //@line 4279
   do {
    if ($4 << 24 >> 24) {
     $$016$i = 0; //@line 4283
     $6 = $4; //@line 4283
     while (1) {
      if (!($6 << 24 >> 24 == 46 | ($6 + -48 & 255) < 10)) {
       $$02537$i = 0; //@line 4290
       $$02636$i = 0; //@line 4290
       $56 = $4; //@line 4290
       break;
      }
      $9 = $$016$i + 1 | 0; //@line 4293
      $6 = HEAP8[$1 + $9 >> 0] | 0; //@line 4295
      if (!($6 << 24 >> 24)) {
       label = 5; //@line 4298
       break;
      } else {
       $$016$i = $9; //@line 4301
      }
     }
     if ((label | 0) == 5) {
      if (($$016$i | 0) <= -1) {
       break;
      }
      if ((HEAP8[$1 + $$016$i >> 0] | 0) == 46) {
       $$02537$i = 0; //@line 4313
       $$02636$i = 0; //@line 4313
       $56 = $4; //@line 4313
      } else {
       break;
      }
     }
     do {
      if (!(($56 + -48 & 255) < 10 | ($56 + -97 & 255) < 6)) {
       switch ($56 << 24 >> 24) {
       case 58:
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
        {
         break;
        }
       default:
        {
         break L1;
        }
       }
      }
      $$02636$i = $$02636$i + ($56 << 24 >> 24 == 58 & 1) | 0; //@line 4336
      $$02537$i = $$02537$i + 1 | 0; //@line 4337
      $56 = HEAP8[$1 + $$02537$i >> 0] | 0; //@line 4339
     } while ($56 << 24 >> 24 != 0);
     if (($$02636$i | 0) <= 1) {
      break L1;
     }
     HEAP32[$0 + 40 >> 2] = 2; //@line 4352
     $66 = $0 + 44 | 0; //@line 4353
     $$025$i = 0; //@line 4354
     L17 : while (1) {
      switch (HEAP8[$1 + $$025$i >> 0] | 0) {
      case 0:
       {
        label = 34; //@line 4360
        break L17;
        break;
       }
      case 58:
       {
        $69 = $$025$i + 1 | 0; //@line 4365
        if ((HEAP8[$1 + $69 >> 0] | 0) == 58) {
         label = 33; //@line 4370
         break L17;
        } else {
         $$025$i = $69; //@line 4373
         continue L17;
        }
        break;
       }
      default:
       {
        $$025$i = $$025$i + 1 | 0; //@line 4380
        continue L17;
       }
      }
     }
     if ((label | 0) == 33) {
      $$026$i = __ZL15ipv6_scan_chunkPtPKc($2, $1 + ($$025$i + 2) | 0) | 0; //@line 4389
      $$pre$phi$iZ2D = $2; //@line 4389
     } else if ((label | 0) == 34) {
      $$026$i = 0; //@line 4392
      $$pre$phi$iZ2D = $2; //@line 4392
     }
     $76 = 8 - $$026$i | 0; //@line 4394
     _memmove($2 + ($76 << 1) | 0, $2 | 0, $$026$i << 1 | 0) | 0; //@line 4397
     _memset($2 | 0, 0, $76 << 1 | 0) | 0; //@line 4399
     __ZL15ipv6_scan_chunkPtPKc($$pre$phi$iZ2D, $1) | 0; //@line 4400
     $80 = HEAP16[$$pre$phi$iZ2D >> 1] | 0; //@line 4401
     HEAP8[$66 >> 0] = ($80 & 65535) >>> 8; //@line 4404
     HEAP8[$0 + 45 >> 0] = $80; //@line 4407
     $86 = HEAP16[$2 + 2 >> 1] | 0; //@line 4409
     HEAP8[$0 + 46 >> 0] = ($86 & 65535) >>> 8; //@line 4413
     HEAP8[$0 + 47 >> 0] = $86; //@line 4416
     $93 = HEAP16[$2 + 4 >> 1] | 0; //@line 4418
     HEAP8[$0 + 48 >> 0] = ($93 & 65535) >>> 8; //@line 4422
     HEAP8[$0 + 49 >> 0] = $93; //@line 4425
     $100 = HEAP16[$2 + 6 >> 1] | 0; //@line 4427
     HEAP8[$0 + 50 >> 0] = ($100 & 65535) >>> 8; //@line 4431
     HEAP8[$0 + 51 >> 0] = $100; //@line 4434
     $107 = HEAP16[$2 + 8 >> 1] | 0; //@line 4436
     HEAP8[$0 + 52 >> 0] = ($107 & 65535) >>> 8; //@line 4440
     HEAP8[$0 + 53 >> 0] = $107; //@line 4443
     $114 = HEAP16[$2 + 10 >> 1] | 0; //@line 4445
     HEAP8[$0 + 54 >> 0] = ($114 & 65535) >>> 8; //@line 4449
     HEAP8[$0 + 55 >> 0] = $114; //@line 4452
     $121 = HEAP16[$2 + 12 >> 1] | 0; //@line 4454
     HEAP8[$0 + 56 >> 0] = ($121 & 65535) >>> 8; //@line 4458
     HEAP8[$0 + 57 >> 0] = $121; //@line 4461
     $128 = HEAP16[$2 + 14 >> 1] | 0; //@line 4463
     HEAP8[$0 + 58 >> 0] = ($128 & 65535) >>> 8; //@line 4467
     HEAP8[$0 + 59 >> 0] = $128; //@line 4470
     $$0 = 1; //@line 4471
     STACKTOP = sp; //@line 4472
     return $$0 | 0; //@line 4472
    }
   } while (0);
   HEAP32[$0 + 40 >> 2] = 1; //@line 4476
   HEAP32[$vararg_buffer >> 2] = $2; //@line 4477
   L28 : do {
    if ((_sscanf($1, 3697, $vararg_buffer) | 0) >= 1) {
     HEAP8[$0 + 44 >> 0] = HEAP32[$2 >> 2]; //@line 4485
     $$1$i = 0; //@line 4486
     L30 : while (1) {
      switch (HEAP8[$1 + $$1$i >> 0] | 0) {
      case 0:
       {
        break L28;
        break;
       }
      case 46:
       {
        break L30;
        break;
       }
      default:
       {}
      }
      $$1$i = $$1$i + 1 | 0; //@line 4503
     }
     $26 = $$1$i + 1 | 0; //@line 4505
     HEAP32[$vararg_buffer1 >> 2] = $2; //@line 4507
     if ((_sscanf($1 + $26 | 0, 3697, $vararg_buffer1) | 0) >= 1) {
      HEAP8[$0 + 45 >> 0] = HEAP32[$2 >> 2]; //@line 4514
      $$1$1$i = $26; //@line 4515
      L35 : while (1) {
       switch (HEAP8[$1 + $$1$1$i >> 0] | 0) {
       case 0:
        {
         break L28;
         break;
        }
       case 46:
        {
         break L35;
         break;
        }
       default:
        {}
       }
       $$1$1$i = $$1$1$i + 1 | 0; //@line 4532
      }
      $35 = $$1$1$i + 1 | 0; //@line 4534
      HEAP32[$vararg_buffer4 >> 2] = $2; //@line 4536
      if ((_sscanf($1 + $35 | 0, 3697, $vararg_buffer4) | 0) >= 1) {
       HEAP8[$0 + 46 >> 0] = HEAP32[$2 >> 2]; //@line 4543
       $$1$2$i = $35; //@line 4544
       L40 : while (1) {
        switch (HEAP8[$1 + $$1$2$i >> 0] | 0) {
        case 0:
         {
          break L28;
          break;
         }
        case 46:
         {
          break L40;
          break;
         }
        default:
         {}
        }
        $$1$2$i = $$1$2$i + 1 | 0; //@line 4561
       }
       $45 = $$1$2$i + 1 | 0; //@line 4563
       HEAP32[$vararg_buffer7 >> 2] = $2; //@line 4565
       if ((_sscanf($1 + $45 | 0, 3697, $vararg_buffer7) | 0) >= 1) {
        HEAP8[$0 + 47 >> 0] = HEAP32[$2 >> 2]; //@line 4572
        $$1$3$i = $45; //@line 4573
        L45 : while (1) {
         switch (HEAP8[$1 + $$1$3$i >> 0] | 0) {
         case 0:
          {
           break L28;
           break;
          }
         case 46:
          {
           break L45;
           break;
          }
         default:
          {}
         }
         $$1$3$i = $$1$3$i + 1 | 0; //@line 4590
        }
        $$0 = 1; //@line 4592
        STACKTOP = sp; //@line 4593
        return $$0 | 0; //@line 4593
       }
      }
     }
    }
   } while (0);
   $$0 = 1; //@line 4599
   STACKTOP = sp; //@line 4600
   return $$0 | 0; //@line 4600
  }
 } while (0);
 $134 = $0 + 40 | 0; //@line 4603
 HEAP32[$134 >> 2] = 0; //@line 4604
 HEAP32[$134 + 4 >> 2] = 0; //@line 4604
 HEAP32[$134 + 8 >> 2] = 0; //@line 4604
 HEAP32[$134 + 12 >> 2] = 0; //@line 4604
 HEAP32[$134 + 16 >> 2] = 0; //@line 4604
 $$0 = 0; //@line 4605
 STACKTOP = sp; //@line 4606
 return $$0 | 0; //@line 4606
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_61($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19841
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19843
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19845
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19847
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19849
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19851
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19853
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19855
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19857
 HEAP32[$AsyncRetVal >> 2] = 0; //@line 19858
 HEAP32[$AsyncRetVal + 4 >> 2] = 0; //@line 19858
 HEAP32[$AsyncRetVal + 8 >> 2] = 0; //@line 19858
 HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 19858
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 19859
 $17 = $2 + 32 | 0; //@line 19861
 do {
  if (($AsyncRetVal | 0) == ($17 | 0)) {
   $51 = $AsyncRetVal; //@line 19865
   $53 = $AsyncRetVal; //@line 19865
  } else {
   $19 = $AsyncRetVal + 12 | 0; //@line 19867
   $20 = HEAP32[$19 >> 2] | 0; //@line 19868
   if ($20 | 0) {
    $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 19872
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(44) | 0; //@line 19873
    FUNCTION_TABLE_vi[$23 & 511]($AsyncRetVal); //@line 19874
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 217; //@line 19877
     $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 19878
     HEAP32[$24 >> 2] = $2; //@line 19879
     $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 19880
     HEAP32[$25 >> 2] = $4; //@line 19881
     $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 19882
     HEAP32[$26 >> 2] = $6; //@line 19883
     $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 19884
     HEAP32[$27 >> 2] = $10; //@line 19885
     $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 19886
     HEAP32[$28 >> 2] = $12; //@line 19887
     $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 19888
     HEAP32[$29 >> 2] = $14; //@line 19889
     $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 19890
     HEAP32[$30 >> 2] = $19; //@line 19891
     $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 19892
     HEAP32[$31 >> 2] = $8; //@line 19893
     $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 19894
     HEAP32[$32 >> 2] = $AsyncRetVal; //@line 19895
     $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 19896
     HEAP32[$33 >> 2] = $17; //@line 19897
     sp = STACKTOP; //@line 19898
     return;
    }
    ___async_unwind = 0; //@line 19901
    HEAP32[$ReallocAsyncCtx2 >> 2] = 217; //@line 19902
    $24 = $ReallocAsyncCtx2 + 4 | 0; //@line 19903
    HEAP32[$24 >> 2] = $2; //@line 19904
    $25 = $ReallocAsyncCtx2 + 8 | 0; //@line 19905
    HEAP32[$25 >> 2] = $4; //@line 19906
    $26 = $ReallocAsyncCtx2 + 12 | 0; //@line 19907
    HEAP32[$26 >> 2] = $6; //@line 19908
    $27 = $ReallocAsyncCtx2 + 16 | 0; //@line 19909
    HEAP32[$27 >> 2] = $10; //@line 19910
    $28 = $ReallocAsyncCtx2 + 20 | 0; //@line 19911
    HEAP32[$28 >> 2] = $12; //@line 19912
    $29 = $ReallocAsyncCtx2 + 24 | 0; //@line 19913
    HEAP32[$29 >> 2] = $14; //@line 19914
    $30 = $ReallocAsyncCtx2 + 28 | 0; //@line 19915
    HEAP32[$30 >> 2] = $19; //@line 19916
    $31 = $ReallocAsyncCtx2 + 32 | 0; //@line 19917
    HEAP32[$31 >> 2] = $8; //@line 19918
    $32 = $ReallocAsyncCtx2 + 36 | 0; //@line 19919
    HEAP32[$32 >> 2] = $AsyncRetVal; //@line 19920
    $33 = $ReallocAsyncCtx2 + 40 | 0; //@line 19921
    HEAP32[$33 >> 2] = $17; //@line 19922
    sp = STACKTOP; //@line 19923
    return;
   }
   $34 = $2 + 44 | 0; //@line 19926
   $35 = HEAP32[$34 >> 2] | 0; //@line 19927
   if (!$35) {
    HEAP32[$19 >> 2] = 0; //@line 19930
    $$pre = HEAP32[$8 >> 2] | 0; //@line 19931
    $51 = $$pre; //@line 19933
    $53 = $$pre; //@line 19933
    break;
   }
   $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 19937
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 19938
   FUNCTION_TABLE_vii[$38 & 7]($AsyncRetVal, $17); //@line 19939
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 19942
    $39 = $ReallocAsyncCtx3 + 4 | 0; //@line 19943
    HEAP32[$39 >> 2] = $34; //@line 19944
    $40 = $ReallocAsyncCtx3 + 8 | 0; //@line 19945
    HEAP32[$40 >> 2] = $19; //@line 19946
    $41 = $ReallocAsyncCtx3 + 12 | 0; //@line 19947
    HEAP32[$41 >> 2] = $8; //@line 19948
    $42 = $ReallocAsyncCtx3 + 16 | 0; //@line 19949
    HEAP32[$42 >> 2] = $12; //@line 19950
    $43 = $ReallocAsyncCtx3 + 20 | 0; //@line 19951
    HEAP32[$43 >> 2] = $10; //@line 19952
    $44 = $ReallocAsyncCtx3 + 24 | 0; //@line 19953
    HEAP32[$44 >> 2] = $14; //@line 19954
    $45 = $ReallocAsyncCtx3 + 28 | 0; //@line 19955
    HEAP32[$45 >> 2] = $4; //@line 19956
    $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 19957
    HEAP32[$46 >> 2] = $6; //@line 19958
    $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 19959
    HEAP32[$47 >> 2] = $2; //@line 19960
    sp = STACKTOP; //@line 19961
    return;
   }
   ___async_unwind = 0; //@line 19964
   HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 19965
   $39 = $ReallocAsyncCtx3 + 4 | 0; //@line 19966
   HEAP32[$39 >> 2] = $34; //@line 19967
   $40 = $ReallocAsyncCtx3 + 8 | 0; //@line 19968
   HEAP32[$40 >> 2] = $19; //@line 19969
   $41 = $ReallocAsyncCtx3 + 12 | 0; //@line 19970
   HEAP32[$41 >> 2] = $8; //@line 19971
   $42 = $ReallocAsyncCtx3 + 16 | 0; //@line 19972
   HEAP32[$42 >> 2] = $12; //@line 19973
   $43 = $ReallocAsyncCtx3 + 20 | 0; //@line 19974
   HEAP32[$43 >> 2] = $10; //@line 19975
   $44 = $ReallocAsyncCtx3 + 24 | 0; //@line 19976
   HEAP32[$44 >> 2] = $14; //@line 19977
   $45 = $ReallocAsyncCtx3 + 28 | 0; //@line 19978
   HEAP32[$45 >> 2] = $4; //@line 19979
   $46 = $ReallocAsyncCtx3 + 32 | 0; //@line 19980
   HEAP32[$46 >> 2] = $6; //@line 19981
   $47 = $ReallocAsyncCtx3 + 36 | 0; //@line 19982
   HEAP32[$47 >> 2] = $2; //@line 19983
   sp = STACKTOP; //@line 19984
   return;
  }
 } while (0);
 HEAP32[$51 + 16 >> 2] = HEAP32[$12 >> 2]; //@line 19990
 HEAP32[$10 + 8 >> 2] = 0; //@line 19992
 HEAP32[$10 >> 2] = 219; //@line 19993
 HEAP32[$10 + 4 >> 2] = $53; //@line 19995
 $54 = $10 + 12 | 0; //@line 19996
 HEAP32[$54 >> 2] = 764; //@line 19997
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 19998
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($14, $10); //@line 19999
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 20002
  $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 20003
  HEAP32[$55 >> 2] = $54; //@line 20004
  $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 20005
  HEAP32[$56 >> 2] = $4; //@line 20006
  $57 = $ReallocAsyncCtx10 + 12 | 0; //@line 20007
  HEAP32[$57 >> 2] = $6; //@line 20008
  $58 = $ReallocAsyncCtx10 + 16 | 0; //@line 20009
  HEAP32[$58 >> 2] = $10; //@line 20010
  $59 = $ReallocAsyncCtx10 + 20 | 0; //@line 20011
  HEAP32[$59 >> 2] = $2; //@line 20012
  sp = STACKTOP; //@line 20013
  return;
 }
 ___async_unwind = 0; //@line 20016
 HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 20017
 $55 = $ReallocAsyncCtx10 + 4 | 0; //@line 20018
 HEAP32[$55 >> 2] = $54; //@line 20019
 $56 = $ReallocAsyncCtx10 + 8 | 0; //@line 20020
 HEAP32[$56 >> 2] = $4; //@line 20021
 $57 = $ReallocAsyncCtx10 + 12 | 0; //@line 20022
 HEAP32[$57 >> 2] = $6; //@line 20023
 $58 = $ReallocAsyncCtx10 + 16 | 0; //@line 20024
 HEAP32[$58 >> 2] = $10; //@line 20025
 $59 = $ReallocAsyncCtx10 + 20 | 0; //@line 20026
 HEAP32[$59 >> 2] = $2; //@line 20027
 sp = STACKTOP; //@line 20028
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_32($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17393
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17395
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17397
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17399
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17401
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17403
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17405
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17407
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17409
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17411
 $19 = $6 + 12 | 0; //@line 17412
 $20 = HEAP32[$19 >> 2] | 0; //@line 17413
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 17417
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 17418
  FUNCTION_TABLE_vii[$23 & 7]($4, $6); //@line 17419
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 17422
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 17423
   HEAP32[$24 >> 2] = $2; //@line 17424
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 17425
   HEAP32[$25 >> 2] = $4; //@line 17426
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 17427
   HEAP32[$26 >> 2] = $8; //@line 17428
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 17429
   HEAP32[$27 >> 2] = $10; //@line 17430
   $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 17431
   HEAP32[$28 >> 2] = $19; //@line 17432
   $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 17433
   HEAP32[$29 >> 2] = $12; //@line 17434
   $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 17435
   HEAP32[$30 >> 2] = $14; //@line 17436
   $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 17437
   HEAP32[$31 >> 2] = $16; //@line 17438
   $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 17439
   HEAP32[$32 >> 2] = $18; //@line 17440
   sp = STACKTOP; //@line 17441
   return;
  }
  ___async_unwind = 0; //@line 17444
  HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 17445
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 17446
  HEAP32[$24 >> 2] = $2; //@line 17447
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 17448
  HEAP32[$25 >> 2] = $4; //@line 17449
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 17450
  HEAP32[$26 >> 2] = $8; //@line 17451
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 17452
  HEAP32[$27 >> 2] = $10; //@line 17453
  $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 17454
  HEAP32[$28 >> 2] = $19; //@line 17455
  $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 17456
  HEAP32[$29 >> 2] = $12; //@line 17457
  $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 17458
  HEAP32[$30 >> 2] = $14; //@line 17459
  $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 17460
  HEAP32[$31 >> 2] = $16; //@line 17461
  $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 17462
  HEAP32[$32 >> 2] = $18; //@line 17463
  sp = STACKTOP; //@line 17464
  return;
 }
 $33 = $4 + 12 | 0; //@line 17467
 HEAP32[$33 >> 2] = 0; //@line 17468
 $34 = $12 + 12 | 0; //@line 17469
 $35 = HEAP32[$34 >> 2] | 0; //@line 17470
 if (!$35) {
  $48 = $2 + 12 | 0; //@line 17473
  HEAP32[$48 >> 2] = 0; //@line 17474
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 17475
  $49 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $4, $2, $18) | 0; //@line 17476
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 17479
   $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 17480
   HEAP32[$50 >> 2] = $48; //@line 17481
   $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 17482
   HEAP32[$51 >> 2] = $33; //@line 17483
   $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 17484
   HEAP32[$52 >> 2] = $2; //@line 17485
   $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 17486
   HEAP32[$53 >> 2] = $34; //@line 17487
   $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 17488
   HEAP32[$54 >> 2] = $4; //@line 17489
   $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 17490
   HEAP32[$55 >> 2] = $8; //@line 17491
   $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 17492
   HEAP32[$56 >> 2] = $10; //@line 17493
   sp = STACKTOP; //@line 17494
   return;
  }
  HEAP32[___async_retval >> 2] = $49; //@line 17498
  ___async_unwind = 0; //@line 17499
  HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 17500
  $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 17501
  HEAP32[$50 >> 2] = $48; //@line 17502
  $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 17503
  HEAP32[$51 >> 2] = $33; //@line 17504
  $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 17505
  HEAP32[$52 >> 2] = $2; //@line 17506
  $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 17507
  HEAP32[$53 >> 2] = $34; //@line 17508
  $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 17509
  HEAP32[$54 >> 2] = $4; //@line 17510
  $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 17511
  HEAP32[$55 >> 2] = $8; //@line 17512
  $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 17513
  HEAP32[$56 >> 2] = $10; //@line 17514
  sp = STACKTOP; //@line 17515
  return;
 } else {
  $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 17519
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 17520
  FUNCTION_TABLE_vii[$38 & 7]($2, $8); //@line 17521
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 17524
   $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 17525
   HEAP32[$39 >> 2] = $2; //@line 17526
   $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 17527
   HEAP32[$40 >> 2] = $33; //@line 17528
   $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 17529
   HEAP32[$41 >> 2] = $4; //@line 17530
   $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 17531
   HEAP32[$42 >> 2] = $34; //@line 17532
   $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 17533
   HEAP32[$43 >> 2] = $8; //@line 17534
   $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 17535
   HEAP32[$44 >> 2] = $10; //@line 17536
   $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 17537
   HEAP32[$45 >> 2] = $14; //@line 17538
   $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 17539
   HEAP32[$46 >> 2] = $16; //@line 17540
   $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 17541
   HEAP32[$47 >> 2] = $18; //@line 17542
   sp = STACKTOP; //@line 17543
   return;
  }
  ___async_unwind = 0; //@line 17546
  HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 17547
  $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 17548
  HEAP32[$39 >> 2] = $2; //@line 17549
  $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 17550
  HEAP32[$40 >> 2] = $33; //@line 17551
  $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 17552
  HEAP32[$41 >> 2] = $4; //@line 17553
  $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 17554
  HEAP32[$42 >> 2] = $34; //@line 17555
  $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 17556
  HEAP32[$43 >> 2] = $8; //@line 17557
  $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 17558
  HEAP32[$44 >> 2] = $10; //@line 17559
  $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 17560
  HEAP32[$45 >> 2] = $14; //@line 17561
  $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 17562
  HEAP32[$46 >> 2] = $16; //@line 17563
  $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 17564
  HEAP32[$47 >> 2] = $18; //@line 17565
  sp = STACKTOP; //@line 17566
  return;
 }
}
function __ZN6Socket4openEP12NetworkStack($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 3766
 STACKTOP = STACKTOP + 32 | 0; //@line 3767
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3767
 $2 = sp + 16 | 0; //@line 3768
 $3 = sp; //@line 3769
 $4 = $0 + 4 | 0; //@line 3770
 if (($1 | 0) == 0 | (HEAP32[$4 >> 2] | 0) != 0) {
  $$1 = -3003; //@line 3776
  STACKTOP = sp; //@line 3777
  return $$1 | 0; //@line 3777
 }
 HEAP32[$4 >> 2] = $1; //@line 3779
 $10 = HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] | 0; //@line 3782
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 3785
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 3786
 $14 = FUNCTION_TABLE_ii[$13 & 31]($0) | 0; //@line 3787
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 3790
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 3792
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 3794
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 3796
  HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 3798
  HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 3800
  HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 3802
  HEAP32[$AsyncCtx + 28 >> 2] = $10; //@line 3804
  sp = STACKTOP; //@line 3805
  STACKTOP = sp; //@line 3806
  return 0; //@line 3806
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 3808
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3809
 $22 = FUNCTION_TABLE_iiii[$10 & 31]($1, $2, $14) | 0; //@line 3810
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 122; //@line 3813
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 3815
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 3817
  HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 3819
  HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 3821
  HEAP32[$AsyncCtx2 + 20 >> 2] = $4; //@line 3823
  sp = STACKTOP; //@line 3824
  STACKTOP = sp; //@line 3825
  return 0; //@line 3825
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3827
 do {
  if (!$22) {
   $30 = $0 + 8 | 0; //@line 3832
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 3833
   $31 = $3 + 12 | 0; //@line 3834
   HEAP32[$3 >> 2] = 12; //@line 3835
   HEAP32[$3 + 4 >> 2] = 1; //@line 3837
   HEAP32[$3 + 8 >> 2] = $0; //@line 3839
   HEAP32[$31 >> 2] = 588; //@line 3840
   $32 = $0 + 16 | 0; //@line 3841
   do {
    if (($32 | 0) == ($3 | 0)) {
     $60 = 588; //@line 3845
     label = 16; //@line 3846
    } else {
     $34 = $0 + 28 | 0; //@line 3848
     $35 = HEAP32[$34 >> 2] | 0; //@line 3849
     if (!$35) {
      $48 = 588; //@line 3852
     } else {
      $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 3855
      $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 3856
      FUNCTION_TABLE_vi[$38 & 511]($32); //@line 3857
      if (___async) {
       HEAP32[$AsyncCtx5 >> 2] = 123; //@line 3860
       HEAP32[$AsyncCtx5 + 4 >> 2] = $31; //@line 3862
       HEAP32[$AsyncCtx5 + 8 >> 2] = $34; //@line 3864
       HEAP32[$AsyncCtx5 + 12 >> 2] = $32; //@line 3866
       HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 3868
       HEAP32[$AsyncCtx5 + 20 >> 2] = $4; //@line 3870
       HEAP32[$AsyncCtx5 + 24 >> 2] = $30; //@line 3872
       HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 3874
       sp = STACKTOP; //@line 3875
       STACKTOP = sp; //@line 3876
       return 0; //@line 3876
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3878
      $$pre = HEAP32[$31 >> 2] | 0; //@line 3879
      if (!$$pre) {
       HEAP32[$34 >> 2] = 0; //@line 3882
       break;
      } else {
       $48 = $$pre; //@line 3885
      }
     }
     $49 = HEAP32[$48 + 4 >> 2] | 0; //@line 3889
     $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 3890
     FUNCTION_TABLE_vii[$49 & 7]($32, $3); //@line 3891
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 124; //@line 3894
      HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 3896
      HEAP32[$AsyncCtx8 + 8 >> 2] = $34; //@line 3898
      HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 3900
      HEAP32[$AsyncCtx8 + 16 >> 2] = $4; //@line 3902
      HEAP32[$AsyncCtx8 + 20 >> 2] = $30; //@line 3904
      HEAP32[$AsyncCtx8 + 24 >> 2] = $32; //@line 3906
      HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 3908
      sp = STACKTOP; //@line 3909
      STACKTOP = sp; //@line 3910
      return 0; //@line 3910
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 3912
      $$pre$i$i = HEAP32[$31 >> 2] | 0; //@line 3913
      HEAP32[$34 >> 2] = $$pre$i$i; //@line 3915
      if (!$$pre$i$i) {
       break;
      } else {
       $60 = $$pre$i$i; //@line 3920
       label = 16; //@line 3921
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 16) {
     $61 = HEAP32[$60 + 8 >> 2] | 0; //@line 3930
     $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3931
     FUNCTION_TABLE_vi[$61 & 511]($3); //@line 3932
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 125; //@line 3935
      HEAP32[$AsyncCtx11 + 4 >> 2] = $3; //@line 3937
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 3939
      HEAP32[$AsyncCtx11 + 12 >> 2] = $30; //@line 3941
      HEAP32[$AsyncCtx11 + 16 >> 2] = $32; //@line 3943
      HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 3945
      sp = STACKTOP; //@line 3946
      STACKTOP = sp; //@line 3947
      return 0; //@line 3947
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 3949
      break;
     }
    }
   } while (0);
   $67 = HEAP32[$4 >> 2] | 0; //@line 3954
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 84 >> 2] | 0; //@line 3957
   $71 = HEAP32[$30 >> 2] | 0; //@line 3958
   $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3959
   FUNCTION_TABLE_viiii[$70 & 7]($67, $71, 126, $32); //@line 3960
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 127; //@line 3963
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 3965
    sp = STACKTOP; //@line 3966
    STACKTOP = sp; //@line 3967
    return 0; //@line 3967
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 3969
    $$0 = 0; //@line 3970
    break;
   }
  } else {
   $$0 = $22; //@line 3974
  }
 } while (0);
 $$1 = $$0; //@line 3977
 STACKTOP = sp; //@line 3978
 return $$1 | 0; //@line 3978
}
function __ZL15ipv6_scan_chunkPtPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1$ph = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $$124$4 = 0, $$124$5 = 0, $$124$6 = 0, $$124$7 = 0, $$2 = 0, $17 = 0, $2 = 0, $26 = 0, $35 = 0, $44 = 0, $53 = 0, $62 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 4616
 STACKTOP = STACKTOP + 64 | 0; //@line 4617
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 4617
 $vararg_buffer19 = sp + 56 | 0; //@line 4618
 $vararg_buffer16 = sp + 48 | 0; //@line 4619
 $vararg_buffer13 = sp + 40 | 0; //@line 4620
 $vararg_buffer10 = sp + 32 | 0; //@line 4621
 $vararg_buffer7 = sp + 24 | 0; //@line 4622
 $vararg_buffer4 = sp + 16 | 0; //@line 4623
 $vararg_buffer1 = sp + 8 | 0; //@line 4624
 $vararg_buffer = sp; //@line 4625
 $2 = sp + 60 | 0; //@line 4626
 HEAP32[$vararg_buffer >> 2] = $2; //@line 4627
 L1 : do {
  if ((_sscanf($1, 3700, $vararg_buffer) | 0) < 1) {
   $$1$ph = 0; //@line 4632
  } else {
   HEAP16[$0 >> 1] = HEAP16[$2 >> 1] | 0; //@line 4635
   $$124 = 0; //@line 4636
   L3 : while (1) {
    switch (HEAP8[$1 + $$124 >> 0] | 0) {
    case 0:
     {
      $$1$ph = 1; //@line 4642
      break L1;
      break;
     }
    case 58:
     {
      break L3;
      break;
     }
    default:
     {}
    }
    $$124 = $$124 + 1 | 0; //@line 4654
   }
   $9 = $$124 + 1 | 0; //@line 4656
   HEAP32[$vararg_buffer1 >> 2] = $2; //@line 4658
   if ((_sscanf($1 + $9 | 0, 3700, $vararg_buffer1) | 0) < 1) {
    $$1$ph = 1; //@line 4662
   } else {
    HEAP16[$0 + 2 >> 1] = HEAP16[$2 >> 1] | 0; //@line 4666
    $$124$1 = $9; //@line 4667
    L8 : while (1) {
     switch (HEAP8[$1 + $$124$1 >> 0] | 0) {
     case 0:
      {
       $$1$ph = 2; //@line 4673
       break L1;
       break;
      }
     case 58:
      {
       break L8;
       break;
      }
     default:
      {}
     }
     $$124$1 = $$124$1 + 1 | 0; //@line 4685
    }
    $17 = $$124$1 + 1 | 0; //@line 4687
    HEAP32[$vararg_buffer4 >> 2] = $2; //@line 4689
    if ((_sscanf($1 + $17 | 0, 3700, $vararg_buffer4) | 0) < 1) {
     $$1$ph = 2; //@line 4693
    } else {
     HEAP16[$0 + 4 >> 1] = HEAP16[$2 >> 1] | 0; //@line 4697
     $$124$2 = $17; //@line 4698
     L13 : while (1) {
      switch (HEAP8[$1 + $$124$2 >> 0] | 0) {
      case 0:
       {
        $$1$ph = 3; //@line 4704
        break L1;
        break;
       }
      case 58:
       {
        break L13;
        break;
       }
      default:
       {}
      }
      $$124$2 = $$124$2 + 1 | 0; //@line 4716
     }
     $26 = $$124$2 + 1 | 0; //@line 4718
     HEAP32[$vararg_buffer7 >> 2] = $2; //@line 4720
     if ((_sscanf($1 + $26 | 0, 3700, $vararg_buffer7) | 0) < 1) {
      $$1$ph = 3; //@line 4724
     } else {
      HEAP16[$0 + 6 >> 1] = HEAP16[$2 >> 1] | 0; //@line 4728
      $$124$3 = $26; //@line 4729
      L18 : while (1) {
       switch (HEAP8[$1 + $$124$3 >> 0] | 0) {
       case 0:
        {
         $$1$ph = 4; //@line 4735
         break L1;
         break;
        }
       case 58:
        {
         break L18;
         break;
        }
       default:
        {}
       }
       $$124$3 = $$124$3 + 1 | 0; //@line 4747
      }
      $35 = $$124$3 + 1 | 0; //@line 4749
      HEAP32[$vararg_buffer10 >> 2] = $2; //@line 4751
      if ((_sscanf($1 + $35 | 0, 3700, $vararg_buffer10) | 0) < 1) {
       $$1$ph = 4; //@line 4755
      } else {
       HEAP16[$0 + 8 >> 1] = HEAP16[$2 >> 1] | 0; //@line 4759
       $$124$4 = $35; //@line 4760
       L23 : while (1) {
        switch (HEAP8[$1 + $$124$4 >> 0] | 0) {
        case 0:
         {
          $$1$ph = 5; //@line 4766
          break L1;
          break;
         }
        case 58:
         {
          break L23;
          break;
         }
        default:
         {}
        }
        $$124$4 = $$124$4 + 1 | 0; //@line 4778
       }
       $44 = $$124$4 + 1 | 0; //@line 4780
       HEAP32[$vararg_buffer13 >> 2] = $2; //@line 4782
       if ((_sscanf($1 + $44 | 0, 3700, $vararg_buffer13) | 0) < 1) {
        $$1$ph = 5; //@line 4786
       } else {
        HEAP16[$0 + 10 >> 1] = HEAP16[$2 >> 1] | 0; //@line 4790
        $$124$5 = $44; //@line 4791
        L28 : while (1) {
         switch (HEAP8[$1 + $$124$5 >> 0] | 0) {
         case 0:
          {
           $$1$ph = 6; //@line 4797
           break L1;
           break;
          }
         case 58:
          {
           break L28;
           break;
          }
         default:
          {}
         }
         $$124$5 = $$124$5 + 1 | 0; //@line 4809
        }
        $53 = $$124$5 + 1 | 0; //@line 4811
        HEAP32[$vararg_buffer16 >> 2] = $2; //@line 4813
        if ((_sscanf($1 + $53 | 0, 3700, $vararg_buffer16) | 0) < 1) {
         $$1$ph = 6; //@line 4817
        } else {
         HEAP16[$0 + 12 >> 1] = HEAP16[$2 >> 1] | 0; //@line 4821
         $$124$6 = $53; //@line 4822
         L33 : while (1) {
          switch (HEAP8[$1 + $$124$6 >> 0] | 0) {
          case 0:
           {
            $$1$ph = 7; //@line 4828
            break L1;
            break;
           }
          case 58:
           {
            break L33;
            break;
           }
          default:
           {}
          }
          $$124$6 = $$124$6 + 1 | 0; //@line 4840
         }
         $62 = $$124$6 + 1 | 0; //@line 4842
         HEAP32[$vararg_buffer19 >> 2] = $2; //@line 4844
         if ((_sscanf($1 + $62 | 0, 3700, $vararg_buffer19) | 0) < 1) {
          $$1$ph = 7; //@line 4848
         } else {
          HEAP16[$0 + 14 >> 1] = HEAP16[$2 >> 1] | 0; //@line 4852
          $$124$7 = $62; //@line 4853
          L38 : while (1) {
           switch (HEAP8[$1 + $$124$7 >> 0] | 0) {
           case 0:
            {
             $$1$ph = 8; //@line 4859
             break L1;
             break;
            }
           case 58:
            {
             break L38;
             break;
            }
           default:
            {}
           }
           $$124$7 = $$124$7 + 1 | 0; //@line 4871
          }
          $$2 = 8; //@line 4873
          STACKTOP = sp; //@line 4874
          return $$2 | 0; //@line 4874
         }
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 $$2 = $$1$ph; //@line 4884
 STACKTOP = sp; //@line 4885
 return $$2 | 0; //@line 4885
}
function __ZN6Socket4openEP12NetworkStack__async_cb_45($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 18533
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18535
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18537
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18539
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18541
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18543
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18545
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 18549
  return;
 }
 $14 = $4 + 8 | 0; //@line 18553
 HEAP32[$14 >> 2] = HEAP32[$2 >> 2]; //@line 18554
 $15 = $6 + 12 | 0; //@line 18555
 HEAP32[$6 >> 2] = 12; //@line 18556
 HEAP32[$6 + 4 >> 2] = 1; //@line 18558
 HEAP32[$6 + 8 >> 2] = $4; //@line 18560
 HEAP32[$15 >> 2] = 588; //@line 18561
 $16 = $4 + 16 | 0; //@line 18562
 if (($16 | 0) == ($6 | 0)) {
  $40 = HEAP32[149] | 0; //@line 18566
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 18567
  FUNCTION_TABLE_vi[$40 & 511]($6); //@line 18568
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 18571
   $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 18572
   HEAP32[$41 >> 2] = $6; //@line 18573
   $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 18574
   HEAP32[$42 >> 2] = $10; //@line 18575
   $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 18576
   HEAP32[$43 >> 2] = $14; //@line 18577
   $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 18578
   HEAP32[$44 >> 2] = $16; //@line 18579
   $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 18580
   HEAP32[$45 >> 2] = $8; //@line 18581
   sp = STACKTOP; //@line 18582
   return;
  }
  ___async_unwind = 0; //@line 18585
  HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 18586
  $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 18587
  HEAP32[$41 >> 2] = $6; //@line 18588
  $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 18589
  HEAP32[$42 >> 2] = $10; //@line 18590
  $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 18591
  HEAP32[$43 >> 2] = $14; //@line 18592
  $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 18593
  HEAP32[$44 >> 2] = $16; //@line 18594
  $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 18595
  HEAP32[$45 >> 2] = $8; //@line 18596
  sp = STACKTOP; //@line 18597
  return;
 }
 $18 = $4 + 28 | 0; //@line 18600
 $19 = HEAP32[$18 >> 2] | 0; //@line 18601
 if (!$19) {
  $31 = HEAP32[148] | 0; //@line 18605
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 18606
  FUNCTION_TABLE_vii[$31 & 7]($16, $6); //@line 18607
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 18610
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 18611
   HEAP32[$32 >> 2] = $15; //@line 18612
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 18613
   HEAP32[$33 >> 2] = $18; //@line 18614
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 18615
   HEAP32[$34 >> 2] = $6; //@line 18616
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 18617
   HEAP32[$35 >> 2] = $10; //@line 18618
   $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 18619
   HEAP32[$36 >> 2] = $14; //@line 18620
   $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 18621
   HEAP32[$37 >> 2] = $16; //@line 18622
   $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 18623
   HEAP32[$38 >> 2] = $8; //@line 18624
   sp = STACKTOP; //@line 18625
   return;
  }
  ___async_unwind = 0; //@line 18628
  HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 18629
  $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 18630
  HEAP32[$32 >> 2] = $15; //@line 18631
  $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 18632
  HEAP32[$33 >> 2] = $18; //@line 18633
  $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 18634
  HEAP32[$34 >> 2] = $6; //@line 18635
  $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 18636
  HEAP32[$35 >> 2] = $10; //@line 18637
  $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 18638
  HEAP32[$36 >> 2] = $14; //@line 18639
  $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 18640
  HEAP32[$37 >> 2] = $16; //@line 18641
  $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 18642
  HEAP32[$38 >> 2] = $8; //@line 18643
  sp = STACKTOP; //@line 18644
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 18648
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 18649
  FUNCTION_TABLE_vi[$22 & 511]($16); //@line 18650
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 123; //@line 18653
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 18654
   HEAP32[$23 >> 2] = $15; //@line 18655
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 18656
   HEAP32[$24 >> 2] = $18; //@line 18657
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 18658
   HEAP32[$25 >> 2] = $16; //@line 18659
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 18660
   HEAP32[$26 >> 2] = $6; //@line 18661
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 18662
   HEAP32[$27 >> 2] = $10; //@line 18663
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 18664
   HEAP32[$28 >> 2] = $14; //@line 18665
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 18666
   HEAP32[$29 >> 2] = $8; //@line 18667
   sp = STACKTOP; //@line 18668
   return;
  }
  ___async_unwind = 0; //@line 18671
  HEAP32[$ReallocAsyncCtx3 >> 2] = 123; //@line 18672
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 18673
  HEAP32[$23 >> 2] = $15; //@line 18674
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 18675
  HEAP32[$24 >> 2] = $18; //@line 18676
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 18677
  HEAP32[$25 >> 2] = $16; //@line 18678
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 18679
  HEAP32[$26 >> 2] = $6; //@line 18680
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 18681
  HEAP32[$27 >> 2] = $10; //@line 18682
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 18683
  HEAP32[$28 >> 2] = $14; //@line 18684
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 18685
  HEAP32[$29 >> 2] = $8; //@line 18686
  sp = STACKTOP; //@line 18687
  return;
 }
}
function __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0100153 = 0, $$0103158 = 0, $$0104152 = 0, $$0105151 = 0, $$0137$lcssa = 0, $$0137157 = 0, $$098 = 0, $$1 = 0, $$1106 = 0, $$1138$lcssa = 0, $$1138155 = 0, $$2150 = 0, $$4 = 0, $$7 = 0, $103 = 0, $106 = 0, $111 = 0, $112 = 0, $116 = 0, $26 = 0, $33 = 0, $34 = 0, $41 = 0, $47 = 0, $48 = 0, $51 = 0, $55 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $77 = 0, $85 = 0, label = 0;
 $26 = (HEAPU8[$0 + 4 >> 0] | 0) << 8 | (HEAPU8[$0 + 5 >> 0] | 0); //@line 7024
 $33 = (HEAPU8[$0 + 6 >> 0] | 0) << 8 | (HEAPU8[$0 + 7 >> 0] | 0); //@line 7031
 $34 = $0 + 12 | 0; //@line 7032
 if (!((HEAP8[$0 + 3 >> 0] & 15) == 0 & ((HEAP8[$0 + 2 >> 0] & -8) << 24 >> 24 == -128 ? (((HEAPU8[$0 >> 0] | 0) << 8 | (HEAPU8[$0 + 1 >> 0] | 0)) & 65535) << 16 >> 16 == $1 << 16 >> 16 : 0))) {
  $$098 = -1; //@line 7040
  return $$098 | 0; //@line 7041
 }
 if (!$26) {
  $$0137$lcssa = $34; //@line 7045
 } else {
  $$0103158 = 0; //@line 7047
  $$0137157 = $34; //@line 7047
  while (1) {
   $41 = HEAP8[$$0137157 >> 0] | 0; //@line 7049
   if (!($41 << 24 >> 24)) {
    $$1138$lcssa = $$0137157; //@line 7052
   } else {
    $$1138155 = $$0137157; //@line 7054
    $47 = $41; //@line 7054
    while (1) {
     $48 = $$1138155 + 1 + ($47 & 255) | 0; //@line 7058
     $47 = HEAP8[$48 >> 0] | 0; //@line 7059
     if (!($47 << 24 >> 24)) {
      $$1138$lcssa = $48; //@line 7062
      break;
     } else {
      $$1138155 = $48; //@line 7065
     }
    }
   }
   $51 = $$1138$lcssa + 5 | 0; //@line 7069
   $$0103158 = $$0103158 + 1 | 0; //@line 7070
   if (($$0103158 | 0) >= ($26 | 0)) {
    $$0137$lcssa = $51; //@line 7075
    break;
   } else {
    $$0137157 = $51; //@line 7073
   }
  }
 }
 if (($4 | 0) != 0 & ($33 | 0) != 0) {
  $$0100153 = $3; //@line 7084
  $$0104152 = 0; //@line 7084
  $$0105151 = 0; //@line 7084
  $$2150 = $$0137$lcssa; //@line 7084
 } else {
  $$098 = 0; //@line 7086
  return $$098 | 0; //@line 7087
 }
 while (1) {
  $55 = HEAP8[$$2150 >> 0] | 0; //@line 7091
  do {
   if (!($55 << 24 >> 24)) {
    $$4 = $$2150 + 1 | 0; //@line 7095
   } else {
    $59 = $55 & 255; //@line 7098
    $62 = $$2150; //@line 7098
    while (1) {
     if ($59 & 192 | 0) {
      label = 10; //@line 7103
      break;
     }
     $64 = $62 + 1 + $59 | 0; //@line 7107
     $65 = HEAP8[$64 >> 0] | 0; //@line 7108
     if (!($65 << 24 >> 24)) {
      label = 12; //@line 7112
      break;
     } else {
      $59 = $65 & 255; //@line 7115
      $62 = $64; //@line 7115
     }
    }
    if ((label | 0) == 10) {
     label = 0; //@line 7119
     $$4 = $62 + 2 | 0; //@line 7121
     break;
    } else if ((label | 0) == 12) {
     label = 0; //@line 7125
     $$4 = $64 + 1 | 0; //@line 7127
     break;
    }
   }
  } while (0);
  $77 = ((HEAPU8[$$4 >> 0] | 0) << 8 | (HEAPU8[$$4 + 1 >> 0] | 0)) & 65535; //@line 7140
  $85 = (HEAPU8[$$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$$4 + 3 >> 0] | 0); //@line 7148
  $103 = (HEAPU8[$$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$$4 + 7 >> 0] | 0); //@line 7166
  $106 = $$4 + 10 | 0; //@line 7169
  $111 = (HEAPU8[$$4 + 8 >> 0] | 0) << 8 | (HEAPU8[$$4 + 9 >> 0] | 0); //@line 7174
  $112 = $111 & 65535; //@line 7175
  if (!$$0104152) {
   HEAP32[$2 >> 2] = $103 >>> 0 < 2147483647 ? $103 : 2147483647; //@line 7180
  }
  $116 = ($85 | 0) == 1; //@line 7183
  do {
   if ($77 << 16 >> 16 == 1 & $116 & $112 << 16 >> 16 == 4) {
    HEAP32[$$0100153 >> 2] = 1; //@line 7189
    HEAP8[$$0100153 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 7193
    HEAP8[$$0100153 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 7197
    HEAP8[$$0100153 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 7201
    HEAP8[$$0100153 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 7204
    $$1 = $$0100153 + 20 | 0; //@line 7208
    $$1106 = $$0105151 + 1 | 0; //@line 7208
    $$7 = $$4 + 14 | 0; //@line 7208
   } else {
    if ($77 << 16 >> 16 == 28 & $116 & $112 << 16 >> 16 == 16) {
     HEAP32[$$0100153 >> 2] = 2; //@line 7215
     HEAP8[$$0100153 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 7219
     HEAP8[$$0100153 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 7223
     HEAP8[$$0100153 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 7227
     HEAP8[$$0100153 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 7231
     HEAP8[$$0100153 + 8 >> 0] = HEAP8[$$4 + 14 >> 0] | 0; //@line 7235
     HEAP8[$$0100153 + 9 >> 0] = HEAP8[$$4 + 15 >> 0] | 0; //@line 7239
     HEAP8[$$0100153 + 10 >> 0] = HEAP8[$$4 + 16 >> 0] | 0; //@line 7243
     HEAP8[$$0100153 + 11 >> 0] = HEAP8[$$4 + 17 >> 0] | 0; //@line 7247
     HEAP8[$$0100153 + 12 >> 0] = HEAP8[$$4 + 18 >> 0] | 0; //@line 7251
     HEAP8[$$0100153 + 13 >> 0] = HEAP8[$$4 + 19 >> 0] | 0; //@line 7255
     HEAP8[$$0100153 + 14 >> 0] = HEAP8[$$4 + 20 >> 0] | 0; //@line 7259
     HEAP8[$$0100153 + 15 >> 0] = HEAP8[$$4 + 21 >> 0] | 0; //@line 7263
     HEAP8[$$0100153 + 16 >> 0] = HEAP8[$$4 + 22 >> 0] | 0; //@line 7267
     HEAP8[$$0100153 + 17 >> 0] = HEAP8[$$4 + 23 >> 0] | 0; //@line 7271
     HEAP8[$$0100153 + 18 >> 0] = HEAP8[$$4 + 24 >> 0] | 0; //@line 7275
     HEAP8[$$0100153 + 19 >> 0] = HEAP8[$$4 + 25 >> 0] | 0; //@line 7278
     $$1 = $$0100153 + 20 | 0; //@line 7282
     $$1106 = $$0105151 + 1 | 0; //@line 7282
     $$7 = $$4 + 26 | 0; //@line 7282
     break;
    } else {
     $$1 = $$0100153; //@line 7286
     $$1106 = $$0105151; //@line 7286
     $$7 = $106 + $111 | 0; //@line 7286
     break;
    }
   }
  } while (0);
  $$0104152 = $$0104152 + 1 | 0; //@line 7291
  if (!($$1106 >>> 0 < $4 >>> 0 & ($$0104152 | 0) < ($33 | 0))) {
   $$098 = $$1106; //@line 7298
   break;
  } else {
   $$0100153 = $$1; //@line 7296
   $$0105151 = $$1106; //@line 7296
   $$2150 = $$7; //@line 7296
  }
 }
 return $$098 | 0; //@line 7302
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2365
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2367
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2369
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2371
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2373
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 2376
 $11 = $2 + 12 | 0; //@line 2377
 HEAP32[$11 >> 2] = $$pre$i; //@line 2378
 $12 = $6 + 12 | 0; //@line 2379
 $13 = HEAP32[$12 >> 2] | 0; //@line 2380
 $15 = $$pre$i; //@line 2382
 if (!$13) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 2384
  _mbed_assert_internal(4029, 4034, 1677); //@line 2385
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 260; //@line 2388
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 2389
   HEAP32[$16 >> 2] = $12; //@line 2390
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 2391
   HEAP32[$17 >> 2] = $11; //@line 2392
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 2393
   HEAP32[$18 >> 2] = $6; //@line 2394
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 2395
   HEAP32[$19 >> 2] = $4; //@line 2396
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 2397
   HEAP32[$20 >> 2] = $8; //@line 2398
   $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 2399
   HEAP32[$21 >> 2] = $2; //@line 2400
   $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 2401
   HEAP32[$22 >> 2] = $4; //@line 2402
   $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 2403
   HEAP32[$23 >> 2] = $11; //@line 2404
   sp = STACKTOP; //@line 2405
   return;
  }
  ___async_unwind = 0; //@line 2408
  HEAP32[$ReallocAsyncCtx6 >> 2] = 260; //@line 2409
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 2410
  HEAP32[$16 >> 2] = $12; //@line 2411
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 2412
  HEAP32[$17 >> 2] = $11; //@line 2413
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 2414
  HEAP32[$18 >> 2] = $6; //@line 2415
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 2416
  HEAP32[$19 >> 2] = $4; //@line 2417
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 2418
  HEAP32[$20 >> 2] = $8; //@line 2419
  $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 2420
  HEAP32[$21 >> 2] = $2; //@line 2421
  $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 2422
  HEAP32[$22 >> 2] = $4; //@line 2423
  $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 2424
  HEAP32[$23 >> 2] = $11; //@line 2425
  sp = STACKTOP; //@line 2426
  return;
 }
 $24 = HEAP32[$13 >> 2] | 0; //@line 2429
 if (!$15) {
  $36 = $4 + 12 | 0; //@line 2432
  HEAP32[$36 >> 2] = 0; //@line 2433
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 2434
  $37 = FUNCTION_TABLE_iiii[$24 & 31]($6, $8, $4) | 0; //@line 2435
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 262; //@line 2438
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 2439
   HEAP32[$38 >> 2] = $36; //@line 2440
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 2441
   HEAP32[$39 >> 2] = $4; //@line 2442
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 2443
   HEAP32[$40 >> 2] = $11; //@line 2444
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 2445
   HEAP32[$41 >> 2] = $2; //@line 2446
   sp = STACKTOP; //@line 2447
   return;
  }
  HEAP32[___async_retval >> 2] = $37; //@line 2451
  ___async_unwind = 0; //@line 2452
  HEAP32[$ReallocAsyncCtx3 >> 2] = 262; //@line 2453
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 2454
  HEAP32[$38 >> 2] = $36; //@line 2455
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 2456
  HEAP32[$39 >> 2] = $4; //@line 2457
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 2458
  HEAP32[$40 >> 2] = $11; //@line 2459
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 2460
  HEAP32[$41 >> 2] = $2; //@line 2461
  sp = STACKTOP; //@line 2462
  return;
 } else {
  $27 = HEAP32[$15 + 4 >> 2] | 0; //@line 2466
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 2467
  FUNCTION_TABLE_vii[$27 & 7]($4, $2); //@line 2468
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 261; //@line 2471
   $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 2472
   HEAP32[$28 >> 2] = $11; //@line 2473
   $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 2474
   HEAP32[$29 >> 2] = $4; //@line 2475
   $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 2476
   HEAP32[$30 >> 2] = $6; //@line 2477
   $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 2478
   HEAP32[$31 >> 2] = $8; //@line 2479
   $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 2480
   HEAP32[$32 >> 2] = $24; //@line 2481
   $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 2482
   HEAP32[$33 >> 2] = $4; //@line 2483
   $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 2484
   HEAP32[$34 >> 2] = $11; //@line 2485
   $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 2486
   HEAP32[$35 >> 2] = $2; //@line 2487
   sp = STACKTOP; //@line 2488
   return;
  }
  ___async_unwind = 0; //@line 2491
  HEAP32[$ReallocAsyncCtx2 >> 2] = 261; //@line 2492
  $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 2493
  HEAP32[$28 >> 2] = $11; //@line 2494
  $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 2495
  HEAP32[$29 >> 2] = $4; //@line 2496
  $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 2497
  HEAP32[$30 >> 2] = $6; //@line 2498
  $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 2499
  HEAP32[$31 >> 2] = $8; //@line 2500
  $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 2501
  HEAP32[$32 >> 2] = $24; //@line 2502
  $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 2503
  HEAP32[$33 >> 2] = $4; //@line 2504
  $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 2505
  HEAP32[$34 >> 2] = $11; //@line 2506
  $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 2507
  HEAP32[$35 >> 2] = $2; //@line 2508
  sp = STACKTOP; //@line 2509
  return;
 }
}
function __ZL30nsapi_dns_query_async_responsePv($0) {
 $0 = $0 | 0;
 var $$048 = 0, $$052 = 0, $$byval_copy14 = 0, $$lcssa = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $14 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $35 = 0, $40 = 0, $42 = 0, $53 = 0, $57 = 0, $61 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11622
 STACKTOP = STACKTOP + 48 | 0; //@line 11623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 11623
 $$byval_copy14 = sp + 20 | 0; //@line 11624
 $1 = sp; //@line 11625
 $2 = $0; //@line 11626
 $3 = HEAP32[1960] | 0; //@line 11627
 if (!$3) {
  label = 3; //@line 11630
 } else {
  if ((HEAP32[$3 >> 2] | 0) == ($2 | 0)) {
   $$lcssa = $3; //@line 11635
  } else {
   label = 3; //@line 11637
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = HEAP32[1961] | 0; //@line 11642
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $7; //@line 11648
     break;
    }
   }
   $53 = HEAP32[1962] | 0; //@line 11652
   if ($53 | 0) {
    if ((HEAP32[$53 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $53; //@line 11658
     break;
    }
   }
   $57 = HEAP32[1963] | 0; //@line 11662
   if ($57 | 0) {
    if ((HEAP32[$57 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $57; //@line 11668
     break;
    }
   }
   $61 = HEAP32[1964] | 0; //@line 11672
   if (!$61) {
    STACKTOP = sp; //@line 11675
    return;
   }
   if ((HEAP32[$61 >> 2] | 0) == ($2 | 0)) {
    $$lcssa = $61; //@line 11680
   } else {
    STACKTOP = sp; //@line 11682
    return;
   }
  }
 } while (0);
 $9 = $$lcssa + 85 | 0; //@line 11686
 $10 = HEAP8[$9 >> 0] | 0; //@line 11687
 $11 = $10 & 255; //@line 11688
 if (!($10 << 24 >> 24)) {
  $14 = HEAP32[$$lcssa + 4 >> 2] | 0; //@line 11692
  $AsyncCtx9 = _emscripten_alloc_async_context(4, sp) | 0; //@line 11693
  __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa, $14, 0); //@line 11694
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 250; //@line 11697
   sp = STACKTOP; //@line 11698
   STACKTOP = sp; //@line 11699
   return;
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 11701
  STACKTOP = sp; //@line 11702
  return;
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11705
 $16 = __ZnajRKSt9nothrow_t($11 << 6, 9760) | 0; //@line 11706
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 251; //@line 11709
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 11711
  HEAP32[$AsyncCtx2 + 8 >> 2] = $$lcssa; //@line 11713
  HEAP32[$AsyncCtx2 + 12 >> 2] = $11; //@line 11715
  HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 11717
  sp = STACKTOP; //@line 11718
  STACKTOP = sp; //@line 11719
  return;
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11721
 if (!$16) {
  $35 = 0; //@line 11724
 } else {
  $22 = $16 + ($11 << 6) | 0; //@line 11726
  $23 = $16; //@line 11727
  do {
   HEAP32[$1 >> 2] = 0; //@line 11729
   HEAP32[$1 + 4 >> 2] = 0; //@line 11729
   HEAP32[$1 + 8 >> 2] = 0; //@line 11729
   HEAP32[$1 + 12 >> 2] = 0; //@line 11729
   HEAP32[$1 + 16 >> 2] = 0; //@line 11729
   HEAP32[$$byval_copy14 >> 2] = HEAP32[$1 >> 2]; //@line 11730
   HEAP32[$$byval_copy14 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 11730
   HEAP32[$$byval_copy14 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 11730
   HEAP32[$$byval_copy14 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 11730
   HEAP32[$$byval_copy14 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 11730
   __ZN13SocketAddressC2E10nsapi_addrt($23, $$byval_copy14, 0); //@line 11731
   $23 = $23 + 64 | 0; //@line 11732
  } while (($23 | 0) != ($22 | 0));
  $35 = $16; //@line 11735
 }
 $$pre = $$lcssa + 64 | 0; //@line 11744
 if (HEAP8[$9 >> 0] | 0) {
  $$052 = 0; //@line 11746
  do {
   $40 = $35 + ($$052 << 6) | 0; //@line 11748
   $42 = (HEAP32[$$pre >> 2] | 0) + ($$052 * 20 | 0) | 0; //@line 11750
   HEAP32[$$byval_copy14 >> 2] = HEAP32[$42 >> 2]; //@line 11751
   HEAP32[$$byval_copy14 + 4 >> 2] = HEAP32[$42 + 4 >> 2]; //@line 11751
   HEAP32[$$byval_copy14 + 8 >> 2] = HEAP32[$42 + 8 >> 2]; //@line 11751
   HEAP32[$$byval_copy14 + 12 >> 2] = HEAP32[$42 + 12 >> 2]; //@line 11751
   HEAP32[$$byval_copy14 + 16 >> 2] = HEAP32[$42 + 16 >> 2]; //@line 11751
   __ZN13SocketAddress8set_addrE10nsapi_addr($40, $$byval_copy14); //@line 11752
   $$052 = $$052 + 1 | 0; //@line 11753
  } while (($$052 | 0) < (HEAPU8[$9 >> 0] | 0));
 }
 $29 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 11765
 $30 = HEAP32[$$pre >> 2] | 0; //@line 11766
 $32 = HEAP32[$$lcssa + 68 >> 2] | 0; //@line 11768
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 11769
 __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($29, $30, $32); //@line 11770
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 252; //@line 11773
  HEAP32[$AsyncCtx + 4 >> 2] = $$lcssa; //@line 11775
  HEAP32[$AsyncCtx + 8 >> 2] = $35; //@line 11777
  HEAP32[$AsyncCtx + 12 >> 2] = $9; //@line 11779
  sp = STACKTOP; //@line 11780
  STACKTOP = sp; //@line 11781
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 11783
 if (!(HEAP32[$$lcssa + 48 >> 2] | 0)) {
  $$048 = 0; //@line 11788
 } else {
  $$048 = HEAPU8[$9 >> 0] | 0; //@line 11792
 }
 $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11794
 __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($$lcssa, $$048, $35); //@line 11795
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 253; //@line 11798
  HEAP32[$AsyncCtx6 + 4 >> 2] = $35; //@line 11800
  sp = STACKTOP; //@line 11801
  STACKTOP = sp; //@line 11802
  return;
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11804
 if (!$35) {
  STACKTOP = sp; //@line 11807
  return;
 }
 __ZdaPv($35); //@line 11809
 STACKTOP = sp; //@line 11810
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $53 = 0, $58 = 0, $6 = 0, $61 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12215
 STACKTOP = STACKTOP + 32 | 0; //@line 12216
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12216
 $3 = sp + 16 | 0; //@line 12217
 $4 = sp; //@line 12218
 $5 = $2 + 12 | 0; //@line 12219
 $6 = HEAP32[$5 >> 2] | 0; //@line 12220
 do {
  if (!$6) {
   $16 = 0; //@line 12224
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 12227
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 12228
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 12229
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 259; //@line 12232
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 12234
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 12236
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 12238
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 12240
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 12242
    sp = STACKTOP; //@line 12243
    STACKTOP = sp; //@line 12244
    return 0; //@line 12244
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12246
    $16 = HEAP32[$5 >> 2] | 0; //@line 12248
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 12253
 HEAP32[$15 >> 2] = $16; //@line 12254
 $17 = $0 + 12 | 0; //@line 12255
 $18 = HEAP32[$17 >> 2] | 0; //@line 12256
 $20 = $16; //@line 12258
 do {
  if (!$18) {
   $AsyncCtx16 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12261
   _mbed_assert_internal(4029, 4034, 1677); //@line 12262
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 260; //@line 12265
    HEAP32[$AsyncCtx16 + 4 >> 2] = $17; //@line 12267
    HEAP32[$AsyncCtx16 + 8 >> 2] = $15; //@line 12269
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 12271
    HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 12273
    HEAP32[$AsyncCtx16 + 20 >> 2] = $1; //@line 12275
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 12277
    HEAP32[$AsyncCtx16 + 28 >> 2] = $3; //@line 12279
    HEAP32[$AsyncCtx16 + 32 >> 2] = $15; //@line 12281
    sp = STACKTOP; //@line 12282
    STACKTOP = sp; //@line 12283
    return 0; //@line 12283
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 12285
    $30 = HEAP32[$17 >> 2] | 0; //@line 12288
    $32 = HEAP32[$15 >> 2] | 0; //@line 12288
    break;
   }
  } else {
   $30 = $18; //@line 12292
   $32 = $20; //@line 12292
  }
 } while (0);
 $29 = HEAP32[$30 >> 2] | 0; //@line 12295
 do {
  if (!$32) {
   $44 = 0; //@line 12299
  } else {
   $34 = HEAP32[$32 + 4 >> 2] | 0; //@line 12302
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12303
   FUNCTION_TABLE_vii[$34 & 7]($3, $4); //@line 12304
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 261; //@line 12307
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 12309
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 12311
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 12313
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 12315
    HEAP32[$AsyncCtx2 + 20 >> 2] = $29; //@line 12317
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 12319
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 12321
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 12323
    sp = STACKTOP; //@line 12324
    STACKTOP = sp; //@line 12325
    return 0; //@line 12325
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12327
    $44 = HEAP32[$15 >> 2] | 0; //@line 12329
    break;
   }
  }
 } while (0);
 $43 = $3 + 12 | 0; //@line 12334
 HEAP32[$43 >> 2] = $44; //@line 12335
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12336
 $45 = FUNCTION_TABLE_iiii[$29 & 31]($0, $1, $3) | 0; //@line 12337
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 262; //@line 12340
  HEAP32[$AsyncCtx5 + 4 >> 2] = $43; //@line 12342
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 12344
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 12346
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 12348
  sp = STACKTOP; //@line 12349
  STACKTOP = sp; //@line 12350
  return 0; //@line 12350
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12352
 $50 = HEAP32[$43 >> 2] | 0; //@line 12353
 do {
  if ($50 | 0) {
   $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 12358
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12359
   FUNCTION_TABLE_vi[$53 & 511]($3); //@line 12360
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 263; //@line 12363
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 12365
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 12367
    HEAP32[$AsyncCtx9 + 12 >> 2] = $45; //@line 12369
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 12371
    sp = STACKTOP; //@line 12372
    STACKTOP = sp; //@line 12373
    return 0; //@line 12373
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12375
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$15 >> 2] | 0; //@line 12380
 if (!$58) {
  STACKTOP = sp; //@line 12383
  return $45 | 0; //@line 12383
 }
 $61 = HEAP32[$58 + 8 >> 2] | 0; //@line 12386
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12387
 FUNCTION_TABLE_vi[$61 & 511]($4); //@line 12388
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 264; //@line 12391
  HEAP32[$AsyncCtx13 + 4 >> 2] = $45; //@line 12393
  sp = STACKTOP; //@line 12394
  STACKTOP = sp; //@line 12395
  return 0; //@line 12395
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12397
 STACKTOP = sp; //@line 12398
 return $45 | 0; //@line 12398
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_13($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16675
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16679
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16681
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16683
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16685
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16687
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16689
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16691
 $17 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16692
 if ($17 | 0) {
  $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 16696
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(28) | 0; //@line 16697
  FUNCTION_TABLE_vi[$20 & 511]($16); //@line 16698
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 228; //@line 16701
   $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 16702
   HEAP32[$21 >> 2] = $10; //@line 16703
   $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 16704
   HEAP32[$22 >> 2] = $12; //@line 16705
   $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 16706
   HEAP32[$23 >> 2] = $14; //@line 16707
   $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 16708
   HEAP32[$24 >> 2] = $4; //@line 16709
   $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 16710
   HEAP32[$25 >> 2] = $6; //@line 16711
   $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 16712
   HEAP32[$26 >> 2] = $8; //@line 16713
   sp = STACKTOP; //@line 16714
   return;
  }
  ___async_unwind = 0; //@line 16717
  HEAP32[$ReallocAsyncCtx3 >> 2] = 228; //@line 16718
  $21 = $ReallocAsyncCtx3 + 4 | 0; //@line 16719
  HEAP32[$21 >> 2] = $10; //@line 16720
  $22 = $ReallocAsyncCtx3 + 8 | 0; //@line 16721
  HEAP32[$22 >> 2] = $12; //@line 16722
  $23 = $ReallocAsyncCtx3 + 12 | 0; //@line 16723
  HEAP32[$23 >> 2] = $14; //@line 16724
  $24 = $ReallocAsyncCtx3 + 16 | 0; //@line 16725
  HEAP32[$24 >> 2] = $4; //@line 16726
  $25 = $ReallocAsyncCtx3 + 20 | 0; //@line 16727
  HEAP32[$25 >> 2] = $6; //@line 16728
  $26 = $ReallocAsyncCtx3 + 24 | 0; //@line 16729
  HEAP32[$26 >> 2] = $8; //@line 16730
  sp = STACKTOP; //@line 16731
  return;
 }
 $27 = HEAP32[$10 >> 2] | 0; //@line 16734
 if ($27 | 0) {
  $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 16738
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 16739
  FUNCTION_TABLE_vi[$30 & 511]($14); //@line 16740
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 229; //@line 16743
   $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 16744
   HEAP32[$31 >> 2] = $12; //@line 16745
   $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 16746
   HEAP32[$32 >> 2] = $4; //@line 16747
   $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 16748
   HEAP32[$33 >> 2] = $6; //@line 16749
   $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 16750
   HEAP32[$34 >> 2] = $8; //@line 16751
   sp = STACKTOP; //@line 16752
   return;
  }
  ___async_unwind = 0; //@line 16755
  HEAP32[$ReallocAsyncCtx4 >> 2] = 229; //@line 16756
  $31 = $ReallocAsyncCtx4 + 4 | 0; //@line 16757
  HEAP32[$31 >> 2] = $12; //@line 16758
  $32 = $ReallocAsyncCtx4 + 8 | 0; //@line 16759
  HEAP32[$32 >> 2] = $4; //@line 16760
  $33 = $ReallocAsyncCtx4 + 12 | 0; //@line 16761
  HEAP32[$33 >> 2] = $6; //@line 16762
  $34 = $ReallocAsyncCtx4 + 16 | 0; //@line 16763
  HEAP32[$34 >> 2] = $8; //@line 16764
  sp = STACKTOP; //@line 16765
  return;
 }
 $35 = HEAP32[$12 >> 2] | 0; //@line 16768
 if (!$35) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 16771
  _mbed_assert_internal(4029, 4034, 1677); //@line 16772
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 230; //@line 16775
   $37 = $ReallocAsyncCtx9 + 4 | 0; //@line 16776
   HEAP32[$37 >> 2] = $12; //@line 16777
   $38 = $ReallocAsyncCtx9 + 8 | 0; //@line 16778
   HEAP32[$38 >> 2] = $4; //@line 16779
   $39 = $ReallocAsyncCtx9 + 12 | 0; //@line 16780
   HEAP32[$39 >> 2] = $6; //@line 16781
   $40 = $ReallocAsyncCtx9 + 16 | 0; //@line 16782
   HEAP32[$40 >> 2] = $8; //@line 16783
   sp = STACKTOP; //@line 16784
   return;
  }
  ___async_unwind = 0; //@line 16787
  HEAP32[$ReallocAsyncCtx9 >> 2] = 230; //@line 16788
  $37 = $ReallocAsyncCtx9 + 4 | 0; //@line 16789
  HEAP32[$37 >> 2] = $12; //@line 16790
  $38 = $ReallocAsyncCtx9 + 8 | 0; //@line 16791
  HEAP32[$38 >> 2] = $4; //@line 16792
  $39 = $ReallocAsyncCtx9 + 12 | 0; //@line 16793
  HEAP32[$39 >> 2] = $6; //@line 16794
  $40 = $ReallocAsyncCtx9 + 16 | 0; //@line 16795
  HEAP32[$40 >> 2] = $8; //@line 16796
  sp = STACKTOP; //@line 16797
  return;
 } else {
  $41 = HEAP32[$35 >> 2] | 0; //@line 16800
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 16801
  FUNCTION_TABLE_viii[$41 & 0]($4, $6, $8); //@line 16802
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 231; //@line 16805
   $42 = $ReallocAsyncCtx5 + 4 | 0; //@line 16806
   HEAP32[$42 >> 2] = $12; //@line 16807
   $43 = $ReallocAsyncCtx5 + 8 | 0; //@line 16808
   HEAP32[$43 >> 2] = $4; //@line 16809
   sp = STACKTOP; //@line 16810
   return;
  }
  ___async_unwind = 0; //@line 16813
  HEAP32[$ReallocAsyncCtx5 >> 2] = 231; //@line 16814
  $42 = $ReallocAsyncCtx5 + 4 | 0; //@line 16815
  HEAP32[$42 >> 2] = $12; //@line 16816
  $43 = $ReallocAsyncCtx5 + 8 | 0; //@line 16817
  HEAP32[$43 >> 2] = $4; //@line 16818
  sp = STACKTOP; //@line 16819
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_80($0) {
 $0 = $0 | 0;
 var $$391 = 0, $$expand_i1_val = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 23329
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23331
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23333
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23335
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23341
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23343
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23345
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23347
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23349
 $21 = (HEAP32[$0 + 16 >> 2] | 0) == 0; //@line 23350
 $22 = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 23351
 if ($22 | 0) {
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 23355
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(36) | 0; //@line 23356
  FUNCTION_TABLE_vi[$25 & 511]($12); //@line 23357
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 188; //@line 23360
   $26 = $ReallocAsyncCtx13 + 4 | 0; //@line 23361
   $$expand_i1_val = $21 & 1; //@line 23362
   HEAP8[$26 >> 0] = $$expand_i1_val; //@line 23363
   $27 = $ReallocAsyncCtx13 + 8 | 0; //@line 23364
   HEAP32[$27 >> 2] = $6; //@line 23365
   $28 = $ReallocAsyncCtx13 + 12 | 0; //@line 23366
   HEAP32[$28 >> 2] = $18; //@line 23367
   $29 = $ReallocAsyncCtx13 + 16 | 0; //@line 23368
   HEAP32[$29 >> 2] = $14; //@line 23369
   $30 = $ReallocAsyncCtx13 + 20 | 0; //@line 23370
   HEAP32[$30 >> 2] = $2; //@line 23371
   $31 = $ReallocAsyncCtx13 + 24 | 0; //@line 23372
   HEAP32[$31 >> 2] = $16; //@line 23373
   $32 = $ReallocAsyncCtx13 + 28 | 0; //@line 23374
   HEAP32[$32 >> 2] = $4; //@line 23375
   $33 = $ReallocAsyncCtx13 + 32 | 0; //@line 23376
   HEAP32[$33 >> 2] = $20; //@line 23377
   sp = STACKTOP; //@line 23378
   return;
  }
  ___async_unwind = 0; //@line 23381
  HEAP32[$ReallocAsyncCtx13 >> 2] = 188; //@line 23382
  $26 = $ReallocAsyncCtx13 + 4 | 0; //@line 23383
  $$expand_i1_val = $21 & 1; //@line 23384
  HEAP8[$26 >> 0] = $$expand_i1_val; //@line 23385
  $27 = $ReallocAsyncCtx13 + 8 | 0; //@line 23386
  HEAP32[$27 >> 2] = $6; //@line 23387
  $28 = $ReallocAsyncCtx13 + 12 | 0; //@line 23388
  HEAP32[$28 >> 2] = $18; //@line 23389
  $29 = $ReallocAsyncCtx13 + 16 | 0; //@line 23390
  HEAP32[$29 >> 2] = $14; //@line 23391
  $30 = $ReallocAsyncCtx13 + 20 | 0; //@line 23392
  HEAP32[$30 >> 2] = $2; //@line 23393
  $31 = $ReallocAsyncCtx13 + 24 | 0; //@line 23394
  HEAP32[$31 >> 2] = $16; //@line 23395
  $32 = $ReallocAsyncCtx13 + 28 | 0; //@line 23396
  HEAP32[$32 >> 2] = $4; //@line 23397
  $33 = $ReallocAsyncCtx13 + 32 | 0; //@line 23398
  HEAP32[$33 >> 2] = $20; //@line 23399
  sp = STACKTOP; //@line 23400
  return;
 }
 do {
  if ($21) {
   $$391 = HEAP32[$6 >> 2] | 0; //@line 23406
  } else {
   $34 = HEAP32[$18 >> 2] | 0; //@line 23408
   if ($34 | 0) {
    __ZdlPv($34); //@line 23411
   }
   $36 = HEAP32[$14 >> 2] | 0; //@line 23413
   if ($36 | 0) {
    $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 23417
    $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 23418
    FUNCTION_TABLE_vi[$39 & 511]($16); //@line 23419
    if (___async) {
     HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 23422
     $40 = $ReallocAsyncCtx14 + 4 | 0; //@line 23423
     HEAP32[$40 >> 2] = $2; //@line 23424
     $41 = $ReallocAsyncCtx14 + 8 | 0; //@line 23425
     HEAP32[$41 >> 2] = $4; //@line 23426
     $42 = $ReallocAsyncCtx14 + 12 | 0; //@line 23427
     HEAP32[$42 >> 2] = $20; //@line 23428
     sp = STACKTOP; //@line 23429
     return;
    }
    ___async_unwind = 0; //@line 23432
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 23433
    $40 = $ReallocAsyncCtx14 + 4 | 0; //@line 23434
    HEAP32[$40 >> 2] = $2; //@line 23435
    $41 = $ReallocAsyncCtx14 + 8 | 0; //@line 23436
    HEAP32[$41 >> 2] = $4; //@line 23437
    $42 = $ReallocAsyncCtx14 + 12 | 0; //@line 23438
    HEAP32[$42 >> 2] = $20; //@line 23439
    sp = STACKTOP; //@line 23440
    return;
   }
   $44 = HEAP32[$2 + 28 >> 2] | 0; //@line 23444
   if (!$44) {
    __ZdlPv($2); //@line 23447
    $$391 = -3007; //@line 23448
    break;
   }
   $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 23452
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 23453
   FUNCTION_TABLE_vi[$47 & 511]($4); //@line 23454
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 190; //@line 23457
    $48 = $ReallocAsyncCtx15 + 4 | 0; //@line 23458
    HEAP32[$48 >> 2] = $2; //@line 23459
    $49 = $ReallocAsyncCtx15 + 8 | 0; //@line 23460
    HEAP32[$49 >> 2] = $20; //@line 23461
    sp = STACKTOP; //@line 23462
    return;
   }
   ___async_unwind = 0; //@line 23465
   HEAP32[$ReallocAsyncCtx15 >> 2] = 190; //@line 23466
   $48 = $ReallocAsyncCtx15 + 4 | 0; //@line 23467
   HEAP32[$48 >> 2] = $2; //@line 23468
   $49 = $ReallocAsyncCtx15 + 8 | 0; //@line 23469
   HEAP32[$49 >> 2] = $20; //@line 23470
   sp = STACKTOP; //@line 23471
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$391; //@line 23476
 return;
}
function _mbed_vtracef__async_cb_178($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $10 = 0, $14 = 0, $18 = 0, $2 = 0, $24 = 0, $28 = 0, $32 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $6 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14058
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14060
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14062
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14064
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14066
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14068
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14072
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14076
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14082
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14086
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14090
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 14094
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 14096
 $40 = HEAP8[$0 + 80 >> 0] & 1; //@line 14099
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 14101
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 14103
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 14105
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 14107
 HEAP32[$18 >> 2] = HEAP32[___async_retval >> 2]; //@line 14110
 $50 = _snprintf($2, $4, 3567, $18) | 0; //@line 14111
 $$10 = ($50 | 0) >= ($4 | 0) ? 0 : $50; //@line 14113
 $53 = $2 + $$10 | 0; //@line 14115
 $54 = $4 - $$10 | 0; //@line 14116
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 14120
   $$3169 = $53; //@line 14120
   label = 4; //@line 14121
  }
 } else {
  $$3147168 = $4; //@line 14124
  $$3169 = $2; //@line 14124
  label = 4; //@line 14125
 }
 if ((label | 0) == 4) {
  $56 = $6 + -2 | 0; //@line 14128
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$8 >> 2] = $10; //@line 14134
    $$5156 = _snprintf($$3169, $$3147168, 3570, $8) | 0; //@line 14136
    break;
   }
  case 1:
   {
    HEAP32[$14 >> 2] = $10; //@line 14140
    $$5156 = _snprintf($$3169, $$3147168, 3585, $14) | 0; //@line 14142
    break;
   }
  case 3:
   {
    HEAP32[$24 >> 2] = $10; //@line 14146
    $$5156 = _snprintf($$3169, $$3147168, 3600, $24) | 0; //@line 14148
    break;
   }
  case 7:
   {
    HEAP32[$28 >> 2] = $10; //@line 14152
    $$5156 = _snprintf($$3169, $$3147168, 3615, $28) | 0; //@line 14154
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 3630, $32) | 0; //@line 14159
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 14163
  $67 = $$3169 + $$5156$ | 0; //@line 14165
  $68 = $$3147168 - $$5156$ | 0; //@line 14166
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 14170
   $70 = _vsnprintf($67, $68, $36, $38) | 0; //@line 14171
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 14174
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 14175
    HEAP32[$71 >> 2] = $68; //@line 14176
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 14177
    HEAP32[$72 >> 2] = $67; //@line 14178
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 14179
    $$expand_i1_val = $40 & 1; //@line 14180
    HEAP8[$73 >> 0] = $$expand_i1_val; //@line 14181
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 14182
    HEAP32[$74 >> 2] = $42; //@line 14183
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 14184
    HEAP32[$75 >> 2] = $44; //@line 14185
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 14186
    HEAP32[$76 >> 2] = $46; //@line 14187
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 14188
    HEAP32[$77 >> 2] = $48; //@line 14189
    sp = STACKTOP; //@line 14190
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 14194
   ___async_unwind = 0; //@line 14195
   HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 14196
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 14197
   HEAP32[$71 >> 2] = $68; //@line 14198
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 14199
   HEAP32[$72 >> 2] = $67; //@line 14200
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 14201
   $$expand_i1_val = $40 & 1; //@line 14202
   HEAP8[$73 >> 0] = $$expand_i1_val; //@line 14203
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 14204
   HEAP32[$74 >> 2] = $42; //@line 14205
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 14206
   HEAP32[$75 >> 2] = $44; //@line 14207
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 14208
   HEAP32[$76 >> 2] = $46; //@line 14209
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 14210
   HEAP32[$77 >> 2] = $48; //@line 14211
   sp = STACKTOP; //@line 14212
   return;
  }
 }
 $79 = HEAP32[133] | 0; //@line 14216
 $80 = HEAP32[126] | 0; //@line 14217
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14218
 FUNCTION_TABLE_vi[$79 & 511]($80); //@line 14219
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 14222
  sp = STACKTOP; //@line 14223
  return;
 }
 ___async_unwind = 0; //@line 14226
 HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 14227
 sp = STACKTOP; //@line 14228
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_33($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17575
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17577
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17579
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17581
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17583
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17587
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17589
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17591
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17593
 $19 = $4 + 12 | 0; //@line 17595
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 17596
 $20 = $12 + 12 | 0; //@line 17597
 $21 = HEAP32[$20 >> 2] | 0; //@line 17598
 if (!$21) {
  $34 = $2 + 12 | 0; //@line 17601
  HEAP32[$34 >> 2] = 0; //@line 17602
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 17603
  $35 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $4, $2, $18) | 0; //@line 17604
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 17607
   $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 17608
   HEAP32[$36 >> 2] = $34; //@line 17609
   $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 17610
   HEAP32[$37 >> 2] = $19; //@line 17611
   $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 17612
   HEAP32[$38 >> 2] = $2; //@line 17613
   $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 17614
   HEAP32[$39 >> 2] = $20; //@line 17615
   $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 17616
   HEAP32[$40 >> 2] = $4; //@line 17617
   $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 17618
   HEAP32[$41 >> 2] = $6; //@line 17619
   $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 17620
   HEAP32[$42 >> 2] = $8; //@line 17621
   sp = STACKTOP; //@line 17622
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 17626
  ___async_unwind = 0; //@line 17627
  HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 17628
  $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 17629
  HEAP32[$36 >> 2] = $34; //@line 17630
  $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 17631
  HEAP32[$37 >> 2] = $19; //@line 17632
  $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 17633
  HEAP32[$38 >> 2] = $2; //@line 17634
  $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 17635
  HEAP32[$39 >> 2] = $20; //@line 17636
  $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 17637
  HEAP32[$40 >> 2] = $4; //@line 17638
  $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 17639
  HEAP32[$41 >> 2] = $6; //@line 17640
  $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 17641
  HEAP32[$42 >> 2] = $8; //@line 17642
  sp = STACKTOP; //@line 17643
  return;
 } else {
  $24 = HEAP32[$21 + 4 >> 2] | 0; //@line 17647
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 17648
  FUNCTION_TABLE_vii[$24 & 7]($2, $6); //@line 17649
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 17652
   $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 17653
   HEAP32[$25 >> 2] = $2; //@line 17654
   $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 17655
   HEAP32[$26 >> 2] = $19; //@line 17656
   $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 17657
   HEAP32[$27 >> 2] = $4; //@line 17658
   $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 17659
   HEAP32[$28 >> 2] = $20; //@line 17660
   $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 17661
   HEAP32[$29 >> 2] = $6; //@line 17662
   $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 17663
   HEAP32[$30 >> 2] = $8; //@line 17664
   $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 17665
   HEAP32[$31 >> 2] = $14; //@line 17666
   $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 17667
   HEAP32[$32 >> 2] = $16; //@line 17668
   $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 17669
   HEAP32[$33 >> 2] = $18; //@line 17670
   sp = STACKTOP; //@line 17671
   return;
  }
  ___async_unwind = 0; //@line 17674
  HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 17675
  $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 17676
  HEAP32[$25 >> 2] = $2; //@line 17677
  $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 17678
  HEAP32[$26 >> 2] = $19; //@line 17679
  $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 17680
  HEAP32[$27 >> 2] = $4; //@line 17681
  $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 17682
  HEAP32[$28 >> 2] = $20; //@line 17683
  $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 17684
  HEAP32[$29 >> 2] = $6; //@line 17685
  $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 17686
  HEAP32[$30 >> 2] = $8; //@line 17687
  $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 17688
  HEAP32[$31 >> 2] = $14; //@line 17689
  $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 17690
  HEAP32[$32 >> 2] = $16; //@line 17691
  $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 17692
  HEAP32[$33 >> 2] = $18; //@line 17693
  sp = STACKTOP; //@line 17694
  return;
 }
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$unpack$i = 0, $$unpack4$i = 0, $15 = 0, $16 = 0, $20 = 0, $3 = 0, $30 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $5 = 0, $50 = 0, $55 = 0, $58 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3505
 STACKTOP = STACKTOP + 32 | 0; //@line 3506
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3506
 $3 = sp + 16 | 0; //@line 3507
 $4 = sp; //@line 3508
 $5 = $2 + 12 | 0; //@line 3509
 $6 = HEAP32[$5 >> 2] | 0; //@line 3510
 do {
  if (!$6) {
   $16 = 0; //@line 3514
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 3517
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 3518
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 3519
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 114; //@line 3522
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3524
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 3526
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 3528
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 3530
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 3532
    sp = STACKTOP; //@line 3533
    STACKTOP = sp; //@line 3534
    return 0; //@line 3534
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3536
    $16 = HEAP32[$5 >> 2] | 0; //@line 3538
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 3543
 HEAP32[$15 >> 2] = $16; //@line 3544
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 3547
 $$unpack4$i = HEAP32[$0 + 4 >> 2] | 0; //@line 3549
 $20 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 3551
 if (!($$unpack4$i & 1)) {
  $36 = $$unpack$i; //@line 3557
 } else {
  $36 = HEAP32[(HEAP32[$20 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 3562
 }
 do {
  if (!$16) {
   $41 = 0; //@line 3567
  } else {
   $30 = HEAP32[$16 + 4 >> 2] | 0; //@line 3570
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 3571
   FUNCTION_TABLE_vii[$30 & 7]($3, $4); //@line 3572
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 115; //@line 3575
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 3577
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 3579
    HEAP32[$AsyncCtx2 + 12 >> 2] = $20; //@line 3581
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 3583
    HEAP32[$AsyncCtx2 + 20 >> 2] = $36; //@line 3585
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3587
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 3589
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 3591
    sp = STACKTOP; //@line 3592
    STACKTOP = sp; //@line 3593
    return 0; //@line 3593
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3595
    $41 = HEAP32[$15 >> 2] | 0; //@line 3597
    break;
   }
  }
 } while (0);
 $40 = $3 + 12 | 0; //@line 3602
 HEAP32[$40 >> 2] = $41; //@line 3603
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3604
 $42 = FUNCTION_TABLE_iiii[$36 & 31]($20, $1, $3) | 0; //@line 3605
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 116; //@line 3608
  HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 3610
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 3612
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 3614
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 3616
  sp = STACKTOP; //@line 3617
  STACKTOP = sp; //@line 3618
  return 0; //@line 3618
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3620
 $47 = HEAP32[$40 >> 2] | 0; //@line 3621
 do {
  if ($47 | 0) {
   $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 3626
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3627
   FUNCTION_TABLE_vi[$50 & 511]($3); //@line 3628
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 117; //@line 3631
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 3633
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 3635
    HEAP32[$AsyncCtx9 + 12 >> 2] = $42; //@line 3637
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 3639
    sp = STACKTOP; //@line 3640
    STACKTOP = sp; //@line 3641
    return 0; //@line 3641
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 3643
    break;
   }
  }
 } while (0);
 $55 = HEAP32[$15 >> 2] | 0; //@line 3648
 if (!$55) {
  STACKTOP = sp; //@line 3651
  return $42 | 0; //@line 3651
 }
 $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 3654
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3655
 FUNCTION_TABLE_vi[$58 & 511]($4); //@line 3656
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 118; //@line 3659
  HEAP32[$AsyncCtx13 + 4 >> 2] = $42; //@line 3661
  sp = STACKTOP; //@line 3662
  STACKTOP = sp; //@line 3663
  return 0; //@line 3663
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 3665
 STACKTOP = sp; //@line 3666
 return $42 | 0; //@line 3666
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_38($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17900
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17904
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17906
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17908
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17910
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17912
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17914
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17916
 $16 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17917
 if ($16 | 0) {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 17921
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 17922
  FUNCTION_TABLE_vi[$19 & 511]($6); //@line 17923
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 98; //@line 17926
   $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 17927
   HEAP32[$20 >> 2] = $4; //@line 17928
   $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 17929
   HEAP32[$21 >> 2] = $8; //@line 17930
   $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 17931
   HEAP32[$22 >> 2] = $10; //@line 17932
   $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 17933
   HEAP32[$23 >> 2] = $12; //@line 17934
   $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 17935
   HEAP32[$24 >> 2] = $AsyncRetVal; //@line 17936
   $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 17937
   HEAP32[$25 >> 2] = $14; //@line 17938
   sp = STACKTOP; //@line 17939
   return;
  }
  ___async_unwind = 0; //@line 17942
  HEAP32[$ReallocAsyncCtx6 >> 2] = 98; //@line 17943
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 17944
  HEAP32[$20 >> 2] = $4; //@line 17945
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 17946
  HEAP32[$21 >> 2] = $8; //@line 17947
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 17948
  HEAP32[$22 >> 2] = $10; //@line 17949
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 17950
  HEAP32[$23 >> 2] = $12; //@line 17951
  $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 17952
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 17953
  $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 17954
  HEAP32[$25 >> 2] = $14; //@line 17955
  sp = STACKTOP; //@line 17956
  return;
 }
 $26 = HEAP32[$4 >> 2] | 0; //@line 17959
 if ($26 | 0) {
  $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 17963
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 17964
  FUNCTION_TABLE_vi[$29 & 511]($10); //@line 17965
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 17968
   $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 17969
   HEAP32[$30 >> 2] = $8; //@line 17970
   $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 17971
   HEAP32[$31 >> 2] = $12; //@line 17972
   $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 17973
   HEAP32[$32 >> 2] = $AsyncRetVal; //@line 17974
   $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 17975
   HEAP32[$33 >> 2] = $14; //@line 17976
   sp = STACKTOP; //@line 17977
   return;
  }
  ___async_unwind = 0; //@line 17980
  HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 17981
  $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 17982
  HEAP32[$30 >> 2] = $8; //@line 17983
  $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 17984
  HEAP32[$31 >> 2] = $12; //@line 17985
  $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 17986
  HEAP32[$32 >> 2] = $AsyncRetVal; //@line 17987
  $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 17988
  HEAP32[$33 >> 2] = $14; //@line 17989
  sp = STACKTOP; //@line 17990
  return;
 }
 $34 = HEAP32[$8 >> 2] | 0; //@line 17993
 if (!$34) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 17997
  return;
 }
 $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 18001
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 18002
 FUNCTION_TABLE_vi[$37 & 511]($12); //@line 18003
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 18006
  $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 18007
  HEAP32[$38 >> 2] = $12; //@line 18008
  $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 18009
  HEAP32[$39 >> 2] = $AsyncRetVal; //@line 18010
  $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 18011
  HEAP32[$40 >> 2] = $14; //@line 18012
  sp = STACKTOP; //@line 18013
  return;
 }
 ___async_unwind = 0; //@line 18016
 HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 18017
 $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 18018
 HEAP32[$38 >> 2] = $12; //@line 18019
 $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 18020
 HEAP32[$39 >> 2] = $AsyncRetVal; //@line 18021
 $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 18022
 HEAP32[$40 >> 2] = $14; //@line 18023
 sp = STACKTOP; //@line 18024
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7513
 STACKTOP = STACKTOP + 32 | 0; //@line 7514
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7514
 $5 = sp + 16 | 0; //@line 7515
 $6 = sp; //@line 7516
 $7 = $2 + 12 | 0; //@line 7517
 $8 = HEAP32[$7 >> 2] | 0; //@line 7518
 do {
  if (!$8) {
   $20 = 0; //@line 7522
  } else {
   $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 7525
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 7526
   FUNCTION_TABLE_vii[$11 & 7]($5, $2); //@line 7527
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 165; //@line 7530
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 7532
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 7534
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 7536
    HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 7538
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 7540
    HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 7542
    HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 7544
    sp = STACKTOP; //@line 7545
    STACKTOP = sp; //@line 7546
    return 0; //@line 7546
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7548
    $20 = HEAP32[$7 >> 2] | 0; //@line 7550
    break;
   }
  }
 } while (0);
 $19 = $5 + 12 | 0; //@line 7555
 HEAP32[$19 >> 2] = $20; //@line 7556
 $21 = $3 + 12 | 0; //@line 7557
 $22 = HEAP32[$21 >> 2] | 0; //@line 7558
 do {
  if (!$22) {
   $34 = 0; //@line 7562
  } else {
   $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 7565
   $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7566
   FUNCTION_TABLE_vii[$25 & 7]($6, $3); //@line 7567
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 166; //@line 7570
    HEAP32[$AsyncCtx2 + 4 >> 2] = $21; //@line 7572
    HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 7574
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 7576
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 7578
    HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 7580
    HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 7582
    HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 7584
    sp = STACKTOP; //@line 7585
    STACKTOP = sp; //@line 7586
    return 0; //@line 7586
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7588
    $34 = HEAP32[$21 >> 2] | 0; //@line 7590
    break;
   }
  }
 } while (0);
 $33 = $6 + 12 | 0; //@line 7595
 HEAP32[$33 >> 2] = $34; //@line 7596
 $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7597
 $35 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $5, 0, $6, $4) | 0; //@line 7598
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 167; //@line 7601
  HEAP32[$AsyncCtx13 + 4 >> 2] = $33; //@line 7603
  HEAP32[$AsyncCtx13 + 8 >> 2] = $19; //@line 7605
  HEAP32[$AsyncCtx13 + 12 >> 2] = $6; //@line 7607
  HEAP32[$AsyncCtx13 + 16 >> 2] = $5; //@line 7609
  sp = STACKTOP; //@line 7610
  STACKTOP = sp; //@line 7611
  return 0; //@line 7611
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7613
 $40 = HEAP32[$33 >> 2] | 0; //@line 7614
 do {
  if ($40 | 0) {
   $43 = HEAP32[$40 + 8 >> 2] | 0; //@line 7619
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7620
   FUNCTION_TABLE_vi[$43 & 511]($6); //@line 7621
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 168; //@line 7624
    HEAP32[$AsyncCtx6 + 4 >> 2] = $19; //@line 7626
    HEAP32[$AsyncCtx6 + 8 >> 2] = $35; //@line 7628
    HEAP32[$AsyncCtx6 + 12 >> 2] = $5; //@line 7630
    sp = STACKTOP; //@line 7631
    STACKTOP = sp; //@line 7632
    return 0; //@line 7632
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7634
    break;
   }
  }
 } while (0);
 $47 = HEAP32[$19 >> 2] | 0; //@line 7639
 if (!$47) {
  STACKTOP = sp; //@line 7642
  return $35 | 0; //@line 7642
 }
 $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 7645
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7646
 FUNCTION_TABLE_vi[$50 & 511]($5); //@line 7647
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 169; //@line 7650
  HEAP32[$AsyncCtx10 + 4 >> 2] = $35; //@line 7652
  sp = STACKTOP; //@line 7653
  STACKTOP = sp; //@line 7654
  return 0; //@line 7654
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7656
 STACKTOP = sp; //@line 7657
 return $35 | 0; //@line 7657
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_58($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 19618
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19620
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19622
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19624
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19626
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19628
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19630
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19632
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19634
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19636
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19638
 $21 = $2 + 44 | 0; //@line 19639
 $22 = HEAP32[$21 >> 2] | 0; //@line 19640
 if ($22 | 0) {
  $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 19644
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 19645
  FUNCTION_TABLE_vii[$25 & 7]($18, $20); //@line 19646
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 19649
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 19650
   HEAP32[$26 >> 2] = $21; //@line 19651
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 19652
   HEAP32[$27 >> 2] = $14; //@line 19653
   $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 19654
   HEAP32[$28 >> 2] = $16; //@line 19655
   $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 19656
   HEAP32[$29 >> 2] = $10; //@line 19657
   $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 19658
   HEAP32[$30 >> 2] = $8; //@line 19659
   $31 = $ReallocAsyncCtx3 + 24 | 0; //@line 19660
   HEAP32[$31 >> 2] = $12; //@line 19661
   $32 = $ReallocAsyncCtx3 + 28 | 0; //@line 19662
   HEAP32[$32 >> 2] = $4; //@line 19663
   $33 = $ReallocAsyncCtx3 + 32 | 0; //@line 19664
   HEAP32[$33 >> 2] = $6; //@line 19665
   $34 = $ReallocAsyncCtx3 + 36 | 0; //@line 19666
   HEAP32[$34 >> 2] = $2; //@line 19667
   sp = STACKTOP; //@line 19668
   return;
  }
  ___async_unwind = 0; //@line 19671
  HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 19672
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 19673
  HEAP32[$26 >> 2] = $21; //@line 19674
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 19675
  HEAP32[$27 >> 2] = $14; //@line 19676
  $28 = $ReallocAsyncCtx3 + 12 | 0; //@line 19677
  HEAP32[$28 >> 2] = $16; //@line 19678
  $29 = $ReallocAsyncCtx3 + 16 | 0; //@line 19679
  HEAP32[$29 >> 2] = $10; //@line 19680
  $30 = $ReallocAsyncCtx3 + 20 | 0; //@line 19681
  HEAP32[$30 >> 2] = $8; //@line 19682
  $31 = $ReallocAsyncCtx3 + 24 | 0; //@line 19683
  HEAP32[$31 >> 2] = $12; //@line 19684
  $32 = $ReallocAsyncCtx3 + 28 | 0; //@line 19685
  HEAP32[$32 >> 2] = $4; //@line 19686
  $33 = $ReallocAsyncCtx3 + 32 | 0; //@line 19687
  HEAP32[$33 >> 2] = $6; //@line 19688
  $34 = $ReallocAsyncCtx3 + 36 | 0; //@line 19689
  HEAP32[$34 >> 2] = $2; //@line 19690
  sp = STACKTOP; //@line 19691
  return;
 }
 HEAP32[$14 >> 2] = 0; //@line 19694
 $$pre = HEAP32[$16 >> 2] | 0; //@line 19695
 HEAP32[$$pre + 16 >> 2] = HEAP32[$10 >> 2]; //@line 19699
 HEAP32[$8 + 8 >> 2] = 0; //@line 19701
 HEAP32[$8 >> 2] = 219; //@line 19702
 HEAP32[$8 + 4 >> 2] = $$pre; //@line 19704
 $39 = $8 + 12 | 0; //@line 19705
 HEAP32[$39 >> 2] = 764; //@line 19706
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 19707
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $8); //@line 19708
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 19711
  $40 = $ReallocAsyncCtx10 + 4 | 0; //@line 19712
  HEAP32[$40 >> 2] = $39; //@line 19713
  $41 = $ReallocAsyncCtx10 + 8 | 0; //@line 19714
  HEAP32[$41 >> 2] = $4; //@line 19715
  $42 = $ReallocAsyncCtx10 + 12 | 0; //@line 19716
  HEAP32[$42 >> 2] = $6; //@line 19717
  $43 = $ReallocAsyncCtx10 + 16 | 0; //@line 19718
  HEAP32[$43 >> 2] = $8; //@line 19719
  $44 = $ReallocAsyncCtx10 + 20 | 0; //@line 19720
  HEAP32[$44 >> 2] = $2; //@line 19721
  sp = STACKTOP; //@line 19722
  return;
 }
 ___async_unwind = 0; //@line 19725
 HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 19726
 $40 = $ReallocAsyncCtx10 + 4 | 0; //@line 19727
 HEAP32[$40 >> 2] = $39; //@line 19728
 $41 = $ReallocAsyncCtx10 + 8 | 0; //@line 19729
 HEAP32[$41 >> 2] = $4; //@line 19730
 $42 = $ReallocAsyncCtx10 + 12 | 0; //@line 19731
 HEAP32[$42 >> 2] = $6; //@line 19732
 $43 = $ReallocAsyncCtx10 + 16 | 0; //@line 19733
 HEAP32[$43 >> 2] = $8; //@line 19734
 $44 = $ReallocAsyncCtx10 + 20 | 0; //@line 19735
 HEAP32[$44 >> 2] = $2; //@line 19736
 sp = STACKTOP; //@line 19737
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$04 = 0, $11 = 0, $15 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9538
 STACKTOP = STACKTOP + 32 | 0; //@line 9539
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9539
 $3 = sp + 16 | 0; //@line 9540
 $4 = sp; //@line 9541
 $7 = $2 + 12 | 0; //@line 9544
 $8 = HEAP32[$7 >> 2] | 0; //@line 9545
 $9 = ($8 | 0) == 0; //@line 9546
 if (!(HEAP32[1956] | 0)) {
  do {
   if ($9) {
    $30 = 0; //@line 9550
   } else {
    $24 = HEAP32[$8 + 4 >> 2] | 0; //@line 9553
    $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9554
    FUNCTION_TABLE_vii[$24 & 7]($4, $2); //@line 9555
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 208; //@line 9558
     HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 9560
     HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 9562
     HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 9564
     HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 9566
     sp = STACKTOP; //@line 9567
     STACKTOP = sp; //@line 9568
     return 0; //@line 9568
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9570
     $30 = HEAP32[$7 >> 2] | 0; //@line 9572
     break;
    }
   }
  } while (0);
  $29 = $4 + 12 | 0; //@line 9577
  HEAP32[$29 >> 2] = $30; //@line 9578
  $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9579
  $31 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $4) | 0; //@line 9580
  if (___async) {
   HEAP32[$AsyncCtx14 >> 2] = 209; //@line 9583
   HEAP32[$AsyncCtx14 + 4 >> 2] = $29; //@line 9585
   HEAP32[$AsyncCtx14 + 8 >> 2] = $4; //@line 9587
   sp = STACKTOP; //@line 9588
   STACKTOP = sp; //@line 9589
   return 0; //@line 9589
  }
  _emscripten_free_async_context($AsyncCtx14 | 0); //@line 9591
  $34 = HEAP32[$29 >> 2] | 0; //@line 9592
  if (!$34) {
   $$04 = $31; //@line 9595
   STACKTOP = sp; //@line 9596
   return $$04 | 0; //@line 9596
  }
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 9599
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9600
  FUNCTION_TABLE_vi[$37 & 511]($4); //@line 9601
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 210; //@line 9604
   HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 9606
   sp = STACKTOP; //@line 9607
   STACKTOP = sp; //@line 9608
   return 0; //@line 9608
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9610
  $$04 = $31; //@line 9611
  STACKTOP = sp; //@line 9612
  return $$04 | 0; //@line 9612
 } else {
  do {
   if ($9) {
    $16 = 0; //@line 9616
   } else {
    $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 9619
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9620
    FUNCTION_TABLE_vii[$11 & 7]($3, $2); //@line 9621
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 205; //@line 9624
     HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 9626
     HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 9628
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 9630
     sp = STACKTOP; //@line 9631
     STACKTOP = sp; //@line 9632
     return 0; //@line 9632
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9634
     $16 = HEAP32[$7 >> 2] | 0; //@line 9636
     break;
    }
   }
  } while (0);
  $15 = $3 + 12 | 0; //@line 9641
  HEAP32[$15 >> 2] = $16; //@line 9642
  $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9643
  __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(7812, $1, $3) | 0; //@line 9644
  if (___async) {
   HEAP32[$AsyncCtx17 >> 2] = 206; //@line 9647
   HEAP32[$AsyncCtx17 + 4 >> 2] = $15; //@line 9649
   HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 9651
   sp = STACKTOP; //@line 9652
   STACKTOP = sp; //@line 9653
   return 0; //@line 9653
  }
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 9655
  $19 = HEAP32[$15 >> 2] | 0; //@line 9656
  if (!$19) {
   $$04 = 0; //@line 9659
   STACKTOP = sp; //@line 9660
   return $$04 | 0; //@line 9660
  }
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 9663
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9664
  FUNCTION_TABLE_vi[$22 & 511]($3); //@line 9665
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 207; //@line 9668
   sp = STACKTOP; //@line 9669
   STACKTOP = sp; //@line 9670
   return 0; //@line 9670
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9672
  $$04 = 0; //@line 9673
  STACKTOP = sp; //@line 9674
  return $$04 | 0; //@line 9674
 }
 return 0; //@line 9676
}
function __ZN9TCPSocket7connectEPKct__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$expand_i1_val = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8391
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8393
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 8395
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8397
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8399
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8401
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -3009; //@line 8406
  $42 = ___async_retval; //@line 8407
  HEAP32[$42 >> 2] = $$0; //@line 8408
  return;
 }
 __ZN13SocketAddress8set_portEt($2, $4); //@line 8411
 $13 = $6 + 57 | 0; //@line 8412
 if (HEAP8[$13 >> 0] | 0) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 8416
  _mbed_assert_internal(3736, 3756, 52); //@line 8417
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 8420
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 8421
   HEAP32[$16 >> 2] = $13; //@line 8422
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 8423
   HEAP32[$17 >> 2] = $6; //@line 8424
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 8425
   HEAP32[$18 >> 2] = $10; //@line 8426
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 8427
   HEAP32[$19 >> 2] = $2; //@line 8428
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 8429
   HEAP32[$20 >> 2] = $8; //@line 8430
   sp = STACKTOP; //@line 8431
   return;
  }
  ___async_unwind = 0; //@line 8434
  HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 8435
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 8436
  HEAP32[$16 >> 2] = $13; //@line 8437
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 8438
  HEAP32[$17 >> 2] = $6; //@line 8439
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 8440
  HEAP32[$18 >> 2] = $10; //@line 8441
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 8442
  HEAP32[$19 >> 2] = $2; //@line 8443
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 8444
  HEAP32[$20 >> 2] = $8; //@line 8445
  sp = STACKTOP; //@line 8446
  return;
 }
 HEAP8[$13 >> 0] = 1; //@line 8449
 $21 = $6 + 8 | 0; //@line 8450
 $22 = $6 + 52 | 0; //@line 8451
 $23 = $6 + 12 | 0; //@line 8452
 $24 = HEAP32[$21 >> 2] | 0; //@line 8453
 if (!$24) {
  HEAP8[$13 >> 0] = 0; //@line 8456
  $$0 = 0 & -3005 == -3015 ? 0 : -3005; //@line 8460
  $42 = ___async_retval; //@line 8461
  HEAP32[$42 >> 2] = $$0; //@line 8462
  return;
 }
 HEAP32[$22 >> 2] = 0; //@line 8465
 $26 = HEAP32[$10 >> 2] | 0; //@line 8466
 $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 8469
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 8470
 $30 = FUNCTION_TABLE_iiii[$29 & 31]($26, $24, $2) | 0; //@line 8471
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 8474
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 8475
  HEAP32[$31 >> 2] = $23; //@line 8476
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 8477
  HEAP32[$32 >> 2] = $21; //@line 8478
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 8479
  HEAP32[$33 >> 2] = $13; //@line 8480
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 8481
  $$expand_i1_val = 0; //@line 8482
  HEAP8[$34 >> 0] = $$expand_i1_val; //@line 8483
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 8484
  HEAP32[$35 >> 2] = $8; //@line 8485
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 8486
  HEAP32[$36 >> 2] = $22; //@line 8487
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 8488
  HEAP32[$37 >> 2] = $10; //@line 8489
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 8490
  HEAP32[$38 >> 2] = $2; //@line 8491
  sp = STACKTOP; //@line 8492
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 8496
 ___async_unwind = 0; //@line 8497
 HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 8498
 $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 8499
 HEAP32[$31 >> 2] = $23; //@line 8500
 $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 8501
 HEAP32[$32 >> 2] = $21; //@line 8502
 $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 8503
 HEAP32[$33 >> 2] = $13; //@line 8504
 $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 8505
 $$expand_i1_val = 0; //@line 8506
 HEAP8[$34 >> 0] = $$expand_i1_val; //@line 8507
 $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 8508
 HEAP32[$35 >> 2] = $8; //@line 8509
 $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 8510
 HEAP32[$36 >> 2] = $22; //@line 8511
 $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 8512
 HEAP32[$37 >> 2] = $10; //@line 8513
 $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 8514
 HEAP32[$38 >> 2] = $2; //@line 8515
 sp = STACKTOP; //@line 8516
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_135($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $22 = 0, $23 = 0, $26 = 0, $27 = 0, $3 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $9 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9384
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9386
 $3 = HEAP32[$2 >> 2] | 0; //@line 9387
 $5 = HEAP32[$3 + 56 >> 2] | 0; //@line 9389
 if ($5 | 0) {
  $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 4 >> 2] | 0; //@line 9394
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 9395
  FUNCTION_TABLE_vi[$9 & 511]($5); //@line 9396
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 255; //@line 9399
   $10 = $ReallocAsyncCtx + 4 | 0; //@line 9400
   HEAP32[$10 >> 2] = $2; //@line 9401
   sp = STACKTOP; //@line 9402
   return;
  }
  ___async_unwind = 0; //@line 9405
  HEAP32[$ReallocAsyncCtx >> 2] = 255; //@line 9406
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 9407
  HEAP32[$10 >> 2] = $2; //@line 9408
  sp = STACKTOP; //@line 9409
  return;
 }
 $12 = HEAP32[$3 + 60 >> 2] | 0; //@line 9413
 do {
  if (!$12) {
   $22 = $3; //@line 9417
  } else {
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 9420
   if (!$15) {
    __ZdlPv($12); //@line 9423
    $22 = HEAP32[$2 >> 2] | 0; //@line 9425
    break;
   }
   $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 9429
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 9430
   FUNCTION_TABLE_vi[$18 & 511]($12); //@line 9431
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 256; //@line 9434
    $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 9435
    HEAP32[$19 >> 2] = $12; //@line 9436
    $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 9437
    HEAP32[$20 >> 2] = $2; //@line 9438
    sp = STACKTOP; //@line 9439
    return;
   }
   ___async_unwind = 0; //@line 9442
   HEAP32[$ReallocAsyncCtx2 >> 2] = 256; //@line 9443
   $19 = $ReallocAsyncCtx2 + 4 | 0; //@line 9444
   HEAP32[$19 >> 2] = $12; //@line 9445
   $20 = $ReallocAsyncCtx2 + 8 | 0; //@line 9446
   HEAP32[$20 >> 2] = $2; //@line 9447
   sp = STACKTOP; //@line 9448
   return;
  }
 } while (0);
 $23 = HEAP32[$22 + 64 >> 2] | 0; //@line 9453
 if (!$23) {
  $26 = $22; //@line 9456
 } else {
  __ZdaPv($23); //@line 9458
  $26 = HEAP32[$2 >> 2] | 0; //@line 9460
 }
 $27 = HEAP32[$26 + 12 >> 2] | 0; //@line 9463
 if (!$27) {
  $30 = $26; //@line 9466
 } else {
  __ZdlPv($27); //@line 9468
  $30 = HEAP32[$2 >> 2] | 0; //@line 9470
 }
 do {
  if ($30 | 0) {
   $32 = HEAP32[$30 + 44 >> 2] | 0; //@line 9476
   if ($32 | 0) {
    $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 9481
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 9482
    FUNCTION_TABLE_vi[$36 & 511]($30 + 32 | 0); //@line 9483
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 257; //@line 9486
     $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 9487
     HEAP32[$37 >> 2] = $30; //@line 9488
     $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 9489
     HEAP32[$38 >> 2] = $2; //@line 9490
     sp = STACKTOP; //@line 9491
     return;
    }
    ___async_unwind = 0; //@line 9494
    HEAP32[$ReallocAsyncCtx3 >> 2] = 257; //@line 9495
    $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 9496
    HEAP32[$37 >> 2] = $30; //@line 9497
    $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 9498
    HEAP32[$38 >> 2] = $2; //@line 9499
    sp = STACKTOP; //@line 9500
    return;
   }
   $40 = HEAP32[$30 + 28 >> 2] | 0; //@line 9504
   if (!$40) {
    __ZdlPv($30); //@line 9507
    break;
   }
   $44 = HEAP32[$40 + 8 >> 2] | 0; //@line 9512
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 9513
   FUNCTION_TABLE_vi[$44 & 511]($30 + 16 | 0); //@line 9514
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 9517
    $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 9518
    HEAP32[$45 >> 2] = $30; //@line 9519
    $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 9520
    HEAP32[$46 >> 2] = $2; //@line 9521
    sp = STACKTOP; //@line 9522
    return;
   }
   ___async_unwind = 0; //@line 9525
   HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 9526
   $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 9527
   HEAP32[$45 >> 2] = $30; //@line 9528
   $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 9529
   HEAP32[$46 >> 2] = $2; //@line 9530
   sp = STACKTOP; //@line 9531
   return;
  }
 } while (0);
 HEAP32[$2 >> 2] = 0; //@line 9535
 HEAP32[___async_retval >> 2] = 0; //@line 9537
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_150($0) {
 $0 = $0 | 0;
 var $$010 = 0, $$expand_i1_val = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 10353
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10355
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10357
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10359
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10361
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10363
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10365
 if (!$AsyncRetVal) {
  $28 = 0 == 0; //@line 10368
  $29 = HEAP32[$2 >> 2] | 0; //@line 10369
  if (!$29) {
   if ($28) {
    $$010 = -3007; //@line 10373
    $34 = ___async_retval; //@line 10374
    HEAP32[$34 >> 2] = $$010; //@line 10375
    return;
   }
   $$010 = 0; //@line 10378
   $34 = ___async_retval; //@line 10379
   HEAP32[$34 >> 2] = $$010; //@line 10380
   return;
  } else {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 10384
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 10385
   FUNCTION_TABLE_vi[$32 & 511]($8); //@line 10386
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 10389
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 10390
    $$expand_i1_val = $28 & 1; //@line 10391
    HEAP8[$33 >> 0] = $$expand_i1_val; //@line 10392
    sp = STACKTOP; //@line 10393
    return;
   }
   ___async_unwind = 0; //@line 10396
   HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 10397
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 10398
   $$expand_i1_val = $28 & 1; //@line 10399
   HEAP8[$33 >> 0] = $$expand_i1_val; //@line 10400
   sp = STACKTOP; //@line 10401
   return;
  }
 } else {
  $13 = HEAP32[$2 >> 2] | 0; //@line 10405
  if (!$13) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 10409
   _equeue_event_delay($AsyncRetVal, $4); //@line 10410
   _equeue_event_dtor($AsyncRetVal, 105); //@line 10411
   $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 10412
   $24 = _equeue_post($6, 106, $AsyncRetVal) | 0; //@line 10413
   if (___async) {
    HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 10416
    $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 10417
    HEAP32[$25 >> 2] = $2; //@line 10418
    $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 10419
    HEAP32[$26 >> 2] = $8; //@line 10420
    sp = STACKTOP; //@line 10421
    return;
   }
   HEAP32[___async_retval >> 2] = $24; //@line 10425
   ___async_unwind = 0; //@line 10426
   HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 10427
   $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 10428
   HEAP32[$25 >> 2] = $2; //@line 10429
   $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 10430
   HEAP32[$26 >> 2] = $8; //@line 10431
   sp = STACKTOP; //@line 10432
   return;
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 10436
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 10437
   FUNCTION_TABLE_vii[$16 & 7]($AsyncRetVal, $8); //@line 10438
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 10441
    $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 10442
    HEAP32[$17 >> 2] = $10; //@line 10443
    $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 10444
    HEAP32[$18 >> 2] = $AsyncRetVal; //@line 10445
    $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 10446
    HEAP32[$19 >> 2] = $4; //@line 10447
    $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 10448
    HEAP32[$20 >> 2] = $6; //@line 10449
    $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 10450
    HEAP32[$21 >> 2] = $2; //@line 10451
    $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 10452
    HEAP32[$22 >> 2] = $8; //@line 10453
    sp = STACKTOP; //@line 10454
    return;
   }
   ___async_unwind = 0; //@line 10457
   HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 10458
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 10459
   HEAP32[$17 >> 2] = $10; //@line 10460
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 10461
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 10462
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 10463
   HEAP32[$19 >> 2] = $4; //@line 10464
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 10465
   HEAP32[$20 >> 2] = $6; //@line 10466
   $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 10467
   HEAP32[$21 >> 2] = $2; //@line 10468
   $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 10469
   HEAP32[$22 >> 2] = $8; //@line 10470
   sp = STACKTOP; //@line 10471
   return;
  }
 }
}
function __ZN9TCPSocket7connectEPKct($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$off0$i = 0, $$08$i = 0, $$byval_copy = 0, $16 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5431
 STACKTOP = STACKTOP + 112 | 0; //@line 5432
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 5432
 $$byval_copy = sp + 88 | 0; //@line 5433
 $3 = sp + 24 | 0; //@line 5434
 $4 = sp; //@line 5435
 HEAP32[$4 >> 2] = 0; //@line 5436
 HEAP32[$4 + 4 >> 2] = 0; //@line 5436
 HEAP32[$4 + 8 >> 2] = 0; //@line 5436
 HEAP32[$4 + 12 >> 2] = 0; //@line 5436
 HEAP32[$4 + 16 >> 2] = 0; //@line 5436
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 5437
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 5437
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 5437
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 5437
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 5437
 __ZN13SocketAddressC2E10nsapi_addrt($3, $$byval_copy, 0); //@line 5438
 $5 = $0 + 4 | 0; //@line 5439
 $6 = HEAP32[$5 >> 2] | 0; //@line 5440
 $8 = HEAP32[HEAP32[$6 >> 2] >> 2] | 0; //@line 5442
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 5443
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($6, $1, $3, 0) | 0; //@line 5444
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 141; //@line 5447
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 5449
  HEAP16[$AsyncCtx + 8 >> 1] = $2; //@line 5451
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5453
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 5455
  HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 5457
  sp = STACKTOP; //@line 5458
  STACKTOP = sp; //@line 5459
  return 0; //@line 5459
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5461
 if ($9 | 0) {
  $$0 = -3009; //@line 5464
  STACKTOP = sp; //@line 5465
  return $$0 | 0; //@line 5465
 }
 __ZN13SocketAddress8set_portEt($3, $2); //@line 5467
 $16 = $0 + 57 | 0; //@line 5468
 do {
  if (HEAP8[$16 >> 0] | 0) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5473
   _mbed_assert_internal(3736, 3756, 52); //@line 5474
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 142; //@line 5477
    HEAP32[$AsyncCtx7 + 4 >> 2] = $16; //@line 5479
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 5481
    HEAP32[$AsyncCtx7 + 12 >> 2] = $5; //@line 5483
    HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 5485
    HEAP32[$AsyncCtx7 + 20 >> 2] = $3; //@line 5487
    sp = STACKTOP; //@line 5488
    STACKTOP = sp; //@line 5489
    return 0; //@line 5489
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5491
    break;
   }
  }
 } while (0);
 HEAP8[$16 >> 0] = 1; //@line 5496
 $24 = $0 + 8 | 0; //@line 5497
 $25 = $0 + 52 | 0; //@line 5498
 $26 = $0 + 12 | 0; //@line 5499
 $$0$off0$i = 0; //@line 5500
 while (1) {
  $27 = HEAP32[$24 >> 2] | 0; //@line 5502
  if (!$27) {
   $$08$i = -3005; //@line 5505
   break;
  }
  HEAP32[$25 >> 2] = 0; //@line 5508
  $29 = HEAP32[$5 >> 2] | 0; //@line 5509
  $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 60 >> 2] | 0; //@line 5512
  $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5513
  $33 = FUNCTION_TABLE_iiii[$32 & 31]($29, $27, $3) | 0; //@line 5514
  if (___async) {
   label = 11; //@line 5517
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5520
  if ((HEAP32[$26 >> 2] | 0) != 0 & ($33 | 1 | 0) == -3013) {
   $$0$off0$i = 1; //@line 5527
  } else {
   $$08$i = $33; //@line 5529
   break;
  }
 }
 if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 143; //@line 5534
  HEAP32[$AsyncCtx3 + 4 >> 2] = $26; //@line 5536
  HEAP32[$AsyncCtx3 + 8 >> 2] = $24; //@line 5538
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 5540
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$0$off0$i & 1; //@line 5543
  HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 5545
  HEAP32[$AsyncCtx3 + 24 >> 2] = $25; //@line 5547
  HEAP32[$AsyncCtx3 + 28 >> 2] = $5; //@line 5549
  HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 5551
  sp = STACKTOP; //@line 5552
  STACKTOP = sp; //@line 5553
  return 0; //@line 5553
 }
 HEAP8[$16 >> 0] = 0; //@line 5555
 $$0 = $$0$off0$i & ($$08$i | 0) == -3015 ? 0 : $$08$i; //@line 5559
 STACKTOP = sp; //@line 5560
 return $$0 | 0; //@line 5560
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $$unpack$i = 0, $$unpack4$i = 0, $10 = 0, $11 = 0, $15 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11731
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11733
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11735
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11737
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11741
 $$pre$i = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 11742
 $11 = $6 + 12 | 0; //@line 11743
 HEAP32[$11 >> 2] = $$pre$i; //@line 11744
 $$unpack$i = HEAP32[$10 >> 2] | 0; //@line 11747
 $$unpack4$i = HEAP32[$10 + 4 >> 2] | 0; //@line 11749
 $15 = (HEAP32[$10 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 11751
 $18 = $$pre$i; //@line 11754
 if (!($$unpack4$i & 1)) {
  $31 = $$unpack$i; //@line 11757
 } else {
  $31 = HEAP32[(HEAP32[$15 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 11762
 }
 if (!$$pre$i) {
  $35 = $2 + 12 | 0; //@line 11766
  HEAP32[$35 >> 2] = 0; //@line 11767
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 11768
  $36 = FUNCTION_TABLE_iiii[$31 & 31]($15, $4, $2) | 0; //@line 11769
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 11772
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 11773
   HEAP32[$37 >> 2] = $35; //@line 11774
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 11775
   HEAP32[$38 >> 2] = $2; //@line 11776
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 11777
   HEAP32[$39 >> 2] = $11; //@line 11778
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 11779
   HEAP32[$40 >> 2] = $6; //@line 11780
   sp = STACKTOP; //@line 11781
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 11785
  ___async_unwind = 0; //@line 11786
  HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 11787
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 11788
  HEAP32[$37 >> 2] = $35; //@line 11789
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 11790
  HEAP32[$38 >> 2] = $2; //@line 11791
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 11792
  HEAP32[$39 >> 2] = $11; //@line 11793
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 11794
  HEAP32[$40 >> 2] = $6; //@line 11795
  sp = STACKTOP; //@line 11796
  return;
 } else {
  $25 = HEAP32[$18 + 4 >> 2] | 0; //@line 11800
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 11801
  FUNCTION_TABLE_vii[$25 & 7]($2, $6); //@line 11802
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 11805
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 11806
   HEAP32[$26 >> 2] = $11; //@line 11807
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 11808
   HEAP32[$27 >> 2] = $2; //@line 11809
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 11810
   HEAP32[$28 >> 2] = $15; //@line 11811
   $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 11812
   HEAP32[$29 >> 2] = $4; //@line 11813
   $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 11814
   HEAP32[$30 >> 2] = $31; //@line 11815
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 11816
   HEAP32[$32 >> 2] = $2; //@line 11817
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 11818
   HEAP32[$33 >> 2] = $11; //@line 11819
   $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 11820
   HEAP32[$34 >> 2] = $6; //@line 11821
   sp = STACKTOP; //@line 11822
   return;
  }
  ___async_unwind = 0; //@line 11825
  HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 11826
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 11827
  HEAP32[$26 >> 2] = $11; //@line 11828
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 11829
  HEAP32[$27 >> 2] = $2; //@line 11830
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 11831
  HEAP32[$28 >> 2] = $15; //@line 11832
  $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 11833
  HEAP32[$29 >> 2] = $4; //@line 11834
  $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 11835
  HEAP32[$30 >> 2] = $31; //@line 11836
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 11837
  HEAP32[$32 >> 2] = $2; //@line 11838
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 11839
  HEAP32[$33 >> 2] = $11; //@line 11840
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 11841
  HEAP32[$34 >> 2] = $6; //@line 11842
  sp = STACKTOP; //@line 11843
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_158($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11162
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11164
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11166
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11168
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 11171
 $10 = HEAP8[$0 + 17 >> 0] & 1; //@line 11174
 $12 = HEAP32[$0 + 20 >> 2] | 0; //@line 11176
 $14 = HEAP32[$0 + 24 >> 2] | 0; //@line 11178
 $16 = HEAP32[$0 + 28 >> 2] | 0; //@line 11180
 $18 = HEAP32[$0 + 32 >> 2] | 0; //@line 11182
 $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 11184
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 11186
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 11188
 $26 = HEAP8[$0 + 48 >> 0] & 1; //@line 11191
 $28 = HEAP32[$0 + 52 >> 2] | 0; //@line 11193
 L2 : do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   do {
    if (!(HEAP8[$24 >> 0] | 0)) {
     $$182$off0 = $8; //@line 11202
     $$186$off0 = $10; //@line 11202
    } else {
     if (!(HEAP8[$22 >> 0] | 0)) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $10; //@line 11211
       $$283$off0 = 1; //@line 11211
       label = 13; //@line 11212
       break L2;
      } else {
       $$182$off0 = 1; //@line 11215
       $$186$off0 = $10; //@line 11215
       break;
      }
     }
     if ((HEAP32[$4 >> 2] | 0) == 1) {
      label = 18; //@line 11222
      break L2;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      label = 18; //@line 11229
      break L2;
     } else {
      $$182$off0 = 1; //@line 11232
      $$186$off0 = 1; //@line 11232
     }
    }
   } while (0);
   $30 = $20 + 8 | 0; //@line 11236
   if ($30 >>> 0 < $28 >>> 0) {
    HEAP8[$22 >> 0] = 0; //@line 11239
    HEAP8[$24 >> 0] = 0; //@line 11240
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 11241
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $16, $12, $12, 1, $26); //@line 11242
    if (!___async) {
     ___async_unwind = 0; //@line 11245
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 343; //@line 11247
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 11249
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 11251
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 11253
    HEAP8[$ReallocAsyncCtx5 + 16 >> 0] = $$182$off0 & 1; //@line 11256
    HEAP8[$ReallocAsyncCtx5 + 17 >> 0] = $$186$off0 & 1; //@line 11259
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $12; //@line 11261
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 11263
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 11265
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 11267
    HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $30; //@line 11269
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 11271
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 11273
    HEAP8[$ReallocAsyncCtx5 + 48 >> 0] = $26 & 1; //@line 11276
    HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $28; //@line 11278
    sp = STACKTOP; //@line 11279
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 11282
    $$283$off0 = $$182$off0; //@line 11282
    label = 13; //@line 11283
   }
  } else {
   $$085$off0$reg2mem$0 = $10; //@line 11286
   $$283$off0 = $8; //@line 11286
   label = 13; //@line 11287
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$14 >> 2] = $12; //@line 11293
    $59 = $16 + 40 | 0; //@line 11294
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 11297
    if ((HEAP32[$16 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$4 >> 2] | 0) == 2) {
      HEAP8[$6 >> 0] = 1; //@line 11305
      if ($$283$off0) {
       label = 18; //@line 11307
       break;
      } else {
       $67 = 4; //@line 11310
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 11317
   } else {
    $67 = 4; //@line 11319
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 11324
 }
 HEAP32[$2 >> 2] = $67; //@line 11326
 return;
}
function __ZNK13SocketAddress14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $23 = 0, $31 = 0, $39 = 0, $47 = 0, $55 = 0, $63 = 0, $71 = 0, $79 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer32 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 4912
 STACKTOP = STACKTOP + 80 | 0; //@line 4913
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(80); //@line 4913
 $vararg_buffer32 = sp + 72 | 0; //@line 4914
 $vararg_buffer28 = sp + 64 | 0; //@line 4915
 $vararg_buffer24 = sp + 56 | 0; //@line 4916
 $vararg_buffer20 = sp + 48 | 0; //@line 4917
 $vararg_buffer16 = sp + 40 | 0; //@line 4918
 $vararg_buffer12 = sp + 32 | 0; //@line 4919
 $vararg_buffer8 = sp + 24 | 0; //@line 4920
 $vararg_buffer4 = sp + 16 | 0; //@line 4921
 $vararg_buffer = sp; //@line 4922
 $2 = HEAP32[$0 + 40 >> 2] | 0; //@line 4924
 if (!$2) {
  $$0 = 0; //@line 4927
  STACKTOP = sp; //@line 4928
  return $$0 | 0; //@line 4928
 }
 if (HEAP8[$0 >> 0] | 0) {
  $$0 = $0; //@line 4933
  STACKTOP = sp; //@line 4934
  return $$0 | 0; //@line 4934
 }
 switch ($2 | 0) {
 case 1:
  {
   $11 = HEAPU8[$0 + 45 >> 0] | 0; //@line 4943
   $14 = HEAPU8[$0 + 46 >> 0] | 0; //@line 4946
   $17 = HEAPU8[$0 + 47 >> 0] | 0; //@line 4949
   HEAP32[$vararg_buffer >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 4950
   HEAP32[$vararg_buffer + 4 >> 2] = $11; //@line 4952
   HEAP32[$vararg_buffer + 8 >> 2] = $14; //@line 4954
   HEAP32[$vararg_buffer + 12 >> 2] = $17; //@line 4956
   _sprintf($0, 3704, $vararg_buffer) | 0; //@line 4957
   $$0 = $0; //@line 4958
   STACKTOP = sp; //@line 4959
   return $$0 | 0; //@line 4959
  }
 case 2:
  {
   $23 = HEAPU8[$0 + 45 >> 0] | 0; //@line 4968
   HEAP32[$vararg_buffer4 >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 4969
   HEAP32[$vararg_buffer4 + 4 >> 2] = $23; //@line 4971
   _sprintf($0, 3716, $vararg_buffer4) | 0; //@line 4972
   HEAP8[$0 + 4 >> 0] = 58; //@line 4974
   $31 = HEAPU8[$0 + 47 >> 0] | 0; //@line 4981
   HEAP32[$vararg_buffer8 >> 2] = HEAPU8[$0 + 46 >> 0]; //@line 4982
   HEAP32[$vararg_buffer8 + 4 >> 2] = $31; //@line 4984
   _sprintf($0 + 5 | 0, 3716, $vararg_buffer8) | 0; //@line 4985
   HEAP8[$0 + 9 >> 0] = 58; //@line 4987
   $39 = HEAPU8[$0 + 49 >> 0] | 0; //@line 4994
   HEAP32[$vararg_buffer12 >> 2] = HEAPU8[$0 + 48 >> 0]; //@line 4995
   HEAP32[$vararg_buffer12 + 4 >> 2] = $39; //@line 4997
   _sprintf($0 + 10 | 0, 3716, $vararg_buffer12) | 0; //@line 4998
   HEAP8[$0 + 14 >> 0] = 58; //@line 5000
   $47 = HEAPU8[$0 + 51 >> 0] | 0; //@line 5007
   HEAP32[$vararg_buffer16 >> 2] = HEAPU8[$0 + 50 >> 0]; //@line 5008
   HEAP32[$vararg_buffer16 + 4 >> 2] = $47; //@line 5010
   _sprintf($0 + 15 | 0, 3716, $vararg_buffer16) | 0; //@line 5011
   HEAP8[$0 + 19 >> 0] = 58; //@line 5013
   $55 = HEAPU8[$0 + 53 >> 0] | 0; //@line 5020
   HEAP32[$vararg_buffer20 >> 2] = HEAPU8[$0 + 52 >> 0]; //@line 5021
   HEAP32[$vararg_buffer20 + 4 >> 2] = $55; //@line 5023
   _sprintf($0 + 20 | 0, 3716, $vararg_buffer20) | 0; //@line 5024
   HEAP8[$0 + 24 >> 0] = 58; //@line 5026
   $63 = HEAPU8[$0 + 55 >> 0] | 0; //@line 5033
   HEAP32[$vararg_buffer24 >> 2] = HEAPU8[$0 + 54 >> 0]; //@line 5034
   HEAP32[$vararg_buffer24 + 4 >> 2] = $63; //@line 5036
   _sprintf($0 + 25 | 0, 3716, $vararg_buffer24) | 0; //@line 5037
   HEAP8[$0 + 29 >> 0] = 58; //@line 5039
   $71 = HEAPU8[$0 + 57 >> 0] | 0; //@line 5046
   HEAP32[$vararg_buffer28 >> 2] = HEAPU8[$0 + 56 >> 0]; //@line 5047
   HEAP32[$vararg_buffer28 + 4 >> 2] = $71; //@line 5049
   _sprintf($0 + 30 | 0, 3716, $vararg_buffer28) | 0; //@line 5050
   HEAP8[$0 + 34 >> 0] = 58; //@line 5052
   $79 = HEAPU8[$0 + 59 >> 0] | 0; //@line 5059
   HEAP32[$vararg_buffer32 >> 2] = HEAPU8[$0 + 58 >> 0]; //@line 5060
   HEAP32[$vararg_buffer32 + 4 >> 2] = $79; //@line 5062
   _sprintf($0 + 35 | 0, 3716, $vararg_buffer32) | 0; //@line 5063
   HEAP8[$0 + 39 >> 0] = 0; //@line 5065
   $$0 = $0; //@line 5066
   STACKTOP = sp; //@line 5067
   return $$0 | 0; //@line 5067
  }
 default:
  {
   $$0 = $0; //@line 5071
   STACKTOP = sp; //@line 5072
   return $$0 | 0; //@line 5072
  }
 }
 return 0; //@line 5075
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_149($0) {
 $0 = $0 | 0;
 var $$010 = 0, $$expand_i1_val = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10232
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10234
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10236
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10238
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10240
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10242
 if (!$AsyncRetVal) {
  $25 = 0 == 0; //@line 10245
  $26 = HEAP32[$2 >> 2] | 0; //@line 10246
  if (!$26) {
   if ($25) {
    $$010 = -3007; //@line 10250
    $31 = ___async_retval; //@line 10251
    HEAP32[$31 >> 2] = $$010; //@line 10252
    return;
   }
   $$010 = 0; //@line 10255
   $31 = ___async_retval; //@line 10256
   HEAP32[$31 >> 2] = $$010; //@line 10257
   return;
  } else {
   $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 10261
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 10262
   FUNCTION_TABLE_vi[$29 & 511]($6); //@line 10263
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 10266
    $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 10267
    $$expand_i1_val = $25 & 1; //@line 10268
    HEAP8[$30 >> 0] = $$expand_i1_val; //@line 10269
    sp = STACKTOP; //@line 10270
    return;
   }
   ___async_unwind = 0; //@line 10273
   HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 10274
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 10275
   $$expand_i1_val = $25 & 1; //@line 10276
   HEAP8[$30 >> 0] = $$expand_i1_val; //@line 10277
   sp = STACKTOP; //@line 10278
   return;
  }
 } else {
  $11 = HEAP32[$2 >> 2] | 0; //@line 10282
  if (!$11) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 10286
   _equeue_event_dtor($AsyncRetVal, 105); //@line 10287
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 10288
   $21 = _equeue_post($4, 106, $AsyncRetVal) | 0; //@line 10289
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 10292
    $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 10293
    HEAP32[$22 >> 2] = $2; //@line 10294
    $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 10295
    HEAP32[$23 >> 2] = $6; //@line 10296
    sp = STACKTOP; //@line 10297
    return;
   }
   HEAP32[___async_retval >> 2] = $21; //@line 10301
   ___async_unwind = 0; //@line 10302
   HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 10303
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 10304
   HEAP32[$22 >> 2] = $2; //@line 10305
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 10306
   HEAP32[$23 >> 2] = $6; //@line 10307
   sp = STACKTOP; //@line 10308
   return;
  } else {
   $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 10312
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 10313
   FUNCTION_TABLE_vii[$14 & 7]($AsyncRetVal, $6); //@line 10314
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 10317
    $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 10318
    HEAP32[$15 >> 2] = $8; //@line 10319
    $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 10320
    HEAP32[$16 >> 2] = $AsyncRetVal; //@line 10321
    $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 10322
    HEAP32[$17 >> 2] = $4; //@line 10323
    $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 10324
    HEAP32[$18 >> 2] = $2; //@line 10325
    $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 10326
    HEAP32[$19 >> 2] = $6; //@line 10327
    sp = STACKTOP; //@line 10328
    return;
   }
   ___async_unwind = 0; //@line 10331
   HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 10332
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 10333
   HEAP32[$15 >> 2] = $8; //@line 10334
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 10335
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 10336
   $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 10337
   HEAP32[$17 >> 2] = $4; //@line 10338
   $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 10339
   HEAP32[$18 >> 2] = $2; //@line 10340
   $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 10341
   HEAP32[$19 >> 2] = $6; //@line 10342
   sp = STACKTOP; //@line 10343
   return;
  }
 }
}
function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0; //@line 9183
 $3 = HEAP32[$2 >> 2] | 0; //@line 9184
 $4 = $0 + 100 | 0; //@line 9185
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1; //@line 9190
  $11 = HEAPU8[$3 >> 0] | 0; //@line 9193
 } else {
  $11 = ___shgetc($0) | 0; //@line 9196
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1; //@line 9201
   $14 = HEAP32[$2 >> 2] | 0; //@line 9202
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1; //@line 9207
    $22 = HEAPU8[$14 >> 0] | 0; //@line 9210
   } else {
    $22 = ___shgetc($0) | 0; //@line 9213
   }
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$4 >> 2] | 0)) {
     $$0 = $13; //@line 9223
     $$049 = $22; //@line 9223
    } else {
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9227
     $$0 = $13; //@line 9228
     $$049 = $22; //@line 9228
    }
   } else {
    $$0 = $13; //@line 9231
    $$049 = $22; //@line 9231
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 9236
   $$049 = $11; //@line 9236
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $100 = -2147483648; //@line 9245
   $101 = 0; //@line 9245
  } else {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9249
   $100 = -2147483648; //@line 9250
   $101 = 0; //@line 9250
  }
 } else {
  $$04860 = 0; //@line 9253
  $$159 = $$049; //@line 9253
  while (1) {
   $$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0; //@line 9257
   $38 = HEAP32[$2 >> 2] | 0; //@line 9258
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1; //@line 9263
    $$1$be = HEAPU8[$38 >> 0] | 0; //@line 9266
   } else {
    $$1$be = ___shgetc($0) | 0; //@line 9269
   }
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) {
    break;
   } else {
    $$159 = $$1$be; //@line 9276
   }
  }
  $50 = (($$04860 | 0) < 0) << 31 >> 31; //@line 9282
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be; //@line 9286
   $55 = $$04860; //@line 9286
   $56 = $50; //@line 9286
   while (1) {
    $57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0; //@line 9288
    $58 = tempRet0; //@line 9289
    $61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 9292
    $63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0; //@line 9294
    $64 = tempRet0; //@line 9295
    $65 = HEAP32[$2 >> 2] | 0; //@line 9296
    if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $65 + 1; //@line 9301
     $$2$be = HEAPU8[$65 >> 0] | 0; //@line 9304
    } else {
     $$2$be = ___shgetc($0) | 0; //@line 9307
    }
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
     $$254 = $$2$be; //@line 9318
     $55 = $63; //@line 9318
     $56 = $64; //@line 9318
    } else {
     $$2$lcssa = $$2$be; //@line 9320
     $94 = $63; //@line 9320
     $95 = $64; //@line 9320
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be; //@line 9325
   $94 = $$04860; //@line 9325
   $95 = $50; //@line 9325
  }
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $80 = HEAP32[$2 >> 2] | 0; //@line 9331
    if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $80 + 1; //@line 9336
     $$3$be = HEAPU8[$80 >> 0] | 0; //@line 9339
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 9342
    }
   } while (($$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9356
  }
  $93 = ($$0 | 0) != 0; //@line 9358
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0; //@line 9359
  $100 = $93 ? tempRet0 : $95; //@line 9363
  $101 = $93 ? $96 : $94; //@line 9363
 }
 tempRet0 = $100; //@line 9365
 return $101 | 0; //@line 9366
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_157($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11006
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11008
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11010
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11012
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 11015
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11017
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11019
 $15 = $10 + 24 | 0; //@line 11022
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$10 + 8 >> 2] | 0; //@line 11027
   if (!($18 & 2)) {
    $21 = $2 + 36 | 0; //@line 11031
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $2 + 54 | 0; //@line 11038
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 11049
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 11050
      if (!___async) {
       ___async_unwind = 0; //@line 11053
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 347; //@line 11055
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 11057
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $12; //@line 11059
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 11061
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 11063
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $2; //@line 11065
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $4; //@line 11067
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $6; //@line 11069
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $8 & 1; //@line 11072
      sp = STACKTOP; //@line 11073
      return;
     }
     $36 = $2 + 24 | 0; //@line 11076
     $37 = $2 + 54 | 0; //@line 11077
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 11092
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 11093
     if (!___async) {
      ___async_unwind = 0; //@line 11096
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 346; //@line 11098
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 11100
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $12; //@line 11102
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 11104
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 11106
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 11108
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $2; //@line 11110
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 11112
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $6; //@line 11114
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $8 & 1; //@line 11117
     sp = STACKTOP; //@line 11118
     return;
    }
   }
   $24 = $2 + 54 | 0; //@line 11122
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 11126
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $2, $4, $6, $8); //@line 11127
    if (!___async) {
     ___async_unwind = 0; //@line 11130
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 345; //@line 11132
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 11134
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 11136
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 11138
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $2; //@line 11140
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $4; //@line 11142
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $6; //@line 11144
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $8 & 1; //@line 11147
    sp = STACKTOP; //@line 11148
    return;
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14982
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14987
 } else {
  $9 = $1 + 52 | 0; //@line 14989
  $10 = HEAP8[$9 >> 0] | 0; //@line 14990
  $11 = $1 + 53 | 0; //@line 14991
  $12 = HEAP8[$11 >> 0] | 0; //@line 14992
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 14995
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 14996
  HEAP8[$9 >> 0] = 0; //@line 14997
  HEAP8[$11 >> 0] = 0; //@line 14998
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14999
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 15000
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 341; //@line 15003
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 15005
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15007
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15009
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 15011
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 15013
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 15015
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 15017
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 15019
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 15021
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 15023
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 15026
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 15028
   sp = STACKTOP; //@line 15029
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15032
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 15037
    $32 = $0 + 8 | 0; //@line 15038
    $33 = $1 + 54 | 0; //@line 15039
    $$0 = $0 + 24 | 0; //@line 15040
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 15073
     HEAP8[$11 >> 0] = 0; //@line 15074
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 15075
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 15076
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15081
     $62 = $$0 + 8 | 0; //@line 15082
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 15085
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 342; //@line 15090
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 15092
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 15094
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 15096
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 15098
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 15100
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 15102
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 15104
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 15106
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 15108
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 15110
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 15112
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 15114
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 15116
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 15119
    sp = STACKTOP; //@line 15120
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 15124
  HEAP8[$11 >> 0] = $12; //@line 15125
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11057
      $10 = HEAP32[$9 >> 2] | 0; //@line 11058
      HEAP32[$2 >> 2] = $9 + 4; //@line 11060
      HEAP32[$0 >> 2] = $10; //@line 11061
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11077
      $17 = HEAP32[$16 >> 2] | 0; //@line 11078
      HEAP32[$2 >> 2] = $16 + 4; //@line 11080
      $20 = $0; //@line 11083
      HEAP32[$20 >> 2] = $17; //@line 11085
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 11088
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11104
      $30 = HEAP32[$29 >> 2] | 0; //@line 11105
      HEAP32[$2 >> 2] = $29 + 4; //@line 11107
      $31 = $0; //@line 11108
      HEAP32[$31 >> 2] = $30; //@line 11110
      HEAP32[$31 + 4 >> 2] = 0; //@line 11113
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11129
      $41 = $40; //@line 11130
      $43 = HEAP32[$41 >> 2] | 0; //@line 11132
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 11135
      HEAP32[$2 >> 2] = $40 + 8; //@line 11137
      $47 = $0; //@line 11138
      HEAP32[$47 >> 2] = $43; //@line 11140
      HEAP32[$47 + 4 >> 2] = $46; //@line 11143
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11159
      $57 = HEAP32[$56 >> 2] | 0; //@line 11160
      HEAP32[$2 >> 2] = $56 + 4; //@line 11162
      $59 = ($57 & 65535) << 16 >> 16; //@line 11164
      $62 = $0; //@line 11167
      HEAP32[$62 >> 2] = $59; //@line 11169
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 11172
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11188
      $72 = HEAP32[$71 >> 2] | 0; //@line 11189
      HEAP32[$2 >> 2] = $71 + 4; //@line 11191
      $73 = $0; //@line 11193
      HEAP32[$73 >> 2] = $72 & 65535; //@line 11195
      HEAP32[$73 + 4 >> 2] = 0; //@line 11198
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11214
      $83 = HEAP32[$82 >> 2] | 0; //@line 11215
      HEAP32[$2 >> 2] = $82 + 4; //@line 11217
      $85 = ($83 & 255) << 24 >> 24; //@line 11219
      $88 = $0; //@line 11222
      HEAP32[$88 >> 2] = $85; //@line 11224
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 11227
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11243
      $98 = HEAP32[$97 >> 2] | 0; //@line 11244
      HEAP32[$2 >> 2] = $97 + 4; //@line 11246
      $99 = $0; //@line 11248
      HEAP32[$99 >> 2] = $98 & 255; //@line 11250
      HEAP32[$99 + 4 >> 2] = 0; //@line 11253
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11269
      $109 = +HEAPF64[$108 >> 3]; //@line 11270
      HEAP32[$2 >> 2] = $108 + 8; //@line 11272
      HEAPF64[$0 >> 3] = $109; //@line 11273
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11289
      $116 = +HEAPF64[$115 >> 3]; //@line 11290
      HEAP32[$2 >> 2] = $115 + 8; //@line 11292
      HEAPF64[$0 >> 3] = $116; //@line 11293
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$2 = 0, $$pr = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $27 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $54 = 0, $59 = 0, $61 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $80 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7313
 if (!$2) {
  return;
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, HEAP32[$1 >> 2] | 0, 0) | 0)) {
  return;
 }
 $7 = HEAP32[1957] | 0; //@line 7324
 if (!$7) {
  $$2 = 0; //@line 7327
 } else {
  $10 = $7 + 32 | 0; //@line 7330
  $12 = HEAP32[$10 >> 2] | 0; //@line 7332
  $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 7335
  $16 = HEAP32[1958] | 0; //@line 7336
  if (!$16) {
   $$2 = 1; //@line 7339
  } else {
   $59 = $16 + 32 | 0; //@line 7342
   $61 = HEAP32[$59 >> 2] | 0; //@line 7344
   $64 = HEAP32[$59 + 4 >> 2] | 0; //@line 7347
   $69 = $64 >>> 0 > $15 >>> 0 | ($64 | 0) == ($15 | 0) & $61 >>> 0 > $12 >>> 0; //@line 7352
   $70 = HEAP32[1959] | 0; //@line 7353
   if (!$70) {
    $$2 = 2; //@line 7356
   } else {
    $73 = $69 ? $15 : $64; //@line 7361
    $75 = $70 + 32 | 0; //@line 7363
    $80 = HEAP32[$75 + 4 >> 2] | 0; //@line 7368
    $$2 = $80 >>> 0 > $73 >>> 0 | (($80 | 0) == ($73 | 0) ? (HEAP32[$75 >> 2] | 0) >>> 0 > ($69 ? $12 : $61) >>> 0 : 0) ? ($69 ^ 1) & 1 : 2; //@line 7375
   }
  }
 }
 $18 = 7828 + ($$2 << 2) | 0; //@line 7379
 $19 = HEAP32[$18 >> 2] | 0; //@line 7380
 do {
  if (!$19) {
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7384
   $21 = __ZnwjRKSt9nothrow_t(40, 9760) | 0; //@line 7385
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 162; //@line 7388
    HEAP32[$AsyncCtx + 4 >> 2] = $18; //@line 7390
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7392
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7394
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7396
    sp = STACKTOP; //@line 7397
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7400
    HEAP32[$18 >> 2] = $21; //@line 7401
    $30 = $21; //@line 7402
    $31 = $21; //@line 7402
    break;
   }
  } else {
   $27 = HEAP32[$19 + 20 >> 2] | 0; //@line 7407
   if (!$27) {
    $$pr = $19; //@line 7410
   } else {
    __ZdlPv($27); //@line 7412
    $$pr = HEAP32[$18 >> 2] | 0; //@line 7414
   }
   $30 = $$pr; //@line 7416
   $31 = $$pr; //@line 7416
  }
 } while (0);
 if (!$30) {
  return;
 }
 HEAP32[$31 >> 2] = HEAP32[$1 >> 2]; //@line 7423
 HEAP32[$31 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7423
 HEAP32[$31 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7423
 HEAP32[$31 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 7423
 HEAP32[$31 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 7423
 $33 = (_strlen($0) | 0) + 1 | 0; //@line 7425
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7426
 $34 = __ZnajRKSt9nothrow_t($33, 9760) | 0; //@line 7427
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 163; //@line 7430
  HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 7432
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 7434
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 7436
  HEAP32[$AsyncCtx3 + 16 >> 2] = $18; //@line 7438
  sp = STACKTOP; //@line 7439
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7442
 HEAP32[$30 + 20 >> 2] = $34; //@line 7444
 _strcpy($34, $0) | 0; //@line 7445
 $40 = _emscripten_asm_const_i(9) | 0; //@line 7446
 $42 = (($40 | 0) < 0) << 31 >> 31; //@line 7448
 $43 = ___muldi3($2 | 0, 0, 1e3, 0) | 0; //@line 7449
 $45 = _i64Add($43 | 0, tempRet0 | 0, $40 | 0, $42 | 0) | 0; //@line 7451
 $47 = HEAP32[$18 >> 2] | 0; //@line 7453
 $49 = $47 + 24 | 0; //@line 7455
 HEAP32[$49 >> 2] = $45; //@line 7457
 HEAP32[$49 + 4 >> 2] = tempRet0; //@line 7460
 $54 = $47 + 32 | 0; //@line 7462
 HEAP32[$54 >> 2] = $40; //@line 7464
 HEAP32[$54 + 4 >> 2] = $42; //@line 7467
 return;
}
function __ZN9TCPSocket4sendEPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$024 = 0, $$1 = 0, $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11353
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11355
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11357
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11359
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11361
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11363
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11365
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11367
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11369
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11371
 if (($AsyncRetVal | 0) > -1) {
  $37 = $AsyncRetVal + $2 | 0; //@line 11374
  if ($37 >>> 0 < $4 >>> 0) {
   $$1 = $37; //@line 11377
   label = 8; //@line 11378
  } else {
   $$024 = $AsyncRetVal; //@line 11380
   $$2 = $37; //@line 11380
  }
 } else {
  $$1 = $2; //@line 11383
  label = 8; //@line 11384
 }
 if ((label | 0) == 8) {
  if (!(HEAP32[$6 >> 2] | 0)) {
   $$024 = $AsyncRetVal; //@line 11390
   $$2 = $$1; //@line 11390
  } else {
   if (($AsyncRetVal | 0) != -3001 & ($AsyncRetVal | 0) < 0) {
    $$024 = $AsyncRetVal; //@line 11396
    $$2 = $$1; //@line 11396
   } else {
    $18 = HEAP32[$10 >> 2] | 0; //@line 11398
    if (!$18) {
     $$024 = -3005; //@line 11401
     $$2 = $$1; //@line 11401
    } else {
     HEAP32[$12 >> 2] = 0; //@line 11403
     $20 = HEAP32[$14 >> 2] | 0; //@line 11404
     $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 68 >> 2] | 0; //@line 11407
     $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 11410
     $26 = FUNCTION_TABLE_iiiii[$23 & 15]($20, $18, $16 + $$1 | 0, $4 - $$1 | 0) | 0; //@line 11411
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 11414
      $27 = $ReallocAsyncCtx + 4 | 0; //@line 11415
      HEAP32[$27 >> 2] = $$1; //@line 11416
      $28 = $ReallocAsyncCtx + 8 | 0; //@line 11417
      HEAP32[$28 >> 2] = $4; //@line 11418
      $29 = $ReallocAsyncCtx + 12 | 0; //@line 11419
      HEAP32[$29 >> 2] = $6; //@line 11420
      $30 = $ReallocAsyncCtx + 16 | 0; //@line 11421
      HEAP32[$30 >> 2] = $8; //@line 11422
      $31 = $ReallocAsyncCtx + 20 | 0; //@line 11423
      HEAP32[$31 >> 2] = $10; //@line 11424
      $32 = $ReallocAsyncCtx + 24 | 0; //@line 11425
      HEAP32[$32 >> 2] = $12; //@line 11426
      $33 = $ReallocAsyncCtx + 28 | 0; //@line 11427
      HEAP32[$33 >> 2] = $14; //@line 11428
      $34 = $ReallocAsyncCtx + 32 | 0; //@line 11429
      HEAP32[$34 >> 2] = $16; //@line 11430
      sp = STACKTOP; //@line 11431
      return;
     }
     HEAP32[___async_retval >> 2] = $26; //@line 11435
     ___async_unwind = 0; //@line 11436
     HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 11437
     $27 = $ReallocAsyncCtx + 4 | 0; //@line 11438
     HEAP32[$27 >> 2] = $$1; //@line 11439
     $28 = $ReallocAsyncCtx + 8 | 0; //@line 11440
     HEAP32[$28 >> 2] = $4; //@line 11441
     $29 = $ReallocAsyncCtx + 12 | 0; //@line 11442
     HEAP32[$29 >> 2] = $6; //@line 11443
     $30 = $ReallocAsyncCtx + 16 | 0; //@line 11444
     HEAP32[$30 >> 2] = $8; //@line 11445
     $31 = $ReallocAsyncCtx + 20 | 0; //@line 11446
     HEAP32[$31 >> 2] = $10; //@line 11447
     $32 = $ReallocAsyncCtx + 24 | 0; //@line 11448
     HEAP32[$32 >> 2] = $12; //@line 11449
     $33 = $ReallocAsyncCtx + 28 | 0; //@line 11450
     HEAP32[$33 >> 2] = $14; //@line 11451
     $34 = $ReallocAsyncCtx + 32 | 0; //@line 11452
     HEAP32[$34 >> 2] = $16; //@line 11453
     sp = STACKTOP; //@line 11454
     return;
    }
   }
  }
 }
 HEAP8[$8 >> 0] = 0; //@line 11460
 HEAP32[___async_retval >> 2] = ($$024 | 0) < 1 & ($$024 | 0) != -3001 ? $$024 : ($$2 | 0) == 0 ? -3001 : $$2; //@line 11468
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8763
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8767
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8769
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8771
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8773
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8775
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8777
 $15 = $4 + 12 | 0; //@line 8779
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 8780
 $16 = $6 + 12 | 0; //@line 8781
 $17 = HEAP32[$16 >> 2] | 0; //@line 8782
 if (!$17) {
  $28 = $8 + 12 | 0; //@line 8785
  HEAP32[$28 >> 2] = 0; //@line 8786
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 8787
  $29 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($10, $12, $4, 0, $8, $14) | 0; //@line 8788
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 8791
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 8792
   HEAP32[$30 >> 2] = $28; //@line 8793
   $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 8794
   HEAP32[$31 >> 2] = $15; //@line 8795
   $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 8796
   HEAP32[$32 >> 2] = $8; //@line 8797
   $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 8798
   HEAP32[$33 >> 2] = $4; //@line 8799
   sp = STACKTOP; //@line 8800
   return;
  }
  HEAP32[___async_retval >> 2] = $29; //@line 8804
  ___async_unwind = 0; //@line 8805
  HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 8806
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 8807
  HEAP32[$30 >> 2] = $28; //@line 8808
  $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 8809
  HEAP32[$31 >> 2] = $15; //@line 8810
  $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 8811
  HEAP32[$32 >> 2] = $8; //@line 8812
  $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 8813
  HEAP32[$33 >> 2] = $4; //@line 8814
  sp = STACKTOP; //@line 8815
  return;
 } else {
  $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 8819
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 8820
  FUNCTION_TABLE_vii[$20 & 7]($8, $6); //@line 8821
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 166; //@line 8824
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 8825
   HEAP32[$21 >> 2] = $16; //@line 8826
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 8827
   HEAP32[$22 >> 2] = $8; //@line 8828
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 8829
   HEAP32[$23 >> 2] = $10; //@line 8830
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 8831
   HEAP32[$24 >> 2] = $12; //@line 8832
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 8833
   HEAP32[$25 >> 2] = $4; //@line 8834
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 8835
   HEAP32[$26 >> 2] = $14; //@line 8836
   $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 8837
   HEAP32[$27 >> 2] = $15; //@line 8838
   sp = STACKTOP; //@line 8839
   return;
  }
  ___async_unwind = 0; //@line 8842
  HEAP32[$ReallocAsyncCtx2 >> 2] = 166; //@line 8843
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 8844
  HEAP32[$21 >> 2] = $16; //@line 8845
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 8846
  HEAP32[$22 >> 2] = $8; //@line 8847
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 8848
  HEAP32[$23 >> 2] = $10; //@line 8849
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 8850
  HEAP32[$24 >> 2] = $12; //@line 8851
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 8852
  HEAP32[$25 >> 2] = $4; //@line 8853
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 8854
  HEAP32[$26 >> 2] = $14; //@line 8855
  $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 8856
  HEAP32[$27 >> 2] = $15; //@line 8857
  sp = STACKTOP; //@line 8858
  return;
 }
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_8($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16217
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16221
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16223
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16225
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16227
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16229
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16230
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 16234
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 16235
  FUNCTION_TABLE_vi[$16 & 511]($6); //@line 16236
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 229; //@line 16239
   $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 16240
   HEAP32[$17 >> 2] = $4; //@line 16241
   $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 16242
   HEAP32[$18 >> 2] = $8; //@line 16243
   $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 16244
   HEAP32[$19 >> 2] = $10; //@line 16245
   $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 16246
   HEAP32[$20 >> 2] = $12; //@line 16247
   sp = STACKTOP; //@line 16248
   return;
  }
  ___async_unwind = 0; //@line 16251
  HEAP32[$ReallocAsyncCtx4 >> 2] = 229; //@line 16252
  $17 = $ReallocAsyncCtx4 + 4 | 0; //@line 16253
  HEAP32[$17 >> 2] = $4; //@line 16254
  $18 = $ReallocAsyncCtx4 + 8 | 0; //@line 16255
  HEAP32[$18 >> 2] = $8; //@line 16256
  $19 = $ReallocAsyncCtx4 + 12 | 0; //@line 16257
  HEAP32[$19 >> 2] = $10; //@line 16258
  $20 = $ReallocAsyncCtx4 + 16 | 0; //@line 16259
  HEAP32[$20 >> 2] = $12; //@line 16260
  sp = STACKTOP; //@line 16261
  return;
 }
 $21 = HEAP32[$4 >> 2] | 0; //@line 16264
 if (!$21) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 16267
  _mbed_assert_internal(4029, 4034, 1677); //@line 16268
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 230; //@line 16271
   $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 16272
   HEAP32[$23 >> 2] = $4; //@line 16273
   $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 16274
   HEAP32[$24 >> 2] = $8; //@line 16275
   $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 16276
   HEAP32[$25 >> 2] = $10; //@line 16277
   $26 = $ReallocAsyncCtx9 + 16 | 0; //@line 16278
   HEAP32[$26 >> 2] = $12; //@line 16279
   sp = STACKTOP; //@line 16280
   return;
  }
  ___async_unwind = 0; //@line 16283
  HEAP32[$ReallocAsyncCtx9 >> 2] = 230; //@line 16284
  $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 16285
  HEAP32[$23 >> 2] = $4; //@line 16286
  $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 16287
  HEAP32[$24 >> 2] = $8; //@line 16288
  $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 16289
  HEAP32[$25 >> 2] = $10; //@line 16290
  $26 = $ReallocAsyncCtx9 + 16 | 0; //@line 16291
  HEAP32[$26 >> 2] = $12; //@line 16292
  sp = STACKTOP; //@line 16293
  return;
 } else {
  $27 = HEAP32[$21 >> 2] | 0; //@line 16296
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 16297
  FUNCTION_TABLE_viii[$27 & 0]($8, $10, $12); //@line 16298
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 231; //@line 16301
   $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 16302
   HEAP32[$28 >> 2] = $4; //@line 16303
   $29 = $ReallocAsyncCtx5 + 8 | 0; //@line 16304
   HEAP32[$29 >> 2] = $8; //@line 16305
   sp = STACKTOP; //@line 16306
   return;
  }
  ___async_unwind = 0; //@line 16309
  HEAP32[$ReallocAsyncCtx5 >> 2] = 231; //@line 16310
  $28 = $ReallocAsyncCtx5 + 4 | 0; //@line 16311
  HEAP32[$28 >> 2] = $4; //@line 16312
  $29 = $ReallocAsyncCtx5 + 8 | 0; //@line 16313
  HEAP32[$29 >> 2] = $8; //@line 16314
  sp = STACKTOP; //@line 16315
  return;
 }
}
function __ZL28nsapi_dns_query_async_deletei__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9092
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9094
 $$pre = HEAP32[$2 >> 2] | 0; //@line 9095
 $4 = HEAP32[$$pre + 60 >> 2] | 0; //@line 9097
 do {
  if (!$4) {
   $14 = $$pre; //@line 9101
  } else {
   $7 = HEAP32[$4 + 12 >> 2] | 0; //@line 9104
   if (!$7) {
    __ZdlPv($4); //@line 9107
    $14 = HEAP32[$2 >> 2] | 0; //@line 9109
    break;
   }
   $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 9113
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 9114
   FUNCTION_TABLE_vi[$10 & 511]($4); //@line 9115
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 256; //@line 9118
    $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 9119
    HEAP32[$11 >> 2] = $4; //@line 9120
    $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 9121
    HEAP32[$12 >> 2] = $2; //@line 9122
    sp = STACKTOP; //@line 9123
    return;
   }
   ___async_unwind = 0; //@line 9126
   HEAP32[$ReallocAsyncCtx2 >> 2] = 256; //@line 9127
   $11 = $ReallocAsyncCtx2 + 4 | 0; //@line 9128
   HEAP32[$11 >> 2] = $4; //@line 9129
   $12 = $ReallocAsyncCtx2 + 8 | 0; //@line 9130
   HEAP32[$12 >> 2] = $2; //@line 9131
   sp = STACKTOP; //@line 9132
   return;
  }
 } while (0);
 $15 = HEAP32[$14 + 64 >> 2] | 0; //@line 9137
 if (!$15) {
  $18 = $14; //@line 9140
 } else {
  __ZdaPv($15); //@line 9142
  $18 = HEAP32[$2 >> 2] | 0; //@line 9144
 }
 $19 = HEAP32[$18 + 12 >> 2] | 0; //@line 9147
 if (!$19) {
  $22 = $18; //@line 9150
 } else {
  __ZdlPv($19); //@line 9152
  $22 = HEAP32[$2 >> 2] | 0; //@line 9154
 }
 do {
  if ($22 | 0) {
   $24 = HEAP32[$22 + 44 >> 2] | 0; //@line 9160
   if ($24 | 0) {
    $28 = HEAP32[$24 + 8 >> 2] | 0; //@line 9165
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 9166
    FUNCTION_TABLE_vi[$28 & 511]($22 + 32 | 0); //@line 9167
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 257; //@line 9170
     $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 9171
     HEAP32[$29 >> 2] = $22; //@line 9172
     $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 9173
     HEAP32[$30 >> 2] = $2; //@line 9174
     sp = STACKTOP; //@line 9175
     return;
    }
    ___async_unwind = 0; //@line 9178
    HEAP32[$ReallocAsyncCtx3 >> 2] = 257; //@line 9179
    $29 = $ReallocAsyncCtx3 + 4 | 0; //@line 9180
    HEAP32[$29 >> 2] = $22; //@line 9181
    $30 = $ReallocAsyncCtx3 + 8 | 0; //@line 9182
    HEAP32[$30 >> 2] = $2; //@line 9183
    sp = STACKTOP; //@line 9184
    return;
   }
   $32 = HEAP32[$22 + 28 >> 2] | 0; //@line 9188
   if (!$32) {
    __ZdlPv($22); //@line 9191
    break;
   }
   $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 9196
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 9197
   FUNCTION_TABLE_vi[$36 & 511]($22 + 16 | 0); //@line 9198
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 9201
    $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 9202
    HEAP32[$37 >> 2] = $22; //@line 9203
    $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 9204
    HEAP32[$38 >> 2] = $2; //@line 9205
    sp = STACKTOP; //@line 9206
    return;
   }
   ___async_unwind = 0; //@line 9209
   HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 9210
   $37 = $ReallocAsyncCtx4 + 4 | 0; //@line 9211
   HEAP32[$37 >> 2] = $22; //@line 9212
   $38 = $ReallocAsyncCtx4 + 8 | 0; //@line 9213
   HEAP32[$38 >> 2] = $2; //@line 9214
   sp = STACKTOP; //@line 9215
   return;
  }
 } while (0);
 HEAP32[$2 >> 2] = 0; //@line 9219
 HEAP32[___async_retval >> 2] = 0; //@line 9221
 return;
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 9957
 STACKTOP = STACKTOP + 224 | 0; //@line 9958
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 9958
 $3 = sp + 120 | 0; //@line 9959
 $4 = sp + 80 | 0; //@line 9960
 $5 = sp; //@line 9961
 $6 = sp + 136 | 0; //@line 9962
 dest = $4; //@line 9963
 stop = dest + 40 | 0; //@line 9963
 do {
  HEAP32[dest >> 2] = 0; //@line 9963
  dest = dest + 4 | 0; //@line 9963
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 9965
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 9969
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 9976
  } else {
   $43 = 0; //@line 9978
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 9980
  $14 = $13 & 32; //@line 9981
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 9987
  }
  $19 = $0 + 48 | 0; //@line 9989
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 9994
    $24 = HEAP32[$23 >> 2] | 0; //@line 9995
    HEAP32[$23 >> 2] = $6; //@line 9996
    $25 = $0 + 28 | 0; //@line 9997
    HEAP32[$25 >> 2] = $6; //@line 9998
    $26 = $0 + 20 | 0; //@line 9999
    HEAP32[$26 >> 2] = $6; //@line 10000
    HEAP32[$19 >> 2] = 80; //@line 10001
    $28 = $0 + 16 | 0; //@line 10003
    HEAP32[$28 >> 2] = $6 + 80; //@line 10004
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10005
    if (!$24) {
     $$1 = $29; //@line 10008
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 10011
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 10012
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 10013
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 314; //@line 10016
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 10018
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 10020
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 10022
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 10024
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 10026
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 10028
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 10030
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 10032
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 10034
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 10036
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 10038
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 10040
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 10042
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 10044
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 10046
      sp = STACKTOP; //@line 10047
      STACKTOP = sp; //@line 10048
      return 0; //@line 10048
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10050
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 10053
      HEAP32[$23 >> 2] = $24; //@line 10054
      HEAP32[$19 >> 2] = 0; //@line 10055
      HEAP32[$28 >> 2] = 0; //@line 10056
      HEAP32[$25 >> 2] = 0; //@line 10057
      HEAP32[$26 >> 2] = 0; //@line 10058
      $$1 = $$; //@line 10059
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10065
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 10068
  HEAP32[$0 >> 2] = $51 | $14; //@line 10073
  if ($43 | 0) {
   ___unlockfile($0); //@line 10076
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 10078
 }
 STACKTOP = sp; //@line 10080
 return $$0 | 0; //@line 10080
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14517
 STACKTOP = STACKTOP + 64 | 0; //@line 14518
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14518
 $4 = sp; //@line 14519
 $5 = HEAP32[$0 >> 2] | 0; //@line 14520
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 14523
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 14525
 HEAP32[$4 >> 2] = $2; //@line 14526
 HEAP32[$4 + 4 >> 2] = $0; //@line 14528
 HEAP32[$4 + 8 >> 2] = $1; //@line 14530
 HEAP32[$4 + 12 >> 2] = $3; //@line 14532
 $14 = $4 + 16 | 0; //@line 14533
 $15 = $4 + 20 | 0; //@line 14534
 $16 = $4 + 24 | 0; //@line 14535
 $17 = $4 + 28 | 0; //@line 14536
 $18 = $4 + 32 | 0; //@line 14537
 $19 = $4 + 40 | 0; //@line 14538
 dest = $14; //@line 14539
 stop = dest + 36 | 0; //@line 14539
 do {
  HEAP32[dest >> 2] = 0; //@line 14539
  dest = dest + 4 | 0; //@line 14539
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 14539
 HEAP8[$14 + 38 >> 0] = 0; //@line 14539
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 14544
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14547
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14548
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 14549
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 333; //@line 14552
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 14554
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 14556
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 14558
    sp = STACKTOP; //@line 14559
    STACKTOP = sp; //@line 14560
    return 0; //@line 14560
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14562
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 14566
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 14570
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 14573
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14574
   FUNCTION_TABLE_viiiii[$33 & 3]($10, $4, $8, 1, 0); //@line 14575
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 334; //@line 14578
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 14580
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 14582
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 14584
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 14586
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 14588
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 14590
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 14592
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 14594
    sp = STACKTOP; //@line 14595
    STACKTOP = sp; //@line 14596
    return 0; //@line 14596
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14598
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 14612
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 14620
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 14636
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 14641
  }
 } while (0);
 STACKTOP = sp; //@line 14644
 return $$0 | 0; //@line 14644
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_109($0) {
 $0 = $0 | 0;
 var $$pre74 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 4417
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4419
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4421
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4423
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4425
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4427
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4429
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4431
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4433
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4435
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4437
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4439
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4441
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 4443
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 4447
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 4449
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 4451
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 4453
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 4455
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 4457
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 4459
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 4461
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 4463
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 4465
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 4467
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 4469
 $$pre74 = HEAP32[$6 >> 2] | 0; //@line 4471
 HEAP32[$34 >> 2] = HEAP32[HEAP32[$0 + 56 >> 2] >> 2]; //@line 4472
 $53 = HEAP32[$$pre74 >> 2] | 0; //@line 4473
 HEAP32[$36 >> 2] = 0; //@line 4474
 HEAP32[$38 >> 2] = 197; //@line 4475
 HEAP32[$40 >> 2] = $53; //@line 4476
 HEAP32[$42 >> 2] = 764; //@line 4477
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 4478
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 4479
 if (!___async) {
  ___async_unwind = 0; //@line 4482
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 198; //@line 4484
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 4486
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 4488
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 4490
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 4492
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $26; //@line 4494
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $10; //@line 4496
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $12; //@line 4498
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $14; //@line 4500
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $16; //@line 4502
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $18; //@line 4504
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $20; //@line 4506
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $22; //@line 4508
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $24; //@line 4510
 HEAP32[$ReallocAsyncCtx11 + 56 >> 2] = $30; //@line 4512
 HEAP32[$ReallocAsyncCtx11 + 60 >> 2] = $32; //@line 4514
 HEAP32[$ReallocAsyncCtx11 + 64 >> 2] = $34; //@line 4516
 HEAP32[$ReallocAsyncCtx11 + 68 >> 2] = $36; //@line 4518
 HEAP32[$ReallocAsyncCtx11 + 72 >> 2] = $38; //@line 4520
 HEAP32[$ReallocAsyncCtx11 + 76 >> 2] = $40; //@line 4522
 HEAP32[$ReallocAsyncCtx11 + 80 >> 2] = $42; //@line 4524
 HEAP32[$ReallocAsyncCtx11 + 84 >> 2] = $44; //@line 4526
 HEAP32[$ReallocAsyncCtx11 + 88 >> 2] = $46; //@line 4528
 HEAP32[$ReallocAsyncCtx11 + 92 >> 2] = $48; //@line 4530
 HEAP32[$ReallocAsyncCtx11 + 96 >> 2] = $50; //@line 4532
 HEAP32[$ReallocAsyncCtx11 + 100 >> 2] = $52; //@line 4534
 sp = STACKTOP; //@line 4535
 return;
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 2775
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2777
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2779
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2781
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2783
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2785
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2787
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2789
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2791
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2793
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2795
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2797
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2799
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2801
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 2803
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 2805
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 2809
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 2811
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 2813
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 2815
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 2817
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 2819
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 2821
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 2823
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 2825
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 2827
 $$pre = HEAP32[$6 >> 2] | 0; //@line 2829
 HEAP32[$12 >> 2] = HEAP32[HEAP32[$0 + 64 >> 2] >> 2]; //@line 2830
 $53 = HEAP32[$$pre >> 2] | 0; //@line 2831
 HEAP32[$14 >> 2] = 0; //@line 2832
 HEAP32[$16 >> 2] = 192; //@line 2833
 HEAP32[$18 >> 2] = $53; //@line 2834
 HEAP32[$20 >> 2] = 764; //@line 2835
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(104) | 0; //@line 2836
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 2837
 if (!___async) {
  ___async_unwind = 0; //@line 2840
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 193; //@line 2842
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 2844
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 2846
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 2848
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 2850
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $26; //@line 2852
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $10; //@line 2854
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $12; //@line 2856
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $14; //@line 2858
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $16; //@line 2860
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $18; //@line 2862
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $20; //@line 2864
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $22; //@line 2866
 HEAP32[$ReallocAsyncCtx12 + 52 >> 2] = $24; //@line 2868
 HEAP32[$ReallocAsyncCtx12 + 56 >> 2] = $28; //@line 2870
 HEAP32[$ReallocAsyncCtx12 + 60 >> 2] = $30; //@line 2872
 HEAP32[$ReallocAsyncCtx12 + 64 >> 2] = $34; //@line 2874
 HEAP32[$ReallocAsyncCtx12 + 68 >> 2] = $36; //@line 2876
 HEAP32[$ReallocAsyncCtx12 + 72 >> 2] = $38; //@line 2878
 HEAP32[$ReallocAsyncCtx12 + 76 >> 2] = $40; //@line 2880
 HEAP32[$ReallocAsyncCtx12 + 80 >> 2] = $42; //@line 2882
 HEAP32[$ReallocAsyncCtx12 + 84 >> 2] = $44; //@line 2884
 HEAP32[$ReallocAsyncCtx12 + 88 >> 2] = $46; //@line 2886
 HEAP32[$ReallocAsyncCtx12 + 92 >> 2] = $48; //@line 2888
 HEAP32[$ReallocAsyncCtx12 + 96 >> 2] = $50; //@line 2890
 HEAP32[$ReallocAsyncCtx12 + 100 >> 2] = $52; //@line 2892
 sp = STACKTOP; //@line 2893
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 9829
 $7 = ($2 | 0) != 0; //@line 9833
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 9837
   $$03555 = $0; //@line 9838
   $$03654 = $2; //@line 9838
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 9843
     $$036$lcssa64 = $$03654; //@line 9843
     label = 6; //@line 9844
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 9847
    $12 = $$03654 + -1 | 0; //@line 9848
    $16 = ($12 | 0) != 0; //@line 9852
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 9855
     $$03654 = $12; //@line 9855
    } else {
     $$035$lcssa = $11; //@line 9857
     $$036$lcssa = $12; //@line 9857
     $$lcssa = $16; //@line 9857
     label = 5; //@line 9858
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 9863
   $$036$lcssa = $2; //@line 9863
   $$lcssa = $7; //@line 9863
   label = 5; //@line 9864
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 9869
   $$036$lcssa64 = $$036$lcssa; //@line 9869
   label = 6; //@line 9870
  } else {
   $$2 = $$035$lcssa; //@line 9872
   $$3 = 0; //@line 9872
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 9878
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 9881
    $$3 = $$036$lcssa64; //@line 9881
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 9883
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 9887
      $$13745 = $$036$lcssa64; //@line 9887
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 9890
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 9899
       $30 = $$13745 + -4 | 0; //@line 9900
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 9903
        $$13745 = $30; //@line 9903
       } else {
        $$0$lcssa = $29; //@line 9905
        $$137$lcssa = $30; //@line 9905
        label = 11; //@line 9906
        break L11;
       }
      }
      $$140 = $$046; //@line 9910
      $$23839 = $$13745; //@line 9910
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 9912
      $$137$lcssa = $$036$lcssa64; //@line 9912
      label = 11; //@line 9913
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 9919
      $$3 = 0; //@line 9919
      break;
     } else {
      $$140 = $$0$lcssa; //@line 9922
      $$23839 = $$137$lcssa; //@line 9922
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 9929
      $$3 = $$23839; //@line 9929
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 9932
     $$23839 = $$23839 + -1 | 0; //@line 9933
     if (!$$23839) {
      $$2 = $35; //@line 9936
      $$3 = 0; //@line 9936
      break;
     } else {
      $$140 = $35; //@line 9939
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 9947
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 5358
 do {
  if (!$0) {
   do {
    if (!(HEAP32[476] | 0)) {
     $34 = 0; //@line 5366
    } else {
     $12 = HEAP32[476] | 0; //@line 5368
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5369
     $13 = _fflush($12) | 0; //@line 5370
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 310; //@line 5373
      sp = STACKTOP; //@line 5374
      return 0; //@line 5375
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 5377
      $34 = $13; //@line 5378
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 5384
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 5388
    } else {
     $$02327 = $$02325; //@line 5390
     $$02426 = $34; //@line 5390
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 5397
      } else {
       $28 = 0; //@line 5399
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5407
       $25 = ___fflush_unlocked($$02327) | 0; //@line 5408
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 5413
       $$1 = $25 | $$02426; //@line 5415
      } else {
       $$1 = $$02426; //@line 5417
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 5421
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 5424
      if (!$$023) {
       $$024$lcssa = $$1; //@line 5427
       break L9;
      } else {
       $$02327 = $$023; //@line 5430
       $$02426 = $$1; //@line 5430
      }
     }
     HEAP32[$AsyncCtx >> 2] = 311; //@line 5433
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 5435
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 5437
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 5439
     sp = STACKTOP; //@line 5440
     return 0; //@line 5441
    }
   } while (0);
   ___ofl_unlock(); //@line 5444
   $$0 = $$024$lcssa; //@line 5445
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5451
    $5 = ___fflush_unlocked($0) | 0; //@line 5452
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 308; //@line 5455
     sp = STACKTOP; //@line 5456
     return 0; //@line 5457
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5459
     $$0 = $5; //@line 5460
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 5465
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5466
   $7 = ___fflush_unlocked($0) | 0; //@line 5467
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 309; //@line 5470
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 5473
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5475
    sp = STACKTOP; //@line 5476
    return 0; //@line 5477
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5479
   if ($phitmp) {
    $$0 = $7; //@line 5481
   } else {
    ___unlockfile($0); //@line 5483
    $$0 = $7; //@line 5484
   }
  }
 } while (0);
 return $$0 | 0; //@line 5488
}
function _mbed_vtracef__async_cb_183($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14388
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14390
 $6 = HEAP8[$0 + 12 >> 0] & 1; //@line 14395
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14397
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14399
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14401
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14403
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14405
 $$13 = ($AsyncRetVal | 0) >= ($2 | 0) ? 0 : $AsyncRetVal; //@line 14407
 $18 = (HEAP32[$0 + 8 >> 2] | 0) + $$13 | 0; //@line 14409
 $19 = $2 - $$13 | 0; //@line 14410
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[132] | 0; //@line 14414
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $6 ^ 1) {
     break;
    }
    _snprintf($18, $19, 3645, $12) | 0; //@line 14426
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 14429
   $23 = FUNCTION_TABLE_i[$21 & 0]() | 0; //@line 14430
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 72; //@line 14433
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 14434
    HEAP32[$24 >> 2] = $8; //@line 14435
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 14436
    HEAP32[$25 >> 2] = $18; //@line 14437
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 14438
    HEAP32[$26 >> 2] = $19; //@line 14439
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 14440
    HEAP32[$27 >> 2] = $10; //@line 14441
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 14442
    $$expand_i1_val = $6 & 1; //@line 14443
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 14444
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 14445
    HEAP32[$29 >> 2] = $12; //@line 14446
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 14447
    HEAP32[$30 >> 2] = $14; //@line 14448
    sp = STACKTOP; //@line 14449
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 14453
   ___async_unwind = 0; //@line 14454
   HEAP32[$ReallocAsyncCtx6 >> 2] = 72; //@line 14455
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 14456
   HEAP32[$24 >> 2] = $8; //@line 14457
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 14458
   HEAP32[$25 >> 2] = $18; //@line 14459
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 14460
   HEAP32[$26 >> 2] = $19; //@line 14461
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 14462
   HEAP32[$27 >> 2] = $10; //@line 14463
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 14464
   $$expand_i1_val = $6 & 1; //@line 14465
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 14466
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 14467
   HEAP32[$29 >> 2] = $12; //@line 14468
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 14469
   HEAP32[$30 >> 2] = $14; //@line 14470
   sp = STACKTOP; //@line 14471
   return;
  }
 } while (0);
 $34 = HEAP32[133] | 0; //@line 14475
 $35 = HEAP32[126] | 0; //@line 14476
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14477
 FUNCTION_TABLE_vi[$34 & 511]($35); //@line 14478
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 14481
  sp = STACKTOP; //@line 14482
  return;
 }
 ___async_unwind = 0; //@line 14485
 HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 14486
 sp = STACKTOP; //@line 14487
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14699
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14705
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 14711
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 14714
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14715
    FUNCTION_TABLE_viiiii[$53 & 3]($50, $1, $2, $3, $4); //@line 14716
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 337; //@line 14719
     sp = STACKTOP; //@line 14720
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14723
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 14731
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 14736
     $19 = $1 + 44 | 0; //@line 14737
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 14743
     HEAP8[$22 >> 0] = 0; //@line 14744
     $23 = $1 + 53 | 0; //@line 14745
     HEAP8[$23 >> 0] = 0; //@line 14746
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 14748
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 14751
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14752
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 14753
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 336; //@line 14756
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 14758
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14760
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 14762
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 14764
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 14766
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 14768
      sp = STACKTOP; //@line 14769
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14772
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 14776
      label = 13; //@line 14777
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 14782
       label = 13; //@line 14783
      } else {
       $$037$off039 = 3; //@line 14785
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 14789
      $39 = $1 + 40 | 0; //@line 14790
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 14793
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14803
        $$037$off039 = $$037$off038; //@line 14804
       } else {
        $$037$off039 = $$037$off038; //@line 14806
       }
      } else {
       $$037$off039 = $$037$off038; //@line 14809
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 14812
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 14819
   }
  }
 } while (0);
 return;
}
function __ZN9TCPSocket7connectEPKct__async_cb_124($0) {
 $0 = $0 | 0;
 var $$0$off0$i$reg2mem$0 = 0, $$08$i = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8524
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8526
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8528
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8530
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 8533
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8535
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8537
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8539
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8541
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8543
 if ((HEAP32[$2 >> 2] | 0) != 0 & ($AsyncRetVal | 1 | 0) == -3013) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 8550
  if (!$18) {
   $$0$off0$i$reg2mem$0 = 1; //@line 8553
   $$08$i = -3005; //@line 8553
  } else {
   HEAP32[$12 >> 2] = 0; //@line 8555
   $20 = HEAP32[$14 >> 2] | 0; //@line 8556
   $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 60 >> 2] | 0; //@line 8559
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 8560
   $24 = FUNCTION_TABLE_iiii[$23 & 31]($20, $18, $16) | 0; //@line 8561
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 8564
    $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 8565
    HEAP32[$25 >> 2] = $2; //@line 8566
    $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 8567
    HEAP32[$26 >> 2] = $4; //@line 8568
    $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 8569
    HEAP32[$27 >> 2] = $6; //@line 8570
    $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 8571
    $$expand_i1_val = 1; //@line 8572
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 8573
    $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 8574
    HEAP32[$29 >> 2] = $10; //@line 8575
    $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 8576
    HEAP32[$30 >> 2] = $12; //@line 8577
    $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 8578
    HEAP32[$31 >> 2] = $14; //@line 8579
    $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 8580
    HEAP32[$32 >> 2] = $16; //@line 8581
    sp = STACKTOP; //@line 8582
    return;
   }
   HEAP32[___async_retval >> 2] = $24; //@line 8586
   ___async_unwind = 0; //@line 8587
   HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 8588
   $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 8589
   HEAP32[$25 >> 2] = $2; //@line 8590
   $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 8591
   HEAP32[$26 >> 2] = $4; //@line 8592
   $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 8593
   HEAP32[$27 >> 2] = $6; //@line 8594
   $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 8595
   $$expand_i1_val = 1; //@line 8596
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 8597
   $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 8598
   HEAP32[$29 >> 2] = $10; //@line 8599
   $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 8600
   HEAP32[$30 >> 2] = $12; //@line 8601
   $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 8602
   HEAP32[$31 >> 2] = $14; //@line 8603
   $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 8604
   HEAP32[$32 >> 2] = $16; //@line 8605
   sp = STACKTOP; //@line 8606
   return;
  }
 } else {
  $$0$off0$i$reg2mem$0 = $8; //@line 8610
  $$08$i = $AsyncRetVal; //@line 8610
 }
 HEAP8[$6 >> 0] = 0; //@line 8612
 HEAP32[___async_retval >> 2] = $$0$off0$i$reg2mem$0 & ($$08$i | 0) == -3015 ? 0 : $$08$i; //@line 8617
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_119($0) {
 $0 = $0 | 0;
 var $$052 = 0, $$byval_copy8 = 0, $$pre = 0, $11 = 0, $12 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8202
 STACKTOP = STACKTOP + 32 | 0; //@line 8203
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8203
 $$byval_copy8 = sp; //@line 8204
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8206
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8208
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8212
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8214
 if (!$AsyncRetVal) {
  $24 = 0; //@line 8217
 } else {
  $11 = $AsyncRetVal + (HEAP32[$0 + 12 >> 2] << 6) | 0; //@line 8219
  $12 = $AsyncRetVal; //@line 8220
  do {
   HEAP32[$8 >> 2] = 0; //@line 8222
   HEAP32[$8 + 4 >> 2] = 0; //@line 8222
   HEAP32[$8 + 8 >> 2] = 0; //@line 8222
   HEAP32[$8 + 12 >> 2] = 0; //@line 8222
   HEAP32[$8 + 16 >> 2] = 0; //@line 8222
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$8 >> 2]; //@line 8223
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$8 + 4 >> 2]; //@line 8223
   HEAP32[$$byval_copy8 + 8 >> 2] = HEAP32[$8 + 8 >> 2]; //@line 8223
   HEAP32[$$byval_copy8 + 12 >> 2] = HEAP32[$8 + 12 >> 2]; //@line 8223
   HEAP32[$$byval_copy8 + 16 >> 2] = HEAP32[$8 + 16 >> 2]; //@line 8223
   __ZN13SocketAddressC2E10nsapi_addrt($12, $$byval_copy8, 0); //@line 8224
   $12 = $12 + 64 | 0; //@line 8225
  } while (($12 | 0) != ($11 | 0));
  $24 = $AsyncRetVal; //@line 8228
 }
 $$pre = $4 + 64 | 0; //@line 8237
 if (HEAP8[$2 >> 0] | 0) {
  $$052 = 0; //@line 8239
  do {
   $26 = $24 + ($$052 << 6) | 0; //@line 8241
   $28 = (HEAP32[$$pre >> 2] | 0) + ($$052 * 20 | 0) | 0; //@line 8243
   HEAP32[$$byval_copy8 >> 2] = HEAP32[$28 >> 2]; //@line 8244
   HEAP32[$$byval_copy8 + 4 >> 2] = HEAP32[$28 + 4 >> 2]; //@line 8244
   HEAP32[$$byval_copy8 + 8 >> 2] = HEAP32[$28 + 8 >> 2]; //@line 8244
   HEAP32[$$byval_copy8 + 12 >> 2] = HEAP32[$28 + 12 >> 2]; //@line 8244
   HEAP32[$$byval_copy8 + 16 >> 2] = HEAP32[$28 + 16 >> 2]; //@line 8244
   __ZN13SocketAddress8set_addrE10nsapi_addr($26, $$byval_copy8); //@line 8245
   $$052 = $$052 + 1 | 0; //@line 8246
  } while (($$052 | 0) < (HEAPU8[$2 >> 0] | 0));
 }
 $18 = HEAP32[$4 + 12 >> 2] | 0; //@line 8258
 $19 = HEAP32[$$pre >> 2] | 0; //@line 8259
 $21 = HEAP32[$4 + 68 >> 2] | 0; //@line 8261
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 8262
 __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($18, $19, $21); //@line 8263
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 252; //@line 8266
  $22 = $ReallocAsyncCtx + 4 | 0; //@line 8267
  HEAP32[$22 >> 2] = $4; //@line 8268
  $23 = $ReallocAsyncCtx + 8 | 0; //@line 8269
  HEAP32[$23 >> 2] = $24; //@line 8270
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 8271
  HEAP32[$25 >> 2] = $2; //@line 8272
  sp = STACKTOP; //@line 8273
  STACKTOP = sp; //@line 8274
  return;
 }
 ___async_unwind = 0; //@line 8276
 HEAP32[$ReallocAsyncCtx >> 2] = 252; //@line 8277
 $22 = $ReallocAsyncCtx + 4 | 0; //@line 8278
 HEAP32[$22 >> 2] = $4; //@line 8279
 $23 = $ReallocAsyncCtx + 8 | 0; //@line 8280
 HEAP32[$23 >> 2] = $24; //@line 8281
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 8282
 HEAP32[$25 >> 2] = $2; //@line 8283
 sp = STACKTOP; //@line 8284
 STACKTOP = sp; //@line 8285
 return;
}
function _mbed_vtracef__async_cb_184($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14497
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14499
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14501
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14503
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14505
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14507
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14509
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14511
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14513
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 14515
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 14517
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 14519
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 14521
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 14523
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 14525
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 14527
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 14529
 $34 = HEAP8[$0 + 68 >> 0] & 1; //@line 14532
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 14534
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 14536
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 14538
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 14540
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 14542
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 14544
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 14546
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 14548
 $55 = ($28 | 0 ? 4 : 0) + $28 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 14554
 $56 = HEAP32[131] | 0; //@line 14555
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 14556
 $57 = FUNCTION_TABLE_ii[$56 & 31]($55) | 0; //@line 14557
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 14561
  ___async_unwind = 0; //@line 14562
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 70; //@line 14564
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 14566
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 14568
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 14570
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 14572
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 14574
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 14576
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 14578
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 14580
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 14582
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 14584
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 14586
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 14588
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $26; //@line 14590
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $30; //@line 14592
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $32; //@line 14594
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $44; //@line 14596
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $46; //@line 14598
 HEAP32[$ReallocAsyncCtx5 + 72 >> 2] = $48; //@line 14600
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $50; //@line 14602
 HEAP8[$ReallocAsyncCtx5 + 80 >> 0] = $34 & 1; //@line 14605
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $36; //@line 14607
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $38; //@line 14609
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $40; //@line 14611
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $42; //@line 14613
 sp = STACKTOP; //@line 14614
 return;
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1418
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 1429
 $14 = $1 + 20 | 0; //@line 1430
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1432
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 1437
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 1441
 $24 = $0 + 128 | 0; //@line 1442
 _equeue_mutex_lock($24); //@line 1443
 $25 = HEAP32[$0 >> 2] | 0; //@line 1444
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 1448
   label = 5; //@line 1449
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 1451
   $$053 = $0; //@line 1452
   $29 = $25; //@line 1452
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 1461
    $34 = HEAP32[$33 >> 2] | 0; //@line 1462
    if (!$34) {
     $$051$ph = $33; //@line 1465
     label = 5; //@line 1466
     break L1;
    } else {
     $$053 = $33; //@line 1469
     $29 = $34; //@line 1469
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 1477
    HEAP32[$49 >> 2] = $29; //@line 1478
    HEAP32[$29 + 16 >> 2] = $49; //@line 1480
    $$0515859 = $$053; //@line 1481
    label = 11; //@line 1482
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 1486
   $43 = $1 + 8 | 0; //@line 1487
   HEAP32[$43 >> 2] = $42; //@line 1488
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 1492
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 1494
   $47 = $1 + 12 | 0; //@line 1495
   HEAP32[$47 >> 2] = $46; //@line 1496
   HEAP32[$46 + 16 >> 2] = $47; //@line 1498
   $$05157 = $$053; //@line 1499
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 1504
  $$0515859 = $$051$ph; //@line 1505
  label = 11; //@line 1506
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 1510
  $$05157 = $$0515859; //@line 1511
 }
 HEAP32[$$05157 >> 2] = $1; //@line 1513
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 1515
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 1517
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 1520
  return $13 | 0; //@line 1521
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 1527
  return $13 | 0; //@line 1528
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 1533
  return $13 | 0; //@line 1534
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 1540
  return $13 | 0; //@line 1541
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 1544
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1546
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1550
 FUNCTION_TABLE_vii[$54 & 7]($65, $67 & ~($67 >> 31)); //@line 1551
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 61; //@line 1554
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 1556
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 1558
  sp = STACKTOP; //@line 1559
  return 0; //@line 1560
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1562
 _equeue_mutex_unlock($24); //@line 1563
 return $13 | 0; //@line 1564
}
function __ZL37nsapi_dns_query_async_socket_callbackPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $26 = 0, $29 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10601
 STACKTOP = STACKTOP + 32 | 0; //@line 10602
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10602
 $1 = sp + 16 | 0; //@line 10603
 $2 = sp; //@line 10604
 if (!$0) {
  STACKTOP = sp; //@line 10607
  return;
 }
 $4 = $0 + 12 | 0; //@line 10609
 $5 = HEAP32[$4 >> 2] | 0; //@line 10610
 do {
  if (!$5) {
   $14 = 0; //@line 10614
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 10617
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10618
   FUNCTION_TABLE_vii[$8 & 7]($1, $0); //@line 10619
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 233; //@line 10622
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10624
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10626
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 10628
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 10630
    sp = STACKTOP; //@line 10631
    STACKTOP = sp; //@line 10632
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10634
    $14 = HEAP32[$4 >> 2] | 0; //@line 10636
    break;
   }
  }
 } while (0);
 $13 = $1 + 12 | 0; //@line 10641
 HEAP32[$13 >> 2] = $14; //@line 10642
 $16 = HEAP32[$0 + 16 >> 2] | 0; //@line 10644
 HEAP32[$2 + 8 >> 2] = 0; //@line 10646
 HEAP32[$2 >> 2] = 234; //@line 10647
 HEAP32[$2 + 4 >> 2] = $16; //@line 10649
 $18 = $2 + 12 | 0; //@line 10650
 HEAP32[$18 >> 2] = 776; //@line 10651
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10652
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 10653
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 235; //@line 10656
  HEAP32[$AsyncCtx10 + 4 >> 2] = $18; //@line 10658
  HEAP32[$AsyncCtx10 + 8 >> 2] = $13; //@line 10660
  HEAP32[$AsyncCtx10 + 12 >> 2] = $2; //@line 10662
  HEAP32[$AsyncCtx10 + 16 >> 2] = $1; //@line 10664
  sp = STACKTOP; //@line 10665
  STACKTOP = sp; //@line 10666
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10668
 $23 = HEAP32[$18 >> 2] | 0; //@line 10669
 do {
  if ($23 | 0) {
   $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 10674
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10675
   FUNCTION_TABLE_vi[$26 & 511]($2); //@line 10676
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 236; //@line 10679
    HEAP32[$AsyncCtx3 + 4 >> 2] = $13; //@line 10681
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 10683
    sp = STACKTOP; //@line 10684
    STACKTOP = sp; //@line 10685
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10687
    break;
   }
  }
 } while (0);
 $29 = HEAP32[$13 >> 2] | 0; //@line 10692
 if (!$29) {
  STACKTOP = sp; //@line 10695
  return;
 }
 $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 10698
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10699
 FUNCTION_TABLE_vi[$32 & 511]($1); //@line 10700
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 237; //@line 10703
  sp = STACKTOP; //@line 10704
  STACKTOP = sp; //@line 10705
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10707
 STACKTOP = sp; //@line 10708
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 14011
 STACKTOP = STACKTOP + 48 | 0; //@line 14012
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14012
 $vararg_buffer10 = sp + 32 | 0; //@line 14013
 $vararg_buffer7 = sp + 24 | 0; //@line 14014
 $vararg_buffer3 = sp + 16 | 0; //@line 14015
 $vararg_buffer = sp; //@line 14016
 $0 = sp + 36 | 0; //@line 14017
 $1 = ___cxa_get_globals_fast() | 0; //@line 14018
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 14021
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 14026
   $9 = HEAP32[$7 >> 2] | 0; //@line 14028
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 14031
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 7156; //@line 14037
    _abort_message(7106, $vararg_buffer7); //@line 14038
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 14047
   } else {
    $22 = $3 + 80 | 0; //@line 14049
   }
   HEAP32[$0 >> 2] = $22; //@line 14051
   $23 = HEAP32[$3 >> 2] | 0; //@line 14052
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 14054
   $28 = HEAP32[(HEAP32[30] | 0) + 16 >> 2] | 0; //@line 14057
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14058
   $29 = FUNCTION_TABLE_iiii[$28 & 31](120, $23, $0) | 0; //@line 14059
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 327; //@line 14062
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14064
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 14066
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 14068
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 14070
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 14072
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 14074
    sp = STACKTOP; //@line 14075
    STACKTOP = sp; //@line 14076
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14078
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 7156; //@line 14080
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 14082
    _abort_message(7065, $vararg_buffer3); //@line 14083
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 14086
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 14089
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14090
   $40 = FUNCTION_TABLE_ii[$39 & 31]($36) | 0; //@line 14091
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 328; //@line 14094
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 14096
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 14098
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 14100
    sp = STACKTOP; //@line 14101
    STACKTOP = sp; //@line 14102
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14104
    HEAP32[$vararg_buffer >> 2] = 7156; //@line 14105
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 14107
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 14109
    _abort_message(7020, $vararg_buffer); //@line 14110
   }
  }
 }
 _abort_message(7144, $vararg_buffer10); //@line 14115
}
function _main__async_cb_99($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2125
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2127
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2129
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2131
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2133
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2135
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2137
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2139
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2141
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2143
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2147
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2151
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2155
 $30 = __ZN17EthernetInterface11get_gatewayEv(788) | 0; //@line 2156
 HEAP32[$18 >> 2] = $16 | 0 ? $16 : 4142; //@line 2159
 _printf(4147, $18) | 0; //@line 2160
 HEAP32[$22 >> 2] = $AsyncRetVal | 0 ? $AsyncRetVal : 4142; //@line 2163
 _printf(4163, $22) | 0; //@line 2164
 HEAP32[$26 >> 2] = $30 | 0 ? $30 : 4142; //@line 2167
 _printf(4180, $26) | 0; //@line 2168
 __ZN9TCPSocketC2Ev($2); //@line 2169
 $39 = HEAP32[(HEAP32[197] | 0) + 88 >> 2] | 0; //@line 2172
 $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 2173
 $40 = FUNCTION_TABLE_ii[$39 & 31](788) | 0; //@line 2174
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 2177
  $41 = $ReallocAsyncCtx + 4 | 0; //@line 2178
  HEAP32[$41 >> 2] = $2; //@line 2179
  $42 = $ReallocAsyncCtx + 8 | 0; //@line 2180
  HEAP32[$42 >> 2] = $2; //@line 2181
  $43 = $ReallocAsyncCtx + 12 | 0; //@line 2182
  HEAP32[$43 >> 2] = $8; //@line 2183
  $44 = $ReallocAsyncCtx + 16 | 0; //@line 2184
  HEAP32[$44 >> 2] = $10; //@line 2185
  $45 = $ReallocAsyncCtx + 20 | 0; //@line 2186
  HEAP32[$45 >> 2] = $12; //@line 2187
  $46 = $ReallocAsyncCtx + 24 | 0; //@line 2188
  HEAP32[$46 >> 2] = $14; //@line 2189
  $47 = $ReallocAsyncCtx + 28 | 0; //@line 2190
  HEAP32[$47 >> 2] = $2; //@line 2191
  $48 = $ReallocAsyncCtx + 32 | 0; //@line 2192
  HEAP32[$48 >> 2] = $4; //@line 2193
  $49 = $ReallocAsyncCtx + 36 | 0; //@line 2194
  HEAP32[$49 >> 2] = $6; //@line 2195
  sp = STACKTOP; //@line 2196
  return;
 }
 HEAP32[___async_retval >> 2] = $40; //@line 2200
 ___async_unwind = 0; //@line 2201
 HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 2202
 $41 = $ReallocAsyncCtx + 4 | 0; //@line 2203
 HEAP32[$41 >> 2] = $2; //@line 2204
 $42 = $ReallocAsyncCtx + 8 | 0; //@line 2205
 HEAP32[$42 >> 2] = $2; //@line 2206
 $43 = $ReallocAsyncCtx + 12 | 0; //@line 2207
 HEAP32[$43 >> 2] = $8; //@line 2208
 $44 = $ReallocAsyncCtx + 16 | 0; //@line 2209
 HEAP32[$44 >> 2] = $10; //@line 2210
 $45 = $ReallocAsyncCtx + 20 | 0; //@line 2211
 HEAP32[$45 >> 2] = $12; //@line 2212
 $46 = $ReallocAsyncCtx + 24 | 0; //@line 2213
 HEAP32[$46 >> 2] = $14; //@line 2214
 $47 = $ReallocAsyncCtx + 28 | 0; //@line 2215
 HEAP32[$47 >> 2] = $2; //@line 2216
 $48 = $ReallocAsyncCtx + 32 | 0; //@line 2217
 HEAP32[$48 >> 2] = $4; //@line 2218
 $49 = $ReallocAsyncCtx + 36 | 0; //@line 2219
 HEAP32[$49 >> 2] = $6; //@line 2220
 sp = STACKTOP; //@line 2221
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $35 = 0, $4 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2482
 STACKTOP = STACKTOP + 16 | 0; //@line 2483
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2483
 $4 = sp; //@line 2484
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2487
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 2488
 $8 = FUNCTION_TABLE_ii[$7 & 31]($0) | 0; //@line 2489
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 81; //@line 2492
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 2494
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 2496
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 2498
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 2500
  sp = STACKTOP; //@line 2501
  STACKTOP = sp; //@line 2502
  return 0; //@line 2502
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2504
 $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0; //@line 2507
 $16 = $2 + 12 | 0; //@line 2508
 $17 = HEAP32[$16 >> 2] | 0; //@line 2509
 do {
  if (!$17) {
   $28 = 0; //@line 2513
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 2516
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 2517
   FUNCTION_TABLE_vii[$20 & 7]($4, $2); //@line 2518
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 82; //@line 2521
    HEAP32[$AsyncCtx3 + 4 >> 2] = $16; //@line 2523
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 2525
    HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 2527
    HEAP32[$AsyncCtx3 + 16 >> 2] = $1; //@line 2529
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 2531
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 2533
    sp = STACKTOP; //@line 2534
    STACKTOP = sp; //@line 2535
    return 0; //@line 2535
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2537
    $28 = HEAP32[$16 >> 2] | 0; //@line 2539
    break;
   }
  }
 } while (0);
 $27 = $4 + 12 | 0; //@line 2544
 HEAP32[$27 >> 2] = $28; //@line 2545
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2546
 $29 = FUNCTION_TABLE_iiiii[$15 & 15]($8, $1, $4, $3) | 0; //@line 2547
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 83; //@line 2550
  HEAP32[$AsyncCtx6 + 4 >> 2] = $27; //@line 2552
  HEAP32[$AsyncCtx6 + 8 >> 2] = $4; //@line 2554
  sp = STACKTOP; //@line 2555
  STACKTOP = sp; //@line 2556
  return 0; //@line 2556
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2558
 $32 = HEAP32[$27 >> 2] | 0; //@line 2559
 if (!$32) {
  STACKTOP = sp; //@line 2562
  return $29 | 0; //@line 2562
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 2565
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2566
 FUNCTION_TABLE_vi[$35 & 511]($4); //@line 2567
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 84; //@line 2570
  HEAP32[$AsyncCtx10 + 4 >> 2] = $29; //@line 2572
  sp = STACKTOP; //@line 2573
  STACKTOP = sp; //@line 2574
  return 0; //@line 2574
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 2576
 STACKTOP = sp; //@line 2577
 return $29 | 0; //@line 2577
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1$i = 0, $14 = 0, $15 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 820
 $5 = $0 + -4 | 0; //@line 821
 $6 = $1 + 8 | 0; //@line 822
 do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   label = 7; //@line 827
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$6 >> 0] | 0)) {
     label = 7; //@line 835
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 841
   _puts(2646) | 0; //@line 842
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 53; //@line 845
    sp = STACKTOP; //@line 846
    return 0; //@line 847
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 849
   $$1$i = -3012; //@line 850
   return $$1$i | 0; //@line 851
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $14 = HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0; //@line 858
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 859
   $15 = FUNCTION_TABLE_iiii[$14 & 31]($5, $1, $2) | 0; //@line 860
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 54; //@line 863
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 865
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 867
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 869
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 871
    HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 873
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 875
    sp = STACKTOP; //@line 876
    return 0; //@line 877
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 879
   if (($15 | 0) < 0) {
    $$1$i = $15; //@line 882
    return $$1$i | 0; //@line 883
   } else {
    $23 = $1 + 12 | 0; //@line 885
    dest = $23; //@line 886
    src = $2; //@line 886
    stop = dest + 60 | 0; //@line 886
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 886
     dest = dest + 4 | 0; //@line 886
     src = src + 4 | 0; //@line 886
    } while ((dest | 0) < (stop | 0));
    HEAP16[$23 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 886
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 891
 _wait_ms(1); //@line 892
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 55; //@line 895
  HEAP32[$AsyncCtx10 + 4 >> 2] = $5; //@line 897
  HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 899
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 901
  HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 903
  HEAP32[$AsyncCtx10 + 20 >> 2] = $4; //@line 905
  sp = STACKTOP; //@line 906
  return 0; //@line 907
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 909
 $31 = HEAP32[(HEAP32[$5 >> 2] | 0) + 116 >> 2] | 0; //@line 912
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 913
 $32 = FUNCTION_TABLE_iiiii[$31 & 15]($5, $1, $3, $4) | 0; //@line 914
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 56; //@line 917
  sp = STACKTOP; //@line 918
  return 0; //@line 919
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 921
 $$1$i = $32; //@line 922
 return $$1$i | 0; //@line 923
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_169($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $42 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12242
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12244
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12246
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12248
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12250
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12252
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12254
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12256
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12258
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12260
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12262
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12264
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12266
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12268
 $42 = HEAP32[$26 >> 2] | 0; //@line 12269
 if (!$42) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 12272
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($2, 0, $4, 512) | 0; //@line 12273
  if (!___async) {
   HEAP32[___async_retval >> 2] = $27; //@line 12277
   ___async_unwind = 0; //@line 12278
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 12280
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 12282
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 12284
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 12286
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 12288
  HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 12290
  HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 12292
  HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 12294
  HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 12296
  HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 12298
  HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 12300
  HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 12302
  HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 12304
  HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 12306
  sp = STACKTOP; //@line 12307
  return;
 } else {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 12311
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 12312
  FUNCTION_TABLE_vi[$45 & 511]($24); //@line 12313
  if (!___async) {
   ___async_unwind = 0; //@line 12316
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 248; //@line 12318
  HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 12320
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 12322
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 12324
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 12326
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 12328
  HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 12330
  HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 12332
  HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 12334
  HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 12336
  HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 12338
  HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 12340
  HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 12342
  HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $26; //@line 12344
  sp = STACKTOP; //@line 12345
  return;
 }
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16939
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16941
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16943
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16945
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[1965] | 0)) {
  _serial_init(7864, 2, 3); //@line 16953
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 16955
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 16961
  _serial_putc(7864, $9 << 24 >> 24); //@line 16962
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 16965
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 16966
   HEAP32[$18 >> 2] = 0; //@line 16967
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 16968
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 16969
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 16970
   HEAP32[$20 >> 2] = $2; //@line 16971
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 16972
   HEAP8[$21 >> 0] = $9; //@line 16973
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 16974
   HEAP32[$22 >> 2] = $4; //@line 16975
   sp = STACKTOP; //@line 16976
   return;
  }
  ___async_unwind = 0; //@line 16979
  HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 16980
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 16981
  HEAP32[$18 >> 2] = 0; //@line 16982
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 16983
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 16984
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 16985
  HEAP32[$20 >> 2] = $2; //@line 16986
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 16987
  HEAP8[$21 >> 0] = $9; //@line 16988
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 16989
  HEAP32[$22 >> 2] = $4; //@line 16990
  sp = STACKTOP; //@line 16991
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 16994
  _serial_putc(7864, 13); //@line 16995
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 16998
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 16999
   HEAP8[$12 >> 0] = $9; //@line 17000
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 17001
   HEAP32[$13 >> 2] = 0; //@line 17002
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 17003
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 17004
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 17005
   HEAP32[$15 >> 2] = $2; //@line 17006
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 17007
   HEAP32[$16 >> 2] = $4; //@line 17008
   sp = STACKTOP; //@line 17009
   return;
  }
  ___async_unwind = 0; //@line 17012
  HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 17013
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 17014
  HEAP8[$12 >> 0] = $9; //@line 17015
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 17016
  HEAP32[$13 >> 2] = 0; //@line 17017
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 17018
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 17019
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 17020
  HEAP32[$15 >> 2] = $2; //@line 17021
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 17022
  HEAP32[$16 >> 2] = $4; //@line 17023
  sp = STACKTOP; //@line 17024
  return;
 }
}
function _mbed_error_vfprintf__async_cb_201($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17032
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17036
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17038
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17042
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 17043
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 17049
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 17055
  _serial_putc(7864, $13 << 24 >> 24); //@line 17056
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 17059
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 17060
   HEAP32[$22 >> 2] = $12; //@line 17061
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 17062
   HEAP32[$23 >> 2] = $4; //@line 17063
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 17064
   HEAP32[$24 >> 2] = $6; //@line 17065
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 17066
   HEAP8[$25 >> 0] = $13; //@line 17067
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 17068
   HEAP32[$26 >> 2] = $10; //@line 17069
   sp = STACKTOP; //@line 17070
   return;
  }
  ___async_unwind = 0; //@line 17073
  HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 17074
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 17075
  HEAP32[$22 >> 2] = $12; //@line 17076
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 17077
  HEAP32[$23 >> 2] = $4; //@line 17078
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 17079
  HEAP32[$24 >> 2] = $6; //@line 17080
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 17081
  HEAP8[$25 >> 0] = $13; //@line 17082
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 17083
  HEAP32[$26 >> 2] = $10; //@line 17084
  sp = STACKTOP; //@line 17085
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 17088
  _serial_putc(7864, 13); //@line 17089
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 17092
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 17093
   HEAP8[$16 >> 0] = $13; //@line 17094
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 17095
   HEAP32[$17 >> 2] = $12; //@line 17096
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 17097
   HEAP32[$18 >> 2] = $4; //@line 17098
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 17099
   HEAP32[$19 >> 2] = $6; //@line 17100
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 17101
   HEAP32[$20 >> 2] = $10; //@line 17102
   sp = STACKTOP; //@line 17103
   return;
  }
  ___async_unwind = 0; //@line 17106
  HEAP32[$ReallocAsyncCtx3 >> 2] = 286; //@line 17107
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 17108
  HEAP8[$16 >> 0] = $13; //@line 17109
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 17110
  HEAP32[$17 >> 2] = $12; //@line 17111
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 17112
  HEAP32[$18 >> 2] = $4; //@line 17113
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 17114
  HEAP32[$19 >> 2] = $6; //@line 17115
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 17116
  HEAP32[$20 >> 2] = $10; //@line 17117
  sp = STACKTOP; //@line 17118
  return;
 }
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9697
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9699
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9701
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9703
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9705
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9707
 $12 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 4 >> 2] | 0; //@line 9710
 $13 = $2 + 12 | 0; //@line 9711
 $14 = HEAP32[$13 >> 2] | 0; //@line 9712
 if (!$14) {
  $24 = $4 + 12 | 0; //@line 9715
  HEAP32[$24 >> 2] = 0; //@line 9716
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 9717
  $25 = FUNCTION_TABLE_iiiii[$12 & 15]($AsyncRetVal, $6, $4, $8) | 0; //@line 9718
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 9721
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 9722
   HEAP32[$26 >> 2] = $24; //@line 9723
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 9724
   HEAP32[$27 >> 2] = $4; //@line 9725
   sp = STACKTOP; //@line 9726
   return;
  }
  HEAP32[___async_retval >> 2] = $25; //@line 9730
  ___async_unwind = 0; //@line 9731
  HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 9732
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 9733
  HEAP32[$26 >> 2] = $24; //@line 9734
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 9735
  HEAP32[$27 >> 2] = $4; //@line 9736
  sp = STACKTOP; //@line 9737
  return;
 } else {
  $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 9741
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 9742
  FUNCTION_TABLE_vii[$17 & 7]($4, $2); //@line 9743
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 82; //@line 9746
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 9747
   HEAP32[$18 >> 2] = $13; //@line 9748
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 9749
   HEAP32[$19 >> 2] = $4; //@line 9750
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 9751
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 9752
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 9753
   HEAP32[$21 >> 2] = $6; //@line 9754
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 9755
   HEAP32[$22 >> 2] = $8; //@line 9756
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 9757
   HEAP32[$23 >> 2] = $12; //@line 9758
   sp = STACKTOP; //@line 9759
   return;
  }
  ___async_unwind = 0; //@line 9762
  HEAP32[$ReallocAsyncCtx2 >> 2] = 82; //@line 9763
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 9764
  HEAP32[$18 >> 2] = $13; //@line 9765
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 9766
  HEAP32[$19 >> 2] = $4; //@line 9767
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 9768
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 9769
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 9770
  HEAP32[$21 >> 2] = $6; //@line 9771
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 9772
  HEAP32[$22 >> 2] = $8; //@line 9773
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 9774
  HEAP32[$23 >> 2] = $12; //@line 9775
  sp = STACKTOP; //@line 9776
  return;
 }
}
function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6766
 STACKTOP = STACKTOP + 16 | 0; //@line 6767
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6767
 $4 = sp; //@line 6768
 $$ = ($3 | 0) == 0 ? 8448 : $3; //@line 6770
 $6 = HEAP32[$$ >> 2] | 0; //@line 6771
 L1 : do {
  if (!$1) {
   if (!$6) {
    $$0 = 0; //@line 6777
   } else {
    label = 17; //@line 6779
   }
  } else {
   $$47 = ($0 | 0) == 0 ? $4 : $0; //@line 6783
   if (!$2) {
    $$0 = -2; //@line 6786
   } else {
    if (!$6) {
     $12 = HEAP8[$1 >> 0] | 0; //@line 6790
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$$47 >> 2] = $12 & 255; //@line 6794
      $$0 = $12 << 24 >> 24 != 0 & 1; //@line 6797
      break;
     }
     $21 = (HEAP32[HEAP32[(___pthread_self_913() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 6804
     $22 = HEAP8[$1 >> 0] | 0; //@line 6805
     if ($21) {
      HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343; //@line 6809
      $$0 = 1; //@line 6810
      break;
     }
     $26 = ($22 & 255) + -194 | 0; //@line 6814
     if ($26 >>> 0 > 50) {
      label = 17; //@line 6817
      break;
     }
     $30 = HEAP32[1908 + ($26 << 2) >> 2] | 0; //@line 6822
     $31 = $2 + -1 | 0; //@line 6823
     if (!$31) {
      $$2 = $30; //@line 6826
     } else {
      $$03952 = $1 + 1 | 0; //@line 6828
      $$04051 = $30; //@line 6828
      $$04350 = $31; //@line 6828
      label = 11; //@line 6829
     }
    } else {
     $$03952 = $1; //@line 6832
     $$04051 = $6; //@line 6832
     $$04350 = $2; //@line 6832
     label = 11; //@line 6833
    }
    L14 : do {
     if ((label | 0) == 11) {
      $33 = HEAP8[$$03952 >> 0] | 0; //@line 6837
      $35 = ($33 & 255) >>> 3; //@line 6839
      if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
       label = 17; //@line 6846
       break L1;
      } else {
       $$1 = $$03952; //@line 6849
       $$141 = $$04051; //@line 6849
       $$144 = $$04350; //@line 6849
       $44 = $33; //@line 6849
      }
      while (1) {
       $$1 = $$1 + 1 | 0; //@line 6853
       $$141 = ($44 & 255) + -128 | $$141 << 6; //@line 6856
       $$144 = $$144 + -1 | 0; //@line 6857
       if (($$141 | 0) >= 0) {
        break;
       }
       if (!$$144) {
        $$2 = $$141; //@line 6864
        break L14;
       }
       $44 = HEAP8[$$1 >> 0] | 0; //@line 6867
       if (($44 & -64) << 24 >> 24 != -128) {
        label = 17; //@line 6873
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0; //@line 6877
      HEAP32[$$47 >> 2] = $$141; //@line 6878
      $$0 = $2 - $$144 | 0; //@line 6880
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2; //@line 6884
    $$0 = -2; //@line 6885
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0; //@line 6890
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 6892
  $$0 = -1; //@line 6893
 }
 STACKTOP = sp; //@line 6895
 return $$0 | 0; //@line 6895
}
function __ZN6Socket4openEP12NetworkStack__async_cb_46($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18695
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18697
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18699
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18701
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18703
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18705
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18707
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18709
 $$pre = HEAP32[$2 >> 2] | 0; //@line 18710
 if ($$pre | 0) {
  $17 = HEAP32[$$pre + 4 >> 2] | 0; //@line 18714
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 18715
  FUNCTION_TABLE_vii[$17 & 7]($6, $8); //@line 18716
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 18719
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 18720
   HEAP32[$18 >> 2] = $2; //@line 18721
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 18722
   HEAP32[$19 >> 2] = $4; //@line 18723
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 18724
   HEAP32[$20 >> 2] = $8; //@line 18725
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 18726
   HEAP32[$21 >> 2] = $10; //@line 18727
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 18728
   HEAP32[$22 >> 2] = $12; //@line 18729
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 18730
   HEAP32[$23 >> 2] = $6; //@line 18731
   $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 18732
   HEAP32[$24 >> 2] = $14; //@line 18733
   sp = STACKTOP; //@line 18734
   return;
  }
  ___async_unwind = 0; //@line 18737
  HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 18738
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 18739
  HEAP32[$18 >> 2] = $2; //@line 18740
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 18741
  HEAP32[$19 >> 2] = $4; //@line 18742
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 18743
  HEAP32[$20 >> 2] = $8; //@line 18744
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 18745
  HEAP32[$21 >> 2] = $10; //@line 18746
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 18747
  HEAP32[$22 >> 2] = $12; //@line 18748
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 18749
  HEAP32[$23 >> 2] = $6; //@line 18750
  $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 18751
  HEAP32[$24 >> 2] = $14; //@line 18752
  sp = STACKTOP; //@line 18753
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 18756
 $25 = HEAP32[$10 >> 2] | 0; //@line 18757
 $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 84 >> 2] | 0; //@line 18760
 $29 = HEAP32[$12 >> 2] | 0; //@line 18761
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18762
 FUNCTION_TABLE_viiii[$28 & 7]($25, $29, 126, $6); //@line 18763
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 18766
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 18767
  HEAP32[$30 >> 2] = $14; //@line 18768
  sp = STACKTOP; //@line 18769
  return;
 }
 ___async_unwind = 0; //@line 18772
 HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 18773
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 18774
 HEAP32[$30 >> 2] = $14; //@line 18775
 sp = STACKTOP; //@line 18776
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1 = 0, $13 = 0, $14 = 0, $21 = 0, $28 = 0, $29 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 416
 $5 = $1 + 8 | 0; //@line 417
 do {
  if (!(HEAP8[$5 >> 0] | 0)) {
   label = 7; //@line 422
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$5 >> 0] | 0)) {
     label = 7; //@line 430
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 436
   _puts(2646) | 0; //@line 437
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 40; //@line 440
    sp = STACKTOP; //@line 441
    return 0; //@line 442
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 444
   $$1 = -3012; //@line 445
   return $$1 | 0; //@line 446
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 108 >> 2] | 0; //@line 453
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 454
   $14 = FUNCTION_TABLE_iiii[$13 & 31]($0, $1, $2) | 0; //@line 455
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 41; //@line 458
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 460
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 462
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 464
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 466
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 468
    sp = STACKTOP; //@line 469
    return 0; //@line 470
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 472
   if (($14 | 0) < 0) {
    $$1 = $14; //@line 475
    return $$1 | 0; //@line 476
   } else {
    $21 = $1 + 12 | 0; //@line 478
    dest = $21; //@line 479
    src = $2; //@line 479
    stop = dest + 60 | 0; //@line 479
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 479
     dest = dest + 4 | 0; //@line 479
     src = src + 4 | 0; //@line 479
    } while ((dest | 0) < (stop | 0));
    HEAP16[$21 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 479
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 484
 _wait_ms(1); //@line 485
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 42; //@line 488
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 490
  HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 492
  HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 494
  HEAP32[$AsyncCtx10 + 16 >> 2] = $4; //@line 496
  sp = STACKTOP; //@line 497
  return 0; //@line 498
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 500
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 116 >> 2] | 0; //@line 503
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 504
 $29 = FUNCTION_TABLE_iiiii[$28 & 15]($0, $1, $3, $4) | 0; //@line 505
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 43; //@line 508
  sp = STACKTOP; //@line 509
  return 0; //@line 510
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 512
 $$1 = $29; //@line 513
 return $$1 | 0; //@line 514
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4388
 STACKTOP = STACKTOP + 48 | 0; //@line 4389
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 4389
 $vararg_buffer3 = sp + 16 | 0; //@line 4390
 $vararg_buffer = sp; //@line 4391
 $3 = sp + 32 | 0; //@line 4392
 $4 = $0 + 28 | 0; //@line 4393
 $5 = HEAP32[$4 >> 2] | 0; //@line 4394
 HEAP32[$3 >> 2] = $5; //@line 4395
 $7 = $0 + 20 | 0; //@line 4397
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 4399
 HEAP32[$3 + 4 >> 2] = $9; //@line 4400
 HEAP32[$3 + 8 >> 2] = $1; //@line 4402
 HEAP32[$3 + 12 >> 2] = $2; //@line 4404
 $12 = $9 + $2 | 0; //@line 4405
 $13 = $0 + 60 | 0; //@line 4406
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 4409
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 4411
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 4413
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 4415
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 4419
  } else {
   $$04756 = 2; //@line 4421
   $$04855 = $12; //@line 4421
   $$04954 = $3; //@line 4421
   $27 = $17; //@line 4421
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 4427
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 4429
    $38 = $27 >>> 0 > $37 >>> 0; //@line 4430
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 4432
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 4434
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 4436
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 4439
    $44 = $$150 + 4 | 0; //@line 4440
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 4443
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 4446
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 4448
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 4450
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 4452
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 4455
     break L1;
    } else {
     $$04756 = $$1; //@line 4458
     $$04954 = $$150; //@line 4458
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 4462
   HEAP32[$4 >> 2] = 0; //@line 4463
   HEAP32[$7 >> 2] = 0; //@line 4464
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 4467
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 4470
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 4475
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 4481
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4486
  $25 = $20; //@line 4487
  HEAP32[$4 >> 2] = $25; //@line 4488
  HEAP32[$7 >> 2] = $25; //@line 4489
  $$051 = $2; //@line 4490
 }
 STACKTOP = sp; //@line 4492
 return $$051 | 0; //@line 4492
}
function __ZN9TCPSocket4sendEPKvj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $22 = 0, $3 = 0, $32 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5569
 $3 = $0 + 57 | 0; //@line 5570
 do {
  if (HEAP8[$3 >> 0] | 0) {
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5575
   _mbed_assert_internal(3736, 3756, 125); //@line 5576
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 144; //@line 5579
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 5581
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5583
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5585
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 5587
    sp = STACKTOP; //@line 5588
    return 0; //@line 5589
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5591
    break;
   }
  }
 } while (0);
 HEAP8[$3 >> 0] = 1; //@line 5596
 $10 = $0 + 8 | 0; //@line 5597
 $11 = $0 + 52 | 0; //@line 5598
 $12 = $0 + 4 | 0; //@line 5599
 $13 = $0 + 12 | 0; //@line 5600
 $$0 = 0; //@line 5601
 while (1) {
  $14 = HEAP32[$10 >> 2] | 0; //@line 5603
  if (!$14) {
   $$024 = -3005; //@line 5606
   $$2 = $$0; //@line 5606
   label = 13; //@line 5607
   break;
  }
  HEAP32[$11 >> 2] = 0; //@line 5610
  $16 = HEAP32[$12 >> 2] | 0; //@line 5611
  $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 68 >> 2] | 0; //@line 5614
  $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 5617
  $22 = FUNCTION_TABLE_iiiii[$19 & 15]($16, $14, $1 + $$0 | 0, $2 - $$0 | 0) | 0; //@line 5618
  if (___async) {
   label = 8; //@line 5621
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5624
  if (($22 | 0) > -1) {
   $32 = $22 + $$0 | 0; //@line 5627
   if ($32 >>> 0 < $2 >>> 0) {
    $$1 = $32; //@line 5630
   } else {
    $$024 = $22; //@line 5632
    $$2 = $32; //@line 5632
    label = 13; //@line 5633
    break;
   }
  } else {
   $$1 = $$0; //@line 5637
  }
  if (!(HEAP32[$13 >> 2] | 0)) {
   $$024 = $22; //@line 5642
   $$2 = $$1; //@line 5642
   label = 13; //@line 5643
   break;
  }
  if (($22 | 0) != -3001 & ($22 | 0) < 0) {
   $$024 = $22; //@line 5650
   $$2 = $$1; //@line 5650
   label = 13; //@line 5651
   break;
  } else {
   $$0 = $$1; //@line 5654
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx >> 2] = 145; //@line 5658
  HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 5660
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5662
  HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 5664
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 5666
  HEAP32[$AsyncCtx + 20 >> 2] = $10; //@line 5668
  HEAP32[$AsyncCtx + 24 >> 2] = $11; //@line 5670
  HEAP32[$AsyncCtx + 28 >> 2] = $12; //@line 5672
  HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 5674
  sp = STACKTOP; //@line 5675
  return 0; //@line 5676
 } else if ((label | 0) == 13) {
  HEAP8[$3 >> 0] = 0; //@line 5679
  return (($$024 | 0) < 1 & ($$024 | 0) != -3001 ? $$024 : ($$2 | 0) == 0 ? -3001 : $$2) | 0; //@line 5686
 }
 return 0; //@line 5688
}
function __ZN9TCPSocket4recvEPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10481
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10483
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10485
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10487
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10489
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10491
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10493
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10495
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10497
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$0 = $AsyncRetVal; //@line 10503
  HEAP8[$4 >> 0] = 0; //@line 10504
  $34 = ___async_retval; //@line 10505
  HEAP32[$34 >> 2] = $$0; //@line 10506
  return;
 }
 $16 = HEAP32[$6 >> 2] | 0; //@line 10509
 if (!$16) {
  $$0 = -3005; //@line 10512
  HEAP8[$4 >> 0] = 0; //@line 10513
  $34 = ___async_retval; //@line 10514
  HEAP32[$34 >> 2] = $$0; //@line 10515
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 10518
 $18 = HEAP32[$10 >> 2] | 0; //@line 10519
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 72 >> 2] | 0; //@line 10522
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 10523
 $22 = FUNCTION_TABLE_iiiii[$21 & 15]($18, $16, $12, $14) | 0; //@line 10524
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 10527
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 10528
  HEAP32[$23 >> 2] = $2; //@line 10529
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 10530
  HEAP32[$24 >> 2] = $4; //@line 10531
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 10532
  HEAP32[$25 >> 2] = $6; //@line 10533
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 10534
  HEAP32[$26 >> 2] = $8; //@line 10535
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 10536
  HEAP32[$27 >> 2] = $10; //@line 10537
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 10538
  HEAP32[$28 >> 2] = $12; //@line 10539
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 10540
  HEAP32[$29 >> 2] = $14; //@line 10541
  sp = STACKTOP; //@line 10542
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 10546
 ___async_unwind = 0; //@line 10547
 HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 10548
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 10549
 HEAP32[$23 >> 2] = $2; //@line 10550
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 10551
 HEAP32[$24 >> 2] = $4; //@line 10552
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 10553
 HEAP32[$25 >> 2] = $6; //@line 10554
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 10555
 HEAP32[$26 >> 2] = $8; //@line 10556
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 10557
 HEAP32[$27 >> 2] = $10; //@line 10558
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 10559
 HEAP32[$28 >> 2] = $12; //@line 10560
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 10561
 HEAP32[$29 >> 2] = $14; //@line 10562
 sp = STACKTOP; //@line 10563
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$09 = 0, $$1 = 0, $$byval_copy = 0, $12 = 0, $13 = 0, $22 = 0, $4 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2676
 STACKTOP = STACKTOP + 112 | 0; //@line 2677
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 2677
 $$byval_copy = sp + 88 | 0; //@line 2678
 $4 = sp + 24 | 0; //@line 2679
 $5 = sp; //@line 2680
 $7 = ($3 | 0) == 0; //@line 2682
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, $1) | 0) {
  if (!$7) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($2) | 0) != ($3 | 0)) {
    $$09 = -3009; //@line 2688
    STACKTOP = sp; //@line 2689
    return $$09 | 0; //@line 2689
   }
  }
  $$09 = 0; //@line 2692
  STACKTOP = sp; //@line 2693
  return $$09 | 0; //@line 2693
 }
 if ($7) {
  HEAP32[$5 >> 2] = 0; //@line 2696
  HEAP32[$5 + 4 >> 2] = 0; //@line 2696
  HEAP32[$5 + 8 >> 2] = 0; //@line 2696
  HEAP32[$5 + 12 >> 2] = 0; //@line 2696
  HEAP32[$5 + 16 >> 2] = 0; //@line 2696
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 2697
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 2697
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 2697
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 2697
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 2697
  __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 0); //@line 2698
  $12 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 2701
  $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 2702
  $13 = FUNCTION_TABLE_ii[$12 & 31]($0) | 0; //@line 2703
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 89; //@line 2706
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 2708
   HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 2710
   HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 2712
   HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 2714
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 2716
   HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 2718
   sp = STACKTOP; //@line 2719
   STACKTOP = sp; //@line 2720
   return 0; //@line 2720
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2722
  if (__ZN13SocketAddress14set_ip_addressEPKc($4, $13) | 0) {
   $$0 = __ZNK13SocketAddress14get_ip_versionEv($4) | 0; //@line 2726
  } else {
   $$0 = 0; //@line 2728
  }
  $$1 = $$0; //@line 2730
 } else {
  $$1 = $3; //@line 2732
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2734
 $22 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $$1) | 0; //@line 2735
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 90; //@line 2738
  sp = STACKTOP; //@line 2739
  STACKTOP = sp; //@line 2740
  return 0; //@line 2740
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2742
 $$09 = $22; //@line 2743
 STACKTOP = sp; //@line 2744
 return $$09 | 0; //@line 2744
}
function __ZN9TCPSocket7connectEPKct__async_cb_125($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8624
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8626
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8628
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8630
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8632
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8634
 HEAP8[$2 >> 0] = 1; //@line 8635
 $11 = $4 + 8 | 0; //@line 8636
 $12 = $4 + 52 | 0; //@line 8637
 $13 = $4 + 12 | 0; //@line 8638
 $14 = HEAP32[$11 >> 2] | 0; //@line 8639
 if (!$14) {
  HEAP8[$2 >> 0] = 0; //@line 8642
  HEAP32[___async_retval >> 2] = 0 & -3005 == -3015 ? 0 : -3005; //@line 8647
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 8650
 $16 = HEAP32[$6 >> 2] | 0; //@line 8651
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 60 >> 2] | 0; //@line 8654
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 8655
 $20 = FUNCTION_TABLE_iiii[$19 & 31]($16, $14, $8) | 0; //@line 8656
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 8659
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 8660
  HEAP32[$21 >> 2] = $13; //@line 8661
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 8662
  HEAP32[$22 >> 2] = $11; //@line 8663
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 8664
  HEAP32[$23 >> 2] = $2; //@line 8665
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 8666
  $$expand_i1_val = 0; //@line 8667
  HEAP8[$24 >> 0] = $$expand_i1_val; //@line 8668
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 8669
  HEAP32[$25 >> 2] = $10; //@line 8670
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 8671
  HEAP32[$26 >> 2] = $12; //@line 8672
  $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 8673
  HEAP32[$27 >> 2] = $6; //@line 8674
  $28 = $ReallocAsyncCtx2 + 32 | 0; //@line 8675
  HEAP32[$28 >> 2] = $8; //@line 8676
  sp = STACKTOP; //@line 8677
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 8681
 ___async_unwind = 0; //@line 8682
 HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 8683
 $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 8684
 HEAP32[$21 >> 2] = $13; //@line 8685
 $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 8686
 HEAP32[$22 >> 2] = $11; //@line 8687
 $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 8688
 HEAP32[$23 >> 2] = $2; //@line 8689
 $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 8690
 $$expand_i1_val = 0; //@line 8691
 HEAP8[$24 >> 0] = $$expand_i1_val; //@line 8692
 $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 8693
 HEAP32[$25 >> 2] = $10; //@line 8694
 $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 8695
 HEAP32[$26 >> 2] = $12; //@line 8696
 $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 8697
 HEAP32[$27 >> 2] = $6; //@line 8698
 $28 = $ReallocAsyncCtx2 + 32 | 0; //@line 8699
 HEAP32[$28 >> 2] = $8; //@line 8700
 sp = STACKTOP; //@line 8701
 return;
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18920
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18922
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18924
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18926
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18928
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18930
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18932
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18934
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18936
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 18942
  $34 = ___async_retval; //@line 18943
  HEAP32[$34 >> 2] = $$2; //@line 18944
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 18947
 if (!$16) {
  $$2 = -3005; //@line 18950
  $34 = ___async_retval; //@line 18951
  HEAP32[$34 >> 2] = $$2; //@line 18952
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 18955
 $18 = HEAP32[$8 >> 2] | 0; //@line 18956
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 80 >> 2] | 0; //@line 18959
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 18960
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 18961
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 154; //@line 18964
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 18965
  HEAP32[$23 >> 2] = $2; //@line 18966
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 18967
  HEAP32[$24 >> 2] = $4; //@line 18968
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 18969
  HEAP32[$25 >> 2] = $6; //@line 18970
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 18971
  HEAP32[$26 >> 2] = $8; //@line 18972
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 18973
  HEAP32[$27 >> 2] = $10; //@line 18974
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 18975
  HEAP32[$28 >> 2] = $12; //@line 18976
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 18977
  HEAP32[$29 >> 2] = $14; //@line 18978
  sp = STACKTOP; //@line 18979
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 18983
 ___async_unwind = 0; //@line 18984
 HEAP32[$ReallocAsyncCtx >> 2] = 154; //@line 18985
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 18986
 HEAP32[$23 >> 2] = $2; //@line 18987
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 18988
 HEAP32[$24 >> 2] = $4; //@line 18989
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 18990
 HEAP32[$25 >> 2] = $6; //@line 18991
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 18992
 HEAP32[$26 >> 2] = $8; //@line 18993
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 18994
 HEAP32[$27 >> 2] = $10; //@line 18995
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 18996
 HEAP32[$28 >> 2] = $12; //@line 18997
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 18998
 HEAP32[$29 >> 2] = $14; //@line 18999
 sp = STACKTOP; //@line 19000
 return;
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18197
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18199
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18201
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18203
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18205
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18207
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18209
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18211
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18213
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 18219
  $34 = ___async_retval; //@line 18220
  HEAP32[$34 >> 2] = $$2; //@line 18221
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 18224
 if (!$16) {
  $$2 = -3005; //@line 18227
  $34 = ___async_retval; //@line 18228
  HEAP32[$34 >> 2] = $$2; //@line 18229
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 18232
 $18 = HEAP32[$8 >> 2] | 0; //@line 18233
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 76 >> 2] | 0; //@line 18236
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 18237
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 18238
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 153; //@line 18241
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 18242
  HEAP32[$23 >> 2] = $2; //@line 18243
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 18244
  HEAP32[$24 >> 2] = $4; //@line 18245
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 18246
  HEAP32[$25 >> 2] = $6; //@line 18247
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 18248
  HEAP32[$26 >> 2] = $8; //@line 18249
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 18250
  HEAP32[$27 >> 2] = $10; //@line 18251
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 18252
  HEAP32[$28 >> 2] = $12; //@line 18253
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 18254
  HEAP32[$29 >> 2] = $14; //@line 18255
  sp = STACKTOP; //@line 18256
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 18260
 ___async_unwind = 0; //@line 18261
 HEAP32[$ReallocAsyncCtx >> 2] = 153; //@line 18262
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 18263
 HEAP32[$23 >> 2] = $2; //@line 18264
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 18265
 HEAP32[$24 >> 2] = $4; //@line 18266
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 18267
 HEAP32[$25 >> 2] = $6; //@line 18268
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 18269
 HEAP32[$26 >> 2] = $8; //@line 18270
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 18271
 HEAP32[$27 >> 2] = $10; //@line 18272
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 18273
 HEAP32[$28 >> 2] = $12; //@line 18274
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 18275
 HEAP32[$29 >> 2] = $14; //@line 18276
 sp = STACKTOP; //@line 18277
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_35($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17754
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17758
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17760
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17762
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17764
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17766
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17767
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 17771
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 17772
  FUNCTION_TABLE_vi[$16 & 511]($6); //@line 17773
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 17776
   $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 17777
   HEAP32[$17 >> 2] = $4; //@line 17778
   $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 17779
   HEAP32[$18 >> 2] = $8; //@line 17780
   $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 17781
   HEAP32[$19 >> 2] = $10; //@line 17782
   $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 17783
   HEAP32[$20 >> 2] = $12; //@line 17784
   sp = STACKTOP; //@line 17785
   return;
  }
  ___async_unwind = 0; //@line 17788
  HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 17789
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 17790
  HEAP32[$17 >> 2] = $4; //@line 17791
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 17792
  HEAP32[$18 >> 2] = $8; //@line 17793
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 17794
  HEAP32[$19 >> 2] = $10; //@line 17795
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 17796
  HEAP32[$20 >> 2] = $12; //@line 17797
  sp = STACKTOP; //@line 17798
  return;
 }
 $21 = HEAP32[$4 >> 2] | 0; //@line 17801
 if (!$21) {
  HEAP32[___async_retval >> 2] = $10; //@line 17805
  return;
 }
 $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 17809
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 17810
 FUNCTION_TABLE_vi[$24 & 511]($8); //@line 17811
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 17814
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 17815
  HEAP32[$25 >> 2] = $8; //@line 17816
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 17817
  HEAP32[$26 >> 2] = $10; //@line 17818
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 17819
  HEAP32[$27 >> 2] = $12; //@line 17820
  sp = STACKTOP; //@line 17821
  return;
 }
 ___async_unwind = 0; //@line 17824
 HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 17825
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 17826
 HEAP32[$25 >> 2] = $8; //@line 17827
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 17828
 HEAP32[$26 >> 2] = $10; //@line 17829
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 17830
 HEAP32[$27 >> 2] = $12; //@line 17831
 sp = STACKTOP; //@line 17832
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_81($0) {
 $0 = $0 | 0;
 var $$391 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 5
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22
 do {
  if (HEAP8[$0 + 4 >> 0] & 1) {
   $$391 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 26
  } else {
   $17 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 28
   if ($17 | 0) {
    __ZdlPv($17); //@line 31
   }
   $19 = HEAP32[$8 >> 2] | 0; //@line 33
   if ($19 | 0) {
    $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 37
    $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 38
    FUNCTION_TABLE_vi[$22 & 511]($12); //@line 39
    if (___async) {
     HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 42
     $23 = $ReallocAsyncCtx14 + 4 | 0; //@line 43
     HEAP32[$23 >> 2] = $10; //@line 44
     $24 = $ReallocAsyncCtx14 + 8 | 0; //@line 45
     HEAP32[$24 >> 2] = $14; //@line 46
     $25 = $ReallocAsyncCtx14 + 12 | 0; //@line 47
     HEAP32[$25 >> 2] = $16; //@line 48
     sp = STACKTOP; //@line 49
     return;
    }
    ___async_unwind = 0; //@line 52
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 53
    $23 = $ReallocAsyncCtx14 + 4 | 0; //@line 54
    HEAP32[$23 >> 2] = $10; //@line 55
    $24 = $ReallocAsyncCtx14 + 8 | 0; //@line 56
    HEAP32[$24 >> 2] = $14; //@line 57
    $25 = $ReallocAsyncCtx14 + 12 | 0; //@line 58
    HEAP32[$25 >> 2] = $16; //@line 59
    sp = STACKTOP; //@line 60
    return;
   }
   $27 = HEAP32[$10 + 28 >> 2] | 0; //@line 64
   if (!$27) {
    __ZdlPv($10); //@line 67
    $$391 = -3007; //@line 68
    break;
   }
   $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 72
   $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 73
   FUNCTION_TABLE_vi[$30 & 511]($14); //@line 74
   if (___async) {
    HEAP32[$ReallocAsyncCtx15 >> 2] = 190; //@line 77
    $31 = $ReallocAsyncCtx15 + 4 | 0; //@line 78
    HEAP32[$31 >> 2] = $10; //@line 79
    $32 = $ReallocAsyncCtx15 + 8 | 0; //@line 80
    HEAP32[$32 >> 2] = $16; //@line 81
    sp = STACKTOP; //@line 82
    return;
   }
   ___async_unwind = 0; //@line 85
   HEAP32[$ReallocAsyncCtx15 >> 2] = 190; //@line 86
   $31 = $ReallocAsyncCtx15 + 4 | 0; //@line 87
   HEAP32[$31 >> 2] = $10; //@line 88
   $32 = $ReallocAsyncCtx15 + 8 | 0; //@line 89
   HEAP32[$32 >> 2] = $16; //@line 90
   sp = STACKTOP; //@line 91
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$391; //@line 96
 return;
}
function __ZN9TCPSocket4sendEPKvj__async_cb_159($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11475
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11477
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11479
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11481
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11483
 HEAP8[$2 >> 0] = 1; //@line 11484
 $9 = $4 + 8 | 0; //@line 11485
 $10 = $4 + 52 | 0; //@line 11486
 $11 = $4 + 4 | 0; //@line 11487
 $12 = $4 + 12 | 0; //@line 11488
 $13 = HEAP32[$9 >> 2] | 0; //@line 11489
 if (!$13) {
  HEAP8[$2 >> 0] = 0; //@line 11492
  HEAP32[___async_retval >> 2] = -3005 < 1 & -3005 != -3001 ? -3005 : 0 == 0 ? -3001 : 0; //@line 11500
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 11503
 $15 = HEAP32[$11 >> 2] | 0; //@line 11504
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 68 >> 2] | 0; //@line 11507
 $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 11509
 $20 = FUNCTION_TABLE_iiiii[$18 & 15]($15, $13, $6, $8 - 0 | 0) | 0; //@line 11510
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 11513
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 11514
  HEAP32[$21 >> 2] = 0; //@line 11515
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 11516
  HEAP32[$22 >> 2] = $8; //@line 11517
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 11518
  HEAP32[$23 >> 2] = $12; //@line 11519
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 11520
  HEAP32[$24 >> 2] = $2; //@line 11521
  $25 = $ReallocAsyncCtx + 20 | 0; //@line 11522
  HEAP32[$25 >> 2] = $9; //@line 11523
  $26 = $ReallocAsyncCtx + 24 | 0; //@line 11524
  HEAP32[$26 >> 2] = $10; //@line 11525
  $27 = $ReallocAsyncCtx + 28 | 0; //@line 11526
  HEAP32[$27 >> 2] = $11; //@line 11527
  $28 = $ReallocAsyncCtx + 32 | 0; //@line 11528
  HEAP32[$28 >> 2] = $6; //@line 11529
  sp = STACKTOP; //@line 11530
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 11534
 ___async_unwind = 0; //@line 11535
 HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 11536
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 11537
 HEAP32[$21 >> 2] = 0; //@line 11538
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 11539
 HEAP32[$22 >> 2] = $8; //@line 11540
 $23 = $ReallocAsyncCtx + 12 | 0; //@line 11541
 HEAP32[$23 >> 2] = $12; //@line 11542
 $24 = $ReallocAsyncCtx + 16 | 0; //@line 11543
 HEAP32[$24 >> 2] = $2; //@line 11544
 $25 = $ReallocAsyncCtx + 20 | 0; //@line 11545
 HEAP32[$25 >> 2] = $9; //@line 11546
 $26 = $ReallocAsyncCtx + 24 | 0; //@line 11547
 HEAP32[$26 >> 2] = $10; //@line 11548
 $27 = $ReallocAsyncCtx + 28 | 0; //@line 11549
 HEAP32[$27 >> 2] = $11; //@line 11550
 $28 = $ReallocAsyncCtx + 32 | 0; //@line 11551
 HEAP32[$28 >> 2] = $6; //@line 11552
 sp = STACKTOP; //@line 11553
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_47($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18783
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18789
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18791
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18793
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18795
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18797
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 18798
 $15 = $$pre$i$i; //@line 18799
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 18800
 if (!$$pre$i$i) {
  $24 = HEAP32[$8 >> 2] | 0; //@line 18803
  $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 84 >> 2] | 0; //@line 18806
  $28 = HEAP32[$10 >> 2] | 0; //@line 18807
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18808
  FUNCTION_TABLE_viiii[$27 & 7]($24, $28, 126, $12); //@line 18809
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 18812
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 18813
   HEAP32[$29 >> 2] = $14; //@line 18814
   sp = STACKTOP; //@line 18815
   return;
  }
  ___async_unwind = 0; //@line 18818
  HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 18819
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 18820
  HEAP32[$29 >> 2] = $14; //@line 18821
  sp = STACKTOP; //@line 18822
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 18826
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 18827
  FUNCTION_TABLE_vi[$18 & 511]($6); //@line 18828
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 18831
   $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 18832
   HEAP32[$19 >> 2] = $6; //@line 18833
   $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 18834
   HEAP32[$20 >> 2] = $8; //@line 18835
   $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 18836
   HEAP32[$21 >> 2] = $10; //@line 18837
   $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 18838
   HEAP32[$22 >> 2] = $12; //@line 18839
   $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 18840
   HEAP32[$23 >> 2] = $14; //@line 18841
   sp = STACKTOP; //@line 18842
   return;
  }
  ___async_unwind = 0; //@line 18845
  HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 18846
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 18847
  HEAP32[$19 >> 2] = $6; //@line 18848
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 18849
  HEAP32[$20 >> 2] = $8; //@line 18850
  $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 18851
  HEAP32[$21 >> 2] = $10; //@line 18852
  $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 18853
  HEAP32[$22 >> 2] = $12; //@line 18854
  $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 18855
  HEAP32[$23 >> 2] = $14; //@line 18856
  sp = STACKTOP; //@line 18857
  return;
 }
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 12805
 STACKTOP = STACKTOP + 128 | 0; //@line 12806
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 12806
 $2 = sp; //@line 12807
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 12808
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 12809
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 285; //@line 12812
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 12814
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 12816
  sp = STACKTOP; //@line 12817
  STACKTOP = sp; //@line 12818
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 12820
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 12823
  return;
 }
 if (!(HEAP32[1965] | 0)) {
  _serial_init(7864, 2, 3); //@line 12828
  $$01213 = 0; //@line 12829
  $$014 = 0; //@line 12829
 } else {
  $$01213 = 0; //@line 12831
  $$014 = 0; //@line 12831
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 12835
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12840
   _serial_putc(7864, 13); //@line 12841
   if (___async) {
    label = 8; //@line 12844
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12847
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12850
  _serial_putc(7864, $$01213 << 24 >> 24); //@line 12851
  if (___async) {
   label = 11; //@line 12854
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12857
  $24 = $$014 + 1 | 0; //@line 12858
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 12861
   break;
  } else {
   $$014 = $24; //@line 12864
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 286; //@line 12868
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 12870
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 12872
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 12874
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 12876
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 12878
  sp = STACKTOP; //@line 12879
  STACKTOP = sp; //@line 12880
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 287; //@line 12883
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 12885
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 12887
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 12889
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 12891
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 12893
  sp = STACKTOP; //@line 12894
  STACKTOP = sp; //@line 12895
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 12898
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_106($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2685
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2689
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2691
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2693
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2695
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2697
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2699
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2701
 $$pre = HEAP32[$4 >> 2] | 0; //@line 2703
 $17 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 2704
 if ($$pre | 0) {
  $20 = HEAP32[$$pre + 4 >> 2] | 0; //@line 2708
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 2709
  FUNCTION_TABLE_vii[$20 & 7]($14, $12); //@line 2710
  if (!___async) {
   ___async_unwind = 0; //@line 2713
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 261; //@line 2715
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $16; //@line 2717
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 2719
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 2721
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $10; //@line 2723
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $17; //@line 2725
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $14; //@line 2727
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 2729
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $12; //@line 2731
  sp = STACKTOP; //@line 2732
  return;
 }
 $29 = $8 + 12 | 0; //@line 2735
 HEAP32[$29 >> 2] = 0; //@line 2736
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 2737
 $30 = FUNCTION_TABLE_iiii[$17 & 31]($6, $10, $8) | 0; //@line 2738
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 262; //@line 2741
  $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 2742
  HEAP32[$31 >> 2] = $29; //@line 2743
  $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 2744
  HEAP32[$32 >> 2] = $14; //@line 2745
  $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 2746
  HEAP32[$33 >> 2] = $4; //@line 2747
  $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 2748
  HEAP32[$34 >> 2] = $12; //@line 2749
  sp = STACKTOP; //@line 2750
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 2754
 ___async_unwind = 0; //@line 2755
 HEAP32[$ReallocAsyncCtx3 >> 2] = 262; //@line 2756
 $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 2757
 HEAP32[$31 >> 2] = $29; //@line 2758
 $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 2759
 HEAP32[$32 >> 2] = $14; //@line 2760
 $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 2761
 HEAP32[$33 >> 2] = $4; //@line 2762
 $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 2763
 HEAP32[$34 >> 2] = $12; //@line 2764
 sp = STACKTOP; //@line 2765
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_51($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19190
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19194
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19196
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 19198
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19200
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 19202
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19204
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19206
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19208
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19210
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 19213
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19215
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 19219
   $27 = $6 + 24 | 0; //@line 19220
   $28 = $4 + 8 | 0; //@line 19221
   $29 = $6 + 54 | 0; //@line 19222
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 19252
    HEAP8[$14 >> 0] = 0; //@line 19253
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 19254
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 19255
    if (!___async) {
     ___async_unwind = 0; //@line 19258
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 342; //@line 19260
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 19262
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 19264
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 19266
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 19268
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 19270
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 19272
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 19274
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 19276
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 19278
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 19280
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 19282
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 19284
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 19286
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 19289
    sp = STACKTOP; //@line 19290
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 19295
 HEAP8[$14 >> 0] = $12; //@line 19296
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19074
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19078
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19080
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 19082
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19084
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 19086
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19088
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19090
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19092
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19094
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19096
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19098
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19100
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 19103
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 19104
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 19137
    HEAP8[$14 >> 0] = 0; //@line 19138
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 19139
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 19140
    if (!___async) {
     ___async_unwind = 0; //@line 19143
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 342; //@line 19145
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 19147
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 19149
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 19151
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 19153
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 19155
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 19157
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 19159
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 19161
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 19163
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 19165
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 19167
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 19169
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 19171
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 19174
    sp = STACKTOP; //@line 19175
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 19180
 HEAP8[$14 >> 0] = $12; //@line 19181
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 17873
 }
 ret = dest | 0; //@line 17876
 dest_end = dest + num | 0; //@line 17877
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 17881
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 17882
   dest = dest + 1 | 0; //@line 17883
   src = src + 1 | 0; //@line 17884
   num = num - 1 | 0; //@line 17885
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 17887
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 17888
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 17890
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 17891
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 17892
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 17893
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 17894
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 17895
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 17896
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 17897
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 17898
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 17899
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 17900
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 17901
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 17902
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 17903
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 17904
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 17905
   dest = dest + 64 | 0; //@line 17906
   src = src + 64 | 0; //@line 17907
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 17910
   dest = dest + 4 | 0; //@line 17911
   src = src + 4 | 0; //@line 17912
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 17916
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 17918
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 17919
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 17920
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 17921
   dest = dest + 4 | 0; //@line 17922
   src = src + 4 | 0; //@line 17923
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 17928
  dest = dest + 1 | 0; //@line 17929
  src = src + 1 | 0; //@line 17930
 }
 return ret | 0; //@line 17932
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_132($0) {
 $0 = $0 | 0;
 var $$pre50 = 0, $10 = 0, $13 = 0, $15 = 0, $19 = 0, $20 = 0, $21 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9228
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9232
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 9233
 $$pre50 = HEAP32[$4 >> 2] | 0; //@line 9234
 $6 = HEAP32[$$pre50 + 64 >> 2] | 0; //@line 9236
 if (!$6) {
  $9 = $$pre50; //@line 9239
 } else {
  __ZdaPv($6); //@line 9241
  $9 = HEAP32[$4 >> 2] | 0; //@line 9243
 }
 $10 = HEAP32[$9 + 12 >> 2] | 0; //@line 9246
 if (!$10) {
  $13 = $9; //@line 9249
 } else {
  __ZdlPv($10); //@line 9251
  $13 = HEAP32[$4 >> 2] | 0; //@line 9253
 }
 do {
  if ($13 | 0) {
   $15 = HEAP32[$13 + 44 >> 2] | 0; //@line 9259
   if ($15 | 0) {
    $19 = HEAP32[$15 + 8 >> 2] | 0; //@line 9264
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 9265
    FUNCTION_TABLE_vi[$19 & 511]($13 + 32 | 0); //@line 9266
    if (___async) {
     HEAP32[$ReallocAsyncCtx3 >> 2] = 257; //@line 9269
     $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 9270
     HEAP32[$20 >> 2] = $13; //@line 9271
     $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 9272
     HEAP32[$21 >> 2] = $4; //@line 9273
     sp = STACKTOP; //@line 9274
     return;
    }
    ___async_unwind = 0; //@line 9277
    HEAP32[$ReallocAsyncCtx3 >> 2] = 257; //@line 9278
    $20 = $ReallocAsyncCtx3 + 4 | 0; //@line 9279
    HEAP32[$20 >> 2] = $13; //@line 9280
    $21 = $ReallocAsyncCtx3 + 8 | 0; //@line 9281
    HEAP32[$21 >> 2] = $4; //@line 9282
    sp = STACKTOP; //@line 9283
    return;
   }
   $23 = HEAP32[$13 + 28 >> 2] | 0; //@line 9287
   if (!$23) {
    __ZdlPv($13); //@line 9290
    break;
   }
   $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 9295
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 9296
   FUNCTION_TABLE_vi[$27 & 511]($13 + 16 | 0); //@line 9297
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 9300
    $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 9301
    HEAP32[$28 >> 2] = $13; //@line 9302
    $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 9303
    HEAP32[$29 >> 2] = $4; //@line 9304
    sp = STACKTOP; //@line 9305
    return;
   }
   ___async_unwind = 0; //@line 9308
   HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 9309
   $28 = $ReallocAsyncCtx4 + 4 | 0; //@line 9310
   HEAP32[$28 >> 2] = $13; //@line 9311
   $29 = $ReallocAsyncCtx4 + 8 | 0; //@line 9312
   HEAP32[$29 >> 2] = $4; //@line 9313
   sp = STACKTOP; //@line 9314
   return;
  }
 } while (0);
 HEAP32[$4 >> 2] = 0; //@line 9318
 HEAP32[___async_retval >> 2] = 0; //@line 9320
 return;
}
function ___stpcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $9 = 0, label = 0;
 $2 = $1; //@line 13468
 L1 : do {
  if (!(($2 ^ $0) & 3)) {
   if (!($2 & 3)) {
    $$026$lcssa = $1; //@line 13478
    $$027$lcssa = $0; //@line 13478
   } else {
    $$02642 = $1; //@line 13480
    $$02741 = $0; //@line 13480
    while (1) {
     $9 = HEAP8[$$02642 >> 0] | 0; //@line 13482
     HEAP8[$$02741 >> 0] = $9; //@line 13483
     if (!($9 << 24 >> 24)) {
      $$029 = $$02741; //@line 13486
      break L1;
     }
     $11 = $$02642 + 1 | 0; //@line 13489
     $12 = $$02741 + 1 | 0; //@line 13490
     if (!($11 & 3)) {
      $$026$lcssa = $11; //@line 13495
      $$027$lcssa = $12; //@line 13495
      break;
     } else {
      $$02642 = $11; //@line 13498
      $$02741 = $12; //@line 13498
     }
    }
   }
   $16 = HEAP32[$$026$lcssa >> 2] | 0; //@line 13502
   if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
    $$02536 = $$027$lcssa; //@line 13509
    $$037 = $$026$lcssa; //@line 13509
    $24 = $16; //@line 13509
    while (1) {
     $22 = $$037 + 4 | 0; //@line 13511
     $23 = $$02536 + 4 | 0; //@line 13512
     HEAP32[$$02536 >> 2] = $24; //@line 13513
     $24 = HEAP32[$22 >> 2] | 0; //@line 13514
     if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
      $$0$lcssa = $22; //@line 13523
      $$025$lcssa = $23; //@line 13523
      break;
     } else {
      $$02536 = $23; //@line 13521
      $$037 = $22; //@line 13521
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa; //@line 13528
    $$025$lcssa = $$027$lcssa; //@line 13528
   }
   $$1$ph = $$0$lcssa; //@line 13530
   $$128$ph = $$025$lcssa; //@line 13530
   label = 8; //@line 13531
  } else {
   $$1$ph = $1; //@line 13533
   $$128$ph = $0; //@line 13533
   label = 8; //@line 13534
  }
 } while (0);
 if ((label | 0) == 8) {
  $31 = HEAP8[$$1$ph >> 0] | 0; //@line 13538
  HEAP8[$$128$ph >> 0] = $31; //@line 13539
  if (!($31 << 24 >> 24)) {
   $$029 = $$128$ph; //@line 13542
  } else {
   $$12834 = $$128$ph; //@line 13544
   $$135 = $$1$ph; //@line 13544
   while (1) {
    $$135 = $$135 + 1 | 0; //@line 13546
    $34 = $$12834 + 1 | 0; //@line 13547
    $35 = HEAP8[$$135 >> 0] | 0; //@line 13548
    HEAP8[$34 >> 0] = $35; //@line 13549
    if (!($35 << 24 >> 24)) {
     $$029 = $34; //@line 13552
     break;
    } else {
     $$12834 = $34; //@line 13555
    }
   }
  }
 }
 return $$029 | 0; //@line 13560
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1270
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1276
   _wait_ms(10); //@line 1277
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 59; //@line 1280
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1282
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1284
    sp = STACKTOP; //@line 1285
    return 0; //@line 1286
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1288
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 1294
 $9 = $0 + 156 | 0; //@line 1295
 _equeue_mutex_lock($9); //@line 1296
 $10 = $0 + 24 | 0; //@line 1297
 $11 = HEAP32[$10 >> 2] | 0; //@line 1298
 L7 : do {
  if (!$11) {
   label = 11; //@line 1302
  } else {
   $$03842$i = $10; //@line 1304
   $14 = $11; //@line 1304
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 1311
    $21 = HEAP32[$20 >> 2] | 0; //@line 1312
    if (!$21) {
     label = 11; //@line 1315
     break L7;
    } else {
     $$03842$i = $20; //@line 1318
     $14 = $21; //@line 1318
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 1322
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 1325
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 1327
    $$038$sink$i = $17 + 8 | 0; //@line 1329
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 1333
   _equeue_mutex_unlock($9); //@line 1334
   $$1$i9 = $14; //@line 1335
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 1340
   $24 = HEAP32[$23 >> 2] | 0; //@line 1341
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 1344
    $$0 = 0; //@line 1345
    return $$0 | 0; //@line 1346
   } else {
    $26 = $0 + 32 | 0; //@line 1348
    $27 = HEAP32[$26 >> 2] | 0; //@line 1349
    HEAP32[$26 >> 2] = $27 + $8; //@line 1351
    HEAP32[$23 >> 2] = $24 - $8; //@line 1353
    HEAP32[$27 >> 2] = $8; //@line 1354
    HEAP8[$27 + 4 >> 0] = 1; //@line 1356
    _equeue_mutex_unlock($9); //@line 1357
    if (!$27) {
     $$0 = 0; //@line 1360
    } else {
     $$1$i9 = $27; //@line 1362
     break;
    }
    return $$0 | 0; //@line 1365
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 1370
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 1372
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 1374
 $$0 = $$1$i9 + 36 | 0; //@line 1376
 return $$0 | 0; //@line 1377
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 17180
 STACKTOP = STACKTOP + 32 | 0; //@line 17181
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17181
 $$byval_copy = sp; //@line 17182
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17184
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17186
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17188
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17190
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17192
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17194
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17196
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17198
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17200
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17202
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17204
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  HEAP8[$12 >> 0] = 5; //@line 17209
  $27 = 648 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 17212
  HEAP32[$$byval_copy >> 2] = HEAP32[$27 >> 2]; //@line 17213
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$27 + 4 >> 2]; //@line 17213
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$27 + 8 >> 2]; //@line 17213
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$27 + 12 >> 2]; //@line 17213
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$27 + 16 >> 2]; //@line 17213
  __ZN13SocketAddress8set_addrE10nsapi_addr($4, $$byval_copy); //@line 17214
 }
 __ZN13SocketAddress8set_portEt($4, 53); //@line 17216
 $28 = HEAP32[$6 >> 2] | 0; //@line 17217
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(48) | 0; //@line 17218
 $29 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($28, $4, $8, $10) | 0; //@line 17219
 if (!___async) {
  HEAP32[___async_retval >> 2] = $29; //@line 17223
  ___async_unwind = 0; //@line 17224
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 241; //@line 17226
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $2; //@line 17228
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $4; //@line 17230
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $6; //@line 17232
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $8; //@line 17234
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $10; //@line 17236
 HEAP32[$ReallocAsyncCtx4 + 24 >> 2] = $12; //@line 17238
 HEAP32[$ReallocAsyncCtx4 + 28 >> 2] = $14; //@line 17240
 HEAP32[$ReallocAsyncCtx4 + 32 >> 2] = $16; //@line 17242
 HEAP32[$ReallocAsyncCtx4 + 36 >> 2] = $18; //@line 17244
 HEAP32[$ReallocAsyncCtx4 + 40 >> 2] = $20; //@line 17246
 HEAP32[$ReallocAsyncCtx4 + 44 >> 2] = $22; //@line 17248
 sp = STACKTOP; //@line 17249
 STACKTOP = sp; //@line 17250
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_84($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $29 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 159
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 161
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 163
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 165
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 167
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 169
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 171
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 173
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 175
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 177
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 179
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 181
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 183
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 185
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 187
 if (!$AsyncRetVal) {
  HEAP32[___async_retval >> 2] = -3007; //@line 191
  return;
 }
 $29 = $AsyncRetVal + 16 | 0; //@line 194
 HEAP32[$29 >> 2] = 0; //@line 195
 HEAP32[$29 + 4 >> 2] = 0; //@line 195
 HEAP32[$29 + 8 >> 2] = 0; //@line 195
 HEAP32[$29 + 12 >> 2] = 0; //@line 195
 HEAP32[$29 + 16 >> 2] = 0; //@line 195
 HEAP32[$29 + 20 >> 2] = 0; //@line 195
 HEAP32[$29 + 24 >> 2] = 0; //@line 195
 HEAP32[$29 + 28 >> 2] = 0; //@line 195
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(60) | 0; //@line 199
 $33 = __ZnajRKSt9nothrow_t(($26 | 0) < -1 ? -1 : $26 + 1 | 0, 9760) | 0; //@line 200
 if (!___async) {
  HEAP32[___async_retval >> 2] = $33; //@line 204
  ___async_unwind = 0; //@line 205
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 173; //@line 207
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $AsyncRetVal; //@line 209
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $2; //@line 211
 HEAP32[$ReallocAsyncCtx17 + 12 >> 2] = $29; //@line 213
 HEAP32[$ReallocAsyncCtx17 + 16 >> 2] = $4; //@line 215
 HEAP32[$ReallocAsyncCtx17 + 20 >> 2] = $6; //@line 217
 HEAP32[$ReallocAsyncCtx17 + 24 >> 2] = $8; //@line 219
 HEAP32[$ReallocAsyncCtx17 + 28 >> 2] = $10; //@line 221
 HEAP32[$ReallocAsyncCtx17 + 32 >> 2] = $12; //@line 223
 HEAP32[$ReallocAsyncCtx17 + 36 >> 2] = $14; //@line 225
 HEAP32[$ReallocAsyncCtx17 + 40 >> 2] = $16; //@line 227
 HEAP32[$ReallocAsyncCtx17 + 44 >> 2] = $18; //@line 229
 HEAP32[$ReallocAsyncCtx17 + 48 >> 2] = $20; //@line 231
 HEAP32[$ReallocAsyncCtx17 + 52 >> 2] = $22; //@line 233
 HEAP32[$ReallocAsyncCtx17 + 56 >> 2] = $24; //@line 235
 sp = STACKTOP; //@line 236
 return;
}
function __ZN9TCPSocket4recvEPvj__async_cb_151($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10570
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10572
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10574
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10576
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10578
 HEAP8[$2 >> 0] = 1; //@line 10579
 $9 = $4 + 8 | 0; //@line 10580
 $10 = $4 + 52 | 0; //@line 10581
 $11 = $4 + 4 | 0; //@line 10582
 $12 = $4 + 12 | 0; //@line 10583
 $13 = HEAP32[$9 >> 2] | 0; //@line 10584
 if (!$13) {
  HEAP8[$2 >> 0] = 0; //@line 10587
  HEAP32[___async_retval >> 2] = -3005; //@line 10589
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 10592
 $15 = HEAP32[$11 >> 2] | 0; //@line 10593
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 72 >> 2] | 0; //@line 10596
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 10597
 $19 = FUNCTION_TABLE_iiiii[$18 & 15]($15, $13, $6, $8) | 0; //@line 10598
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 10601
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 10602
  HEAP32[$20 >> 2] = $12; //@line 10603
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 10604
  HEAP32[$21 >> 2] = $2; //@line 10605
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 10606
  HEAP32[$22 >> 2] = $9; //@line 10607
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 10608
  HEAP32[$23 >> 2] = $10; //@line 10609
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 10610
  HEAP32[$24 >> 2] = $11; //@line 10611
  $25 = $ReallocAsyncCtx + 24 | 0; //@line 10612
  HEAP32[$25 >> 2] = $6; //@line 10613
  $26 = $ReallocAsyncCtx + 28 | 0; //@line 10614
  HEAP32[$26 >> 2] = $8; //@line 10615
  sp = STACKTOP; //@line 10616
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 10620
 ___async_unwind = 0; //@line 10621
 HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 10622
 $20 = $ReallocAsyncCtx + 4 | 0; //@line 10623
 HEAP32[$20 >> 2] = $12; //@line 10624
 $21 = $ReallocAsyncCtx + 8 | 0; //@line 10625
 HEAP32[$21 >> 2] = $2; //@line 10626
 $22 = $ReallocAsyncCtx + 12 | 0; //@line 10627
 HEAP32[$22 >> 2] = $9; //@line 10628
 $23 = $ReallocAsyncCtx + 16 | 0; //@line 10629
 HEAP32[$23 >> 2] = $10; //@line 10630
 $24 = $ReallocAsyncCtx + 20 | 0; //@line 10631
 HEAP32[$24 >> 2] = $11; //@line 10632
 $25 = $ReallocAsyncCtx + 24 | 0; //@line 10633
 HEAP32[$25 >> 2] = $6; //@line 10634
 $26 = $ReallocAsyncCtx + 28 | 0; //@line 10635
 HEAP32[$26 >> 2] = $8; //@line 10636
 sp = STACKTOP; //@line 10637
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_164($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11895
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11899
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11901
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11903
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11905
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11906
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 11910
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 11911
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 11912
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 11915
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 11916
   HEAP32[$14 >> 2] = $4; //@line 11917
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 11918
   HEAP32[$15 >> 2] = $6; //@line 11919
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 11920
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 11921
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 11922
   HEAP32[$17 >> 2] = $8; //@line 11923
   sp = STACKTOP; //@line 11924
   return;
  }
  ___async_unwind = 0; //@line 11927
  HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 11928
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 11929
  HEAP32[$14 >> 2] = $4; //@line 11930
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 11931
  HEAP32[$15 >> 2] = $6; //@line 11932
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 11933
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 11934
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 11935
  HEAP32[$17 >> 2] = $8; //@line 11936
  sp = STACKTOP; //@line 11937
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 11940
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11944
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 11948
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 11949
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 11950
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 11953
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 11954
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 11955
  sp = STACKTOP; //@line 11956
  return;
 }
 ___async_unwind = 0; //@line 11959
 HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 11960
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 11961
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 11962
 sp = STACKTOP; //@line 11963
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14200
 STACKTOP = STACKTOP + 64 | 0; //@line 14201
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14201
 $3 = sp; //@line 14202
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 14205
 } else {
  if (!$1) {
   $$2 = 0; //@line 14209
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14211
   $6 = ___dynamic_cast($1, 144, 128, 0) | 0; //@line 14212
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 331; //@line 14215
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 14217
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14219
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 14221
    sp = STACKTOP; //@line 14222
    STACKTOP = sp; //@line 14223
    return 0; //@line 14223
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14225
   if (!$6) {
    $$2 = 0; //@line 14228
   } else {
    dest = $3 + 4 | 0; //@line 14231
    stop = dest + 52 | 0; //@line 14231
    do {
     HEAP32[dest >> 2] = 0; //@line 14231
     dest = dest + 4 | 0; //@line 14231
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 14232
    HEAP32[$3 + 8 >> 2] = $0; //@line 14234
    HEAP32[$3 + 12 >> 2] = -1; //@line 14236
    HEAP32[$3 + 48 >> 2] = 1; //@line 14238
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 14241
    $18 = HEAP32[$2 >> 2] | 0; //@line 14242
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14243
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 14244
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 332; //@line 14247
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14249
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14251
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14253
     sp = STACKTOP; //@line 14254
     STACKTOP = sp; //@line 14255
     return 0; //@line 14255
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14257
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 14264
     $$0 = 1; //@line 14265
    } else {
     $$0 = 0; //@line 14267
    }
    $$2 = $$0; //@line 14269
   }
  }
 }
 STACKTOP = sp; //@line 14273
 return $$2 | 0; //@line 14273
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_74($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $25 = 0, $27 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx19 = 0, sp = 0;
 sp = STACKTOP; //@line 22596
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22598
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22600
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22602
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22604
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22606
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22608
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22610
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22612
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22614
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22616
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22618
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22620
 $25 = $2 + 12 | 0; //@line 22622
 HEAP32[$25 >> 2] = HEAP32[$16 >> 2]; //@line 22623
 $27 = $20 + 4 | 0; //@line 22625
 HEAP32[$27 >> 2] = 0; //@line 22627
 HEAP32[$27 + 4 >> 2] = 0; //@line 22630
 HEAP32[$20 >> 2] = 3; //@line 22631
 $31 = $20 + 12 | 0; //@line 22632
 HEAP32[$31 >> 2] = 752; //@line 22633
 $ReallocAsyncCtx19 = _emscripten_realloc_async_context(60) | 0; //@line 22634
 $32 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $20) | 0; //@line 22635
 if (!___async) {
  HEAP32[___async_retval >> 2] = $32; //@line 22639
  ___async_unwind = 0; //@line 22640
 }
 HEAP32[$ReallocAsyncCtx19 >> 2] = 179; //@line 22642
 HEAP32[$ReallocAsyncCtx19 + 4 >> 2] = $2; //@line 22644
 HEAP32[$ReallocAsyncCtx19 + 8 >> 2] = $4; //@line 22646
 HEAP32[$ReallocAsyncCtx19 + 12 >> 2] = $6; //@line 22648
 HEAP32[$ReallocAsyncCtx19 + 16 >> 2] = $8; //@line 22650
 HEAP32[$ReallocAsyncCtx19 + 20 >> 2] = $10; //@line 22652
 HEAP32[$ReallocAsyncCtx19 + 24 >> 2] = $12; //@line 22654
 HEAP32[$ReallocAsyncCtx19 + 28 >> 2] = $24; //@line 22656
 HEAP32[$ReallocAsyncCtx19 + 32 >> 2] = $14; //@line 22658
 HEAP32[$ReallocAsyncCtx19 + 36 >> 2] = $16; //@line 22660
 HEAP32[$ReallocAsyncCtx19 + 40 >> 2] = $18; //@line 22662
 HEAP32[$ReallocAsyncCtx19 + 44 >> 2] = $25; //@line 22664
 HEAP32[$ReallocAsyncCtx19 + 48 >> 2] = $22; //@line 22666
 HEAP32[$ReallocAsyncCtx19 + 52 >> 2] = $20; //@line 22668
 HEAP32[$ReallocAsyncCtx19 + 56 >> 2] = $31; //@line 22670
 sp = STACKTOP; //@line 22671
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_103($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2561
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2565
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2567
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2569
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2571
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 2572
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 2576
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 2577
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 2578
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 2581
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 2582
   HEAP32[$14 >> 2] = $4; //@line 2583
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 2584
   HEAP32[$15 >> 2] = $6; //@line 2585
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 2586
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 2587
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 2588
   HEAP32[$17 >> 2] = $8; //@line 2589
   sp = STACKTOP; //@line 2590
   return;
  }
  ___async_unwind = 0; //@line 2593
  HEAP32[$ReallocAsyncCtx4 >> 2] = 263; //@line 2594
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 2595
  HEAP32[$14 >> 2] = $4; //@line 2596
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 2597
  HEAP32[$15 >> 2] = $6; //@line 2598
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 2599
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 2600
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 2601
  HEAP32[$17 >> 2] = $8; //@line 2602
  sp = STACKTOP; //@line 2603
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 2606
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 2610
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 2614
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2615
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 2616
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 2619
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 2620
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 2621
  sp = STACKTOP; //@line 2622
  return;
 }
 ___async_unwind = 0; //@line 2625
 HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 2626
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 2627
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 2628
 sp = STACKTOP; //@line 2629
 return;
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 13362
 STACKTOP = STACKTOP + 128 | 0; //@line 13363
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 13363
 $4 = sp + 124 | 0; //@line 13364
 $5 = sp; //@line 13365
 dest = $5; //@line 13366
 src = 2396; //@line 13366
 stop = dest + 124 | 0; //@line 13366
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 13366
  dest = dest + 4 | 0; //@line 13366
  src = src + 4 | 0; //@line 13366
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 13372
   $$015 = 1; //@line 13372
   label = 4; //@line 13373
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 13376
   $$0 = -1; //@line 13377
  }
 } else {
  $$014 = $0; //@line 13380
  $$015 = $1; //@line 13380
  label = 4; //@line 13381
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 13385
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 13387
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 13389
  $14 = $5 + 20 | 0; //@line 13390
  HEAP32[$14 >> 2] = $$014; //@line 13391
  HEAP32[$5 + 44 >> 2] = $$014; //@line 13393
  $16 = $$014 + $$$015 | 0; //@line 13394
  $17 = $5 + 16 | 0; //@line 13395
  HEAP32[$17 >> 2] = $16; //@line 13396
  HEAP32[$5 + 28 >> 2] = $16; //@line 13398
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 13399
  $19 = _vfprintf($5, $2, $3) | 0; //@line 13400
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 316; //@line 13403
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 13405
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 13407
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 13409
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 13411
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 13413
   sp = STACKTOP; //@line 13414
   STACKTOP = sp; //@line 13415
   return 0; //@line 13415
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13417
  if (!$$$015) {
   $$0 = $19; //@line 13420
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 13422
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 13427
   $$0 = $19; //@line 13428
  }
 }
 STACKTOP = sp; //@line 13431
 return $$0 | 0; //@line 13431
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_9($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16323
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16325
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16327
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16329
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16331
 $9 = HEAP32[$2 >> 2] | 0; //@line 16332
 if (!$9) {
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 16335
  _mbed_assert_internal(4029, 4034, 1677); //@line 16336
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 230; //@line 16339
   $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 16340
   HEAP32[$11 >> 2] = $2; //@line 16341
   $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 16342
   HEAP32[$12 >> 2] = $4; //@line 16343
   $13 = $ReallocAsyncCtx9 + 12 | 0; //@line 16344
   HEAP32[$13 >> 2] = $6; //@line 16345
   $14 = $ReallocAsyncCtx9 + 16 | 0; //@line 16346
   HEAP32[$14 >> 2] = $8; //@line 16347
   sp = STACKTOP; //@line 16348
   return;
  }
  ___async_unwind = 0; //@line 16351
  HEAP32[$ReallocAsyncCtx9 >> 2] = 230; //@line 16352
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 16353
  HEAP32[$11 >> 2] = $2; //@line 16354
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 16355
  HEAP32[$12 >> 2] = $4; //@line 16356
  $13 = $ReallocAsyncCtx9 + 12 | 0; //@line 16357
  HEAP32[$13 >> 2] = $6; //@line 16358
  $14 = $ReallocAsyncCtx9 + 16 | 0; //@line 16359
  HEAP32[$14 >> 2] = $8; //@line 16360
  sp = STACKTOP; //@line 16361
  return;
 } else {
  $15 = HEAP32[$9 >> 2] | 0; //@line 16364
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 16365
  FUNCTION_TABLE_viii[$15 & 0]($4, $6, $8); //@line 16366
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 231; //@line 16369
   $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 16370
   HEAP32[$16 >> 2] = $2; //@line 16371
   $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 16372
   HEAP32[$17 >> 2] = $4; //@line 16373
   sp = STACKTOP; //@line 16374
   return;
  }
  ___async_unwind = 0; //@line 16377
  HEAP32[$ReallocAsyncCtx5 >> 2] = 231; //@line 16378
  $16 = $ReallocAsyncCtx5 + 4 | 0; //@line 16379
  HEAP32[$16 >> 2] = $2; //@line 16380
  $17 = $ReallocAsyncCtx5 + 8 | 0; //@line 16381
  HEAP32[$17 >> 2] = $4; //@line 16382
  sp = STACKTOP; //@line 16383
  return;
 }
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19499
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 19501
 $7 = $4 + 156 | 0; //@line 19502
 _equeue_mutex_lock($7); //@line 19503
 $8 = $4 + 24 | 0; //@line 19504
 $9 = HEAP32[$8 >> 2] | 0; //@line 19505
 L3 : do {
  if (!$9) {
   label = 9; //@line 19509
  } else {
   $$03842$i = $8; //@line 19511
   $12 = $9; //@line 19511
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 19518
    $19 = HEAP32[$18 >> 2] | 0; //@line 19519
    if (!$19) {
     label = 9; //@line 19522
     break L3;
    } else {
     $$03842$i = $18; //@line 19525
     $12 = $19; //@line 19525
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 19529
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 19532
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 19534
    $$038$sink$i = $15 + 8 | 0; //@line 19536
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 19540
   _equeue_mutex_unlock($7); //@line 19541
   $$1$i9 = $12; //@line 19542
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 19547
   $22 = HEAP32[$21 >> 2] | 0; //@line 19548
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 19551
    $$0 = 0; //@line 19552
    $34 = ___async_retval; //@line 19553
    HEAP32[$34 >> 2] = $$0; //@line 19554
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 19557
    $25 = HEAP32[$24 >> 2] | 0; //@line 19558
    HEAP32[$24 >> 2] = $25 + $6; //@line 19560
    HEAP32[$21 >> 2] = $22 - $6; //@line 19562
    HEAP32[$25 >> 2] = $6; //@line 19563
    HEAP8[$25 + 4 >> 0] = 1; //@line 19565
    _equeue_mutex_unlock($7); //@line 19566
    if (!$25) {
     $$0 = 0; //@line 19569
    } else {
     $$1$i9 = $25; //@line 19571
     break;
    }
    $34 = ___async_retval; //@line 19574
    HEAP32[$34 >> 2] = $$0; //@line 19575
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 19581
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 19583
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 19585
 $$0 = $$1$i9 + 36 | 0; //@line 19587
 $34 = ___async_retval; //@line 19588
 HEAP32[$34 >> 2] = $$0; //@line 19589
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15532
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15538
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 15542
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 15543
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15544
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 15545
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 348; //@line 15548
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 15550
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15552
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15554
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 15556
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 15558
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 15560
    sp = STACKTOP; //@line 15561
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15564
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 15568
    $$0 = $0 + 24 | 0; //@line 15569
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15571
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 15572
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15577
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 15583
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 15586
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 349; //@line 15591
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15593
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 15595
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 15597
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15599
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15601
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 15603
    sp = STACKTOP; //@line 15604
    return;
   }
  }
 } while (0);
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 622
 STACKTOP = STACKTOP + 48 | 0; //@line 623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 623
 $$byval_copy = sp + 20 | 0; //@line 624
 $3 = sp; //@line 625
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 626
 $4 = __Znwj(76) | 0; //@line 627
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 630
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 632
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 634
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 636
  sp = STACKTOP; //@line 637
  STACKTOP = sp; //@line 638
  return 0; //@line 638
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 640
 dest = $4; //@line 641
 stop = dest + 76 | 0; //@line 641
 do {
  HEAP32[dest >> 2] = 0; //@line 641
  dest = dest + 4 | 0; //@line 641
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 642
 HEAP32[$3 >> 2] = 0; //@line 643
 HEAP32[$3 + 4 >> 2] = 0; //@line 643
 HEAP32[$3 + 8 >> 2] = 0; //@line 643
 HEAP32[$3 + 12 >> 2] = 0; //@line 643
 HEAP32[$3 + 16 >> 2] = 0; //@line 643
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 644
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 644
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 644
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 644
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 644
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 645
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 646
 if (($9 | 0) == -1) {
  $$0$i = -3001; //@line 649
  STACKTOP = sp; //@line 650
  return $$0$i | 0; //@line 650
 }
 HEAP32[$4 >> 2] = $9; //@line 652
 HEAP8[$4 + 8 >> 0] = 0; //@line 654
 HEAP32[$4 + 4 >> 2] = $2; //@line 656
 HEAP32[$1 >> 2] = $4; //@line 657
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 658
 _wait_ms(1); //@line 659
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 48; //@line 662
  sp = STACKTOP; //@line 663
  STACKTOP = sp; //@line 664
  return 0; //@line 664
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 666
 $$0$i = 0; //@line 667
 STACKTOP = sp; //@line 668
 return $$0$i | 0; //@line 668
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 219
 STACKTOP = STACKTOP + 48 | 0; //@line 220
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 220
 $$byval_copy = sp + 20 | 0; //@line 221
 $3 = sp; //@line 222
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 223
 $4 = __Znwj(76) | 0; //@line 224
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 34; //@line 227
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 229
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 231
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 233
  sp = STACKTOP; //@line 234
  STACKTOP = sp; //@line 235
  return 0; //@line 235
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 237
 dest = $4; //@line 238
 stop = dest + 76 | 0; //@line 238
 do {
  HEAP32[dest >> 2] = 0; //@line 238
  dest = dest + 4 | 0; //@line 238
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 239
 HEAP32[$3 >> 2] = 0; //@line 240
 HEAP32[$3 + 4 >> 2] = 0; //@line 240
 HEAP32[$3 + 8 >> 2] = 0; //@line 240
 HEAP32[$3 + 12 >> 2] = 0; //@line 240
 HEAP32[$3 + 16 >> 2] = 0; //@line 240
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 241
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 241
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 241
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 241
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 241
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 242
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 243
 if (($9 | 0) == -1) {
  $$0 = -3001; //@line 246
  STACKTOP = sp; //@line 247
  return $$0 | 0; //@line 247
 }
 HEAP32[$4 >> 2] = $9; //@line 249
 HEAP8[$4 + 8 >> 0] = 0; //@line 251
 HEAP32[$4 + 4 >> 2] = $2; //@line 253
 HEAP32[$1 >> 2] = $4; //@line 254
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 255
 _wait_ms(1); //@line 256
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 35; //@line 259
  sp = STACKTOP; //@line 260
  STACKTOP = sp; //@line 261
  return 0; //@line 261
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 263
 $$0 = 0; //@line 264
 STACKTOP = sp; //@line 265
 return $$0 | 0; //@line 265
}
function __ZN9TCPSocket4recvEPvj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5696
 $3 = $0 + 56 | 0; //@line 5697
 do {
  if (HEAP8[$3 >> 0] | 0) {
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5702
   _mbed_assert_internal(3853, 3756, 190); //@line 5703
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 146; //@line 5706
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 5708
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5710
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5712
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 5714
    sp = STACKTOP; //@line 5715
    return 0; //@line 5716
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5718
    break;
   }
  }
 } while (0);
 HEAP8[$3 >> 0] = 1; //@line 5723
 $10 = $0 + 8 | 0; //@line 5724
 $11 = $0 + 52 | 0; //@line 5725
 $12 = $0 + 4 | 0; //@line 5726
 $13 = $0 + 12 | 0; //@line 5727
 while (1) {
  $14 = HEAP32[$10 >> 2] | 0; //@line 5729
  if (!$14) {
   $$0 = -3005; //@line 5732
   label = 10; //@line 5733
   break;
  }
  HEAP32[$11 >> 2] = 0; //@line 5736
  $16 = HEAP32[$12 >> 2] | 0; //@line 5737
  $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 72 >> 2] | 0; //@line 5740
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5741
  $20 = FUNCTION_TABLE_iiiii[$19 & 15]($16, $14, $1, $2) | 0; //@line 5742
  if (___async) {
   label = 8; //@line 5745
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5748
  if (($20 | 0) != -3001 | (HEAP32[$13 >> 2] | 0) == 0) {
   $$0 = $20; //@line 5754
   label = 10; //@line 5755
   break;
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx >> 2] = 147; //@line 5760
  HEAP32[$AsyncCtx + 4 >> 2] = $13; //@line 5762
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 5764
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 5766
  HEAP32[$AsyncCtx + 16 >> 2] = $11; //@line 5768
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 5770
  HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 5772
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 5774
  sp = STACKTOP; //@line 5775
  return 0; //@line 5776
 } else if ((label | 0) == 10) {
  HEAP8[$3 >> 0] = 0; //@line 5779
  return $$0 | 0; //@line 5780
 }
 return 0; //@line 5782
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_130($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 8954
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8958
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8960
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8962
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8964
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8965
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 8969
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 8970
  FUNCTION_TABLE_vi[$13 & 511]($6); //@line 8971
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 168; //@line 8974
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 8975
   HEAP32[$14 >> 2] = $4; //@line 8976
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 8977
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 8978
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 8979
   HEAP32[$16 >> 2] = $8; //@line 8980
   sp = STACKTOP; //@line 8981
   return;
  }
  ___async_unwind = 0; //@line 8984
  HEAP32[$ReallocAsyncCtx3 >> 2] = 168; //@line 8985
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 8986
  HEAP32[$14 >> 2] = $4; //@line 8987
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 8988
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 8989
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 8990
  HEAP32[$16 >> 2] = $8; //@line 8991
  sp = STACKTOP; //@line 8992
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 8995
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 8999
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 9003
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 9004
 FUNCTION_TABLE_vi[$20 & 511]($8); //@line 9005
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 9008
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 9009
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 9010
  sp = STACKTOP; //@line 9011
  return;
 }
 ___async_unwind = 0; //@line 9014
 HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 9015
 $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 9016
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 9017
 sp = STACKTOP; //@line 9018
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $31 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 12162
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12164
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12166
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12170
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12172
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12174
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12176
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12178
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12180
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12182
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12184
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12186
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12188
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 12190
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 12192
 HEAP32[$12 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 12194
 $31 = HEAP32[$14 >> 2] | 0; //@line 12195
 HEAP32[$16 >> 2] = 0; //@line 12196
 HEAP32[$18 >> 2] = 192; //@line 12197
 HEAP32[$20 >> 2] = $31; //@line 12198
 HEAP32[$22 >> 2] = 764; //@line 12199
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 12200
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 0, $26) | 0; //@line 12201
 if (!___async) {
  ___async_unwind = 0; //@line 12204
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 246; //@line 12206
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 12208
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 12210
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $8; //@line 12212
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 12214
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $12; //@line 12216
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $16; //@line 12218
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 12220
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $20; //@line 12222
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $22; //@line 12224
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $24; //@line 12226
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $26; //@line 12228
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $28; //@line 12230
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 12232
 sp = STACKTOP; //@line 12233
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13634
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 13639
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 13644
  } else {
   $20 = $0 & 255; //@line 13646
   $21 = $0 & 255; //@line 13647
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 13653
   } else {
    $26 = $1 + 20 | 0; //@line 13655
    $27 = HEAP32[$26 >> 2] | 0; //@line 13656
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 13662
     HEAP8[$27 >> 0] = $20; //@line 13663
     $34 = $21; //@line 13664
    } else {
     label = 12; //@line 13666
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13671
     $32 = ___overflow($1, $0) | 0; //@line 13672
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 321; //@line 13675
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13677
      sp = STACKTOP; //@line 13678
      return 0; //@line 13679
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 13681
      $34 = $32; //@line 13682
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 13687
   $$0 = $34; //@line 13688
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 13693
   $8 = $0 & 255; //@line 13694
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 13700
    $14 = HEAP32[$13 >> 2] | 0; //@line 13701
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 13707
     HEAP8[$14 >> 0] = $7; //@line 13708
     $$0 = $8; //@line 13709
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13713
   $19 = ___overflow($1, $0) | 0; //@line 13714
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 320; //@line 13717
    sp = STACKTOP; //@line 13718
    return 0; //@line 13719
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13721
    $$0 = $19; //@line 13722
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 13727
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 5109
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 5112
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 5115
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 5118
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 5124
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 5133
     $24 = $13 >>> 2; //@line 5134
     $$090 = 0; //@line 5135
     $$094 = $7; //@line 5135
     while (1) {
      $25 = $$094 >>> 1; //@line 5137
      $26 = $$090 + $25 | 0; //@line 5138
      $27 = $26 << 1; //@line 5139
      $28 = $27 + $23 | 0; //@line 5140
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 5143
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5147
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 5153
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 5161
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 5165
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 5171
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 5176
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 5179
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 5179
      }
     }
     $46 = $27 + $24 | 0; //@line 5182
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 5185
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5189
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 5201
     } else {
      $$4 = 0; //@line 5203
     }
    } else {
     $$4 = 0; //@line 5206
    }
   } else {
    $$4 = 0; //@line 5209
   }
  } else {
   $$4 = 0; //@line 5212
  }
 } while (0);
 return $$4 | 0; //@line 5215
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_59($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 19744
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19750
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19752
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19754
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19756
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19758
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19760
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19762
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19764
 $$pre = HEAP32[$6 >> 2] | 0; //@line 19765
 HEAP32[$$pre + 16 >> 2] = HEAP32[$8 >> 2]; //@line 19769
 HEAP32[$10 + 8 >> 2] = 0; //@line 19771
 HEAP32[$10 >> 2] = 219; //@line 19772
 HEAP32[$10 + 4 >> 2] = $$pre; //@line 19774
 $23 = $10 + 12 | 0; //@line 19775
 HEAP32[$23 >> 2] = 764; //@line 19776
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 19777
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $10); //@line 19778
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 19781
  $24 = $ReallocAsyncCtx10 + 4 | 0; //@line 19782
  HEAP32[$24 >> 2] = $23; //@line 19783
  $25 = $ReallocAsyncCtx10 + 8 | 0; //@line 19784
  HEAP32[$25 >> 2] = $14; //@line 19785
  $26 = $ReallocAsyncCtx10 + 12 | 0; //@line 19786
  HEAP32[$26 >> 2] = $16; //@line 19787
  $27 = $ReallocAsyncCtx10 + 16 | 0; //@line 19788
  HEAP32[$27 >> 2] = $10; //@line 19789
  $28 = $ReallocAsyncCtx10 + 20 | 0; //@line 19790
  HEAP32[$28 >> 2] = $18; //@line 19791
  sp = STACKTOP; //@line 19792
  return;
 }
 ___async_unwind = 0; //@line 19795
 HEAP32[$ReallocAsyncCtx10 >> 2] = 220; //@line 19796
 $24 = $ReallocAsyncCtx10 + 4 | 0; //@line 19797
 HEAP32[$24 >> 2] = $23; //@line 19798
 $25 = $ReallocAsyncCtx10 + 8 | 0; //@line 19799
 HEAP32[$25 >> 2] = $14; //@line 19800
 $26 = $ReallocAsyncCtx10 + 12 | 0; //@line 19801
 HEAP32[$26 >> 2] = $16; //@line 19802
 $27 = $ReallocAsyncCtx10 + 16 | 0; //@line 19803
 HEAP32[$27 >> 2] = $10; //@line 19804
 $28 = $ReallocAsyncCtx10 + 20 | 0; //@line 19805
 HEAP32[$28 >> 2] = $18; //@line 19806
 sp = STACKTOP; //@line 19807
 return;
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4774
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 4779
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 4784
  } else {
   $20 = $0 & 255; //@line 4786
   $21 = $0 & 255; //@line 4787
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 4793
   } else {
    $26 = $1 + 20 | 0; //@line 4795
    $27 = HEAP32[$26 >> 2] | 0; //@line 4796
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 4802
     HEAP8[$27 >> 0] = $20; //@line 4803
     $34 = $21; //@line 4804
    } else {
     label = 12; //@line 4806
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4811
     $32 = ___overflow($1, $0) | 0; //@line 4812
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 306; //@line 4815
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4817
      sp = STACKTOP; //@line 4818
      return 0; //@line 4819
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4821
      $34 = $32; //@line 4822
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 4827
   $$0 = $34; //@line 4828
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 4833
   $8 = $0 & 255; //@line 4834
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 4840
    $14 = HEAP32[$13 >> 2] | 0; //@line 4841
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 4847
     HEAP8[$14 >> 0] = $7; //@line 4848
     $$0 = $8; //@line 4849
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4853
   $19 = ___overflow($1, $0) | 0; //@line 4854
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 305; //@line 4857
    sp = STACKTOP; //@line 4858
    return 0; //@line 4859
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4861
    $$0 = $19; //@line 4862
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 4867
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5494
 $1 = $0 + 20 | 0; //@line 5495
 $3 = $0 + 28 | 0; //@line 5497
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 5503
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5504
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 5505
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 312; //@line 5508
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5510
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5512
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 5514
    sp = STACKTOP; //@line 5515
    return 0; //@line 5516
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5518
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 5522
     break;
    } else {
     label = 5; //@line 5525
     break;
    }
   }
  } else {
   label = 5; //@line 5530
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 5534
  $14 = HEAP32[$13 >> 2] | 0; //@line 5535
  $15 = $0 + 8 | 0; //@line 5536
  $16 = HEAP32[$15 >> 2] | 0; //@line 5537
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 5545
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5546
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 5547
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 313; //@line 5550
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5552
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 5554
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5556
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 5558
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 5560
     sp = STACKTOP; //@line 5561
     return 0; //@line 5562
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5564
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 5570
  HEAP32[$3 >> 2] = 0; //@line 5571
  HEAP32[$1 >> 2] = 0; //@line 5572
  HEAP32[$15 >> 2] = 0; //@line 5573
  HEAP32[$13 >> 2] = 0; //@line 5574
  $$0 = 0; //@line 5575
 }
 return $$0 | 0; //@line 5577
}
function __ZN6Socket5closeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4075
 $1 = $0 + 8 | 0; //@line 4076
 $2 = HEAP32[$1 >> 2] | 0; //@line 4077
 $$pre = $0 + 4 | 0; //@line 4079
 do {
  if (!$2) {
   $$0 = 0; //@line 4082
  } else {
   $4 = HEAP32[$$pre >> 2] | 0; //@line 4084
   $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 84 >> 2] | 0; //@line 4087
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4088
   FUNCTION_TABLE_viiii[$7 & 7]($4, $2, 0, 0); //@line 4089
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 131; //@line 4092
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4094
    HEAP32[$AsyncCtx + 8 >> 2] = $$pre; //@line 4096
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4098
    sp = STACKTOP; //@line 4099
    return 0; //@line 4100
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4102
   $11 = HEAP32[$1 >> 2] | 0; //@line 4103
   HEAP32[$1 >> 2] = 0; //@line 4104
   $12 = HEAP32[$$pre >> 2] | 0; //@line 4105
   $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 48 >> 2] | 0; //@line 4108
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4109
   $16 = FUNCTION_TABLE_iii[$15 & 15]($12, $11) | 0; //@line 4110
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 132; //@line 4113
    HEAP32[$AsyncCtx2 + 4 >> 2] = $$pre; //@line 4115
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4117
    sp = STACKTOP; //@line 4118
    return 0; //@line 4119
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4121
    $$0 = $16; //@line 4122
    break;
   }
  }
 } while (0);
 HEAP32[$$pre >> 2] = 0; //@line 4127
 $21 = HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0; //@line 4130
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4131
 FUNCTION_TABLE_vi[$21 & 511]($0); //@line 4132
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 133; //@line 4135
  HEAP32[$AsyncCtx5 + 4 >> 2] = $$0; //@line 4137
  sp = STACKTOP; //@line 4138
  return 0; //@line 4139
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4141
  return $$0 | 0; //@line 4142
 }
 return 0; //@line 4144
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 8708
 STACKTOP = STACKTOP + 32 | 0; //@line 8709
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 8709
 $$byval_copy = sp; //@line 8710
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8712
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8714
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8716
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8718
 dest = $AsyncRetVal; //@line 8719
 stop = dest + 76 | 0; //@line 8719
 do {
  HEAP32[dest >> 2] = 0; //@line 8719
  dest = dest + 4 | 0; //@line 8719
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 8720
 HEAP32[$2 >> 2] = 0; //@line 8721
 HEAP32[$2 + 4 >> 2] = 0; //@line 8721
 HEAP32[$2 + 8 >> 2] = 0; //@line 8721
 HEAP32[$2 + 12 >> 2] = 0; //@line 8721
 HEAP32[$2 + 16 >> 2] = 0; //@line 8721
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 8722
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 8722
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 8722
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 8722
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 8722
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 8723
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 8724
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 8728
  STACKTOP = sp; //@line 8729
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 8731
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 8733
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 8735
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 8736
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 8737
 _wait_ms(1); //@line 8738
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 48; //@line 8741
  sp = STACKTOP; //@line 8742
  STACKTOP = sp; //@line 8743
  return;
 }
 ___async_unwind = 0; //@line 8745
 HEAP32[$ReallocAsyncCtx2 >> 2] = 48; //@line 8746
 sp = STACKTOP; //@line 8747
 STACKTOP = sp; //@line 8748
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 9025
 STACKTOP = STACKTOP + 32 | 0; //@line 9026
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9026
 $$byval_copy = sp; //@line 9027
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9029
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9031
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9033
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9035
 dest = $AsyncRetVal; //@line 9036
 stop = dest + 76 | 0; //@line 9036
 do {
  HEAP32[dest >> 2] = 0; //@line 9036
  dest = dest + 4 | 0; //@line 9036
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 9037
 HEAP32[$2 >> 2] = 0; //@line 9038
 HEAP32[$2 + 4 >> 2] = 0; //@line 9038
 HEAP32[$2 + 8 >> 2] = 0; //@line 9038
 HEAP32[$2 + 12 >> 2] = 0; //@line 9038
 HEAP32[$2 + 16 >> 2] = 0; //@line 9038
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 9039
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 9039
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 9039
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 9039
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 9039
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 9040
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 9041
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 9045
  STACKTOP = sp; //@line 9046
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 9048
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 9050
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 9052
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 9053
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 9054
 _wait_ms(1); //@line 9055
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 35; //@line 9058
  sp = STACKTOP; //@line 9059
  STACKTOP = sp; //@line 9060
  return;
 }
 ___async_unwind = 0; //@line 9062
 HEAP32[$ReallocAsyncCtx2 >> 2] = 35; //@line 9063
 sp = STACKTOP; //@line 9064
 STACKTOP = sp; //@line 9065
 return;
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 1020
 STACKTOP = STACKTOP + 48 | 0; //@line 1021
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1021
 $vararg_buffer12 = sp + 32 | 0; //@line 1022
 $vararg_buffer8 = sp + 24 | 0; //@line 1023
 $vararg_buffer4 = sp + 16 | 0; //@line 1024
 $vararg_buffer = sp; //@line 1025
 $6 = $4 & 255; //@line 1026
 $7 = $5 & 255; //@line 1027
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1028
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1030
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1032
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1034
 _mbed_tracef(16, 3305, 3310, $vararg_buffer); //@line 1035
 _emscripten_asm_const_i(8) | 0; //@line 1036
 $10 = HEAP32[$0 + 752 >> 2] | 0; //@line 1038
 if (($10 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $10; //@line 1041
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1043
  _mbed_tracef(16, 3305, 3392, $vararg_buffer4); //@line 1044
  STACKTOP = sp; //@line 1045
  return;
 }
 $13 = HEAP32[$0 + 756 >> 2] | 0; //@line 1048
 if (($13 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $13; //@line 1051
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1053
  _mbed_tracef(16, 3305, 3439, $vararg_buffer8); //@line 1054
  STACKTOP = sp; //@line 1055
  return;
 }
 $16 = HEAP32[$0 + 692 >> 2] | 0; //@line 1058
 if (($16 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1062
  HEAP8[$0 + 782 >> 0] = $2; //@line 1065
  HEAP8[$0 + 781 >> 0] = -35; //@line 1067
  HEAP8[$0 + 780 >> 0] = -5; //@line 1069
  HEAP8[$0 + 783 >> 0] = 1; //@line 1071
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(9) | 0; //@line 1074
  STACKTOP = sp; //@line 1075
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $16; //@line 1077
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1079
  _mbed_tracef(16, 3305, 3486, $vararg_buffer12); //@line 1080
  STACKTOP = sp; //@line 1081
  return;
 }
}
function __ZNK13SocketAddresscvbEv($0) {
 $0 = $0 | 0;
 var $12 = 0;
 switch (HEAP32[$0 + 40 >> 2] | 0) {
 case 1:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 5100
    return $12 | 0; //@line 5101
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 5107
    return $12 | 0; //@line 5108
   }
   if (!(HEAP8[$0 + 46 >> 0] | 0)) {
    return (HEAP8[$0 + 47 >> 0] | 0) != 0 | 0; //@line 5117
   } else {
    $12 = 1; //@line 5119
    return $12 | 0; //@line 5120
   }
   break;
  }
 case 2:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 5129
    return $12 | 0; //@line 5130
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 5136
    return $12 | 0; //@line 5137
   }
   if (HEAP8[$0 + 46 >> 0] | 0) {
    $12 = 1; //@line 5143
    return $12 | 0; //@line 5144
   }
   if (HEAP8[$0 + 47 >> 0] | 0) {
    $12 = 1; //@line 5150
    return $12 | 0; //@line 5151
   }
   if (HEAP8[$0 + 48 >> 0] | 0) {
    $12 = 1; //@line 5157
    return $12 | 0; //@line 5158
   }
   if (HEAP8[$0 + 49 >> 0] | 0) {
    $12 = 1; //@line 5164
    return $12 | 0; //@line 5165
   }
   if (HEAP8[$0 + 50 >> 0] | 0) {
    $12 = 1; //@line 5171
    return $12 | 0; //@line 5172
   }
   if (HEAP8[$0 + 51 >> 0] | 0) {
    $12 = 1; //@line 5178
    return $12 | 0; //@line 5179
   }
   if (HEAP8[$0 + 52 >> 0] | 0) {
    $12 = 1; //@line 5185
    return $12 | 0; //@line 5186
   }
   if (HEAP8[$0 + 53 >> 0] | 0) {
    $12 = 1; //@line 5192
    return $12 | 0; //@line 5193
   }
   if (HEAP8[$0 + 54 >> 0] | 0) {
    $12 = 1; //@line 5199
    return $12 | 0; //@line 5200
   }
   if (HEAP8[$0 + 55 >> 0] | 0) {
    $12 = 1; //@line 5206
    return $12 | 0; //@line 5207
   }
   if (HEAP8[$0 + 56 >> 0] | 0) {
    $12 = 1; //@line 5213
    return $12 | 0; //@line 5214
   }
   if (HEAP8[$0 + 57 >> 0] | 0) {
    $12 = 1; //@line 5220
    return $12 | 0; //@line 5221
   }
   if (HEAP8[$0 + 58 >> 0] | 0) {
    $12 = 1; //@line 5227
    return $12 | 0; //@line 5228
   }
   $12 = (HEAP8[$0 + 59 >> 0] | 0) != 0; //@line 5233
   return $12 | 0; //@line 5234
  }
 default:
  {
   $12 = 0; //@line 5238
   return $12 | 0; //@line 5239
  }
 }
 return 0; //@line 5242
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_79($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 23257
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23259
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23261
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23263
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23267
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 23269
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 23271
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 23273
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 23275
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 23277
 $21 = $10 + 12 | 0; //@line 23279
 HEAP32[$21 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 23280
 $22 = HEAP32[$6 >> 2] | 0; //@line 23281
 HEAP32[$18 + 8 >> 2] = 0; //@line 23283
 HEAP32[$18 >> 2] = 185; //@line 23284
 HEAP32[$18 + 4 >> 2] = $22; //@line 23286
 $24 = $18 + 12 | 0; //@line 23287
 HEAP32[$24 >> 2] = 764; //@line 23288
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(48) | 0; //@line 23289
 $25 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($10, 0, $18) | 0; //@line 23290
 if (!___async) {
  HEAP32[___async_retval >> 2] = $25; //@line 23294
  ___async_unwind = 0; //@line 23295
 }
 HEAP32[$ReallocAsyncCtx18 >> 2] = 186; //@line 23297
 HEAP32[$ReallocAsyncCtx18 + 4 >> 2] = $24; //@line 23299
 HEAP32[$ReallocAsyncCtx18 + 8 >> 2] = $2; //@line 23301
 HEAP32[$ReallocAsyncCtx18 + 12 >> 2] = $4; //@line 23303
 HEAP32[$ReallocAsyncCtx18 + 16 >> 2] = $6; //@line 23305
 HEAP32[$ReallocAsyncCtx18 + 20 >> 2] = $20; //@line 23307
 HEAP32[$ReallocAsyncCtx18 + 24 >> 2] = $21; //@line 23309
 HEAP32[$ReallocAsyncCtx18 + 28 >> 2] = $10; //@line 23311
 HEAP32[$ReallocAsyncCtx18 + 32 >> 2] = $12; //@line 23313
 HEAP32[$ReallocAsyncCtx18 + 36 >> 2] = $14; //@line 23315
 HEAP32[$ReallocAsyncCtx18 + 40 >> 2] = $16; //@line 23317
 HEAP32[$ReallocAsyncCtx18 + 44 >> 2] = $18; //@line 23319
 sp = STACKTOP; //@line 23320
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14676
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14678
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14680
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14682
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14684
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14686
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 14687
 if (!$AsyncRetVal) {
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = HEAP32[$4 >> 2]; //@line 14692
 HEAP32[$AsyncRetVal + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 14692
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 14692
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 14692
 HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 14692
 $12 = (_strlen($6) | 0) + 1 | 0; //@line 14694
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 14695
 $13 = __ZnajRKSt9nothrow_t($12, 9760) | 0; //@line 14696
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 163; //@line 14699
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 14700
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 14701
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 14702
  HEAP32[$15 >> 2] = $6; //@line 14703
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 14704
  HEAP32[$16 >> 2] = $8; //@line 14705
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 14706
  HEAP32[$17 >> 2] = $2; //@line 14707
  sp = STACKTOP; //@line 14708
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 14712
 ___async_unwind = 0; //@line 14713
 HEAP32[$ReallocAsyncCtx2 >> 2] = 163; //@line 14714
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 14715
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 14716
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 14717
 HEAP32[$15 >> 2] = $6; //@line 14718
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 14719
 HEAP32[$16 >> 2] = $8; //@line 14720
 $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 14721
 HEAP32[$17 >> 2] = $2; //@line 14722
 sp = STACKTOP; //@line 14723
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 18084
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18086
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18088
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18090
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18092
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18094
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18096
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 18100
  return;
 }
 $13 = $2 + 12 | 0; //@line 18103
 dest = $13; //@line 18104
 src = $4; //@line 18104
 stop = dest + 60 | 0; //@line 18104
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 18104
  dest = dest + 4 | 0; //@line 18104
  src = src + 4 | 0; //@line 18104
 } while ((dest | 0) < (stop | 0));
 HEAP16[$13 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 18104
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 18105
 _wait_ms(1); //@line 18106
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 42; //@line 18109
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 18110
  HEAP32[$14 >> 2] = $6; //@line 18111
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 18112
  HEAP32[$15 >> 2] = $2; //@line 18113
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 18114
  HEAP32[$16 >> 2] = $8; //@line 18115
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 18116
  HEAP32[$17 >> 2] = $10; //@line 18117
  sp = STACKTOP; //@line 18118
  return;
 }
 ___async_unwind = 0; //@line 18121
 HEAP32[$ReallocAsyncCtx4 >> 2] = 42; //@line 18122
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 18123
 HEAP32[$14 >> 2] = $6; //@line 18124
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 18125
 HEAP32[$15 >> 2] = $2; //@line 18126
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 18127
 HEAP32[$16 >> 2] = $8; //@line 18128
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 18129
 HEAP32[$17 >> 2] = $10; //@line 18130
 sp = STACKTOP; //@line 18131
 return;
}
function _main__async_cb_100($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 2229
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2231
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2233
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2235
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2237
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2239
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2241
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2243
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2245
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2247
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2249
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2251
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2253
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2255
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2257
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(60) | 0; //@line 2258
 $28 = __ZN17EthernetInterface15get_mac_addressEv(788) | 0; //@line 2259
 if (!___async) {
  HEAP32[___async_retval >> 2] = $28; //@line 2263
  ___async_unwind = 0; //@line 2264
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 295; //@line 2266
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 2268
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 2270
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 2272
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 2274
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $10; //@line 2276
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $12; //@line 2278
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $14; //@line 2280
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $AsyncRetVal; //@line 2282
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $16; //@line 2284
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $18; //@line 2286
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $20; //@line 2288
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $22; //@line 2290
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $24; //@line 2292
 HEAP32[$ReallocAsyncCtx11 + 56 >> 2] = $26; //@line 2294
 sp = STACKTOP; //@line 2295
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_170($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 12354
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12356
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12358
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12360
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12362
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12364
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12366
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12368
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12370
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12372
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12374
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12376
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 12378
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 12380
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 12381
 $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($2, 0, $4, 512) | 0; //@line 12382
 if (!___async) {
  HEAP32[___async_retval >> 2] = $27; //@line 12386
  ___async_unwind = 0; //@line 12387
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 244; //@line 12389
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 12391
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 12393
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 12395
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 12397
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 12399
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 12401
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 12403
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 12405
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 12407
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 12409
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 12411
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 12413
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 12415
 sp = STACKTOP; //@line 12416
 return;
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 5258
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 5264
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 5270
   } else {
    $7 = $1 & 255; //@line 5272
    $$03039 = $0; //@line 5273
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 5275
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 5280
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 5283
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 5288
      break;
     } else {
      $$03039 = $13; //@line 5291
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 5295
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 5296
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 5304
     $25 = $18; //@line 5304
     while (1) {
      $24 = $25 ^ $17; //@line 5306
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 5313
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 5316
      $25 = HEAP32[$31 >> 2] | 0; //@line 5317
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 5326
       break;
      } else {
       $$02936 = $31; //@line 5324
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 5331
    }
   } while (0);
   $38 = $1 & 255; //@line 5334
   $$1 = $$029$lcssa; //@line 5335
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 5337
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 5343
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 5346
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 5351
}
function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0; //@line 6584
 $2 = HEAP32[$1 >> 2] | 0; //@line 6585
 if (!$2) {
  label = 3; //@line 6588
 } else {
  if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 6594
  } else {
   label = 4; //@line 6596
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0; //@line 6600
  if (($7 | 0) < 0) {
   label = 4; //@line 6603
  } else {
   $10 = HEAP32[$1 >> 2] | 0; //@line 6605
   $$phi$trans$insert = $0 + 8 | 0; //@line 6607
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6609
    $$sink = $$pre; //@line 6610
    $26 = $$pre; //@line 6610
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6612
    $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 6614
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0; //@line 6619
    $21 = $12; //@line 6621
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$sink = $21; //@line 6623
     $26 = $21; //@line 6623
    } else {
     $$sink = $14 + ($19 + -1) | 0; //@line 6627
     $26 = $21; //@line 6627
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink; //@line 6631
   $$phi$trans$insert29 = $0 + 4 | 0; //@line 6633
   if (!$26) {
    $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6636
   } else {
    $27 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6638
    $29 = $0 + 108 | 0; //@line 6640
    HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0); //@line 6645
    $36 = $27; //@line 6647
   }
   $35 = $36 + -1 | 0; //@line 6649
   if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) {
    $$0 = $7; //@line 6654
   } else {
    HEAP8[$35 >> 0] = $7; //@line 6657
    $$0 = $7; //@line 6658
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0; //@line 6664
  $$0 = -1; //@line 6665
 }
 return $$0 | 0; //@line 6667
}
function _main__async_cb_90($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1700
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1702
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1704
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1706
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1708
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1710
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1712
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1714
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1716
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1718
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1720
 dest = $AsyncRetVal; //@line 1721
 src = 4207; //@line 1721
 stop = dest + 40 | 0; //@line 1721
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 1721
  dest = dest + 1 | 0; //@line 1721
  src = src + 1 | 0; //@line 1721
 } while ((dest | 0) < (stop | 0));
 $20 = _strlen($AsyncRetVal) | 0; //@line 1722
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 1723
 $21 = __ZN9TCPSocket4sendEPKvj($2, $AsyncRetVal, $20) | 0; //@line 1724
 if (!___async) {
  HEAP32[___async_retval >> 2] = $21; //@line 1728
  ___async_unwind = 0; //@line 1729
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 300; //@line 1731
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $AsyncRetVal; //@line 1733
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 1735
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 1737
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $2; //@line 1739
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $8; //@line 1741
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $10; //@line 1743
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $12; //@line 1745
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $14; //@line 1747
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $16; //@line 1749
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $18; //@line 1751
 sp = STACKTOP; //@line 1752
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 5000
 $4 = HEAP32[$3 >> 2] | 0; //@line 5001
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 5008
   label = 5; //@line 5009
  } else {
   $$1 = 0; //@line 5011
  }
 } else {
  $12 = $4; //@line 5015
  label = 5; //@line 5016
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 5020
   $10 = HEAP32[$9 >> 2] | 0; //@line 5021
   $14 = $10; //@line 5024
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 5029
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 5037
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 5041
       $$141 = $0; //@line 5041
       $$143 = $1; //@line 5041
       $31 = $14; //@line 5041
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 5044
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 5051
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 5056
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 5059
      break L5;
     }
     $$139 = $$038; //@line 5065
     $$141 = $0 + $$038 | 0; //@line 5065
     $$143 = $1 - $$038 | 0; //@line 5065
     $31 = HEAP32[$9 >> 2] | 0; //@line 5065
    } else {
     $$139 = 0; //@line 5067
     $$141 = $0; //@line 5067
     $$143 = $1; //@line 5067
     $31 = $14; //@line 5067
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 5070
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 5073
   $$1 = $$139 + $$143 | 0; //@line 5075
  }
 } while (0);
 return $$1 | 0; //@line 5078
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_62($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20035
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20037
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20039
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20041
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20043
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20045
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 20047
 if ($AsyncRetVal | 0) {
  __ZN9UDPSocketC2Ev($AsyncRetVal); //@line 20050
  $13 = HEAP32[$10 >> 2] | 0; //@line 20051
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(36) | 0; //@line 20052
  $14 = __ZN6Socket4openEP12NetworkStack($AsyncRetVal, $13) | 0; //@line 20053
  if (!___async) {
   HEAP32[___async_retval >> 2] = $14; //@line 20057
   ___async_unwind = 0; //@line 20058
  }
  HEAP32[$ReallocAsyncCtx11 >> 2] = 212; //@line 20060
  HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 20062
  HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 20064
  HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $AsyncRetVal; //@line 20066
  HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 20068
  HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $6; //@line 20070
  HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $AsyncRetVal; //@line 20072
  HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $10; //@line 20074
  HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $AsyncRetVal; //@line 20076
  sp = STACKTOP; //@line 20077
  return;
 }
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 20080
 __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($2, -3007, 0); //@line 20081
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 213; //@line 20084
  sp = STACKTOP; //@line 20085
  return;
 }
 ___async_unwind = 0; //@line 20088
 HEAP32[$ReallocAsyncCtx9 >> 2] = 213; //@line 20089
 sp = STACKTOP; //@line 20090
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_66($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 20115
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20119
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20121
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20123
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20125
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20126
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 20130
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 20131
  FUNCTION_TABLE_vi[$14 & 511]($8); //@line 20132
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 221; //@line 20135
   $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 20136
   HEAP32[$15 >> 2] = $4; //@line 20137
   $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 20138
   HEAP32[$16 >> 2] = $6; //@line 20139
   $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 20140
   HEAP32[$17 >> 2] = $10; //@line 20141
   sp = STACKTOP; //@line 20142
   return;
  }
  ___async_unwind = 0; //@line 20145
  HEAP32[$ReallocAsyncCtx4 >> 2] = 221; //@line 20146
  $15 = $ReallocAsyncCtx4 + 4 | 0; //@line 20147
  HEAP32[$15 >> 2] = $4; //@line 20148
  $16 = $ReallocAsyncCtx4 + 8 | 0; //@line 20149
  HEAP32[$16 >> 2] = $6; //@line 20150
  $17 = $ReallocAsyncCtx4 + 12 | 0; //@line 20151
  HEAP32[$17 >> 2] = $10; //@line 20152
  sp = STACKTOP; //@line 20153
  return;
 }
 HEAP32[$4 >> 2] = $6; //@line 20156
 $18 = HEAP32[$10 >> 2] | 0; //@line 20157
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 20158
 __ZL26nsapi_dns_query_async_sendPv($18); //@line 20159
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 222; //@line 20162
  sp = STACKTOP; //@line 20163
  return;
 }
 ___async_unwind = 0; //@line 20166
 HEAP32[$ReallocAsyncCtx7 >> 2] = 222; //@line 20167
 sp = STACKTOP; //@line 20168
 return;
}
function _main__async_cb_92($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 1780
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1782
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1784
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1786
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1788
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1790
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1792
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1794
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1796
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1798
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1800
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1802
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 1804
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 1806
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 1807
 $27 = __ZN17EthernetInterface14get_ip_addressEv(788) | 0; //@line 1808
 if (!___async) {
  HEAP32[___async_retval >> 2] = $27; //@line 1812
  ___async_unwind = 0; //@line 1813
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 294; //@line 1815
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 1817
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 1819
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 1821
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 1823
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 1825
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 1827
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 1829
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 1831
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $18; //@line 1833
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $20; //@line 1835
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $22; //@line 1837
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $24; //@line 1839
 HEAP32[$ReallocAsyncCtx12 + 52 >> 2] = $26; //@line 1841
 sp = STACKTOP; //@line 1842
 return;
}
function _main__async_cb_93($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 1849
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1851
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1853
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1855
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1859
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1863
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1865
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1867
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1869
 $22 = (_strstr($2, 4247) | 0) - $4 | 0; //@line 1872
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 1873
 HEAP32[$6 + 4 >> 2] = $22; //@line 1875
 HEAP32[$6 + 8 >> 2] = $2; //@line 1877
 _printf(4266, $6) | 0; //@line 1878
 $24 = (_strstr($2, 4282) | 0) + 4 | 0; //@line 1880
 HEAP32[$10 >> 2] = $AsyncRetVal + $4 - $24; //@line 1884
 HEAP32[$10 + 4 >> 2] = $24; //@line 1886
 _printf(4287, $10) | 0; //@line 1887
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 1888
 __ZN6Socket5closeEv($14) | 0; //@line 1889
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 302; //@line 1892
  $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 1893
  HEAP32[$28 >> 2] = $2; //@line 1894
  $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 1895
  HEAP32[$29 >> 2] = $16; //@line 1896
  $30 = $ReallocAsyncCtx9 + 12 | 0; //@line 1897
  HEAP32[$30 >> 2] = $18; //@line 1898
  sp = STACKTOP; //@line 1899
  return;
 }
 ___async_unwind = 0; //@line 1902
 HEAP32[$ReallocAsyncCtx9 >> 2] = 302; //@line 1903
 $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 1904
 HEAP32[$28 >> 2] = $2; //@line 1905
 $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 1906
 HEAP32[$29 >> 2] = $16; //@line 1907
 $30 = $ReallocAsyncCtx9 + 12 | 0; //@line 1908
 HEAP32[$30 >> 2] = $18; //@line 1909
 sp = STACKTOP; //@line 1910
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_155($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10877
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10881
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10883
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10885
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10887
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10889
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10891
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10893
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 10896
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 10897
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 10913
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 10914
    if (!___async) {
     ___async_unwind = 0; //@line 10917
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 346; //@line 10919
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 10921
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 10923
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 10925
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 10927
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 10929
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 10931
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 10933
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 10935
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 10938
    sp = STACKTOP; //@line 10939
    return;
   }
  }
 } while (0);
 return;
}
function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13798
 STACKTOP = STACKTOP + 32 | 0; //@line 13799
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13799
 $2 = sp; //@line 13800
 $3 = HEAP8[$1 >> 0] | 0; //@line 13801
 L1 : do {
  if (!($3 << 24 >> 24)) {
   label = 3; //@line 13805
  } else {
   if (!(HEAP8[$1 + 1 >> 0] | 0)) {
    label = 3; //@line 13811
   } else {
    _memset($2 | 0, 0, 32) | 0; //@line 13813
    $10 = HEAP8[$1 >> 0] | 0; //@line 13814
    if ($10 << 24 >> 24) {
     $$01824 = $1; //@line 13817
     $15 = $10; //@line 13817
     do {
      $19 = $2 + ((($15 & 255) >>> 5 & 255) << 2) | 0; //@line 13824
      HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($15 & 31); //@line 13827
      $$01824 = $$01824 + 1 | 0; //@line 13828
      $15 = HEAP8[$$01824 >> 0] | 0; //@line 13829
     } while ($15 << 24 >> 24 != 0);
    }
    $12 = HEAP8[$0 >> 0] | 0; //@line 13838
    if (!($12 << 24 >> 24)) {
     $$019$sink = $0; //@line 13841
    } else {
     $$01922 = $0; //@line 13843
     $25 = $12; //@line 13843
     while (1) {
      if (HEAP32[$2 + ((($25 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($25 & 31) | 0) {
       $$019$sink = $$01922; //@line 13855
       break L1;
      }
      $34 = $$01922 + 1 | 0; //@line 13858
      $25 = HEAP8[$34 >> 0] | 0; //@line 13859
      if (!($25 << 24 >> 24)) {
       $$019$sink = $34; //@line 13862
       break;
      } else {
       $$01922 = $34; //@line 13865
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $$019$sink = ___strchrnul($0, $3 << 24 >> 24) | 0; //@line 13875
 }
 STACKTOP = sp; //@line 13880
 return $$019$sink - $0 | 0; //@line 13880
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14980
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14984
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14986
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14988
 $9 = $4 + 12 | 0; //@line 14990
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 14991
 $11 = HEAP32[$6 + 16 >> 2] | 0; //@line 14993
 HEAP32[$8 + 8 >> 2] = 0; //@line 14995
 HEAP32[$8 >> 2] = 234; //@line 14996
 HEAP32[$8 + 4 >> 2] = $11; //@line 14998
 $13 = $8 + 12 | 0; //@line 14999
 HEAP32[$13 >> 2] = 776; //@line 15000
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 15001
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 15002
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 235; //@line 15005
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 15006
  HEAP32[$14 >> 2] = $13; //@line 15007
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 15008
  HEAP32[$15 >> 2] = $9; //@line 15009
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 15010
  HEAP32[$16 >> 2] = $8; //@line 15011
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 15012
  HEAP32[$17 >> 2] = $4; //@line 15013
  sp = STACKTOP; //@line 15014
  return;
 }
 ___async_unwind = 0; //@line 15017
 HEAP32[$ReallocAsyncCtx4 >> 2] = 235; //@line 15018
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 15019
 HEAP32[$14 >> 2] = $13; //@line 15020
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 15021
 HEAP32[$15 >> 2] = $9; //@line 15022
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 15023
 HEAP32[$16 >> 2] = $8; //@line 15024
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 15025
 HEAP32[$17 >> 2] = $4; //@line 15026
 sp = STACKTOP; //@line 15027
 return;
}
function _main__async_cb_94($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 1918
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1920
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1922
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1926
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1928
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1930
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1932
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1934
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1936
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1938
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1940
 $24 = $2; //@line 1943
 $25 = (_strstr($2, 4247) | 0) - $24 | 0; //@line 1944
 HEAP32[$4 >> 2] = $AsyncRetVal; //@line 1945
 HEAP32[$4 + 4 >> 2] = $25; //@line 1947
 HEAP32[$4 + 8 >> 2] = $2; //@line 1949
 _printf(4250, $4) | 0; //@line 1950
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 1951
 $26 = __ZN9TCPSocket4recvEPvj($8, $2, 256) | 0; //@line 1952
 if (!___async) {
  HEAP32[___async_retval >> 2] = $26; //@line 1956
  ___async_unwind = 0; //@line 1957
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 301; //@line 1959
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 1961
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $24; //@line 1963
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 1965
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $12; //@line 1967
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $14; //@line 1969
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $16; //@line 1971
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 1973
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $8; //@line 1975
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 1977
 sp = STACKTOP; //@line 1978
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_193($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15068
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15072
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15074
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15076
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15077
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 15081
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 15082
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 15083
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 236; //@line 15086
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 15087
   HEAP32[$13 >> 2] = $4; //@line 15088
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 15089
   HEAP32[$14 >> 2] = $8; //@line 15090
   sp = STACKTOP; //@line 15091
   return;
  }
  ___async_unwind = 0; //@line 15094
  HEAP32[$ReallocAsyncCtx2 >> 2] = 236; //@line 15095
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 15096
  HEAP32[$13 >> 2] = $4; //@line 15097
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 15098
  HEAP32[$14 >> 2] = $8; //@line 15099
  sp = STACKTOP; //@line 15100
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 15103
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 15109
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 15110
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 15111
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 237; //@line 15114
  sp = STACKTOP; //@line 15115
  return;
 }
 ___async_unwind = 0; //@line 15118
 HEAP32[$ReallocAsyncCtx3 >> 2] = 237; //@line 15119
 sp = STACKTOP; //@line 15120
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4886
 STACKTOP = STACKTOP + 16 | 0; //@line 4887
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4887
 $2 = sp; //@line 4888
 $3 = $1 & 255; //@line 4889
 HEAP8[$2 >> 0] = $3; //@line 4890
 $4 = $0 + 16 | 0; //@line 4891
 $5 = HEAP32[$4 >> 2] | 0; //@line 4892
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 4899
   label = 4; //@line 4900
  } else {
   $$0 = -1; //@line 4902
  }
 } else {
  $12 = $5; //@line 4905
  label = 4; //@line 4906
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 4910
   $10 = HEAP32[$9 >> 2] | 0; //@line 4911
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 4914
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 4921
     HEAP8[$10 >> 0] = $3; //@line 4922
     $$0 = $13; //@line 4923
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 4928
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4929
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 4930
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 307; //@line 4933
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 4935
    sp = STACKTOP; //@line 4936
    STACKTOP = sp; //@line 4937
    return 0; //@line 4937
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4939
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 4944
   } else {
    $$0 = -1; //@line 4946
   }
  }
 } while (0);
 STACKTOP = sp; //@line 4950
 return $$0 | 0; //@line 4950
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_31($0) {
 $0 = $0 | 0;
 var $$010 = 0, $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 17328
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17330
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17332
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17334
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17336
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17338
 $14 = HEAP32[$0 + 32 >> 2] | 0; //@line 17342
 $16 = HEAP32[$0 + 36 >> 2] | 0; //@line 17344
 $18 = HEAP32[$0 + 40 >> 2] | 0; //@line 17346
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$010 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 17352
 } else {
  $$010 = 0; //@line 17354
 }
 $24 = HEAP32[(HEAP32[$16 >> 2] | 0) + 96 >> 2] | 0; //@line 17358
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 17359
 FUNCTION_TABLE_vii[$24 & 7]($14, $16); //@line 17360
 if (!___async) {
  ___async_unwind = 0; //@line 17363
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 94; //@line 17365
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 17367
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 17369
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $8; //@line 17371
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $14; //@line 17373
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 17375
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $14; //@line 17377
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $16; //@line 17379
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $18; //@line 17381
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $$010; //@line 17383
 sp = STACKTOP; //@line 17384
 return;
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_112($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 6052
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6056
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6058
 $7 = $4 + 12 | 0; //@line 6060
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 6061
 $9 = $6 + 4 | 0; //@line 6063
 HEAP32[$9 >> 2] = 0; //@line 6065
 HEAP32[$9 + 4 >> 2] = 0; //@line 6068
 HEAP32[$6 >> 2] = 3; //@line 6069
 $13 = $6 + 12 | 0; //@line 6070
 HEAP32[$13 >> 2] = 752; //@line 6071
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 6072
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $6) | 0; //@line 6073
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 6076
  $14 = $ReallocAsyncCtx10 + 4 | 0; //@line 6077
  HEAP32[$14 >> 2] = $13; //@line 6078
  $15 = $ReallocAsyncCtx10 + 8 | 0; //@line 6079
  HEAP32[$15 >> 2] = $7; //@line 6080
  $16 = $ReallocAsyncCtx10 + 12 | 0; //@line 6081
  HEAP32[$16 >> 2] = $6; //@line 6082
  $17 = $ReallocAsyncCtx10 + 16 | 0; //@line 6083
  HEAP32[$17 >> 2] = $4; //@line 6084
  sp = STACKTOP; //@line 6085
  return;
 }
 ___async_unwind = 0; //@line 6088
 HEAP32[$ReallocAsyncCtx10 >> 2] = 202; //@line 6089
 $14 = $ReallocAsyncCtx10 + 4 | 0; //@line 6090
 HEAP32[$14 >> 2] = $13; //@line 6091
 $15 = $ReallocAsyncCtx10 + 8 | 0; //@line 6092
 HEAP32[$15 >> 2] = $7; //@line 6093
 $16 = $ReallocAsyncCtx10 + 12 | 0; //@line 6094
 HEAP32[$16 >> 2] = $6; //@line 6095
 $17 = $ReallocAsyncCtx10 + 16 | 0; //@line 6096
 HEAP32[$17 >> 2] = $4; //@line 6097
 sp = STACKTOP; //@line 6098
 return;
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_7($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 16159
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16161
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16163
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16165
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16169
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16171
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16173
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16175
 $17 = $12 + 12 | 0; //@line 16177
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 16 >> 2] >> 2]; //@line 16178
 $18 = HEAP32[$14 >> 2] | 0; //@line 16179
 HEAP32[$16 + 8 >> 2] = 0; //@line 16181
 HEAP32[$16 >> 2] = 185; //@line 16182
 HEAP32[$16 + 4 >> 2] = $18; //@line 16184
 $20 = $16 + 12 | 0; //@line 16185
 HEAP32[$20 >> 2] = 764; //@line 16186
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 16187
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($12, 0, $16) | 0; //@line 16188
 if (!___async) {
  ___async_unwind = 0; //@line 16191
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 227; //@line 16193
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $20; //@line 16195
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $2; //@line 16197
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $4; //@line 16199
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $6; //@line 16201
 HEAP32[$ReallocAsyncCtx8 + 20 >> 2] = $17; //@line 16203
 HEAP32[$ReallocAsyncCtx8 + 24 >> 2] = $10; //@line 16205
 HEAP32[$ReallocAsyncCtx8 + 28 >> 2] = $12; //@line 16207
 HEAP32[$ReallocAsyncCtx8 + 32 >> 2] = $16; //@line 16209
 sp = STACKTOP; //@line 16210
 return;
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_115($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 6139
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6143
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6145
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6147
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6148
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 6152
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 6153
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 6154
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 203; //@line 6157
   $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 6158
   HEAP32[$13 >> 2] = $4; //@line 6159
   $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 6160
   HEAP32[$14 >> 2] = $8; //@line 6161
   sp = STACKTOP; //@line 6162
   return;
  }
  ___async_unwind = 0; //@line 6165
  HEAP32[$ReallocAsyncCtx8 >> 2] = 203; //@line 6166
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 6167
  HEAP32[$13 >> 2] = $4; //@line 6168
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 6169
  HEAP32[$14 >> 2] = $8; //@line 6170
  sp = STACKTOP; //@line 6171
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 6174
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 6180
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 6181
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 6182
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 204; //@line 6185
  sp = STACKTOP; //@line 6186
  return;
 }
 ___async_unwind = 0; //@line 6189
 HEAP32[$ReallocAsyncCtx9 >> 2] = 204; //@line 6190
 sp = STACKTOP; //@line 6191
 return;
}
function _fflush__async_cb_162($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11659
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11661
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 11663
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 11667
  } else {
   $$02327 = $$02325; //@line 11669
   $$02426 = $AsyncRetVal; //@line 11669
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 11676
    } else {
     $16 = 0; //@line 11678
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 11690
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 11693
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 11696
     break L3;
    } else {
     $$02327 = $$023; //@line 11699
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 11702
   $13 = ___fflush_unlocked($$02327) | 0; //@line 11703
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 11707
    ___async_unwind = 0; //@line 11708
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 311; //@line 11710
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 11712
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 11714
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 11716
   sp = STACKTOP; //@line 11717
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 11721
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 11723
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 17957
 value = value & 255; //@line 17959
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 17962
   ptr = ptr + 1 | 0; //@line 17963
  }
  aligned_end = end & -4 | 0; //@line 17966
  block_aligned_end = aligned_end - 64 | 0; //@line 17967
  value4 = value | value << 8 | value << 16 | value << 24; //@line 17968
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 17971
   HEAP32[ptr + 4 >> 2] = value4; //@line 17972
   HEAP32[ptr + 8 >> 2] = value4; //@line 17973
   HEAP32[ptr + 12 >> 2] = value4; //@line 17974
   HEAP32[ptr + 16 >> 2] = value4; //@line 17975
   HEAP32[ptr + 20 >> 2] = value4; //@line 17976
   HEAP32[ptr + 24 >> 2] = value4; //@line 17977
   HEAP32[ptr + 28 >> 2] = value4; //@line 17978
   HEAP32[ptr + 32 >> 2] = value4; //@line 17979
   HEAP32[ptr + 36 >> 2] = value4; //@line 17980
   HEAP32[ptr + 40 >> 2] = value4; //@line 17981
   HEAP32[ptr + 44 >> 2] = value4; //@line 17982
   HEAP32[ptr + 48 >> 2] = value4; //@line 17983
   HEAP32[ptr + 52 >> 2] = value4; //@line 17984
   HEAP32[ptr + 56 >> 2] = value4; //@line 17985
   HEAP32[ptr + 60 >> 2] = value4; //@line 17986
   ptr = ptr + 64 | 0; //@line 17987
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 17991
   ptr = ptr + 4 | 0; //@line 17992
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 17997
  ptr = ptr + 1 | 0; //@line 17998
 }
 return end - num | 0; //@line 18000
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4162
 $2 = $0 + 32 | 0; //@line 4163
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 44 | 0; //@line 4168
 $5 = HEAP32[$4 >> 2] | 0; //@line 4169
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 4174
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4175
   FUNCTION_TABLE_vi[$8 & 511]($2); //@line 4176
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 134; //@line 4179
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4181
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4183
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 4185
    sp = STACKTOP; //@line 4186
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4189
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 4194
 $13 = HEAP32[$12 >> 2] | 0; //@line 4195
 do {
  if (!$13) {
   $19 = 0; //@line 4199
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 4202
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4203
   FUNCTION_TABLE_vii[$16 & 7]($2, $1); //@line 4204
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 135; //@line 4207
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 4209
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 4211
    sp = STACKTOP; //@line 4212
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4215
    $19 = HEAP32[$12 >> 2] | 0; //@line 4217
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 4222
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_34($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17702
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17704
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17706
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17708
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17710
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17712
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17714
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17716
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17718
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17720
 $19 = $2 + 12 | 0; //@line 17722
 HEAP32[$19 >> 2] = HEAP32[$8 >> 2]; //@line 17723
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 17724
 $20 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $6, $2, $18) | 0; //@line 17725
 if (!___async) {
  HEAP32[___async_retval >> 2] = $20; //@line 17729
  ___async_unwind = 0; //@line 17730
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 17732
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $19; //@line 17734
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 17736
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $2; //@line 17738
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $8; //@line 17740
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $6; //@line 17742
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $10; //@line 17744
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $12; //@line 17746
 sp = STACKTOP; //@line 17747
 return;
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5988
 $4 = $0 + 8 | 0; //@line 5989
 $5 = $0 + 52 | 0; //@line 5990
 $6 = $0 + 4 | 0; //@line 5991
 $7 = $0 + 12 | 0; //@line 5992
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 5994
  if (!$8) {
   $$2 = -3005; //@line 5997
   label = 6; //@line 5998
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 6001
  $10 = HEAP32[$6 >> 2] | 0; //@line 6002
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 80 >> 2] | 0; //@line 6005
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 6006
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 6007
  if (___async) {
   label = 4; //@line 6010
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 6013
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 6019
   label = 6; //@line 6020
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 154; //@line 6025
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 6027
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 6029
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 6031
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 6033
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 6035
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 6037
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 6039
  sp = STACKTOP; //@line 6040
  return 0; //@line 6041
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 6044
 }
 return 0; //@line 6046
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5921
 $4 = $0 + 8 | 0; //@line 5922
 $5 = $0 + 52 | 0; //@line 5923
 $6 = $0 + 4 | 0; //@line 5924
 $7 = $0 + 12 | 0; //@line 5925
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 5927
  if (!$8) {
   $$2 = -3005; //@line 5930
   label = 6; //@line 5931
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 5934
  $10 = HEAP32[$6 >> 2] | 0; //@line 5935
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 5938
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5939
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 5940
  if (___async) {
   label = 4; //@line 5943
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5946
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 5952
   label = 6; //@line 5953
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 153; //@line 5958
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 5960
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5962
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 5964
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 5966
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 5968
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 5970
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 5972
  sp = STACKTOP; //@line 5973
  return 0; //@line 5974
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 5977
 }
 return 0; //@line 5979
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10814
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10818
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10820
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10822
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10824
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10826
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10828
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 10831
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 10832
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 10841
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 10842
    if (!___async) {
     ___async_unwind = 0; //@line 10845
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 347; //@line 10847
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 10849
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 10851
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 10853
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 10855
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 10857
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 10859
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 10861
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 10864
    sp = STACKTOP; //@line 10865
    return;
   }
  }
 }
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 15838
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15840
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15842
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15844
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15846
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15848
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15850
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15852
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15856
  return;
 }
 $15 = $2 + 12 | 0; //@line 15859
 dest = $15; //@line 15860
 src = $4; //@line 15860
 stop = dest + 60 | 0; //@line 15860
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 15860
  dest = dest + 4 | 0; //@line 15860
  src = src + 4 | 0; //@line 15860
 } while ((dest | 0) < (stop | 0));
 HEAP16[$15 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 15860
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 15861
 _wait_ms(1); //@line 15862
 if (!___async) {
  ___async_unwind = 0; //@line 15865
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 55; //@line 15867
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $6; //@line 15869
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $8; //@line 15871
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $2; //@line 15873
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 15875
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $12; //@line 15877
 sp = STACKTOP; //@line 15878
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11560
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 11570
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 11570
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 11570
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 11574
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 11577
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 11580
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 11588
  } else {
   $20 = 0; //@line 11590
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 11600
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 11604
  HEAP32[___async_retval >> 2] = $$1; //@line 11606
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 11609
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 11610
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 11614
  ___async_unwind = 0; //@line 11615
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 311; //@line 11617
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 11619
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 11621
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 11623
 sp = STACKTOP; //@line 11624
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12075
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12077
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12079
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12081
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 12086
  } else {
   $9 = $4 + 4 | 0; //@line 12088
   $10 = HEAP32[$9 >> 2] | 0; //@line 12089
   $11 = $4 + 8 | 0; //@line 12090
   $12 = HEAP32[$11 >> 2] | 0; //@line 12091
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 12095
    HEAP32[$6 >> 2] = 0; //@line 12096
    HEAP32[$2 >> 2] = 0; //@line 12097
    HEAP32[$11 >> 2] = 0; //@line 12098
    HEAP32[$9 >> 2] = 0; //@line 12099
    $$0 = 0; //@line 12100
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 12107
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 12108
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 12109
   if (!___async) {
    ___async_unwind = 0; //@line 12112
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 313; //@line 12114
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 12116
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 12118
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 12120
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 12122
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 12124
   sp = STACKTOP; //@line 12125
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 12130
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $14 = 0, $5 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 933
 $5 = $0 + -4 | 0; //@line 934
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 120 >> 2] | 0; //@line 937
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 938
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($5, $1, $3, $4) | 0; //@line 939
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 57; //@line 942
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 944
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 946
  sp = STACKTOP; //@line 947
  return 0; //@line 948
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 950
 if (($2 | 0) != 0 & ($9 | 0) > -1) {
  $14 = $1 + 12 | 0; //@line 955
  dest = $2; //@line 956
  src = $14; //@line 956
  stop = dest + 60 | 0; //@line 956
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 956
   dest = dest + 4 | 0; //@line 956
   src = src + 4 | 0; //@line 956
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$14 + 60 >> 1] | 0; //@line 956
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 958
 _wait_ms(1); //@line 959
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 58; //@line 962
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 964
  sp = STACKTOP; //@line 965
  return 0; //@line 966
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 968
  return $9 | 0; //@line 969
 }
 return 0; //@line 971
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 1121
 if (!$2) {
  $$0 = -1; //@line 1124
  return $$0 | 0; //@line 1125
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 1128
 $5 = $0 + 20 | 0; //@line 1129
 HEAP32[$5 >> 2] = 0; //@line 1130
 $6 = $0 + 16 | 0; //@line 1131
 HEAP32[$6 >> 2] = 0; //@line 1132
 if ($1 | 0) {
  $$034$i = $1; //@line 1135
  $23 = 0; //@line 1135
  do {
   $23 = $23 + 1 | 0; //@line 1137
   $$034$i = $$034$i >>> 1; //@line 1138
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 1146
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1149
 HEAP32[$0 + 28 >> 2] = $1; //@line 1151
 HEAP32[$0 + 32 >> 2] = $2; //@line 1153
 HEAP32[$0 >> 2] = 0; //@line 1154
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1157
 HEAP8[$0 + 9 >> 0] = 0; //@line 1159
 HEAP8[$0 + 8 >> 0] = 0; //@line 1161
 HEAP8[$0 + 36 >> 0] = 0; //@line 1163
 HEAP32[$0 + 40 >> 2] = 0; //@line 1165
 HEAP32[$0 + 44 >> 2] = 0; //@line 1167
 HEAP8[$0 + 184 >> 0] = 0; //@line 1169
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1171
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 1174
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1177
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 1180
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1183
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 1186
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 1189
 $$0 = $$033$i; //@line 1190
 return $$0 | 0; //@line 1191
}
function __ZN9UDPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5788
 HEAP32[$0 >> 2] = 632; //@line 5789
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5790
 __ZN6Socket5closeEv($0) | 0; //@line 5791
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 148; //@line 5794
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5796
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 5798
  sp = STACKTOP; //@line 5799
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5802
 HEAP32[$0 >> 2] = 572; //@line 5803
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 5805
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 5811
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5812
   FUNCTION_TABLE_vi[$8 & 511]($0 + 32 | 0); //@line 5813
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 149; //@line 5816
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5818
    sp = STACKTOP; //@line 5819
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5822
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 5828
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 5835
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5836
 FUNCTION_TABLE_vi[$15 & 511]($0 + 16 | 0); //@line 5837
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 150; //@line 5840
  sp = STACKTOP; //@line 5841
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5844
 return;
}
function __ZN9TCPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5294
 HEAP32[$0 >> 2] = 608; //@line 5295
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5296
 __ZN6Socket5closeEv($0) | 0; //@line 5297
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 136; //@line 5300
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5302
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 5304
  sp = STACKTOP; //@line 5305
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5308
 HEAP32[$0 >> 2] = 572; //@line 5309
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 5311
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 5317
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5318
   FUNCTION_TABLE_vi[$8 & 511]($0 + 32 | 0); //@line 5319
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 137; //@line 5322
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5324
    sp = STACKTOP; //@line 5325
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5328
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 5334
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 5341
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5342
 FUNCTION_TABLE_vi[$15 & 511]($0 + 16 | 0); //@line 5343
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 138; //@line 5346
  sp = STACKTOP; //@line 5347
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5350
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 523
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 120 >> 2] | 0; //@line 526
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 527
 $8 = FUNCTION_TABLE_iiiii[$7 & 15]($0, $1, $3, $4) | 0; //@line 528
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 44; //@line 531
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 533
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 535
  sp = STACKTOP; //@line 536
  return 0; //@line 537
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 539
 if (($2 | 0) != 0 & ($8 | 0) > -1) {
  $13 = $1 + 12 | 0; //@line 544
  dest = $2; //@line 545
  src = $13; //@line 545
  stop = dest + 60 | 0; //@line 545
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 545
   dest = dest + 4 | 0; //@line 545
   src = src + 4 | 0; //@line 545
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$13 + 60 >> 1] | 0; //@line 545
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 547
 _wait_ms(1); //@line 548
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 45; //@line 551
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 553
  sp = STACKTOP; //@line 554
  return 0; //@line 555
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 557
  return $8 | 0; //@line 558
 }
 return 0; //@line 560
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 1646
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1648
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1650
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1652
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1654
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1656
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1658
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1660
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1662
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1664
 $20 = __Z18nsapi_create_stackP12NetworkStack(HEAP32[___async_retval >> 2] | 0) | 0; //@line 1667
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(40) | 0; //@line 1668
 __ZN6Socket4openEP12NetworkStack($14, $20) | 0; //@line 1669
 if (!___async) {
  ___async_unwind = 0; //@line 1672
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 297; //@line 1674
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $4; //@line 1676
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $16; //@line 1678
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $18; //@line 1680
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $6; //@line 1682
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $8; //@line 1684
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $10; //@line 1686
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $12; //@line 1688
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $14; //@line 1690
 HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $2; //@line 1692
 sp = STACKTOP; //@line 1693
 return;
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7476
 STACKTOP = STACKTOP + 48 | 0; //@line 7477
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7477
 $$byval_copy = sp + 20 | 0; //@line 7478
 $4 = sp; //@line 7479
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 7480
 $5 = __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $4, 1, $3) | 0; //@line 7481
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 164; //@line 7484
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7486
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 7488
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 7490
  sp = STACKTOP; //@line 7491
  STACKTOP = sp; //@line 7492
  return 0; //@line 7492
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7494
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 7495
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 7495
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 7495
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 7495
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 7495
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 7496
  STACKTOP = sp; //@line 7499
  return (($5 | 0) < 0 ? $5 : 0) | 0; //@line 7499
 }
 return 0; //@line 7501
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_187($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14810
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14812
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14814
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14816
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14818
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 14823
  return;
 }
 dest = $2 + 4 | 0; //@line 14827
 stop = dest + 52 | 0; //@line 14827
 do {
  HEAP32[dest >> 2] = 0; //@line 14827
  dest = dest + 4 | 0; //@line 14827
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 14828
 HEAP32[$2 + 8 >> 2] = $4; //@line 14830
 HEAP32[$2 + 12 >> 2] = -1; //@line 14832
 HEAP32[$2 + 48 >> 2] = 1; //@line 14834
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 14837
 $16 = HEAP32[$6 >> 2] | 0; //@line 14838
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 14839
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 14840
 if (!___async) {
  ___async_unwind = 0; //@line 14843
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 332; //@line 14845
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 14847
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 14849
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 14851
 sp = STACKTOP; //@line 14852
 return;
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 12508
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 12513
    $$0 = 1; //@line 12514
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 12527
     $$0 = 1; //@line 12528
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12532
     $$0 = -1; //@line 12533
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 12543
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 12547
    $$0 = 2; //@line 12548
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 12560
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 12566
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 12570
    $$0 = 3; //@line 12571
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 12581
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 12587
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 12593
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 12597
    $$0 = 4; //@line 12598
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12602
    $$0 = -1; //@line 12603
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 12608
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_36($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17838
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17842
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17844
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17846
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 17847
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 17851
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 17855
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 17856
 FUNCTION_TABLE_vi[$12 & 511]($4); //@line 17857
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 17860
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 17861
  HEAP32[$13 >> 2] = $4; //@line 17862
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 17863
  HEAP32[$14 >> 2] = $6; //@line 17864
  $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 17865
  HEAP32[$15 >> 2] = $8; //@line 17866
  sp = STACKTOP; //@line 17867
  return;
 }
 ___async_unwind = 0; //@line 17870
 HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 17871
 $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 17872
 HEAP32[$13 >> 2] = $4; //@line 17873
 $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 17874
 HEAP32[$14 >> 2] = $6; //@line 17875
 $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 17876
 HEAP32[$15 >> 2] = $8; //@line 17877
 sp = STACKTOP; //@line 17878
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_69($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20479
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20483
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 572; //@line 20484
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 20486
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 20491
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 20492
  FUNCTION_TABLE_vi[$10 & 511]($4 + 32 | 0); //@line 20493
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 149; //@line 20496
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 20497
   HEAP32[$11 >> 2] = $4; //@line 20498
   sp = STACKTOP; //@line 20499
   return;
  }
  ___async_unwind = 0; //@line 20502
  HEAP32[$ReallocAsyncCtx >> 2] = 149; //@line 20503
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 20504
  HEAP32[$11 >> 2] = $4; //@line 20505
  sp = STACKTOP; //@line 20506
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 20510
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 20517
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20518
 FUNCTION_TABLE_vi[$17 & 511]($4 + 16 | 0); //@line 20519
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 20522
  sp = STACKTOP; //@line 20523
  return;
 }
 ___async_unwind = 0; //@line 20526
 HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 20527
 sp = STACKTOP; //@line 20528
 return;
}
function __ZN9TCPSocketD2Ev__async_cb_44($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18318
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18322
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 572; //@line 18323
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 18325
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 18330
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 18331
  FUNCTION_TABLE_vi[$10 & 511]($4 + 32 | 0); //@line 18332
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 137; //@line 18335
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 18336
   HEAP32[$11 >> 2] = $4; //@line 18337
   sp = STACKTOP; //@line 18338
   return;
  }
  ___async_unwind = 0; //@line 18341
  HEAP32[$ReallocAsyncCtx >> 2] = 137; //@line 18342
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 18343
  HEAP32[$11 >> 2] = $4; //@line 18344
  sp = STACKTOP; //@line 18345
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 18349
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 18356
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18357
 FUNCTION_TABLE_vi[$17 & 511]($4 + 16 | 0); //@line 18358
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 18361
  sp = STACKTOP; //@line 18362
  return;
 }
 ___async_unwind = 0; //@line 18365
 HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 18366
 sp = STACKTOP; //@line 18367
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_156($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10950
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10956
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10958
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10960
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10962
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 10965
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 10966
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 10972
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 10973
   if (!___async) {
    ___async_unwind = 0; //@line 10976
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 345; //@line 10978
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 10980
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 10982
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 10984
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 10986
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 10988
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 10990
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 10993
   sp = STACKTOP; //@line 10994
   return;
  }
 }
 return;
}
function _main__async_cb_95($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1985
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1987
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1989
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1991
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1993
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1995
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1997
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1999
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2001
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2003
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 2004
 $19 = __Znaj(256) | 0; //@line 2005
 if (!___async) {
  HEAP32[___async_retval >> 2] = $19; //@line 2009
  ___async_unwind = 0; //@line 2010
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 299; //@line 2012
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 2014
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 2016
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 2018
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 2020
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 2022
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 2024
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 2026
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 2028
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 2030
 sp = STACKTOP; //@line 2031
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_148($0) {
 $0 = $0 | 0;
 var $$010 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10183
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10187
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 10190
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10191
 if (!$7) {
  if ($6) {
   $$010 = -3007; //@line 10195
   $12 = ___async_retval; //@line 10196
   HEAP32[$12 >> 2] = $$010; //@line 10197
   return;
  }
  $$010 = 0; //@line 10200
  $12 = ___async_retval; //@line 10201
  HEAP32[$12 >> 2] = $$010; //@line 10202
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 10206
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 10207
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 10208
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 10211
   $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 10212
   $$expand_i1_val = $6 & 1; //@line 10213
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 10214
   sp = STACKTOP; //@line 10215
   return;
  }
  ___async_unwind = 0; //@line 10218
  HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 10219
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 10220
  $$expand_i1_val = $6 & 1; //@line 10221
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 10222
  sp = STACKTOP; //@line 10223
  return;
 }
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_147($0) {
 $0 = $0 | 0;
 var $$010 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 10136
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10140
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 10143
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 10144
 if (!$7) {
  if ($6) {
   $$010 = -3007; //@line 10148
   $12 = ___async_retval; //@line 10149
   HEAP32[$12 >> 2] = $$010; //@line 10150
   return;
  }
  $$010 = 0; //@line 10153
  $12 = ___async_retval; //@line 10154
  HEAP32[$12 >> 2] = $$010; //@line 10155
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 10159
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 10160
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 10161
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 10164
   $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 10165
   $$expand_i1_val = $6 & 1; //@line 10166
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 10167
   sp = STACKTOP; //@line 10168
   return;
  }
  ___async_unwind = 0; //@line 10171
  HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 10172
  $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 10173
  $$expand_i1_val = $6 & 1; //@line 10174
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 10175
  sp = STACKTOP; //@line 10176
  return;
 }
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 1201
 HEAP32[$0 + 20 >> 2] = 0; //@line 1203
 $5 = $0 + 16 | 0; //@line 1204
 HEAP32[$5 >> 2] = 0; //@line 1205
 if ($1 | 0) {
  $$034 = $1; //@line 1208
  $22 = 0; //@line 1208
  do {
   $22 = $22 + 1 | 0; //@line 1210
   $$034 = $$034 >>> 1; //@line 1211
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 1219
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1222
 HEAP32[$0 + 28 >> 2] = $1; //@line 1224
 HEAP32[$0 + 32 >> 2] = $2; //@line 1226
 HEAP32[$0 >> 2] = 0; //@line 1227
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1230
 HEAP8[$0 + 9 >> 0] = 0; //@line 1232
 HEAP8[$0 + 8 >> 0] = 0; //@line 1234
 HEAP8[$0 + 36 >> 0] = 0; //@line 1236
 HEAP32[$0 + 40 >> 2] = 0; //@line 1238
 HEAP32[$0 + 44 >> 2] = 0; //@line 1240
 HEAP8[$0 + 184 >> 0] = 0; //@line 1242
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1244
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 1247
  return $$033 | 0; //@line 1248
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1251
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 1254
  return $$033 | 0; //@line 1255
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1258
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 1261
 return $$033 | 0; //@line 1262
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 11392
  $8 = $0; //@line 11392
  $9 = $1; //@line 11392
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11394
   $$0914 = $$0914 + -1 | 0; //@line 11398
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 11399
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11400
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 11408
   }
  }
  $$010$lcssa$off0 = $8; //@line 11413
  $$09$lcssa = $$0914; //@line 11413
 } else {
  $$010$lcssa$off0 = $0; //@line 11415
  $$09$lcssa = $2; //@line 11415
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 11419
 } else {
  $$012 = $$010$lcssa$off0; //@line 11421
  $$111 = $$09$lcssa; //@line 11421
  while (1) {
   $26 = $$111 + -1 | 0; //@line 11426
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 11427
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 11431
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 11434
    $$111 = $26; //@line 11434
   }
  }
 }
 return $$1$lcssa | 0; //@line 11438
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_138($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9784
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9788
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9790
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9792
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9794
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9796
 $13 = $4 + 12 | 0; //@line 9798
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9799
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 9800
 $14 = FUNCTION_TABLE_iiiii[$12 & 15]($6, $8, $4, $10) | 0; //@line 9801
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 9804
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 9805
  HEAP32[$15 >> 2] = $13; //@line 9806
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 9807
  HEAP32[$16 >> 2] = $4; //@line 9808
  sp = STACKTOP; //@line 9809
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 9813
 ___async_unwind = 0; //@line 9814
 HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 9815
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 9816
 HEAP32[$15 >> 2] = $13; //@line 9817
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 9818
 HEAP32[$16 >> 2] = $4; //@line 9819
 sp = STACKTOP; //@line 9820
 return;
}
function _main__async_cb_98($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 2073
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2075
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2077
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2079
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2081
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2083
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2085
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2087
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2089
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2091
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 2092
 __ZN9TCPSocket7connectEPKct($2, 4193, 80) | 0; //@line 2093
 if (!___async) {
  ___async_unwind = 0; //@line 2096
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 298; //@line 2098
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 2100
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 2102
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 2104
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 2106
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 2108
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 2110
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 2112
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 2114
 HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 2116
 sp = STACKTOP; //@line 2117
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_142($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9986
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9990
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9992
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9994
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9996
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9998
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 10001
 _equeue_event_delay($4, $6); //@line 10002
 _equeue_event_dtor($4, 105); //@line 10003
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 10004
 $14 = _equeue_post($8, 106, $4) | 0; //@line 10005
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 10008
  $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 10009
  HEAP32[$15 >> 2] = $10; //@line 10010
  $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 10011
  HEAP32[$16 >> 2] = $12; //@line 10012
  sp = STACKTOP; //@line 10013
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 10017
 ___async_unwind = 0; //@line 10018
 HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 10019
 $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 10020
 HEAP32[$15 >> 2] = $10; //@line 10021
 $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 10022
 HEAP32[$16 >> 2] = $12; //@line 10023
 sp = STACKTOP; //@line 10024
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_77($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 23200
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23202
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23204
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23206
 $8 = HEAP32[$2 + 28 >> 2] | 0; //@line 23208
 if (!$8) {
  __ZdlPv($2); //@line 23211
  HEAP32[___async_retval >> 2] = -3007; //@line 23213
  return;
 }
 $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 23217
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 23218
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 23219
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 23222
  $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 23223
  HEAP32[$12 >> 2] = $2; //@line 23224
  $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 23225
  HEAP32[$13 >> 2] = $6; //@line 23226
  sp = STACKTOP; //@line 23227
  return;
 }
 ___async_unwind = 0; //@line 23230
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 23231
 $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 23232
 HEAP32[$12 >> 2] = $2; //@line 23233
 $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 23234
 HEAP32[$13 >> 2] = $6; //@line 23235
 sp = STACKTOP; //@line 23236
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_127($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 8866
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8870
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8872
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8874
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8876
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8878
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 8880
 $15 = $4 + 12 | 0; //@line 8882
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 8883
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 8884
 $16 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($6, $8, $10, 0, $4, $12) | 0; //@line 8885
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 8889
  ___async_unwind = 0; //@line 8890
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 8892
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $15; //@line 8894
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $14; //@line 8896
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $4; //@line 8898
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 8900
 sp = STACKTOP; //@line 8901
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9583
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9585
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9589
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9591
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9593
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9595
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 9599
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 9602
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 9603
   if (!___async) {
    ___async_unwind = 0; //@line 9606
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 349; //@line 9608
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 9610
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 9612
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 9614
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 9616
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 9618
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 9620
   sp = STACKTOP; //@line 9621
   return;
  }
 }
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 4652
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 4657
   label = 4; //@line 4658
  } else {
   $$01519 = $0; //@line 4660
   $23 = $1; //@line 4660
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 4665
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 4668
    $23 = $6; //@line 4669
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 4673
     label = 4; //@line 4674
     break;
    } else {
     $$01519 = $6; //@line 4677
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 4683
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 4685
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 4693
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 4701
  } else {
   $$pn = $$0; //@line 4703
   while (1) {
    $19 = $$pn + 1 | 0; //@line 4705
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 4709
     break;
    } else {
     $$pn = $19; //@line 4712
    }
   }
  }
  $$sink = $$1$lcssa; //@line 4717
 }
 return $$sink - $1 | 0; //@line 4720
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 14447
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 14454
   $10 = $1 + 16 | 0; //@line 14455
   $11 = HEAP32[$10 >> 2] | 0; //@line 14456
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 14459
    HEAP32[$1 + 24 >> 2] = $4; //@line 14461
    HEAP32[$1 + 36 >> 2] = 1; //@line 14463
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 14473
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 14478
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 14481
    HEAP8[$1 + 54 >> 0] = 1; //@line 14483
    break;
   }
   $21 = $1 + 24 | 0; //@line 14486
   $22 = HEAP32[$21 >> 2] | 0; //@line 14487
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 14490
    $28 = $4; //@line 14491
   } else {
    $28 = $22; //@line 14493
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 14502
   }
  }
 } while (0);
 return;
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16112
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16116
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16118
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16120
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16122
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16124
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16128
 $17 = (HEAP32[$0 + 28 >> 2] | 0) + 12 | 0; //@line 16130
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16131
 $18 = HEAP32[$16 >> 2] | 0; //@line 16132
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(28) | 0; //@line 16133
 __ZL28nsapi_dns_query_async_deletei($18) | 0; //@line 16134
 if (!___async) {
  ___async_unwind = 0; //@line 16137
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 225; //@line 16139
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $4; //@line 16141
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $6; //@line 16143
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $8; //@line 16145
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $17; //@line 16147
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 16149
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 16151
 sp = STACKTOP; //@line 16152
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_82($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 102
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 104
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 106
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 108
 $8 = HEAP32[$2 + 28 >> 2] | 0; //@line 110
 if (!$8) {
  __ZdlPv($2); //@line 113
  HEAP32[___async_retval >> 2] = -3007; //@line 115
  return;
 }
 $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 119
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 120
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 121
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 190; //@line 124
  $12 = $ReallocAsyncCtx15 + 4 | 0; //@line 125
  HEAP32[$12 >> 2] = $2; //@line 126
  $13 = $ReallocAsyncCtx15 + 8 | 0; //@line 127
  HEAP32[$13 >> 2] = $6; //@line 128
  sp = STACKTOP; //@line 129
  return;
 }
 ___async_unwind = 0; //@line 132
 HEAP32[$ReallocAsyncCtx15 >> 2] = 190; //@line 133
 $12 = $ReallocAsyncCtx15 + 4 | 0; //@line 134
 HEAP32[$12 >> 2] = $2; //@line 135
 $13 = $ReallocAsyncCtx15 + 8 | 0; //@line 136
 HEAP32[$13 >> 2] = $6; //@line 137
 sp = STACKTOP; //@line 138
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 2310
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2312
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 2316
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 2321
  dest = $2; //@line 2322
  src = $8; //@line 2322
  stop = dest + 60 | 0; //@line 2322
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 2322
   dest = dest + 4 | 0; //@line 2322
   src = src + 4 | 0; //@line 2322
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 2322
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 2324
 _wait_ms(1); //@line 2325
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 58; //@line 2328
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 2329
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 2330
  sp = STACKTOP; //@line 2331
  return;
 }
 ___async_unwind = 0; //@line 2334
 HEAP32[$ReallocAsyncCtx2 >> 2] = 58; //@line 2335
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 2336
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 2337
 sp = STACKTOP; //@line 2338
 return;
}
function __ZN6Socket5closeEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14881
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14883
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14885
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14887
 $7 = HEAP32[$2 >> 2] | 0; //@line 14888
 HEAP32[$2 >> 2] = 0; //@line 14889
 $8 = HEAP32[$4 >> 2] | 0; //@line 14890
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0; //@line 14893
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 14894
 $12 = FUNCTION_TABLE_iii[$11 & 15]($8, $7) | 0; //@line 14895
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 132; //@line 14898
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 14899
  HEAP32[$13 >> 2] = $4; //@line 14900
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 14901
  HEAP32[$14 >> 2] = $6; //@line 14902
  sp = STACKTOP; //@line 14903
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 14907
 ___async_unwind = 0; //@line 14908
 HEAP32[$ReallocAsyncCtx2 >> 2] = 132; //@line 14909
 $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 14910
 HEAP32[$13 >> 2] = $4; //@line 14911
 $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 14912
 HEAP32[$14 >> 2] = $6; //@line 14913
 sp = STACKTOP; //@line 14914
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_163($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11851
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11855
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11857
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11859
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11861
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11863
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11865
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11867
 $17 = $4 + 12 | 0; //@line 11869
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 11870
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 11871
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 11872
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 11876
  ___async_unwind = 0; //@line 11877
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 11879
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 11881
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 11883
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 11885
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 11887
 sp = STACKTOP; //@line 11888
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 1591
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1593
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1597
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 1602
  dest = $2; //@line 1603
  src = $8; //@line 1603
  stop = dest + 60 | 0; //@line 1603
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 1603
   dest = dest + 4 | 0; //@line 1603
   src = src + 4 | 0; //@line 1603
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 1603
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 1605
 _wait_ms(1); //@line 1606
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 1609
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 1610
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 1611
  sp = STACKTOP; //@line 1612
  return;
 }
 ___async_unwind = 0; //@line 1615
 HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 1616
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 1617
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 1618
 sp = STACKTOP; //@line 1619
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_145($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10079
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10083
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10085
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10087
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10089
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 10092
 _equeue_event_dtor($4, 105); //@line 10093
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 10094
 $12 = _equeue_post($6, 106, $4) | 0; //@line 10095
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 10098
  $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 10099
  HEAP32[$13 >> 2] = $8; //@line 10100
  $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 10101
  HEAP32[$14 >> 2] = $10; //@line 10102
  sp = STACKTOP; //@line 10103
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 10107
 ___async_unwind = 0; //@line 10108
 HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 10109
 $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 10110
 HEAP32[$13 >> 2] = $8; //@line 10111
 $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 10112
 HEAP32[$14 >> 2] = $10; //@line 10113
 sp = STACKTOP; //@line 10114
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13733
 $1 = HEAP32[444] | 0; //@line 13734
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 13740
 } else {
  $19 = 0; //@line 13742
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 13748
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 13754
    $12 = HEAP32[$11 >> 2] | 0; //@line 13755
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 13761
     HEAP8[$12 >> 0] = 10; //@line 13762
     $22 = 0; //@line 13763
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13767
   $17 = ___overflow($1, 10) | 0; //@line 13768
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 322; //@line 13771
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 13773
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 13775
    sp = STACKTOP; //@line 13776
    return 0; //@line 13777
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13779
    $22 = $17 >> 31; //@line 13781
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 13788
 }
 return $22 | 0; //@line 13790
}
function _mbed_vtracef__async_cb_179($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 14235
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14237
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14239
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14241
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 14246
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14248
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 14253
 $16 = _snprintf($4, $6, 3567, $2) | 0; //@line 14254
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 14256
 $19 = $4 + $$18 | 0; //@line 14258
 $20 = $6 - $$18 | 0; //@line 14259
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 3645, $12) | 0; //@line 14267
  }
 }
 $23 = HEAP32[133] | 0; //@line 14270
 $24 = HEAP32[126] | 0; //@line 14271
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 14272
 FUNCTION_TABLE_vi[$23 & 511]($24); //@line 14273
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 14276
  sp = STACKTOP; //@line 14277
  return;
 }
 ___async_unwind = 0; //@line 14280
 HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 14281
 sp = STACKTOP; //@line 14282
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_53($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 19343
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19347
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19349
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19351
 $9 = $4 + 12 | 0; //@line 19353
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19354
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 19355
 $10 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($6, $8, $4) | 0; //@line 19356
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 209; //@line 19359
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 19360
  HEAP32[$11 >> 2] = $9; //@line 19361
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 19362
  HEAP32[$12 >> 2] = $4; //@line 19363
  sp = STACKTOP; //@line 19364
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 19368
 ___async_unwind = 0; //@line 19369
 HEAP32[$ReallocAsyncCtx5 >> 2] = 209; //@line 19370
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 19371
 HEAP32[$11 >> 2] = $9; //@line 19372
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 19373
 HEAP32[$12 >> 2] = $4; //@line 19374
 sp = STACKTOP; //@line 19375
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18489
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18491
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18493
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18495
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18497
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18499
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18501
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18503
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 18505
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 18506
 $16 = FUNCTION_TABLE_iiii[$14 & 31]($12, $2, $AsyncRetVal) | 0; //@line 18507
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 18511
  ___async_unwind = 0; //@line 18512
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 122; //@line 18514
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 18516
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 18518
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 18520
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 18522
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 18524
 sp = STACKTOP; //@line 18525
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_137($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 9631
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9637
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9639
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9641
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9643
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 9648
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 9650
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 9651
 if (!___async) {
  ___async_unwind = 0; //@line 9654
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 349; //@line 9656
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 9658
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 9660
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 9662
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 9664
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 9666
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 9668
 sp = STACKTOP; //@line 9669
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 8308
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8310
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8312
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8314
 $7 = $2 + 12 | 0; //@line 8315
 $8 = HEAP32[$7 >> 2] | 0; //@line 8316
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 8319
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 8323
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 8324
 FUNCTION_TABLE_vii[$11 & 7]($6, $2); //@line 8325
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 8328
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 8329
  HEAP32[$12 >> 2] = $7; //@line 8330
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 8331
  HEAP32[$13 >> 2] = $4; //@line 8332
  sp = STACKTOP; //@line 8333
  return;
 }
 ___async_unwind = 0; //@line 8336
 HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 8337
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 8338
 HEAP32[$12 >> 2] = $7; //@line 8339
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 8340
 HEAP32[$13 >> 2] = $4; //@line 8341
 sp = STACKTOP; //@line 8342
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2440
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2443
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2444
 $7 = FUNCTION_TABLE_ii[$6 & 31]($0) | 0; //@line 2445
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 79; //@line 2448
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2450
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2452
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 2454
  sp = STACKTOP; //@line 2455
  return 0; //@line 2456
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2458
 $12 = HEAP32[HEAP32[$7 >> 2] >> 2] | 0; //@line 2460
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2461
 $13 = FUNCTION_TABLE_iiiii[$12 & 15]($7, $1, $2, $3) | 0; //@line 2462
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 80; //@line 2465
  sp = STACKTOP; //@line 2466
  return 0; //@line 2467
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2469
  return $13 | 0; //@line 2470
 }
 return 0; //@line 2472
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_133($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9326
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9328
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9330
 $6 = HEAP32[$2 + 28 >> 2] | 0; //@line 9332
 if (!$6) {
  __ZdlPv($2); //@line 9335
  HEAP32[$4 >> 2] = 0; //@line 9336
  HEAP32[___async_retval >> 2] = 0; //@line 9338
  return;
 }
 $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 9343
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 9344
 FUNCTION_TABLE_vi[$10 & 511]($2 + 16 | 0); //@line 9345
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 9348
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 9349
  HEAP32[$11 >> 2] = $2; //@line 9350
  $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 9351
  HEAP32[$12 >> 2] = $4; //@line 9352
  sp = STACKTOP; //@line 9353
  return;
 }
 ___async_unwind = 0; //@line 9356
 HEAP32[$ReallocAsyncCtx4 >> 2] = 258; //@line 9357
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 9358
 HEAP32[$11 >> 2] = $2; //@line 9359
 $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 9360
 HEAP32[$12 >> 2] = $4; //@line 9361
 sp = STACKTOP; //@line 9362
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_102($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2517
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2521
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2523
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2525
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2527
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2529
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2531
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2533
 $17 = $4 + 12 | 0; //@line 2535
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 2536
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 2537
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 2538
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 2542
  ___async_unwind = 0; //@line 2543
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 262; //@line 2545
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 2547
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 2549
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 2551
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 2553
 sp = STACKTOP; //@line 2554
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14306
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 14315
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 14320
      HEAP32[$13 >> 2] = $2; //@line 14321
      $19 = $1 + 40 | 0; //@line 14322
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 14325
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14335
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 14339
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 14346
    }
   }
  }
 } while (0);
 return;
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9883
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9885
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9887
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9889
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 9891
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 9893
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 7156; //@line 9898
  HEAP32[$4 + 4 >> 2] = $6; //@line 9900
  _abort_message(7065, $4); //@line 9901
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 9904
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 9907
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 9908
 $16 = FUNCTION_TABLE_ii[$15 & 31]($12) | 0; //@line 9909
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 9913
  ___async_unwind = 0; //@line 9914
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 328; //@line 9916
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 9918
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 9920
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 9922
 sp = STACKTOP; //@line 9923
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 12628
 while (1) {
  if ((HEAPU8[5128 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 12635
   break;
  }
  $7 = $$016 + 1 | 0; //@line 12638
  if (($7 | 0) == 87) {
   $$01214 = 5216; //@line 12641
   $$115 = 87; //@line 12641
   label = 5; //@line 12642
   break;
  } else {
   $$016 = $7; //@line 12645
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 5216; //@line 12651
  } else {
   $$01214 = 5216; //@line 12653
   $$115 = $$016; //@line 12653
   label = 5; //@line 12654
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 12659
   $$113 = $$01214; //@line 12660
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 12664
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 12671
   if (!$$115) {
    $$012$lcssa = $$113; //@line 12674
    break;
   } else {
    $$01214 = $$113; //@line 12677
    label = 5; //@line 12678
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 12685
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_199($0) {
 $0 = $0 | 0;
 var $$4$ = 0, $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16468
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16472
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16474
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16476
 $$4$ = ($AsyncRetVal | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : $AsyncRetVal; //@line 16478
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 16479
 __ZN9UDPSocketD2Ev($4); //@line 16480
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 16483
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 16484
  HEAP32[$9 >> 2] = $6; //@line 16485
  $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 16486
  HEAP32[$10 >> 2] = $$4$; //@line 16487
  sp = STACKTOP; //@line 16488
  return;
 }
 ___async_unwind = 0; //@line 16491
 HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 16492
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 16493
 HEAP32[$9 >> 2] = $6; //@line 16494
 $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 16495
 HEAP32[$10 >> 2] = $$4$; //@line 16496
 sp = STACKTOP; //@line 16497
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8104
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8106
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8108
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8112
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 8116
  label = 4; //@line 8117
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 8122
   label = 4; //@line 8123
  } else {
   $$037$off039 = 3; //@line 8125
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 8129
  $17 = $8 + 40 | 0; //@line 8130
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 8133
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 8143
    $$037$off039 = $$037$off038; //@line 8144
   } else {
    $$037$off039 = $$037$off038; //@line 8146
   }
  } else {
   $$037$off039 = $$037$off038; //@line 8149
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 8152
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 12701
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 12705
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 12708
   if (!$5) {
    $$0 = 0; //@line 12711
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 12717
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 12723
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 12730
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 12737
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 12744
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 12751
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 12758
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 12762
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 12772
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2394
 $1 = $0 + 12 | 0; //@line 2395
 $2 = HEAP32[$1 >> 2] | 0; //@line 2396
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2400
   _mbed_assert_internal(4029, 4034, 528); //@line 2401
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 77; //@line 2404
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 2406
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 2408
    sp = STACKTOP; //@line 2409
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2412
    $7 = HEAP32[$1 >> 2] | 0; //@line 2414
    break;
   }
  } else {
   $7 = $2; //@line 2418
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 2421
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2422
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 2423
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 78; //@line 2426
  sp = STACKTOP; //@line 2427
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2430
  return;
 }
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 12897
 $32 = $0 + 3 | 0; //@line 12911
 $33 = HEAP8[$32 >> 0] | 0; //@line 12912
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 12914
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 12919
  $$sink21$lcssa = $32; //@line 12919
 } else {
  $$sink2123 = $32; //@line 12921
  $39 = $35; //@line 12921
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 12924
   $41 = HEAP8[$40 >> 0] | 0; //@line 12925
   $39 = $39 << 8 | $41 & 255; //@line 12927
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 12932
    $$sink21$lcssa = $40; //@line 12932
    break;
   } else {
    $$sink2123 = $40; //@line 12935
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 12942
}
function _mbed_vtracef__async_cb_185($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14620
 $3 = HEAP32[134] | 0; //@line 14624
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[126] | 0; //@line 14628
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 14629
  FUNCTION_TABLE_vi[$3 & 511]($5); //@line 14630
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 14633
   sp = STACKTOP; //@line 14634
   return;
  }
  ___async_unwind = 0; //@line 14637
  HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 14638
  sp = STACKTOP; //@line 14639
  return;
 } else {
  $6 = HEAP32[133] | 0; //@line 14642
  $7 = HEAP32[126] | 0; //@line 14643
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 14644
  FUNCTION_TABLE_vi[$6 & 511]($7); //@line 14645
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 68; //@line 14648
   sp = STACKTOP; //@line 14649
   return;
  }
  ___async_unwind = 0; //@line 14652
  HEAP32[$ReallocAsyncCtx4 >> 2] = 68; //@line 14653
  sp = STACKTOP; //@line 14654
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3983
 $1 = $0 + 12 | 0; //@line 3984
 $2 = HEAP32[$1 >> 2] | 0; //@line 3985
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3989
   _mbed_assert_internal(4029, 4034, 528); //@line 3990
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 128; //@line 3993
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 3995
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 3997
    sp = STACKTOP; //@line 3998
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4001
    $7 = HEAP32[$1 >> 2] | 0; //@line 4003
    break;
   }
  } else {
   $7 = $2; //@line 4007
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 4010
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4011
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 4012
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 129; //@line 4015
  sp = STACKTOP; //@line 4016
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4019
  return;
 }
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 12979
 $2 = $0 + 12 | 0; //@line 12981
 $3 = HEAP32[$2 >> 2] | 0; //@line 12982
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12986
   _mbed_assert_internal(4029, 4034, 528); //@line 12987
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 290; //@line 12990
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 12992
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 12994
    sp = STACKTOP; //@line 12995
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12998
    $8 = HEAP32[$2 >> 2] | 0; //@line 13000
    break;
   }
  } else {
   $8 = $3; //@line 13004
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 13007
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13009
 FUNCTION_TABLE_vi[$7 & 511]($0); //@line 13010
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 291; //@line 13013
  sp = STACKTOP; //@line 13014
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13017
  return;
 }
}
function __ZN6SocketD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 3706
 HEAP32[$0 >> 2] = 572; //@line 3707
 $2 = HEAP32[$0 + 44 >> 2] | 0; //@line 3709
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 3715
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3716
   FUNCTION_TABLE_vi[$6 & 511]($0 + 32 | 0); //@line 3717
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 119; //@line 3720
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 3722
    sp = STACKTOP; //@line 3723
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3726
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 28 >> 2] | 0; //@line 3732
 if (!$9) {
  return;
 }
 $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 3739
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3740
 FUNCTION_TABLE_vi[$13 & 511]($0 + 16 | 0); //@line 3741
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 120; //@line 3744
  sp = STACKTOP; //@line 3745
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3748
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14139
 STACKTOP = STACKTOP + 16 | 0; //@line 14140
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14140
 $1 = sp; //@line 14141
 HEAP32[$1 >> 2] = $varargs; //@line 14142
 $2 = HEAP32[412] | 0; //@line 14143
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14144
 _vfprintf($2, $0, $1) | 0; //@line 14145
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 329; //@line 14148
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14150
  sp = STACKTOP; //@line 14151
  STACKTOP = sp; //@line 14152
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14154
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14155
 _fputc(10, $2) | 0; //@line 14156
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 330; //@line 14159
  sp = STACKTOP; //@line 14160
  STACKTOP = sp; //@line 14161
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14163
  _abort(); //@line 14164
 }
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_139($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 9826
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9830
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9832
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9833
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 9837
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 9841
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 9842
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 9843
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 84; //@line 9846
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 9847
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 9848
  sp = STACKTOP; //@line 9849
  return;
 }
 ___async_unwind = 0; //@line 9852
 HEAP32[$ReallocAsyncCtx4 >> 2] = 84; //@line 9853
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 9854
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 9855
 sp = STACKTOP; //@line 9856
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16053
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16055
 $6 = HEAP32[$0 + 16 >> 2] | 0; //@line 16059
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 16061
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 16063
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$0 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 16069
 } else {
  $$0 = 0; //@line 16071
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16073
 $14 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($6, $8, $10, $$0) | 0; //@line 16074
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 90; //@line 16077
  sp = STACKTOP; //@line 16078
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 16082
 ___async_unwind = 0; //@line 16083
 HEAP32[$ReallocAsyncCtx2 >> 2] = 90; //@line 16084
 sp = STACKTOP; //@line 16085
 return;
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 12831
 $23 = $0 + 2 | 0; //@line 12840
 $24 = HEAP8[$23 >> 0] | 0; //@line 12841
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 12844
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 12849
  $$lcssa = $24; //@line 12849
 } else {
  $$01618 = $23; //@line 12851
  $$019 = $27; //@line 12851
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 12853
   $31 = HEAP8[$30 >> 0] | 0; //@line 12854
   $$019 = ($$019 | $31 & 255) << 8; //@line 12857
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 12862
    $$lcssa = $31; //@line 12862
    break;
   } else {
    $$01618 = $30; //@line 12865
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 12872
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_55($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 19391
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19395
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19397
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19398
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 19402
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 19406
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 19407
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 19408
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 210; //@line 19411
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19412
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19413
  sp = STACKTOP; //@line 19414
  return;
 }
 ___async_unwind = 0; //@line 19417
 HEAP32[$ReallocAsyncCtx4 >> 2] = 210; //@line 19418
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 19419
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 19420
 sp = STACKTOP; //@line 19421
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_165($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11969
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11975
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11977
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 11978
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 11982
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 11986
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 11987
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 11988
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 11991
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 11992
  HEAP32[$13 >> 2] = $6; //@line 11993
  sp = STACKTOP; //@line 11994
  return;
 }
 ___async_unwind = 0; //@line 11997
 HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 11998
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 11999
 HEAP32[$13 >> 2] = $6; //@line 12000
 sp = STACKTOP; //@line 12001
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2618
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2621
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2622
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 2623
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 87; //@line 2626
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2628
  sp = STACKTOP; //@line 2629
  return 0; //@line 2630
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2632
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0; //@line 2635
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2636
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 2637
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 88; //@line 2640
  sp = STACKTOP; //@line 2641
  return 0; //@line 2642
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2644
  return $10 | 0; //@line 2645
 }
 return 0; //@line 2647
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12459
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12459
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12460
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 12461
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 12470
    $$016 = $9; //@line 12473
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 12473
   } else {
    $$016 = $0; //@line 12475
    $storemerge = 0; //@line 12475
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 12477
   $$0 = $$016; //@line 12478
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 12482
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 12488
   HEAP32[tempDoublePtr >> 2] = $2; //@line 12491
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 12491
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 12492
  }
 }
 return +$$0;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_128($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 8907
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8911
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8913
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 8914
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 8918
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 8922
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 8923
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 8924
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 8927
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 8928
  HEAP32[$11 >> 2] = $4; //@line 8929
  sp = STACKTOP; //@line 8930
  return;
 }
 ___async_unwind = 0; //@line 8933
 HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 8934
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 8935
 HEAP32[$11 >> 2] = $4; //@line 8936
 sp = STACKTOP; //@line 8937
 return;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2583
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2586
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2587
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 2588
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 2591
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2593
  sp = STACKTOP; //@line 2594
  return 0; //@line 2595
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2597
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0; //@line 2600
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2601
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 2602
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 86; //@line 2605
  sp = STACKTOP; //@line 2606
  return 0; //@line 2607
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2609
  return $10 | 0; //@line 2610
 }
 return 0; //@line 2612
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15777
 STACKTOP = STACKTOP + 16 | 0; //@line 15778
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15778
 $3 = sp; //@line 15779
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 15781
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 15784
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15785
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 15786
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 353; //@line 15789
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15791
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15793
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 15795
  sp = STACKTOP; //@line 15796
  STACKTOP = sp; //@line 15797
  return 0; //@line 15797
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15799
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 15803
 }
 STACKTOP = sp; //@line 15805
 return $8 & 1 | 0; //@line 15805
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, sp = 0;
 sp = STACKTOP; //@line 12017
 STACKTOP = STACKTOP + 32 | 0; //@line 12018
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12018
 $$byval_copy = sp; //@line 12019
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12021
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12023
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12027
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 12028
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 12028
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 12028
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 12028
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 12028
 __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 12029
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) < 0 ? $AsyncRetVal : 0; //@line 12033
 STACKTOP = sp; //@line 12034
 return;
}
function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8.98846567431158e+307; //@line 9376
  $5 = ($1 | 0) > 2046; //@line 9378
  $7 = $1 + -2046 | 0; //@line 9380
  $$0 = $5 ? $3 * 8.98846567431158e+307 : $3; //@line 9385
  $$020 = $5 ? ($7 | 0) < 1023 ? $7 : 1023 : $1 + -1023 | 0; //@line 9385
 } else {
  if (($1 | 0) < -1022) {
   $10 = $0 * 2.2250738585072014e-308; //@line 9389
   $12 = ($1 | 0) < -2044; //@line 9391
   $14 = $1 + 2044 | 0; //@line 9393
   $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10; //@line 9398
   $$020 = $12 ? ($14 | 0) > -1022 ? $14 : -1022 : $1 + 1022 | 0; //@line 9398
  } else {
   $$0 = $0; //@line 9400
   $$020 = $1; //@line 9400
  }
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0; //@line 9404
 $18 = tempRet0; //@line 9405
 HEAP32[tempDoublePtr >> 2] = $17; //@line 9406
 HEAP32[tempDoublePtr + 4 >> 2] = $18; //@line 9406
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18387
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18395
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18397
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18399
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18401
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18403
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18405
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18407
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 18418
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 18419
 HEAP32[$10 >> 2] = 0; //@line 18420
 HEAP32[$12 >> 2] = 0; //@line 18421
 HEAP32[$14 >> 2] = 0; //@line 18422
 HEAP32[$2 >> 2] = 0; //@line 18423
 $33 = HEAP32[$16 >> 2] | 0; //@line 18424
 HEAP32[$16 >> 2] = $33 | $18; //@line 18429
 if ($20 | 0) {
  ___unlockfile($22); //@line 18432
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 18435
 return;
}
function _mbed_vtracef__async_cb_182($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14351
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14355
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 14360
 $$pre = HEAP32[136] | 0; //@line 14361
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 14362
 FUNCTION_TABLE_v[$$pre & 7](); //@line 14363
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 14366
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 14367
  HEAP32[$6 >> 2] = $4; //@line 14368
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 14369
  HEAP32[$7 >> 2] = $5; //@line 14370
  sp = STACKTOP; //@line 14371
  return;
 }
 ___async_unwind = 0; //@line 14374
 HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 14375
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 14376
 HEAP32[$6 >> 2] = $4; //@line 14377
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 14378
 HEAP32[$7 >> 2] = $5; //@line 14379
 sp = STACKTOP; //@line 14380
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_186($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14734
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14736
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14738
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14740
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 20 >> 2] = $AsyncRetVal; //@line 14742
 _strcpy($AsyncRetVal, $4) | 0; //@line 14743
 $11 = _emscripten_asm_const_i(9) | 0; //@line 14744
 $13 = (($11 | 0) < 0) << 31 >> 31; //@line 14746
 $14 = ___muldi3($6 | 0, 0, 1e3, 0) | 0; //@line 14747
 $16 = _i64Add($14 | 0, tempRet0 | 0, $11 | 0, $13 | 0) | 0; //@line 14749
 $18 = HEAP32[$8 >> 2] | 0; //@line 14751
 $20 = $18 + 24 | 0; //@line 14753
 HEAP32[$20 >> 2] = $16; //@line 14755
 HEAP32[$20 + 4 >> 2] = tempRet0; //@line 14758
 $25 = $18 + 32 | 0; //@line 14760
 HEAP32[$25 >> 2] = $11; //@line 14762
 HEAP32[$25 + 4 >> 2] = $13; //@line 14765
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 9948
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9950
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9952
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9956
 $9 = $4 + 12 | 0; //@line 9958
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 9959
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 9960
 $10 = _equeue_alloc($8, 16) | 0; //@line 9961
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 9965
  ___async_unwind = 0; //@line 9966
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 103; //@line 9968
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $9; //@line 9970
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $2; //@line 9972
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $8; //@line 9974
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $4; //@line 9976
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $9; //@line 9978
 sp = STACKTOP; //@line 9979
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_48($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 18864
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18872
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18874
 $11 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 18875
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 84 >> 2] | 0; //@line 18878
 $15 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 18879
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 18880
 FUNCTION_TABLE_viiii[$14 & 7]($11, $15, 126, $8); //@line 18881
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 18884
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 18885
  HEAP32[$16 >> 2] = $10; //@line 18886
  sp = STACKTOP; //@line 18887
  return;
 }
 ___async_unwind = 0; //@line 18890
 HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 18891
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 18892
 HEAP32[$16 >> 2] = $10; //@line 18893
 sp = STACKTOP; //@line 18894
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14662
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14668
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 14671
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14674
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14675
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 14676
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 335; //@line 14679
    sp = STACKTOP; //@line 14680
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14683
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_vtracef__async_cb_181($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 14318
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14320
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 14325
 $$pre = HEAP32[136] | 0; //@line 14326
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 14327
 FUNCTION_TABLE_v[$$pre & 7](); //@line 14328
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 14331
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 14332
  HEAP32[$5 >> 2] = $2; //@line 14333
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 14334
  HEAP32[$6 >> 2] = $4; //@line 14335
  sp = STACKTOP; //@line 14336
  return;
 }
 ___async_unwind = 0; //@line 14339
 HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 14340
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 14341
 HEAP32[$5 >> 2] = $2; //@line 14342
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 14343
 HEAP32[$6 >> 2] = $4; //@line 14344
 sp = STACKTOP; //@line 14345
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_39($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 18030
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18034
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18036
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18038
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 18040
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 18041
 FUNCTION_TABLE_viii[$9 & 0]($4, 0, $6); //@line 18042
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 92; //@line 18045
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 18046
  HEAP32[$10 >> 2] = $8; //@line 18047
  sp = STACKTOP; //@line 18048
  return;
 }
 ___async_unwind = 0; //@line 18051
 HEAP32[$ReallocAsyncCtx >> 2] = 92; //@line 18052
 $10 = $ReallocAsyncCtx + 4 | 0; //@line 18053
 HEAP32[$10 >> 2] = $8; //@line 18054
 sp = STACKTOP; //@line 18055
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_104($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 2635
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2641
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2643
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 2644
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 2648
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 2652
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 2653
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 2654
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 2657
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 2658
  HEAP32[$13 >> 2] = $6; //@line 2659
  sp = STACKTOP; //@line 2660
  return;
 }
 ___async_unwind = 0; //@line 2663
 HEAP32[$ReallocAsyncCtx5 >> 2] = 264; //@line 2664
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 2665
 HEAP32[$13 >> 2] = $6; //@line 2666
 sp = STACKTOP; //@line 2667
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15661
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 15663
 $8 = $7 >> 8; //@line 15664
 if (!($7 & 1)) {
  $$0 = $8; //@line 15668
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 15673
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 15675
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 15678
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15683
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 15684
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 351; //@line 15687
  sp = STACKTOP; //@line 15688
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15691
  return;
 }
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb($0) {
 $0 = $0 | 0;
 var $$048 = 0, $12 = 0, $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 8164
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8166
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8168
 if (!(HEAP32[$2 + 48 >> 2] | 0)) {
  $$048 = 0; //@line 8175
 } else {
  $$048 = HEAPU8[HEAP32[$0 + 12 >> 2] >> 0] | 0; //@line 8179
 }
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 8181
 __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($2, $$048, $4); //@line 8182
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 253; //@line 8185
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 8186
  HEAP32[$12 >> 2] = $4; //@line 8187
  sp = STACKTOP; //@line 8188
  return;
 }
 ___async_unwind = 0; //@line 8191
 HEAP32[$ReallocAsyncCtx3 >> 2] = 253; //@line 8192
 $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 8193
 HEAP32[$12 >> 2] = $4; //@line 8194
 sp = STACKTOP; //@line 8195
 return;
}
function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $2 = 0, $4 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13885
 $$ = ($0 | 0) == 0 ? 1 : $0; //@line 13887
 while (1) {
  $2 = _malloc($$) | 0; //@line 13889
  if ($2 | 0) {
   $$lcssa = $2; //@line 13892
   label = 7; //@line 13893
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0; //@line 13896
  if (!$4) {
   $$lcssa = 0; //@line 13899
   label = 7; //@line 13900
   break;
  }
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13903
  FUNCTION_TABLE_v[$4 & 7](); //@line 13904
  if (___async) {
   label = 5; //@line 13907
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13910
 }
 if ((label | 0) == 5) {
  HEAP32[$AsyncCtx >> 2] = 323; //@line 13913
  HEAP32[$AsyncCtx + 4 >> 2] = $$; //@line 13915
  sp = STACKTOP; //@line 13916
  return 0; //@line 13917
 } else if ((label | 0) == 7) {
  return $$lcssa | 0; //@line 13920
 }
 return 0; //@line 13922
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14831
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14837
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 14840
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 14843
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14844
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 14845
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 338; //@line 14848
    sp = STACKTOP; //@line 14849
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14852
    break;
   }
  }
 } while (0);
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_195($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 15401
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15403
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15411
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15413
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15415
 _free(HEAP32[$0 + 16 >> 2] | 0); //@line 15416
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 15417
 $15 = __ZN6Socket5closeEv($10) | 0; //@line 15418
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 15422
  ___async_unwind = 0; //@line 15423
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 15425
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 15427
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $12; //@line 15429
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $14; //@line 15431
 sp = STACKTOP; //@line 15432
 return;
}
function _mbed_error_vfprintf__async_cb_202($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17125
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 17127
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17129
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17131
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17133
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17135
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 17137
 _serial_putc(7864, $2 << 24 >> 24); //@line 17138
 if (!___async) {
  ___async_unwind = 0; //@line 17141
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 287; //@line 17143
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 17145
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 17147
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 17149
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 17151
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 17153
 sp = STACKTOP; //@line 17154
 return;
}
function ___dynamic_cast__async_cb_153($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10710
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10712
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10714
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10720
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 10735
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 10751
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 10756
    break;
   }
  default:
   {
    $$0 = 0; //@line 10760
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 10765
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15703
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 15705
 $7 = $6 >> 8; //@line 15706
 if (!($6 & 1)) {
  $$0 = $7; //@line 15710
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 15715
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 15717
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 15720
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15725
 FUNCTION_TABLE_viiiii[$16 & 3]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 15726
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 352; //@line 15729
  sp = STACKTOP; //@line 15730
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15733
  return;
 }
}
function __ZN6Socket5closeEv__async_cb_189($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14920
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14924
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14926
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 14927
 $8 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0; //@line 14930
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14931
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 14932
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 133; //@line 14935
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 14936
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 14937
  sp = STACKTOP; //@line 14938
  return;
 }
 ___async_unwind = 0; //@line 14941
 HEAP32[$ReallocAsyncCtx3 >> 2] = 133; //@line 14942
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 14943
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 14944
 sp = STACKTOP; //@line 14945
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15618
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 15620
 $6 = $5 >> 8; //@line 15621
 if (!($5 & 1)) {
  $$0 = $6; //@line 15625
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 15630
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 15632
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 15635
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15640
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 15641
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 350; //@line 15644
  sp = STACKTOP; //@line 15645
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15648
  return;
 }
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9543
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9545
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9547
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9549
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9551
 $9 = HEAP32[HEAP32[$AsyncRetVal >> 2] >> 2] | 0; //@line 9553
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 9554
 $10 = FUNCTION_TABLE_iiiii[$9 & 15]($AsyncRetVal, $2, $4, $6) | 0; //@line 9555
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 80; //@line 9558
  sp = STACKTOP; //@line 9559
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 9563
 ___async_unwind = 0; //@line 9564
 HEAP32[$ReallocAsyncCtx2 >> 2] = 80; //@line 9565
 sp = STACKTOP; //@line 9566
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_3($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15902
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15906
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15908
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15910
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15912
 $13 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 116 >> 2] | 0; //@line 15915
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15916
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($4, $6, $8, $10) | 0; //@line 15917
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 56; //@line 15920
  sp = STACKTOP; //@line 15921
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 15925
 ___async_unwind = 0; //@line 15926
 HEAP32[$ReallocAsyncCtx2 >> 2] = 56; //@line 15927
 sp = STACKTOP; //@line 15928
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_144($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 10046
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10048
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10050
 $7 = $2 + 12 | 0; //@line 10054
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 10055
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 10056
 $8 = _equeue_alloc($4, 16) | 0; //@line 10057
 if (!___async) {
  HEAP32[___async_retval >> 2] = $8; //@line 10061
  ___async_unwind = 0; //@line 10062
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 110; //@line 10064
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $7; //@line 10066
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $4; //@line 10068
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $2; //@line 10070
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $7; //@line 10072
 sp = STACKTOP; //@line 10073
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 11457
 STACKTOP = STACKTOP + 256 | 0; //@line 11458
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 11458
 $5 = sp; //@line 11459
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 11465
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 11469
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 11472
   $$011 = $9; //@line 11473
   do {
    _out_670($0, $5, 256); //@line 11475
    $$011 = $$011 + -256 | 0; //@line 11476
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 11485
  } else {
   $$0$lcssa = $9; //@line 11487
  }
  _out_670($0, $5, $$0$lcssa); //@line 11489
 }
 STACKTOP = sp; //@line 11491
 return;
}
function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0; //@line 9750
 $3 = HEAP8[$1 >> 0] | 0; //@line 9752
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 9756
 $7 = $0 + 20 | 0; //@line 9757
 $9 = $0 + 28 | 0; //@line 9759
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0; //@line 9765
 }
 HEAP32[$0 + 16 >> 2] = 0; //@line 9768
 HEAP32[$9 >> 2] = 0; //@line 9769
 HEAP32[$7 >> 2] = 0; //@line 9770
 $15 = HEAP32[$0 >> 2] | 0; //@line 9771
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 9779
  HEAP32[$0 + 8 >> 2] = $23; //@line 9781
  HEAP32[$0 + 4 >> 2] = $23; //@line 9783
  $$0 = $15 << 27 >> 31; //@line 9786
 } else {
  HEAP32[$0 >> 2] = $15 | 32; //@line 9789
  $$0 = -1; //@line 9790
 }
 return $$0 | 0; //@line 9792
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_88($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1555
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1559
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1561
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1563
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1565
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 1567
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 1568
 FUNCTION_TABLE_viii[$11 & 0]($4, 0, $6); //@line 1569
 if (!___async) {
  ___async_unwind = 0; //@line 1572
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 171; //@line 1574
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 1576
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 1578
 sp = STACKTOP; //@line 1579
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_42($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18155
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18157
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18159
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18161
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18163
 $11 = HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] | 0; //@line 18166
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18167
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($2, $4, $6, $8) | 0; //@line 18168
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 43; //@line 18171
  sp = STACKTOP; //@line 18172
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 18176
 ___async_unwind = 0; //@line 18177
 HEAP32[$ReallocAsyncCtx2 >> 2] = 43; //@line 18178
 sp = STACKTOP; //@line 18179
 return;
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_10($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16390
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16394
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16395
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 16401
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 16402
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 16403
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 232; //@line 16406
  $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 16407
  HEAP32[$9 >> 2] = $4; //@line 16408
  sp = STACKTOP; //@line 16409
  return;
 }
 ___async_unwind = 0; //@line 16412
 HEAP32[$ReallocAsyncCtx6 >> 2] = 232; //@line 16413
 $9 = $ReallocAsyncCtx6 + 4 | 0; //@line 16414
 HEAP32[$9 >> 2] = $4; //@line 16415
 sp = STACKTOP; //@line 16416
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 720
 $3 = HEAP32[$1 >> 2] | 0; //@line 721
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 723
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0$i = -3012; //@line 729
  return $$0$i | 0; //@line 730
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 732
 _wait_ms(1); //@line 733
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 50; //@line 736
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 738
  sp = STACKTOP; //@line 739
  return 0; //@line 740
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 742
 HEAP8[$1 + 8 >> 0] = 1; //@line 744
 $$0$i = 0; //@line 745
 return $$0$i | 0; //@line 746
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 3155
  return $$1 | 0; //@line 3156
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 3161
  $$1 = 0; //@line 3162
  return $$1 | 0; //@line 3163
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 3170
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 3174
  return $$1 | 0; //@line 3175
 }
 $14 = _malloc($1) | 0; //@line 3177
 if (!$14) {
  $$1 = 0; //@line 3180
  return $$1 | 0; //@line 3181
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0; //@line 3184
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 3189
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 3192
 _free($0); //@line 3193
 $$1 = $14; //@line 3194
 return $$1 | 0; //@line 3195
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 317
 $3 = HEAP32[$1 >> 2] | 0; //@line 318
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 320
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0 = -3012; //@line 326
  return $$0 | 0; //@line 327
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 329
 _wait_ms(1); //@line 330
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 37; //@line 333
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 335
  sp = STACKTOP; //@line 336
  return 0; //@line 337
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 339
 HEAP8[$1 + 8 >> 0] = 1; //@line 341
 $$0 = 0; //@line 342
 return $$0 | 0; //@line 343
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 12454
 STACKTOP = STACKTOP + 16 | 0; //@line 12455
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12455
 $vararg_buffer = sp; //@line 12456
 HEAP32[$vararg_buffer >> 2] = $0; //@line 12457
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 12459
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 12461
 _mbed_error_printf(3906, $vararg_buffer); //@line 12462
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12463
 _mbed_die(); //@line 12464
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 267; //@line 12467
  sp = STACKTOP; //@line 12468
  STACKTOP = sp; //@line 12469
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12471
  STACKTOP = sp; //@line 12472
  return;
 }
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4499
 STACKTOP = STACKTOP + 32 | 0; //@line 4500
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4500
 $vararg_buffer = sp; //@line 4501
 $3 = sp + 20 | 0; //@line 4502
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4506
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 4508
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 4510
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 4512
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 4514
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 4519
  $10 = -1; //@line 4520
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 4523
 }
 STACKTOP = sp; //@line 4525
 return $10 | 0; //@line 4525
}
function __ZN12NetworkStack14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 3123
 STACKTOP = STACKTOP + 48 | 0; //@line 3124
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 3124
 $$byval_copy = sp + 20 | 0; //@line 3125
 $2 = sp; //@line 3126
 __ZNK13SocketAddress8get_addrEv($2, $1); //@line 3127
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 3128
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 3128
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 3128
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 3128
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 3128
 $3 = _nsapi_dns_add_server($$byval_copy) | 0; //@line 3129
 STACKTOP = sp; //@line 3130
 return $3 | 0; //@line 3130
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13609
 STACKTOP = STACKTOP + 16 | 0; //@line 13610
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13610
 $1 = sp; //@line 13611
 HEAP32[$1 >> 2] = $varargs; //@line 13612
 $2 = HEAP32[444] | 0; //@line 13613
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13614
 $3 = _vfprintf($2, $0, $1) | 0; //@line 13615
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 319; //@line 13618
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13620
  sp = STACKTOP; //@line 13621
  STACKTOP = sp; //@line 13622
  return 0; //@line 13622
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13624
  STACKTOP = sp; //@line 13625
  return $3 | 0; //@line 13625
 }
 return 0; //@line 13627
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13336
 STACKTOP = STACKTOP + 16 | 0; //@line 13337
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13337
 $3 = sp; //@line 13338
 HEAP32[$3 >> 2] = $varargs; //@line 13339
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13340
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 13341
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 315; //@line 13344
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 13346
  sp = STACKTOP; //@line 13347
  STACKTOP = sp; //@line 13348
  return 0; //@line 13348
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13350
  STACKTOP = sp; //@line 13351
  return $4 | 0; //@line 13351
 }
 return 0; //@line 13353
}
function _mbed_vtracef__async_cb_180($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14288
 HEAP32[130] = HEAP32[128]; //@line 14290
 $2 = HEAP32[136] | 0; //@line 14291
 if (!$2) {
  return;
 }
 $4 = HEAP32[137] | 0; //@line 14296
 HEAP32[137] = 0; //@line 14297
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 14298
 FUNCTION_TABLE_v[$2 & 7](); //@line 14299
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 14302
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14303
  HEAP32[$5 >> 2] = $4; //@line 14304
  sp = STACKTOP; //@line 14305
  return;
 }
 ___async_unwind = 0; //@line 14308
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 14309
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14310
 HEAP32[$5 >> 2] = $4; //@line 14311
 sp = STACKTOP; //@line 14312
 return;
}
function _mbed_vtracef__async_cb_177($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 14024
 HEAP32[130] = HEAP32[128]; //@line 14026
 $2 = HEAP32[136] | 0; //@line 14027
 if (!$2) {
  return;
 }
 $4 = HEAP32[137] | 0; //@line 14032
 HEAP32[137] = 0; //@line 14033
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 14034
 FUNCTION_TABLE_v[$2 & 7](); //@line 14035
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 14038
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14039
  HEAP32[$5 >> 2] = $4; //@line 14040
  sp = STACKTOP; //@line 14041
  return;
 }
 ___async_unwind = 0; //@line 14044
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 14045
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14046
 HEAP32[$5 >> 2] = $4; //@line 14047
 sp = STACKTOP; //@line 14048
 return;
}
function _mbed_vtracef__async_cb_176($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 13994
 HEAP32[130] = HEAP32[128]; //@line 13996
 $2 = HEAP32[136] | 0; //@line 13997
 if (!$2) {
  return;
 }
 $4 = HEAP32[137] | 0; //@line 14002
 HEAP32[137] = 0; //@line 14003
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 14004
 FUNCTION_TABLE_v[$2 & 7](); //@line 14005
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 14008
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14009
  HEAP32[$5 >> 2] = $4; //@line 14010
  sp = STACKTOP; //@line 14011
  return;
 }
 ___async_unwind = 0; //@line 14014
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 14015
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 14016
 HEAP32[$5 >> 2] = $4; //@line 14017
 sp = STACKTOP; //@line 14018
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4026
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 4029
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 4031
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 4033
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 4038
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 4043
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4045
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 4046
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 130; //@line 4049
  sp = STACKTOP; //@line 4050
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4053
  return;
 }
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_14($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16826
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16828
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16830
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16832
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16834
 $9 = HEAP32[HEAP32[$2 >> 2] >> 2] | 0; //@line 16836
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 16837
 FUNCTION_TABLE_viii[$9 & 0]($4, $6, $8); //@line 16838
 if (!___async) {
  ___async_unwind = 0; //@line 16841
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 231; //@line 16843
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 16845
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 16847
 sp = STACKTOP; //@line 16848
 return;
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13567
 STACKTOP = STACKTOP + 16 | 0; //@line 13568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13568
 $2 = sp; //@line 13569
 HEAP32[$2 >> 2] = $varargs; //@line 13570
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13571
 $3 = _vsprintf($0, $1, $2) | 0; //@line 13572
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 317; //@line 13575
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 13577
  sp = STACKTOP; //@line 13578
  STACKTOP = sp; //@line 13579
  return 0; //@line 13579
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13581
  STACKTOP = sp; //@line 13582
  return $3 | 0; //@line 13582
 }
 return 0; //@line 13584
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 14384
 $5 = HEAP32[$4 >> 2] | 0; //@line 14385
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 14389
   HEAP32[$1 + 24 >> 2] = $3; //@line 14391
   HEAP32[$1 + 36 >> 2] = 1; //@line 14393
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 14397
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 14400
    HEAP32[$1 + 24 >> 2] = 2; //@line 14402
    HEAP8[$1 + 54 >> 0] = 1; //@line 14404
    break;
   }
   $10 = $1 + 24 | 0; //@line 14407
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 14411
   }
  }
 } while (0);
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19457
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19459
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19461
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 12 >> 2] | 0; //@line 19464
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 19465
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 19466
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 88; //@line 19469
  sp = STACKTOP; //@line 19470
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 19474
 ___async_unwind = 0; //@line 19475
 HEAP32[$ReallocAsyncCtx2 >> 2] = 88; //@line 19476
 sp = STACKTOP; //@line 19477
 return;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 10649
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10651
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 10653
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 8 >> 2] | 0; //@line 10656
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 10657
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 10658
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 86; //@line 10661
  sp = STACKTOP; //@line 10662
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 10666
 ___async_unwind = 0; //@line 10667
 HEAP32[$ReallocAsyncCtx2 >> 2] = 86; //@line 10668
 sp = STACKTOP; //@line 10669
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1384
 $4 = _equeue_tick() | 0; //@line 1386
 HEAP32[$2 + -4 >> 2] = $1; //@line 1388
 $6 = $2 + -16 | 0; //@line 1389
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 1392
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1393
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 1394
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 60; //@line 1397
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1399
  sp = STACKTOP; //@line 1400
  return 0; //@line 1401
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1403
  _equeue_sema_signal($0 + 48 | 0); //@line 1405
  return $9 | 0; //@line 1406
 }
 return 0; //@line 1408
}
function __ZneRK13SocketAddressS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $5 = 0, label = 0;
 if (__ZNK13SocketAddresscvbEv($0) | 0) {
  label = 3; //@line 5251
 } else {
  if (__ZNK13SocketAddresscvbEv($1) | 0) {
   label = 3; //@line 5255
  } else {
   $$0$i = 1; //@line 5257
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = HEAP32[$0 + 40 >> 2] | 0; //@line 5263
   if (($5 | 0) == (HEAP32[$1 + 40 >> 2] | 0)) {
    $10 = $0 + 44 | 0; //@line 5269
    $11 = $1 + 44 | 0; //@line 5270
    if (($5 | 0) == 1) {
     $$0$i = (_memcmp($10, $11, 4) | 0) == 0; //@line 5274
     break;
    } else {
     $$0$i = (_memcmp($10, $11, 16) | 0) == 0; //@line 5279
     break;
    }
   } else {
    $$0$i = 0; //@line 5283
   }
  }
 } while (0);
 return $$0$i ^ 1 | 0; //@line 5288
}
function __Znwj__async_cb($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15942
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15944
 $3 = _malloc($2) | 0; //@line 15945
 if (!$3) {
  $5 = __ZSt15get_new_handlerv() | 0; //@line 15948
  if (!$5) {
   $$lcssa = 0; //@line 15951
  } else {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 15953
   FUNCTION_TABLE_v[$5 & 7](); //@line 15954
   if (!___async) {
    ___async_unwind = 0; //@line 15957
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 323; //@line 15959
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 15961
   sp = STACKTOP; //@line 15962
   return;
  }
 } else {
  $$lcssa = $3; //@line 15966
 }
 HEAP32[___async_retval >> 2] = $$lcssa; //@line 15969
 return;
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12951
 $2 = HEAP32[444] | 0; //@line 12952
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12953
 _putc($1, $2) | 0; //@line 12954
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 288; //@line 12957
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 12959
  sp = STACKTOP; //@line 12960
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12963
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12964
 _fflush($2) | 0; //@line 12965
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 289; //@line 12968
  sp = STACKTOP; //@line 12969
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12972
  return;
 }
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 19308
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19312
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19314
 $7 = $4 + 12 | 0; //@line 19316
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 19317
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 19318
 __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(7812, $6, $4) | 0; //@line 19319
 if (!___async) {
  ___async_unwind = 0; //@line 19322
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 206; //@line 19324
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $7; //@line 19326
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 19328
 sp = STACKTOP; //@line 19329
 return;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14934
 STACKTOP = STACKTOP + 16 | 0; //@line 14935
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14935
 $vararg_buffer = sp; //@line 14936
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14937
 FUNCTION_TABLE_v[$0 & 7](); //@line 14938
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 340; //@line 14941
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 14943
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14945
  sp = STACKTOP; //@line 14946
  STACKTOP = sp; //@line 14947
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14949
  _abort_message(7447, $vararg_buffer); //@line 14950
 }
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 4606
 $3 = HEAP8[$1 >> 0] | 0; //@line 4607
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 4612
  $$lcssa8 = $2; //@line 4612
 } else {
  $$011 = $1; //@line 4614
  $$0710 = $0; //@line 4614
  do {
   $$0710 = $$0710 + 1 | 0; //@line 4616
   $$011 = $$011 + 1 | 0; //@line 4617
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 4618
   $9 = HEAP8[$$011 >> 0] | 0; //@line 4619
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 4624
  $$lcssa8 = $8; //@line 4624
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 4634
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 13301
  } else {
   $$01318 = $0; //@line 13303
   $$01417 = $2; //@line 13303
   $$019 = $1; //@line 13303
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 13305
    $5 = HEAP8[$$019 >> 0] | 0; //@line 13306
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 13311
    if (!$$01417) {
     $14 = 0; //@line 13316
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 13319
     $$019 = $$019 + 1 | 0; //@line 13319
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 13325
  }
 } while (0);
 return $14 | 0; //@line 13328
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_56($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 19427
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19431
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 19432
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 19436
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 19440
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 19441
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 19442
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 207; //@line 19445
  sp = STACKTOP; //@line 19446
  return;
 }
 ___async_unwind = 0; //@line 19449
 HEAP32[$ReallocAsyncCtx2 >> 2] = 207; //@line 19450
 sp = STACKTOP; //@line 19451
 return;
}
function _mbed_die__async_cb_28($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 17199
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17201
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 17203
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 17204
 _wait_ms(150); //@line 17205
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 270; //@line 17208
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 17209
  HEAP32[$4 >> 2] = $2; //@line 17210
  sp = STACKTOP; //@line 17211
  return;
 }
 ___async_unwind = 0; //@line 17214
 HEAP32[$ReallocAsyncCtx14 >> 2] = 270; //@line 17215
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 17216
 HEAP32[$4 >> 2] = $2; //@line 17217
 sp = STACKTOP; //@line 17218
 return;
}
function _mbed_die__async_cb_27($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 17174
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17176
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 17178
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 17179
 _wait_ms(150); //@line 17180
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 271; //@line 17183
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 17184
  HEAP32[$4 >> 2] = $2; //@line 17185
  sp = STACKTOP; //@line 17186
  return;
 }
 ___async_unwind = 0; //@line 17189
 HEAP32[$ReallocAsyncCtx13 >> 2] = 271; //@line 17190
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 17191
 HEAP32[$4 >> 2] = $2; //@line 17192
 sp = STACKTOP; //@line 17193
 return;
}
function _mbed_die__async_cb_26($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 17149
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17151
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 17153
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 17154
 _wait_ms(150); //@line 17155
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 272; //@line 17158
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 17159
  HEAP32[$4 >> 2] = $2; //@line 17160
  sp = STACKTOP; //@line 17161
  return;
 }
 ___async_unwind = 0; //@line 17164
 HEAP32[$ReallocAsyncCtx12 >> 2] = 272; //@line 17165
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 17166
 HEAP32[$4 >> 2] = $2; //@line 17167
 sp = STACKTOP; //@line 17168
 return;
}
function _mbed_die__async_cb_25($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 17124
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17126
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 17128
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 17129
 _wait_ms(150); //@line 17130
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 273; //@line 17133
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 17134
  HEAP32[$4 >> 2] = $2; //@line 17135
  sp = STACKTOP; //@line 17136
  return;
 }
 ___async_unwind = 0; //@line 17139
 HEAP32[$ReallocAsyncCtx11 >> 2] = 273; //@line 17140
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 17141
 HEAP32[$4 >> 2] = $2; //@line 17142
 sp = STACKTOP; //@line 17143
 return;
}
function _mbed_die__async_cb_24($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 17099
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17101
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 17103
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 17104
 _wait_ms(150); //@line 17105
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 274; //@line 17108
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 17109
  HEAP32[$4 >> 2] = $2; //@line 17110
  sp = STACKTOP; //@line 17111
  return;
 }
 ___async_unwind = 0; //@line 17114
 HEAP32[$ReallocAsyncCtx10 >> 2] = 274; //@line 17115
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 17116
 HEAP32[$4 >> 2] = $2; //@line 17117
 sp = STACKTOP; //@line 17118
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1675
 STACKTOP = STACKTOP + 16 | 0; //@line 1676
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1676
 $3 = sp; //@line 1677
 HEAP32[$3 >> 2] = $varargs; //@line 1678
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1679
 _mbed_vtracef($0, $1, $2, $3); //@line 1680
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 63; //@line 1683
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 1685
  sp = STACKTOP; //@line 1686
  STACKTOP = sp; //@line 1687
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1689
  STACKTOP = sp; //@line 1690
  return;
 }
}
function _mbed_die__async_cb_23($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 17074
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17076
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 17078
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 17079
 _wait_ms(150); //@line 17080
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 275; //@line 17083
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 17084
  HEAP32[$4 >> 2] = $2; //@line 17085
  sp = STACKTOP; //@line 17086
  return;
 }
 ___async_unwind = 0; //@line 17089
 HEAP32[$ReallocAsyncCtx9 >> 2] = 275; //@line 17090
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 17091
 HEAP32[$4 >> 2] = $2; //@line 17092
 sp = STACKTOP; //@line 17093
 return;
}
function _mbed_die__async_cb_22($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 17049
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17051
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 17053
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 17054
 _wait_ms(400); //@line 17055
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 276; //@line 17058
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 17059
  HEAP32[$4 >> 2] = $2; //@line 17060
  sp = STACKTOP; //@line 17061
  return;
 }
 ___async_unwind = 0; //@line 17064
 HEAP32[$ReallocAsyncCtx8 >> 2] = 276; //@line 17065
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 17066
 HEAP32[$4 >> 2] = $2; //@line 17067
 sp = STACKTOP; //@line 17068
 return;
}
function _mbed_die__async_cb_21($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 17024
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17026
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 17028
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 17029
 _wait_ms(400); //@line 17030
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 277; //@line 17033
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 17034
  HEAP32[$4 >> 2] = $2; //@line 17035
  sp = STACKTOP; //@line 17036
  return;
 }
 ___async_unwind = 0; //@line 17039
 HEAP32[$ReallocAsyncCtx7 >> 2] = 277; //@line 17040
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 17041
 HEAP32[$4 >> 2] = $2; //@line 17042
 sp = STACKTOP; //@line 17043
 return;
}
function _mbed_die__async_cb_20($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16999
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17001
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 17003
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 17004
 _wait_ms(400); //@line 17005
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 278; //@line 17008
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 17009
  HEAP32[$4 >> 2] = $2; //@line 17010
  sp = STACKTOP; //@line 17011
  return;
 }
 ___async_unwind = 0; //@line 17014
 HEAP32[$ReallocAsyncCtx6 >> 2] = 278; //@line 17015
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 17016
 HEAP32[$4 >> 2] = $2; //@line 17017
 sp = STACKTOP; //@line 17018
 return;
}
function _mbed_die__async_cb_19($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 16974
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16976
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 16978
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 16979
 _wait_ms(400); //@line 16980
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 279; //@line 16983
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 16984
  HEAP32[$4 >> 2] = $2; //@line 16985
  sp = STACKTOP; //@line 16986
  return;
 }
 ___async_unwind = 0; //@line 16989
 HEAP32[$ReallocAsyncCtx5 >> 2] = 279; //@line 16990
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 16991
 HEAP32[$4 >> 2] = $2; //@line 16992
 sp = STACKTOP; //@line 16993
 return;
}
function _mbed_die__async_cb_18($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16949
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16951
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 16953
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 16954
 _wait_ms(400); //@line 16955
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 16958
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 16959
  HEAP32[$4 >> 2] = $2; //@line 16960
  sp = STACKTOP; //@line 16961
  return;
 }
 ___async_unwind = 0; //@line 16964
 HEAP32[$ReallocAsyncCtx4 >> 2] = 280; //@line 16965
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 16966
 HEAP32[$4 >> 2] = $2; //@line 16967
 sp = STACKTOP; //@line 16968
 return;
}
function _mbed_die__async_cb_17($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16924
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16926
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 16928
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 16929
 _wait_ms(400); //@line 16930
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 16933
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 16934
  HEAP32[$4 >> 2] = $2; //@line 16935
  sp = STACKTOP; //@line 16936
  return;
 }
 ___async_unwind = 0; //@line 16939
 HEAP32[$ReallocAsyncCtx3 >> 2] = 281; //@line 16940
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 16941
 HEAP32[$4 >> 2] = $2; //@line 16942
 sp = STACKTOP; //@line 16943
 return;
}
function _mbed_die__async_cb_16($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16899
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16901
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 16903
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 16904
 _wait_ms(400); //@line 16905
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 16908
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 16909
  HEAP32[$4 >> 2] = $2; //@line 16910
  sp = STACKTOP; //@line 16911
  return;
 }
 ___async_unwind = 0; //@line 16914
 HEAP32[$ReallocAsyncCtx2 >> 2] = 282; //@line 16915
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 16916
 HEAP32[$4 >> 2] = $2; //@line 16917
 sp = STACKTOP; //@line 16918
 return;
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4558
 STACKTOP = STACKTOP + 32 | 0; //@line 4559
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4559
 $vararg_buffer = sp; //@line 4560
 HEAP32[$0 + 36 >> 2] = 12; //@line 4563
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4571
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 4573
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 4575
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 4580
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 4583
 STACKTOP = sp; //@line 4584
 return $14 | 0; //@line 4584
}
function _mbed_die__async_cb_15($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16874
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16876
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 16878
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 16879
 _wait_ms(400); //@line 16880
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 283; //@line 16883
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 16884
  HEAP32[$4 >> 2] = $2; //@line 16885
  sp = STACKTOP; //@line 16886
  return;
 }
 ___async_unwind = 0; //@line 16889
 HEAP32[$ReallocAsyncCtx >> 2] = 283; //@line 16890
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 16891
 HEAP32[$4 >> 2] = $2; //@line 16892
 sp = STACKTOP; //@line 16893
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12782
 STACKTOP = STACKTOP + 16 | 0; //@line 12783
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12783
 $1 = sp; //@line 12784
 HEAP32[$1 >> 2] = $varargs; //@line 12785
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12786
 _mbed_error_vfprintf($0, $1); //@line 12787
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 284; //@line 12790
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12792
  sp = STACKTOP; //@line 12793
  STACKTOP = sp; //@line 12794
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12796
  STACKTOP = sp; //@line 12797
  return;
 }
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 788
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 791
 if (($6 | 0) < 0) {
  $$0$i = -3001; //@line 794
  return $$0$i | 0; //@line 795
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 797
 _wait_ms(1); //@line 798
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 52; //@line 801
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 803
  sp = STACKTOP; //@line 804
  return 0; //@line 805
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 807
 $$0$i = $6; //@line 808
 return $$0$i | 0; //@line 809
}
function _store_int_728($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do {
  if ($0 | 0) {
   switch ($1 | 0) {
   case -2:
    {
     HEAP8[$0 >> 0] = $2; //@line 6719
     break L1;
     break;
    }
   case -1:
    {
     HEAP16[$0 >> 1] = $2; //@line 6725
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2; //@line 6730
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2; //@line 6735
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0; //@line 6740
     HEAP32[$7 >> 2] = $2; //@line 6742
     HEAP32[$7 + 4 >> 2] = $3; //@line 6745
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}
function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5596
 STACKTOP = STACKTOP + 128 | 0; //@line 5597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 5597
 $3 = sp; //@line 5598
 dest = $3; //@line 5599
 stop = dest + 124 | 0; //@line 5599
 do {
  HEAP32[dest >> 2] = 0; //@line 5599
  dest = dest + 4 | 0; //@line 5599
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 17; //@line 5601
 HEAP32[$3 + 44 >> 2] = $0; //@line 5603
 HEAP32[$3 + 76 >> 2] = -1; //@line 5605
 HEAP32[$3 + 84 >> 2] = $0; //@line 5607
 $8 = _vfscanf($3, $1, $2) | 0; //@line 5608
 STACKTOP = sp; //@line 5609
 return $8 | 0; //@line 5609
}
function __ZN17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 385
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 388
 if (($6 | 0) < 0) {
  $$0 = -3001; //@line 391
  return $$0 | 0; //@line 392
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 394
 _wait_ms(1); //@line 395
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 39; //@line 398
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 400
  sp = STACKTOP; //@line 401
  return 0; //@line 402
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 404
 $$0 = $6; //@line 405
 return $$0 | 0; //@line 406
}
function __ZThn4_N17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 674
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 676
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 677
 _wait_ms(1); //@line 678
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 681
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 683
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 685
  sp = STACKTOP; //@line 686
  return 0; //@line 687
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 689
 HEAP8[$1 + 8 >> 0] = 0; //@line 691
 if (!$1) {
  return $3 | 0; //@line 694
 }
 __ZdlPv($1); //@line 696
 return $3 | 0; //@line 697
}
function __ZN17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 271
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 273
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 274
 _wait_ms(1); //@line 275
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 36; //@line 278
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 280
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 282
  sp = STACKTOP; //@line 283
  return 0; //@line 284
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 286
 HEAP8[$1 + 8 >> 0] = 0; //@line 288
 if (!$1) {
  return $3 | 0; //@line 291
 }
 __ZdlPv($1); //@line 293
 return $3 | 0; //@line 294
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 18016
 newDynamicTop = oldDynamicTop + increment | 0; //@line 18017
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 18021
  ___setErrNo(12); //@line 18022
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 18026
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 18030
   ___setErrNo(12); //@line 18031
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 18035
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_191($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15033
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15037
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15038
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 15044
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 15045
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 15046
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 237; //@line 15049
  sp = STACKTOP; //@line 15050
  return;
 }
 ___async_unwind = 0; //@line 15053
 HEAP32[$ReallocAsyncCtx3 >> 2] = 237; //@line 15054
 sp = STACKTOP; //@line 15055
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 11318
 } else {
  $$056 = $2; //@line 11320
  $15 = $1; //@line 11320
  $8 = $0; //@line 11320
  while (1) {
   $14 = $$056 + -1 | 0; //@line 11328
   HEAP8[$14 >> 0] = HEAPU8[5110 + ($8 & 15) >> 0] | 0 | $3; //@line 11329
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 11330
   $15 = tempRet0; //@line 11331
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 11336
    break;
   } else {
    $$056 = $14; //@line 11339
   }
  }
 }
 return $$05$lcssa | 0; //@line 11343
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 4740
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 4742
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 4748
  $11 = ___fwritex($0, $4, $3) | 0; //@line 4749
  if ($phitmp) {
   $13 = $11; //@line 4751
  } else {
   ___unlockfile($3); //@line 4753
   $13 = $11; //@line 4754
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 4758
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 4762
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 4765
 }
 return $15 | 0; //@line 4767
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 14899
 $0 = ___cxa_get_globals_fast() | 0; //@line 14900
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 14903
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 14907
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 14919
    _emscripten_alloc_async_context(4, sp) | 0; //@line 14920
    __ZSt11__terminatePFvvE($16); //@line 14921
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 14926
 _emscripten_alloc_async_context(4, sp) | 0; //@line 14927
 __ZSt11__terminatePFvvE($17); //@line 14928
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_113($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 6104
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6108
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 6109
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 6115
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 6116
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 6117
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 204; //@line 6120
  sp = STACKTOP; //@line 6121
  return;
 }
 ___async_unwind = 0; //@line 6124
 HEAP32[$ReallocAsyncCtx9 >> 2] = 204; //@line 6125
 sp = STACKTOP; //@line 6126
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_60($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 19813
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19819
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 19820
 $7 = HEAP32[$6 >> 2] | 0; //@line 19821
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 19822
 __ZL26nsapi_dns_query_async_sendPv($7); //@line 19823
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 222; //@line 19826
  sp = STACKTOP; //@line 19827
  return;
 }
 ___async_unwind = 0; //@line 19830
 HEAP32[$ReallocAsyncCtx7 >> 2] = 222; //@line 19831
 sp = STACKTOP; //@line 19832
 return;
}
function __ZN9UDPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5875
 $1 = $0 + 52 | 0; //@line 5876
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 5879
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 5882
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 5892
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5893
 FUNCTION_TABLE_vi[$$pre & 511]($0 + 32 | 0); //@line 5894
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 152; //@line 5897
  sp = STACKTOP; //@line 5898
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5901
 return;
}
function __ZN9TCPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5381
 $1 = $0 + 52 | 0; //@line 5382
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 5385
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 5388
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 5398
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5399
 FUNCTION_TABLE_vi[$$pre & 511]($0 + 32 | 0); //@line 5400
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 140; //@line 5403
  sp = STACKTOP; //@line 5404
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5407
 return;
}
function __ZN9UDPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 20444
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20446
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 20448
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 20455
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 20456
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 20457
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 20460
  sp = STACKTOP; //@line 20461
  return;
 }
 ___async_unwind = 0; //@line 20464
 HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 20465
 sp = STACKTOP; //@line 20466
 return;
}
function __ZN9TCPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 18283
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18285
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 18287
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 18294
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 18295
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 18296
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 18299
  sp = STACKTOP; //@line 18300
  return;
 }
 ___async_unwind = 0; //@line 18303
 HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 18304
 sp = STACKTOP; //@line 18305
 return;
}
function __ZN6SocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17244
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17246
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 17248
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 17255
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17256
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 17257
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 120; //@line 17260
  sp = STACKTOP; //@line 17261
  return;
 }
 ___async_unwind = 0; //@line 17264
 HEAP32[$ReallocAsyncCtx2 >> 2] = 120; //@line 17265
 sp = STACKTOP; //@line 17266
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 4957
 $3 = HEAP8[$1 >> 0] | 0; //@line 4959
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 4963
 $7 = HEAP32[$0 >> 2] | 0; //@line 4964
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 4969
  HEAP32[$0 + 4 >> 2] = 0; //@line 4971
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 4973
  HEAP32[$0 + 28 >> 2] = $14; //@line 4975
  HEAP32[$0 + 20 >> 2] = $14; //@line 4977
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4983
  $$0 = 0; //@line 4984
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 4987
  $$0 = -1; //@line 4988
 }
 return $$0 | 0; //@line 4990
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 766
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 767
 _wait_ms(1); //@line 768
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 51; //@line 771
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 773
  sp = STACKTOP; //@line 774
  return 0; //@line 775
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 777
  return $6 | 0; //@line 778
 }
 return 0; //@line 780
}
function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0; //@line 9800
 $4 = HEAP32[$3 >> 2] | 0; //@line 9801
 $5 = $2 + 256 | 0; //@line 9802
 $6 = _memchr($4, 0, $5) | 0; //@line 9803
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0; //@line 9808
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2; //@line 9810
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0; //@line 9811
 HEAP32[$0 + 4 >> 2] = $4 + $$027$; //@line 9814
 $14 = $4 + $$027 | 0; //@line 9815
 HEAP32[$0 + 8 >> 2] = $14; //@line 9817
 HEAP32[$3 >> 2] = $14; //@line 9818
 return $$027$ | 0; //@line 9819
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 12786
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 12789
 $$sink17$sink = $0; //@line 12789
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 12791
  $12 = HEAP8[$11 >> 0] | 0; //@line 12792
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 12800
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 12805
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 12810
}
function __ZN17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 360
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 363
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 364
 _wait_ms(1); //@line 365
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 38; //@line 368
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 370
  sp = STACKTOP; //@line 371
  return 0; //@line 372
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 374
  return $6 | 0; //@line 375
 }
 return 0; //@line 377
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 11355
 } else {
  $$06 = $2; //@line 11357
  $11 = $1; //@line 11357
  $7 = $0; //@line 11357
  while (1) {
   $10 = $$06 + -1 | 0; //@line 11362
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 11363
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 11364
   $11 = tempRet0; //@line 11365
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 11370
    break;
   } else {
    $$06 = $10; //@line 11373
   }
  }
 }
 return $$0$lcssa | 0; //@line 11377
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_123($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 8366
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8370
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 8372
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 8373
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 8374
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 78; //@line 8377
  sp = STACKTOP; //@line 8378
  return;
 }
 ___async_unwind = 0; //@line 8381
 HEAP32[$ReallocAsyncCtx >> 2] = 78; //@line 8382
 sp = STACKTOP; //@line 8383
 return;
}
function _arg_n_727($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 6674
 STACKTOP = STACKTOP + 16 | 0; //@line 6675
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6675
 $2 = sp; //@line 6676
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2]; //@line 6678
 $$0 = $1; //@line 6679
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 6693
  $10 = HEAP32[$9 >> 2] | 0; //@line 6694
  HEAP32[$2 >> 2] = $9 + 4; //@line 6696
  if ($$0 >>> 0 > 1) {
   $$0 = $$0 + -1 | 0; //@line 6699
  } else {
   break;
  }
 }
 STACKTOP = sp; //@line 6704
 return $10 | 0; //@line 6704
}
function __ZL28nsapi_dns_query_async_createPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 19595
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19597
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19599
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(4) | 0; //@line 19600
 __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress($2, $4, 0); //@line 19601
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 215; //@line 19604
  sp = STACKTOP; //@line 19605
  return;
 }
 ___async_unwind = 0; //@line 19608
 HEAP32[$ReallocAsyncCtx8 >> 2] = 215; //@line 19609
 sp = STACKTOP; //@line 19610
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_50($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 19022
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19026
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 19028
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 19029
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 19030
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 19033
  sp = STACKTOP; //@line 19034
  return;
 }
 ___async_unwind = 0; //@line 19037
 HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 19038
 sp = STACKTOP; //@line 19039
 return;
}
function _main__async_cb_97($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2047
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2051
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2053
 __ZdaPv(HEAP32[$0 + 4 >> 2] | 0); //@line 2054
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 2055
 _puts(4314) | 0; //@line 2056
 if (!___async) {
  ___async_unwind = 0; //@line 2059
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 303; //@line 2061
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 2063
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 2065
 sp = STACKTOP; //@line 2066
 return;
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15810
 do {
  if (!$0) {
   $3 = 0; //@line 15814
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15816
   $2 = ___dynamic_cast($0, 144, 200, 0) | 0; //@line 15817
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 354; //@line 15820
    sp = STACKTOP; //@line 15821
    return 0; //@line 15822
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15824
    $3 = ($2 | 0) != 0 & 1; //@line 15827
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 15832
}
function _invoke_ticker__async_cb_154($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10777
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 10783
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 10784
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 10785
 FUNCTION_TABLE_vi[$5 & 511]($6); //@line 10786
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 291; //@line 10789
  sp = STACKTOP; //@line 10790
  return;
 }
 ___async_unwind = 0; //@line 10793
 HEAP32[$ReallocAsyncCtx >> 2] = 291; //@line 10794
 sp = STACKTOP; //@line 10795
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 10999
 } else {
  $$04 = 0; //@line 11001
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 11004
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 11008
   $12 = $7 + 1 | 0; //@line 11009
   HEAP32[$0 >> 2] = $12; //@line 11010
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 11016
    break;
   } else {
    $$04 = $11; //@line 11019
   }
  }
 }
 return $$0$lcssa | 0; //@line 11023
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 17521
 $y_sroa_0_0_extract_trunc = $b$0; //@line 17522
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 17523
 $1$1 = tempRet0; //@line 17524
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 17526
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11575
 $1 = HEAP32[$0 >> 2] | 0; //@line 11576
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 11578
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11579
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 11580
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 249; //@line 11583
  sp = STACKTOP; //@line 11584
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11587
  return;
 }
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 17939
  src = src + num | 0; //@line 17940
  dest = dest + num | 0; //@line 17941
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 17943
   src = src - 1 | 0; //@line 17944
   num = num - 1 | 0; //@line 17945
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 17946
  }
  dest = ret; //@line 17948
 } else {
  _memcpy(dest, src, num) | 0; //@line 17950
 }
 return dest | 0; //@line 17952
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 17506
 $2 = $b & 65535; //@line 17507
 $3 = Math_imul($2, $1) | 0; //@line 17508
 $6 = $a >>> 16; //@line 17509
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 17510
 $11 = $b >>> 16; //@line 17511
 $12 = Math_imul($11, $1) | 0; //@line 17512
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 17513
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10212
 $1 = HEAP32[$0 >> 2] | 0; //@line 10213
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 10215
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10216
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 10217
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 223; //@line 10220
  sp = STACKTOP; //@line 10221
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10224
  return;
 }
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 593
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 595
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 596
 _wait_ms(1); //@line 597
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 600
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 602
  sp = STACKTOP; //@line 603
  return 0; //@line 604
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 606
  return $2 | 0; //@line 607
 }
 return 0; //@line 609
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2371
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 2373
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 2379
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2380
 FUNCTION_TABLE_vi[$5 & 511]($0); //@line 2381
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 76; //@line 2384
  sp = STACKTOP; //@line 2385
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2388
 return;
}
function __ZN6SocketC2Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 572; //@line 3692
 HEAP32[$0 + 4 >> 2] = 0; //@line 3694
 HEAP32[$0 + 8 >> 2] = 0; //@line 3696
 HEAP32[$0 + 12 >> 2] = -1; //@line 3698
 $4 = $0 + 16 | 0; //@line 3699
 HEAP32[$4 >> 2] = 0; //@line 3700
 HEAP32[$4 + 4 >> 2] = 0; //@line 3700
 HEAP32[$4 + 8 >> 2] = 0; //@line 3700
 HEAP32[$4 + 12 >> 2] = 0; //@line 3700
 HEAP32[$4 + 16 >> 2] = 0; //@line 3700
 HEAP32[$4 + 20 >> 2] = 0; //@line 3700
 HEAP32[$4 + 24 >> 2] = 0; //@line 3700
 HEAP32[$4 + 28 >> 2] = 0; //@line 3700
 return;
}
function __ZN17EthernetInterface11get_netmaskEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 103
 $2 = _emscripten_asm_const_ii(2, 0) | 0; //@line 105
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 106
 _wait_ms(1); //@line 107
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 31; //@line 110
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 112
  sp = STACKTOP; //@line 113
  return 0; //@line 114
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 116
  return $2 | 0; //@line 117
 }
 return 0; //@line 119
}
function _mbed_die__async_cb_29($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 17224
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17226
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 17228
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 17229
 _wait_ms(150); //@line 17230
 if (!___async) {
  ___async_unwind = 0; //@line 17233
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 269; //@line 17235
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 17237
 sp = STACKTOP; //@line 17238
 return;
}
function __ZN17EthernetInterface15get_mac_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 61
 $2 = _emscripten_asm_const_ii(0, 0) | 0; //@line 63
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 64
 _wait_ms(1); //@line 65
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 29; //@line 68
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 70
  sp = STACKTOP; //@line 71
  return 0; //@line 72
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 74
  return $2 | 0; //@line 75
 }
 return 0; //@line 77
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 16854
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16856
 _emscripten_asm_const_iii(10, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 16858
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 16859
 _wait_ms(150); //@line 16860
 if (!___async) {
  ___async_unwind = 0; //@line 16863
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 268; //@line 16865
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 16867
 sp = STACKTOP; //@line 16868
 return;
}
function __ZN17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 82
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 84
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _wait_ms(1); //@line 86
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 30; //@line 89
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 91
  sp = STACKTOP; //@line 92
  return 0; //@line 93
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 95
  return $2 | 0; //@line 96
 }
 return 0; //@line 98
}
function ___fflush_unlocked__async_cb_168($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12140
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12142
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12144
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12146
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 12148
 HEAP32[$4 >> 2] = 0; //@line 12149
 HEAP32[$6 >> 2] = 0; //@line 12150
 HEAP32[$8 >> 2] = 0; //@line 12151
 HEAP32[$10 >> 2] = 0; //@line 12152
 HEAP32[___async_retval >> 2] = 0; //@line 12154
 return;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3105
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3106
 $2 = __Z28nsapi_dns_query_async_canceli($1) | 0; //@line 3107
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 101; //@line 3110
  sp = STACKTOP; //@line 3111
  return 0; //@line 3112
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3114
  return $2 | 0; //@line 3115
 }
 return 0; //@line 3117
}
function _mbed_vtracef__async_cb_175($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13976
 $1 = HEAP32[134] | 0; //@line 13977
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 13978
 FUNCTION_TABLE_vi[$1 & 511](3535); //@line 13979
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 67; //@line 13982
  sp = STACKTOP; //@line 13983
  return;
 }
 ___async_unwind = 0; //@line 13986
 HEAP32[$ReallocAsyncCtx3 >> 2] = 67; //@line 13987
 sp = STACKTOP; //@line 13988
 return;
}
function _main__async_cb_91($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 1758
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1760
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1762
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 1763
 __ZN9TCPSocketD2Ev($2); //@line 1764
 if (!___async) {
  ___async_unwind = 0; //@line 1767
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 304; //@line 1769
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $4; //@line 1771
 sp = STACKTOP; //@line 1772
 return;
}
function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 9723
 STACKTOP = STACKTOP + 16 | 0; //@line 9724
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9724
 $1 = sp; //@line 9725
 if (!(___toread($0) | 0)) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 31]($0, $1, 1) | 0) == 1) {
   $$0 = HEAPU8[$1 >> 0] | 0; //@line 9736
  } else {
   $$0 = -1; //@line 9738
  }
 } else {
  $$0 = -1; //@line 9741
 }
 STACKTOP = sp; //@line 9743
 return $$0 | 0; //@line 9743
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13591
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13592
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 13593
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 318; //@line 13596
  sp = STACKTOP; //@line 13597
  return 0; //@line 13598
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13600
  return $3 | 0; //@line 13601
 }
 return 0; //@line 13603
}
function _serial_putc__async_cb_167($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12055
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12057
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 12058
 _fflush($2) | 0; //@line 12059
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 12062
  sp = STACKTOP; //@line 12063
  return;
 }
 ___async_unwind = 0; //@line 12066
 HEAP32[$ReallocAsyncCtx >> 2] = 289; //@line 12067
 sp = STACKTOP; //@line 12068
 return;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 133
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 134
 _puts(3131) | 0; //@line 135
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 32; //@line 138
  sp = STACKTOP; //@line 139
  return 0; //@line 140
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 142
  return 0; //@line 143
 }
 return 0; //@line 145
}
function __Z28nsapi_dns_query_async_canceli($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12435
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12436
 $1 = __ZL28nsapi_dns_query_async_deletei($0) | 0; //@line 12437
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 266; //@line 12440
  sp = STACKTOP; //@line 12441
  return 0; //@line 12442
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12444
  return $1 | 0; //@line 12445
 }
 return 0; //@line 12447
}
function __ZN13SocketAddressC2E10nsapi_addrt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP8[$0 >> 0] = 0; //@line 4231
 $3 = $0 + 40 | 0; //@line 4232
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2]; //@line 4233
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4233
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4233
 HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 4233
 HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 4233
 HEAP16[$0 + 60 >> 1] = $2; //@line 4235
 return;
}
function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9704
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9704
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9705
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9706
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647; //@line 9710
 HEAP32[tempDoublePtr >> 2] = $2; //@line 9711
 HEAP32[tempDoublePtr + 4 >> 2] = $8; //@line 9711
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function _emscripten_async_resume() {
 ___async = 0; //@line 17839
 ___async_unwind = 1; //@line 17840
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 17846
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 17850
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 17854
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 17856
 }
}
function __ZnwjRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13928
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13929
 $2 = __Znwj($0) | 0; //@line 13930
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 324; //@line 13933
  sp = STACKTOP; //@line 13934
  return 0; //@line 13935
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13937
  return $2 | 0; //@line 13938
 }
 return 0; //@line 13940
}
function __ZnajRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13963
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13964
 $2 = __Znaj($0) | 0; //@line 13965
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 326; //@line 13968
  sp = STACKTOP; //@line 13969
  return 0; //@line 13970
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13972
  return $2 | 0; //@line 13973
 }
 return 0; //@line 13975
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12403
 $1 = HEAP32[$0 >> 2] | 0; //@line 12404
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12405
 FUNCTION_TABLE_v[$1 & 7](); //@line 12406
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 265; //@line 12409
  sp = STACKTOP; //@line 12410
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12413
  return;
 }
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4369
 STACKTOP = STACKTOP + 16 | 0; //@line 4370
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4370
 $vararg_buffer = sp; //@line 4371
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 4375
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 4377
 STACKTOP = sp; //@line 4378
 return $5 | 0; //@line 4378
}
function __ZN9UDPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5850
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5851
 __ZN9UDPSocketD2Ev($0); //@line 5852
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 5855
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5857
  sp = STACKTOP; //@line 5858
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5861
  __ZdlPv($0); //@line 5862
  return;
 }
}
function __ZN9TCPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5356
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5357
 __ZN9TCPSocketD2Ev($0); //@line 5358
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 5361
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5363
  sp = STACKTOP; //@line 5364
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5367
  __ZdlPv($0); //@line 5368
  return;
 }
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 17781
 STACKTOP = STACKTOP + 16 | 0; //@line 17782
 $rem = __stackBase__ | 0; //@line 17783
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 17784
 STACKTOP = __stackBase__; //@line 17785
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 17786
}
function __ZN17EthernetInterface8set_dhcpEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 151
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 152
 _puts(3086) | 0; //@line 153
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 33; //@line 156
  sp = STACKTOP; //@line 157
  return 0; //@line 158
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 160
  return 0; //@line 161
 }
 return 0; //@line 163
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 17551
 if ((ret | 0) < 8) return ret | 0; //@line 17552
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 17553
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 17554
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 17555
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 17556
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 17557
}
function __Znaj($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13945
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13946
 $1 = __Znwj($0) | 0; //@line 13947
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 325; //@line 13950
  sp = STACKTOP; //@line 13951
  return 0; //@line 13952
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13954
  return $1 | 0; //@line 13955
 }
 return 0; //@line 13957
}
function __ZN13SocketAddress8set_addrE10nsapi_addr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP8[$0 >> 0] = 0; //@line 4243
 $2 = $0 + 40 | 0; //@line 4244
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2]; //@line 4245
 HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4245
 HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4245
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 4245
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 4245
 return;
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 14120
 STACKTOP = STACKTOP + 16 | 0; //@line 14121
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14121
 if (!(_pthread_once(8452, 4) | 0)) {
  $3 = _pthread_getspecific(HEAP32[2114] | 0) | 0; //@line 14127
  STACKTOP = sp; //@line 14128
  return $3 | 0; //@line 14128
 } else {
  _abort_message(7295, sp); //@line 14130
 }
 return 0; //@line 14133
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14288
 }
 return;
}
function __ZThn4_N17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9677
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9679
 HEAP8[$2 + 8 >> 0] = 0; //@line 9681
 if (!$2) {
  $7 = ___async_retval; //@line 9684
  HEAP32[$7 >> 2] = $4; //@line 9685
  return;
 }
 __ZdlPv($2); //@line 9688
 $7 = ___async_retval; //@line 9689
 HEAP32[$7 >> 2] = $4; //@line 9690
 return;
}
function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 5584
 STACKTOP = STACKTOP + 16 | 0; //@line 5585
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5585
 $2 = sp; //@line 5586
 HEAP32[$2 >> 2] = $varargs; //@line 5587
 $3 = _vsscanf($0, $1, $2) | 0; //@line 5588
 STACKTOP = sp; //@line 5589
 return $3 | 0; //@line 5589
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 13441
 $6 = HEAP32[$5 >> 2] | 0; //@line 13442
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 13443
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 13445
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 13447
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 13450
 return $2 | 0; //@line 13451
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 1090
 HEAP32[$3 >> 2] = 0; //@line 1091
 HEAP32[$3 + 4 >> 2] = 0; //@line 1091
 HEAP32[$3 + 8 >> 2] = 0; //@line 1091
 HEAP32[$3 + 12 >> 2] = 0; //@line 1091
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 1094
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 1097
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15995
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15997
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15998
 _fputc(10, $2) | 0; //@line 15999
 if (!___async) {
  ___async_unwind = 0; //@line 16002
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 330; //@line 16004
 sp = STACKTOP; //@line 16005
 return;
}
function __ZL25default_terminate_handlerv__async_cb_141($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9931
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9933
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9935
 HEAP32[$2 >> 2] = 7156; //@line 9936
 HEAP32[$2 + 4 >> 2] = $4; //@line 9938
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 9940
 _abort_message(7020, $2); //@line 9941
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14785
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 14796
  $$0 = 1; //@line 14797
 } else {
  $$0 = 0; //@line 14799
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 14803
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 14882
 STACKTOP = STACKTOP + 16 | 0; //@line 14883
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14883
 _free($0); //@line 14885
 if (!(_pthread_setspecific(HEAP32[2114] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 14890
  return;
 } else {
  _abort_message(7394, sp); //@line 14892
 }
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 12930
 HEAP32[$0 >> 2] = $1; //@line 12931
 HEAP32[1965] = 1; //@line 12932
 $4 = $0; //@line 12933
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 12938
 $10 = 7864; //@line 12939
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 12941
 HEAP32[$10 + 4 >> 2] = $9; //@line 12944
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8082
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 8085
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 8090
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 8093
 return;
}
function __ZNK13SocketAddress8get_addrEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1 + 40 | 0; //@line 4892
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 4893
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 4893
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 4893
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 4893
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 4893
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14364
 }
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13034
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13035
 _emscripten_sleep($0 | 0); //@line 13036
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 292; //@line 13039
  sp = STACKTOP; //@line 13040
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13043
  return;
 }
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1656
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1657
 _puts($0) | 0; //@line 1658
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 62; //@line 1661
  sp = STACKTOP; //@line 1662
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1665
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 1623
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 1627
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 1631
   $$0 = 0; //@line 1632
  } else {
   $$0 = $4; //@line 1634
  }
 } else {
  $$0 = $1; //@line 1637
 }
 return $$0 | 0; //@line 1639
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 1586
 STACKTOP = STACKTOP + 16 | 0; //@line 1587
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1587
 $0 = sp; //@line 1588
 _gettimeofday($0 | 0, 0) | 0; //@line 1589
 STACKTOP = sp; //@line 1596
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 1596
}
function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1; //@line 6559
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6561
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 6563
 $7 = $4 - $6 | 0; //@line 6564
 HEAP32[$0 + 108 >> 2] = $7; //@line 6566
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4; //@line 6575
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 14428
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 14432
  }
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 14867
 STACKTOP = STACKTOP + 16 | 0; //@line 14868
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14868
 if (!(_pthread_key_create(8456, 339) | 0)) {
  STACKTOP = sp; //@line 14873
  return;
 } else {
  _abort_message(7344, sp); //@line 14875
 }
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 11596
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 11601
 $8 = $0; //@line 11602
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 11604
 HEAP32[$8 + 4 >> 2] = $7; //@line 11607
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 17815
 HEAP32[new_frame + 4 >> 2] = sp; //@line 17817
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 17819
 ___async_cur_frame = new_frame; //@line 17820
 return ___async_cur_frame + 8 | 0; //@line 17821
}
function _nsapi_dns_add_server($0) {
 $0 = $0 | 0;
 _memmove(668, 648, 80) | 0; //@line 6052
 HEAP32[162] = HEAP32[$0 >> 2]; //@line 6053
 HEAP32[163] = HEAP32[$0 + 4 >> 2]; //@line 6053
 HEAP32[164] = HEAP32[$0 + 8 >> 2]; //@line 6053
 HEAP32[165] = HEAP32[$0 + 12 >> 2]; //@line 6053
 HEAP32[166] = HEAP32[$0 + 16 >> 2]; //@line 6053
 return 0; //@line 6054
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 10233
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 10238
 $8 = $0; //@line 10239
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 10241
 HEAP32[$8 + 4 >> 2] = $7; //@line 10244
 return;
}
function __ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + -4 | 0; //@line 980
 $5 = HEAP32[$1 >> 2] | 0; //@line 981
 HEAP32[$4 + 60 + ($5 << 3) >> 2] = $2; //@line 983
 HEAP32[$4 + 60 + ($5 << 3) + 4 >> 2] = $3; //@line 985
 return;
}
function __ZN17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20536
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20538
 HEAP8[$2 + 8 >> 0] = 0; //@line 20540
 if ($2 | 0) {
  __ZdlPv($2); //@line 20543
 }
 HEAP32[___async_retval >> 2] = $4; //@line 20546
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 3673
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 3673
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 3673
 return;
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 18070
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 18074
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 18077
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 17804
  return low << bits; //@line 17805
 }
 tempRet0 = low << bits - 32; //@line 17807
 return 0; //@line 17808
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 17793
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 17794
 }
 tempRet0 = 0; //@line 17796
 return high >>> bits - 32 | 0; //@line 17797
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 4062
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4062
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4062
 return;
}
function __ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2] | 0; //@line 569
 HEAP32[$0 + 60 + ($4 << 3) >> 2] = $2; //@line 571
 HEAP32[$0 + 60 + ($4 << 3) + 4 >> 2] = $3; //@line 573
 return;
}
function _fflush__async_cb_160($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11637
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 11639
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11642
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_78($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 23247
 HEAP32[___async_retval >> 2] = -3007; //@line 23249
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 19061
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 19063
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 19065
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 18466
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 18469
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 18472
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_83($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 149
 HEAP32[___async_retval >> 2] = -3007; //@line 151
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_134($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9372
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 9373
 HEAP32[$4 >> 2] = 0; //@line 9374
 HEAP32[___async_retval >> 2] = 0; //@line 9376
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_146($0) {
 $0 = $0 | 0;
 var $$010 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$010 = -3007; //@line 10125
 } else {
  $$010 = 0; //@line 10127
 }
 HEAP32[___async_retval >> 2] = $$010; //@line 10130
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_143($0) {
 $0 = $0 | 0;
 var $$010 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$010 = -3007; //@line 10035
 } else {
  $$010 = 0; //@line 10037
 }
 HEAP32[___async_retval >> 2] = $$010; //@line 10040
 return;
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 15984
 } else {
  $$0 = -1; //@line 15986
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 15989
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 18084
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 5087
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 5093
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 5097
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 18133
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 17827
 stackRestore(___async_cur_frame | 0); //@line 17828
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 17829
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14862
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 14863
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 14865
 return;
}
function __ZN12NetworkStack20get_call_in_callbackEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 100; //@line 3188
 HEAP32[$0 + 4 >> 2] = 1; //@line 3190
 HEAP32[$0 + 8 >> 2] = $1; //@line 3192
 HEAP32[$0 + 12 >> 2] = 552; //@line 3193
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15130
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 15131
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15133
 return;
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 12906
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 12912
 _emscripten_asm_const_iii(11, $0 | 0, $1 | 0) | 0; //@line 12913
 return;
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12440
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12440
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12442
 return $1 | 0; //@line 12443
}
function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9694
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9694
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9696
 return $1 | 0; //@line 9697
}
function __ZN9TCPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 5414
 HEAP32[$0 >> 2] = 608; //@line 5415
 HEAP32[$0 + 52 >> 2] = 0; //@line 5417
 HEAP8[$0 + 56 >> 0] = 0; //@line 5419
 HEAP8[$0 + 57 >> 0] = 0; //@line 5421
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1645
 HEAP8[$0 + 76 >> 0] = 1; //@line 1647
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 1649
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1650
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 17544
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 17545
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 17546
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 4535
  $$0 = -1; //@line 4536
 } else {
  $$0 = $0; //@line 4538
 }
 return $$0 | 0; //@line 4540
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 18077
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_129($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 8947
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11342
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 11343
 HEAP32[___async_retval >> 2] = $4; //@line 11345
 return;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 18126
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 991
 ___cxa_begin_catch($0 | 0) | 0; //@line 992
 _emscripten_alloc_async_context(4, sp) | 0; //@line 993
 __ZSt9terminatev(); //@line 994
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_166($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 12011
 return;
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 1008
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 15744
 } else {
  HEAP8[$0 >> 0] = 1; //@line 15746
  $$0 = 1; //@line 15747
 }
 return $$0 | 0; //@line 15749
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 20558
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 14775
 HEAP32[___async_retval >> 2] = 0; //@line 14777
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 14965
 HEAP32[___async_retval >> 2] = 0; //@line 14967
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_140($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 9866
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 18070
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_37($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 17892
 return;
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 17536
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 17538
}
function __ZN4mbed16mbed_event_queueEv() {
 if (!(HEAP8[7600] | 0)) {
  if (___cxa_guard_acquire(7600) | 0) {
   __ZN6events10EventQueueC2EjPh(7608, 256, 8464); //@line 1110
  }
 }
 return 7608; //@line 1113
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 18119
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_136($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 9576
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 11500
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 11503
 }
 return $$0 | 0; //@line 11505
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 5232
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 5237
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_198($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 16462
 return;
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_6($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16095
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_1($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15888
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 17321
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_120($0) {
 $0 = $0 | 0;
 var $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8292
 if ($2 | 0) {
  __ZdaPv($2); //@line 8295
 }
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_40($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18141
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 18063
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_101($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 2348
 return;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 17773
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 10696
 return;
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 4727
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 4731
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_57($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19487
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_89($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 1629
 return;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_152($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10679
 return;
}
function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) {
  $4 = 1; //@line 6903
 } else {
  $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1; //@line 6908
 }
 return $4 | 0; //@line 6910
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 17834
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 17835
}
function b53(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 34
 return 0; //@line 34
}
function b52(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 31
 return 0; //@line 31
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_54($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 19385
 return;
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 0](a1 | 0, a2 | 0, a3 | 0); //@line 18112
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_122($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 8354
 return;
}
function __ZN12NetworkStack10getsockoptEPviiS0_Pj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function __ZN12NetworkStack10setsockoptEPviiPKvj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 18189
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_2($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 15896
 return;
}
function __ZN9UDPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 5908
 HEAP32[$0 >> 2] = 632; //@line 5909
 HEAP32[$0 + 52 >> 2] = 0; //@line 5911
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14967
 __ZdlPv($0); //@line 14968
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14650
 __ZdlPv($0); //@line 14651
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 5223
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 5225
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_41($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 18149
 return;
}
function __ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14178
 __ZdlPv($0); //@line 14179
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 18377
 return;
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 17301
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 10985
 }
 return;
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 16046
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_126($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 8755
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_105($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 2677
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 9876
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0; //@line 18056
}
function __ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_52($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 19337
 return;
}
function b50(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 28
 return 0; //@line 28
}
function b49(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 25
 return 0; //@line 25
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 12423
 return;
}
function __ZN17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 18482
 return;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16105
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19010
 return;
}
function b229(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 544
}
function __ZN17EthernetInterface15get_mac_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 13471
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 14375
}
function __ZN17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16022
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_131($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 9072
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[2115] | 0; //@line 15766
 HEAP32[2115] = $0 + 0; //@line 15768
 return $0 | 0; //@line 15770
}
function __ZN12NetworkStack11setstackoptEiiPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN12NetworkStack11getstackoptEiiPvPj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN17EthernetInterface11get_netmaskEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 16926
 return;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[630] | 0; //@line 14957
 HEAP32[630] = $0 + 0; //@line 14959
 return $0 | 0; //@line 14961
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0); //@line 18105
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZnwjRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17282
 return;
}
function __ZN6Socket11set_timeoutEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 12 >> 2] = ($1 | 0) > -1 ? $1 : -1; //@line 4154
 return;
}
function __ZnajRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1639
 return;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 18912
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 17861
}
function __ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_118($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b47(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(15); //@line 22
 return 0; //@line 22
}
function b46(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(14); //@line 19
 return 0; //@line 19
}
function b45(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(13); //@line 16
 return 0; //@line 16
}
function b44(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(12); //@line 13
 return 0; //@line 13
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b43(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 10
 return 0; //@line 10
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b227(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 541
}
function __ZN6Socket5closeEv__async_cb_190($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14955
 return;
}
function __ZN17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function _fflush__async_cb_161($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 11652
 return;
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 11448
}
function _fputc__async_cb_188($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 14875
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12043
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 19051
 return;
}
function _putc__async_cb_194($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15143
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_203($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 4 >> 2] | 0); //@line 17260
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17172
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_49($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 18904
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12NetworkStack14get_dns_serverEiP13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0; //@line 18049
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10807
 return;
}
function __ZN17EthernetInterface8set_dhcpEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 15936
 return;
}
function __Znaj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17311
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 18239
 return 0; //@line 18239
}
function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 18236
 return 0; //@line 18236
}
function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 18233
 return 0; //@line 18233
}
function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 18230
 return 0; //@line 18230
}
function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 18227
 return 0; //@line 18227
}
function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 18224
 return 0; //@line 18224
}
function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 18221
 return 0; //@line 18221
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 18218
 return 0; //@line 18218
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 18215
 return 0; //@line 18215
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 18212
 return 0; //@line 18212
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(18); //@line 18209
 return 0; //@line 18209
}
function __ZThn4_N17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN13SocketAddress8set_portEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP16[$0 + 60 >> 1] = $1; //@line 4254
 return;
}
function b27(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 18206
 return 0; //@line 18206
}
function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0; //@line 5618
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(7447, HEAP32[$0 + 4 >> 2] | 0); //@line 2357
}
function _strcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 ___stpcpy($0, $1) | 0; //@line 13458
 return $0 | 0; //@line 13459
}
function __ZN17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 511](a1 | 0); //@line 18098
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function b41(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 7
 return 0; //@line 7
}
function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 4
 return 0; //@line 4
}
function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 1
 return 0; //@line 1
}
function b225(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 538
}
function b224(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 535
}
function b223(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 532
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 1572
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 1581
 return;
}
function __ZN9TCPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 17291
 return;
}
function __ZNK13SocketAddress14get_ip_versionEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 40 >> 2] | 0; //@line 5083
}
function __ZN9UDPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 2304
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_11($0) {
 $0 = $0 | 0;
 return;
}
function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 4645
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(15); //@line 18203
 return 0; //@line 18203
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(14); //@line 18200
 return 0; //@line 18200
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(13); //@line 18197
 return 0; //@line 18197
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(12); //@line 18194
 return 0; //@line 18194
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(11); //@line 18191
 return 0; //@line 18191
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(10); //@line 18188
 return 0; //@line 18188
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 12693
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(9); //@line 18185
 return 0; //@line 18185
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 18182
 return 0; //@line 18182
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1616
 return;
}
function __ZNK13SocketAddress8get_portEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 60 >> 1] | 0; //@line 4902
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 1603
}
function __ZdlPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdlPv($0); //@line 13989
 return;
}
function __ZdaPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdaPv($0); //@line 14004
 return;
}
function __ZThn4_N17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0 + -4 | 0); //@line 587
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 0]() | 0; //@line 18042
}
function _main__async_cb_96($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 2041
 return;
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1609
 return;
}
function b221(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 529
}
function __ZN16NetworkInterface12set_blockingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_192($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterface9get_stackEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 212
}
function __Z18nsapi_create_stackP12NetworkStack($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 3686
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 18091
}
function __ZN12NetworkStack19onboardNetworkStackEv($0) {
 $0 = $0 | 0;
 return 0; //@line 615
}
function __ZNK16NetworkInterface21get_connection_statusEv($0) {
 $0 = $0 | 0;
 return -3002;
}
function __ZN16NetworkInterface13wifiInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 187
}
function __ZN16NetworkInterface13meshInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 193
}
function __ZN16NetworkInterface13emacInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 205
}
function __ZN17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 55
 return;
}
function __ZN17EthernetInterface11get_gatewayEv($0) {
 $0 = $0 | 0;
 return 0; //@line 125
}
function __ZN16NetworkInterface12ethInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 181
}
function __ZN16NetworkInterface12cellularBaseEv($0) {
 $0 = $0 | 0;
 return 0; //@line 199
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_121($0) {
 $0 = $0 | 0;
 return;
}
function b16(p0) {
 p0 = p0 | 0;
 nullFunc_ii(31); //@line 18179
 return 0; //@line 18179
}
function b15(p0) {
 p0 = p0 | 0;
 nullFunc_ii(30); //@line 18176
 return 0; //@line 18176
}
function b14(p0) {
 p0 = p0 | 0;
 nullFunc_ii(29); //@line 18173
 return 0; //@line 18173
}
function b13(p0) {
 p0 = p0 | 0;
 nullFunc_ii(28); //@line 18170
 return 0; //@line 18170
}
function b12(p0) {
 p0 = p0 | 0;
 nullFunc_ii(27); //@line 18167
 return 0; //@line 18167
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(26); //@line 18164
 return 0; //@line 18164
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(25); //@line 18161
 return 0; //@line 18161
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 4593
}
function __ZN17EthernetInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 175
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(24); //@line 18158
 return 0; //@line 18158
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(23); //@line 18155
 return 0; //@line 18155
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(22); //@line 18152
 return 0; //@line 18152
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(21); //@line 18149
 return 0; //@line 18149
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(20); //@line 18146
 return 0; //@line 18146
}
function b4(p0) {
 p0 = p0 | 0;
 nullFunc_ii(19); //@line 18143
 return 0; //@line 18143
}
function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 18140
 return 0; //@line 18140
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_65($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_64($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_63($0) {
 $0 = $0 | 0;
 return;
}
function __Z29nsapi_dns_query_async_timeoutv__async_cb_114($0) {
 $0 = $0 | 0;
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_204($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterface7connectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 169
}
function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}
function b219(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 526
}
function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _abort_message__async_cb_4($0) {
 $0 = $0 | 0;
 _abort(); //@line 16012
}
function ___ofl_lock() {
 ___lock(8436); //@line 5242
 return 8444; //@line 5243
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN9UDPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 1; //@line 5870
}
function __ZN9TCPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 0; //@line 5376
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 40
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 12614
}
function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}
function ___pthread_self_913() {
 return _pthread_self() | 0; //@line 9718
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 12620
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZdaPv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 13996
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 18008
}
function __ZN6SocketD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 3755
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 13981
 return;
}
function b1() {
 nullFunc_i(0); //@line 18137
 return 0; //@line 18137
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 18004
}
function __ZThn4_N17EthernetInterfaceD1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9TCPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_68($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9TCPSocketD2Ev__async_cb_43($0) {
 $0 = $0 | 0;
 return;
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(8436); //@line 5248
 return;
}
function __ZN6SocketD2Ev__async_cb_30($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b217(p0) {
 p0 = p0 | 0;
 nullFunc_vi(511); //@line 523
}
function b216(p0) {
 p0 = p0 | 0;
 nullFunc_vi(510); //@line 520
}
function b215(p0) {
 p0 = p0 | 0;
 nullFunc_vi(509); //@line 517
}
function b214(p0) {
 p0 = p0 | 0;
 nullFunc_vi(508); //@line 514
}
function b213(p0) {
 p0 = p0 | 0;
 nullFunc_vi(507); //@line 511
}
function b212(p0) {
 p0 = p0 | 0;
 nullFunc_vi(506); //@line 508
}
function b211(p0) {
 p0 = p0 | 0;
 nullFunc_vi(505); //@line 505
}
function b210(p0) {
 p0 = p0 | 0;
 nullFunc_vi(504); //@line 502
}
function b209(p0) {
 p0 = p0 | 0;
 nullFunc_vi(503); //@line 499
}
function b208(p0) {
 p0 = p0 | 0;
 nullFunc_vi(502); //@line 496
}
function b207(p0) {
 p0 = p0 | 0;
 nullFunc_vi(501); //@line 493
}
function b206(p0) {
 p0 = p0 | 0;
 nullFunc_vi(500); //@line 490
}
function b205(p0) {
 p0 = p0 | 0;
 nullFunc_vi(499); //@line 487
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(498); //@line 484
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(497); //@line 481
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(496); //@line 478
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(495); //@line 475
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(494); //@line 472
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(493); //@line 469
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(492); //@line 466
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(491); //@line 463
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(490); //@line 460
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(489); //@line 457
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(488); //@line 454
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(487); //@line 451
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(486); //@line 448
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(485); //@line 445
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(484); //@line 442
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(483); //@line 439
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(482); //@line 436
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(481); //@line 433
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(480); //@line 430
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(479); //@line 427
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(478); //@line 424
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(477); //@line 421
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(476); //@line 418
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(475); //@line 415
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(474); //@line 412
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(473); //@line 409
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(472); //@line 406
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(471); //@line 403
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(470); //@line 400
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(469); //@line 397
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(468); //@line 394
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(467); //@line 391
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(466); //@line 388
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(465); //@line 385
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(464); //@line 382
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(463); //@line 379
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(462); //@line 376
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(461); //@line 373
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(460); //@line 370
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(459); //@line 367
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(458); //@line 364
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(457); //@line 361
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(456); //@line 358
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(455); //@line 355
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(454); //@line 352
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(453); //@line 349
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(452); //@line 346
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(451); //@line 343
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(450); //@line 340
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(449); //@line 337
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(448); //@line 334
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(447); //@line 331
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(446); //@line 328
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(445); //@line 325
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(444); //@line 322
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(443); //@line 319
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(442); //@line 316
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(441); //@line 313
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(440); //@line 310
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(439); //@line 307
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(438); //@line 304
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(437); //@line 301
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(436); //@line 298
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(435); //@line 295
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(434); //@line 292
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(433); //@line 289
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(432); //@line 286
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(431); //@line 283
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(430); //@line 280
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(429); //@line 277
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(428); //@line 274
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(427); //@line 271
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(426); //@line 268
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(425); //@line 265
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(424); //@line 262
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(423); //@line 259
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(422); //@line 256
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(421); //@line 253
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(420); //@line 250
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(419); //@line 247
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(418); //@line 244
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(417); //@line 241
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(416); //@line 238
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(415); //@line 235
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(414); //@line 232
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(413); //@line 229
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(412); //@line 226
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(411); //@line 223
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(410); //@line 220
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(409); //@line 217
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(408); //@line 214
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(407); //@line 211
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(406); //@line 208
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(405); //@line 205
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(404); //@line 202
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(403); //@line 199
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(402); //@line 196
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(401); //@line 193
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(400); //@line 190
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(399); //@line 187
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(398); //@line 184
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(397); //@line 181
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(396); //@line 178
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(395); //@line 175
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(394); //@line 172
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 4551
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 4879
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(393); //@line 169
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(392); //@line 166
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(391); //@line 163
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(390); //@line 160
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(389); //@line 157
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(388); //@line 154
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(387); //@line 151
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(386); //@line 148
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(385); //@line 145
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(384); //@line 142
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(383); //@line 139
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(382); //@line 136
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(381); //@line 133
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(380); //@line 130
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(379); //@line 127
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(378); //@line 124
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(377); //@line 121
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(376); //@line 118
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(375); //@line 115
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(374); //@line 112
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(373); //@line 109
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(372); //@line 106
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(371); //@line 103
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(370); //@line 100
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(369); //@line 97
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(368); //@line 94
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(367); //@line 91
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(366); //@line 88
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(365); //@line 85
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(364); //@line 82
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(363); //@line 79
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(362); //@line 76
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(361); //@line 73
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(360); //@line 70
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(359); //@line 67
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(358); //@line 64
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(357); //@line 61
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(356); //@line 58
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(355); //@line 55
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 52
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function ___errno_location() {
 return 8432; //@line 4545
}
function __ZSt9terminatev__async_cb_5($0) {
 $0 = $0 | 0;
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _pthread_self() {
 return 2112; //@line 4598
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b58() {
 nullFunc_v(7); //@line 49
}
function b57() {
 nullFunc_v(6); //@line 46
}
function b56() {
 nullFunc_v(5); //@line 43
}
function b55() {
 nullFunc_v(0); //@line 37
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1];
var FUNCTION_TABLE_ii = [b3,__ZN17EthernetInterface15get_mac_addressEv,__ZN17EthernetInterface14get_ip_addressEv,__ZN17EthernetInterface11get_netmaskEv,__ZN17EthernetInterface11get_gatewayEv,__ZN17EthernetInterface7connectEv,__ZN17EthernetInterface10disconnectEv,__ZNK16NetworkInterface21get_connection_statusEv,__ZN16NetworkInterface12ethInterfaceEv,__ZN16NetworkInterface13wifiInterfaceEv,__ZN16NetworkInterface13meshInterfaceEv,__ZN16NetworkInterface12cellularBaseEv,__ZN16NetworkInterface13emacInterfaceEv,__ZN17EthernetInterface9get_stackEv,__ZThn4_N17EthernetInterface14get_ip_addressEv,__ZN12NetworkStack19onboardNetworkStackEv,__ZN9TCPSocket9get_protoEv,__ZN9UDPSocket9get_protoEv,___stdio_close,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13
,b14,b15,b16];
var FUNCTION_TABLE_iii = [b18,__ZN16NetworkInterface26gethostbyname_async_cancelEi,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress,__ZN17EthernetInterface8set_dhcpEb,__ZN16NetworkInterface12set_blockingEb,__ZN17EthernetInterface12socket_closeEPv,__ZN12NetworkStack26gethostbyname_async_cancelEi,__ZN12NetworkStack14add_dns_serverERK13SocketAddress,__ZThn4_N17EthernetInterface12socket_closeEPv,b19,b20,b21,b22,b23,b24,b25];
var FUNCTION_TABLE_iiii = [b27,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZN17EthernetInterface13socket_listenEPvi,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack14get_dns_serverEiP13SocketAddress,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZThn4_N17EthernetInterface13socket_listenEPvi,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_do_read,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38
,b39,b40,b41];
var FUNCTION_TABLE_iiiii = [b43,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZN17EthernetInterface11set_networkEPKcS1_S1_,__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZN17EthernetInterface11socket_sendEPvPKvj,__ZN17EthernetInterface11socket_recvEPvS0_j,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j,b44,b45,b46,b47];
var FUNCTION_TABLE_iiiiii = [b49,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,__ZN12NetworkStack11setstackoptEiiPKvj,__ZN12NetworkStack11getstackoptEiiPvPj,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,b50];
var FUNCTION_TABLE_iiiiiii = [b52,__ZN12NetworkStack10setsockoptEPviiPKvj,__ZN12NetworkStack10getsockoptEPviiS0_Pj,b53];
var FUNCTION_TABLE_v = [b55,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__Z29nsapi_dns_query_async_timeoutv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b56,b57,b58];
var FUNCTION_TABLE_vi = [b60,__ZN17EthernetInterfaceD2Ev,__ZN17EthernetInterfaceD0Ev,__ZThn4_N17EthernetInterfaceD1Ev,__ZThn4_N17EthernetInterfaceD0Ev,_mbed_trace_default_print,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv,__ZN6SocketD2Ev,__ZN6SocketD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv,__ZN9TCPSocketD2Ev,__ZN9TCPSocketD0Ev,__ZN9TCPSocket5eventEv,__ZN9UDPSocketD2Ev,__ZN9UDPSocketD0Ev,__ZN9UDPSocket5eventEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev
,__ZN17EthernetInterface15get_mac_addressEv__async_cb,__ZN17EthernetInterface14get_ip_addressEv__async_cb,__ZN17EthernetInterface11get_netmaskEv__async_cb,__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb,__ZN17EthernetInterface8set_dhcpEb__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_131,__ZN17EthernetInterface12socket_closeEPv__async_cb,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_41,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_42,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_40,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_89,__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_126,__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_2,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_3,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_1,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_101
,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_185,_mbed_vtracef__async_cb_175,_mbed_vtracef__async_cb_176,_mbed_vtracef__async_cb_177,_mbed_vtracef__async_cb_184,_mbed_vtracef__async_cb_178,_mbed_vtracef__async_cb_183,_mbed_vtracef__async_cb_179,_mbed_vtracef__async_cb_180,_mbed_vtracef__async_cb_181,_mbed_vtracef__async_cb_182,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_123,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_136,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_138,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_139,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_140,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_152,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_57
,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_6,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_39,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_31,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_32,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_33,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_34,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_38,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_35,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_36,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_37,__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_150,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_142,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_148,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_143,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_144,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_149,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_145,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_147,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_146,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_163,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_164,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_165,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_166
,__ZN6SocketD2Ev__async_cb,__ZN6SocketD2Ev__async_cb_30,__ZN6Socket4openEP12NetworkStack__async_cb,__ZN6Socket4openEP12NetworkStack__async_cb_45,__ZN6Socket4openEP12NetworkStack__async_cb_46,__ZN6Socket4openEP12NetworkStack__async_cb_47,__ZN6Socket4openEP12NetworkStack__async_cb_48,__ZN4mbed8CallbackIFvvEE5thunkEPv,__ZN6Socket4openEP12NetworkStack__async_cb_49,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_50,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb,__ZN6Socket5closeEv__async_cb,__ZN6Socket5closeEv__async_cb_189,__ZN6Socket5closeEv__async_cb_190,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_122,__ZN9TCPSocketD2Ev__async_cb_44,__ZN9TCPSocketD2Ev__async_cb,__ZN9TCPSocketD2Ev__async_cb_43,__ZN9TCPSocketD0Ev__async_cb,__ZN9TCPSocket5eventEv__async_cb,__ZN9TCPSocket7connectEPKct__async_cb,__ZN9TCPSocket7connectEPKct__async_cb_125,__ZN9TCPSocket7connectEPKct__async_cb_124,__ZN9TCPSocket4sendEPKvj__async_cb_159,__ZN9TCPSocket4sendEPKvj__async_cb,__ZN9TCPSocket4recvEPvj__async_cb_151,__ZN9TCPSocket4recvEPvj__async_cb,__ZN9UDPSocketD2Ev__async_cb_69
,__ZN9UDPSocketD2Ev__async_cb,__ZN9UDPSocketD2Ev__async_cb_68,__ZN9UDPSocketD0Ev__async_cb,__ZN9UDPSocket5eventEv__async_cb,__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb,__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_200,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_197,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_196,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_195,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_199,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_198,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_186,__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_127,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_130,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_128,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_129,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_88,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_84,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_85,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_70,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_71,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_72,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_73,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_74
,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_75,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_76,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_77,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_78,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_79,__ZL28nsapi_dns_query_async_createPv,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_86,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_80,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_81,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_82,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_83,__Z29nsapi_dns_query_async_timeoutv__async_cb,__ZL30nsapi_dns_query_async_responsePv,__Z29nsapi_dns_query_async_timeoutv__async_cb_117,__Z29nsapi_dns_query_async_timeoutv__async_cb_107,__Z29nsapi_dns_query_async_timeoutv__async_cb_108,__Z29nsapi_dns_query_async_timeoutv__async_cb_109,__ZL26nsapi_dns_query_async_sendPv,__Z29nsapi_dns_query_async_timeoutv__async_cb_116,__Z29nsapi_dns_query_async_timeoutv__async_cb_110,__Z29nsapi_dns_query_async_timeoutv__async_cb_111,__Z29nsapi_dns_query_async_timeoutv__async_cb_112,__Z29nsapi_dns_query_async_timeoutv__async_cb_115,__Z29nsapi_dns_query_async_timeoutv__async_cb_113,__Z29nsapi_dns_query_async_timeoutv__async_cb_114,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_56,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_52,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_53
,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_55,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_54,__ZL28nsapi_dns_query_async_createPv__async_cb_62,__ZL28nsapi_dns_query_async_createPv__async_cb_67,__ZL28nsapi_dns_query_async_createPv__async_cb_65,__ZL28nsapi_dns_query_async_createPv__async_cb,__ZL28nsapi_dns_query_async_createPv__async_cb_64,__ZL28nsapi_dns_query_async_createPv__async_cb_61,__ZL28nsapi_dns_query_async_createPv__async_cb_58,__ZL28nsapi_dns_query_async_createPv__async_cb_59,__ZL37nsapi_dns_query_async_socket_callbackPv,__ZL28nsapi_dns_query_async_createPv__async_cb_66,__ZL28nsapi_dns_query_async_createPv__async_cb_60,__ZL28nsapi_dns_query_async_createPv__async_cb_63,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_12,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_7,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_13,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_8,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_9,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_14,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_10,__ZL26nsapi_dns_query_async_respP9DNS_QUERYiP13SocketAddress__async_cb_11,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_193,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_191,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_192,__ZL26nsapi_dns_query_async_sendPv__async_cb_204
,__ZL26nsapi_dns_query_async_sendPv__async_cb,__ZL26nsapi_dns_query_async_sendPv__async_cb_203,__ZL26nsapi_dns_query_async_sendPv__async_cb_205,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_174,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_171,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_173,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_172,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_169,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_170,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_121,__ZL30nsapi_dns_query_async_responsePv__async_cb_119,__ZL30nsapi_dns_query_async_responsePv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_120,__ZL28nsapi_dns_query_async_deletei__async_cb_135,__ZL28nsapi_dns_query_async_deletei__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_132,__ZL28nsapi_dns_query_async_deletei__async_cb_133,__ZL28nsapi_dns_query_async_deletei__async_cb_134,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_106,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_102,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_103,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_104,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_105,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb,_mbed_assert_internal__async_cb,_mbed_die__async_cb_29
,_mbed_die__async_cb_28,_mbed_die__async_cb_27,_mbed_die__async_cb_26,_mbed_die__async_cb_25,_mbed_die__async_cb_24,_mbed_die__async_cb_23,_mbed_die__async_cb_22,_mbed_die__async_cb_21,_mbed_die__async_cb_20,_mbed_die__async_cb_19,_mbed_die__async_cb_18,_mbed_die__async_cb_17,_mbed_die__async_cb_16,_mbed_die__async_cb_15,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb,_mbed_error_vfprintf__async_cb_202,_mbed_error_vfprintf__async_cb_201,_serial_putc__async_cb_167,_serial_putc__async_cb,_invoke_ticker__async_cb_154,_invoke_ticker__async_cb,_wait_ms__async_cb,_main__async_cb_92,_main__async_cb_100,_main__async_cb_99,_main__async_cb,_main__async_cb_98,_main__async_cb_95
,_main__async_cb_90,_main__async_cb_94,_main__async_cb_93,_main__async_cb_97,_main__async_cb_91,_main__async_cb_96,_putc__async_cb_194,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_161,_fflush__async_cb_160,_fflush__async_cb_162,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_168,_vfprintf__async_cb,_snprintf__async_cb,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_fputc__async_cb_188,_fputc__async_cb,_puts__async_cb,__Znwj__async_cb,__ZnwjRKSt9nothrow_t__async_cb,__Znaj__async_cb,__ZnajRKSt9nothrow_t__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_141
,_abort_message__async_cb,_abort_message__async_cb_4,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_187,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_153,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_118,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_51,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_158,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_157,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_156,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_155,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_137,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b61,b62,b63,b64
,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94
,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124
,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154
,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184
,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201,b202,b203,b204,b205,b206,b207,b208,b209,b210,b211,b212,b213,b214
,b215,b216,b217];
var FUNCTION_TABLE_vii = [b219,__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE,__ZN12NetworkStack20get_call_in_callbackEv,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv];
var FUNCTION_TABLE_viii = [b221];
var FUNCTION_TABLE_viiii = [b223,__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b224,b225];
var FUNCTION_TABLE_viiiii = [b227,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b229,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=network.js.map