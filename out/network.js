// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
// {{PRE_JSES}}

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  Module['setWindowTitle'] = function(title) { document.title = title };
}
else {
  // Unreachable because SHELL is dependent on the others
  throw new Error('unknown runtime environment');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('Warning: addFunction: Provide a wasm function signature ' +
                    'string as a second argument');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};
// For fast lookup of conversion functions
var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



var /* show errors on likely calls to FS when it was not included */ FS = {
  error: function() {
    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');
  },
  init: function() { FS.error() },
  createDataFile: function() { FS.error() },
  createPreloadedFile: function() { FS.error() },
  createLazyFile: function() { FS.error() },
  open: function() { FS.error() },
  mkdev: function() { FS.error() },
  registerDevice: function() { FS.error() },
  analyzePath: function() { FS.error() },
  loadFilesFromDB: function() { FS.error() },

  ErrnoError: function ErrnoError() { FS.error() },
};
Module['FS_createDataFile'] = FS.createDataFile;
Module['FS_createPreloadedFile'] = FS.createPreloadedFile;



// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [function($0) { return window.MbedJSHal.network.get_mac_address(); },
 function($0) { return window.MbedJSHal.network.get_ip_address(); },
 function($0) { return window.MbedJSHal.network.get_netmask(); },
 function($0) { return window.MbedJSHal.network.socket_open($0); },
 function($0) { return window.MbedJSHal.network.socket_close($0); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_connect($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_send($0, $1, $2); },
 function($0, $1, $2) { return window.MbedJSHal.network.socket_recv($0, $1, $2); },
 function() { return Date.now(); },
 function($0, $1) { MbedJSHal.gpio.write($0, $1); },
 function($0, $1) { MbedJSHal.gpio.init_out($0, $1, 0); }];

function _emscripten_asm_const_iii(code, a0, a1) {
  return ASM_CONSTS[code](a0, a1);
}

function _emscripten_asm_const_i(code) {
  return ASM_CONSTS[code]();
}

function _emscripten_asm_const_ii(code, a0) {
  return ASM_CONSTS[code](a0);
}

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
  return ASM_CONSTS[code](a0, a1, a2);
}




STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 9728;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "network.js.mem";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        // A rethrown exception can reach refcount 0; it must not be discarded
        // Its next handler will clear the rethrown flag and addRef it, prior to
        // final decRef and destruction here
        if (info.refcount === 0 && !info.rethrown) {
          if (info.destructor) {
            Module['dynCall_vi'](info.destructor, ptr);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};function ___cxa_begin_catch(ptr) {
      var info = EXCEPTIONS.infos[ptr];
      if (info && !info.caught) {
        info.caught = true;
        __ZSt18uncaught_exceptionv.uncaught_exception--;
      }
      if (info) info.rethrown = false;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___cxa_pure_virtual() {
      ABORT = true;
      throw 'Pure virtual function called!';
    }

  
  
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((setTempRet0(0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((setTempRet0(0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((setTempRet0(typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((setTempRet0(throwntype),thrown)|0);
    }function ___gxx_personality_v0() {
    }

  function ___lock() {}

  
    

  
  var SYSCALLS={varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function flush_NO_FILESYSTEM() {
      // flush anything remaining in the buffers during shutdown
      var fflush = Module["_fflush"];
      if (fflush) fflush(0);
      var printChar = ___syscall146.printChar;
      if (!printChar) return;
      var buffers = ___syscall146.buffers;
      if (buffers[1].length) printChar(1, 10);
      if (buffers[2].length) printChar(2, 10);
    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      // hack to support printf in NO_FILESYSTEM
      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      var ret = 0;
      if (!___syscall146.buffers) {
        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr
        ___syscall146.printChar = function(stream, curr) {
          var buffer = ___syscall146.buffers[stream];
          assert(buffer);
          if (curr === 0 || curr === 10) {
            (stream === 1 ? Module['print'] : Module['printErr'])(UTF8ArrayToString(buffer, 0));
            buffer.length = 0;
          } else {
            buffer.push(curr);
          }
        };
      }
      for (var i = 0; i < iovcnt; i++) {
        var ptr = HEAP32[(((iov)+(i*8))>>2)];
        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
        for (var j = 0; j < len; j++) {
          ___syscall146.printChar(stream, HEAPU8[ptr+j]);
        }
        ret += len;
      }
      return ret;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC);   

  function ___unlock() {}

   

  function _abort() {
      Module['abort']();
    }

   

   

  
  var ___async_cur_frame=0; 

  var _emscripten_asm_const_int=true;

   

   

  
  
  var ___async=0;
  
  var ___async_unwind=1;
  
  var ___async_retval=STATICTOP; STATICTOP += 16;; 
  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;
          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (typeof setImmediate === 'undefined') {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = 'setimmediate';
          function Browser_setImmediate_messageHandler(event) {
            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,
            // so check for both cases.
            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          addEventListener("message", Browser_setImmediate_messageHandler, true);
          setImmediate = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            if (ENVIRONMENT_IS_WORKER) {
              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];
              Module['setImmediates'].push(func);
              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js
            } else postMessage(emscriptenMainLoopMessageId, "*"); // On the main thread, can just send the message to itself.
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          setImmediate(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }
  
  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var browserIterationFunc;
      if (typeof arg !== 'undefined') {
        browserIterationFunc = function() {
          Module['dynCall_vi'](func, arg);
        };
      } else {
        browserIterationFunc = function() {
          Module['dynCall_v'](func);
        };
      }
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
          
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {
          Browser.mainLoop.tickStartTime = _emscripten_get_now();
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(browserIterationFunc);
  
        checkStackCookie();
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||
                                document['mozPointerLockElement'] === Module['canvas'] ||
                                document['webkitPointerLockElement'] === Module['canvas'] ||
                                document['msPointerLockElement'] === Module['canvas'];
        }
        var canvas = Module['canvas'];
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {
                Module['canvas'].requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullscreenChange() {
          Browser.isFullscreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||
               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.exitFullscreen = document['exitFullscreen'] ||
                                    document['cancelFullScreen'] ||
                                    document['mozCancelFullScreen'] ||
                                    document['msExitFullscreen'] ||
                                    document['webkitCancelFullScreen'] ||
                                    function() {};
            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullscreen = true;
            if (Browser.resizeCanvas) Browser.setFullscreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);
          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullscreenHandlersInstalled) {
          Browser.fullscreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullscreenChange, false);
          document.addEventListener('mozfullscreenchange', fullscreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);
          document.addEventListener('MSFullscreenChange', fullscreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullscreen();
        }
      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
          Module.printErr('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');
          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {
            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
          }
          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
            // just add the mouse delta to the current absolut mouse position
            // FIXME: ideally this should be clamped against the canvas size and zero
            Browser.mouseX += Browser.mouseMovementX;
            Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (dep) removeRunDependency(dep);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (dep) addRunDependency(dep);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
          var flags = HEAPU32[((SDL.screen)>>2)];
          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
          HEAP32[((SDL.screen)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||
             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_sleep(ms) {
      Module['setAsync'](); // tell the scheduler that we have a callback on hold
      Browser.safeSetTimeout(_emscripten_async_resume, ms);
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=(now/1000)|0; // seconds
      HEAP32[(((ptr)+(4))>>2)]=((now % 1000)*1000)|0; // microseconds
      return 0;
    }



   

  function _llvm_trap() {
      abort('trap!');
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   

  function _pthread_cond_init() { return 0; }

  function _pthread_cond_signal() { return 0; }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _pthread_mutex_init() {}

   

   

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Module['dynCall_v'](func);
      _pthread_once.seen[ptr] = 1;
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    } 
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Module.printErr("Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead."); Module["requestFullScreen"] = Module["requestFullscreen"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestFullscreen"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
if (ENVIRONMENT_IS_NODE) {
    _emscripten_get_now = function _emscripten_get_now_actual() {
      var t = process['hrtime']();
      return t[0] * 1e3 + t[1] / 1e6;
    };
  } else if (typeof dateNow !== 'undefined') {
    _emscripten_get_now = dateNow;
  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {
    _emscripten_get_now = function() { return self['performance']['now'](); };
  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {
    _emscripten_get_now = function() { return performance['now'](); };
  } else {
    _emscripten_get_now = Date.now;
  };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}



var debug_table_i = ["0"];
var debug_table_ii = ["0", "__ZN17EthernetInterface15get_mac_addressEv", "__ZN17EthernetInterface14get_ip_addressEv", "__ZN17EthernetInterface11get_netmaskEv", "__ZN17EthernetInterface11get_gatewayEv", "__ZN17EthernetInterface7connectEv", "__ZN17EthernetInterface10disconnectEv", "__ZNK16NetworkInterface21get_connection_statusEv", "__ZN16NetworkInterface12ethInterfaceEv", "__ZN16NetworkInterface13wifiInterfaceEv", "__ZN16NetworkInterface13meshInterfaceEv", "__ZN16NetworkInterface12cellularBaseEv", "__ZN16NetworkInterface13emacInterfaceEv", "__ZN17EthernetInterface9get_stackEv", "__ZThn4_N17EthernetInterface14get_ip_addressEv", "__ZN12NetworkStack19onboardNetworkStackEv", "__ZN9TCPSocket9get_protoEv", "__ZN9UDPSocket9get_protoEv", "___stdio_close", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iii = ["0", "__ZN16NetworkInterface26gethostbyname_async_cancelEi", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress", "__ZN17EthernetInterface8set_dhcpEb", "__ZN16NetworkInterface12set_blockingEb", "__ZN17EthernetInterface12socket_closeEPv", "__ZN12NetworkStack26gethostbyname_async_cancelEi", "__ZN12NetworkStack14add_dns_serverERK13SocketAddress", "__ZThn4_N17EthernetInterface12socket_closeEPv", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiii = ["0", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZN17EthernetInterface13socket_listenEPvi", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack14get_dns_serverEiP13SocketAddress", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol", "__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress", "__ZThn4_N17EthernetInterface13socket_listenEPvi", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_", "___stdio_write", "___stdio_seek", "___stdout_write", "_sn_write", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv", "_do_read", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"];
var debug_table_iiiii = ["0", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZN17EthernetInterface11set_networkEPKcS1_S1_", "__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZN17EthernetInterface11socket_sendEPvPKvj", "__ZN17EthernetInterface11socket_recvEPvS0_j", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version", "__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j", "0", "0", "0", "0"];
var debug_table_iiiiii = ["0", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "__ZN12NetworkStack11setstackoptEiiPKvj", "__ZN12NetworkStack11getstackoptEiiPvPj", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j", "0"];
var debug_table_iiiiiii = ["0", "__ZN12NetworkStack10setsockoptEPviiPKvj", "__ZN12NetworkStack10getsockoptEPviiS0_Pj", "0"];
var debug_table_v = ["0", "___cxa_pure_virtual", "__ZL25default_terminate_handlerv", "__ZL29nsapi_dns_query_async_timeoutv", "__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev", "0", "0", "0"];
var debug_table_vi = ["0", "__ZN17EthernetInterfaceD2Ev", "__ZN17EthernetInterfaceD0Ev", "__ZThn4_N17EthernetInterfaceD1Ev", "__ZThn4_N17EthernetInterfaceD0Ev", "_mbed_trace_default_print", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv", "__ZN6SocketD2Ev", "__ZN6SocketD0Ev", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv", "__ZN9TCPSocketD2Ev", "__ZN9TCPSocketD0Ev", "__ZN9TCPSocket5eventEv", "__ZN9UDPSocketD2Ev", "__ZN9UDPSocketD0Ev", "__ZN9UDPSocket5eventEv", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv", "__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv", "__ZN10__cxxabiv116__shim_type_infoD2Ev", "__ZN10__cxxabiv117__class_type_infoD0Ev", "__ZNK10__cxxabiv116__shim_type_info5noop1Ev", "__ZNK10__cxxabiv116__shim_type_info5noop2Ev", "__ZN10__cxxabiv120__si_class_type_infoD0Ev", "__ZN10__cxxabiv121__vmi_class_type_infoD0Ev", "__ZN17EthernetInterface15get_mac_addressEv__async_cb", "__ZN17EthernetInterface14get_ip_addressEv__async_cb", "__ZN17EthernetInterface11get_netmaskEv__async_cb", "__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb", "__ZN17EthernetInterface8set_dhcpEb__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_210", "__ZN17EthernetInterface12socket_closeEPv__async_cb", "__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_85", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_86", "__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_84", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_94", "__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb", "__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_217", "__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb", "__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb", "__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb", "__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_97", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_98", "__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_96", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb", "__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_93", "_equeue_alloc__async_cb", "_equeue_post__async_cb", "_equeue_enqueue__async_cb", "_mbed_trace_default_print__async_cb", "_mbed_tracef__async_cb", "_mbed_vtracef__async_cb", "_mbed_vtracef__async_cb_138", "_mbed_vtracef__async_cb_128", "_mbed_vtracef__async_cb_129", "_mbed_vtracef__async_cb_130", "_mbed_vtracef__async_cb_137", "_mbed_vtracef__async_cb_131", "_mbed_vtracef__async_cb_136", "_mbed_vtracef__async_cb_132", "_mbed_vtracef__async_cb_133", "_mbed_vtracef__async_cb_134", "_mbed_vtracef__async_cb_135", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_99", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_28", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_36", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_37", "__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_38", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb", "__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_46", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb", "__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_69", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb", "__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_188", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_153", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_145", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_146", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_147", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_148", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_152", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_149", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_150", "__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_151", "__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_9", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_1", "__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv", "__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_7", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_2", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_3", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_8", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_4", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_6", "__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_5", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_48", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_49", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_50", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_51", "__ZN6SocketD2Ev__async_cb", "__ZN6SocketD2Ev__async_cb_207", "__ZN6Socket4openEP12NetworkStack__async_cb", "__ZN6Socket4openEP12NetworkStack__async_cb_140", "__ZN6Socket4openEP12NetworkStack__async_cb_141", "__ZN6Socket4openEP12NetworkStack__async_cb_142", "__ZN6Socket4openEP12NetworkStack__async_cb_143", "__ZN4mbed8CallbackIFvvEE5thunkEPv", "__ZN6Socket4openEP12NetworkStack__async_cb_144", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_127", "__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb", "__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb", "__ZN6Socket5closeEv__async_cb", "__ZN6Socket5closeEv__async_cb_107", "__ZN6Socket5closeEv__async_cb_108", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb", "__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_95", "__ZN9TCPSocketD2Ev__async_cb_165", "__ZN9TCPSocketD2Ev__async_cb", "__ZN9TCPSocketD2Ev__async_cb_164", "__ZN9TCPSocketD0Ev__async_cb", "__ZN9TCPSocket5eventEv__async_cb", "__ZN9TCPSocket7connectEPKct__async_cb", "__ZN9TCPSocket7connectEPKct__async_cb_92", "__ZN9TCPSocket7connectEPKct__async_cb_91", "__ZN9TCPSocket4sendEPKvj__async_cb_39", "__ZN9TCPSocket4sendEPKvj__async_cb", "__ZN9TCPSocket4recvEPvj__async_cb_47", "__ZN9TCPSocket4recvEPvj__async_cb", "__ZN9UDPSocketD2Ev__async_cb_11", "__ZN9UDPSocketD2Ev__async_cb", "__ZN9UDPSocketD2Ev__async_cb_10", "__ZN9UDPSocketD0Ev__async_cb", "__ZN9UDPSocket5eventEv__async_cb", "__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb", "__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_115", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_112", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_111", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_110", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_114", "__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_113", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb", "__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_106", "__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_90", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_88", "__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_89", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_83", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_79", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_80", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_70", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_71", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_72", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_73", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_74", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_82", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_75", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_76", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_77", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_78", "__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_81", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_20", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_21", "__ZL29nsapi_dns_query_async_timeoutv__async_cb", "__ZL30nsapi_dns_query_async_responsePv", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_24", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_12", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_13", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_14", "__ZL26nsapi_dns_query_async_sendPv", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_23", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_15", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_16", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_17", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_22", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_18", "__ZL29nsapi_dns_query_async_timeoutv__async_cb_19", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_35", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_31", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_32", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_34", "__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_33", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb", "__ZL28nsapi_dns_query_async_createPv", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_213", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_211", "__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_212", "__ZL28nsapi_dns_query_async_createPv__async_cb_199", "__ZL28nsapi_dns_query_async_createPv__async_cb_206", "__ZL28nsapi_dns_query_async_createPv__async_cb", "__ZL28nsapi_dns_query_async_createPv__async_cb_202", "__ZL28nsapi_dns_query_async_createPv__async_cb_204", "__ZL28nsapi_dns_query_async_createPv__async_cb_189", "__ZL28nsapi_dns_query_async_createPv__async_cb_190", "__ZL28nsapi_dns_query_async_createPv__async_cb_191", "__ZL28nsapi_dns_query_async_createPv__async_cb_192", "__ZL28nsapi_dns_query_async_createPv__async_cb_201", "__ZL28nsapi_dns_query_async_createPv__async_cb_203", "__ZL28nsapi_dns_query_async_createPv__async_cb_193", "__ZL28nsapi_dns_query_async_createPv__async_cb_194", "__ZL28nsapi_dns_query_async_createPv__async_cb_198", "__ZL28nsapi_dns_query_async_createPv__async_cb_195", "__ZL28nsapi_dns_query_async_createPv__async_cb_196", "__ZL37nsapi_dns_query_async_socket_callbackPv", "__ZL28nsapi_dns_query_async_createPv__async_cb_205", "__ZL28nsapi_dns_query_async_createPv__async_cb_197", "__ZL28nsapi_dns_query_async_createPv__async_cb_200", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_161", "__ZL28nsapi_dns_query_async_deletei__async_cb", "__ZL28nsapi_dns_query_async_deletei__async_cb_158", "__ZL28nsapi_dns_query_async_deletei__async_cb_159", "__ZL28nsapi_dns_query_async_deletei__async_cb_160", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_156", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_154", "__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_155", "__ZL26nsapi_dns_query_async_sendPv__async_cb", "__ZL26nsapi_dns_query_async_sendPv__async_cb_123", "__ZL26nsapi_dns_query_async_sendPv__async_cb_125", "__ZL26nsapi_dns_query_async_sendPv__async_cb_116", "__ZL26nsapi_dns_query_async_sendPv__async_cb_117", "__ZL26nsapi_dns_query_async_sendPv__async_cb_118", "__ZL26nsapi_dns_query_async_sendPv__async_cb_119", "__ZL26nsapi_dns_query_async_sendPv__async_cb_122", "__ZL26nsapi_dns_query_async_sendPv__async_cb_124", "__ZL26nsapi_dns_query_async_sendPv__async_cb_120", "__ZL26nsapi_dns_query_async_sendPv__async_cb_121", "__ZL26nsapi_dns_query_async_sendPv__async_cb_126", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_105", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_104", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_102", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_103", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_100", "__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_101", "__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_66", "__ZL30nsapi_dns_query_async_responsePv__async_cb_65", "__ZL30nsapi_dns_query_async_responsePv__async_cb", "__ZL30nsapi_dns_query_async_responsePv__async_cb_67", "__ZL30nsapi_dns_query_async_responsePv__async_cb_68", "__ZL30nsapi_dns_query_async_responsePv__async_cb_63", "__ZL30nsapi_dns_query_async_responsePv__async_cb_64", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_45", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_41", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_42", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_43", "__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_44", "__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb", "__Z28nsapi_dns_query_async_canceli__async_cb_26", "__Z28nsapi_dns_query_async_canceli__async_cb_27", "_mbed_assert_internal__async_cb", "_mbed_die__async_cb_187", "_mbed_die__async_cb_186", "_mbed_die__async_cb_185", "_mbed_die__async_cb_184", "_mbed_die__async_cb_183", "_mbed_die__async_cb_182", "_mbed_die__async_cb_181", "_mbed_die__async_cb_180", "_mbed_die__async_cb_179", "_mbed_die__async_cb_178", "_mbed_die__async_cb_177", "_mbed_die__async_cb_176", "_mbed_die__async_cb_175", "_mbed_die__async_cb_174", "_mbed_die__async_cb_173", "_mbed_die__async_cb", "_mbed_error_printf__async_cb", "_mbed_error_vfprintf__async_cb", "_mbed_error_vfprintf__async_cb_167", "_mbed_error_vfprintf__async_cb_166", "_serial_putc__async_cb_157", "_serial_putc__async_cb", "_invoke_ticker__async_cb_139", "_invoke_ticker__async_cb", "_wait_ms__async_cb", "_main__async_cb_54", "_main__async_cb_62", "_main__async_cb_61", "_main__async_cb", "_main__async_cb_60", "_main__async_cb_57", "_main__async_cb_52", "_main__async_cb_56", "_main__async_cb_55", "_main__async_cb_59", "_main__async_cb_53", "_main__async_cb_58", "_putc__async_cb_40", "_putc__async_cb", "___overflow__async_cb", "_fflush__async_cb_215", "_fflush__async_cb_214", "_fflush__async_cb_216", "_fflush__async_cb", "___fflush_unlocked__async_cb", "___fflush_unlocked__async_cb_29", "_vfprintf__async_cb", "_snprintf__async_cb", "_vsnprintf__async_cb", "_sprintf__async_cb", "_vsprintf__async_cb", "_printf__async_cb", "_fputc__async_cb_30", "_fputc__async_cb", "_puts__async_cb", "__Znwj__async_cb", "__ZnwjRKSt9nothrow_t__async_cb", "__Znaj__async_cb", "__ZnajRKSt9nothrow_t__async_cb", "__ZL25default_terminate_handlerv__async_cb", "__ZL25default_terminate_handlerv__async_cb_218", "_abort_message__async_cb", "_abort_message__async_cb_163", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_25", "__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb", "___dynamic_cast__async_cb", "___dynamic_cast__async_cb_209", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_162", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv", "__ZSt11__terminatePFvvE__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_168", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_172", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_171", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_170", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_169", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_208", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb", "__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb", "___cxa_can_catch__async_cb", "___cxa_is_pointer_type__async_cb
var debug_table_vii = ["0", "__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE", "__ZN12NetworkStack20get_call_in_callbackEv", "__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv", "__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv"];
var debug_table_viii = ["0"];
var debug_table_viiii = ["0", "__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_", "__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi", "0", "0"];
var debug_table_viiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib"];
var debug_table_viiiiii = ["0", "__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib", "__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib"];
function nullFunc_i(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: i: " + debug_table_i[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  i: " + debug_table_i[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  v: " + debug_table_v[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  "); abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  i: " + debug_table_i[x] + "  viiii: " + debug_table_viiii[x] + "  viii: " + debug_table_viii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  "); abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: v: " + debug_table_v[x] + "  vii: " + debug_table_vii[x] + "  viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  i: " + debug_table_i[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vi: " + debug_table_vi[x] + "  viii: " + debug_table_viii[x] + "  v: " + debug_table_v[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  ii: " + debug_table_ii[x] + "  iii: " + debug_table_iii[x] + "  i: " + debug_table_i[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiii: " + debug_table_viiii[x] + "  v: " + debug_table_v[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  i: " + debug_table_i[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiii: " + debug_table_viiiii[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  i: " + debug_table_i[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  "); abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  viiiiii: " + debug_table_viiiiii[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer '" + x + "' called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("This pointer might make sense in another type signature: viii: " + debug_table_viii[x] + "  viiii: " + debug_table_viiii[x] + "  viiiii: " + debug_table_viiiii[x] + "  vii: " + debug_table_vii[x] + "  vi: " + debug_table_vi[x] + "  v: " + debug_table_v[x] + "  iiii: " + debug_table_iiii[x] + "  iiiii: " + debug_table_iiiii[x] + "  iiiiii: " + debug_table_iiiiii[x] + "  iii: " + debug_table_iii[x] + "  ii: " + debug_table_ii[x] + "  iiiiiii: " + debug_table_iiiiiii[x] + "  i: " + debug_table_i[x] + "  "); abort(x) }

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_i": nullFunc_i, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_v": nullFunc_v, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "invoke_i": invoke_i, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiii": invoke_iiiiii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_v": invoke_v, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "invoke_viiiii": invoke_viiiii, "invoke_viiiiii": invoke_viiiiii, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "___cxa_begin_catch": ___cxa_begin_catch, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___cxa_pure_virtual": ___cxa_pure_virtual, "___gxx_personality_v0": ___gxx_personality_v0, "___lock": ___lock, "___resumeException": ___resumeException, "___setErrNo": ___setErrNo, "___syscall140": ___syscall140, "___syscall146": ___syscall146, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "_abort": _abort, "_emscripten_asm_const_i": _emscripten_asm_const_i, "_emscripten_asm_const_ii": _emscripten_asm_const_ii, "_emscripten_asm_const_iii": _emscripten_asm_const_iii, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "_emscripten_get_now": _emscripten_get_now, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_emscripten_sleep": _emscripten_sleep, "_gettimeofday": _gettimeofday, "_llvm_trap": _llvm_trap, "_pthread_cond_init": _pthread_cond_init, "_pthread_cond_signal": _pthread_cond_signal, "_pthread_getspecific": _pthread_getspecific, "_pthread_key_create": _pthread_key_create, "_pthread_mutex_init": _pthread_mutex_init, "_pthread_once": _pthread_once, "_pthread_setspecific": _pthread_setspecific, "flush_NO_FILESYSTEM": flush_NO_FILESYSTEM, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "cttz_i8": cttz_i8, "___async": ___async, "___async_unwind": ___async_unwind, "___async_retval": ___async_retval, "___async_cur_frame": ___async_cur_frame };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'use asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var cttz_i8=env.cttz_i8|0;
  var ___async=env.___async|0;
  var ___async_unwind=env.___async_unwind|0;
  var ___async_retval=env.___async_retval|0;
  var ___async_cur_frame=env.___async_cur_frame|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var invoke_i=env.invoke_i;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_v=env.invoke_v;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___cxa_pure_virtual=env.___cxa_pure_virtual;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___lock=env.___lock;
  var ___resumeException=env.___resumeException;
  var ___setErrNo=env.___setErrNo;
  var ___syscall140=env.___syscall140;
  var ___syscall146=env.___syscall146;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var _abort=env._abort;
  var _emscripten_asm_const_i=env._emscripten_asm_const_i;
  var _emscripten_asm_const_ii=env._emscripten_asm_const_ii;
  var _emscripten_asm_const_iii=env._emscripten_asm_const_iii;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var _emscripten_get_now=env._emscripten_get_now;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _emscripten_sleep=env._emscripten_sleep;
  var _gettimeofday=env._gettimeofday;
  var _llvm_trap=env._llvm_trap;
  var _pthread_cond_init=env._pthread_cond_init;
  var _pthread_cond_signal=env._pthread_cond_signal;
  var _pthread_getspecific=env._pthread_getspecific;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_mutex_init=env._pthread_mutex_init;
  var _pthread_once=env._pthread_once;
  var _pthread_setspecific=env._pthread_setspecific;
  var flush_NO_FILESYSTEM=env.flush_NO_FILESYSTEM;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS
function _malloc($0) {
 $0 = $0 | 0;
 var $$$0192$i = 0, $$$0193$i = 0, $$$4351$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0189$i = 0, $$0192$lcssa$i = 0, $$01926$i = 0, $$0193$lcssa$i = 0, $$01935$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0, $$024367$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0289$i$i = 0, $$0295$i$i = 0, $$0296$i$i = 0, $$0342$i = 0, $$0344$i = 0, $$0345$i = 0, $$0347$i = 0, $$0353$i = 0, $$0358$i = 0, $$0359$i = 0, $$0361$i = 0, $$0362$i = 0, $$0368$i = 0, $$1196$i = 0, $$1198$i = 0, $$124466$i = 0, $$1291$i$i = 0, $$1293$i$i = 0, $$1343$i = 0, $$1348$i = 0, $$1363$i = 0, $$1370$i = 0, $$1374$i = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2355$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i203 = 0, $$3350$i = 0, $$3372$i = 0, $$4$lcssa$i = 0, $$4$ph$i = 0, $$414$i = 0, $$4236$i = 0, $$4351$lcssa$i = 0, $$435113$i = 0, $$4357$$4$i = 0, $$4357$ph$i = 0, $$435712$i = 0, $$723947$i = 0, $$748$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i19$iZ2D = 0, $$pre$phi$i211Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi11$i$iZ2D = 0, $$pre$phiZ2D = 0, $1 = 0, $1004 = 0, $101 = 0, $1010 = 0, $1013 = 0, $1014 = 0, $102 = 0, $1032 = 0, $1034 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1052 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $108 = 0, $112 = 0, $114 = 0, $115 = 0, $117 = 0, $119 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $129 = 0, $134 = 0, $138 = 0, $14 = 0, $143 = 0, $146 = 0, $149 = 0, $150 = 0, $157 = 0, $159 = 0, $16 = 0, $162 = 0, $164 = 0, $167 = 0, $169 = 0, $17 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $204 = 0, $208 = 0, $214 = 0, $221 = 0, $225 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $242 = 0, $243 = 0, $251 = 0, $252 = 0, $253 = 0, $255 = 0, $256 = 0, $261 = 0, $262 = 0, $265 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $282 = 0, $292 = 0, $296 = 0, $30 = 0, $302 = 0, $306 = 0, $309 = 0, $313 = 0, $315 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $326 = 0, $328 = 0, $330 = 0, $34 = 0, $340 = 0, $341 = 0, $352 = 0, $354 = 0, $357 = 0, $359 = 0, $362 = 0, $364 = 0, $367 = 0, $37 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $376 = 0, $377 = 0, $379 = 0, $380 = 0, $385 = 0, $386 = 0, $391 = 0, $399 = 0, $403 = 0, $409 = 0, $41 = 0, $416 = 0, $420 = 0, $428 = 0, $431 = 0, $432 = 0, $433 = 0, $437 = 0, $438 = 0, $44 = 0, $444 = 0, $449 = 0, $450 = 0, $453 = 0, $455 = 0, $458 = 0, $463 = 0, $469 = 0, $47 = 0, $471 = 0, $473 = 0, $475 = 0, $49 = 0, $492 = 0, $494 = 0, $50 = 0, $501 = 0, $502 = 0, $503 = 0, $512 = 0, $514 = 0, $515 = 0, $517 = 0, $52 = 0, $526 = 0, $530 = 0, $532 = 0, $533 = 0, $534 = 0, $54 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $56 = 0, $561 = 0, $563 = 0, $565 = 0, $570 = 0, $572 = 0, $574 = 0, $575 = 0, $576 = 0, $58 = 0, $584 = 0, $585 = 0, $588 = 0, $592 = 0, $595 = 0, $597 = 0, $6 = 0, $60 = 0, $603 = 0, $607 = 0, $611 = 0, $62 = 0, $620 = 0, $621 = 0, $627 = 0, $629 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $644 = 0, $649 = 0, $650 = 0, $651 = 0, $657 = 0, $658 = 0, $659 = 0, $663 = 0, $67 = 0, $673 = 0, $675 = 0, $680 = 0, $681 = 0, $682 = 0, $688 = 0, $69 = 0, $690 = 0, $694 = 0, $7 = 0, $70 = 0, $700 = 0, $704 = 0, $71 = 0, $710 = 0, $712 = 0, $718 = 0, $72 = 0, $722 = 0, $723 = 0, $728 = 0, $73 = 0, $734 = 0, $739 = 0, $742 = 0, $743 = 0, $746 = 0, $748 = 0, $750 = 0, $753 = 0, $764 = 0, $769 = 0, $77 = 0, $771 = 0, $774 = 0, $776 = 0, $779 = 0, $782 = 0, $783 = 0, $784 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $797 = 0, $798 = 0, $8 = 0, $80 = 0, $812 = 0, $815 = 0, $816 = 0, $822 = 0, $83 = 0, $830 = 0, $836 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $845 = 0, $846 = 0, $852 = 0, $857 = 0, $858 = 0, $861 = 0, $863 = 0, $866 = 0, $87 = 0, $871 = 0, $877 = 0, $879 = 0, $881 = 0, $882 = 0, $9 = 0, $900 = 0, $902 = 0, $909 = 0, $910 = 0, $911 = 0, $919 = 0, $92 = 0, $923 = 0, $927 = 0, $929 = 0, $93 = 0, $935 = 0, $936 = 0, $938 = 0, $939 = 0, $940 = 0, $941 = 0, $943 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $956 = 0, $958 = 0, $96 = 0, $964 = 0, $969 = 0, $972 = 0, $973 = 0, $974 = 0, $978 = 0, $979 = 0, $98 = 0, $985 = 0, $990 = 0, $991 = 0, $994 = 0, $996 = 0, $999 = 0, label = 0, sp = 0, $958$looptemp = 0;
 sp = STACKTOP; //@line 61
 STACKTOP = STACKTOP + 16 | 0; //@line 62
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 62
 $1 = sp; //@line 63
 do {
  if ($0 >>> 0 < 245) {
   $6 = $0 >>> 0 < 11 ? 16 : $0 + 11 & -8; //@line 70
   $7 = $6 >>> 3; //@line 71
   $8 = HEAP32[1957] | 0; //@line 72
   $9 = $8 >>> $7; //@line 73
   if ($9 & 3 | 0) {
    $14 = ($9 & 1 ^ 1) + $7 | 0; //@line 79
    $16 = 7868 + ($14 << 1 << 2) | 0; //@line 81
    $17 = $16 + 8 | 0; //@line 82
    $18 = HEAP32[$17 >> 2] | 0; //@line 83
    $19 = $18 + 8 | 0; //@line 84
    $20 = HEAP32[$19 >> 2] | 0; //@line 85
    do {
     if (($20 | 0) == ($16 | 0)) {
      HEAP32[1957] = $8 & ~(1 << $14); //@line 92
     } else {
      if ((HEAP32[1961] | 0) >>> 0 > $20 >>> 0) {
       _abort(); //@line 97
      }
      $27 = $20 + 12 | 0; //@line 100
      if ((HEAP32[$27 >> 2] | 0) == ($18 | 0)) {
       HEAP32[$27 >> 2] = $16; //@line 104
       HEAP32[$17 >> 2] = $20; //@line 105
       break;
      } else {
       _abort(); //@line 108
      }
     }
    } while (0);
    $30 = $14 << 3; //@line 113
    HEAP32[$18 + 4 >> 2] = $30 | 3; //@line 116
    $34 = $18 + $30 + 4 | 0; //@line 118
    HEAP32[$34 >> 2] = HEAP32[$34 >> 2] | 1; //@line 121
    $$0 = $19; //@line 122
    STACKTOP = sp; //@line 123
    return $$0 | 0; //@line 123
   }
   $37 = HEAP32[1959] | 0; //@line 125
   if ($6 >>> 0 > $37 >>> 0) {
    if ($9 | 0) {
     $41 = 2 << $7; //@line 131
     $44 = $9 << $7 & ($41 | 0 - $41); //@line 134
     $47 = ($44 & 0 - $44) + -1 | 0; //@line 137
     $49 = $47 >>> 12 & 16; //@line 139
     $50 = $47 >>> $49; //@line 140
     $52 = $50 >>> 5 & 8; //@line 142
     $54 = $50 >>> $52; //@line 144
     $56 = $54 >>> 2 & 4; //@line 146
     $58 = $54 >>> $56; //@line 148
     $60 = $58 >>> 1 & 2; //@line 150
     $62 = $58 >>> $60; //@line 152
     $64 = $62 >>> 1 & 1; //@line 154
     $67 = ($52 | $49 | $56 | $60 | $64) + ($62 >>> $64) | 0; //@line 157
     $69 = 7868 + ($67 << 1 << 2) | 0; //@line 159
     $70 = $69 + 8 | 0; //@line 160
     $71 = HEAP32[$70 >> 2] | 0; //@line 161
     $72 = $71 + 8 | 0; //@line 162
     $73 = HEAP32[$72 >> 2] | 0; //@line 163
     do {
      if (($73 | 0) == ($69 | 0)) {
       $77 = $8 & ~(1 << $67); //@line 169
       HEAP32[1957] = $77; //@line 170
       $98 = $77; //@line 171
      } else {
       if ((HEAP32[1961] | 0) >>> 0 > $73 >>> 0) {
        _abort(); //@line 176
       }
       $80 = $73 + 12 | 0; //@line 179
       if ((HEAP32[$80 >> 2] | 0) == ($71 | 0)) {
        HEAP32[$80 >> 2] = $69; //@line 183
        HEAP32[$70 >> 2] = $73; //@line 184
        $98 = $8; //@line 185
        break;
       } else {
        _abort(); //@line 188
       }
      }
     } while (0);
     $83 = $67 << 3; //@line 193
     $84 = $83 - $6 | 0; //@line 194
     HEAP32[$71 + 4 >> 2] = $6 | 3; //@line 197
     $87 = $71 + $6 | 0; //@line 198
     HEAP32[$87 + 4 >> 2] = $84 | 1; //@line 201
     HEAP32[$71 + $83 >> 2] = $84; //@line 203
     if ($37 | 0) {
      $92 = HEAP32[1962] | 0; //@line 206
      $93 = $37 >>> 3; //@line 207
      $95 = 7868 + ($93 << 1 << 2) | 0; //@line 209
      $96 = 1 << $93; //@line 210
      if (!($98 & $96)) {
       HEAP32[1957] = $98 | $96; //@line 215
       $$0199 = $95; //@line 217
       $$pre$phiZ2D = $95 + 8 | 0; //@line 217
      } else {
       $101 = $95 + 8 | 0; //@line 219
       $102 = HEAP32[$101 >> 2] | 0; //@line 220
       if ((HEAP32[1961] | 0) >>> 0 > $102 >>> 0) {
        _abort(); //@line 224
       } else {
        $$0199 = $102; //@line 227
        $$pre$phiZ2D = $101; //@line 227
       }
      }
      HEAP32[$$pre$phiZ2D >> 2] = $92; //@line 230
      HEAP32[$$0199 + 12 >> 2] = $92; //@line 232
      HEAP32[$92 + 8 >> 2] = $$0199; //@line 234
      HEAP32[$92 + 12 >> 2] = $95; //@line 236
     }
     HEAP32[1959] = $84; //@line 238
     HEAP32[1962] = $87; //@line 239
     $$0 = $72; //@line 240
     STACKTOP = sp; //@line 241
     return $$0 | 0; //@line 241
    }
    $108 = HEAP32[1958] | 0; //@line 243
    if (!$108) {
     $$0197 = $6; //@line 246
    } else {
     $112 = ($108 & 0 - $108) + -1 | 0; //@line 250
     $114 = $112 >>> 12 & 16; //@line 252
     $115 = $112 >>> $114; //@line 253
     $117 = $115 >>> 5 & 8; //@line 255
     $119 = $115 >>> $117; //@line 257
     $121 = $119 >>> 2 & 4; //@line 259
     $123 = $119 >>> $121; //@line 261
     $125 = $123 >>> 1 & 2; //@line 263
     $127 = $123 >>> $125; //@line 265
     $129 = $127 >>> 1 & 1; //@line 267
     $134 = HEAP32[8132 + (($117 | $114 | $121 | $125 | $129) + ($127 >>> $129) << 2) >> 2] | 0; //@line 272
     $138 = (HEAP32[$134 + 4 >> 2] & -8) - $6 | 0; //@line 276
     $143 = HEAP32[$134 + 16 + (((HEAP32[$134 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 282
     if (!$143) {
      $$0192$lcssa$i = $134; //@line 285
      $$0193$lcssa$i = $138; //@line 285
     } else {
      $$01926$i = $134; //@line 287
      $$01935$i = $138; //@line 287
      $146 = $143; //@line 287
      while (1) {
       $149 = (HEAP32[$146 + 4 >> 2] & -8) - $6 | 0; //@line 292
       $150 = $149 >>> 0 < $$01935$i >>> 0; //@line 293
       $$$0193$i = $150 ? $149 : $$01935$i; //@line 294
       $$$0192$i = $150 ? $146 : $$01926$i; //@line 295
       $146 = HEAP32[$146 + 16 + (((HEAP32[$146 + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 301
       if (!$146) {
        $$0192$lcssa$i = $$$0192$i; //@line 304
        $$0193$lcssa$i = $$$0193$i; //@line 304
        break;
       } else {
        $$01926$i = $$$0192$i; //@line 307
        $$01935$i = $$$0193$i; //@line 307
       }
      }
     }
     $157 = HEAP32[1961] | 0; //@line 311
     if ($157 >>> 0 > $$0192$lcssa$i >>> 0) {
      _abort(); //@line 314
     }
     $159 = $$0192$lcssa$i + $6 | 0; //@line 317
     if ($159 >>> 0 <= $$0192$lcssa$i >>> 0) {
      _abort(); //@line 320
     }
     $162 = HEAP32[$$0192$lcssa$i + 24 >> 2] | 0; //@line 324
     $164 = HEAP32[$$0192$lcssa$i + 12 >> 2] | 0; //@line 326
     do {
      if (($164 | 0) == ($$0192$lcssa$i | 0)) {
       $175 = $$0192$lcssa$i + 20 | 0; //@line 330
       $176 = HEAP32[$175 >> 2] | 0; //@line 331
       if (!$176) {
        $178 = $$0192$lcssa$i + 16 | 0; //@line 334
        $179 = HEAP32[$178 >> 2] | 0; //@line 335
        if (!$179) {
         $$3$i = 0; //@line 338
         break;
        } else {
         $$1196$i = $179; //@line 341
         $$1198$i = $178; //@line 341
        }
       } else {
        $$1196$i = $176; //@line 344
        $$1198$i = $175; //@line 344
       }
       while (1) {
        $181 = $$1196$i + 20 | 0; //@line 347
        $182 = HEAP32[$181 >> 2] | 0; //@line 348
        if ($182 | 0) {
         $$1196$i = $182; //@line 351
         $$1198$i = $181; //@line 351
         continue;
        }
        $184 = $$1196$i + 16 | 0; //@line 354
        $185 = HEAP32[$184 >> 2] | 0; //@line 355
        if (!$185) {
         break;
        } else {
         $$1196$i = $185; //@line 360
         $$1198$i = $184; //@line 360
        }
       }
       if ($157 >>> 0 > $$1198$i >>> 0) {
        _abort(); //@line 365
       } else {
        HEAP32[$$1198$i >> 2] = 0; //@line 368
        $$3$i = $$1196$i; //@line 369
        break;
       }
      } else {
       $167 = HEAP32[$$0192$lcssa$i + 8 >> 2] | 0; //@line 374
       if ($157 >>> 0 > $167 >>> 0) {
        _abort(); //@line 377
       }
       $169 = $167 + 12 | 0; //@line 380
       if ((HEAP32[$169 >> 2] | 0) != ($$0192$lcssa$i | 0)) {
        _abort(); //@line 384
       }
       $172 = $164 + 8 | 0; //@line 387
       if ((HEAP32[$172 >> 2] | 0) == ($$0192$lcssa$i | 0)) {
        HEAP32[$169 >> 2] = $164; //@line 391
        HEAP32[$172 >> 2] = $167; //@line 392
        $$3$i = $164; //@line 393
        break;
       } else {
        _abort(); //@line 396
       }
      }
     } while (0);
     L73 : do {
      if ($162 | 0) {
       $190 = HEAP32[$$0192$lcssa$i + 28 >> 2] | 0; //@line 405
       $191 = 8132 + ($190 << 2) | 0; //@line 406
       do {
        if (($$0192$lcssa$i | 0) == (HEAP32[$191 >> 2] | 0)) {
         HEAP32[$191 >> 2] = $$3$i; //@line 411
         if (!$$3$i) {
          HEAP32[1958] = $108 & ~(1 << $190); //@line 417
          break L73;
         }
        } else {
         if ((HEAP32[1961] | 0) >>> 0 > $162 >>> 0) {
          _abort(); //@line 424
         } else {
          HEAP32[$162 + 16 + (((HEAP32[$162 + 16 >> 2] | 0) != ($$0192$lcssa$i | 0) & 1) << 2) >> 2] = $$3$i; //@line 432
          if (!$$3$i) {
           break L73;
          } else {
           break;
          }
         }
        }
       } while (0);
       $204 = HEAP32[1961] | 0; //@line 442
       if ($204 >>> 0 > $$3$i >>> 0) {
        _abort(); //@line 445
       }
       HEAP32[$$3$i + 24 >> 2] = $162; //@line 449
       $208 = HEAP32[$$0192$lcssa$i + 16 >> 2] | 0; //@line 451
       do {
        if ($208 | 0) {
         if ($204 >>> 0 > $208 >>> 0) {
          _abort(); //@line 457
         } else {
          HEAP32[$$3$i + 16 >> 2] = $208; //@line 461
          HEAP32[$208 + 24 >> 2] = $$3$i; //@line 463
          break;
         }
        }
       } while (0);
       $214 = HEAP32[$$0192$lcssa$i + 20 >> 2] | 0; //@line 469
       if ($214 | 0) {
        if ((HEAP32[1961] | 0) >>> 0 > $214 >>> 0) {
         _abort(); //@line 475
        } else {
         HEAP32[$$3$i + 20 >> 2] = $214; //@line 479
         HEAP32[$214 + 24 >> 2] = $$3$i; //@line 481
         break;
        }
       }
      }
     } while (0);
     if ($$0193$lcssa$i >>> 0 < 16) {
      $221 = $$0193$lcssa$i + $6 | 0; //@line 489
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $221 | 3; //@line 492
      $225 = $$0192$lcssa$i + $221 + 4 | 0; //@line 494
      HEAP32[$225 >> 2] = HEAP32[$225 >> 2] | 1; //@line 497
     } else {
      HEAP32[$$0192$lcssa$i + 4 >> 2] = $6 | 3; //@line 501
      HEAP32[$159 + 4 >> 2] = $$0193$lcssa$i | 1; //@line 504
      HEAP32[$159 + $$0193$lcssa$i >> 2] = $$0193$lcssa$i; //@line 506
      if ($37 | 0) {
       $234 = HEAP32[1962] | 0; //@line 509
       $235 = $37 >>> 3; //@line 510
       $237 = 7868 + ($235 << 1 << 2) | 0; //@line 512
       $238 = 1 << $235; //@line 513
       if (!($8 & $238)) {
        HEAP32[1957] = $8 | $238; //@line 518
        $$0189$i = $237; //@line 520
        $$pre$phi$iZ2D = $237 + 8 | 0; //@line 520
       } else {
        $242 = $237 + 8 | 0; //@line 522
        $243 = HEAP32[$242 >> 2] | 0; //@line 523
        if ((HEAP32[1961] | 0) >>> 0 > $243 >>> 0) {
         _abort(); //@line 527
        } else {
         $$0189$i = $243; //@line 530
         $$pre$phi$iZ2D = $242; //@line 530
        }
       }
       HEAP32[$$pre$phi$iZ2D >> 2] = $234; //@line 533
       HEAP32[$$0189$i + 12 >> 2] = $234; //@line 535
       HEAP32[$234 + 8 >> 2] = $$0189$i; //@line 537
       HEAP32[$234 + 12 >> 2] = $237; //@line 539
      }
      HEAP32[1959] = $$0193$lcssa$i; //@line 541
      HEAP32[1962] = $159; //@line 542
     }
     $$0 = $$0192$lcssa$i + 8 | 0; //@line 545
     STACKTOP = sp; //@line 546
     return $$0 | 0; //@line 546
    }
   } else {
    $$0197 = $6; //@line 549
   }
  } else {
   if ($0 >>> 0 > 4294967231) {
    $$0197 = -1; //@line 554
   } else {
    $251 = $0 + 11 | 0; //@line 556
    $252 = $251 & -8; //@line 557
    $253 = HEAP32[1958] | 0; //@line 558
    if (!$253) {
     $$0197 = $252; //@line 561
    } else {
     $255 = 0 - $252 | 0; //@line 563
     $256 = $251 >>> 8; //@line 564
     if (!$256) {
      $$0358$i = 0; //@line 567
     } else {
      if ($252 >>> 0 > 16777215) {
       $$0358$i = 31; //@line 571
      } else {
       $261 = ($256 + 1048320 | 0) >>> 16 & 8; //@line 575
       $262 = $256 << $261; //@line 576
       $265 = ($262 + 520192 | 0) >>> 16 & 4; //@line 579
       $267 = $262 << $265; //@line 581
       $270 = ($267 + 245760 | 0) >>> 16 & 2; //@line 584
       $275 = 14 - ($265 | $261 | $270) + ($267 << $270 >>> 15) | 0; //@line 589
       $$0358$i = $252 >>> ($275 + 7 | 0) & 1 | $275 << 1; //@line 595
      }
     }
     $282 = HEAP32[8132 + ($$0358$i << 2) >> 2] | 0; //@line 599
     L117 : do {
      if (!$282) {
       $$2355$i = 0; //@line 603
       $$3$i203 = 0; //@line 603
       $$3350$i = $255; //@line 603
       label = 81; //@line 604
      } else {
       $$0342$i = 0; //@line 611
       $$0347$i = $255; //@line 611
       $$0353$i = $282; //@line 611
       $$0359$i = $252 << (($$0358$i | 0) == 31 ? 0 : 25 - ($$0358$i >>> 1) | 0); //@line 611
       $$0362$i = 0; //@line 611
       while (1) {
        $292 = (HEAP32[$$0353$i + 4 >> 2] & -8) - $252 | 0; //@line 616
        if ($292 >>> 0 < $$0347$i >>> 0) {
         if (!$292) {
          $$414$i = $$0353$i; //@line 621
          $$435113$i = 0; //@line 621
          $$435712$i = $$0353$i; //@line 621
          label = 85; //@line 622
          break L117;
         } else {
          $$1343$i = $$0353$i; //@line 625
          $$1348$i = $292; //@line 625
         }
        } else {
         $$1343$i = $$0342$i; //@line 628
         $$1348$i = $$0347$i; //@line 628
        }
        $296 = HEAP32[$$0353$i + 20 >> 2] | 0; //@line 631
        $$0353$i = HEAP32[$$0353$i + 16 + ($$0359$i >>> 31 << 2) >> 2] | 0; //@line 634
        $$1363$i = ($296 | 0) == 0 | ($296 | 0) == ($$0353$i | 0) ? $$0362$i : $296; //@line 638
        $302 = ($$0353$i | 0) == 0; //@line 639
        if ($302) {
         $$2355$i = $$1363$i; //@line 644
         $$3$i203 = $$1343$i; //@line 644
         $$3350$i = $$1348$i; //@line 644
         label = 81; //@line 645
         break;
        } else {
         $$0342$i = $$1343$i; //@line 648
         $$0347$i = $$1348$i; //@line 648
         $$0359$i = $$0359$i << (($302 ^ 1) & 1); //@line 648
         $$0362$i = $$1363$i; //@line 648
        }
       }
      }
     } while (0);
     if ((label | 0) == 81) {
      if (($$2355$i | 0) == 0 & ($$3$i203 | 0) == 0) {
       $306 = 2 << $$0358$i; //@line 658
       $309 = $253 & ($306 | 0 - $306); //@line 661
       if (!$309) {
        $$0197 = $252; //@line 664
        break;
       }
       $313 = ($309 & 0 - $309) + -1 | 0; //@line 669
       $315 = $313 >>> 12 & 16; //@line 671
       $316 = $313 >>> $315; //@line 672
       $318 = $316 >>> 5 & 8; //@line 674
       $320 = $316 >>> $318; //@line 676
       $322 = $320 >>> 2 & 4; //@line 678
       $324 = $320 >>> $322; //@line 680
       $326 = $324 >>> 1 & 2; //@line 682
       $328 = $324 >>> $326; //@line 684
       $330 = $328 >>> 1 & 1; //@line 686
       $$4$ph$i = 0; //@line 692
       $$4357$ph$i = HEAP32[8132 + (($318 | $315 | $322 | $326 | $330) + ($328 >>> $330) << 2) >> 2] | 0; //@line 692
      } else {
       $$4$ph$i = $$3$i203; //@line 694
       $$4357$ph$i = $$2355$i; //@line 694
      }
      if (!$$4357$ph$i) {
       $$4$lcssa$i = $$4$ph$i; //@line 698
       $$4351$lcssa$i = $$3350$i; //@line 698
      } else {
       $$414$i = $$4$ph$i; //@line 700
       $$435113$i = $$3350$i; //@line 700
       $$435712$i = $$4357$ph$i; //@line 700
       label = 85; //@line 701
      }
     }
     if ((label | 0) == 85) {
      while (1) {
       label = 0; //@line 706
       $340 = (HEAP32[$$435712$i + 4 >> 2] & -8) - $252 | 0; //@line 710
       $341 = $340 >>> 0 < $$435113$i >>> 0; //@line 711
       $$$4351$i = $341 ? $340 : $$435113$i; //@line 712
       $$4357$$4$i = $341 ? $$435712$i : $$414$i; //@line 713
       $$435712$i = HEAP32[$$435712$i + 16 + (((HEAP32[$$435712$i + 16 >> 2] | 0) == 0 & 1) << 2) >> 2] | 0; //@line 719
       if (!$$435712$i) {
        $$4$lcssa$i = $$4357$$4$i; //@line 722
        $$4351$lcssa$i = $$$4351$i; //@line 722
        break;
       } else {
        $$414$i = $$4357$$4$i; //@line 725
        $$435113$i = $$$4351$i; //@line 725
        label = 85; //@line 726
       }
      }
     }
     if (!$$4$lcssa$i) {
      $$0197 = $252; //@line 732
     } else {
      if ($$4351$lcssa$i >>> 0 < ((HEAP32[1959] | 0) - $252 | 0) >>> 0) {
       $352 = HEAP32[1961] | 0; //@line 738
       if ($352 >>> 0 > $$4$lcssa$i >>> 0) {
        _abort(); //@line 741
       }
       $354 = $$4$lcssa$i + $252 | 0; //@line 744
       if ($354 >>> 0 <= $$4$lcssa$i >>> 0) {
        _abort(); //@line 747
       }
       $357 = HEAP32[$$4$lcssa$i + 24 >> 2] | 0; //@line 751
       $359 = HEAP32[$$4$lcssa$i + 12 >> 2] | 0; //@line 753
       do {
        if (($359 | 0) == ($$4$lcssa$i | 0)) {
         $370 = $$4$lcssa$i + 20 | 0; //@line 757
         $371 = HEAP32[$370 >> 2] | 0; //@line 758
         if (!$371) {
          $373 = $$4$lcssa$i + 16 | 0; //@line 761
          $374 = HEAP32[$373 >> 2] | 0; //@line 762
          if (!$374) {
           $$3372$i = 0; //@line 765
           break;
          } else {
           $$1370$i = $374; //@line 768
           $$1374$i = $373; //@line 768
          }
         } else {
          $$1370$i = $371; //@line 771
          $$1374$i = $370; //@line 771
         }
         while (1) {
          $376 = $$1370$i + 20 | 0; //@line 774
          $377 = HEAP32[$376 >> 2] | 0; //@line 775
          if ($377 | 0) {
           $$1370$i = $377; //@line 778
           $$1374$i = $376; //@line 778
           continue;
          }
          $379 = $$1370$i + 16 | 0; //@line 781
          $380 = HEAP32[$379 >> 2] | 0; //@line 782
          if (!$380) {
           break;
          } else {
           $$1370$i = $380; //@line 787
           $$1374$i = $379; //@line 787
          }
         }
         if ($352 >>> 0 > $$1374$i >>> 0) {
          _abort(); //@line 792
         } else {
          HEAP32[$$1374$i >> 2] = 0; //@line 795
          $$3372$i = $$1370$i; //@line 796
          break;
         }
        } else {
         $362 = HEAP32[$$4$lcssa$i + 8 >> 2] | 0; //@line 801
         if ($352 >>> 0 > $362 >>> 0) {
          _abort(); //@line 804
         }
         $364 = $362 + 12 | 0; //@line 807
         if ((HEAP32[$364 >> 2] | 0) != ($$4$lcssa$i | 0)) {
          _abort(); //@line 811
         }
         $367 = $359 + 8 | 0; //@line 814
         if ((HEAP32[$367 >> 2] | 0) == ($$4$lcssa$i | 0)) {
          HEAP32[$364 >> 2] = $359; //@line 818
          HEAP32[$367 >> 2] = $362; //@line 819
          $$3372$i = $359; //@line 820
          break;
         } else {
          _abort(); //@line 823
         }
        }
       } while (0);
       L164 : do {
        if (!$357) {
         $475 = $253; //@line 831
        } else {
         $385 = HEAP32[$$4$lcssa$i + 28 >> 2] | 0; //@line 834
         $386 = 8132 + ($385 << 2) | 0; //@line 835
         do {
          if (($$4$lcssa$i | 0) == (HEAP32[$386 >> 2] | 0)) {
           HEAP32[$386 >> 2] = $$3372$i; //@line 840
           if (!$$3372$i) {
            $391 = $253 & ~(1 << $385); //@line 845
            HEAP32[1958] = $391; //@line 846
            $475 = $391; //@line 847
            break L164;
           }
          } else {
           if ((HEAP32[1961] | 0) >>> 0 > $357 >>> 0) {
            _abort(); //@line 854
           } else {
            HEAP32[$357 + 16 + (((HEAP32[$357 + 16 >> 2] | 0) != ($$4$lcssa$i | 0) & 1) << 2) >> 2] = $$3372$i; //@line 862
            if (!$$3372$i) {
             $475 = $253; //@line 865
             break L164;
            } else {
             break;
            }
           }
          }
         } while (0);
         $399 = HEAP32[1961] | 0; //@line 873
         if ($399 >>> 0 > $$3372$i >>> 0) {
          _abort(); //@line 876
         }
         HEAP32[$$3372$i + 24 >> 2] = $357; //@line 880
         $403 = HEAP32[$$4$lcssa$i + 16 >> 2] | 0; //@line 882
         do {
          if ($403 | 0) {
           if ($399 >>> 0 > $403 >>> 0) {
            _abort(); //@line 888
           } else {
            HEAP32[$$3372$i + 16 >> 2] = $403; //@line 892
            HEAP32[$403 + 24 >> 2] = $$3372$i; //@line 894
            break;
           }
          }
         } while (0);
         $409 = HEAP32[$$4$lcssa$i + 20 >> 2] | 0; //@line 900
         if (!$409) {
          $475 = $253; //@line 903
         } else {
          if ((HEAP32[1961] | 0) >>> 0 > $409 >>> 0) {
           _abort(); //@line 908
          } else {
           HEAP32[$$3372$i + 20 >> 2] = $409; //@line 912
           HEAP32[$409 + 24 >> 2] = $$3372$i; //@line 914
           $475 = $253; //@line 915
           break;
          }
         }
        }
       } while (0);
       do {
        if ($$4351$lcssa$i >>> 0 < 16) {
         $416 = $$4351$lcssa$i + $252 | 0; //@line 924
         HEAP32[$$4$lcssa$i + 4 >> 2] = $416 | 3; //@line 927
         $420 = $$4$lcssa$i + $416 + 4 | 0; //@line 929
         HEAP32[$420 >> 2] = HEAP32[$420 >> 2] | 1; //@line 932
        } else {
         HEAP32[$$4$lcssa$i + 4 >> 2] = $252 | 3; //@line 936
         HEAP32[$354 + 4 >> 2] = $$4351$lcssa$i | 1; //@line 939
         HEAP32[$354 + $$4351$lcssa$i >> 2] = $$4351$lcssa$i; //@line 941
         $428 = $$4351$lcssa$i >>> 3; //@line 942
         if ($$4351$lcssa$i >>> 0 < 256) {
          $431 = 7868 + ($428 << 1 << 2) | 0; //@line 946
          $432 = HEAP32[1957] | 0; //@line 947
          $433 = 1 << $428; //@line 948
          if (!($432 & $433)) {
           HEAP32[1957] = $432 | $433; //@line 953
           $$0368$i = $431; //@line 955
           $$pre$phi$i211Z2D = $431 + 8 | 0; //@line 955
          } else {
           $437 = $431 + 8 | 0; //@line 957
           $438 = HEAP32[$437 >> 2] | 0; //@line 958
           if ((HEAP32[1961] | 0) >>> 0 > $438 >>> 0) {
            _abort(); //@line 962
           } else {
            $$0368$i = $438; //@line 965
            $$pre$phi$i211Z2D = $437; //@line 965
           }
          }
          HEAP32[$$pre$phi$i211Z2D >> 2] = $354; //@line 968
          HEAP32[$$0368$i + 12 >> 2] = $354; //@line 970
          HEAP32[$354 + 8 >> 2] = $$0368$i; //@line 972
          HEAP32[$354 + 12 >> 2] = $431; //@line 974
          break;
         }
         $444 = $$4351$lcssa$i >>> 8; //@line 977
         if (!$444) {
          $$0361$i = 0; //@line 980
         } else {
          if ($$4351$lcssa$i >>> 0 > 16777215) {
           $$0361$i = 31; //@line 984
          } else {
           $449 = ($444 + 1048320 | 0) >>> 16 & 8; //@line 988
           $450 = $444 << $449; //@line 989
           $453 = ($450 + 520192 | 0) >>> 16 & 4; //@line 992
           $455 = $450 << $453; //@line 994
           $458 = ($455 + 245760 | 0) >>> 16 & 2; //@line 997
           $463 = 14 - ($453 | $449 | $458) + ($455 << $458 >>> 15) | 0; //@line 1002
           $$0361$i = $$4351$lcssa$i >>> ($463 + 7 | 0) & 1 | $463 << 1; //@line 1008
          }
         }
         $469 = 8132 + ($$0361$i << 2) | 0; //@line 1011
         HEAP32[$354 + 28 >> 2] = $$0361$i; //@line 1013
         $471 = $354 + 16 | 0; //@line 1014
         HEAP32[$471 + 4 >> 2] = 0; //@line 1016
         HEAP32[$471 >> 2] = 0; //@line 1017
         $473 = 1 << $$0361$i; //@line 1018
         if (!($475 & $473)) {
          HEAP32[1958] = $475 | $473; //@line 1023
          HEAP32[$469 >> 2] = $354; //@line 1024
          HEAP32[$354 + 24 >> 2] = $469; //@line 1026
          HEAP32[$354 + 12 >> 2] = $354; //@line 1028
          HEAP32[$354 + 8 >> 2] = $354; //@line 1030
          break;
         }
         $$0344$i = $$4351$lcssa$i << (($$0361$i | 0) == 31 ? 0 : 25 - ($$0361$i >>> 1) | 0); //@line 1039
         $$0345$i = HEAP32[$469 >> 2] | 0; //@line 1039
         while (1) {
          if ((HEAP32[$$0345$i + 4 >> 2] & -8 | 0) == ($$4351$lcssa$i | 0)) {
           label = 139; //@line 1046
           break;
          }
          $492 = $$0345$i + 16 + ($$0344$i >>> 31 << 2) | 0; //@line 1050
          $494 = HEAP32[$492 >> 2] | 0; //@line 1052
          if (!$494) {
           label = 136; //@line 1055
           break;
          } else {
           $$0344$i = $$0344$i << 1; //@line 1058
           $$0345$i = $494; //@line 1058
          }
         }
         if ((label | 0) == 136) {
          if ((HEAP32[1961] | 0) >>> 0 > $492 >>> 0) {
           _abort(); //@line 1065
          } else {
           HEAP32[$492 >> 2] = $354; //@line 1068
           HEAP32[$354 + 24 >> 2] = $$0345$i; //@line 1070
           HEAP32[$354 + 12 >> 2] = $354; //@line 1072
           HEAP32[$354 + 8 >> 2] = $354; //@line 1074
           break;
          }
         } else if ((label | 0) == 139) {
          $501 = $$0345$i + 8 | 0; //@line 1079
          $502 = HEAP32[$501 >> 2] | 0; //@line 1080
          $503 = HEAP32[1961] | 0; //@line 1081
          if ($503 >>> 0 <= $502 >>> 0 & $503 >>> 0 <= $$0345$i >>> 0) {
           HEAP32[$502 + 12 >> 2] = $354; //@line 1087
           HEAP32[$501 >> 2] = $354; //@line 1088
           HEAP32[$354 + 8 >> 2] = $502; //@line 1090
           HEAP32[$354 + 12 >> 2] = $$0345$i; //@line 1092
           HEAP32[$354 + 24 >> 2] = 0; //@line 1094
           break;
          } else {
           _abort(); //@line 1097
          }
         }
        }
       } while (0);
       $$0 = $$4$lcssa$i + 8 | 0; //@line 1104
       STACKTOP = sp; //@line 1105
       return $$0 | 0; //@line 1105
      } else {
       $$0197 = $252; //@line 1107
      }
     }
    }
   }
  }
 } while (0);
 $512 = HEAP32[1959] | 0; //@line 1114
 if ($512 >>> 0 >= $$0197 >>> 0) {
  $514 = $512 - $$0197 | 0; //@line 1117
  $515 = HEAP32[1962] | 0; //@line 1118
  if ($514 >>> 0 > 15) {
   $517 = $515 + $$0197 | 0; //@line 1121
   HEAP32[1962] = $517; //@line 1122
   HEAP32[1959] = $514; //@line 1123
   HEAP32[$517 + 4 >> 2] = $514 | 1; //@line 1126
   HEAP32[$515 + $512 >> 2] = $514; //@line 1128
   HEAP32[$515 + 4 >> 2] = $$0197 | 3; //@line 1131
  } else {
   HEAP32[1959] = 0; //@line 1133
   HEAP32[1962] = 0; //@line 1134
   HEAP32[$515 + 4 >> 2] = $512 | 3; //@line 1137
   $526 = $515 + $512 + 4 | 0; //@line 1139
   HEAP32[$526 >> 2] = HEAP32[$526 >> 2] | 1; //@line 1142
  }
  $$0 = $515 + 8 | 0; //@line 1145
  STACKTOP = sp; //@line 1146
  return $$0 | 0; //@line 1146
 }
 $530 = HEAP32[1960] | 0; //@line 1148
 if ($530 >>> 0 > $$0197 >>> 0) {
  $532 = $530 - $$0197 | 0; //@line 1151
  HEAP32[1960] = $532; //@line 1152
  $533 = HEAP32[1963] | 0; //@line 1153
  $534 = $533 + $$0197 | 0; //@line 1154
  HEAP32[1963] = $534; //@line 1155
  HEAP32[$534 + 4 >> 2] = $532 | 1; //@line 1158
  HEAP32[$533 + 4 >> 2] = $$0197 | 3; //@line 1161
  $$0 = $533 + 8 | 0; //@line 1163
  STACKTOP = sp; //@line 1164
  return $$0 | 0; //@line 1164
 }
 if (!(HEAP32[2075] | 0)) {
  HEAP32[2077] = 4096; //@line 1169
  HEAP32[2076] = 4096; //@line 1170
  HEAP32[2078] = -1; //@line 1171
  HEAP32[2079] = -1; //@line 1172
  HEAP32[2080] = 0; //@line 1173
  HEAP32[2068] = 0; //@line 1174
  HEAP32[2075] = $1 & -16 ^ 1431655768; //@line 1178
  $548 = 4096; //@line 1179
 } else {
  $548 = HEAP32[2077] | 0; //@line 1182
 }
 $545 = $$0197 + 48 | 0; //@line 1184
 $546 = $$0197 + 47 | 0; //@line 1185
 $547 = $548 + $546 | 0; //@line 1186
 $549 = 0 - $548 | 0; //@line 1187
 $550 = $547 & $549; //@line 1188
 if ($550 >>> 0 <= $$0197 >>> 0) {
  $$0 = 0; //@line 1191
  STACKTOP = sp; //@line 1192
  return $$0 | 0; //@line 1192
 }
 $552 = HEAP32[2067] | 0; //@line 1194
 if ($552 | 0) {
  $554 = HEAP32[2065] | 0; //@line 1197
  $555 = $554 + $550 | 0; //@line 1198
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $$0 = 0; //@line 1203
   STACKTOP = sp; //@line 1204
   return $$0 | 0; //@line 1204
  }
 }
 L244 : do {
  if (!(HEAP32[2068] & 4)) {
   $561 = HEAP32[1963] | 0; //@line 1212
   L246 : do {
    if (!$561) {
     label = 163; //@line 1216
    } else {
     $$0$i$i = 8276; //@line 1218
     while (1) {
      $563 = HEAP32[$$0$i$i >> 2] | 0; //@line 1220
      if ($563 >>> 0 <= $561 >>> 0) {
       $565 = $$0$i$i + 4 | 0; //@line 1223
       if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
        break;
       }
      }
      $570 = HEAP32[$$0$i$i + 8 >> 2] | 0; //@line 1232
      if (!$570) {
       label = 163; //@line 1235
       break L246;
      } else {
       $$0$i$i = $570; //@line 1238
      }
     }
     $595 = $547 - $530 & $549; //@line 1242
     if ($595 >>> 0 < 2147483647) {
      $597 = _sbrk($595 | 0) | 0; //@line 1245
      if (($597 | 0) == ((HEAP32[$$0$i$i >> 2] | 0) + (HEAP32[$565 >> 2] | 0) | 0)) {
       if (($597 | 0) == (-1 | 0)) {
        $$2234243136$i = $595; //@line 1253
       } else {
        $$723947$i = $595; //@line 1255
        $$748$i = $597; //@line 1255
        label = 180; //@line 1256
        break L244;
       }
      } else {
       $$2247$ph$i = $597; //@line 1260
       $$2253$ph$i = $595; //@line 1260
       label = 171; //@line 1261
      }
     } else {
      $$2234243136$i = 0; //@line 1264
     }
    }
   } while (0);
   do {
    if ((label | 0) == 163) {
     $572 = _sbrk(0) | 0; //@line 1270
     if (($572 | 0) == (-1 | 0)) {
      $$2234243136$i = 0; //@line 1273
     } else {
      $574 = $572; //@line 1275
      $575 = HEAP32[2076] | 0; //@line 1276
      $576 = $575 + -1 | 0; //@line 1277
      $$$i = (($576 & $574 | 0) == 0 ? 0 : ($576 + $574 & 0 - $575) - $574 | 0) + $550 | 0; //@line 1285
      $584 = HEAP32[2065] | 0; //@line 1286
      $585 = $$$i + $584 | 0; //@line 1287
      if ($$$i >>> 0 > $$0197 >>> 0 & $$$i >>> 0 < 2147483647) {
       $588 = HEAP32[2067] | 0; //@line 1292
       if ($588 | 0) {
        if ($585 >>> 0 <= $584 >>> 0 | $585 >>> 0 > $588 >>> 0) {
         $$2234243136$i = 0; //@line 1299
         break;
        }
       }
       $592 = _sbrk($$$i | 0) | 0; //@line 1303
       if (($592 | 0) == ($572 | 0)) {
        $$723947$i = $$$i; //@line 1306
        $$748$i = $572; //@line 1306
        label = 180; //@line 1307
        break L244;
       } else {
        $$2247$ph$i = $592; //@line 1310
        $$2253$ph$i = $$$i; //@line 1310
        label = 171; //@line 1311
       }
      } else {
       $$2234243136$i = 0; //@line 1314
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 171) {
     $603 = 0 - $$2253$ph$i | 0; //@line 1321
     if (!($545 >>> 0 > $$2253$ph$i >>> 0 & ($$2253$ph$i >>> 0 < 2147483647 & ($$2247$ph$i | 0) != (-1 | 0)))) {
      if (($$2247$ph$i | 0) == (-1 | 0)) {
       $$2234243136$i = 0; //@line 1330
       break;
      } else {
       $$723947$i = $$2253$ph$i; //@line 1333
       $$748$i = $$2247$ph$i; //@line 1333
       label = 180; //@line 1334
       break L244;
      }
     }
     $607 = HEAP32[2077] | 0; //@line 1338
     $611 = $546 - $$2253$ph$i + $607 & 0 - $607; //@line 1342
     if ($611 >>> 0 >= 2147483647) {
      $$723947$i = $$2253$ph$i; //@line 1345
      $$748$i = $$2247$ph$i; //@line 1345
      label = 180; //@line 1346
      break L244;
     }
     if ((_sbrk($611 | 0) | 0) == (-1 | 0)) {
      _sbrk($603 | 0) | 0; //@line 1352
      $$2234243136$i = 0; //@line 1353
      break;
     } else {
      $$723947$i = $611 + $$2253$ph$i | 0; //@line 1357
      $$748$i = $$2247$ph$i; //@line 1357
      label = 180; //@line 1358
      break L244;
     }
    }
   } while (0);
   HEAP32[2068] = HEAP32[2068] | 4; //@line 1365
   $$4236$i = $$2234243136$i; //@line 1366
   label = 178; //@line 1367
  } else {
   $$4236$i = 0; //@line 1369
   label = 178; //@line 1370
  }
 } while (0);
 if ((label | 0) == 178) {
  if ($550 >>> 0 < 2147483647) {
   $620 = _sbrk($550 | 0) | 0; //@line 1376
   $621 = _sbrk(0) | 0; //@line 1377
   $627 = $621 - $620 | 0; //@line 1385
   $629 = $627 >>> 0 > ($$0197 + 40 | 0) >>> 0; //@line 1387
   if (!(($620 | 0) == (-1 | 0) | $629 ^ 1 | $620 >>> 0 < $621 >>> 0 & (($620 | 0) != (-1 | 0) & ($621 | 0) != (-1 | 0)) ^ 1)) {
    $$723947$i = $629 ? $627 : $$4236$i; //@line 1395
    $$748$i = $620; //@line 1395
    label = 180; //@line 1396
   }
  }
 }
 if ((label | 0) == 180) {
  $633 = (HEAP32[2065] | 0) + $$723947$i | 0; //@line 1402
  HEAP32[2065] = $633; //@line 1403
  if ($633 >>> 0 > (HEAP32[2066] | 0) >>> 0) {
   HEAP32[2066] = $633; //@line 1407
  }
  $636 = HEAP32[1963] | 0; //@line 1409
  do {
   if (!$636) {
    $638 = HEAP32[1961] | 0; //@line 1413
    if (($638 | 0) == 0 | $$748$i >>> 0 < $638 >>> 0) {
     HEAP32[1961] = $$748$i; //@line 1418
    }
    HEAP32[2069] = $$748$i; //@line 1420
    HEAP32[2070] = $$723947$i; //@line 1421
    HEAP32[2072] = 0; //@line 1422
    HEAP32[1966] = HEAP32[2075]; //@line 1424
    HEAP32[1965] = -1; //@line 1425
    HEAP32[1970] = 7868; //@line 1426
    HEAP32[1969] = 7868; //@line 1427
    HEAP32[1972] = 7876; //@line 1428
    HEAP32[1971] = 7876; //@line 1429
    HEAP32[1974] = 7884; //@line 1430
    HEAP32[1973] = 7884; //@line 1431
    HEAP32[1976] = 7892; //@line 1432
    HEAP32[1975] = 7892; //@line 1433
    HEAP32[1978] = 7900; //@line 1434
    HEAP32[1977] = 7900; //@line 1435
    HEAP32[1980] = 7908; //@line 1436
    HEAP32[1979] = 7908; //@line 1437
    HEAP32[1982] = 7916; //@line 1438
    HEAP32[1981] = 7916; //@line 1439
    HEAP32[1984] = 7924; //@line 1440
    HEAP32[1983] = 7924; //@line 1441
    HEAP32[1986] = 7932; //@line 1442
    HEAP32[1985] = 7932; //@line 1443
    HEAP32[1988] = 7940; //@line 1444
    HEAP32[1987] = 7940; //@line 1445
    HEAP32[1990] = 7948; //@line 1446
    HEAP32[1989] = 7948; //@line 1447
    HEAP32[1992] = 7956; //@line 1448
    HEAP32[1991] = 7956; //@line 1449
    HEAP32[1994] = 7964; //@line 1450
    HEAP32[1993] = 7964; //@line 1451
    HEAP32[1996] = 7972; //@line 1452
    HEAP32[1995] = 7972; //@line 1453
    HEAP32[1998] = 7980; //@line 1454
    HEAP32[1997] = 7980; //@line 1455
    HEAP32[2e3] = 7988; //@line 1456
    HEAP32[1999] = 7988; //@line 1457
    HEAP32[2002] = 7996; //@line 1458
    HEAP32[2001] = 7996; //@line 1459
    HEAP32[2004] = 8004; //@line 1460
    HEAP32[2003] = 8004; //@line 1461
    HEAP32[2006] = 8012; //@line 1462
    HEAP32[2005] = 8012; //@line 1463
    HEAP32[2008] = 8020; //@line 1464
    HEAP32[2007] = 8020; //@line 1465
    HEAP32[2010] = 8028; //@line 1466
    HEAP32[2009] = 8028; //@line 1467
    HEAP32[2012] = 8036; //@line 1468
    HEAP32[2011] = 8036; //@line 1469
    HEAP32[2014] = 8044; //@line 1470
    HEAP32[2013] = 8044; //@line 1471
    HEAP32[2016] = 8052; //@line 1472
    HEAP32[2015] = 8052; //@line 1473
    HEAP32[2018] = 8060; //@line 1474
    HEAP32[2017] = 8060; //@line 1475
    HEAP32[2020] = 8068; //@line 1476
    HEAP32[2019] = 8068; //@line 1477
    HEAP32[2022] = 8076; //@line 1478
    HEAP32[2021] = 8076; //@line 1479
    HEAP32[2024] = 8084; //@line 1480
    HEAP32[2023] = 8084; //@line 1481
    HEAP32[2026] = 8092; //@line 1482
    HEAP32[2025] = 8092; //@line 1483
    HEAP32[2028] = 8100; //@line 1484
    HEAP32[2027] = 8100; //@line 1485
    HEAP32[2030] = 8108; //@line 1486
    HEAP32[2029] = 8108; //@line 1487
    HEAP32[2032] = 8116; //@line 1488
    HEAP32[2031] = 8116; //@line 1489
    $642 = $$723947$i + -40 | 0; //@line 1490
    $644 = $$748$i + 8 | 0; //@line 1492
    $649 = ($644 & 7 | 0) == 0 ? 0 : 0 - $644 & 7; //@line 1497
    $650 = $$748$i + $649 | 0; //@line 1498
    $651 = $642 - $649 | 0; //@line 1499
    HEAP32[1963] = $650; //@line 1500
    HEAP32[1960] = $651; //@line 1501
    HEAP32[$650 + 4 >> 2] = $651 | 1; //@line 1504
    HEAP32[$$748$i + $642 + 4 >> 2] = 40; //@line 1507
    HEAP32[1964] = HEAP32[2079]; //@line 1509
   } else {
    $$024367$i = 8276; //@line 1511
    while (1) {
     $657 = HEAP32[$$024367$i >> 2] | 0; //@line 1513
     $658 = $$024367$i + 4 | 0; //@line 1514
     $659 = HEAP32[$658 >> 2] | 0; //@line 1515
     if (($$748$i | 0) == ($657 + $659 | 0)) {
      label = 188; //@line 1519
      break;
     }
     $663 = HEAP32[$$024367$i + 8 >> 2] | 0; //@line 1523
     if (!$663) {
      break;
     } else {
      $$024367$i = $663; //@line 1528
     }
    }
    if ((label | 0) == 188) {
     if (!(HEAP32[$$024367$i + 12 >> 2] & 8)) {
      if ($$748$i >>> 0 > $636 >>> 0 & $657 >>> 0 <= $636 >>> 0) {
       HEAP32[$658 >> 2] = $659 + $$723947$i; //@line 1542
       $673 = (HEAP32[1960] | 0) + $$723947$i | 0; //@line 1544
       $675 = $636 + 8 | 0; //@line 1546
       $680 = ($675 & 7 | 0) == 0 ? 0 : 0 - $675 & 7; //@line 1551
       $681 = $636 + $680 | 0; //@line 1552
       $682 = $673 - $680 | 0; //@line 1553
       HEAP32[1963] = $681; //@line 1554
       HEAP32[1960] = $682; //@line 1555
       HEAP32[$681 + 4 >> 2] = $682 | 1; //@line 1558
       HEAP32[$636 + $673 + 4 >> 2] = 40; //@line 1561
       HEAP32[1964] = HEAP32[2079]; //@line 1563
       break;
      }
     }
    }
    $688 = HEAP32[1961] | 0; //@line 1568
    if ($$748$i >>> 0 < $688 >>> 0) {
     HEAP32[1961] = $$748$i; //@line 1571
     $753 = $$748$i; //@line 1572
    } else {
     $753 = $688; //@line 1574
    }
    $690 = $$748$i + $$723947$i | 0; //@line 1576
    $$124466$i = 8276; //@line 1577
    while (1) {
     if ((HEAP32[$$124466$i >> 2] | 0) == ($690 | 0)) {
      label = 196; //@line 1582
      break;
     }
     $694 = HEAP32[$$124466$i + 8 >> 2] | 0; //@line 1586
     if (!$694) {
      $$0$i$i$i = 8276; //@line 1589
      break;
     } else {
      $$124466$i = $694; //@line 1592
     }
    }
    if ((label | 0) == 196) {
     if (!(HEAP32[$$124466$i + 12 >> 2] & 8)) {
      HEAP32[$$124466$i >> 2] = $$748$i; //@line 1601
      $700 = $$124466$i + 4 | 0; //@line 1602
      HEAP32[$700 >> 2] = (HEAP32[$700 >> 2] | 0) + $$723947$i; //@line 1605
      $704 = $$748$i + 8 | 0; //@line 1607
      $710 = $$748$i + (($704 & 7 | 0) == 0 ? 0 : 0 - $704 & 7) | 0; //@line 1613
      $712 = $690 + 8 | 0; //@line 1615
      $718 = $690 + (($712 & 7 | 0) == 0 ? 0 : 0 - $712 & 7) | 0; //@line 1621
      $722 = $710 + $$0197 | 0; //@line 1625
      $723 = $718 - $710 - $$0197 | 0; //@line 1626
      HEAP32[$710 + 4 >> 2] = $$0197 | 3; //@line 1629
      do {
       if (($636 | 0) == ($718 | 0)) {
        $728 = (HEAP32[1960] | 0) + $723 | 0; //@line 1634
        HEAP32[1960] = $728; //@line 1635
        HEAP32[1963] = $722; //@line 1636
        HEAP32[$722 + 4 >> 2] = $728 | 1; //@line 1639
       } else {
        if ((HEAP32[1962] | 0) == ($718 | 0)) {
         $734 = (HEAP32[1959] | 0) + $723 | 0; //@line 1645
         HEAP32[1959] = $734; //@line 1646
         HEAP32[1962] = $722; //@line 1647
         HEAP32[$722 + 4 >> 2] = $734 | 1; //@line 1650
         HEAP32[$722 + $734 >> 2] = $734; //@line 1652
         break;
        }
        $739 = HEAP32[$718 + 4 >> 2] | 0; //@line 1656
        if (($739 & 3 | 0) == 1) {
         $742 = $739 & -8; //@line 1660
         $743 = $739 >>> 3; //@line 1661
         L311 : do {
          if ($739 >>> 0 < 256) {
           $746 = HEAP32[$718 + 8 >> 2] | 0; //@line 1666
           $748 = HEAP32[$718 + 12 >> 2] | 0; //@line 1668
           $750 = 7868 + ($743 << 1 << 2) | 0; //@line 1670
           do {
            if (($746 | 0) != ($750 | 0)) {
             if ($753 >>> 0 > $746 >>> 0) {
              _abort(); //@line 1676
             }
             if ((HEAP32[$746 + 12 >> 2] | 0) == ($718 | 0)) {
              break;
             }
             _abort(); //@line 1685
            }
           } while (0);
           if (($748 | 0) == ($746 | 0)) {
            HEAP32[1957] = HEAP32[1957] & ~(1 << $743); //@line 1695
            break;
           }
           do {
            if (($748 | 0) == ($750 | 0)) {
             $$pre$phi11$i$iZ2D = $748 + 8 | 0; //@line 1702
            } else {
             if ($753 >>> 0 > $748 >>> 0) {
              _abort(); //@line 1706
             }
             $764 = $748 + 8 | 0; //@line 1709
             if ((HEAP32[$764 >> 2] | 0) == ($718 | 0)) {
              $$pre$phi11$i$iZ2D = $764; //@line 1713
              break;
             }
             _abort(); //@line 1716
            }
           } while (0);
           HEAP32[$746 + 12 >> 2] = $748; //@line 1721
           HEAP32[$$pre$phi11$i$iZ2D >> 2] = $746; //@line 1722
          } else {
           $769 = HEAP32[$718 + 24 >> 2] | 0; //@line 1725
           $771 = HEAP32[$718 + 12 >> 2] | 0; //@line 1727
           do {
            if (($771 | 0) == ($718 | 0)) {
             $782 = $718 + 16 | 0; //@line 1731
             $783 = $782 + 4 | 0; //@line 1732
             $784 = HEAP32[$783 >> 2] | 0; //@line 1733
             if (!$784) {
              $786 = HEAP32[$782 >> 2] | 0; //@line 1736
              if (!$786) {
               $$3$i$i = 0; //@line 1739
               break;
              } else {
               $$1291$i$i = $786; //@line 1742
               $$1293$i$i = $782; //@line 1742
              }
             } else {
              $$1291$i$i = $784; //@line 1745
              $$1293$i$i = $783; //@line 1745
             }
             while (1) {
              $788 = $$1291$i$i + 20 | 0; //@line 1748
              $789 = HEAP32[$788 >> 2] | 0; //@line 1749
              if ($789 | 0) {
               $$1291$i$i = $789; //@line 1752
               $$1293$i$i = $788; //@line 1752
               continue;
              }
              $791 = $$1291$i$i + 16 | 0; //@line 1755
              $792 = HEAP32[$791 >> 2] | 0; //@line 1756
              if (!$792) {
               break;
              } else {
               $$1291$i$i = $792; //@line 1761
               $$1293$i$i = $791; //@line 1761
              }
             }
             if ($753 >>> 0 > $$1293$i$i >>> 0) {
              _abort(); //@line 1766
             } else {
              HEAP32[$$1293$i$i >> 2] = 0; //@line 1769
              $$3$i$i = $$1291$i$i; //@line 1770
              break;
             }
            } else {
             $774 = HEAP32[$718 + 8 >> 2] | 0; //@line 1775
             if ($753 >>> 0 > $774 >>> 0) {
              _abort(); //@line 1778
             }
             $776 = $774 + 12 | 0; //@line 1781
             if ((HEAP32[$776 >> 2] | 0) != ($718 | 0)) {
              _abort(); //@line 1785
             }
             $779 = $771 + 8 | 0; //@line 1788
             if ((HEAP32[$779 >> 2] | 0) == ($718 | 0)) {
              HEAP32[$776 >> 2] = $771; //@line 1792
              HEAP32[$779 >> 2] = $774; //@line 1793
              $$3$i$i = $771; //@line 1794
              break;
             } else {
              _abort(); //@line 1797
             }
            }
           } while (0);
           if (!$769) {
            break;
           }
           $797 = HEAP32[$718 + 28 >> 2] | 0; //@line 1807
           $798 = 8132 + ($797 << 2) | 0; //@line 1808
           do {
            if ((HEAP32[$798 >> 2] | 0) == ($718 | 0)) {
             HEAP32[$798 >> 2] = $$3$i$i; //@line 1813
             if ($$3$i$i | 0) {
              break;
             }
             HEAP32[1958] = HEAP32[1958] & ~(1 << $797); //@line 1822
             break L311;
            } else {
             if ((HEAP32[1961] | 0) >>> 0 > $769 >>> 0) {
              _abort(); //@line 1828
             } else {
              HEAP32[$769 + 16 + (((HEAP32[$769 + 16 >> 2] | 0) != ($718 | 0) & 1) << 2) >> 2] = $$3$i$i; //@line 1836
              if (!$$3$i$i) {
               break L311;
              } else {
               break;
              }
             }
            }
           } while (0);
           $812 = HEAP32[1961] | 0; //@line 1846
           if ($812 >>> 0 > $$3$i$i >>> 0) {
            _abort(); //@line 1849
           }
           HEAP32[$$3$i$i + 24 >> 2] = $769; //@line 1853
           $815 = $718 + 16 | 0; //@line 1854
           $816 = HEAP32[$815 >> 2] | 0; //@line 1855
           do {
            if ($816 | 0) {
             if ($812 >>> 0 > $816 >>> 0) {
              _abort(); //@line 1861
             } else {
              HEAP32[$$3$i$i + 16 >> 2] = $816; //@line 1865
              HEAP32[$816 + 24 >> 2] = $$3$i$i; //@line 1867
              break;
             }
            }
           } while (0);
           $822 = HEAP32[$815 + 4 >> 2] | 0; //@line 1873
           if (!$822) {
            break;
           }
           if ((HEAP32[1961] | 0) >>> 0 > $822 >>> 0) {
            _abort(); //@line 1881
           } else {
            HEAP32[$$3$i$i + 20 >> 2] = $822; //@line 1885
            HEAP32[$822 + 24 >> 2] = $$3$i$i; //@line 1887
            break;
           }
          }
         } while (0);
         $$0$i17$i = $718 + $742 | 0; //@line 1894
         $$0287$i$i = $742 + $723 | 0; //@line 1894
        } else {
         $$0$i17$i = $718; //@line 1896
         $$0287$i$i = $723; //@line 1896
        }
        $830 = $$0$i17$i + 4 | 0; //@line 1898
        HEAP32[$830 >> 2] = HEAP32[$830 >> 2] & -2; //@line 1901
        HEAP32[$722 + 4 >> 2] = $$0287$i$i | 1; //@line 1904
        HEAP32[$722 + $$0287$i$i >> 2] = $$0287$i$i; //@line 1906
        $836 = $$0287$i$i >>> 3; //@line 1907
        if ($$0287$i$i >>> 0 < 256) {
         $839 = 7868 + ($836 << 1 << 2) | 0; //@line 1911
         $840 = HEAP32[1957] | 0; //@line 1912
         $841 = 1 << $836; //@line 1913
         do {
          if (!($840 & $841)) {
           HEAP32[1957] = $840 | $841; //@line 1919
           $$0295$i$i = $839; //@line 1921
           $$pre$phi$i19$iZ2D = $839 + 8 | 0; //@line 1921
          } else {
           $845 = $839 + 8 | 0; //@line 1923
           $846 = HEAP32[$845 >> 2] | 0; //@line 1924
           if ((HEAP32[1961] | 0) >>> 0 <= $846 >>> 0) {
            $$0295$i$i = $846; //@line 1928
            $$pre$phi$i19$iZ2D = $845; //@line 1928
            break;
           }
           _abort(); //@line 1931
          }
         } while (0);
         HEAP32[$$pre$phi$i19$iZ2D >> 2] = $722; //@line 1935
         HEAP32[$$0295$i$i + 12 >> 2] = $722; //@line 1937
         HEAP32[$722 + 8 >> 2] = $$0295$i$i; //@line 1939
         HEAP32[$722 + 12 >> 2] = $839; //@line 1941
         break;
        }
        $852 = $$0287$i$i >>> 8; //@line 1944
        do {
         if (!$852) {
          $$0296$i$i = 0; //@line 1948
         } else {
          if ($$0287$i$i >>> 0 > 16777215) {
           $$0296$i$i = 31; //@line 1952
           break;
          }
          $857 = ($852 + 1048320 | 0) >>> 16 & 8; //@line 1957
          $858 = $852 << $857; //@line 1958
          $861 = ($858 + 520192 | 0) >>> 16 & 4; //@line 1961
          $863 = $858 << $861; //@line 1963
          $866 = ($863 + 245760 | 0) >>> 16 & 2; //@line 1966
          $871 = 14 - ($861 | $857 | $866) + ($863 << $866 >>> 15) | 0; //@line 1971
          $$0296$i$i = $$0287$i$i >>> ($871 + 7 | 0) & 1 | $871 << 1; //@line 1977
         }
        } while (0);
        $877 = 8132 + ($$0296$i$i << 2) | 0; //@line 1980
        HEAP32[$722 + 28 >> 2] = $$0296$i$i; //@line 1982
        $879 = $722 + 16 | 0; //@line 1983
        HEAP32[$879 + 4 >> 2] = 0; //@line 1985
        HEAP32[$879 >> 2] = 0; //@line 1986
        $881 = HEAP32[1958] | 0; //@line 1987
        $882 = 1 << $$0296$i$i; //@line 1988
        if (!($881 & $882)) {
         HEAP32[1958] = $881 | $882; //@line 1993
         HEAP32[$877 >> 2] = $722; //@line 1994
         HEAP32[$722 + 24 >> 2] = $877; //@line 1996
         HEAP32[$722 + 12 >> 2] = $722; //@line 1998
         HEAP32[$722 + 8 >> 2] = $722; //@line 2000
         break;
        }
        $$0288$i$i = $$0287$i$i << (($$0296$i$i | 0) == 31 ? 0 : 25 - ($$0296$i$i >>> 1) | 0); //@line 2009
        $$0289$i$i = HEAP32[$877 >> 2] | 0; //@line 2009
        while (1) {
         if ((HEAP32[$$0289$i$i + 4 >> 2] & -8 | 0) == ($$0287$i$i | 0)) {
          label = 263; //@line 2016
          break;
         }
         $900 = $$0289$i$i + 16 + ($$0288$i$i >>> 31 << 2) | 0; //@line 2020
         $902 = HEAP32[$900 >> 2] | 0; //@line 2022
         if (!$902) {
          label = 260; //@line 2025
          break;
         } else {
          $$0288$i$i = $$0288$i$i << 1; //@line 2028
          $$0289$i$i = $902; //@line 2028
         }
        }
        if ((label | 0) == 260) {
         if ((HEAP32[1961] | 0) >>> 0 > $900 >>> 0) {
          _abort(); //@line 2035
         } else {
          HEAP32[$900 >> 2] = $722; //@line 2038
          HEAP32[$722 + 24 >> 2] = $$0289$i$i; //@line 2040
          HEAP32[$722 + 12 >> 2] = $722; //@line 2042
          HEAP32[$722 + 8 >> 2] = $722; //@line 2044
          break;
         }
        } else if ((label | 0) == 263) {
         $909 = $$0289$i$i + 8 | 0; //@line 2049
         $910 = HEAP32[$909 >> 2] | 0; //@line 2050
         $911 = HEAP32[1961] | 0; //@line 2051
         if ($911 >>> 0 <= $910 >>> 0 & $911 >>> 0 <= $$0289$i$i >>> 0) {
          HEAP32[$910 + 12 >> 2] = $722; //@line 2057
          HEAP32[$909 >> 2] = $722; //@line 2058
          HEAP32[$722 + 8 >> 2] = $910; //@line 2060
          HEAP32[$722 + 12 >> 2] = $$0289$i$i; //@line 2062
          HEAP32[$722 + 24 >> 2] = 0; //@line 2064
          break;
         } else {
          _abort(); //@line 2067
         }
        }
       }
      } while (0);
      $$0 = $710 + 8 | 0; //@line 2074
      STACKTOP = sp; //@line 2075
      return $$0 | 0; //@line 2075
     } else {
      $$0$i$i$i = 8276; //@line 2077
     }
    }
    while (1) {
     $919 = HEAP32[$$0$i$i$i >> 2] | 0; //@line 2081
     if ($919 >>> 0 <= $636 >>> 0) {
      $923 = $919 + (HEAP32[$$0$i$i$i + 4 >> 2] | 0) | 0; //@line 2086
      if ($923 >>> 0 > $636 >>> 0) {
       break;
      }
     }
     $$0$i$i$i = HEAP32[$$0$i$i$i + 8 >> 2] | 0; //@line 2094
    }
    $927 = $923 + -47 | 0; //@line 2096
    $929 = $927 + 8 | 0; //@line 2098
    $935 = $927 + (($929 & 7 | 0) == 0 ? 0 : 0 - $929 & 7) | 0; //@line 2104
    $936 = $636 + 16 | 0; //@line 2105
    $938 = $935 >>> 0 < $936 >>> 0 ? $636 : $935; //@line 2107
    $939 = $938 + 8 | 0; //@line 2108
    $940 = $938 + 24 | 0; //@line 2109
    $941 = $$723947$i + -40 | 0; //@line 2110
    $943 = $$748$i + 8 | 0; //@line 2112
    $948 = ($943 & 7 | 0) == 0 ? 0 : 0 - $943 & 7; //@line 2117
    $949 = $$748$i + $948 | 0; //@line 2118
    $950 = $941 - $948 | 0; //@line 2119
    HEAP32[1963] = $949; //@line 2120
    HEAP32[1960] = $950; //@line 2121
    HEAP32[$949 + 4 >> 2] = $950 | 1; //@line 2124
    HEAP32[$$748$i + $941 + 4 >> 2] = 40; //@line 2127
    HEAP32[1964] = HEAP32[2079]; //@line 2129
    $956 = $938 + 4 | 0; //@line 2130
    HEAP32[$956 >> 2] = 27; //@line 2131
    HEAP32[$939 >> 2] = HEAP32[2069]; //@line 2132
    HEAP32[$939 + 4 >> 2] = HEAP32[2070]; //@line 2132
    HEAP32[$939 + 8 >> 2] = HEAP32[2071]; //@line 2132
    HEAP32[$939 + 12 >> 2] = HEAP32[2072]; //@line 2132
    HEAP32[2069] = $$748$i; //@line 2133
    HEAP32[2070] = $$723947$i; //@line 2134
    HEAP32[2072] = 0; //@line 2135
    HEAP32[2071] = $939; //@line 2136
    $958 = $940; //@line 2137
    do {
     $958$looptemp = $958;
     $958 = $958 + 4 | 0; //@line 2139
     HEAP32[$958 >> 2] = 7; //@line 2140
    } while (($958$looptemp + 8 | 0) >>> 0 < $923 >>> 0);
    if (($938 | 0) != ($636 | 0)) {
     $964 = $938 - $636 | 0; //@line 2153
     HEAP32[$956 >> 2] = HEAP32[$956 >> 2] & -2; //@line 2156
     HEAP32[$636 + 4 >> 2] = $964 | 1; //@line 2159
     HEAP32[$938 >> 2] = $964; //@line 2160
     $969 = $964 >>> 3; //@line 2161
     if ($964 >>> 0 < 256) {
      $972 = 7868 + ($969 << 1 << 2) | 0; //@line 2165
      $973 = HEAP32[1957] | 0; //@line 2166
      $974 = 1 << $969; //@line 2167
      if (!($973 & $974)) {
       HEAP32[1957] = $973 | $974; //@line 2172
       $$0211$i$i = $972; //@line 2174
       $$pre$phi$i$iZ2D = $972 + 8 | 0; //@line 2174
      } else {
       $978 = $972 + 8 | 0; //@line 2176
       $979 = HEAP32[$978 >> 2] | 0; //@line 2177
       if ((HEAP32[1961] | 0) >>> 0 > $979 >>> 0) {
        _abort(); //@line 2181
       } else {
        $$0211$i$i = $979; //@line 2184
        $$pre$phi$i$iZ2D = $978; //@line 2184
       }
      }
      HEAP32[$$pre$phi$i$iZ2D >> 2] = $636; //@line 2187
      HEAP32[$$0211$i$i + 12 >> 2] = $636; //@line 2189
      HEAP32[$636 + 8 >> 2] = $$0211$i$i; //@line 2191
      HEAP32[$636 + 12 >> 2] = $972; //@line 2193
      break;
     }
     $985 = $964 >>> 8; //@line 2196
     if (!$985) {
      $$0212$i$i = 0; //@line 2199
     } else {
      if ($964 >>> 0 > 16777215) {
       $$0212$i$i = 31; //@line 2203
      } else {
       $990 = ($985 + 1048320 | 0) >>> 16 & 8; //@line 2207
       $991 = $985 << $990; //@line 2208
       $994 = ($991 + 520192 | 0) >>> 16 & 4; //@line 2211
       $996 = $991 << $994; //@line 2213
       $999 = ($996 + 245760 | 0) >>> 16 & 2; //@line 2216
       $1004 = 14 - ($994 | $990 | $999) + ($996 << $999 >>> 15) | 0; //@line 2221
       $$0212$i$i = $964 >>> ($1004 + 7 | 0) & 1 | $1004 << 1; //@line 2227
      }
     }
     $1010 = 8132 + ($$0212$i$i << 2) | 0; //@line 2230
     HEAP32[$636 + 28 >> 2] = $$0212$i$i; //@line 2232
     HEAP32[$636 + 20 >> 2] = 0; //@line 2234
     HEAP32[$936 >> 2] = 0; //@line 2235
     $1013 = HEAP32[1958] | 0; //@line 2236
     $1014 = 1 << $$0212$i$i; //@line 2237
     if (!($1013 & $1014)) {
      HEAP32[1958] = $1013 | $1014; //@line 2242
      HEAP32[$1010 >> 2] = $636; //@line 2243
      HEAP32[$636 + 24 >> 2] = $1010; //@line 2245
      HEAP32[$636 + 12 >> 2] = $636; //@line 2247
      HEAP32[$636 + 8 >> 2] = $636; //@line 2249
      break;
     }
     $$0206$i$i = $964 << (($$0212$i$i | 0) == 31 ? 0 : 25 - ($$0212$i$i >>> 1) | 0); //@line 2258
     $$0207$i$i = HEAP32[$1010 >> 2] | 0; //@line 2258
     while (1) {
      if ((HEAP32[$$0207$i$i + 4 >> 2] & -8 | 0) == ($964 | 0)) {
       label = 289; //@line 2265
       break;
      }
      $1032 = $$0207$i$i + 16 + ($$0206$i$i >>> 31 << 2) | 0; //@line 2269
      $1034 = HEAP32[$1032 >> 2] | 0; //@line 2271
      if (!$1034) {
       label = 286; //@line 2274
       break;
      } else {
       $$0206$i$i = $$0206$i$i << 1; //@line 2277
       $$0207$i$i = $1034; //@line 2277
      }
     }
     if ((label | 0) == 286) {
      if ((HEAP32[1961] | 0) >>> 0 > $1032 >>> 0) {
       _abort(); //@line 2284
      } else {
       HEAP32[$1032 >> 2] = $636; //@line 2287
       HEAP32[$636 + 24 >> 2] = $$0207$i$i; //@line 2289
       HEAP32[$636 + 12 >> 2] = $636; //@line 2291
       HEAP32[$636 + 8 >> 2] = $636; //@line 2293
       break;
      }
     } else if ((label | 0) == 289) {
      $1041 = $$0207$i$i + 8 | 0; //@line 2298
      $1042 = HEAP32[$1041 >> 2] | 0; //@line 2299
      $1043 = HEAP32[1961] | 0; //@line 2300
      if ($1043 >>> 0 <= $1042 >>> 0 & $1043 >>> 0 <= $$0207$i$i >>> 0) {
       HEAP32[$1042 + 12 >> 2] = $636; //@line 2306
       HEAP32[$1041 >> 2] = $636; //@line 2307
       HEAP32[$636 + 8 >> 2] = $1042; //@line 2309
       HEAP32[$636 + 12 >> 2] = $$0207$i$i; //@line 2311
       HEAP32[$636 + 24 >> 2] = 0; //@line 2313
       break;
      } else {
       _abort(); //@line 2316
      }
     }
    }
   }
  } while (0);
  $1052 = HEAP32[1960] | 0; //@line 2323
  if ($1052 >>> 0 > $$0197 >>> 0) {
   $1054 = $1052 - $$0197 | 0; //@line 2326
   HEAP32[1960] = $1054; //@line 2327
   $1055 = HEAP32[1963] | 0; //@line 2328
   $1056 = $1055 + $$0197 | 0; //@line 2329
   HEAP32[1963] = $1056; //@line 2330
   HEAP32[$1056 + 4 >> 2] = $1054 | 1; //@line 2333
   HEAP32[$1055 + 4 >> 2] = $$0197 | 3; //@line 2336
   $$0 = $1055 + 8 | 0; //@line 2338
   STACKTOP = sp; //@line 2339
   return $$0 | 0; //@line 2339
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 2343
 $$0 = 0; //@line 2344
 STACKTOP = sp; //@line 2345
 return $$0 | 0; //@line 2345
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_24($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $214 = 0, $215 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $286 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 22363
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 22365
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 22367
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 22369
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 22371
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 22373
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 22375
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 22377
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 22379
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 22381
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 22383
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 22385
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 22387
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 22389
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 22391
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 22393
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 22395
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 22397
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 22399
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 22401
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 22403
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 22405
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 22407
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 22409
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 22411
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 22413
 $150 = HEAP32[$8 >> 2] | 0; //@line 22414
 if ($150 | 0) {
  $153 = HEAP32[$150 + 8 >> 2] | 0; //@line 22418
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(104) | 0; //@line 22419
  FUNCTION_TABLE_vi[$153 & 511]($26); //@line 22420
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 22423
   $154 = $ReallocAsyncCtx2 + 4 | 0; //@line 22424
   HEAP32[$154 >> 2] = $4; //@line 22425
   $155 = $ReallocAsyncCtx2 + 8 | 0; //@line 22426
   HEAP32[$155 >> 2] = $6; //@line 22427
   $156 = $ReallocAsyncCtx2 + 12 | 0; //@line 22428
   HEAP32[$156 >> 2] = $8; //@line 22429
   $157 = $ReallocAsyncCtx2 + 16 | 0; //@line 22430
   HEAP32[$157 >> 2] = $10; //@line 22431
   $158 = $ReallocAsyncCtx2 + 20 | 0; //@line 22432
   HEAP32[$158 >> 2] = $12; //@line 22433
   $159 = $ReallocAsyncCtx2 + 24 | 0; //@line 22434
   HEAP32[$159 >> 2] = $14; //@line 22435
   $160 = $ReallocAsyncCtx2 + 28 | 0; //@line 22436
   HEAP32[$160 >> 2] = $16; //@line 22437
   $161 = $ReallocAsyncCtx2 + 32 | 0; //@line 22438
   HEAP32[$161 >> 2] = $18; //@line 22439
   $162 = $ReallocAsyncCtx2 + 36 | 0; //@line 22440
   HEAP32[$162 >> 2] = $20; //@line 22441
   $163 = $ReallocAsyncCtx2 + 40 | 0; //@line 22442
   HEAP32[$163 >> 2] = $22; //@line 22443
   $164 = $ReallocAsyncCtx2 + 44 | 0; //@line 22444
   HEAP32[$164 >> 2] = $24; //@line 22445
   $165 = $ReallocAsyncCtx2 + 48 | 0; //@line 22446
   HEAP32[$165 >> 2] = $46; //@line 22447
   $166 = $ReallocAsyncCtx2 + 52 | 0; //@line 22448
   HEAP32[$166 >> 2] = $2; //@line 22449
   $167 = $ReallocAsyncCtx2 + 56 | 0; //@line 22450
   HEAP32[$167 >> 2] = $26; //@line 22451
   $168 = $ReallocAsyncCtx2 + 60 | 0; //@line 22452
   HEAP32[$168 >> 2] = $28; //@line 22453
   $169 = $ReallocAsyncCtx2 + 64 | 0; //@line 22454
   HEAP32[$169 >> 2] = $30; //@line 22455
   $170 = $ReallocAsyncCtx2 + 68 | 0; //@line 22456
   HEAP32[$170 >> 2] = $32; //@line 22457
   $171 = $ReallocAsyncCtx2 + 72 | 0; //@line 22458
   HEAP32[$171 >> 2] = $34; //@line 22459
   $172 = $ReallocAsyncCtx2 + 76 | 0; //@line 22460
   HEAP32[$172 >> 2] = $36; //@line 22461
   $173 = $ReallocAsyncCtx2 + 80 | 0; //@line 22462
   HEAP32[$173 >> 2] = $38; //@line 22463
   $174 = $ReallocAsyncCtx2 + 84 | 0; //@line 22464
   HEAP32[$174 >> 2] = $40; //@line 22465
   $175 = $ReallocAsyncCtx2 + 88 | 0; //@line 22466
   HEAP32[$175 >> 2] = $42; //@line 22467
   $176 = $ReallocAsyncCtx2 + 92 | 0; //@line 22468
   HEAP32[$176 >> 2] = $44; //@line 22469
   $177 = $ReallocAsyncCtx2 + 96 | 0; //@line 22470
   HEAP32[$177 >> 2] = $48; //@line 22471
   $178 = $ReallocAsyncCtx2 + 100 | 0; //@line 22472
   HEAP32[$178 >> 2] = $50; //@line 22473
   sp = STACKTOP; //@line 22474
   return;
  }
  ___async_unwind = 0; //@line 22477
  HEAP32[$ReallocAsyncCtx2 >> 2] = 190; //@line 22478
  $154 = $ReallocAsyncCtx2 + 4 | 0; //@line 22479
  HEAP32[$154 >> 2] = $4; //@line 22480
  $155 = $ReallocAsyncCtx2 + 8 | 0; //@line 22481
  HEAP32[$155 >> 2] = $6; //@line 22482
  $156 = $ReallocAsyncCtx2 + 12 | 0; //@line 22483
  HEAP32[$156 >> 2] = $8; //@line 22484
  $157 = $ReallocAsyncCtx2 + 16 | 0; //@line 22485
  HEAP32[$157 >> 2] = $10; //@line 22486
  $158 = $ReallocAsyncCtx2 + 20 | 0; //@line 22487
  HEAP32[$158 >> 2] = $12; //@line 22488
  $159 = $ReallocAsyncCtx2 + 24 | 0; //@line 22489
  HEAP32[$159 >> 2] = $14; //@line 22490
  $160 = $ReallocAsyncCtx2 + 28 | 0; //@line 22491
  HEAP32[$160 >> 2] = $16; //@line 22492
  $161 = $ReallocAsyncCtx2 + 32 | 0; //@line 22493
  HEAP32[$161 >> 2] = $18; //@line 22494
  $162 = $ReallocAsyncCtx2 + 36 | 0; //@line 22495
  HEAP32[$162 >> 2] = $20; //@line 22496
  $163 = $ReallocAsyncCtx2 + 40 | 0; //@line 22497
  HEAP32[$163 >> 2] = $22; //@line 22498
  $164 = $ReallocAsyncCtx2 + 44 | 0; //@line 22499
  HEAP32[$164 >> 2] = $24; //@line 22500
  $165 = $ReallocAsyncCtx2 + 48 | 0; //@line 22501
  HEAP32[$165 >> 2] = $46; //@line 22502
  $166 = $ReallocAsyncCtx2 + 52 | 0; //@line 22503
  HEAP32[$166 >> 2] = $2; //@line 22504
  $167 = $ReallocAsyncCtx2 + 56 | 0; //@line 22505
  HEAP32[$167 >> 2] = $26; //@line 22506
  $168 = $ReallocAsyncCtx2 + 60 | 0; //@line 22507
  HEAP32[$168 >> 2] = $28; //@line 22508
  $169 = $ReallocAsyncCtx2 + 64 | 0; //@line 22509
  HEAP32[$169 >> 2] = $30; //@line 22510
  $170 = $ReallocAsyncCtx2 + 68 | 0; //@line 22511
  HEAP32[$170 >> 2] = $32; //@line 22512
  $171 = $ReallocAsyncCtx2 + 72 | 0; //@line 22513
  HEAP32[$171 >> 2] = $34; //@line 22514
  $172 = $ReallocAsyncCtx2 + 76 | 0; //@line 22515
  HEAP32[$172 >> 2] = $36; //@line 22516
  $173 = $ReallocAsyncCtx2 + 80 | 0; //@line 22517
  HEAP32[$173 >> 2] = $38; //@line 22518
  $174 = $ReallocAsyncCtx2 + 84 | 0; //@line 22519
  HEAP32[$174 >> 2] = $40; //@line 22520
  $175 = $ReallocAsyncCtx2 + 88 | 0; //@line 22521
  HEAP32[$175 >> 2] = $42; //@line 22522
  $176 = $ReallocAsyncCtx2 + 92 | 0; //@line 22523
  HEAP32[$176 >> 2] = $44; //@line 22524
  $177 = $ReallocAsyncCtx2 + 96 | 0; //@line 22525
  HEAP32[$177 >> 2] = $48; //@line 22526
  $178 = $ReallocAsyncCtx2 + 100 | 0; //@line 22527
  HEAP32[$178 >> 2] = $50; //@line 22528
  sp = STACKTOP; //@line 22529
  return;
 }
 $179 = HEAP32[$28 >> 2] | 0; //@line 22532
 if (!$179) {
  $$02972$reg2mem$0 = $50; //@line 22535
  $$03071$reg2mem$0 = $48; //@line 22535
  $$reg2mem$0 = $46; //@line 22535
 } else {
  $182 = HEAP32[$179 + 8 >> 2] | 0; //@line 22538
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 22539
  FUNCTION_TABLE_vi[$182 & 511]($30); //@line 22540
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 191; //@line 22543
   $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 22544
   HEAP32[$183 >> 2] = $4; //@line 22545
   $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 22546
   HEAP32[$184 >> 2] = $6; //@line 22547
   $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 22548
   HEAP32[$185 >> 2] = $8; //@line 22549
   $186 = $ReallocAsyncCtx3 + 16 | 0; //@line 22550
   HEAP32[$186 >> 2] = $10; //@line 22551
   $187 = $ReallocAsyncCtx3 + 20 | 0; //@line 22552
   HEAP32[$187 >> 2] = $12; //@line 22553
   $188 = $ReallocAsyncCtx3 + 24 | 0; //@line 22554
   HEAP32[$188 >> 2] = $14; //@line 22555
   $189 = $ReallocAsyncCtx3 + 28 | 0; //@line 22556
   HEAP32[$189 >> 2] = $16; //@line 22557
   $190 = $ReallocAsyncCtx3 + 32 | 0; //@line 22558
   HEAP32[$190 >> 2] = $18; //@line 22559
   $191 = $ReallocAsyncCtx3 + 36 | 0; //@line 22560
   HEAP32[$191 >> 2] = $20; //@line 22561
   $192 = $ReallocAsyncCtx3 + 40 | 0; //@line 22562
   HEAP32[$192 >> 2] = $22; //@line 22563
   $193 = $ReallocAsyncCtx3 + 44 | 0; //@line 22564
   HEAP32[$193 >> 2] = $24; //@line 22565
   $194 = $ReallocAsyncCtx3 + 48 | 0; //@line 22566
   HEAP32[$194 >> 2] = $46; //@line 22567
   $195 = $ReallocAsyncCtx3 + 52 | 0; //@line 22568
   HEAP32[$195 >> 2] = $2; //@line 22569
   $196 = $ReallocAsyncCtx3 + 56 | 0; //@line 22570
   HEAP32[$196 >> 2] = $26; //@line 22571
   $197 = $ReallocAsyncCtx3 + 60 | 0; //@line 22572
   HEAP32[$197 >> 2] = $28; //@line 22573
   $198 = $ReallocAsyncCtx3 + 64 | 0; //@line 22574
   HEAP32[$198 >> 2] = $30; //@line 22575
   $199 = $ReallocAsyncCtx3 + 68 | 0; //@line 22576
   HEAP32[$199 >> 2] = $32; //@line 22577
   $200 = $ReallocAsyncCtx3 + 72 | 0; //@line 22578
   HEAP32[$200 >> 2] = $34; //@line 22579
   $201 = $ReallocAsyncCtx3 + 76 | 0; //@line 22580
   HEAP32[$201 >> 2] = $36; //@line 22581
   $202 = $ReallocAsyncCtx3 + 80 | 0; //@line 22582
   HEAP32[$202 >> 2] = $38; //@line 22583
   $203 = $ReallocAsyncCtx3 + 84 | 0; //@line 22584
   HEAP32[$203 >> 2] = $40; //@line 22585
   $204 = $ReallocAsyncCtx3 + 88 | 0; //@line 22586
   HEAP32[$204 >> 2] = $42; //@line 22587
   $205 = $ReallocAsyncCtx3 + 92 | 0; //@line 22588
   HEAP32[$205 >> 2] = $44; //@line 22589
   $206 = $ReallocAsyncCtx3 + 96 | 0; //@line 22590
   HEAP32[$206 >> 2] = $48; //@line 22591
   $207 = $ReallocAsyncCtx3 + 100 | 0; //@line 22592
   HEAP32[$207 >> 2] = $50; //@line 22593
   sp = STACKTOP; //@line 22594
   return;
  }
  ___async_unwind = 0; //@line 22597
  HEAP32[$ReallocAsyncCtx3 >> 2] = 191; //@line 22598
  $183 = $ReallocAsyncCtx3 + 4 | 0; //@line 22599
  HEAP32[$183 >> 2] = $4; //@line 22600
  $184 = $ReallocAsyncCtx3 + 8 | 0; //@line 22601
  HEAP32[$184 >> 2] = $6; //@line 22602
  $185 = $ReallocAsyncCtx3 + 12 | 0; //@line 22603
  HEAP32[$185 >> 2] = $8; //@line 22604
  $186 = $ReallocAsyncCtx3 + 16 | 0; //@line 22605
  HEAP32[$186 >> 2] = $10; //@line 22606
  $187 = $ReallocAsyncCtx3 + 20 | 0; //@line 22607
  HEAP32[$187 >> 2] = $12; //@line 22608
  $188 = $ReallocAsyncCtx3 + 24 | 0; //@line 22609
  HEAP32[$188 >> 2] = $14; //@line 22610
  $189 = $ReallocAsyncCtx3 + 28 | 0; //@line 22611
  HEAP32[$189 >> 2] = $16; //@line 22612
  $190 = $ReallocAsyncCtx3 + 32 | 0; //@line 22613
  HEAP32[$190 >> 2] = $18; //@line 22614
  $191 = $ReallocAsyncCtx3 + 36 | 0; //@line 22615
  HEAP32[$191 >> 2] = $20; //@line 22616
  $192 = $ReallocAsyncCtx3 + 40 | 0; //@line 22617
  HEAP32[$192 >> 2] = $22; //@line 22618
  $193 = $ReallocAsyncCtx3 + 44 | 0; //@line 22619
  HEAP32[$193 >> 2] = $24; //@line 22620
  $194 = $ReallocAsyncCtx3 + 48 | 0; //@line 22621
  HEAP32[$194 >> 2] = $46; //@line 22622
  $195 = $ReallocAsyncCtx3 + 52 | 0; //@line 22623
  HEAP32[$195 >> 2] = $2; //@line 22624
  $196 = $ReallocAsyncCtx3 + 56 | 0; //@line 22625
  HEAP32[$196 >> 2] = $26; //@line 22626
  $197 = $ReallocAsyncCtx3 + 60 | 0; //@line 22627
  HEAP32[$197 >> 2] = $28; //@line 22628
  $198 = $ReallocAsyncCtx3 + 64 | 0; //@line 22629
  HEAP32[$198 >> 2] = $30; //@line 22630
  $199 = $ReallocAsyncCtx3 + 68 | 0; //@line 22631
  HEAP32[$199 >> 2] = $32; //@line 22632
  $200 = $ReallocAsyncCtx3 + 72 | 0; //@line 22633
  HEAP32[$200 >> 2] = $34; //@line 22634
  $201 = $ReallocAsyncCtx3 + 76 | 0; //@line 22635
  HEAP32[$201 >> 2] = $36; //@line 22636
  $202 = $ReallocAsyncCtx3 + 80 | 0; //@line 22637
  HEAP32[$202 >> 2] = $38; //@line 22638
  $203 = $ReallocAsyncCtx3 + 84 | 0; //@line 22639
  HEAP32[$203 >> 2] = $40; //@line 22640
  $204 = $ReallocAsyncCtx3 + 88 | 0; //@line 22641
  HEAP32[$204 >> 2] = $42; //@line 22642
  $205 = $ReallocAsyncCtx3 + 92 | 0; //@line 22643
  HEAP32[$205 >> 2] = $44; //@line 22644
  $206 = $ReallocAsyncCtx3 + 96 | 0; //@line 22645
  HEAP32[$206 >> 2] = $48; //@line 22646
  $207 = $ReallocAsyncCtx3 + 100 | 0; //@line 22647
  HEAP32[$207 >> 2] = $50; //@line 22648
  sp = STACKTOP; //@line 22649
  return;
 }
 L15 : while (1) {
  $208 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 22653
  $209 = $208 + 76 | 0; //@line 22654
  $210 = HEAP32[$209 >> 2] | 0; //@line 22655
  if ($210 | 0) {
   if ($210 >>> 0 <= 100) {
    label = 29; //@line 22660
    break;
   }
   HEAP32[$209 >> 2] = $210 + -100; //@line 22664
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 22669
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 22669
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 22671
   $$131 = $$03071$reg2mem$0; //@line 22671
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 22674
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 22677
    break L15;
   }
   $52 = 7796 + ($$02972$reg2mem$1 << 2) | 0; //@line 22680
   $54 = HEAP32[$52 >> 2] | 0; //@line 22681
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 22693
   break;
  }
  $84 = $54 + 72 | 0; //@line 22696
  $85 = HEAP32[$84 >> 2] | 0; //@line 22697
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 22701
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 22702
   $$03071$reg2mem$0 = $$131; //@line 22702
   $$reg2mem$0 = $52; //@line 22702
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 22709
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 22712
    $$03071$reg2mem$0 = $$131; //@line 22712
    $$reg2mem$0 = $52; //@line 22712
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8676] = 0; //@line 22720
   return;
  }
  $275 = $$131 + 44 | 0; //@line 22723
  $276 = HEAP32[$275 >> 2] | 0; //@line 22724
  if (!$276) {
   $284 = $2 + 12 | 0; //@line 22727
   HEAP32[$284 >> 2] = 0; //@line 22728
   $286 = $32 + 4 | 0; //@line 22730
   HEAP32[$286 >> 2] = 0; //@line 22732
   HEAP32[$286 + 4 >> 2] = 0; //@line 22735
   HEAP32[$32 >> 2] = 3; //@line 22736
   $290 = $32 + 12 | 0; //@line 22737
   HEAP32[$290 >> 2] = 752; //@line 22738
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 22739
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $32) | 0; //@line 22740
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 22743
    $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 22744
    HEAP32[$291 >> 2] = $290; //@line 22745
    $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 22746
    HEAP32[$292 >> 2] = $284; //@line 22747
    $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 22748
    HEAP32[$293 >> 2] = $32; //@line 22749
    $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 22750
    HEAP32[$294 >> 2] = $2; //@line 22751
    sp = STACKTOP; //@line 22752
    return;
   }
   ___async_unwind = 0; //@line 22755
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 22756
   $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 22757
   HEAP32[$291 >> 2] = $290; //@line 22758
   $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 22759
   HEAP32[$292 >> 2] = $284; //@line 22760
   $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 22761
   HEAP32[$293 >> 2] = $32; //@line 22762
   $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 22763
   HEAP32[$294 >> 2] = $2; //@line 22764
   sp = STACKTOP; //@line 22765
   return;
  } else {
   $280 = HEAP32[$276 + 4 >> 2] | 0; //@line 22770
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 22771
   FUNCTION_TABLE_vii[$280 & 7]($2, $$131 + 32 | 0); //@line 22772
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 22775
    $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 22776
    HEAP32[$281 >> 2] = $275; //@line 22777
    $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 22778
    HEAP32[$282 >> 2] = $2; //@line 22779
    $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 22780
    HEAP32[$283 >> 2] = $32; //@line 22781
    sp = STACKTOP; //@line 22782
    return;
   }
   ___async_unwind = 0; //@line 22785
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 22786
   $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 22787
   HEAP32[$281 >> 2] = $275; //@line 22788
   $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 22789
   HEAP32[$282 >> 2] = $2; //@line 22790
   $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 22791
   HEAP32[$283 >> 2] = $32; //@line 22792
   sp = STACKTOP; //@line 22793
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 22798
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 22799
  __ZL28nsapi_dns_query_async_deletei($59); //@line 22800
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 22803
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 22804
   HEAP32[$60 >> 2] = $2; //@line 22805
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 22806
   HEAP32[$61 >> 2] = $4; //@line 22807
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 22808
   HEAP32[$62 >> 2] = $6; //@line 22809
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 22810
   HEAP32[$63 >> 2] = $8; //@line 22811
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 22812
   HEAP32[$64 >> 2] = $10; //@line 22813
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 22814
   HEAP32[$65 >> 2] = $12; //@line 22815
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 22816
   HEAP32[$66 >> 2] = $14; //@line 22817
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 22818
   HEAP32[$67 >> 2] = $16; //@line 22819
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 22820
   HEAP32[$68 >> 2] = $18; //@line 22821
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 22822
   HEAP32[$69 >> 2] = $20; //@line 22823
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 22824
   HEAP32[$70 >> 2] = $22; //@line 22825
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 22826
   HEAP32[$71 >> 2] = $24; //@line 22827
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 22828
   HEAP32[$72 >> 2] = $26; //@line 22829
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 22830
   HEAP32[$73 >> 2] = $28; //@line 22831
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 22832
   HEAP32[$74 >> 2] = $30; //@line 22833
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 22834
   HEAP32[$75 >> 2] = $32; //@line 22835
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 22836
   HEAP32[$76 >> 2] = $34; //@line 22837
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 22838
   HEAP32[$77 >> 2] = $36; //@line 22839
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 22840
   HEAP32[$78 >> 2] = $38; //@line 22841
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 22842
   HEAP32[$79 >> 2] = $40; //@line 22843
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 22844
   HEAP32[$80 >> 2] = $42; //@line 22845
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 22846
   HEAP32[$81 >> 2] = $44; //@line 22847
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 22848
   HEAP32[$82 >> 2] = $$131; //@line 22849
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 22850
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 22851
   sp = STACKTOP; //@line 22852
   return;
  }
  ___async_unwind = 0; //@line 22855
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 22856
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 22857
  HEAP32[$60 >> 2] = $2; //@line 22858
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 22859
  HEAP32[$61 >> 2] = $4; //@line 22860
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 22861
  HEAP32[$62 >> 2] = $6; //@line 22862
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 22863
  HEAP32[$63 >> 2] = $8; //@line 22864
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 22865
  HEAP32[$64 >> 2] = $10; //@line 22866
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 22867
  HEAP32[$65 >> 2] = $12; //@line 22868
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 22869
  HEAP32[$66 >> 2] = $14; //@line 22870
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 22871
  HEAP32[$67 >> 2] = $16; //@line 22872
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 22873
  HEAP32[$68 >> 2] = $18; //@line 22874
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 22875
  HEAP32[$69 >> 2] = $20; //@line 22876
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 22877
  HEAP32[$70 >> 2] = $22; //@line 22878
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 22879
  HEAP32[$71 >> 2] = $24; //@line 22880
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 22881
  HEAP32[$72 >> 2] = $26; //@line 22882
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 22883
  HEAP32[$73 >> 2] = $28; //@line 22884
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 22885
  HEAP32[$74 >> 2] = $30; //@line 22886
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 22887
  HEAP32[$75 >> 2] = $32; //@line 22888
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 22889
  HEAP32[$76 >> 2] = $34; //@line 22890
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 22891
  HEAP32[$77 >> 2] = $36; //@line 22892
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 22893
  HEAP32[$78 >> 2] = $38; //@line 22894
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 22895
  HEAP32[$79 >> 2] = $40; //@line 22896
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 22897
  HEAP32[$80 >> 2] = $42; //@line 22898
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 22899
  HEAP32[$81 >> 2] = $44; //@line 22900
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 22901
  HEAP32[$82 >> 2] = $$131; //@line 22902
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 22903
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 22904
  sp = STACKTOP; //@line 22905
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 22910
  $92 = $54 + 44 | 0; //@line 22911
  $93 = HEAP32[$92 >> 2] | 0; //@line 22912
  if (!$93) {
   HEAP32[$34 >> 2] = 0; //@line 22915
   $124 = HEAP32[$54 >> 2] | 0; //@line 22916
   HEAP32[$36 >> 2] = 0; //@line 22917
   HEAP32[$38 >> 2] = 188; //@line 22918
   HEAP32[$40 >> 2] = $124; //@line 22919
   HEAP32[$8 >> 2] = 764; //@line 22920
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 22921
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 22922
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 22925
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 22926
    HEAP32[$125 >> 2] = $2; //@line 22927
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 22928
    HEAP32[$126 >> 2] = $4; //@line 22929
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 22930
    HEAP32[$127 >> 2] = $6; //@line 22931
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 22932
    HEAP32[$128 >> 2] = $8; //@line 22933
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 22934
    HEAP32[$129 >> 2] = $10; //@line 22935
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 22936
    HEAP32[$130 >> 2] = $12; //@line 22937
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 22938
    HEAP32[$131 >> 2] = $14; //@line 22939
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 22940
    HEAP32[$132 >> 2] = $16; //@line 22941
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 22942
    HEAP32[$133 >> 2] = $18; //@line 22943
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 22944
    HEAP32[$134 >> 2] = $20; //@line 22945
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 22946
    HEAP32[$135 >> 2] = $22; //@line 22947
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 22948
    HEAP32[$136 >> 2] = $24; //@line 22949
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 22950
    HEAP32[$137 >> 2] = $26; //@line 22951
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 22952
    HEAP32[$138 >> 2] = $28; //@line 22953
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 22954
    HEAP32[$139 >> 2] = $30; //@line 22955
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 22956
    HEAP32[$140 >> 2] = $32; //@line 22957
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 22958
    HEAP32[$141 >> 2] = $34; //@line 22959
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 22960
    HEAP32[$142 >> 2] = $36; //@line 22961
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 22962
    HEAP32[$143 >> 2] = $38; //@line 22963
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 22964
    HEAP32[$144 >> 2] = $40; //@line 22965
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 22966
    HEAP32[$145 >> 2] = $42; //@line 22967
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 22968
    HEAP32[$146 >> 2] = $44; //@line 22969
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 22970
    HEAP32[$147 >> 2] = $52; //@line 22971
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 22972
    HEAP32[$148 >> 2] = $$131; //@line 22973
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 22974
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 22975
    sp = STACKTOP; //@line 22976
    return;
   }
   ___async_unwind = 0; //@line 22979
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 22980
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 22981
   HEAP32[$125 >> 2] = $2; //@line 22982
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 22983
   HEAP32[$126 >> 2] = $4; //@line 22984
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 22985
   HEAP32[$127 >> 2] = $6; //@line 22986
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 22987
   HEAP32[$128 >> 2] = $8; //@line 22988
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 22989
   HEAP32[$129 >> 2] = $10; //@line 22990
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 22991
   HEAP32[$130 >> 2] = $12; //@line 22992
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 22993
   HEAP32[$131 >> 2] = $14; //@line 22994
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 22995
   HEAP32[$132 >> 2] = $16; //@line 22996
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 22997
   HEAP32[$133 >> 2] = $18; //@line 22998
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 22999
   HEAP32[$134 >> 2] = $20; //@line 23000
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 23001
   HEAP32[$135 >> 2] = $22; //@line 23002
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 23003
   HEAP32[$136 >> 2] = $24; //@line 23004
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 23005
   HEAP32[$137 >> 2] = $26; //@line 23006
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 23007
   HEAP32[$138 >> 2] = $28; //@line 23008
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 23009
   HEAP32[$139 >> 2] = $30; //@line 23010
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 23011
   HEAP32[$140 >> 2] = $32; //@line 23012
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 23013
   HEAP32[$141 >> 2] = $34; //@line 23014
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 23015
   HEAP32[$142 >> 2] = $36; //@line 23016
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 23017
   HEAP32[$143 >> 2] = $38; //@line 23018
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 23019
   HEAP32[$144 >> 2] = $40; //@line 23020
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 23021
   HEAP32[$145 >> 2] = $42; //@line 23022
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 23023
   HEAP32[$146 >> 2] = $44; //@line 23024
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 23025
   HEAP32[$147 >> 2] = $52; //@line 23026
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 23027
   HEAP32[$148 >> 2] = $$131; //@line 23028
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 23029
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 23030
   sp = STACKTOP; //@line 23031
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 23036
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 23037
   FUNCTION_TABLE_vii[$97 & 7]($30, $54 + 32 | 0); //@line 23038
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 23041
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 23042
    HEAP32[$98 >> 2] = $4; //@line 23043
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 23044
    HEAP32[$99 >> 2] = $6; //@line 23045
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 23046
    HEAP32[$100 >> 2] = $8; //@line 23047
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 23048
    HEAP32[$101 >> 2] = $10; //@line 23049
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 23050
    HEAP32[$102 >> 2] = $12; //@line 23051
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 23052
    HEAP32[$103 >> 2] = $14; //@line 23053
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 23054
    HEAP32[$104 >> 2] = $16; //@line 23055
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 23056
    HEAP32[$105 >> 2] = $18; //@line 23057
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 23058
    HEAP32[$106 >> 2] = $20; //@line 23059
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 23060
    HEAP32[$107 >> 2] = $22; //@line 23061
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 23062
    HEAP32[$108 >> 2] = $24; //@line 23063
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 23064
    HEAP32[$109 >> 2] = $52; //@line 23065
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 23066
    HEAP32[$110 >> 2] = $92; //@line 23067
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 23068
    HEAP32[$111 >> 2] = $2; //@line 23069
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 23070
    HEAP32[$112 >> 2] = $26; //@line 23071
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 23072
    HEAP32[$113 >> 2] = $28; //@line 23073
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 23074
    HEAP32[$114 >> 2] = $30; //@line 23075
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 23076
    HEAP32[$115 >> 2] = $32; //@line 23077
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 23078
    HEAP32[$116 >> 2] = $34; //@line 23079
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 23080
    HEAP32[$117 >> 2] = $36; //@line 23081
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 23082
    HEAP32[$118 >> 2] = $38; //@line 23083
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 23084
    HEAP32[$119 >> 2] = $40; //@line 23085
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 23086
    HEAP32[$120 >> 2] = $42; //@line 23087
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 23088
    HEAP32[$121 >> 2] = $44; //@line 23089
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 23090
    HEAP32[$122 >> 2] = $$131; //@line 23091
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 23092
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 23093
    sp = STACKTOP; //@line 23094
    return;
   }
   ___async_unwind = 0; //@line 23097
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 23098
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 23099
   HEAP32[$98 >> 2] = $4; //@line 23100
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 23101
   HEAP32[$99 >> 2] = $6; //@line 23102
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 23103
   HEAP32[$100 >> 2] = $8; //@line 23104
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 23105
   HEAP32[$101 >> 2] = $10; //@line 23106
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 23107
   HEAP32[$102 >> 2] = $12; //@line 23108
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 23109
   HEAP32[$103 >> 2] = $14; //@line 23110
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 23111
   HEAP32[$104 >> 2] = $16; //@line 23112
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 23113
   HEAP32[$105 >> 2] = $18; //@line 23114
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 23115
   HEAP32[$106 >> 2] = $20; //@line 23116
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 23117
   HEAP32[$107 >> 2] = $22; //@line 23118
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 23119
   HEAP32[$108 >> 2] = $24; //@line 23120
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 23121
   HEAP32[$109 >> 2] = $52; //@line 23122
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 23123
   HEAP32[$110 >> 2] = $92; //@line 23124
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 23125
   HEAP32[$111 >> 2] = $2; //@line 23126
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 23127
   HEAP32[$112 >> 2] = $26; //@line 23128
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 23129
   HEAP32[$113 >> 2] = $28; //@line 23130
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 23131
   HEAP32[$114 >> 2] = $30; //@line 23132
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 23133
   HEAP32[$115 >> 2] = $32; //@line 23134
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 23135
   HEAP32[$116 >> 2] = $34; //@line 23136
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 23137
   HEAP32[$117 >> 2] = $36; //@line 23138
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 23139
   HEAP32[$118 >> 2] = $38; //@line 23140
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 23141
   HEAP32[$119 >> 2] = $40; //@line 23142
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 23143
   HEAP32[$120 >> 2] = $42; //@line 23144
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 23145
   HEAP32[$121 >> 2] = $44; //@line 23146
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 23147
   HEAP32[$122 >> 2] = $$131; //@line 23148
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 23149
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 23150
   sp = STACKTOP; //@line 23151
   return;
  }
 } else if ((label | 0) == 29) {
  HEAP32[$209 >> 2] = 0; //@line 23156
  $214 = $208 + 44 | 0; //@line 23157
  $215 = HEAP32[$214 >> 2] | 0; //@line 23158
  if (!$215) {
   HEAP32[$12 >> 2] = 0; //@line 23161
   $246 = HEAP32[$208 >> 2] | 0; //@line 23162
   HEAP32[$14 >> 2] = 0; //@line 23163
   HEAP32[$16 >> 2] = 193; //@line 23164
   HEAP32[$18 >> 2] = $246; //@line 23165
   HEAP32[$20 >> 2] = 764; //@line 23166
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 23167
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 23168
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 23171
    $247 = $ReallocAsyncCtx13 + 4 | 0; //@line 23172
    HEAP32[$247 >> 2] = $2; //@line 23173
    $248 = $ReallocAsyncCtx13 + 8 | 0; //@line 23174
    HEAP32[$248 >> 2] = $4; //@line 23175
    $249 = $ReallocAsyncCtx13 + 12 | 0; //@line 23176
    HEAP32[$249 >> 2] = $6; //@line 23177
    $250 = $ReallocAsyncCtx13 + 16 | 0; //@line 23178
    HEAP32[$250 >> 2] = $8; //@line 23179
    $251 = $ReallocAsyncCtx13 + 20 | 0; //@line 23180
    HEAP32[$251 >> 2] = $10; //@line 23181
    $252 = $ReallocAsyncCtx13 + 24 | 0; //@line 23182
    HEAP32[$252 >> 2] = $12; //@line 23183
    $253 = $ReallocAsyncCtx13 + 28 | 0; //@line 23184
    HEAP32[$253 >> 2] = $14; //@line 23185
    $254 = $ReallocAsyncCtx13 + 32 | 0; //@line 23186
    HEAP32[$254 >> 2] = $16; //@line 23187
    $255 = $ReallocAsyncCtx13 + 36 | 0; //@line 23188
    HEAP32[$255 >> 2] = $18; //@line 23189
    $256 = $ReallocAsyncCtx13 + 40 | 0; //@line 23190
    HEAP32[$256 >> 2] = $20; //@line 23191
    $257 = $ReallocAsyncCtx13 + 44 | 0; //@line 23192
    HEAP32[$257 >> 2] = $22; //@line 23193
    $258 = $ReallocAsyncCtx13 + 48 | 0; //@line 23194
    HEAP32[$258 >> 2] = $24; //@line 23195
    $259 = $ReallocAsyncCtx13 + 52 | 0; //@line 23196
    HEAP32[$259 >> 2] = $26; //@line 23197
    $260 = $ReallocAsyncCtx13 + 56 | 0; //@line 23198
    HEAP32[$260 >> 2] = $28; //@line 23199
    $261 = $ReallocAsyncCtx13 + 60 | 0; //@line 23200
    HEAP32[$261 >> 2] = $30; //@line 23201
    $262 = $ReallocAsyncCtx13 + 64 | 0; //@line 23202
    HEAP32[$262 >> 2] = $32; //@line 23203
    $263 = $ReallocAsyncCtx13 + 68 | 0; //@line 23204
    HEAP32[$263 >> 2] = $34; //@line 23205
    $264 = $ReallocAsyncCtx13 + 72 | 0; //@line 23206
    HEAP32[$264 >> 2] = $36; //@line 23207
    $265 = $ReallocAsyncCtx13 + 76 | 0; //@line 23208
    HEAP32[$265 >> 2] = $38; //@line 23209
    $266 = $ReallocAsyncCtx13 + 80 | 0; //@line 23210
    HEAP32[$266 >> 2] = $40; //@line 23211
    $267 = $ReallocAsyncCtx13 + 84 | 0; //@line 23212
    HEAP32[$267 >> 2] = $42; //@line 23213
    $268 = $ReallocAsyncCtx13 + 88 | 0; //@line 23214
    HEAP32[$268 >> 2] = $44; //@line 23215
    $269 = $ReallocAsyncCtx13 + 92 | 0; //@line 23216
    HEAP32[$269 >> 2] = $$reg2mem$0; //@line 23217
    $270 = $ReallocAsyncCtx13 + 96 | 0; //@line 23218
    HEAP32[$270 >> 2] = $$03071$reg2mem$0; //@line 23219
    $271 = $ReallocAsyncCtx13 + 100 | 0; //@line 23220
    HEAP32[$271 >> 2] = $$02972$reg2mem$0; //@line 23221
    sp = STACKTOP; //@line 23222
    return;
   }
   ___async_unwind = 0; //@line 23225
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 23226
   $247 = $ReallocAsyncCtx13 + 4 | 0; //@line 23227
   HEAP32[$247 >> 2] = $2; //@line 23228
   $248 = $ReallocAsyncCtx13 + 8 | 0; //@line 23229
   HEAP32[$248 >> 2] = $4; //@line 23230
   $249 = $ReallocAsyncCtx13 + 12 | 0; //@line 23231
   HEAP32[$249 >> 2] = $6; //@line 23232
   $250 = $ReallocAsyncCtx13 + 16 | 0; //@line 23233
   HEAP32[$250 >> 2] = $8; //@line 23234
   $251 = $ReallocAsyncCtx13 + 20 | 0; //@line 23235
   HEAP32[$251 >> 2] = $10; //@line 23236
   $252 = $ReallocAsyncCtx13 + 24 | 0; //@line 23237
   HEAP32[$252 >> 2] = $12; //@line 23238
   $253 = $ReallocAsyncCtx13 + 28 | 0; //@line 23239
   HEAP32[$253 >> 2] = $14; //@line 23240
   $254 = $ReallocAsyncCtx13 + 32 | 0; //@line 23241
   HEAP32[$254 >> 2] = $16; //@line 23242
   $255 = $ReallocAsyncCtx13 + 36 | 0; //@line 23243
   HEAP32[$255 >> 2] = $18; //@line 23244
   $256 = $ReallocAsyncCtx13 + 40 | 0; //@line 23245
   HEAP32[$256 >> 2] = $20; //@line 23246
   $257 = $ReallocAsyncCtx13 + 44 | 0; //@line 23247
   HEAP32[$257 >> 2] = $22; //@line 23248
   $258 = $ReallocAsyncCtx13 + 48 | 0; //@line 23249
   HEAP32[$258 >> 2] = $24; //@line 23250
   $259 = $ReallocAsyncCtx13 + 52 | 0; //@line 23251
   HEAP32[$259 >> 2] = $26; //@line 23252
   $260 = $ReallocAsyncCtx13 + 56 | 0; //@line 23253
   HEAP32[$260 >> 2] = $28; //@line 23254
   $261 = $ReallocAsyncCtx13 + 60 | 0; //@line 23255
   HEAP32[$261 >> 2] = $30; //@line 23256
   $262 = $ReallocAsyncCtx13 + 64 | 0; //@line 23257
   HEAP32[$262 >> 2] = $32; //@line 23258
   $263 = $ReallocAsyncCtx13 + 68 | 0; //@line 23259
   HEAP32[$263 >> 2] = $34; //@line 23260
   $264 = $ReallocAsyncCtx13 + 72 | 0; //@line 23261
   HEAP32[$264 >> 2] = $36; //@line 23262
   $265 = $ReallocAsyncCtx13 + 76 | 0; //@line 23263
   HEAP32[$265 >> 2] = $38; //@line 23264
   $266 = $ReallocAsyncCtx13 + 80 | 0; //@line 23265
   HEAP32[$266 >> 2] = $40; //@line 23266
   $267 = $ReallocAsyncCtx13 + 84 | 0; //@line 23267
   HEAP32[$267 >> 2] = $42; //@line 23268
   $268 = $ReallocAsyncCtx13 + 88 | 0; //@line 23269
   HEAP32[$268 >> 2] = $44; //@line 23270
   $269 = $ReallocAsyncCtx13 + 92 | 0; //@line 23271
   HEAP32[$269 >> 2] = $$reg2mem$0; //@line 23272
   $270 = $ReallocAsyncCtx13 + 96 | 0; //@line 23273
   HEAP32[$270 >> 2] = $$03071$reg2mem$0; //@line 23274
   $271 = $ReallocAsyncCtx13 + 100 | 0; //@line 23275
   HEAP32[$271 >> 2] = $$02972$reg2mem$0; //@line 23276
   sp = STACKTOP; //@line 23277
   return;
  } else {
   $219 = HEAP32[$215 + 4 >> 2] | 0; //@line 23282
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 23283
   FUNCTION_TABLE_vii[$219 & 7]($10, $208 + 32 | 0); //@line 23284
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 23287
    $220 = $ReallocAsyncCtx4 + 4 | 0; //@line 23288
    HEAP32[$220 >> 2] = $4; //@line 23289
    $221 = $ReallocAsyncCtx4 + 8 | 0; //@line 23290
    HEAP32[$221 >> 2] = $6; //@line 23291
    $222 = $ReallocAsyncCtx4 + 12 | 0; //@line 23292
    HEAP32[$222 >> 2] = $8; //@line 23293
    $223 = $ReallocAsyncCtx4 + 16 | 0; //@line 23294
    HEAP32[$223 >> 2] = $10; //@line 23295
    $224 = $ReallocAsyncCtx4 + 20 | 0; //@line 23296
    HEAP32[$224 >> 2] = $12; //@line 23297
    $225 = $ReallocAsyncCtx4 + 24 | 0; //@line 23298
    HEAP32[$225 >> 2] = $14; //@line 23299
    $226 = $ReallocAsyncCtx4 + 28 | 0; //@line 23300
    HEAP32[$226 >> 2] = $16; //@line 23301
    $227 = $ReallocAsyncCtx4 + 32 | 0; //@line 23302
    HEAP32[$227 >> 2] = $18; //@line 23303
    $228 = $ReallocAsyncCtx4 + 36 | 0; //@line 23304
    HEAP32[$228 >> 2] = $20; //@line 23305
    $229 = $ReallocAsyncCtx4 + 40 | 0; //@line 23306
    HEAP32[$229 >> 2] = $22; //@line 23307
    $230 = $ReallocAsyncCtx4 + 44 | 0; //@line 23308
    HEAP32[$230 >> 2] = $24; //@line 23309
    $231 = $ReallocAsyncCtx4 + 48 | 0; //@line 23310
    HEAP32[$231 >> 2] = $2; //@line 23311
    $232 = $ReallocAsyncCtx4 + 52 | 0; //@line 23312
    HEAP32[$232 >> 2] = $26; //@line 23313
    $233 = $ReallocAsyncCtx4 + 56 | 0; //@line 23314
    HEAP32[$233 >> 2] = $28; //@line 23315
    $234 = $ReallocAsyncCtx4 + 60 | 0; //@line 23316
    HEAP32[$234 >> 2] = $30; //@line 23317
    $235 = $ReallocAsyncCtx4 + 64 | 0; //@line 23318
    HEAP32[$235 >> 2] = $32; //@line 23319
    $236 = $ReallocAsyncCtx4 + 68 | 0; //@line 23320
    HEAP32[$236 >> 2] = $34; //@line 23321
    $237 = $ReallocAsyncCtx4 + 72 | 0; //@line 23322
    HEAP32[$237 >> 2] = $36; //@line 23323
    $238 = $ReallocAsyncCtx4 + 76 | 0; //@line 23324
    HEAP32[$238 >> 2] = $38; //@line 23325
    $239 = $ReallocAsyncCtx4 + 80 | 0; //@line 23326
    HEAP32[$239 >> 2] = $40; //@line 23327
    $240 = $ReallocAsyncCtx4 + 84 | 0; //@line 23328
    HEAP32[$240 >> 2] = $42; //@line 23329
    $241 = $ReallocAsyncCtx4 + 88 | 0; //@line 23330
    HEAP32[$241 >> 2] = $44; //@line 23331
    $242 = $ReallocAsyncCtx4 + 92 | 0; //@line 23332
    HEAP32[$242 >> 2] = $214; //@line 23333
    $243 = $ReallocAsyncCtx4 + 96 | 0; //@line 23334
    HEAP32[$243 >> 2] = $$reg2mem$0; //@line 23335
    $244 = $ReallocAsyncCtx4 + 100 | 0; //@line 23336
    HEAP32[$244 >> 2] = $$03071$reg2mem$0; //@line 23337
    $245 = $ReallocAsyncCtx4 + 104 | 0; //@line 23338
    HEAP32[$245 >> 2] = $$02972$reg2mem$0; //@line 23339
    sp = STACKTOP; //@line 23340
    return;
   }
   ___async_unwind = 0; //@line 23343
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 23344
   $220 = $ReallocAsyncCtx4 + 4 | 0; //@line 23345
   HEAP32[$220 >> 2] = $4; //@line 23346
   $221 = $ReallocAsyncCtx4 + 8 | 0; //@line 23347
   HEAP32[$221 >> 2] = $6; //@line 23348
   $222 = $ReallocAsyncCtx4 + 12 | 0; //@line 23349
   HEAP32[$222 >> 2] = $8; //@line 23350
   $223 = $ReallocAsyncCtx4 + 16 | 0; //@line 23351
   HEAP32[$223 >> 2] = $10; //@line 23352
   $224 = $ReallocAsyncCtx4 + 20 | 0; //@line 23353
   HEAP32[$224 >> 2] = $12; //@line 23354
   $225 = $ReallocAsyncCtx4 + 24 | 0; //@line 23355
   HEAP32[$225 >> 2] = $14; //@line 23356
   $226 = $ReallocAsyncCtx4 + 28 | 0; //@line 23357
   HEAP32[$226 >> 2] = $16; //@line 23358
   $227 = $ReallocAsyncCtx4 + 32 | 0; //@line 23359
   HEAP32[$227 >> 2] = $18; //@line 23360
   $228 = $ReallocAsyncCtx4 + 36 | 0; //@line 23361
   HEAP32[$228 >> 2] = $20; //@line 23362
   $229 = $ReallocAsyncCtx4 + 40 | 0; //@line 23363
   HEAP32[$229 >> 2] = $22; //@line 23364
   $230 = $ReallocAsyncCtx4 + 44 | 0; //@line 23365
   HEAP32[$230 >> 2] = $24; //@line 23366
   $231 = $ReallocAsyncCtx4 + 48 | 0; //@line 23367
   HEAP32[$231 >> 2] = $2; //@line 23368
   $232 = $ReallocAsyncCtx4 + 52 | 0; //@line 23369
   HEAP32[$232 >> 2] = $26; //@line 23370
   $233 = $ReallocAsyncCtx4 + 56 | 0; //@line 23371
   HEAP32[$233 >> 2] = $28; //@line 23372
   $234 = $ReallocAsyncCtx4 + 60 | 0; //@line 23373
   HEAP32[$234 >> 2] = $30; //@line 23374
   $235 = $ReallocAsyncCtx4 + 64 | 0; //@line 23375
   HEAP32[$235 >> 2] = $32; //@line 23376
   $236 = $ReallocAsyncCtx4 + 68 | 0; //@line 23377
   HEAP32[$236 >> 2] = $34; //@line 23378
   $237 = $ReallocAsyncCtx4 + 72 | 0; //@line 23379
   HEAP32[$237 >> 2] = $36; //@line 23380
   $238 = $ReallocAsyncCtx4 + 76 | 0; //@line 23381
   HEAP32[$238 >> 2] = $38; //@line 23382
   $239 = $ReallocAsyncCtx4 + 80 | 0; //@line 23383
   HEAP32[$239 >> 2] = $40; //@line 23384
   $240 = $ReallocAsyncCtx4 + 84 | 0; //@line 23385
   HEAP32[$240 >> 2] = $42; //@line 23386
   $241 = $ReallocAsyncCtx4 + 88 | 0; //@line 23387
   HEAP32[$241 >> 2] = $44; //@line 23388
   $242 = $ReallocAsyncCtx4 + 92 | 0; //@line 23389
   HEAP32[$242 >> 2] = $214; //@line 23390
   $243 = $ReallocAsyncCtx4 + 96 | 0; //@line 23391
   HEAP32[$243 >> 2] = $$reg2mem$0; //@line 23392
   $244 = $ReallocAsyncCtx4 + 100 | 0; //@line 23393
   HEAP32[$244 >> 2] = $$03071$reg2mem$0; //@line 23394
   $245 = $ReallocAsyncCtx4 + 104 | 0; //@line 23395
   HEAP32[$245 >> 2] = $$02972$reg2mem$0; //@line 23396
   sp = STACKTOP; //@line 23397
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_23($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $270 = 0, $271 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $286 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 21308
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 21310
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21312
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21314
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21316
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 21318
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 21320
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 21322
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 21324
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 21326
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 21328
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 21330
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 21332
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 21334
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 21336
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 21338
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 21340
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 21342
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 21344
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 21346
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 21348
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 21350
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 21352
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 21354
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 21356
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 21358
 $214 = HEAP32[$20 >> 2] | 0; //@line 21359
 if ($214 | 0) {
  $217 = HEAP32[$214 + 8 >> 2] | 0; //@line 21363
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(104) | 0; //@line 21364
  FUNCTION_TABLE_vi[$217 & 511]($6); //@line 21365
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 195; //@line 21368
   $218 = $ReallocAsyncCtx5 + 4 | 0; //@line 21369
   HEAP32[$218 >> 2] = $4; //@line 21370
   $219 = $ReallocAsyncCtx5 + 8 | 0; //@line 21371
   HEAP32[$219 >> 2] = $6; //@line 21372
   $220 = $ReallocAsyncCtx5 + 12 | 0; //@line 21373
   HEAP32[$220 >> 2] = $8; //@line 21374
   $221 = $ReallocAsyncCtx5 + 16 | 0; //@line 21375
   HEAP32[$221 >> 2] = $10; //@line 21376
   $222 = $ReallocAsyncCtx5 + 20 | 0; //@line 21377
   HEAP32[$222 >> 2] = $12; //@line 21378
   $223 = $ReallocAsyncCtx5 + 24 | 0; //@line 21379
   HEAP32[$223 >> 2] = $14; //@line 21380
   $224 = $ReallocAsyncCtx5 + 28 | 0; //@line 21381
   HEAP32[$224 >> 2] = $16; //@line 21382
   $225 = $ReallocAsyncCtx5 + 32 | 0; //@line 21383
   HEAP32[$225 >> 2] = $18; //@line 21384
   $226 = $ReallocAsyncCtx5 + 36 | 0; //@line 21385
   HEAP32[$226 >> 2] = $20; //@line 21386
   $227 = $ReallocAsyncCtx5 + 40 | 0; //@line 21387
   HEAP32[$227 >> 2] = $22; //@line 21388
   $228 = $ReallocAsyncCtx5 + 44 | 0; //@line 21389
   HEAP32[$228 >> 2] = $24; //@line 21390
   $229 = $ReallocAsyncCtx5 + 48 | 0; //@line 21391
   HEAP32[$229 >> 2] = $2; //@line 21392
   $230 = $ReallocAsyncCtx5 + 52 | 0; //@line 21393
   HEAP32[$230 >> 2] = $26; //@line 21394
   $231 = $ReallocAsyncCtx5 + 56 | 0; //@line 21395
   HEAP32[$231 >> 2] = $28; //@line 21396
   $232 = $ReallocAsyncCtx5 + 60 | 0; //@line 21397
   HEAP32[$232 >> 2] = $30; //@line 21398
   $233 = $ReallocAsyncCtx5 + 64 | 0; //@line 21399
   HEAP32[$233 >> 2] = $32; //@line 21400
   $234 = $ReallocAsyncCtx5 + 68 | 0; //@line 21401
   HEAP32[$234 >> 2] = $34; //@line 21402
   $235 = $ReallocAsyncCtx5 + 72 | 0; //@line 21403
   HEAP32[$235 >> 2] = $36; //@line 21404
   $236 = $ReallocAsyncCtx5 + 76 | 0; //@line 21405
   HEAP32[$236 >> 2] = $38; //@line 21406
   $237 = $ReallocAsyncCtx5 + 80 | 0; //@line 21407
   HEAP32[$237 >> 2] = $40; //@line 21408
   $238 = $ReallocAsyncCtx5 + 84 | 0; //@line 21409
   HEAP32[$238 >> 2] = $42; //@line 21410
   $239 = $ReallocAsyncCtx5 + 88 | 0; //@line 21411
   HEAP32[$239 >> 2] = $44; //@line 21412
   $240 = $ReallocAsyncCtx5 + 92 | 0; //@line 21413
   HEAP32[$240 >> 2] = $46; //@line 21414
   $241 = $ReallocAsyncCtx5 + 96 | 0; //@line 21415
   HEAP32[$241 >> 2] = $48; //@line 21416
   $242 = $ReallocAsyncCtx5 + 100 | 0; //@line 21417
   HEAP32[$242 >> 2] = $50; //@line 21418
   sp = STACKTOP; //@line 21419
   return;
  }
  ___async_unwind = 0; //@line 21422
  HEAP32[$ReallocAsyncCtx5 >> 2] = 195; //@line 21423
  $218 = $ReallocAsyncCtx5 + 4 | 0; //@line 21424
  HEAP32[$218 >> 2] = $4; //@line 21425
  $219 = $ReallocAsyncCtx5 + 8 | 0; //@line 21426
  HEAP32[$219 >> 2] = $6; //@line 21427
  $220 = $ReallocAsyncCtx5 + 12 | 0; //@line 21428
  HEAP32[$220 >> 2] = $8; //@line 21429
  $221 = $ReallocAsyncCtx5 + 16 | 0; //@line 21430
  HEAP32[$221 >> 2] = $10; //@line 21431
  $222 = $ReallocAsyncCtx5 + 20 | 0; //@line 21432
  HEAP32[$222 >> 2] = $12; //@line 21433
  $223 = $ReallocAsyncCtx5 + 24 | 0; //@line 21434
  HEAP32[$223 >> 2] = $14; //@line 21435
  $224 = $ReallocAsyncCtx5 + 28 | 0; //@line 21436
  HEAP32[$224 >> 2] = $16; //@line 21437
  $225 = $ReallocAsyncCtx5 + 32 | 0; //@line 21438
  HEAP32[$225 >> 2] = $18; //@line 21439
  $226 = $ReallocAsyncCtx5 + 36 | 0; //@line 21440
  HEAP32[$226 >> 2] = $20; //@line 21441
  $227 = $ReallocAsyncCtx5 + 40 | 0; //@line 21442
  HEAP32[$227 >> 2] = $22; //@line 21443
  $228 = $ReallocAsyncCtx5 + 44 | 0; //@line 21444
  HEAP32[$228 >> 2] = $24; //@line 21445
  $229 = $ReallocAsyncCtx5 + 48 | 0; //@line 21446
  HEAP32[$229 >> 2] = $2; //@line 21447
  $230 = $ReallocAsyncCtx5 + 52 | 0; //@line 21448
  HEAP32[$230 >> 2] = $26; //@line 21449
  $231 = $ReallocAsyncCtx5 + 56 | 0; //@line 21450
  HEAP32[$231 >> 2] = $28; //@line 21451
  $232 = $ReallocAsyncCtx5 + 60 | 0; //@line 21452
  HEAP32[$232 >> 2] = $30; //@line 21453
  $233 = $ReallocAsyncCtx5 + 64 | 0; //@line 21454
  HEAP32[$233 >> 2] = $32; //@line 21455
  $234 = $ReallocAsyncCtx5 + 68 | 0; //@line 21456
  HEAP32[$234 >> 2] = $34; //@line 21457
  $235 = $ReallocAsyncCtx5 + 72 | 0; //@line 21458
  HEAP32[$235 >> 2] = $36; //@line 21459
  $236 = $ReallocAsyncCtx5 + 76 | 0; //@line 21460
  HEAP32[$236 >> 2] = $38; //@line 21461
  $237 = $ReallocAsyncCtx5 + 80 | 0; //@line 21462
  HEAP32[$237 >> 2] = $40; //@line 21463
  $238 = $ReallocAsyncCtx5 + 84 | 0; //@line 21464
  HEAP32[$238 >> 2] = $42; //@line 21465
  $239 = $ReallocAsyncCtx5 + 88 | 0; //@line 21466
  HEAP32[$239 >> 2] = $44; //@line 21467
  $240 = $ReallocAsyncCtx5 + 92 | 0; //@line 21468
  HEAP32[$240 >> 2] = $46; //@line 21469
  $241 = $ReallocAsyncCtx5 + 96 | 0; //@line 21470
  HEAP32[$241 >> 2] = $48; //@line 21471
  $242 = $ReallocAsyncCtx5 + 100 | 0; //@line 21472
  HEAP32[$242 >> 2] = $50; //@line 21473
  sp = STACKTOP; //@line 21474
  return;
 }
 $243 = HEAP32[$4 >> 2] | 0; //@line 21477
 if (!$243) {
  $$02972$reg2mem$0 = $50; //@line 21480
  $$03071$reg2mem$0 = $48; //@line 21480
  $$reg2mem$0 = $46; //@line 21480
 } else {
  $246 = HEAP32[$243 + 8 >> 2] | 0; //@line 21483
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 21484
  FUNCTION_TABLE_vi[$246 & 511]($10); //@line 21485
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 196; //@line 21488
   $247 = $ReallocAsyncCtx6 + 4 | 0; //@line 21489
   HEAP32[$247 >> 2] = $4; //@line 21490
   $248 = $ReallocAsyncCtx6 + 8 | 0; //@line 21491
   HEAP32[$248 >> 2] = $6; //@line 21492
   $249 = $ReallocAsyncCtx6 + 12 | 0; //@line 21493
   HEAP32[$249 >> 2] = $8; //@line 21494
   $250 = $ReallocAsyncCtx6 + 16 | 0; //@line 21495
   HEAP32[$250 >> 2] = $10; //@line 21496
   $251 = $ReallocAsyncCtx6 + 20 | 0; //@line 21497
   HEAP32[$251 >> 2] = $12; //@line 21498
   $252 = $ReallocAsyncCtx6 + 24 | 0; //@line 21499
   HEAP32[$252 >> 2] = $14; //@line 21500
   $253 = $ReallocAsyncCtx6 + 28 | 0; //@line 21501
   HEAP32[$253 >> 2] = $16; //@line 21502
   $254 = $ReallocAsyncCtx6 + 32 | 0; //@line 21503
   HEAP32[$254 >> 2] = $18; //@line 21504
   $255 = $ReallocAsyncCtx6 + 36 | 0; //@line 21505
   HEAP32[$255 >> 2] = $20; //@line 21506
   $256 = $ReallocAsyncCtx6 + 40 | 0; //@line 21507
   HEAP32[$256 >> 2] = $22; //@line 21508
   $257 = $ReallocAsyncCtx6 + 44 | 0; //@line 21509
   HEAP32[$257 >> 2] = $24; //@line 21510
   $258 = $ReallocAsyncCtx6 + 48 | 0; //@line 21511
   HEAP32[$258 >> 2] = $2; //@line 21512
   $259 = $ReallocAsyncCtx6 + 52 | 0; //@line 21513
   HEAP32[$259 >> 2] = $26; //@line 21514
   $260 = $ReallocAsyncCtx6 + 56 | 0; //@line 21515
   HEAP32[$260 >> 2] = $28; //@line 21516
   $261 = $ReallocAsyncCtx6 + 60 | 0; //@line 21517
   HEAP32[$261 >> 2] = $30; //@line 21518
   $262 = $ReallocAsyncCtx6 + 64 | 0; //@line 21519
   HEAP32[$262 >> 2] = $32; //@line 21520
   $263 = $ReallocAsyncCtx6 + 68 | 0; //@line 21521
   HEAP32[$263 >> 2] = $34; //@line 21522
   $264 = $ReallocAsyncCtx6 + 72 | 0; //@line 21523
   HEAP32[$264 >> 2] = $36; //@line 21524
   $265 = $ReallocAsyncCtx6 + 76 | 0; //@line 21525
   HEAP32[$265 >> 2] = $38; //@line 21526
   $266 = $ReallocAsyncCtx6 + 80 | 0; //@line 21527
   HEAP32[$266 >> 2] = $40; //@line 21528
   $267 = $ReallocAsyncCtx6 + 84 | 0; //@line 21529
   HEAP32[$267 >> 2] = $42; //@line 21530
   $268 = $ReallocAsyncCtx6 + 88 | 0; //@line 21531
   HEAP32[$268 >> 2] = $44; //@line 21532
   $269 = $ReallocAsyncCtx6 + 92 | 0; //@line 21533
   HEAP32[$269 >> 2] = $46; //@line 21534
   $270 = $ReallocAsyncCtx6 + 96 | 0; //@line 21535
   HEAP32[$270 >> 2] = $48; //@line 21536
   $271 = $ReallocAsyncCtx6 + 100 | 0; //@line 21537
   HEAP32[$271 >> 2] = $50; //@line 21538
   sp = STACKTOP; //@line 21539
   return;
  }
  ___async_unwind = 0; //@line 21542
  HEAP32[$ReallocAsyncCtx6 >> 2] = 196; //@line 21543
  $247 = $ReallocAsyncCtx6 + 4 | 0; //@line 21544
  HEAP32[$247 >> 2] = $4; //@line 21545
  $248 = $ReallocAsyncCtx6 + 8 | 0; //@line 21546
  HEAP32[$248 >> 2] = $6; //@line 21547
  $249 = $ReallocAsyncCtx6 + 12 | 0; //@line 21548
  HEAP32[$249 >> 2] = $8; //@line 21549
  $250 = $ReallocAsyncCtx6 + 16 | 0; //@line 21550
  HEAP32[$250 >> 2] = $10; //@line 21551
  $251 = $ReallocAsyncCtx6 + 20 | 0; //@line 21552
  HEAP32[$251 >> 2] = $12; //@line 21553
  $252 = $ReallocAsyncCtx6 + 24 | 0; //@line 21554
  HEAP32[$252 >> 2] = $14; //@line 21555
  $253 = $ReallocAsyncCtx6 + 28 | 0; //@line 21556
  HEAP32[$253 >> 2] = $16; //@line 21557
  $254 = $ReallocAsyncCtx6 + 32 | 0; //@line 21558
  HEAP32[$254 >> 2] = $18; //@line 21559
  $255 = $ReallocAsyncCtx6 + 36 | 0; //@line 21560
  HEAP32[$255 >> 2] = $20; //@line 21561
  $256 = $ReallocAsyncCtx6 + 40 | 0; //@line 21562
  HEAP32[$256 >> 2] = $22; //@line 21563
  $257 = $ReallocAsyncCtx6 + 44 | 0; //@line 21564
  HEAP32[$257 >> 2] = $24; //@line 21565
  $258 = $ReallocAsyncCtx6 + 48 | 0; //@line 21566
  HEAP32[$258 >> 2] = $2; //@line 21567
  $259 = $ReallocAsyncCtx6 + 52 | 0; //@line 21568
  HEAP32[$259 >> 2] = $26; //@line 21569
  $260 = $ReallocAsyncCtx6 + 56 | 0; //@line 21570
  HEAP32[$260 >> 2] = $28; //@line 21571
  $261 = $ReallocAsyncCtx6 + 60 | 0; //@line 21572
  HEAP32[$261 >> 2] = $30; //@line 21573
  $262 = $ReallocAsyncCtx6 + 64 | 0; //@line 21574
  HEAP32[$262 >> 2] = $32; //@line 21575
  $263 = $ReallocAsyncCtx6 + 68 | 0; //@line 21576
  HEAP32[$263 >> 2] = $34; //@line 21577
  $264 = $ReallocAsyncCtx6 + 72 | 0; //@line 21578
  HEAP32[$264 >> 2] = $36; //@line 21579
  $265 = $ReallocAsyncCtx6 + 76 | 0; //@line 21580
  HEAP32[$265 >> 2] = $38; //@line 21581
  $266 = $ReallocAsyncCtx6 + 80 | 0; //@line 21582
  HEAP32[$266 >> 2] = $40; //@line 21583
  $267 = $ReallocAsyncCtx6 + 84 | 0; //@line 21584
  HEAP32[$267 >> 2] = $42; //@line 21585
  $268 = $ReallocAsyncCtx6 + 88 | 0; //@line 21586
  HEAP32[$268 >> 2] = $44; //@line 21587
  $269 = $ReallocAsyncCtx6 + 92 | 0; //@line 21588
  HEAP32[$269 >> 2] = $46; //@line 21589
  $270 = $ReallocAsyncCtx6 + 96 | 0; //@line 21590
  HEAP32[$270 >> 2] = $48; //@line 21591
  $271 = $ReallocAsyncCtx6 + 100 | 0; //@line 21592
  HEAP32[$271 >> 2] = $50; //@line 21593
  sp = STACKTOP; //@line 21594
  return;
 }
 L15 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 21601
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 21601
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 21603
   $$131 = $$03071$reg2mem$0; //@line 21603
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 21606
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 21609
    break L15;
   }
   $52 = 7796 + ($$02972$reg2mem$1 << 2) | 0; //@line 21612
   $54 = HEAP32[$52 >> 2] | 0; //@line 21613
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 21625
   break;
  }
  $84 = $54 + 72 | 0; //@line 21628
  $85 = HEAP32[$84 >> 2] | 0; //@line 21629
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 21633
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 21639
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 21643
  $151 = $150 + 76 | 0; //@line 21644
  $152 = HEAP32[$151 >> 2] | 0; //@line 21645
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 21648
   $$03071$reg2mem$0 = $$131; //@line 21648
   $$reg2mem$0 = $52; //@line 21648
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 21653
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 21657
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 21658
  $$03071$reg2mem$0 = $$131; //@line 21658
  $$reg2mem$0 = $52; //@line 21658
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8676] = 0; //@line 21663
   return;
  }
  $275 = $$131 + 44 | 0; //@line 21666
  $276 = HEAP32[$275 >> 2] | 0; //@line 21667
  if (!$276) {
   $284 = $2 + 12 | 0; //@line 21670
   HEAP32[$284 >> 2] = 0; //@line 21671
   $286 = $32 + 4 | 0; //@line 21673
   HEAP32[$286 >> 2] = 0; //@line 21675
   HEAP32[$286 + 4 >> 2] = 0; //@line 21678
   HEAP32[$32 >> 2] = 3; //@line 21679
   $290 = $32 + 12 | 0; //@line 21680
   HEAP32[$290 >> 2] = 752; //@line 21681
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 21682
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $32) | 0; //@line 21683
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 21686
    $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 21687
    HEAP32[$291 >> 2] = $290; //@line 21688
    $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 21689
    HEAP32[$292 >> 2] = $284; //@line 21690
    $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 21691
    HEAP32[$293 >> 2] = $32; //@line 21692
    $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 21693
    HEAP32[$294 >> 2] = $2; //@line 21694
    sp = STACKTOP; //@line 21695
    return;
   }
   ___async_unwind = 0; //@line 21698
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 21699
   $291 = $ReallocAsyncCtx12 + 4 | 0; //@line 21700
   HEAP32[$291 >> 2] = $290; //@line 21701
   $292 = $ReallocAsyncCtx12 + 8 | 0; //@line 21702
   HEAP32[$292 >> 2] = $284; //@line 21703
   $293 = $ReallocAsyncCtx12 + 12 | 0; //@line 21704
   HEAP32[$293 >> 2] = $32; //@line 21705
   $294 = $ReallocAsyncCtx12 + 16 | 0; //@line 21706
   HEAP32[$294 >> 2] = $2; //@line 21707
   sp = STACKTOP; //@line 21708
   return;
  } else {
   $280 = HEAP32[$276 + 4 >> 2] | 0; //@line 21713
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 21714
   FUNCTION_TABLE_vii[$280 & 7]($2, $$131 + 32 | 0); //@line 21715
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 21718
    $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 21719
    HEAP32[$281 >> 2] = $275; //@line 21720
    $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 21721
    HEAP32[$282 >> 2] = $2; //@line 21722
    $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 21723
    HEAP32[$283 >> 2] = $32; //@line 21724
    sp = STACKTOP; //@line 21725
    return;
   }
   ___async_unwind = 0; //@line 21728
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 21729
   $281 = $ReallocAsyncCtx7 + 4 | 0; //@line 21730
   HEAP32[$281 >> 2] = $275; //@line 21731
   $282 = $ReallocAsyncCtx7 + 8 | 0; //@line 21732
   HEAP32[$282 >> 2] = $2; //@line 21733
   $283 = $ReallocAsyncCtx7 + 12 | 0; //@line 21734
   HEAP32[$283 >> 2] = $32; //@line 21735
   sp = STACKTOP; //@line 21736
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 21741
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 21742
  __ZL28nsapi_dns_query_async_deletei($59); //@line 21743
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 21746
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 21747
   HEAP32[$60 >> 2] = $2; //@line 21748
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 21749
   HEAP32[$61 >> 2] = $4; //@line 21750
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 21751
   HEAP32[$62 >> 2] = $6; //@line 21752
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 21753
   HEAP32[$63 >> 2] = $8; //@line 21754
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 21755
   HEAP32[$64 >> 2] = $10; //@line 21756
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 21757
   HEAP32[$65 >> 2] = $12; //@line 21758
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 21759
   HEAP32[$66 >> 2] = $14; //@line 21760
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 21761
   HEAP32[$67 >> 2] = $16; //@line 21762
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 21763
   HEAP32[$68 >> 2] = $18; //@line 21764
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 21765
   HEAP32[$69 >> 2] = $20; //@line 21766
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 21767
   HEAP32[$70 >> 2] = $22; //@line 21768
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 21769
   HEAP32[$71 >> 2] = $24; //@line 21770
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 21771
   HEAP32[$72 >> 2] = $26; //@line 21772
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 21773
   HEAP32[$73 >> 2] = $28; //@line 21774
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 21775
   HEAP32[$74 >> 2] = $30; //@line 21776
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 21777
   HEAP32[$75 >> 2] = $32; //@line 21778
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 21779
   HEAP32[$76 >> 2] = $34; //@line 21780
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 21781
   HEAP32[$77 >> 2] = $36; //@line 21782
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 21783
   HEAP32[$78 >> 2] = $38; //@line 21784
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 21785
   HEAP32[$79 >> 2] = $40; //@line 21786
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 21787
   HEAP32[$80 >> 2] = $42; //@line 21788
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 21789
   HEAP32[$81 >> 2] = $44; //@line 21790
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 21791
   HEAP32[$82 >> 2] = $$131; //@line 21792
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 21793
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 21794
   sp = STACKTOP; //@line 21795
   return;
  }
  ___async_unwind = 0; //@line 21798
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 21799
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 21800
  HEAP32[$60 >> 2] = $2; //@line 21801
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 21802
  HEAP32[$61 >> 2] = $4; //@line 21803
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 21804
  HEAP32[$62 >> 2] = $6; //@line 21805
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 21806
  HEAP32[$63 >> 2] = $8; //@line 21807
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 21808
  HEAP32[$64 >> 2] = $10; //@line 21809
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 21810
  HEAP32[$65 >> 2] = $12; //@line 21811
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 21812
  HEAP32[$66 >> 2] = $14; //@line 21813
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 21814
  HEAP32[$67 >> 2] = $16; //@line 21815
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 21816
  HEAP32[$68 >> 2] = $18; //@line 21817
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 21818
  HEAP32[$69 >> 2] = $20; //@line 21819
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 21820
  HEAP32[$70 >> 2] = $22; //@line 21821
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 21822
  HEAP32[$71 >> 2] = $24; //@line 21823
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 21824
  HEAP32[$72 >> 2] = $26; //@line 21825
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 21826
  HEAP32[$73 >> 2] = $28; //@line 21827
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 21828
  HEAP32[$74 >> 2] = $30; //@line 21829
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 21830
  HEAP32[$75 >> 2] = $32; //@line 21831
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 21832
  HEAP32[$76 >> 2] = $34; //@line 21833
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 21834
  HEAP32[$77 >> 2] = $36; //@line 21835
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 21836
  HEAP32[$78 >> 2] = $38; //@line 21837
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 21838
  HEAP32[$79 >> 2] = $40; //@line 21839
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 21840
  HEAP32[$80 >> 2] = $42; //@line 21841
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 21842
  HEAP32[$81 >> 2] = $44; //@line 21843
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 21844
  HEAP32[$82 >> 2] = $$131; //@line 21845
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 21846
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 21847
  sp = STACKTOP; //@line 21848
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 21853
  $92 = $54 + 44 | 0; //@line 21854
  $93 = HEAP32[$92 >> 2] | 0; //@line 21855
  if (!$93) {
   HEAP32[$34 >> 2] = 0; //@line 21858
   $124 = HEAP32[$54 >> 2] | 0; //@line 21859
   HEAP32[$36 >> 2] = 0; //@line 21860
   HEAP32[$38 >> 2] = 188; //@line 21861
   HEAP32[$40 >> 2] = $124; //@line 21862
   HEAP32[$8 >> 2] = 764; //@line 21863
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 21864
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 21865
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 21868
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 21869
    HEAP32[$125 >> 2] = $2; //@line 21870
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 21871
    HEAP32[$126 >> 2] = $4; //@line 21872
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 21873
    HEAP32[$127 >> 2] = $6; //@line 21874
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 21875
    HEAP32[$128 >> 2] = $8; //@line 21876
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 21877
    HEAP32[$129 >> 2] = $10; //@line 21878
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 21879
    HEAP32[$130 >> 2] = $12; //@line 21880
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 21881
    HEAP32[$131 >> 2] = $14; //@line 21882
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 21883
    HEAP32[$132 >> 2] = $16; //@line 21884
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 21885
    HEAP32[$133 >> 2] = $18; //@line 21886
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 21887
    HEAP32[$134 >> 2] = $20; //@line 21888
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 21889
    HEAP32[$135 >> 2] = $22; //@line 21890
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 21891
    HEAP32[$136 >> 2] = $24; //@line 21892
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 21893
    HEAP32[$137 >> 2] = $26; //@line 21894
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 21895
    HEAP32[$138 >> 2] = $28; //@line 21896
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 21897
    HEAP32[$139 >> 2] = $30; //@line 21898
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 21899
    HEAP32[$140 >> 2] = $32; //@line 21900
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 21901
    HEAP32[$141 >> 2] = $34; //@line 21902
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 21903
    HEAP32[$142 >> 2] = $36; //@line 21904
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 21905
    HEAP32[$143 >> 2] = $38; //@line 21906
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 21907
    HEAP32[$144 >> 2] = $40; //@line 21908
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 21909
    HEAP32[$145 >> 2] = $42; //@line 21910
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 21911
    HEAP32[$146 >> 2] = $44; //@line 21912
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 21913
    HEAP32[$147 >> 2] = $52; //@line 21914
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 21915
    HEAP32[$148 >> 2] = $$131; //@line 21916
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 21917
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 21918
    sp = STACKTOP; //@line 21919
    return;
   }
   ___async_unwind = 0; //@line 21922
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 21923
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 21924
   HEAP32[$125 >> 2] = $2; //@line 21925
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 21926
   HEAP32[$126 >> 2] = $4; //@line 21927
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 21928
   HEAP32[$127 >> 2] = $6; //@line 21929
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 21930
   HEAP32[$128 >> 2] = $8; //@line 21931
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 21932
   HEAP32[$129 >> 2] = $10; //@line 21933
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 21934
   HEAP32[$130 >> 2] = $12; //@line 21935
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 21936
   HEAP32[$131 >> 2] = $14; //@line 21937
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 21938
   HEAP32[$132 >> 2] = $16; //@line 21939
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 21940
   HEAP32[$133 >> 2] = $18; //@line 21941
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 21942
   HEAP32[$134 >> 2] = $20; //@line 21943
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 21944
   HEAP32[$135 >> 2] = $22; //@line 21945
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 21946
   HEAP32[$136 >> 2] = $24; //@line 21947
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 21948
   HEAP32[$137 >> 2] = $26; //@line 21949
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 21950
   HEAP32[$138 >> 2] = $28; //@line 21951
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 21952
   HEAP32[$139 >> 2] = $30; //@line 21953
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 21954
   HEAP32[$140 >> 2] = $32; //@line 21955
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 21956
   HEAP32[$141 >> 2] = $34; //@line 21957
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 21958
   HEAP32[$142 >> 2] = $36; //@line 21959
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 21960
   HEAP32[$143 >> 2] = $38; //@line 21961
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 21962
   HEAP32[$144 >> 2] = $40; //@line 21963
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 21964
   HEAP32[$145 >> 2] = $42; //@line 21965
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 21966
   HEAP32[$146 >> 2] = $44; //@line 21967
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 21968
   HEAP32[$147 >> 2] = $52; //@line 21969
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 21970
   HEAP32[$148 >> 2] = $$131; //@line 21971
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 21972
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 21973
   sp = STACKTOP; //@line 21974
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 21979
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 21980
   FUNCTION_TABLE_vii[$97 & 7]($30, $54 + 32 | 0); //@line 21981
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 21984
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 21985
    HEAP32[$98 >> 2] = $4; //@line 21986
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 21987
    HEAP32[$99 >> 2] = $6; //@line 21988
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 21989
    HEAP32[$100 >> 2] = $8; //@line 21990
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 21991
    HEAP32[$101 >> 2] = $10; //@line 21992
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 21993
    HEAP32[$102 >> 2] = $12; //@line 21994
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 21995
    HEAP32[$103 >> 2] = $14; //@line 21996
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 21997
    HEAP32[$104 >> 2] = $16; //@line 21998
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 21999
    HEAP32[$105 >> 2] = $18; //@line 22000
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 22001
    HEAP32[$106 >> 2] = $20; //@line 22002
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 22003
    HEAP32[$107 >> 2] = $22; //@line 22004
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 22005
    HEAP32[$108 >> 2] = $24; //@line 22006
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 22007
    HEAP32[$109 >> 2] = $52; //@line 22008
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 22009
    HEAP32[$110 >> 2] = $92; //@line 22010
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 22011
    HEAP32[$111 >> 2] = $2; //@line 22012
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 22013
    HEAP32[$112 >> 2] = $26; //@line 22014
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 22015
    HEAP32[$113 >> 2] = $28; //@line 22016
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 22017
    HEAP32[$114 >> 2] = $30; //@line 22018
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 22019
    HEAP32[$115 >> 2] = $32; //@line 22020
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 22021
    HEAP32[$116 >> 2] = $34; //@line 22022
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 22023
    HEAP32[$117 >> 2] = $36; //@line 22024
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 22025
    HEAP32[$118 >> 2] = $38; //@line 22026
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 22027
    HEAP32[$119 >> 2] = $40; //@line 22028
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 22029
    HEAP32[$120 >> 2] = $42; //@line 22030
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 22031
    HEAP32[$121 >> 2] = $44; //@line 22032
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 22033
    HEAP32[$122 >> 2] = $$131; //@line 22034
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 22035
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 22036
    sp = STACKTOP; //@line 22037
    return;
   }
   ___async_unwind = 0; //@line 22040
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 22041
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 22042
   HEAP32[$98 >> 2] = $4; //@line 22043
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 22044
   HEAP32[$99 >> 2] = $6; //@line 22045
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 22046
   HEAP32[$100 >> 2] = $8; //@line 22047
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 22048
   HEAP32[$101 >> 2] = $10; //@line 22049
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 22050
   HEAP32[$102 >> 2] = $12; //@line 22051
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 22052
   HEAP32[$103 >> 2] = $14; //@line 22053
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 22054
   HEAP32[$104 >> 2] = $16; //@line 22055
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 22056
   HEAP32[$105 >> 2] = $18; //@line 22057
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 22058
   HEAP32[$106 >> 2] = $20; //@line 22059
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 22060
   HEAP32[$107 >> 2] = $22; //@line 22061
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 22062
   HEAP32[$108 >> 2] = $24; //@line 22063
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 22064
   HEAP32[$109 >> 2] = $52; //@line 22065
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 22066
   HEAP32[$110 >> 2] = $92; //@line 22067
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 22068
   HEAP32[$111 >> 2] = $2; //@line 22069
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 22070
   HEAP32[$112 >> 2] = $26; //@line 22071
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 22072
   HEAP32[$113 >> 2] = $28; //@line 22073
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 22074
   HEAP32[$114 >> 2] = $30; //@line 22075
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 22076
   HEAP32[$115 >> 2] = $32; //@line 22077
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 22078
   HEAP32[$116 >> 2] = $34; //@line 22079
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 22080
   HEAP32[$117 >> 2] = $36; //@line 22081
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 22082
   HEAP32[$118 >> 2] = $38; //@line 22083
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 22084
   HEAP32[$119 >> 2] = $40; //@line 22085
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 22086
   HEAP32[$120 >> 2] = $42; //@line 22087
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 22088
   HEAP32[$121 >> 2] = $44; //@line 22089
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 22090
   HEAP32[$122 >> 2] = $$131; //@line 22091
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 22092
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 22093
   sp = STACKTOP; //@line 22094
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 22099
  $156 = $150 + 44 | 0; //@line 22100
  $157 = HEAP32[$156 >> 2] | 0; //@line 22101
  if (!$157) {
   HEAP32[$12 >> 2] = 0; //@line 22104
   $188 = HEAP32[$150 >> 2] | 0; //@line 22105
   HEAP32[$14 >> 2] = 0; //@line 22106
   HEAP32[$16 >> 2] = 193; //@line 22107
   HEAP32[$18 >> 2] = $188; //@line 22108
   HEAP32[$20 >> 2] = 764; //@line 22109
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 22110
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 22111
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 22114
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 22115
    HEAP32[$189 >> 2] = $2; //@line 22116
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 22117
    HEAP32[$190 >> 2] = $4; //@line 22118
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 22119
    HEAP32[$191 >> 2] = $6; //@line 22120
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 22121
    HEAP32[$192 >> 2] = $8; //@line 22122
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 22123
    HEAP32[$193 >> 2] = $10; //@line 22124
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 22125
    HEAP32[$194 >> 2] = $12; //@line 22126
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 22127
    HEAP32[$195 >> 2] = $14; //@line 22128
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 22129
    HEAP32[$196 >> 2] = $16; //@line 22130
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 22131
    HEAP32[$197 >> 2] = $18; //@line 22132
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 22133
    HEAP32[$198 >> 2] = $20; //@line 22134
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 22135
    HEAP32[$199 >> 2] = $22; //@line 22136
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 22137
    HEAP32[$200 >> 2] = $24; //@line 22138
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 22139
    HEAP32[$201 >> 2] = $26; //@line 22140
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 22141
    HEAP32[$202 >> 2] = $28; //@line 22142
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 22143
    HEAP32[$203 >> 2] = $30; //@line 22144
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 22145
    HEAP32[$204 >> 2] = $32; //@line 22146
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 22147
    HEAP32[$205 >> 2] = $34; //@line 22148
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 22149
    HEAP32[$206 >> 2] = $36; //@line 22150
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 22151
    HEAP32[$207 >> 2] = $38; //@line 22152
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 22153
    HEAP32[$208 >> 2] = $40; //@line 22154
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 22155
    HEAP32[$209 >> 2] = $42; //@line 22156
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 22157
    HEAP32[$210 >> 2] = $44; //@line 22158
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 22159
    HEAP32[$211 >> 2] = $52; //@line 22160
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 22161
    HEAP32[$212 >> 2] = $$131; //@line 22162
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 22163
    HEAP32[$213 >> 2] = $$02972$reg2mem$1; //@line 22164
    sp = STACKTOP; //@line 22165
    return;
   }
   ___async_unwind = 0; //@line 22168
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 22169
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 22170
   HEAP32[$189 >> 2] = $2; //@line 22171
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 22172
   HEAP32[$190 >> 2] = $4; //@line 22173
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 22174
   HEAP32[$191 >> 2] = $6; //@line 22175
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 22176
   HEAP32[$192 >> 2] = $8; //@line 22177
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 22178
   HEAP32[$193 >> 2] = $10; //@line 22179
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 22180
   HEAP32[$194 >> 2] = $12; //@line 22181
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 22182
   HEAP32[$195 >> 2] = $14; //@line 22183
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 22184
   HEAP32[$196 >> 2] = $16; //@line 22185
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 22186
   HEAP32[$197 >> 2] = $18; //@line 22187
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 22188
   HEAP32[$198 >> 2] = $20; //@line 22189
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 22190
   HEAP32[$199 >> 2] = $22; //@line 22191
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 22192
   HEAP32[$200 >> 2] = $24; //@line 22193
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 22194
   HEAP32[$201 >> 2] = $26; //@line 22195
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 22196
   HEAP32[$202 >> 2] = $28; //@line 22197
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 22198
   HEAP32[$203 >> 2] = $30; //@line 22199
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 22200
   HEAP32[$204 >> 2] = $32; //@line 22201
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 22202
   HEAP32[$205 >> 2] = $34; //@line 22203
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 22204
   HEAP32[$206 >> 2] = $36; //@line 22205
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 22206
   HEAP32[$207 >> 2] = $38; //@line 22207
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 22208
   HEAP32[$208 >> 2] = $40; //@line 22209
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 22210
   HEAP32[$209 >> 2] = $42; //@line 22211
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 22212
   HEAP32[$210 >> 2] = $44; //@line 22213
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 22214
   HEAP32[$211 >> 2] = $52; //@line 22215
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 22216
   HEAP32[$212 >> 2] = $$131; //@line 22217
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 22218
   HEAP32[$213 >> 2] = $$02972$reg2mem$1; //@line 22219
   sp = STACKTOP; //@line 22220
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 22225
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 22226
   FUNCTION_TABLE_vii[$161 & 7]($10, $150 + 32 | 0); //@line 22227
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 22230
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 22231
    HEAP32[$162 >> 2] = $4; //@line 22232
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 22233
    HEAP32[$163 >> 2] = $6; //@line 22234
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 22235
    HEAP32[$164 >> 2] = $8; //@line 22236
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 22237
    HEAP32[$165 >> 2] = $10; //@line 22238
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 22239
    HEAP32[$166 >> 2] = $12; //@line 22240
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 22241
    HEAP32[$167 >> 2] = $14; //@line 22242
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 22243
    HEAP32[$168 >> 2] = $16; //@line 22244
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 22245
    HEAP32[$169 >> 2] = $18; //@line 22246
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 22247
    HEAP32[$170 >> 2] = $20; //@line 22248
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 22249
    HEAP32[$171 >> 2] = $22; //@line 22250
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 22251
    HEAP32[$172 >> 2] = $24; //@line 22252
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 22253
    HEAP32[$173 >> 2] = $2; //@line 22254
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 22255
    HEAP32[$174 >> 2] = $26; //@line 22256
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 22257
    HEAP32[$175 >> 2] = $28; //@line 22258
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 22259
    HEAP32[$176 >> 2] = $30; //@line 22260
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 22261
    HEAP32[$177 >> 2] = $32; //@line 22262
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 22263
    HEAP32[$178 >> 2] = $34; //@line 22264
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 22265
    HEAP32[$179 >> 2] = $36; //@line 22266
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 22267
    HEAP32[$180 >> 2] = $38; //@line 22268
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 22269
    HEAP32[$181 >> 2] = $40; //@line 22270
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 22271
    HEAP32[$182 >> 2] = $42; //@line 22272
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 22273
    HEAP32[$183 >> 2] = $44; //@line 22274
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 22275
    HEAP32[$184 >> 2] = $156; //@line 22276
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 22277
    HEAP32[$185 >> 2] = $52; //@line 22278
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 22279
    HEAP32[$186 >> 2] = $$131; //@line 22280
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 22281
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 22282
    sp = STACKTOP; //@line 22283
    return;
   }
   ___async_unwind = 0; //@line 22286
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 22287
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 22288
   HEAP32[$162 >> 2] = $4; //@line 22289
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 22290
   HEAP32[$163 >> 2] = $6; //@line 22291
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 22292
   HEAP32[$164 >> 2] = $8; //@line 22293
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 22294
   HEAP32[$165 >> 2] = $10; //@line 22295
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 22296
   HEAP32[$166 >> 2] = $12; //@line 22297
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 22298
   HEAP32[$167 >> 2] = $14; //@line 22299
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 22300
   HEAP32[$168 >> 2] = $16; //@line 22301
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 22302
   HEAP32[$169 >> 2] = $18; //@line 22303
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 22304
   HEAP32[$170 >> 2] = $20; //@line 22305
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 22306
   HEAP32[$171 >> 2] = $22; //@line 22307
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 22308
   HEAP32[$172 >> 2] = $24; //@line 22309
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 22310
   HEAP32[$173 >> 2] = $2; //@line 22311
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 22312
   HEAP32[$174 >> 2] = $26; //@line 22313
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 22314
   HEAP32[$175 >> 2] = $28; //@line 22315
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 22316
   HEAP32[$176 >> 2] = $30; //@line 22317
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 22318
   HEAP32[$177 >> 2] = $32; //@line 22319
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 22320
   HEAP32[$178 >> 2] = $34; //@line 22321
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 22322
   HEAP32[$179 >> 2] = $36; //@line 22323
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 22324
   HEAP32[$180 >> 2] = $38; //@line 22325
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 22326
   HEAP32[$181 >> 2] = $40; //@line 22327
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 22328
   HEAP32[$182 >> 2] = $42; //@line 22329
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 22330
   HEAP32[$183 >> 2] = $44; //@line 22331
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 22332
   HEAP32[$184 >> 2] = $156; //@line 22333
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 22334
   HEAP32[$185 >> 2] = $52; //@line 22335
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 22336
   HEAP32[$186 >> 2] = $$131; //@line 22337
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 22338
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 22339
   sp = STACKTOP; //@line 22340
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_12($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $185 = 0, $186 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $246 = 0, $247 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 16607
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16609
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16611
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16613
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16615
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16617
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16619
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16621
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16623
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16625
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16627
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16629
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16631
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 16633
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16635
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16637
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16639
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16641
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 16643
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16645
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 16647
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 16649
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 16651
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 16653
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 16655
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 16657
 $150 = HEAP32[$30 >> 2] | 0; //@line 16658
 if (!$150) {
  $$02972$reg2mem$0 = $50; //@line 16661
  $$03071$reg2mem$0 = $48; //@line 16661
  $$reg2mem$0 = $24; //@line 16661
 } else {
  $153 = HEAP32[$150 + 8 >> 2] | 0; //@line 16664
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 16665
  FUNCTION_TABLE_vi[$153 & 511]($32); //@line 16666
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 191; //@line 16669
   $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 16670
   HEAP32[$154 >> 2] = $2; //@line 16671
   $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 16672
   HEAP32[$155 >> 2] = $4; //@line 16673
   $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 16674
   HEAP32[$156 >> 2] = $6; //@line 16675
   $157 = $ReallocAsyncCtx3 + 16 | 0; //@line 16676
   HEAP32[$157 >> 2] = $8; //@line 16677
   $158 = $ReallocAsyncCtx3 + 20 | 0; //@line 16678
   HEAP32[$158 >> 2] = $10; //@line 16679
   $159 = $ReallocAsyncCtx3 + 24 | 0; //@line 16680
   HEAP32[$159 >> 2] = $12; //@line 16681
   $160 = $ReallocAsyncCtx3 + 28 | 0; //@line 16682
   HEAP32[$160 >> 2] = $14; //@line 16683
   $161 = $ReallocAsyncCtx3 + 32 | 0; //@line 16684
   HEAP32[$161 >> 2] = $16; //@line 16685
   $162 = $ReallocAsyncCtx3 + 36 | 0; //@line 16686
   HEAP32[$162 >> 2] = $18; //@line 16687
   $163 = $ReallocAsyncCtx3 + 40 | 0; //@line 16688
   HEAP32[$163 >> 2] = $20; //@line 16689
   $164 = $ReallocAsyncCtx3 + 44 | 0; //@line 16690
   HEAP32[$164 >> 2] = $22; //@line 16691
   $165 = $ReallocAsyncCtx3 + 48 | 0; //@line 16692
   HEAP32[$165 >> 2] = $24; //@line 16693
   $166 = $ReallocAsyncCtx3 + 52 | 0; //@line 16694
   HEAP32[$166 >> 2] = $26; //@line 16695
   $167 = $ReallocAsyncCtx3 + 56 | 0; //@line 16696
   HEAP32[$167 >> 2] = $28; //@line 16697
   $168 = $ReallocAsyncCtx3 + 60 | 0; //@line 16698
   HEAP32[$168 >> 2] = $30; //@line 16699
   $169 = $ReallocAsyncCtx3 + 64 | 0; //@line 16700
   HEAP32[$169 >> 2] = $32; //@line 16701
   $170 = $ReallocAsyncCtx3 + 68 | 0; //@line 16702
   HEAP32[$170 >> 2] = $34; //@line 16703
   $171 = $ReallocAsyncCtx3 + 72 | 0; //@line 16704
   HEAP32[$171 >> 2] = $36; //@line 16705
   $172 = $ReallocAsyncCtx3 + 76 | 0; //@line 16706
   HEAP32[$172 >> 2] = $38; //@line 16707
   $173 = $ReallocAsyncCtx3 + 80 | 0; //@line 16708
   HEAP32[$173 >> 2] = $40; //@line 16709
   $174 = $ReallocAsyncCtx3 + 84 | 0; //@line 16710
   HEAP32[$174 >> 2] = $42; //@line 16711
   $175 = $ReallocAsyncCtx3 + 88 | 0; //@line 16712
   HEAP32[$175 >> 2] = $44; //@line 16713
   $176 = $ReallocAsyncCtx3 + 92 | 0; //@line 16714
   HEAP32[$176 >> 2] = $46; //@line 16715
   $177 = $ReallocAsyncCtx3 + 96 | 0; //@line 16716
   HEAP32[$177 >> 2] = $48; //@line 16717
   $178 = $ReallocAsyncCtx3 + 100 | 0; //@line 16718
   HEAP32[$178 >> 2] = $50; //@line 16719
   sp = STACKTOP; //@line 16720
   return;
  }
  ___async_unwind = 0; //@line 16723
  HEAP32[$ReallocAsyncCtx3 >> 2] = 191; //@line 16724
  $154 = $ReallocAsyncCtx3 + 4 | 0; //@line 16725
  HEAP32[$154 >> 2] = $2; //@line 16726
  $155 = $ReallocAsyncCtx3 + 8 | 0; //@line 16727
  HEAP32[$155 >> 2] = $4; //@line 16728
  $156 = $ReallocAsyncCtx3 + 12 | 0; //@line 16729
  HEAP32[$156 >> 2] = $6; //@line 16730
  $157 = $ReallocAsyncCtx3 + 16 | 0; //@line 16731
  HEAP32[$157 >> 2] = $8; //@line 16732
  $158 = $ReallocAsyncCtx3 + 20 | 0; //@line 16733
  HEAP32[$158 >> 2] = $10; //@line 16734
  $159 = $ReallocAsyncCtx3 + 24 | 0; //@line 16735
  HEAP32[$159 >> 2] = $12; //@line 16736
  $160 = $ReallocAsyncCtx3 + 28 | 0; //@line 16737
  HEAP32[$160 >> 2] = $14; //@line 16738
  $161 = $ReallocAsyncCtx3 + 32 | 0; //@line 16739
  HEAP32[$161 >> 2] = $16; //@line 16740
  $162 = $ReallocAsyncCtx3 + 36 | 0; //@line 16741
  HEAP32[$162 >> 2] = $18; //@line 16742
  $163 = $ReallocAsyncCtx3 + 40 | 0; //@line 16743
  HEAP32[$163 >> 2] = $20; //@line 16744
  $164 = $ReallocAsyncCtx3 + 44 | 0; //@line 16745
  HEAP32[$164 >> 2] = $22; //@line 16746
  $165 = $ReallocAsyncCtx3 + 48 | 0; //@line 16747
  HEAP32[$165 >> 2] = $24; //@line 16748
  $166 = $ReallocAsyncCtx3 + 52 | 0; //@line 16749
  HEAP32[$166 >> 2] = $26; //@line 16750
  $167 = $ReallocAsyncCtx3 + 56 | 0; //@line 16751
  HEAP32[$167 >> 2] = $28; //@line 16752
  $168 = $ReallocAsyncCtx3 + 60 | 0; //@line 16753
  HEAP32[$168 >> 2] = $30; //@line 16754
  $169 = $ReallocAsyncCtx3 + 64 | 0; //@line 16755
  HEAP32[$169 >> 2] = $32; //@line 16756
  $170 = $ReallocAsyncCtx3 + 68 | 0; //@line 16757
  HEAP32[$170 >> 2] = $34; //@line 16758
  $171 = $ReallocAsyncCtx3 + 72 | 0; //@line 16759
  HEAP32[$171 >> 2] = $36; //@line 16760
  $172 = $ReallocAsyncCtx3 + 76 | 0; //@line 16761
  HEAP32[$172 >> 2] = $38; //@line 16762
  $173 = $ReallocAsyncCtx3 + 80 | 0; //@line 16763
  HEAP32[$173 >> 2] = $40; //@line 16764
  $174 = $ReallocAsyncCtx3 + 84 | 0; //@line 16765
  HEAP32[$174 >> 2] = $42; //@line 16766
  $175 = $ReallocAsyncCtx3 + 88 | 0; //@line 16767
  HEAP32[$175 >> 2] = $44; //@line 16768
  $176 = $ReallocAsyncCtx3 + 92 | 0; //@line 16769
  HEAP32[$176 >> 2] = $46; //@line 16770
  $177 = $ReallocAsyncCtx3 + 96 | 0; //@line 16771
  HEAP32[$177 >> 2] = $48; //@line 16772
  $178 = $ReallocAsyncCtx3 + 100 | 0; //@line 16773
  HEAP32[$178 >> 2] = $50; //@line 16774
  sp = STACKTOP; //@line 16775
  return;
 }
 L9 : while (1) {
  $179 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 16779
  $180 = $179 + 76 | 0; //@line 16780
  $181 = HEAP32[$180 >> 2] | 0; //@line 16781
  if ($181 | 0) {
   if ($181 >>> 0 <= 100) {
    label = 26; //@line 16786
    break;
   }
   HEAP32[$180 >> 2] = $181 + -100; //@line 16790
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 16795
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 16795
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 16797
   $$131 = $$03071$reg2mem$0; //@line 16797
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 16800
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 16803
    break L9;
   }
   $52 = 7796 + ($$02972$reg2mem$1 << 2) | 0; //@line 16806
   $54 = HEAP32[$52 >> 2] | 0; //@line 16807
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 16819
   break;
  }
  $84 = $54 + 72 | 0; //@line 16822
  $85 = HEAP32[$84 >> 2] | 0; //@line 16823
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 16827
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 16828
   $$03071$reg2mem$0 = $$131; //@line 16828
   $$reg2mem$0 = $52; //@line 16828
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 16835
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 16838
    $$03071$reg2mem$0 = $$131; //@line 16838
    $$reg2mem$0 = $52; //@line 16838
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8676] = 0; //@line 16846
   return;
  }
  $246 = $$131 + 44 | 0; //@line 16849
  $247 = HEAP32[$246 >> 2] | 0; //@line 16850
  if (!$247) {
   $255 = $26 + 12 | 0; //@line 16853
   HEAP32[$255 >> 2] = 0; //@line 16854
   $257 = $34 + 4 | 0; //@line 16856
   HEAP32[$257 >> 2] = 0; //@line 16858
   HEAP32[$257 + 4 >> 2] = 0; //@line 16861
   HEAP32[$34 >> 2] = 3; //@line 16862
   $261 = $34 + 12 | 0; //@line 16863
   HEAP32[$261 >> 2] = 752; //@line 16864
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 16865
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($26, 100, $34) | 0; //@line 16866
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 16869
    $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 16870
    HEAP32[$262 >> 2] = $261; //@line 16871
    $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 16872
    HEAP32[$263 >> 2] = $255; //@line 16873
    $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 16874
    HEAP32[$264 >> 2] = $34; //@line 16875
    $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 16876
    HEAP32[$265 >> 2] = $26; //@line 16877
    sp = STACKTOP; //@line 16878
    return;
   }
   ___async_unwind = 0; //@line 16881
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 16882
   $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 16883
   HEAP32[$262 >> 2] = $261; //@line 16884
   $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 16885
   HEAP32[$263 >> 2] = $255; //@line 16886
   $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 16887
   HEAP32[$264 >> 2] = $34; //@line 16888
   $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 16889
   HEAP32[$265 >> 2] = $26; //@line 16890
   sp = STACKTOP; //@line 16891
   return;
  } else {
   $251 = HEAP32[$247 + 4 >> 2] | 0; //@line 16896
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 16897
   FUNCTION_TABLE_vii[$251 & 7]($26, $$131 + 32 | 0); //@line 16898
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 16901
    $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 16902
    HEAP32[$252 >> 2] = $246; //@line 16903
    $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 16904
    HEAP32[$253 >> 2] = $26; //@line 16905
    $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 16906
    HEAP32[$254 >> 2] = $34; //@line 16907
    sp = STACKTOP; //@line 16908
    return;
   }
   ___async_unwind = 0; //@line 16911
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 16912
   $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 16913
   HEAP32[$252 >> 2] = $246; //@line 16914
   $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 16915
   HEAP32[$253 >> 2] = $26; //@line 16916
   $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 16917
   HEAP32[$254 >> 2] = $34; //@line 16918
   sp = STACKTOP; //@line 16919
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 16924
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 16925
  __ZL28nsapi_dns_query_async_deletei($59); //@line 16926
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 16929
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 16930
   HEAP32[$60 >> 2] = $26; //@line 16931
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 16932
   HEAP32[$61 >> 2] = $2; //@line 16933
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 16934
   HEAP32[$62 >> 2] = $4; //@line 16935
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 16936
   HEAP32[$63 >> 2] = $6; //@line 16937
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 16938
   HEAP32[$64 >> 2] = $8; //@line 16939
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 16940
   HEAP32[$65 >> 2] = $10; //@line 16941
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 16942
   HEAP32[$66 >> 2] = $12; //@line 16943
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 16944
   HEAP32[$67 >> 2] = $14; //@line 16945
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 16946
   HEAP32[$68 >> 2] = $16; //@line 16947
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 16948
   HEAP32[$69 >> 2] = $18; //@line 16949
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 16950
   HEAP32[$70 >> 2] = $20; //@line 16951
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 16952
   HEAP32[$71 >> 2] = $22; //@line 16953
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 16954
   HEAP32[$72 >> 2] = $28; //@line 16955
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 16956
   HEAP32[$73 >> 2] = $30; //@line 16957
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 16958
   HEAP32[$74 >> 2] = $32; //@line 16959
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 16960
   HEAP32[$75 >> 2] = $34; //@line 16961
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 16962
   HEAP32[$76 >> 2] = $36; //@line 16963
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 16964
   HEAP32[$77 >> 2] = $38; //@line 16965
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 16966
   HEAP32[$78 >> 2] = $40; //@line 16967
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 16968
   HEAP32[$79 >> 2] = $42; //@line 16969
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 16970
   HEAP32[$80 >> 2] = $44; //@line 16971
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 16972
   HEAP32[$81 >> 2] = $46; //@line 16973
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 16974
   HEAP32[$82 >> 2] = $$131; //@line 16975
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 16976
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 16977
   sp = STACKTOP; //@line 16978
   return;
  }
  ___async_unwind = 0; //@line 16981
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 16982
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 16983
  HEAP32[$60 >> 2] = $26; //@line 16984
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 16985
  HEAP32[$61 >> 2] = $2; //@line 16986
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 16987
  HEAP32[$62 >> 2] = $4; //@line 16988
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 16989
  HEAP32[$63 >> 2] = $6; //@line 16990
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 16991
  HEAP32[$64 >> 2] = $8; //@line 16992
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 16993
  HEAP32[$65 >> 2] = $10; //@line 16994
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 16995
  HEAP32[$66 >> 2] = $12; //@line 16996
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 16997
  HEAP32[$67 >> 2] = $14; //@line 16998
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 16999
  HEAP32[$68 >> 2] = $16; //@line 17000
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 17001
  HEAP32[$69 >> 2] = $18; //@line 17002
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 17003
  HEAP32[$70 >> 2] = $20; //@line 17004
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 17005
  HEAP32[$71 >> 2] = $22; //@line 17006
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 17007
  HEAP32[$72 >> 2] = $28; //@line 17008
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 17009
  HEAP32[$73 >> 2] = $30; //@line 17010
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 17011
  HEAP32[$74 >> 2] = $32; //@line 17012
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 17013
  HEAP32[$75 >> 2] = $34; //@line 17014
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 17015
  HEAP32[$76 >> 2] = $36; //@line 17016
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 17017
  HEAP32[$77 >> 2] = $38; //@line 17018
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 17019
  HEAP32[$78 >> 2] = $40; //@line 17020
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 17021
  HEAP32[$79 >> 2] = $42; //@line 17022
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 17023
  HEAP32[$80 >> 2] = $44; //@line 17024
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 17025
  HEAP32[$81 >> 2] = $46; //@line 17026
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 17027
  HEAP32[$82 >> 2] = $$131; //@line 17028
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 17029
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 17030
  sp = STACKTOP; //@line 17031
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 17036
  $92 = $54 + 44 | 0; //@line 17037
  $93 = HEAP32[$92 >> 2] | 0; //@line 17038
  if (!$93) {
   HEAP32[$36 >> 2] = 0; //@line 17041
   $124 = HEAP32[$54 >> 2] | 0; //@line 17042
   HEAP32[$38 >> 2] = 0; //@line 17043
   HEAP32[$40 >> 2] = 188; //@line 17044
   HEAP32[$42 >> 2] = $124; //@line 17045
   HEAP32[$6 >> 2] = 764; //@line 17046
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 17047
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 17048
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 17051
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 17052
    HEAP32[$125 >> 2] = $26; //@line 17053
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 17054
    HEAP32[$126 >> 2] = $2; //@line 17055
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 17056
    HEAP32[$127 >> 2] = $4; //@line 17057
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 17058
    HEAP32[$128 >> 2] = $6; //@line 17059
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 17060
    HEAP32[$129 >> 2] = $8; //@line 17061
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 17062
    HEAP32[$130 >> 2] = $10; //@line 17063
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 17064
    HEAP32[$131 >> 2] = $12; //@line 17065
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 17066
    HEAP32[$132 >> 2] = $14; //@line 17067
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 17068
    HEAP32[$133 >> 2] = $16; //@line 17069
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 17070
    HEAP32[$134 >> 2] = $18; //@line 17071
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 17072
    HEAP32[$135 >> 2] = $20; //@line 17073
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 17074
    HEAP32[$136 >> 2] = $22; //@line 17075
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 17076
    HEAP32[$137 >> 2] = $28; //@line 17077
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 17078
    HEAP32[$138 >> 2] = $30; //@line 17079
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 17080
    HEAP32[$139 >> 2] = $32; //@line 17081
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 17082
    HEAP32[$140 >> 2] = $34; //@line 17083
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 17084
    HEAP32[$141 >> 2] = $36; //@line 17085
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 17086
    HEAP32[$142 >> 2] = $38; //@line 17087
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 17088
    HEAP32[$143 >> 2] = $40; //@line 17089
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 17090
    HEAP32[$144 >> 2] = $42; //@line 17091
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 17092
    HEAP32[$145 >> 2] = $44; //@line 17093
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 17094
    HEAP32[$146 >> 2] = $46; //@line 17095
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 17096
    HEAP32[$147 >> 2] = $52; //@line 17097
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 17098
    HEAP32[$148 >> 2] = $$131; //@line 17099
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 17100
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 17101
    sp = STACKTOP; //@line 17102
    return;
   }
   ___async_unwind = 0; //@line 17105
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 17106
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 17107
   HEAP32[$125 >> 2] = $26; //@line 17108
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 17109
   HEAP32[$126 >> 2] = $2; //@line 17110
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 17111
   HEAP32[$127 >> 2] = $4; //@line 17112
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 17113
   HEAP32[$128 >> 2] = $6; //@line 17114
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 17115
   HEAP32[$129 >> 2] = $8; //@line 17116
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 17117
   HEAP32[$130 >> 2] = $10; //@line 17118
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 17119
   HEAP32[$131 >> 2] = $12; //@line 17120
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 17121
   HEAP32[$132 >> 2] = $14; //@line 17122
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 17123
   HEAP32[$133 >> 2] = $16; //@line 17124
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 17125
   HEAP32[$134 >> 2] = $18; //@line 17126
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 17127
   HEAP32[$135 >> 2] = $20; //@line 17128
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 17129
   HEAP32[$136 >> 2] = $22; //@line 17130
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 17131
   HEAP32[$137 >> 2] = $28; //@line 17132
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 17133
   HEAP32[$138 >> 2] = $30; //@line 17134
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 17135
   HEAP32[$139 >> 2] = $32; //@line 17136
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 17137
   HEAP32[$140 >> 2] = $34; //@line 17138
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 17139
   HEAP32[$141 >> 2] = $36; //@line 17140
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 17141
   HEAP32[$142 >> 2] = $38; //@line 17142
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 17143
   HEAP32[$143 >> 2] = $40; //@line 17144
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 17145
   HEAP32[$144 >> 2] = $42; //@line 17146
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 17147
   HEAP32[$145 >> 2] = $44; //@line 17148
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 17149
   HEAP32[$146 >> 2] = $46; //@line 17150
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 17151
   HEAP32[$147 >> 2] = $52; //@line 17152
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 17153
   HEAP32[$148 >> 2] = $$131; //@line 17154
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 17155
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 17156
   sp = STACKTOP; //@line 17157
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 17162
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 17163
   FUNCTION_TABLE_vii[$97 & 7]($32, $54 + 32 | 0); //@line 17164
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 17167
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 17168
    HEAP32[$98 >> 2] = $2; //@line 17169
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 17170
    HEAP32[$99 >> 2] = $4; //@line 17171
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 17172
    HEAP32[$100 >> 2] = $6; //@line 17173
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 17174
    HEAP32[$101 >> 2] = $8; //@line 17175
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 17176
    HEAP32[$102 >> 2] = $10; //@line 17177
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 17178
    HEAP32[$103 >> 2] = $12; //@line 17179
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 17180
    HEAP32[$104 >> 2] = $14; //@line 17181
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 17182
    HEAP32[$105 >> 2] = $16; //@line 17183
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 17184
    HEAP32[$106 >> 2] = $18; //@line 17185
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 17186
    HEAP32[$107 >> 2] = $20; //@line 17187
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 17188
    HEAP32[$108 >> 2] = $22; //@line 17189
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 17190
    HEAP32[$109 >> 2] = $52; //@line 17191
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 17192
    HEAP32[$110 >> 2] = $92; //@line 17193
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 17194
    HEAP32[$111 >> 2] = $26; //@line 17195
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 17196
    HEAP32[$112 >> 2] = $28; //@line 17197
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 17198
    HEAP32[$113 >> 2] = $30; //@line 17199
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 17200
    HEAP32[$114 >> 2] = $32; //@line 17201
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 17202
    HEAP32[$115 >> 2] = $34; //@line 17203
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 17204
    HEAP32[$116 >> 2] = $36; //@line 17205
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 17206
    HEAP32[$117 >> 2] = $38; //@line 17207
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 17208
    HEAP32[$118 >> 2] = $40; //@line 17209
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 17210
    HEAP32[$119 >> 2] = $42; //@line 17211
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 17212
    HEAP32[$120 >> 2] = $44; //@line 17213
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 17214
    HEAP32[$121 >> 2] = $46; //@line 17215
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 17216
    HEAP32[$122 >> 2] = $$131; //@line 17217
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 17218
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 17219
    sp = STACKTOP; //@line 17220
    return;
   }
   ___async_unwind = 0; //@line 17223
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 17224
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 17225
   HEAP32[$98 >> 2] = $2; //@line 17226
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 17227
   HEAP32[$99 >> 2] = $4; //@line 17228
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 17229
   HEAP32[$100 >> 2] = $6; //@line 17230
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 17231
   HEAP32[$101 >> 2] = $8; //@line 17232
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 17233
   HEAP32[$102 >> 2] = $10; //@line 17234
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 17235
   HEAP32[$103 >> 2] = $12; //@line 17236
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 17237
   HEAP32[$104 >> 2] = $14; //@line 17238
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 17239
   HEAP32[$105 >> 2] = $16; //@line 17240
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 17241
   HEAP32[$106 >> 2] = $18; //@line 17242
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 17243
   HEAP32[$107 >> 2] = $20; //@line 17244
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 17245
   HEAP32[$108 >> 2] = $22; //@line 17246
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 17247
   HEAP32[$109 >> 2] = $52; //@line 17248
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 17249
   HEAP32[$110 >> 2] = $92; //@line 17250
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 17251
   HEAP32[$111 >> 2] = $26; //@line 17252
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 17253
   HEAP32[$112 >> 2] = $28; //@line 17254
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 17255
   HEAP32[$113 >> 2] = $30; //@line 17256
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 17257
   HEAP32[$114 >> 2] = $32; //@line 17258
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 17259
   HEAP32[$115 >> 2] = $34; //@line 17260
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 17261
   HEAP32[$116 >> 2] = $36; //@line 17262
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 17263
   HEAP32[$117 >> 2] = $38; //@line 17264
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 17265
   HEAP32[$118 >> 2] = $40; //@line 17266
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 17267
   HEAP32[$119 >> 2] = $42; //@line 17268
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 17269
   HEAP32[$120 >> 2] = $44; //@line 17270
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 17271
   HEAP32[$121 >> 2] = $46; //@line 17272
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 17273
   HEAP32[$122 >> 2] = $$131; //@line 17274
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 17275
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 17276
   sp = STACKTOP; //@line 17277
   return;
  }
 } else if ((label | 0) == 26) {
  HEAP32[$180 >> 2] = 0; //@line 17282
  $185 = $179 + 44 | 0; //@line 17283
  $186 = HEAP32[$185 >> 2] | 0; //@line 17284
  if (!$186) {
   HEAP32[$10 >> 2] = 0; //@line 17287
   $217 = HEAP32[$179 >> 2] | 0; //@line 17288
   HEAP32[$12 >> 2] = 0; //@line 17289
   HEAP32[$14 >> 2] = 193; //@line 17290
   HEAP32[$16 >> 2] = $217; //@line 17291
   HEAP32[$18 >> 2] = 764; //@line 17292
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 17293
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 0, $22) | 0; //@line 17294
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 17297
    $218 = $ReallocAsyncCtx13 + 4 | 0; //@line 17298
    HEAP32[$218 >> 2] = $26; //@line 17299
    $219 = $ReallocAsyncCtx13 + 8 | 0; //@line 17300
    HEAP32[$219 >> 2] = $2; //@line 17301
    $220 = $ReallocAsyncCtx13 + 12 | 0; //@line 17302
    HEAP32[$220 >> 2] = $4; //@line 17303
    $221 = $ReallocAsyncCtx13 + 16 | 0; //@line 17304
    HEAP32[$221 >> 2] = $6; //@line 17305
    $222 = $ReallocAsyncCtx13 + 20 | 0; //@line 17306
    HEAP32[$222 >> 2] = $8; //@line 17307
    $223 = $ReallocAsyncCtx13 + 24 | 0; //@line 17308
    HEAP32[$223 >> 2] = $10; //@line 17309
    $224 = $ReallocAsyncCtx13 + 28 | 0; //@line 17310
    HEAP32[$224 >> 2] = $12; //@line 17311
    $225 = $ReallocAsyncCtx13 + 32 | 0; //@line 17312
    HEAP32[$225 >> 2] = $14; //@line 17313
    $226 = $ReallocAsyncCtx13 + 36 | 0; //@line 17314
    HEAP32[$226 >> 2] = $16; //@line 17315
    $227 = $ReallocAsyncCtx13 + 40 | 0; //@line 17316
    HEAP32[$227 >> 2] = $18; //@line 17317
    $228 = $ReallocAsyncCtx13 + 44 | 0; //@line 17318
    HEAP32[$228 >> 2] = $20; //@line 17319
    $229 = $ReallocAsyncCtx13 + 48 | 0; //@line 17320
    HEAP32[$229 >> 2] = $22; //@line 17321
    $230 = $ReallocAsyncCtx13 + 52 | 0; //@line 17322
    HEAP32[$230 >> 2] = $28; //@line 17323
    $231 = $ReallocAsyncCtx13 + 56 | 0; //@line 17324
    HEAP32[$231 >> 2] = $30; //@line 17325
    $232 = $ReallocAsyncCtx13 + 60 | 0; //@line 17326
    HEAP32[$232 >> 2] = $32; //@line 17327
    $233 = $ReallocAsyncCtx13 + 64 | 0; //@line 17328
    HEAP32[$233 >> 2] = $34; //@line 17329
    $234 = $ReallocAsyncCtx13 + 68 | 0; //@line 17330
    HEAP32[$234 >> 2] = $36; //@line 17331
    $235 = $ReallocAsyncCtx13 + 72 | 0; //@line 17332
    HEAP32[$235 >> 2] = $38; //@line 17333
    $236 = $ReallocAsyncCtx13 + 76 | 0; //@line 17334
    HEAP32[$236 >> 2] = $40; //@line 17335
    $237 = $ReallocAsyncCtx13 + 80 | 0; //@line 17336
    HEAP32[$237 >> 2] = $42; //@line 17337
    $238 = $ReallocAsyncCtx13 + 84 | 0; //@line 17338
    HEAP32[$238 >> 2] = $44; //@line 17339
    $239 = $ReallocAsyncCtx13 + 88 | 0; //@line 17340
    HEAP32[$239 >> 2] = $46; //@line 17341
    $240 = $ReallocAsyncCtx13 + 92 | 0; //@line 17342
    HEAP32[$240 >> 2] = $$reg2mem$0; //@line 17343
    $241 = $ReallocAsyncCtx13 + 96 | 0; //@line 17344
    HEAP32[$241 >> 2] = $$03071$reg2mem$0; //@line 17345
    $242 = $ReallocAsyncCtx13 + 100 | 0; //@line 17346
    HEAP32[$242 >> 2] = $$02972$reg2mem$0; //@line 17347
    sp = STACKTOP; //@line 17348
    return;
   }
   ___async_unwind = 0; //@line 17351
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 17352
   $218 = $ReallocAsyncCtx13 + 4 | 0; //@line 17353
   HEAP32[$218 >> 2] = $26; //@line 17354
   $219 = $ReallocAsyncCtx13 + 8 | 0; //@line 17355
   HEAP32[$219 >> 2] = $2; //@line 17356
   $220 = $ReallocAsyncCtx13 + 12 | 0; //@line 17357
   HEAP32[$220 >> 2] = $4; //@line 17358
   $221 = $ReallocAsyncCtx13 + 16 | 0; //@line 17359
   HEAP32[$221 >> 2] = $6; //@line 17360
   $222 = $ReallocAsyncCtx13 + 20 | 0; //@line 17361
   HEAP32[$222 >> 2] = $8; //@line 17362
   $223 = $ReallocAsyncCtx13 + 24 | 0; //@line 17363
   HEAP32[$223 >> 2] = $10; //@line 17364
   $224 = $ReallocAsyncCtx13 + 28 | 0; //@line 17365
   HEAP32[$224 >> 2] = $12; //@line 17366
   $225 = $ReallocAsyncCtx13 + 32 | 0; //@line 17367
   HEAP32[$225 >> 2] = $14; //@line 17368
   $226 = $ReallocAsyncCtx13 + 36 | 0; //@line 17369
   HEAP32[$226 >> 2] = $16; //@line 17370
   $227 = $ReallocAsyncCtx13 + 40 | 0; //@line 17371
   HEAP32[$227 >> 2] = $18; //@line 17372
   $228 = $ReallocAsyncCtx13 + 44 | 0; //@line 17373
   HEAP32[$228 >> 2] = $20; //@line 17374
   $229 = $ReallocAsyncCtx13 + 48 | 0; //@line 17375
   HEAP32[$229 >> 2] = $22; //@line 17376
   $230 = $ReallocAsyncCtx13 + 52 | 0; //@line 17377
   HEAP32[$230 >> 2] = $28; //@line 17378
   $231 = $ReallocAsyncCtx13 + 56 | 0; //@line 17379
   HEAP32[$231 >> 2] = $30; //@line 17380
   $232 = $ReallocAsyncCtx13 + 60 | 0; //@line 17381
   HEAP32[$232 >> 2] = $32; //@line 17382
   $233 = $ReallocAsyncCtx13 + 64 | 0; //@line 17383
   HEAP32[$233 >> 2] = $34; //@line 17384
   $234 = $ReallocAsyncCtx13 + 68 | 0; //@line 17385
   HEAP32[$234 >> 2] = $36; //@line 17386
   $235 = $ReallocAsyncCtx13 + 72 | 0; //@line 17387
   HEAP32[$235 >> 2] = $38; //@line 17388
   $236 = $ReallocAsyncCtx13 + 76 | 0; //@line 17389
   HEAP32[$236 >> 2] = $40; //@line 17390
   $237 = $ReallocAsyncCtx13 + 80 | 0; //@line 17391
   HEAP32[$237 >> 2] = $42; //@line 17392
   $238 = $ReallocAsyncCtx13 + 84 | 0; //@line 17393
   HEAP32[$238 >> 2] = $44; //@line 17394
   $239 = $ReallocAsyncCtx13 + 88 | 0; //@line 17395
   HEAP32[$239 >> 2] = $46; //@line 17396
   $240 = $ReallocAsyncCtx13 + 92 | 0; //@line 17397
   HEAP32[$240 >> 2] = $$reg2mem$0; //@line 17398
   $241 = $ReallocAsyncCtx13 + 96 | 0; //@line 17399
   HEAP32[$241 >> 2] = $$03071$reg2mem$0; //@line 17400
   $242 = $ReallocAsyncCtx13 + 100 | 0; //@line 17401
   HEAP32[$242 >> 2] = $$02972$reg2mem$0; //@line 17402
   sp = STACKTOP; //@line 17403
   return;
  } else {
   $190 = HEAP32[$186 + 4 >> 2] | 0; //@line 17408
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 17409
   FUNCTION_TABLE_vii[$190 & 7]($8, $179 + 32 | 0); //@line 17410
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 17413
    $191 = $ReallocAsyncCtx4 + 4 | 0; //@line 17414
    HEAP32[$191 >> 2] = $2; //@line 17415
    $192 = $ReallocAsyncCtx4 + 8 | 0; //@line 17416
    HEAP32[$192 >> 2] = $4; //@line 17417
    $193 = $ReallocAsyncCtx4 + 12 | 0; //@line 17418
    HEAP32[$193 >> 2] = $6; //@line 17419
    $194 = $ReallocAsyncCtx4 + 16 | 0; //@line 17420
    HEAP32[$194 >> 2] = $8; //@line 17421
    $195 = $ReallocAsyncCtx4 + 20 | 0; //@line 17422
    HEAP32[$195 >> 2] = $10; //@line 17423
    $196 = $ReallocAsyncCtx4 + 24 | 0; //@line 17424
    HEAP32[$196 >> 2] = $12; //@line 17425
    $197 = $ReallocAsyncCtx4 + 28 | 0; //@line 17426
    HEAP32[$197 >> 2] = $14; //@line 17427
    $198 = $ReallocAsyncCtx4 + 32 | 0; //@line 17428
    HEAP32[$198 >> 2] = $16; //@line 17429
    $199 = $ReallocAsyncCtx4 + 36 | 0; //@line 17430
    HEAP32[$199 >> 2] = $18; //@line 17431
    $200 = $ReallocAsyncCtx4 + 40 | 0; //@line 17432
    HEAP32[$200 >> 2] = $20; //@line 17433
    $201 = $ReallocAsyncCtx4 + 44 | 0; //@line 17434
    HEAP32[$201 >> 2] = $22; //@line 17435
    $202 = $ReallocAsyncCtx4 + 48 | 0; //@line 17436
    HEAP32[$202 >> 2] = $26; //@line 17437
    $203 = $ReallocAsyncCtx4 + 52 | 0; //@line 17438
    HEAP32[$203 >> 2] = $28; //@line 17439
    $204 = $ReallocAsyncCtx4 + 56 | 0; //@line 17440
    HEAP32[$204 >> 2] = $30; //@line 17441
    $205 = $ReallocAsyncCtx4 + 60 | 0; //@line 17442
    HEAP32[$205 >> 2] = $32; //@line 17443
    $206 = $ReallocAsyncCtx4 + 64 | 0; //@line 17444
    HEAP32[$206 >> 2] = $34; //@line 17445
    $207 = $ReallocAsyncCtx4 + 68 | 0; //@line 17446
    HEAP32[$207 >> 2] = $36; //@line 17447
    $208 = $ReallocAsyncCtx4 + 72 | 0; //@line 17448
    HEAP32[$208 >> 2] = $38; //@line 17449
    $209 = $ReallocAsyncCtx4 + 76 | 0; //@line 17450
    HEAP32[$209 >> 2] = $40; //@line 17451
    $210 = $ReallocAsyncCtx4 + 80 | 0; //@line 17452
    HEAP32[$210 >> 2] = $42; //@line 17453
    $211 = $ReallocAsyncCtx4 + 84 | 0; //@line 17454
    HEAP32[$211 >> 2] = $44; //@line 17455
    $212 = $ReallocAsyncCtx4 + 88 | 0; //@line 17456
    HEAP32[$212 >> 2] = $46; //@line 17457
    $213 = $ReallocAsyncCtx4 + 92 | 0; //@line 17458
    HEAP32[$213 >> 2] = $185; //@line 17459
    $214 = $ReallocAsyncCtx4 + 96 | 0; //@line 17460
    HEAP32[$214 >> 2] = $$reg2mem$0; //@line 17461
    $215 = $ReallocAsyncCtx4 + 100 | 0; //@line 17462
    HEAP32[$215 >> 2] = $$03071$reg2mem$0; //@line 17463
    $216 = $ReallocAsyncCtx4 + 104 | 0; //@line 17464
    HEAP32[$216 >> 2] = $$02972$reg2mem$0; //@line 17465
    sp = STACKTOP; //@line 17466
    return;
   }
   ___async_unwind = 0; //@line 17469
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 17470
   $191 = $ReallocAsyncCtx4 + 4 | 0; //@line 17471
   HEAP32[$191 >> 2] = $2; //@line 17472
   $192 = $ReallocAsyncCtx4 + 8 | 0; //@line 17473
   HEAP32[$192 >> 2] = $4; //@line 17474
   $193 = $ReallocAsyncCtx4 + 12 | 0; //@line 17475
   HEAP32[$193 >> 2] = $6; //@line 17476
   $194 = $ReallocAsyncCtx4 + 16 | 0; //@line 17477
   HEAP32[$194 >> 2] = $8; //@line 17478
   $195 = $ReallocAsyncCtx4 + 20 | 0; //@line 17479
   HEAP32[$195 >> 2] = $10; //@line 17480
   $196 = $ReallocAsyncCtx4 + 24 | 0; //@line 17481
   HEAP32[$196 >> 2] = $12; //@line 17482
   $197 = $ReallocAsyncCtx4 + 28 | 0; //@line 17483
   HEAP32[$197 >> 2] = $14; //@line 17484
   $198 = $ReallocAsyncCtx4 + 32 | 0; //@line 17485
   HEAP32[$198 >> 2] = $16; //@line 17486
   $199 = $ReallocAsyncCtx4 + 36 | 0; //@line 17487
   HEAP32[$199 >> 2] = $18; //@line 17488
   $200 = $ReallocAsyncCtx4 + 40 | 0; //@line 17489
   HEAP32[$200 >> 2] = $20; //@line 17490
   $201 = $ReallocAsyncCtx4 + 44 | 0; //@line 17491
   HEAP32[$201 >> 2] = $22; //@line 17492
   $202 = $ReallocAsyncCtx4 + 48 | 0; //@line 17493
   HEAP32[$202 >> 2] = $26; //@line 17494
   $203 = $ReallocAsyncCtx4 + 52 | 0; //@line 17495
   HEAP32[$203 >> 2] = $28; //@line 17496
   $204 = $ReallocAsyncCtx4 + 56 | 0; //@line 17497
   HEAP32[$204 >> 2] = $30; //@line 17498
   $205 = $ReallocAsyncCtx4 + 60 | 0; //@line 17499
   HEAP32[$205 >> 2] = $32; //@line 17500
   $206 = $ReallocAsyncCtx4 + 64 | 0; //@line 17501
   HEAP32[$206 >> 2] = $34; //@line 17502
   $207 = $ReallocAsyncCtx4 + 68 | 0; //@line 17503
   HEAP32[$207 >> 2] = $36; //@line 17504
   $208 = $ReallocAsyncCtx4 + 72 | 0; //@line 17505
   HEAP32[$208 >> 2] = $38; //@line 17506
   $209 = $ReallocAsyncCtx4 + 76 | 0; //@line 17507
   HEAP32[$209 >> 2] = $40; //@line 17508
   $210 = $ReallocAsyncCtx4 + 80 | 0; //@line 17509
   HEAP32[$210 >> 2] = $42; //@line 17510
   $211 = $ReallocAsyncCtx4 + 84 | 0; //@line 17511
   HEAP32[$211 >> 2] = $44; //@line 17512
   $212 = $ReallocAsyncCtx4 + 88 | 0; //@line 17513
   HEAP32[$212 >> 2] = $46; //@line 17514
   $213 = $ReallocAsyncCtx4 + 92 | 0; //@line 17515
   HEAP32[$213 >> 2] = $185; //@line 17516
   $214 = $ReallocAsyncCtx4 + 96 | 0; //@line 17517
   HEAP32[$214 >> 2] = $$reg2mem$0; //@line 17518
   $215 = $ReallocAsyncCtx4 + 100 | 0; //@line 17519
   HEAP32[$215 >> 2] = $$03071$reg2mem$0; //@line 17520
   $216 = $ReallocAsyncCtx4 + 104 | 0; //@line 17521
   HEAP32[$216 >> 2] = $$02972$reg2mem$0; //@line 17522
   sp = STACKTOP; //@line 17523
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_15($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $246 = 0, $247 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $257 = 0, $26 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 18490
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18492
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18494
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18496
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18498
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18500
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18502
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18504
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18506
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18508
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18510
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18512
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18514
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18516
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18518
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18520
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18522
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 18524
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18526
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 18528
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 18530
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 18532
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 18534
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 18536
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 18538
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 18540
 $214 = HEAP32[$2 >> 2] | 0; //@line 18541
 if (!$214) {
  $$02972$reg2mem$0 = $50; //@line 18544
  $$03071$reg2mem$0 = $48; //@line 18544
  $$reg2mem$0 = $46; //@line 18544
 } else {
  $217 = HEAP32[$214 + 8 >> 2] | 0; //@line 18547
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(104) | 0; //@line 18548
  FUNCTION_TABLE_vi[$217 & 511]($8); //@line 18549
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 196; //@line 18552
   $218 = $ReallocAsyncCtx6 + 4 | 0; //@line 18553
   HEAP32[$218 >> 2] = $2; //@line 18554
   $219 = $ReallocAsyncCtx6 + 8 | 0; //@line 18555
   HEAP32[$219 >> 2] = $4; //@line 18556
   $220 = $ReallocAsyncCtx6 + 12 | 0; //@line 18557
   HEAP32[$220 >> 2] = $6; //@line 18558
   $221 = $ReallocAsyncCtx6 + 16 | 0; //@line 18559
   HEAP32[$221 >> 2] = $8; //@line 18560
   $222 = $ReallocAsyncCtx6 + 20 | 0; //@line 18561
   HEAP32[$222 >> 2] = $10; //@line 18562
   $223 = $ReallocAsyncCtx6 + 24 | 0; //@line 18563
   HEAP32[$223 >> 2] = $12; //@line 18564
   $224 = $ReallocAsyncCtx6 + 28 | 0; //@line 18565
   HEAP32[$224 >> 2] = $14; //@line 18566
   $225 = $ReallocAsyncCtx6 + 32 | 0; //@line 18567
   HEAP32[$225 >> 2] = $16; //@line 18568
   $226 = $ReallocAsyncCtx6 + 36 | 0; //@line 18569
   HEAP32[$226 >> 2] = $18; //@line 18570
   $227 = $ReallocAsyncCtx6 + 40 | 0; //@line 18571
   HEAP32[$227 >> 2] = $20; //@line 18572
   $228 = $ReallocAsyncCtx6 + 44 | 0; //@line 18573
   HEAP32[$228 >> 2] = $22; //@line 18574
   $229 = $ReallocAsyncCtx6 + 48 | 0; //@line 18575
   HEAP32[$229 >> 2] = $24; //@line 18576
   $230 = $ReallocAsyncCtx6 + 52 | 0; //@line 18577
   HEAP32[$230 >> 2] = $26; //@line 18578
   $231 = $ReallocAsyncCtx6 + 56 | 0; //@line 18579
   HEAP32[$231 >> 2] = $28; //@line 18580
   $232 = $ReallocAsyncCtx6 + 60 | 0; //@line 18581
   HEAP32[$232 >> 2] = $30; //@line 18582
   $233 = $ReallocAsyncCtx6 + 64 | 0; //@line 18583
   HEAP32[$233 >> 2] = $32; //@line 18584
   $234 = $ReallocAsyncCtx6 + 68 | 0; //@line 18585
   HEAP32[$234 >> 2] = $34; //@line 18586
   $235 = $ReallocAsyncCtx6 + 72 | 0; //@line 18587
   HEAP32[$235 >> 2] = $36; //@line 18588
   $236 = $ReallocAsyncCtx6 + 76 | 0; //@line 18589
   HEAP32[$236 >> 2] = $38; //@line 18590
   $237 = $ReallocAsyncCtx6 + 80 | 0; //@line 18591
   HEAP32[$237 >> 2] = $40; //@line 18592
   $238 = $ReallocAsyncCtx6 + 84 | 0; //@line 18593
   HEAP32[$238 >> 2] = $42; //@line 18594
   $239 = $ReallocAsyncCtx6 + 88 | 0; //@line 18595
   HEAP32[$239 >> 2] = $44; //@line 18596
   $240 = $ReallocAsyncCtx6 + 92 | 0; //@line 18597
   HEAP32[$240 >> 2] = $46; //@line 18598
   $241 = $ReallocAsyncCtx6 + 96 | 0; //@line 18599
   HEAP32[$241 >> 2] = $48; //@line 18600
   $242 = $ReallocAsyncCtx6 + 100 | 0; //@line 18601
   HEAP32[$242 >> 2] = $50; //@line 18602
   sp = STACKTOP; //@line 18603
   return;
  }
  ___async_unwind = 0; //@line 18606
  HEAP32[$ReallocAsyncCtx6 >> 2] = 196; //@line 18607
  $218 = $ReallocAsyncCtx6 + 4 | 0; //@line 18608
  HEAP32[$218 >> 2] = $2; //@line 18609
  $219 = $ReallocAsyncCtx6 + 8 | 0; //@line 18610
  HEAP32[$219 >> 2] = $4; //@line 18611
  $220 = $ReallocAsyncCtx6 + 12 | 0; //@line 18612
  HEAP32[$220 >> 2] = $6; //@line 18613
  $221 = $ReallocAsyncCtx6 + 16 | 0; //@line 18614
  HEAP32[$221 >> 2] = $8; //@line 18615
  $222 = $ReallocAsyncCtx6 + 20 | 0; //@line 18616
  HEAP32[$222 >> 2] = $10; //@line 18617
  $223 = $ReallocAsyncCtx6 + 24 | 0; //@line 18618
  HEAP32[$223 >> 2] = $12; //@line 18619
  $224 = $ReallocAsyncCtx6 + 28 | 0; //@line 18620
  HEAP32[$224 >> 2] = $14; //@line 18621
  $225 = $ReallocAsyncCtx6 + 32 | 0; //@line 18622
  HEAP32[$225 >> 2] = $16; //@line 18623
  $226 = $ReallocAsyncCtx6 + 36 | 0; //@line 18624
  HEAP32[$226 >> 2] = $18; //@line 18625
  $227 = $ReallocAsyncCtx6 + 40 | 0; //@line 18626
  HEAP32[$227 >> 2] = $20; //@line 18627
  $228 = $ReallocAsyncCtx6 + 44 | 0; //@line 18628
  HEAP32[$228 >> 2] = $22; //@line 18629
  $229 = $ReallocAsyncCtx6 + 48 | 0; //@line 18630
  HEAP32[$229 >> 2] = $24; //@line 18631
  $230 = $ReallocAsyncCtx6 + 52 | 0; //@line 18632
  HEAP32[$230 >> 2] = $26; //@line 18633
  $231 = $ReallocAsyncCtx6 + 56 | 0; //@line 18634
  HEAP32[$231 >> 2] = $28; //@line 18635
  $232 = $ReallocAsyncCtx6 + 60 | 0; //@line 18636
  HEAP32[$232 >> 2] = $30; //@line 18637
  $233 = $ReallocAsyncCtx6 + 64 | 0; //@line 18638
  HEAP32[$233 >> 2] = $32; //@line 18639
  $234 = $ReallocAsyncCtx6 + 68 | 0; //@line 18640
  HEAP32[$234 >> 2] = $34; //@line 18641
  $235 = $ReallocAsyncCtx6 + 72 | 0; //@line 18642
  HEAP32[$235 >> 2] = $36; //@line 18643
  $236 = $ReallocAsyncCtx6 + 76 | 0; //@line 18644
  HEAP32[$236 >> 2] = $38; //@line 18645
  $237 = $ReallocAsyncCtx6 + 80 | 0; //@line 18646
  HEAP32[$237 >> 2] = $40; //@line 18647
  $238 = $ReallocAsyncCtx6 + 84 | 0; //@line 18648
  HEAP32[$238 >> 2] = $42; //@line 18649
  $239 = $ReallocAsyncCtx6 + 88 | 0; //@line 18650
  HEAP32[$239 >> 2] = $44; //@line 18651
  $240 = $ReallocAsyncCtx6 + 92 | 0; //@line 18652
  HEAP32[$240 >> 2] = $46; //@line 18653
  $241 = $ReallocAsyncCtx6 + 96 | 0; //@line 18654
  HEAP32[$241 >> 2] = $48; //@line 18655
  $242 = $ReallocAsyncCtx6 + 100 | 0; //@line 18656
  HEAP32[$242 >> 2] = $50; //@line 18657
  sp = STACKTOP; //@line 18658
  return;
 }
 L9 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 18665
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 18665
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 18667
   $$131 = $$03071$reg2mem$0; //@line 18667
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 18670
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 18673
    break L9;
   }
   $52 = 7796 + ($$02972$reg2mem$1 << 2) | 0; //@line 18676
   $54 = HEAP32[$52 >> 2] | 0; //@line 18677
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 18689
   break;
  }
  $84 = $54 + 72 | 0; //@line 18692
  $85 = HEAP32[$84 >> 2] | 0; //@line 18693
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 18697
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 18703
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 18707
  $151 = $150 + 76 | 0; //@line 18708
  $152 = HEAP32[$151 >> 2] | 0; //@line 18709
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 18712
   $$03071$reg2mem$0 = $$131; //@line 18712
   $$reg2mem$0 = $52; //@line 18712
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 18717
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 18721
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 18722
  $$03071$reg2mem$0 = $$131; //@line 18722
  $$reg2mem$0 = $52; //@line 18722
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8676] = 0; //@line 18727
   return;
  }
  $246 = $$131 + 44 | 0; //@line 18730
  $247 = HEAP32[$246 >> 2] | 0; //@line 18731
  if (!$247) {
   $255 = $24 + 12 | 0; //@line 18734
   HEAP32[$255 >> 2] = 0; //@line 18735
   $257 = $32 + 4 | 0; //@line 18737
   HEAP32[$257 >> 2] = 0; //@line 18739
   HEAP32[$257 + 4 >> 2] = 0; //@line 18742
   HEAP32[$32 >> 2] = 3; //@line 18743
   $261 = $32 + 12 | 0; //@line 18744
   HEAP32[$261 >> 2] = 752; //@line 18745
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 18746
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 100, $32) | 0; //@line 18747
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 18750
    $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 18751
    HEAP32[$262 >> 2] = $261; //@line 18752
    $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 18753
    HEAP32[$263 >> 2] = $255; //@line 18754
    $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 18755
    HEAP32[$264 >> 2] = $32; //@line 18756
    $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 18757
    HEAP32[$265 >> 2] = $24; //@line 18758
    sp = STACKTOP; //@line 18759
    return;
   }
   ___async_unwind = 0; //@line 18762
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 18763
   $262 = $ReallocAsyncCtx12 + 4 | 0; //@line 18764
   HEAP32[$262 >> 2] = $261; //@line 18765
   $263 = $ReallocAsyncCtx12 + 8 | 0; //@line 18766
   HEAP32[$263 >> 2] = $255; //@line 18767
   $264 = $ReallocAsyncCtx12 + 12 | 0; //@line 18768
   HEAP32[$264 >> 2] = $32; //@line 18769
   $265 = $ReallocAsyncCtx12 + 16 | 0; //@line 18770
   HEAP32[$265 >> 2] = $24; //@line 18771
   sp = STACKTOP; //@line 18772
   return;
  } else {
   $251 = HEAP32[$247 + 4 >> 2] | 0; //@line 18777
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 18778
   FUNCTION_TABLE_vii[$251 & 7]($24, $$131 + 32 | 0); //@line 18779
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 18782
    $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 18783
    HEAP32[$252 >> 2] = $246; //@line 18784
    $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 18785
    HEAP32[$253 >> 2] = $24; //@line 18786
    $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 18787
    HEAP32[$254 >> 2] = $32; //@line 18788
    sp = STACKTOP; //@line 18789
    return;
   }
   ___async_unwind = 0; //@line 18792
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 18793
   $252 = $ReallocAsyncCtx7 + 4 | 0; //@line 18794
   HEAP32[$252 >> 2] = $246; //@line 18795
   $253 = $ReallocAsyncCtx7 + 8 | 0; //@line 18796
   HEAP32[$253 >> 2] = $24; //@line 18797
   $254 = $ReallocAsyncCtx7 + 12 | 0; //@line 18798
   HEAP32[$254 >> 2] = $32; //@line 18799
   sp = STACKTOP; //@line 18800
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 18805
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 18806
  __ZL28nsapi_dns_query_async_deletei($59); //@line 18807
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 18810
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 18811
   HEAP32[$60 >> 2] = $24; //@line 18812
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 18813
   HEAP32[$61 >> 2] = $2; //@line 18814
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 18815
   HEAP32[$62 >> 2] = $4; //@line 18816
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 18817
   HEAP32[$63 >> 2] = $6; //@line 18818
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 18819
   HEAP32[$64 >> 2] = $8; //@line 18820
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 18821
   HEAP32[$65 >> 2] = $10; //@line 18822
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 18823
   HEAP32[$66 >> 2] = $12; //@line 18824
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 18825
   HEAP32[$67 >> 2] = $14; //@line 18826
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 18827
   HEAP32[$68 >> 2] = $16; //@line 18828
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 18829
   HEAP32[$69 >> 2] = $18; //@line 18830
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 18831
   HEAP32[$70 >> 2] = $20; //@line 18832
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 18833
   HEAP32[$71 >> 2] = $22; //@line 18834
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 18835
   HEAP32[$72 >> 2] = $26; //@line 18836
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 18837
   HEAP32[$73 >> 2] = $28; //@line 18838
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 18839
   HEAP32[$74 >> 2] = $30; //@line 18840
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 18841
   HEAP32[$75 >> 2] = $32; //@line 18842
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 18843
   HEAP32[$76 >> 2] = $34; //@line 18844
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 18845
   HEAP32[$77 >> 2] = $36; //@line 18846
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 18847
   HEAP32[$78 >> 2] = $38; //@line 18848
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 18849
   HEAP32[$79 >> 2] = $40; //@line 18850
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 18851
   HEAP32[$80 >> 2] = $42; //@line 18852
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 18853
   HEAP32[$81 >> 2] = $44; //@line 18854
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 18855
   HEAP32[$82 >> 2] = $$131; //@line 18856
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 18857
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 18858
   sp = STACKTOP; //@line 18859
   return;
  }
  ___async_unwind = 0; //@line 18862
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 18863
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 18864
  HEAP32[$60 >> 2] = $24; //@line 18865
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 18866
  HEAP32[$61 >> 2] = $2; //@line 18867
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 18868
  HEAP32[$62 >> 2] = $4; //@line 18869
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 18870
  HEAP32[$63 >> 2] = $6; //@line 18871
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 18872
  HEAP32[$64 >> 2] = $8; //@line 18873
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 18874
  HEAP32[$65 >> 2] = $10; //@line 18875
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 18876
  HEAP32[$66 >> 2] = $12; //@line 18877
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 18878
  HEAP32[$67 >> 2] = $14; //@line 18879
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 18880
  HEAP32[$68 >> 2] = $16; //@line 18881
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 18882
  HEAP32[$69 >> 2] = $18; //@line 18883
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 18884
  HEAP32[$70 >> 2] = $20; //@line 18885
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 18886
  HEAP32[$71 >> 2] = $22; //@line 18887
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 18888
  HEAP32[$72 >> 2] = $26; //@line 18889
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 18890
  HEAP32[$73 >> 2] = $28; //@line 18891
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 18892
  HEAP32[$74 >> 2] = $30; //@line 18893
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 18894
  HEAP32[$75 >> 2] = $32; //@line 18895
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 18896
  HEAP32[$76 >> 2] = $34; //@line 18897
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 18898
  HEAP32[$77 >> 2] = $36; //@line 18899
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 18900
  HEAP32[$78 >> 2] = $38; //@line 18901
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 18902
  HEAP32[$79 >> 2] = $40; //@line 18903
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 18904
  HEAP32[$80 >> 2] = $42; //@line 18905
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 18906
  HEAP32[$81 >> 2] = $44; //@line 18907
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 18908
  HEAP32[$82 >> 2] = $$131; //@line 18909
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 18910
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 18911
  sp = STACKTOP; //@line 18912
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 18917
  $92 = $54 + 44 | 0; //@line 18918
  $93 = HEAP32[$92 >> 2] | 0; //@line 18919
  if (!$93) {
   HEAP32[$34 >> 2] = 0; //@line 18922
   $124 = HEAP32[$54 >> 2] | 0; //@line 18923
   HEAP32[$36 >> 2] = 0; //@line 18924
   HEAP32[$38 >> 2] = 188; //@line 18925
   HEAP32[$40 >> 2] = $124; //@line 18926
   HEAP32[$6 >> 2] = 764; //@line 18927
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 18928
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 18929
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 18932
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 18933
    HEAP32[$125 >> 2] = $24; //@line 18934
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 18935
    HEAP32[$126 >> 2] = $2; //@line 18936
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 18937
    HEAP32[$127 >> 2] = $4; //@line 18938
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 18939
    HEAP32[$128 >> 2] = $6; //@line 18940
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 18941
    HEAP32[$129 >> 2] = $8; //@line 18942
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 18943
    HEAP32[$130 >> 2] = $10; //@line 18944
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 18945
    HEAP32[$131 >> 2] = $12; //@line 18946
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 18947
    HEAP32[$132 >> 2] = $14; //@line 18948
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 18949
    HEAP32[$133 >> 2] = $16; //@line 18950
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 18951
    HEAP32[$134 >> 2] = $18; //@line 18952
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 18953
    HEAP32[$135 >> 2] = $20; //@line 18954
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 18955
    HEAP32[$136 >> 2] = $22; //@line 18956
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 18957
    HEAP32[$137 >> 2] = $26; //@line 18958
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 18959
    HEAP32[$138 >> 2] = $28; //@line 18960
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 18961
    HEAP32[$139 >> 2] = $30; //@line 18962
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 18963
    HEAP32[$140 >> 2] = $32; //@line 18964
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 18965
    HEAP32[$141 >> 2] = $34; //@line 18966
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 18967
    HEAP32[$142 >> 2] = $36; //@line 18968
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 18969
    HEAP32[$143 >> 2] = $38; //@line 18970
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 18971
    HEAP32[$144 >> 2] = $40; //@line 18972
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 18973
    HEAP32[$145 >> 2] = $42; //@line 18974
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 18975
    HEAP32[$146 >> 2] = $44; //@line 18976
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 18977
    HEAP32[$147 >> 2] = $52; //@line 18978
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 18979
    HEAP32[$148 >> 2] = $$131; //@line 18980
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 18981
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 18982
    sp = STACKTOP; //@line 18983
    return;
   }
   ___async_unwind = 0; //@line 18986
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 18987
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 18988
   HEAP32[$125 >> 2] = $24; //@line 18989
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 18990
   HEAP32[$126 >> 2] = $2; //@line 18991
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 18992
   HEAP32[$127 >> 2] = $4; //@line 18993
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 18994
   HEAP32[$128 >> 2] = $6; //@line 18995
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 18996
   HEAP32[$129 >> 2] = $8; //@line 18997
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 18998
   HEAP32[$130 >> 2] = $10; //@line 18999
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 19000
   HEAP32[$131 >> 2] = $12; //@line 19001
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 19002
   HEAP32[$132 >> 2] = $14; //@line 19003
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 19004
   HEAP32[$133 >> 2] = $16; //@line 19005
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 19006
   HEAP32[$134 >> 2] = $18; //@line 19007
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 19008
   HEAP32[$135 >> 2] = $20; //@line 19009
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 19010
   HEAP32[$136 >> 2] = $22; //@line 19011
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 19012
   HEAP32[$137 >> 2] = $26; //@line 19013
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 19014
   HEAP32[$138 >> 2] = $28; //@line 19015
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 19016
   HEAP32[$139 >> 2] = $30; //@line 19017
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 19018
   HEAP32[$140 >> 2] = $32; //@line 19019
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 19020
   HEAP32[$141 >> 2] = $34; //@line 19021
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 19022
   HEAP32[$142 >> 2] = $36; //@line 19023
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 19024
   HEAP32[$143 >> 2] = $38; //@line 19025
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 19026
   HEAP32[$144 >> 2] = $40; //@line 19027
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 19028
   HEAP32[$145 >> 2] = $42; //@line 19029
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 19030
   HEAP32[$146 >> 2] = $44; //@line 19031
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 19032
   HEAP32[$147 >> 2] = $52; //@line 19033
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 19034
   HEAP32[$148 >> 2] = $$131; //@line 19035
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 19036
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 19037
   sp = STACKTOP; //@line 19038
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 19043
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 19044
   FUNCTION_TABLE_vii[$97 & 7]($30, $54 + 32 | 0); //@line 19045
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 19048
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 19049
    HEAP32[$98 >> 2] = $2; //@line 19050
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 19051
    HEAP32[$99 >> 2] = $4; //@line 19052
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 19053
    HEAP32[$100 >> 2] = $6; //@line 19054
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 19055
    HEAP32[$101 >> 2] = $8; //@line 19056
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 19057
    HEAP32[$102 >> 2] = $10; //@line 19058
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 19059
    HEAP32[$103 >> 2] = $12; //@line 19060
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 19061
    HEAP32[$104 >> 2] = $14; //@line 19062
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 19063
    HEAP32[$105 >> 2] = $16; //@line 19064
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 19065
    HEAP32[$106 >> 2] = $18; //@line 19066
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 19067
    HEAP32[$107 >> 2] = $20; //@line 19068
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 19069
    HEAP32[$108 >> 2] = $22; //@line 19070
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 19071
    HEAP32[$109 >> 2] = $52; //@line 19072
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 19073
    HEAP32[$110 >> 2] = $92; //@line 19074
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 19075
    HEAP32[$111 >> 2] = $24; //@line 19076
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 19077
    HEAP32[$112 >> 2] = $26; //@line 19078
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 19079
    HEAP32[$113 >> 2] = $28; //@line 19080
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 19081
    HEAP32[$114 >> 2] = $30; //@line 19082
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 19083
    HEAP32[$115 >> 2] = $32; //@line 19084
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 19085
    HEAP32[$116 >> 2] = $34; //@line 19086
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 19087
    HEAP32[$117 >> 2] = $36; //@line 19088
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 19089
    HEAP32[$118 >> 2] = $38; //@line 19090
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 19091
    HEAP32[$119 >> 2] = $40; //@line 19092
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 19093
    HEAP32[$120 >> 2] = $42; //@line 19094
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 19095
    HEAP32[$121 >> 2] = $44; //@line 19096
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 19097
    HEAP32[$122 >> 2] = $$131; //@line 19098
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 19099
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 19100
    sp = STACKTOP; //@line 19101
    return;
   }
   ___async_unwind = 0; //@line 19104
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 19105
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 19106
   HEAP32[$98 >> 2] = $2; //@line 19107
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 19108
   HEAP32[$99 >> 2] = $4; //@line 19109
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 19110
   HEAP32[$100 >> 2] = $6; //@line 19111
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 19112
   HEAP32[$101 >> 2] = $8; //@line 19113
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 19114
   HEAP32[$102 >> 2] = $10; //@line 19115
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 19116
   HEAP32[$103 >> 2] = $12; //@line 19117
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 19118
   HEAP32[$104 >> 2] = $14; //@line 19119
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 19120
   HEAP32[$105 >> 2] = $16; //@line 19121
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 19122
   HEAP32[$106 >> 2] = $18; //@line 19123
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 19124
   HEAP32[$107 >> 2] = $20; //@line 19125
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 19126
   HEAP32[$108 >> 2] = $22; //@line 19127
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 19128
   HEAP32[$109 >> 2] = $52; //@line 19129
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 19130
   HEAP32[$110 >> 2] = $92; //@line 19131
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 19132
   HEAP32[$111 >> 2] = $24; //@line 19133
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 19134
   HEAP32[$112 >> 2] = $26; //@line 19135
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 19136
   HEAP32[$113 >> 2] = $28; //@line 19137
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 19138
   HEAP32[$114 >> 2] = $30; //@line 19139
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 19140
   HEAP32[$115 >> 2] = $32; //@line 19141
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 19142
   HEAP32[$116 >> 2] = $34; //@line 19143
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 19144
   HEAP32[$117 >> 2] = $36; //@line 19145
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 19146
   HEAP32[$118 >> 2] = $38; //@line 19147
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 19148
   HEAP32[$119 >> 2] = $40; //@line 19149
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 19150
   HEAP32[$120 >> 2] = $42; //@line 19151
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 19152
   HEAP32[$121 >> 2] = $44; //@line 19153
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 19154
   HEAP32[$122 >> 2] = $$131; //@line 19155
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 19156
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 19157
   sp = STACKTOP; //@line 19158
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 19163
  $156 = $150 + 44 | 0; //@line 19164
  $157 = HEAP32[$156 >> 2] | 0; //@line 19165
  if (!$157) {
   HEAP32[$10 >> 2] = 0; //@line 19168
   $188 = HEAP32[$150 >> 2] | 0; //@line 19169
   HEAP32[$12 >> 2] = 0; //@line 19170
   HEAP32[$14 >> 2] = 193; //@line 19171
   HEAP32[$16 >> 2] = $188; //@line 19172
   HEAP32[$18 >> 2] = 764; //@line 19173
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 19174
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 0, $22) | 0; //@line 19175
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 19178
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 19179
    HEAP32[$189 >> 2] = $24; //@line 19180
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 19181
    HEAP32[$190 >> 2] = $2; //@line 19182
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 19183
    HEAP32[$191 >> 2] = $4; //@line 19184
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 19185
    HEAP32[$192 >> 2] = $6; //@line 19186
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 19187
    HEAP32[$193 >> 2] = $8; //@line 19188
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 19189
    HEAP32[$194 >> 2] = $10; //@line 19190
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 19191
    HEAP32[$195 >> 2] = $12; //@line 19192
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 19193
    HEAP32[$196 >> 2] = $14; //@line 19194
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 19195
    HEAP32[$197 >> 2] = $16; //@line 19196
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 19197
    HEAP32[$198 >> 2] = $18; //@line 19198
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 19199
    HEAP32[$199 >> 2] = $20; //@line 19200
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 19201
    HEAP32[$200 >> 2] = $22; //@line 19202
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 19203
    HEAP32[$201 >> 2] = $26; //@line 19204
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 19205
    HEAP32[$202 >> 2] = $28; //@line 19206
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 19207
    HEAP32[$203 >> 2] = $30; //@line 19208
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 19209
    HEAP32[$204 >> 2] = $32; //@line 19210
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 19211
    HEAP32[$205 >> 2] = $34; //@line 19212
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 19213
    HEAP32[$206 >> 2] = $36; //@line 19214
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 19215
    HEAP32[$207 >> 2] = $38; //@line 19216
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 19217
    HEAP32[$208 >> 2] = $40; //@line 19218
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 19219
    HEAP32[$209 >> 2] = $42; //@line 19220
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 19221
    HEAP32[$210 >> 2] = $44; //@line 19222
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 19223
    HEAP32[$211 >> 2] = $52; //@line 19224
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 19225
    HEAP32[$212 >> 2] = $$131; //@line 19226
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 19227
    HEAP32[$213 >> 2] = $$02972$reg2mem$1; //@line 19228
    sp = STACKTOP; //@line 19229
    return;
   }
   ___async_unwind = 0; //@line 19232
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 19233
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 19234
   HEAP32[$189 >> 2] = $24; //@line 19235
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 19236
   HEAP32[$190 >> 2] = $2; //@line 19237
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 19238
   HEAP32[$191 >> 2] = $4; //@line 19239
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 19240
   HEAP32[$192 >> 2] = $6; //@line 19241
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 19242
   HEAP32[$193 >> 2] = $8; //@line 19243
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 19244
   HEAP32[$194 >> 2] = $10; //@line 19245
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 19246
   HEAP32[$195 >> 2] = $12; //@line 19247
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 19248
   HEAP32[$196 >> 2] = $14; //@line 19249
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 19250
   HEAP32[$197 >> 2] = $16; //@line 19251
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 19252
   HEAP32[$198 >> 2] = $18; //@line 19253
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 19254
   HEAP32[$199 >> 2] = $20; //@line 19255
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 19256
   HEAP32[$200 >> 2] = $22; //@line 19257
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 19258
   HEAP32[$201 >> 2] = $26; //@line 19259
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 19260
   HEAP32[$202 >> 2] = $28; //@line 19261
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 19262
   HEAP32[$203 >> 2] = $30; //@line 19263
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 19264
   HEAP32[$204 >> 2] = $32; //@line 19265
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 19266
   HEAP32[$205 >> 2] = $34; //@line 19267
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 19268
   HEAP32[$206 >> 2] = $36; //@line 19269
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 19270
   HEAP32[$207 >> 2] = $38; //@line 19271
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 19272
   HEAP32[$208 >> 2] = $40; //@line 19273
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 19274
   HEAP32[$209 >> 2] = $42; //@line 19275
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 19276
   HEAP32[$210 >> 2] = $44; //@line 19277
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 19278
   HEAP32[$211 >> 2] = $52; //@line 19279
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 19280
   HEAP32[$212 >> 2] = $$131; //@line 19281
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 19282
   HEAP32[$213 >> 2] = $$02972$reg2mem$1; //@line 19283
   sp = STACKTOP; //@line 19284
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 19289
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 19290
   FUNCTION_TABLE_vii[$161 & 7]($8, $150 + 32 | 0); //@line 19291
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 19294
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 19295
    HEAP32[$162 >> 2] = $2; //@line 19296
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 19297
    HEAP32[$163 >> 2] = $4; //@line 19298
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 19299
    HEAP32[$164 >> 2] = $6; //@line 19300
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 19301
    HEAP32[$165 >> 2] = $8; //@line 19302
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 19303
    HEAP32[$166 >> 2] = $10; //@line 19304
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 19305
    HEAP32[$167 >> 2] = $12; //@line 19306
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 19307
    HEAP32[$168 >> 2] = $14; //@line 19308
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 19309
    HEAP32[$169 >> 2] = $16; //@line 19310
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 19311
    HEAP32[$170 >> 2] = $18; //@line 19312
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 19313
    HEAP32[$171 >> 2] = $20; //@line 19314
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 19315
    HEAP32[$172 >> 2] = $22; //@line 19316
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 19317
    HEAP32[$173 >> 2] = $24; //@line 19318
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 19319
    HEAP32[$174 >> 2] = $26; //@line 19320
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 19321
    HEAP32[$175 >> 2] = $28; //@line 19322
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 19323
    HEAP32[$176 >> 2] = $30; //@line 19324
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 19325
    HEAP32[$177 >> 2] = $32; //@line 19326
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 19327
    HEAP32[$178 >> 2] = $34; //@line 19328
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 19329
    HEAP32[$179 >> 2] = $36; //@line 19330
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 19331
    HEAP32[$180 >> 2] = $38; //@line 19332
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 19333
    HEAP32[$181 >> 2] = $40; //@line 19334
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 19335
    HEAP32[$182 >> 2] = $42; //@line 19336
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 19337
    HEAP32[$183 >> 2] = $44; //@line 19338
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 19339
    HEAP32[$184 >> 2] = $156; //@line 19340
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 19341
    HEAP32[$185 >> 2] = $52; //@line 19342
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 19343
    HEAP32[$186 >> 2] = $$131; //@line 19344
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 19345
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 19346
    sp = STACKTOP; //@line 19347
    return;
   }
   ___async_unwind = 0; //@line 19350
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 19351
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 19352
   HEAP32[$162 >> 2] = $2; //@line 19353
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 19354
   HEAP32[$163 >> 2] = $4; //@line 19355
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 19356
   HEAP32[$164 >> 2] = $6; //@line 19357
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 19358
   HEAP32[$165 >> 2] = $8; //@line 19359
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 19360
   HEAP32[$166 >> 2] = $10; //@line 19361
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 19362
   HEAP32[$167 >> 2] = $12; //@line 19363
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 19364
   HEAP32[$168 >> 2] = $14; //@line 19365
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 19366
   HEAP32[$169 >> 2] = $16; //@line 19367
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 19368
   HEAP32[$170 >> 2] = $18; //@line 19369
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 19370
   HEAP32[$171 >> 2] = $20; //@line 19371
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 19372
   HEAP32[$172 >> 2] = $22; //@line 19373
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 19374
   HEAP32[$173 >> 2] = $24; //@line 19375
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 19376
   HEAP32[$174 >> 2] = $26; //@line 19377
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 19378
   HEAP32[$175 >> 2] = $28; //@line 19379
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 19380
   HEAP32[$176 >> 2] = $30; //@line 19381
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 19382
   HEAP32[$177 >> 2] = $32; //@line 19383
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 19384
   HEAP32[$178 >> 2] = $34; //@line 19385
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 19386
   HEAP32[$179 >> 2] = $36; //@line 19387
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 19388
   HEAP32[$180 >> 2] = $38; //@line 19389
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 19390
   HEAP32[$181 >> 2] = $40; //@line 19391
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 19392
   HEAP32[$182 >> 2] = $42; //@line 19393
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 19394
   HEAP32[$183 >> 2] = $44; //@line 19395
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 19396
   HEAP32[$184 >> 2] = $156; //@line 19397
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 19398
   HEAP32[$185 >> 2] = $52; //@line 19399
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 19400
   HEAP32[$186 >> 2] = $$131; //@line 19401
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 19402
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 19403
   sp = STACKTOP; //@line 19404
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_13($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 17543
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17545
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17547
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17549
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 17551
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 17553
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 17555
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 17557
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 17559
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 17561
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 17563
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 17565
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 17569
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 17571
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 17573
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 17575
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 17577
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 17579
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 17581
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 17583
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 17585
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 17587
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 17589
 $$02972$reg2mem$0 = HEAP32[$0 + 100 >> 2] | 0; //@line 17594
 $$03071$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 17594
 $$reg2mem$0 = HEAP32[$0 + 48 >> 2] | 0; //@line 17594
 L2 : while (1) {
  $150 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 17596
  $151 = $150 + 76 | 0; //@line 17597
  $152 = HEAP32[$151 >> 2] | 0; //@line 17598
  if ($152 | 0) {
   if ($152 >>> 0 <= 100) {
    label = 22; //@line 17603
    break;
   }
   HEAP32[$151 >> 2] = $152 + -100; //@line 17607
  }
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 17612
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 17612
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 17614
   $$131 = $$03071$reg2mem$0; //@line 17614
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 17617
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 17620
    break L2;
   }
   $52 = 7796 + ($$02972$reg2mem$1 << 2) | 0; //@line 17623
   $54 = HEAP32[$52 >> 2] | 0; //@line 17624
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 17636
   break;
  }
  $84 = $54 + 72 | 0; //@line 17639
  $85 = HEAP32[$84 >> 2] | 0; //@line 17640
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 17644
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 17645
   $$03071$reg2mem$0 = $$131; //@line 17645
   $$reg2mem$0 = $52; //@line 17645
   continue;
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 17652
    break;
   } else {
    $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 17655
    $$03071$reg2mem$0 = $$131; //@line 17655
    $$reg2mem$0 = $52; //@line 17655
    continue;
   }
  }
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8676] = 0; //@line 17663
   return;
  }
  $217 = $$131 + 44 | 0; //@line 17666
  $218 = HEAP32[$217 >> 2] | 0; //@line 17667
  if (!$218) {
   $226 = $26 + 12 | 0; //@line 17670
   HEAP32[$226 >> 2] = 0; //@line 17671
   $228 = $34 + 4 | 0; //@line 17673
   HEAP32[$228 >> 2] = 0; //@line 17675
   HEAP32[$228 + 4 >> 2] = 0; //@line 17678
   HEAP32[$34 >> 2] = 3; //@line 17679
   $232 = $34 + 12 | 0; //@line 17680
   HEAP32[$232 >> 2] = 752; //@line 17681
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 17682
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($26, 100, $34) | 0; //@line 17683
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 17686
    $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 17687
    HEAP32[$233 >> 2] = $232; //@line 17688
    $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 17689
    HEAP32[$234 >> 2] = $226; //@line 17690
    $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 17691
    HEAP32[$235 >> 2] = $34; //@line 17692
    $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 17693
    HEAP32[$236 >> 2] = $26; //@line 17694
    sp = STACKTOP; //@line 17695
    return;
   }
   ___async_unwind = 0; //@line 17698
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 17699
   $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 17700
   HEAP32[$233 >> 2] = $232; //@line 17701
   $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 17702
   HEAP32[$234 >> 2] = $226; //@line 17703
   $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 17704
   HEAP32[$235 >> 2] = $34; //@line 17705
   $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 17706
   HEAP32[$236 >> 2] = $26; //@line 17707
   sp = STACKTOP; //@line 17708
   return;
  } else {
   $222 = HEAP32[$218 + 4 >> 2] | 0; //@line 17713
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 17714
   FUNCTION_TABLE_vii[$222 & 7]($26, $$131 + 32 | 0); //@line 17715
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 17718
    $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 17719
    HEAP32[$223 >> 2] = $217; //@line 17720
    $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 17721
    HEAP32[$224 >> 2] = $26; //@line 17722
    $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 17723
    HEAP32[$225 >> 2] = $34; //@line 17724
    sp = STACKTOP; //@line 17725
    return;
   }
   ___async_unwind = 0; //@line 17728
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 17729
   $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 17730
   HEAP32[$223 >> 2] = $217; //@line 17731
   $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 17732
   HEAP32[$224 >> 2] = $26; //@line 17733
   $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 17734
   HEAP32[$225 >> 2] = $34; //@line 17735
   sp = STACKTOP; //@line 17736
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 17741
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 17742
  __ZL28nsapi_dns_query_async_deletei($59); //@line 17743
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 17746
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 17747
   HEAP32[$60 >> 2] = $26; //@line 17748
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 17749
   HEAP32[$61 >> 2] = $2; //@line 17750
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 17751
   HEAP32[$62 >> 2] = $4; //@line 17752
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 17753
   HEAP32[$63 >> 2] = $6; //@line 17754
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 17755
   HEAP32[$64 >> 2] = $8; //@line 17756
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 17757
   HEAP32[$65 >> 2] = $10; //@line 17758
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 17759
   HEAP32[$66 >> 2] = $12; //@line 17760
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 17761
   HEAP32[$67 >> 2] = $14; //@line 17762
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 17763
   HEAP32[$68 >> 2] = $16; //@line 17764
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 17765
   HEAP32[$69 >> 2] = $18; //@line 17766
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 17767
   HEAP32[$70 >> 2] = $20; //@line 17768
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 17769
   HEAP32[$71 >> 2] = $22; //@line 17770
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 17771
   HEAP32[$72 >> 2] = $28; //@line 17772
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 17773
   HEAP32[$73 >> 2] = $30; //@line 17774
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 17775
   HEAP32[$74 >> 2] = $32; //@line 17776
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 17777
   HEAP32[$75 >> 2] = $34; //@line 17778
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 17779
   HEAP32[$76 >> 2] = $36; //@line 17780
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 17781
   HEAP32[$77 >> 2] = $38; //@line 17782
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 17783
   HEAP32[$78 >> 2] = $40; //@line 17784
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 17785
   HEAP32[$79 >> 2] = $42; //@line 17786
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 17787
   HEAP32[$80 >> 2] = $44; //@line 17788
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 17789
   HEAP32[$81 >> 2] = $46; //@line 17790
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 17791
   HEAP32[$82 >> 2] = $$131; //@line 17792
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 17793
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 17794
   sp = STACKTOP; //@line 17795
   return;
  }
  ___async_unwind = 0; //@line 17798
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 17799
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 17800
  HEAP32[$60 >> 2] = $26; //@line 17801
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 17802
  HEAP32[$61 >> 2] = $2; //@line 17803
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 17804
  HEAP32[$62 >> 2] = $4; //@line 17805
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 17806
  HEAP32[$63 >> 2] = $6; //@line 17807
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 17808
  HEAP32[$64 >> 2] = $8; //@line 17809
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 17810
  HEAP32[$65 >> 2] = $10; //@line 17811
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 17812
  HEAP32[$66 >> 2] = $12; //@line 17813
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 17814
  HEAP32[$67 >> 2] = $14; //@line 17815
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 17816
  HEAP32[$68 >> 2] = $16; //@line 17817
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 17818
  HEAP32[$69 >> 2] = $18; //@line 17819
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 17820
  HEAP32[$70 >> 2] = $20; //@line 17821
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 17822
  HEAP32[$71 >> 2] = $22; //@line 17823
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 17824
  HEAP32[$72 >> 2] = $28; //@line 17825
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 17826
  HEAP32[$73 >> 2] = $30; //@line 17827
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 17828
  HEAP32[$74 >> 2] = $32; //@line 17829
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 17830
  HEAP32[$75 >> 2] = $34; //@line 17831
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 17832
  HEAP32[$76 >> 2] = $36; //@line 17833
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 17834
  HEAP32[$77 >> 2] = $38; //@line 17835
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 17836
  HEAP32[$78 >> 2] = $40; //@line 17837
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 17838
  HEAP32[$79 >> 2] = $42; //@line 17839
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 17840
  HEAP32[$80 >> 2] = $44; //@line 17841
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 17842
  HEAP32[$81 >> 2] = $46; //@line 17843
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 17844
  HEAP32[$82 >> 2] = $$131; //@line 17845
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 17846
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 17847
  sp = STACKTOP; //@line 17848
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 17853
  $92 = $54 + 44 | 0; //@line 17854
  $93 = HEAP32[$92 >> 2] | 0; //@line 17855
  if (!$93) {
   HEAP32[$36 >> 2] = 0; //@line 17858
   $124 = HEAP32[$54 >> 2] | 0; //@line 17859
   HEAP32[$38 >> 2] = 0; //@line 17860
   HEAP32[$40 >> 2] = 188; //@line 17861
   HEAP32[$42 >> 2] = $124; //@line 17862
   HEAP32[$6 >> 2] = 764; //@line 17863
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 17864
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($44, 0, $46) | 0; //@line 17865
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 17868
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 17869
    HEAP32[$125 >> 2] = $26; //@line 17870
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 17871
    HEAP32[$126 >> 2] = $2; //@line 17872
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 17873
    HEAP32[$127 >> 2] = $4; //@line 17874
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 17875
    HEAP32[$128 >> 2] = $6; //@line 17876
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 17877
    HEAP32[$129 >> 2] = $8; //@line 17878
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 17879
    HEAP32[$130 >> 2] = $10; //@line 17880
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 17881
    HEAP32[$131 >> 2] = $12; //@line 17882
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 17883
    HEAP32[$132 >> 2] = $14; //@line 17884
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 17885
    HEAP32[$133 >> 2] = $16; //@line 17886
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 17887
    HEAP32[$134 >> 2] = $18; //@line 17888
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 17889
    HEAP32[$135 >> 2] = $20; //@line 17890
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 17891
    HEAP32[$136 >> 2] = $22; //@line 17892
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 17893
    HEAP32[$137 >> 2] = $28; //@line 17894
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 17895
    HEAP32[$138 >> 2] = $30; //@line 17896
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 17897
    HEAP32[$139 >> 2] = $32; //@line 17898
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 17899
    HEAP32[$140 >> 2] = $34; //@line 17900
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 17901
    HEAP32[$141 >> 2] = $36; //@line 17902
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 17903
    HEAP32[$142 >> 2] = $38; //@line 17904
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 17905
    HEAP32[$143 >> 2] = $40; //@line 17906
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 17907
    HEAP32[$144 >> 2] = $42; //@line 17908
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 17909
    HEAP32[$145 >> 2] = $44; //@line 17910
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 17911
    HEAP32[$146 >> 2] = $46; //@line 17912
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 17913
    HEAP32[$147 >> 2] = $52; //@line 17914
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 17915
    HEAP32[$148 >> 2] = $$131; //@line 17916
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 17917
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 17918
    sp = STACKTOP; //@line 17919
    return;
   }
   ___async_unwind = 0; //@line 17922
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 17923
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 17924
   HEAP32[$125 >> 2] = $26; //@line 17925
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 17926
   HEAP32[$126 >> 2] = $2; //@line 17927
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 17928
   HEAP32[$127 >> 2] = $4; //@line 17929
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 17930
   HEAP32[$128 >> 2] = $6; //@line 17931
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 17932
   HEAP32[$129 >> 2] = $8; //@line 17933
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 17934
   HEAP32[$130 >> 2] = $10; //@line 17935
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 17936
   HEAP32[$131 >> 2] = $12; //@line 17937
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 17938
   HEAP32[$132 >> 2] = $14; //@line 17939
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 17940
   HEAP32[$133 >> 2] = $16; //@line 17941
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 17942
   HEAP32[$134 >> 2] = $18; //@line 17943
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 17944
   HEAP32[$135 >> 2] = $20; //@line 17945
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 17946
   HEAP32[$136 >> 2] = $22; //@line 17947
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 17948
   HEAP32[$137 >> 2] = $28; //@line 17949
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 17950
   HEAP32[$138 >> 2] = $30; //@line 17951
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 17952
   HEAP32[$139 >> 2] = $32; //@line 17953
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 17954
   HEAP32[$140 >> 2] = $34; //@line 17955
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 17956
   HEAP32[$141 >> 2] = $36; //@line 17957
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 17958
   HEAP32[$142 >> 2] = $38; //@line 17959
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 17960
   HEAP32[$143 >> 2] = $40; //@line 17961
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 17962
   HEAP32[$144 >> 2] = $42; //@line 17963
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 17964
   HEAP32[$145 >> 2] = $44; //@line 17965
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 17966
   HEAP32[$146 >> 2] = $46; //@line 17967
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 17968
   HEAP32[$147 >> 2] = $52; //@line 17969
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 17970
   HEAP32[$148 >> 2] = $$131; //@line 17971
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 17972
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 17973
   sp = STACKTOP; //@line 17974
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 17979
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 17980
   FUNCTION_TABLE_vii[$97 & 7]($32, $54 + 32 | 0); //@line 17981
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 17984
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 17985
    HEAP32[$98 >> 2] = $2; //@line 17986
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 17987
    HEAP32[$99 >> 2] = $4; //@line 17988
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 17989
    HEAP32[$100 >> 2] = $6; //@line 17990
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 17991
    HEAP32[$101 >> 2] = $8; //@line 17992
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 17993
    HEAP32[$102 >> 2] = $10; //@line 17994
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 17995
    HEAP32[$103 >> 2] = $12; //@line 17996
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 17997
    HEAP32[$104 >> 2] = $14; //@line 17998
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 17999
    HEAP32[$105 >> 2] = $16; //@line 18000
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 18001
    HEAP32[$106 >> 2] = $18; //@line 18002
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 18003
    HEAP32[$107 >> 2] = $20; //@line 18004
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 18005
    HEAP32[$108 >> 2] = $22; //@line 18006
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 18007
    HEAP32[$109 >> 2] = $52; //@line 18008
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 18009
    HEAP32[$110 >> 2] = $92; //@line 18010
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 18011
    HEAP32[$111 >> 2] = $26; //@line 18012
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 18013
    HEAP32[$112 >> 2] = $28; //@line 18014
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 18015
    HEAP32[$113 >> 2] = $30; //@line 18016
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 18017
    HEAP32[$114 >> 2] = $32; //@line 18018
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 18019
    HEAP32[$115 >> 2] = $34; //@line 18020
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 18021
    HEAP32[$116 >> 2] = $36; //@line 18022
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 18023
    HEAP32[$117 >> 2] = $38; //@line 18024
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 18025
    HEAP32[$118 >> 2] = $40; //@line 18026
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 18027
    HEAP32[$119 >> 2] = $42; //@line 18028
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 18029
    HEAP32[$120 >> 2] = $44; //@line 18030
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 18031
    HEAP32[$121 >> 2] = $46; //@line 18032
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 18033
    HEAP32[$122 >> 2] = $$131; //@line 18034
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 18035
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 18036
    sp = STACKTOP; //@line 18037
    return;
   }
   ___async_unwind = 0; //@line 18040
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 18041
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 18042
   HEAP32[$98 >> 2] = $2; //@line 18043
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 18044
   HEAP32[$99 >> 2] = $4; //@line 18045
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 18046
   HEAP32[$100 >> 2] = $6; //@line 18047
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 18048
   HEAP32[$101 >> 2] = $8; //@line 18049
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 18050
   HEAP32[$102 >> 2] = $10; //@line 18051
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 18052
   HEAP32[$103 >> 2] = $12; //@line 18053
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 18054
   HEAP32[$104 >> 2] = $14; //@line 18055
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 18056
   HEAP32[$105 >> 2] = $16; //@line 18057
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 18058
   HEAP32[$106 >> 2] = $18; //@line 18059
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 18060
   HEAP32[$107 >> 2] = $20; //@line 18061
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 18062
   HEAP32[$108 >> 2] = $22; //@line 18063
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 18064
   HEAP32[$109 >> 2] = $52; //@line 18065
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 18066
   HEAP32[$110 >> 2] = $92; //@line 18067
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 18068
   HEAP32[$111 >> 2] = $26; //@line 18069
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 18070
   HEAP32[$112 >> 2] = $28; //@line 18071
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 18072
   HEAP32[$113 >> 2] = $30; //@line 18073
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 18074
   HEAP32[$114 >> 2] = $32; //@line 18075
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 18076
   HEAP32[$115 >> 2] = $34; //@line 18077
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 18078
   HEAP32[$116 >> 2] = $36; //@line 18079
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 18080
   HEAP32[$117 >> 2] = $38; //@line 18081
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 18082
   HEAP32[$118 >> 2] = $40; //@line 18083
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 18084
   HEAP32[$119 >> 2] = $42; //@line 18085
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 18086
   HEAP32[$120 >> 2] = $44; //@line 18087
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 18088
   HEAP32[$121 >> 2] = $46; //@line 18089
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 18090
   HEAP32[$122 >> 2] = $$131; //@line 18091
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 18092
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 18093
   sp = STACKTOP; //@line 18094
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$151 >> 2] = 0; //@line 18099
  $156 = $150 + 44 | 0; //@line 18100
  $157 = HEAP32[$156 >> 2] | 0; //@line 18101
  if (!$157) {
   HEAP32[$10 >> 2] = 0; //@line 18104
   $188 = HEAP32[$150 >> 2] | 0; //@line 18105
   HEAP32[$12 >> 2] = 0; //@line 18106
   HEAP32[$14 >> 2] = 193; //@line 18107
   HEAP32[$16 >> 2] = $188; //@line 18108
   HEAP32[$18 >> 2] = 764; //@line 18109
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 18110
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 0, $22) | 0; //@line 18111
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 18114
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 18115
    HEAP32[$189 >> 2] = $26; //@line 18116
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 18117
    HEAP32[$190 >> 2] = $2; //@line 18118
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 18119
    HEAP32[$191 >> 2] = $4; //@line 18120
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 18121
    HEAP32[$192 >> 2] = $6; //@line 18122
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 18123
    HEAP32[$193 >> 2] = $8; //@line 18124
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 18125
    HEAP32[$194 >> 2] = $10; //@line 18126
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 18127
    HEAP32[$195 >> 2] = $12; //@line 18128
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 18129
    HEAP32[$196 >> 2] = $14; //@line 18130
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 18131
    HEAP32[$197 >> 2] = $16; //@line 18132
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 18133
    HEAP32[$198 >> 2] = $18; //@line 18134
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 18135
    HEAP32[$199 >> 2] = $20; //@line 18136
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 18137
    HEAP32[$200 >> 2] = $22; //@line 18138
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 18139
    HEAP32[$201 >> 2] = $28; //@line 18140
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 18141
    HEAP32[$202 >> 2] = $30; //@line 18142
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 18143
    HEAP32[$203 >> 2] = $32; //@line 18144
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 18145
    HEAP32[$204 >> 2] = $34; //@line 18146
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 18147
    HEAP32[$205 >> 2] = $36; //@line 18148
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 18149
    HEAP32[$206 >> 2] = $38; //@line 18150
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 18151
    HEAP32[$207 >> 2] = $40; //@line 18152
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 18153
    HEAP32[$208 >> 2] = $42; //@line 18154
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 18155
    HEAP32[$209 >> 2] = $44; //@line 18156
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 18157
    HEAP32[$210 >> 2] = $46; //@line 18158
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 18159
    HEAP32[$211 >> 2] = $$reg2mem$0; //@line 18160
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 18161
    HEAP32[$212 >> 2] = $$03071$reg2mem$0; //@line 18162
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 18163
    HEAP32[$213 >> 2] = $$02972$reg2mem$0; //@line 18164
    sp = STACKTOP; //@line 18165
    return;
   }
   ___async_unwind = 0; //@line 18168
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 18169
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 18170
   HEAP32[$189 >> 2] = $26; //@line 18171
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 18172
   HEAP32[$190 >> 2] = $2; //@line 18173
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 18174
   HEAP32[$191 >> 2] = $4; //@line 18175
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 18176
   HEAP32[$192 >> 2] = $6; //@line 18177
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 18178
   HEAP32[$193 >> 2] = $8; //@line 18179
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 18180
   HEAP32[$194 >> 2] = $10; //@line 18181
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 18182
   HEAP32[$195 >> 2] = $12; //@line 18183
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 18184
   HEAP32[$196 >> 2] = $14; //@line 18185
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 18186
   HEAP32[$197 >> 2] = $16; //@line 18187
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 18188
   HEAP32[$198 >> 2] = $18; //@line 18189
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 18190
   HEAP32[$199 >> 2] = $20; //@line 18191
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 18192
   HEAP32[$200 >> 2] = $22; //@line 18193
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 18194
   HEAP32[$201 >> 2] = $28; //@line 18195
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 18196
   HEAP32[$202 >> 2] = $30; //@line 18197
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 18198
   HEAP32[$203 >> 2] = $32; //@line 18199
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 18200
   HEAP32[$204 >> 2] = $34; //@line 18201
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 18202
   HEAP32[$205 >> 2] = $36; //@line 18203
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 18204
   HEAP32[$206 >> 2] = $38; //@line 18205
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 18206
   HEAP32[$207 >> 2] = $40; //@line 18207
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 18208
   HEAP32[$208 >> 2] = $42; //@line 18209
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 18210
   HEAP32[$209 >> 2] = $44; //@line 18211
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 18212
   HEAP32[$210 >> 2] = $46; //@line 18213
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 18214
   HEAP32[$211 >> 2] = $$reg2mem$0; //@line 18215
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 18216
   HEAP32[$212 >> 2] = $$03071$reg2mem$0; //@line 18217
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 18218
   HEAP32[$213 >> 2] = $$02972$reg2mem$0; //@line 18219
   sp = STACKTOP; //@line 18220
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 18225
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 18226
   FUNCTION_TABLE_vii[$161 & 7]($8, $150 + 32 | 0); //@line 18227
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 18230
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 18231
    HEAP32[$162 >> 2] = $2; //@line 18232
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 18233
    HEAP32[$163 >> 2] = $4; //@line 18234
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 18235
    HEAP32[$164 >> 2] = $6; //@line 18236
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 18237
    HEAP32[$165 >> 2] = $8; //@line 18238
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 18239
    HEAP32[$166 >> 2] = $10; //@line 18240
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 18241
    HEAP32[$167 >> 2] = $12; //@line 18242
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 18243
    HEAP32[$168 >> 2] = $14; //@line 18244
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 18245
    HEAP32[$169 >> 2] = $16; //@line 18246
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 18247
    HEAP32[$170 >> 2] = $18; //@line 18248
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 18249
    HEAP32[$171 >> 2] = $20; //@line 18250
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 18251
    HEAP32[$172 >> 2] = $22; //@line 18252
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 18253
    HEAP32[$173 >> 2] = $26; //@line 18254
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 18255
    HEAP32[$174 >> 2] = $28; //@line 18256
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 18257
    HEAP32[$175 >> 2] = $30; //@line 18258
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 18259
    HEAP32[$176 >> 2] = $32; //@line 18260
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 18261
    HEAP32[$177 >> 2] = $34; //@line 18262
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 18263
    HEAP32[$178 >> 2] = $36; //@line 18264
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 18265
    HEAP32[$179 >> 2] = $38; //@line 18266
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 18267
    HEAP32[$180 >> 2] = $40; //@line 18268
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 18269
    HEAP32[$181 >> 2] = $42; //@line 18270
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 18271
    HEAP32[$182 >> 2] = $44; //@line 18272
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 18273
    HEAP32[$183 >> 2] = $46; //@line 18274
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 18275
    HEAP32[$184 >> 2] = $156; //@line 18276
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 18277
    HEAP32[$185 >> 2] = $$reg2mem$0; //@line 18278
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 18279
    HEAP32[$186 >> 2] = $$03071$reg2mem$0; //@line 18280
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 18281
    HEAP32[$187 >> 2] = $$02972$reg2mem$0; //@line 18282
    sp = STACKTOP; //@line 18283
    return;
   }
   ___async_unwind = 0; //@line 18286
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 18287
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 18288
   HEAP32[$162 >> 2] = $2; //@line 18289
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 18290
   HEAP32[$163 >> 2] = $4; //@line 18291
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 18292
   HEAP32[$164 >> 2] = $6; //@line 18293
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 18294
   HEAP32[$165 >> 2] = $8; //@line 18295
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 18296
   HEAP32[$166 >> 2] = $10; //@line 18297
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 18298
   HEAP32[$167 >> 2] = $12; //@line 18299
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 18300
   HEAP32[$168 >> 2] = $14; //@line 18301
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 18302
   HEAP32[$169 >> 2] = $16; //@line 18303
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 18304
   HEAP32[$170 >> 2] = $18; //@line 18305
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 18306
   HEAP32[$171 >> 2] = $20; //@line 18307
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 18308
   HEAP32[$172 >> 2] = $22; //@line 18309
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 18310
   HEAP32[$173 >> 2] = $26; //@line 18311
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 18312
   HEAP32[$174 >> 2] = $28; //@line 18313
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 18314
   HEAP32[$175 >> 2] = $30; //@line 18315
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 18316
   HEAP32[$176 >> 2] = $32; //@line 18317
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 18318
   HEAP32[$177 >> 2] = $34; //@line 18319
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 18320
   HEAP32[$178 >> 2] = $36; //@line 18321
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 18322
   HEAP32[$179 >> 2] = $38; //@line 18323
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 18324
   HEAP32[$180 >> 2] = $40; //@line 18325
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 18326
   HEAP32[$181 >> 2] = $42; //@line 18327
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 18328
   HEAP32[$182 >> 2] = $44; //@line 18329
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 18330
   HEAP32[$183 >> 2] = $46; //@line 18331
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 18332
   HEAP32[$184 >> 2] = $156; //@line 18333
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 18334
   HEAP32[$185 >> 2] = $$reg2mem$0; //@line 18335
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 18336
   HEAP32[$186 >> 2] = $$03071$reg2mem$0; //@line 18337
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 18338
   HEAP32[$187 >> 2] = $$02972$reg2mem$0; //@line 18339
   sp = STACKTOP; //@line 18340
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_16($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$02972$reg2mem$1 = 0, $$03071$reg2mem$0 = 0, $$131 = 0, $$reg2mem$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $156 = 0, $157 = 0, $16 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $217 = 0, $218 = 0, $22 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $228 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0, $$02972$reg2mem$1$looptemp = 0;
 sp = STACKTOP; //@line 19424
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 19426
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 19428
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 19430
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 19432
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 19434
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 19436
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 19438
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 19440
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 19442
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 19444
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 19446
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 19448
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 19450
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 19452
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 19454
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 19456
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 19458
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 19460
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 19462
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 19464
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 19466
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 19468
 $$02972$reg2mem$0 = HEAP32[$0 + 100 >> 2] | 0; //@line 19475
 $$03071$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 19475
 $$reg2mem$0 = HEAP32[$0 + 92 >> 2] | 0; //@line 19475
 L2 : while (1) {
  if (!$$03071$reg2mem$0) {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 19480
   $$131 = HEAP32[$$reg2mem$0 >> 2] | 0; //@line 19480
  } else {
   $$02972$reg2mem$1 = $$02972$reg2mem$0; //@line 19482
   $$131 = $$03071$reg2mem$0; //@line 19482
  }
  do {
   $$02972$reg2mem$1$looptemp = $$02972$reg2mem$1;
   $$02972$reg2mem$1 = $$02972$reg2mem$1 + 1 | 0; //@line 19485
   if (($$02972$reg2mem$1$looptemp | 0) >= 4) {
    label = 2; //@line 19488
    break L2;
   }
   $52 = 7796 + ($$02972$reg2mem$1 << 2) | 0; //@line 19491
   $54 = HEAP32[$52 >> 2] | 0; //@line 19492
  } while (!($54 | 0));
  if ((HEAP32[$54 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 19504
   break;
  }
  $84 = $54 + 72 | 0; //@line 19507
  $85 = HEAP32[$84 >> 2] | 0; //@line 19508
  if ($85 >>> 0 > 100) {
   HEAP32[$84 >> 2] = $85 + -100; //@line 19512
  } else {
   if ((HEAP32[$54 + 4 >> 2] | 0) == -3019) {
    label = 11; //@line 19518
    break;
   }
  }
  $150 = HEAP32[$52 >> 2] | 0; //@line 19522
  $151 = $150 + 76 | 0; //@line 19523
  $152 = HEAP32[$151 >> 2] | 0; //@line 19524
  if (!$152) {
   $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 19527
   $$03071$reg2mem$0 = $$131; //@line 19527
   $$reg2mem$0 = $52; //@line 19527
   continue;
  }
  if ($152 >>> 0 <= 100) {
   label = 21; //@line 19532
   break;
  }
  HEAP32[$151 >> 2] = $152 + -100; //@line 19536
  $$02972$reg2mem$0 = $$02972$reg2mem$1; //@line 19537
  $$03071$reg2mem$0 = $$131; //@line 19537
  $$reg2mem$0 = $52; //@line 19537
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8676] = 0; //@line 19542
   return;
  }
  $217 = $$131 + 44 | 0; //@line 19545
  $218 = HEAP32[$217 >> 2] | 0; //@line 19546
  if (!$218) {
   $226 = $24 + 12 | 0; //@line 19549
   HEAP32[$226 >> 2] = 0; //@line 19550
   $228 = $32 + 4 | 0; //@line 19552
   HEAP32[$228 >> 2] = 0; //@line 19554
   HEAP32[$228 + 4 >> 2] = 0; //@line 19557
   HEAP32[$32 >> 2] = 3; //@line 19558
   $232 = $32 + 12 | 0; //@line 19559
   HEAP32[$232 >> 2] = 752; //@line 19560
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 19561
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($24, 100, $32) | 0; //@line 19562
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 19565
    $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 19566
    HEAP32[$233 >> 2] = $232; //@line 19567
    $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 19568
    HEAP32[$234 >> 2] = $226; //@line 19569
    $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 19570
    HEAP32[$235 >> 2] = $32; //@line 19571
    $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 19572
    HEAP32[$236 >> 2] = $24; //@line 19573
    sp = STACKTOP; //@line 19574
    return;
   }
   ___async_unwind = 0; //@line 19577
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 19578
   $233 = $ReallocAsyncCtx12 + 4 | 0; //@line 19579
   HEAP32[$233 >> 2] = $232; //@line 19580
   $234 = $ReallocAsyncCtx12 + 8 | 0; //@line 19581
   HEAP32[$234 >> 2] = $226; //@line 19582
   $235 = $ReallocAsyncCtx12 + 12 | 0; //@line 19583
   HEAP32[$235 >> 2] = $32; //@line 19584
   $236 = $ReallocAsyncCtx12 + 16 | 0; //@line 19585
   HEAP32[$236 >> 2] = $24; //@line 19586
   sp = STACKTOP; //@line 19587
   return;
  } else {
   $222 = HEAP32[$218 + 4 >> 2] | 0; //@line 19592
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 19593
   FUNCTION_TABLE_vii[$222 & 7]($24, $$131 + 32 | 0); //@line 19594
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 19597
    $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 19598
    HEAP32[$223 >> 2] = $217; //@line 19599
    $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 19600
    HEAP32[$224 >> 2] = $24; //@line 19601
    $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 19602
    HEAP32[$225 >> 2] = $32; //@line 19603
    sp = STACKTOP; //@line 19604
    return;
   }
   ___async_unwind = 0; //@line 19607
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 19608
   $223 = $ReallocAsyncCtx7 + 4 | 0; //@line 19609
   HEAP32[$223 >> 2] = $217; //@line 19610
   $224 = $ReallocAsyncCtx7 + 8 | 0; //@line 19611
   HEAP32[$224 >> 2] = $24; //@line 19612
   $225 = $ReallocAsyncCtx7 + 12 | 0; //@line 19613
   HEAP32[$225 >> 2] = $32; //@line 19614
   sp = STACKTOP; //@line 19615
   return;
  }
 } else if ((label | 0) == 5) {
  $59 = HEAP32[$54 >> 2] | 0; //@line 19620
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 19621
  __ZL28nsapi_dns_query_async_deletei($59); //@line 19622
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 19625
   $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 19626
   HEAP32[$60 >> 2] = $24; //@line 19627
   $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 19628
   HEAP32[$61 >> 2] = $2; //@line 19629
   $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 19630
   HEAP32[$62 >> 2] = $4; //@line 19631
   $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 19632
   HEAP32[$63 >> 2] = $6; //@line 19633
   $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 19634
   HEAP32[$64 >> 2] = $8; //@line 19635
   $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 19636
   HEAP32[$65 >> 2] = $10; //@line 19637
   $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 19638
   HEAP32[$66 >> 2] = $12; //@line 19639
   $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 19640
   HEAP32[$67 >> 2] = $14; //@line 19641
   $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 19642
   HEAP32[$68 >> 2] = $16; //@line 19643
   $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 19644
   HEAP32[$69 >> 2] = $18; //@line 19645
   $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 19646
   HEAP32[$70 >> 2] = $20; //@line 19647
   $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 19648
   HEAP32[$71 >> 2] = $22; //@line 19649
   $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 19650
   HEAP32[$72 >> 2] = $26; //@line 19651
   $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 19652
   HEAP32[$73 >> 2] = $28; //@line 19653
   $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 19654
   HEAP32[$74 >> 2] = $30; //@line 19655
   $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 19656
   HEAP32[$75 >> 2] = $32; //@line 19657
   $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 19658
   HEAP32[$76 >> 2] = $34; //@line 19659
   $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 19660
   HEAP32[$77 >> 2] = $36; //@line 19661
   $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 19662
   HEAP32[$78 >> 2] = $38; //@line 19663
   $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 19664
   HEAP32[$79 >> 2] = $40; //@line 19665
   $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 19666
   HEAP32[$80 >> 2] = $42; //@line 19667
   $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 19668
   HEAP32[$81 >> 2] = $44; //@line 19669
   $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 19670
   HEAP32[$82 >> 2] = $$131; //@line 19671
   $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 19672
   HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 19673
   sp = STACKTOP; //@line 19674
   return;
  }
  ___async_unwind = 0; //@line 19677
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 19678
  $60 = $ReallocAsyncCtx10 + 4 | 0; //@line 19679
  HEAP32[$60 >> 2] = $24; //@line 19680
  $61 = $ReallocAsyncCtx10 + 8 | 0; //@line 19681
  HEAP32[$61 >> 2] = $2; //@line 19682
  $62 = $ReallocAsyncCtx10 + 12 | 0; //@line 19683
  HEAP32[$62 >> 2] = $4; //@line 19684
  $63 = $ReallocAsyncCtx10 + 16 | 0; //@line 19685
  HEAP32[$63 >> 2] = $6; //@line 19686
  $64 = $ReallocAsyncCtx10 + 20 | 0; //@line 19687
  HEAP32[$64 >> 2] = $8; //@line 19688
  $65 = $ReallocAsyncCtx10 + 24 | 0; //@line 19689
  HEAP32[$65 >> 2] = $10; //@line 19690
  $66 = $ReallocAsyncCtx10 + 28 | 0; //@line 19691
  HEAP32[$66 >> 2] = $12; //@line 19692
  $67 = $ReallocAsyncCtx10 + 32 | 0; //@line 19693
  HEAP32[$67 >> 2] = $14; //@line 19694
  $68 = $ReallocAsyncCtx10 + 36 | 0; //@line 19695
  HEAP32[$68 >> 2] = $16; //@line 19696
  $69 = $ReallocAsyncCtx10 + 40 | 0; //@line 19697
  HEAP32[$69 >> 2] = $18; //@line 19698
  $70 = $ReallocAsyncCtx10 + 44 | 0; //@line 19699
  HEAP32[$70 >> 2] = $20; //@line 19700
  $71 = $ReallocAsyncCtx10 + 48 | 0; //@line 19701
  HEAP32[$71 >> 2] = $22; //@line 19702
  $72 = $ReallocAsyncCtx10 + 52 | 0; //@line 19703
  HEAP32[$72 >> 2] = $26; //@line 19704
  $73 = $ReallocAsyncCtx10 + 56 | 0; //@line 19705
  HEAP32[$73 >> 2] = $28; //@line 19706
  $74 = $ReallocAsyncCtx10 + 60 | 0; //@line 19707
  HEAP32[$74 >> 2] = $30; //@line 19708
  $75 = $ReallocAsyncCtx10 + 64 | 0; //@line 19709
  HEAP32[$75 >> 2] = $32; //@line 19710
  $76 = $ReallocAsyncCtx10 + 68 | 0; //@line 19711
  HEAP32[$76 >> 2] = $34; //@line 19712
  $77 = $ReallocAsyncCtx10 + 72 | 0; //@line 19713
  HEAP32[$77 >> 2] = $36; //@line 19714
  $78 = $ReallocAsyncCtx10 + 76 | 0; //@line 19715
  HEAP32[$78 >> 2] = $38; //@line 19716
  $79 = $ReallocAsyncCtx10 + 80 | 0; //@line 19717
  HEAP32[$79 >> 2] = $40; //@line 19718
  $80 = $ReallocAsyncCtx10 + 84 | 0; //@line 19719
  HEAP32[$80 >> 2] = $42; //@line 19720
  $81 = $ReallocAsyncCtx10 + 88 | 0; //@line 19721
  HEAP32[$81 >> 2] = $44; //@line 19722
  $82 = $ReallocAsyncCtx10 + 92 | 0; //@line 19723
  HEAP32[$82 >> 2] = $$131; //@line 19724
  $83 = $ReallocAsyncCtx10 + 96 | 0; //@line 19725
  HEAP32[$83 >> 2] = $$02972$reg2mem$1; //@line 19726
  sp = STACKTOP; //@line 19727
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$54 + 76 >> 2] = 0; //@line 19732
  $92 = $54 + 44 | 0; //@line 19733
  $93 = HEAP32[$92 >> 2] | 0; //@line 19734
  if (!$93) {
   HEAP32[$34 >> 2] = 0; //@line 19737
   $124 = HEAP32[$54 >> 2] | 0; //@line 19738
   HEAP32[$36 >> 2] = 0; //@line 19739
   HEAP32[$38 >> 2] = 188; //@line 19740
   HEAP32[$40 >> 2] = $124; //@line 19741
   HEAP32[$6 >> 2] = 764; //@line 19742
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 19743
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 19744
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 19747
    $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 19748
    HEAP32[$125 >> 2] = $24; //@line 19749
    $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 19750
    HEAP32[$126 >> 2] = $2; //@line 19751
    $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 19752
    HEAP32[$127 >> 2] = $4; //@line 19753
    $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 19754
    HEAP32[$128 >> 2] = $6; //@line 19755
    $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 19756
    HEAP32[$129 >> 2] = $8; //@line 19757
    $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 19758
    HEAP32[$130 >> 2] = $10; //@line 19759
    $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 19760
    HEAP32[$131 >> 2] = $12; //@line 19761
    $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 19762
    HEAP32[$132 >> 2] = $14; //@line 19763
    $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 19764
    HEAP32[$133 >> 2] = $16; //@line 19765
    $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 19766
    HEAP32[$134 >> 2] = $18; //@line 19767
    $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 19768
    HEAP32[$135 >> 2] = $20; //@line 19769
    $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 19770
    HEAP32[$136 >> 2] = $22; //@line 19771
    $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 19772
    HEAP32[$137 >> 2] = $26; //@line 19773
    $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 19774
    HEAP32[$138 >> 2] = $28; //@line 19775
    $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 19776
    HEAP32[$139 >> 2] = $30; //@line 19777
    $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 19778
    HEAP32[$140 >> 2] = $32; //@line 19779
    $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 19780
    HEAP32[$141 >> 2] = $34; //@line 19781
    $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 19782
    HEAP32[$142 >> 2] = $36; //@line 19783
    $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 19784
    HEAP32[$143 >> 2] = $38; //@line 19785
    $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 19786
    HEAP32[$144 >> 2] = $40; //@line 19787
    $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 19788
    HEAP32[$145 >> 2] = $42; //@line 19789
    $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 19790
    HEAP32[$146 >> 2] = $44; //@line 19791
    $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 19792
    HEAP32[$147 >> 2] = $52; //@line 19793
    $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 19794
    HEAP32[$148 >> 2] = $$131; //@line 19795
    $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 19796
    HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 19797
    sp = STACKTOP; //@line 19798
    return;
   }
   ___async_unwind = 0; //@line 19801
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 19802
   $125 = $ReallocAsyncCtx14 + 4 | 0; //@line 19803
   HEAP32[$125 >> 2] = $24; //@line 19804
   $126 = $ReallocAsyncCtx14 + 8 | 0; //@line 19805
   HEAP32[$126 >> 2] = $2; //@line 19806
   $127 = $ReallocAsyncCtx14 + 12 | 0; //@line 19807
   HEAP32[$127 >> 2] = $4; //@line 19808
   $128 = $ReallocAsyncCtx14 + 16 | 0; //@line 19809
   HEAP32[$128 >> 2] = $6; //@line 19810
   $129 = $ReallocAsyncCtx14 + 20 | 0; //@line 19811
   HEAP32[$129 >> 2] = $8; //@line 19812
   $130 = $ReallocAsyncCtx14 + 24 | 0; //@line 19813
   HEAP32[$130 >> 2] = $10; //@line 19814
   $131 = $ReallocAsyncCtx14 + 28 | 0; //@line 19815
   HEAP32[$131 >> 2] = $12; //@line 19816
   $132 = $ReallocAsyncCtx14 + 32 | 0; //@line 19817
   HEAP32[$132 >> 2] = $14; //@line 19818
   $133 = $ReallocAsyncCtx14 + 36 | 0; //@line 19819
   HEAP32[$133 >> 2] = $16; //@line 19820
   $134 = $ReallocAsyncCtx14 + 40 | 0; //@line 19821
   HEAP32[$134 >> 2] = $18; //@line 19822
   $135 = $ReallocAsyncCtx14 + 44 | 0; //@line 19823
   HEAP32[$135 >> 2] = $20; //@line 19824
   $136 = $ReallocAsyncCtx14 + 48 | 0; //@line 19825
   HEAP32[$136 >> 2] = $22; //@line 19826
   $137 = $ReallocAsyncCtx14 + 52 | 0; //@line 19827
   HEAP32[$137 >> 2] = $26; //@line 19828
   $138 = $ReallocAsyncCtx14 + 56 | 0; //@line 19829
   HEAP32[$138 >> 2] = $28; //@line 19830
   $139 = $ReallocAsyncCtx14 + 60 | 0; //@line 19831
   HEAP32[$139 >> 2] = $30; //@line 19832
   $140 = $ReallocAsyncCtx14 + 64 | 0; //@line 19833
   HEAP32[$140 >> 2] = $32; //@line 19834
   $141 = $ReallocAsyncCtx14 + 68 | 0; //@line 19835
   HEAP32[$141 >> 2] = $34; //@line 19836
   $142 = $ReallocAsyncCtx14 + 72 | 0; //@line 19837
   HEAP32[$142 >> 2] = $36; //@line 19838
   $143 = $ReallocAsyncCtx14 + 76 | 0; //@line 19839
   HEAP32[$143 >> 2] = $38; //@line 19840
   $144 = $ReallocAsyncCtx14 + 80 | 0; //@line 19841
   HEAP32[$144 >> 2] = $40; //@line 19842
   $145 = $ReallocAsyncCtx14 + 84 | 0; //@line 19843
   HEAP32[$145 >> 2] = $42; //@line 19844
   $146 = $ReallocAsyncCtx14 + 88 | 0; //@line 19845
   HEAP32[$146 >> 2] = $44; //@line 19846
   $147 = $ReallocAsyncCtx14 + 92 | 0; //@line 19847
   HEAP32[$147 >> 2] = $52; //@line 19848
   $148 = $ReallocAsyncCtx14 + 96 | 0; //@line 19849
   HEAP32[$148 >> 2] = $$131; //@line 19850
   $149 = $ReallocAsyncCtx14 + 100 | 0; //@line 19851
   HEAP32[$149 >> 2] = $$02972$reg2mem$1; //@line 19852
   sp = STACKTOP; //@line 19853
   return;
  } else {
   $97 = HEAP32[$93 + 4 >> 2] | 0; //@line 19858
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 19859
   FUNCTION_TABLE_vii[$97 & 7]($30, $54 + 32 | 0); //@line 19860
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 19863
    $98 = $ReallocAsyncCtx + 4 | 0; //@line 19864
    HEAP32[$98 >> 2] = $2; //@line 19865
    $99 = $ReallocAsyncCtx + 8 | 0; //@line 19866
    HEAP32[$99 >> 2] = $4; //@line 19867
    $100 = $ReallocAsyncCtx + 12 | 0; //@line 19868
    HEAP32[$100 >> 2] = $6; //@line 19869
    $101 = $ReallocAsyncCtx + 16 | 0; //@line 19870
    HEAP32[$101 >> 2] = $8; //@line 19871
    $102 = $ReallocAsyncCtx + 20 | 0; //@line 19872
    HEAP32[$102 >> 2] = $10; //@line 19873
    $103 = $ReallocAsyncCtx + 24 | 0; //@line 19874
    HEAP32[$103 >> 2] = $12; //@line 19875
    $104 = $ReallocAsyncCtx + 28 | 0; //@line 19876
    HEAP32[$104 >> 2] = $14; //@line 19877
    $105 = $ReallocAsyncCtx + 32 | 0; //@line 19878
    HEAP32[$105 >> 2] = $16; //@line 19879
    $106 = $ReallocAsyncCtx + 36 | 0; //@line 19880
    HEAP32[$106 >> 2] = $18; //@line 19881
    $107 = $ReallocAsyncCtx + 40 | 0; //@line 19882
    HEAP32[$107 >> 2] = $20; //@line 19883
    $108 = $ReallocAsyncCtx + 44 | 0; //@line 19884
    HEAP32[$108 >> 2] = $22; //@line 19885
    $109 = $ReallocAsyncCtx + 48 | 0; //@line 19886
    HEAP32[$109 >> 2] = $52; //@line 19887
    $110 = $ReallocAsyncCtx + 52 | 0; //@line 19888
    HEAP32[$110 >> 2] = $92; //@line 19889
    $111 = $ReallocAsyncCtx + 56 | 0; //@line 19890
    HEAP32[$111 >> 2] = $24; //@line 19891
    $112 = $ReallocAsyncCtx + 60 | 0; //@line 19892
    HEAP32[$112 >> 2] = $26; //@line 19893
    $113 = $ReallocAsyncCtx + 64 | 0; //@line 19894
    HEAP32[$113 >> 2] = $28; //@line 19895
    $114 = $ReallocAsyncCtx + 68 | 0; //@line 19896
    HEAP32[$114 >> 2] = $30; //@line 19897
    $115 = $ReallocAsyncCtx + 72 | 0; //@line 19898
    HEAP32[$115 >> 2] = $32; //@line 19899
    $116 = $ReallocAsyncCtx + 76 | 0; //@line 19900
    HEAP32[$116 >> 2] = $34; //@line 19901
    $117 = $ReallocAsyncCtx + 80 | 0; //@line 19902
    HEAP32[$117 >> 2] = $36; //@line 19903
    $118 = $ReallocAsyncCtx + 84 | 0; //@line 19904
    HEAP32[$118 >> 2] = $38; //@line 19905
    $119 = $ReallocAsyncCtx + 88 | 0; //@line 19906
    HEAP32[$119 >> 2] = $40; //@line 19907
    $120 = $ReallocAsyncCtx + 92 | 0; //@line 19908
    HEAP32[$120 >> 2] = $42; //@line 19909
    $121 = $ReallocAsyncCtx + 96 | 0; //@line 19910
    HEAP32[$121 >> 2] = $44; //@line 19911
    $122 = $ReallocAsyncCtx + 100 | 0; //@line 19912
    HEAP32[$122 >> 2] = $$131; //@line 19913
    $123 = $ReallocAsyncCtx + 104 | 0; //@line 19914
    HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 19915
    sp = STACKTOP; //@line 19916
    return;
   }
   ___async_unwind = 0; //@line 19919
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 19920
   $98 = $ReallocAsyncCtx + 4 | 0; //@line 19921
   HEAP32[$98 >> 2] = $2; //@line 19922
   $99 = $ReallocAsyncCtx + 8 | 0; //@line 19923
   HEAP32[$99 >> 2] = $4; //@line 19924
   $100 = $ReallocAsyncCtx + 12 | 0; //@line 19925
   HEAP32[$100 >> 2] = $6; //@line 19926
   $101 = $ReallocAsyncCtx + 16 | 0; //@line 19927
   HEAP32[$101 >> 2] = $8; //@line 19928
   $102 = $ReallocAsyncCtx + 20 | 0; //@line 19929
   HEAP32[$102 >> 2] = $10; //@line 19930
   $103 = $ReallocAsyncCtx + 24 | 0; //@line 19931
   HEAP32[$103 >> 2] = $12; //@line 19932
   $104 = $ReallocAsyncCtx + 28 | 0; //@line 19933
   HEAP32[$104 >> 2] = $14; //@line 19934
   $105 = $ReallocAsyncCtx + 32 | 0; //@line 19935
   HEAP32[$105 >> 2] = $16; //@line 19936
   $106 = $ReallocAsyncCtx + 36 | 0; //@line 19937
   HEAP32[$106 >> 2] = $18; //@line 19938
   $107 = $ReallocAsyncCtx + 40 | 0; //@line 19939
   HEAP32[$107 >> 2] = $20; //@line 19940
   $108 = $ReallocAsyncCtx + 44 | 0; //@line 19941
   HEAP32[$108 >> 2] = $22; //@line 19942
   $109 = $ReallocAsyncCtx + 48 | 0; //@line 19943
   HEAP32[$109 >> 2] = $52; //@line 19944
   $110 = $ReallocAsyncCtx + 52 | 0; //@line 19945
   HEAP32[$110 >> 2] = $92; //@line 19946
   $111 = $ReallocAsyncCtx + 56 | 0; //@line 19947
   HEAP32[$111 >> 2] = $24; //@line 19948
   $112 = $ReallocAsyncCtx + 60 | 0; //@line 19949
   HEAP32[$112 >> 2] = $26; //@line 19950
   $113 = $ReallocAsyncCtx + 64 | 0; //@line 19951
   HEAP32[$113 >> 2] = $28; //@line 19952
   $114 = $ReallocAsyncCtx + 68 | 0; //@line 19953
   HEAP32[$114 >> 2] = $30; //@line 19954
   $115 = $ReallocAsyncCtx + 72 | 0; //@line 19955
   HEAP32[$115 >> 2] = $32; //@line 19956
   $116 = $ReallocAsyncCtx + 76 | 0; //@line 19957
   HEAP32[$116 >> 2] = $34; //@line 19958
   $117 = $ReallocAsyncCtx + 80 | 0; //@line 19959
   HEAP32[$117 >> 2] = $36; //@line 19960
   $118 = $ReallocAsyncCtx + 84 | 0; //@line 19961
   HEAP32[$118 >> 2] = $38; //@line 19962
   $119 = $ReallocAsyncCtx + 88 | 0; //@line 19963
   HEAP32[$119 >> 2] = $40; //@line 19964
   $120 = $ReallocAsyncCtx + 92 | 0; //@line 19965
   HEAP32[$120 >> 2] = $42; //@line 19966
   $121 = $ReallocAsyncCtx + 96 | 0; //@line 19967
   HEAP32[$121 >> 2] = $44; //@line 19968
   $122 = $ReallocAsyncCtx + 100 | 0; //@line 19969
   HEAP32[$122 >> 2] = $$131; //@line 19970
   $123 = $ReallocAsyncCtx + 104 | 0; //@line 19971
   HEAP32[$123 >> 2] = $$02972$reg2mem$1; //@line 19972
   sp = STACKTOP; //@line 19973
   return;
  }
 } else if ((label | 0) == 21) {
  HEAP32[$151 >> 2] = 0; //@line 19978
  $156 = $150 + 44 | 0; //@line 19979
  $157 = HEAP32[$156 >> 2] | 0; //@line 19980
  if (!$157) {
   HEAP32[$10 >> 2] = 0; //@line 19983
   $188 = HEAP32[$150 >> 2] | 0; //@line 19984
   HEAP32[$12 >> 2] = 0; //@line 19985
   HEAP32[$14 >> 2] = 193; //@line 19986
   HEAP32[$16 >> 2] = $188; //@line 19987
   HEAP32[$18 >> 2] = 764; //@line 19988
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 19989
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 0, $22) | 0; //@line 19990
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 19993
    $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 19994
    HEAP32[$189 >> 2] = $24; //@line 19995
    $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 19996
    HEAP32[$190 >> 2] = $2; //@line 19997
    $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 19998
    HEAP32[$191 >> 2] = $4; //@line 19999
    $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 20000
    HEAP32[$192 >> 2] = $6; //@line 20001
    $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 20002
    HEAP32[$193 >> 2] = $8; //@line 20003
    $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 20004
    HEAP32[$194 >> 2] = $10; //@line 20005
    $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 20006
    HEAP32[$195 >> 2] = $12; //@line 20007
    $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 20008
    HEAP32[$196 >> 2] = $14; //@line 20009
    $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 20010
    HEAP32[$197 >> 2] = $16; //@line 20011
    $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 20012
    HEAP32[$198 >> 2] = $18; //@line 20013
    $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 20014
    HEAP32[$199 >> 2] = $20; //@line 20015
    $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 20016
    HEAP32[$200 >> 2] = $22; //@line 20017
    $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 20018
    HEAP32[$201 >> 2] = $26; //@line 20019
    $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 20020
    HEAP32[$202 >> 2] = $28; //@line 20021
    $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 20022
    HEAP32[$203 >> 2] = $30; //@line 20023
    $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 20024
    HEAP32[$204 >> 2] = $32; //@line 20025
    $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 20026
    HEAP32[$205 >> 2] = $34; //@line 20027
    $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 20028
    HEAP32[$206 >> 2] = $36; //@line 20029
    $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 20030
    HEAP32[$207 >> 2] = $38; //@line 20031
    $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 20032
    HEAP32[$208 >> 2] = $40; //@line 20033
    $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 20034
    HEAP32[$209 >> 2] = $42; //@line 20035
    $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 20036
    HEAP32[$210 >> 2] = $44; //@line 20037
    $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 20038
    HEAP32[$211 >> 2] = $52; //@line 20039
    $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 20040
    HEAP32[$212 >> 2] = $$131; //@line 20041
    $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 20042
    HEAP32[$213 >> 2] = $$02972$reg2mem$1; //@line 20043
    sp = STACKTOP; //@line 20044
    return;
   }
   ___async_unwind = 0; //@line 20047
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 20048
   $189 = $ReallocAsyncCtx13 + 4 | 0; //@line 20049
   HEAP32[$189 >> 2] = $24; //@line 20050
   $190 = $ReallocAsyncCtx13 + 8 | 0; //@line 20051
   HEAP32[$190 >> 2] = $2; //@line 20052
   $191 = $ReallocAsyncCtx13 + 12 | 0; //@line 20053
   HEAP32[$191 >> 2] = $4; //@line 20054
   $192 = $ReallocAsyncCtx13 + 16 | 0; //@line 20055
   HEAP32[$192 >> 2] = $6; //@line 20056
   $193 = $ReallocAsyncCtx13 + 20 | 0; //@line 20057
   HEAP32[$193 >> 2] = $8; //@line 20058
   $194 = $ReallocAsyncCtx13 + 24 | 0; //@line 20059
   HEAP32[$194 >> 2] = $10; //@line 20060
   $195 = $ReallocAsyncCtx13 + 28 | 0; //@line 20061
   HEAP32[$195 >> 2] = $12; //@line 20062
   $196 = $ReallocAsyncCtx13 + 32 | 0; //@line 20063
   HEAP32[$196 >> 2] = $14; //@line 20064
   $197 = $ReallocAsyncCtx13 + 36 | 0; //@line 20065
   HEAP32[$197 >> 2] = $16; //@line 20066
   $198 = $ReallocAsyncCtx13 + 40 | 0; //@line 20067
   HEAP32[$198 >> 2] = $18; //@line 20068
   $199 = $ReallocAsyncCtx13 + 44 | 0; //@line 20069
   HEAP32[$199 >> 2] = $20; //@line 20070
   $200 = $ReallocAsyncCtx13 + 48 | 0; //@line 20071
   HEAP32[$200 >> 2] = $22; //@line 20072
   $201 = $ReallocAsyncCtx13 + 52 | 0; //@line 20073
   HEAP32[$201 >> 2] = $26; //@line 20074
   $202 = $ReallocAsyncCtx13 + 56 | 0; //@line 20075
   HEAP32[$202 >> 2] = $28; //@line 20076
   $203 = $ReallocAsyncCtx13 + 60 | 0; //@line 20077
   HEAP32[$203 >> 2] = $30; //@line 20078
   $204 = $ReallocAsyncCtx13 + 64 | 0; //@line 20079
   HEAP32[$204 >> 2] = $32; //@line 20080
   $205 = $ReallocAsyncCtx13 + 68 | 0; //@line 20081
   HEAP32[$205 >> 2] = $34; //@line 20082
   $206 = $ReallocAsyncCtx13 + 72 | 0; //@line 20083
   HEAP32[$206 >> 2] = $36; //@line 20084
   $207 = $ReallocAsyncCtx13 + 76 | 0; //@line 20085
   HEAP32[$207 >> 2] = $38; //@line 20086
   $208 = $ReallocAsyncCtx13 + 80 | 0; //@line 20087
   HEAP32[$208 >> 2] = $40; //@line 20088
   $209 = $ReallocAsyncCtx13 + 84 | 0; //@line 20089
   HEAP32[$209 >> 2] = $42; //@line 20090
   $210 = $ReallocAsyncCtx13 + 88 | 0; //@line 20091
   HEAP32[$210 >> 2] = $44; //@line 20092
   $211 = $ReallocAsyncCtx13 + 92 | 0; //@line 20093
   HEAP32[$211 >> 2] = $52; //@line 20094
   $212 = $ReallocAsyncCtx13 + 96 | 0; //@line 20095
   HEAP32[$212 >> 2] = $$131; //@line 20096
   $213 = $ReallocAsyncCtx13 + 100 | 0; //@line 20097
   HEAP32[$213 >> 2] = $$02972$reg2mem$1; //@line 20098
   sp = STACKTOP; //@line 20099
   return;
  } else {
   $161 = HEAP32[$157 + 4 >> 2] | 0; //@line 20104
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 20105
   FUNCTION_TABLE_vii[$161 & 7]($8, $150 + 32 | 0); //@line 20106
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 20109
    $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 20110
    HEAP32[$162 >> 2] = $2; //@line 20111
    $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 20112
    HEAP32[$163 >> 2] = $4; //@line 20113
    $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 20114
    HEAP32[$164 >> 2] = $6; //@line 20115
    $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 20116
    HEAP32[$165 >> 2] = $8; //@line 20117
    $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 20118
    HEAP32[$166 >> 2] = $10; //@line 20119
    $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 20120
    HEAP32[$167 >> 2] = $12; //@line 20121
    $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 20122
    HEAP32[$168 >> 2] = $14; //@line 20123
    $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 20124
    HEAP32[$169 >> 2] = $16; //@line 20125
    $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 20126
    HEAP32[$170 >> 2] = $18; //@line 20127
    $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 20128
    HEAP32[$171 >> 2] = $20; //@line 20129
    $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 20130
    HEAP32[$172 >> 2] = $22; //@line 20131
    $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 20132
    HEAP32[$173 >> 2] = $24; //@line 20133
    $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 20134
    HEAP32[$174 >> 2] = $26; //@line 20135
    $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 20136
    HEAP32[$175 >> 2] = $28; //@line 20137
    $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 20138
    HEAP32[$176 >> 2] = $30; //@line 20139
    $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 20140
    HEAP32[$177 >> 2] = $32; //@line 20141
    $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 20142
    HEAP32[$178 >> 2] = $34; //@line 20143
    $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 20144
    HEAP32[$179 >> 2] = $36; //@line 20145
    $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 20146
    HEAP32[$180 >> 2] = $38; //@line 20147
    $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 20148
    HEAP32[$181 >> 2] = $40; //@line 20149
    $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 20150
    HEAP32[$182 >> 2] = $42; //@line 20151
    $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 20152
    HEAP32[$183 >> 2] = $44; //@line 20153
    $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 20154
    HEAP32[$184 >> 2] = $156; //@line 20155
    $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 20156
    HEAP32[$185 >> 2] = $52; //@line 20157
    $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 20158
    HEAP32[$186 >> 2] = $$131; //@line 20159
    $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 20160
    HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 20161
    sp = STACKTOP; //@line 20162
    return;
   }
   ___async_unwind = 0; //@line 20165
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 20166
   $162 = $ReallocAsyncCtx4 + 4 | 0; //@line 20167
   HEAP32[$162 >> 2] = $2; //@line 20168
   $163 = $ReallocAsyncCtx4 + 8 | 0; //@line 20169
   HEAP32[$163 >> 2] = $4; //@line 20170
   $164 = $ReallocAsyncCtx4 + 12 | 0; //@line 20171
   HEAP32[$164 >> 2] = $6; //@line 20172
   $165 = $ReallocAsyncCtx4 + 16 | 0; //@line 20173
   HEAP32[$165 >> 2] = $8; //@line 20174
   $166 = $ReallocAsyncCtx4 + 20 | 0; //@line 20175
   HEAP32[$166 >> 2] = $10; //@line 20176
   $167 = $ReallocAsyncCtx4 + 24 | 0; //@line 20177
   HEAP32[$167 >> 2] = $12; //@line 20178
   $168 = $ReallocAsyncCtx4 + 28 | 0; //@line 20179
   HEAP32[$168 >> 2] = $14; //@line 20180
   $169 = $ReallocAsyncCtx4 + 32 | 0; //@line 20181
   HEAP32[$169 >> 2] = $16; //@line 20182
   $170 = $ReallocAsyncCtx4 + 36 | 0; //@line 20183
   HEAP32[$170 >> 2] = $18; //@line 20184
   $171 = $ReallocAsyncCtx4 + 40 | 0; //@line 20185
   HEAP32[$171 >> 2] = $20; //@line 20186
   $172 = $ReallocAsyncCtx4 + 44 | 0; //@line 20187
   HEAP32[$172 >> 2] = $22; //@line 20188
   $173 = $ReallocAsyncCtx4 + 48 | 0; //@line 20189
   HEAP32[$173 >> 2] = $24; //@line 20190
   $174 = $ReallocAsyncCtx4 + 52 | 0; //@line 20191
   HEAP32[$174 >> 2] = $26; //@line 20192
   $175 = $ReallocAsyncCtx4 + 56 | 0; //@line 20193
   HEAP32[$175 >> 2] = $28; //@line 20194
   $176 = $ReallocAsyncCtx4 + 60 | 0; //@line 20195
   HEAP32[$176 >> 2] = $30; //@line 20196
   $177 = $ReallocAsyncCtx4 + 64 | 0; //@line 20197
   HEAP32[$177 >> 2] = $32; //@line 20198
   $178 = $ReallocAsyncCtx4 + 68 | 0; //@line 20199
   HEAP32[$178 >> 2] = $34; //@line 20200
   $179 = $ReallocAsyncCtx4 + 72 | 0; //@line 20201
   HEAP32[$179 >> 2] = $36; //@line 20202
   $180 = $ReallocAsyncCtx4 + 76 | 0; //@line 20203
   HEAP32[$180 >> 2] = $38; //@line 20204
   $181 = $ReallocAsyncCtx4 + 80 | 0; //@line 20205
   HEAP32[$181 >> 2] = $40; //@line 20206
   $182 = $ReallocAsyncCtx4 + 84 | 0; //@line 20207
   HEAP32[$182 >> 2] = $42; //@line 20208
   $183 = $ReallocAsyncCtx4 + 88 | 0; //@line 20209
   HEAP32[$183 >> 2] = $44; //@line 20210
   $184 = $ReallocAsyncCtx4 + 92 | 0; //@line 20211
   HEAP32[$184 >> 2] = $156; //@line 20212
   $185 = $ReallocAsyncCtx4 + 96 | 0; //@line 20213
   HEAP32[$185 >> 2] = $52; //@line 20214
   $186 = $ReallocAsyncCtx4 + 100 | 0; //@line 20215
   HEAP32[$186 >> 2] = $$131; //@line 20216
   $187 = $ReallocAsyncCtx4 + 104 | 0; //@line 20217
   HEAP32[$187 >> 2] = $$02972$reg2mem$1; //@line 20218
   sp = STACKTOP; //@line 20219
   return;
  }
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_21($0) {
 $0 = $0 | 0;
 var $$02972$reg2mem$0 = 0, $$131 = 0, $$131$phi = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $154 = 0, $155 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $210 = 0, $211 = 0, $215 = 0, $216 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $226 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $50 = 0, $51 = 0, $52 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $90 = 0, $91 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 20439
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20441
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20443
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20445
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20447
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20449
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20451
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20453
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20455
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20457
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20459
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20461
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20463
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20465
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20467
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20469
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20471
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20473
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20475
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20477
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20479
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20481
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20483
 $$02972$reg2mem$0 = HEAP32[$0 + 96 >> 2] | 0; //@line 20488
 $$131 = HEAP32[$0 + 92 >> 2] | 0; //@line 20488
 while (1) {
  $51 = $$02972$reg2mem$0 + 1 | 0; //@line 20490
  if (($$02972$reg2mem$0 | 0) >= 4) {
   label = 2; //@line 20493
   break;
  }
  $50 = 7796 + ($51 << 2) | 0; //@line 20496
  $52 = HEAP32[$50 >> 2] | 0; //@line 20497
  if (!$52) {
   $$131$phi = $$131; //@line 20500
   $$02972$reg2mem$0 = $51; //@line 20500
   $$131 = $$131$phi; //@line 20500
   continue;
  }
  if ((HEAP32[$52 + 88 >> 2] | 0) == 2) {
   label = 5; //@line 20507
   break;
  }
  $82 = $52 + 72 | 0; //@line 20510
  $83 = HEAP32[$82 >> 2] | 0; //@line 20511
  if ($83 >>> 0 > 100) {
   HEAP32[$82 >> 2] = $83 + -100; //@line 20515
  } else {
   if ((HEAP32[$52 + 4 >> 2] | 0) == -3019) {
    label = 12; //@line 20521
    break;
   }
  }
  $148 = HEAP32[$50 >> 2] | 0; //@line 20525
  $149 = $148 + 76 | 0; //@line 20526
  $150 = HEAP32[$149 >> 2] | 0; //@line 20527
  if ($150 | 0) {
   if ($150 >>> 0 <= 100) {
    label = 22; //@line 20532
    break;
   }
   HEAP32[$149 >> 2] = $150 + -100; //@line 20536
  }
  if ($$131 | 0) {
   $$131$phi = $$131; //@line 20540
   $$02972$reg2mem$0 = $51; //@line 20540
   $$131 = $$131$phi; //@line 20540
   continue;
  }
  $$02972$reg2mem$0 = $51; //@line 20544
  $$131 = HEAP32[$50 >> 2] | 0; //@line 20544
 }
 if ((label | 0) == 2) {
  if (!$$131) {
   HEAP8[8676] = 0; //@line 20549
   return;
  }
  $215 = $$131 + 44 | 0; //@line 20552
  $216 = HEAP32[$215 >> 2] | 0; //@line 20553
  if (!$216) {
   $224 = $2 + 12 | 0; //@line 20556
   HEAP32[$224 >> 2] = 0; //@line 20557
   $226 = $32 + 4 | 0; //@line 20559
   HEAP32[$226 >> 2] = 0; //@line 20561
   HEAP32[$226 + 4 >> 2] = 0; //@line 20564
   HEAP32[$32 >> 2] = 3; //@line 20565
   $230 = $32 + 12 | 0; //@line 20566
   HEAP32[$230 >> 2] = 752; //@line 20567
   $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 20568
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 100, $32) | 0; //@line 20569
   if (___async) {
    HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 20572
    $231 = $ReallocAsyncCtx12 + 4 | 0; //@line 20573
    HEAP32[$231 >> 2] = $230; //@line 20574
    $232 = $ReallocAsyncCtx12 + 8 | 0; //@line 20575
    HEAP32[$232 >> 2] = $224; //@line 20576
    $233 = $ReallocAsyncCtx12 + 12 | 0; //@line 20577
    HEAP32[$233 >> 2] = $32; //@line 20578
    $234 = $ReallocAsyncCtx12 + 16 | 0; //@line 20579
    HEAP32[$234 >> 2] = $2; //@line 20580
    sp = STACKTOP; //@line 20581
    return;
   }
   ___async_unwind = 0; //@line 20584
   HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 20585
   $231 = $ReallocAsyncCtx12 + 4 | 0; //@line 20586
   HEAP32[$231 >> 2] = $230; //@line 20587
   $232 = $ReallocAsyncCtx12 + 8 | 0; //@line 20588
   HEAP32[$232 >> 2] = $224; //@line 20589
   $233 = $ReallocAsyncCtx12 + 12 | 0; //@line 20590
   HEAP32[$233 >> 2] = $32; //@line 20591
   $234 = $ReallocAsyncCtx12 + 16 | 0; //@line 20592
   HEAP32[$234 >> 2] = $2; //@line 20593
   sp = STACKTOP; //@line 20594
   return;
  } else {
   $220 = HEAP32[$216 + 4 >> 2] | 0; //@line 20599
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 20600
   FUNCTION_TABLE_vii[$220 & 7]($2, $$131 + 32 | 0); //@line 20601
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 20604
    $221 = $ReallocAsyncCtx7 + 4 | 0; //@line 20605
    HEAP32[$221 >> 2] = $215; //@line 20606
    $222 = $ReallocAsyncCtx7 + 8 | 0; //@line 20607
    HEAP32[$222 >> 2] = $2; //@line 20608
    $223 = $ReallocAsyncCtx7 + 12 | 0; //@line 20609
    HEAP32[$223 >> 2] = $32; //@line 20610
    sp = STACKTOP; //@line 20611
    return;
   }
   ___async_unwind = 0; //@line 20614
   HEAP32[$ReallocAsyncCtx7 >> 2] = 197; //@line 20615
   $221 = $ReallocAsyncCtx7 + 4 | 0; //@line 20616
   HEAP32[$221 >> 2] = $215; //@line 20617
   $222 = $ReallocAsyncCtx7 + 8 | 0; //@line 20618
   HEAP32[$222 >> 2] = $2; //@line 20619
   $223 = $ReallocAsyncCtx7 + 12 | 0; //@line 20620
   HEAP32[$223 >> 2] = $32; //@line 20621
   sp = STACKTOP; //@line 20622
   return;
  }
 } else if ((label | 0) == 5) {
  $57 = HEAP32[$52 >> 2] | 0; //@line 20627
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(100) | 0; //@line 20628
  __ZL28nsapi_dns_query_async_deletei($57); //@line 20629
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 20632
   $58 = $ReallocAsyncCtx10 + 4 | 0; //@line 20633
   HEAP32[$58 >> 2] = $2; //@line 20634
   $59 = $ReallocAsyncCtx10 + 8 | 0; //@line 20635
   HEAP32[$59 >> 2] = $4; //@line 20636
   $60 = $ReallocAsyncCtx10 + 12 | 0; //@line 20637
   HEAP32[$60 >> 2] = $6; //@line 20638
   $61 = $ReallocAsyncCtx10 + 16 | 0; //@line 20639
   HEAP32[$61 >> 2] = $8; //@line 20640
   $62 = $ReallocAsyncCtx10 + 20 | 0; //@line 20641
   HEAP32[$62 >> 2] = $10; //@line 20642
   $63 = $ReallocAsyncCtx10 + 24 | 0; //@line 20643
   HEAP32[$63 >> 2] = $12; //@line 20644
   $64 = $ReallocAsyncCtx10 + 28 | 0; //@line 20645
   HEAP32[$64 >> 2] = $14; //@line 20646
   $65 = $ReallocAsyncCtx10 + 32 | 0; //@line 20647
   HEAP32[$65 >> 2] = $16; //@line 20648
   $66 = $ReallocAsyncCtx10 + 36 | 0; //@line 20649
   HEAP32[$66 >> 2] = $18; //@line 20650
   $67 = $ReallocAsyncCtx10 + 40 | 0; //@line 20651
   HEAP32[$67 >> 2] = $20; //@line 20652
   $68 = $ReallocAsyncCtx10 + 44 | 0; //@line 20653
   HEAP32[$68 >> 2] = $22; //@line 20654
   $69 = $ReallocAsyncCtx10 + 48 | 0; //@line 20655
   HEAP32[$69 >> 2] = $24; //@line 20656
   $70 = $ReallocAsyncCtx10 + 52 | 0; //@line 20657
   HEAP32[$70 >> 2] = $26; //@line 20658
   $71 = $ReallocAsyncCtx10 + 56 | 0; //@line 20659
   HEAP32[$71 >> 2] = $28; //@line 20660
   $72 = $ReallocAsyncCtx10 + 60 | 0; //@line 20661
   HEAP32[$72 >> 2] = $30; //@line 20662
   $73 = $ReallocAsyncCtx10 + 64 | 0; //@line 20663
   HEAP32[$73 >> 2] = $32; //@line 20664
   $74 = $ReallocAsyncCtx10 + 68 | 0; //@line 20665
   HEAP32[$74 >> 2] = $34; //@line 20666
   $75 = $ReallocAsyncCtx10 + 72 | 0; //@line 20667
   HEAP32[$75 >> 2] = $36; //@line 20668
   $76 = $ReallocAsyncCtx10 + 76 | 0; //@line 20669
   HEAP32[$76 >> 2] = $38; //@line 20670
   $77 = $ReallocAsyncCtx10 + 80 | 0; //@line 20671
   HEAP32[$77 >> 2] = $40; //@line 20672
   $78 = $ReallocAsyncCtx10 + 84 | 0; //@line 20673
   HEAP32[$78 >> 2] = $42; //@line 20674
   $79 = $ReallocAsyncCtx10 + 88 | 0; //@line 20675
   HEAP32[$79 >> 2] = $44; //@line 20676
   $80 = $ReallocAsyncCtx10 + 92 | 0; //@line 20677
   HEAP32[$80 >> 2] = $$131; //@line 20678
   $81 = $ReallocAsyncCtx10 + 96 | 0; //@line 20679
   HEAP32[$81 >> 2] = $51; //@line 20680
   sp = STACKTOP; //@line 20681
   return;
  }
  ___async_unwind = 0; //@line 20684
  HEAP32[$ReallocAsyncCtx10 >> 2] = 185; //@line 20685
  $58 = $ReallocAsyncCtx10 + 4 | 0; //@line 20686
  HEAP32[$58 >> 2] = $2; //@line 20687
  $59 = $ReallocAsyncCtx10 + 8 | 0; //@line 20688
  HEAP32[$59 >> 2] = $4; //@line 20689
  $60 = $ReallocAsyncCtx10 + 12 | 0; //@line 20690
  HEAP32[$60 >> 2] = $6; //@line 20691
  $61 = $ReallocAsyncCtx10 + 16 | 0; //@line 20692
  HEAP32[$61 >> 2] = $8; //@line 20693
  $62 = $ReallocAsyncCtx10 + 20 | 0; //@line 20694
  HEAP32[$62 >> 2] = $10; //@line 20695
  $63 = $ReallocAsyncCtx10 + 24 | 0; //@line 20696
  HEAP32[$63 >> 2] = $12; //@line 20697
  $64 = $ReallocAsyncCtx10 + 28 | 0; //@line 20698
  HEAP32[$64 >> 2] = $14; //@line 20699
  $65 = $ReallocAsyncCtx10 + 32 | 0; //@line 20700
  HEAP32[$65 >> 2] = $16; //@line 20701
  $66 = $ReallocAsyncCtx10 + 36 | 0; //@line 20702
  HEAP32[$66 >> 2] = $18; //@line 20703
  $67 = $ReallocAsyncCtx10 + 40 | 0; //@line 20704
  HEAP32[$67 >> 2] = $20; //@line 20705
  $68 = $ReallocAsyncCtx10 + 44 | 0; //@line 20706
  HEAP32[$68 >> 2] = $22; //@line 20707
  $69 = $ReallocAsyncCtx10 + 48 | 0; //@line 20708
  HEAP32[$69 >> 2] = $24; //@line 20709
  $70 = $ReallocAsyncCtx10 + 52 | 0; //@line 20710
  HEAP32[$70 >> 2] = $26; //@line 20711
  $71 = $ReallocAsyncCtx10 + 56 | 0; //@line 20712
  HEAP32[$71 >> 2] = $28; //@line 20713
  $72 = $ReallocAsyncCtx10 + 60 | 0; //@line 20714
  HEAP32[$72 >> 2] = $30; //@line 20715
  $73 = $ReallocAsyncCtx10 + 64 | 0; //@line 20716
  HEAP32[$73 >> 2] = $32; //@line 20717
  $74 = $ReallocAsyncCtx10 + 68 | 0; //@line 20718
  HEAP32[$74 >> 2] = $34; //@line 20719
  $75 = $ReallocAsyncCtx10 + 72 | 0; //@line 20720
  HEAP32[$75 >> 2] = $36; //@line 20721
  $76 = $ReallocAsyncCtx10 + 76 | 0; //@line 20722
  HEAP32[$76 >> 2] = $38; //@line 20723
  $77 = $ReallocAsyncCtx10 + 80 | 0; //@line 20724
  HEAP32[$77 >> 2] = $40; //@line 20725
  $78 = $ReallocAsyncCtx10 + 84 | 0; //@line 20726
  HEAP32[$78 >> 2] = $42; //@line 20727
  $79 = $ReallocAsyncCtx10 + 88 | 0; //@line 20728
  HEAP32[$79 >> 2] = $44; //@line 20729
  $80 = $ReallocAsyncCtx10 + 92 | 0; //@line 20730
  HEAP32[$80 >> 2] = $$131; //@line 20731
  $81 = $ReallocAsyncCtx10 + 96 | 0; //@line 20732
  HEAP32[$81 >> 2] = $51; //@line 20733
  sp = STACKTOP; //@line 20734
  return;
 } else if ((label | 0) == 12) {
  HEAP32[$52 + 76 >> 2] = 0; //@line 20739
  $90 = $52 + 44 | 0; //@line 20740
  $91 = HEAP32[$90 >> 2] | 0; //@line 20741
  if (!$91) {
   HEAP32[$34 >> 2] = 0; //@line 20744
   $122 = HEAP32[$52 >> 2] | 0; //@line 20745
   HEAP32[$36 >> 2] = 0; //@line 20746
   HEAP32[$38 >> 2] = 188; //@line 20747
   HEAP32[$40 >> 2] = $122; //@line 20748
   HEAP32[$8 >> 2] = 764; //@line 20749
   $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 20750
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($42, 0, $44) | 0; //@line 20751
   if (___async) {
    HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 20754
    $123 = $ReallocAsyncCtx14 + 4 | 0; //@line 20755
    HEAP32[$123 >> 2] = $2; //@line 20756
    $124 = $ReallocAsyncCtx14 + 8 | 0; //@line 20757
    HEAP32[$124 >> 2] = $4; //@line 20758
    $125 = $ReallocAsyncCtx14 + 12 | 0; //@line 20759
    HEAP32[$125 >> 2] = $6; //@line 20760
    $126 = $ReallocAsyncCtx14 + 16 | 0; //@line 20761
    HEAP32[$126 >> 2] = $8; //@line 20762
    $127 = $ReallocAsyncCtx14 + 20 | 0; //@line 20763
    HEAP32[$127 >> 2] = $10; //@line 20764
    $128 = $ReallocAsyncCtx14 + 24 | 0; //@line 20765
    HEAP32[$128 >> 2] = $12; //@line 20766
    $129 = $ReallocAsyncCtx14 + 28 | 0; //@line 20767
    HEAP32[$129 >> 2] = $14; //@line 20768
    $130 = $ReallocAsyncCtx14 + 32 | 0; //@line 20769
    HEAP32[$130 >> 2] = $16; //@line 20770
    $131 = $ReallocAsyncCtx14 + 36 | 0; //@line 20771
    HEAP32[$131 >> 2] = $18; //@line 20772
    $132 = $ReallocAsyncCtx14 + 40 | 0; //@line 20773
    HEAP32[$132 >> 2] = $20; //@line 20774
    $133 = $ReallocAsyncCtx14 + 44 | 0; //@line 20775
    HEAP32[$133 >> 2] = $22; //@line 20776
    $134 = $ReallocAsyncCtx14 + 48 | 0; //@line 20777
    HEAP32[$134 >> 2] = $24; //@line 20778
    $135 = $ReallocAsyncCtx14 + 52 | 0; //@line 20779
    HEAP32[$135 >> 2] = $26; //@line 20780
    $136 = $ReallocAsyncCtx14 + 56 | 0; //@line 20781
    HEAP32[$136 >> 2] = $28; //@line 20782
    $137 = $ReallocAsyncCtx14 + 60 | 0; //@line 20783
    HEAP32[$137 >> 2] = $30; //@line 20784
    $138 = $ReallocAsyncCtx14 + 64 | 0; //@line 20785
    HEAP32[$138 >> 2] = $32; //@line 20786
    $139 = $ReallocAsyncCtx14 + 68 | 0; //@line 20787
    HEAP32[$139 >> 2] = $34; //@line 20788
    $140 = $ReallocAsyncCtx14 + 72 | 0; //@line 20789
    HEAP32[$140 >> 2] = $36; //@line 20790
    $141 = $ReallocAsyncCtx14 + 76 | 0; //@line 20791
    HEAP32[$141 >> 2] = $38; //@line 20792
    $142 = $ReallocAsyncCtx14 + 80 | 0; //@line 20793
    HEAP32[$142 >> 2] = $40; //@line 20794
    $143 = $ReallocAsyncCtx14 + 84 | 0; //@line 20795
    HEAP32[$143 >> 2] = $42; //@line 20796
    $144 = $ReallocAsyncCtx14 + 88 | 0; //@line 20797
    HEAP32[$144 >> 2] = $44; //@line 20798
    $145 = $ReallocAsyncCtx14 + 92 | 0; //@line 20799
    HEAP32[$145 >> 2] = $50; //@line 20800
    $146 = $ReallocAsyncCtx14 + 96 | 0; //@line 20801
    HEAP32[$146 >> 2] = $$131; //@line 20802
    $147 = $ReallocAsyncCtx14 + 100 | 0; //@line 20803
    HEAP32[$147 >> 2] = $51; //@line 20804
    sp = STACKTOP; //@line 20805
    return;
   }
   ___async_unwind = 0; //@line 20808
   HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 20809
   $123 = $ReallocAsyncCtx14 + 4 | 0; //@line 20810
   HEAP32[$123 >> 2] = $2; //@line 20811
   $124 = $ReallocAsyncCtx14 + 8 | 0; //@line 20812
   HEAP32[$124 >> 2] = $4; //@line 20813
   $125 = $ReallocAsyncCtx14 + 12 | 0; //@line 20814
   HEAP32[$125 >> 2] = $6; //@line 20815
   $126 = $ReallocAsyncCtx14 + 16 | 0; //@line 20816
   HEAP32[$126 >> 2] = $8; //@line 20817
   $127 = $ReallocAsyncCtx14 + 20 | 0; //@line 20818
   HEAP32[$127 >> 2] = $10; //@line 20819
   $128 = $ReallocAsyncCtx14 + 24 | 0; //@line 20820
   HEAP32[$128 >> 2] = $12; //@line 20821
   $129 = $ReallocAsyncCtx14 + 28 | 0; //@line 20822
   HEAP32[$129 >> 2] = $14; //@line 20823
   $130 = $ReallocAsyncCtx14 + 32 | 0; //@line 20824
   HEAP32[$130 >> 2] = $16; //@line 20825
   $131 = $ReallocAsyncCtx14 + 36 | 0; //@line 20826
   HEAP32[$131 >> 2] = $18; //@line 20827
   $132 = $ReallocAsyncCtx14 + 40 | 0; //@line 20828
   HEAP32[$132 >> 2] = $20; //@line 20829
   $133 = $ReallocAsyncCtx14 + 44 | 0; //@line 20830
   HEAP32[$133 >> 2] = $22; //@line 20831
   $134 = $ReallocAsyncCtx14 + 48 | 0; //@line 20832
   HEAP32[$134 >> 2] = $24; //@line 20833
   $135 = $ReallocAsyncCtx14 + 52 | 0; //@line 20834
   HEAP32[$135 >> 2] = $26; //@line 20835
   $136 = $ReallocAsyncCtx14 + 56 | 0; //@line 20836
   HEAP32[$136 >> 2] = $28; //@line 20837
   $137 = $ReallocAsyncCtx14 + 60 | 0; //@line 20838
   HEAP32[$137 >> 2] = $30; //@line 20839
   $138 = $ReallocAsyncCtx14 + 64 | 0; //@line 20840
   HEAP32[$138 >> 2] = $32; //@line 20841
   $139 = $ReallocAsyncCtx14 + 68 | 0; //@line 20842
   HEAP32[$139 >> 2] = $34; //@line 20843
   $140 = $ReallocAsyncCtx14 + 72 | 0; //@line 20844
   HEAP32[$140 >> 2] = $36; //@line 20845
   $141 = $ReallocAsyncCtx14 + 76 | 0; //@line 20846
   HEAP32[$141 >> 2] = $38; //@line 20847
   $142 = $ReallocAsyncCtx14 + 80 | 0; //@line 20848
   HEAP32[$142 >> 2] = $40; //@line 20849
   $143 = $ReallocAsyncCtx14 + 84 | 0; //@line 20850
   HEAP32[$143 >> 2] = $42; //@line 20851
   $144 = $ReallocAsyncCtx14 + 88 | 0; //@line 20852
   HEAP32[$144 >> 2] = $44; //@line 20853
   $145 = $ReallocAsyncCtx14 + 92 | 0; //@line 20854
   HEAP32[$145 >> 2] = $50; //@line 20855
   $146 = $ReallocAsyncCtx14 + 96 | 0; //@line 20856
   HEAP32[$146 >> 2] = $$131; //@line 20857
   $147 = $ReallocAsyncCtx14 + 100 | 0; //@line 20858
   HEAP32[$147 >> 2] = $51; //@line 20859
   sp = STACKTOP; //@line 20860
   return;
  } else {
   $95 = HEAP32[$91 + 4 >> 2] | 0; //@line 20865
   $ReallocAsyncCtx = _emscripten_realloc_async_context(108) | 0; //@line 20866
   FUNCTION_TABLE_vii[$95 & 7]($30, $52 + 32 | 0); //@line 20867
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 20870
    $96 = $ReallocAsyncCtx + 4 | 0; //@line 20871
    HEAP32[$96 >> 2] = $4; //@line 20872
    $97 = $ReallocAsyncCtx + 8 | 0; //@line 20873
    HEAP32[$97 >> 2] = $6; //@line 20874
    $98 = $ReallocAsyncCtx + 12 | 0; //@line 20875
    HEAP32[$98 >> 2] = $8; //@line 20876
    $99 = $ReallocAsyncCtx + 16 | 0; //@line 20877
    HEAP32[$99 >> 2] = $10; //@line 20878
    $100 = $ReallocAsyncCtx + 20 | 0; //@line 20879
    HEAP32[$100 >> 2] = $12; //@line 20880
    $101 = $ReallocAsyncCtx + 24 | 0; //@line 20881
    HEAP32[$101 >> 2] = $14; //@line 20882
    $102 = $ReallocAsyncCtx + 28 | 0; //@line 20883
    HEAP32[$102 >> 2] = $16; //@line 20884
    $103 = $ReallocAsyncCtx + 32 | 0; //@line 20885
    HEAP32[$103 >> 2] = $18; //@line 20886
    $104 = $ReallocAsyncCtx + 36 | 0; //@line 20887
    HEAP32[$104 >> 2] = $20; //@line 20888
    $105 = $ReallocAsyncCtx + 40 | 0; //@line 20889
    HEAP32[$105 >> 2] = $22; //@line 20890
    $106 = $ReallocAsyncCtx + 44 | 0; //@line 20891
    HEAP32[$106 >> 2] = $24; //@line 20892
    $107 = $ReallocAsyncCtx + 48 | 0; //@line 20893
    HEAP32[$107 >> 2] = $50; //@line 20894
    $108 = $ReallocAsyncCtx + 52 | 0; //@line 20895
    HEAP32[$108 >> 2] = $90; //@line 20896
    $109 = $ReallocAsyncCtx + 56 | 0; //@line 20897
    HEAP32[$109 >> 2] = $2; //@line 20898
    $110 = $ReallocAsyncCtx + 60 | 0; //@line 20899
    HEAP32[$110 >> 2] = $26; //@line 20900
    $111 = $ReallocAsyncCtx + 64 | 0; //@line 20901
    HEAP32[$111 >> 2] = $28; //@line 20902
    $112 = $ReallocAsyncCtx + 68 | 0; //@line 20903
    HEAP32[$112 >> 2] = $30; //@line 20904
    $113 = $ReallocAsyncCtx + 72 | 0; //@line 20905
    HEAP32[$113 >> 2] = $32; //@line 20906
    $114 = $ReallocAsyncCtx + 76 | 0; //@line 20907
    HEAP32[$114 >> 2] = $34; //@line 20908
    $115 = $ReallocAsyncCtx + 80 | 0; //@line 20909
    HEAP32[$115 >> 2] = $36; //@line 20910
    $116 = $ReallocAsyncCtx + 84 | 0; //@line 20911
    HEAP32[$116 >> 2] = $38; //@line 20912
    $117 = $ReallocAsyncCtx + 88 | 0; //@line 20913
    HEAP32[$117 >> 2] = $40; //@line 20914
    $118 = $ReallocAsyncCtx + 92 | 0; //@line 20915
    HEAP32[$118 >> 2] = $42; //@line 20916
    $119 = $ReallocAsyncCtx + 96 | 0; //@line 20917
    HEAP32[$119 >> 2] = $44; //@line 20918
    $120 = $ReallocAsyncCtx + 100 | 0; //@line 20919
    HEAP32[$120 >> 2] = $$131; //@line 20920
    $121 = $ReallocAsyncCtx + 104 | 0; //@line 20921
    HEAP32[$121 >> 2] = $51; //@line 20922
    sp = STACKTOP; //@line 20923
    return;
   }
   ___async_unwind = 0; //@line 20926
   HEAP32[$ReallocAsyncCtx >> 2] = 187; //@line 20927
   $96 = $ReallocAsyncCtx + 4 | 0; //@line 20928
   HEAP32[$96 >> 2] = $4; //@line 20929
   $97 = $ReallocAsyncCtx + 8 | 0; //@line 20930
   HEAP32[$97 >> 2] = $6; //@line 20931
   $98 = $ReallocAsyncCtx + 12 | 0; //@line 20932
   HEAP32[$98 >> 2] = $8; //@line 20933
   $99 = $ReallocAsyncCtx + 16 | 0; //@line 20934
   HEAP32[$99 >> 2] = $10; //@line 20935
   $100 = $ReallocAsyncCtx + 20 | 0; //@line 20936
   HEAP32[$100 >> 2] = $12; //@line 20937
   $101 = $ReallocAsyncCtx + 24 | 0; //@line 20938
   HEAP32[$101 >> 2] = $14; //@line 20939
   $102 = $ReallocAsyncCtx + 28 | 0; //@line 20940
   HEAP32[$102 >> 2] = $16; //@line 20941
   $103 = $ReallocAsyncCtx + 32 | 0; //@line 20942
   HEAP32[$103 >> 2] = $18; //@line 20943
   $104 = $ReallocAsyncCtx + 36 | 0; //@line 20944
   HEAP32[$104 >> 2] = $20; //@line 20945
   $105 = $ReallocAsyncCtx + 40 | 0; //@line 20946
   HEAP32[$105 >> 2] = $22; //@line 20947
   $106 = $ReallocAsyncCtx + 44 | 0; //@line 20948
   HEAP32[$106 >> 2] = $24; //@line 20949
   $107 = $ReallocAsyncCtx + 48 | 0; //@line 20950
   HEAP32[$107 >> 2] = $50; //@line 20951
   $108 = $ReallocAsyncCtx + 52 | 0; //@line 20952
   HEAP32[$108 >> 2] = $90; //@line 20953
   $109 = $ReallocAsyncCtx + 56 | 0; //@line 20954
   HEAP32[$109 >> 2] = $2; //@line 20955
   $110 = $ReallocAsyncCtx + 60 | 0; //@line 20956
   HEAP32[$110 >> 2] = $26; //@line 20957
   $111 = $ReallocAsyncCtx + 64 | 0; //@line 20958
   HEAP32[$111 >> 2] = $28; //@line 20959
   $112 = $ReallocAsyncCtx + 68 | 0; //@line 20960
   HEAP32[$112 >> 2] = $30; //@line 20961
   $113 = $ReallocAsyncCtx + 72 | 0; //@line 20962
   HEAP32[$113 >> 2] = $32; //@line 20963
   $114 = $ReallocAsyncCtx + 76 | 0; //@line 20964
   HEAP32[$114 >> 2] = $34; //@line 20965
   $115 = $ReallocAsyncCtx + 80 | 0; //@line 20966
   HEAP32[$115 >> 2] = $36; //@line 20967
   $116 = $ReallocAsyncCtx + 84 | 0; //@line 20968
   HEAP32[$116 >> 2] = $38; //@line 20969
   $117 = $ReallocAsyncCtx + 88 | 0; //@line 20970
   HEAP32[$117 >> 2] = $40; //@line 20971
   $118 = $ReallocAsyncCtx + 92 | 0; //@line 20972
   HEAP32[$118 >> 2] = $42; //@line 20973
   $119 = $ReallocAsyncCtx + 96 | 0; //@line 20974
   HEAP32[$119 >> 2] = $44; //@line 20975
   $120 = $ReallocAsyncCtx + 100 | 0; //@line 20976
   HEAP32[$120 >> 2] = $$131; //@line 20977
   $121 = $ReallocAsyncCtx + 104 | 0; //@line 20978
   HEAP32[$121 >> 2] = $51; //@line 20979
   sp = STACKTOP; //@line 20980
   return;
  }
 } else if ((label | 0) == 22) {
  HEAP32[$149 >> 2] = 0; //@line 20985
  $154 = $148 + 44 | 0; //@line 20986
  $155 = HEAP32[$154 >> 2] | 0; //@line 20987
  if (!$155) {
   HEAP32[$12 >> 2] = 0; //@line 20990
   $186 = HEAP32[$148 >> 2] | 0; //@line 20991
   HEAP32[$14 >> 2] = 0; //@line 20992
   HEAP32[$16 >> 2] = 193; //@line 20993
   HEAP32[$18 >> 2] = $186; //@line 20994
   HEAP32[$20 >> 2] = 764; //@line 20995
   $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 20996
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 20997
   if (___async) {
    HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 21000
    $187 = $ReallocAsyncCtx13 + 4 | 0; //@line 21001
    HEAP32[$187 >> 2] = $2; //@line 21002
    $188 = $ReallocAsyncCtx13 + 8 | 0; //@line 21003
    HEAP32[$188 >> 2] = $4; //@line 21004
    $189 = $ReallocAsyncCtx13 + 12 | 0; //@line 21005
    HEAP32[$189 >> 2] = $6; //@line 21006
    $190 = $ReallocAsyncCtx13 + 16 | 0; //@line 21007
    HEAP32[$190 >> 2] = $8; //@line 21008
    $191 = $ReallocAsyncCtx13 + 20 | 0; //@line 21009
    HEAP32[$191 >> 2] = $10; //@line 21010
    $192 = $ReallocAsyncCtx13 + 24 | 0; //@line 21011
    HEAP32[$192 >> 2] = $12; //@line 21012
    $193 = $ReallocAsyncCtx13 + 28 | 0; //@line 21013
    HEAP32[$193 >> 2] = $14; //@line 21014
    $194 = $ReallocAsyncCtx13 + 32 | 0; //@line 21015
    HEAP32[$194 >> 2] = $16; //@line 21016
    $195 = $ReallocAsyncCtx13 + 36 | 0; //@line 21017
    HEAP32[$195 >> 2] = $18; //@line 21018
    $196 = $ReallocAsyncCtx13 + 40 | 0; //@line 21019
    HEAP32[$196 >> 2] = $20; //@line 21020
    $197 = $ReallocAsyncCtx13 + 44 | 0; //@line 21021
    HEAP32[$197 >> 2] = $22; //@line 21022
    $198 = $ReallocAsyncCtx13 + 48 | 0; //@line 21023
    HEAP32[$198 >> 2] = $24; //@line 21024
    $199 = $ReallocAsyncCtx13 + 52 | 0; //@line 21025
    HEAP32[$199 >> 2] = $26; //@line 21026
    $200 = $ReallocAsyncCtx13 + 56 | 0; //@line 21027
    HEAP32[$200 >> 2] = $28; //@line 21028
    $201 = $ReallocAsyncCtx13 + 60 | 0; //@line 21029
    HEAP32[$201 >> 2] = $30; //@line 21030
    $202 = $ReallocAsyncCtx13 + 64 | 0; //@line 21031
    HEAP32[$202 >> 2] = $32; //@line 21032
    $203 = $ReallocAsyncCtx13 + 68 | 0; //@line 21033
    HEAP32[$203 >> 2] = $34; //@line 21034
    $204 = $ReallocAsyncCtx13 + 72 | 0; //@line 21035
    HEAP32[$204 >> 2] = $36; //@line 21036
    $205 = $ReallocAsyncCtx13 + 76 | 0; //@line 21037
    HEAP32[$205 >> 2] = $38; //@line 21038
    $206 = $ReallocAsyncCtx13 + 80 | 0; //@line 21039
    HEAP32[$206 >> 2] = $40; //@line 21040
    $207 = $ReallocAsyncCtx13 + 84 | 0; //@line 21041
    HEAP32[$207 >> 2] = $42; //@line 21042
    $208 = $ReallocAsyncCtx13 + 88 | 0; //@line 21043
    HEAP32[$208 >> 2] = $44; //@line 21044
    $209 = $ReallocAsyncCtx13 + 92 | 0; //@line 21045
    HEAP32[$209 >> 2] = $50; //@line 21046
    $210 = $ReallocAsyncCtx13 + 96 | 0; //@line 21047
    HEAP32[$210 >> 2] = $$131; //@line 21048
    $211 = $ReallocAsyncCtx13 + 100 | 0; //@line 21049
    HEAP32[$211 >> 2] = $51; //@line 21050
    sp = STACKTOP; //@line 21051
    return;
   }
   ___async_unwind = 0; //@line 21054
   HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 21055
   $187 = $ReallocAsyncCtx13 + 4 | 0; //@line 21056
   HEAP32[$187 >> 2] = $2; //@line 21057
   $188 = $ReallocAsyncCtx13 + 8 | 0; //@line 21058
   HEAP32[$188 >> 2] = $4; //@line 21059
   $189 = $ReallocAsyncCtx13 + 12 | 0; //@line 21060
   HEAP32[$189 >> 2] = $6; //@line 21061
   $190 = $ReallocAsyncCtx13 + 16 | 0; //@line 21062
   HEAP32[$190 >> 2] = $8; //@line 21063
   $191 = $ReallocAsyncCtx13 + 20 | 0; //@line 21064
   HEAP32[$191 >> 2] = $10; //@line 21065
   $192 = $ReallocAsyncCtx13 + 24 | 0; //@line 21066
   HEAP32[$192 >> 2] = $12; //@line 21067
   $193 = $ReallocAsyncCtx13 + 28 | 0; //@line 21068
   HEAP32[$193 >> 2] = $14; //@line 21069
   $194 = $ReallocAsyncCtx13 + 32 | 0; //@line 21070
   HEAP32[$194 >> 2] = $16; //@line 21071
   $195 = $ReallocAsyncCtx13 + 36 | 0; //@line 21072
   HEAP32[$195 >> 2] = $18; //@line 21073
   $196 = $ReallocAsyncCtx13 + 40 | 0; //@line 21074
   HEAP32[$196 >> 2] = $20; //@line 21075
   $197 = $ReallocAsyncCtx13 + 44 | 0; //@line 21076
   HEAP32[$197 >> 2] = $22; //@line 21077
   $198 = $ReallocAsyncCtx13 + 48 | 0; //@line 21078
   HEAP32[$198 >> 2] = $24; //@line 21079
   $199 = $ReallocAsyncCtx13 + 52 | 0; //@line 21080
   HEAP32[$199 >> 2] = $26; //@line 21081
   $200 = $ReallocAsyncCtx13 + 56 | 0; //@line 21082
   HEAP32[$200 >> 2] = $28; //@line 21083
   $201 = $ReallocAsyncCtx13 + 60 | 0; //@line 21084
   HEAP32[$201 >> 2] = $30; //@line 21085
   $202 = $ReallocAsyncCtx13 + 64 | 0; //@line 21086
   HEAP32[$202 >> 2] = $32; //@line 21087
   $203 = $ReallocAsyncCtx13 + 68 | 0; //@line 21088
   HEAP32[$203 >> 2] = $34; //@line 21089
   $204 = $ReallocAsyncCtx13 + 72 | 0; //@line 21090
   HEAP32[$204 >> 2] = $36; //@line 21091
   $205 = $ReallocAsyncCtx13 + 76 | 0; //@line 21092
   HEAP32[$205 >> 2] = $38; //@line 21093
   $206 = $ReallocAsyncCtx13 + 80 | 0; //@line 21094
   HEAP32[$206 >> 2] = $40; //@line 21095
   $207 = $ReallocAsyncCtx13 + 84 | 0; //@line 21096
   HEAP32[$207 >> 2] = $42; //@line 21097
   $208 = $ReallocAsyncCtx13 + 88 | 0; //@line 21098
   HEAP32[$208 >> 2] = $44; //@line 21099
   $209 = $ReallocAsyncCtx13 + 92 | 0; //@line 21100
   HEAP32[$209 >> 2] = $50; //@line 21101
   $210 = $ReallocAsyncCtx13 + 96 | 0; //@line 21102
   HEAP32[$210 >> 2] = $$131; //@line 21103
   $211 = $ReallocAsyncCtx13 + 100 | 0; //@line 21104
   HEAP32[$211 >> 2] = $51; //@line 21105
   sp = STACKTOP; //@line 21106
   return;
  } else {
   $159 = HEAP32[$155 + 4 >> 2] | 0; //@line 21111
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 21112
   FUNCTION_TABLE_vii[$159 & 7]($10, $148 + 32 | 0); //@line 21113
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 21116
    $160 = $ReallocAsyncCtx4 + 4 | 0; //@line 21117
    HEAP32[$160 >> 2] = $4; //@line 21118
    $161 = $ReallocAsyncCtx4 + 8 | 0; //@line 21119
    HEAP32[$161 >> 2] = $6; //@line 21120
    $162 = $ReallocAsyncCtx4 + 12 | 0; //@line 21121
    HEAP32[$162 >> 2] = $8; //@line 21122
    $163 = $ReallocAsyncCtx4 + 16 | 0; //@line 21123
    HEAP32[$163 >> 2] = $10; //@line 21124
    $164 = $ReallocAsyncCtx4 + 20 | 0; //@line 21125
    HEAP32[$164 >> 2] = $12; //@line 21126
    $165 = $ReallocAsyncCtx4 + 24 | 0; //@line 21127
    HEAP32[$165 >> 2] = $14; //@line 21128
    $166 = $ReallocAsyncCtx4 + 28 | 0; //@line 21129
    HEAP32[$166 >> 2] = $16; //@line 21130
    $167 = $ReallocAsyncCtx4 + 32 | 0; //@line 21131
    HEAP32[$167 >> 2] = $18; //@line 21132
    $168 = $ReallocAsyncCtx4 + 36 | 0; //@line 21133
    HEAP32[$168 >> 2] = $20; //@line 21134
    $169 = $ReallocAsyncCtx4 + 40 | 0; //@line 21135
    HEAP32[$169 >> 2] = $22; //@line 21136
    $170 = $ReallocAsyncCtx4 + 44 | 0; //@line 21137
    HEAP32[$170 >> 2] = $24; //@line 21138
    $171 = $ReallocAsyncCtx4 + 48 | 0; //@line 21139
    HEAP32[$171 >> 2] = $2; //@line 21140
    $172 = $ReallocAsyncCtx4 + 52 | 0; //@line 21141
    HEAP32[$172 >> 2] = $26; //@line 21142
    $173 = $ReallocAsyncCtx4 + 56 | 0; //@line 21143
    HEAP32[$173 >> 2] = $28; //@line 21144
    $174 = $ReallocAsyncCtx4 + 60 | 0; //@line 21145
    HEAP32[$174 >> 2] = $30; //@line 21146
    $175 = $ReallocAsyncCtx4 + 64 | 0; //@line 21147
    HEAP32[$175 >> 2] = $32; //@line 21148
    $176 = $ReallocAsyncCtx4 + 68 | 0; //@line 21149
    HEAP32[$176 >> 2] = $34; //@line 21150
    $177 = $ReallocAsyncCtx4 + 72 | 0; //@line 21151
    HEAP32[$177 >> 2] = $36; //@line 21152
    $178 = $ReallocAsyncCtx4 + 76 | 0; //@line 21153
    HEAP32[$178 >> 2] = $38; //@line 21154
    $179 = $ReallocAsyncCtx4 + 80 | 0; //@line 21155
    HEAP32[$179 >> 2] = $40; //@line 21156
    $180 = $ReallocAsyncCtx4 + 84 | 0; //@line 21157
    HEAP32[$180 >> 2] = $42; //@line 21158
    $181 = $ReallocAsyncCtx4 + 88 | 0; //@line 21159
    HEAP32[$181 >> 2] = $44; //@line 21160
    $182 = $ReallocAsyncCtx4 + 92 | 0; //@line 21161
    HEAP32[$182 >> 2] = $154; //@line 21162
    $183 = $ReallocAsyncCtx4 + 96 | 0; //@line 21163
    HEAP32[$183 >> 2] = $50; //@line 21164
    $184 = $ReallocAsyncCtx4 + 100 | 0; //@line 21165
    HEAP32[$184 >> 2] = $$131; //@line 21166
    $185 = $ReallocAsyncCtx4 + 104 | 0; //@line 21167
    HEAP32[$185 >> 2] = $51; //@line 21168
    sp = STACKTOP; //@line 21169
    return;
   }
   ___async_unwind = 0; //@line 21172
   HEAP32[$ReallocAsyncCtx4 >> 2] = 192; //@line 21173
   $160 = $ReallocAsyncCtx4 + 4 | 0; //@line 21174
   HEAP32[$160 >> 2] = $4; //@line 21175
   $161 = $ReallocAsyncCtx4 + 8 | 0; //@line 21176
   HEAP32[$161 >> 2] = $6; //@line 21177
   $162 = $ReallocAsyncCtx4 + 12 | 0; //@line 21178
   HEAP32[$162 >> 2] = $8; //@line 21179
   $163 = $ReallocAsyncCtx4 + 16 | 0; //@line 21180
   HEAP32[$163 >> 2] = $10; //@line 21181
   $164 = $ReallocAsyncCtx4 + 20 | 0; //@line 21182
   HEAP32[$164 >> 2] = $12; //@line 21183
   $165 = $ReallocAsyncCtx4 + 24 | 0; //@line 21184
   HEAP32[$165 >> 2] = $14; //@line 21185
   $166 = $ReallocAsyncCtx4 + 28 | 0; //@line 21186
   HEAP32[$166 >> 2] = $16; //@line 21187
   $167 = $ReallocAsyncCtx4 + 32 | 0; //@line 21188
   HEAP32[$167 >> 2] = $18; //@line 21189
   $168 = $ReallocAsyncCtx4 + 36 | 0; //@line 21190
   HEAP32[$168 >> 2] = $20; //@line 21191
   $169 = $ReallocAsyncCtx4 + 40 | 0; //@line 21192
   HEAP32[$169 >> 2] = $22; //@line 21193
   $170 = $ReallocAsyncCtx4 + 44 | 0; //@line 21194
   HEAP32[$170 >> 2] = $24; //@line 21195
   $171 = $ReallocAsyncCtx4 + 48 | 0; //@line 21196
   HEAP32[$171 >> 2] = $2; //@line 21197
   $172 = $ReallocAsyncCtx4 + 52 | 0; //@line 21198
   HEAP32[$172 >> 2] = $26; //@line 21199
   $173 = $ReallocAsyncCtx4 + 56 | 0; //@line 21200
   HEAP32[$173 >> 2] = $28; //@line 21201
   $174 = $ReallocAsyncCtx4 + 60 | 0; //@line 21202
   HEAP32[$174 >> 2] = $30; //@line 21203
   $175 = $ReallocAsyncCtx4 + 64 | 0; //@line 21204
   HEAP32[$175 >> 2] = $32; //@line 21205
   $176 = $ReallocAsyncCtx4 + 68 | 0; //@line 21206
   HEAP32[$176 >> 2] = $34; //@line 21207
   $177 = $ReallocAsyncCtx4 + 72 | 0; //@line 21208
   HEAP32[$177 >> 2] = $36; //@line 21209
   $178 = $ReallocAsyncCtx4 + 76 | 0; //@line 21210
   HEAP32[$178 >> 2] = $38; //@line 21211
   $179 = $ReallocAsyncCtx4 + 80 | 0; //@line 21212
   HEAP32[$179 >> 2] = $40; //@line 21213
   $180 = $ReallocAsyncCtx4 + 84 | 0; //@line 21214
   HEAP32[$180 >> 2] = $42; //@line 21215
   $181 = $ReallocAsyncCtx4 + 88 | 0; //@line 21216
   HEAP32[$181 >> 2] = $44; //@line 21217
   $182 = $ReallocAsyncCtx4 + 92 | 0; //@line 21218
   HEAP32[$182 >> 2] = $154; //@line 21219
   $183 = $ReallocAsyncCtx4 + 96 | 0; //@line 21220
   HEAP32[$183 >> 2] = $50; //@line 21221
   $184 = $ReallocAsyncCtx4 + 100 | 0; //@line 21222
   HEAP32[$184 >> 2] = $$131; //@line 21223
   $185 = $ReallocAsyncCtx4 + 104 | 0; //@line 21224
   HEAP32[$185 >> 2] = $51; //@line 21225
   sp = STACKTOP; //@line 21226
   return;
  }
 }
}
function _vfscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$$0268 = 0, $$0266$lcssa = 0, $$0266397 = 0, $$0268 = 0, $$0270 = 0, $$0272 = 0, $$0273408 = 0, $$0276$ph = 0, $$0278$ph = 0, $$0278$ph$phi = 0, $$0278$ph336 = 0, $$0283407 = 0, $$0286399 = 0, $$0288404 = 0, $$0292 = 0, $$0293 = 0, $$0305402 = 0, $$10 = 0, $$11 = 0, $$1267 = 0, $$1271 = 0, $$1274 = 0, $$1277$ph = 0, $$1279 = 0, $$1284 = 0, $$1289 = 0, $$1306 = 0, $$2 = 0, $$2275 = 0, $$2280 = 0, $$2280$ph = 0, $$2280$ph$phi = 0, $$2285 = 0, $$2290 = 0, $$2307$ph = 0, $$3$lcssa = 0, $$3281 = 0, $$3291 = 0, $$3396 = 0, $$4 = 0, $$4282 = 0, $$4309 = 0, $$5 = 0, $$5299 = 0, $$5310 = 0, $$6 = 0, $$6$pn = 0, $$6311 = 0, $$7 = 0, $$7$ph = 0, $$7312 = 0, $$8 = 0, $$8313 = 0, $$9 = 0, $$9314 = 0, $$ph = 0, $$sink330 = 0, $$sroa$2$0$$sroa_idx13 = 0, $100 = 0, $101 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $112 = 0, $114 = 0, $117 = 0, $120 = 0, $122 = 0, $127 = 0, $13 = 0, $134 = 0, $14 = 0, $140 = 0, $146 = 0, $148 = 0, $149 = 0, $15 = 0, $155 = 0, $158 = 0, $16 = 0, $162 = 0, $164 = 0, $166 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $172 = 0, $176 = 0, $179 = 0, $18 = 0, $183 = 0, $186 = 0, $187 = 0, $188 = 0, $190 = 0, $192 = 0, $193 = 0, $20 = 0, $201 = 0, $211 = 0, $213 = 0, $217 = 0, $219 = 0, $227 = 0, $23 = 0, $235 = 0, $236 = 0, $239 = 0, $247 = 0, $254 = 0, $262 = 0, $269 = 0, $274 = 0, $275 = 0, $28 = 0, $282 = 0, $292 = 0.0, $3 = 0, $312 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $320 = 0, $321 = 0, $322 = 0, $35 = 0, $4 = 0, $41 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $54 = 0, $55 = 0, $6 = 0, $65 = 0, $90 = 0, $91 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5645
 STACKTOP = STACKTOP + 288 | 0; //@line 5646
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(288); //@line 5646
 $3 = sp + 8 | 0; //@line 5647
 $4 = sp + 17 | 0; //@line 5648
 $5 = sp; //@line 5649
 $6 = sp + 16 | 0; //@line 5650
 if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
  $314 = ___lockfile($0) | 0; //@line 5656
 } else {
  $314 = 0; //@line 5658
 }
 $11 = HEAP8[$1 >> 0] | 0; //@line 5660
 L4 : do {
  if (!($11 << 24 >> 24)) {
   $$3291 = 0; //@line 5664
  } else {
   $13 = $0 + 4 | 0; //@line 5666
   $14 = $0 + 100 | 0; //@line 5667
   $15 = $0 + 108 | 0; //@line 5668
   $16 = $0 + 8 | 0; //@line 5669
   $17 = $4 + 10 | 0; //@line 5670
   $18 = $4 + 33 | 0; //@line 5671
   $$sroa$2$0$$sroa_idx13 = $3 + 4 | 0; //@line 5672
   $$0273408 = $1; //@line 5673
   $$0283407 = 0; //@line 5673
   $$0288404 = 0; //@line 5673
   $$0305402 = 0; //@line 5673
   $20 = $11; //@line 5673
   $315 = 0; //@line 5673
   L6 : while (1) {
    L8 : do {
     if (!(_isspace($20 & 255) | 0)) {
      $50 = (HEAP8[$$0273408 >> 0] | 0) == 37; //@line 5681
      L10 : do {
       if ($50) {
        $51 = $$0273408 + 1 | 0; //@line 5684
        $52 = HEAP8[$51 >> 0] | 0; //@line 5685
        L12 : do {
         switch ($52 << 24 >> 24) {
         case 37:
          {
           break L10;
           break;
          }
         case 42:
          {
           $$0293 = 0; //@line 5694
           $$2275 = $$0273408 + 2 | 0; //@line 5694
           break;
          }
         default:
          {
           if (_isdigit($52 & 255) | 0) {
            if ((HEAP8[$$0273408 + 2 >> 0] | 0) == 36) {
             $$0293 = _arg_n_727($2, (HEAPU8[$51 >> 0] | 0) + -48 | 0) | 0; //@line 5711
             $$2275 = $$0273408 + 3 | 0; //@line 5711
             break L12;
            }
           }
           $90 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 5726
           $91 = HEAP32[$90 >> 2] | 0; //@line 5727
           HEAP32[$2 >> 2] = $90 + 4; //@line 5729
           $$0293 = $91; //@line 5730
           $$2275 = $51; //@line 5730
          }
         }
        } while (0);
        if (!(_isdigit(HEAPU8[$$2275 >> 0] | 0) | 0)) {
         $$0266$lcssa = 0; //@line 5739
         $$3$lcssa = $$2275; //@line 5739
        } else {
         $$0266397 = 0; //@line 5741
         $$3396 = $$2275; //@line 5741
         while (1) {
          $100 = ($$0266397 * 10 | 0) + -48 + (HEAPU8[$$3396 >> 0] | 0) | 0; //@line 5747
          $101 = $$3396 + 1 | 0; //@line 5748
          if (!(_isdigit(HEAPU8[$101 >> 0] | 0) | 0)) {
           $$0266$lcssa = $100; //@line 5754
           $$3$lcssa = $101; //@line 5754
           break;
          } else {
           $$0266397 = $100; //@line 5757
           $$3396 = $101; //@line 5757
          }
         }
        }
        $106 = HEAP8[$$3$lcssa >> 0] | 0; //@line 5761
        $108 = $$3$lcssa + 1 | 0; //@line 5763
        if ($106 << 24 >> 24 == 109) {
         $$0270 = ($$0293 | 0) != 0 & 1; //@line 5768
         $$1306 = 0; //@line 5768
         $$4 = $108; //@line 5768
         $112 = HEAP8[$108 >> 0] | 0; //@line 5768
         $318 = 0; //@line 5768
        } else {
         $$0270 = 0; //@line 5770
         $$1306 = $$0305402; //@line 5770
         $$4 = $$3$lcssa; //@line 5770
         $112 = $106; //@line 5770
         $318 = $315; //@line 5770
        }
        $111 = $$4 + 1 | 0; //@line 5772
        switch ($112 << 24 >> 24) {
        case 104:
         {
          $114 = (HEAP8[$111 >> 0] | 0) == 104; //@line 5776
          $$0268 = $114 ? -2 : -1; //@line 5780
          $$5 = $114 ? $$4 + 2 | 0 : $111; //@line 5780
          break;
         }
        case 108:
         {
          $117 = (HEAP8[$111 >> 0] | 0) == 108; //@line 5785
          $$0268 = $117 ? 3 : 1; //@line 5789
          $$5 = $117 ? $$4 + 2 | 0 : $111; //@line 5789
          break;
         }
        case 106:
         {
          $$0268 = 3; //@line 5793
          $$5 = $111; //@line 5793
          break;
         }
        case 116:
        case 122:
         {
          $$0268 = 1; //@line 5797
          $$5 = $111; //@line 5797
          break;
         }
        case 76:
         {
          $$0268 = 2; //@line 5801
          $$5 = $111; //@line 5801
          break;
         }
        case 110:
        case 112:
        case 67:
        case 83:
        case 91:
        case 99:
        case 115:
        case 88:
        case 71:
        case 70:
        case 69:
        case 65:
        case 103:
        case 102:
        case 101:
        case 97:
        case 120:
        case 117:
        case 111:
        case 105:
        case 100:
         {
          $$0268 = 0; //@line 5805
          $$5 = $$4; //@line 5805
          break;
         }
        default:
         {
          $$7312 = $$1306; //@line 5809
          $319 = $318; //@line 5809
          label = 136; //@line 5810
          break L6;
         }
        }
        $120 = HEAPU8[$$5 >> 0] | 0; //@line 5815
        $122 = ($120 & 47 | 0) == 3; //@line 5817
        $$ = $122 ? $120 | 32 : $120; //@line 5819
        $$$0268 = $122 ? 1 : $$0268; //@line 5820
        $trunc = $$ & 255; //@line 5821
        switch ($trunc << 24 >> 24) {
        case 99:
         {
          $$1267 = ($$0266$lcssa | 0) > 1 ? $$0266$lcssa : 1; //@line 5826
          $$1284 = $$0283407; //@line 5826
          break;
         }
        case 91:
         {
          $$1267 = $$0266$lcssa; //@line 5830
          $$1284 = $$0283407; //@line 5830
          break;
         }
        case 110:
         {
          _store_int_728($$0293, $$$0268, $$0283407, (($$0283407 | 0) < 0) << 31 >> 31); //@line 5836
          $$11 = $$5; //@line 5837
          $$1289 = $$0288404; //@line 5837
          $$2285 = $$0283407; //@line 5837
          $$6311 = $$1306; //@line 5837
          $316 = $318; //@line 5837
          break L8;
          break;
         }
        default:
         {
          ___shlim($0, 0); //@line 5842
          do {
           $127 = HEAP32[$13 >> 2] | 0; //@line 5844
           if ($127 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
            HEAP32[$13 >> 2] = $127 + 1; //@line 5849
            $134 = HEAPU8[$127 >> 0] | 0; //@line 5852
           } else {
            $134 = ___shgetc($0) | 0; //@line 5855
           }
          } while ((_isspace($134) | 0) != 0);
          if (!(HEAP32[$14 >> 2] | 0)) {
           $146 = HEAP32[$13 >> 2] | 0; //@line 5867
          } else {
           $140 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 5870
           HEAP32[$13 >> 2] = $140; //@line 5871
           $146 = $140; //@line 5873
          }
          $$1267 = $$0266$lcssa; //@line 5880
          $$1284 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $146 - (HEAP32[$16 >> 2] | 0) | 0; //@line 5880
         }
        }
        ___shlim($0, $$1267); //@line 5883
        $148 = HEAP32[$13 >> 2] | 0; //@line 5884
        $149 = HEAP32[$14 >> 2] | 0; //@line 5885
        if ($148 >>> 0 < $149 >>> 0) {
         HEAP32[$13 >> 2] = $148 + 1; //@line 5889
         $155 = $149; //@line 5890
        } else {
         if ((___shgetc($0) | 0) < 0) {
          $$7312 = $$1306; //@line 5895
          $319 = $318; //@line 5895
          label = 136; //@line 5896
          break L6;
         }
         $155 = HEAP32[$14 >> 2] | 0; //@line 5900
        }
        if ($155 | 0) {
         HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 5906
        }
        L58 : do {
         switch ($trunc << 24 >> 24) {
         case 91:
         case 99:
         case 115:
          {
           $158 = ($$ | 0) == 99; //@line 5911
           L60 : do {
            if (($$ | 16 | 0) == 115) {
             _memset($4 | 0, -1, 257) | 0; //@line 5917
             HEAP8[$4 >> 0] = 0; //@line 5918
             if (($$ | 0) == 115) {
              HEAP8[$18 >> 0] = 0; //@line 5920
              HEAP8[$17 >> 0] = 0; //@line 5921
              HEAP8[$17 + 1 >> 0] = 0; //@line 5921
              HEAP8[$17 + 2 >> 0] = 0; //@line 5921
              HEAP8[$17 + 3 >> 0] = 0; //@line 5921
              HEAP8[$17 + 4 >> 0] = 0; //@line 5921
              $$9 = $$5; //@line 5922
             } else {
              $$9 = $$5; //@line 5924
             }
            } else {
             $162 = $$5 + 1 | 0; //@line 5927
             $164 = (HEAP8[$162 >> 0] | 0) == 94; //@line 5929
             $$0292 = $164 & 1; //@line 5931
             $$6 = $164 ? $$5 + 2 | 0 : $162; //@line 5932
             _memset($4 | 0, $$0292 | 0, 257) | 0; //@line 5933
             HEAP8[$4 >> 0] = 0; //@line 5934
             $166 = HEAP8[$$6 >> 0] | 0; //@line 5935
             switch ($166 << 24 >> 24) {
             case 45:
              {
               $$6$pn = $$6; //@line 5938
               $$sink330 = 46; //@line 5938
               label = 65; //@line 5939
               break;
              }
             case 93:
              {
               $$6$pn = $$6; //@line 5943
               $$sink330 = 94; //@line 5943
               label = 65; //@line 5944
               break;
              }
             default:
              {
               $$7 = $$6; //@line 5948
               $168 = $166; //@line 5948
              }
             }
             while (1) {
              if ((label | 0) == 65) {
               label = 0; //@line 5953
               HEAP8[$4 + $$sink330 >> 0] = $$0292 ^ 1; //@line 5957
               $$7$ph = $$6$pn + 1 | 0; //@line 5958
               $$7 = $$7$ph; //@line 5960
               $168 = HEAP8[$$7$ph >> 0] | 0; //@line 5960
              }
              L70 : do {
               switch ($168 << 24 >> 24) {
               case 0:
                {
                 $$7312 = $$1306; //@line 5965
                 $319 = $318; //@line 5965
                 label = 136; //@line 5966
                 break L6;
                 break;
                }
               case 93:
                {
                 $$9 = $$7; //@line 5971
                 break L60;
                 break;
                }
               case 45:
                {
                 $169 = $$7 + 1 | 0; //@line 5976
                 $170 = HEAP8[$169 >> 0] | 0; //@line 5977
                 switch ($170 << 24 >> 24) {
                 case 93:
                 case 0:
                  {
                   $$8 = $$7; //@line 5980
                   $183 = 45; //@line 5980
                   break L70;
                   break;
                  }
                 default:
                  {}
                 }
                 $172 = HEAP8[$$7 + -1 >> 0] | 0; //@line 5988
                 if (($172 & 255) < ($170 & 255)) {
                  $176 = ($$0292 ^ 1) & 255; //@line 5993
                  $$0286399 = $172 & 255; //@line 5994
                  do {
                   $$0286399 = $$0286399 + 1 | 0; //@line 5996
                   HEAP8[$4 + $$0286399 >> 0] = $176; //@line 5998
                   $179 = HEAP8[$169 >> 0] | 0; //@line 5999
                  } while (($$0286399 | 0) < ($179 & 255 | 0));
                  $$8 = $169; //@line 6005
                  $183 = $179; //@line 6005
                 } else {
                  $$8 = $169; //@line 6010
                  $183 = $170; //@line 6010
                 }
                 break;
                }
               default:
                {
                 $$8 = $$7; //@line 6015
                 $183 = $168; //@line 6015
                }
               }
              } while (0);
              $$6$pn = $$8; //@line 6021
              $$sink330 = ($183 & 255) + 1 | 0; //@line 6021
              label = 65; //@line 6022
             }
            }
           } while (0);
           $186 = $158 ? $$1267 + 1 | 0 : 31; //@line 6027
           $187 = ($$$0268 | 0) == 1; //@line 6028
           $188 = ($$0270 | 0) != 0; //@line 6029
           L78 : do {
            if ($187) {
             if ($188) {
              $190 = _malloc($186 << 2) | 0; //@line 6034
              if (!$190) {
               $$7312 = 0; //@line 6037
               $319 = 0; //@line 6037
               label = 136; //@line 6038
               break L6;
              } else {
               $321 = $190; //@line 6041
              }
             } else {
              $321 = $$0293; //@line 6044
             }
             HEAP32[$3 >> 2] = 0; //@line 6046
             HEAP32[$$sroa$2$0$$sroa_idx13 >> 2] = 0; //@line 6047
             $$0276$ph = $186; //@line 6048
             $$0278$ph = 0; //@line 6048
             $$ph = $321; //@line 6048
             L83 : while (1) {
              $192 = ($$ph | 0) == 0; //@line 6050
              $$0278$ph336 = $$0278$ph; //@line 6051
              while (1) {
               L87 : while (1) {
                $193 = HEAP32[$13 >> 2] | 0; //@line 6054
                if ($193 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $193 + 1; //@line 6059
                 $201 = HEAPU8[$193 >> 0] | 0; //@line 6062
                } else {
                 $201 = ___shgetc($0) | 0; //@line 6065
                }
                if (!(HEAP8[$4 + ($201 + 1) >> 0] | 0)) {
                 break L83;
                }
                HEAP8[$6 >> 0] = $201; //@line 6075
                switch (_mbrtowc($5, $6, 1, $3) | 0) {
                case -1:
                 {
                  $$7312 = 0; //@line 6079
                  $319 = $$ph; //@line 6079
                  label = 136; //@line 6080
                  break L6;
                  break;
                 }
                case -2:
                 {
                  break;
                 }
                default:
                 {
                  break L87;
                 }
                }
               }
               if ($192) {
                $$1279 = $$0278$ph336; //@line 6093
               } else {
                HEAP32[$$ph + ($$0278$ph336 << 2) >> 2] = HEAP32[$5 >> 2]; //@line 6098
                $$1279 = $$0278$ph336 + 1 | 0; //@line 6099
               }
               if ($188 & ($$1279 | 0) == ($$0276$ph | 0)) {
                break;
               } else {
                $$0278$ph336 = $$1279; //@line 6106
               }
              }
              $211 = $$0276$ph << 1 | 1; //@line 6110
              $213 = _realloc($$ph, $211 << 2) | 0; //@line 6112
              if (!$213) {
               $$7312 = 0; //@line 6115
               $319 = $$ph; //@line 6115
               label = 136; //@line 6116
               break L6;
              } else {
               $$0278$ph$phi = $$0276$ph; //@line 6119
               $$0276$ph = $211; //@line 6119
               $$ph = $213; //@line 6119
               $$0278$ph = $$0278$ph$phi; //@line 6119
              }
             }
             if (!(_mbsinit($3) | 0)) {
              $$7312 = 0; //@line 6125
              $319 = $$ph; //@line 6125
              label = 136; //@line 6126
              break L6;
             } else {
              $$4282 = $$0278$ph336; //@line 6129
              $$4309 = 0; //@line 6129
              $$5299 = $$ph; //@line 6129
              $322 = $$ph; //@line 6129
             }
            } else {
             if ($188) {
              $217 = _malloc($186) | 0; //@line 6133
              if (!$217) {
               $$7312 = 0; //@line 6136
               $319 = 0; //@line 6136
               label = 136; //@line 6137
               break L6;
              } else {
               $$1277$ph = $186; //@line 6140
               $$2280$ph = 0; //@line 6140
               $$2307$ph = $217; //@line 6140
              }
              while (1) {
               $$2280 = $$2280$ph; //@line 6143
               do {
                $219 = HEAP32[$13 >> 2] | 0; //@line 6145
                if ($219 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                 HEAP32[$13 >> 2] = $219 + 1; //@line 6150
                 $227 = HEAPU8[$219 >> 0] | 0; //@line 6153
                } else {
                 $227 = ___shgetc($0) | 0; //@line 6156
                }
                if (!(HEAP8[$4 + ($227 + 1) >> 0] | 0)) {
                 $$4282 = $$2280; //@line 6163
                 $$4309 = $$2307$ph; //@line 6163
                 $$5299 = 0; //@line 6163
                 $322 = 0; //@line 6163
                 break L78;
                }
                HEAP8[$$2307$ph + $$2280 >> 0] = $227; //@line 6169
                $$2280 = $$2280 + 1 | 0; //@line 6167
               } while (($$2280 | 0) != ($$1277$ph | 0));
               $235 = $$1277$ph << 1 | 1; //@line 6178
               $236 = _realloc($$2307$ph, $235) | 0; //@line 6179
               if (!$236) {
                $$7312 = $$2307$ph; //@line 6182
                $319 = 0; //@line 6182
                label = 136; //@line 6183
                break L6;
               } else {
                $$2280$ph$phi = $$1277$ph; //@line 6186
                $$1277$ph = $235; //@line 6186
                $$2307$ph = $236; //@line 6186
                $$2280$ph = $$2280$ph$phi; //@line 6186
               }
              }
             }
             if (!$$0293) {
              while (1) {
               $254 = HEAP32[$13 >> 2] | 0; //@line 6193
               if ($254 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
                HEAP32[$13 >> 2] = $254 + 1; //@line 6198
                $262 = HEAPU8[$254 >> 0] | 0; //@line 6201
               } else {
                $262 = ___shgetc($0) | 0; //@line 6204
               }
               if (!(HEAP8[$4 + ($262 + 1) >> 0] | 0)) {
                $$4282 = 0; //@line 6211
                $$4309 = 0; //@line 6211
                $$5299 = 0; //@line 6211
                $322 = 0; //@line 6211
                break L78;
               }
              }
             } else {
              $$3281 = 0; //@line 6216
             }
             while (1) {
              $239 = HEAP32[$13 >> 2] | 0; //@line 6219
              if ($239 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
               HEAP32[$13 >> 2] = $239 + 1; //@line 6224
               $247 = HEAPU8[$239 >> 0] | 0; //@line 6227
              } else {
               $247 = ___shgetc($0) | 0; //@line 6230
              }
              if (!(HEAP8[$4 + ($247 + 1) >> 0] | 0)) {
               $$4282 = $$3281; //@line 6237
               $$4309 = $$0293; //@line 6237
               $$5299 = 0; //@line 6237
               $322 = 0; //@line 6237
               break L78;
              }
              HEAP8[$$0293 + $$3281 >> 0] = $247; //@line 6243
              $$3281 = $$3281 + 1 | 0; //@line 6244
             }
            }
           } while (0);
           if (!(HEAP32[$14 >> 2] | 0)) {
            $274 = HEAP32[$13 >> 2] | 0; //@line 6252
           } else {
            $269 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6255
            HEAP32[$13 >> 2] = $269; //@line 6256
            $274 = $269; //@line 6258
           }
           $275 = $274 - (HEAP32[$16 >> 2] | 0) + (HEAP32[$15 >> 2] | 0) | 0; //@line 6263
           if (!$275) {
            $$2 = $$0270; //@line 6266
            $$2290 = $$0288404; //@line 6266
            $$9314 = $$4309; //@line 6266
            $312 = $322; //@line 6266
            break L6;
           }
           if (!(($275 | 0) == ($$1267 | 0) | $158 ^ 1)) {
            $$2 = $$0270; //@line 6273
            $$2290 = $$0288404; //@line 6273
            $$9314 = $$4309; //@line 6273
            $312 = $322; //@line 6273
            break L6;
           }
           do {
            if ($188) {
             if ($187) {
              HEAP32[$$0293 >> 2] = $$5299; //@line 6279
              break;
             } else {
              HEAP32[$$0293 >> 2] = $$4309; //@line 6282
              break;
             }
            }
           } while (0);
           if ($158) {
            $$10 = $$9; //@line 6288
            $$5310 = $$4309; //@line 6288
            $320 = $322; //@line 6288
           } else {
            if ($$5299 | 0) {
             HEAP32[$$5299 + ($$4282 << 2) >> 2] = 0; //@line 6293
            }
            if (!$$4309) {
             $$10 = $$9; //@line 6297
             $$5310 = 0; //@line 6297
             $320 = $322; //@line 6297
             break L58;
            }
            HEAP8[$$4309 + $$4282 >> 0] = 0; //@line 6301
            $$10 = $$9; //@line 6302
            $$5310 = $$4309; //@line 6302
            $320 = $322; //@line 6302
           }
           break;
          }
         case 120:
         case 88:
         case 112:
          {
           $$0272 = 16; //@line 6307
           label = 124; //@line 6308
           break;
          }
         case 111:
          {
           $$0272 = 8; //@line 6312
           label = 124; //@line 6313
           break;
          }
         case 117:
         case 100:
          {
           $$0272 = 10; //@line 6317
           label = 124; //@line 6318
           break;
          }
         case 105:
          {
           $$0272 = 0; //@line 6322
           label = 124; //@line 6323
           break;
          }
         case 71:
         case 103:
         case 70:
         case 102:
         case 69:
         case 101:
         case 65:
         case 97:
          {
           $292 = +___floatscan($0, $$$0268, 0); //@line 6327
           if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
            $$2 = $$0270; //@line 6334
            $$2290 = $$0288404; //@line 6334
            $$9314 = $$1306; //@line 6334
            $312 = $318; //@line 6334
            break L6;
           }
           if (!$$0293) {
            $$10 = $$5; //@line 6339
            $$5310 = $$1306; //@line 6339
            $320 = $318; //@line 6339
           } else {
            switch ($$$0268 | 0) {
            case 0:
             {
              HEAPF32[$$0293 >> 2] = $292; //@line 6344
              $$10 = $$5; //@line 6345
              $$5310 = $$1306; //@line 6345
              $320 = $318; //@line 6345
              break L58;
              break;
             }
            case 1:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6350
              $$10 = $$5; //@line 6351
              $$5310 = $$1306; //@line 6351
              $320 = $318; //@line 6351
              break L58;
              break;
             }
            case 2:
             {
              HEAPF64[$$0293 >> 3] = $292; //@line 6356
              $$10 = $$5; //@line 6357
              $$5310 = $$1306; //@line 6357
              $320 = $318; //@line 6357
              break L58;
              break;
             }
            default:
             {
              $$10 = $$5; //@line 6362
              $$5310 = $$1306; //@line 6362
              $320 = $318; //@line 6362
              break L58;
             }
            }
           }
           break;
          }
         default:
          {
           $$10 = $$5; //@line 6370
           $$5310 = $$1306; //@line 6370
           $320 = $318; //@line 6370
          }
         }
        } while (0);
        do {
         if ((label | 0) == 124) {
          label = 0; //@line 6376
          $282 = ___intscan($0, $$0272, 0, -1, -1) | 0; //@line 6377
          if ((HEAP32[$15 >> 2] | 0) == ((HEAP32[$16 >> 2] | 0) - (HEAP32[$13 >> 2] | 0) | 0)) {
           $$2 = $$0270; //@line 6385
           $$2290 = $$0288404; //@line 6385
           $$9314 = $$1306; //@line 6385
           $312 = $318; //@line 6385
           break L6;
          }
          if (($$0293 | 0) != 0 & ($$ | 0) == 112) {
           HEAP32[$$0293 >> 2] = $282; //@line 6393
           $$10 = $$5; //@line 6394
           $$5310 = $$1306; //@line 6394
           $320 = $318; //@line 6394
           break;
          } else {
           _store_int_728($$0293, $$$0268, $282, tempRet0); //@line 6397
           $$10 = $$5; //@line 6398
           $$5310 = $$1306; //@line 6398
           $320 = $318; //@line 6398
           break;
          }
         }
        } while (0);
        $$11 = $$10; //@line 6412
        $$1289 = $$0288404 + (($$0293 | 0) != 0 & 1) | 0; //@line 6412
        $$2285 = (HEAP32[$15 >> 2] | 0) + $$1284 + (HEAP32[$13 >> 2] | 0) - (HEAP32[$16 >> 2] | 0) | 0; //@line 6412
        $$6311 = $$5310; //@line 6412
        $316 = $320; //@line 6412
        break L8;
       }
      } while (0);
      $54 = $$0273408 + ($50 & 1) | 0; //@line 6417
      ___shlim($0, 0); //@line 6418
      $55 = HEAP32[$13 >> 2] | 0; //@line 6419
      if ($55 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
       HEAP32[$13 >> 2] = $55 + 1; //@line 6424
       $65 = HEAPU8[$55 >> 0] | 0; //@line 6427
      } else {
       $65 = ___shgetc($0) | 0; //@line 6430
      }
      if (($65 | 0) != (HEAPU8[$54 >> 0] | 0)) {
       label = 22; //@line 6436
       break L6;
      }
      $$11 = $54; //@line 6440
      $$1289 = $$0288404; //@line 6440
      $$2285 = $$0283407 + 1 | 0; //@line 6440
      $$6311 = $$0305402; //@line 6440
      $316 = $315; //@line 6440
     } else {
      $$1274 = $$0273408; //@line 6442
      while (1) {
       $23 = $$1274 + 1 | 0; //@line 6444
       if (!(_isspace(HEAPU8[$23 >> 0] | 0) | 0)) {
        break;
       } else {
        $$1274 = $23; //@line 6452
       }
      }
      ___shlim($0, 0); //@line 6455
      do {
       $28 = HEAP32[$13 >> 2] | 0; //@line 6457
       if ($28 >>> 0 < (HEAP32[$14 >> 2] | 0) >>> 0) {
        HEAP32[$13 >> 2] = $28 + 1; //@line 6462
        $35 = HEAPU8[$28 >> 0] | 0; //@line 6465
       } else {
        $35 = ___shgetc($0) | 0; //@line 6468
       }
      } while ((_isspace($35) | 0) != 0);
      if (!(HEAP32[$14 >> 2] | 0)) {
       $47 = HEAP32[$13 >> 2] | 0; //@line 6480
      } else {
       $41 = (HEAP32[$13 >> 2] | 0) + -1 | 0; //@line 6483
       HEAP32[$13 >> 2] = $41; //@line 6484
       $47 = $41; //@line 6486
      }
      $$11 = $$1274; //@line 6493
      $$1289 = $$0288404; //@line 6493
      $$2285 = (HEAP32[$15 >> 2] | 0) + $$0283407 + $47 - (HEAP32[$16 >> 2] | 0) | 0; //@line 6493
      $$6311 = $$0305402; //@line 6493
      $316 = $315; //@line 6493
     }
    } while (0);
    $$0273408 = $$11 + 1 | 0; //@line 6496
    $20 = HEAP8[$$0273408 >> 0] | 0; //@line 6497
    if (!($20 << 24 >> 24)) {
     $$3291 = $$1289; //@line 6500
     break L4;
    } else {
     $$0283407 = $$2285; //@line 6503
     $$0288404 = $$1289; //@line 6503
     $$0305402 = $$6311; //@line 6503
     $315 = $316; //@line 6503
    }
   }
   if ((label | 0) == 22) {
    if (HEAP32[$14 >> 2] | 0) {
     HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + -1; //@line 6512
    }
    if (($$0288404 | 0) != 0 | ($65 | 0) > -1) {
     $$3291 = $$0288404; //@line 6518
     break;
    } else {
     $$1271 = 0; //@line 6521
     $$8313 = $$0305402; //@line 6521
     $317 = $315; //@line 6521
     label = 137; //@line 6522
    }
   } else if ((label | 0) == 136) {
    if (!$$0288404) {
     $$1271 = $$0270; //@line 6528
     $$8313 = $$7312; //@line 6528
     $317 = $319; //@line 6528
     label = 137; //@line 6529
    } else {
     $$2 = $$0270; //@line 6531
     $$2290 = $$0288404; //@line 6531
     $$9314 = $$7312; //@line 6531
     $312 = $319; //@line 6531
    }
   }
   if ((label | 0) == 137) {
    $$2 = $$1271; //@line 6535
    $$2290 = -1; //@line 6535
    $$9314 = $$8313; //@line 6535
    $312 = $317; //@line 6535
   }
   if (!$$2) {
    $$3291 = $$2290; //@line 6539
   } else {
    _free($$9314); //@line 6541
    _free($312); //@line 6542
    $$3291 = $$2290; //@line 6543
   }
  }
 } while (0);
 if ($314 | 0) {
  ___unlockfile($0); //@line 6549
 }
 STACKTOP = sp; //@line 6551
 return $$3291 | 0; //@line 6551
}
function _decfloat($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0329 = 0, $$0332488 = 0, $$0333 = 0, $$0334 = 0, $$0336484 = 0, $$0340494 = 0, $$0341$lcssa = 0, $$0341461 = 0, $$0341462 = 0, $$0341463 = 0, $$0341511 = 0, $$0345$lcssa = 0, $$0345465 = 0, $$0345466 = 0, $$0345467 = 0, $$0345510 = 0, $$0350$lcssa553 = 0, $$0350492 = 0, $$0360 = 0.0, $$0361 = 0.0, $$0365482 = 0.0, $$0372 = 0, $$0380 = 0, $$0380$ph = 0, $$0385$lcssa552 = 0, $$0385491 = 0, $$0393 = 0, $$0396 = 0, $$0401$lcssa = 0, $$0401471 = 0, $$0401472 = 0, $$0401473 = 0, $$0401507 = 0, $$1 = 0.0, $$10 = 0, $$1330$be = 0, $$1330$ph = 0, $$1335 = 0, $$1337 = 0, $$1362 = 0.0, $$1366 = 0.0, $$1373 = 0, $$1373$ph446 = 0, $$1381 = 0, $$1381$ph = 0, $$1381$ph557 = 0, $$1394$lcssa = 0, $$1394509 = 0, $$2 = 0, $$2343 = 0, $$2347 = 0, $$2352$ph447 = 0, $$2367 = 0.0, $$2374 = 0, $$2387$ph445 = 0, $$2395 = 0, $$2398 = 0, $$2403 = 0, $$3$be = 0, $$3$lcssa = 0, $$3344501 = 0, $$3348 = 0, $$3364 = 0.0, $$3368 = 0.0, $$3383 = 0, $$3399$lcssa = 0, $$3399508 = 0, $$3512 = 0, $$423 = 0, $$4349493 = 0, $$4354 = 0, $$4354$ph = 0, $$4354$ph558 = 0, $$4376 = 0, $$4384 = 0, $$4389$ph = 0, $$4389$ph443 = 0, $$4400 = 0, $$4483 = 0, $$5 = 0, $$5$in = 0, $$5355486 = 0, $$5390485 = 0, $$6378$ph = 0, $$6487 = 0, $$9481 = 0, $$pre = 0, $$pre551 = 0, $$sink = 0, $$sink419$off0 = 0, $10 = 0, $100 = 0, $105 = 0, $106 = 0, $108 = 0, $109 = 0, $122 = 0, $124 = 0, $134 = 0, $136 = 0, $148 = 0, $150 = 0, $17 = 0, $172 = 0, $184 = 0, $188 = 0, $191 = 0, $193 = 0, $194 = 0, $195 = 0, $198 = 0, $212 = 0, $213 = 0, $214 = 0, $218 = 0, $220 = 0, $222 = 0, $223 = 0, $229 = 0, $231 = 0, $236 = 0, $243 = 0, $246 = 0, $249 = 0, $25 = 0, $256 = 0, $259 = 0, $26 = 0, $261 = 0, $264 = 0, $267 = 0, $268 = 0, $27 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $277 = 0, $28 = 0, $289 = 0, $29 = 0, $294 = 0, $299 = 0, $302 = 0, $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $320 = 0.0, $323 = 0.0, $327 = 0, $330 = 0, $354 = 0.0, $359 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $39 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $54 = 0, $55 = 0, $59 = 0, $6 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $or$cond418 = 0, $or$cond424 = 0, $sum = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8368
 STACKTOP = STACKTOP + 512 | 0; //@line 8369
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(512); //@line 8369
 $6 = sp; //@line 8370
 $sum = $3 + $2 | 0; //@line 8371
 $7 = 0 - $sum | 0; //@line 8372
 $8 = $0 + 4 | 0; //@line 8373
 $9 = $0 + 100 | 0; //@line 8374
 $$0329 = $1; //@line 8375
 $$0396 = 0; //@line 8375
 L1 : while (1) {
  switch ($$0329 | 0) {
  case 46:
   {
    label = 6; //@line 8379
    break L1;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0393 = 0; //@line 8387
    $$2 = $$0329; //@line 8387
    $$2398 = $$0396; //@line 8387
    $368 = 0; //@line 8387
    $369 = 0; //@line 8387
    break L1;
   }
  }
  $10 = HEAP32[$8 >> 2] | 0; //@line 8391
  if ($10 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $10 + 1; //@line 8396
   $$0329 = HEAPU8[$10 >> 0] | 0; //@line 8399
   $$0396 = 1; //@line 8399
   continue;
  } else {
   $$0329 = ___shgetc($0) | 0; //@line 8403
   $$0396 = 1; //@line 8403
   continue;
  }
 }
 if ((label | 0) == 6) {
  $17 = HEAP32[$8 >> 2] | 0; //@line 8408
  if ($17 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
   HEAP32[$8 >> 2] = $17 + 1; //@line 8413
   $$1330$ph = HEAPU8[$17 >> 0] | 0; //@line 8416
  } else {
   $$1330$ph = ___shgetc($0) | 0; //@line 8419
  }
  if (($$1330$ph | 0) == 48) {
   $25 = 0; //@line 8423
   $26 = 0; //@line 8423
   while (1) {
    $27 = _i64Add($25 | 0, $26 | 0, -1, -1) | 0; //@line 8425
    $28 = tempRet0; //@line 8426
    $29 = HEAP32[$8 >> 2] | 0; //@line 8427
    if ($29 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $29 + 1; //@line 8432
     $$1330$be = HEAPU8[$29 >> 0] | 0; //@line 8435
    } else {
     $$1330$be = ___shgetc($0) | 0; //@line 8438
    }
    if (($$1330$be | 0) == 48) {
     $25 = $27; //@line 8442
     $26 = $28; //@line 8442
    } else {
     $$0393 = 1; //@line 8444
     $$2 = $$1330$be; //@line 8444
     $$2398 = 1; //@line 8444
     $368 = $27; //@line 8444
     $369 = $28; //@line 8444
     break;
    }
   }
  } else {
   $$0393 = 1; //@line 8449
   $$2 = $$1330$ph; //@line 8449
   $$2398 = $$0396; //@line 8449
   $368 = 0; //@line 8449
   $369 = 0; //@line 8449
  }
 }
 HEAP32[$6 >> 2] = 0; //@line 8452
 $37 = $$2 + -48 | 0; //@line 8453
 $39 = ($$2 | 0) == 46; //@line 8455
 L20 : do {
  if ($39 | $37 >>> 0 < 10) {
   $41 = $6 + 496 | 0; //@line 8459
   $$0341511 = 0; //@line 8460
   $$0345510 = 0; //@line 8460
   $$0401507 = 0; //@line 8460
   $$1394509 = $$0393; //@line 8460
   $$3399508 = $$2398; //@line 8460
   $$3512 = $$2; //@line 8460
   $370 = $39; //@line 8460
   $371 = $37; //@line 8460
   $372 = $368; //@line 8460
   $373 = $369; //@line 8460
   $44 = 0; //@line 8460
   $45 = 0; //@line 8460
   L22 : while (1) {
    do {
     if ($370) {
      if (!$$1394509) {
       $$2343 = $$0341511; //@line 8466
       $$2347 = $$0345510; //@line 8466
       $$2395 = 1; //@line 8466
       $$2403 = $$0401507; //@line 8466
       $$4400 = $$3399508; //@line 8466
       $374 = $44; //@line 8466
       $375 = $45; //@line 8466
       $376 = $44; //@line 8466
       $377 = $45; //@line 8466
      } else {
       break L22;
      }
     } else {
      $46 = _i64Add($44 | 0, $45 | 0, 1, 0) | 0; //@line 8472
      $47 = tempRet0; //@line 8473
      $48 = ($$3512 | 0) != 48; //@line 8474
      if (($$0345510 | 0) >= 125) {
       if (!$48) {
        $$2343 = $$0341511; //@line 8477
        $$2347 = $$0345510; //@line 8477
        $$2395 = $$1394509; //@line 8477
        $$2403 = $$0401507; //@line 8477
        $$4400 = $$3399508; //@line 8477
        $374 = $372; //@line 8477
        $375 = $373; //@line 8477
        $376 = $46; //@line 8477
        $377 = $47; //@line 8477
        break;
       }
       HEAP32[$41 >> 2] = HEAP32[$41 >> 2] | 1; //@line 8482
       $$2343 = $$0341511; //@line 8483
       $$2347 = $$0345510; //@line 8483
       $$2395 = $$1394509; //@line 8483
       $$2403 = $$0401507; //@line 8483
       $$4400 = $$3399508; //@line 8483
       $374 = $372; //@line 8483
       $375 = $373; //@line 8483
       $376 = $46; //@line 8483
       $377 = $47; //@line 8483
       break;
      }
      $$pre551 = $6 + ($$0345510 << 2) | 0; //@line 8488
      if (!$$0341511) {
       $$sink = $371; //@line 8490
      } else {
       $$sink = $$3512 + -48 + ((HEAP32[$$pre551 >> 2] | 0) * 10 | 0) | 0; //@line 8496
      }
      HEAP32[$$pre551 >> 2] = $$sink; //@line 8498
      $54 = $$0341511 + 1 | 0; //@line 8499
      $55 = ($54 | 0) == 9; //@line 8500
      $$2343 = $55 ? 0 : $54; //@line 8504
      $$2347 = $$0345510 + ($55 & 1) | 0; //@line 8504
      $$2395 = $$1394509; //@line 8504
      $$2403 = $48 ? $46 : $$0401507; //@line 8504
      $$4400 = 1; //@line 8504
      $374 = $372; //@line 8504
      $375 = $373; //@line 8504
      $376 = $46; //@line 8504
      $377 = $47; //@line 8504
     }
    } while (0);
    $59 = HEAP32[$8 >> 2] | 0; //@line 8507
    if ($59 >>> 0 < (HEAP32[$9 >> 2] | 0) >>> 0) {
     HEAP32[$8 >> 2] = $59 + 1; //@line 8512
     $$3$be = HEAPU8[$59 >> 0] | 0; //@line 8515
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 8518
    }
    $371 = $$3$be + -48 | 0; //@line 8520
    $370 = ($$3$be | 0) == 46; //@line 8522
    if (!($370 | $371 >>> 0 < 10)) {
     $$0341$lcssa = $$2343; //@line 8527
     $$0345$lcssa = $$2347; //@line 8527
     $$0401$lcssa = $$2403; //@line 8527
     $$1394$lcssa = $$2395; //@line 8527
     $$3$lcssa = $$3$be; //@line 8527
     $$3399$lcssa = $$4400; //@line 8527
     $72 = $376; //@line 8527
     $73 = $374; //@line 8527
     $75 = $377; //@line 8527
     $76 = $375; //@line 8527
     label = 29; //@line 8528
     break L20;
    } else {
     $$0341511 = $$2343; //@line 8525
     $$0345510 = $$2347; //@line 8525
     $$0401507 = $$2403; //@line 8525
     $$1394509 = $$2395; //@line 8525
     $$3399508 = $$4400; //@line 8525
     $$3512 = $$3$be; //@line 8525
     $372 = $374; //@line 8525
     $373 = $375; //@line 8525
     $44 = $376; //@line 8525
     $45 = $377; //@line 8525
    }
   }
   $$0341463 = $$0341511; //@line 8533
   $$0345467 = $$0345510; //@line 8533
   $$0401473 = $$0401507; //@line 8533
   $378 = $44; //@line 8533
   $379 = $45; //@line 8533
   $380 = $372; //@line 8533
   $381 = $373; //@line 8533
   $382 = ($$3399508 | 0) != 0; //@line 8533
   label = 37; //@line 8534
  } else {
   $$0341$lcssa = 0; //@line 8536
   $$0345$lcssa = 0; //@line 8536
   $$0401$lcssa = 0; //@line 8536
   $$1394$lcssa = $$0393; //@line 8536
   $$3$lcssa = $$2; //@line 8536
   $$3399$lcssa = $$2398; //@line 8536
   $72 = 0; //@line 8536
   $73 = $368; //@line 8536
   $75 = 0; //@line 8536
   $76 = $369; //@line 8536
   label = 29; //@line 8537
  }
 } while (0);
 do {
  if ((label | 0) == 29) {
   $70 = ($$1394$lcssa | 0) == 0; //@line 8542
   $71 = $70 ? $72 : $73; //@line 8543
   $74 = $70 ? $75 : $76; //@line 8544
   $77 = ($$3399$lcssa | 0) != 0; //@line 8545
   if (!($77 & ($$3$lcssa | 32 | 0) == 101)) {
    if (($$3$lcssa | 0) > -1) {
     $$0341463 = $$0341$lcssa; //@line 8552
     $$0345467 = $$0345$lcssa; //@line 8552
     $$0401473 = $$0401$lcssa; //@line 8552
     $378 = $72; //@line 8552
     $379 = $75; //@line 8552
     $380 = $71; //@line 8552
     $381 = $74; //@line 8552
     $382 = $77; //@line 8552
     label = 37; //@line 8553
     break;
    } else {
     $$0341462 = $$0341$lcssa; //@line 8556
     $$0345466 = $$0345$lcssa; //@line 8556
     $$0401472 = $$0401$lcssa; //@line 8556
     $383 = $72; //@line 8556
     $384 = $75; //@line 8556
     $385 = $77; //@line 8556
     $386 = $71; //@line 8556
     $387 = $74; //@line 8556
     label = 39; //@line 8557
     break;
    }
   }
   $80 = _scanexp($0, $5) | 0; //@line 8561
   $81 = tempRet0; //@line 8562
   if (($80 | 0) == 0 & ($81 | 0) == -2147483648) {
    if (!$5) {
     ___shlim($0, 0); //@line 8569
     $$1 = 0.0; //@line 8570
     break;
    }
    if (!(HEAP32[$9 >> 2] | 0)) {
     $90 = 0; //@line 8576
     $91 = 0; //@line 8576
    } else {
     HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8580
     $90 = 0; //@line 8581
     $91 = 0; //@line 8581
    }
   } else {
    $90 = $80; //@line 8584
    $91 = $81; //@line 8584
   }
   $92 = _i64Add($90 | 0, $91 | 0, $71 | 0, $74 | 0) | 0; //@line 8586
   $$0341461 = $$0341$lcssa; //@line 8588
   $$0345465 = $$0345$lcssa; //@line 8588
   $$0401471 = $$0401$lcssa; //@line 8588
   $105 = $92; //@line 8588
   $106 = $72; //@line 8588
   $108 = tempRet0; //@line 8588
   $109 = $75; //@line 8588
   label = 41; //@line 8589
  }
 } while (0);
 if ((label | 0) == 37) {
  if (!(HEAP32[$9 >> 2] | 0)) {
   $$0341462 = $$0341463; //@line 8596
   $$0345466 = $$0345467; //@line 8596
   $$0401472 = $$0401473; //@line 8596
   $383 = $378; //@line 8596
   $384 = $379; //@line 8596
   $385 = $382; //@line 8596
   $386 = $380; //@line 8596
   $387 = $381; //@line 8596
   label = 39; //@line 8597
  } else {
   HEAP32[$8 >> 2] = (HEAP32[$8 >> 2] | 0) + -1; //@line 8601
   if ($382) {
    $$0341461 = $$0341463; //@line 8603
    $$0345465 = $$0345467; //@line 8603
    $$0401471 = $$0401473; //@line 8603
    $105 = $380; //@line 8603
    $106 = $378; //@line 8603
    $108 = $381; //@line 8603
    $109 = $379; //@line 8603
    label = 41; //@line 8604
   } else {
    label = 40; //@line 8606
   }
  }
 }
 if ((label | 0) == 39) {
  if ($385) {
   $$0341461 = $$0341462; //@line 8612
   $$0345465 = $$0345466; //@line 8612
   $$0401471 = $$0401472; //@line 8612
   $105 = $386; //@line 8612
   $106 = $383; //@line 8612
   $108 = $387; //@line 8612
   $109 = $384; //@line 8612
   label = 41; //@line 8613
  } else {
   label = 40; //@line 8615
  }
 }
 do {
  if ((label | 0) == 40) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 8621
   ___shlim($0, 0); //@line 8622
   $$1 = 0.0; //@line 8623
  } else if ((label | 0) == 41) {
   $100 = HEAP32[$6 >> 2] | 0; //@line 8626
   if (!$100) {
    $$1 = +($4 | 0) * 0.0; //@line 8631
    break;
   }
   if ((($109 | 0) < 0 | ($109 | 0) == 0 & $106 >>> 0 < 10) & (($105 | 0) == ($106 | 0) & ($108 | 0) == ($109 | 0))) {
    if (($2 | 0) > 30 | ($100 >>> $2 | 0) == 0) {
     $$1 = +($4 | 0) * +($100 >>> 0); //@line 8652
     break;
    }
   }
   $122 = ($3 | 0) / -2 | 0; //@line 8656
   $124 = (($122 | 0) < 0) << 31 >> 31; //@line 8658
   if (($108 | 0) > ($124 | 0) | ($108 | 0) == ($124 | 0) & $105 >>> 0 > $122 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8666
    $$1 = +($4 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8670
    break;
   }
   $134 = $3 + -106 | 0; //@line 8673
   $136 = (($134 | 0) < 0) << 31 >> 31; //@line 8675
   if (($108 | 0) < ($136 | 0) | ($108 | 0) == ($136 | 0) & $105 >>> 0 < $134 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8683
    $$1 = +($4 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8687
    break;
   }
   if (!$$0341461) {
    $$3348 = $$0345465; //@line 8692
   } else {
    if (($$0341461 | 0) < 9) {
     $148 = $6 + ($$0345465 << 2) | 0; //@line 8696
     $$3344501 = $$0341461; //@line 8698
     $150 = HEAP32[$148 >> 2] | 0; //@line 8698
     while (1) {
      $150 = $150 * 10 | 0; //@line 8700
      if (($$3344501 | 0) >= 8) {
       break;
      } else {
       $$3344501 = $$3344501 + 1 | 0; //@line 8704
      }
     }
     HEAP32[$148 >> 2] = $150; //@line 8709
    }
    $$3348 = $$0345465 + 1 | 0; //@line 8712
   }
   if (($$0401471 | 0) < 9) {
    if (($$0401471 | 0) <= ($105 | 0) & ($105 | 0) < 18) {
     if (($105 | 0) == 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0); //@line 8726
      break;
     }
     if (($105 | 0) < 9) {
      $$1 = +($4 | 0) * +((HEAP32[$6 >> 2] | 0) >>> 0) / +(HEAP32[2356 + (8 - $105 << 2) >> 2] | 0); //@line 8740
      break;
     }
     $172 = $2 + 27 + (Math_imul($105, -3) | 0) | 0; //@line 8745
     $$pre = HEAP32[$6 >> 2] | 0; //@line 8747
     if (($172 | 0) > 30 | ($$pre >>> $172 | 0) == 0) {
      $$1 = +($4 | 0) * +($$pre >>> 0) * +(HEAP32[2356 + ($105 + -10 << 2) >> 2] | 0); //@line 8760
      break;
     }
    }
   }
   $184 = ($105 | 0) % 9 | 0; //@line 8765
   if (!$184) {
    $$0380$ph = 0; //@line 8768
    $$1373$ph446 = $$3348; //@line 8768
    $$2352$ph447 = 0; //@line 8768
    $$2387$ph445 = $105; //@line 8768
   } else {
    $188 = ($105 | 0) > -1 ? $184 : $184 + 9 | 0; //@line 8772
    $191 = HEAP32[2356 + (8 - $188 << 2) >> 2] | 0; //@line 8775
    if (!$$3348) {
     $$0350$lcssa553 = 0; //@line 8778
     $$0372 = 0; //@line 8778
     $$0385$lcssa552 = $105; //@line 8778
    } else {
     $193 = 1e9 / ($191 | 0) | 0; //@line 8780
     $$0340494 = 0; //@line 8781
     $$0350492 = 0; //@line 8781
     $$0385491 = $105; //@line 8781
     $$4349493 = 0; //@line 8781
     do {
      $194 = $6 + ($$4349493 << 2) | 0; //@line 8783
      $195 = HEAP32[$194 >> 2] | 0; //@line 8784
      $198 = (($195 >>> 0) / ($191 >>> 0) | 0) + $$0340494 | 0; //@line 8787
      HEAP32[$194 >> 2] = $198; //@line 8788
      $$0340494 = Math_imul($193, ($195 >>> 0) % ($191 >>> 0) | 0) | 0; //@line 8789
      $or$cond418 = ($$4349493 | 0) == ($$0350492 | 0) & ($198 | 0) == 0; //@line 8792
      $$0385491 = $or$cond418 ? $$0385491 + -9 | 0 : $$0385491; //@line 8796
      $$0350492 = $or$cond418 ? $$0350492 + 1 & 127 : $$0350492; //@line 8797
      $$4349493 = $$4349493 + 1 | 0; //@line 8798
     } while (($$4349493 | 0) != ($$3348 | 0));
     if (!$$0340494) {
      $$0350$lcssa553 = $$0350492; //@line 8808
      $$0372 = $$3348; //@line 8808
      $$0385$lcssa552 = $$0385491; //@line 8808
     } else {
      HEAP32[$6 + ($$3348 << 2) >> 2] = $$0340494; //@line 8812
      $$0350$lcssa553 = $$0350492; //@line 8813
      $$0372 = $$3348 + 1 | 0; //@line 8813
      $$0385$lcssa552 = $$0385491; //@line 8813
     }
    }
    $$0380$ph = 0; //@line 8818
    $$1373$ph446 = $$0372; //@line 8818
    $$2352$ph447 = $$0350$lcssa553; //@line 8818
    $$2387$ph445 = 9 - $188 + $$0385$lcssa552 | 0; //@line 8818
   }
   L101 : while (1) {
    $212 = ($$2387$ph445 | 0) < 18; //@line 8821
    $213 = ($$2387$ph445 | 0) == 18; //@line 8822
    $214 = $6 + ($$2352$ph447 << 2) | 0; //@line 8823
    $$0380 = $$0380$ph; //@line 8824
    $$1373 = $$1373$ph446; //@line 8824
    while (1) {
     if (!$212) {
      if (!$213) {
       $$1381$ph = $$0380; //@line 8828
       $$4354$ph = $$2352$ph447; //@line 8828
       $$4389$ph443 = $$2387$ph445; //@line 8828
       $$6378$ph = $$1373; //@line 8828
       break L101;
      }
      if ((HEAP32[$214 >> 2] | 0) >>> 0 >= 9007199) {
       $$1381$ph = $$0380; //@line 8834
       $$4354$ph = $$2352$ph447; //@line 8834
       $$4389$ph443 = 18; //@line 8834
       $$6378$ph = $$1373; //@line 8834
       break L101;
      }
     }
     $$0334 = 0; //@line 8839
     $$2374 = $$1373; //@line 8839
     $$5$in = $$1373 + 127 | 0; //@line 8839
     while (1) {
      $$5 = $$5$in & 127; //@line 8841
      $218 = $6 + ($$5 << 2) | 0; //@line 8842
      $220 = _bitshift64Shl(HEAP32[$218 >> 2] | 0, 0, 29) | 0; //@line 8844
      $222 = _i64Add($220 | 0, tempRet0 | 0, $$0334 | 0, 0) | 0; //@line 8846
      $223 = tempRet0; //@line 8847
      if ($223 >>> 0 > 0 | ($223 | 0) == 0 & $222 >>> 0 > 1e9) {
       $229 = ___udivdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8854
       $231 = ___uremdi3($222 | 0, $223 | 0, 1e9, 0) | 0; //@line 8856
       $$1335 = $229; //@line 8858
       $$sink419$off0 = $231; //@line 8858
      } else {
       $$1335 = 0; //@line 8860
       $$sink419$off0 = $222; //@line 8860
      }
      HEAP32[$218 >> 2] = $$sink419$off0; //@line 8862
      $236 = ($$5 | 0) == ($$2352$ph447 | 0); //@line 8866
      $$2374 = ($$sink419$off0 | 0) == 0 & ((($$5 | 0) != ($$2374 + 127 & 127 | 0) | $236) ^ 1) ? $$5 : $$2374; //@line 8871
      if ($236) {
       break;
      } else {
       $$0334 = $$1335; //@line 8876
       $$5$in = $$5 + -1 | 0; //@line 8876
      }
     }
     $$0380 = $$0380 + -29 | 0; //@line 8879
     if ($$1335 | 0) {
      break;
     } else {
      $$1373 = $$2374; //@line 8882
     }
    }
    $243 = $$2352$ph447 + 127 & 127; //@line 8889
    $246 = $$2374 + 127 & 127; //@line 8892
    $249 = $6 + (($$2374 + 126 & 127) << 2) | 0; //@line 8895
    if (($243 | 0) == ($$2374 | 0)) {
     HEAP32[$249 >> 2] = HEAP32[$249 >> 2] | HEAP32[$6 + ($246 << 2) >> 2]; //@line 8901
     $$4376 = $246; //@line 8902
    } else {
     $$4376 = $$2374; //@line 8904
    }
    HEAP32[$6 + ($243 << 2) >> 2] = $$1335; //@line 8907
    $$0380$ph = $$0380; //@line 8908
    $$1373$ph446 = $$4376; //@line 8908
    $$2352$ph447 = $243; //@line 8908
    $$2387$ph445 = $$2387$ph445 + 9 | 0; //@line 8908
   }
   L119 : while (1) {
    $289 = $$6378$ph + 1 & 127; //@line 8912
    $294 = $6 + (($$6378$ph + 127 & 127) << 2) | 0; //@line 8915
    $$1381$ph557 = $$1381$ph; //@line 8916
    $$4354$ph558 = $$4354$ph; //@line 8916
    $$4389$ph = $$4389$ph443; //@line 8916
    while (1) {
     $267 = ($$4389$ph | 0) == 18; //@line 8918
     $$423 = ($$4389$ph | 0) > 27 ? 9 : 1; //@line 8920
     $$1381 = $$1381$ph557; //@line 8921
     $$4354 = $$4354$ph558; //@line 8921
     while (1) {
      $$0336484 = 0; //@line 8923
      while (1) {
       $256 = $$0336484 + $$4354 & 127; //@line 8926
       if (($256 | 0) == ($$6378$ph | 0)) {
        $$1337 = 2; //@line 8929
        label = 88; //@line 8930
        break;
       }
       $259 = HEAP32[$6 + ($256 << 2) >> 2] | 0; //@line 8934
       $261 = HEAP32[2388 + ($$0336484 << 2) >> 2] | 0; //@line 8936
       if ($259 >>> 0 < $261 >>> 0) {
        $$1337 = 2; //@line 8939
        label = 88; //@line 8940
        break;
       }
       if ($259 >>> 0 > $261 >>> 0) {
        break;
       }
       $264 = $$0336484 + 1 | 0; //@line 8947
       if (($$0336484 | 0) < 1) {
        $$0336484 = $264; //@line 8950
       } else {
        $$1337 = $264; //@line 8952
        label = 88; //@line 8953
        break;
       }
      }
      if ((label | 0) == 88) {
       label = 0; //@line 8958
       if ($267 & ($$1337 | 0) == 2) {
        $$0365482 = 0.0; //@line 8962
        $$4483 = 0; //@line 8962
        $$9481 = $$6378$ph; //@line 8962
        break L119;
       }
      }
      $268 = $$423 + $$1381 | 0; //@line 8966
      if (($$4354 | 0) == ($$6378$ph | 0)) {
       $$1381 = $268; //@line 8969
       $$4354 = $$6378$ph; //@line 8969
      } else {
       break;
      }
     }
     $271 = (1 << $$423) + -1 | 0; //@line 8975
     $272 = 1e9 >>> $$423; //@line 8976
     $$0332488 = 0; //@line 8977
     $$5355486 = $$4354; //@line 8977
     $$5390485 = $$4389$ph; //@line 8977
     $$6487 = $$4354; //@line 8977
     do {
      $273 = $6 + ($$6487 << 2) | 0; //@line 8979
      $274 = HEAP32[$273 >> 2] | 0; //@line 8980
      $277 = ($274 >>> $$423) + $$0332488 | 0; //@line 8983
      HEAP32[$273 >> 2] = $277; //@line 8984
      $$0332488 = Math_imul($274 & $271, $272) | 0; //@line 8985
      $or$cond424 = ($$6487 | 0) == ($$5355486 | 0) & ($277 | 0) == 0; //@line 8988
      $$5390485 = $or$cond424 ? $$5390485 + -9 | 0 : $$5390485; //@line 8992
      $$5355486 = $or$cond424 ? $$5355486 + 1 & 127 : $$5355486; //@line 8993
      $$6487 = $$6487 + 1 & 127; //@line 8995
     } while (($$6487 | 0) != ($$6378$ph | 0));
     if (!$$0332488) {
      $$1381$ph557 = $268; //@line 9005
      $$4354$ph558 = $$5355486; //@line 9005
      $$4389$ph = $$5390485; //@line 9005
      continue;
     }
     if (($289 | 0) != ($$5355486 | 0)) {
      break;
     }
     HEAP32[$294 >> 2] = HEAP32[$294 >> 2] | 1; //@line 9014
     $$1381$ph557 = $268; //@line 9015
     $$4354$ph558 = $$5355486; //@line 9015
     $$4389$ph = $$5390485; //@line 9015
    }
    HEAP32[$6 + ($$6378$ph << 2) >> 2] = $$0332488; //@line 9018
    $$1381$ph = $268; //@line 9019
    $$4354$ph = $$5355486; //@line 9019
    $$4389$ph443 = $$5390485; //@line 9019
    $$6378$ph = $289; //@line 9019
   }
   while (1) {
    $299 = $$4483 + $$4354 & 127; //@line 9023
    $302 = $$9481 + 1 & 127; //@line 9026
    if (($299 | 0) == ($$9481 | 0)) {
     HEAP32[$6 + ($302 + -1 << 2) >> 2] = 0; //@line 9030
     $$10 = $302; //@line 9031
    } else {
     $$10 = $$9481; //@line 9033
    }
    $$0365482 = $$0365482 * 1.0e9 + +((HEAP32[$6 + ($299 << 2) >> 2] | 0) >>> 0); //@line 9039
    $$4483 = $$4483 + 1 | 0; //@line 9040
    if (($$4483 | 0) == 2) {
     break;
    } else {
     $$9481 = $$10; //@line 9045
    }
   }
   $311 = +($4 | 0); //@line 9048
   $312 = $$0365482 * $311; //@line 9049
   $313 = $$1381 + 53 | 0; //@line 9050
   $314 = $313 - $3 | 0; //@line 9051
   $315 = ($314 | 0) < ($2 | 0); //@line 9052
   $$0333 = $315 ? ($314 | 0) > 0 ? $314 : 0 : $2; //@line 9055
   if (($$0333 | 0) < 53) {
    $320 = +_copysignl(+_scalbn(1.0, 105 - $$0333 | 0), $312); //@line 9060
    $323 = +_fmodl($312, +_scalbn(1.0, 53 - $$0333 | 0)); //@line 9063
    $$0360 = $320; //@line 9066
    $$0361 = $323; //@line 9066
    $$1366 = $320 + ($312 - $323); //@line 9066
   } else {
    $$0360 = 0.0; //@line 9068
    $$0361 = 0.0; //@line 9068
    $$1366 = $312; //@line 9068
   }
   $327 = $$4354 + 2 & 127; //@line 9071
   if (($327 | 0) == ($$10 | 0)) {
    $$3364 = $$0361; //@line 9074
   } else {
    $330 = HEAP32[$6 + ($327 << 2) >> 2] | 0; //@line 9077
    do {
     if ($330 >>> 0 < 5e8) {
      if (!$330) {
       if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
        $$1362 = $$0361; //@line 9087
        break;
       }
      }
      $$1362 = $311 * .25 + $$0361; //@line 9093
     } else {
      if (($330 | 0) != 5e8) {
       $$1362 = $311 * .75 + $$0361; //@line 9099
       break;
      }
      if (($$4354 + 3 & 127 | 0) == ($$10 | 0)) {
       $$1362 = $311 * .5 + $$0361; //@line 9108
       break;
      } else {
       $$1362 = $311 * .75 + $$0361; //@line 9113
       break;
      }
     }
    } while (0);
    if ((53 - $$0333 | 0) > 1) {
     if (+_fmodl($$1362, 1.0) != 0.0) {
      $$3364 = $$1362; //@line 9124
     } else {
      $$3364 = $$1362 + 1.0; //@line 9127
     }
    } else {
     $$3364 = $$1362; //@line 9130
    }
   }
   $354 = $$1366 + $$3364 - $$0360; //@line 9134
   do {
    if (($313 & 2147483647 | 0) > (-2 - $sum | 0)) {
     $359 = !(+Math_abs(+$354) >= 9007199254740992.0); //@line 9141
     $$3383 = $$1381 + (($359 ^ 1) & 1) | 0; //@line 9145
     $$2367 = $359 ? $354 : $354 * .5; //@line 9146
     if (($$3383 + 50 | 0) <= ($7 | 0)) {
      if (!($$3364 != 0.0 & ($315 & (($$0333 | 0) != ($314 | 0) | $359)))) {
       $$3368 = $$2367; //@line 9156
       $$4384 = $$3383; //@line 9156
       break;
      }
     }
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 9161
     $$3368 = $$2367; //@line 9162
     $$4384 = $$3383; //@line 9162
    } else {
     $$3368 = $354; //@line 9164
     $$4384 = $$1381; //@line 9164
    }
   } while (0);
   $$1 = +_scalbnl($$3368, $$4384); //@line 9168
  }
 } while (0);
 STACKTOP = sp; //@line 9171
 return +$$1;
}
function __ZL29nsapi_dns_query_async_timeoutv() {
 var $$02972 = 0, $$03071 = 0, $$131 = 0, $$sroa_idx5$i$i = 0, $$sroa_idx5$i$i43 = 0, $0 = 0, $1 = 0, $10 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $13 = 0, $136 = 0, $139 = 0, $14 = 0, $165 = 0, $168 = 0, $19 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $200 = 0, $201 = 0, $205 = 0, $232 = 0, $233 = 0, $234 = 0, $260 = 0, $263 = 0, $289 = 0, $292 = 0, $3 = 0, $322 = 0, $323 = 0, $327 = 0, $331 = 0, $332 = 0, $334 = 0, $338 = 0, $343 = 0, $346 = 0, $349 = 0, $352 = 0, $4 = 0, $5 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $81 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx38 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8366
 STACKTOP = STACKTOP + 96 | 0; //@line 8367
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 8367
 $0 = sp + 80 | 0; //@line 8368
 $1 = sp + 64 | 0; //@line 8369
 $2 = sp + 48 | 0; //@line 8370
 $3 = sp + 32 | 0; //@line 8371
 $4 = sp + 16 | 0; //@line 8372
 $5 = sp; //@line 8373
 $6 = $2 + 12 | 0; //@line 8374
 $7 = $3 + 8 | 0; //@line 8375
 $$sroa_idx5$i$i43 = $3 + 4 | 0; //@line 8376
 $8 = $3 + 12 | 0; //@line 8377
 $9 = $0 + 12 | 0; //@line 8378
 $10 = $1 + 8 | 0; //@line 8379
 $$sroa_idx5$i$i = $1 + 4 | 0; //@line 8380
 $11 = $1 + 12 | 0; //@line 8381
 $$02972 = 0; //@line 8382
 $$03071 = 0; //@line 8382
 L1 : while (1) {
  $13 = 7796 + ($$02972 << 2) | 0; //@line 8384
  $14 = HEAP32[$13 >> 2] | 0; //@line 8385
  do {
   if (!$14) {
    $$131 = $$03071; //@line 8389
   } else {
    if ((HEAP32[$14 + 88 >> 2] | 0) == 2) {
     $19 = HEAP32[$14 >> 2] | 0; //@line 8395
     $AsyncCtx35 = _emscripten_alloc_async_context(100, sp) | 0; //@line 8396
     __ZL28nsapi_dns_query_async_deletei($19); //@line 8397
     if (___async) {
      label = 6; //@line 8400
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx35 | 0); //@line 8403
     $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 8404
     __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 8405
     if (___async) {
      label = 8; //@line 8408
      break L1;
     }
     _emscripten_free_async_context($AsyncCtx38 | 0); //@line 8411
     $$131 = $$03071; //@line 8412
     break;
    }
    $68 = $14 + 72 | 0; //@line 8415
    $69 = HEAP32[$68 >> 2] | 0; //@line 8416
    if ($69 >>> 0 > 100) {
     HEAP32[$68 >> 2] = $69 + -100; //@line 8420
    } else {
     if ((HEAP32[$14 + 4 >> 2] | 0) == -3019) {
      HEAP32[$14 + 76 >> 2] = 0; //@line 8427
      $76 = $14 + 44 | 0; //@line 8428
      $77 = HEAP32[$76 >> 2] | 0; //@line 8429
      if (!$77) {
       $108 = 0; //@line 8432
       $110 = $14; //@line 8432
      } else {
       $81 = HEAP32[$77 + 4 >> 2] | 0; //@line 8436
       $AsyncCtx = _emscripten_alloc_async_context(108, sp) | 0; //@line 8437
       FUNCTION_TABLE_vii[$81 & 7]($0, $14 + 32 | 0); //@line 8438
       if (___async) {
        label = 15; //@line 8441
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 8444
       $108 = HEAP32[$76 >> 2] | 0; //@line 8447
       $110 = HEAP32[$13 >> 2] | 0; //@line 8447
      }
      HEAP32[$9 >> 2] = $108; //@line 8449
      $109 = HEAP32[$110 >> 2] | 0; //@line 8450
      HEAP32[$10 >> 2] = 0; //@line 8451
      HEAP32[$1 >> 2] = 188; //@line 8452
      HEAP32[$$sroa_idx5$i$i >> 2] = $109; //@line 8453
      HEAP32[$11 >> 2] = 764; //@line 8454
      $AsyncCtx47 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8455
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 8456
      if (___async) {
       label = 18; //@line 8459
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx47 | 0); //@line 8462
      $136 = HEAP32[$11 >> 2] | 0; //@line 8463
      if ($136 | 0) {
       $139 = HEAP32[$136 + 8 >> 2] | 0; //@line 8467
       $AsyncCtx3 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8468
       FUNCTION_TABLE_vi[$139 & 511]($1); //@line 8469
       if (___async) {
        label = 21; //@line 8472
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 8475
      }
      $165 = HEAP32[$9 >> 2] | 0; //@line 8477
      if ($165 | 0) {
       $168 = HEAP32[$165 + 8 >> 2] | 0; //@line 8481
       $AsyncCtx7 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8482
       FUNCTION_TABLE_vi[$168 & 511]($0); //@line 8483
       if (___async) {
        label = 25; //@line 8486
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx7 | 0); //@line 8489
      }
     }
    }
    $194 = HEAP32[$13 >> 2] | 0; //@line 8493
    $195 = $194 + 76 | 0; //@line 8494
    $196 = HEAP32[$195 >> 2] | 0; //@line 8495
    do {
     if ($196 | 0) {
      if ($196 >>> 0 > 100) {
       HEAP32[$195 >> 2] = $196 + -100; //@line 8502
       break;
      }
      HEAP32[$195 >> 2] = 0; //@line 8505
      $200 = $194 + 44 | 0; //@line 8506
      $201 = HEAP32[$200 >> 2] | 0; //@line 8507
      if (!$201) {
       $232 = 0; //@line 8510
       $234 = $194; //@line 8510
      } else {
       $205 = HEAP32[$201 + 4 >> 2] | 0; //@line 8514
       $AsyncCtx11 = _emscripten_alloc_async_context(108, sp) | 0; //@line 8515
       FUNCTION_TABLE_vii[$205 & 7]($2, $194 + 32 | 0); //@line 8516
       if (___async) {
        label = 32; //@line 8519
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 8522
       $232 = HEAP32[$200 >> 2] | 0; //@line 8525
       $234 = HEAP32[$13 >> 2] | 0; //@line 8525
      }
      HEAP32[$6 >> 2] = $232; //@line 8527
      $233 = HEAP32[$234 >> 2] | 0; //@line 8528
      HEAP32[$7 >> 2] = 0; //@line 8529
      HEAP32[$3 >> 2] = 193; //@line 8530
      HEAP32[$$sroa_idx5$i$i43 >> 2] = $233; //@line 8531
      HEAP32[$8 >> 2] = 764; //@line 8532
      $AsyncCtx44 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8533
      __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($2, 0, $3) | 0; //@line 8534
      if (___async) {
       label = 35; //@line 8537
       break L1;
      }
      _emscripten_free_async_context($AsyncCtx44 | 0); //@line 8540
      $260 = HEAP32[$8 >> 2] | 0; //@line 8541
      if ($260 | 0) {
       $263 = HEAP32[$260 + 8 >> 2] | 0; //@line 8545
       $AsyncCtx15 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8546
       FUNCTION_TABLE_vi[$263 & 511]($3); //@line 8547
       if (___async) {
        label = 38; //@line 8550
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 8553
      }
      $289 = HEAP32[$6 >> 2] | 0; //@line 8555
      if ($289 | 0) {
       $292 = HEAP32[$289 + 8 >> 2] | 0; //@line 8559
       $AsyncCtx19 = _emscripten_alloc_async_context(104, sp) | 0; //@line 8560
       FUNCTION_TABLE_vi[$292 & 511]($2); //@line 8561
       if (___async) {
        label = 42; //@line 8564
        break L1;
       }
       _emscripten_free_async_context($AsyncCtx19 | 0); //@line 8567
      }
     }
    } while (0);
    if (!$$03071) {
     $$131 = HEAP32[$13 >> 2] | 0; //@line 8574
    } else {
     $$131 = $$03071; //@line 8576
    }
   }
  } while (0);
  if (($$02972 | 0) < 4) {
   $$02972 = $$02972 + 1 | 0; //@line 8583
   $$03071 = $$131; //@line 8583
  } else {
   label = 2; //@line 8585
   break;
  }
 }
 switch (label | 0) {
 case 2:
  {
   if (!$$131) {
    HEAP8[8676] = 0; //@line 8593
    STACKTOP = sp; //@line 8594
    return;
   }
   $322 = $$131 + 44 | 0; //@line 8596
   $323 = HEAP32[$322 >> 2] | 0; //@line 8597
   do {
    if (!$323) {
     $332 = 0; //@line 8601
    } else {
     $327 = HEAP32[$323 + 4 >> 2] | 0; //@line 8605
     $AsyncCtx23 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8606
     FUNCTION_TABLE_vii[$327 & 7]($4, $$131 + 32 | 0); //@line 8607
     if (___async) {
      HEAP32[$AsyncCtx23 >> 2] = 197; //@line 8610
      HEAP32[$AsyncCtx23 + 4 >> 2] = $322; //@line 8612
      HEAP32[$AsyncCtx23 + 8 >> 2] = $4; //@line 8614
      HEAP32[$AsyncCtx23 + 12 >> 2] = $5; //@line 8616
      sp = STACKTOP; //@line 8617
      STACKTOP = sp; //@line 8618
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx23 | 0); //@line 8620
      $332 = HEAP32[$322 >> 2] | 0; //@line 8622
      break;
     }
    }
   } while (0);
   $331 = $4 + 12 | 0; //@line 8627
   HEAP32[$331 >> 2] = $332; //@line 8628
   $334 = $5 + 4 | 0; //@line 8630
   HEAP32[$334 >> 2] = 0; //@line 8632
   HEAP32[$334 + 4 >> 2] = 0; //@line 8635
   HEAP32[$5 >> 2] = 3; //@line 8636
   $338 = $5 + 12 | 0; //@line 8637
   HEAP32[$338 >> 2] = 752; //@line 8638
   $AsyncCtx41 = _emscripten_alloc_async_context(20, sp) | 0; //@line 8639
   __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $5) | 0; //@line 8640
   if (___async) {
    HEAP32[$AsyncCtx41 >> 2] = 198; //@line 8643
    HEAP32[$AsyncCtx41 + 4 >> 2] = $338; //@line 8645
    HEAP32[$AsyncCtx41 + 8 >> 2] = $331; //@line 8647
    HEAP32[$AsyncCtx41 + 12 >> 2] = $5; //@line 8649
    HEAP32[$AsyncCtx41 + 16 >> 2] = $4; //@line 8651
    sp = STACKTOP; //@line 8652
    STACKTOP = sp; //@line 8653
    return;
   }
   _emscripten_free_async_context($AsyncCtx41 | 0); //@line 8655
   $343 = HEAP32[$338 >> 2] | 0; //@line 8656
   do {
    if ($343 | 0) {
     $346 = HEAP32[$343 + 8 >> 2] | 0; //@line 8661
     $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8662
     FUNCTION_TABLE_vi[$346 & 511]($5); //@line 8663
     if (___async) {
      HEAP32[$AsyncCtx27 >> 2] = 199; //@line 8666
      HEAP32[$AsyncCtx27 + 4 >> 2] = $331; //@line 8668
      HEAP32[$AsyncCtx27 + 8 >> 2] = $4; //@line 8670
      sp = STACKTOP; //@line 8671
      STACKTOP = sp; //@line 8672
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 8674
      break;
     }
    }
   } while (0);
   $349 = HEAP32[$331 >> 2] | 0; //@line 8679
   if (!$349) {
    STACKTOP = sp; //@line 8682
    return;
   }
   $352 = HEAP32[$349 + 8 >> 2] | 0; //@line 8685
   $AsyncCtx31 = _emscripten_alloc_async_context(4, sp) | 0; //@line 8686
   FUNCTION_TABLE_vi[$352 & 511]($4); //@line 8687
   if (___async) {
    HEAP32[$AsyncCtx31 >> 2] = 200; //@line 8690
    sp = STACKTOP; //@line 8691
    STACKTOP = sp; //@line 8692
    return;
   }
   _emscripten_free_async_context($AsyncCtx31 | 0); //@line 8694
   STACKTOP = sp; //@line 8695
   return;
  }
 case 6:
  {
   HEAP32[$AsyncCtx35 >> 2] = 185; //@line 8699
   HEAP32[$AsyncCtx35 + 4 >> 2] = $4; //@line 8701
   HEAP32[$AsyncCtx35 + 8 >> 2] = $6; //@line 8703
   HEAP32[$AsyncCtx35 + 12 >> 2] = $3; //@line 8705
   HEAP32[$AsyncCtx35 + 16 >> 2] = $11; //@line 8707
   HEAP32[$AsyncCtx35 + 20 >> 2] = $2; //@line 8709
   HEAP32[$AsyncCtx35 + 24 >> 2] = $6; //@line 8711
   HEAP32[$AsyncCtx35 + 28 >> 2] = $7; //@line 8713
   HEAP32[$AsyncCtx35 + 32 >> 2] = $3; //@line 8715
   HEAP32[$AsyncCtx35 + 36 >> 2] = $$sroa_idx5$i$i43; //@line 8717
   HEAP32[$AsyncCtx35 + 40 >> 2] = $8; //@line 8719
   HEAP32[$AsyncCtx35 + 44 >> 2] = $2; //@line 8721
   HEAP32[$AsyncCtx35 + 48 >> 2] = $3; //@line 8723
   HEAP32[$AsyncCtx35 + 52 >> 2] = $1; //@line 8725
   HEAP32[$AsyncCtx35 + 56 >> 2] = $9; //@line 8727
   HEAP32[$AsyncCtx35 + 60 >> 2] = $0; //@line 8729
   HEAP32[$AsyncCtx35 + 64 >> 2] = $5; //@line 8731
   HEAP32[$AsyncCtx35 + 68 >> 2] = $9; //@line 8733
   HEAP32[$AsyncCtx35 + 72 >> 2] = $10; //@line 8735
   HEAP32[$AsyncCtx35 + 76 >> 2] = $1; //@line 8737
   HEAP32[$AsyncCtx35 + 80 >> 2] = $$sroa_idx5$i$i; //@line 8739
   HEAP32[$AsyncCtx35 + 84 >> 2] = $0; //@line 8741
   HEAP32[$AsyncCtx35 + 88 >> 2] = $1; //@line 8743
   HEAP32[$AsyncCtx35 + 92 >> 2] = $$03071; //@line 8745
   HEAP32[$AsyncCtx35 + 96 >> 2] = $$02972; //@line 8747
   sp = STACKTOP; //@line 8748
   STACKTOP = sp; //@line 8749
   return;
  }
 case 8:
  {
   HEAP32[$AsyncCtx38 >> 2] = 186; //@line 8753
   HEAP32[$AsyncCtx38 + 4 >> 2] = $4; //@line 8755
   HEAP32[$AsyncCtx38 + 8 >> 2] = $6; //@line 8757
   HEAP32[$AsyncCtx38 + 12 >> 2] = $3; //@line 8759
   HEAP32[$AsyncCtx38 + 16 >> 2] = $11; //@line 8761
   HEAP32[$AsyncCtx38 + 20 >> 2] = $2; //@line 8763
   HEAP32[$AsyncCtx38 + 24 >> 2] = $6; //@line 8765
   HEAP32[$AsyncCtx38 + 28 >> 2] = $7; //@line 8767
   HEAP32[$AsyncCtx38 + 32 >> 2] = $3; //@line 8769
   HEAP32[$AsyncCtx38 + 36 >> 2] = $$sroa_idx5$i$i43; //@line 8771
   HEAP32[$AsyncCtx38 + 40 >> 2] = $8; //@line 8773
   HEAP32[$AsyncCtx38 + 44 >> 2] = $2; //@line 8775
   HEAP32[$AsyncCtx38 + 48 >> 2] = $3; //@line 8777
   HEAP32[$AsyncCtx38 + 52 >> 2] = $1; //@line 8779
   HEAP32[$AsyncCtx38 + 56 >> 2] = $9; //@line 8781
   HEAP32[$AsyncCtx38 + 60 >> 2] = $0; //@line 8783
   HEAP32[$AsyncCtx38 + 64 >> 2] = $5; //@line 8785
   HEAP32[$AsyncCtx38 + 68 >> 2] = $9; //@line 8787
   HEAP32[$AsyncCtx38 + 72 >> 2] = $10; //@line 8789
   HEAP32[$AsyncCtx38 + 76 >> 2] = $1; //@line 8791
   HEAP32[$AsyncCtx38 + 80 >> 2] = $$sroa_idx5$i$i; //@line 8793
   HEAP32[$AsyncCtx38 + 84 >> 2] = $0; //@line 8795
   HEAP32[$AsyncCtx38 + 88 >> 2] = $1; //@line 8797
   HEAP32[$AsyncCtx38 + 92 >> 2] = $$03071; //@line 8799
   HEAP32[$AsyncCtx38 + 96 >> 2] = $$02972; //@line 8801
   sp = STACKTOP; //@line 8802
   STACKTOP = sp; //@line 8803
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx >> 2] = 187; //@line 8807
   HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 8809
   HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 8811
   HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 8813
   HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 8815
   HEAP32[$AsyncCtx + 20 >> 2] = $6; //@line 8817
   HEAP32[$AsyncCtx + 24 >> 2] = $7; //@line 8819
   HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 8821
   HEAP32[$AsyncCtx + 32 >> 2] = $$sroa_idx5$i$i43; //@line 8823
   HEAP32[$AsyncCtx + 36 >> 2] = $8; //@line 8825
   HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 8827
   HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 8829
   HEAP32[$AsyncCtx + 48 >> 2] = $13; //@line 8831
   HEAP32[$AsyncCtx + 52 >> 2] = $76; //@line 8833
   HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 8835
   HEAP32[$AsyncCtx + 60 >> 2] = $1; //@line 8837
   HEAP32[$AsyncCtx + 64 >> 2] = $9; //@line 8839
   HEAP32[$AsyncCtx + 68 >> 2] = $0; //@line 8841
   HEAP32[$AsyncCtx + 72 >> 2] = $5; //@line 8843
   HEAP32[$AsyncCtx + 76 >> 2] = $9; //@line 8845
   HEAP32[$AsyncCtx + 80 >> 2] = $10; //@line 8847
   HEAP32[$AsyncCtx + 84 >> 2] = $1; //@line 8849
   HEAP32[$AsyncCtx + 88 >> 2] = $$sroa_idx5$i$i; //@line 8851
   HEAP32[$AsyncCtx + 92 >> 2] = $0; //@line 8853
   HEAP32[$AsyncCtx + 96 >> 2] = $1; //@line 8855
   HEAP32[$AsyncCtx + 100 >> 2] = $$03071; //@line 8857
   HEAP32[$AsyncCtx + 104 >> 2] = $$02972; //@line 8859
   sp = STACKTOP; //@line 8860
   STACKTOP = sp; //@line 8861
   return;
  }
 case 18:
  {
   HEAP32[$AsyncCtx47 >> 2] = 189; //@line 8865
   HEAP32[$AsyncCtx47 + 4 >> 2] = $4; //@line 8867
   HEAP32[$AsyncCtx47 + 8 >> 2] = $6; //@line 8869
   HEAP32[$AsyncCtx47 + 12 >> 2] = $3; //@line 8871
   HEAP32[$AsyncCtx47 + 16 >> 2] = $11; //@line 8873
   HEAP32[$AsyncCtx47 + 20 >> 2] = $2; //@line 8875
   HEAP32[$AsyncCtx47 + 24 >> 2] = $6; //@line 8877
   HEAP32[$AsyncCtx47 + 28 >> 2] = $7; //@line 8879
   HEAP32[$AsyncCtx47 + 32 >> 2] = $3; //@line 8881
   HEAP32[$AsyncCtx47 + 36 >> 2] = $$sroa_idx5$i$i43; //@line 8883
   HEAP32[$AsyncCtx47 + 40 >> 2] = $8; //@line 8885
   HEAP32[$AsyncCtx47 + 44 >> 2] = $2; //@line 8887
   HEAP32[$AsyncCtx47 + 48 >> 2] = $3; //@line 8889
   HEAP32[$AsyncCtx47 + 52 >> 2] = $1; //@line 8891
   HEAP32[$AsyncCtx47 + 56 >> 2] = $9; //@line 8893
   HEAP32[$AsyncCtx47 + 60 >> 2] = $0; //@line 8895
   HEAP32[$AsyncCtx47 + 64 >> 2] = $5; //@line 8897
   HEAP32[$AsyncCtx47 + 68 >> 2] = $9; //@line 8899
   HEAP32[$AsyncCtx47 + 72 >> 2] = $10; //@line 8901
   HEAP32[$AsyncCtx47 + 76 >> 2] = $1; //@line 8903
   HEAP32[$AsyncCtx47 + 80 >> 2] = $$sroa_idx5$i$i; //@line 8905
   HEAP32[$AsyncCtx47 + 84 >> 2] = $0; //@line 8907
   HEAP32[$AsyncCtx47 + 88 >> 2] = $1; //@line 8909
   HEAP32[$AsyncCtx47 + 92 >> 2] = $13; //@line 8911
   HEAP32[$AsyncCtx47 + 96 >> 2] = $$03071; //@line 8913
   HEAP32[$AsyncCtx47 + 100 >> 2] = $$02972; //@line 8915
   sp = STACKTOP; //@line 8916
   STACKTOP = sp; //@line 8917
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx3 >> 2] = 190; //@line 8921
   HEAP32[$AsyncCtx3 + 4 >> 2] = $6; //@line 8923
   HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 8925
   HEAP32[$AsyncCtx3 + 12 >> 2] = $11; //@line 8927
   HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 8929
   HEAP32[$AsyncCtx3 + 20 >> 2] = $6; //@line 8931
   HEAP32[$AsyncCtx3 + 24 >> 2] = $7; //@line 8933
   HEAP32[$AsyncCtx3 + 28 >> 2] = $3; //@line 8935
   HEAP32[$AsyncCtx3 + 32 >> 2] = $$sroa_idx5$i$i43; //@line 8937
   HEAP32[$AsyncCtx3 + 36 >> 2] = $8; //@line 8939
   HEAP32[$AsyncCtx3 + 40 >> 2] = $2; //@line 8941
   HEAP32[$AsyncCtx3 + 44 >> 2] = $3; //@line 8943
   HEAP32[$AsyncCtx3 + 48 >> 2] = $13; //@line 8945
   HEAP32[$AsyncCtx3 + 52 >> 2] = $4; //@line 8947
   HEAP32[$AsyncCtx3 + 56 >> 2] = $1; //@line 8949
   HEAP32[$AsyncCtx3 + 60 >> 2] = $9; //@line 8951
   HEAP32[$AsyncCtx3 + 64 >> 2] = $0; //@line 8953
   HEAP32[$AsyncCtx3 + 68 >> 2] = $5; //@line 8955
   HEAP32[$AsyncCtx3 + 72 >> 2] = $9; //@line 8957
   HEAP32[$AsyncCtx3 + 76 >> 2] = $10; //@line 8959
   HEAP32[$AsyncCtx3 + 80 >> 2] = $1; //@line 8961
   HEAP32[$AsyncCtx3 + 84 >> 2] = $$sroa_idx5$i$i; //@line 8963
   HEAP32[$AsyncCtx3 + 88 >> 2] = $0; //@line 8965
   HEAP32[$AsyncCtx3 + 92 >> 2] = $1; //@line 8967
   HEAP32[$AsyncCtx3 + 96 >> 2] = $$03071; //@line 8969
   HEAP32[$AsyncCtx3 + 100 >> 2] = $$02972; //@line 8971
   sp = STACKTOP; //@line 8972
   STACKTOP = sp; //@line 8973
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx7 >> 2] = 191; //@line 8977
   HEAP32[$AsyncCtx7 + 4 >> 2] = $6; //@line 8979
   HEAP32[$AsyncCtx7 + 8 >> 2] = $3; //@line 8981
   HEAP32[$AsyncCtx7 + 12 >> 2] = $11; //@line 8983
   HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 8985
   HEAP32[$AsyncCtx7 + 20 >> 2] = $6; //@line 8987
   HEAP32[$AsyncCtx7 + 24 >> 2] = $7; //@line 8989
   HEAP32[$AsyncCtx7 + 28 >> 2] = $3; //@line 8991
   HEAP32[$AsyncCtx7 + 32 >> 2] = $$sroa_idx5$i$i43; //@line 8993
   HEAP32[$AsyncCtx7 + 36 >> 2] = $8; //@line 8995
   HEAP32[$AsyncCtx7 + 40 >> 2] = $2; //@line 8997
   HEAP32[$AsyncCtx7 + 44 >> 2] = $3; //@line 8999
   HEAP32[$AsyncCtx7 + 48 >> 2] = $13; //@line 9001
   HEAP32[$AsyncCtx7 + 52 >> 2] = $4; //@line 9003
   HEAP32[$AsyncCtx7 + 56 >> 2] = $1; //@line 9005
   HEAP32[$AsyncCtx7 + 60 >> 2] = $9; //@line 9007
   HEAP32[$AsyncCtx7 + 64 >> 2] = $0; //@line 9009
   HEAP32[$AsyncCtx7 + 68 >> 2] = $5; //@line 9011
   HEAP32[$AsyncCtx7 + 72 >> 2] = $9; //@line 9013
   HEAP32[$AsyncCtx7 + 76 >> 2] = $10; //@line 9015
   HEAP32[$AsyncCtx7 + 80 >> 2] = $1; //@line 9017
   HEAP32[$AsyncCtx7 + 84 >> 2] = $$sroa_idx5$i$i; //@line 9019
   HEAP32[$AsyncCtx7 + 88 >> 2] = $0; //@line 9021
   HEAP32[$AsyncCtx7 + 92 >> 2] = $1; //@line 9023
   HEAP32[$AsyncCtx7 + 96 >> 2] = $$03071; //@line 9025
   HEAP32[$AsyncCtx7 + 100 >> 2] = $$02972; //@line 9027
   sp = STACKTOP; //@line 9028
   STACKTOP = sp; //@line 9029
   return;
  }
 case 32:
  {
   HEAP32[$AsyncCtx11 >> 2] = 192; //@line 9033
   HEAP32[$AsyncCtx11 + 4 >> 2] = $6; //@line 9035
   HEAP32[$AsyncCtx11 + 8 >> 2] = $3; //@line 9037
   HEAP32[$AsyncCtx11 + 12 >> 2] = $11; //@line 9039
   HEAP32[$AsyncCtx11 + 16 >> 2] = $2; //@line 9041
   HEAP32[$AsyncCtx11 + 20 >> 2] = $6; //@line 9043
   HEAP32[$AsyncCtx11 + 24 >> 2] = $7; //@line 9045
   HEAP32[$AsyncCtx11 + 28 >> 2] = $3; //@line 9047
   HEAP32[$AsyncCtx11 + 32 >> 2] = $$sroa_idx5$i$i43; //@line 9049
   HEAP32[$AsyncCtx11 + 36 >> 2] = $8; //@line 9051
   HEAP32[$AsyncCtx11 + 40 >> 2] = $2; //@line 9053
   HEAP32[$AsyncCtx11 + 44 >> 2] = $3; //@line 9055
   HEAP32[$AsyncCtx11 + 48 >> 2] = $4; //@line 9057
   HEAP32[$AsyncCtx11 + 52 >> 2] = $1; //@line 9059
   HEAP32[$AsyncCtx11 + 56 >> 2] = $9; //@line 9061
   HEAP32[$AsyncCtx11 + 60 >> 2] = $0; //@line 9063
   HEAP32[$AsyncCtx11 + 64 >> 2] = $5; //@line 9065
   HEAP32[$AsyncCtx11 + 68 >> 2] = $9; //@line 9067
   HEAP32[$AsyncCtx11 + 72 >> 2] = $10; //@line 9069
   HEAP32[$AsyncCtx11 + 76 >> 2] = $1; //@line 9071
   HEAP32[$AsyncCtx11 + 80 >> 2] = $$sroa_idx5$i$i; //@line 9073
   HEAP32[$AsyncCtx11 + 84 >> 2] = $0; //@line 9075
   HEAP32[$AsyncCtx11 + 88 >> 2] = $1; //@line 9077
   HEAP32[$AsyncCtx11 + 92 >> 2] = $200; //@line 9079
   HEAP32[$AsyncCtx11 + 96 >> 2] = $13; //@line 9081
   HEAP32[$AsyncCtx11 + 100 >> 2] = $$03071; //@line 9083
   HEAP32[$AsyncCtx11 + 104 >> 2] = $$02972; //@line 9085
   sp = STACKTOP; //@line 9086
   STACKTOP = sp; //@line 9087
   return;
  }
 case 35:
  {
   HEAP32[$AsyncCtx44 >> 2] = 194; //@line 9091
   HEAP32[$AsyncCtx44 + 4 >> 2] = $4; //@line 9093
   HEAP32[$AsyncCtx44 + 8 >> 2] = $6; //@line 9095
   HEAP32[$AsyncCtx44 + 12 >> 2] = $3; //@line 9097
   HEAP32[$AsyncCtx44 + 16 >> 2] = $11; //@line 9099
   HEAP32[$AsyncCtx44 + 20 >> 2] = $2; //@line 9101
   HEAP32[$AsyncCtx44 + 24 >> 2] = $6; //@line 9103
   HEAP32[$AsyncCtx44 + 28 >> 2] = $7; //@line 9105
   HEAP32[$AsyncCtx44 + 32 >> 2] = $3; //@line 9107
   HEAP32[$AsyncCtx44 + 36 >> 2] = $$sroa_idx5$i$i43; //@line 9109
   HEAP32[$AsyncCtx44 + 40 >> 2] = $8; //@line 9111
   HEAP32[$AsyncCtx44 + 44 >> 2] = $2; //@line 9113
   HEAP32[$AsyncCtx44 + 48 >> 2] = $3; //@line 9115
   HEAP32[$AsyncCtx44 + 52 >> 2] = $1; //@line 9117
   HEAP32[$AsyncCtx44 + 56 >> 2] = $9; //@line 9119
   HEAP32[$AsyncCtx44 + 60 >> 2] = $0; //@line 9121
   HEAP32[$AsyncCtx44 + 64 >> 2] = $5; //@line 9123
   HEAP32[$AsyncCtx44 + 68 >> 2] = $9; //@line 9125
   HEAP32[$AsyncCtx44 + 72 >> 2] = $10; //@line 9127
   HEAP32[$AsyncCtx44 + 76 >> 2] = $1; //@line 9129
   HEAP32[$AsyncCtx44 + 80 >> 2] = $$sroa_idx5$i$i; //@line 9131
   HEAP32[$AsyncCtx44 + 84 >> 2] = $0; //@line 9133
   HEAP32[$AsyncCtx44 + 88 >> 2] = $1; //@line 9135
   HEAP32[$AsyncCtx44 + 92 >> 2] = $13; //@line 9137
   HEAP32[$AsyncCtx44 + 96 >> 2] = $$03071; //@line 9139
   HEAP32[$AsyncCtx44 + 100 >> 2] = $$02972; //@line 9141
   sp = STACKTOP; //@line 9142
   STACKTOP = sp; //@line 9143
   return;
  }
 case 38:
  {
   HEAP32[$AsyncCtx15 >> 2] = 195; //@line 9147
   HEAP32[$AsyncCtx15 + 4 >> 2] = $6; //@line 9149
   HEAP32[$AsyncCtx15 + 8 >> 2] = $3; //@line 9151
   HEAP32[$AsyncCtx15 + 12 >> 2] = $11; //@line 9153
   HEAP32[$AsyncCtx15 + 16 >> 2] = $2; //@line 9155
   HEAP32[$AsyncCtx15 + 20 >> 2] = $6; //@line 9157
   HEAP32[$AsyncCtx15 + 24 >> 2] = $7; //@line 9159
   HEAP32[$AsyncCtx15 + 28 >> 2] = $3; //@line 9161
   HEAP32[$AsyncCtx15 + 32 >> 2] = $$sroa_idx5$i$i43; //@line 9163
   HEAP32[$AsyncCtx15 + 36 >> 2] = $8; //@line 9165
   HEAP32[$AsyncCtx15 + 40 >> 2] = $2; //@line 9167
   HEAP32[$AsyncCtx15 + 44 >> 2] = $3; //@line 9169
   HEAP32[$AsyncCtx15 + 48 >> 2] = $4; //@line 9171
   HEAP32[$AsyncCtx15 + 52 >> 2] = $1; //@line 9173
   HEAP32[$AsyncCtx15 + 56 >> 2] = $9; //@line 9175
   HEAP32[$AsyncCtx15 + 60 >> 2] = $0; //@line 9177
   HEAP32[$AsyncCtx15 + 64 >> 2] = $5; //@line 9179
   HEAP32[$AsyncCtx15 + 68 >> 2] = $9; //@line 9181
   HEAP32[$AsyncCtx15 + 72 >> 2] = $10; //@line 9183
   HEAP32[$AsyncCtx15 + 76 >> 2] = $1; //@line 9185
   HEAP32[$AsyncCtx15 + 80 >> 2] = $$sroa_idx5$i$i; //@line 9187
   HEAP32[$AsyncCtx15 + 84 >> 2] = $0; //@line 9189
   HEAP32[$AsyncCtx15 + 88 >> 2] = $1; //@line 9191
   HEAP32[$AsyncCtx15 + 92 >> 2] = $13; //@line 9193
   HEAP32[$AsyncCtx15 + 96 >> 2] = $$03071; //@line 9195
   HEAP32[$AsyncCtx15 + 100 >> 2] = $$02972; //@line 9197
   sp = STACKTOP; //@line 9198
   STACKTOP = sp; //@line 9199
   return;
  }
 case 42:
  {
   HEAP32[$AsyncCtx19 >> 2] = 196; //@line 9203
   HEAP32[$AsyncCtx19 + 4 >> 2] = $6; //@line 9205
   HEAP32[$AsyncCtx19 + 8 >> 2] = $3; //@line 9207
   HEAP32[$AsyncCtx19 + 12 >> 2] = $11; //@line 9209
   HEAP32[$AsyncCtx19 + 16 >> 2] = $2; //@line 9211
   HEAP32[$AsyncCtx19 + 20 >> 2] = $6; //@line 9213
   HEAP32[$AsyncCtx19 + 24 >> 2] = $7; //@line 9215
   HEAP32[$AsyncCtx19 + 28 >> 2] = $3; //@line 9217
   HEAP32[$AsyncCtx19 + 32 >> 2] = $$sroa_idx5$i$i43; //@line 9219
   HEAP32[$AsyncCtx19 + 36 >> 2] = $8; //@line 9221
   HEAP32[$AsyncCtx19 + 40 >> 2] = $2; //@line 9223
   HEAP32[$AsyncCtx19 + 44 >> 2] = $3; //@line 9225
   HEAP32[$AsyncCtx19 + 48 >> 2] = $4; //@line 9227
   HEAP32[$AsyncCtx19 + 52 >> 2] = $1; //@line 9229
   HEAP32[$AsyncCtx19 + 56 >> 2] = $9; //@line 9231
   HEAP32[$AsyncCtx19 + 60 >> 2] = $0; //@line 9233
   HEAP32[$AsyncCtx19 + 64 >> 2] = $5; //@line 9235
   HEAP32[$AsyncCtx19 + 68 >> 2] = $9; //@line 9237
   HEAP32[$AsyncCtx19 + 72 >> 2] = $10; //@line 9239
   HEAP32[$AsyncCtx19 + 76 >> 2] = $1; //@line 9241
   HEAP32[$AsyncCtx19 + 80 >> 2] = $$sroa_idx5$i$i; //@line 9243
   HEAP32[$AsyncCtx19 + 84 >> 2] = $0; //@line 9245
   HEAP32[$AsyncCtx19 + 88 >> 2] = $1; //@line 9247
   HEAP32[$AsyncCtx19 + 92 >> 2] = $13; //@line 9249
   HEAP32[$AsyncCtx19 + 96 >> 2] = $$03071; //@line 9251
   HEAP32[$AsyncCtx19 + 100 >> 2] = $$02972; //@line 9253
   sp = STACKTOP; //@line 9254
   STACKTOP = sp; //@line 9255
   return;
  }
 }
}
function _fmt_fp($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = +$1;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$$3484 = 0, $$$3484700 = 0, $$$4502 = 0, $$$564 = 0.0, $$0 = 0, $$0463$lcssa = 0, $$0463587 = 0, $$0464597 = 0, $$0471 = 0.0, $$0479 = 0, $$0487644 = 0, $$0488655 = 0, $$0488657 = 0, $$0496$$9 = 0, $$0497656 = 0, $$0498 = 0, $$0509585 = 0.0, $$0511 = 0, $$0514639 = 0, $$0520 = 0, $$0521 = 0, $$0521$ = 0, $$0523 = 0, $$0527$in633 = 0, $$0530638 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482663 = 0, $$1489643 = 0, $$1499$lcssa = 0, $$1499662 = 0, $$1508586 = 0, $$1512$lcssa = 0, $$1512610 = 0, $$1515 = 0, $$1524 = 0, $$1528617 = 0, $$1531$lcssa = 0, $$1531632 = 0, $$1601 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483$ph = 0, $$2500 = 0, $$2513 = 0, $$2516621 = 0, $$2529 = 0, $$2532620 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484650 = 0, $$3501$lcssa = 0, $$3501649 = 0, $$3533616 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478593 = 0, $$4492 = 0, $$4502 = 0, $$4518 = 0, $$5$lcssa = 0, $$540 = 0, $$540$ = 0, $$543 = 0.0, $$548 = 0, $$5486$lcssa = 0, $$5486626 = 0, $$5493600 = 0, $$550 = 0, $$5519$ph = 0, $$5605 = 0, $$561 = 0, $$6 = 0, $$6494592 = 0, $$7495604 = 0, $$7505 = 0, $$7505$ = 0, $$7505$ph = 0, $$8 = 0, $$9$ph = 0, $$lcssa675 = 0, $$pn = 0, $$pr = 0, $$pr566 = 0, $$pre$phi691Z2D = 0, $$pre$phi698Z2D = 0, $$pre693 = 0, $$sink = 0, $$sink547$lcssa = 0, $$sink547625 = 0, $$sink560 = 0, $10 = 0, $101 = 0, $104 = 0, $106 = 0, $11 = 0, $113 = 0, $116 = 0, $124 = 0, $125 = 0, $128 = 0, $130 = 0, $131 = 0, $132 = 0, $138 = 0, $140 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $154 = 0, $160 = 0, $161 = 0, $162 = 0, $174 = 0, $185 = 0, $189 = 0, $190 = 0, $193 = 0, $198 = 0, $199 = 0, $201 = 0, $209 = 0, $212 = 0, $213 = 0, $215 = 0, $217 = 0, $218 = 0, $221 = 0, $225 = 0, $230 = 0, $233 = 0, $236 = 0, $238 = 0, $240 = 0, $242 = 0, $247 = 0, $248 = 0, $251 = 0, $253 = 0, $256 = 0, $259 = 0, $267 = 0, $27 = 0, $270 = 0, $275 = 0, $284 = 0, $285 = 0, $289 = 0, $292 = 0, $294 = 0, $296 = 0, $300 = 0, $303 = 0, $304 = 0, $308 = 0, $31 = 0, $318 = 0, $323 = 0, $326 = 0, $327 = 0, $328 = 0, $330 = 0, $335 = 0, $347 = 0, $35 = 0.0, $351 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $369 = 0, $373 = 0, $375 = 0, $378 = 0, $381 = 0, $39 = 0, $41 = 0, $44 = 0, $46 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $68 = 0, $7 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $86 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11540
 STACKTOP = STACKTOP + 560 | 0; //@line 11541
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(560); //@line 11541
 $6 = sp + 8 | 0; //@line 11542
 $7 = sp; //@line 11543
 $8 = sp + 524 | 0; //@line 11544
 $9 = $8; //@line 11545
 $10 = sp + 512 | 0; //@line 11546
 HEAP32[$7 >> 2] = 0; //@line 11547
 $11 = $10 + 12 | 0; //@line 11548
 ___DOUBLE_BITS_677($1) | 0; //@line 11549
 if ((tempRet0 | 0) < 0) {
  $$0471 = -$1; //@line 11554
  $$0520 = 1; //@line 11554
  $$0521 = 5024; //@line 11554
 } else {
  $$0471 = $1; //@line 11565
  $$0520 = ($4 & 2049 | 0) != 0 & 1; //@line 11565
  $$0521 = ($4 & 2048 | 0) == 0 ? ($4 & 1 | 0) == 0 ? 5025 : 5030 : 5027; //@line 11565
 }
 ___DOUBLE_BITS_677($$0471) | 0; //@line 11567
 do {
  if (0 == 0 & (tempRet0 & 2146435072 | 0) == 2146435072) {
   $27 = ($5 & 32 | 0) != 0; //@line 11576
   $31 = $$0520 + 3 | 0; //@line 11581
   _pad_676($0, 32, $2, $31, $4 & -65537); //@line 11583
   _out_670($0, $$0521, $$0520); //@line 11584
   _out_670($0, $$0471 != $$0471 | 0.0 != 0.0 ? $27 ? 5051 : 5055 : $27 ? 5043 : 5047, 3); //@line 11585
   _pad_676($0, 32, $2, $31, $4 ^ 8192); //@line 11587
   $$sink560 = $31; //@line 11588
  } else {
   $35 = +_frexpl($$0471, $7) * 2.0; //@line 11591
   $36 = $35 != 0.0; //@line 11592
   if ($36) {
    HEAP32[$7 >> 2] = (HEAP32[$7 >> 2] | 0) + -1; //@line 11596
   }
   $39 = $5 | 32; //@line 11598
   if (($39 | 0) == 97) {
    $41 = $5 & 32; //@line 11601
    $$0521$ = ($41 | 0) == 0 ? $$0521 : $$0521 + 9 | 0; //@line 11604
    $44 = $$0520 | 2; //@line 11605
    $46 = 12 - $3 | 0; //@line 11607
    do {
     if ($3 >>> 0 > 11 | ($46 | 0) == 0) {
      $$1472 = $35; //@line 11612
     } else {
      $$0509585 = 8.0; //@line 11614
      $$1508586 = $46; //@line 11614
      do {
       $$1508586 = $$1508586 + -1 | 0; //@line 11616
       $$0509585 = $$0509585 * 16.0; //@line 11617
      } while (($$1508586 | 0) != 0);
      if ((HEAP8[$$0521$ >> 0] | 0) == 45) {
       $$1472 = -($$0509585 + (-$35 - $$0509585)); //@line 11632
       break;
      } else {
       $$1472 = $35 + $$0509585 - $$0509585; //@line 11637
       break;
      }
     }
    } while (0);
    $60 = HEAP32[$7 >> 2] | 0; //@line 11642
    $63 = ($60 | 0) < 0 ? 0 - $60 | 0 : $60; //@line 11645
    $66 = _fmt_u($63, (($63 | 0) < 0) << 31 >> 31, $11) | 0; //@line 11648
    if (($66 | 0) == ($11 | 0)) {
     $68 = $10 + 11 | 0; //@line 11651
     HEAP8[$68 >> 0] = 48; //@line 11652
     $$0511 = $68; //@line 11653
    } else {
     $$0511 = $66; //@line 11655
    }
    HEAP8[$$0511 + -1 >> 0] = ($60 >> 31 & 2) + 43; //@line 11662
    $76 = $$0511 + -2 | 0; //@line 11665
    HEAP8[$76 >> 0] = $5 + 15; //@line 11666
    $77 = ($3 | 0) < 1; //@line 11667
    $79 = ($4 & 8 | 0) == 0; //@line 11669
    $$0523 = $8; //@line 11670
    $$2473 = $$1472; //@line 11670
    while (1) {
     $80 = ~~$$2473; //@line 11672
     $86 = $$0523 + 1 | 0; //@line 11678
     HEAP8[$$0523 >> 0] = $41 | HEAPU8[5059 + $80 >> 0]; //@line 11679
     $$2473 = ($$2473 - +($80 | 0)) * 16.0; //@line 11682
     if (($86 - $9 | 0) == 1) {
      if ($79 & ($77 & $$2473 == 0.0)) {
       $$1524 = $86; //@line 11691
      } else {
       HEAP8[$86 >> 0] = 46; //@line 11694
       $$1524 = $$0523 + 2 | 0; //@line 11695
      }
     } else {
      $$1524 = $86; //@line 11698
     }
     if (!($$2473 != 0.0)) {
      break;
     } else {
      $$0523 = $$1524; //@line 11702
     }
    }
    $$pre693 = $$1524; //@line 11708
    if (!$3) {
     label = 24; //@line 11710
    } else {
     if ((-2 - $9 + $$pre693 | 0) < ($3 | 0)) {
      $$pre$phi691Z2D = $$pre693 - $9 | 0; //@line 11718
      $$sink = $3 + 2 | 0; //@line 11718
     } else {
      label = 24; //@line 11720
     }
    }
    if ((label | 0) == 24) {
     $101 = $$pre693 - $9 | 0; //@line 11724
     $$pre$phi691Z2D = $101; //@line 11725
     $$sink = $101; //@line 11725
    }
    $104 = $11 - $76 | 0; //@line 11729
    $106 = $104 + $44 + $$sink | 0; //@line 11731
    _pad_676($0, 32, $2, $106, $4); //@line 11732
    _out_670($0, $$0521$, $44); //@line 11733
    _pad_676($0, 48, $2, $106, $4 ^ 65536); //@line 11735
    _out_670($0, $8, $$pre$phi691Z2D); //@line 11736
    _pad_676($0, 48, $$sink - $$pre$phi691Z2D | 0, 0, 0); //@line 11738
    _out_670($0, $76, $104); //@line 11739
    _pad_676($0, 32, $2, $106, $4 ^ 8192); //@line 11741
    $$sink560 = $106; //@line 11742
    break;
   }
   $$540 = ($3 | 0) < 0 ? 6 : $3; //@line 11746
   if ($36) {
    $113 = (HEAP32[$7 >> 2] | 0) + -28 | 0; //@line 11750
    HEAP32[$7 >> 2] = $113; //@line 11751
    $$3 = $35 * 268435456.0; //@line 11752
    $$pr = $113; //@line 11752
   } else {
    $$3 = $35; //@line 11755
    $$pr = HEAP32[$7 >> 2] | 0; //@line 11755
   }
   $$561 = ($$pr | 0) < 0 ? $6 : $6 + 288 | 0; //@line 11759
   $$0498 = $$561; //@line 11760
   $$4 = $$3; //@line 11760
   do {
    $116 = ~~$$4 >>> 0; //@line 11762
    HEAP32[$$0498 >> 2] = $116; //@line 11763
    $$0498 = $$0498 + 4 | 0; //@line 11764
    $$4 = ($$4 - +($116 >>> 0)) * 1.0e9; //@line 11767
   } while ($$4 != 0.0);
   if (($$pr | 0) > 0) {
    $$1482663 = $$561; //@line 11777
    $$1499662 = $$0498; //@line 11777
    $124 = $$pr; //@line 11777
    while (1) {
     $125 = ($124 | 0) < 29 ? $124 : 29; //@line 11780
     $$0488655 = $$1499662 + -4 | 0; //@line 11781
     if ($$0488655 >>> 0 < $$1482663 >>> 0) {
      $$2483$ph = $$1482663; //@line 11784
     } else {
      $$0488657 = $$0488655; //@line 11786
      $$0497656 = 0; //@line 11786
      do {
       $128 = _bitshift64Shl(HEAP32[$$0488657 >> 2] | 0, 0, $125 | 0) | 0; //@line 11789
       $130 = _i64Add($128 | 0, tempRet0 | 0, $$0497656 | 0, 0) | 0; //@line 11791
       $131 = tempRet0; //@line 11792
       $132 = ___uremdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11793
       HEAP32[$$0488657 >> 2] = $132; //@line 11795
       $$0497656 = ___udivdi3($130 | 0, $131 | 0, 1e9, 0) | 0; //@line 11796
       $$0488657 = $$0488657 + -4 | 0; //@line 11798
      } while ($$0488657 >>> 0 >= $$1482663 >>> 0);
      if (!$$0497656) {
       $$2483$ph = $$1482663; //@line 11808
      } else {
       $138 = $$1482663 + -4 | 0; //@line 11810
       HEAP32[$138 >> 2] = $$0497656; //@line 11811
       $$2483$ph = $138; //@line 11812
      }
     }
     $$2500 = $$1499662; //@line 11815
     while (1) {
      if ($$2500 >>> 0 <= $$2483$ph >>> 0) {
       break;
      }
      $140 = $$2500 + -4 | 0; //@line 11821
      if (!(HEAP32[$140 >> 2] | 0)) {
       $$2500 = $140; //@line 11825
      } else {
       break;
      }
     }
     $144 = (HEAP32[$7 >> 2] | 0) - $125 | 0; //@line 11831
     HEAP32[$7 >> 2] = $144; //@line 11832
     if (($144 | 0) > 0) {
      $$1482663 = $$2483$ph; //@line 11835
      $$1499662 = $$2500; //@line 11835
      $124 = $144; //@line 11835
     } else {
      $$1482$lcssa = $$2483$ph; //@line 11837
      $$1499$lcssa = $$2500; //@line 11837
      $$pr566 = $144; //@line 11837
      break;
     }
    }
   } else {
    $$1482$lcssa = $$561; //@line 11842
    $$1499$lcssa = $$0498; //@line 11842
    $$pr566 = $$pr; //@line 11842
   }
   if (($$pr566 | 0) < 0) {
    $149 = (($$540 + 25 | 0) / 9 | 0) + 1 | 0; //@line 11848
    $150 = ($39 | 0) == 102; //@line 11849
    $$3484650 = $$1482$lcssa; //@line 11850
    $$3501649 = $$1499$lcssa; //@line 11850
    $152 = $$pr566; //@line 11850
    while (1) {
     $151 = 0 - $152 | 0; //@line 11852
     $154 = ($151 | 0) < 9 ? $151 : 9; //@line 11854
     if ($$3484650 >>> 0 < $$3501649 >>> 0) {
      $160 = (1 << $154) + -1 | 0; //@line 11858
      $161 = 1e9 >>> $154; //@line 11859
      $$0487644 = 0; //@line 11860
      $$1489643 = $$3484650; //@line 11860
      do {
       $162 = HEAP32[$$1489643 >> 2] | 0; //@line 11862
       HEAP32[$$1489643 >> 2] = ($162 >>> $154) + $$0487644; //@line 11866
       $$0487644 = Math_imul($162 & $160, $161) | 0; //@line 11867
       $$1489643 = $$1489643 + 4 | 0; //@line 11868
      } while ($$1489643 >>> 0 < $$3501649 >>> 0);
      $$$3484 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11879
      if (!$$0487644) {
       $$$3484700 = $$$3484; //@line 11882
       $$4502 = $$3501649; //@line 11882
      } else {
       HEAP32[$$3501649 >> 2] = $$0487644; //@line 11885
       $$$3484700 = $$$3484; //@line 11886
       $$4502 = $$3501649 + 4 | 0; //@line 11886
      }
     } else {
      $$$3484700 = (HEAP32[$$3484650 >> 2] | 0) == 0 ? $$3484650 + 4 | 0 : $$3484650; //@line 11893
      $$4502 = $$3501649; //@line 11893
     }
     $174 = $150 ? $$561 : $$$3484700; //@line 11895
     $$$4502 = ($$4502 - $174 >> 2 | 0) > ($149 | 0) ? $174 + ($149 << 2) | 0 : $$4502; //@line 11902
     $152 = (HEAP32[$7 >> 2] | 0) + $154 | 0; //@line 11904
     HEAP32[$7 >> 2] = $152; //@line 11905
     if (($152 | 0) >= 0) {
      $$3484$lcssa = $$$3484700; //@line 11910
      $$3501$lcssa = $$$4502; //@line 11910
      break;
     } else {
      $$3484650 = $$$3484700; //@line 11908
      $$3501649 = $$$4502; //@line 11908
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa; //@line 11915
    $$3501$lcssa = $$1499$lcssa; //@line 11915
   }
   $185 = $$561; //@line 11918
   if ($$3484$lcssa >>> 0 < $$3501$lcssa >>> 0) {
    $189 = ($185 - $$3484$lcssa >> 2) * 9 | 0; //@line 11923
    $190 = HEAP32[$$3484$lcssa >> 2] | 0; //@line 11924
    if ($190 >>> 0 < 10) {
     $$1515 = $189; //@line 11927
    } else {
     $$0514639 = $189; //@line 11929
     $$0530638 = 10; //@line 11929
     while (1) {
      $$0530638 = $$0530638 * 10 | 0; //@line 11931
      $193 = $$0514639 + 1 | 0; //@line 11932
      if ($190 >>> 0 < $$0530638 >>> 0) {
       $$1515 = $193; //@line 11935
       break;
      } else {
       $$0514639 = $193; //@line 11938
      }
     }
    }
   } else {
    $$1515 = 0; //@line 11943
   }
   $198 = ($39 | 0) == 103; //@line 11948
   $199 = ($$540 | 0) != 0; //@line 11949
   $201 = $$540 - (($39 | 0) != 102 ? $$1515 : 0) + (($199 & $198) << 31 >> 31) | 0; //@line 11952
   if (($201 | 0) < ((($$3501$lcssa - $185 >> 2) * 9 | 0) + -9 | 0)) {
    $209 = $201 + 9216 | 0; //@line 11961
    $212 = $$561 + 4 + ((($209 | 0) / 9 | 0) + -1024 << 2) | 0; //@line 11964
    $213 = ($209 | 0) % 9 | 0; //@line 11965
    if (($213 | 0) < 8) {
     $$0527$in633 = $213; //@line 11968
     $$1531632 = 10; //@line 11968
     while (1) {
      $215 = $$1531632 * 10 | 0; //@line 11971
      if (($$0527$in633 | 0) < 7) {
       $$0527$in633 = $$0527$in633 + 1 | 0; //@line 11974
       $$1531632 = $215; //@line 11974
      } else {
       $$1531$lcssa = $215; //@line 11976
       break;
      }
     }
    } else {
     $$1531$lcssa = 10; //@line 11981
    }
    $217 = HEAP32[$212 >> 2] | 0; //@line 11983
    $218 = ($217 >>> 0) % ($$1531$lcssa >>> 0) | 0; //@line 11984
    $221 = ($212 + 4 | 0) == ($$3501$lcssa | 0); //@line 11987
    if ($221 & ($218 | 0) == 0) {
     $$4492 = $212; //@line 11990
     $$4518 = $$1515; //@line 11990
     $$8 = $$3484$lcssa; //@line 11990
    } else {
     $$543 = ((($217 >>> 0) / ($$1531$lcssa >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0; //@line 11995
     $225 = ($$1531$lcssa | 0) / 2 | 0; //@line 11996
     $$$564 = $218 >>> 0 < $225 >>> 0 ? .5 : $221 & ($218 | 0) == ($225 | 0) ? 1.0 : 1.5; //@line 12001
     if (!$$0520) {
      $$1467 = $$$564; //@line 12004
      $$1469 = $$543; //@line 12004
     } else {
      $230 = (HEAP8[$$0521 >> 0] | 0) == 45; //@line 12007
      $$1467 = $230 ? -$$$564 : $$$564; //@line 12012
      $$1469 = $230 ? -$$543 : $$543; //@line 12012
     }
     $233 = $217 - $218 | 0; //@line 12014
     HEAP32[$212 >> 2] = $233; //@line 12015
     if ($$1469 + $$1467 != $$1469) {
      $236 = $233 + $$1531$lcssa | 0; //@line 12019
      HEAP32[$212 >> 2] = $236; //@line 12020
      if ($236 >>> 0 > 999999999) {
       $$5486626 = $$3484$lcssa; //@line 12023
       $$sink547625 = $212; //@line 12023
       while (1) {
        $238 = $$sink547625 + -4 | 0; //@line 12025
        HEAP32[$$sink547625 >> 2] = 0; //@line 12026
        if ($238 >>> 0 < $$5486626 >>> 0) {
         $240 = $$5486626 + -4 | 0; //@line 12029
         HEAP32[$240 >> 2] = 0; //@line 12030
         $$6 = $240; //@line 12031
        } else {
         $$6 = $$5486626; //@line 12033
        }
        $242 = (HEAP32[$238 >> 2] | 0) + 1 | 0; //@line 12036
        HEAP32[$238 >> 2] = $242; //@line 12037
        if ($242 >>> 0 > 999999999) {
         $$5486626 = $$6; //@line 12040
         $$sink547625 = $238; //@line 12040
        } else {
         $$5486$lcssa = $$6; //@line 12042
         $$sink547$lcssa = $238; //@line 12042
         break;
        }
       }
      } else {
       $$5486$lcssa = $$3484$lcssa; //@line 12047
       $$sink547$lcssa = $212; //@line 12047
      }
      $247 = ($185 - $$5486$lcssa >> 2) * 9 | 0; //@line 12052
      $248 = HEAP32[$$5486$lcssa >> 2] | 0; //@line 12053
      if ($248 >>> 0 < 10) {
       $$4492 = $$sink547$lcssa; //@line 12056
       $$4518 = $247; //@line 12056
       $$8 = $$5486$lcssa; //@line 12056
      } else {
       $$2516621 = $247; //@line 12058
       $$2532620 = 10; //@line 12058
       while (1) {
        $$2532620 = $$2532620 * 10 | 0; //@line 12060
        $251 = $$2516621 + 1 | 0; //@line 12061
        if ($248 >>> 0 < $$2532620 >>> 0) {
         $$4492 = $$sink547$lcssa; //@line 12064
         $$4518 = $251; //@line 12064
         $$8 = $$5486$lcssa; //@line 12064
         break;
        } else {
         $$2516621 = $251; //@line 12067
        }
       }
      }
     } else {
      $$4492 = $212; //@line 12072
      $$4518 = $$1515; //@line 12072
      $$8 = $$3484$lcssa; //@line 12072
     }
    }
    $253 = $$4492 + 4 | 0; //@line 12075
    $$5519$ph = $$4518; //@line 12078
    $$7505$ph = $$3501$lcssa >>> 0 > $253 >>> 0 ? $253 : $$3501$lcssa; //@line 12078
    $$9$ph = $$8; //@line 12078
   } else {
    $$5519$ph = $$1515; //@line 12080
    $$7505$ph = $$3501$lcssa; //@line 12080
    $$9$ph = $$3484$lcssa; //@line 12080
   }
   $$7505 = $$7505$ph; //@line 12082
   while (1) {
    if ($$7505 >>> 0 <= $$9$ph >>> 0) {
     $$lcssa675 = 0; //@line 12086
     break;
    }
    $256 = $$7505 + -4 | 0; //@line 12089
    if (!(HEAP32[$256 >> 2] | 0)) {
     $$7505 = $256; //@line 12093
    } else {
     $$lcssa675 = 1; //@line 12095
     break;
    }
   }
   $259 = 0 - $$5519$ph | 0; //@line 12099
   do {
    if ($198) {
     $$540$ = $$540 + (($199 ^ 1) & 1) | 0; //@line 12104
     if (($$540$ | 0) > ($$5519$ph | 0) & ($$5519$ph | 0) > -5) {
      $$0479 = $5 + -1 | 0; //@line 12112
      $$2476 = $$540$ + -1 - $$5519$ph | 0; //@line 12112
     } else {
      $$0479 = $5 + -2 | 0; //@line 12116
      $$2476 = $$540$ + -1 | 0; //@line 12116
     }
     $267 = $4 & 8; //@line 12118
     if (!$267) {
      if ($$lcssa675) {
       $270 = HEAP32[$$7505 + -4 >> 2] | 0; //@line 12123
       if (!$270) {
        $$2529 = 9; //@line 12126
       } else {
        if (!(($270 >>> 0) % 10 | 0)) {
         $$1528617 = 0; //@line 12131
         $$3533616 = 10; //@line 12131
         while (1) {
          $$3533616 = $$3533616 * 10 | 0; //@line 12133
          $275 = $$1528617 + 1 | 0; //@line 12134
          if (($270 >>> 0) % ($$3533616 >>> 0) | 0 | 0) {
           $$2529 = $275; //@line 12140
           break;
          } else {
           $$1528617 = $275; //@line 12138
          }
         }
        } else {
         $$2529 = 0; //@line 12145
        }
       }
      } else {
       $$2529 = 9; //@line 12149
      }
      $284 = (($$7505 - $185 >> 2) * 9 | 0) + -9 | 0; //@line 12157
      if (($$0479 | 32 | 0) == 102) {
       $285 = $284 - $$2529 | 0; //@line 12159
       $$548 = ($285 | 0) > 0 ? $285 : 0; //@line 12161
       $$1480 = $$0479; //@line 12164
       $$3477 = ($$2476 | 0) < ($$548 | 0) ? $$2476 : $$548; //@line 12164
       $$pre$phi698Z2D = 0; //@line 12164
       break;
      } else {
       $289 = $284 + $$5519$ph - $$2529 | 0; //@line 12168
       $$550 = ($289 | 0) > 0 ? $289 : 0; //@line 12170
       $$1480 = $$0479; //@line 12173
       $$3477 = ($$2476 | 0) < ($$550 | 0) ? $$2476 : $$550; //@line 12173
       $$pre$phi698Z2D = 0; //@line 12173
       break;
      }
     } else {
      $$1480 = $$0479; //@line 12177
      $$3477 = $$2476; //@line 12177
      $$pre$phi698Z2D = $267; //@line 12177
     }
    } else {
     $$1480 = $5; //@line 12181
     $$3477 = $$540; //@line 12181
     $$pre$phi698Z2D = $4 & 8; //@line 12181
    }
   } while (0);
   $292 = $$3477 | $$pre$phi698Z2D; //@line 12184
   $294 = ($292 | 0) != 0 & 1; //@line 12186
   $296 = ($$1480 | 32 | 0) == 102; //@line 12188
   if ($296) {
    $$2513 = 0; //@line 12192
    $$pn = ($$5519$ph | 0) > 0 ? $$5519$ph : 0; //@line 12192
   } else {
    $300 = ($$5519$ph | 0) < 0 ? $259 : $$5519$ph; //@line 12195
    $303 = _fmt_u($300, (($300 | 0) < 0) << 31 >> 31, $11) | 0; //@line 12198
    $304 = $11; //@line 12199
    if (($304 - $303 | 0) < 2) {
     $$1512610 = $303; //@line 12204
     while (1) {
      $308 = $$1512610 + -1 | 0; //@line 12206
      HEAP8[$308 >> 0] = 48; //@line 12207
      if (($304 - $308 | 0) < 2) {
       $$1512610 = $308; //@line 12212
      } else {
       $$1512$lcssa = $308; //@line 12214
       break;
      }
     }
    } else {
     $$1512$lcssa = $303; //@line 12219
    }
    HEAP8[$$1512$lcssa + -1 >> 0] = ($$5519$ph >> 31 & 2) + 43; //@line 12226
    $318 = $$1512$lcssa + -2 | 0; //@line 12228
    HEAP8[$318 >> 0] = $$1480; //@line 12229
    $$2513 = $318; //@line 12232
    $$pn = $304 - $318 | 0; //@line 12232
   }
   $323 = $$0520 + 1 + $$3477 + $294 + $$pn | 0; //@line 12237
   _pad_676($0, 32, $2, $323, $4); //@line 12238
   _out_670($0, $$0521, $$0520); //@line 12239
   _pad_676($0, 48, $2, $323, $4 ^ 65536); //@line 12241
   if ($296) {
    $$0496$$9 = $$9$ph >>> 0 > $$561 >>> 0 ? $$561 : $$9$ph; //@line 12244
    $326 = $8 + 9 | 0; //@line 12245
    $327 = $326; //@line 12246
    $328 = $8 + 8 | 0; //@line 12247
    $$5493600 = $$0496$$9; //@line 12248
    do {
     $330 = _fmt_u(HEAP32[$$5493600 >> 2] | 0, 0, $326) | 0; //@line 12251
     if (($$5493600 | 0) == ($$0496$$9 | 0)) {
      if (($330 | 0) == ($326 | 0)) {
       HEAP8[$328 >> 0] = 48; //@line 12256
       $$1465 = $328; //@line 12257
      } else {
       $$1465 = $330; //@line 12259
      }
     } else {
      if ($330 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $330 - $9 | 0) | 0; //@line 12266
       $$0464597 = $330; //@line 12267
       while (1) {
        $335 = $$0464597 + -1 | 0; //@line 12269
        if ($335 >>> 0 > $8 >>> 0) {
         $$0464597 = $335; //@line 12272
        } else {
         $$1465 = $335; //@line 12274
         break;
        }
       }
      } else {
       $$1465 = $330; //@line 12279
      }
     }
     _out_670($0, $$1465, $327 - $$1465 | 0); //@line 12284
     $$5493600 = $$5493600 + 4 | 0; //@line 12285
    } while ($$5493600 >>> 0 <= $$561 >>> 0);
    if ($292 | 0) {
     _out_670($0, 5075, 1); //@line 12295
    }
    if ($$5493600 >>> 0 < $$7505 >>> 0 & ($$3477 | 0) > 0) {
     $$4478593 = $$3477; //@line 12301
     $$6494592 = $$5493600; //@line 12301
     while (1) {
      $347 = _fmt_u(HEAP32[$$6494592 >> 2] | 0, 0, $326) | 0; //@line 12304
      if ($347 >>> 0 > $8 >>> 0) {
       _memset($8 | 0, 48, $347 - $9 | 0) | 0; //@line 12309
       $$0463587 = $347; //@line 12310
       while (1) {
        $351 = $$0463587 + -1 | 0; //@line 12312
        if ($351 >>> 0 > $8 >>> 0) {
         $$0463587 = $351; //@line 12315
        } else {
         $$0463$lcssa = $351; //@line 12317
         break;
        }
       }
      } else {
       $$0463$lcssa = $347; //@line 12322
      }
      _out_670($0, $$0463$lcssa, ($$4478593 | 0) < 9 ? $$4478593 : 9); //@line 12326
      $$6494592 = $$6494592 + 4 | 0; //@line 12327
      $356 = $$4478593 + -9 | 0; //@line 12328
      if (!($$6494592 >>> 0 < $$7505 >>> 0 & ($$4478593 | 0) > 9)) {
       $$4478$lcssa = $356; //@line 12335
       break;
      } else {
       $$4478593 = $356; //@line 12333
      }
     }
    } else {
     $$4478$lcssa = $$3477; //@line 12340
    }
    _pad_676($0, 48, $$4478$lcssa + 9 | 0, 9, 0); //@line 12343
   } else {
    $$7505$ = $$lcssa675 ? $$7505 : $$9$ph + 4 | 0; //@line 12346
    if (($$3477 | 0) > -1) {
     $363 = $8 + 9 | 0; //@line 12349
     $364 = ($$pre$phi698Z2D | 0) == 0; //@line 12350
     $365 = $363; //@line 12351
     $366 = 0 - $9 | 0; //@line 12352
     $367 = $8 + 8 | 0; //@line 12353
     $$5605 = $$3477; //@line 12354
     $$7495604 = $$9$ph; //@line 12354
     while (1) {
      $369 = _fmt_u(HEAP32[$$7495604 >> 2] | 0, 0, $363) | 0; //@line 12357
      if (($369 | 0) == ($363 | 0)) {
       HEAP8[$367 >> 0] = 48; //@line 12360
       $$0 = $367; //@line 12361
      } else {
       $$0 = $369; //@line 12363
      }
      do {
       if (($$7495604 | 0) == ($$9$ph | 0)) {
        $375 = $$0 + 1 | 0; //@line 12368
        _out_670($0, $$0, 1); //@line 12369
        if ($364 & ($$5605 | 0) < 1) {
         $$2 = $375; //@line 12373
         break;
        }
        _out_670($0, 5075, 1); //@line 12376
        $$2 = $375; //@line 12377
       } else {
        if ($$0 >>> 0 <= $8 >>> 0) {
         $$2 = $$0; //@line 12381
         break;
        }
        _memset($8 | 0, 48, $$0 + $366 | 0) | 0; //@line 12386
        $$1601 = $$0; //@line 12387
        while (1) {
         $373 = $$1601 + -1 | 0; //@line 12389
         if ($373 >>> 0 > $8 >>> 0) {
          $$1601 = $373; //@line 12392
         } else {
          $$2 = $373; //@line 12394
          break;
         }
        }
       }
      } while (0);
      $378 = $365 - $$2 | 0; //@line 12401
      _out_670($0, $$2, ($$5605 | 0) > ($378 | 0) ? $378 : $$5605); //@line 12404
      $381 = $$5605 - $378 | 0; //@line 12405
      $$7495604 = $$7495604 + 4 | 0; //@line 12406
      if (!($$7495604 >>> 0 < $$7505$ >>> 0 & ($381 | 0) > -1)) {
       $$5$lcssa = $381; //@line 12413
       break;
      } else {
       $$5605 = $381; //@line 12411
      }
     }
    } else {
     $$5$lcssa = $$3477; //@line 12418
    }
    _pad_676($0, 48, $$5$lcssa + 18 | 0, 18, 0); //@line 12421
    _out_670($0, $$2513, $11 - $$2513 | 0); //@line 12425
   }
   _pad_676($0, 32, $2, $323, $4 ^ 8192); //@line 12428
   $$sink560 = $323; //@line 12429
  }
 } while (0);
 STACKTOP = sp; //@line 12434
 return (($$sink560 | 0) < ($2 | 0) ? $2 : $$sink560) | 0; //@line 12434
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$090114$lcssa = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $$3 = 0, $$5 = 0, $$byval_copy = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $110 = 0, $12 = 0, $124 = 0, $125 = 0, $128 = 0, $142 = 0, $146 = 0, $147 = 0, $155 = 0, $158 = 0, $161 = 0, $164 = 0, $171 = 0, $173 = 0, $174 = 0, $177 = 0, $188 = 0, $189 = 0, $19 = 0, $191 = 0, $195 = 0, $196 = 0, $20 = 0, $208 = 0, $211 = 0, $222 = 0, $223 = 0, $226 = 0, $235 = 0, $237 = 0, $240 = 0, $245 = 0, $248 = 0, $255 = 0, $257 = 0, $265 = 0, $268 = 0, $27 = 0, $270 = 0, $278 = 0, $28 = 0, $281 = 0, $283 = 0, $291 = 0, $294 = 0, $296 = 0, $315 = 0, $316 = 0, $317 = 0, $33 = 0, $46 = 0, $50 = 0, $6 = 0, $63 = 0, $67 = 0, $68 = 0, $7 = 0, $71 = 0, $8 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx18 = 0, $AsyncCtx2 = 0, $AsyncCtx22 = 0, $AsyncCtx26 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx46 = 0, $AsyncCtx49 = 0, $AsyncCtx53 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7507
 STACKTOP = STACKTOP + 144 | 0; //@line 7508
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(144); //@line 7508
 $$byval_copy = sp + 116 | 0; //@line 7509
 $6 = sp + 96 | 0; //@line 7510
 $7 = sp + 32 | 0; //@line 7511
 $8 = sp + 16 | 0; //@line 7512
 $9 = sp; //@line 7513
 if (($0 | 0) == 0 | ($1 | 0) == 0) {
  $$5 = -3003; //@line 7518
  STACKTOP = sp; //@line 7519
  return $$5 | 0; //@line 7519
 }
 $12 = _strlen($1) | 0; //@line 7521
 if (($12 | 0) > 255 | ($12 | 0) == 0) {
  $$5 = -3003; //@line 7526
  STACKTOP = sp; //@line 7527
  return $$5 | 0; //@line 7527
 }
 L7 : do {
  if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $5, $6) | 0)) {
   HEAP32[$$byval_copy >> 2] = HEAP32[$6 >> 2]; //@line 7533
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$6 + 4 >> 2]; //@line 7533
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$6 + 8 >> 2]; //@line 7533
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$6 + 12 >> 2]; //@line 7533
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$6 + 16 >> 2]; //@line 7533
   __ZN13SocketAddressC2E10nsapi_addrt($7, $$byval_copy, 0); //@line 7534
   $19 = $2 + 12 | 0; //@line 7535
   $20 = HEAP32[$19 >> 2] | 0; //@line 7536
   do {
    if (!$20) {
     $AsyncCtx53 = _emscripten_alloc_async_context(24, sp) | 0; //@line 7540
     _mbed_assert_internal(3978, 3983, 1677); //@line 7541
     if (___async) {
      HEAP32[$AsyncCtx53 >> 2] = 170; //@line 7544
      HEAP32[$AsyncCtx53 + 4 >> 2] = $19; //@line 7546
      HEAP32[$AsyncCtx53 + 8 >> 2] = $2; //@line 7548
      HEAP32[$AsyncCtx53 + 12 >> 2] = $7; //@line 7550
      HEAP32[$AsyncCtx53 + 16 >> 2] = $7; //@line 7552
      HEAP32[$AsyncCtx53 + 20 >> 2] = $6; //@line 7554
      sp = STACKTOP; //@line 7555
      STACKTOP = sp; //@line 7556
      return 0; //@line 7556
     } else {
      _emscripten_free_async_context($AsyncCtx53 | 0); //@line 7558
      $28 = HEAP32[$19 >> 2] | 0; //@line 7560
      break;
     }
    } else {
     $28 = $20; //@line 7564
    }
   } while (0);
   $27 = HEAP32[$28 >> 2] | 0; //@line 7567
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 7568
   FUNCTION_TABLE_viii[$27 & 0]($2, 0, $7); //@line 7569
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 171; //@line 7572
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 7574
    HEAP32[$AsyncCtx + 8 >> 2] = $6; //@line 7576
    sp = STACKTOP; //@line 7577
    STACKTOP = sp; //@line 7578
    return 0; //@line 7578
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7580
    $$3 = 0; //@line 7581
    break;
   }
  } else {
   if (!(HEAP32[1949] | 0)) {
    $$090114$lcssa = 0; //@line 7588
   } else {
    if (!(HEAP32[1950] | 0)) {
     $$090114$lcssa = 1; //@line 7593
    } else {
     if (!(HEAP32[1951] | 0)) {
      $$090114$lcssa = 2; //@line 7598
     } else {
      if (!(HEAP32[1952] | 0)) {
       $$090114$lcssa = 3; //@line 7603
      } else {
       if (!(HEAP32[1953] | 0)) {
        $$090114$lcssa = 4; //@line 7608
       } else {
        $$3 = -3007; //@line 7610
        break;
       }
      }
     }
    }
   }
   $AsyncCtx38 = _emscripten_alloc_async_context(48, sp) | 0; //@line 7617
   $33 = __ZnwjRKSt9nothrow_t(92, 9717) | 0; //@line 7618
   if (___async) {
    HEAP32[$AsyncCtx38 >> 2] = 172; //@line 7621
    HEAP32[$AsyncCtx38 + 4 >> 2] = $1; //@line 7623
    HEAP32[$AsyncCtx38 + 8 >> 2] = $2; //@line 7625
    HEAP32[$AsyncCtx38 + 12 >> 2] = $6; //@line 7627
    HEAP32[$AsyncCtx38 + 16 >> 2] = $12; //@line 7629
    HEAP32[$AsyncCtx38 + 20 >> 2] = $0; //@line 7631
    HEAP32[$AsyncCtx38 + 24 >> 2] = $$090114$lcssa; //@line 7633
    HEAP32[$AsyncCtx38 + 28 >> 2] = $8; //@line 7635
    HEAP32[$AsyncCtx38 + 32 >> 2] = $9; //@line 7637
    HEAP32[$AsyncCtx38 + 36 >> 2] = $3; //@line 7639
    HEAP32[$AsyncCtx38 + 40 >> 2] = $5; //@line 7641
    HEAP32[$AsyncCtx38 + 44 >> 2] = $4; //@line 7643
    sp = STACKTOP; //@line 7644
    STACKTOP = sp; //@line 7645
    return 0; //@line 7645
   }
   _emscripten_free_async_context($AsyncCtx38 | 0); //@line 7647
   if (!$33) {
    $$3 = -3007; //@line 7650
   } else {
    $46 = $33 + 16 | 0; //@line 7652
    HEAP32[$46 >> 2] = 0; //@line 7653
    HEAP32[$46 + 4 >> 2] = 0; //@line 7653
    HEAP32[$46 + 8 >> 2] = 0; //@line 7653
    HEAP32[$46 + 12 >> 2] = 0; //@line 7653
    HEAP32[$46 + 16 >> 2] = 0; //@line 7653
    HEAP32[$46 + 20 >> 2] = 0; //@line 7653
    HEAP32[$46 + 24 >> 2] = 0; //@line 7653
    HEAP32[$46 + 28 >> 2] = 0; //@line 7653
    $AsyncCtx42 = _emscripten_alloc_async_context(52, sp) | 0; //@line 7657
    $50 = __ZnajRKSt9nothrow_t(($12 | 0) < -1 ? -1 : $12 + 1 | 0, 9717) | 0; //@line 7658
    if (___async) {
     HEAP32[$AsyncCtx42 >> 2] = 173; //@line 7661
     HEAP32[$AsyncCtx42 + 4 >> 2] = $1; //@line 7663
     HEAP32[$AsyncCtx42 + 8 >> 2] = $33; //@line 7665
     HEAP32[$AsyncCtx42 + 12 >> 2] = $46; //@line 7667
     HEAP32[$AsyncCtx42 + 16 >> 2] = $2; //@line 7669
     HEAP32[$AsyncCtx42 + 20 >> 2] = $6; //@line 7671
     HEAP32[$AsyncCtx42 + 24 >> 2] = $0; //@line 7673
     HEAP32[$AsyncCtx42 + 28 >> 2] = $$090114$lcssa; //@line 7675
     HEAP32[$AsyncCtx42 + 32 >> 2] = $8; //@line 7677
     HEAP32[$AsyncCtx42 + 36 >> 2] = $9; //@line 7679
     HEAP32[$AsyncCtx42 + 40 >> 2] = $3; //@line 7681
     HEAP32[$AsyncCtx42 + 44 >> 2] = $5; //@line 7683
     HEAP32[$AsyncCtx42 + 48 >> 2] = $4; //@line 7685
     sp = STACKTOP; //@line 7686
     STACKTOP = sp; //@line 7687
     return 0; //@line 7687
    }
    _emscripten_free_async_context($AsyncCtx42 | 0); //@line 7689
    $63 = $33 + 12 | 0; //@line 7690
    HEAP32[$63 >> 2] = $50; //@line 7691
    if (!$50) {
     __ZdlPv($33); //@line 7694
     $$3 = -3007; //@line 7695
     break;
    }
    _strcpy($50, $1) | 0; //@line 7698
    HEAP32[$33 + 4 >> 2] = -3019; //@line 7700
    if (($46 | 0) != ($2 | 0)) {
     $67 = $33 + 28 | 0; //@line 7703
     $68 = HEAP32[$67 >> 2] | 0; //@line 7704
     do {
      if ($68 | 0) {
       $71 = HEAP32[$68 + 8 >> 2] | 0; //@line 7709
       $AsyncCtx2 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7710
       FUNCTION_TABLE_vi[$71 & 511]($46); //@line 7711
       if (___async) {
        HEAP32[$AsyncCtx2 >> 2] = 174; //@line 7714
        HEAP32[$AsyncCtx2 + 4 >> 2] = $33; //@line 7716
        HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 7718
        HEAP32[$AsyncCtx2 + 12 >> 2] = $46; //@line 7720
        HEAP32[$AsyncCtx2 + 16 >> 2] = $$090114$lcssa; //@line 7722
        HEAP32[$AsyncCtx2 + 20 >> 2] = $63; //@line 7724
        HEAP32[$AsyncCtx2 + 24 >> 2] = $8; //@line 7726
        HEAP32[$AsyncCtx2 + 28 >> 2] = $6; //@line 7728
        HEAP32[$AsyncCtx2 + 32 >> 2] = $9; //@line 7730
        HEAP32[$AsyncCtx2 + 36 >> 2] = $3; //@line 7732
        HEAP32[$AsyncCtx2 + 40 >> 2] = $5; //@line 7734
        HEAP32[$AsyncCtx2 + 44 >> 2] = $4; //@line 7736
        HEAP32[$AsyncCtx2 + 48 >> 2] = $67; //@line 7738
        HEAP32[$AsyncCtx2 + 52 >> 2] = $2; //@line 7740
        sp = STACKTOP; //@line 7741
        STACKTOP = sp; //@line 7742
        return 0; //@line 7742
       } else {
        _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7744
        break;
       }
      }
     } while (0);
     $85 = $2 + 12 | 0; //@line 7749
     $86 = HEAP32[$85 >> 2] | 0; //@line 7750
     do {
      if (!$86) {
       $103 = 0; //@line 7754
      } else {
       $89 = HEAP32[$86 + 4 >> 2] | 0; //@line 7757
       $AsyncCtx6 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7758
       FUNCTION_TABLE_vii[$89 & 7]($46, $2); //@line 7759
       if (___async) {
        HEAP32[$AsyncCtx6 >> 2] = 175; //@line 7762
        HEAP32[$AsyncCtx6 + 4 >> 2] = $33; //@line 7764
        HEAP32[$AsyncCtx6 + 8 >> 2] = $85; //@line 7766
        HEAP32[$AsyncCtx6 + 12 >> 2] = $0; //@line 7768
        HEAP32[$AsyncCtx6 + 16 >> 2] = $46; //@line 7770
        HEAP32[$AsyncCtx6 + 20 >> 2] = $$090114$lcssa; //@line 7772
        HEAP32[$AsyncCtx6 + 24 >> 2] = $63; //@line 7774
        HEAP32[$AsyncCtx6 + 28 >> 2] = $8; //@line 7776
        HEAP32[$AsyncCtx6 + 32 >> 2] = $6; //@line 7778
        HEAP32[$AsyncCtx6 + 36 >> 2] = $9; //@line 7780
        HEAP32[$AsyncCtx6 + 40 >> 2] = $3; //@line 7782
        HEAP32[$AsyncCtx6 + 44 >> 2] = $5; //@line 7784
        HEAP32[$AsyncCtx6 + 48 >> 2] = $4; //@line 7786
        HEAP32[$AsyncCtx6 + 52 >> 2] = $67; //@line 7788
        sp = STACKTOP; //@line 7789
        STACKTOP = sp; //@line 7790
        return 0; //@line 7790
       } else {
        _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7792
        $103 = HEAP32[$85 >> 2] | 0; //@line 7794
        break;
       }
      }
     } while (0);
     HEAP32[$67 >> 2] = $103; //@line 7799
    }
    $104 = $33 + 32 | 0; //@line 7801
    if (($104 | 0) != ($4 | 0)) {
     $106 = $33 + 44 | 0; //@line 7804
     $107 = HEAP32[$106 >> 2] | 0; //@line 7805
     do {
      if ($107 | 0) {
       $110 = HEAP32[$107 + 8 >> 2] | 0; //@line 7810
       $AsyncCtx10 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7811
       FUNCTION_TABLE_vi[$110 & 511]($104); //@line 7812
       if (___async) {
        HEAP32[$AsyncCtx10 >> 2] = 176; //@line 7815
        HEAP32[$AsyncCtx10 + 4 >> 2] = $33; //@line 7817
        HEAP32[$AsyncCtx10 + 8 >> 2] = $0; //@line 7819
        HEAP32[$AsyncCtx10 + 12 >> 2] = $46; //@line 7821
        HEAP32[$AsyncCtx10 + 16 >> 2] = $$090114$lcssa; //@line 7823
        HEAP32[$AsyncCtx10 + 20 >> 2] = $104; //@line 7825
        HEAP32[$AsyncCtx10 + 24 >> 2] = $63; //@line 7827
        HEAP32[$AsyncCtx10 + 28 >> 2] = $8; //@line 7829
        HEAP32[$AsyncCtx10 + 32 >> 2] = $6; //@line 7831
        HEAP32[$AsyncCtx10 + 36 >> 2] = $9; //@line 7833
        HEAP32[$AsyncCtx10 + 40 >> 2] = $3; //@line 7835
        HEAP32[$AsyncCtx10 + 44 >> 2] = $5; //@line 7837
        HEAP32[$AsyncCtx10 + 48 >> 2] = $106; //@line 7839
        HEAP32[$AsyncCtx10 + 52 >> 2] = $4; //@line 7841
        sp = STACKTOP; //@line 7842
        STACKTOP = sp; //@line 7843
        return 0; //@line 7843
       } else {
        _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7845
        break;
       }
      }
     } while (0);
     $124 = $4 + 12 | 0; //@line 7850
     $125 = HEAP32[$124 >> 2] | 0; //@line 7851
     do {
      if (!$125) {
       $142 = 0; //@line 7855
      } else {
       $128 = HEAP32[$125 + 4 >> 2] | 0; //@line 7858
       $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 7859
       FUNCTION_TABLE_vii[$128 & 7]($104, $4); //@line 7860
       if (___async) {
        HEAP32[$AsyncCtx14 >> 2] = 177; //@line 7863
        HEAP32[$AsyncCtx14 + 4 >> 2] = $33; //@line 7865
        HEAP32[$AsyncCtx14 + 8 >> 2] = $0; //@line 7867
        HEAP32[$AsyncCtx14 + 12 >> 2] = $46; //@line 7869
        HEAP32[$AsyncCtx14 + 16 >> 2] = $$090114$lcssa; //@line 7871
        HEAP32[$AsyncCtx14 + 20 >> 2] = $104; //@line 7873
        HEAP32[$AsyncCtx14 + 24 >> 2] = $63; //@line 7875
        HEAP32[$AsyncCtx14 + 28 >> 2] = $8; //@line 7877
        HEAP32[$AsyncCtx14 + 32 >> 2] = $6; //@line 7879
        HEAP32[$AsyncCtx14 + 36 >> 2] = $9; //@line 7881
        HEAP32[$AsyncCtx14 + 40 >> 2] = $3; //@line 7883
        HEAP32[$AsyncCtx14 + 44 >> 2] = $5; //@line 7885
        HEAP32[$AsyncCtx14 + 48 >> 2] = $106; //@line 7887
        HEAP32[$AsyncCtx14 + 52 >> 2] = $124; //@line 7889
        sp = STACKTOP; //@line 7890
        STACKTOP = sp; //@line 7891
        return 0; //@line 7891
       } else {
        _emscripten_free_async_context($AsyncCtx14 | 0); //@line 7893
        $142 = HEAP32[$124 >> 2] | 0; //@line 7895
        break;
       }
      }
     } while (0);
     HEAP32[$106 >> 2] = $142; //@line 7900
    }
    HEAP32[$33 + 8 >> 2] = $0; //@line 7903
    HEAP32[$33 + 48 >> 2] = $3; //@line 7905
    HEAP32[$33 + 52 >> 2] = $5; //@line 7907
    $146 = $33 + 56 | 0; //@line 7908
    HEAP32[$146 >> 2] = 0; //@line 7909
    $147 = $33 + 60 | 0; //@line 7910
    HEAP32[$147 >> 2] = 0; //@line 7911
    HEAP32[$33 + 64 >> 2] = 0; //@line 7913
    HEAP8[$33 + 82 >> 0] = 0; //@line 7915
    HEAP8[$33 + 83 >> 0] = 1; //@line 7917
    HEAP8[$33 + 84 >> 0] = 3; //@line 7919
    HEAP8[$33 + 85 >> 0] = 0; //@line 7921
    HEAP16[$33 + 80 >> 1] = 0; //@line 7923
    HEAP32[$33 + 76 >> 2] = 0; //@line 7925
    $155 = $33 + 72 | 0; //@line 7926
    HEAP32[$155 >> 2] = 15500; //@line 7927
    HEAP8[$33 + 86 >> 0] = 0; //@line 7929
    HEAP32[$33 + 88 >> 2] = 0; //@line 7931
    $158 = HEAP32[187] | 0; //@line 7932
    HEAP32[187] = $158 + 1; //@line 7934
    HEAP32[$33 >> 2] = ($158 | 0) > 32767 ? 1 : $158; //@line 7937
    $161 = HEAP32[1949] | 0; //@line 7938
    if (!$161) {
     $$1 = 0; //@line 7941
     $255 = 0; //@line 7941
    } else {
     $164 = HEAP32[$161 + 56 >> 2] | 0; //@line 7944
     if (!$164) {
      $$1 = 1; //@line 7947
      $255 = 0; //@line 7947
     } else {
      if ((HEAP32[$161 + 8 >> 2] | 0) == ($0 | 0)) {
       HEAP32[$146 >> 2] = $164; //@line 7953
       HEAP32[$147 >> 2] = HEAP32[$161 + 60 >> 2]; //@line 7956
       $$1 = 1; //@line 7957
       $255 = $164; //@line 7957
      } else {
       $$1 = 1; //@line 7959
       $255 = 0; //@line 7959
      }
     }
    }
    $171 = HEAP32[1950] | 0; //@line 7963
    if (!$171) {
     $$1$1 = $$1; //@line 7966
     $268 = $255; //@line 7966
    } else {
     if (!$255) {
      $257 = HEAP32[$171 + 56 >> 2] | 0; //@line 7971
      if (!$257) {
       $315 = 0; //@line 7974
      } else {
       if ((HEAP32[$171 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $257; //@line 7980
        HEAP32[$147 >> 2] = HEAP32[$171 + 60 >> 2]; //@line 7983
        $315 = $257; //@line 7984
       } else {
        $315 = 0; //@line 7986
       }
      }
     } else {
      $315 = $255; //@line 7990
     }
     $$1$1 = $$1 + 1 | 0; //@line 7993
     $268 = $315; //@line 7993
    }
    $265 = HEAP32[1951] | 0; //@line 7995
    if (!$265) {
     $$1$2 = $$1$1; //@line 7998
     $281 = $268; //@line 7998
    } else {
     if (!$268) {
      $270 = HEAP32[$265 + 56 >> 2] | 0; //@line 8003
      if (!$270) {
       $316 = 0; //@line 8006
      } else {
       if ((HEAP32[$265 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $270; //@line 8012
        HEAP32[$147 >> 2] = HEAP32[$265 + 60 >> 2]; //@line 8015
        $316 = $270; //@line 8016
       } else {
        $316 = 0; //@line 8018
       }
      }
     } else {
      $316 = $268; //@line 8022
     }
     $$1$2 = $$1$1 + 1 | 0; //@line 8025
     $281 = $316; //@line 8025
    }
    $278 = HEAP32[1952] | 0; //@line 8027
    if (!$278) {
     $$1$3 = $$1$2; //@line 8030
     $294 = $281; //@line 8030
    } else {
     if (!$281) {
      $283 = HEAP32[$278 + 56 >> 2] | 0; //@line 8035
      if (!$283) {
       $317 = 0; //@line 8038
      } else {
       if ((HEAP32[$278 + 8 >> 2] | 0) == ($0 | 0)) {
        HEAP32[$146 >> 2] = $283; //@line 8044
        HEAP32[$147 >> 2] = HEAP32[$278 + 60 >> 2]; //@line 8047
        $317 = $283; //@line 8048
       } else {
        $317 = 0; //@line 8050
       }
      }
     } else {
      $317 = $281; //@line 8054
     }
     $$1$3 = $$1$2 + 1 | 0; //@line 8057
     $294 = $317; //@line 8057
    }
    $291 = HEAP32[1953] | 0; //@line 8059
    if (!$291) {
     $$1$4 = $$1$3; //@line 8062
    } else {
     do {
      if (!$294) {
       $296 = HEAP32[$291 + 56 >> 2] | 0; //@line 8068
       if ($296 | 0) {
        if ((HEAP32[$291 + 8 >> 2] | 0) != ($0 | 0)) {
         break;
        }
        HEAP32[$146 >> 2] = $296; //@line 8077
        HEAP32[$147 >> 2] = HEAP32[$291 + 60 >> 2]; //@line 8080
       }
      }
     } while (0);
     $$1$4 = $$1$3 + 1 | 0; //@line 8085
    }
    HEAP32[7796 + ($$090114$lcssa << 2) >> 2] = $33; //@line 8088
    HEAP32[$155 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 8091
    do {
     if (!(HEAP8[8676] | 0)) {
      $173 = $33 + 44 | 0; //@line 8096
      $174 = HEAP32[$173 >> 2] | 0; //@line 8097
      do {
       if (!$174) {
        $189 = 0; //@line 8101
       } else {
        $177 = HEAP32[$174 + 4 >> 2] | 0; //@line 8104
        $AsyncCtx18 = _emscripten_alloc_async_context(44, sp) | 0; //@line 8105
        FUNCTION_TABLE_vii[$177 & 7]($8, $104); //@line 8106
        if (___async) {
         HEAP32[$AsyncCtx18 >> 2] = 178; //@line 8109
         HEAP32[$AsyncCtx18 + 4 >> 2] = $33; //@line 8111
         HEAP32[$AsyncCtx18 + 8 >> 2] = $46; //@line 8113
         HEAP32[$AsyncCtx18 + 12 >> 2] = $104; //@line 8115
         HEAP32[$AsyncCtx18 + 16 >> 2] = $173; //@line 8117
         HEAP32[$AsyncCtx18 + 20 >> 2] = $63; //@line 8119
         HEAP32[$AsyncCtx18 + 24 >> 2] = $8; //@line 8121
         HEAP32[$AsyncCtx18 + 28 >> 2] = $6; //@line 8123
         HEAP32[$AsyncCtx18 + 32 >> 2] = $9; //@line 8125
         HEAP32[$AsyncCtx18 + 36 >> 2] = $33; //@line 8127
         HEAP32[$AsyncCtx18 + 40 >> 2] = $173; //@line 8129
         sp = STACKTOP; //@line 8130
         STACKTOP = sp; //@line 8131
         return 0; //@line 8131
        } else {
         _emscripten_free_async_context($AsyncCtx18 | 0); //@line 8133
         $189 = HEAP32[$173 >> 2] | 0; //@line 8135
         break;
        }
       }
      } while (0);
      $188 = $8 + 12 | 0; //@line 8140
      HEAP32[$188 >> 2] = $189; //@line 8141
      $191 = $9 + 4 | 0; //@line 8143
      HEAP32[$191 >> 2] = 0; //@line 8145
      HEAP32[$191 + 4 >> 2] = 0; //@line 8148
      HEAP32[$9 >> 2] = 3; //@line 8149
      $195 = $9 + 12 | 0; //@line 8150
      HEAP32[$195 >> 2] = 752; //@line 8151
      $AsyncCtx49 = _emscripten_alloc_async_context(48, sp) | 0; //@line 8152
      $196 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($8, 100, $9) | 0; //@line 8153
      if (___async) {
       HEAP32[$AsyncCtx49 >> 2] = 179; //@line 8156
       HEAP32[$AsyncCtx49 + 4 >> 2] = $33; //@line 8158
       HEAP32[$AsyncCtx49 + 8 >> 2] = $46; //@line 8160
       HEAP32[$AsyncCtx49 + 12 >> 2] = $6; //@line 8162
       HEAP32[$AsyncCtx49 + 16 >> 2] = $104; //@line 8164
       HEAP32[$AsyncCtx49 + 20 >> 2] = $173; //@line 8166
       HEAP32[$AsyncCtx49 + 24 >> 2] = $63; //@line 8168
       HEAP32[$AsyncCtx49 + 28 >> 2] = $33; //@line 8170
       HEAP32[$AsyncCtx49 + 32 >> 2] = $8; //@line 8172
       HEAP32[$AsyncCtx49 + 36 >> 2] = $188; //@line 8174
       HEAP32[$AsyncCtx49 + 40 >> 2] = $9; //@line 8176
       HEAP32[$AsyncCtx49 + 44 >> 2] = $195; //@line 8178
       sp = STACKTOP; //@line 8179
       STACKTOP = sp; //@line 8180
       return 0; //@line 8180
      }
      _emscripten_free_async_context($AsyncCtx49 | 0); //@line 8182
      $208 = HEAP32[$195 >> 2] | 0; //@line 8183
      do {
       if ($208 | 0) {
        $211 = HEAP32[$208 + 8 >> 2] | 0; //@line 8188
        $AsyncCtx22 = _emscripten_alloc_async_context(44, sp) | 0; //@line 8189
        FUNCTION_TABLE_vi[$211 & 511]($9); //@line 8190
        if (___async) {
         HEAP32[$AsyncCtx22 >> 2] = 180; //@line 8193
         HEAP32[$AsyncCtx22 + 4 >> 2] = $33; //@line 8195
         HEAP32[$AsyncCtx22 + 8 >> 2] = $46; //@line 8197
         HEAP32[$AsyncCtx22 + 12 >> 2] = $104; //@line 8199
         HEAP32[$AsyncCtx22 + 16 >> 2] = $173; //@line 8201
         HEAP32[$AsyncCtx22 + 20 >> 2] = $63; //@line 8203
         HEAP32[$AsyncCtx22 + 24 >> 2] = $8; //@line 8205
         HEAP32[$AsyncCtx22 + 28 >> 2] = $196; //@line 8207
         HEAP32[$AsyncCtx22 + 32 >> 2] = $188; //@line 8209
         HEAP32[$AsyncCtx22 + 36 >> 2] = $6; //@line 8211
         HEAP32[$AsyncCtx22 + 40 >> 2] = $33; //@line 8213
         sp = STACKTOP; //@line 8214
         STACKTOP = sp; //@line 8215
         return 0; //@line 8215
        } else {
         _emscripten_free_async_context($AsyncCtx22 | 0); //@line 8217
         break;
        }
       }
      } while (0);
      $222 = ($196 | 0) == 0; //@line 8222
      $223 = HEAP32[$188 >> 2] | 0; //@line 8223
      do {
       if ($223 | 0) {
        $226 = HEAP32[$223 + 8 >> 2] | 0; //@line 8228
        $AsyncCtx26 = _emscripten_alloc_async_context(36, sp) | 0; //@line 8229
        FUNCTION_TABLE_vi[$226 & 511]($8); //@line 8230
        if (___async) {
         HEAP32[$AsyncCtx26 >> 2] = 181; //@line 8233
         HEAP32[$AsyncCtx26 + 4 >> 2] = $33; //@line 8235
         HEAP32[$AsyncCtx26 + 8 >> 2] = $46; //@line 8237
         HEAP32[$AsyncCtx26 + 12 >> 2] = $104; //@line 8239
         HEAP32[$AsyncCtx26 + 16 >> 2] = $173; //@line 8241
         HEAP32[$AsyncCtx26 + 20 >> 2] = $63; //@line 8243
         HEAP8[$AsyncCtx26 + 24 >> 0] = $222 & 1; //@line 8246
         HEAP32[$AsyncCtx26 + 28 >> 2] = $6; //@line 8248
         HEAP32[$AsyncCtx26 + 32 >> 2] = $33; //@line 8250
         sp = STACKTOP; //@line 8251
         STACKTOP = sp; //@line 8252
         return 0; //@line 8252
        } else {
         _emscripten_free_async_context($AsyncCtx26 | 0); //@line 8254
         break;
        }
       }
      } while (0);
      if ($222) {
       HEAP8[8676] = 1; //@line 8260
       break;
      }
      $235 = HEAP32[$63 >> 2] | 0; //@line 8263
      if ($235 | 0) {
       __ZdlPv($235); //@line 8266
      }
      $237 = HEAP32[$173 >> 2] | 0; //@line 8268
      do {
       if ($237 | 0) {
        $240 = HEAP32[$237 + 8 >> 2] | 0; //@line 8273
        $AsyncCtx30 = _emscripten_alloc_async_context(16, sp) | 0; //@line 8274
        FUNCTION_TABLE_vi[$240 & 511]($104); //@line 8275
        if (___async) {
         HEAP32[$AsyncCtx30 >> 2] = 182; //@line 8278
         HEAP32[$AsyncCtx30 + 4 >> 2] = $33; //@line 8280
         HEAP32[$AsyncCtx30 + 8 >> 2] = $46; //@line 8282
         HEAP32[$AsyncCtx30 + 12 >> 2] = $6; //@line 8284
         sp = STACKTOP; //@line 8285
         STACKTOP = sp; //@line 8286
         return 0; //@line 8286
        } else {
         _emscripten_free_async_context($AsyncCtx30 | 0); //@line 8288
         break;
        }
       }
      } while (0);
      $245 = HEAP32[$33 + 28 >> 2] | 0; //@line 8294
      do {
       if ($245 | 0) {
        $248 = HEAP32[$245 + 8 >> 2] | 0; //@line 8299
        $AsyncCtx34 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8300
        FUNCTION_TABLE_vi[$248 & 511]($46); //@line 8301
        if (___async) {
         HEAP32[$AsyncCtx34 >> 2] = 183; //@line 8304
         HEAP32[$AsyncCtx34 + 4 >> 2] = $33; //@line 8306
         HEAP32[$AsyncCtx34 + 8 >> 2] = $6; //@line 8308
         sp = STACKTOP; //@line 8309
         STACKTOP = sp; //@line 8310
         return 0; //@line 8310
        } else {
         _emscripten_free_async_context($AsyncCtx34 | 0); //@line 8312
         break;
        }
       }
      } while (0);
      __ZdlPv($33); //@line 8317
      $$3 = -3007; //@line 8318
      break L7;
     }
    } while (0);
    $AsyncCtx46 = _emscripten_alloc_async_context(12, sp) | 0; //@line 8322
    __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 8323
    if (___async) {
     HEAP32[$AsyncCtx46 >> 2] = 184; //@line 8326
     HEAP32[$AsyncCtx46 + 4 >> 2] = $33; //@line 8328
     HEAP32[$AsyncCtx46 + 8 >> 2] = $6; //@line 8330
     sp = STACKTOP; //@line 8331
     STACKTOP = sp; //@line 8332
     return 0; //@line 8332
    } else {
     _emscripten_free_async_context($AsyncCtx46 | 0); //@line 8334
     $$3 = HEAP32[$33 >> 2] | 0; //@line 8336
     break;
    }
   }
  }
 } while (0);
 $$5 = $$3; //@line 8342
 STACKTOP = sp; //@line 8343
 return $$5 | 0; //@line 8343
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_80($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $107 = 0, $108 = 0, $116 = 0, $119 = 0, $12 = 0, $122 = 0, $125 = 0, $132 = 0, $134 = 0, $135 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $151 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $173 = 0, $175 = 0, $18 = 0, $183 = 0, $186 = 0, $188 = 0, $196 = 0, $199 = 0, $2 = 0, $20 = 0, $201 = 0, $209 = 0, $212 = 0, $214 = 0, $22 = 0, $227 = 0, $228 = 0, $229 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 4051
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4053
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4055
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4057
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4059
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4061
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4063
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4065
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4067
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4069
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4071
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 4073
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 4075
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4077
 $26 = $4 + 12 | 0; //@line 4078
 HEAP32[$26 >> 2] = $AsyncRetVal; //@line 4079
 if (!$AsyncRetVal) {
  __ZdlPv($4); //@line 4082
  HEAP32[___async_retval >> 2] = -3007; //@line 4084
  return;
 }
 _strcpy($AsyncRetVal, $2) | 0; //@line 4087
 HEAP32[$4 + 4 >> 2] = -3019; //@line 4089
 do {
  if (($6 | 0) != ($8 | 0)) {
   $30 = $4 + 28 | 0; //@line 4093
   $31 = HEAP32[$30 >> 2] | 0; //@line 4094
   if ($31 | 0) {
    $34 = HEAP32[$31 + 8 >> 2] | 0; //@line 4098
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 4099
    FUNCTION_TABLE_vi[$34 & 511]($6); //@line 4100
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 174; //@line 4103
     $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 4104
     HEAP32[$35 >> 2] = $4; //@line 4105
     $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 4106
     HEAP32[$36 >> 2] = $12; //@line 4107
     $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 4108
     HEAP32[$37 >> 2] = $6; //@line 4109
     $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 4110
     HEAP32[$38 >> 2] = $14; //@line 4111
     $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 4112
     HEAP32[$39 >> 2] = $26; //@line 4113
     $40 = $ReallocAsyncCtx2 + 24 | 0; //@line 4114
     HEAP32[$40 >> 2] = $16; //@line 4115
     $41 = $ReallocAsyncCtx2 + 28 | 0; //@line 4116
     HEAP32[$41 >> 2] = $10; //@line 4117
     $42 = $ReallocAsyncCtx2 + 32 | 0; //@line 4118
     HEAP32[$42 >> 2] = $18; //@line 4119
     $43 = $ReallocAsyncCtx2 + 36 | 0; //@line 4120
     HEAP32[$43 >> 2] = $20; //@line 4121
     $44 = $ReallocAsyncCtx2 + 40 | 0; //@line 4122
     HEAP32[$44 >> 2] = $22; //@line 4123
     $45 = $ReallocAsyncCtx2 + 44 | 0; //@line 4124
     HEAP32[$45 >> 2] = $24; //@line 4125
     $46 = $ReallocAsyncCtx2 + 48 | 0; //@line 4126
     HEAP32[$46 >> 2] = $30; //@line 4127
     $47 = $ReallocAsyncCtx2 + 52 | 0; //@line 4128
     HEAP32[$47 >> 2] = $8; //@line 4129
     sp = STACKTOP; //@line 4130
     return;
    }
    ___async_unwind = 0; //@line 4133
    HEAP32[$ReallocAsyncCtx2 >> 2] = 174; //@line 4134
    $35 = $ReallocAsyncCtx2 + 4 | 0; //@line 4135
    HEAP32[$35 >> 2] = $4; //@line 4136
    $36 = $ReallocAsyncCtx2 + 8 | 0; //@line 4137
    HEAP32[$36 >> 2] = $12; //@line 4138
    $37 = $ReallocAsyncCtx2 + 12 | 0; //@line 4139
    HEAP32[$37 >> 2] = $6; //@line 4140
    $38 = $ReallocAsyncCtx2 + 16 | 0; //@line 4141
    HEAP32[$38 >> 2] = $14; //@line 4142
    $39 = $ReallocAsyncCtx2 + 20 | 0; //@line 4143
    HEAP32[$39 >> 2] = $26; //@line 4144
    $40 = $ReallocAsyncCtx2 + 24 | 0; //@line 4145
    HEAP32[$40 >> 2] = $16; //@line 4146
    $41 = $ReallocAsyncCtx2 + 28 | 0; //@line 4147
    HEAP32[$41 >> 2] = $10; //@line 4148
    $42 = $ReallocAsyncCtx2 + 32 | 0; //@line 4149
    HEAP32[$42 >> 2] = $18; //@line 4150
    $43 = $ReallocAsyncCtx2 + 36 | 0; //@line 4151
    HEAP32[$43 >> 2] = $20; //@line 4152
    $44 = $ReallocAsyncCtx2 + 40 | 0; //@line 4153
    HEAP32[$44 >> 2] = $22; //@line 4154
    $45 = $ReallocAsyncCtx2 + 44 | 0; //@line 4155
    HEAP32[$45 >> 2] = $24; //@line 4156
    $46 = $ReallocAsyncCtx2 + 48 | 0; //@line 4157
    HEAP32[$46 >> 2] = $30; //@line 4158
    $47 = $ReallocAsyncCtx2 + 52 | 0; //@line 4159
    HEAP32[$47 >> 2] = $8; //@line 4160
    sp = STACKTOP; //@line 4161
    return;
   }
   $48 = $8 + 12 | 0; //@line 4164
   $49 = HEAP32[$48 >> 2] | 0; //@line 4165
   if (!$49) {
    HEAP32[$30 >> 2] = 0; //@line 4168
    break;
   }
   $52 = HEAP32[$49 + 4 >> 2] | 0; //@line 4172
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 4173
   FUNCTION_TABLE_vii[$52 & 7]($6, $8); //@line 4174
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 4177
    $53 = $ReallocAsyncCtx3 + 4 | 0; //@line 4178
    HEAP32[$53 >> 2] = $4; //@line 4179
    $54 = $ReallocAsyncCtx3 + 8 | 0; //@line 4180
    HEAP32[$54 >> 2] = $48; //@line 4181
    $55 = $ReallocAsyncCtx3 + 12 | 0; //@line 4182
    HEAP32[$55 >> 2] = $12; //@line 4183
    $56 = $ReallocAsyncCtx3 + 16 | 0; //@line 4184
    HEAP32[$56 >> 2] = $6; //@line 4185
    $57 = $ReallocAsyncCtx3 + 20 | 0; //@line 4186
    HEAP32[$57 >> 2] = $14; //@line 4187
    $58 = $ReallocAsyncCtx3 + 24 | 0; //@line 4188
    HEAP32[$58 >> 2] = $26; //@line 4189
    $59 = $ReallocAsyncCtx3 + 28 | 0; //@line 4190
    HEAP32[$59 >> 2] = $16; //@line 4191
    $60 = $ReallocAsyncCtx3 + 32 | 0; //@line 4192
    HEAP32[$60 >> 2] = $10; //@line 4193
    $61 = $ReallocAsyncCtx3 + 36 | 0; //@line 4194
    HEAP32[$61 >> 2] = $18; //@line 4195
    $62 = $ReallocAsyncCtx3 + 40 | 0; //@line 4196
    HEAP32[$62 >> 2] = $20; //@line 4197
    $63 = $ReallocAsyncCtx3 + 44 | 0; //@line 4198
    HEAP32[$63 >> 2] = $22; //@line 4199
    $64 = $ReallocAsyncCtx3 + 48 | 0; //@line 4200
    HEAP32[$64 >> 2] = $24; //@line 4201
    $65 = $ReallocAsyncCtx3 + 52 | 0; //@line 4202
    HEAP32[$65 >> 2] = $30; //@line 4203
    sp = STACKTOP; //@line 4204
    return;
   }
   ___async_unwind = 0; //@line 4207
   HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 4208
   $53 = $ReallocAsyncCtx3 + 4 | 0; //@line 4209
   HEAP32[$53 >> 2] = $4; //@line 4210
   $54 = $ReallocAsyncCtx3 + 8 | 0; //@line 4211
   HEAP32[$54 >> 2] = $48; //@line 4212
   $55 = $ReallocAsyncCtx3 + 12 | 0; //@line 4213
   HEAP32[$55 >> 2] = $12; //@line 4214
   $56 = $ReallocAsyncCtx3 + 16 | 0; //@line 4215
   HEAP32[$56 >> 2] = $6; //@line 4216
   $57 = $ReallocAsyncCtx3 + 20 | 0; //@line 4217
   HEAP32[$57 >> 2] = $14; //@line 4218
   $58 = $ReallocAsyncCtx3 + 24 | 0; //@line 4219
   HEAP32[$58 >> 2] = $26; //@line 4220
   $59 = $ReallocAsyncCtx3 + 28 | 0; //@line 4221
   HEAP32[$59 >> 2] = $16; //@line 4222
   $60 = $ReallocAsyncCtx3 + 32 | 0; //@line 4223
   HEAP32[$60 >> 2] = $10; //@line 4224
   $61 = $ReallocAsyncCtx3 + 36 | 0; //@line 4225
   HEAP32[$61 >> 2] = $18; //@line 4226
   $62 = $ReallocAsyncCtx3 + 40 | 0; //@line 4227
   HEAP32[$62 >> 2] = $20; //@line 4228
   $63 = $ReallocAsyncCtx3 + 44 | 0; //@line 4229
   HEAP32[$63 >> 2] = $22; //@line 4230
   $64 = $ReallocAsyncCtx3 + 48 | 0; //@line 4231
   HEAP32[$64 >> 2] = $24; //@line 4232
   $65 = $ReallocAsyncCtx3 + 52 | 0; //@line 4233
   HEAP32[$65 >> 2] = $30; //@line 4234
   sp = STACKTOP; //@line 4235
   return;
  }
 } while (0);
 $66 = $4 + 32 | 0; //@line 4239
 do {
  if (($66 | 0) != ($24 | 0)) {
   $68 = $4 + 44 | 0; //@line 4243
   $69 = HEAP32[$68 >> 2] | 0; //@line 4244
   if ($69 | 0) {
    $72 = HEAP32[$69 + 8 >> 2] | 0; //@line 4248
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 4249
    FUNCTION_TABLE_vi[$72 & 511]($66); //@line 4250
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 4253
     $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 4254
     HEAP32[$73 >> 2] = $4; //@line 4255
     $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 4256
     HEAP32[$74 >> 2] = $12; //@line 4257
     $75 = $ReallocAsyncCtx4 + 12 | 0; //@line 4258
     HEAP32[$75 >> 2] = $6; //@line 4259
     $76 = $ReallocAsyncCtx4 + 16 | 0; //@line 4260
     HEAP32[$76 >> 2] = $14; //@line 4261
     $77 = $ReallocAsyncCtx4 + 20 | 0; //@line 4262
     HEAP32[$77 >> 2] = $66; //@line 4263
     $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 4264
     HEAP32[$78 >> 2] = $26; //@line 4265
     $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 4266
     HEAP32[$79 >> 2] = $16; //@line 4267
     $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 4268
     HEAP32[$80 >> 2] = $10; //@line 4269
     $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 4270
     HEAP32[$81 >> 2] = $18; //@line 4271
     $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 4272
     HEAP32[$82 >> 2] = $20; //@line 4273
     $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 4274
     HEAP32[$83 >> 2] = $22; //@line 4275
     $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 4276
     HEAP32[$84 >> 2] = $68; //@line 4277
     $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 4278
     HEAP32[$85 >> 2] = $24; //@line 4279
     sp = STACKTOP; //@line 4280
     return;
    }
    ___async_unwind = 0; //@line 4283
    HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 4284
    $73 = $ReallocAsyncCtx4 + 4 | 0; //@line 4285
    HEAP32[$73 >> 2] = $4; //@line 4286
    $74 = $ReallocAsyncCtx4 + 8 | 0; //@line 4287
    HEAP32[$74 >> 2] = $12; //@line 4288
    $75 = $ReallocAsyncCtx4 + 12 | 0; //@line 4289
    HEAP32[$75 >> 2] = $6; //@line 4290
    $76 = $ReallocAsyncCtx4 + 16 | 0; //@line 4291
    HEAP32[$76 >> 2] = $14; //@line 4292
    $77 = $ReallocAsyncCtx4 + 20 | 0; //@line 4293
    HEAP32[$77 >> 2] = $66; //@line 4294
    $78 = $ReallocAsyncCtx4 + 24 | 0; //@line 4295
    HEAP32[$78 >> 2] = $26; //@line 4296
    $79 = $ReallocAsyncCtx4 + 28 | 0; //@line 4297
    HEAP32[$79 >> 2] = $16; //@line 4298
    $80 = $ReallocAsyncCtx4 + 32 | 0; //@line 4299
    HEAP32[$80 >> 2] = $10; //@line 4300
    $81 = $ReallocAsyncCtx4 + 36 | 0; //@line 4301
    HEAP32[$81 >> 2] = $18; //@line 4302
    $82 = $ReallocAsyncCtx4 + 40 | 0; //@line 4303
    HEAP32[$82 >> 2] = $20; //@line 4304
    $83 = $ReallocAsyncCtx4 + 44 | 0; //@line 4305
    HEAP32[$83 >> 2] = $22; //@line 4306
    $84 = $ReallocAsyncCtx4 + 48 | 0; //@line 4307
    HEAP32[$84 >> 2] = $68; //@line 4308
    $85 = $ReallocAsyncCtx4 + 52 | 0; //@line 4309
    HEAP32[$85 >> 2] = $24; //@line 4310
    sp = STACKTOP; //@line 4311
    return;
   }
   $86 = $24 + 12 | 0; //@line 4314
   $87 = HEAP32[$86 >> 2] | 0; //@line 4315
   if (!$87) {
    HEAP32[$68 >> 2] = 0; //@line 4318
    break;
   }
   $90 = HEAP32[$87 + 4 >> 2] | 0; //@line 4322
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 4323
   FUNCTION_TABLE_vii[$90 & 7]($66, $24); //@line 4324
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 4327
    $91 = $ReallocAsyncCtx5 + 4 | 0; //@line 4328
    HEAP32[$91 >> 2] = $4; //@line 4329
    $92 = $ReallocAsyncCtx5 + 8 | 0; //@line 4330
    HEAP32[$92 >> 2] = $12; //@line 4331
    $93 = $ReallocAsyncCtx5 + 12 | 0; //@line 4332
    HEAP32[$93 >> 2] = $6; //@line 4333
    $94 = $ReallocAsyncCtx5 + 16 | 0; //@line 4334
    HEAP32[$94 >> 2] = $14; //@line 4335
    $95 = $ReallocAsyncCtx5 + 20 | 0; //@line 4336
    HEAP32[$95 >> 2] = $66; //@line 4337
    $96 = $ReallocAsyncCtx5 + 24 | 0; //@line 4338
    HEAP32[$96 >> 2] = $26; //@line 4339
    $97 = $ReallocAsyncCtx5 + 28 | 0; //@line 4340
    HEAP32[$97 >> 2] = $16; //@line 4341
    $98 = $ReallocAsyncCtx5 + 32 | 0; //@line 4342
    HEAP32[$98 >> 2] = $10; //@line 4343
    $99 = $ReallocAsyncCtx5 + 36 | 0; //@line 4344
    HEAP32[$99 >> 2] = $18; //@line 4345
    $100 = $ReallocAsyncCtx5 + 40 | 0; //@line 4346
    HEAP32[$100 >> 2] = $20; //@line 4347
    $101 = $ReallocAsyncCtx5 + 44 | 0; //@line 4348
    HEAP32[$101 >> 2] = $22; //@line 4349
    $102 = $ReallocAsyncCtx5 + 48 | 0; //@line 4350
    HEAP32[$102 >> 2] = $68; //@line 4351
    $103 = $ReallocAsyncCtx5 + 52 | 0; //@line 4352
    HEAP32[$103 >> 2] = $86; //@line 4353
    sp = STACKTOP; //@line 4354
    return;
   }
   ___async_unwind = 0; //@line 4357
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 4358
   $91 = $ReallocAsyncCtx5 + 4 | 0; //@line 4359
   HEAP32[$91 >> 2] = $4; //@line 4360
   $92 = $ReallocAsyncCtx5 + 8 | 0; //@line 4361
   HEAP32[$92 >> 2] = $12; //@line 4362
   $93 = $ReallocAsyncCtx5 + 12 | 0; //@line 4363
   HEAP32[$93 >> 2] = $6; //@line 4364
   $94 = $ReallocAsyncCtx5 + 16 | 0; //@line 4365
   HEAP32[$94 >> 2] = $14; //@line 4366
   $95 = $ReallocAsyncCtx5 + 20 | 0; //@line 4367
   HEAP32[$95 >> 2] = $66; //@line 4368
   $96 = $ReallocAsyncCtx5 + 24 | 0; //@line 4369
   HEAP32[$96 >> 2] = $26; //@line 4370
   $97 = $ReallocAsyncCtx5 + 28 | 0; //@line 4371
   HEAP32[$97 >> 2] = $16; //@line 4372
   $98 = $ReallocAsyncCtx5 + 32 | 0; //@line 4373
   HEAP32[$98 >> 2] = $10; //@line 4374
   $99 = $ReallocAsyncCtx5 + 36 | 0; //@line 4375
   HEAP32[$99 >> 2] = $18; //@line 4376
   $100 = $ReallocAsyncCtx5 + 40 | 0; //@line 4377
   HEAP32[$100 >> 2] = $20; //@line 4378
   $101 = $ReallocAsyncCtx5 + 44 | 0; //@line 4379
   HEAP32[$101 >> 2] = $22; //@line 4380
   $102 = $ReallocAsyncCtx5 + 48 | 0; //@line 4381
   HEAP32[$102 >> 2] = $68; //@line 4382
   $103 = $ReallocAsyncCtx5 + 52 | 0; //@line 4383
   HEAP32[$103 >> 2] = $86; //@line 4384
   sp = STACKTOP; //@line 4385
   return;
  }
 } while (0);
 HEAP32[$4 + 8 >> 2] = $12; //@line 4390
 HEAP32[$4 + 48 >> 2] = $20; //@line 4392
 HEAP32[$4 + 52 >> 2] = $22; //@line 4394
 $107 = $4 + 56 | 0; //@line 4395
 HEAP32[$107 >> 2] = 0; //@line 4396
 $108 = $4 + 60 | 0; //@line 4397
 HEAP32[$108 >> 2] = 0; //@line 4398
 HEAP32[$4 + 64 >> 2] = 0; //@line 4400
 HEAP8[$4 + 82 >> 0] = 0; //@line 4402
 HEAP8[$4 + 83 >> 0] = 1; //@line 4404
 HEAP8[$4 + 84 >> 0] = 3; //@line 4406
 HEAP8[$4 + 85 >> 0] = 0; //@line 4408
 HEAP16[$4 + 80 >> 1] = 0; //@line 4410
 HEAP32[$4 + 76 >> 2] = 0; //@line 4412
 $116 = $4 + 72 | 0; //@line 4413
 HEAP32[$116 >> 2] = 15500; //@line 4414
 HEAP8[$4 + 86 >> 0] = 0; //@line 4416
 HEAP32[$4 + 88 >> 2] = 0; //@line 4418
 $119 = HEAP32[187] | 0; //@line 4419
 HEAP32[187] = $119 + 1; //@line 4421
 HEAP32[$4 >> 2] = ($119 | 0) > 32767 ? 1 : $119; //@line 4424
 $122 = HEAP32[1949] | 0; //@line 4425
 if (!$122) {
  $$1 = 0; //@line 4428
  $173 = 0; //@line 4428
 } else {
  $125 = HEAP32[$122 + 56 >> 2] | 0; //@line 4431
  if (!$125) {
   $$1 = 1; //@line 4434
   $173 = 0; //@line 4434
  } else {
   if ((HEAP32[$122 + 8 >> 2] | 0) == ($12 | 0)) {
    HEAP32[$107 >> 2] = $125; //@line 4440
    HEAP32[$108 >> 2] = HEAP32[$122 + 60 >> 2]; //@line 4443
    $$1 = 1; //@line 4444
    $173 = $125; //@line 4444
   } else {
    $$1 = 1; //@line 4446
    $173 = 0; //@line 4446
   }
  }
 }
 $132 = HEAP32[1950] | 0; //@line 4450
 if (!$132) {
  $$1$1 = $$1; //@line 4453
  $186 = $173; //@line 4453
 } else {
  if (!$173) {
   $175 = HEAP32[$132 + 56 >> 2] | 0; //@line 4458
   if (!$175) {
    $227 = 0; //@line 4461
   } else {
    if ((HEAP32[$132 + 8 >> 2] | 0) == ($12 | 0)) {
     HEAP32[$107 >> 2] = $175; //@line 4467
     HEAP32[$108 >> 2] = HEAP32[$132 + 60 >> 2]; //@line 4470
     $227 = $175; //@line 4471
    } else {
     $227 = 0; //@line 4473
    }
   }
  } else {
   $227 = $173; //@line 4477
  }
  $$1$1 = $$1 + 1 | 0; //@line 4480
  $186 = $227; //@line 4480
 }
 $183 = HEAP32[1951] | 0; //@line 4482
 if (!$183) {
  $$1$2 = $$1$1; //@line 4485
  $199 = $186; //@line 4485
 } else {
  if (!$186) {
   $188 = HEAP32[$183 + 56 >> 2] | 0; //@line 4490
   if (!$188) {
    $228 = 0; //@line 4493
   } else {
    if ((HEAP32[$183 + 8 >> 2] | 0) == ($12 | 0)) {
     HEAP32[$107 >> 2] = $188; //@line 4499
     HEAP32[$108 >> 2] = HEAP32[$183 + 60 >> 2]; //@line 4502
     $228 = $188; //@line 4503
    } else {
     $228 = 0; //@line 4505
    }
   }
  } else {
   $228 = $186; //@line 4509
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 4512
  $199 = $228; //@line 4512
 }
 $196 = HEAP32[1952] | 0; //@line 4514
 if (!$196) {
  $$1$3 = $$1$2; //@line 4517
  $212 = $199; //@line 4517
 } else {
  if (!$199) {
   $201 = HEAP32[$196 + 56 >> 2] | 0; //@line 4522
   if (!$201) {
    $229 = 0; //@line 4525
   } else {
    if ((HEAP32[$196 + 8 >> 2] | 0) == ($12 | 0)) {
     HEAP32[$107 >> 2] = $201; //@line 4531
     HEAP32[$108 >> 2] = HEAP32[$196 + 60 >> 2]; //@line 4534
     $229 = $201; //@line 4535
    } else {
     $229 = 0; //@line 4537
    }
   }
  } else {
   $229 = $199; //@line 4541
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 4544
  $212 = $229; //@line 4544
 }
 $209 = HEAP32[1953] | 0; //@line 4546
 if (!$209) {
  $$1$4 = $$1$3; //@line 4549
 } else {
  if (!$212) {
   $214 = HEAP32[$209 + 56 >> 2] | 0; //@line 4554
   if ($214 | 0) {
    if ((HEAP32[$209 + 8 >> 2] | 0) == ($12 | 0)) {
     HEAP32[$107 >> 2] = $214; //@line 4561
     HEAP32[$108 >> 2] = HEAP32[$209 + 60 >> 2]; //@line 4564
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 4569
 }
 HEAP32[7796 + ($14 << 2) >> 2] = $4; //@line 4572
 HEAP32[$116 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 4575
 if (HEAP8[8676] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 4579
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 4580
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 4583
   $169 = $ReallocAsyncCtx13 + 4 | 0; //@line 4584
   HEAP32[$169 >> 2] = $4; //@line 4585
   $170 = $ReallocAsyncCtx13 + 8 | 0; //@line 4586
   HEAP32[$170 >> 2] = $10; //@line 4587
   sp = STACKTOP; //@line 4588
   return;
  }
  ___async_unwind = 0; //@line 4591
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 4592
  $169 = $ReallocAsyncCtx13 + 4 | 0; //@line 4593
  HEAP32[$169 >> 2] = $4; //@line 4594
  $170 = $ReallocAsyncCtx13 + 8 | 0; //@line 4595
  HEAP32[$170 >> 2] = $10; //@line 4596
  sp = STACKTOP; //@line 4597
  return;
 }
 $134 = $4 + 44 | 0; //@line 4600
 $135 = HEAP32[$134 >> 2] | 0; //@line 4601
 if (!$135) {
  $149 = $16 + 12 | 0; //@line 4604
  HEAP32[$149 >> 2] = 0; //@line 4605
  $151 = $18 + 4 | 0; //@line 4607
  HEAP32[$151 >> 2] = 0; //@line 4609
  HEAP32[$151 + 4 >> 2] = 0; //@line 4612
  HEAP32[$18 >> 2] = 3; //@line 4613
  $155 = $18 + 12 | 0; //@line 4614
  HEAP32[$155 >> 2] = 752; //@line 4615
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 4616
  $156 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($16, 100, $18) | 0; //@line 4617
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 4620
   $157 = $ReallocAsyncCtx14 + 4 | 0; //@line 4621
   HEAP32[$157 >> 2] = $4; //@line 4622
   $158 = $ReallocAsyncCtx14 + 8 | 0; //@line 4623
   HEAP32[$158 >> 2] = $6; //@line 4624
   $159 = $ReallocAsyncCtx14 + 12 | 0; //@line 4625
   HEAP32[$159 >> 2] = $10; //@line 4626
   $160 = $ReallocAsyncCtx14 + 16 | 0; //@line 4627
   HEAP32[$160 >> 2] = $66; //@line 4628
   $161 = $ReallocAsyncCtx14 + 20 | 0; //@line 4629
   HEAP32[$161 >> 2] = $134; //@line 4630
   $162 = $ReallocAsyncCtx14 + 24 | 0; //@line 4631
   HEAP32[$162 >> 2] = $26; //@line 4632
   $163 = $ReallocAsyncCtx14 + 28 | 0; //@line 4633
   HEAP32[$163 >> 2] = $4; //@line 4634
   $164 = $ReallocAsyncCtx14 + 32 | 0; //@line 4635
   HEAP32[$164 >> 2] = $16; //@line 4636
   $165 = $ReallocAsyncCtx14 + 36 | 0; //@line 4637
   HEAP32[$165 >> 2] = $149; //@line 4638
   $166 = $ReallocAsyncCtx14 + 40 | 0; //@line 4639
   HEAP32[$166 >> 2] = $18; //@line 4640
   $167 = $ReallocAsyncCtx14 + 44 | 0; //@line 4641
   HEAP32[$167 >> 2] = $155; //@line 4642
   sp = STACKTOP; //@line 4643
   return;
  }
  HEAP32[___async_retval >> 2] = $156; //@line 4647
  ___async_unwind = 0; //@line 4648
  HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 4649
  $157 = $ReallocAsyncCtx14 + 4 | 0; //@line 4650
  HEAP32[$157 >> 2] = $4; //@line 4651
  $158 = $ReallocAsyncCtx14 + 8 | 0; //@line 4652
  HEAP32[$158 >> 2] = $6; //@line 4653
  $159 = $ReallocAsyncCtx14 + 12 | 0; //@line 4654
  HEAP32[$159 >> 2] = $10; //@line 4655
  $160 = $ReallocAsyncCtx14 + 16 | 0; //@line 4656
  HEAP32[$160 >> 2] = $66; //@line 4657
  $161 = $ReallocAsyncCtx14 + 20 | 0; //@line 4658
  HEAP32[$161 >> 2] = $134; //@line 4659
  $162 = $ReallocAsyncCtx14 + 24 | 0; //@line 4660
  HEAP32[$162 >> 2] = $26; //@line 4661
  $163 = $ReallocAsyncCtx14 + 28 | 0; //@line 4662
  HEAP32[$163 >> 2] = $4; //@line 4663
  $164 = $ReallocAsyncCtx14 + 32 | 0; //@line 4664
  HEAP32[$164 >> 2] = $16; //@line 4665
  $165 = $ReallocAsyncCtx14 + 36 | 0; //@line 4666
  HEAP32[$165 >> 2] = $149; //@line 4667
  $166 = $ReallocAsyncCtx14 + 40 | 0; //@line 4668
  HEAP32[$166 >> 2] = $18; //@line 4669
  $167 = $ReallocAsyncCtx14 + 44 | 0; //@line 4670
  HEAP32[$167 >> 2] = $155; //@line 4671
  sp = STACKTOP; //@line 4672
  return;
 } else {
  $138 = HEAP32[$135 + 4 >> 2] | 0; //@line 4676
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 4677
  FUNCTION_TABLE_vii[$138 & 7]($16, $66); //@line 4678
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 4681
   $139 = $ReallocAsyncCtx6 + 4 | 0; //@line 4682
   HEAP32[$139 >> 2] = $4; //@line 4683
   $140 = $ReallocAsyncCtx6 + 8 | 0; //@line 4684
   HEAP32[$140 >> 2] = $6; //@line 4685
   $141 = $ReallocAsyncCtx6 + 12 | 0; //@line 4686
   HEAP32[$141 >> 2] = $66; //@line 4687
   $142 = $ReallocAsyncCtx6 + 16 | 0; //@line 4688
   HEAP32[$142 >> 2] = $134; //@line 4689
   $143 = $ReallocAsyncCtx6 + 20 | 0; //@line 4690
   HEAP32[$143 >> 2] = $26; //@line 4691
   $144 = $ReallocAsyncCtx6 + 24 | 0; //@line 4692
   HEAP32[$144 >> 2] = $16; //@line 4693
   $145 = $ReallocAsyncCtx6 + 28 | 0; //@line 4694
   HEAP32[$145 >> 2] = $10; //@line 4695
   $146 = $ReallocAsyncCtx6 + 32 | 0; //@line 4696
   HEAP32[$146 >> 2] = $18; //@line 4697
   $147 = $ReallocAsyncCtx6 + 36 | 0; //@line 4698
   HEAP32[$147 >> 2] = $4; //@line 4699
   $148 = $ReallocAsyncCtx6 + 40 | 0; //@line 4700
   HEAP32[$148 >> 2] = $134; //@line 4701
   sp = STACKTOP; //@line 4702
   return;
  }
  ___async_unwind = 0; //@line 4705
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 4706
  $139 = $ReallocAsyncCtx6 + 4 | 0; //@line 4707
  HEAP32[$139 >> 2] = $4; //@line 4708
  $140 = $ReallocAsyncCtx6 + 8 | 0; //@line 4709
  HEAP32[$140 >> 2] = $6; //@line 4710
  $141 = $ReallocAsyncCtx6 + 12 | 0; //@line 4711
  HEAP32[$141 >> 2] = $66; //@line 4712
  $142 = $ReallocAsyncCtx6 + 16 | 0; //@line 4713
  HEAP32[$142 >> 2] = $134; //@line 4714
  $143 = $ReallocAsyncCtx6 + 20 | 0; //@line 4715
  HEAP32[$143 >> 2] = $26; //@line 4716
  $144 = $ReallocAsyncCtx6 + 24 | 0; //@line 4717
  HEAP32[$144 >> 2] = $16; //@line 4718
  $145 = $ReallocAsyncCtx6 + 28 | 0; //@line 4719
  HEAP32[$145 >> 2] = $10; //@line 4720
  $146 = $ReallocAsyncCtx6 + 32 | 0; //@line 4721
  HEAP32[$146 >> 2] = $18; //@line 4722
  $147 = $ReallocAsyncCtx6 + 36 | 0; //@line 4723
  HEAP32[$147 >> 2] = $4; //@line 4724
  $148 = $ReallocAsyncCtx6 + 40 | 0; //@line 4725
  HEAP32[$148 >> 2] = $134; //@line 4726
  sp = STACKTOP; //@line 4727
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_112($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1107 = 0, $$byval_copy = 0, $$byval_copy24 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $102 = 0, $103 = 0, $104 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $58 = 0, $6 = 0, $62 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $97 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 8521
 STACKTOP = STACKTOP + 48 | 0; //@line 8522
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8522
 $$byval_copy24 = sp + 20 | 0; //@line 8523
 $$byval_copy = sp; //@line 8524
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8526
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8528
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8530
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8532
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8534
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8536
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 8538
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 8540
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 8542
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 8544
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 8546
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 8548
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 8550
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 8552
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 8554
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 8556
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 8558
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 8560
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 8562
 $40 = HEAP8[$0 + 80 >> 0] | 0; //@line 8564
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 8566
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 8568
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 8570
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 8572
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 8574
 $52 = HEAP8[$0 + 104 >> 0] | 0; //@line 8576
 $54 = HEAP8[$0 + 105 >> 0] | 0; //@line 8578
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  $150 = $54 + 1 << 24 >> 24; //@line 8583
  $151 = $52 + -1 << 24 >> 24; //@line 8584
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(104) | 0; //@line 8585
  $152 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($10, 0, $6, 512) | 0; //@line 8586
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 158; //@line 8589
   $153 = $ReallocAsyncCtx3 + 4 | 0; //@line 8590
   HEAP32[$153 >> 2] = $2; //@line 8591
   $154 = $ReallocAsyncCtx3 + 8 | 0; //@line 8592
   HEAP32[$154 >> 2] = $4; //@line 8593
   $155 = $ReallocAsyncCtx3 + 12 | 0; //@line 8594
   HEAP32[$155 >> 2] = $6; //@line 8595
   $156 = $ReallocAsyncCtx3 + 16 | 0; //@line 8596
   HEAP32[$156 >> 2] = $8; //@line 8597
   $157 = $ReallocAsyncCtx3 + 20 | 0; //@line 8598
   HEAP32[$157 >> 2] = $10; //@line 8599
   $158 = $ReallocAsyncCtx3 + 24 | 0; //@line 8600
   HEAP32[$158 >> 2] = $12; //@line 8601
   $159 = $ReallocAsyncCtx3 + 28 | 0; //@line 8602
   HEAP8[$159 >> 0] = $151; //@line 8603
   $160 = $ReallocAsyncCtx3 + 29 | 0; //@line 8604
   HEAP8[$160 >> 0] = $150; //@line 8605
   $161 = $ReallocAsyncCtx3 + 30 | 0; //@line 8606
   HEAP8[$161 >> 0] = $14; //@line 8607
   $162 = $ReallocAsyncCtx3 + 32 | 0; //@line 8608
   HEAP32[$162 >> 2] = $16; //@line 8609
   $163 = $ReallocAsyncCtx3 + 36 | 0; //@line 8610
   HEAP32[$163 >> 2] = $18; //@line 8611
   $164 = $ReallocAsyncCtx3 + 40 | 0; //@line 8612
   HEAP32[$164 >> 2] = $20; //@line 8613
   $165 = $ReallocAsyncCtx3 + 44 | 0; //@line 8614
   HEAP32[$165 >> 2] = $22; //@line 8615
   $166 = $ReallocAsyncCtx3 + 48 | 0; //@line 8616
   HEAP32[$166 >> 2] = $24; //@line 8617
   $167 = $ReallocAsyncCtx3 + 52 | 0; //@line 8618
   HEAP32[$167 >> 2] = $26; //@line 8619
   $168 = $ReallocAsyncCtx3 + 56 | 0; //@line 8620
   HEAP32[$168 >> 2] = $28; //@line 8621
   $169 = $ReallocAsyncCtx3 + 60 | 0; //@line 8622
   HEAP32[$169 >> 2] = $30; //@line 8623
   $170 = $ReallocAsyncCtx3 + 64 | 0; //@line 8624
   HEAP32[$170 >> 2] = $32; //@line 8625
   $171 = $ReallocAsyncCtx3 + 68 | 0; //@line 8626
   HEAP32[$171 >> 2] = $34; //@line 8627
   $172 = $ReallocAsyncCtx3 + 72 | 0; //@line 8628
   HEAP32[$172 >> 2] = $36; //@line 8629
   $173 = $ReallocAsyncCtx3 + 76 | 0; //@line 8630
   HEAP32[$173 >> 2] = $38; //@line 8631
   $174 = $ReallocAsyncCtx3 + 80 | 0; //@line 8632
   HEAP8[$174 >> 0] = $40; //@line 8633
   $175 = $ReallocAsyncCtx3 + 84 | 0; //@line 8634
   HEAP32[$175 >> 2] = $42; //@line 8635
   $176 = $ReallocAsyncCtx3 + 88 | 0; //@line 8636
   HEAP32[$176 >> 2] = $44; //@line 8637
   $177 = $ReallocAsyncCtx3 + 92 | 0; //@line 8638
   HEAP32[$177 >> 2] = $46; //@line 8639
   $178 = $ReallocAsyncCtx3 + 96 | 0; //@line 8640
   HEAP32[$178 >> 2] = $48; //@line 8641
   $179 = $ReallocAsyncCtx3 + 100 | 0; //@line 8642
   HEAP32[$179 >> 2] = $50; //@line 8643
   sp = STACKTOP; //@line 8644
   STACKTOP = sp; //@line 8645
   return;
  }
  HEAP32[___async_retval >> 2] = $152; //@line 8648
  ___async_unwind = 0; //@line 8649
  HEAP32[$ReallocAsyncCtx3 >> 2] = 158; //@line 8650
  $153 = $ReallocAsyncCtx3 + 4 | 0; //@line 8651
  HEAP32[$153 >> 2] = $2; //@line 8652
  $154 = $ReallocAsyncCtx3 + 8 | 0; //@line 8653
  HEAP32[$154 >> 2] = $4; //@line 8654
  $155 = $ReallocAsyncCtx3 + 12 | 0; //@line 8655
  HEAP32[$155 >> 2] = $6; //@line 8656
  $156 = $ReallocAsyncCtx3 + 16 | 0; //@line 8657
  HEAP32[$156 >> 2] = $8; //@line 8658
  $157 = $ReallocAsyncCtx3 + 20 | 0; //@line 8659
  HEAP32[$157 >> 2] = $10; //@line 8660
  $158 = $ReallocAsyncCtx3 + 24 | 0; //@line 8661
  HEAP32[$158 >> 2] = $12; //@line 8662
  $159 = $ReallocAsyncCtx3 + 28 | 0; //@line 8663
  HEAP8[$159 >> 0] = $151; //@line 8664
  $160 = $ReallocAsyncCtx3 + 29 | 0; //@line 8665
  HEAP8[$160 >> 0] = $150; //@line 8666
  $161 = $ReallocAsyncCtx3 + 30 | 0; //@line 8667
  HEAP8[$161 >> 0] = $14; //@line 8668
  $162 = $ReallocAsyncCtx3 + 32 | 0; //@line 8669
  HEAP32[$162 >> 2] = $16; //@line 8670
  $163 = $ReallocAsyncCtx3 + 36 | 0; //@line 8671
  HEAP32[$163 >> 2] = $18; //@line 8672
  $164 = $ReallocAsyncCtx3 + 40 | 0; //@line 8673
  HEAP32[$164 >> 2] = $20; //@line 8674
  $165 = $ReallocAsyncCtx3 + 44 | 0; //@line 8675
  HEAP32[$165 >> 2] = $22; //@line 8676
  $166 = $ReallocAsyncCtx3 + 48 | 0; //@line 8677
  HEAP32[$166 >> 2] = $24; //@line 8678
  $167 = $ReallocAsyncCtx3 + 52 | 0; //@line 8679
  HEAP32[$167 >> 2] = $26; //@line 8680
  $168 = $ReallocAsyncCtx3 + 56 | 0; //@line 8681
  HEAP32[$168 >> 2] = $28; //@line 8682
  $169 = $ReallocAsyncCtx3 + 60 | 0; //@line 8683
  HEAP32[$169 >> 2] = $30; //@line 8684
  $170 = $ReallocAsyncCtx3 + 64 | 0; //@line 8685
  HEAP32[$170 >> 2] = $32; //@line 8686
  $171 = $ReallocAsyncCtx3 + 68 | 0; //@line 8687
  HEAP32[$171 >> 2] = $34; //@line 8688
  $172 = $ReallocAsyncCtx3 + 72 | 0; //@line 8689
  HEAP32[$172 >> 2] = $36; //@line 8690
  $173 = $ReallocAsyncCtx3 + 76 | 0; //@line 8691
  HEAP32[$173 >> 2] = $38; //@line 8692
  $174 = $ReallocAsyncCtx3 + 80 | 0; //@line 8693
  HEAP8[$174 >> 0] = $40; //@line 8694
  $175 = $ReallocAsyncCtx3 + 84 | 0; //@line 8695
  HEAP32[$175 >> 2] = $42; //@line 8696
  $176 = $ReallocAsyncCtx3 + 88 | 0; //@line 8697
  HEAP32[$176 >> 2] = $44; //@line 8698
  $177 = $ReallocAsyncCtx3 + 92 | 0; //@line 8699
  HEAP32[$177 >> 2] = $46; //@line 8700
  $178 = $ReallocAsyncCtx3 + 96 | 0; //@line 8701
  HEAP32[$178 >> 2] = $48; //@line 8702
  $179 = $ReallocAsyncCtx3 + 100 | 0; //@line 8703
  HEAP32[$179 >> 2] = $50; //@line 8704
  sp = STACKTOP; //@line 8705
  STACKTOP = sp; //@line 8706
  return;
 }
 $58 = $14 + 1 << 24 >> 24; //@line 8708
 HEAP32[$44 >> 2] = 0; //@line 8709
 HEAP32[$44 + 4 >> 2] = 0; //@line 8709
 HEAP32[$44 + 8 >> 2] = 0; //@line 8709
 HEAP32[$44 + 12 >> 2] = 0; //@line 8709
 HEAP32[$44 + 16 >> 2] = 0; //@line 8709
 HEAP32[$$byval_copy >> 2] = HEAP32[$46 >> 2]; //@line 8710
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$46 + 4 >> 2]; //@line 8710
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$46 + 8 >> 2]; //@line 8710
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$46 + 12 >> 2]; //@line 8710
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$46 + 16 >> 2]; //@line 8710
 __ZN13SocketAddressC2E10nsapi_addrt($24, $$byval_copy, 0); //@line 8711
 do {
  if ($52 << 24 >> 24) {
   if (($58 & 255) > 9) {
    if (!($54 << 24 >> 24)) {
     break;
    } else {
     $$1107 = 0; //@line 8721
     $62 = 0; //@line 8721
    }
   } else {
    if (($58 & 255) < 5) {
     $$1107 = $54; //@line 8726
     $62 = $58; //@line 8726
    } else {
     $97 = 648 + ((($58 & 255) + -5 | 0) * 20 | 0) | 0; //@line 8730
     HEAP32[$$byval_copy24 >> 2] = HEAP32[$97 >> 2]; //@line 8731
     HEAP32[$$byval_copy24 + 4 >> 2] = HEAP32[$97 + 4 >> 2]; //@line 8731
     HEAP32[$$byval_copy24 + 8 >> 2] = HEAP32[$97 + 8 >> 2]; //@line 8731
     HEAP32[$$byval_copy24 + 12 >> 2] = HEAP32[$97 + 12 >> 2]; //@line 8731
     HEAP32[$$byval_copy24 + 16 >> 2] = HEAP32[$97 + 16 >> 2]; //@line 8731
     __ZN13SocketAddress8set_addrE10nsapi_addr($24, $$byval_copy24); //@line 8732
     __ZN13SocketAddress8set_portEt($24, 53); //@line 8733
     HEAP8[$6 >> 0] = 0; //@line 8734
     HEAP8[$26 >> 0] = 1; //@line 8735
     HEAP8[$28 >> 0] = 1; //@line 8736
     HEAP8[$30 >> 0] = 0; //@line 8737
     HEAP8[$32 >> 0] = 0; //@line 8738
     HEAP8[$34 >> 0] = 1; //@line 8739
     HEAP8[$36 >> 0] = 0; //@line 8740
     HEAP8[$36 + 1 >> 0] = 0; //@line 8740
     HEAP8[$36 + 2 >> 0] = 0; //@line 8740
     HEAP8[$36 + 3 >> 0] = 0; //@line 8740
     HEAP8[$36 + 4 >> 0] = 0; //@line 8740
     HEAP8[$36 + 5 >> 0] = 0; //@line 8740
     if (!(HEAP8[$18 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $38; //@line 8744
     } else {
      $$048$i = $18; //@line 8746
      $$sroa$0$0$in47$i = $38; //@line 8746
      while (1) {
       $100 = _strcspn($$048$i, 5075) | 0; //@line 8748
       $102 = $$sroa$0$0$in47$i + 1 | 0; //@line 8750
       HEAP8[$$sroa$0$0$in47$i >> 0] = $100; //@line 8751
       $103 = $100 & 255; //@line 8752
       _memcpy($102 | 0, $$048$i | 0, $103 | 0) | 0; //@line 8753
       $104 = $102 + $103 | 0; //@line 8754
       $$048$i = $$048$i + ($100 + ((HEAP8[$$048$i + $100 >> 0] | 0) == 46 & 1)) | 0; //@line 8760
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $104; //@line 8764
        break;
       } else {
        $$sroa$0$0$in47$i = $104; //@line 8767
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 8772
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 8774
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $40; //@line 8776
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 8778
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 8781
     $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 8783
     $120 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($10, $24, $6, $$sroa$0$0$in$lcssa$i + 5 - $42 | 0) | 0; //@line 8784
     if (___async) {
      HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 8787
      $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 8788
      HEAP32[$121 >> 2] = $2; //@line 8789
      $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 8790
      HEAP32[$122 >> 2] = $4; //@line 8791
      $123 = $ReallocAsyncCtx4 + 12 | 0; //@line 8792
      HEAP32[$123 >> 2] = $6; //@line 8793
      $124 = $ReallocAsyncCtx4 + 16 | 0; //@line 8794
      HEAP32[$124 >> 2] = $8; //@line 8795
      $125 = $ReallocAsyncCtx4 + 20 | 0; //@line 8796
      HEAP32[$125 >> 2] = $10; //@line 8797
      $126 = $ReallocAsyncCtx4 + 24 | 0; //@line 8798
      HEAP32[$126 >> 2] = $12; //@line 8799
      $127 = $ReallocAsyncCtx4 + 28 | 0; //@line 8800
      HEAP8[$127 >> 0] = $58; //@line 8801
      $128 = $ReallocAsyncCtx4 + 32 | 0; //@line 8802
      HEAP32[$128 >> 2] = $16; //@line 8803
      $129 = $ReallocAsyncCtx4 + 36 | 0; //@line 8804
      HEAP32[$129 >> 2] = $18; //@line 8805
      $130 = $ReallocAsyncCtx4 + 40 | 0; //@line 8806
      HEAP32[$130 >> 2] = $20; //@line 8807
      $131 = $ReallocAsyncCtx4 + 44 | 0; //@line 8808
      HEAP32[$131 >> 2] = $22; //@line 8809
      $132 = $ReallocAsyncCtx4 + 48 | 0; //@line 8810
      HEAP32[$132 >> 2] = $24; //@line 8811
      $133 = $ReallocAsyncCtx4 + 52 | 0; //@line 8812
      HEAP32[$133 >> 2] = $26; //@line 8813
      $134 = $ReallocAsyncCtx4 + 56 | 0; //@line 8814
      HEAP32[$134 >> 2] = $28; //@line 8815
      $135 = $ReallocAsyncCtx4 + 60 | 0; //@line 8816
      HEAP32[$135 >> 2] = $30; //@line 8817
      $136 = $ReallocAsyncCtx4 + 64 | 0; //@line 8818
      HEAP32[$136 >> 2] = $32; //@line 8819
      $137 = $ReallocAsyncCtx4 + 68 | 0; //@line 8820
      HEAP32[$137 >> 2] = $34; //@line 8821
      $138 = $ReallocAsyncCtx4 + 72 | 0; //@line 8822
      HEAP32[$138 >> 2] = $36; //@line 8823
      $139 = $ReallocAsyncCtx4 + 76 | 0; //@line 8824
      HEAP32[$139 >> 2] = $38; //@line 8825
      $140 = $ReallocAsyncCtx4 + 80 | 0; //@line 8826
      HEAP8[$140 >> 0] = $40; //@line 8827
      $141 = $ReallocAsyncCtx4 + 84 | 0; //@line 8828
      HEAP32[$141 >> 2] = $42; //@line 8829
      $142 = $ReallocAsyncCtx4 + 88 | 0; //@line 8830
      HEAP32[$142 >> 2] = $44; //@line 8831
      $143 = $ReallocAsyncCtx4 + 92 | 0; //@line 8832
      HEAP32[$143 >> 2] = $46; //@line 8833
      $144 = $ReallocAsyncCtx4 + 96 | 0; //@line 8834
      HEAP32[$144 >> 2] = $48; //@line 8835
      $145 = $ReallocAsyncCtx4 + 100 | 0; //@line 8836
      HEAP32[$145 >> 2] = $50; //@line 8837
      $146 = $ReallocAsyncCtx4 + 104 | 0; //@line 8838
      HEAP8[$146 >> 0] = $52; //@line 8839
      $147 = $ReallocAsyncCtx4 + 105 | 0; //@line 8840
      HEAP8[$147 >> 0] = $54; //@line 8841
      sp = STACKTOP; //@line 8842
      STACKTOP = sp; //@line 8843
      return;
     }
     HEAP32[___async_retval >> 2] = $120; //@line 8846
     ___async_unwind = 0; //@line 8847
     HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 8848
     $121 = $ReallocAsyncCtx4 + 4 | 0; //@line 8849
     HEAP32[$121 >> 2] = $2; //@line 8850
     $122 = $ReallocAsyncCtx4 + 8 | 0; //@line 8851
     HEAP32[$122 >> 2] = $4; //@line 8852
     $123 = $ReallocAsyncCtx4 + 12 | 0; //@line 8853
     HEAP32[$123 >> 2] = $6; //@line 8854
     $124 = $ReallocAsyncCtx4 + 16 | 0; //@line 8855
     HEAP32[$124 >> 2] = $8; //@line 8856
     $125 = $ReallocAsyncCtx4 + 20 | 0; //@line 8857
     HEAP32[$125 >> 2] = $10; //@line 8858
     $126 = $ReallocAsyncCtx4 + 24 | 0; //@line 8859
     HEAP32[$126 >> 2] = $12; //@line 8860
     $127 = $ReallocAsyncCtx4 + 28 | 0; //@line 8861
     HEAP8[$127 >> 0] = $58; //@line 8862
     $128 = $ReallocAsyncCtx4 + 32 | 0; //@line 8863
     HEAP32[$128 >> 2] = $16; //@line 8864
     $129 = $ReallocAsyncCtx4 + 36 | 0; //@line 8865
     HEAP32[$129 >> 2] = $18; //@line 8866
     $130 = $ReallocAsyncCtx4 + 40 | 0; //@line 8867
     HEAP32[$130 >> 2] = $20; //@line 8868
     $131 = $ReallocAsyncCtx4 + 44 | 0; //@line 8869
     HEAP32[$131 >> 2] = $22; //@line 8870
     $132 = $ReallocAsyncCtx4 + 48 | 0; //@line 8871
     HEAP32[$132 >> 2] = $24; //@line 8872
     $133 = $ReallocAsyncCtx4 + 52 | 0; //@line 8873
     HEAP32[$133 >> 2] = $26; //@line 8874
     $134 = $ReallocAsyncCtx4 + 56 | 0; //@line 8875
     HEAP32[$134 >> 2] = $28; //@line 8876
     $135 = $ReallocAsyncCtx4 + 60 | 0; //@line 8877
     HEAP32[$135 >> 2] = $30; //@line 8878
     $136 = $ReallocAsyncCtx4 + 64 | 0; //@line 8879
     HEAP32[$136 >> 2] = $32; //@line 8880
     $137 = $ReallocAsyncCtx4 + 68 | 0; //@line 8881
     HEAP32[$137 >> 2] = $34; //@line 8882
     $138 = $ReallocAsyncCtx4 + 72 | 0; //@line 8883
     HEAP32[$138 >> 2] = $36; //@line 8884
     $139 = $ReallocAsyncCtx4 + 76 | 0; //@line 8885
     HEAP32[$139 >> 2] = $38; //@line 8886
     $140 = $ReallocAsyncCtx4 + 80 | 0; //@line 8887
     HEAP8[$140 >> 0] = $40; //@line 8888
     $141 = $ReallocAsyncCtx4 + 84 | 0; //@line 8889
     HEAP32[$141 >> 2] = $42; //@line 8890
     $142 = $ReallocAsyncCtx4 + 88 | 0; //@line 8891
     HEAP32[$142 >> 2] = $44; //@line 8892
     $143 = $ReallocAsyncCtx4 + 92 | 0; //@line 8893
     HEAP32[$143 >> 2] = $46; //@line 8894
     $144 = $ReallocAsyncCtx4 + 96 | 0; //@line 8895
     HEAP32[$144 >> 2] = $48; //@line 8896
     $145 = $ReallocAsyncCtx4 + 100 | 0; //@line 8897
     HEAP32[$145 >> 2] = $50; //@line 8898
     $146 = $ReallocAsyncCtx4 + 104 | 0; //@line 8899
     HEAP8[$146 >> 0] = $52; //@line 8900
     $147 = $ReallocAsyncCtx4 + 105 | 0; //@line 8901
     HEAP8[$147 >> 0] = $54; //@line 8902
     sp = STACKTOP; //@line 8903
     STACKTOP = sp; //@line 8904
     return;
    }
   }
   $65 = HEAP32[(HEAP32[$48 >> 2] | 0) + 28 >> 2] | 0; //@line 8910
   $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 8911
   $66 = FUNCTION_TABLE_iiii[$65 & 31]($50, $62 & 255, $24) | 0; //@line 8912
   if (___async) {
    HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 8915
    $67 = $ReallocAsyncCtx + 4 | 0; //@line 8916
    HEAP32[$67 >> 2] = $2; //@line 8917
    $68 = $ReallocAsyncCtx + 8 | 0; //@line 8918
    HEAP32[$68 >> 2] = $4; //@line 8919
    $69 = $ReallocAsyncCtx + 12 | 0; //@line 8920
    HEAP8[$69 >> 0] = $52; //@line 8921
    $70 = $ReallocAsyncCtx + 16 | 0; //@line 8922
    HEAP32[$70 >> 2] = $6; //@line 8923
    $71 = $ReallocAsyncCtx + 20 | 0; //@line 8924
    HEAP32[$71 >> 2] = $8; //@line 8925
    $72 = $ReallocAsyncCtx + 24 | 0; //@line 8926
    HEAP32[$72 >> 2] = $10; //@line 8927
    $73 = $ReallocAsyncCtx + 28 | 0; //@line 8928
    HEAP32[$73 >> 2] = $16; //@line 8929
    $74 = $ReallocAsyncCtx + 32 | 0; //@line 8930
    HEAP32[$74 >> 2] = $18; //@line 8931
    $75 = $ReallocAsyncCtx + 36 | 0; //@line 8932
    HEAP32[$75 >> 2] = $20; //@line 8933
    $76 = $ReallocAsyncCtx + 40 | 0; //@line 8934
    HEAP32[$76 >> 2] = $22; //@line 8935
    $77 = $ReallocAsyncCtx + 44 | 0; //@line 8936
    HEAP8[$77 >> 0] = $$1107; //@line 8937
    $78 = $ReallocAsyncCtx + 48 | 0; //@line 8938
    HEAP32[$78 >> 2] = $24; //@line 8939
    $79 = $ReallocAsyncCtx + 52 | 0; //@line 8940
    HEAP32[$79 >> 2] = $12; //@line 8941
    $80 = $ReallocAsyncCtx + 56 | 0; //@line 8942
    HEAP8[$80 >> 0] = $62; //@line 8943
    $81 = $ReallocAsyncCtx + 60 | 0; //@line 8944
    HEAP32[$81 >> 2] = $26; //@line 8945
    $82 = $ReallocAsyncCtx + 64 | 0; //@line 8946
    HEAP32[$82 >> 2] = $28; //@line 8947
    $83 = $ReallocAsyncCtx + 68 | 0; //@line 8948
    HEAP32[$83 >> 2] = $30; //@line 8949
    $84 = $ReallocAsyncCtx + 72 | 0; //@line 8950
    HEAP32[$84 >> 2] = $32; //@line 8951
    $85 = $ReallocAsyncCtx + 76 | 0; //@line 8952
    HEAP32[$85 >> 2] = $34; //@line 8953
    $86 = $ReallocAsyncCtx + 80 | 0; //@line 8954
    HEAP32[$86 >> 2] = $36; //@line 8955
    $87 = $ReallocAsyncCtx + 84 | 0; //@line 8956
    HEAP32[$87 >> 2] = $38; //@line 8957
    $88 = $ReallocAsyncCtx + 88 | 0; //@line 8958
    HEAP8[$88 >> 0] = $40; //@line 8959
    $89 = $ReallocAsyncCtx + 92 | 0; //@line 8960
    HEAP32[$89 >> 2] = $42; //@line 8961
    $90 = $ReallocAsyncCtx + 96 | 0; //@line 8962
    HEAP32[$90 >> 2] = $44; //@line 8963
    $91 = $ReallocAsyncCtx + 100 | 0; //@line 8964
    HEAP32[$91 >> 2] = $46; //@line 8965
    $92 = $ReallocAsyncCtx + 104 | 0; //@line 8966
    HEAP32[$92 >> 2] = $48; //@line 8967
    $93 = $ReallocAsyncCtx + 108 | 0; //@line 8968
    HEAP32[$93 >> 2] = $50; //@line 8969
    sp = STACKTOP; //@line 8970
    STACKTOP = sp; //@line 8971
    return;
   }
   HEAP32[___async_retval >> 2] = $66; //@line 8974
   ___async_unwind = 0; //@line 8975
   HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 8976
   $67 = $ReallocAsyncCtx + 4 | 0; //@line 8977
   HEAP32[$67 >> 2] = $2; //@line 8978
   $68 = $ReallocAsyncCtx + 8 | 0; //@line 8979
   HEAP32[$68 >> 2] = $4; //@line 8980
   $69 = $ReallocAsyncCtx + 12 | 0; //@line 8981
   HEAP8[$69 >> 0] = $52; //@line 8982
   $70 = $ReallocAsyncCtx + 16 | 0; //@line 8983
   HEAP32[$70 >> 2] = $6; //@line 8984
   $71 = $ReallocAsyncCtx + 20 | 0; //@line 8985
   HEAP32[$71 >> 2] = $8; //@line 8986
   $72 = $ReallocAsyncCtx + 24 | 0; //@line 8987
   HEAP32[$72 >> 2] = $10; //@line 8988
   $73 = $ReallocAsyncCtx + 28 | 0; //@line 8989
   HEAP32[$73 >> 2] = $16; //@line 8990
   $74 = $ReallocAsyncCtx + 32 | 0; //@line 8991
   HEAP32[$74 >> 2] = $18; //@line 8992
   $75 = $ReallocAsyncCtx + 36 | 0; //@line 8993
   HEAP32[$75 >> 2] = $20; //@line 8994
   $76 = $ReallocAsyncCtx + 40 | 0; //@line 8995
   HEAP32[$76 >> 2] = $22; //@line 8996
   $77 = $ReallocAsyncCtx + 44 | 0; //@line 8997
   HEAP8[$77 >> 0] = $$1107; //@line 8998
   $78 = $ReallocAsyncCtx + 48 | 0; //@line 8999
   HEAP32[$78 >> 2] = $24; //@line 9000
   $79 = $ReallocAsyncCtx + 52 | 0; //@line 9001
   HEAP32[$79 >> 2] = $12; //@line 9002
   $80 = $ReallocAsyncCtx + 56 | 0; //@line 9003
   HEAP8[$80 >> 0] = $62; //@line 9004
   $81 = $ReallocAsyncCtx + 60 | 0; //@line 9005
   HEAP32[$81 >> 2] = $26; //@line 9006
   $82 = $ReallocAsyncCtx + 64 | 0; //@line 9007
   HEAP32[$82 >> 2] = $28; //@line 9008
   $83 = $ReallocAsyncCtx + 68 | 0; //@line 9009
   HEAP32[$83 >> 2] = $30; //@line 9010
   $84 = $ReallocAsyncCtx + 72 | 0; //@line 9011
   HEAP32[$84 >> 2] = $32; //@line 9012
   $85 = $ReallocAsyncCtx + 76 | 0; //@line 9013
   HEAP32[$85 >> 2] = $34; //@line 9014
   $86 = $ReallocAsyncCtx + 80 | 0; //@line 9015
   HEAP32[$86 >> 2] = $36; //@line 9016
   $87 = $ReallocAsyncCtx + 84 | 0; //@line 9017
   HEAP32[$87 >> 2] = $38; //@line 9018
   $88 = $ReallocAsyncCtx + 88 | 0; //@line 9019
   HEAP8[$88 >> 0] = $40; //@line 9020
   $89 = $ReallocAsyncCtx + 92 | 0; //@line 9021
   HEAP32[$89 >> 2] = $42; //@line 9022
   $90 = $ReallocAsyncCtx + 96 | 0; //@line 9023
   HEAP32[$90 >> 2] = $44; //@line 9024
   $91 = $ReallocAsyncCtx + 100 | 0; //@line 9025
   HEAP32[$91 >> 2] = $46; //@line 9026
   $92 = $ReallocAsyncCtx + 104 | 0; //@line 9027
   HEAP32[$92 >> 2] = $48; //@line 9028
   $93 = $ReallocAsyncCtx + 108 | 0; //@line 9029
   HEAP32[$93 >> 2] = $50; //@line 9030
   sp = STACKTOP; //@line 9031
   STACKTOP = sp; //@line 9032
   return;
  }
 } while (0);
 _free($6); //@line 9035
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 9036
 $181 = __ZN6Socket5closeEv($8) | 0; //@line 9037
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 9040
  $182 = $ReallocAsyncCtx6 + 4 | 0; //@line 9041
  HEAP32[$182 >> 2] = -3009; //@line 9042
  $183 = $ReallocAsyncCtx6 + 8 | 0; //@line 9043
  HEAP32[$183 >> 2] = $10; //@line 9044
  $184 = $ReallocAsyncCtx6 + 12 | 0; //@line 9045
  HEAP32[$184 >> 2] = $12; //@line 9046
  sp = STACKTOP; //@line 9047
  STACKTOP = sp; //@line 9048
  return;
 }
 HEAP32[___async_retval >> 2] = $181; //@line 9051
 ___async_unwind = 0; //@line 9052
 HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 9053
 $182 = $ReallocAsyncCtx6 + 4 | 0; //@line 9054
 HEAP32[$182 >> 2] = -3009; //@line 9055
 $183 = $ReallocAsyncCtx6 + 8 | 0; //@line 9056
 HEAP32[$183 >> 2] = $10; //@line 9057
 $184 = $ReallocAsyncCtx6 + 12 | 0; //@line 9058
 HEAP32[$184 >> 2] = $12; //@line 9059
 sp = STACKTOP; //@line 9060
 STACKTOP = sp; //@line 9061
 return;
}
function _printf_core($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$$5 = 0, $$0 = 0, $$0228 = 0, $$0229316 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240$lcssa = 0, $$0240$lcssa356 = 0, $$0240315 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249303 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0259 = 0, $$0262$lcssa = 0, $$0262309 = 0, $$0269 = 0, $$1 = 0, $$1230327 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241326 = 0, $$1244314 = 0, $$1248 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242$lcssa = 0, $$2242302 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2261 = 0, $$2271 = 0, $$3265 = 0, $$3272 = 0, $$3300 = 0, $$4258354 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa291 = 0, $$lcssa292 = 0, $$pre342 = 0, $$pre345 = 0, $$pre348 = 0, $$sink = 0, $10 = 0, $105 = 0, $106 = 0, $109 = 0, $11 = 0, $112 = 0, $115 = 0, $12 = 0, $125 = 0, $129 = 0, $13 = 0, $14 = 0, $140 = 0, $144 = 0, $151 = 0, $152 = 0, $154 = 0, $156 = 0, $158 = 0, $167 = 0, $168 = 0, $173 = 0, $176 = 0, $181 = 0, $182 = 0, $187 = 0, $189 = 0, $196 = 0, $197 = 0, $20 = 0, $208 = 0, $21 = 0, $220 = 0, $227 = 0, $229 = 0, $23 = 0, $232 = 0, $234 = 0, $24 = 0, $242 = 0, $244 = 0, $247 = 0, $248 = 0, $25 = 0, $252 = 0, $256 = 0, $258 = 0, $261 = 0, $263 = 0, $264 = 0, $265 = 0, $27 = 0, $275 = 0, $276 = 0, $281 = 0, $283 = 0, $284 = 0, $290 = 0, $30 = 0, $302 = 0, $305 = 0, $306 = 0, $318 = 0, $320 = 0, $325 = 0, $329 = 0, $331 = 0, $343 = 0, $345 = 0, $352 = 0, $356 = 0, $36 = 0, $363 = 0, $364 = 0, $365 = 0, $43 = 0, $5 = 0, $51 = 0, $52 = 0, $54 = 0, $6 = 0, $60 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $68 = 0, $7 = 0, $79 = 0, $8 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond278 = 0, $storemerge274 = 0, label = 0, sp = 0, $158$looptemp = 0;
 sp = STACKTOP; //@line 10112
 STACKTOP = STACKTOP + 64 | 0; //@line 10113
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 10113
 $5 = sp + 16 | 0; //@line 10114
 $6 = sp; //@line 10115
 $7 = sp + 24 | 0; //@line 10116
 $8 = sp + 8 | 0; //@line 10117
 $9 = sp + 20 | 0; //@line 10118
 HEAP32[$5 >> 2] = $1; //@line 10119
 $10 = ($0 | 0) != 0; //@line 10120
 $11 = $7 + 40 | 0; //@line 10121
 $12 = $11; //@line 10122
 $13 = $7 + 39 | 0; //@line 10123
 $14 = $8 + 4 | 0; //@line 10124
 $$0243 = 0; //@line 10125
 $$0247 = 0; //@line 10125
 $$0269 = 0; //@line 10125
 L1 : while (1) {
  do {
   if (($$0247 | 0) > -1) {
    if (($$0243 | 0) > (2147483647 - $$0247 | 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 10134
     $$1248 = -1; //@line 10135
     break;
    } else {
     $$1248 = $$0243 + $$0247 | 0; //@line 10139
     break;
    }
   } else {
    $$1248 = $$0247; //@line 10143
   }
  } while (0);
  $20 = HEAP32[$5 >> 2] | 0; //@line 10146
  $21 = HEAP8[$20 >> 0] | 0; //@line 10147
  if (!($21 << 24 >> 24)) {
   label = 88; //@line 10150
   break;
  } else {
   $23 = $21; //@line 10153
   $25 = $20; //@line 10153
  }
  L9 : while (1) {
   switch ($23 << 24 >> 24) {
   case 37:
    {
     $$0249303 = $25; //@line 10158
     $27 = $25; //@line 10158
     label = 9; //@line 10159
     break L9;
     break;
    }
   case 0:
    {
     $$0249$lcssa = $25; //@line 10164
     break L9;
     break;
    }
   default:
    {}
   }
   $24 = $25 + 1 | 0; //@line 10171
   HEAP32[$5 >> 2] = $24; //@line 10172
   $23 = HEAP8[$24 >> 0] | 0; //@line 10174
   $25 = $24; //@line 10174
  }
  L12 : do {
   if ((label | 0) == 9) {
    while (1) {
     label = 0; //@line 10179
     if ((HEAP8[$27 + 1 >> 0] | 0) != 37) {
      $$0249$lcssa = $$0249303; //@line 10184
      break L12;
     }
     $30 = $$0249303 + 1 | 0; //@line 10187
     $27 = $27 + 2 | 0; //@line 10188
     HEAP32[$5 >> 2] = $27; //@line 10189
     if ((HEAP8[$27 >> 0] | 0) != 37) {
      $$0249$lcssa = $30; //@line 10196
      break;
     } else {
      $$0249303 = $30; //@line 10193
      label = 9; //@line 10194
     }
    }
   }
  } while (0);
  $36 = $$0249$lcssa - $20 | 0; //@line 10204
  if ($10) {
   _out_670($0, $20, $36); //@line 10206
  }
  if ($36 | 0) {
   $$0243 = $36; //@line 10210
   $$0247 = $$1248; //@line 10210
   continue;
  }
  $43 = (_isdigit(HEAP8[(HEAP32[$5 >> 2] | 0) + 1 >> 0] | 0) | 0) == 0; //@line 10218
  $$pre342 = HEAP32[$5 >> 2] | 0; //@line 10219
  if ($43) {
   $$0253 = -1; //@line 10221
   $$1270 = $$0269; //@line 10221
   $$sink = 1; //@line 10221
  } else {
   if ((HEAP8[$$pre342 + 2 >> 0] | 0) == 36) {
    $$0253 = (HEAP8[$$pre342 + 1 >> 0] | 0) + -48 | 0; //@line 10231
    $$1270 = 1; //@line 10231
    $$sink = 3; //@line 10231
   } else {
    $$0253 = -1; //@line 10233
    $$1270 = $$0269; //@line 10233
    $$sink = 1; //@line 10233
   }
  }
  $51 = $$pre342 + $$sink | 0; //@line 10236
  HEAP32[$5 >> 2] = $51; //@line 10237
  $52 = HEAP8[$51 >> 0] | 0; //@line 10238
  $54 = ($52 << 24 >> 24) + -32 | 0; //@line 10240
  if ($54 >>> 0 > 31 | (1 << $54 & 75913 | 0) == 0) {
   $$0262$lcssa = 0; //@line 10247
   $$lcssa291 = $52; //@line 10247
   $$lcssa292 = $51; //@line 10247
  } else {
   $$0262309 = 0; //@line 10249
   $60 = $52; //@line 10249
   $65 = $51; //@line 10249
   while (1) {
    $63 = 1 << ($60 << 24 >> 24) + -32 | $$0262309; //@line 10254
    $64 = $65 + 1 | 0; //@line 10255
    HEAP32[$5 >> 2] = $64; //@line 10256
    $66 = HEAP8[$64 >> 0] | 0; //@line 10257
    $68 = ($66 << 24 >> 24) + -32 | 0; //@line 10259
    if ($68 >>> 0 > 31 | (1 << $68 & 75913 | 0) == 0) {
     $$0262$lcssa = $63; //@line 10266
     $$lcssa291 = $66; //@line 10266
     $$lcssa292 = $64; //@line 10266
     break;
    } else {
     $$0262309 = $63; //@line 10269
     $60 = $66; //@line 10269
     $65 = $64; //@line 10269
    }
   }
  }
  if ($$lcssa291 << 24 >> 24 == 42) {
   if (!(_isdigit(HEAP8[$$lcssa292 + 1 >> 0] | 0) | 0)) {
    label = 23; //@line 10281
   } else {
    $79 = HEAP32[$5 >> 2] | 0; //@line 10283
    if ((HEAP8[$79 + 2 >> 0] | 0) == 36) {
     $83 = $79 + 1 | 0; //@line 10288
     HEAP32[$4 + ((HEAP8[$83 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10293
     $$0259 = HEAP32[$3 + ((HEAP8[$83 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10305
     $$2271 = 1; //@line 10305
     $storemerge274 = $79 + 3 | 0; //@line 10305
    } else {
     label = 23; //@line 10307
    }
   }
   if ((label | 0) == 23) {
    label = 0; //@line 10311
    if ($$1270 | 0) {
     $$0 = -1; //@line 10314
     break;
    }
    if ($10) {
     $105 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10329
     $106 = HEAP32[$105 >> 2] | 0; //@line 10330
     HEAP32[$2 >> 2] = $105 + 4; //@line 10332
     $363 = $106; //@line 10333
    } else {
     $363 = 0; //@line 10335
    }
    $$0259 = $363; //@line 10339
    $$2271 = 0; //@line 10339
    $storemerge274 = (HEAP32[$5 >> 2] | 0) + 1 | 0; //@line 10339
   }
   HEAP32[$5 >> 2] = $storemerge274; //@line 10341
   $109 = ($$0259 | 0) < 0; //@line 10342
   $$1260 = $109 ? 0 - $$0259 | 0 : $$0259; //@line 10347
   $$1263 = $109 ? $$0262$lcssa | 8192 : $$0262$lcssa; //@line 10347
   $$3272 = $$2271; //@line 10347
   $115 = $storemerge274; //@line 10347
  } else {
   $112 = _getint_671($5) | 0; //@line 10349
   if (($112 | 0) < 0) {
    $$0 = -1; //@line 10352
    break;
   }
   $$1260 = $112; //@line 10356
   $$1263 = $$0262$lcssa; //@line 10356
   $$3272 = $$1270; //@line 10356
   $115 = HEAP32[$5 >> 2] | 0; //@line 10356
  }
  do {
   if ((HEAP8[$115 >> 0] | 0) == 46) {
    if ((HEAP8[$115 + 1 >> 0] | 0) != 42) {
     HEAP32[$5 >> 2] = $115 + 1; //@line 10367
     $156 = _getint_671($5) | 0; //@line 10368
     $$0254 = $156; //@line 10370
     $$pre345 = HEAP32[$5 >> 2] | 0; //@line 10370
     break;
    }
    if (_isdigit(HEAP8[$115 + 2 >> 0] | 0) | 0) {
     $125 = HEAP32[$5 >> 2] | 0; //@line 10379
     if ((HEAP8[$125 + 3 >> 0] | 0) == 36) {
      $129 = $125 + 2 | 0; //@line 10384
      HEAP32[$4 + ((HEAP8[$129 >> 0] | 0) + -48 << 2) >> 2] = 10; //@line 10389
      $140 = HEAP32[$3 + ((HEAP8[$129 >> 0] | 0) + -48 << 3) >> 2] | 0; //@line 10396
      $144 = $125 + 4 | 0; //@line 10400
      HEAP32[$5 >> 2] = $144; //@line 10401
      $$0254 = $140; //@line 10402
      $$pre345 = $144; //@line 10402
      break;
     }
    }
    if ($$3272 | 0) {
     $$0 = -1; //@line 10408
     break L1;
    }
    if ($10) {
     $151 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 10423
     $152 = HEAP32[$151 >> 2] | 0; //@line 10424
     HEAP32[$2 >> 2] = $151 + 4; //@line 10426
     $364 = $152; //@line 10427
    } else {
     $364 = 0; //@line 10429
    }
    $154 = (HEAP32[$5 >> 2] | 0) + 2 | 0; //@line 10432
    HEAP32[$5 >> 2] = $154; //@line 10433
    $$0254 = $364; //@line 10434
    $$pre345 = $154; //@line 10434
   } else {
    $$0254 = -1; //@line 10436
    $$pre345 = $115; //@line 10436
   }
  } while (0);
  $$0252 = 0; //@line 10439
  $158 = $$pre345; //@line 10439
  while (1) {
   if (((HEAP8[$158 >> 0] | 0) + -65 | 0) >>> 0 > 57) {
    $$0 = -1; //@line 10446
    break L1;
   }
   $158$looptemp = $158;
   $158 = $158 + 1 | 0; //@line 10449
   HEAP32[$5 >> 2] = $158; //@line 10450
   $167 = HEAP8[(HEAP8[$158$looptemp >> 0] | 0) + -65 + (4543 + ($$0252 * 58 | 0)) >> 0] | 0; //@line 10455
   $168 = $167 & 255; //@line 10456
   if (($168 + -1 | 0) >>> 0 >= 8) {
    break;
   } else {
    $$0252 = $168; //@line 10460
   }
  }
  if (!($167 << 24 >> 24)) {
   $$0 = -1; //@line 10467
   break;
  }
  $173 = ($$0253 | 0) > -1; //@line 10471
  do {
   if ($167 << 24 >> 24 == 19) {
    if ($173) {
     $$0 = -1; //@line 10475
     break L1;
    } else {
     label = 50; //@line 10478
    }
   } else {
    if ($173) {
     HEAP32[$4 + ($$0253 << 2) >> 2] = $168; //@line 10483
     $176 = $3 + ($$0253 << 3) | 0; //@line 10485
     $181 = HEAP32[$176 + 4 >> 2] | 0; //@line 10490
     $182 = $6; //@line 10491
     HEAP32[$182 >> 2] = HEAP32[$176 >> 2]; //@line 10493
     HEAP32[$182 + 4 >> 2] = $181; //@line 10496
     label = 50; //@line 10497
     break;
    }
    if (!$10) {
     $$0 = 0; //@line 10501
     break L1;
    }
    _pop_arg_673($6, $168, $2); //@line 10504
    $187 = HEAP32[$5 >> 2] | 0; //@line 10506
   }
  } while (0);
  if ((label | 0) == 50) {
   label = 0; //@line 10510
   if ($10) {
    $187 = $158; //@line 10512
   } else {
    $$0243 = 0; //@line 10514
    $$0247 = $$1248; //@line 10514
    $$0269 = $$3272; //@line 10514
    continue;
   }
  }
  $189 = HEAP8[$187 + -1 >> 0] | 0; //@line 10520
  $$0235 = ($$0252 | 0) != 0 & ($189 & 15 | 0) == 3 ? $189 & -33 : $189; //@line 10526
  $196 = $$1263 & -65537; //@line 10529
  $$1263$ = ($$1263 & 8192 | 0) == 0 ? $$1263 : $196; //@line 10530
  L73 : do {
   switch ($$0235 | 0) {
   case 110:
    {
     switch (($$0252 & 255) << 24 >> 24) {
     case 0:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10538
       $$0243 = 0; //@line 10539
       $$0247 = $$1248; //@line 10539
       $$0269 = $$3272; //@line 10539
       continue L1;
       break;
      }
     case 1:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10545
       $$0243 = 0; //@line 10546
       $$0247 = $$1248; //@line 10546
       $$0269 = $$3272; //@line 10546
       continue L1;
       break;
      }
     case 2:
      {
       $208 = HEAP32[$6 >> 2] | 0; //@line 10554
       HEAP32[$208 >> 2] = $$1248; //@line 10556
       HEAP32[$208 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10559
       $$0243 = 0; //@line 10560
       $$0247 = $$1248; //@line 10560
       $$0269 = $$3272; //@line 10560
       continue L1;
       break;
      }
     case 3:
      {
       HEAP16[HEAP32[$6 >> 2] >> 1] = $$1248; //@line 10567
       $$0243 = 0; //@line 10568
       $$0247 = $$1248; //@line 10568
       $$0269 = $$3272; //@line 10568
       continue L1;
       break;
      }
     case 4:
      {
       HEAP8[HEAP32[$6 >> 2] >> 0] = $$1248; //@line 10575
       $$0243 = 0; //@line 10576
       $$0247 = $$1248; //@line 10576
       $$0269 = $$3272; //@line 10576
       continue L1;
       break;
      }
     case 6:
      {
       HEAP32[HEAP32[$6 >> 2] >> 2] = $$1248; //@line 10582
       $$0243 = 0; //@line 10583
       $$0247 = $$1248; //@line 10583
       $$0269 = $$3272; //@line 10583
       continue L1;
       break;
      }
     case 7:
      {
       $220 = HEAP32[$6 >> 2] | 0; //@line 10591
       HEAP32[$220 >> 2] = $$1248; //@line 10593
       HEAP32[$220 + 4 >> 2] = (($$1248 | 0) < 0) << 31 >> 31; //@line 10596
       $$0243 = 0; //@line 10597
       $$0247 = $$1248; //@line 10597
       $$0269 = $$3272; //@line 10597
       continue L1;
       break;
      }
     default:
      {
       $$0243 = 0; //@line 10602
       $$0247 = $$1248; //@line 10602
       $$0269 = $$3272; //@line 10602
       continue L1;
      }
     }
     break;
    }
   case 112:
    {
     $$1236 = 120; //@line 10612
     $$1255 = $$0254 >>> 0 > 8 ? $$0254 : 8; //@line 10612
     $$3265 = $$1263$ | 8; //@line 10612
     label = 62; //@line 10613
     break;
    }
   case 88:
   case 120:
    {
     $$1236 = $$0235; //@line 10617
     $$1255 = $$0254; //@line 10617
     $$3265 = $$1263$; //@line 10617
     label = 62; //@line 10618
     break;
    }
   case 111:
    {
     $242 = $6; //@line 10622
     $244 = HEAP32[$242 >> 2] | 0; //@line 10624
     $247 = HEAP32[$242 + 4 >> 2] | 0; //@line 10627
     $248 = _fmt_o($244, $247, $11) | 0; //@line 10628
     $252 = $12 - $248 | 0; //@line 10632
     $$0228 = $248; //@line 10637
     $$1233 = 0; //@line 10637
     $$1238 = 5007; //@line 10637
     $$2256 = ($$1263$ & 8 | 0) == 0 | ($$0254 | 0) > ($252 | 0) ? $$0254 : $252 + 1 | 0; //@line 10637
     $$4266 = $$1263$; //@line 10637
     $281 = $244; //@line 10637
     $283 = $247; //@line 10637
     label = 68; //@line 10638
     break;
    }
   case 105:
   case 100:
    {
     $256 = $6; //@line 10642
     $258 = HEAP32[$256 >> 2] | 0; //@line 10644
     $261 = HEAP32[$256 + 4 >> 2] | 0; //@line 10647
     if (($261 | 0) < 0) {
      $263 = _i64Subtract(0, 0, $258 | 0, $261 | 0) | 0; //@line 10650
      $264 = tempRet0; //@line 10651
      $265 = $6; //@line 10652
      HEAP32[$265 >> 2] = $263; //@line 10654
      HEAP32[$265 + 4 >> 2] = $264; //@line 10657
      $$0232 = 1; //@line 10658
      $$0237 = 5007; //@line 10658
      $275 = $263; //@line 10658
      $276 = $264; //@line 10658
      label = 67; //@line 10659
      break L73;
     } else {
      $$0232 = ($$1263$ & 2049 | 0) != 0 & 1; //@line 10671
      $$0237 = ($$1263$ & 2048 | 0) == 0 ? ($$1263$ & 1 | 0) == 0 ? 5007 : 5009 : 5008; //@line 10671
      $275 = $258; //@line 10671
      $276 = $261; //@line 10671
      label = 67; //@line 10672
      break L73;
     }
     break;
    }
   case 117:
    {
     $197 = $6; //@line 10678
     $$0232 = 0; //@line 10684
     $$0237 = 5007; //@line 10684
     $275 = HEAP32[$197 >> 2] | 0; //@line 10684
     $276 = HEAP32[$197 + 4 >> 2] | 0; //@line 10684
     label = 67; //@line 10685
     break;
    }
   case 99:
    {
     HEAP8[$13 >> 0] = HEAP32[$6 >> 2]; //@line 10696
     $$2 = $13; //@line 10697
     $$2234 = 0; //@line 10697
     $$2239 = 5007; //@line 10697
     $$2251 = $11; //@line 10697
     $$5 = 1; //@line 10697
     $$6268 = $196; //@line 10697
     break;
    }
   case 109:
    {
     $$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0; //@line 10704
     label = 72; //@line 10705
     break;
    }
   case 115:
    {
     $302 = HEAP32[$6 >> 2] | 0; //@line 10709
     $$1 = $302 | 0 ? $302 : 5017; //@line 10712
     label = 72; //@line 10713
     break;
    }
   case 67:
    {
     HEAP32[$8 >> 2] = HEAP32[$6 >> 2]; //@line 10723
     HEAP32[$14 >> 2] = 0; //@line 10724
     HEAP32[$6 >> 2] = $8; //@line 10725
     $$4258354 = -1; //@line 10726
     $365 = $8; //@line 10726
     label = 76; //@line 10727
     break;
    }
   case 83:
    {
     $$pre348 = HEAP32[$6 >> 2] | 0; //@line 10731
     if (!$$0254) {
      _pad_676($0, 32, $$1260, 0, $$1263$); //@line 10734
      $$0240$lcssa356 = 0; //@line 10735
      label = 85; //@line 10736
     } else {
      $$4258354 = $$0254; //@line 10738
      $365 = $$pre348; //@line 10738
      label = 76; //@line 10739
     }
     break;
    }
   case 65:
   case 71:
   case 70:
   case 69:
   case 97:
   case 103:
   case 102:
   case 101:
    {
     $$0243 = _fmt_fp($0, +HEAPF64[$6 >> 3], $$1260, $$0254, $$1263$, $$0235) | 0; //@line 10746
     $$0247 = $$1248; //@line 10746
     $$0269 = $$3272; //@line 10746
     continue L1;
     break;
    }
   default:
    {
     $$2 = $20; //@line 10751
     $$2234 = 0; //@line 10751
     $$2239 = 5007; //@line 10751
     $$2251 = $11; //@line 10751
     $$5 = $$0254; //@line 10751
     $$6268 = $$1263$; //@line 10751
    }
   }
  } while (0);
  L97 : do {
   if ((label | 0) == 62) {
    label = 0; //@line 10757
    $227 = $6; //@line 10758
    $229 = HEAP32[$227 >> 2] | 0; //@line 10760
    $232 = HEAP32[$227 + 4 >> 2] | 0; //@line 10763
    $234 = _fmt_x($229, $232, $11, $$1236 & 32) | 0; //@line 10765
    $or$cond278 = ($$3265 & 8 | 0) == 0 | ($229 | 0) == 0 & ($232 | 0) == 0; //@line 10771
    $$0228 = $234; //@line 10776
    $$1233 = $or$cond278 ? 0 : 2; //@line 10776
    $$1238 = $or$cond278 ? 5007 : 5007 + ($$1236 >> 4) | 0; //@line 10776
    $$2256 = $$1255; //@line 10776
    $$4266 = $$3265; //@line 10776
    $281 = $229; //@line 10776
    $283 = $232; //@line 10776
    label = 68; //@line 10777
   } else if ((label | 0) == 67) {
    label = 0; //@line 10780
    $$0228 = _fmt_u($275, $276, $11) | 0; //@line 10782
    $$1233 = $$0232; //@line 10782
    $$1238 = $$0237; //@line 10782
    $$2256 = $$0254; //@line 10782
    $$4266 = $$1263$; //@line 10782
    $281 = $275; //@line 10782
    $283 = $276; //@line 10782
    label = 68; //@line 10783
   } else if ((label | 0) == 72) {
    label = 0; //@line 10786
    $305 = _memchr($$1, 0, $$0254) | 0; //@line 10787
    $306 = ($305 | 0) == 0; //@line 10788
    $$2 = $$1; //@line 10795
    $$2234 = 0; //@line 10795
    $$2239 = 5007; //@line 10795
    $$2251 = $306 ? $$1 + $$0254 | 0 : $305; //@line 10795
    $$5 = $306 ? $$0254 : $305 - $$1 | 0; //@line 10795
    $$6268 = $196; //@line 10795
   } else if ((label | 0) == 76) {
    label = 0; //@line 10798
    $$0229316 = $365; //@line 10799
    $$0240315 = 0; //@line 10799
    $$1244314 = 0; //@line 10799
    while (1) {
     $318 = HEAP32[$$0229316 >> 2] | 0; //@line 10801
     if (!$318) {
      $$0240$lcssa = $$0240315; //@line 10804
      $$2245 = $$1244314; //@line 10804
      break;
     }
     $320 = _wctomb($9, $318) | 0; //@line 10807
     if (($320 | 0) < 0 | $320 >>> 0 > ($$4258354 - $$0240315 | 0) >>> 0) {
      $$0240$lcssa = $$0240315; //@line 10813
      $$2245 = $320; //@line 10813
      break;
     }
     $325 = $320 + $$0240315 | 0; //@line 10817
     if ($$4258354 >>> 0 > $325 >>> 0) {
      $$0229316 = $$0229316 + 4 | 0; //@line 10820
      $$0240315 = $325; //@line 10820
      $$1244314 = $320; //@line 10820
     } else {
      $$0240$lcssa = $325; //@line 10822
      $$2245 = $320; //@line 10822
      break;
     }
    }
    if (($$2245 | 0) < 0) {
     $$0 = -1; //@line 10828
     break L1;
    }
    _pad_676($0, 32, $$1260, $$0240$lcssa, $$1263$); //@line 10831
    if (!$$0240$lcssa) {
     $$0240$lcssa356 = 0; //@line 10834
     label = 85; //@line 10835
    } else {
     $$1230327 = $365; //@line 10837
     $$1241326 = 0; //@line 10837
     while (1) {
      $329 = HEAP32[$$1230327 >> 2] | 0; //@line 10839
      if (!$329) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10842
       label = 85; //@line 10843
       break L97;
      }
      $331 = _wctomb($9, $329) | 0; //@line 10846
      $$1241326 = $331 + $$1241326 | 0; //@line 10847
      if (($$1241326 | 0) > ($$0240$lcssa | 0)) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10850
       label = 85; //@line 10851
       break L97;
      }
      _out_670($0, $9, $331); //@line 10855
      if ($$1241326 >>> 0 >= $$0240$lcssa >>> 0) {
       $$0240$lcssa356 = $$0240$lcssa; //@line 10860
       label = 85; //@line 10861
       break;
      } else {
       $$1230327 = $$1230327 + 4 | 0; //@line 10858
      }
     }
    }
   }
  } while (0);
  if ((label | 0) == 68) {
   label = 0; //@line 10869
   $284 = ($281 | 0) != 0 | ($283 | 0) != 0; //@line 10875
   $or$cond = ($$2256 | 0) != 0 | $284; //@line 10877
   $290 = $12 - $$0228 + (($284 ^ 1) & 1) | 0; //@line 10882
   $$2 = $or$cond ? $$0228 : $11; //@line 10887
   $$2234 = $$1233; //@line 10887
   $$2239 = $$1238; //@line 10887
   $$2251 = $11; //@line 10887
   $$5 = $or$cond ? ($$2256 | 0) > ($290 | 0) ? $$2256 : $290 : $$2256; //@line 10887
   $$6268 = ($$2256 | 0) > -1 ? $$4266 & -65537 : $$4266; //@line 10887
  } else if ((label | 0) == 85) {
   label = 0; //@line 10890
   _pad_676($0, 32, $$1260, $$0240$lcssa356, $$1263$ ^ 8192); //@line 10892
   $$0243 = ($$1260 | 0) > ($$0240$lcssa356 | 0) ? $$1260 : $$0240$lcssa356; //@line 10895
   $$0247 = $$1248; //@line 10895
   $$0269 = $$3272; //@line 10895
   continue;
  }
  $343 = $$2251 - $$2 | 0; //@line 10900
  $$$5 = ($$5 | 0) < ($343 | 0) ? $343 : $$5; //@line 10902
  $345 = $$$5 + $$2234 | 0; //@line 10903
  $$2261 = ($$1260 | 0) < ($345 | 0) ? $345 : $$1260; //@line 10905
  _pad_676($0, 32, $$2261, $345, $$6268); //@line 10906
  _out_670($0, $$2239, $$2234); //@line 10907
  _pad_676($0, 48, $$2261, $345, $$6268 ^ 65536); //@line 10909
  _pad_676($0, 48, $$$5, $343, 0); //@line 10910
  _out_670($0, $$2, $343); //@line 10911
  _pad_676($0, 32, $$2261, $345, $$6268 ^ 8192); //@line 10913
  $$0243 = $$2261; //@line 10914
  $$0247 = $$1248; //@line 10914
  $$0269 = $$3272; //@line 10914
 }
 L116 : do {
  if ((label | 0) == 88) {
   if (!$0) {
    if (!$$0269) {
     $$0 = 0; //@line 10922
    } else {
     $$2242302 = 1; //@line 10924
     while (1) {
      $352 = HEAP32[$4 + ($$2242302 << 2) >> 2] | 0; //@line 10927
      if (!$352) {
       $$2242$lcssa = $$2242302; //@line 10930
       break;
      }
      _pop_arg_673($3 + ($$2242302 << 3) | 0, $352, $2); //@line 10934
      $356 = $$2242302 + 1 | 0; //@line 10935
      if (($$2242302 | 0) < 9) {
       $$2242302 = $356; //@line 10938
      } else {
       $$2242$lcssa = $356; //@line 10940
       break;
      }
     }
     if (($$2242$lcssa | 0) < 10) {
      $$3300 = $$2242$lcssa; //@line 10946
      while (1) {
       if (HEAP32[$4 + ($$3300 << 2) >> 2] | 0) {
        $$0 = -1; //@line 10952
        break L116;
       }
       if (($$3300 | 0) < 9) {
        $$3300 = $$3300 + 1 | 0; //@line 10958
       } else {
        $$0 = 1; //@line 10960
        break;
       }
      }
     } else {
      $$0 = 1; //@line 10965
     }
    }
   } else {
    $$0 = $$1248; //@line 10969
   }
  }
 } while (0);
 STACKTOP = sp; //@line 10973
 return $$0 | 0; //@line 10973
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_111($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$048$i = 0, $$094 = 0, $$097 = 0, $$1107 = 0, $$4$ph = 0, $$4110 = 0, $$byval_copy = 0, $$byval_copy20 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $101 = 0, $102 = 0, $103 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $150 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $96 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 8015
 STACKTOP = STACKTOP + 48 | 0; //@line 8016
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 8016
 $$byval_copy20 = sp + 20 | 0; //@line 8017
 $$byval_copy = sp; //@line 8018
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 8020
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 8022
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 8024
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 8026
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 8028
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 8030
 $14 = HEAP8[$0 + 28 >> 0] | 0; //@line 8032
 $16 = HEAP8[$0 + 29 >> 0] | 0; //@line 8034
 $18 = HEAP8[$0 + 30 >> 0] | 0; //@line 8036
 $20 = HEAP32[$0 + 32 >> 2] | 0; //@line 8038
 $22 = HEAP32[$0 + 36 >> 2] | 0; //@line 8040
 $24 = HEAP32[$0 + 40 >> 2] | 0; //@line 8042
 $26 = HEAP32[$0 + 44 >> 2] | 0; //@line 8044
 $28 = HEAP32[$0 + 48 >> 2] | 0; //@line 8046
 $30 = HEAP32[$0 + 52 >> 2] | 0; //@line 8048
 $32 = HEAP32[$0 + 56 >> 2] | 0; //@line 8050
 $34 = HEAP32[$0 + 60 >> 2] | 0; //@line 8052
 $36 = HEAP32[$0 + 64 >> 2] | 0; //@line 8054
 $38 = HEAP32[$0 + 68 >> 2] | 0; //@line 8056
 $40 = HEAP32[$0 + 72 >> 2] | 0; //@line 8058
 $42 = HEAP32[$0 + 76 >> 2] | 0; //@line 8060
 $44 = HEAP8[$0 + 80 >> 0] | 0; //@line 8062
 $46 = HEAP32[$0 + 84 >> 2] | 0; //@line 8064
 $48 = HEAP32[$0 + 88 >> 2] | 0; //@line 8066
 $50 = HEAP32[$0 + 92 >> 2] | 0; //@line 8068
 $52 = HEAP32[$0 + 96 >> 2] | 0; //@line 8070
 $54 = HEAP32[$0 + 100 >> 2] | 0; //@line 8072
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 8074
 do {
  if (($AsyncRetVal | 0) == -3001) {
   $$0 = $16; //@line 8079
   $$094 = $14; //@line 8079
   $$097 = $18 + 1 << 24 >> 24; //@line 8079
   label = 2; //@line 8080
  } else {
   if (($AsyncRetVal | 0) < 0) {
    $$4$ph = $AsyncRetVal; //@line 8084
    label = 23; //@line 8085
   } else {
    $150 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($6, 1, $20, $24, $26) | 0; //@line 8087
    if (($150 | 0) <= 0) {
     if (($150 | 0) < 0) {
      $$0 = $16; //@line 8092
      $$094 = $14; //@line 8092
      $$097 = $18; //@line 8092
      label = 2; //@line 8093
      break;
     } else {
      $$4110 = -3009; //@line 8096
      break;
     }
    }
    $152 = HEAP32[$20 >> 2] | 0; //@line 8100
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 8101
    __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($22, $24, $152); //@line 8102
    if (___async) {
     HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 8105
     $153 = $ReallocAsyncCtx2 + 4 | 0; //@line 8106
     HEAP32[$153 >> 2] = $150; //@line 8107
     $154 = $ReallocAsyncCtx2 + 8 | 0; //@line 8108
     HEAP32[$154 >> 2] = $4; //@line 8109
     $155 = $ReallocAsyncCtx2 + 12 | 0; //@line 8110
     HEAP32[$155 >> 2] = $2; //@line 8111
     $156 = $ReallocAsyncCtx2 + 16 | 0; //@line 8112
     HEAP32[$156 >> 2] = $6; //@line 8113
     $157 = $ReallocAsyncCtx2 + 20 | 0; //@line 8114
     HEAP32[$157 >> 2] = $8; //@line 8115
     $158 = $ReallocAsyncCtx2 + 24 | 0; //@line 8116
     HEAP32[$158 >> 2] = $10; //@line 8117
     $159 = $ReallocAsyncCtx2 + 28 | 0; //@line 8118
     HEAP32[$159 >> 2] = $12; //@line 8119
     sp = STACKTOP; //@line 8120
     STACKTOP = sp; //@line 8121
     return;
    }
    ___async_unwind = 0; //@line 8123
    HEAP32[$ReallocAsyncCtx2 >> 2] = 159; //@line 8124
    $153 = $ReallocAsyncCtx2 + 4 | 0; //@line 8125
    HEAP32[$153 >> 2] = $150; //@line 8126
    $154 = $ReallocAsyncCtx2 + 8 | 0; //@line 8127
    HEAP32[$154 >> 2] = $4; //@line 8128
    $155 = $ReallocAsyncCtx2 + 12 | 0; //@line 8129
    HEAP32[$155 >> 2] = $2; //@line 8130
    $156 = $ReallocAsyncCtx2 + 16 | 0; //@line 8131
    HEAP32[$156 >> 2] = $6; //@line 8132
    $157 = $ReallocAsyncCtx2 + 20 | 0; //@line 8133
    HEAP32[$157 >> 2] = $8; //@line 8134
    $158 = $ReallocAsyncCtx2 + 24 | 0; //@line 8135
    HEAP32[$158 >> 2] = $10; //@line 8136
    $159 = $ReallocAsyncCtx2 + 28 | 0; //@line 8137
    HEAP32[$159 >> 2] = $12; //@line 8138
    sp = STACKTOP; //@line 8139
    STACKTOP = sp; //@line 8140
    return;
   }
  }
 } while (0);
 do {
  if ((label | 0) == 2) {
   HEAP32[$48 >> 2] = 0; //@line 8146
   HEAP32[$48 + 4 >> 2] = 0; //@line 8146
   HEAP32[$48 + 8 >> 2] = 0; //@line 8146
   HEAP32[$48 + 12 >> 2] = 0; //@line 8146
   HEAP32[$48 + 16 >> 2] = 0; //@line 8146
   HEAP32[$$byval_copy >> 2] = HEAP32[$50 >> 2]; //@line 8147
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$50 + 4 >> 2]; //@line 8147
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$50 + 8 >> 2]; //@line 8147
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$50 + 12 >> 2]; //@line 8147
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$50 + 16 >> 2]; //@line 8147
   __ZN13SocketAddressC2E10nsapi_addrt($28, $$byval_copy, 0); //@line 8148
   if (!($$094 << 24 >> 24)) {
    $$4$ph = -3009; //@line 8151
    label = 23; //@line 8152
   } else {
    if (($$097 & 255) > 9) {
     if (!($$0 << 24 >> 24)) {
      $$4$ph = -3009; //@line 8158
      label = 23; //@line 8159
      break;
     } else {
      $$1107 = 0; //@line 8162
      $61 = 0; //@line 8162
     }
    } else {
     if (($$097 & 255) < 5) {
      $$1107 = $$0; //@line 8167
      $61 = $$097; //@line 8167
     } else {
      $96 = 648 + ((($$097 & 255) + -5 | 0) * 20 | 0) | 0; //@line 8171
      HEAP32[$$byval_copy20 >> 2] = HEAP32[$96 >> 2]; //@line 8172
      HEAP32[$$byval_copy20 + 4 >> 2] = HEAP32[$96 + 4 >> 2]; //@line 8172
      HEAP32[$$byval_copy20 + 8 >> 2] = HEAP32[$96 + 8 >> 2]; //@line 8172
      HEAP32[$$byval_copy20 + 12 >> 2] = HEAP32[$96 + 12 >> 2]; //@line 8172
      HEAP32[$$byval_copy20 + 16 >> 2] = HEAP32[$96 + 16 >> 2]; //@line 8172
      __ZN13SocketAddress8set_addrE10nsapi_addr($28, $$byval_copy20); //@line 8173
      __ZN13SocketAddress8set_portEt($28, 53); //@line 8174
      HEAP8[$6 >> 0] = 0; //@line 8175
      HEAP8[$30 >> 0] = 1; //@line 8176
      HEAP8[$32 >> 0] = 1; //@line 8177
      HEAP8[$34 >> 0] = 0; //@line 8178
      HEAP8[$36 >> 0] = 0; //@line 8179
      HEAP8[$38 >> 0] = 1; //@line 8180
      HEAP8[$40 >> 0] = 0; //@line 8181
      HEAP8[$40 + 1 >> 0] = 0; //@line 8181
      HEAP8[$40 + 2 >> 0] = 0; //@line 8181
      HEAP8[$40 + 3 >> 0] = 0; //@line 8181
      HEAP8[$40 + 4 >> 0] = 0; //@line 8181
      HEAP8[$40 + 5 >> 0] = 0; //@line 8181
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$sroa$0$0$in$lcssa$i = $42; //@line 8185
      } else {
       $$048$i = $22; //@line 8187
       $$sroa$0$0$in47$i = $42; //@line 8187
       while (1) {
        $99 = _strcspn($$048$i, 5075) | 0; //@line 8189
        $101 = $$sroa$0$0$in47$i + 1 | 0; //@line 8191
        HEAP8[$$sroa$0$0$in47$i >> 0] = $99; //@line 8192
        $102 = $99 & 255; //@line 8193
        _memcpy($101 | 0, $$048$i | 0, $102 | 0) | 0; //@line 8194
        $103 = $101 + $102 | 0; //@line 8195
        $$048$i = $$048$i + ($99 + ((HEAP8[$$048$i + $99 >> 0] | 0) == 46 & 1)) | 0; //@line 8201
        if (!(HEAP8[$$048$i >> 0] | 0)) {
         $$sroa$0$0$in$lcssa$i = $103; //@line 8205
         break;
        } else {
         $$sroa$0$0$in47$i = $103; //@line 8208
        }
       }
      }
      HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 8213
      HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 8215
      HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $44; //@line 8217
      HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 8219
      HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 8222
      $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 8224
      $119 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($10, $28, $6, $$sroa$0$0$in$lcssa$i + 5 - $46 | 0) | 0; //@line 8225
      if (___async) {
       HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 8228
       $120 = $ReallocAsyncCtx4 + 4 | 0; //@line 8229
       HEAP32[$120 >> 2] = $2; //@line 8230
       $121 = $ReallocAsyncCtx4 + 8 | 0; //@line 8231
       HEAP32[$121 >> 2] = $4; //@line 8232
       $122 = $ReallocAsyncCtx4 + 12 | 0; //@line 8233
       HEAP32[$122 >> 2] = $6; //@line 8234
       $123 = $ReallocAsyncCtx4 + 16 | 0; //@line 8235
       HEAP32[$123 >> 2] = $8; //@line 8236
       $124 = $ReallocAsyncCtx4 + 20 | 0; //@line 8237
       HEAP32[$124 >> 2] = $10; //@line 8238
       $125 = $ReallocAsyncCtx4 + 24 | 0; //@line 8239
       HEAP32[$125 >> 2] = $12; //@line 8240
       $126 = $ReallocAsyncCtx4 + 28 | 0; //@line 8241
       HEAP8[$126 >> 0] = $$097; //@line 8242
       $127 = $ReallocAsyncCtx4 + 32 | 0; //@line 8243
       HEAP32[$127 >> 2] = $20; //@line 8244
       $128 = $ReallocAsyncCtx4 + 36 | 0; //@line 8245
       HEAP32[$128 >> 2] = $22; //@line 8246
       $129 = $ReallocAsyncCtx4 + 40 | 0; //@line 8247
       HEAP32[$129 >> 2] = $24; //@line 8248
       $130 = $ReallocAsyncCtx4 + 44 | 0; //@line 8249
       HEAP32[$130 >> 2] = $26; //@line 8250
       $131 = $ReallocAsyncCtx4 + 48 | 0; //@line 8251
       HEAP32[$131 >> 2] = $28; //@line 8252
       $132 = $ReallocAsyncCtx4 + 52 | 0; //@line 8253
       HEAP32[$132 >> 2] = $30; //@line 8254
       $133 = $ReallocAsyncCtx4 + 56 | 0; //@line 8255
       HEAP32[$133 >> 2] = $32; //@line 8256
       $134 = $ReallocAsyncCtx4 + 60 | 0; //@line 8257
       HEAP32[$134 >> 2] = $34; //@line 8258
       $135 = $ReallocAsyncCtx4 + 64 | 0; //@line 8259
       HEAP32[$135 >> 2] = $36; //@line 8260
       $136 = $ReallocAsyncCtx4 + 68 | 0; //@line 8261
       HEAP32[$136 >> 2] = $38; //@line 8262
       $137 = $ReallocAsyncCtx4 + 72 | 0; //@line 8263
       HEAP32[$137 >> 2] = $40; //@line 8264
       $138 = $ReallocAsyncCtx4 + 76 | 0; //@line 8265
       HEAP32[$138 >> 2] = $42; //@line 8266
       $139 = $ReallocAsyncCtx4 + 80 | 0; //@line 8267
       HEAP8[$139 >> 0] = $44; //@line 8268
       $140 = $ReallocAsyncCtx4 + 84 | 0; //@line 8269
       HEAP32[$140 >> 2] = $46; //@line 8270
       $141 = $ReallocAsyncCtx4 + 88 | 0; //@line 8271
       HEAP32[$141 >> 2] = $48; //@line 8272
       $142 = $ReallocAsyncCtx4 + 92 | 0; //@line 8273
       HEAP32[$142 >> 2] = $50; //@line 8274
       $143 = $ReallocAsyncCtx4 + 96 | 0; //@line 8275
       HEAP32[$143 >> 2] = $52; //@line 8276
       $144 = $ReallocAsyncCtx4 + 100 | 0; //@line 8277
       HEAP32[$144 >> 2] = $54; //@line 8278
       $145 = $ReallocAsyncCtx4 + 104 | 0; //@line 8279
       HEAP8[$145 >> 0] = $$094; //@line 8280
       $146 = $ReallocAsyncCtx4 + 105 | 0; //@line 8281
       HEAP8[$146 >> 0] = $$0; //@line 8282
       sp = STACKTOP; //@line 8283
       STACKTOP = sp; //@line 8284
       return;
      }
      HEAP32[___async_retval >> 2] = $119; //@line 8287
      ___async_unwind = 0; //@line 8288
      HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 8289
      $120 = $ReallocAsyncCtx4 + 4 | 0; //@line 8290
      HEAP32[$120 >> 2] = $2; //@line 8291
      $121 = $ReallocAsyncCtx4 + 8 | 0; //@line 8292
      HEAP32[$121 >> 2] = $4; //@line 8293
      $122 = $ReallocAsyncCtx4 + 12 | 0; //@line 8294
      HEAP32[$122 >> 2] = $6; //@line 8295
      $123 = $ReallocAsyncCtx4 + 16 | 0; //@line 8296
      HEAP32[$123 >> 2] = $8; //@line 8297
      $124 = $ReallocAsyncCtx4 + 20 | 0; //@line 8298
      HEAP32[$124 >> 2] = $10; //@line 8299
      $125 = $ReallocAsyncCtx4 + 24 | 0; //@line 8300
      HEAP32[$125 >> 2] = $12; //@line 8301
      $126 = $ReallocAsyncCtx4 + 28 | 0; //@line 8302
      HEAP8[$126 >> 0] = $$097; //@line 8303
      $127 = $ReallocAsyncCtx4 + 32 | 0; //@line 8304
      HEAP32[$127 >> 2] = $20; //@line 8305
      $128 = $ReallocAsyncCtx4 + 36 | 0; //@line 8306
      HEAP32[$128 >> 2] = $22; //@line 8307
      $129 = $ReallocAsyncCtx4 + 40 | 0; //@line 8308
      HEAP32[$129 >> 2] = $24; //@line 8309
      $130 = $ReallocAsyncCtx4 + 44 | 0; //@line 8310
      HEAP32[$130 >> 2] = $26; //@line 8311
      $131 = $ReallocAsyncCtx4 + 48 | 0; //@line 8312
      HEAP32[$131 >> 2] = $28; //@line 8313
      $132 = $ReallocAsyncCtx4 + 52 | 0; //@line 8314
      HEAP32[$132 >> 2] = $30; //@line 8315
      $133 = $ReallocAsyncCtx4 + 56 | 0; //@line 8316
      HEAP32[$133 >> 2] = $32; //@line 8317
      $134 = $ReallocAsyncCtx4 + 60 | 0; //@line 8318
      HEAP32[$134 >> 2] = $34; //@line 8319
      $135 = $ReallocAsyncCtx4 + 64 | 0; //@line 8320
      HEAP32[$135 >> 2] = $36; //@line 8321
      $136 = $ReallocAsyncCtx4 + 68 | 0; //@line 8322
      HEAP32[$136 >> 2] = $38; //@line 8323
      $137 = $ReallocAsyncCtx4 + 72 | 0; //@line 8324
      HEAP32[$137 >> 2] = $40; //@line 8325
      $138 = $ReallocAsyncCtx4 + 76 | 0; //@line 8326
      HEAP32[$138 >> 2] = $42; //@line 8327
      $139 = $ReallocAsyncCtx4 + 80 | 0; //@line 8328
      HEAP8[$139 >> 0] = $44; //@line 8329
      $140 = $ReallocAsyncCtx4 + 84 | 0; //@line 8330
      HEAP32[$140 >> 2] = $46; //@line 8331
      $141 = $ReallocAsyncCtx4 + 88 | 0; //@line 8332
      HEAP32[$141 >> 2] = $48; //@line 8333
      $142 = $ReallocAsyncCtx4 + 92 | 0; //@line 8334
      HEAP32[$142 >> 2] = $50; //@line 8335
      $143 = $ReallocAsyncCtx4 + 96 | 0; //@line 8336
      HEAP32[$143 >> 2] = $52; //@line 8337
      $144 = $ReallocAsyncCtx4 + 100 | 0; //@line 8338
      HEAP32[$144 >> 2] = $54; //@line 8339
      $145 = $ReallocAsyncCtx4 + 104 | 0; //@line 8340
      HEAP8[$145 >> 0] = $$094; //@line 8341
      $146 = $ReallocAsyncCtx4 + 105 | 0; //@line 8342
      HEAP8[$146 >> 0] = $$0; //@line 8343
      sp = STACKTOP; //@line 8344
      STACKTOP = sp; //@line 8345
      return;
     }
    }
    $64 = HEAP32[(HEAP32[$52 >> 2] | 0) + 28 >> 2] | 0; //@line 8351
    $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 8352
    $65 = FUNCTION_TABLE_iiii[$64 & 31]($54, $61 & 255, $28) | 0; //@line 8353
    if (___async) {
     HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 8356
     $66 = $ReallocAsyncCtx + 4 | 0; //@line 8357
     HEAP32[$66 >> 2] = $2; //@line 8358
     $67 = $ReallocAsyncCtx + 8 | 0; //@line 8359
     HEAP32[$67 >> 2] = $4; //@line 8360
     $68 = $ReallocAsyncCtx + 12 | 0; //@line 8361
     HEAP8[$68 >> 0] = $$094; //@line 8362
     $69 = $ReallocAsyncCtx + 16 | 0; //@line 8363
     HEAP32[$69 >> 2] = $6; //@line 8364
     $70 = $ReallocAsyncCtx + 20 | 0; //@line 8365
     HEAP32[$70 >> 2] = $8; //@line 8366
     $71 = $ReallocAsyncCtx + 24 | 0; //@line 8367
     HEAP32[$71 >> 2] = $10; //@line 8368
     $72 = $ReallocAsyncCtx + 28 | 0; //@line 8369
     HEAP32[$72 >> 2] = $20; //@line 8370
     $73 = $ReallocAsyncCtx + 32 | 0; //@line 8371
     HEAP32[$73 >> 2] = $22; //@line 8372
     $74 = $ReallocAsyncCtx + 36 | 0; //@line 8373
     HEAP32[$74 >> 2] = $24; //@line 8374
     $75 = $ReallocAsyncCtx + 40 | 0; //@line 8375
     HEAP32[$75 >> 2] = $26; //@line 8376
     $76 = $ReallocAsyncCtx + 44 | 0; //@line 8377
     HEAP8[$76 >> 0] = $$1107; //@line 8378
     $77 = $ReallocAsyncCtx + 48 | 0; //@line 8379
     HEAP32[$77 >> 2] = $28; //@line 8380
     $78 = $ReallocAsyncCtx + 52 | 0; //@line 8381
     HEAP32[$78 >> 2] = $12; //@line 8382
     $79 = $ReallocAsyncCtx + 56 | 0; //@line 8383
     HEAP8[$79 >> 0] = $61; //@line 8384
     $80 = $ReallocAsyncCtx + 60 | 0; //@line 8385
     HEAP32[$80 >> 2] = $30; //@line 8386
     $81 = $ReallocAsyncCtx + 64 | 0; //@line 8387
     HEAP32[$81 >> 2] = $32; //@line 8388
     $82 = $ReallocAsyncCtx + 68 | 0; //@line 8389
     HEAP32[$82 >> 2] = $34; //@line 8390
     $83 = $ReallocAsyncCtx + 72 | 0; //@line 8391
     HEAP32[$83 >> 2] = $36; //@line 8392
     $84 = $ReallocAsyncCtx + 76 | 0; //@line 8393
     HEAP32[$84 >> 2] = $38; //@line 8394
     $85 = $ReallocAsyncCtx + 80 | 0; //@line 8395
     HEAP32[$85 >> 2] = $40; //@line 8396
     $86 = $ReallocAsyncCtx + 84 | 0; //@line 8397
     HEAP32[$86 >> 2] = $42; //@line 8398
     $87 = $ReallocAsyncCtx + 88 | 0; //@line 8399
     HEAP8[$87 >> 0] = $44; //@line 8400
     $88 = $ReallocAsyncCtx + 92 | 0; //@line 8401
     HEAP32[$88 >> 2] = $46; //@line 8402
     $89 = $ReallocAsyncCtx + 96 | 0; //@line 8403
     HEAP32[$89 >> 2] = $48; //@line 8404
     $90 = $ReallocAsyncCtx + 100 | 0; //@line 8405
     HEAP32[$90 >> 2] = $50; //@line 8406
     $91 = $ReallocAsyncCtx + 104 | 0; //@line 8407
     HEAP32[$91 >> 2] = $52; //@line 8408
     $92 = $ReallocAsyncCtx + 108 | 0; //@line 8409
     HEAP32[$92 >> 2] = $54; //@line 8410
     sp = STACKTOP; //@line 8411
     STACKTOP = sp; //@line 8412
     return;
    }
    HEAP32[___async_retval >> 2] = $65; //@line 8415
    ___async_unwind = 0; //@line 8416
    HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 8417
    $66 = $ReallocAsyncCtx + 4 | 0; //@line 8418
    HEAP32[$66 >> 2] = $2; //@line 8419
    $67 = $ReallocAsyncCtx + 8 | 0; //@line 8420
    HEAP32[$67 >> 2] = $4; //@line 8421
    $68 = $ReallocAsyncCtx + 12 | 0; //@line 8422
    HEAP8[$68 >> 0] = $$094; //@line 8423
    $69 = $ReallocAsyncCtx + 16 | 0; //@line 8424
    HEAP32[$69 >> 2] = $6; //@line 8425
    $70 = $ReallocAsyncCtx + 20 | 0; //@line 8426
    HEAP32[$70 >> 2] = $8; //@line 8427
    $71 = $ReallocAsyncCtx + 24 | 0; //@line 8428
    HEAP32[$71 >> 2] = $10; //@line 8429
    $72 = $ReallocAsyncCtx + 28 | 0; //@line 8430
    HEAP32[$72 >> 2] = $20; //@line 8431
    $73 = $ReallocAsyncCtx + 32 | 0; //@line 8432
    HEAP32[$73 >> 2] = $22; //@line 8433
    $74 = $ReallocAsyncCtx + 36 | 0; //@line 8434
    HEAP32[$74 >> 2] = $24; //@line 8435
    $75 = $ReallocAsyncCtx + 40 | 0; //@line 8436
    HEAP32[$75 >> 2] = $26; //@line 8437
    $76 = $ReallocAsyncCtx + 44 | 0; //@line 8438
    HEAP8[$76 >> 0] = $$1107; //@line 8439
    $77 = $ReallocAsyncCtx + 48 | 0; //@line 8440
    HEAP32[$77 >> 2] = $28; //@line 8441
    $78 = $ReallocAsyncCtx + 52 | 0; //@line 8442
    HEAP32[$78 >> 2] = $12; //@line 8443
    $79 = $ReallocAsyncCtx + 56 | 0; //@line 8444
    HEAP8[$79 >> 0] = $61; //@line 8445
    $80 = $ReallocAsyncCtx + 60 | 0; //@line 8446
    HEAP32[$80 >> 2] = $30; //@line 8447
    $81 = $ReallocAsyncCtx + 64 | 0; //@line 8448
    HEAP32[$81 >> 2] = $32; //@line 8449
    $82 = $ReallocAsyncCtx + 68 | 0; //@line 8450
    HEAP32[$82 >> 2] = $34; //@line 8451
    $83 = $ReallocAsyncCtx + 72 | 0; //@line 8452
    HEAP32[$83 >> 2] = $36; //@line 8453
    $84 = $ReallocAsyncCtx + 76 | 0; //@line 8454
    HEAP32[$84 >> 2] = $38; //@line 8455
    $85 = $ReallocAsyncCtx + 80 | 0; //@line 8456
    HEAP32[$85 >> 2] = $40; //@line 8457
    $86 = $ReallocAsyncCtx + 84 | 0; //@line 8458
    HEAP32[$86 >> 2] = $42; //@line 8459
    $87 = $ReallocAsyncCtx + 88 | 0; //@line 8460
    HEAP8[$87 >> 0] = $44; //@line 8461
    $88 = $ReallocAsyncCtx + 92 | 0; //@line 8462
    HEAP32[$88 >> 2] = $46; //@line 8463
    $89 = $ReallocAsyncCtx + 96 | 0; //@line 8464
    HEAP32[$89 >> 2] = $48; //@line 8465
    $90 = $ReallocAsyncCtx + 100 | 0; //@line 8466
    HEAP32[$90 >> 2] = $50; //@line 8467
    $91 = $ReallocAsyncCtx + 104 | 0; //@line 8468
    HEAP32[$91 >> 2] = $52; //@line 8469
    $92 = $ReallocAsyncCtx + 108 | 0; //@line 8470
    HEAP32[$92 >> 2] = $54; //@line 8471
    sp = STACKTOP; //@line 8472
    STACKTOP = sp; //@line 8473
    return;
   }
  }
 } while (0);
 if ((label | 0) == 23) {
  $$4110 = $$4$ph; //@line 8478
 }
 _free($6); //@line 8480
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 8481
 $162 = __ZN6Socket5closeEv($8) | 0; //@line 8482
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 8485
  $163 = $ReallocAsyncCtx6 + 4 | 0; //@line 8486
  HEAP32[$163 >> 2] = $$4110; //@line 8487
  $164 = $ReallocAsyncCtx6 + 8 | 0; //@line 8488
  HEAP32[$164 >> 2] = $10; //@line 8489
  $165 = $ReallocAsyncCtx6 + 12 | 0; //@line 8490
  HEAP32[$165 >> 2] = $12; //@line 8491
  sp = STACKTOP; //@line 8492
  STACKTOP = sp; //@line 8493
  return;
 }
 HEAP32[___async_retval >> 2] = $162; //@line 8496
 ___async_unwind = 0; //@line 8497
 HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 8498
 $163 = $ReallocAsyncCtx6 + 4 | 0; //@line 8499
 HEAP32[$163 >> 2] = $$4110; //@line 8500
 $164 = $ReallocAsyncCtx6 + 8 | 0; //@line 8501
 HEAP32[$164 >> 2] = $10; //@line 8502
 $165 = $ReallocAsyncCtx6 + 12 | 0; //@line 8503
 HEAP32[$165 >> 2] = $12; //@line 8504
 sp = STACKTOP; //@line 8505
 STACKTOP = sp; //@line 8506
 return;
}
function _mbed_vtracef($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$0199 = 0, $$1$off0 = 0, $$10 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$13 = 0, $$18 = 0, $$3 = 0, $$3147 = 0, $$3147168 = 0, $$3154 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$6 = 0, $$6150 = 0, $$9 = 0, $$lobit = 0, $$pre = 0, $$sink = 0, $125 = 0, $126 = 0, $151 = 0, $157 = 0, $168 = 0, $169 = 0, $171 = 0, $181 = 0, $182 = 0, $184 = 0, $186 = 0, $194 = 0, $201 = 0, $202 = 0, $204 = 0, $206 = 0, $209 = 0, $34 = 0, $38 = 0, $4 = 0, $43 = 0, $5 = 0, $54 = 0, $55 = 0, $59 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $69 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $76 = 0, $78 = 0, $82 = 0, $89 = 0, $95 = 0, $AsyncCtx = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx34 = 0, $AsyncCtx38 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx49 = 0, $AsyncCtx52 = 0, $AsyncCtx56 = 0, $AsyncCtx60 = 0, $AsyncCtx64 = 0, $extract$t159 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1712
 STACKTOP = STACKTOP + 96 | 0; //@line 1713
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(96); //@line 1713
 $vararg_buffer23 = sp + 72 | 0; //@line 1714
 $vararg_buffer20 = sp + 64 | 0; //@line 1715
 $vararg_buffer18 = sp + 56 | 0; //@line 1716
 $vararg_buffer15 = sp + 48 | 0; //@line 1717
 $vararg_buffer12 = sp + 40 | 0; //@line 1718
 $vararg_buffer9 = sp + 32 | 0; //@line 1719
 $vararg_buffer6 = sp + 24 | 0; //@line 1720
 $vararg_buffer3 = sp + 16 | 0; //@line 1721
 $vararg_buffer1 = sp + 8 | 0; //@line 1722
 $vararg_buffer = sp; //@line 1723
 $4 = sp + 80 | 0; //@line 1724
 $5 = HEAP32[135] | 0; //@line 1725
 do {
  if ($5 | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(104, sp) | 0; //@line 1729
   FUNCTION_TABLE_v[$5 & 7](); //@line 1730
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 64; //@line 1733
    HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer12; //@line 1735
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 1737
    HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer12; //@line 1739
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer15; //@line 1741
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer15; //@line 1743
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer6; //@line 1745
    HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer6; //@line 1747
    HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer9; //@line 1749
    HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer9; //@line 1751
    HEAP32[$AsyncCtx + 40 >> 2] = $2; //@line 1753
    HEAP32[$AsyncCtx + 44 >> 2] = $3; //@line 1755
    HEAP8[$AsyncCtx + 48 >> 0] = $0; //@line 1757
    HEAP32[$AsyncCtx + 52 >> 2] = $vararg_buffer20; //@line 1759
    HEAP32[$AsyncCtx + 56 >> 2] = $vararg_buffer20; //@line 1761
    HEAP32[$AsyncCtx + 60 >> 2] = $vararg_buffer18; //@line 1763
    HEAP32[$AsyncCtx + 64 >> 2] = $vararg_buffer18; //@line 1765
    HEAP32[$AsyncCtx + 68 >> 2] = $vararg_buffer23; //@line 1767
    HEAP32[$AsyncCtx + 72 >> 2] = $vararg_buffer23; //@line 1769
    HEAP32[$AsyncCtx + 76 >> 2] = $vararg_buffer; //@line 1771
    HEAP32[$AsyncCtx + 80 >> 2] = $vararg_buffer; //@line 1773
    HEAP32[$AsyncCtx + 84 >> 2] = $vararg_buffer1; //@line 1775
    HEAP32[$AsyncCtx + 88 >> 2] = $vararg_buffer1; //@line 1777
    HEAP32[$AsyncCtx + 92 >> 2] = $vararg_buffer3; //@line 1779
    HEAP32[$AsyncCtx + 96 >> 2] = $vararg_buffer3; //@line 1781
    HEAP32[$AsyncCtx + 100 >> 2] = $4; //@line 1783
    sp = STACKTOP; //@line 1784
    STACKTOP = sp; //@line 1785
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1787
    HEAP32[137] = (HEAP32[137] | 0) + 1; //@line 1790
    break;
   }
  }
 } while (0);
 $34 = HEAP32[126] | 0; //@line 1795
 do {
  if ($34 | 0) {
   HEAP8[$34 >> 0] = 0; //@line 1799
   do {
    if ($0 << 24 >> 24 > -1 & ($1 | 0) != 0) {
     $38 = HEAP32[123] | 0; //@line 1805
     if (HEAP8[$38 >> 0] | 0) {
      if (_strstr($38, $1) | 0) {
       $$0$i = 1; //@line 1812
       break;
      }
     }
     $43 = HEAP32[124] | 0; //@line 1816
     if (!(HEAP8[$43 >> 0] | 0)) {
      label = 11; //@line 1820
     } else {
      if (!(_strstr($43, $1) | 0)) {
       $$0$i = 1; //@line 1825
      } else {
       label = 11; //@line 1827
      }
     }
    } else {
     label = 11; //@line 1831
    }
   } while (0);
   if ((label | 0) == 11) {
    $$0$i = 0; //@line 1835
   }
   if (!((HEAP32[133] | 0) != 0 & ((($1 | 0) == 0 | (($2 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[130] = HEAP32[128]; //@line 1847
    break;
   }
   $54 = HEAPU8[488] | 0; //@line 1851
   $55 = $0 & 255; //@line 1852
   if ($55 & 31 & $54 | 0) {
    $59 = $54 & 64; //@line 1857
    $$lobit = $59 >>> 6; //@line 1858
    $60 = $$lobit & 255; //@line 1859
    $64 = ($54 & 32 | 0) == 0; //@line 1863
    $65 = HEAP32[127] | 0; //@line 1864
    $66 = HEAP32[126] | 0; //@line 1865
    $67 = $0 << 24 >> 24 == 1; //@line 1866
    do {
     if ($67 | ($54 & 128 | 0) != 0) {
      $AsyncCtx64 = _emscripten_alloc_async_context(8, sp) | 0; //@line 1870
      _vsnprintf($66, $65, $2, $3) | 0; //@line 1871
      if (___async) {
       HEAP32[$AsyncCtx64 >> 2] = 65; //@line 1874
       HEAP8[$AsyncCtx64 + 4 >> 0] = $67 & 1; //@line 1877
       sp = STACKTOP; //@line 1878
       STACKTOP = sp; //@line 1879
       return;
      }
      _emscripten_free_async_context($AsyncCtx64 | 0); //@line 1881
      $69 = HEAP32[134] | 0; //@line 1882
      if (!($67 & ($69 | 0) != 0)) {
       $73 = HEAP32[133] | 0; //@line 1886
       $74 = HEAP32[126] | 0; //@line 1887
       $AsyncCtx34 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1888
       FUNCTION_TABLE_vi[$73 & 511]($74); //@line 1889
       if (___async) {
        HEAP32[$AsyncCtx34 >> 2] = 68; //@line 1892
        sp = STACKTOP; //@line 1893
        STACKTOP = sp; //@line 1894
        return;
       } else {
        _emscripten_free_async_context($AsyncCtx34 | 0); //@line 1896
        break;
       }
      }
      $71 = HEAP32[126] | 0; //@line 1900
      $AsyncCtx27 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1901
      FUNCTION_TABLE_vi[$69 & 511]($71); //@line 1902
      if (___async) {
       HEAP32[$AsyncCtx27 >> 2] = 66; //@line 1905
       sp = STACKTOP; //@line 1906
       STACKTOP = sp; //@line 1907
       return;
      }
      _emscripten_free_async_context($AsyncCtx27 | 0); //@line 1909
      $72 = HEAP32[134] | 0; //@line 1910
      $AsyncCtx30 = _emscripten_alloc_async_context(4, sp) | 0; //@line 1911
      FUNCTION_TABLE_vi[$72 & 511](3494); //@line 1912
      if (___async) {
       HEAP32[$AsyncCtx30 >> 2] = 67; //@line 1915
       sp = STACKTOP; //@line 1916
       STACKTOP = sp; //@line 1917
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx30 | 0); //@line 1919
       break;
      }
     } else {
      if (!$59) {
       $$1$off0 = ($$lobit | 0) != 0; //@line 1926
       $$1143 = $66; //@line 1926
       $$1145 = $65; //@line 1926
       $$3154 = 0; //@line 1926
       label = 38; //@line 1927
      } else {
       if ($64) {
        $$0142 = $66; //@line 1930
        $$0144 = $65; //@line 1930
       } else {
        $76 = _snprintf($66, $65, 3496, $vararg_buffer) | 0; //@line 1932
        $$ = ($76 | 0) >= ($65 | 0) ? 0 : $76; //@line 1934
        $78 = ($$ | 0) > 0; //@line 1935
        $$0142 = $78 ? $66 + $$ | 0 : $66; //@line 1940
        $$0144 = $65 - ($78 ? $$ : 0) | 0; //@line 1940
       }
       if (($$0144 | 0) > 0) {
        $82 = $55 + -2 | 0; //@line 1944
        switch ($82 >>> 1 | $82 << 31 | 0) {
        case 0:
         {
          $$sink = 3514; //@line 1950
          label = 35; //@line 1951
          break;
         }
        case 1:
         {
          $$sink = 3520; //@line 1955
          label = 35; //@line 1956
          break;
         }
        case 3:
         {
          $$sink = 3508; //@line 1960
          label = 35; //@line 1961
          break;
         }
        case 7:
         {
          $$sink = 3502; //@line 1965
          label = 35; //@line 1966
          break;
         }
        default:
         {
          $$0141 = 0; //@line 1970
          $$1152 = 0; //@line 1970
         }
        }
        if ((label | 0) == 35) {
         HEAP32[$vararg_buffer1 >> 2] = $$sink; //@line 1974
         $$0141 = $60 & 1; //@line 1977
         $$1152 = _snprintf($$0142, $$0144, 3526, $vararg_buffer1) | 0; //@line 1977
        }
        $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 1980
        $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 1982
        if (($$1152$ | 0) > 0) {
         $89 = $$0141 << 24 >> 24 == 0; //@line 1984
         $$1$off0 = $extract$t159; //@line 1989
         $$1143 = $89 ? $$0142 : $$0142 + $$1152$ | 0; //@line 1989
         $$1145 = $$0144 - ($89 ? 0 : $$1152$) | 0; //@line 1989
         $$3154 = $$1152; //@line 1989
         label = 38; //@line 1990
        } else {
         $$1$off0 = $extract$t159; //@line 1992
         $$1143 = $$0142; //@line 1992
         $$1145 = $$0144; //@line 1992
         $$3154 = $$1152$; //@line 1992
         label = 38; //@line 1993
        }
       }
      }
      L54 : do {
       if ((label | 0) == 38) {
        do {
         if (($$1145 | 0) > 0 & (HEAP32[131] | 0) != 0) {
          HEAP32[$4 >> 2] = HEAP32[$3 >> 2]; //@line 2006
          $AsyncCtx60 = _emscripten_alloc_async_context(104, sp) | 0; //@line 2007
          $95 = _vsnprintf(0, 0, $2, $4) | 0; //@line 2008
          if (___async) {
           HEAP32[$AsyncCtx60 >> 2] = 69; //@line 2011
           HEAP32[$AsyncCtx60 + 4 >> 2] = $vararg_buffer12; //@line 2013
           HEAP32[$AsyncCtx60 + 8 >> 2] = $1; //@line 2015
           HEAP32[$AsyncCtx60 + 12 >> 2] = $vararg_buffer12; //@line 2017
           HEAP32[$AsyncCtx60 + 16 >> 2] = $vararg_buffer15; //@line 2019
           HEAP32[$AsyncCtx60 + 20 >> 2] = $vararg_buffer15; //@line 2021
           HEAP32[$AsyncCtx60 + 24 >> 2] = $vararg_buffer6; //@line 2023
           HEAP32[$AsyncCtx60 + 28 >> 2] = $vararg_buffer6; //@line 2025
           HEAP32[$AsyncCtx60 + 32 >> 2] = $vararg_buffer9; //@line 2027
           HEAP32[$AsyncCtx60 + 36 >> 2] = $vararg_buffer9; //@line 2029
           HEAP32[$AsyncCtx60 + 40 >> 2] = $2; //@line 2031
           HEAP32[$AsyncCtx60 + 44 >> 2] = $3; //@line 2033
           HEAP32[$AsyncCtx60 + 48 >> 2] = $vararg_buffer20; //@line 2035
           HEAP32[$AsyncCtx60 + 52 >> 2] = $vararg_buffer20; //@line 2037
           HEAP32[$AsyncCtx60 + 56 >> 2] = $vararg_buffer18; //@line 2039
           HEAP32[$AsyncCtx60 + 60 >> 2] = $vararg_buffer18; //@line 2041
           HEAP32[$AsyncCtx60 + 64 >> 2] = $vararg_buffer23; //@line 2043
           HEAP32[$AsyncCtx60 + 68 >> 2] = $vararg_buffer23; //@line 2045
           HEAP8[$AsyncCtx60 + 72 >> 0] = $$1$off0 & 1; //@line 2048
           HEAP32[$AsyncCtx60 + 76 >> 2] = $vararg_buffer3; //@line 2050
           HEAP32[$AsyncCtx60 + 80 >> 2] = $$1143; //@line 2052
           HEAP32[$AsyncCtx60 + 84 >> 2] = $$1145; //@line 2054
           HEAP32[$AsyncCtx60 + 88 >> 2] = $vararg_buffer3; //@line 2056
           HEAP32[$AsyncCtx60 + 92 >> 2] = $4; //@line 2058
           HEAP32[$AsyncCtx60 + 96 >> 2] = $55; //@line 2060
           HEAP32[$AsyncCtx60 + 100 >> 2] = $$3154; //@line 2062
           sp = STACKTOP; //@line 2063
           STACKTOP = sp; //@line 2064
           return;
          }
          _emscripten_free_async_context($AsyncCtx60 | 0); //@line 2066
          $125 = HEAP32[131] | 0; //@line 2071
          $AsyncCtx38 = _emscripten_alloc_async_context(100, sp) | 0; //@line 2072
          $126 = FUNCTION_TABLE_ii[$125 & 31](($$3154 | 0 ? 4 : 0) + $$3154 + $95 | 0) | 0; //@line 2073
          if (___async) {
           HEAP32[$AsyncCtx38 >> 2] = 70; //@line 2076
           HEAP32[$AsyncCtx38 + 4 >> 2] = $vararg_buffer12; //@line 2078
           HEAP32[$AsyncCtx38 + 8 >> 2] = $1; //@line 2080
           HEAP32[$AsyncCtx38 + 12 >> 2] = $vararg_buffer12; //@line 2082
           HEAP32[$AsyncCtx38 + 16 >> 2] = $vararg_buffer15; //@line 2084
           HEAP32[$AsyncCtx38 + 20 >> 2] = $vararg_buffer15; //@line 2086
           HEAP32[$AsyncCtx38 + 24 >> 2] = $vararg_buffer6; //@line 2088
           HEAP32[$AsyncCtx38 + 28 >> 2] = $vararg_buffer6; //@line 2090
           HEAP32[$AsyncCtx38 + 32 >> 2] = $vararg_buffer9; //@line 2092
           HEAP32[$AsyncCtx38 + 36 >> 2] = $vararg_buffer9; //@line 2094
           HEAP32[$AsyncCtx38 + 40 >> 2] = $2; //@line 2096
           HEAP32[$AsyncCtx38 + 44 >> 2] = $3; //@line 2098
           HEAP32[$AsyncCtx38 + 48 >> 2] = $vararg_buffer20; //@line 2100
           HEAP32[$AsyncCtx38 + 52 >> 2] = $vararg_buffer20; //@line 2102
           HEAP32[$AsyncCtx38 + 56 >> 2] = $vararg_buffer18; //@line 2104
           HEAP32[$AsyncCtx38 + 60 >> 2] = $vararg_buffer18; //@line 2106
           HEAP32[$AsyncCtx38 + 64 >> 2] = $vararg_buffer23; //@line 2108
           HEAP32[$AsyncCtx38 + 68 >> 2] = $vararg_buffer23; //@line 2110
           HEAP8[$AsyncCtx38 + 72 >> 0] = $$1$off0 & 1; //@line 2113
           HEAP32[$AsyncCtx38 + 76 >> 2] = $vararg_buffer3; //@line 2115
           HEAP32[$AsyncCtx38 + 80 >> 2] = $$1143; //@line 2117
           HEAP32[$AsyncCtx38 + 84 >> 2] = $$1145; //@line 2119
           HEAP32[$AsyncCtx38 + 88 >> 2] = $vararg_buffer3; //@line 2121
           HEAP32[$AsyncCtx38 + 92 >> 2] = $4; //@line 2123
           HEAP32[$AsyncCtx38 + 96 >> 2] = $55; //@line 2125
           sp = STACKTOP; //@line 2126
           STACKTOP = sp; //@line 2127
           return;
          } else {
           _emscripten_free_async_context($AsyncCtx38 | 0); //@line 2129
           HEAP32[$vararg_buffer3 >> 2] = $126; //@line 2130
           $151 = _snprintf($$1143, $$1145, 3526, $vararg_buffer3) | 0; //@line 2131
           $$10 = ($151 | 0) >= ($$1145 | 0) ? 0 : $151; //@line 2133
           if (($$10 | 0) > 0) {
            $$3 = $$1143 + $$10 | 0; //@line 2138
            $$3147 = $$1145 - $$10 | 0; //@line 2138
            label = 44; //@line 2139
            break;
           } else {
            $$3147168 = $$1145; //@line 2142
            $$3169 = $$1143; //@line 2142
            break;
           }
          }
         } else {
          $$3 = $$1143; //@line 2147
          $$3147 = $$1145; //@line 2147
          label = 44; //@line 2148
         }
        } while (0);
        if ((label | 0) == 44) {
         if (($$3147 | 0) > 0) {
          $$3147168 = $$3147; //@line 2154
          $$3169 = $$3; //@line 2154
         } else {
          break;
         }
        }
        $157 = $55 + -2 | 0; //@line 2159
        switch ($157 >>> 1 | $157 << 31 | 0) {
        case 0:
         {
          HEAP32[$vararg_buffer6 >> 2] = $1; //@line 2165
          $$5156 = _snprintf($$3169, $$3147168, 3529, $vararg_buffer6) | 0; //@line 2167
          break;
         }
        case 1:
         {
          HEAP32[$vararg_buffer9 >> 2] = $1; //@line 2171
          $$5156 = _snprintf($$3169, $$3147168, 3544, $vararg_buffer9) | 0; //@line 2173
          break;
         }
        case 3:
         {
          HEAP32[$vararg_buffer12 >> 2] = $1; //@line 2177
          $$5156 = _snprintf($$3169, $$3147168, 3559, $vararg_buffer12) | 0; //@line 2179
          break;
         }
        case 7:
         {
          HEAP32[$vararg_buffer15 >> 2] = $1; //@line 2183
          $$5156 = _snprintf($$3169, $$3147168, 3574, $vararg_buffer15) | 0; //@line 2185
          break;
         }
        default:
         {
          $$5156 = _snprintf($$3169, $$3147168, 3589, $vararg_buffer18) | 0; //@line 2190
         }
        }
        $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 2194
        $168 = $$3169 + $$5156$ | 0; //@line 2196
        $169 = $$3147168 - $$5156$ | 0; //@line 2197
        if (($$5156$ | 0) > 0 & ($169 | 0) > 0) {
         $AsyncCtx56 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2201
         $171 = _vsnprintf($168, $169, $2, $3) | 0; //@line 2202
         if (___async) {
          HEAP32[$AsyncCtx56 >> 2] = 71; //@line 2205
          HEAP32[$AsyncCtx56 + 4 >> 2] = $169; //@line 2207
          HEAP32[$AsyncCtx56 + 8 >> 2] = $168; //@line 2209
          HEAP32[$AsyncCtx56 + 12 >> 2] = $vararg_buffer20; //@line 2211
          HEAP32[$AsyncCtx56 + 16 >> 2] = $vararg_buffer20; //@line 2213
          HEAP32[$AsyncCtx56 + 20 >> 2] = $vararg_buffer23; //@line 2215
          HEAP32[$AsyncCtx56 + 24 >> 2] = $vararg_buffer23; //@line 2217
          HEAP8[$AsyncCtx56 + 28 >> 0] = $$1$off0 & 1; //@line 2220
          sp = STACKTOP; //@line 2221
          STACKTOP = sp; //@line 2222
          return;
         }
         _emscripten_free_async_context($AsyncCtx56 | 0); //@line 2224
         $$13 = ($171 | 0) >= ($169 | 0) ? 0 : $171; //@line 2226
         $181 = $168 + $$13 | 0; //@line 2228
         $182 = $169 - $$13 | 0; //@line 2229
         if (($$13 | 0) > 0) {
          $184 = HEAP32[132] | 0; //@line 2232
          do {
           if (($182 | 0) > 0 & ($184 | 0) != 0) {
            $AsyncCtx42 = _emscripten_alloc_async_context(32, sp) | 0; //@line 2237
            $186 = FUNCTION_TABLE_i[$184 & 0]() | 0; //@line 2238
            if (___async) {
             HEAP32[$AsyncCtx42 >> 2] = 72; //@line 2241
             HEAP32[$AsyncCtx42 + 4 >> 2] = $vararg_buffer20; //@line 2243
             HEAP32[$AsyncCtx42 + 8 >> 2] = $181; //@line 2245
             HEAP32[$AsyncCtx42 + 12 >> 2] = $182; //@line 2247
             HEAP32[$AsyncCtx42 + 16 >> 2] = $vararg_buffer20; //@line 2249
             HEAP8[$AsyncCtx42 + 20 >> 0] = $$1$off0 & 1; //@line 2252
             HEAP32[$AsyncCtx42 + 24 >> 2] = $vararg_buffer23; //@line 2254
             HEAP32[$AsyncCtx42 + 28 >> 2] = $vararg_buffer23; //@line 2256
             sp = STACKTOP; //@line 2257
             STACKTOP = sp; //@line 2258
             return;
            } else {
             _emscripten_free_async_context($AsyncCtx42 | 0); //@line 2260
             HEAP32[$vararg_buffer20 >> 2] = $186; //@line 2261
             $194 = _snprintf($181, $182, 3526, $vararg_buffer20) | 0; //@line 2262
             $$18 = ($194 | 0) >= ($182 | 0) ? 0 : $194; //@line 2264
             if (($$18 | 0) > 0) {
              $$6 = $181 + $$18 | 0; //@line 2269
              $$6150 = $182 - $$18 | 0; //@line 2269
              $$9 = $$18; //@line 2269
              break;
             } else {
              break L54;
             }
            }
           } else {
            $$6 = $181; //@line 2276
            $$6150 = $182; //@line 2276
            $$9 = $$13; //@line 2276
           }
          } while (0);
          if (!(($$9 | 0) < 1 | ($$6150 | 0) < 1 | $$1$off0 ^ 1)) {
           _snprintf($$6, $$6150, 3604, $vararg_buffer23) | 0; //@line 2285
          }
         }
        }
       }
      } while (0);
      $201 = HEAP32[133] | 0; //@line 2291
      $202 = HEAP32[126] | 0; //@line 2292
      $AsyncCtx45 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2293
      FUNCTION_TABLE_vi[$201 & 511]($202); //@line 2294
      if (___async) {
       HEAP32[$AsyncCtx45 >> 2] = 73; //@line 2297
       sp = STACKTOP; //@line 2298
       STACKTOP = sp; //@line 2299
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx45 | 0); //@line 2301
       break;
      }
     }
    } while (0);
    HEAP32[130] = HEAP32[128]; //@line 2307
   }
  }
 } while (0);
 $204 = HEAP32[136] | 0; //@line 2311
 if (!$204) {
  STACKTOP = sp; //@line 2314
  return;
 }
 $206 = HEAP32[137] | 0; //@line 2316
 HEAP32[137] = 0; //@line 2317
 $AsyncCtx49 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2318
 FUNCTION_TABLE_v[$204 & 7](); //@line 2319
 if (___async) {
  HEAP32[$AsyncCtx49 >> 2] = 74; //@line 2322
  HEAP32[$AsyncCtx49 + 4 >> 2] = $206; //@line 2324
  sp = STACKTOP; //@line 2325
  STACKTOP = sp; //@line 2326
  return;
 }
 _emscripten_free_async_context($AsyncCtx49 | 0); //@line 2328
 if (($206 | 0) > 1) {
  $$0199 = $206; //@line 2331
 } else {
  STACKTOP = sp; //@line 2333
  return;
 }
 while (1) {
  $209 = $$0199 + -1 | 0; //@line 2336
  $$pre = HEAP32[136] | 0; //@line 2337
  $AsyncCtx52 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2338
  FUNCTION_TABLE_v[$$pre & 7](); //@line 2339
  if (___async) {
   label = 70; //@line 2342
   break;
  }
  _emscripten_free_async_context($AsyncCtx52 | 0); //@line 2345
  if (($$0199 | 0) > 2) {
   $$0199 = $209; //@line 2348
  } else {
   label = 72; //@line 2350
   break;
  }
 }
 if ((label | 0) == 70) {
  HEAP32[$AsyncCtx52 >> 2] = 75; //@line 2355
  HEAP32[$AsyncCtx52 + 4 >> 2] = $$0199; //@line 2357
  HEAP32[$AsyncCtx52 + 8 >> 2] = $209; //@line 2359
  sp = STACKTOP; //@line 2360
  STACKTOP = sp; //@line 2361
  return;
 } else if ((label | 0) == 72) {
  STACKTOP = sp; //@line 2364
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_70($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $101 = 0, $104 = 0, $111 = 0, $113 = 0, $114 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $148 = 0, $149 = 0, $151 = 0, $153 = 0, $16 = 0, $161 = 0, $164 = 0, $166 = 0, $174 = 0, $177 = 0, $179 = 0, $18 = 0, $187 = 0, $190 = 0, $192 = 0, $2 = 0, $20 = 0, $205 = 0, $206 = 0, $207 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $86 = 0, $87 = 0, $95 = 0, $98 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1588
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1590
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1592
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1594
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1596
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1598
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1600
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1602
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1604
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1606
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1608
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1610
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 1612
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 1614
 $27 = $26 + 12 | 0; //@line 1615
 $28 = HEAP32[$27 >> 2] | 0; //@line 1616
 if ($28 | 0) {
  $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 1620
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 1621
  FUNCTION_TABLE_vii[$31 & 7]($6, $26); //@line 1622
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 1625
   $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 1626
   HEAP32[$32 >> 2] = $2; //@line 1627
   $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 1628
   HEAP32[$33 >> 2] = $27; //@line 1629
   $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 1630
   HEAP32[$34 >> 2] = $4; //@line 1631
   $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 1632
   HEAP32[$35 >> 2] = $6; //@line 1633
   $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 1634
   HEAP32[$36 >> 2] = $8; //@line 1635
   $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 1636
   HEAP32[$37 >> 2] = $10; //@line 1637
   $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 1638
   HEAP32[$38 >> 2] = $12; //@line 1639
   $39 = $ReallocAsyncCtx3 + 32 | 0; //@line 1640
   HEAP32[$39 >> 2] = $14; //@line 1641
   $40 = $ReallocAsyncCtx3 + 36 | 0; //@line 1642
   HEAP32[$40 >> 2] = $16; //@line 1643
   $41 = $ReallocAsyncCtx3 + 40 | 0; //@line 1644
   HEAP32[$41 >> 2] = $18; //@line 1645
   $42 = $ReallocAsyncCtx3 + 44 | 0; //@line 1646
   HEAP32[$42 >> 2] = $20; //@line 1647
   $43 = $ReallocAsyncCtx3 + 48 | 0; //@line 1648
   HEAP32[$43 >> 2] = $22; //@line 1649
   $44 = $ReallocAsyncCtx3 + 52 | 0; //@line 1650
   HEAP32[$44 >> 2] = $24; //@line 1651
   sp = STACKTOP; //@line 1652
   return;
  }
  ___async_unwind = 0; //@line 1655
  HEAP32[$ReallocAsyncCtx3 >> 2] = 175; //@line 1656
  $32 = $ReallocAsyncCtx3 + 4 | 0; //@line 1657
  HEAP32[$32 >> 2] = $2; //@line 1658
  $33 = $ReallocAsyncCtx3 + 8 | 0; //@line 1659
  HEAP32[$33 >> 2] = $27; //@line 1660
  $34 = $ReallocAsyncCtx3 + 12 | 0; //@line 1661
  HEAP32[$34 >> 2] = $4; //@line 1662
  $35 = $ReallocAsyncCtx3 + 16 | 0; //@line 1663
  HEAP32[$35 >> 2] = $6; //@line 1664
  $36 = $ReallocAsyncCtx3 + 20 | 0; //@line 1665
  HEAP32[$36 >> 2] = $8; //@line 1666
  $37 = $ReallocAsyncCtx3 + 24 | 0; //@line 1667
  HEAP32[$37 >> 2] = $10; //@line 1668
  $38 = $ReallocAsyncCtx3 + 28 | 0; //@line 1669
  HEAP32[$38 >> 2] = $12; //@line 1670
  $39 = $ReallocAsyncCtx3 + 32 | 0; //@line 1671
  HEAP32[$39 >> 2] = $14; //@line 1672
  $40 = $ReallocAsyncCtx3 + 36 | 0; //@line 1673
  HEAP32[$40 >> 2] = $16; //@line 1674
  $41 = $ReallocAsyncCtx3 + 40 | 0; //@line 1675
  HEAP32[$41 >> 2] = $18; //@line 1676
  $42 = $ReallocAsyncCtx3 + 44 | 0; //@line 1677
  HEAP32[$42 >> 2] = $20; //@line 1678
  $43 = $ReallocAsyncCtx3 + 48 | 0; //@line 1679
  HEAP32[$43 >> 2] = $22; //@line 1680
  $44 = $ReallocAsyncCtx3 + 52 | 0; //@line 1681
  HEAP32[$44 >> 2] = $24; //@line 1682
  sp = STACKTOP; //@line 1683
  return;
 }
 HEAP32[$24 >> 2] = 0; //@line 1686
 $45 = $2 + 32 | 0; //@line 1687
 do {
  if (($45 | 0) != ($22 | 0)) {
   $47 = $2 + 44 | 0; //@line 1691
   $48 = HEAP32[$47 >> 2] | 0; //@line 1692
   if ($48 | 0) {
    $51 = HEAP32[$48 + 8 >> 2] | 0; //@line 1696
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 1697
    FUNCTION_TABLE_vi[$51 & 511]($45); //@line 1698
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 1701
     $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 1702
     HEAP32[$52 >> 2] = $2; //@line 1703
     $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 1704
     HEAP32[$53 >> 2] = $4; //@line 1705
     $54 = $ReallocAsyncCtx4 + 12 | 0; //@line 1706
     HEAP32[$54 >> 2] = $6; //@line 1707
     $55 = $ReallocAsyncCtx4 + 16 | 0; //@line 1708
     HEAP32[$55 >> 2] = $8; //@line 1709
     $56 = $ReallocAsyncCtx4 + 20 | 0; //@line 1710
     HEAP32[$56 >> 2] = $45; //@line 1711
     $57 = $ReallocAsyncCtx4 + 24 | 0; //@line 1712
     HEAP32[$57 >> 2] = $10; //@line 1713
     $58 = $ReallocAsyncCtx4 + 28 | 0; //@line 1714
     HEAP32[$58 >> 2] = $12; //@line 1715
     $59 = $ReallocAsyncCtx4 + 32 | 0; //@line 1716
     HEAP32[$59 >> 2] = $14; //@line 1717
     $60 = $ReallocAsyncCtx4 + 36 | 0; //@line 1718
     HEAP32[$60 >> 2] = $16; //@line 1719
     $61 = $ReallocAsyncCtx4 + 40 | 0; //@line 1720
     HEAP32[$61 >> 2] = $18; //@line 1721
     $62 = $ReallocAsyncCtx4 + 44 | 0; //@line 1722
     HEAP32[$62 >> 2] = $20; //@line 1723
     $63 = $ReallocAsyncCtx4 + 48 | 0; //@line 1724
     HEAP32[$63 >> 2] = $47; //@line 1725
     $64 = $ReallocAsyncCtx4 + 52 | 0; //@line 1726
     HEAP32[$64 >> 2] = $22; //@line 1727
     sp = STACKTOP; //@line 1728
     return;
    }
    ___async_unwind = 0; //@line 1731
    HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 1732
    $52 = $ReallocAsyncCtx4 + 4 | 0; //@line 1733
    HEAP32[$52 >> 2] = $2; //@line 1734
    $53 = $ReallocAsyncCtx4 + 8 | 0; //@line 1735
    HEAP32[$53 >> 2] = $4; //@line 1736
    $54 = $ReallocAsyncCtx4 + 12 | 0; //@line 1737
    HEAP32[$54 >> 2] = $6; //@line 1738
    $55 = $ReallocAsyncCtx4 + 16 | 0; //@line 1739
    HEAP32[$55 >> 2] = $8; //@line 1740
    $56 = $ReallocAsyncCtx4 + 20 | 0; //@line 1741
    HEAP32[$56 >> 2] = $45; //@line 1742
    $57 = $ReallocAsyncCtx4 + 24 | 0; //@line 1743
    HEAP32[$57 >> 2] = $10; //@line 1744
    $58 = $ReallocAsyncCtx4 + 28 | 0; //@line 1745
    HEAP32[$58 >> 2] = $12; //@line 1746
    $59 = $ReallocAsyncCtx4 + 32 | 0; //@line 1747
    HEAP32[$59 >> 2] = $14; //@line 1748
    $60 = $ReallocAsyncCtx4 + 36 | 0; //@line 1749
    HEAP32[$60 >> 2] = $16; //@line 1750
    $61 = $ReallocAsyncCtx4 + 40 | 0; //@line 1751
    HEAP32[$61 >> 2] = $18; //@line 1752
    $62 = $ReallocAsyncCtx4 + 44 | 0; //@line 1753
    HEAP32[$62 >> 2] = $20; //@line 1754
    $63 = $ReallocAsyncCtx4 + 48 | 0; //@line 1755
    HEAP32[$63 >> 2] = $47; //@line 1756
    $64 = $ReallocAsyncCtx4 + 52 | 0; //@line 1757
    HEAP32[$64 >> 2] = $22; //@line 1758
    sp = STACKTOP; //@line 1759
    return;
   }
   $65 = $22 + 12 | 0; //@line 1762
   $66 = HEAP32[$65 >> 2] | 0; //@line 1763
   if (!$66) {
    HEAP32[$47 >> 2] = 0; //@line 1766
    break;
   }
   $69 = HEAP32[$66 + 4 >> 2] | 0; //@line 1770
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 1771
   FUNCTION_TABLE_vii[$69 & 7]($45, $22); //@line 1772
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 1775
    $70 = $ReallocAsyncCtx5 + 4 | 0; //@line 1776
    HEAP32[$70 >> 2] = $2; //@line 1777
    $71 = $ReallocAsyncCtx5 + 8 | 0; //@line 1778
    HEAP32[$71 >> 2] = $4; //@line 1779
    $72 = $ReallocAsyncCtx5 + 12 | 0; //@line 1780
    HEAP32[$72 >> 2] = $6; //@line 1781
    $73 = $ReallocAsyncCtx5 + 16 | 0; //@line 1782
    HEAP32[$73 >> 2] = $8; //@line 1783
    $74 = $ReallocAsyncCtx5 + 20 | 0; //@line 1784
    HEAP32[$74 >> 2] = $45; //@line 1785
    $75 = $ReallocAsyncCtx5 + 24 | 0; //@line 1786
    HEAP32[$75 >> 2] = $10; //@line 1787
    $76 = $ReallocAsyncCtx5 + 28 | 0; //@line 1788
    HEAP32[$76 >> 2] = $12; //@line 1789
    $77 = $ReallocAsyncCtx5 + 32 | 0; //@line 1790
    HEAP32[$77 >> 2] = $14; //@line 1791
    $78 = $ReallocAsyncCtx5 + 36 | 0; //@line 1792
    HEAP32[$78 >> 2] = $16; //@line 1793
    $79 = $ReallocAsyncCtx5 + 40 | 0; //@line 1794
    HEAP32[$79 >> 2] = $18; //@line 1795
    $80 = $ReallocAsyncCtx5 + 44 | 0; //@line 1796
    HEAP32[$80 >> 2] = $20; //@line 1797
    $81 = $ReallocAsyncCtx5 + 48 | 0; //@line 1798
    HEAP32[$81 >> 2] = $47; //@line 1799
    $82 = $ReallocAsyncCtx5 + 52 | 0; //@line 1800
    HEAP32[$82 >> 2] = $65; //@line 1801
    sp = STACKTOP; //@line 1802
    return;
   }
   ___async_unwind = 0; //@line 1805
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 1806
   $70 = $ReallocAsyncCtx5 + 4 | 0; //@line 1807
   HEAP32[$70 >> 2] = $2; //@line 1808
   $71 = $ReallocAsyncCtx5 + 8 | 0; //@line 1809
   HEAP32[$71 >> 2] = $4; //@line 1810
   $72 = $ReallocAsyncCtx5 + 12 | 0; //@line 1811
   HEAP32[$72 >> 2] = $6; //@line 1812
   $73 = $ReallocAsyncCtx5 + 16 | 0; //@line 1813
   HEAP32[$73 >> 2] = $8; //@line 1814
   $74 = $ReallocAsyncCtx5 + 20 | 0; //@line 1815
   HEAP32[$74 >> 2] = $45; //@line 1816
   $75 = $ReallocAsyncCtx5 + 24 | 0; //@line 1817
   HEAP32[$75 >> 2] = $10; //@line 1818
   $76 = $ReallocAsyncCtx5 + 28 | 0; //@line 1819
   HEAP32[$76 >> 2] = $12; //@line 1820
   $77 = $ReallocAsyncCtx5 + 32 | 0; //@line 1821
   HEAP32[$77 >> 2] = $14; //@line 1822
   $78 = $ReallocAsyncCtx5 + 36 | 0; //@line 1823
   HEAP32[$78 >> 2] = $16; //@line 1824
   $79 = $ReallocAsyncCtx5 + 40 | 0; //@line 1825
   HEAP32[$79 >> 2] = $18; //@line 1826
   $80 = $ReallocAsyncCtx5 + 44 | 0; //@line 1827
   HEAP32[$80 >> 2] = $20; //@line 1828
   $81 = $ReallocAsyncCtx5 + 48 | 0; //@line 1829
   HEAP32[$81 >> 2] = $47; //@line 1830
   $82 = $ReallocAsyncCtx5 + 52 | 0; //@line 1831
   HEAP32[$82 >> 2] = $65; //@line 1832
   sp = STACKTOP; //@line 1833
   return;
  }
 } while (0);
 HEAP32[$2 + 8 >> 2] = $4; //@line 1838
 HEAP32[$2 + 48 >> 2] = $18; //@line 1840
 HEAP32[$2 + 52 >> 2] = $20; //@line 1842
 $86 = $2 + 56 | 0; //@line 1843
 HEAP32[$86 >> 2] = 0; //@line 1844
 $87 = $2 + 60 | 0; //@line 1845
 HEAP32[$87 >> 2] = 0; //@line 1846
 HEAP32[$2 + 64 >> 2] = 0; //@line 1848
 HEAP8[$2 + 82 >> 0] = 0; //@line 1850
 HEAP8[$2 + 83 >> 0] = 1; //@line 1852
 HEAP8[$2 + 84 >> 0] = 3; //@line 1854
 HEAP8[$2 + 85 >> 0] = 0; //@line 1856
 HEAP16[$2 + 80 >> 1] = 0; //@line 1858
 HEAP32[$2 + 76 >> 2] = 0; //@line 1860
 $95 = $2 + 72 | 0; //@line 1861
 HEAP32[$95 >> 2] = 15500; //@line 1862
 HEAP8[$2 + 86 >> 0] = 0; //@line 1864
 HEAP32[$2 + 88 >> 2] = 0; //@line 1866
 $98 = HEAP32[187] | 0; //@line 1867
 HEAP32[187] = $98 + 1; //@line 1869
 HEAP32[$2 >> 2] = ($98 | 0) > 32767 ? 1 : $98; //@line 1872
 $101 = HEAP32[1949] | 0; //@line 1873
 if (!$101) {
  $$1 = 0; //@line 1876
  $151 = 0; //@line 1876
 } else {
  $104 = HEAP32[$101 + 56 >> 2] | 0; //@line 1879
  if (!$104) {
   $$1 = 1; //@line 1882
   $151 = 0; //@line 1882
  } else {
   if ((HEAP32[$101 + 8 >> 2] | 0) == ($4 | 0)) {
    HEAP32[$86 >> 2] = $104; //@line 1888
    HEAP32[$87 >> 2] = HEAP32[$101 + 60 >> 2]; //@line 1891
    $$1 = 1; //@line 1892
    $151 = $104; //@line 1892
   } else {
    $$1 = 1; //@line 1894
    $151 = 0; //@line 1894
   }
  }
 }
 $111 = HEAP32[1950] | 0; //@line 1898
 if (!$111) {
  $$1$1 = $$1; //@line 1901
  $164 = $151; //@line 1901
 } else {
  if (!$151) {
   $153 = HEAP32[$111 + 56 >> 2] | 0; //@line 1906
   if (!$153) {
    $205 = 0; //@line 1909
   } else {
    if ((HEAP32[$111 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$86 >> 2] = $153; //@line 1915
     HEAP32[$87 >> 2] = HEAP32[$111 + 60 >> 2]; //@line 1918
     $205 = $153; //@line 1919
    } else {
     $205 = 0; //@line 1921
    }
   }
  } else {
   $205 = $151; //@line 1925
  }
  $$1$1 = $$1 + 1 | 0; //@line 1928
  $164 = $205; //@line 1928
 }
 $161 = HEAP32[1951] | 0; //@line 1930
 if (!$161) {
  $$1$2 = $$1$1; //@line 1933
  $177 = $164; //@line 1933
 } else {
  if (!$164) {
   $166 = HEAP32[$161 + 56 >> 2] | 0; //@line 1938
   if (!$166) {
    $206 = 0; //@line 1941
   } else {
    if ((HEAP32[$161 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$86 >> 2] = $166; //@line 1947
     HEAP32[$87 >> 2] = HEAP32[$161 + 60 >> 2]; //@line 1950
     $206 = $166; //@line 1951
    } else {
     $206 = 0; //@line 1953
    }
   }
  } else {
   $206 = $164; //@line 1957
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 1960
  $177 = $206; //@line 1960
 }
 $174 = HEAP32[1952] | 0; //@line 1962
 if (!$174) {
  $$1$3 = $$1$2; //@line 1965
  $190 = $177; //@line 1965
 } else {
  if (!$177) {
   $179 = HEAP32[$174 + 56 >> 2] | 0; //@line 1970
   if (!$179) {
    $207 = 0; //@line 1973
   } else {
    if ((HEAP32[$174 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$86 >> 2] = $179; //@line 1979
     HEAP32[$87 >> 2] = HEAP32[$174 + 60 >> 2]; //@line 1982
     $207 = $179; //@line 1983
    } else {
     $207 = 0; //@line 1985
    }
   }
  } else {
   $207 = $177; //@line 1989
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 1992
  $190 = $207; //@line 1992
 }
 $187 = HEAP32[1953] | 0; //@line 1994
 if (!$187) {
  $$1$4 = $$1$3; //@line 1997
 } else {
  if (!$190) {
   $192 = HEAP32[$187 + 56 >> 2] | 0; //@line 2002
   if ($192 | 0) {
    if ((HEAP32[$187 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$86 >> 2] = $192; //@line 2009
     HEAP32[$87 >> 2] = HEAP32[$187 + 60 >> 2]; //@line 2012
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 2017
 }
 HEAP32[7796 + ($8 << 2) >> 2] = $2; //@line 2020
 HEAP32[$95 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 2023
 if (HEAP8[8676] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 2027
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 2028
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 2031
   $148 = $ReallocAsyncCtx13 + 4 | 0; //@line 2032
   HEAP32[$148 >> 2] = $2; //@line 2033
   $149 = $ReallocAsyncCtx13 + 8 | 0; //@line 2034
   HEAP32[$149 >> 2] = $14; //@line 2035
   sp = STACKTOP; //@line 2036
   return;
  }
  ___async_unwind = 0; //@line 2039
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 2040
  $148 = $ReallocAsyncCtx13 + 4 | 0; //@line 2041
  HEAP32[$148 >> 2] = $2; //@line 2042
  $149 = $ReallocAsyncCtx13 + 8 | 0; //@line 2043
  HEAP32[$149 >> 2] = $14; //@line 2044
  sp = STACKTOP; //@line 2045
  return;
 }
 $113 = $2 + 44 | 0; //@line 2048
 $114 = HEAP32[$113 >> 2] | 0; //@line 2049
 if (!$114) {
  $128 = $12 + 12 | 0; //@line 2052
  HEAP32[$128 >> 2] = 0; //@line 2053
  $130 = $16 + 4 | 0; //@line 2055
  HEAP32[$130 >> 2] = 0; //@line 2057
  HEAP32[$130 + 4 >> 2] = 0; //@line 2060
  HEAP32[$16 >> 2] = 3; //@line 2061
  $134 = $16 + 12 | 0; //@line 2062
  HEAP32[$134 >> 2] = 752; //@line 2063
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 2064
  $135 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($12, 100, $16) | 0; //@line 2065
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 2068
   $136 = $ReallocAsyncCtx14 + 4 | 0; //@line 2069
   HEAP32[$136 >> 2] = $2; //@line 2070
   $137 = $ReallocAsyncCtx14 + 8 | 0; //@line 2071
   HEAP32[$137 >> 2] = $6; //@line 2072
   $138 = $ReallocAsyncCtx14 + 12 | 0; //@line 2073
   HEAP32[$138 >> 2] = $14; //@line 2074
   $139 = $ReallocAsyncCtx14 + 16 | 0; //@line 2075
   HEAP32[$139 >> 2] = $45; //@line 2076
   $140 = $ReallocAsyncCtx14 + 20 | 0; //@line 2077
   HEAP32[$140 >> 2] = $113; //@line 2078
   $141 = $ReallocAsyncCtx14 + 24 | 0; //@line 2079
   HEAP32[$141 >> 2] = $10; //@line 2080
   $142 = $ReallocAsyncCtx14 + 28 | 0; //@line 2081
   HEAP32[$142 >> 2] = $2; //@line 2082
   $143 = $ReallocAsyncCtx14 + 32 | 0; //@line 2083
   HEAP32[$143 >> 2] = $12; //@line 2084
   $144 = $ReallocAsyncCtx14 + 36 | 0; //@line 2085
   HEAP32[$144 >> 2] = $128; //@line 2086
   $145 = $ReallocAsyncCtx14 + 40 | 0; //@line 2087
   HEAP32[$145 >> 2] = $16; //@line 2088
   $146 = $ReallocAsyncCtx14 + 44 | 0; //@line 2089
   HEAP32[$146 >> 2] = $134; //@line 2090
   sp = STACKTOP; //@line 2091
   return;
  }
  HEAP32[___async_retval >> 2] = $135; //@line 2095
  ___async_unwind = 0; //@line 2096
  HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 2097
  $136 = $ReallocAsyncCtx14 + 4 | 0; //@line 2098
  HEAP32[$136 >> 2] = $2; //@line 2099
  $137 = $ReallocAsyncCtx14 + 8 | 0; //@line 2100
  HEAP32[$137 >> 2] = $6; //@line 2101
  $138 = $ReallocAsyncCtx14 + 12 | 0; //@line 2102
  HEAP32[$138 >> 2] = $14; //@line 2103
  $139 = $ReallocAsyncCtx14 + 16 | 0; //@line 2104
  HEAP32[$139 >> 2] = $45; //@line 2105
  $140 = $ReallocAsyncCtx14 + 20 | 0; //@line 2106
  HEAP32[$140 >> 2] = $113; //@line 2107
  $141 = $ReallocAsyncCtx14 + 24 | 0; //@line 2108
  HEAP32[$141 >> 2] = $10; //@line 2109
  $142 = $ReallocAsyncCtx14 + 28 | 0; //@line 2110
  HEAP32[$142 >> 2] = $2; //@line 2111
  $143 = $ReallocAsyncCtx14 + 32 | 0; //@line 2112
  HEAP32[$143 >> 2] = $12; //@line 2113
  $144 = $ReallocAsyncCtx14 + 36 | 0; //@line 2114
  HEAP32[$144 >> 2] = $128; //@line 2115
  $145 = $ReallocAsyncCtx14 + 40 | 0; //@line 2116
  HEAP32[$145 >> 2] = $16; //@line 2117
  $146 = $ReallocAsyncCtx14 + 44 | 0; //@line 2118
  HEAP32[$146 >> 2] = $134; //@line 2119
  sp = STACKTOP; //@line 2120
  return;
 } else {
  $117 = HEAP32[$114 + 4 >> 2] | 0; //@line 2124
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 2125
  FUNCTION_TABLE_vii[$117 & 7]($12, $45); //@line 2126
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 2129
   $118 = $ReallocAsyncCtx6 + 4 | 0; //@line 2130
   HEAP32[$118 >> 2] = $2; //@line 2131
   $119 = $ReallocAsyncCtx6 + 8 | 0; //@line 2132
   HEAP32[$119 >> 2] = $6; //@line 2133
   $120 = $ReallocAsyncCtx6 + 12 | 0; //@line 2134
   HEAP32[$120 >> 2] = $45; //@line 2135
   $121 = $ReallocAsyncCtx6 + 16 | 0; //@line 2136
   HEAP32[$121 >> 2] = $113; //@line 2137
   $122 = $ReallocAsyncCtx6 + 20 | 0; //@line 2138
   HEAP32[$122 >> 2] = $10; //@line 2139
   $123 = $ReallocAsyncCtx6 + 24 | 0; //@line 2140
   HEAP32[$123 >> 2] = $12; //@line 2141
   $124 = $ReallocAsyncCtx6 + 28 | 0; //@line 2142
   HEAP32[$124 >> 2] = $14; //@line 2143
   $125 = $ReallocAsyncCtx6 + 32 | 0; //@line 2144
   HEAP32[$125 >> 2] = $16; //@line 2145
   $126 = $ReallocAsyncCtx6 + 36 | 0; //@line 2146
   HEAP32[$126 >> 2] = $2; //@line 2147
   $127 = $ReallocAsyncCtx6 + 40 | 0; //@line 2148
   HEAP32[$127 >> 2] = $113; //@line 2149
   sp = STACKTOP; //@line 2150
   return;
  }
  ___async_unwind = 0; //@line 2153
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 2154
  $118 = $ReallocAsyncCtx6 + 4 | 0; //@line 2155
  HEAP32[$118 >> 2] = $2; //@line 2156
  $119 = $ReallocAsyncCtx6 + 8 | 0; //@line 2157
  HEAP32[$119 >> 2] = $6; //@line 2158
  $120 = $ReallocAsyncCtx6 + 12 | 0; //@line 2159
  HEAP32[$120 >> 2] = $45; //@line 2160
  $121 = $ReallocAsyncCtx6 + 16 | 0; //@line 2161
  HEAP32[$121 >> 2] = $113; //@line 2162
  $122 = $ReallocAsyncCtx6 + 20 | 0; //@line 2163
  HEAP32[$122 >> 2] = $10; //@line 2164
  $123 = $ReallocAsyncCtx6 + 24 | 0; //@line 2165
  HEAP32[$123 >> 2] = $12; //@line 2166
  $124 = $ReallocAsyncCtx6 + 28 | 0; //@line 2167
  HEAP32[$124 >> 2] = $14; //@line 2168
  $125 = $ReallocAsyncCtx6 + 32 | 0; //@line 2169
  HEAP32[$125 >> 2] = $16; //@line 2170
  $126 = $ReallocAsyncCtx6 + 36 | 0; //@line 2171
  HEAP32[$126 >> 2] = $2; //@line 2172
  $127 = $ReallocAsyncCtx6 + 40 | 0; //@line 2173
  HEAP32[$127 >> 2] = $113; //@line 2174
  sp = STACKTOP; //@line 2175
  return;
 }
}
function __ZL28nsapi_dns_query_async_createPv($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $$pr$i = 0, $$pr$i72 = 0, $$pre85 = 0, $1 = 0, $104 = 0, $106 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $125 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $132 = 0, $14 = 0, $143 = 0, $144 = 0, $147 = 0, $15 = 0, $157 = 0, $161 = 0, $163 = 0, $164 = 0, $170 = 0, $173 = 0, $177 = 0, $181 = 0, $189 = 0, $195 = 0, $2 = 0, $20 = 0, $203 = 0, $209 = 0, $217 = 0, $220 = 0, $222 = 0, $232 = 0, $236 = 0, $240 = 0, $244 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $52 = 0, $53 = 0, $57 = 0, $62 = 0, $63 = 0, $64 = 0, $69 = 0, $71 = 0, $76 = 0, $8 = 0, $80 = 0, $84 = 0, $85 = 0, $89 = 0, $95 = 0, $96 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx28 = 0, $AsyncCtx32 = 0, $AsyncCtx36 = 0, $AsyncCtx39 = 0, $AsyncCtx42 = 0, $AsyncCtx45 = 0, $AsyncCtx48 = 0, $AsyncCtx51 = 0, $AsyncCtx54 = 0, $AsyncCtx57 = 0, $AsyncCtx6 = 0, $AsyncCtx61 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9690
 STACKTOP = STACKTOP + 32 | 0; //@line 9691
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9691
 $1 = sp + 16 | 0; //@line 9692
 $2 = sp; //@line 9693
 $3 = $0; //@line 9694
 $4 = HEAP32[1949] | 0; //@line 9695
 $5 = ($4 | 0) == 0; //@line 9696
 if ($5) {
  label = 3; //@line 9698
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa = $4; //@line 9703
  } else {
   label = 3; //@line 9705
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1950] | 0; //@line 9710
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $8; //@line 9716
     break;
    }
   }
   $232 = HEAP32[1951] | 0; //@line 9720
   if ($232 | 0) {
    if ((HEAP32[$232 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $232; //@line 9726
     break;
    }
   }
   $236 = HEAP32[1952] | 0; //@line 9730
   if ($236 | 0) {
    if ((HEAP32[$236 >> 2] | 0) == ($3 | 0)) {
     $$lcssa = $236; //@line 9736
     break;
    }
   }
   $240 = HEAP32[1953] | 0; //@line 9740
   if (!$240) {
    STACKTOP = sp; //@line 9743
    return;
   }
   if ((HEAP32[$240 >> 2] | 0) == ($3 | 0)) {
    $$lcssa = $240; //@line 9748
   } else {
    STACKTOP = sp; //@line 9750
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 2) {
  STACKTOP = sp; //@line 9758
  return;
 }
 $13 = $$lcssa + 56 | 0; //@line 9760
 $14 = $$lcssa + 8 | 0; //@line 9761
 $15 = $$lcssa + 60 | 0; //@line 9762
 if (!($5 | ($4 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $20 = HEAP32[$4 + 56 >> 2] | 0; //@line 9770
   if ($20 | 0) {
    if ((HEAP32[$4 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $20; //@line 9778
     HEAP32[$15 >> 2] = HEAP32[$4 + 60 >> 2]; //@line 9781
    }
   }
  }
 }
 $28 = HEAP32[1950] | 0; //@line 9786
 if (!(($28 | 0) == 0 | ($28 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $181 = HEAP32[$28 + 56 >> 2] | 0; //@line 9795
   if ($181 | 0) {
    if ((HEAP32[$28 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $181; //@line 9803
     HEAP32[$15 >> 2] = HEAP32[$28 + 60 >> 2]; //@line 9806
    }
   }
  }
 }
 $189 = HEAP32[1951] | 0; //@line 9811
 if (!(($189 | 0) == 0 | ($189 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $195 = HEAP32[$189 + 56 >> 2] | 0; //@line 9820
   if ($195 | 0) {
    if ((HEAP32[$189 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $195; //@line 9828
     HEAP32[$15 >> 2] = HEAP32[$189 + 60 >> 2]; //@line 9831
    }
   }
  }
 }
 $203 = HEAP32[1952] | 0; //@line 9836
 if (!(($203 | 0) == 0 | ($203 | 0) == ($$lcssa | 0))) {
  if (!(HEAP32[$13 >> 2] | 0)) {
   $209 = HEAP32[$203 + 56 >> 2] | 0; //@line 9845
   if ($209 | 0) {
    if ((HEAP32[$203 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $209; //@line 9853
     HEAP32[$15 >> 2] = HEAP32[$203 + 60 >> 2]; //@line 9856
    }
   }
  }
 }
 $217 = HEAP32[1953] | 0; //@line 9861
 $220 = (HEAP32[$13 >> 2] | 0) == 0; //@line 9866
 if (($217 | 0) == 0 | ($217 | 0) == ($$lcssa | 0)) {
  if ($220) {
   label = 11; //@line 9869
  }
 } else {
  if ($220) {
   $222 = HEAP32[$217 + 56 >> 2] | 0; //@line 9874
   if (!$222) {
    label = 11; //@line 9877
   } else {
    if ((HEAP32[$217 + 8 >> 2] | 0) == (HEAP32[$14 >> 2] | 0)) {
     HEAP32[$13 >> 2] = $222; //@line 9884
     HEAP32[$15 >> 2] = HEAP32[$217 + 60 >> 2]; //@line 9887
    } else {
     label = 11; //@line 9889
    }
   }
  }
 }
 if ((label | 0) == 11) {
  $AsyncCtx39 = _emscripten_alloc_async_context(32, sp) | 0; //@line 9895
  $31 = __ZnwjRKSt9nothrow_t(56, 9717) | 0; //@line 9896
  if (___async) {
   HEAP32[$AsyncCtx39 >> 2] = 212; //@line 9899
   HEAP32[$AsyncCtx39 + 4 >> 2] = $13; //@line 9901
   HEAP32[$AsyncCtx39 + 8 >> 2] = $$lcssa; //@line 9903
   HEAP32[$AsyncCtx39 + 12 >> 2] = $1; //@line 9905
   HEAP32[$AsyncCtx39 + 16 >> 2] = $15; //@line 9907
   HEAP32[$AsyncCtx39 + 20 >> 2] = $14; //@line 9909
   HEAP32[$AsyncCtx39 + 24 >> 2] = $2; //@line 9911
   HEAP32[$AsyncCtx39 + 28 >> 2] = $1; //@line 9913
   sp = STACKTOP; //@line 9914
   STACKTOP = sp; //@line 9915
   return;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 9917
  if (!$31) {
   $52 = $$lcssa + 28 | 0; //@line 9920
   $53 = HEAP32[$52 >> 2] | 0; //@line 9921
   do {
    if (!$53) {
     $63 = 0; //@line 9925
    } else {
     $57 = HEAP32[$53 + 4 >> 2] | 0; //@line 9929
     $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9930
     FUNCTION_TABLE_vii[$57 & 7]($1, $$lcssa + 16 | 0); //@line 9931
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 214; //@line 9934
      HEAP32[$AsyncCtx + 4 >> 2] = $52; //@line 9936
      HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 9938
      HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa; //@line 9940
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9942
      sp = STACKTOP; //@line 9943
      STACKTOP = sp; //@line 9944
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 9946
      $63 = HEAP32[$52 >> 2] | 0; //@line 9948
      break;
     }
    }
   } while (0);
   $62 = $1 + 12 | 0; //@line 9953
   HEAP32[$62 >> 2] = $63; //@line 9954
   $64 = HEAP32[$$lcssa >> 2] | 0; //@line 9955
   $AsyncCtx48 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9956
   __ZL28nsapi_dns_query_async_deletei($64); //@line 9957
   if (___async) {
    HEAP32[$AsyncCtx48 >> 2] = 215; //@line 9960
    HEAP32[$AsyncCtx48 + 4 >> 2] = $62; //@line 9962
    HEAP32[$AsyncCtx48 + 8 >> 2] = $1; //@line 9964
    sp = STACKTOP; //@line 9965
    STACKTOP = sp; //@line 9966
    return;
   }
   _emscripten_free_async_context($AsyncCtx48 | 0); //@line 9968
   $AsyncCtx54 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9969
   __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9970
   if (___async) {
    HEAP32[$AsyncCtx54 >> 2] = 216; //@line 9973
    HEAP32[$AsyncCtx54 + 4 >> 2] = $62; //@line 9975
    HEAP32[$AsyncCtx54 + 8 >> 2] = $1; //@line 9977
    sp = STACKTOP; //@line 9978
    STACKTOP = sp; //@line 9979
    return;
   }
   _emscripten_free_async_context($AsyncCtx54 | 0); //@line 9981
   $69 = HEAP32[$62 >> 2] | 0; //@line 9982
   do {
    if ($69 | 0) {
     $71 = HEAP32[$69 >> 2] | 0; //@line 9986
     $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9987
     FUNCTION_TABLE_viii[$71 & 0]($1, -3007, 0); //@line 9988
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 217; //@line 9991
      HEAP32[$AsyncCtx2 + 4 >> 2] = $62; //@line 9993
      HEAP32[$AsyncCtx2 + 8 >> 2] = $1; //@line 9995
      sp = STACKTOP; //@line 9996
      STACKTOP = sp; //@line 9997
      return;
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 9999
     $$pr$i = HEAP32[$62 >> 2] | 0; //@line 10000
     if ($$pr$i | 0) {
      $76 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 10004
      $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10005
      FUNCTION_TABLE_vi[$76 & 511]($1); //@line 10006
      if (___async) {
       HEAP32[$AsyncCtx6 >> 2] = 218; //@line 10009
       HEAP32[$AsyncCtx6 + 4 >> 2] = $1; //@line 10011
       sp = STACKTOP; //@line 10012
       STACKTOP = sp; //@line 10013
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx6 | 0); //@line 10015
       break;
      }
     }
    }
   } while (0);
   STACKTOP = sp; //@line 10021
   return;
  }
  __ZN9UDPSocketC2Ev($31); //@line 10023
  $40 = HEAP32[$14 >> 2] | 0; //@line 10024
  $AsyncCtx61 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10025
  $41 = __ZN6Socket4openEP12NetworkStack($31, $40) | 0; //@line 10026
  if (___async) {
   HEAP32[$AsyncCtx61 >> 2] = 213; //@line 10029
   HEAP32[$AsyncCtx61 + 4 >> 2] = $13; //@line 10031
   HEAP32[$AsyncCtx61 + 8 >> 2] = $31; //@line 10033
   HEAP32[$AsyncCtx61 + 12 >> 2] = $$lcssa; //@line 10035
   HEAP32[$AsyncCtx61 + 16 >> 2] = $31; //@line 10037
   HEAP32[$AsyncCtx61 + 20 >> 2] = $15; //@line 10039
   HEAP32[$AsyncCtx61 + 24 >> 2] = $14; //@line 10041
   HEAP32[$AsyncCtx61 + 28 >> 2] = $2; //@line 10043
   HEAP32[$AsyncCtx61 + 32 >> 2] = $1; //@line 10045
   HEAP32[$AsyncCtx61 + 36 >> 2] = $31; //@line 10047
   sp = STACKTOP; //@line 10048
   STACKTOP = sp; //@line 10049
   return;
  }
  _emscripten_free_async_context($AsyncCtx61 | 0); //@line 10051
  if ($41 | 0) {
   $80 = HEAP32[(HEAP32[$31 >> 2] | 0) + 4 >> 2] | 0; //@line 10056
   $AsyncCtx9 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10057
   FUNCTION_TABLE_vi[$80 & 511]($31); //@line 10058
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 219; //@line 10061
    HEAP32[$AsyncCtx9 + 4 >> 2] = $$lcssa; //@line 10063
    HEAP32[$AsyncCtx9 + 8 >> 2] = $1; //@line 10065
    HEAP32[$AsyncCtx9 + 12 >> 2] = $41; //@line 10067
    sp = STACKTOP; //@line 10068
    STACKTOP = sp; //@line 10069
    return;
   }
   _emscripten_free_async_context($AsyncCtx9 | 0); //@line 10071
   $84 = $$lcssa + 28 | 0; //@line 10072
   $85 = HEAP32[$84 >> 2] | 0; //@line 10073
   do {
    if (!$85) {
     $96 = 0; //@line 10077
    } else {
     $89 = HEAP32[$85 + 4 >> 2] | 0; //@line 10081
     $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10082
     FUNCTION_TABLE_vii[$89 & 7]($1, $$lcssa + 16 | 0); //@line 10083
     if (___async) {
      HEAP32[$AsyncCtx13 >> 2] = 220; //@line 10086
      HEAP32[$AsyncCtx13 + 4 >> 2] = $84; //@line 10088
      HEAP32[$AsyncCtx13 + 8 >> 2] = $1; //@line 10090
      HEAP32[$AsyncCtx13 + 12 >> 2] = $$lcssa; //@line 10092
      HEAP32[$AsyncCtx13 + 16 >> 2] = $1; //@line 10094
      HEAP32[$AsyncCtx13 + 20 >> 2] = $41; //@line 10096
      sp = STACKTOP; //@line 10097
      STACKTOP = sp; //@line 10098
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx13 | 0); //@line 10100
      $96 = HEAP32[$84 >> 2] | 0; //@line 10102
      break;
     }
    }
   } while (0);
   $95 = $1 + 12 | 0; //@line 10107
   HEAP32[$95 >> 2] = $96; //@line 10108
   $97 = HEAP32[$$lcssa >> 2] | 0; //@line 10109
   $AsyncCtx45 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10110
   __ZL28nsapi_dns_query_async_deletei($97); //@line 10111
   if (___async) {
    HEAP32[$AsyncCtx45 >> 2] = 221; //@line 10114
    HEAP32[$AsyncCtx45 + 4 >> 2] = $95; //@line 10116
    HEAP32[$AsyncCtx45 + 8 >> 2] = $1; //@line 10118
    HEAP32[$AsyncCtx45 + 12 >> 2] = $41; //@line 10120
    sp = STACKTOP; //@line 10121
    STACKTOP = sp; //@line 10122
    return;
   }
   _emscripten_free_async_context($AsyncCtx45 | 0); //@line 10124
   $AsyncCtx51 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10125
   __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 10126
   if (___async) {
    HEAP32[$AsyncCtx51 >> 2] = 222; //@line 10129
    HEAP32[$AsyncCtx51 + 4 >> 2] = $95; //@line 10131
    HEAP32[$AsyncCtx51 + 8 >> 2] = $1; //@line 10133
    HEAP32[$AsyncCtx51 + 12 >> 2] = $41; //@line 10135
    sp = STACKTOP; //@line 10136
    STACKTOP = sp; //@line 10137
    return;
   }
   _emscripten_free_async_context($AsyncCtx51 | 0); //@line 10139
   $104 = HEAP32[$95 >> 2] | 0; //@line 10140
   do {
    if ($104 | 0) {
     $106 = HEAP32[$104 >> 2] | 0; //@line 10144
     $AsyncCtx16 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10145
     FUNCTION_TABLE_viii[$106 & 0]($1, $41, 0); //@line 10146
     if (___async) {
      HEAP32[$AsyncCtx16 >> 2] = 223; //@line 10149
      HEAP32[$AsyncCtx16 + 4 >> 2] = $95; //@line 10151
      HEAP32[$AsyncCtx16 + 8 >> 2] = $1; //@line 10153
      sp = STACKTOP; //@line 10154
      STACKTOP = sp; //@line 10155
      return;
     }
     _emscripten_free_async_context($AsyncCtx16 | 0); //@line 10157
     $$pr$i72 = HEAP32[$95 >> 2] | 0; //@line 10158
     if (!$$pr$i72) {
      break;
     }
     $111 = HEAP32[$$pr$i72 + 8 >> 2] | 0; //@line 10164
     $AsyncCtx20 = _emscripten_alloc_async_context(8, sp) | 0; //@line 10165
     FUNCTION_TABLE_vi[$111 & 511]($1); //@line 10166
     if (___async) {
      HEAP32[$AsyncCtx20 >> 2] = 224; //@line 10169
      HEAP32[$AsyncCtx20 + 4 >> 2] = $1; //@line 10171
      sp = STACKTOP; //@line 10172
      STACKTOP = sp; //@line 10173
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx20 | 0); //@line 10175
      break;
     }
    }
   } while (0);
   STACKTOP = sp; //@line 10180
   return;
  }
  __ZN6Socket11set_timeoutEi($31, 0); //@line 10182
  $113 = HEAP32[$15 >> 2] | 0; //@line 10183
  $115 = $113; //@line 10185
  do {
   if (!$113) {
    $AsyncCtx36 = _emscripten_alloc_async_context(32, sp) | 0; //@line 10188
    $116 = __Znwj(20) | 0; //@line 10189
    if (___async) {
     HEAP32[$AsyncCtx36 >> 2] = 225; //@line 10192
     HEAP32[$AsyncCtx36 + 4 >> 2] = $13; //@line 10194
     HEAP32[$AsyncCtx36 + 8 >> 2] = $31; //@line 10196
     HEAP32[$AsyncCtx36 + 12 >> 2] = $$lcssa; //@line 10198
     HEAP32[$AsyncCtx36 + 16 >> 2] = $15; //@line 10200
     HEAP32[$AsyncCtx36 + 20 >> 2] = $14; //@line 10202
     HEAP32[$AsyncCtx36 + 24 >> 2] = $2; //@line 10204
     HEAP32[$AsyncCtx36 + 28 >> 2] = $31; //@line 10206
     sp = STACKTOP; //@line 10207
     STACKTOP = sp; //@line 10208
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx36 | 0); //@line 10210
     HEAP32[$116 >> 2] = 0; //@line 10211
     HEAP32[$116 + 4 >> 2] = 0; //@line 10211
     HEAP32[$116 + 8 >> 2] = 0; //@line 10211
     HEAP32[$116 + 12 >> 2] = 0; //@line 10211
     HEAP32[$15 >> 2] = $116; //@line 10212
     $127 = $116; //@line 10214
     $244 = $116; //@line 10214
     break;
    }
   } else {
    $127 = $113; //@line 10218
    $244 = $115; //@line 10218
   }
  } while (0);
  $125 = $$lcssa + 32 | 0; //@line 10221
  if (($127 | 0) == ($125 | 0)) {
   $161 = $127; //@line 10224
   $163 = $244; //@line 10224
  } else {
   $128 = $127 + 12 | 0; //@line 10226
   $129 = HEAP32[$128 >> 2] | 0; //@line 10227
   do {
    if ($129 | 0) {
     $132 = HEAP32[$129 + 8 >> 2] | 0; //@line 10232
     $AsyncCtx24 = _emscripten_alloc_async_context(44, sp) | 0; //@line 10233
     FUNCTION_TABLE_vi[$132 & 511]($127); //@line 10234
     if (___async) {
      HEAP32[$AsyncCtx24 >> 2] = 226; //@line 10237
      HEAP32[$AsyncCtx24 + 4 >> 2] = $2; //@line 10239
      HEAP32[$AsyncCtx24 + 8 >> 2] = $13; //@line 10241
      HEAP32[$AsyncCtx24 + 12 >> 2] = $31; //@line 10243
      HEAP32[$AsyncCtx24 + 16 >> 2] = $$lcssa; //@line 10245
      HEAP32[$AsyncCtx24 + 20 >> 2] = $127; //@line 10247
      HEAP32[$AsyncCtx24 + 24 >> 2] = $125; //@line 10249
      HEAP32[$AsyncCtx24 + 28 >> 2] = $14; //@line 10251
      HEAP32[$AsyncCtx24 + 32 >> 2] = $31; //@line 10253
      HEAP32[$AsyncCtx24 + 36 >> 2] = $128; //@line 10255
      HEAP32[$AsyncCtx24 + 40 >> 2] = $15; //@line 10257
      sp = STACKTOP; //@line 10258
      STACKTOP = sp; //@line 10259
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx24 | 0); //@line 10261
      break;
     }
    }
   } while (0);
   $143 = $$lcssa + 44 | 0; //@line 10266
   $144 = HEAP32[$143 >> 2] | 0; //@line 10267
   do {
    if (!$144) {
     $157 = 0; //@line 10271
    } else {
     $147 = HEAP32[$144 + 4 >> 2] | 0; //@line 10274
     $AsyncCtx28 = _emscripten_alloc_async_context(40, sp) | 0; //@line 10275
     FUNCTION_TABLE_vii[$147 & 7]($127, $125); //@line 10276
     if (___async) {
      HEAP32[$AsyncCtx28 >> 2] = 227; //@line 10279
      HEAP32[$AsyncCtx28 + 4 >> 2] = $143; //@line 10281
      HEAP32[$AsyncCtx28 + 8 >> 2] = $128; //@line 10283
      HEAP32[$AsyncCtx28 + 12 >> 2] = $15; //@line 10285
      HEAP32[$AsyncCtx28 + 16 >> 2] = $14; //@line 10287
      HEAP32[$AsyncCtx28 + 20 >> 2] = $2; //@line 10289
      HEAP32[$AsyncCtx28 + 24 >> 2] = $31; //@line 10291
      HEAP32[$AsyncCtx28 + 28 >> 2] = $13; //@line 10293
      HEAP32[$AsyncCtx28 + 32 >> 2] = $31; //@line 10295
      HEAP32[$AsyncCtx28 + 36 >> 2] = $$lcssa; //@line 10297
      sp = STACKTOP; //@line 10298
      STACKTOP = sp; //@line 10299
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx28 | 0); //@line 10301
      $157 = HEAP32[$143 >> 2] | 0; //@line 10303
      break;
     }
    }
   } while (0);
   HEAP32[$128 >> 2] = $157; //@line 10308
   $$pre85 = HEAP32[$15 >> 2] | 0; //@line 10309
   $161 = $$pre85; //@line 10311
   $163 = $$pre85; //@line 10311
  }
  HEAP32[$161 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 10315
  HEAP32[$2 + 8 >> 2] = 0; //@line 10317
  HEAP32[$2 >> 2] = 228; //@line 10318
  HEAP32[$2 + 4 >> 2] = $163; //@line 10320
  $164 = $2 + 12 | 0; //@line 10321
  HEAP32[$164 >> 2] = 764; //@line 10322
  $AsyncCtx57 = _emscripten_alloc_async_context(24, sp) | 0; //@line 10323
  __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($31, $2); //@line 10324
  if (___async) {
   HEAP32[$AsyncCtx57 >> 2] = 229; //@line 10327
   HEAP32[$AsyncCtx57 + 4 >> 2] = $164; //@line 10329
   HEAP32[$AsyncCtx57 + 8 >> 2] = $13; //@line 10331
   HEAP32[$AsyncCtx57 + 12 >> 2] = $31; //@line 10333
   HEAP32[$AsyncCtx57 + 16 >> 2] = $2; //@line 10335
   HEAP32[$AsyncCtx57 + 20 >> 2] = $$lcssa; //@line 10337
   sp = STACKTOP; //@line 10338
   STACKTOP = sp; //@line 10339
   return;
  }
  _emscripten_free_async_context($AsyncCtx57 | 0); //@line 10341
  $170 = HEAP32[$164 >> 2] | 0; //@line 10342
  do {
   if ($170 | 0) {
    $173 = HEAP32[$170 + 8 >> 2] | 0; //@line 10347
    $AsyncCtx32 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10348
    FUNCTION_TABLE_vi[$173 & 511]($2); //@line 10349
    if (___async) {
     HEAP32[$AsyncCtx32 >> 2] = 230; //@line 10352
     HEAP32[$AsyncCtx32 + 4 >> 2] = $13; //@line 10354
     HEAP32[$AsyncCtx32 + 8 >> 2] = $31; //@line 10356
     HEAP32[$AsyncCtx32 + 12 >> 2] = $$lcssa; //@line 10358
     sp = STACKTOP; //@line 10359
     STACKTOP = sp; //@line 10360
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx32 | 0); //@line 10362
     break;
    }
   }
  } while (0);
  HEAP32[$13 >> 2] = $31; //@line 10367
 }
 $177 = HEAP32[$$lcssa >> 2] | 0; //@line 10369
 $AsyncCtx42 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10370
 __ZL26nsapi_dns_query_async_sendPv($177); //@line 10371
 if (___async) {
  HEAP32[$AsyncCtx42 >> 2] = 231; //@line 10374
  sp = STACKTOP; //@line 10375
  STACKTOP = sp; //@line 10376
  return;
 }
 _emscripten_free_async_context($AsyncCtx42 | 0); //@line 10378
 STACKTOP = sp; //@line 10379
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_115($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1107 = 0, $$2 = 0, $$byval_copy = 0, $$byval_copy16 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $133 = 0, $134 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $41 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $82 = 0, $83 = 0, $99 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 9120
 STACKTOP = STACKTOP + 48 | 0; //@line 9121
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9121
 $$byval_copy16 = sp + 20 | 0; //@line 9122
 $$byval_copy = sp; //@line 9123
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9125
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9127
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9129
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9131
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9133
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9135
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9137
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9139
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9141
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9143
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9145
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9147
 if (!$AsyncRetVal) {
  __ZN6Socket11set_timeoutEi($2, 5e3); //@line 9150
  $25 = _malloc(512) | 0; //@line 9151
  if (!$25) {
   $$2 = -3007; //@line 9154
  } else {
   $27 = $25; //@line 9156
   $28 = $25 + 1 | 0; //@line 9157
   $29 = $25 + 2 | 0; //@line 9158
   $30 = $25 + 3 | 0; //@line 9159
   $31 = $25 + 4 | 0; //@line 9160
   $32 = $25 + 5 | 0; //@line 9161
   $33 = $25 + 6 | 0; //@line 9162
   $34 = $25 + 12 | 0; //@line 9163
   $$sink$i = ($22 | 0) == 2 ? 28 : 1; //@line 9165
   HEAP32[$18 >> 2] = 0; //@line 9166
   HEAP32[$18 + 4 >> 2] = 0; //@line 9166
   HEAP32[$18 + 8 >> 2] = 0; //@line 9166
   HEAP32[$18 + 12 >> 2] = 0; //@line 9166
   HEAP32[$18 + 16 >> 2] = 0; //@line 9166
   HEAP32[$$byval_copy >> 2] = HEAP32[$18 >> 2]; //@line 9167
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$18 + 4 >> 2]; //@line 9167
   HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$18 + 8 >> 2]; //@line 9167
   HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$18 + 12 >> 2]; //@line 9167
   HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$18 + 16 >> 2]; //@line 9167
   __ZN13SocketAddressC2E10nsapi_addrt($16, $$byval_copy, 0); //@line 9168
   do {
    if (3) {
     if (0 > 9) {
      if (!0) {
       break;
      } else {
       $$1107 = 0; //@line 9178
       $41 = 0; //@line 9178
      }
     } else {
      if (0 < 5) {
       $$1107 = 0; //@line 9183
       $41 = 0; //@line 9183
      } else {
       $76 = 648 + ((0 + -5 | 0) * 20 | 0) | 0; //@line 9187
       HEAP32[$$byval_copy16 >> 2] = HEAP32[$76 >> 2]; //@line 9188
       HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$76 + 4 >> 2]; //@line 9188
       HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$76 + 8 >> 2]; //@line 9188
       HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$76 + 12 >> 2]; //@line 9188
       HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$76 + 16 >> 2]; //@line 9188
       __ZN13SocketAddress8set_addrE10nsapi_addr($16, $$byval_copy16); //@line 9189
       __ZN13SocketAddress8set_portEt($16, 53); //@line 9190
       HEAP8[$25 >> 0] = 0; //@line 9191
       HEAP8[$28 >> 0] = 1; //@line 9192
       HEAP8[$29 >> 0] = 1; //@line 9193
       HEAP8[$30 >> 0] = 0; //@line 9194
       HEAP8[$31 >> 0] = 0; //@line 9195
       HEAP8[$32 >> 0] = 1; //@line 9196
       HEAP8[$33 >> 0] = 0; //@line 9197
       HEAP8[$33 + 1 >> 0] = 0; //@line 9197
       HEAP8[$33 + 2 >> 0] = 0; //@line 9197
       HEAP8[$33 + 3 >> 0] = 0; //@line 9197
       HEAP8[$33 + 4 >> 0] = 0; //@line 9197
       HEAP8[$33 + 5 >> 0] = 0; //@line 9197
       if (!(HEAP8[$10 >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $34; //@line 9201
       } else {
        $$048$i = $10; //@line 9203
        $$sroa$0$0$in47$i = $34; //@line 9203
        while (1) {
         $79 = _strcspn($$048$i, 5075) | 0; //@line 9205
         $81 = $$sroa$0$0$in47$i + 1 | 0; //@line 9207
         HEAP8[$$sroa$0$0$in47$i >> 0] = $79; //@line 9208
         $82 = $79 & 255; //@line 9209
         _memcpy($81 | 0, $$048$i | 0, $82 | 0) | 0; //@line 9210
         $83 = $81 + $82 | 0; //@line 9211
         $$048$i = $$048$i + ($79 + ((HEAP8[$$048$i + $79 >> 0] | 0) == 46 & 1)) | 0; //@line 9217
         if (!(HEAP8[$$048$i >> 0] | 0)) {
          $$sroa$0$0$in$lcssa$i = $83; //@line 9221
          break;
         } else {
          $$sroa$0$0$in47$i = $83; //@line 9224
         }
        }
       }
       HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 9229
       HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 9231
       HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 9233
       HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 9235
       HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 9238
       $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 9240
       $99 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($4, $16, $25, $$sroa$0$0$in$lcssa$i + 5 - $27 | 0) | 0; //@line 9241
       if (___async) {
        HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 9244
        $100 = $ReallocAsyncCtx4 + 4 | 0; //@line 9245
        HEAP32[$100 >> 2] = $16; //@line 9246
        $101 = $ReallocAsyncCtx4 + 8 | 0; //@line 9247
        HEAP32[$101 >> 2] = $8; //@line 9248
        $102 = $ReallocAsyncCtx4 + 12 | 0; //@line 9249
        HEAP32[$102 >> 2] = $25; //@line 9250
        $103 = $ReallocAsyncCtx4 + 16 | 0; //@line 9251
        HEAP32[$103 >> 2] = $2; //@line 9252
        $104 = $ReallocAsyncCtx4 + 20 | 0; //@line 9253
        HEAP32[$104 >> 2] = $4; //@line 9254
        $105 = $ReallocAsyncCtx4 + 24 | 0; //@line 9255
        HEAP32[$105 >> 2] = $6; //@line 9256
        $106 = $ReallocAsyncCtx4 + 28 | 0; //@line 9257
        HEAP8[$106 >> 0] = 0; //@line 9258
        $107 = $ReallocAsyncCtx4 + 32 | 0; //@line 9259
        HEAP32[$107 >> 2] = $8; //@line 9260
        $108 = $ReallocAsyncCtx4 + 36 | 0; //@line 9261
        HEAP32[$108 >> 2] = $10; //@line 9262
        $109 = $ReallocAsyncCtx4 + 40 | 0; //@line 9263
        HEAP32[$109 >> 2] = $12; //@line 9264
        $110 = $ReallocAsyncCtx4 + 44 | 0; //@line 9265
        HEAP32[$110 >> 2] = $14; //@line 9266
        $111 = $ReallocAsyncCtx4 + 48 | 0; //@line 9267
        HEAP32[$111 >> 2] = $16; //@line 9268
        $112 = $ReallocAsyncCtx4 + 52 | 0; //@line 9269
        HEAP32[$112 >> 2] = $28; //@line 9270
        $113 = $ReallocAsyncCtx4 + 56 | 0; //@line 9271
        HEAP32[$113 >> 2] = $29; //@line 9272
        $114 = $ReallocAsyncCtx4 + 60 | 0; //@line 9273
        HEAP32[$114 >> 2] = $30; //@line 9274
        $115 = $ReallocAsyncCtx4 + 64 | 0; //@line 9275
        HEAP32[$115 >> 2] = $31; //@line 9276
        $116 = $ReallocAsyncCtx4 + 68 | 0; //@line 9277
        HEAP32[$116 >> 2] = $32; //@line 9278
        $117 = $ReallocAsyncCtx4 + 72 | 0; //@line 9279
        HEAP32[$117 >> 2] = $33; //@line 9280
        $118 = $ReallocAsyncCtx4 + 76 | 0; //@line 9281
        HEAP32[$118 >> 2] = $34; //@line 9282
        $119 = $ReallocAsyncCtx4 + 80 | 0; //@line 9283
        HEAP8[$119 >> 0] = $$sink$i; //@line 9284
        $120 = $ReallocAsyncCtx4 + 84 | 0; //@line 9285
        HEAP32[$120 >> 2] = $27; //@line 9286
        $121 = $ReallocAsyncCtx4 + 88 | 0; //@line 9287
        HEAP32[$121 >> 2] = $18; //@line 9288
        $122 = $ReallocAsyncCtx4 + 92 | 0; //@line 9289
        HEAP32[$122 >> 2] = $18; //@line 9290
        $123 = $ReallocAsyncCtx4 + 96 | 0; //@line 9291
        HEAP32[$123 >> 2] = $20; //@line 9292
        $124 = $ReallocAsyncCtx4 + 100 | 0; //@line 9293
        HEAP32[$124 >> 2] = $20; //@line 9294
        $125 = $ReallocAsyncCtx4 + 104 | 0; //@line 9295
        HEAP8[$125 >> 0] = 3; //@line 9296
        $126 = $ReallocAsyncCtx4 + 105 | 0; //@line 9297
        HEAP8[$126 >> 0] = 0; //@line 9298
        sp = STACKTOP; //@line 9299
        STACKTOP = sp; //@line 9300
        return;
       }
       HEAP32[___async_retval >> 2] = $99; //@line 9303
       ___async_unwind = 0; //@line 9304
       HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 9305
       $100 = $ReallocAsyncCtx4 + 4 | 0; //@line 9306
       HEAP32[$100 >> 2] = $16; //@line 9307
       $101 = $ReallocAsyncCtx4 + 8 | 0; //@line 9308
       HEAP32[$101 >> 2] = $8; //@line 9309
       $102 = $ReallocAsyncCtx4 + 12 | 0; //@line 9310
       HEAP32[$102 >> 2] = $25; //@line 9311
       $103 = $ReallocAsyncCtx4 + 16 | 0; //@line 9312
       HEAP32[$103 >> 2] = $2; //@line 9313
       $104 = $ReallocAsyncCtx4 + 20 | 0; //@line 9314
       HEAP32[$104 >> 2] = $4; //@line 9315
       $105 = $ReallocAsyncCtx4 + 24 | 0; //@line 9316
       HEAP32[$105 >> 2] = $6; //@line 9317
       $106 = $ReallocAsyncCtx4 + 28 | 0; //@line 9318
       HEAP8[$106 >> 0] = 0; //@line 9319
       $107 = $ReallocAsyncCtx4 + 32 | 0; //@line 9320
       HEAP32[$107 >> 2] = $8; //@line 9321
       $108 = $ReallocAsyncCtx4 + 36 | 0; //@line 9322
       HEAP32[$108 >> 2] = $10; //@line 9323
       $109 = $ReallocAsyncCtx4 + 40 | 0; //@line 9324
       HEAP32[$109 >> 2] = $12; //@line 9325
       $110 = $ReallocAsyncCtx4 + 44 | 0; //@line 9326
       HEAP32[$110 >> 2] = $14; //@line 9327
       $111 = $ReallocAsyncCtx4 + 48 | 0; //@line 9328
       HEAP32[$111 >> 2] = $16; //@line 9329
       $112 = $ReallocAsyncCtx4 + 52 | 0; //@line 9330
       HEAP32[$112 >> 2] = $28; //@line 9331
       $113 = $ReallocAsyncCtx4 + 56 | 0; //@line 9332
       HEAP32[$113 >> 2] = $29; //@line 9333
       $114 = $ReallocAsyncCtx4 + 60 | 0; //@line 9334
       HEAP32[$114 >> 2] = $30; //@line 9335
       $115 = $ReallocAsyncCtx4 + 64 | 0; //@line 9336
       HEAP32[$115 >> 2] = $31; //@line 9337
       $116 = $ReallocAsyncCtx4 + 68 | 0; //@line 9338
       HEAP32[$116 >> 2] = $32; //@line 9339
       $117 = $ReallocAsyncCtx4 + 72 | 0; //@line 9340
       HEAP32[$117 >> 2] = $33; //@line 9341
       $118 = $ReallocAsyncCtx4 + 76 | 0; //@line 9342
       HEAP32[$118 >> 2] = $34; //@line 9343
       $119 = $ReallocAsyncCtx4 + 80 | 0; //@line 9344
       HEAP8[$119 >> 0] = $$sink$i; //@line 9345
       $120 = $ReallocAsyncCtx4 + 84 | 0; //@line 9346
       HEAP32[$120 >> 2] = $27; //@line 9347
       $121 = $ReallocAsyncCtx4 + 88 | 0; //@line 9348
       HEAP32[$121 >> 2] = $18; //@line 9349
       $122 = $ReallocAsyncCtx4 + 92 | 0; //@line 9350
       HEAP32[$122 >> 2] = $18; //@line 9351
       $123 = $ReallocAsyncCtx4 + 96 | 0; //@line 9352
       HEAP32[$123 >> 2] = $20; //@line 9353
       $124 = $ReallocAsyncCtx4 + 100 | 0; //@line 9354
       HEAP32[$124 >> 2] = $20; //@line 9355
       $125 = $ReallocAsyncCtx4 + 104 | 0; //@line 9356
       HEAP8[$125 >> 0] = 3; //@line 9357
       $126 = $ReallocAsyncCtx4 + 105 | 0; //@line 9358
       HEAP8[$126 >> 0] = 0; //@line 9359
       sp = STACKTOP; //@line 9360
       STACKTOP = sp; //@line 9361
       return;
      }
     }
     $44 = HEAP32[(HEAP32[$20 >> 2] | 0) + 28 >> 2] | 0; //@line 9367
     $ReallocAsyncCtx = _emscripten_realloc_async_context(112) | 0; //@line 9368
     $45 = FUNCTION_TABLE_iiii[$44 & 31]($20, $41 & 255, $16) | 0; //@line 9369
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 9372
      $46 = $ReallocAsyncCtx + 4 | 0; //@line 9373
      HEAP32[$46 >> 2] = $16; //@line 9374
      $47 = $ReallocAsyncCtx + 8 | 0; //@line 9375
      HEAP32[$47 >> 2] = $8; //@line 9376
      $48 = $ReallocAsyncCtx + 12 | 0; //@line 9377
      HEAP8[$48 >> 0] = 3; //@line 9378
      $49 = $ReallocAsyncCtx + 16 | 0; //@line 9379
      HEAP32[$49 >> 2] = $25; //@line 9380
      $50 = $ReallocAsyncCtx + 20 | 0; //@line 9381
      HEAP32[$50 >> 2] = $2; //@line 9382
      $51 = $ReallocAsyncCtx + 24 | 0; //@line 9383
      HEAP32[$51 >> 2] = $4; //@line 9384
      $52 = $ReallocAsyncCtx + 28 | 0; //@line 9385
      HEAP32[$52 >> 2] = $8; //@line 9386
      $53 = $ReallocAsyncCtx + 32 | 0; //@line 9387
      HEAP32[$53 >> 2] = $10; //@line 9388
      $54 = $ReallocAsyncCtx + 36 | 0; //@line 9389
      HEAP32[$54 >> 2] = $12; //@line 9390
      $55 = $ReallocAsyncCtx + 40 | 0; //@line 9391
      HEAP32[$55 >> 2] = $14; //@line 9392
      $56 = $ReallocAsyncCtx + 44 | 0; //@line 9393
      HEAP8[$56 >> 0] = $$1107; //@line 9394
      $57 = $ReallocAsyncCtx + 48 | 0; //@line 9395
      HEAP32[$57 >> 2] = $16; //@line 9396
      $58 = $ReallocAsyncCtx + 52 | 0; //@line 9397
      HEAP32[$58 >> 2] = $6; //@line 9398
      $59 = $ReallocAsyncCtx + 56 | 0; //@line 9399
      HEAP8[$59 >> 0] = $41; //@line 9400
      $60 = $ReallocAsyncCtx + 60 | 0; //@line 9401
      HEAP32[$60 >> 2] = $28; //@line 9402
      $61 = $ReallocAsyncCtx + 64 | 0; //@line 9403
      HEAP32[$61 >> 2] = $29; //@line 9404
      $62 = $ReallocAsyncCtx + 68 | 0; //@line 9405
      HEAP32[$62 >> 2] = $30; //@line 9406
      $63 = $ReallocAsyncCtx + 72 | 0; //@line 9407
      HEAP32[$63 >> 2] = $31; //@line 9408
      $64 = $ReallocAsyncCtx + 76 | 0; //@line 9409
      HEAP32[$64 >> 2] = $32; //@line 9410
      $65 = $ReallocAsyncCtx + 80 | 0; //@line 9411
      HEAP32[$65 >> 2] = $33; //@line 9412
      $66 = $ReallocAsyncCtx + 84 | 0; //@line 9413
      HEAP32[$66 >> 2] = $34; //@line 9414
      $67 = $ReallocAsyncCtx + 88 | 0; //@line 9415
      HEAP8[$67 >> 0] = $$sink$i; //@line 9416
      $68 = $ReallocAsyncCtx + 92 | 0; //@line 9417
      HEAP32[$68 >> 2] = $27; //@line 9418
      $69 = $ReallocAsyncCtx + 96 | 0; //@line 9419
      HEAP32[$69 >> 2] = $18; //@line 9420
      $70 = $ReallocAsyncCtx + 100 | 0; //@line 9421
      HEAP32[$70 >> 2] = $18; //@line 9422
      $71 = $ReallocAsyncCtx + 104 | 0; //@line 9423
      HEAP32[$71 >> 2] = $20; //@line 9424
      $72 = $ReallocAsyncCtx + 108 | 0; //@line 9425
      HEAP32[$72 >> 2] = $20; //@line 9426
      sp = STACKTOP; //@line 9427
      STACKTOP = sp; //@line 9428
      return;
     }
     HEAP32[___async_retval >> 2] = $45; //@line 9431
     ___async_unwind = 0; //@line 9432
     HEAP32[$ReallocAsyncCtx >> 2] = 156; //@line 9433
     $46 = $ReallocAsyncCtx + 4 | 0; //@line 9434
     HEAP32[$46 >> 2] = $16; //@line 9435
     $47 = $ReallocAsyncCtx + 8 | 0; //@line 9436
     HEAP32[$47 >> 2] = $8; //@line 9437
     $48 = $ReallocAsyncCtx + 12 | 0; //@line 9438
     HEAP8[$48 >> 0] = 3; //@line 9439
     $49 = $ReallocAsyncCtx + 16 | 0; //@line 9440
     HEAP32[$49 >> 2] = $25; //@line 9441
     $50 = $ReallocAsyncCtx + 20 | 0; //@line 9442
     HEAP32[$50 >> 2] = $2; //@line 9443
     $51 = $ReallocAsyncCtx + 24 | 0; //@line 9444
     HEAP32[$51 >> 2] = $4; //@line 9445
     $52 = $ReallocAsyncCtx + 28 | 0; //@line 9446
     HEAP32[$52 >> 2] = $8; //@line 9447
     $53 = $ReallocAsyncCtx + 32 | 0; //@line 9448
     HEAP32[$53 >> 2] = $10; //@line 9449
     $54 = $ReallocAsyncCtx + 36 | 0; //@line 9450
     HEAP32[$54 >> 2] = $12; //@line 9451
     $55 = $ReallocAsyncCtx + 40 | 0; //@line 9452
     HEAP32[$55 >> 2] = $14; //@line 9453
     $56 = $ReallocAsyncCtx + 44 | 0; //@line 9454
     HEAP8[$56 >> 0] = $$1107; //@line 9455
     $57 = $ReallocAsyncCtx + 48 | 0; //@line 9456
     HEAP32[$57 >> 2] = $16; //@line 9457
     $58 = $ReallocAsyncCtx + 52 | 0; //@line 9458
     HEAP32[$58 >> 2] = $6; //@line 9459
     $59 = $ReallocAsyncCtx + 56 | 0; //@line 9460
     HEAP8[$59 >> 0] = $41; //@line 9461
     $60 = $ReallocAsyncCtx + 60 | 0; //@line 9462
     HEAP32[$60 >> 2] = $28; //@line 9463
     $61 = $ReallocAsyncCtx + 64 | 0; //@line 9464
     HEAP32[$61 >> 2] = $29; //@line 9465
     $62 = $ReallocAsyncCtx + 68 | 0; //@line 9466
     HEAP32[$62 >> 2] = $30; //@line 9467
     $63 = $ReallocAsyncCtx + 72 | 0; //@line 9468
     HEAP32[$63 >> 2] = $31; //@line 9469
     $64 = $ReallocAsyncCtx + 76 | 0; //@line 9470
     HEAP32[$64 >> 2] = $32; //@line 9471
     $65 = $ReallocAsyncCtx + 80 | 0; //@line 9472
     HEAP32[$65 >> 2] = $33; //@line 9473
     $66 = $ReallocAsyncCtx + 84 | 0; //@line 9474
     HEAP32[$66 >> 2] = $34; //@line 9475
     $67 = $ReallocAsyncCtx + 88 | 0; //@line 9476
     HEAP8[$67 >> 0] = $$sink$i; //@line 9477
     $68 = $ReallocAsyncCtx + 92 | 0; //@line 9478
     HEAP32[$68 >> 2] = $27; //@line 9479
     $69 = $ReallocAsyncCtx + 96 | 0; //@line 9480
     HEAP32[$69 >> 2] = $18; //@line 9481
     $70 = $ReallocAsyncCtx + 100 | 0; //@line 9482
     HEAP32[$70 >> 2] = $18; //@line 9483
     $71 = $ReallocAsyncCtx + 104 | 0; //@line 9484
     HEAP32[$71 >> 2] = $20; //@line 9485
     $72 = $ReallocAsyncCtx + 108 | 0; //@line 9486
     HEAP32[$72 >> 2] = $20; //@line 9487
     sp = STACKTOP; //@line 9488
     STACKTOP = sp; //@line 9489
     return;
    }
   } while (0);
   _free($25); //@line 9492
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 9493
   $128 = __ZN6Socket5closeEv($2) | 0; //@line 9494
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 9497
    $129 = $ReallocAsyncCtx6 + 4 | 0; //@line 9498
    HEAP32[$129 >> 2] = -3009; //@line 9499
    $130 = $ReallocAsyncCtx6 + 8 | 0; //@line 9500
    HEAP32[$130 >> 2] = $4; //@line 9501
    $131 = $ReallocAsyncCtx6 + 12 | 0; //@line 9502
    HEAP32[$131 >> 2] = $6; //@line 9503
    sp = STACKTOP; //@line 9504
    STACKTOP = sp; //@line 9505
    return;
   }
   HEAP32[___async_retval >> 2] = $128; //@line 9508
   ___async_unwind = 0; //@line 9509
   HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 9510
   $129 = $ReallocAsyncCtx6 + 4 | 0; //@line 9511
   HEAP32[$129 >> 2] = -3009; //@line 9512
   $130 = $ReallocAsyncCtx6 + 8 | 0; //@line 9513
   HEAP32[$130 >> 2] = $4; //@line 9514
   $131 = $ReallocAsyncCtx6 + 12 | 0; //@line 9515
   HEAP32[$131 >> 2] = $6; //@line 9516
   sp = STACKTOP; //@line 9517
   STACKTOP = sp; //@line 9518
   return;
  }
 } else {
  $$2 = $AsyncRetVal; //@line 9521
 }
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 9523
 __ZN9UDPSocketD2Ev($4); //@line 9524
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 9527
  $133 = $ReallocAsyncCtx5 + 4 | 0; //@line 9528
  HEAP32[$133 >> 2] = $6; //@line 9529
  $134 = $ReallocAsyncCtx5 + 8 | 0; //@line 9530
  HEAP32[$134 >> 2] = $$2; //@line 9531
  sp = STACKTOP; //@line 9532
  STACKTOP = sp; //@line 9533
  return;
 }
 ___async_unwind = 0; //@line 9535
 HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 9536
 $133 = $ReallocAsyncCtx5 + 4 | 0; //@line 9537
 HEAP32[$133 >> 2] = $6; //@line 9538
 $134 = $ReallocAsyncCtx5 + 8 | 0; //@line 9539
 HEAP32[$134 >> 2] = $$2; //@line 9540
 sp = STACKTOP; //@line 9541
 STACKTOP = sp; //@line 9542
 return;
}
function __ZL26nsapi_dns_query_async_sendPv($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$byval_copy51 = 0, $$lcssa69 = 0, $$pr$i = 0, $$pr$i52 = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $1 = 0, $104 = 0, $107 = 0, $108 = 0, $124 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $132 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $150 = 0, $152 = 0, $159 = 0, $163 = 0, $164 = 0, $17 = 0, $184 = 0, $190 = 0, $194 = 0, $198 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $3 = 0, $31 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $50 = 0, $52 = 0, $54 = 0, $56 = 0, $57 = 0, $66 = 0, $67 = 0, $70 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $96 = 0, $97 = 0, $98 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx30 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx6 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10881
 STACKTOP = STACKTOP + 112 | 0; //@line 10882
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 10882
 $$byval_copy51 = sp + 84 | 0; //@line 10883
 $1 = sp; //@line 10884
 $2 = sp + 64 | 0; //@line 10885
 $3 = $0; //@line 10886
 $4 = HEAP32[1949] | 0; //@line 10887
 if (!$4) {
  label = 3; //@line 10890
 } else {
  if ((HEAP32[$4 >> 2] | 0) == ($3 | 0)) {
   $$lcssa69 = $4; //@line 10895
  } else {
   label = 3; //@line 10897
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1950] | 0; //@line 10902
   if ($8 | 0) {
    if ((HEAP32[$8 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $8; //@line 10908
     break;
    }
   }
   $190 = HEAP32[1951] | 0; //@line 10912
   if ($190 | 0) {
    if ((HEAP32[$190 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $190; //@line 10918
     break;
    }
   }
   $194 = HEAP32[1952] | 0; //@line 10922
   if ($194 | 0) {
    if ((HEAP32[$194 >> 2] | 0) == ($3 | 0)) {
     $$lcssa69 = $194; //@line 10928
     break;
    }
   }
   $198 = HEAP32[1953] | 0; //@line 10932
   if (!$198) {
    STACKTOP = sp; //@line 10935
    return;
   }
   if ((HEAP32[$198 >> 2] | 0) == ($3 | 0)) {
    $$lcssa69 = $198; //@line 10940
   } else {
    STACKTOP = sp; //@line 10942
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa69 + 88 >> 2] | 0) != 1) {
  STACKTOP = sp; //@line 10950
  return;
 }
 $13 = $$lcssa69 + 83 | 0; //@line 10952
 $14 = HEAP8[$13 >> 0] | 0; //@line 10953
 if (!($14 << 24 >> 24)) {
  $17 = $$lcssa69 + 82 | 0; //@line 10956
  HEAP8[$17 >> 0] = (HEAP8[$17 >> 0] | 0) + 1 << 24 >> 24; //@line 10959
  $storemerge = 0; //@line 10960
 } else {
  $storemerge = $14 + -1 << 24 >> 24; //@line 10963
 }
 HEAP8[$13 >> 0] = $storemerge; //@line 10965
 $20 = HEAP16[1322] | 0; //@line 10966
 $21 = $20 + 1 << 16 >> 16; //@line 10967
 HEAP16[1322] = $21; //@line 10968
 $22 = $$lcssa69 + 80 | 0; //@line 10969
 HEAP16[$22 >> 1] = $20; //@line 10970
 if (!($21 << 16 >> 16)) {
  HEAP16[1322] = 1; //@line 10973
 }
 $24 = _malloc(512) | 0; //@line 10975
 if (!$24) {
  $26 = $$lcssa69 + 28 | 0; //@line 10978
  $27 = HEAP32[$26 >> 2] | 0; //@line 10979
  do {
   if (!$27) {
    $37 = 0; //@line 10983
   } else {
    $31 = HEAP32[$27 + 4 >> 2] | 0; //@line 10987
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10988
    FUNCTION_TABLE_vii[$31 & 7]($$byval_copy51, $$lcssa69 + 16 | 0); //@line 10989
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 243; //@line 10992
     HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 10994
     HEAP32[$AsyncCtx + 8 >> 2] = $$byval_copy51; //@line 10996
     HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa69; //@line 10998
     HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy51; //@line 11000
     sp = STACKTOP; //@line 11001
     STACKTOP = sp; //@line 11002
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 11004
     $37 = HEAP32[$26 >> 2] | 0; //@line 11006
     break;
    }
   }
  } while (0);
  $36 = $$byval_copy51 + 12 | 0; //@line 11011
  HEAP32[$36 >> 2] = $37; //@line 11012
  $38 = HEAP32[$$lcssa69 >> 2] | 0; //@line 11013
  $AsyncCtx27 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11014
  __ZL28nsapi_dns_query_async_deletei($38); //@line 11015
  if (___async) {
   HEAP32[$AsyncCtx27 >> 2] = 244; //@line 11018
   HEAP32[$AsyncCtx27 + 4 >> 2] = $36; //@line 11020
   HEAP32[$AsyncCtx27 + 8 >> 2] = $$byval_copy51; //@line 11022
   sp = STACKTOP; //@line 11023
   STACKTOP = sp; //@line 11024
   return;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 11026
  $AsyncCtx33 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11027
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 11028
  if (___async) {
   HEAP32[$AsyncCtx33 >> 2] = 245; //@line 11031
   HEAP32[$AsyncCtx33 + 4 >> 2] = $36; //@line 11033
   HEAP32[$AsyncCtx33 + 8 >> 2] = $$byval_copy51; //@line 11035
   sp = STACKTOP; //@line 11036
   STACKTOP = sp; //@line 11037
   return;
  }
  _emscripten_free_async_context($AsyncCtx33 | 0); //@line 11039
  $43 = HEAP32[$36 >> 2] | 0; //@line 11040
  do {
   if ($43 | 0) {
    $45 = HEAP32[$43 >> 2] | 0; //@line 11044
    $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 11045
    FUNCTION_TABLE_viii[$45 & 0]($$byval_copy51, -3007, 0); //@line 11046
    if (___async) {
     HEAP32[$AsyncCtx2 >> 2] = 246; //@line 11049
     HEAP32[$AsyncCtx2 + 4 >> 2] = $36; //@line 11051
     HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy51; //@line 11053
     sp = STACKTOP; //@line 11054
     STACKTOP = sp; //@line 11055
     return;
    }
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 11057
    $$pr$i52 = HEAP32[$36 >> 2] | 0; //@line 11058
    if ($$pr$i52 | 0) {
     $50 = HEAP32[$$pr$i52 + 8 >> 2] | 0; //@line 11062
     $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 11063
     FUNCTION_TABLE_vi[$50 & 511]($$byval_copy51); //@line 11064
     if (___async) {
      HEAP32[$AsyncCtx6 >> 2] = 247; //@line 11067
      HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy51; //@line 11069
      sp = STACKTOP; //@line 11070
      STACKTOP = sp; //@line 11071
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 11073
      break;
     }
    }
   }
  } while (0);
  STACKTOP = sp; //@line 11079
  return;
 }
 $52 = HEAP16[$22 >> 1] | 0; //@line 11081
 $54 = HEAP32[$$lcssa69 + 12 >> 2] | 0; //@line 11083
 $56 = HEAP32[$$lcssa69 + 52 >> 2] | 0; //@line 11085
 $57 = $24; //@line 11086
 HEAP8[$24 >> 0] = ($52 & 65535) >>> 8; //@line 11090
 HEAP8[$24 + 1 >> 0] = $52; //@line 11093
 HEAP8[$24 + 2 >> 0] = 1; //@line 11095
 HEAP8[$24 + 3 >> 0] = 0; //@line 11097
 HEAP8[$24 + 4 >> 0] = 0; //@line 11099
 $66 = $24 + 6 | 0; //@line 11100
 HEAP8[$24 + 5 >> 0] = 1; //@line 11101
 $67 = $24 + 12 | 0; //@line 11102
 HEAP8[$66 >> 0] = 0; //@line 11103
 HEAP8[$66 + 1 >> 0] = 0; //@line 11103
 HEAP8[$66 + 2 >> 0] = 0; //@line 11103
 HEAP8[$66 + 3 >> 0] = 0; //@line 11103
 HEAP8[$66 + 4 >> 0] = 0; //@line 11103
 HEAP8[$66 + 5 >> 0] = 0; //@line 11103
 if (!(HEAP8[$54 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $67; //@line 11107
 } else {
  $$048$i = $54; //@line 11109
  $$sroa$0$0$in47$i = $67; //@line 11109
  while (1) {
   $70 = _strcspn($$048$i, 5075) | 0; //@line 11111
   $72 = $$sroa$0$0$in47$i + 1 | 0; //@line 11113
   HEAP8[$$sroa$0$0$in47$i >> 0] = $70; //@line 11114
   $73 = $70 & 255; //@line 11115
   _memcpy($72 | 0, $$048$i | 0, $73 | 0) | 0; //@line 11116
   $74 = $72 + $73 | 0; //@line 11117
   $$048$i = $$048$i + ($70 + ((HEAP8[$$048$i + $70 >> 0] | 0) == 46 & 1)) | 0; //@line 11123
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $74; //@line 11127
    break;
   } else {
    $$sroa$0$0$in47$i = $74; //@line 11130
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 11135
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 11138
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = ($56 | 0) == 2 ? 28 : 1; //@line 11141
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 11143
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 11146
 $90 = $$sroa$0$0$in$lcssa$i + 5 - $57 | 0; //@line 11147
 HEAP32[$2 >> 2] = 0; //@line 11148
 HEAP32[$2 + 4 >> 2] = 0; //@line 11148
 HEAP32[$2 + 8 >> 2] = 0; //@line 11148
 HEAP32[$2 + 12 >> 2] = 0; //@line 11148
 HEAP32[$2 + 16 >> 2] = 0; //@line 11148
 HEAP32[$$byval_copy51 >> 2] = HEAP32[$2 >> 2]; //@line 11149
 HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 11149
 HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 11149
 HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 11149
 HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 11149
 __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy51, 0); //@line 11150
 $91 = $$lcssa69 + 8 | 0; //@line 11151
 $92 = $$lcssa69 + 82 | 0; //@line 11152
 $93 = $$lcssa69 + 84 | 0; //@line 11153
 $94 = $$lcssa69 + 85 | 0; //@line 11154
 L59 : do {
  if (HEAP8[$93 >> 0] | 0) {
   $96 = $$lcssa69 + 56 | 0; //@line 11159
   while (1) {
    $97 = HEAP32[$91 >> 2] | 0; //@line 11161
    $98 = HEAP8[$92 >> 0] | 0; //@line 11162
    if (($98 & 255) > 9) {
     if (!(HEAP8[$94 >> 0] | 0)) {
      break L59;
     }
     HEAP8[$92 >> 0] = 0; //@line 11170
     HEAP8[$94 >> 0] = 0; //@line 11171
     $104 = 0; //@line 11172
     label = 35; //@line 11173
    } else {
     if (($98 & 255) < 5) {
      $104 = $98; //@line 11177
      label = 35; //@line 11178
     } else {
      $124 = $98; //@line 11180
      label = 39; //@line 11181
     }
    }
    if ((label | 0) == 35) {
     label = 0; //@line 11185
     $107 = HEAP32[(HEAP32[$97 >> 2] | 0) + 28 >> 2] | 0; //@line 11189
     $AsyncCtx10 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11190
     $108 = FUNCTION_TABLE_iiii[$107 & 31]($97, $104 & 255, $1) | 0; //@line 11191
     if (___async) {
      label = 36; //@line 11194
      break;
     }
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 11197
     if (($108 | 0) < 0) {
      HEAP8[$92 >> 0] = 5; //@line 11200
      $124 = 5; //@line 11201
      label = 39; //@line 11202
     }
    }
    if ((label | 0) == 39) {
     label = 0; //@line 11206
     $126 = 648 + ((($124 & 255) + -5 | 0) * 20 | 0) | 0; //@line 11209
     HEAP32[$$byval_copy51 >> 2] = HEAP32[$126 >> 2]; //@line 11210
     HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$126 + 4 >> 2]; //@line 11210
     HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$126 + 8 >> 2]; //@line 11210
     HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$126 + 12 >> 2]; //@line 11210
     HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$126 + 16 >> 2]; //@line 11210
     __ZN13SocketAddress8set_addrE10nsapi_addr($1, $$byval_copy51); //@line 11211
    }
    __ZN13SocketAddress8set_portEt($1, 53); //@line 11213
    $163 = HEAP32[$96 >> 2] | 0; //@line 11214
    $AsyncCtx37 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11215
    $164 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($163, $1, $24, $90) | 0; //@line 11216
    if (___async) {
     label = 57; //@line 11219
     break;
    }
    _emscripten_free_async_context($AsyncCtx37 | 0); //@line 11222
    if (($164 | 0) >= 0) {
     label = 60; //@line 11225
     break;
    }
    HEAP8[$92 >> 0] = (HEAP8[$92 >> 0] | 0) + 1 << 24 >> 24; //@line 11230
    HEAP32[$2 >> 2] = 0; //@line 11231
    HEAP32[$2 + 4 >> 2] = 0; //@line 11231
    HEAP32[$2 + 8 >> 2] = 0; //@line 11231
    HEAP32[$2 + 12 >> 2] = 0; //@line 11231
    HEAP32[$2 + 16 >> 2] = 0; //@line 11231
    HEAP32[$$byval_copy51 >> 2] = HEAP32[$2 >> 2]; //@line 11232
    HEAP32[$$byval_copy51 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 11232
    HEAP32[$$byval_copy51 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 11232
    HEAP32[$$byval_copy51 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 11232
    HEAP32[$$byval_copy51 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 11232
    __ZN13SocketAddressC2E10nsapi_addrt($1, $$byval_copy51, 0); //@line 11233
    if (!(HEAP8[$93 >> 0] | 0)) {
     break L59;
    }
   }
   if ((label | 0) == 36) {
    HEAP32[$AsyncCtx10 >> 2] = 248; //@line 11241
    HEAP32[$AsyncCtx10 + 4 >> 2] = $$byval_copy51; //@line 11243
    HEAP32[$AsyncCtx10 + 8 >> 2] = $$lcssa69; //@line 11245
    HEAP32[$AsyncCtx10 + 12 >> 2] = $24; //@line 11247
    HEAP32[$AsyncCtx10 + 16 >> 2] = $1; //@line 11249
    HEAP32[$AsyncCtx10 + 20 >> 2] = $1; //@line 11251
    HEAP32[$AsyncCtx10 + 24 >> 2] = $96; //@line 11253
    HEAP32[$AsyncCtx10 + 28 >> 2] = $90; //@line 11255
    HEAP32[$AsyncCtx10 + 32 >> 2] = $92; //@line 11257
    HEAP32[$AsyncCtx10 + 36 >> 2] = $2; //@line 11259
    HEAP32[$AsyncCtx10 + 40 >> 2] = $2; //@line 11261
    HEAP32[$AsyncCtx10 + 44 >> 2] = $93; //@line 11263
    HEAP32[$AsyncCtx10 + 48 >> 2] = $94; //@line 11265
    HEAP32[$AsyncCtx10 + 52 >> 2] = $91; //@line 11267
    sp = STACKTOP; //@line 11268
    STACKTOP = sp; //@line 11269
    return;
   } else if ((label | 0) == 57) {
    HEAP32[$AsyncCtx37 >> 2] = 254; //@line 11272
    HEAP32[$AsyncCtx37 + 4 >> 2] = $$byval_copy51; //@line 11274
    HEAP32[$AsyncCtx37 + 8 >> 2] = $$lcssa69; //@line 11276
    HEAP32[$AsyncCtx37 + 12 >> 2] = $24; //@line 11278
    HEAP32[$AsyncCtx37 + 16 >> 2] = $1; //@line 11280
    HEAP32[$AsyncCtx37 + 20 >> 2] = $1; //@line 11282
    HEAP32[$AsyncCtx37 + 24 >> 2] = $96; //@line 11284
    HEAP32[$AsyncCtx37 + 28 >> 2] = $90; //@line 11286
    HEAP32[$AsyncCtx37 + 32 >> 2] = $92; //@line 11288
    HEAP32[$AsyncCtx37 + 36 >> 2] = $2; //@line 11290
    HEAP32[$AsyncCtx37 + 40 >> 2] = $2; //@line 11292
    HEAP32[$AsyncCtx37 + 44 >> 2] = $93; //@line 11294
    HEAP32[$AsyncCtx37 + 48 >> 2] = $94; //@line 11296
    HEAP32[$AsyncCtx37 + 52 >> 2] = $91; //@line 11298
    sp = STACKTOP; //@line 11299
    STACKTOP = sp; //@line 11300
    return;
   } else if ((label | 0) == 60) {
    HEAP8[$94 >> 0] = (HEAP8[$94 >> 0] | 0) + 1 << 24 >> 24; //@line 11305
    $184 = HEAP8[$93 >> 0] | 0; //@line 11306
    if ($184 << 24 >> 24) {
     HEAP8[$93 >> 0] = $184 + -1 << 24 >> 24; //@line 11310
    }
    _free($24); //@line 11312
    HEAP32[$$lcssa69 + 76 >> 2] = 5e3; //@line 11314
    STACKTOP = sp; //@line 11315
    return;
   }
  }
 } while (0);
 $127 = $$lcssa69 + 28 | 0; //@line 11319
 $128 = HEAP32[$127 >> 2] | 0; //@line 11320
 do {
  if (!$128) {
   $140 = 0; //@line 11324
  } else {
   $132 = HEAP32[$128 + 4 >> 2] | 0; //@line 11328
   $AsyncCtx14 = _emscripten_alloc_async_context(28, sp) | 0; //@line 11329
   FUNCTION_TABLE_vii[$132 & 7]($$byval_copy51, $$lcssa69 + 16 | 0); //@line 11330
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 249; //@line 11333
    HEAP32[$AsyncCtx14 + 4 >> 2] = $127; //@line 11335
    HEAP32[$AsyncCtx14 + 8 >> 2] = $$byval_copy51; //@line 11337
    HEAP32[$AsyncCtx14 + 12 >> 2] = $$lcssa69; //@line 11339
    HEAP32[$AsyncCtx14 + 16 >> 2] = $$byval_copy51; //@line 11341
    HEAP32[$AsyncCtx14 + 20 >> 2] = $24; //@line 11343
    HEAP32[$AsyncCtx14 + 24 >> 2] = $1; //@line 11345
    sp = STACKTOP; //@line 11346
    STACKTOP = sp; //@line 11347
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 11349
    $140 = HEAP32[$127 >> 2] | 0; //@line 11351
    break;
   }
  }
 } while (0);
 $139 = $$byval_copy51 + 12 | 0; //@line 11356
 HEAP32[$139 >> 2] = $140; //@line 11357
 $141 = HEAP32[$$lcssa69 >> 2] | 0; //@line 11358
 $AsyncCtx24 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11359
 __ZL28nsapi_dns_query_async_deletei($141); //@line 11360
 if (___async) {
  HEAP32[$AsyncCtx24 >> 2] = 250; //@line 11363
  HEAP32[$AsyncCtx24 + 4 >> 2] = $139; //@line 11365
  HEAP32[$AsyncCtx24 + 8 >> 2] = $$byval_copy51; //@line 11367
  HEAP32[$AsyncCtx24 + 12 >> 2] = $24; //@line 11369
  HEAP32[$AsyncCtx24 + 16 >> 2] = $1; //@line 11371
  sp = STACKTOP; //@line 11372
  STACKTOP = sp; //@line 11373
  return;
 }
 _emscripten_free_async_context($AsyncCtx24 | 0); //@line 11375
 $AsyncCtx30 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11376
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 11377
 if (___async) {
  HEAP32[$AsyncCtx30 >> 2] = 251; //@line 11380
  HEAP32[$AsyncCtx30 + 4 >> 2] = $139; //@line 11382
  HEAP32[$AsyncCtx30 + 8 >> 2] = $$byval_copy51; //@line 11384
  HEAP32[$AsyncCtx30 + 12 >> 2] = $24; //@line 11386
  HEAP32[$AsyncCtx30 + 16 >> 2] = $1; //@line 11388
  sp = STACKTOP; //@line 11389
  STACKTOP = sp; //@line 11390
  return;
 }
 _emscripten_free_async_context($AsyncCtx30 | 0); //@line 11392
 $150 = HEAP32[$139 >> 2] | 0; //@line 11393
 do {
  if ($150 | 0) {
   $152 = HEAP32[$150 >> 2] | 0; //@line 11397
   $AsyncCtx17 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11398
   FUNCTION_TABLE_viii[$152 & 0]($$byval_copy51, -3019, 0); //@line 11399
   if (___async) {
    HEAP32[$AsyncCtx17 >> 2] = 252; //@line 11402
    HEAP32[$AsyncCtx17 + 4 >> 2] = $139; //@line 11404
    HEAP32[$AsyncCtx17 + 8 >> 2] = $$byval_copy51; //@line 11406
    HEAP32[$AsyncCtx17 + 12 >> 2] = $24; //@line 11408
    HEAP32[$AsyncCtx17 + 16 >> 2] = $1; //@line 11410
    sp = STACKTOP; //@line 11411
    STACKTOP = sp; //@line 11412
    return;
   }
   _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11414
   $$pr$i = HEAP32[$139 >> 2] | 0; //@line 11415
   if ($$pr$i | 0) {
    $159 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 11419
    $AsyncCtx21 = _emscripten_alloc_async_context(16, sp) | 0; //@line 11420
    FUNCTION_TABLE_vi[$159 & 511]($$byval_copy51); //@line 11421
    if (___async) {
     HEAP32[$AsyncCtx21 >> 2] = 253; //@line 11424
     HEAP32[$AsyncCtx21 + 4 >> 2] = $$byval_copy51; //@line 11426
     HEAP32[$AsyncCtx21 + 8 >> 2] = $24; //@line 11428
     HEAP32[$AsyncCtx21 + 12 >> 2] = $1; //@line 11430
     sp = STACKTOP; //@line 11431
     STACKTOP = sp; //@line 11432
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx21 | 0); //@line 11434
     break;
    }
   }
  }
 } while (0);
 _free($24); //@line 11440
 STACKTOP = sp; //@line 11441
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_71($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $110 = 0, $112 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $130 = 0, $131 = 0, $133 = 0, $135 = 0, $14 = 0, $143 = 0, $146 = 0, $148 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $169 = 0, $172 = 0, $174 = 0, $18 = 0, $187 = 0, $188 = 0, $189 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $27 = 0, $29 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $68 = 0, $69 = 0, $77 = 0, $8 = 0, $80 = 0, $83 = 0, $86 = 0, $93 = 0, $95 = 0, $96 = 0, $99 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2192
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2194
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2198
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2200
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2202
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2204
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2206
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2208
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2210
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2212
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2214
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2216
 HEAP32[HEAP32[$0 + 52 >> 2] >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2]; //@line 2220
 $27 = $2 + 32 | 0; //@line 2221
 do {
  if (($27 | 0) != ($24 | 0)) {
   $29 = $2 + 44 | 0; //@line 2225
   $30 = HEAP32[$29 >> 2] | 0; //@line 2226
   if ($30 | 0) {
    $33 = HEAP32[$30 + 8 >> 2] | 0; //@line 2230
    $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 2231
    FUNCTION_TABLE_vi[$33 & 511]($27); //@line 2232
    if (___async) {
     HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 2235
     $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 2236
     HEAP32[$34 >> 2] = $2; //@line 2237
     $35 = $ReallocAsyncCtx4 + 8 | 0; //@line 2238
     HEAP32[$35 >> 2] = $6; //@line 2239
     $36 = $ReallocAsyncCtx4 + 12 | 0; //@line 2240
     HEAP32[$36 >> 2] = $8; //@line 2241
     $37 = $ReallocAsyncCtx4 + 16 | 0; //@line 2242
     HEAP32[$37 >> 2] = $10; //@line 2243
     $38 = $ReallocAsyncCtx4 + 20 | 0; //@line 2244
     HEAP32[$38 >> 2] = $27; //@line 2245
     $39 = $ReallocAsyncCtx4 + 24 | 0; //@line 2246
     HEAP32[$39 >> 2] = $12; //@line 2247
     $40 = $ReallocAsyncCtx4 + 28 | 0; //@line 2248
     HEAP32[$40 >> 2] = $14; //@line 2249
     $41 = $ReallocAsyncCtx4 + 32 | 0; //@line 2250
     HEAP32[$41 >> 2] = $16; //@line 2251
     $42 = $ReallocAsyncCtx4 + 36 | 0; //@line 2252
     HEAP32[$42 >> 2] = $18; //@line 2253
     $43 = $ReallocAsyncCtx4 + 40 | 0; //@line 2254
     HEAP32[$43 >> 2] = $20; //@line 2255
     $44 = $ReallocAsyncCtx4 + 44 | 0; //@line 2256
     HEAP32[$44 >> 2] = $22; //@line 2257
     $45 = $ReallocAsyncCtx4 + 48 | 0; //@line 2258
     HEAP32[$45 >> 2] = $29; //@line 2259
     $46 = $ReallocAsyncCtx4 + 52 | 0; //@line 2260
     HEAP32[$46 >> 2] = $24; //@line 2261
     sp = STACKTOP; //@line 2262
     return;
    }
    ___async_unwind = 0; //@line 2265
    HEAP32[$ReallocAsyncCtx4 >> 2] = 176; //@line 2266
    $34 = $ReallocAsyncCtx4 + 4 | 0; //@line 2267
    HEAP32[$34 >> 2] = $2; //@line 2268
    $35 = $ReallocAsyncCtx4 + 8 | 0; //@line 2269
    HEAP32[$35 >> 2] = $6; //@line 2270
    $36 = $ReallocAsyncCtx4 + 12 | 0; //@line 2271
    HEAP32[$36 >> 2] = $8; //@line 2272
    $37 = $ReallocAsyncCtx4 + 16 | 0; //@line 2273
    HEAP32[$37 >> 2] = $10; //@line 2274
    $38 = $ReallocAsyncCtx4 + 20 | 0; //@line 2275
    HEAP32[$38 >> 2] = $27; //@line 2276
    $39 = $ReallocAsyncCtx4 + 24 | 0; //@line 2277
    HEAP32[$39 >> 2] = $12; //@line 2278
    $40 = $ReallocAsyncCtx4 + 28 | 0; //@line 2279
    HEAP32[$40 >> 2] = $14; //@line 2280
    $41 = $ReallocAsyncCtx4 + 32 | 0; //@line 2281
    HEAP32[$41 >> 2] = $16; //@line 2282
    $42 = $ReallocAsyncCtx4 + 36 | 0; //@line 2283
    HEAP32[$42 >> 2] = $18; //@line 2284
    $43 = $ReallocAsyncCtx4 + 40 | 0; //@line 2285
    HEAP32[$43 >> 2] = $20; //@line 2286
    $44 = $ReallocAsyncCtx4 + 44 | 0; //@line 2287
    HEAP32[$44 >> 2] = $22; //@line 2288
    $45 = $ReallocAsyncCtx4 + 48 | 0; //@line 2289
    HEAP32[$45 >> 2] = $29; //@line 2290
    $46 = $ReallocAsyncCtx4 + 52 | 0; //@line 2291
    HEAP32[$46 >> 2] = $24; //@line 2292
    sp = STACKTOP; //@line 2293
    return;
   }
   $47 = $24 + 12 | 0; //@line 2296
   $48 = HEAP32[$47 >> 2] | 0; //@line 2297
   if (!$48) {
    HEAP32[$29 >> 2] = 0; //@line 2300
    break;
   }
   $51 = HEAP32[$48 + 4 >> 2] | 0; //@line 2304
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 2305
   FUNCTION_TABLE_vii[$51 & 7]($27, $24); //@line 2306
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 2309
    $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 2310
    HEAP32[$52 >> 2] = $2; //@line 2311
    $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 2312
    HEAP32[$53 >> 2] = $6; //@line 2313
    $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 2314
    HEAP32[$54 >> 2] = $8; //@line 2315
    $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 2316
    HEAP32[$55 >> 2] = $10; //@line 2317
    $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 2318
    HEAP32[$56 >> 2] = $27; //@line 2319
    $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 2320
    HEAP32[$57 >> 2] = $12; //@line 2321
    $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 2322
    HEAP32[$58 >> 2] = $14; //@line 2323
    $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 2324
    HEAP32[$59 >> 2] = $16; //@line 2325
    $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 2326
    HEAP32[$60 >> 2] = $18; //@line 2327
    $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 2328
    HEAP32[$61 >> 2] = $20; //@line 2329
    $62 = $ReallocAsyncCtx5 + 44 | 0; //@line 2330
    HEAP32[$62 >> 2] = $22; //@line 2331
    $63 = $ReallocAsyncCtx5 + 48 | 0; //@line 2332
    HEAP32[$63 >> 2] = $29; //@line 2333
    $64 = $ReallocAsyncCtx5 + 52 | 0; //@line 2334
    HEAP32[$64 >> 2] = $47; //@line 2335
    sp = STACKTOP; //@line 2336
    return;
   }
   ___async_unwind = 0; //@line 2339
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 2340
   $52 = $ReallocAsyncCtx5 + 4 | 0; //@line 2341
   HEAP32[$52 >> 2] = $2; //@line 2342
   $53 = $ReallocAsyncCtx5 + 8 | 0; //@line 2343
   HEAP32[$53 >> 2] = $6; //@line 2344
   $54 = $ReallocAsyncCtx5 + 12 | 0; //@line 2345
   HEAP32[$54 >> 2] = $8; //@line 2346
   $55 = $ReallocAsyncCtx5 + 16 | 0; //@line 2347
   HEAP32[$55 >> 2] = $10; //@line 2348
   $56 = $ReallocAsyncCtx5 + 20 | 0; //@line 2349
   HEAP32[$56 >> 2] = $27; //@line 2350
   $57 = $ReallocAsyncCtx5 + 24 | 0; //@line 2351
   HEAP32[$57 >> 2] = $12; //@line 2352
   $58 = $ReallocAsyncCtx5 + 28 | 0; //@line 2353
   HEAP32[$58 >> 2] = $14; //@line 2354
   $59 = $ReallocAsyncCtx5 + 32 | 0; //@line 2355
   HEAP32[$59 >> 2] = $16; //@line 2356
   $60 = $ReallocAsyncCtx5 + 36 | 0; //@line 2357
   HEAP32[$60 >> 2] = $18; //@line 2358
   $61 = $ReallocAsyncCtx5 + 40 | 0; //@line 2359
   HEAP32[$61 >> 2] = $20; //@line 2360
   $62 = $ReallocAsyncCtx5 + 44 | 0; //@line 2361
   HEAP32[$62 >> 2] = $22; //@line 2362
   $63 = $ReallocAsyncCtx5 + 48 | 0; //@line 2363
   HEAP32[$63 >> 2] = $29; //@line 2364
   $64 = $ReallocAsyncCtx5 + 52 | 0; //@line 2365
   HEAP32[$64 >> 2] = $47; //@line 2366
   sp = STACKTOP; //@line 2367
   return;
  }
 } while (0);
 HEAP32[$2 + 8 >> 2] = $6; //@line 2372
 HEAP32[$2 + 48 >> 2] = $20; //@line 2374
 HEAP32[$2 + 52 >> 2] = $22; //@line 2376
 $68 = $2 + 56 | 0; //@line 2377
 HEAP32[$68 >> 2] = 0; //@line 2378
 $69 = $2 + 60 | 0; //@line 2379
 HEAP32[$69 >> 2] = 0; //@line 2380
 HEAP32[$2 + 64 >> 2] = 0; //@line 2382
 HEAP8[$2 + 82 >> 0] = 0; //@line 2384
 HEAP8[$2 + 83 >> 0] = 1; //@line 2386
 HEAP8[$2 + 84 >> 0] = 3; //@line 2388
 HEAP8[$2 + 85 >> 0] = 0; //@line 2390
 HEAP16[$2 + 80 >> 1] = 0; //@line 2392
 HEAP32[$2 + 76 >> 2] = 0; //@line 2394
 $77 = $2 + 72 | 0; //@line 2395
 HEAP32[$77 >> 2] = 15500; //@line 2396
 HEAP8[$2 + 86 >> 0] = 0; //@line 2398
 HEAP32[$2 + 88 >> 2] = 0; //@line 2400
 $80 = HEAP32[187] | 0; //@line 2401
 HEAP32[187] = $80 + 1; //@line 2403
 HEAP32[$2 >> 2] = ($80 | 0) > 32767 ? 1 : $80; //@line 2406
 $83 = HEAP32[1949] | 0; //@line 2407
 if (!$83) {
  $$1 = 0; //@line 2410
  $133 = 0; //@line 2410
 } else {
  $86 = HEAP32[$83 + 56 >> 2] | 0; //@line 2413
  if (!$86) {
   $$1 = 1; //@line 2416
   $133 = 0; //@line 2416
  } else {
   if ((HEAP32[$83 + 8 >> 2] | 0) == ($6 | 0)) {
    HEAP32[$68 >> 2] = $86; //@line 2422
    HEAP32[$69 >> 2] = HEAP32[$83 + 60 >> 2]; //@line 2425
    $$1 = 1; //@line 2426
    $133 = $86; //@line 2426
   } else {
    $$1 = 1; //@line 2428
    $133 = 0; //@line 2428
   }
  }
 }
 $93 = HEAP32[1950] | 0; //@line 2432
 if (!$93) {
  $$1$1 = $$1; //@line 2435
  $146 = $133; //@line 2435
 } else {
  if (!$133) {
   $135 = HEAP32[$93 + 56 >> 2] | 0; //@line 2440
   if (!$135) {
    $187 = 0; //@line 2443
   } else {
    if ((HEAP32[$93 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$68 >> 2] = $135; //@line 2449
     HEAP32[$69 >> 2] = HEAP32[$93 + 60 >> 2]; //@line 2452
     $187 = $135; //@line 2453
    } else {
     $187 = 0; //@line 2455
    }
   }
  } else {
   $187 = $133; //@line 2459
  }
  $$1$1 = $$1 + 1 | 0; //@line 2462
  $146 = $187; //@line 2462
 }
 $143 = HEAP32[1951] | 0; //@line 2464
 if (!$143) {
  $$1$2 = $$1$1; //@line 2467
  $159 = $146; //@line 2467
 } else {
  if (!$146) {
   $148 = HEAP32[$143 + 56 >> 2] | 0; //@line 2472
   if (!$148) {
    $188 = 0; //@line 2475
   } else {
    if ((HEAP32[$143 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$68 >> 2] = $148; //@line 2481
     HEAP32[$69 >> 2] = HEAP32[$143 + 60 >> 2]; //@line 2484
     $188 = $148; //@line 2485
    } else {
     $188 = 0; //@line 2487
    }
   }
  } else {
   $188 = $146; //@line 2491
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 2494
  $159 = $188; //@line 2494
 }
 $156 = HEAP32[1952] | 0; //@line 2496
 if (!$156) {
  $$1$3 = $$1$2; //@line 2499
  $172 = $159; //@line 2499
 } else {
  if (!$159) {
   $161 = HEAP32[$156 + 56 >> 2] | 0; //@line 2504
   if (!$161) {
    $189 = 0; //@line 2507
   } else {
    if ((HEAP32[$156 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$68 >> 2] = $161; //@line 2513
     HEAP32[$69 >> 2] = HEAP32[$156 + 60 >> 2]; //@line 2516
     $189 = $161; //@line 2517
    } else {
     $189 = 0; //@line 2519
    }
   }
  } else {
   $189 = $159; //@line 2523
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 2526
  $172 = $189; //@line 2526
 }
 $169 = HEAP32[1953] | 0; //@line 2528
 if (!$169) {
  $$1$4 = $$1$3; //@line 2531
 } else {
  if (!$172) {
   $174 = HEAP32[$169 + 56 >> 2] | 0; //@line 2536
   if ($174 | 0) {
    if ((HEAP32[$169 + 8 >> 2] | 0) == ($6 | 0)) {
     HEAP32[$68 >> 2] = $174; //@line 2543
     HEAP32[$69 >> 2] = HEAP32[$169 + 60 >> 2]; //@line 2546
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 2551
 }
 HEAP32[7796 + ($10 << 2) >> 2] = $2; //@line 2554
 HEAP32[$77 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 2557
 if (HEAP8[8676] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 2561
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 2562
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 2565
   $130 = $ReallocAsyncCtx13 + 4 | 0; //@line 2566
   HEAP32[$130 >> 2] = $2; //@line 2567
   $131 = $ReallocAsyncCtx13 + 8 | 0; //@line 2568
   HEAP32[$131 >> 2] = $16; //@line 2569
   sp = STACKTOP; //@line 2570
   return;
  }
  ___async_unwind = 0; //@line 2573
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 2574
  $130 = $ReallocAsyncCtx13 + 4 | 0; //@line 2575
  HEAP32[$130 >> 2] = $2; //@line 2576
  $131 = $ReallocAsyncCtx13 + 8 | 0; //@line 2577
  HEAP32[$131 >> 2] = $16; //@line 2578
  sp = STACKTOP; //@line 2579
  return;
 }
 $95 = $2 + 44 | 0; //@line 2582
 $96 = HEAP32[$95 >> 2] | 0; //@line 2583
 if (!$96) {
  $110 = $14 + 12 | 0; //@line 2586
  HEAP32[$110 >> 2] = 0; //@line 2587
  $112 = $18 + 4 | 0; //@line 2589
  HEAP32[$112 >> 2] = 0; //@line 2591
  HEAP32[$112 + 4 >> 2] = 0; //@line 2594
  HEAP32[$18 >> 2] = 3; //@line 2595
  $116 = $18 + 12 | 0; //@line 2596
  HEAP32[$116 >> 2] = 752; //@line 2597
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 2598
  $117 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($14, 100, $18) | 0; //@line 2599
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 2602
   $118 = $ReallocAsyncCtx14 + 4 | 0; //@line 2603
   HEAP32[$118 >> 2] = $2; //@line 2604
   $119 = $ReallocAsyncCtx14 + 8 | 0; //@line 2605
   HEAP32[$119 >> 2] = $8; //@line 2606
   $120 = $ReallocAsyncCtx14 + 12 | 0; //@line 2607
   HEAP32[$120 >> 2] = $16; //@line 2608
   $121 = $ReallocAsyncCtx14 + 16 | 0; //@line 2609
   HEAP32[$121 >> 2] = $27; //@line 2610
   $122 = $ReallocAsyncCtx14 + 20 | 0; //@line 2611
   HEAP32[$122 >> 2] = $95; //@line 2612
   $123 = $ReallocAsyncCtx14 + 24 | 0; //@line 2613
   HEAP32[$123 >> 2] = $12; //@line 2614
   $124 = $ReallocAsyncCtx14 + 28 | 0; //@line 2615
   HEAP32[$124 >> 2] = $2; //@line 2616
   $125 = $ReallocAsyncCtx14 + 32 | 0; //@line 2617
   HEAP32[$125 >> 2] = $14; //@line 2618
   $126 = $ReallocAsyncCtx14 + 36 | 0; //@line 2619
   HEAP32[$126 >> 2] = $110; //@line 2620
   $127 = $ReallocAsyncCtx14 + 40 | 0; //@line 2621
   HEAP32[$127 >> 2] = $18; //@line 2622
   $128 = $ReallocAsyncCtx14 + 44 | 0; //@line 2623
   HEAP32[$128 >> 2] = $116; //@line 2624
   sp = STACKTOP; //@line 2625
   return;
  }
  HEAP32[___async_retval >> 2] = $117; //@line 2629
  ___async_unwind = 0; //@line 2630
  HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 2631
  $118 = $ReallocAsyncCtx14 + 4 | 0; //@line 2632
  HEAP32[$118 >> 2] = $2; //@line 2633
  $119 = $ReallocAsyncCtx14 + 8 | 0; //@line 2634
  HEAP32[$119 >> 2] = $8; //@line 2635
  $120 = $ReallocAsyncCtx14 + 12 | 0; //@line 2636
  HEAP32[$120 >> 2] = $16; //@line 2637
  $121 = $ReallocAsyncCtx14 + 16 | 0; //@line 2638
  HEAP32[$121 >> 2] = $27; //@line 2639
  $122 = $ReallocAsyncCtx14 + 20 | 0; //@line 2640
  HEAP32[$122 >> 2] = $95; //@line 2641
  $123 = $ReallocAsyncCtx14 + 24 | 0; //@line 2642
  HEAP32[$123 >> 2] = $12; //@line 2643
  $124 = $ReallocAsyncCtx14 + 28 | 0; //@line 2644
  HEAP32[$124 >> 2] = $2; //@line 2645
  $125 = $ReallocAsyncCtx14 + 32 | 0; //@line 2646
  HEAP32[$125 >> 2] = $14; //@line 2647
  $126 = $ReallocAsyncCtx14 + 36 | 0; //@line 2648
  HEAP32[$126 >> 2] = $110; //@line 2649
  $127 = $ReallocAsyncCtx14 + 40 | 0; //@line 2650
  HEAP32[$127 >> 2] = $18; //@line 2651
  $128 = $ReallocAsyncCtx14 + 44 | 0; //@line 2652
  HEAP32[$128 >> 2] = $116; //@line 2653
  sp = STACKTOP; //@line 2654
  return;
 } else {
  $99 = HEAP32[$96 + 4 >> 2] | 0; //@line 2658
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 2659
  FUNCTION_TABLE_vii[$99 & 7]($14, $27); //@line 2660
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 2663
   $100 = $ReallocAsyncCtx6 + 4 | 0; //@line 2664
   HEAP32[$100 >> 2] = $2; //@line 2665
   $101 = $ReallocAsyncCtx6 + 8 | 0; //@line 2666
   HEAP32[$101 >> 2] = $8; //@line 2667
   $102 = $ReallocAsyncCtx6 + 12 | 0; //@line 2668
   HEAP32[$102 >> 2] = $27; //@line 2669
   $103 = $ReallocAsyncCtx6 + 16 | 0; //@line 2670
   HEAP32[$103 >> 2] = $95; //@line 2671
   $104 = $ReallocAsyncCtx6 + 20 | 0; //@line 2672
   HEAP32[$104 >> 2] = $12; //@line 2673
   $105 = $ReallocAsyncCtx6 + 24 | 0; //@line 2674
   HEAP32[$105 >> 2] = $14; //@line 2675
   $106 = $ReallocAsyncCtx6 + 28 | 0; //@line 2676
   HEAP32[$106 >> 2] = $16; //@line 2677
   $107 = $ReallocAsyncCtx6 + 32 | 0; //@line 2678
   HEAP32[$107 >> 2] = $18; //@line 2679
   $108 = $ReallocAsyncCtx6 + 36 | 0; //@line 2680
   HEAP32[$108 >> 2] = $2; //@line 2681
   $109 = $ReallocAsyncCtx6 + 40 | 0; //@line 2682
   HEAP32[$109 >> 2] = $95; //@line 2683
   sp = STACKTOP; //@line 2684
   return;
  }
  ___async_unwind = 0; //@line 2687
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 2688
  $100 = $ReallocAsyncCtx6 + 4 | 0; //@line 2689
  HEAP32[$100 >> 2] = $2; //@line 2690
  $101 = $ReallocAsyncCtx6 + 8 | 0; //@line 2691
  HEAP32[$101 >> 2] = $8; //@line 2692
  $102 = $ReallocAsyncCtx6 + 12 | 0; //@line 2693
  HEAP32[$102 >> 2] = $27; //@line 2694
  $103 = $ReallocAsyncCtx6 + 16 | 0; //@line 2695
  HEAP32[$103 >> 2] = $95; //@line 2696
  $104 = $ReallocAsyncCtx6 + 20 | 0; //@line 2697
  HEAP32[$104 >> 2] = $12; //@line 2698
  $105 = $ReallocAsyncCtx6 + 24 | 0; //@line 2699
  HEAP32[$105 >> 2] = $14; //@line 2700
  $106 = $ReallocAsyncCtx6 + 28 | 0; //@line 2701
  HEAP32[$106 >> 2] = $16; //@line 2702
  $107 = $ReallocAsyncCtx6 + 32 | 0; //@line 2703
  HEAP32[$107 >> 2] = $18; //@line 2704
  $108 = $ReallocAsyncCtx6 + 36 | 0; //@line 2705
  HEAP32[$108 >> 2] = $2; //@line 2706
  $109 = $ReallocAsyncCtx6 + 40 | 0; //@line 2707
  HEAP32[$109 >> 2] = $95; //@line 2708
  sp = STACKTOP; //@line 2709
  return;
 }
}
function _mbed_vtracef__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $$0$i = 0, $$0141 = 0, $$0142 = 0, $$0144 = 0, $$1$off0 = 0, $$1$off0$expand_i1_val = 0, $$1$off0$expand_i1_val18 = 0, $$1143 = 0, $$1145 = 0, $$1152 = 0, $$1152$ = 0, $$3154 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $$lobit = 0, $$sink = 0, $10 = 0, $102 = 0, $108 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $136 = 0, $14 = 0, $147 = 0, $148 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $163 = 0, $164 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $42 = 0, $46 = 0, $48 = 0, $50 = 0, $53 = 0, $57 = 0, $6 = 0, $62 = 0, $73 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $95 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $extract$t159 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10296
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10298
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10300
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 10302
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10304
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 10306
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10308
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 10310
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10312
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 10314
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10316
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10318
 $24 = HEAP8[$0 + 48 >> 0] | 0; //@line 10320
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10322
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10324
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 10326
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 10328
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 10330
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 10332
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 10334
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 10338
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 10342
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 10344
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 10346
 HEAP32[137] = (HEAP32[137] | 0) + 1; //@line 10349
 $53 = HEAP32[126] | 0; //@line 10350
 do {
  if ($53 | 0) {
   HEAP8[$53 >> 0] = 0; //@line 10354
   do {
    if ($24 << 24 >> 24 > -1 & ($4 | 0) != 0) {
     $57 = HEAP32[123] | 0; //@line 10360
     if (HEAP8[$57 >> 0] | 0) {
      if (_strstr($57, $4) | 0) {
       $$0$i = 1; //@line 10367
       break;
      }
     }
     $62 = HEAP32[124] | 0; //@line 10371
     if (!(HEAP8[$62 >> 0] | 0)) {
      label = 9; //@line 10375
     } else {
      if (!(_strstr($62, $4) | 0)) {
       $$0$i = 1; //@line 10380
      } else {
       label = 9; //@line 10382
      }
     }
    } else {
     label = 9; //@line 10386
    }
   } while (0);
   if ((label | 0) == 9) {
    $$0$i = 0; //@line 10390
   }
   if (!((HEAP32[133] | 0) != 0 & ((($4 | 0) == 0 | (($20 | 0) == 0 | $$0$i)) ^ 1))) {
    HEAP32[130] = HEAP32[128]; //@line 10402
    break;
   }
   $73 = HEAPU8[488] | 0; //@line 10406
   $74 = $24 & 255; //@line 10407
   if ($74 & 31 & $73 | 0) {
    $78 = $73 & 64; //@line 10412
    $$lobit = $78 >>> 6; //@line 10413
    $79 = $$lobit & 255; //@line 10414
    $83 = ($73 & 32 | 0) == 0; //@line 10418
    $84 = HEAP32[127] | 0; //@line 10419
    $85 = HEAP32[126] | 0; //@line 10420
    $86 = $24 << 24 >> 24 == 1; //@line 10421
    if ($86 | ($73 & 128 | 0) != 0) {
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 10424
     _vsnprintf($85, $84, $20, $22) | 0; //@line 10425
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 65; //@line 10428
      $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 10429
      $$expand_i1_val = $86 & 1; //@line 10430
      HEAP8[$87 >> 0] = $$expand_i1_val; //@line 10431
      sp = STACKTOP; //@line 10432
      return;
     }
     ___async_unwind = 0; //@line 10435
     HEAP32[$ReallocAsyncCtx12 >> 2] = 65; //@line 10436
     $87 = $ReallocAsyncCtx12 + 4 | 0; //@line 10437
     $$expand_i1_val = $86 & 1; //@line 10438
     HEAP8[$87 >> 0] = $$expand_i1_val; //@line 10439
     sp = STACKTOP; //@line 10440
     return;
    }
    if (!$78) {
     $$1$off0 = ($$lobit | 0) != 0; //@line 10446
     $$1143 = $85; //@line 10446
     $$1145 = $84; //@line 10446
     $$3154 = 0; //@line 10446
     label = 28; //@line 10447
    } else {
     if ($83) {
      $$0142 = $85; //@line 10450
      $$0144 = $84; //@line 10450
     } else {
      $89 = _snprintf($85, $84, 3496, $38) | 0; //@line 10452
      $$ = ($89 | 0) >= ($84 | 0) ? 0 : $89; //@line 10454
      $91 = ($$ | 0) > 0; //@line 10455
      $$0142 = $91 ? $85 + $$ | 0 : $85; //@line 10460
      $$0144 = $84 - ($91 ? $$ : 0) | 0; //@line 10460
     }
     if (($$0144 | 0) > 0) {
      $95 = $74 + -2 | 0; //@line 10464
      switch ($95 >>> 1 | $95 << 31 | 0) {
      case 0:
       {
        $$sink = 3514; //@line 10470
        label = 25; //@line 10471
        break;
       }
      case 1:
       {
        $$sink = 3520; //@line 10475
        label = 25; //@line 10476
        break;
       }
      case 3:
       {
        $$sink = 3508; //@line 10480
        label = 25; //@line 10481
        break;
       }
      case 7:
       {
        $$sink = 3502; //@line 10485
        label = 25; //@line 10486
        break;
       }
      default:
       {
        $$0141 = 0; //@line 10490
        $$1152 = 0; //@line 10490
       }
      }
      if ((label | 0) == 25) {
       HEAP32[$42 >> 2] = $$sink; //@line 10494
       $$0141 = $79 & 1; //@line 10497
       $$1152 = _snprintf($$0142, $$0144, 3526, $42) | 0; //@line 10497
      }
      $$1152$ = ($$1152 | 0) < ($$0144 | 0) ? $$1152 : 0; //@line 10500
      $extract$t159 = $$0141 << 24 >> 24 != 0; //@line 10502
      if (($$1152$ | 0) > 0) {
       $102 = $$0141 << 24 >> 24 == 0; //@line 10504
       $$1$off0 = $extract$t159; //@line 10509
       $$1143 = $102 ? $$0142 : $$0142 + $$1152$ | 0; //@line 10509
       $$1145 = $$0144 - ($102 ? 0 : $$1152$) | 0; //@line 10509
       $$3154 = $$1152; //@line 10509
       label = 28; //@line 10510
      } else {
       $$1$off0 = $extract$t159; //@line 10512
       $$1143 = $$0142; //@line 10512
       $$1145 = $$0144; //@line 10512
       $$3154 = $$1152$; //@line 10512
       label = 28; //@line 10513
      }
     }
    }
    if ((label | 0) == 28) {
     if (($$1145 | 0) > 0 & (HEAP32[131] | 0) != 0) {
      HEAP32[$50 >> 2] = HEAP32[$22 >> 2]; //@line 10524
      $ReallocAsyncCtx11 = _emscripten_realloc_async_context(104) | 0; //@line 10525
      $108 = _vsnprintf(0, 0, $20, $50) | 0; //@line 10526
      if (___async) {
       HEAP32[$ReallocAsyncCtx11 >> 2] = 69; //@line 10529
       $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 10530
       HEAP32[$109 >> 2] = $2; //@line 10531
       $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 10532
       HEAP32[$110 >> 2] = $4; //@line 10533
       $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 10534
       HEAP32[$111 >> 2] = $6; //@line 10535
       $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 10536
       HEAP32[$112 >> 2] = $8; //@line 10537
       $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 10538
       HEAP32[$113 >> 2] = $10; //@line 10539
       $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 10540
       HEAP32[$114 >> 2] = $12; //@line 10541
       $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 10542
       HEAP32[$115 >> 2] = $14; //@line 10543
       $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 10544
       HEAP32[$116 >> 2] = $16; //@line 10545
       $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 10546
       HEAP32[$117 >> 2] = $18; //@line 10547
       $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 10548
       HEAP32[$118 >> 2] = $20; //@line 10549
       $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 10550
       HEAP32[$119 >> 2] = $22; //@line 10551
       $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 10552
       HEAP32[$120 >> 2] = $26; //@line 10553
       $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 10554
       HEAP32[$121 >> 2] = $28; //@line 10555
       $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 10556
       HEAP32[$122 >> 2] = $30; //@line 10557
       $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 10558
       HEAP32[$123 >> 2] = $32; //@line 10559
       $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 10560
       HEAP32[$124 >> 2] = $34; //@line 10561
       $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 10562
       HEAP32[$125 >> 2] = $36; //@line 10563
       $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 10564
       $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 10565
       HEAP8[$126 >> 0] = $$1$off0$expand_i1_val; //@line 10566
       $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 10567
       HEAP32[$127 >> 2] = $46; //@line 10568
       $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 10569
       HEAP32[$128 >> 2] = $$1143; //@line 10570
       $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 10571
       HEAP32[$129 >> 2] = $$1145; //@line 10572
       $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 10573
       HEAP32[$130 >> 2] = $48; //@line 10574
       $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 10575
       HEAP32[$131 >> 2] = $50; //@line 10576
       $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 10577
       HEAP32[$132 >> 2] = $74; //@line 10578
       $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 10579
       HEAP32[$133 >> 2] = $$3154; //@line 10580
       sp = STACKTOP; //@line 10581
       return;
      }
      HEAP32[___async_retval >> 2] = $108; //@line 10585
      ___async_unwind = 0; //@line 10586
      HEAP32[$ReallocAsyncCtx11 >> 2] = 69; //@line 10587
      $109 = $ReallocAsyncCtx11 + 4 | 0; //@line 10588
      HEAP32[$109 >> 2] = $2; //@line 10589
      $110 = $ReallocAsyncCtx11 + 8 | 0; //@line 10590
      HEAP32[$110 >> 2] = $4; //@line 10591
      $111 = $ReallocAsyncCtx11 + 12 | 0; //@line 10592
      HEAP32[$111 >> 2] = $6; //@line 10593
      $112 = $ReallocAsyncCtx11 + 16 | 0; //@line 10594
      HEAP32[$112 >> 2] = $8; //@line 10595
      $113 = $ReallocAsyncCtx11 + 20 | 0; //@line 10596
      HEAP32[$113 >> 2] = $10; //@line 10597
      $114 = $ReallocAsyncCtx11 + 24 | 0; //@line 10598
      HEAP32[$114 >> 2] = $12; //@line 10599
      $115 = $ReallocAsyncCtx11 + 28 | 0; //@line 10600
      HEAP32[$115 >> 2] = $14; //@line 10601
      $116 = $ReallocAsyncCtx11 + 32 | 0; //@line 10602
      HEAP32[$116 >> 2] = $16; //@line 10603
      $117 = $ReallocAsyncCtx11 + 36 | 0; //@line 10604
      HEAP32[$117 >> 2] = $18; //@line 10605
      $118 = $ReallocAsyncCtx11 + 40 | 0; //@line 10606
      HEAP32[$118 >> 2] = $20; //@line 10607
      $119 = $ReallocAsyncCtx11 + 44 | 0; //@line 10608
      HEAP32[$119 >> 2] = $22; //@line 10609
      $120 = $ReallocAsyncCtx11 + 48 | 0; //@line 10610
      HEAP32[$120 >> 2] = $26; //@line 10611
      $121 = $ReallocAsyncCtx11 + 52 | 0; //@line 10612
      HEAP32[$121 >> 2] = $28; //@line 10613
      $122 = $ReallocAsyncCtx11 + 56 | 0; //@line 10614
      HEAP32[$122 >> 2] = $30; //@line 10615
      $123 = $ReallocAsyncCtx11 + 60 | 0; //@line 10616
      HEAP32[$123 >> 2] = $32; //@line 10617
      $124 = $ReallocAsyncCtx11 + 64 | 0; //@line 10618
      HEAP32[$124 >> 2] = $34; //@line 10619
      $125 = $ReallocAsyncCtx11 + 68 | 0; //@line 10620
      HEAP32[$125 >> 2] = $36; //@line 10621
      $126 = $ReallocAsyncCtx11 + 72 | 0; //@line 10622
      $$1$off0$expand_i1_val = $$1$off0 & 1; //@line 10623
      HEAP8[$126 >> 0] = $$1$off0$expand_i1_val; //@line 10624
      $127 = $ReallocAsyncCtx11 + 76 | 0; //@line 10625
      HEAP32[$127 >> 2] = $46; //@line 10626
      $128 = $ReallocAsyncCtx11 + 80 | 0; //@line 10627
      HEAP32[$128 >> 2] = $$1143; //@line 10628
      $129 = $ReallocAsyncCtx11 + 84 | 0; //@line 10629
      HEAP32[$129 >> 2] = $$1145; //@line 10630
      $130 = $ReallocAsyncCtx11 + 88 | 0; //@line 10631
      HEAP32[$130 >> 2] = $48; //@line 10632
      $131 = $ReallocAsyncCtx11 + 92 | 0; //@line 10633
      HEAP32[$131 >> 2] = $50; //@line 10634
      $132 = $ReallocAsyncCtx11 + 96 | 0; //@line 10635
      HEAP32[$132 >> 2] = $74; //@line 10636
      $133 = $ReallocAsyncCtx11 + 100 | 0; //@line 10637
      HEAP32[$133 >> 2] = $$3154; //@line 10638
      sp = STACKTOP; //@line 10639
      return;
     }
     if (($$1145 | 0) > 0) {
      $136 = $74 + -2 | 0; //@line 10644
      switch ($136 >>> 1 | $136 << 31 | 0) {
      case 0:
       {
        HEAP32[$12 >> 2] = $4; //@line 10650
        $$5156 = _snprintf($$1143, $$1145, 3529, $12) | 0; //@line 10652
        break;
       }
      case 1:
       {
        HEAP32[$16 >> 2] = $4; //@line 10656
        $$5156 = _snprintf($$1143, $$1145, 3544, $16) | 0; //@line 10658
        break;
       }
      case 3:
       {
        HEAP32[$2 >> 2] = $4; //@line 10662
        $$5156 = _snprintf($$1143, $$1145, 3559, $2) | 0; //@line 10664
        break;
       }
      case 7:
       {
        HEAP32[$8 >> 2] = $4; //@line 10668
        $$5156 = _snprintf($$1143, $$1145, 3574, $8) | 0; //@line 10670
        break;
       }
      default:
       {
        $$5156 = _snprintf($$1143, $$1145, 3589, $30) | 0; //@line 10675
       }
      }
      $$5156$ = ($$5156 | 0) < ($$1145 | 0) ? $$5156 : 0; //@line 10679
      $147 = $$1143 + $$5156$ | 0; //@line 10681
      $148 = $$1145 - $$5156$ | 0; //@line 10682
      if (($$5156$ | 0) > 0 & ($148 | 0) > 0) {
       $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 10686
       $150 = _vsnprintf($147, $148, $20, $22) | 0; //@line 10687
       if (___async) {
        HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 10690
        $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 10691
        HEAP32[$151 >> 2] = $148; //@line 10692
        $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 10693
        HEAP32[$152 >> 2] = $147; //@line 10694
        $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 10695
        HEAP32[$153 >> 2] = $26; //@line 10696
        $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 10697
        HEAP32[$154 >> 2] = $28; //@line 10698
        $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 10699
        HEAP32[$155 >> 2] = $34; //@line 10700
        $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 10701
        HEAP32[$156 >> 2] = $36; //@line 10702
        $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 10703
        $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 10704
        HEAP8[$157 >> 0] = $$1$off0$expand_i1_val18; //@line 10705
        sp = STACKTOP; //@line 10706
        return;
       }
       HEAP32[___async_retval >> 2] = $150; //@line 10710
       ___async_unwind = 0; //@line 10711
       HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 10712
       $151 = $ReallocAsyncCtx10 + 4 | 0; //@line 10713
       HEAP32[$151 >> 2] = $148; //@line 10714
       $152 = $ReallocAsyncCtx10 + 8 | 0; //@line 10715
       HEAP32[$152 >> 2] = $147; //@line 10716
       $153 = $ReallocAsyncCtx10 + 12 | 0; //@line 10717
       HEAP32[$153 >> 2] = $26; //@line 10718
       $154 = $ReallocAsyncCtx10 + 16 | 0; //@line 10719
       HEAP32[$154 >> 2] = $28; //@line 10720
       $155 = $ReallocAsyncCtx10 + 20 | 0; //@line 10721
       HEAP32[$155 >> 2] = $34; //@line 10722
       $156 = $ReallocAsyncCtx10 + 24 | 0; //@line 10723
       HEAP32[$156 >> 2] = $36; //@line 10724
       $157 = $ReallocAsyncCtx10 + 28 | 0; //@line 10725
       $$1$off0$expand_i1_val18 = $$1$off0 & 1; //@line 10726
       HEAP8[$157 >> 0] = $$1$off0$expand_i1_val18; //@line 10727
       sp = STACKTOP; //@line 10728
       return;
      }
     }
    }
    $159 = HEAP32[133] | 0; //@line 10733
    $160 = HEAP32[126] | 0; //@line 10734
    $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 10735
    FUNCTION_TABLE_vi[$159 & 511]($160); //@line 10736
    if (___async) {
     HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 10739
     sp = STACKTOP; //@line 10740
     return;
    }
    ___async_unwind = 0; //@line 10743
    HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 10744
    sp = STACKTOP; //@line 10745
    return;
   }
  }
 } while (0);
 $161 = HEAP32[136] | 0; //@line 10750
 if (!$161) {
  return;
 }
 $163 = HEAP32[137] | 0; //@line 10755
 HEAP32[137] = 0; //@line 10756
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 10757
 FUNCTION_TABLE_v[$161 & 7](); //@line 10758
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 10761
  $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 10762
  HEAP32[$164 >> 2] = $163; //@line 10763
  sp = STACKTOP; //@line 10764
  return;
 }
 ___async_unwind = 0; //@line 10767
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 10768
 $164 = $ReallocAsyncCtx8 + 4 | 0; //@line 10769
 HEAP32[$164 >> 2] = $163; //@line 10770
 sp = STACKTOP; //@line 10771
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$048$i = 0, $$094 = 0, $$097 = 0, $$1105 = 0, $$1106 = 0, $$1107 = 0, $$170 = 0, $$2 = 0, $$296$ph113 = 0, $$299 = 0, $$3 = 0, $$3100 = 0, $$393$ph114 = 0, $$4$ph = 0, $$4110 = 0, $$byval_copy29 = 0, $$sink$i = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $101 = 0, $130 = 0, $131 = 0, $132 = 0, $14 = 0, $162 = 0, $164 = 0, $174 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $43 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $78 = 0, $81 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx21 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5878
 STACKTOP = STACKTOP + 176 | 0; //@line 5879
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(176); //@line 5879
 $$byval_copy29 = sp + 144 | 0; //@line 5880
 $5 = sp + 88 | 0; //@line 5881
 $6 = sp; //@line 5882
 $7 = sp + 64 | 0; //@line 5883
 if (!$1) {
  $$3 = -3003; //@line 5886
  STACKTOP = sp; //@line 5887
  return $$3 | 0; //@line 5887
 }
 $9 = _strlen($1) | 0; //@line 5889
 if (($9 | 0) > 255 | ($9 | 0) == 0) {
  $$3 = -3003; //@line 5894
  STACKTOP = sp; //@line 5895
  return $$3 | 0; //@line 5895
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($1, $4, $2) | 0)) {
  $$3 = 1; //@line 5900
  STACKTOP = sp; //@line 5901
  return $$3 | 0; //@line 5901
 }
 __ZN9UDPSocketC2Ev($5); //@line 5903
 $AsyncCtx21 = _emscripten_alloc_async_context(48, sp) | 0; //@line 5904
 $14 = __ZN6Socket4openEP12NetworkStack($5, $0) | 0; //@line 5905
 if (___async) {
  HEAP32[$AsyncCtx21 >> 2] = 155; //@line 5908
  HEAP32[$AsyncCtx21 + 4 >> 2] = $5; //@line 5910
  HEAP32[$AsyncCtx21 + 8 >> 2] = $5; //@line 5912
  HEAP32[$AsyncCtx21 + 12 >> 2] = $5; //@line 5914
  HEAP32[$AsyncCtx21 + 16 >> 2] = $$byval_copy29; //@line 5916
  HEAP32[$AsyncCtx21 + 20 >> 2] = $1; //@line 5918
  HEAP32[$AsyncCtx21 + 24 >> 2] = $2; //@line 5920
  HEAP32[$AsyncCtx21 + 28 >> 2] = $3; //@line 5922
  HEAP32[$AsyncCtx21 + 32 >> 2] = $6; //@line 5924
  HEAP32[$AsyncCtx21 + 36 >> 2] = $7; //@line 5926
  HEAP32[$AsyncCtx21 + 40 >> 2] = $0; //@line 5928
  HEAP32[$AsyncCtx21 + 44 >> 2] = $4; //@line 5930
  sp = STACKTOP; //@line 5931
  STACKTOP = sp; //@line 5932
  return 0; //@line 5932
 }
 _emscripten_free_async_context($AsyncCtx21 | 0); //@line 5934
 do {
  if (!$14) {
   __ZN6Socket11set_timeoutEi($5, 5e3); //@line 5938
   $27 = _malloc(512) | 0; //@line 5939
   if (!$27) {
    $$2 = -3007; //@line 5942
   } else {
    $29 = $27; //@line 5944
    $30 = $27 + 1 | 0; //@line 5945
    $31 = $27 + 2 | 0; //@line 5946
    $32 = $27 + 3 | 0; //@line 5947
    $33 = $27 + 4 | 0; //@line 5948
    $34 = $27 + 5 | 0; //@line 5949
    $35 = $27 + 6 | 0; //@line 5950
    $36 = $27 + 12 | 0; //@line 5951
    $$sink$i = ($4 | 0) == 2 ? 28 : 1; //@line 5953
    $$0 = 0; //@line 5954
    $$094 = 3; //@line 5954
    $$097 = 0; //@line 5954
    while (1) {
     HEAP32[$7 >> 2] = 0; //@line 5956
     HEAP32[$7 + 4 >> 2] = 0; //@line 5956
     HEAP32[$7 + 8 >> 2] = 0; //@line 5956
     HEAP32[$7 + 12 >> 2] = 0; //@line 5956
     HEAP32[$7 + 16 >> 2] = 0; //@line 5956
     HEAP32[$$byval_copy29 >> 2] = HEAP32[$7 >> 2]; //@line 5957
     HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 5957
     HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 5957
     HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 5957
     HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 5957
     __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy29, 0); //@line 5958
     if (!($$094 << 24 >> 24)) {
      $$4$ph = -3009; //@line 5961
      label = 32; //@line 5962
      break;
     }
     if (($$097 & 255) > 9) {
      if (!($$0 << 24 >> 24)) {
       $$4$ph = -3009; //@line 5969
       label = 32; //@line 5970
       break;
      } else {
       $$1107 = 0; //@line 5973
       $43 = 0; //@line 5973
       label = 13; //@line 5974
      }
     } else {
      if (($$097 & 255) < 5) {
       $$1107 = $$0; //@line 5979
       $43 = $$097; //@line 5979
       label = 13; //@line 5980
      } else {
       $$1106 = $$0; //@line 5982
       $$299 = $$097; //@line 5982
       label = 16; //@line 5983
      }
     }
     if ((label | 0) == 13) {
      label = 0; //@line 5987
      $46 = HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] | 0; //@line 5991
      $AsyncCtx = _emscripten_alloc_async_context(112, sp) | 0; //@line 5992
      $47 = FUNCTION_TABLE_iiii[$46 & 31]($0, $43 & 255, $6) | 0; //@line 5993
      if (___async) {
       label = 14; //@line 5996
       break;
      }
      _emscripten_free_async_context($AsyncCtx | 0); //@line 5999
      if (($47 | 0) < 0) {
       $$1106 = $$1107; //@line 6002
       $$299 = 5; //@line 6002
       label = 16; //@line 6003
      } else {
       $$1105 = $$1107; //@line 6005
       $$3100 = $43; //@line 6005
      }
     }
     if ((label | 0) == 16) {
      label = 0; //@line 6009
      $78 = 648 + ((($$299 & 255) + -5 | 0) * 20 | 0) | 0; //@line 6012
      HEAP32[$$byval_copy29 >> 2] = HEAP32[$78 >> 2]; //@line 6013
      HEAP32[$$byval_copy29 + 4 >> 2] = HEAP32[$78 + 4 >> 2]; //@line 6013
      HEAP32[$$byval_copy29 + 8 >> 2] = HEAP32[$78 + 8 >> 2]; //@line 6013
      HEAP32[$$byval_copy29 + 12 >> 2] = HEAP32[$78 + 12 >> 2]; //@line 6013
      HEAP32[$$byval_copy29 + 16 >> 2] = HEAP32[$78 + 16 >> 2]; //@line 6013
      __ZN13SocketAddress8set_addrE10nsapi_addr($6, $$byval_copy29); //@line 6014
      $$1105 = $$1106; //@line 6015
      $$3100 = $$299; //@line 6015
     }
     __ZN13SocketAddress8set_portEt($6, 53); //@line 6017
     HEAP8[$27 >> 0] = 0; //@line 6018
     HEAP8[$30 >> 0] = 1; //@line 6019
     HEAP8[$31 >> 0] = 1; //@line 6020
     HEAP8[$32 >> 0] = 0; //@line 6021
     HEAP8[$33 >> 0] = 0; //@line 6022
     HEAP8[$34 >> 0] = 1; //@line 6023
     HEAP8[$35 >> 0] = 0; //@line 6024
     HEAP8[$35 + 1 >> 0] = 0; //@line 6024
     HEAP8[$35 + 2 >> 0] = 0; //@line 6024
     HEAP8[$35 + 3 >> 0] = 0; //@line 6024
     HEAP8[$35 + 4 >> 0] = 0; //@line 6024
     HEAP8[$35 + 5 >> 0] = 0; //@line 6024
     if (!(HEAP8[$1 >> 0] | 0)) {
      $$sroa$0$0$in$lcssa$i = $36; //@line 6028
     } else {
      $$048$i = $1; //@line 6030
      $$sroa$0$0$in47$i = $36; //@line 6030
      while (1) {
       $81 = _strcspn($$048$i, 5075) | 0; //@line 6032
       $83 = $$sroa$0$0$in47$i + 1 | 0; //@line 6034
       HEAP8[$$sroa$0$0$in47$i >> 0] = $81; //@line 6035
       $84 = $81 & 255; //@line 6036
       _memcpy($83 | 0, $$048$i | 0, $84 | 0) | 0; //@line 6037
       $85 = $83 + $84 | 0; //@line 6038
       $$048$i = $$048$i + ($81 + ((HEAP8[$$048$i + $81 >> 0] | 0) == 46 & 1)) | 0; //@line 6044
       if (!(HEAP8[$$048$i >> 0] | 0)) {
        $$sroa$0$0$in$lcssa$i = $85; //@line 6048
        break;
       } else {
        $$sroa$0$0$in47$i = $85; //@line 6051
       }
      }
     }
     HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 6056
     HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 6058
     HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $$sink$i; //@line 6060
     HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 6062
     HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 6065
     $AsyncCtx9 = _emscripten_alloc_async_context(108, sp) | 0; //@line 6067
     $101 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($5, $6, $27, $$sroa$0$0$in$lcssa$i + 5 - $29 | 0) | 0; //@line 6068
     if (___async) {
      label = 20; //@line 6071
      break;
     }
     _emscripten_free_async_context($AsyncCtx9 | 0); //@line 6074
     if (($101 | 0) < 0) {
      $$296$ph113 = $$094; //@line 6077
      $$393$ph114 = $$1105; //@line 6077
     } else {
      $130 = $$1105 + 1 << 24 >> 24; //@line 6079
      $131 = $$094 + -1 << 24 >> 24; //@line 6080
      $AsyncCtx6 = _emscripten_alloc_async_context(104, sp) | 0; //@line 6081
      $132 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($5, 0, $27, 512) | 0; //@line 6082
      if (___async) {
       label = 23; //@line 6085
       break;
      }
      _emscripten_free_async_context($AsyncCtx6 | 0); //@line 6088
      if (($132 | 0) == -3001) {
       $$296$ph113 = $131; //@line 6091
       $$393$ph114 = $130; //@line 6091
      } else {
       if (($132 | 0) < 0) {
        $$4$ph = $132; //@line 6095
        label = 32; //@line 6096
        break;
       }
       $162 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($27, 1, $$byval_copy29, $2, $3) | 0; //@line 6099
       if (($162 | 0) > 0) {
        label = 27; //@line 6102
        break;
       }
       if (($162 | 0) >= 0) {
        $$170 = -3009; //@line 6107
        label = 31; //@line 6108
        break;
       }
       $$0 = $130; //@line 6111
       $$094 = $131; //@line 6111
       $$097 = $$3100; //@line 6111
       continue;
      }
     }
     $$0 = $$393$ph114; //@line 6116
     $$094 = $$296$ph113; //@line 6116
     $$097 = $$3100 + 1 << 24 >> 24; //@line 6116
    }
    do {
     if ((label | 0) == 14) {
      HEAP32[$AsyncCtx >> 2] = 156; //@line 6120
      HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 6122
      HEAP32[$AsyncCtx + 8 >> 2] = $$byval_copy29; //@line 6124
      HEAP8[$AsyncCtx + 12 >> 0] = $$094; //@line 6126
      HEAP32[$AsyncCtx + 16 >> 2] = $27; //@line 6128
      HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 6130
      HEAP32[$AsyncCtx + 24 >> 2] = $5; //@line 6132
      HEAP32[$AsyncCtx + 28 >> 2] = $$byval_copy29; //@line 6134
      HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 6136
      HEAP32[$AsyncCtx + 36 >> 2] = $2; //@line 6138
      HEAP32[$AsyncCtx + 40 >> 2] = $3; //@line 6140
      HEAP8[$AsyncCtx + 44 >> 0] = $$1107; //@line 6142
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 6144
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 6146
      HEAP8[$AsyncCtx + 56 >> 0] = $43; //@line 6148
      HEAP32[$AsyncCtx + 60 >> 2] = $30; //@line 6150
      HEAP32[$AsyncCtx + 64 >> 2] = $31; //@line 6152
      HEAP32[$AsyncCtx + 68 >> 2] = $32; //@line 6154
      HEAP32[$AsyncCtx + 72 >> 2] = $33; //@line 6156
      HEAP32[$AsyncCtx + 76 >> 2] = $34; //@line 6158
      HEAP32[$AsyncCtx + 80 >> 2] = $35; //@line 6160
      HEAP32[$AsyncCtx + 84 >> 2] = $36; //@line 6162
      HEAP8[$AsyncCtx + 88 >> 0] = $$sink$i; //@line 6164
      HEAP32[$AsyncCtx + 92 >> 2] = $29; //@line 6166
      HEAP32[$AsyncCtx + 96 >> 2] = $7; //@line 6168
      HEAP32[$AsyncCtx + 100 >> 2] = $7; //@line 6170
      HEAP32[$AsyncCtx + 104 >> 2] = $0; //@line 6172
      HEAP32[$AsyncCtx + 108 >> 2] = $0; //@line 6174
      sp = STACKTOP; //@line 6175
      STACKTOP = sp; //@line 6176
      return 0; //@line 6176
     } else if ((label | 0) == 20) {
      HEAP32[$AsyncCtx9 >> 2] = 157; //@line 6179
      HEAP32[$AsyncCtx9 + 4 >> 2] = $6; //@line 6181
      HEAP32[$AsyncCtx9 + 8 >> 2] = $$byval_copy29; //@line 6183
      HEAP32[$AsyncCtx9 + 12 >> 2] = $27; //@line 6185
      HEAP32[$AsyncCtx9 + 16 >> 2] = $5; //@line 6187
      HEAP32[$AsyncCtx9 + 20 >> 2] = $5; //@line 6189
      HEAP32[$AsyncCtx9 + 24 >> 2] = $5; //@line 6191
      HEAP8[$AsyncCtx9 + 28 >> 0] = $$3100; //@line 6193
      HEAP32[$AsyncCtx9 + 32 >> 2] = $$byval_copy29; //@line 6195
      HEAP32[$AsyncCtx9 + 36 >> 2] = $1; //@line 6197
      HEAP32[$AsyncCtx9 + 40 >> 2] = $2; //@line 6199
      HEAP32[$AsyncCtx9 + 44 >> 2] = $3; //@line 6201
      HEAP32[$AsyncCtx9 + 48 >> 2] = $6; //@line 6203
      HEAP32[$AsyncCtx9 + 52 >> 2] = $30; //@line 6205
      HEAP32[$AsyncCtx9 + 56 >> 2] = $31; //@line 6207
      HEAP32[$AsyncCtx9 + 60 >> 2] = $32; //@line 6209
      HEAP32[$AsyncCtx9 + 64 >> 2] = $33; //@line 6211
      HEAP32[$AsyncCtx9 + 68 >> 2] = $34; //@line 6213
      HEAP32[$AsyncCtx9 + 72 >> 2] = $35; //@line 6215
      HEAP32[$AsyncCtx9 + 76 >> 2] = $36; //@line 6217
      HEAP8[$AsyncCtx9 + 80 >> 0] = $$sink$i; //@line 6219
      HEAP32[$AsyncCtx9 + 84 >> 2] = $29; //@line 6221
      HEAP32[$AsyncCtx9 + 88 >> 2] = $7; //@line 6223
      HEAP32[$AsyncCtx9 + 92 >> 2] = $7; //@line 6225
      HEAP32[$AsyncCtx9 + 96 >> 2] = $0; //@line 6227
      HEAP32[$AsyncCtx9 + 100 >> 2] = $0; //@line 6229
      HEAP8[$AsyncCtx9 + 104 >> 0] = $$094; //@line 6231
      HEAP8[$AsyncCtx9 + 105 >> 0] = $$1105; //@line 6233
      sp = STACKTOP; //@line 6234
      STACKTOP = sp; //@line 6235
      return 0; //@line 6235
     } else if ((label | 0) == 23) {
      HEAP32[$AsyncCtx6 >> 2] = 158; //@line 6238
      HEAP32[$AsyncCtx6 + 4 >> 2] = $6; //@line 6240
      HEAP32[$AsyncCtx6 + 8 >> 2] = $$byval_copy29; //@line 6242
      HEAP32[$AsyncCtx6 + 12 >> 2] = $27; //@line 6244
      HEAP32[$AsyncCtx6 + 16 >> 2] = $5; //@line 6246
      HEAP32[$AsyncCtx6 + 20 >> 2] = $5; //@line 6248
      HEAP32[$AsyncCtx6 + 24 >> 2] = $5; //@line 6250
      HEAP8[$AsyncCtx6 + 28 >> 0] = $131; //@line 6252
      HEAP8[$AsyncCtx6 + 29 >> 0] = $130; //@line 6254
      HEAP8[$AsyncCtx6 + 30 >> 0] = $$3100; //@line 6256
      HEAP32[$AsyncCtx6 + 32 >> 2] = $$byval_copy29; //@line 6258
      HEAP32[$AsyncCtx6 + 36 >> 2] = $1; //@line 6260
      HEAP32[$AsyncCtx6 + 40 >> 2] = $2; //@line 6262
      HEAP32[$AsyncCtx6 + 44 >> 2] = $3; //@line 6264
      HEAP32[$AsyncCtx6 + 48 >> 2] = $6; //@line 6266
      HEAP32[$AsyncCtx6 + 52 >> 2] = $30; //@line 6268
      HEAP32[$AsyncCtx6 + 56 >> 2] = $31; //@line 6270
      HEAP32[$AsyncCtx6 + 60 >> 2] = $32; //@line 6272
      HEAP32[$AsyncCtx6 + 64 >> 2] = $33; //@line 6274
      HEAP32[$AsyncCtx6 + 68 >> 2] = $34; //@line 6276
      HEAP32[$AsyncCtx6 + 72 >> 2] = $35; //@line 6278
      HEAP32[$AsyncCtx6 + 76 >> 2] = $36; //@line 6280
      HEAP8[$AsyncCtx6 + 80 >> 0] = $$sink$i; //@line 6282
      HEAP32[$AsyncCtx6 + 84 >> 2] = $29; //@line 6284
      HEAP32[$AsyncCtx6 + 88 >> 2] = $7; //@line 6286
      HEAP32[$AsyncCtx6 + 92 >> 2] = $7; //@line 6288
      HEAP32[$AsyncCtx6 + 96 >> 2] = $0; //@line 6290
      HEAP32[$AsyncCtx6 + 100 >> 2] = $0; //@line 6292
      sp = STACKTOP; //@line 6293
      STACKTOP = sp; //@line 6294
      return 0; //@line 6294
     } else if ((label | 0) == 27) {
      $164 = HEAP32[$$byval_copy29 >> 2] | 0; //@line 6297
      $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 6298
      __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($1, $2, $164); //@line 6299
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 159; //@line 6302
       HEAP32[$AsyncCtx2 + 4 >> 2] = $162; //@line 6304
       HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy29; //@line 6306
       HEAP32[$AsyncCtx2 + 12 >> 2] = $6; //@line 6308
       HEAP32[$AsyncCtx2 + 16 >> 2] = $27; //@line 6310
       HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 6312
       HEAP32[$AsyncCtx2 + 24 >> 2] = $5; //@line 6314
       HEAP32[$AsyncCtx2 + 28 >> 2] = $5; //@line 6316
       sp = STACKTOP; //@line 6317
       STACKTOP = sp; //@line 6318
       return 0; //@line 6318
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 6320
       $$170 = $162; //@line 6321
       label = 31; //@line 6322
       break;
      }
     } else if ((label | 0) == 32) {
      $$4110 = $$4$ph; //@line 6327
     }
    } while (0);
    if ((label | 0) == 31) {
     $$4110 = $$170; //@line 6331
    }
    _free($27); //@line 6333
    $AsyncCtx17 = _emscripten_alloc_async_context(16, sp) | 0; //@line 6334
    $174 = __ZN6Socket5closeEv($5) | 0; //@line 6335
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 160; //@line 6338
     HEAP32[$AsyncCtx17 + 4 >> 2] = $$4110; //@line 6340
     HEAP32[$AsyncCtx17 + 8 >> 2] = $5; //@line 6342
     HEAP32[$AsyncCtx17 + 12 >> 2] = $5; //@line 6344
     sp = STACKTOP; //@line 6345
     STACKTOP = sp; //@line 6346
     return 0; //@line 6346
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 6348
     $$2 = ($174 | 0) == 0 ? $$4110 : $174; //@line 6351
     break;
    }
   }
  } else {
   $$2 = $14; //@line 6356
  }
 } while (0);
 $AsyncCtx13 = _emscripten_alloc_async_context(12, sp) | 0; //@line 6359
 __ZN9UDPSocketD2Ev($5); //@line 6360
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 161; //@line 6363
  HEAP32[$AsyncCtx13 + 4 >> 2] = $5; //@line 6365
  HEAP32[$AsyncCtx13 + 8 >> 2] = $$2; //@line 6367
  sp = STACKTOP; //@line 6368
  STACKTOP = sp; //@line 6369
  return 0; //@line 6369
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 6371
 $$3 = $$2; //@line 6372
 STACKTOP = sp; //@line 6373
 return $$3 | 0; //@line 6373
}
function _free($0) {
 $0 = $0 | 0;
 var $$0212$i = 0, $$0212$in$i = 0, $$0383 = 0, $$0384 = 0, $$0396 = 0, $$0403 = 0, $$1 = 0, $$1382 = 0, $$1387 = 0, $$1390 = 0, $$1398 = 0, $$1402 = 0, $$2 = 0, $$3 = 0, $$3400 = 0, $$pre$phi442Z2D = 0, $$pre$phi444Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $105 = 0, $106 = 0, $114 = 0, $115 = 0, $116 = 0, $124 = 0, $13 = 0, $132 = 0, $137 = 0, $138 = 0, $141 = 0, $143 = 0, $145 = 0, $16 = 0, $160 = 0, $165 = 0, $167 = 0, $17 = 0, $170 = 0, $173 = 0, $176 = 0, $179 = 0, $180 = 0, $181 = 0, $183 = 0, $185 = 0, $186 = 0, $188 = 0, $189 = 0, $195 = 0, $196 = 0, $2 = 0, $21 = 0, $210 = 0, $213 = 0, $214 = 0, $220 = 0, $235 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $244 = 0, $245 = 0, $251 = 0, $256 = 0, $257 = 0, $26 = 0, $260 = 0, $262 = 0, $265 = 0, $270 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $299 = 0, $3 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $319 = 0, $41 = 0, $46 = 0, $48 = 0, $51 = 0, $53 = 0, $56 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $65 = 0, $66 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $75 = 0, $89 = 0, $9 = 0, $92 = 0, $93 = 0, $99 = 0, label = 0;
 if (!$0) {
  return;
 }
 $2 = $0 + -8 | 0; //@line 2372
 $3 = HEAP32[1961] | 0; //@line 2373
 if ($2 >>> 0 < $3 >>> 0) {
  _abort(); //@line 2376
 }
 $6 = HEAP32[$0 + -4 >> 2] | 0; //@line 2380
 $7 = $6 & 3; //@line 2381
 if (($7 | 0) == 1) {
  _abort(); //@line 2384
 }
 $9 = $6 & -8; //@line 2387
 $10 = $2 + $9 | 0; //@line 2388
 L10 : do {
  if (!($6 & 1)) {
   $13 = HEAP32[$2 >> 2] | 0; //@line 2393
   if (!$7) {
    return;
   }
   $16 = $2 + (0 - $13) | 0; //@line 2399
   $17 = $13 + $9 | 0; //@line 2400
   if ($16 >>> 0 < $3 >>> 0) {
    _abort(); //@line 2403
   }
   if ((HEAP32[1962] | 0) == ($16 | 0)) {
    $105 = $10 + 4 | 0; //@line 2409
    $106 = HEAP32[$105 >> 2] | 0; //@line 2410
    if (($106 & 3 | 0) != 3) {
     $$1 = $16; //@line 2414
     $$1382 = $17; //@line 2414
     $114 = $16; //@line 2414
     break;
    }
    HEAP32[1959] = $17; //@line 2417
    HEAP32[$105 >> 2] = $106 & -2; //@line 2419
    HEAP32[$16 + 4 >> 2] = $17 | 1; //@line 2422
    HEAP32[$16 + $17 >> 2] = $17; //@line 2424
    return;
   }
   $21 = $13 >>> 3; //@line 2427
   if ($13 >>> 0 < 256) {
    $24 = HEAP32[$16 + 8 >> 2] | 0; //@line 2431
    $26 = HEAP32[$16 + 12 >> 2] | 0; //@line 2433
    $28 = 7868 + ($21 << 1 << 2) | 0; //@line 2435
    if (($24 | 0) != ($28 | 0)) {
     if ($3 >>> 0 > $24 >>> 0) {
      _abort(); //@line 2440
     }
     if ((HEAP32[$24 + 12 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2447
     }
    }
    if (($26 | 0) == ($24 | 0)) {
     HEAP32[1957] = HEAP32[1957] & ~(1 << $21); //@line 2457
     $$1 = $16; //@line 2458
     $$1382 = $17; //@line 2458
     $114 = $16; //@line 2458
     break;
    }
    if (($26 | 0) == ($28 | 0)) {
     $$pre$phi444Z2D = $26 + 8 | 0; //@line 2464
    } else {
     if ($3 >>> 0 > $26 >>> 0) {
      _abort(); //@line 2468
     }
     $41 = $26 + 8 | 0; //@line 2471
     if ((HEAP32[$41 >> 2] | 0) == ($16 | 0)) {
      $$pre$phi444Z2D = $41; //@line 2475
     } else {
      _abort(); //@line 2477
     }
    }
    HEAP32[$24 + 12 >> 2] = $26; //@line 2482
    HEAP32[$$pre$phi444Z2D >> 2] = $24; //@line 2483
    $$1 = $16; //@line 2484
    $$1382 = $17; //@line 2484
    $114 = $16; //@line 2484
    break;
   }
   $46 = HEAP32[$16 + 24 >> 2] | 0; //@line 2488
   $48 = HEAP32[$16 + 12 >> 2] | 0; //@line 2490
   do {
    if (($48 | 0) == ($16 | 0)) {
     $59 = $16 + 16 | 0; //@line 2494
     $60 = $59 + 4 | 0; //@line 2495
     $61 = HEAP32[$60 >> 2] | 0; //@line 2496
     if (!$61) {
      $63 = HEAP32[$59 >> 2] | 0; //@line 2499
      if (!$63) {
       $$3 = 0; //@line 2502
       break;
      } else {
       $$1387 = $63; //@line 2505
       $$1390 = $59; //@line 2505
      }
     } else {
      $$1387 = $61; //@line 2508
      $$1390 = $60; //@line 2508
     }
     while (1) {
      $65 = $$1387 + 20 | 0; //@line 2511
      $66 = HEAP32[$65 >> 2] | 0; //@line 2512
      if ($66 | 0) {
       $$1387 = $66; //@line 2515
       $$1390 = $65; //@line 2515
       continue;
      }
      $68 = $$1387 + 16 | 0; //@line 2518
      $69 = HEAP32[$68 >> 2] | 0; //@line 2519
      if (!$69) {
       break;
      } else {
       $$1387 = $69; //@line 2524
       $$1390 = $68; //@line 2524
      }
     }
     if ($3 >>> 0 > $$1390 >>> 0) {
      _abort(); //@line 2529
     } else {
      HEAP32[$$1390 >> 2] = 0; //@line 2532
      $$3 = $$1387; //@line 2533
      break;
     }
    } else {
     $51 = HEAP32[$16 + 8 >> 2] | 0; //@line 2538
     if ($3 >>> 0 > $51 >>> 0) {
      _abort(); //@line 2541
     }
     $53 = $51 + 12 | 0; //@line 2544
     if ((HEAP32[$53 >> 2] | 0) != ($16 | 0)) {
      _abort(); //@line 2548
     }
     $56 = $48 + 8 | 0; //@line 2551
     if ((HEAP32[$56 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$53 >> 2] = $48; //@line 2555
      HEAP32[$56 >> 2] = $51; //@line 2556
      $$3 = $48; //@line 2557
      break;
     } else {
      _abort(); //@line 2560
     }
    }
   } while (0);
   if (!$46) {
    $$1 = $16; //@line 2567
    $$1382 = $17; //@line 2567
    $114 = $16; //@line 2567
   } else {
    $74 = HEAP32[$16 + 28 >> 2] | 0; //@line 2570
    $75 = 8132 + ($74 << 2) | 0; //@line 2571
    do {
     if ((HEAP32[$75 >> 2] | 0) == ($16 | 0)) {
      HEAP32[$75 >> 2] = $$3; //@line 2576
      if (!$$3) {
       HEAP32[1958] = HEAP32[1958] & ~(1 << $74); //@line 2583
       $$1 = $16; //@line 2584
       $$1382 = $17; //@line 2584
       $114 = $16; //@line 2584
       break L10;
      }
     } else {
      if ((HEAP32[1961] | 0) >>> 0 > $46 >>> 0) {
       _abort(); //@line 2591
      } else {
       HEAP32[$46 + 16 + (((HEAP32[$46 + 16 >> 2] | 0) != ($16 | 0) & 1) << 2) >> 2] = $$3; //@line 2599
       if (!$$3) {
        $$1 = $16; //@line 2602
        $$1382 = $17; //@line 2602
        $114 = $16; //@line 2602
        break L10;
       } else {
        break;
       }
      }
     }
    } while (0);
    $89 = HEAP32[1961] | 0; //@line 2610
    if ($89 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 2613
    }
    HEAP32[$$3 + 24 >> 2] = $46; //@line 2617
    $92 = $16 + 16 | 0; //@line 2618
    $93 = HEAP32[$92 >> 2] | 0; //@line 2619
    do {
     if ($93 | 0) {
      if ($89 >>> 0 > $93 >>> 0) {
       _abort(); //@line 2625
      } else {
       HEAP32[$$3 + 16 >> 2] = $93; //@line 2629
       HEAP32[$93 + 24 >> 2] = $$3; //@line 2631
       break;
      }
     }
    } while (0);
    $99 = HEAP32[$92 + 4 >> 2] | 0; //@line 2637
    if (!$99) {
     $$1 = $16; //@line 2640
     $$1382 = $17; //@line 2640
     $114 = $16; //@line 2640
    } else {
     if ((HEAP32[1961] | 0) >>> 0 > $99 >>> 0) {
      _abort(); //@line 2645
     } else {
      HEAP32[$$3 + 20 >> 2] = $99; //@line 2649
      HEAP32[$99 + 24 >> 2] = $$3; //@line 2651
      $$1 = $16; //@line 2652
      $$1382 = $17; //@line 2652
      $114 = $16; //@line 2652
      break;
     }
    }
   }
  } else {
   $$1 = $2; //@line 2658
   $$1382 = $9; //@line 2658
   $114 = $2; //@line 2658
  }
 } while (0);
 if ($114 >>> 0 >= $10 >>> 0) {
  _abort(); //@line 2663
 }
 $115 = $10 + 4 | 0; //@line 2666
 $116 = HEAP32[$115 >> 2] | 0; //@line 2667
 if (!($116 & 1)) {
  _abort(); //@line 2671
 }
 if (!($116 & 2)) {
  if ((HEAP32[1963] | 0) == ($10 | 0)) {
   $124 = (HEAP32[1960] | 0) + $$1382 | 0; //@line 2681
   HEAP32[1960] = $124; //@line 2682
   HEAP32[1963] = $$1; //@line 2683
   HEAP32[$$1 + 4 >> 2] = $124 | 1; //@line 2686
   if (($$1 | 0) != (HEAP32[1962] | 0)) {
    return;
   }
   HEAP32[1962] = 0; //@line 2692
   HEAP32[1959] = 0; //@line 2693
   return;
  }
  if ((HEAP32[1962] | 0) == ($10 | 0)) {
   $132 = (HEAP32[1959] | 0) + $$1382 | 0; //@line 2700
   HEAP32[1959] = $132; //@line 2701
   HEAP32[1962] = $114; //@line 2702
   HEAP32[$$1 + 4 >> 2] = $132 | 1; //@line 2705
   HEAP32[$114 + $132 >> 2] = $132; //@line 2707
   return;
  }
  $137 = ($116 & -8) + $$1382 | 0; //@line 2711
  $138 = $116 >>> 3; //@line 2712
  L108 : do {
   if ($116 >>> 0 < 256) {
    $141 = HEAP32[$10 + 8 >> 2] | 0; //@line 2717
    $143 = HEAP32[$10 + 12 >> 2] | 0; //@line 2719
    $145 = 7868 + ($138 << 1 << 2) | 0; //@line 2721
    if (($141 | 0) != ($145 | 0)) {
     if ((HEAP32[1961] | 0) >>> 0 > $141 >>> 0) {
      _abort(); //@line 2727
     }
     if ((HEAP32[$141 + 12 >> 2] | 0) != ($10 | 0)) {
      _abort(); //@line 2734
     }
    }
    if (($143 | 0) == ($141 | 0)) {
     HEAP32[1957] = HEAP32[1957] & ~(1 << $138); //@line 2744
     break;
    }
    if (($143 | 0) == ($145 | 0)) {
     $$pre$phi442Z2D = $143 + 8 | 0; //@line 2750
    } else {
     if ((HEAP32[1961] | 0) >>> 0 > $143 >>> 0) {
      _abort(); //@line 2755
     }
     $160 = $143 + 8 | 0; //@line 2758
     if ((HEAP32[$160 >> 2] | 0) == ($10 | 0)) {
      $$pre$phi442Z2D = $160; //@line 2762
     } else {
      _abort(); //@line 2764
     }
    }
    HEAP32[$141 + 12 >> 2] = $143; //@line 2769
    HEAP32[$$pre$phi442Z2D >> 2] = $141; //@line 2770
   } else {
    $165 = HEAP32[$10 + 24 >> 2] | 0; //@line 2773
    $167 = HEAP32[$10 + 12 >> 2] | 0; //@line 2775
    do {
     if (($167 | 0) == ($10 | 0)) {
      $179 = $10 + 16 | 0; //@line 2779
      $180 = $179 + 4 | 0; //@line 2780
      $181 = HEAP32[$180 >> 2] | 0; //@line 2781
      if (!$181) {
       $183 = HEAP32[$179 >> 2] | 0; //@line 2784
       if (!$183) {
        $$3400 = 0; //@line 2787
        break;
       } else {
        $$1398 = $183; //@line 2790
        $$1402 = $179; //@line 2790
       }
      } else {
       $$1398 = $181; //@line 2793
       $$1402 = $180; //@line 2793
      }
      while (1) {
       $185 = $$1398 + 20 | 0; //@line 2796
       $186 = HEAP32[$185 >> 2] | 0; //@line 2797
       if ($186 | 0) {
        $$1398 = $186; //@line 2800
        $$1402 = $185; //@line 2800
        continue;
       }
       $188 = $$1398 + 16 | 0; //@line 2803
       $189 = HEAP32[$188 >> 2] | 0; //@line 2804
       if (!$189) {
        break;
       } else {
        $$1398 = $189; //@line 2809
        $$1402 = $188; //@line 2809
       }
      }
      if ((HEAP32[1961] | 0) >>> 0 > $$1402 >>> 0) {
       _abort(); //@line 2815
      } else {
       HEAP32[$$1402 >> 2] = 0; //@line 2818
       $$3400 = $$1398; //@line 2819
       break;
      }
     } else {
      $170 = HEAP32[$10 + 8 >> 2] | 0; //@line 2824
      if ((HEAP32[1961] | 0) >>> 0 > $170 >>> 0) {
       _abort(); //@line 2828
      }
      $173 = $170 + 12 | 0; //@line 2831
      if ((HEAP32[$173 >> 2] | 0) != ($10 | 0)) {
       _abort(); //@line 2835
      }
      $176 = $167 + 8 | 0; //@line 2838
      if ((HEAP32[$176 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$173 >> 2] = $167; //@line 2842
       HEAP32[$176 >> 2] = $170; //@line 2843
       $$3400 = $167; //@line 2844
       break;
      } else {
       _abort(); //@line 2847
      }
     }
    } while (0);
    if ($165 | 0) {
     $195 = HEAP32[$10 + 28 >> 2] | 0; //@line 2855
     $196 = 8132 + ($195 << 2) | 0; //@line 2856
     do {
      if ((HEAP32[$196 >> 2] | 0) == ($10 | 0)) {
       HEAP32[$196 >> 2] = $$3400; //@line 2861
       if (!$$3400) {
        HEAP32[1958] = HEAP32[1958] & ~(1 << $195); //@line 2868
        break L108;
       }
      } else {
       if ((HEAP32[1961] | 0) >>> 0 > $165 >>> 0) {
        _abort(); //@line 2875
       } else {
        HEAP32[$165 + 16 + (((HEAP32[$165 + 16 >> 2] | 0) != ($10 | 0) & 1) << 2) >> 2] = $$3400; //@line 2883
        if (!$$3400) {
         break L108;
        } else {
         break;
        }
       }
      }
     } while (0);
     $210 = HEAP32[1961] | 0; //@line 2893
     if ($210 >>> 0 > $$3400 >>> 0) {
      _abort(); //@line 2896
     }
     HEAP32[$$3400 + 24 >> 2] = $165; //@line 2900
     $213 = $10 + 16 | 0; //@line 2901
     $214 = HEAP32[$213 >> 2] | 0; //@line 2902
     do {
      if ($214 | 0) {
       if ($210 >>> 0 > $214 >>> 0) {
        _abort(); //@line 2908
       } else {
        HEAP32[$$3400 + 16 >> 2] = $214; //@line 2912
        HEAP32[$214 + 24 >> 2] = $$3400; //@line 2914
        break;
       }
      }
     } while (0);
     $220 = HEAP32[$213 + 4 >> 2] | 0; //@line 2920
     if ($220 | 0) {
      if ((HEAP32[1961] | 0) >>> 0 > $220 >>> 0) {
       _abort(); //@line 2926
      } else {
       HEAP32[$$3400 + 20 >> 2] = $220; //@line 2930
       HEAP32[$220 + 24 >> 2] = $$3400; //@line 2932
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $137 | 1; //@line 2941
  HEAP32[$114 + $137 >> 2] = $137; //@line 2943
  if (($$1 | 0) == (HEAP32[1962] | 0)) {
   HEAP32[1959] = $137; //@line 2947
   return;
  } else {
   $$2 = $137; //@line 2950
  }
 } else {
  HEAP32[$115 >> 2] = $116 & -2; //@line 2954
  HEAP32[$$1 + 4 >> 2] = $$1382 | 1; //@line 2957
  HEAP32[$114 + $$1382 >> 2] = $$1382; //@line 2959
  $$2 = $$1382; //@line 2960
 }
 $235 = $$2 >>> 3; //@line 2962
 if ($$2 >>> 0 < 256) {
  $238 = 7868 + ($235 << 1 << 2) | 0; //@line 2966
  $239 = HEAP32[1957] | 0; //@line 2967
  $240 = 1 << $235; //@line 2968
  if (!($239 & $240)) {
   HEAP32[1957] = $239 | $240; //@line 2973
   $$0403 = $238; //@line 2975
   $$pre$phiZ2D = $238 + 8 | 0; //@line 2975
  } else {
   $244 = $238 + 8 | 0; //@line 2977
   $245 = HEAP32[$244 >> 2] | 0; //@line 2978
   if ((HEAP32[1961] | 0) >>> 0 > $245 >>> 0) {
    _abort(); //@line 2982
   } else {
    $$0403 = $245; //@line 2985
    $$pre$phiZ2D = $244; //@line 2985
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 2988
  HEAP32[$$0403 + 12 >> 2] = $$1; //@line 2990
  HEAP32[$$1 + 8 >> 2] = $$0403; //@line 2992
  HEAP32[$$1 + 12 >> 2] = $238; //@line 2994
  return;
 }
 $251 = $$2 >>> 8; //@line 2997
 if (!$251) {
  $$0396 = 0; //@line 3000
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0396 = 31; //@line 3004
  } else {
   $256 = ($251 + 1048320 | 0) >>> 16 & 8; //@line 3008
   $257 = $251 << $256; //@line 3009
   $260 = ($257 + 520192 | 0) >>> 16 & 4; //@line 3012
   $262 = $257 << $260; //@line 3014
   $265 = ($262 + 245760 | 0) >>> 16 & 2; //@line 3017
   $270 = 14 - ($260 | $256 | $265) + ($262 << $265 >>> 15) | 0; //@line 3022
   $$0396 = $$2 >>> ($270 + 7 | 0) & 1 | $270 << 1; //@line 3028
  }
 }
 $276 = 8132 + ($$0396 << 2) | 0; //@line 3031
 HEAP32[$$1 + 28 >> 2] = $$0396; //@line 3033
 HEAP32[$$1 + 20 >> 2] = 0; //@line 3036
 HEAP32[$$1 + 16 >> 2] = 0; //@line 3037
 $280 = HEAP32[1958] | 0; //@line 3038
 $281 = 1 << $$0396; //@line 3039
 do {
  if (!($280 & $281)) {
   HEAP32[1958] = $280 | $281; //@line 3045
   HEAP32[$276 >> 2] = $$1; //@line 3046
   HEAP32[$$1 + 24 >> 2] = $276; //@line 3048
   HEAP32[$$1 + 12 >> 2] = $$1; //@line 3050
   HEAP32[$$1 + 8 >> 2] = $$1; //@line 3052
  } else {
   $$0383 = $$2 << (($$0396 | 0) == 31 ? 0 : 25 - ($$0396 >>> 1) | 0); //@line 3060
   $$0384 = HEAP32[$276 >> 2] | 0; //@line 3060
   while (1) {
    if ((HEAP32[$$0384 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
     label = 124; //@line 3067
     break;
    }
    $299 = $$0384 + 16 + ($$0383 >>> 31 << 2) | 0; //@line 3071
    $301 = HEAP32[$299 >> 2] | 0; //@line 3073
    if (!$301) {
     label = 121; //@line 3076
     break;
    } else {
     $$0383 = $$0383 << 1; //@line 3079
     $$0384 = $301; //@line 3079
    }
   }
   if ((label | 0) == 121) {
    if ((HEAP32[1961] | 0) >>> 0 > $299 >>> 0) {
     _abort(); //@line 3086
    } else {
     HEAP32[$299 >> 2] = $$1; //@line 3089
     HEAP32[$$1 + 24 >> 2] = $$0384; //@line 3091
     HEAP32[$$1 + 12 >> 2] = $$1; //@line 3093
     HEAP32[$$1 + 8 >> 2] = $$1; //@line 3095
     break;
    }
   } else if ((label | 0) == 124) {
    $308 = $$0384 + 8 | 0; //@line 3100
    $309 = HEAP32[$308 >> 2] | 0; //@line 3101
    $310 = HEAP32[1961] | 0; //@line 3102
    if ($310 >>> 0 <= $309 >>> 0 & $310 >>> 0 <= $$0384 >>> 0) {
     HEAP32[$309 + 12 >> 2] = $$1; //@line 3108
     HEAP32[$308 >> 2] = $$1; //@line 3109
     HEAP32[$$1 + 8 >> 2] = $309; //@line 3111
     HEAP32[$$1 + 12 >> 2] = $$0384; //@line 3113
     HEAP32[$$1 + 24 >> 2] = 0; //@line 3115
     break;
    } else {
     _abort(); //@line 3118
    }
   }
  }
 } while (0);
 $319 = (HEAP32[1965] | 0) + -1 | 0; //@line 3125
 HEAP32[1965] = $319; //@line 3126
 if (!$319) {
  $$0212$in$i = 8284; //@line 3129
 } else {
  return;
 }
 while (1) {
  $$0212$i = HEAP32[$$0212$in$i >> 2] | 0; //@line 3134
  if (!$$0212$i) {
   break;
  } else {
   $$0212$in$i = $$0212$i + 8 | 0; //@line 3140
  }
 }
 HEAP32[1965] = -1; //@line 3143
 return;
}
function _dispose_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0419 = 0, $$0420 = 0, $$0431 = 0, $$0438 = 0, $$1 = 0, $$1418 = 0, $$1426 = 0, $$1429 = 0, $$1433 = 0, $$1437 = 0, $$2 = 0, $$3 = 0, $$3435 = 0, $$pre$phi23Z2D = 0, $$pre$phi25Z2D = 0, $$pre$phiZ2D = 0, $101 = 0, $102 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $117 = 0, $12 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $134 = 0, $136 = 0, $138 = 0, $151 = 0, $156 = 0, $158 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $184 = 0, $185 = 0, $199 = 0, $2 = 0, $20 = 0, $202 = 0, $203 = 0, $209 = 0, $22 = 0, $224 = 0, $227 = 0, $228 = 0, $229 = 0, $233 = 0, $234 = 0, $24 = 0, $240 = 0, $245 = 0, $246 = 0, $249 = 0, $251 = 0, $254 = 0, $259 = 0, $265 = 0, $269 = 0, $270 = 0, $288 = 0, $290 = 0, $297 = 0, $298 = 0, $299 = 0, $37 = 0, $4 = 0, $42 = 0, $44 = 0, $47 = 0, $49 = 0, $52 = 0, $55 = 0, $56 = 0, $57 = 0, $59 = 0, $61 = 0, $62 = 0, $64 = 0, $65 = 0, $7 = 0, $70 = 0, $71 = 0, $85 = 0, $88 = 0, $89 = 0, $95 = 0, label = 0;
 $2 = $0 + $1 | 0; //@line 3639
 $4 = HEAP32[$0 + 4 >> 2] | 0; //@line 3641
 L1 : do {
  if (!($4 & 1)) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 3646
   if (!($4 & 3)) {
    return;
   }
   $11 = $0 + (0 - $7) | 0; //@line 3653
   $12 = $7 + $1 | 0; //@line 3654
   $13 = HEAP32[1961] | 0; //@line 3655
   if ($11 >>> 0 < $13 >>> 0) {
    _abort(); //@line 3658
   }
   if ((HEAP32[1962] | 0) == ($11 | 0)) {
    $101 = $2 + 4 | 0; //@line 3664
    $102 = HEAP32[$101 >> 2] | 0; //@line 3665
    if (($102 & 3 | 0) != 3) {
     $$1 = $11; //@line 3669
     $$1418 = $12; //@line 3669
     break;
    }
    HEAP32[1959] = $12; //@line 3672
    HEAP32[$101 >> 2] = $102 & -2; //@line 3674
    HEAP32[$11 + 4 >> 2] = $12 | 1; //@line 3677
    HEAP32[$2 >> 2] = $12; //@line 3678
    return;
   }
   $17 = $7 >>> 3; //@line 3681
   if ($7 >>> 0 < 256) {
    $20 = HEAP32[$11 + 8 >> 2] | 0; //@line 3685
    $22 = HEAP32[$11 + 12 >> 2] | 0; //@line 3687
    $24 = 7868 + ($17 << 1 << 2) | 0; //@line 3689
    if (($20 | 0) != ($24 | 0)) {
     if ($13 >>> 0 > $20 >>> 0) {
      _abort(); //@line 3694
     }
     if ((HEAP32[$20 + 12 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3701
     }
    }
    if (($22 | 0) == ($20 | 0)) {
     HEAP32[1957] = HEAP32[1957] & ~(1 << $17); //@line 3711
     $$1 = $11; //@line 3712
     $$1418 = $12; //@line 3712
     break;
    }
    if (($22 | 0) == ($24 | 0)) {
     $$pre$phi25Z2D = $22 + 8 | 0; //@line 3718
    } else {
     if ($13 >>> 0 > $22 >>> 0) {
      _abort(); //@line 3722
     }
     $37 = $22 + 8 | 0; //@line 3725
     if ((HEAP32[$37 >> 2] | 0) == ($11 | 0)) {
      $$pre$phi25Z2D = $37; //@line 3729
     } else {
      _abort(); //@line 3731
     }
    }
    HEAP32[$20 + 12 >> 2] = $22; //@line 3736
    HEAP32[$$pre$phi25Z2D >> 2] = $20; //@line 3737
    $$1 = $11; //@line 3738
    $$1418 = $12; //@line 3738
    break;
   }
   $42 = HEAP32[$11 + 24 >> 2] | 0; //@line 3742
   $44 = HEAP32[$11 + 12 >> 2] | 0; //@line 3744
   do {
    if (($44 | 0) == ($11 | 0)) {
     $55 = $11 + 16 | 0; //@line 3748
     $56 = $55 + 4 | 0; //@line 3749
     $57 = HEAP32[$56 >> 2] | 0; //@line 3750
     if (!$57) {
      $59 = HEAP32[$55 >> 2] | 0; //@line 3753
      if (!$59) {
       $$3 = 0; //@line 3756
       break;
      } else {
       $$1426 = $59; //@line 3759
       $$1429 = $55; //@line 3759
      }
     } else {
      $$1426 = $57; //@line 3762
      $$1429 = $56; //@line 3762
     }
     while (1) {
      $61 = $$1426 + 20 | 0; //@line 3765
      $62 = HEAP32[$61 >> 2] | 0; //@line 3766
      if ($62 | 0) {
       $$1426 = $62; //@line 3769
       $$1429 = $61; //@line 3769
       continue;
      }
      $64 = $$1426 + 16 | 0; //@line 3772
      $65 = HEAP32[$64 >> 2] | 0; //@line 3773
      if (!$65) {
       break;
      } else {
       $$1426 = $65; //@line 3778
       $$1429 = $64; //@line 3778
      }
     }
     if ($13 >>> 0 > $$1429 >>> 0) {
      _abort(); //@line 3783
     } else {
      HEAP32[$$1429 >> 2] = 0; //@line 3786
      $$3 = $$1426; //@line 3787
      break;
     }
    } else {
     $47 = HEAP32[$11 + 8 >> 2] | 0; //@line 3792
     if ($13 >>> 0 > $47 >>> 0) {
      _abort(); //@line 3795
     }
     $49 = $47 + 12 | 0; //@line 3798
     if ((HEAP32[$49 >> 2] | 0) != ($11 | 0)) {
      _abort(); //@line 3802
     }
     $52 = $44 + 8 | 0; //@line 3805
     if ((HEAP32[$52 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$49 >> 2] = $44; //@line 3809
      HEAP32[$52 >> 2] = $47; //@line 3810
      $$3 = $44; //@line 3811
      break;
     } else {
      _abort(); //@line 3814
     }
    }
   } while (0);
   if (!$42) {
    $$1 = $11; //@line 3821
    $$1418 = $12; //@line 3821
   } else {
    $70 = HEAP32[$11 + 28 >> 2] | 0; //@line 3824
    $71 = 8132 + ($70 << 2) | 0; //@line 3825
    do {
     if ((HEAP32[$71 >> 2] | 0) == ($11 | 0)) {
      HEAP32[$71 >> 2] = $$3; //@line 3830
      if (!$$3) {
       HEAP32[1958] = HEAP32[1958] & ~(1 << $70); //@line 3837
       $$1 = $11; //@line 3838
       $$1418 = $12; //@line 3838
       break L1;
      }
     } else {
      if ((HEAP32[1961] | 0) >>> 0 > $42 >>> 0) {
       _abort(); //@line 3845
      } else {
       HEAP32[$42 + 16 + (((HEAP32[$42 + 16 >> 2] | 0) != ($11 | 0) & 1) << 2) >> 2] = $$3; //@line 3853
       if (!$$3) {
        $$1 = $11; //@line 3856
        $$1418 = $12; //@line 3856
        break L1;
       } else {
        break;
       }
      }
     }
    } while (0);
    $85 = HEAP32[1961] | 0; //@line 3864
    if ($85 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3867
    }
    HEAP32[$$3 + 24 >> 2] = $42; //@line 3871
    $88 = $11 + 16 | 0; //@line 3872
    $89 = HEAP32[$88 >> 2] | 0; //@line 3873
    do {
     if ($89 | 0) {
      if ($85 >>> 0 > $89 >>> 0) {
       _abort(); //@line 3879
      } else {
       HEAP32[$$3 + 16 >> 2] = $89; //@line 3883
       HEAP32[$89 + 24 >> 2] = $$3; //@line 3885
       break;
      }
     }
    } while (0);
    $95 = HEAP32[$88 + 4 >> 2] | 0; //@line 3891
    if (!$95) {
     $$1 = $11; //@line 3894
     $$1418 = $12; //@line 3894
    } else {
     if ((HEAP32[1961] | 0) >>> 0 > $95 >>> 0) {
      _abort(); //@line 3899
     } else {
      HEAP32[$$3 + 20 >> 2] = $95; //@line 3903
      HEAP32[$95 + 24 >> 2] = $$3; //@line 3905
      $$1 = $11; //@line 3906
      $$1418 = $12; //@line 3906
      break;
     }
    }
   }
  } else {
   $$1 = $0; //@line 3912
   $$1418 = $1; //@line 3912
  }
 } while (0);
 $108 = HEAP32[1961] | 0; //@line 3915
 if ($2 >>> 0 < $108 >>> 0) {
  _abort(); //@line 3918
 }
 $110 = $2 + 4 | 0; //@line 3921
 $111 = HEAP32[$110 >> 2] | 0; //@line 3922
 if (!($111 & 2)) {
  if ((HEAP32[1963] | 0) == ($2 | 0)) {
   $117 = (HEAP32[1960] | 0) + $$1418 | 0; //@line 3930
   HEAP32[1960] = $117; //@line 3931
   HEAP32[1963] = $$1; //@line 3932
   HEAP32[$$1 + 4 >> 2] = $117 | 1; //@line 3935
   if (($$1 | 0) != (HEAP32[1962] | 0)) {
    return;
   }
   HEAP32[1962] = 0; //@line 3941
   HEAP32[1959] = 0; //@line 3942
   return;
  }
  if ((HEAP32[1962] | 0) == ($2 | 0)) {
   $125 = (HEAP32[1959] | 0) + $$1418 | 0; //@line 3949
   HEAP32[1959] = $125; //@line 3950
   HEAP32[1962] = $$1; //@line 3951
   HEAP32[$$1 + 4 >> 2] = $125 | 1; //@line 3954
   HEAP32[$$1 + $125 >> 2] = $125; //@line 3956
   return;
  }
  $130 = ($111 & -8) + $$1418 | 0; //@line 3960
  $131 = $111 >>> 3; //@line 3961
  L96 : do {
   if ($111 >>> 0 < 256) {
    $134 = HEAP32[$2 + 8 >> 2] | 0; //@line 3966
    $136 = HEAP32[$2 + 12 >> 2] | 0; //@line 3968
    $138 = 7868 + ($131 << 1 << 2) | 0; //@line 3970
    if (($134 | 0) != ($138 | 0)) {
     if ($108 >>> 0 > $134 >>> 0) {
      _abort(); //@line 3975
     }
     if ((HEAP32[$134 + 12 >> 2] | 0) != ($2 | 0)) {
      _abort(); //@line 3982
     }
    }
    if (($136 | 0) == ($134 | 0)) {
     HEAP32[1957] = HEAP32[1957] & ~(1 << $131); //@line 3992
     break;
    }
    if (($136 | 0) == ($138 | 0)) {
     $$pre$phi23Z2D = $136 + 8 | 0; //@line 3998
    } else {
     if ($108 >>> 0 > $136 >>> 0) {
      _abort(); //@line 4002
     }
     $151 = $136 + 8 | 0; //@line 4005
     if ((HEAP32[$151 >> 2] | 0) == ($2 | 0)) {
      $$pre$phi23Z2D = $151; //@line 4009
     } else {
      _abort(); //@line 4011
     }
    }
    HEAP32[$134 + 12 >> 2] = $136; //@line 4016
    HEAP32[$$pre$phi23Z2D >> 2] = $134; //@line 4017
   } else {
    $156 = HEAP32[$2 + 24 >> 2] | 0; //@line 4020
    $158 = HEAP32[$2 + 12 >> 2] | 0; //@line 4022
    do {
     if (($158 | 0) == ($2 | 0)) {
      $169 = $2 + 16 | 0; //@line 4026
      $170 = $169 + 4 | 0; //@line 4027
      $171 = HEAP32[$170 >> 2] | 0; //@line 4028
      if (!$171) {
       $173 = HEAP32[$169 >> 2] | 0; //@line 4031
       if (!$173) {
        $$3435 = 0; //@line 4034
        break;
       } else {
        $$1433 = $173; //@line 4037
        $$1437 = $169; //@line 4037
       }
      } else {
       $$1433 = $171; //@line 4040
       $$1437 = $170; //@line 4040
      }
      while (1) {
       $175 = $$1433 + 20 | 0; //@line 4043
       $176 = HEAP32[$175 >> 2] | 0; //@line 4044
       if ($176 | 0) {
        $$1433 = $176; //@line 4047
        $$1437 = $175; //@line 4047
        continue;
       }
       $178 = $$1433 + 16 | 0; //@line 4050
       $179 = HEAP32[$178 >> 2] | 0; //@line 4051
       if (!$179) {
        break;
       } else {
        $$1433 = $179; //@line 4056
        $$1437 = $178; //@line 4056
       }
      }
      if ($108 >>> 0 > $$1437 >>> 0) {
       _abort(); //@line 4061
      } else {
       HEAP32[$$1437 >> 2] = 0; //@line 4064
       $$3435 = $$1433; //@line 4065
       break;
      }
     } else {
      $161 = HEAP32[$2 + 8 >> 2] | 0; //@line 4070
      if ($108 >>> 0 > $161 >>> 0) {
       _abort(); //@line 4073
      }
      $163 = $161 + 12 | 0; //@line 4076
      if ((HEAP32[$163 >> 2] | 0) != ($2 | 0)) {
       _abort(); //@line 4080
      }
      $166 = $158 + 8 | 0; //@line 4083
      if ((HEAP32[$166 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$163 >> 2] = $158; //@line 4087
       HEAP32[$166 >> 2] = $161; //@line 4088
       $$3435 = $158; //@line 4089
       break;
      } else {
       _abort(); //@line 4092
      }
     }
    } while (0);
    if ($156 | 0) {
     $184 = HEAP32[$2 + 28 >> 2] | 0; //@line 4100
     $185 = 8132 + ($184 << 2) | 0; //@line 4101
     do {
      if ((HEAP32[$185 >> 2] | 0) == ($2 | 0)) {
       HEAP32[$185 >> 2] = $$3435; //@line 4106
       if (!$$3435) {
        HEAP32[1958] = HEAP32[1958] & ~(1 << $184); //@line 4113
        break L96;
       }
      } else {
       if ((HEAP32[1961] | 0) >>> 0 > $156 >>> 0) {
        _abort(); //@line 4120
       } else {
        HEAP32[$156 + 16 + (((HEAP32[$156 + 16 >> 2] | 0) != ($2 | 0) & 1) << 2) >> 2] = $$3435; //@line 4128
        if (!$$3435) {
         break L96;
        } else {
         break;
        }
       }
      }
     } while (0);
     $199 = HEAP32[1961] | 0; //@line 4138
     if ($199 >>> 0 > $$3435 >>> 0) {
      _abort(); //@line 4141
     }
     HEAP32[$$3435 + 24 >> 2] = $156; //@line 4145
     $202 = $2 + 16 | 0; //@line 4146
     $203 = HEAP32[$202 >> 2] | 0; //@line 4147
     do {
      if ($203 | 0) {
       if ($199 >>> 0 > $203 >>> 0) {
        _abort(); //@line 4153
       } else {
        HEAP32[$$3435 + 16 >> 2] = $203; //@line 4157
        HEAP32[$203 + 24 >> 2] = $$3435; //@line 4159
        break;
       }
      }
     } while (0);
     $209 = HEAP32[$202 + 4 >> 2] | 0; //@line 4165
     if ($209 | 0) {
      if ((HEAP32[1961] | 0) >>> 0 > $209 >>> 0) {
       _abort(); //@line 4171
      } else {
       HEAP32[$$3435 + 20 >> 2] = $209; //@line 4175
       HEAP32[$209 + 24 >> 2] = $$3435; //@line 4177
       break;
      }
     }
    }
   }
  } while (0);
  HEAP32[$$1 + 4 >> 2] = $130 | 1; //@line 4186
  HEAP32[$$1 + $130 >> 2] = $130; //@line 4188
  if (($$1 | 0) == (HEAP32[1962] | 0)) {
   HEAP32[1959] = $130; //@line 4192
   return;
  } else {
   $$2 = $130; //@line 4195
  }
 } else {
  HEAP32[$110 >> 2] = $111 & -2; //@line 4199
  HEAP32[$$1 + 4 >> 2] = $$1418 | 1; //@line 4202
  HEAP32[$$1 + $$1418 >> 2] = $$1418; //@line 4204
  $$2 = $$1418; //@line 4205
 }
 $224 = $$2 >>> 3; //@line 4207
 if ($$2 >>> 0 < 256) {
  $227 = 7868 + ($224 << 1 << 2) | 0; //@line 4211
  $228 = HEAP32[1957] | 0; //@line 4212
  $229 = 1 << $224; //@line 4213
  if (!($228 & $229)) {
   HEAP32[1957] = $228 | $229; //@line 4218
   $$0438 = $227; //@line 4220
   $$pre$phiZ2D = $227 + 8 | 0; //@line 4220
  } else {
   $233 = $227 + 8 | 0; //@line 4222
   $234 = HEAP32[$233 >> 2] | 0; //@line 4223
   if ((HEAP32[1961] | 0) >>> 0 > $234 >>> 0) {
    _abort(); //@line 4227
   } else {
    $$0438 = $234; //@line 4230
    $$pre$phiZ2D = $233; //@line 4230
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$1; //@line 4233
  HEAP32[$$0438 + 12 >> 2] = $$1; //@line 4235
  HEAP32[$$1 + 8 >> 2] = $$0438; //@line 4237
  HEAP32[$$1 + 12 >> 2] = $227; //@line 4239
  return;
 }
 $240 = $$2 >>> 8; //@line 4242
 if (!$240) {
  $$0431 = 0; //@line 4245
 } else {
  if ($$2 >>> 0 > 16777215) {
   $$0431 = 31; //@line 4249
  } else {
   $245 = ($240 + 1048320 | 0) >>> 16 & 8; //@line 4253
   $246 = $240 << $245; //@line 4254
   $249 = ($246 + 520192 | 0) >>> 16 & 4; //@line 4257
   $251 = $246 << $249; //@line 4259
   $254 = ($251 + 245760 | 0) >>> 16 & 2; //@line 4262
   $259 = 14 - ($249 | $245 | $254) + ($251 << $254 >>> 15) | 0; //@line 4267
   $$0431 = $$2 >>> ($259 + 7 | 0) & 1 | $259 << 1; //@line 4273
  }
 }
 $265 = 8132 + ($$0431 << 2) | 0; //@line 4276
 HEAP32[$$1 + 28 >> 2] = $$0431; //@line 4278
 HEAP32[$$1 + 20 >> 2] = 0; //@line 4281
 HEAP32[$$1 + 16 >> 2] = 0; //@line 4282
 $269 = HEAP32[1958] | 0; //@line 4283
 $270 = 1 << $$0431; //@line 4284
 if (!($269 & $270)) {
  HEAP32[1958] = $269 | $270; //@line 4289
  HEAP32[$265 >> 2] = $$1; //@line 4290
  HEAP32[$$1 + 24 >> 2] = $265; //@line 4292
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4294
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4296
  return;
 }
 $$0419 = $$2 << (($$0431 | 0) == 31 ? 0 : 25 - ($$0431 >>> 1) | 0); //@line 4305
 $$0420 = HEAP32[$265 >> 2] | 0; //@line 4305
 while (1) {
  if ((HEAP32[$$0420 + 4 >> 2] & -8 | 0) == ($$2 | 0)) {
   label = 121; //@line 4312
   break;
  }
  $288 = $$0420 + 16 + ($$0419 >>> 31 << 2) | 0; //@line 4316
  $290 = HEAP32[$288 >> 2] | 0; //@line 4318
  if (!$290) {
   label = 118; //@line 4321
   break;
  } else {
   $$0419 = $$0419 << 1; //@line 4324
   $$0420 = $290; //@line 4324
  }
 }
 if ((label | 0) == 118) {
  if ((HEAP32[1961] | 0) >>> 0 > $288 >>> 0) {
   _abort(); //@line 4331
  }
  HEAP32[$288 >> 2] = $$1; //@line 4334
  HEAP32[$$1 + 24 >> 2] = $$0420; //@line 4336
  HEAP32[$$1 + 12 >> 2] = $$1; //@line 4338
  HEAP32[$$1 + 8 >> 2] = $$1; //@line 4340
  return;
 } else if ((label | 0) == 121) {
  $297 = $$0420 + 8 | 0; //@line 4344
  $298 = HEAP32[$297 >> 2] | 0; //@line 4345
  $299 = HEAP32[1961] | 0; //@line 4346
  if (!($299 >>> 0 <= $298 >>> 0 & $299 >>> 0 <= $$0420 >>> 0)) {
   _abort(); //@line 4351
  }
  HEAP32[$298 + 12 >> 2] = $$1; //@line 4355
  HEAP32[$297 >> 2] = $$1; //@line 4356
  HEAP32[$$1 + 8 >> 2] = $298; //@line 4358
  HEAP32[$$1 + 12 >> 2] = $$0420; //@line 4360
  HEAP32[$$1 + 24 >> 2] = 0; //@line 4362
  return;
 }
}
function ___intscan($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0154222 = 0, $$0157 = 0, $$0159 = 0, $$1155192 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156210 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162215 = 0, $$4163$be = 0, $$4163$lcssa = 0, $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7198 = 0, $$8 = 0, $$9$be = 0, $104 = 0, $123 = 0, $124 = 0, $131 = 0, $133 = 0, $134 = 0, $138 = 0, $139 = 0, $147 = 0, $152 = 0, $153 = 0, $155 = 0, $158 = 0, $16 = 0, $160 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $169 = 0, $170 = 0, $171 = 0, $189 = 0, $190 = 0, $198 = 0, $20 = 0, $204 = 0, $206 = 0, $207 = 0, $209 = 0, $21 = 0, $211 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $225 = 0, $226 = 0, $227 = 0, $242 = 0, $263 = 0, $265 = 0, $275 = 0, $28 = 0, $284 = 0, $287 = 0, $289 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $32 = 0, $40 = 0, $42 = 0, $50 = 0, $54 = 0, $6 = 0, $7 = 0, $70 = 0, $74 = 0, $75 = 0, $86 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $93 = 0, $94 = 0, $96 = 0, label = 0;
 L1 : do {
  if ($1 >>> 0 > 36) {
   HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 6940
   $289 = 0; //@line 6941
   $290 = 0; //@line 6941
  } else {
   $6 = $0 + 4 | 0; //@line 6943
   $7 = $0 + 100 | 0; //@line 6944
   do {
    $9 = HEAP32[$6 >> 2] | 0; //@line 6946
    if ($9 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$6 >> 2] = $9 + 1; //@line 6951
     $16 = HEAPU8[$9 >> 0] | 0; //@line 6954
    } else {
     $16 = ___shgetc($0) | 0; //@line 6957
    }
   } while ((_isspace($16) | 0) != 0);
   L11 : do {
    switch ($16 | 0) {
    case 43:
    case 45:
     {
      $20 = (($16 | 0) == 45) << 31 >> 31; //@line 6969
      $21 = HEAP32[$6 >> 2] | 0; //@line 6970
      if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $21 + 1; //@line 6975
       $$0157 = $20; //@line 6978
       $$0159 = HEAPU8[$21 >> 0] | 0; //@line 6978
       break L11;
      } else {
       $$0157 = $20; //@line 6982
       $$0159 = ___shgetc($0) | 0; //@line 6982
       break L11;
      }
      break;
     }
    default:
     {
      $$0157 = 0; //@line 6988
      $$0159 = $16; //@line 6988
     }
    }
   } while (0);
   $28 = ($1 | 0) == 0; //@line 6992
   do {
    if (($1 | 16 | 0) == 16 & ($$0159 | 0) == 48) {
     $32 = HEAP32[$6 >> 2] | 0; //@line 6999
     if ($32 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $32 + 1; //@line 7004
      $40 = HEAPU8[$32 >> 0] | 0; //@line 7007
     } else {
      $40 = ___shgetc($0) | 0; //@line 7010
     }
     if (($40 | 32 | 0) != 120) {
      if ($28) {
       $$1160169 = $40; //@line 7016
       $$1165167 = 8; //@line 7016
       label = 46; //@line 7017
       break;
      } else {
       $$1160 = $40; //@line 7020
       $$1165 = $1; //@line 7020
       label = 32; //@line 7021
       break;
      }
     }
     $42 = HEAP32[$6 >> 2] | 0; //@line 7025
     if ($42 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
      HEAP32[$6 >> 2] = $42 + 1; //@line 7030
      $50 = HEAPU8[$42 >> 0] | 0; //@line 7033
     } else {
      $50 = ___shgetc($0) | 0; //@line 7036
     }
     if ((HEAPU8[4278 + $50 >> 0] | 0) > 15) {
      $54 = (HEAP32[$7 >> 2] | 0) == 0; //@line 7043
      if (!$54) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7047
      }
      if (!$2) {
       ___shlim($0, 0); //@line 7051
       $289 = 0; //@line 7052
       $290 = 0; //@line 7052
       break L1;
      }
      if ($54) {
       $289 = 0; //@line 7056
       $290 = 0; //@line 7056
       break L1;
      }
      HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7061
      $289 = 0; //@line 7062
      $290 = 0; //@line 7062
      break L1;
     } else {
      $$1160169 = $50; //@line 7065
      $$1165167 = 16; //@line 7065
      label = 46; //@line 7066
     }
    } else {
     $$166 = $28 ? 10 : $1; //@line 7069
     if ($$166 >>> 0 > (HEAPU8[4278 + $$0159 >> 0] | 0) >>> 0) {
      $$1160 = $$0159; //@line 7075
      $$1165 = $$166; //@line 7075
      label = 32; //@line 7076
     } else {
      if (HEAP32[$7 >> 2] | 0) {
       HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7083
      }
      ___shlim($0, 0); //@line 7085
      HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7087
      $289 = 0; //@line 7088
      $290 = 0; //@line 7088
      break L1;
     }
    }
   } while (0);
   L43 : do {
    if ((label | 0) == 32) {
     if (($$1165 | 0) == 10) {
      $70 = $$1160 + -48 | 0; //@line 7097
      if ($70 >>> 0 < 10) {
       $$0154222 = 0; //@line 7100
       $74 = $70; //@line 7100
       do {
        $$0154222 = ($$0154222 * 10 | 0) + $74 | 0; //@line 7103
        $75 = HEAP32[$6 >> 2] | 0; //@line 7104
        if ($75 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $75 + 1; //@line 7109
         $$2161$be = HEAPU8[$75 >> 0] | 0; //@line 7112
        } else {
         $$2161$be = ___shgetc($0) | 0; //@line 7115
        }
        $74 = $$2161$be + -48 | 0; //@line 7117
       } while ($74 >>> 0 < 10 & $$0154222 >>> 0 < 429496729);
       $$2161$lcssa = $$2161$be; //@line 7127
       $291 = $$0154222; //@line 7127
       $292 = 0; //@line 7127
      } else {
       $$2161$lcssa = $$1160; //@line 7129
       $291 = 0; //@line 7129
       $292 = 0; //@line 7129
      }
      $86 = $$2161$lcssa + -48 | 0; //@line 7131
      if ($86 >>> 0 < 10) {
       $$3162215 = $$2161$lcssa; //@line 7134
       $88 = $291; //@line 7134
       $89 = $292; //@line 7134
       $93 = $86; //@line 7134
       while (1) {
        $90 = ___muldi3($88 | 0, $89 | 0, 10, 0) | 0; //@line 7136
        $91 = tempRet0; //@line 7137
        $94 = (($93 | 0) < 0) << 31 >> 31; //@line 7139
        $96 = ~$94; //@line 7141
        if ($91 >>> 0 > $96 >>> 0 | ($91 | 0) == ($96 | 0) & $90 >>> 0 > ~$93 >>> 0) {
         $$1165168 = 10; //@line 7148
         $$8 = $$3162215; //@line 7148
         $293 = $88; //@line 7148
         $294 = $89; //@line 7148
         label = 72; //@line 7149
         break L43;
        }
        $88 = _i64Add($90 | 0, $91 | 0, $93 | 0, $94 | 0) | 0; //@line 7152
        $89 = tempRet0; //@line 7153
        $104 = HEAP32[$6 >> 2] | 0; //@line 7154
        if ($104 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $104 + 1; //@line 7159
         $$3162$be = HEAPU8[$104 >> 0] | 0; //@line 7162
        } else {
         $$3162$be = ___shgetc($0) | 0; //@line 7165
        }
        $93 = $$3162$be + -48 | 0; //@line 7167
        if (!($93 >>> 0 < 10 & ($89 >>> 0 < 429496729 | ($89 | 0) == 429496729 & $88 >>> 0 < 2576980378))) {
         break;
        } else {
         $$3162215 = $$3162$be; //@line 7176
        }
       }
       if ($93 >>> 0 > 9) {
        $$1158 = $$0157; //@line 7183
        $263 = $89; //@line 7183
        $265 = $88; //@line 7183
       } else {
        $$1165168 = 10; //@line 7185
        $$8 = $$3162$be; //@line 7185
        $293 = $88; //@line 7185
        $294 = $89; //@line 7185
        label = 72; //@line 7186
       }
      } else {
       $$1158 = $$0157; //@line 7189
       $263 = $292; //@line 7189
       $265 = $291; //@line 7189
      }
     } else {
      $$1160169 = $$1160; //@line 7192
      $$1165167 = $$1165; //@line 7192
      label = 46; //@line 7193
     }
    }
   } while (0);
   L63 : do {
    if ((label | 0) == 46) {
     if (!($$1165167 + -1 & $$1165167)) {
      $131 = HEAP8[4534 + (($$1165167 * 23 | 0) >>> 5 & 7) >> 0] | 0; //@line 7208
      $133 = HEAP8[4278 + $$1160169 >> 0] | 0; //@line 7210
      $134 = $133 & 255; //@line 7211
      if ($$1165167 >>> 0 > $134 >>> 0) {
       $$1155192 = 0; //@line 7214
       $138 = $134; //@line 7214
       do {
        $$1155192 = $138 | $$1155192 << $131; //@line 7217
        $139 = HEAP32[$6 >> 2] | 0; //@line 7218
        if ($139 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
         HEAP32[$6 >> 2] = $139 + 1; //@line 7223
         $$4163$be = HEAPU8[$139 >> 0] | 0; //@line 7226
        } else {
         $$4163$be = ___shgetc($0) | 0; //@line 7229
        }
        $147 = HEAP8[4278 + $$4163$be >> 0] | 0; //@line 7232
        $138 = $147 & 255; //@line 7233
       } while ($$1155192 >>> 0 < 134217728 & $$1165167 >>> 0 > $138 >>> 0);
       $$4163$lcssa = $$4163$be; //@line 7243
       $155 = $147; //@line 7243
       $158 = 0; //@line 7243
       $160 = $$1155192; //@line 7243
      } else {
       $$4163$lcssa = $$1160169; //@line 7245
       $155 = $133; //@line 7245
       $158 = 0; //@line 7245
       $160 = 0; //@line 7245
      }
      $152 = _bitshift64Lshr(-1, -1, $131 | 0) | 0; //@line 7247
      $153 = tempRet0; //@line 7248
      if ($$1165167 >>> 0 <= ($155 & 255) >>> 0 | ($153 >>> 0 < $158 >>> 0 | ($153 | 0) == ($158 | 0) & $152 >>> 0 < $160 >>> 0)) {
       $$1165168 = $$1165167; //@line 7258
       $$8 = $$4163$lcssa; //@line 7258
       $293 = $160; //@line 7258
       $294 = $158; //@line 7258
       label = 72; //@line 7259
       break;
      } else {
       $164 = $160; //@line 7262
       $165 = $158; //@line 7262
       $169 = $155; //@line 7262
      }
      while (1) {
       $166 = _bitshift64Shl($164 | 0, $165 | 0, $131 | 0) | 0; //@line 7265
       $167 = tempRet0; //@line 7266
       $170 = $166 | $169 & 255; //@line 7268
       $171 = HEAP32[$6 >> 2] | 0; //@line 7269
       if ($171 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $171 + 1; //@line 7274
        $$5$be = HEAPU8[$171 >> 0] | 0; //@line 7277
       } else {
        $$5$be = ___shgetc($0) | 0; //@line 7280
       }
       $169 = HEAP8[4278 + $$5$be >> 0] | 0; //@line 7283
       if ($$1165167 >>> 0 <= ($169 & 255) >>> 0 | ($167 >>> 0 > $153 >>> 0 | ($167 | 0) == ($153 | 0) & $170 >>> 0 > $152 >>> 0)) {
        $$1165168 = $$1165167; //@line 7293
        $$8 = $$5$be; //@line 7293
        $293 = $170; //@line 7293
        $294 = $167; //@line 7293
        label = 72; //@line 7294
        break L63;
       } else {
        $164 = $170; //@line 7297
        $165 = $167; //@line 7297
       }
      }
     }
     $123 = HEAP8[4278 + $$1160169 >> 0] | 0; //@line 7302
     $124 = $123 & 255; //@line 7303
     if ($$1165167 >>> 0 > $124 >>> 0) {
      $$2156210 = 0; //@line 7306
      $189 = $124; //@line 7306
      do {
       $$2156210 = $189 + (Math_imul($$2156210, $$1165167) | 0) | 0; //@line 7309
       $190 = HEAP32[$6 >> 2] | 0; //@line 7310
       if ($190 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $190 + 1; //@line 7315
        $$6$be = HEAPU8[$190 >> 0] | 0; //@line 7318
       } else {
        $$6$be = ___shgetc($0) | 0; //@line 7321
       }
       $198 = HEAP8[4278 + $$6$be >> 0] | 0; //@line 7324
       $189 = $198 & 255; //@line 7325
      } while ($$2156210 >>> 0 < 119304647 & $$1165167 >>> 0 > $189 >>> 0);
      $$6$lcssa = $$6$be; //@line 7335
      $204 = $198; //@line 7335
      $295 = $$2156210; //@line 7335
      $296 = 0; //@line 7335
     } else {
      $$6$lcssa = $$1160169; //@line 7337
      $204 = $123; //@line 7337
      $295 = 0; //@line 7337
      $296 = 0; //@line 7337
     }
     if ($$1165167 >>> 0 > ($204 & 255) >>> 0) {
      $206 = ___udivdi3(-1, -1, $$1165167 | 0, 0) | 0; //@line 7342
      $207 = tempRet0; //@line 7343
      $$7198 = $$6$lcssa; //@line 7344
      $209 = $296; //@line 7344
      $211 = $295; //@line 7344
      $218 = $204; //@line 7344
      while (1) {
       if ($209 >>> 0 > $207 >>> 0 | ($209 | 0) == ($207 | 0) & $211 >>> 0 > $206 >>> 0) {
        $$1165168 = $$1165167; //@line 7352
        $$8 = $$7198; //@line 7352
        $293 = $211; //@line 7352
        $294 = $209; //@line 7352
        label = 72; //@line 7353
        break L63;
       }
       $215 = ___muldi3($211 | 0, $209 | 0, $$1165167 | 0, 0) | 0; //@line 7356
       $216 = tempRet0; //@line 7357
       $217 = $218 & 255; //@line 7358
       if ($216 >>> 0 > 4294967295 | ($216 | 0) == -1 & $215 >>> 0 > ~$217 >>> 0) {
        $$1165168 = $$1165167; //@line 7366
        $$8 = $$7198; //@line 7366
        $293 = $211; //@line 7366
        $294 = $209; //@line 7366
        label = 72; //@line 7367
        break L63;
       }
       $225 = _i64Add($215 | 0, $216 | 0, $217 | 0, 0) | 0; //@line 7370
       $226 = tempRet0; //@line 7371
       $227 = HEAP32[$6 >> 2] | 0; //@line 7372
       if ($227 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
        HEAP32[$6 >> 2] = $227 + 1; //@line 7377
        $$7$be = HEAPU8[$227 >> 0] | 0; //@line 7380
       } else {
        $$7$be = ___shgetc($0) | 0; //@line 7383
       }
       $218 = HEAP8[4278 + $$7$be >> 0] | 0; //@line 7386
       if ($$1165167 >>> 0 <= ($218 & 255) >>> 0) {
        $$1165168 = $$1165167; //@line 7392
        $$8 = $$7$be; //@line 7392
        $293 = $225; //@line 7392
        $294 = $226; //@line 7392
        label = 72; //@line 7393
        break;
       } else {
        $$7198 = $$7$be; //@line 7390
        $209 = $226; //@line 7390
        $211 = $225; //@line 7390
       }
      }
     } else {
      $$1165168 = $$1165167; //@line 7398
      $$8 = $$6$lcssa; //@line 7398
      $293 = $295; //@line 7398
      $294 = $296; //@line 7398
      label = 72; //@line 7399
     }
    }
   } while (0);
   if ((label | 0) == 72) {
    if ($$1165168 >>> 0 > (HEAPU8[4278 + $$8 >> 0] | 0) >>> 0) {
     do {
      $242 = HEAP32[$6 >> 2] | 0; //@line 7410
      if ($242 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
       HEAP32[$6 >> 2] = $242 + 1; //@line 7415
       $$9$be = HEAPU8[$242 >> 0] | 0; //@line 7418
      } else {
       $$9$be = ___shgetc($0) | 0; //@line 7421
      }
     } while ($$1165168 >>> 0 > (HEAPU8[4278 + $$9$be >> 0] | 0) >>> 0);
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7432
     $$1158 = ($3 & 1 | 0) == 0 & 0 == 0 ? $$0157 : 0; //@line 7438
     $263 = $4; //@line 7438
     $265 = $3; //@line 7438
    } else {
     $$1158 = $$0157; //@line 7440
     $263 = $294; //@line 7440
     $265 = $293; //@line 7440
    }
   }
   if (HEAP32[$7 >> 2] | 0) {
    HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + -1; //@line 7448
   }
   if (!($263 >>> 0 < $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 < $3 >>> 0)) {
    if (!(($3 & 1 | 0) != 0 | 0 != 0 | ($$1158 | 0) != 0)) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7464
     $275 = _i64Add($3 | 0, $4 | 0, -1, -1) | 0; //@line 7465
     $289 = tempRet0; //@line 7467
     $290 = $275; //@line 7467
     break;
    }
    if ($263 >>> 0 > $4 >>> 0 | ($263 | 0) == ($4 | 0) & $265 >>> 0 > $3 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 7477
     $289 = $4; //@line 7478
     $290 = $3; //@line 7478
     break;
    }
   }
   $284 = (($$1158 | 0) < 0) << 31 >> 31; //@line 7483
   $287 = _i64Subtract($265 ^ $$1158 | 0, $263 ^ $284 | 0, $$1158 | 0, $284 | 0) | 0; //@line 7486
   $289 = tempRet0; //@line 7488
   $290 = $287; //@line 7488
  }
 } while (0);
 tempRet0 = $289; //@line 7491
 return $290 | 0; //@line 7492
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_72($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $110 = 0, $111 = 0, $113 = 0, $115 = 0, $12 = 0, $123 = 0, $126 = 0, $128 = 0, $136 = 0, $139 = 0, $14 = 0, $141 = 0, $149 = 0, $152 = 0, $154 = 0, $16 = 0, $167 = 0, $168 = 0, $169 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $48 = 0, $49 = 0, $57 = 0, $6 = 0, $60 = 0, $63 = 0, $66 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2725
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 2727
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 2729
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 2731
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 2733
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 2735
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 2737
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 2739
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 2741
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 2743
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 2745
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 2747
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 2749
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 2751
 $27 = $26 + 12 | 0; //@line 2752
 $28 = HEAP32[$27 >> 2] | 0; //@line 2753
 if ($28 | 0) {
  $31 = HEAP32[$28 + 4 >> 2] | 0; //@line 2757
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 2758
  FUNCTION_TABLE_vii[$31 & 7]($10, $26); //@line 2759
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 2762
   $32 = $ReallocAsyncCtx5 + 4 | 0; //@line 2763
   HEAP32[$32 >> 2] = $2; //@line 2764
   $33 = $ReallocAsyncCtx5 + 8 | 0; //@line 2765
   HEAP32[$33 >> 2] = $4; //@line 2766
   $34 = $ReallocAsyncCtx5 + 12 | 0; //@line 2767
   HEAP32[$34 >> 2] = $6; //@line 2768
   $35 = $ReallocAsyncCtx5 + 16 | 0; //@line 2769
   HEAP32[$35 >> 2] = $8; //@line 2770
   $36 = $ReallocAsyncCtx5 + 20 | 0; //@line 2771
   HEAP32[$36 >> 2] = $10; //@line 2772
   $37 = $ReallocAsyncCtx5 + 24 | 0; //@line 2773
   HEAP32[$37 >> 2] = $12; //@line 2774
   $38 = $ReallocAsyncCtx5 + 28 | 0; //@line 2775
   HEAP32[$38 >> 2] = $14; //@line 2776
   $39 = $ReallocAsyncCtx5 + 32 | 0; //@line 2777
   HEAP32[$39 >> 2] = $16; //@line 2778
   $40 = $ReallocAsyncCtx5 + 36 | 0; //@line 2779
   HEAP32[$40 >> 2] = $18; //@line 2780
   $41 = $ReallocAsyncCtx5 + 40 | 0; //@line 2781
   HEAP32[$41 >> 2] = $20; //@line 2782
   $42 = $ReallocAsyncCtx5 + 44 | 0; //@line 2783
   HEAP32[$42 >> 2] = $22; //@line 2784
   $43 = $ReallocAsyncCtx5 + 48 | 0; //@line 2785
   HEAP32[$43 >> 2] = $24; //@line 2786
   $44 = $ReallocAsyncCtx5 + 52 | 0; //@line 2787
   HEAP32[$44 >> 2] = $27; //@line 2788
   sp = STACKTOP; //@line 2789
   return;
  }
  ___async_unwind = 0; //@line 2792
  HEAP32[$ReallocAsyncCtx5 >> 2] = 177; //@line 2793
  $32 = $ReallocAsyncCtx5 + 4 | 0; //@line 2794
  HEAP32[$32 >> 2] = $2; //@line 2795
  $33 = $ReallocAsyncCtx5 + 8 | 0; //@line 2796
  HEAP32[$33 >> 2] = $4; //@line 2797
  $34 = $ReallocAsyncCtx5 + 12 | 0; //@line 2798
  HEAP32[$34 >> 2] = $6; //@line 2799
  $35 = $ReallocAsyncCtx5 + 16 | 0; //@line 2800
  HEAP32[$35 >> 2] = $8; //@line 2801
  $36 = $ReallocAsyncCtx5 + 20 | 0; //@line 2802
  HEAP32[$36 >> 2] = $10; //@line 2803
  $37 = $ReallocAsyncCtx5 + 24 | 0; //@line 2804
  HEAP32[$37 >> 2] = $12; //@line 2805
  $38 = $ReallocAsyncCtx5 + 28 | 0; //@line 2806
  HEAP32[$38 >> 2] = $14; //@line 2807
  $39 = $ReallocAsyncCtx5 + 32 | 0; //@line 2808
  HEAP32[$39 >> 2] = $16; //@line 2809
  $40 = $ReallocAsyncCtx5 + 36 | 0; //@line 2810
  HEAP32[$40 >> 2] = $18; //@line 2811
  $41 = $ReallocAsyncCtx5 + 40 | 0; //@line 2812
  HEAP32[$41 >> 2] = $20; //@line 2813
  $42 = $ReallocAsyncCtx5 + 44 | 0; //@line 2814
  HEAP32[$42 >> 2] = $22; //@line 2815
  $43 = $ReallocAsyncCtx5 + 48 | 0; //@line 2816
  HEAP32[$43 >> 2] = $24; //@line 2817
  $44 = $ReallocAsyncCtx5 + 52 | 0; //@line 2818
  HEAP32[$44 >> 2] = $27; //@line 2819
  sp = STACKTOP; //@line 2820
  return;
 }
 HEAP32[$24 >> 2] = 0; //@line 2823
 HEAP32[$2 + 8 >> 2] = $4; //@line 2825
 HEAP32[$2 + 48 >> 2] = $20; //@line 2827
 HEAP32[$2 + 52 >> 2] = $22; //@line 2829
 $48 = $2 + 56 | 0; //@line 2830
 HEAP32[$48 >> 2] = 0; //@line 2831
 $49 = $2 + 60 | 0; //@line 2832
 HEAP32[$49 >> 2] = 0; //@line 2833
 HEAP32[$2 + 64 >> 2] = 0; //@line 2835
 HEAP8[$2 + 82 >> 0] = 0; //@line 2837
 HEAP8[$2 + 83 >> 0] = 1; //@line 2839
 HEAP8[$2 + 84 >> 0] = 3; //@line 2841
 HEAP8[$2 + 85 >> 0] = 0; //@line 2843
 HEAP16[$2 + 80 >> 1] = 0; //@line 2845
 HEAP32[$2 + 76 >> 2] = 0; //@line 2847
 $57 = $2 + 72 | 0; //@line 2848
 HEAP32[$57 >> 2] = 15500; //@line 2849
 HEAP8[$2 + 86 >> 0] = 0; //@line 2851
 HEAP32[$2 + 88 >> 2] = 0; //@line 2853
 $60 = HEAP32[187] | 0; //@line 2854
 HEAP32[187] = $60 + 1; //@line 2856
 HEAP32[$2 >> 2] = ($60 | 0) > 32767 ? 1 : $60; //@line 2859
 $63 = HEAP32[1949] | 0; //@line 2860
 if (!$63) {
  $$1 = 0; //@line 2863
  $113 = 0; //@line 2863
 } else {
  $66 = HEAP32[$63 + 56 >> 2] | 0; //@line 2866
  if (!$66) {
   $$1 = 1; //@line 2869
   $113 = 0; //@line 2869
  } else {
   if ((HEAP32[$63 + 8 >> 2] | 0) == ($4 | 0)) {
    HEAP32[$48 >> 2] = $66; //@line 2875
    HEAP32[$49 >> 2] = HEAP32[$63 + 60 >> 2]; //@line 2878
    $$1 = 1; //@line 2879
    $113 = $66; //@line 2879
   } else {
    $$1 = 1; //@line 2881
    $113 = 0; //@line 2881
   }
  }
 }
 $73 = HEAP32[1950] | 0; //@line 2885
 if (!$73) {
  $$1$1 = $$1; //@line 2888
  $126 = $113; //@line 2888
 } else {
  if (!$113) {
   $115 = HEAP32[$73 + 56 >> 2] | 0; //@line 2893
   if (!$115) {
    $167 = 0; //@line 2896
   } else {
    if ((HEAP32[$73 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$48 >> 2] = $115; //@line 2902
     HEAP32[$49 >> 2] = HEAP32[$73 + 60 >> 2]; //@line 2905
     $167 = $115; //@line 2906
    } else {
     $167 = 0; //@line 2908
    }
   }
  } else {
   $167 = $113; //@line 2912
  }
  $$1$1 = $$1 + 1 | 0; //@line 2915
  $126 = $167; //@line 2915
 }
 $123 = HEAP32[1951] | 0; //@line 2917
 if (!$123) {
  $$1$2 = $$1$1; //@line 2920
  $139 = $126; //@line 2920
 } else {
  if (!$126) {
   $128 = HEAP32[$123 + 56 >> 2] | 0; //@line 2925
   if (!$128) {
    $168 = 0; //@line 2928
   } else {
    if ((HEAP32[$123 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$48 >> 2] = $128; //@line 2934
     HEAP32[$49 >> 2] = HEAP32[$123 + 60 >> 2]; //@line 2937
     $168 = $128; //@line 2938
    } else {
     $168 = 0; //@line 2940
    }
   }
  } else {
   $168 = $126; //@line 2944
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 2947
  $139 = $168; //@line 2947
 }
 $136 = HEAP32[1952] | 0; //@line 2949
 if (!$136) {
  $$1$3 = $$1$2; //@line 2952
  $152 = $139; //@line 2952
 } else {
  if (!$139) {
   $141 = HEAP32[$136 + 56 >> 2] | 0; //@line 2957
   if (!$141) {
    $169 = 0; //@line 2960
   } else {
    if ((HEAP32[$136 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$48 >> 2] = $141; //@line 2966
     HEAP32[$49 >> 2] = HEAP32[$136 + 60 >> 2]; //@line 2969
     $169 = $141; //@line 2970
    } else {
     $169 = 0; //@line 2972
    }
   }
  } else {
   $169 = $139; //@line 2976
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 2979
  $152 = $169; //@line 2979
 }
 $149 = HEAP32[1953] | 0; //@line 2981
 if (!$149) {
  $$1$4 = $$1$3; //@line 2984
 } else {
  if (!$152) {
   $154 = HEAP32[$149 + 56 >> 2] | 0; //@line 2989
   if ($154 | 0) {
    if ((HEAP32[$149 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$48 >> 2] = $154; //@line 2996
     HEAP32[$49 >> 2] = HEAP32[$149 + 60 >> 2]; //@line 2999
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 3004
 }
 HEAP32[7796 + ($8 << 2) >> 2] = $2; //@line 3007
 HEAP32[$57 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 3010
 if (HEAP8[8676] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 3014
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 3015
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3018
   $110 = $ReallocAsyncCtx13 + 4 | 0; //@line 3019
   HEAP32[$110 >> 2] = $2; //@line 3020
   $111 = $ReallocAsyncCtx13 + 8 | 0; //@line 3021
   HEAP32[$111 >> 2] = $16; //@line 3022
   sp = STACKTOP; //@line 3023
   return;
  }
  ___async_unwind = 0; //@line 3026
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3027
  $110 = $ReallocAsyncCtx13 + 4 | 0; //@line 3028
  HEAP32[$110 >> 2] = $2; //@line 3029
  $111 = $ReallocAsyncCtx13 + 8 | 0; //@line 3030
  HEAP32[$111 >> 2] = $16; //@line 3031
  sp = STACKTOP; //@line 3032
  return;
 }
 $75 = $2 + 44 | 0; //@line 3035
 $76 = HEAP32[$75 >> 2] | 0; //@line 3036
 if (!$76) {
  $90 = $14 + 12 | 0; //@line 3039
  HEAP32[$90 >> 2] = 0; //@line 3040
  $92 = $18 + 4 | 0; //@line 3042
  HEAP32[$92 >> 2] = 0; //@line 3044
  HEAP32[$92 + 4 >> 2] = 0; //@line 3047
  HEAP32[$18 >> 2] = 3; //@line 3048
  $96 = $18 + 12 | 0; //@line 3049
  HEAP32[$96 >> 2] = 752; //@line 3050
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 3051
  $97 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($14, 100, $18) | 0; //@line 3052
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 3055
   $98 = $ReallocAsyncCtx14 + 4 | 0; //@line 3056
   HEAP32[$98 >> 2] = $2; //@line 3057
   $99 = $ReallocAsyncCtx14 + 8 | 0; //@line 3058
   HEAP32[$99 >> 2] = $6; //@line 3059
   $100 = $ReallocAsyncCtx14 + 12 | 0; //@line 3060
   HEAP32[$100 >> 2] = $16; //@line 3061
   $101 = $ReallocAsyncCtx14 + 16 | 0; //@line 3062
   HEAP32[$101 >> 2] = $10; //@line 3063
   $102 = $ReallocAsyncCtx14 + 20 | 0; //@line 3064
   HEAP32[$102 >> 2] = $75; //@line 3065
   $103 = $ReallocAsyncCtx14 + 24 | 0; //@line 3066
   HEAP32[$103 >> 2] = $12; //@line 3067
   $104 = $ReallocAsyncCtx14 + 28 | 0; //@line 3068
   HEAP32[$104 >> 2] = $2; //@line 3069
   $105 = $ReallocAsyncCtx14 + 32 | 0; //@line 3070
   HEAP32[$105 >> 2] = $14; //@line 3071
   $106 = $ReallocAsyncCtx14 + 36 | 0; //@line 3072
   HEAP32[$106 >> 2] = $90; //@line 3073
   $107 = $ReallocAsyncCtx14 + 40 | 0; //@line 3074
   HEAP32[$107 >> 2] = $18; //@line 3075
   $108 = $ReallocAsyncCtx14 + 44 | 0; //@line 3076
   HEAP32[$108 >> 2] = $96; //@line 3077
   sp = STACKTOP; //@line 3078
   return;
  }
  HEAP32[___async_retval >> 2] = $97; //@line 3082
  ___async_unwind = 0; //@line 3083
  HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 3084
  $98 = $ReallocAsyncCtx14 + 4 | 0; //@line 3085
  HEAP32[$98 >> 2] = $2; //@line 3086
  $99 = $ReallocAsyncCtx14 + 8 | 0; //@line 3087
  HEAP32[$99 >> 2] = $6; //@line 3088
  $100 = $ReallocAsyncCtx14 + 12 | 0; //@line 3089
  HEAP32[$100 >> 2] = $16; //@line 3090
  $101 = $ReallocAsyncCtx14 + 16 | 0; //@line 3091
  HEAP32[$101 >> 2] = $10; //@line 3092
  $102 = $ReallocAsyncCtx14 + 20 | 0; //@line 3093
  HEAP32[$102 >> 2] = $75; //@line 3094
  $103 = $ReallocAsyncCtx14 + 24 | 0; //@line 3095
  HEAP32[$103 >> 2] = $12; //@line 3096
  $104 = $ReallocAsyncCtx14 + 28 | 0; //@line 3097
  HEAP32[$104 >> 2] = $2; //@line 3098
  $105 = $ReallocAsyncCtx14 + 32 | 0; //@line 3099
  HEAP32[$105 >> 2] = $14; //@line 3100
  $106 = $ReallocAsyncCtx14 + 36 | 0; //@line 3101
  HEAP32[$106 >> 2] = $90; //@line 3102
  $107 = $ReallocAsyncCtx14 + 40 | 0; //@line 3103
  HEAP32[$107 >> 2] = $18; //@line 3104
  $108 = $ReallocAsyncCtx14 + 44 | 0; //@line 3105
  HEAP32[$108 >> 2] = $96; //@line 3106
  sp = STACKTOP; //@line 3107
  return;
 } else {
  $79 = HEAP32[$76 + 4 >> 2] | 0; //@line 3111
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 3112
  FUNCTION_TABLE_vii[$79 & 7]($14, $10); //@line 3113
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 3116
   $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 3117
   HEAP32[$80 >> 2] = $2; //@line 3118
   $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 3119
   HEAP32[$81 >> 2] = $6; //@line 3120
   $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 3121
   HEAP32[$82 >> 2] = $10; //@line 3122
   $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 3123
   HEAP32[$83 >> 2] = $75; //@line 3124
   $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 3125
   HEAP32[$84 >> 2] = $12; //@line 3126
   $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 3127
   HEAP32[$85 >> 2] = $14; //@line 3128
   $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 3129
   HEAP32[$86 >> 2] = $16; //@line 3130
   $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 3131
   HEAP32[$87 >> 2] = $18; //@line 3132
   $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 3133
   HEAP32[$88 >> 2] = $2; //@line 3134
   $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 3135
   HEAP32[$89 >> 2] = $75; //@line 3136
   sp = STACKTOP; //@line 3137
   return;
  }
  ___async_unwind = 0; //@line 3140
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 3141
  $80 = $ReallocAsyncCtx6 + 4 | 0; //@line 3142
  HEAP32[$80 >> 2] = $2; //@line 3143
  $81 = $ReallocAsyncCtx6 + 8 | 0; //@line 3144
  HEAP32[$81 >> 2] = $6; //@line 3145
  $82 = $ReallocAsyncCtx6 + 12 | 0; //@line 3146
  HEAP32[$82 >> 2] = $10; //@line 3147
  $83 = $ReallocAsyncCtx6 + 16 | 0; //@line 3148
  HEAP32[$83 >> 2] = $75; //@line 3149
  $84 = $ReallocAsyncCtx6 + 20 | 0; //@line 3150
  HEAP32[$84 >> 2] = $12; //@line 3151
  $85 = $ReallocAsyncCtx6 + 24 | 0; //@line 3152
  HEAP32[$85 >> 2] = $14; //@line 3153
  $86 = $ReallocAsyncCtx6 + 28 | 0; //@line 3154
  HEAP32[$86 >> 2] = $16; //@line 3155
  $87 = $ReallocAsyncCtx6 + 32 | 0; //@line 3156
  HEAP32[$87 >> 2] = $18; //@line 3157
  $88 = $ReallocAsyncCtx6 + 36 | 0; //@line 3158
  HEAP32[$88 >> 2] = $2; //@line 3159
  $89 = $ReallocAsyncCtx6 + 40 | 0; //@line 3160
  HEAP32[$89 >> 2] = $75; //@line 3161
  sp = STACKTOP; //@line 3162
  return;
 }
}
function _main() {
 var $105 = 0, $106 = 0, $107 = 0, $119 = 0, $121 = 0, $13 = 0, $27 = 0, $42 = 0, $51 = 0, $52 = 0, $62 = 0, $81 = 0, $91 = 0, $92 = 0, $AsyncCtx = 0, $AsyncCtx22 = 0, $AsyncCtx25 = 0, $AsyncCtx29 = 0, $AsyncCtx33 = 0, $AsyncCtx37 = 0, $AsyncCtx41 = 0, $AsyncCtx44 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx54 = 0, $AsyncCtx58 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 13303
 STACKTOP = STACKTOP + 128 | 0; //@line 13304
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 13304
 $vararg_buffer17 = sp + 112 | 0; //@line 13305
 $vararg_buffer12 = sp + 96 | 0; //@line 13306
 $vararg_buffer7 = sp + 80 | 0; //@line 13307
 $vararg_buffer4 = sp + 16 | 0; //@line 13308
 $vararg_buffer1 = sp + 8 | 0; //@line 13309
 $vararg_buffer = sp; //@line 13310
 $AsyncCtx29 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13311
 _puts(4067) | 0; //@line 13312
 if (___async) {
  HEAP32[$AsyncCtx29 >> 2] = 306; //@line 13315
  HEAP32[$AsyncCtx29 + 4 >> 2] = $vararg_buffer4; //@line 13317
  HEAP32[$AsyncCtx29 + 8 >> 2] = $vararg_buffer7; //@line 13319
  HEAP32[$AsyncCtx29 + 12 >> 2] = $vararg_buffer7; //@line 13321
  HEAP32[$AsyncCtx29 + 16 >> 2] = $vararg_buffer12; //@line 13323
  HEAP32[$AsyncCtx29 + 20 >> 2] = $vararg_buffer12; //@line 13325
  HEAP32[$AsyncCtx29 + 24 >> 2] = $vararg_buffer17; //@line 13327
  HEAP32[$AsyncCtx29 + 28 >> 2] = $vararg_buffer17; //@line 13329
  HEAP32[$AsyncCtx29 + 32 >> 2] = $vararg_buffer; //@line 13331
  HEAP32[$AsyncCtx29 + 36 >> 2] = $vararg_buffer; //@line 13333
  HEAP32[$AsyncCtx29 + 40 >> 2] = $vararg_buffer1; //@line 13335
  HEAP32[$AsyncCtx29 + 44 >> 2] = $vararg_buffer1; //@line 13337
  HEAP32[$AsyncCtx29 + 48 >> 2] = $vararg_buffer4; //@line 13339
  HEAP32[$AsyncCtx29 + 52 >> 2] = $vararg_buffer4; //@line 13341
  sp = STACKTOP; //@line 13342
  STACKTOP = sp; //@line 13343
  return 0; //@line 13343
 }
 _emscripten_free_async_context($AsyncCtx29 | 0); //@line 13345
 $AsyncCtx58 = _emscripten_alloc_async_context(56, sp) | 0; //@line 13346
 $13 = __ZN17EthernetInterface14get_ip_addressEv(788) | 0; //@line 13347
 if (___async) {
  HEAP32[$AsyncCtx58 >> 2] = 307; //@line 13350
  HEAP32[$AsyncCtx58 + 4 >> 2] = $vararg_buffer4; //@line 13352
  HEAP32[$AsyncCtx58 + 8 >> 2] = $vararg_buffer7; //@line 13354
  HEAP32[$AsyncCtx58 + 12 >> 2] = $vararg_buffer7; //@line 13356
  HEAP32[$AsyncCtx58 + 16 >> 2] = $vararg_buffer12; //@line 13358
  HEAP32[$AsyncCtx58 + 20 >> 2] = $vararg_buffer12; //@line 13360
  HEAP32[$AsyncCtx58 + 24 >> 2] = $vararg_buffer17; //@line 13362
  HEAP32[$AsyncCtx58 + 28 >> 2] = $vararg_buffer17; //@line 13364
  HEAP32[$AsyncCtx58 + 32 >> 2] = $vararg_buffer; //@line 13366
  HEAP32[$AsyncCtx58 + 36 >> 2] = $vararg_buffer; //@line 13368
  HEAP32[$AsyncCtx58 + 40 >> 2] = $vararg_buffer1; //@line 13370
  HEAP32[$AsyncCtx58 + 44 >> 2] = $vararg_buffer1; //@line 13372
  HEAP32[$AsyncCtx58 + 48 >> 2] = $vararg_buffer4; //@line 13374
  HEAP32[$AsyncCtx58 + 52 >> 2] = $vararg_buffer4; //@line 13376
  sp = STACKTOP; //@line 13377
  STACKTOP = sp; //@line 13378
  return 0; //@line 13378
 }
 _emscripten_free_async_context($AsyncCtx58 | 0); //@line 13380
 $AsyncCtx54 = _emscripten_alloc_async_context(60, sp) | 0; //@line 13381
 $27 = __ZN17EthernetInterface15get_mac_addressEv(788) | 0; //@line 13382
 if (___async) {
  HEAP32[$AsyncCtx54 >> 2] = 308; //@line 13385
  HEAP32[$AsyncCtx54 + 4 >> 2] = $vararg_buffer4; //@line 13387
  HEAP32[$AsyncCtx54 + 8 >> 2] = $vararg_buffer7; //@line 13389
  HEAP32[$AsyncCtx54 + 12 >> 2] = $vararg_buffer7; //@line 13391
  HEAP32[$AsyncCtx54 + 16 >> 2] = $vararg_buffer12; //@line 13393
  HEAP32[$AsyncCtx54 + 20 >> 2] = $vararg_buffer12; //@line 13395
  HEAP32[$AsyncCtx54 + 24 >> 2] = $vararg_buffer17; //@line 13397
  HEAP32[$AsyncCtx54 + 28 >> 2] = $vararg_buffer17; //@line 13399
  HEAP32[$AsyncCtx54 + 32 >> 2] = $13; //@line 13401
  HEAP32[$AsyncCtx54 + 36 >> 2] = $vararg_buffer; //@line 13403
  HEAP32[$AsyncCtx54 + 40 >> 2] = $vararg_buffer; //@line 13405
  HEAP32[$AsyncCtx54 + 44 >> 2] = $vararg_buffer1; //@line 13407
  HEAP32[$AsyncCtx54 + 48 >> 2] = $vararg_buffer1; //@line 13409
  HEAP32[$AsyncCtx54 + 52 >> 2] = $vararg_buffer4; //@line 13411
  HEAP32[$AsyncCtx54 + 56 >> 2] = $vararg_buffer4; //@line 13413
  sp = STACKTOP; //@line 13414
  STACKTOP = sp; //@line 13415
  return 0; //@line 13415
 }
 _emscripten_free_async_context($AsyncCtx54 | 0); //@line 13417
 $42 = __ZN17EthernetInterface11get_gatewayEv(788) | 0; //@line 13418
 HEAP32[$vararg_buffer >> 2] = $13 | 0 ? $13 : 4091; //@line 13421
 _printf(4096, $vararg_buffer) | 0; //@line 13422
 HEAP32[$vararg_buffer1 >> 2] = $27 | 0 ? $27 : 4091; //@line 13425
 _printf(4112, $vararg_buffer1) | 0; //@line 13426
 HEAP32[$vararg_buffer4 >> 2] = $42 | 0 ? $42 : 4091; //@line 13429
 _printf(4129, $vararg_buffer4) | 0; //@line 13430
 __ZN9TCPSocketC2Ev($vararg_buffer4); //@line 13431
 $51 = HEAP32[(HEAP32[197] | 0) + 88 >> 2] | 0; //@line 13434
 $AsyncCtx = _emscripten_alloc_async_context(40, sp) | 0; //@line 13435
 $52 = FUNCTION_TABLE_ii[$51 & 31](788) | 0; //@line 13436
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 309; //@line 13439
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer4; //@line 13441
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer4; //@line 13443
  HEAP32[$AsyncCtx + 12 >> 2] = $vararg_buffer4; //@line 13445
  HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer7; //@line 13447
  HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer7; //@line 13449
  HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer12; //@line 13451
  HEAP32[$AsyncCtx + 28 >> 2] = $vararg_buffer12; //@line 13453
  HEAP32[$AsyncCtx + 32 >> 2] = $vararg_buffer17; //@line 13455
  HEAP32[$AsyncCtx + 36 >> 2] = $vararg_buffer17; //@line 13457
  sp = STACKTOP; //@line 13458
  STACKTOP = sp; //@line 13459
  return 0; //@line 13459
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13461
 $62 = __Z18nsapi_create_stackP12NetworkStack($52) | 0; //@line 13462
 $AsyncCtx51 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13463
 __ZN6Socket4openEP12NetworkStack($vararg_buffer4, $62) | 0; //@line 13464
 if (___async) {
  HEAP32[$AsyncCtx51 >> 2] = 310; //@line 13467
  HEAP32[$AsyncCtx51 + 4 >> 2] = $vararg_buffer4; //@line 13469
  HEAP32[$AsyncCtx51 + 8 >> 2] = $vararg_buffer7; //@line 13471
  HEAP32[$AsyncCtx51 + 12 >> 2] = $vararg_buffer7; //@line 13473
  HEAP32[$AsyncCtx51 + 16 >> 2] = $vararg_buffer12; //@line 13475
  HEAP32[$AsyncCtx51 + 20 >> 2] = $vararg_buffer12; //@line 13477
  HEAP32[$AsyncCtx51 + 24 >> 2] = $vararg_buffer17; //@line 13479
  HEAP32[$AsyncCtx51 + 28 >> 2] = $vararg_buffer17; //@line 13481
  HEAP32[$AsyncCtx51 + 32 >> 2] = $vararg_buffer4; //@line 13483
  HEAP32[$AsyncCtx51 + 36 >> 2] = $vararg_buffer4; //@line 13485
  sp = STACKTOP; //@line 13486
  STACKTOP = sp; //@line 13487
  return 0; //@line 13487
 }
 _emscripten_free_async_context($AsyncCtx51 | 0); //@line 13489
 $AsyncCtx41 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13490
 __ZN9TCPSocket7connectEPKct($vararg_buffer4, 4142, 80) | 0; //@line 13491
 if (___async) {
  HEAP32[$AsyncCtx41 >> 2] = 311; //@line 13494
  HEAP32[$AsyncCtx41 + 4 >> 2] = $vararg_buffer4; //@line 13496
  HEAP32[$AsyncCtx41 + 8 >> 2] = $vararg_buffer7; //@line 13498
  HEAP32[$AsyncCtx41 + 12 >> 2] = $vararg_buffer7; //@line 13500
  HEAP32[$AsyncCtx41 + 16 >> 2] = $vararg_buffer12; //@line 13502
  HEAP32[$AsyncCtx41 + 20 >> 2] = $vararg_buffer12; //@line 13504
  HEAP32[$AsyncCtx41 + 24 >> 2] = $vararg_buffer17; //@line 13506
  HEAP32[$AsyncCtx41 + 28 >> 2] = $vararg_buffer17; //@line 13508
  HEAP32[$AsyncCtx41 + 32 >> 2] = $vararg_buffer4; //@line 13510
  HEAP32[$AsyncCtx41 + 36 >> 2] = $vararg_buffer4; //@line 13512
  sp = STACKTOP; //@line 13513
  STACKTOP = sp; //@line 13514
  return 0; //@line 13514
 }
 _emscripten_free_async_context($AsyncCtx41 | 0); //@line 13516
 $AsyncCtx22 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13517
 $81 = __Znaj(256) | 0; //@line 13518
 if (___async) {
  HEAP32[$AsyncCtx22 >> 2] = 312; //@line 13521
  HEAP32[$AsyncCtx22 + 4 >> 2] = $vararg_buffer4; //@line 13523
  HEAP32[$AsyncCtx22 + 8 >> 2] = $vararg_buffer7; //@line 13525
  HEAP32[$AsyncCtx22 + 12 >> 2] = $vararg_buffer7; //@line 13527
  HEAP32[$AsyncCtx22 + 16 >> 2] = $vararg_buffer12; //@line 13529
  HEAP32[$AsyncCtx22 + 20 >> 2] = $vararg_buffer12; //@line 13531
  HEAP32[$AsyncCtx22 + 24 >> 2] = $vararg_buffer17; //@line 13533
  HEAP32[$AsyncCtx22 + 28 >> 2] = $vararg_buffer17; //@line 13535
  HEAP32[$AsyncCtx22 + 32 >> 2] = $vararg_buffer4; //@line 13537
  HEAP32[$AsyncCtx22 + 36 >> 2] = $vararg_buffer4; //@line 13539
  sp = STACKTOP; //@line 13540
  STACKTOP = sp; //@line 13541
  return 0; //@line 13541
 }
 _emscripten_free_async_context($AsyncCtx22 | 0); //@line 13543
 dest = $81; //@line 13544
 src = 4156; //@line 13544
 stop = dest + 40 | 0; //@line 13544
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 13544
  dest = dest + 1 | 0; //@line 13544
  src = src + 1 | 0; //@line 13544
 } while ((dest | 0) < (stop | 0));
 $91 = _strlen($81) | 0; //@line 13545
 $AsyncCtx37 = _emscripten_alloc_async_context(44, sp) | 0; //@line 13546
 $92 = __ZN9TCPSocket4sendEPKvj($vararg_buffer4, $81, $91) | 0; //@line 13547
 if (___async) {
  HEAP32[$AsyncCtx37 >> 2] = 313; //@line 13550
  HEAP32[$AsyncCtx37 + 4 >> 2] = $81; //@line 13552
  HEAP32[$AsyncCtx37 + 8 >> 2] = $vararg_buffer7; //@line 13554
  HEAP32[$AsyncCtx37 + 12 >> 2] = $vararg_buffer7; //@line 13556
  HEAP32[$AsyncCtx37 + 16 >> 2] = $vararg_buffer4; //@line 13558
  HEAP32[$AsyncCtx37 + 20 >> 2] = $vararg_buffer12; //@line 13560
  HEAP32[$AsyncCtx37 + 24 >> 2] = $vararg_buffer12; //@line 13562
  HEAP32[$AsyncCtx37 + 28 >> 2] = $vararg_buffer17; //@line 13564
  HEAP32[$AsyncCtx37 + 32 >> 2] = $vararg_buffer17; //@line 13566
  HEAP32[$AsyncCtx37 + 36 >> 2] = $vararg_buffer4; //@line 13568
  HEAP32[$AsyncCtx37 + 40 >> 2] = $vararg_buffer4; //@line 13570
  sp = STACKTOP; //@line 13571
  STACKTOP = sp; //@line 13572
  return 0; //@line 13572
 }
 _emscripten_free_async_context($AsyncCtx37 | 0); //@line 13574
 $105 = $81; //@line 13577
 $106 = (_strstr($81, 4196) | 0) - $105 | 0; //@line 13578
 HEAP32[$vararg_buffer7 >> 2] = $92; //@line 13579
 HEAP32[$vararg_buffer7 + 4 >> 2] = $106; //@line 13581
 HEAP32[$vararg_buffer7 + 8 >> 2] = $81; //@line 13583
 _printf(4199, $vararg_buffer7) | 0; //@line 13584
 $AsyncCtx33 = _emscripten_alloc_async_context(40, sp) | 0; //@line 13585
 $107 = __ZN9TCPSocket4recvEPvj($vararg_buffer4, $81, 256) | 0; //@line 13586
 if (___async) {
  HEAP32[$AsyncCtx33 >> 2] = 314; //@line 13589
  HEAP32[$AsyncCtx33 + 4 >> 2] = $81; //@line 13591
  HEAP32[$AsyncCtx33 + 8 >> 2] = $105; //@line 13593
  HEAP32[$AsyncCtx33 + 12 >> 2] = $vararg_buffer12; //@line 13595
  HEAP32[$AsyncCtx33 + 16 >> 2] = $vararg_buffer12; //@line 13597
  HEAP32[$AsyncCtx33 + 20 >> 2] = $vararg_buffer17; //@line 13599
  HEAP32[$AsyncCtx33 + 24 >> 2] = $vararg_buffer17; //@line 13601
  HEAP32[$AsyncCtx33 + 28 >> 2] = $vararg_buffer4; //@line 13603
  HEAP32[$AsyncCtx33 + 32 >> 2] = $vararg_buffer4; //@line 13605
  HEAP32[$AsyncCtx33 + 36 >> 2] = $vararg_buffer4; //@line 13607
  sp = STACKTOP; //@line 13608
  STACKTOP = sp; //@line 13609
  return 0; //@line 13609
 }
 _emscripten_free_async_context($AsyncCtx33 | 0); //@line 13611
 $119 = (_strstr($81, 4196) | 0) - $105 | 0; //@line 13614
 HEAP32[$vararg_buffer12 >> 2] = $107; //@line 13615
 HEAP32[$vararg_buffer12 + 4 >> 2] = $119; //@line 13617
 HEAP32[$vararg_buffer12 + 8 >> 2] = $81; //@line 13619
 _printf(4215, $vararg_buffer12) | 0; //@line 13620
 $121 = (_strstr($81, 4231) | 0) + 4 | 0; //@line 13622
 HEAP32[$vararg_buffer17 >> 2] = $107 + $105 - $121; //@line 13626
 HEAP32[$vararg_buffer17 + 4 >> 2] = $121; //@line 13628
 _printf(4236, $vararg_buffer17) | 0; //@line 13629
 $AsyncCtx47 = _emscripten_alloc_async_context(16, sp) | 0; //@line 13630
 __ZN6Socket5closeEv($vararg_buffer4) | 0; //@line 13631
 if (___async) {
  HEAP32[$AsyncCtx47 >> 2] = 315; //@line 13634
  HEAP32[$AsyncCtx47 + 4 >> 2] = $81; //@line 13636
  HEAP32[$AsyncCtx47 + 8 >> 2] = $vararg_buffer4; //@line 13638
  HEAP32[$AsyncCtx47 + 12 >> 2] = $vararg_buffer4; //@line 13640
  sp = STACKTOP; //@line 13641
  STACKTOP = sp; //@line 13642
  return 0; //@line 13642
 }
 _emscripten_free_async_context($AsyncCtx47 | 0); //@line 13644
 __ZdaPv($81); //@line 13645
 $AsyncCtx25 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13646
 _puts(4263) | 0; //@line 13647
 if (___async) {
  HEAP32[$AsyncCtx25 >> 2] = 316; //@line 13650
  HEAP32[$AsyncCtx25 + 4 >> 2] = $vararg_buffer4; //@line 13652
  HEAP32[$AsyncCtx25 + 8 >> 2] = $vararg_buffer4; //@line 13654
  sp = STACKTOP; //@line 13655
  STACKTOP = sp; //@line 13656
  return 0; //@line 13656
 }
 _emscripten_free_async_context($AsyncCtx25 | 0); //@line 13658
 $AsyncCtx44 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13659
 __ZN9TCPSocketD2Ev($vararg_buffer4); //@line 13660
 if (___async) {
  HEAP32[$AsyncCtx44 >> 2] = 317; //@line 13663
  HEAP32[$AsyncCtx44 + 4 >> 2] = $vararg_buffer4; //@line 13665
  sp = STACKTOP; //@line 13666
  STACKTOP = sp; //@line 13667
  return 0; //@line 13667
 } else {
  _emscripten_free_async_context($AsyncCtx44 | 0); //@line 13669
  STACKTOP = sp; //@line 13670
  return 0; //@line 13670
 }
 return 0; //@line 13672
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$lcssa88 = 0, $$sroa_idx5$i$i = 0, $1 = 0, $11 = 0, $110 = 0, $111 = 0, $125 = 0, $128 = 0, $13 = 0, $142 = 0, $145 = 0, $15 = 0, $163 = 0, $169 = 0, $175 = 0, $184 = 0, $189 = 0, $194 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $38 = 0, $43 = 0, $59 = 0, $62 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $89 = 0, $90 = 0, $94 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx20 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 11457
 STACKTOP = STACKTOP + 32 | 0; //@line 11458
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 11458
 $1 = sp + 16 | 0; //@line 11459
 $2 = sp; //@line 11460
 $3 = HEAP32[1949] | 0; //@line 11461
 if (!$3) {
  label = 3; //@line 11464
 } else {
  if ((HEAP32[$3 + 8 >> 2] | 0) == ($0 | 0)) {
   $$lcssa88 = $3; //@line 11470
  } else {
   label = 3; //@line 11472
  }
 }
 do {
  if ((label | 0) == 3) {
   $8 = HEAP32[1950] | 0; //@line 11477
   if ($8 | 0) {
    if ((HEAP32[$8 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $8; //@line 11484
     break;
    }
   }
   $184 = HEAP32[1951] | 0; //@line 11488
   if ($184 | 0) {
    if ((HEAP32[$184 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $184; //@line 11495
     break;
    }
   }
   $189 = HEAP32[1952] | 0; //@line 11499
   if ($189 | 0) {
    if ((HEAP32[$189 + 8 >> 2] | 0) == ($0 | 0)) {
     $$lcssa88 = $189; //@line 11506
     break;
    }
   }
   $194 = HEAP32[1953] | 0; //@line 11510
   if (!$194) {
    STACKTOP = sp; //@line 11513
    return;
   }
   if ((HEAP32[$194 + 8 >> 2] | 0) == ($0 | 0)) {
    $$lcssa88 = $194; //@line 11519
   } else {
    STACKTOP = sp; //@line 11521
    return;
   }
  }
 } while (0);
 $11 = HEAP32[$$lcssa88 + 56 >> 2] | 0; //@line 11526
 if (!$11) {
  STACKTOP = sp; //@line 11529
  return;
 }
 $13 = _malloc(512) | 0; //@line 11531
 if (!$13) {
  STACKTOP = sp; //@line 11534
  return;
 }
 $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 11536
 $15 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 11537
 if (___async) {
  HEAP32[$AsyncCtx20 >> 2] = 255; //@line 11540
  HEAP32[$AsyncCtx20 + 4 >> 2] = $13; //@line 11542
  HEAP32[$AsyncCtx20 + 8 >> 2] = $1; //@line 11544
  HEAP32[$AsyncCtx20 + 12 >> 2] = $2; //@line 11546
  HEAP32[$AsyncCtx20 + 16 >> 2] = $11; //@line 11548
  sp = STACKTOP; //@line 11549
  STACKTOP = sp; //@line 11550
  return;
 }
 _emscripten_free_async_context($AsyncCtx20 | 0); //@line 11552
 L28 : do {
  if (($15 | 0) >= 12) {
   $21 = $13 + 1 | 0; //@line 11556
   $22 = $1 + 12 | 0; //@line 11557
   $23 = $2 + 8 | 0; //@line 11558
   $$sroa_idx5$i$i = $2 + 4 | 0; //@line 11559
   $24 = $2 + 12 | 0; //@line 11560
   L30 : while (1) {
    $30 = (HEAPU8[$13 >> 0] | 0) << 8 | (HEAPU8[$21 >> 0] | 0); //@line 11567
    $31 = $30 & 65535; //@line 11568
    $32 = HEAP32[1949] | 0; //@line 11569
    if (!$32) {
     label = 12; //@line 11572
    } else {
     if (($30 | 0) == (HEAPU16[$32 + 80 >> 1] | 0 | 0)) {
      $$lcssa = $32; //@line 11579
      label = 13; //@line 11580
     } else {
      label = 12; //@line 11582
     }
    }
    do {
     if ((label | 0) == 12) {
      label = 0; //@line 11587
      $38 = HEAP32[1950] | 0; //@line 11588
      if ($38 | 0) {
       if (($30 | 0) == (HEAPU16[$38 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $38; //@line 11596
        label = 13; //@line 11597
        break;
       }
      }
      $163 = HEAP32[1951] | 0; //@line 11601
      if ($163 | 0) {
       if (($30 | 0) == (HEAPU16[$163 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $163; //@line 11609
        label = 13; //@line 11610
        break;
       }
      }
      $169 = HEAP32[1952] | 0; //@line 11614
      if ($169 | 0) {
       if (($30 | 0) == (HEAPU16[$169 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $169; //@line 11622
        label = 13; //@line 11623
        break;
       }
      }
      $175 = HEAP32[1953] | 0; //@line 11627
      if ($175 | 0) {
       if (($30 | 0) == (HEAPU16[$175 + 80 >> 1] | 0 | 0)) {
        $$lcssa = $175; //@line 11635
        label = 13; //@line 11636
       }
      }
     }
    } while (0);
    do {
     if ((label | 0) == 13) {
      label = 0; //@line 11643
      if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
       $59 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 11649
       $$ = $59 >>> 0 > 1 ? $59 : 1; //@line 11651
       $AsyncCtx11 = _emscripten_alloc_async_context(68, sp) | 0; //@line 11655
       $62 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 9717) | 0; //@line 11656
       if (___async) {
        label = 18; //@line 11659
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx11 | 0); //@line 11662
       $79 = $$lcssa + 64 | 0; //@line 11663
       HEAP32[$79 >> 2] = $62; //@line 11664
       $81 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($13, $31, $$lcssa + 68 | 0, $62, $$) | 0; //@line 11666
       if (($81 | 0) < 0) {
        $83 = HEAP32[$79 >> 2] | 0; //@line 11669
        if ($83 | 0) {
         __ZdaPv($83); //@line 11672
        }
        HEAP32[$79 >> 2] = 0; //@line 11674
        break;
       }
       HEAP8[$$lcssa + 86 >> 0] = $81; //@line 11679
       HEAP32[$$lcssa + 4 >> 2] = -3009; //@line 11681
       HEAP32[$$lcssa + 76 >> 2] = 0; //@line 11683
       $89 = $$lcssa + 44 | 0; //@line 11684
       $90 = HEAP32[$89 >> 2] | 0; //@line 11685
       if (!$90) {
        $110 = 0; //@line 11688
       } else {
        $94 = HEAP32[$90 + 4 >> 2] | 0; //@line 11692
        $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 11693
        FUNCTION_TABLE_vii[$94 & 7]($1, $$lcssa + 32 | 0); //@line 11694
        if (___async) {
         label = 25; //@line 11697
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 11700
        $110 = HEAP32[$89 >> 2] | 0; //@line 11702
       }
       HEAP32[$22 >> 2] = $110; //@line 11704
       $111 = HEAP32[$$lcssa >> 2] | 0; //@line 11705
       HEAP32[$23 >> 2] = 0; //@line 11706
       HEAP32[$2 >> 2] = 188; //@line 11707
       HEAP32[$$sroa_idx5$i$i >> 2] = $111; //@line 11708
       HEAP32[$24 >> 2] = 764; //@line 11709
       $AsyncCtx14 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11710
       __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 11711
       if (___async) {
        label = 28; //@line 11714
        break L30;
       }
       _emscripten_free_async_context($AsyncCtx14 | 0); //@line 11717
       $125 = HEAP32[$24 >> 2] | 0; //@line 11718
       if ($125 | 0) {
        $128 = HEAP32[$125 + 8 >> 2] | 0; //@line 11722
        $AsyncCtx3 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11723
        FUNCTION_TABLE_vi[$128 & 511]($2); //@line 11724
        if (___async) {
         label = 31; //@line 11727
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx3 | 0); //@line 11730
       }
       $142 = HEAP32[$22 >> 2] | 0; //@line 11732
       if ($142 | 0) {
        $145 = HEAP32[$142 + 8 >> 2] | 0; //@line 11736
        $AsyncCtx7 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11737
        FUNCTION_TABLE_vi[$145 & 511]($1); //@line 11738
        if (___async) {
         label = 35; //@line 11741
         break L30;
        }
        _emscripten_free_async_context($AsyncCtx7 | 0); //@line 11744
       }
      }
     }
    } while (0);
    $AsyncCtx17 = _emscripten_alloc_async_context(56, sp) | 0; //@line 11749
    $43 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($11, 0, $13, 512) | 0; //@line 11750
    if (___async) {
     label = 15; //@line 11753
     break;
    }
    _emscripten_free_async_context($AsyncCtx17 | 0); //@line 11756
    if (($43 | 0) < 12) {
     break L28;
    }
   }
   if ((label | 0) == 15) {
    HEAP32[$AsyncCtx17 >> 2] = 256; //@line 11763
    HEAP32[$AsyncCtx17 + 4 >> 2] = $13; //@line 11765
    HEAP32[$AsyncCtx17 + 8 >> 2] = $1; //@line 11767
    HEAP32[$AsyncCtx17 + 12 >> 2] = $22; //@line 11769
    HEAP32[$AsyncCtx17 + 16 >> 2] = $2; //@line 11771
    HEAP32[$AsyncCtx17 + 20 >> 2] = $22; //@line 11773
    HEAP32[$AsyncCtx17 + 24 >> 2] = $23; //@line 11775
    HEAP32[$AsyncCtx17 + 28 >> 2] = $2; //@line 11777
    HEAP32[$AsyncCtx17 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11779
    HEAP32[$AsyncCtx17 + 36 >> 2] = $24; //@line 11781
    HEAP32[$AsyncCtx17 + 40 >> 2] = $1; //@line 11783
    HEAP32[$AsyncCtx17 + 44 >> 2] = $2; //@line 11785
    HEAP32[$AsyncCtx17 + 48 >> 2] = $11; //@line 11787
    HEAP32[$AsyncCtx17 + 52 >> 2] = $21; //@line 11789
    sp = STACKTOP; //@line 11790
    STACKTOP = sp; //@line 11791
    return;
   } else if ((label | 0) == 18) {
    HEAP32[$AsyncCtx11 >> 2] = 257; //@line 11794
    HEAP32[$AsyncCtx11 + 4 >> 2] = $13; //@line 11796
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 11798
    HEAP32[$AsyncCtx11 + 12 >> 2] = $22; //@line 11800
    HEAP32[$AsyncCtx11 + 16 >> 2] = $2; //@line 11802
    HEAP32[$AsyncCtx11 + 20 >> 2] = $22; //@line 11804
    HEAP32[$AsyncCtx11 + 24 >> 2] = $23; //@line 11806
    HEAP32[$AsyncCtx11 + 28 >> 2] = $2; //@line 11808
    HEAP32[$AsyncCtx11 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11810
    HEAP32[$AsyncCtx11 + 36 >> 2] = $24; //@line 11812
    HEAP32[$AsyncCtx11 + 40 >> 2] = $1; //@line 11814
    HEAP32[$AsyncCtx11 + 44 >> 2] = $2; //@line 11816
    HEAP32[$AsyncCtx11 + 48 >> 2] = $11; //@line 11818
    HEAP32[$AsyncCtx11 + 52 >> 2] = $21; //@line 11820
    HEAP32[$AsyncCtx11 + 56 >> 2] = $$lcssa; //@line 11822
    HEAP16[$AsyncCtx11 + 60 >> 1] = $31; //@line 11824
    HEAP32[$AsyncCtx11 + 64 >> 2] = $$; //@line 11826
    sp = STACKTOP; //@line 11827
    STACKTOP = sp; //@line 11828
    return;
   } else if ((label | 0) == 25) {
    HEAP32[$AsyncCtx >> 2] = 258; //@line 11831
    HEAP32[$AsyncCtx + 4 >> 2] = $13; //@line 11833
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 11835
    HEAP32[$AsyncCtx + 12 >> 2] = $22; //@line 11837
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 11839
    HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 11841
    HEAP32[$AsyncCtx + 24 >> 2] = $$lcssa; //@line 11843
    HEAP32[$AsyncCtx + 28 >> 2] = $23; //@line 11845
    HEAP32[$AsyncCtx + 32 >> 2] = $2; //@line 11847
    HEAP32[$AsyncCtx + 36 >> 2] = $$sroa_idx5$i$i; //@line 11849
    HEAP32[$AsyncCtx + 40 >> 2] = $24; //@line 11851
    HEAP32[$AsyncCtx + 44 >> 2] = $1; //@line 11853
    HEAP32[$AsyncCtx + 48 >> 2] = $2; //@line 11855
    HEAP32[$AsyncCtx + 52 >> 2] = $11; //@line 11857
    HEAP32[$AsyncCtx + 56 >> 2] = $89; //@line 11859
    HEAP32[$AsyncCtx + 60 >> 2] = $21; //@line 11861
    sp = STACKTOP; //@line 11862
    STACKTOP = sp; //@line 11863
    return;
   } else if ((label | 0) == 28) {
    HEAP32[$AsyncCtx14 >> 2] = 259; //@line 11866
    HEAP32[$AsyncCtx14 + 4 >> 2] = $13; //@line 11868
    HEAP32[$AsyncCtx14 + 8 >> 2] = $1; //@line 11870
    HEAP32[$AsyncCtx14 + 12 >> 2] = $22; //@line 11872
    HEAP32[$AsyncCtx14 + 16 >> 2] = $2; //@line 11874
    HEAP32[$AsyncCtx14 + 20 >> 2] = $22; //@line 11876
    HEAP32[$AsyncCtx14 + 24 >> 2] = $23; //@line 11878
    HEAP32[$AsyncCtx14 + 28 >> 2] = $2; //@line 11880
    HEAP32[$AsyncCtx14 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11882
    HEAP32[$AsyncCtx14 + 36 >> 2] = $24; //@line 11884
    HEAP32[$AsyncCtx14 + 40 >> 2] = $1; //@line 11886
    HEAP32[$AsyncCtx14 + 44 >> 2] = $2; //@line 11888
    HEAP32[$AsyncCtx14 + 48 >> 2] = $11; //@line 11890
    HEAP32[$AsyncCtx14 + 52 >> 2] = $21; //@line 11892
    sp = STACKTOP; //@line 11893
    STACKTOP = sp; //@line 11894
    return;
   } else if ((label | 0) == 31) {
    HEAP32[$AsyncCtx3 >> 2] = 260; //@line 11897
    HEAP32[$AsyncCtx3 + 4 >> 2] = $13; //@line 11899
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 11901
    HEAP32[$AsyncCtx3 + 12 >> 2] = $22; //@line 11903
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 11905
    HEAP32[$AsyncCtx3 + 20 >> 2] = $22; //@line 11907
    HEAP32[$AsyncCtx3 + 24 >> 2] = $23; //@line 11909
    HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 11911
    HEAP32[$AsyncCtx3 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11913
    HEAP32[$AsyncCtx3 + 36 >> 2] = $24; //@line 11915
    HEAP32[$AsyncCtx3 + 40 >> 2] = $1; //@line 11917
    HEAP32[$AsyncCtx3 + 44 >> 2] = $2; //@line 11919
    HEAP32[$AsyncCtx3 + 48 >> 2] = $11; //@line 11921
    HEAP32[$AsyncCtx3 + 52 >> 2] = $21; //@line 11923
    sp = STACKTOP; //@line 11924
    STACKTOP = sp; //@line 11925
    return;
   } else if ((label | 0) == 35) {
    HEAP32[$AsyncCtx7 >> 2] = 261; //@line 11928
    HEAP32[$AsyncCtx7 + 4 >> 2] = $13; //@line 11930
    HEAP32[$AsyncCtx7 + 8 >> 2] = $1; //@line 11932
    HEAP32[$AsyncCtx7 + 12 >> 2] = $22; //@line 11934
    HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 11936
    HEAP32[$AsyncCtx7 + 20 >> 2] = $22; //@line 11938
    HEAP32[$AsyncCtx7 + 24 >> 2] = $23; //@line 11940
    HEAP32[$AsyncCtx7 + 28 >> 2] = $2; //@line 11942
    HEAP32[$AsyncCtx7 + 32 >> 2] = $$sroa_idx5$i$i; //@line 11944
    HEAP32[$AsyncCtx7 + 36 >> 2] = $24; //@line 11946
    HEAP32[$AsyncCtx7 + 40 >> 2] = $1; //@line 11948
    HEAP32[$AsyncCtx7 + 44 >> 2] = $2; //@line 11950
    HEAP32[$AsyncCtx7 + 48 >> 2] = $11; //@line 11952
    HEAP32[$AsyncCtx7 + 52 >> 2] = $21; //@line 11954
    sp = STACKTOP; //@line 11955
    STACKTOP = sp; //@line 11956
    return;
   }
  }
 } while (0);
 _free($13); //@line 11960
 STACKTOP = sp; //@line 11961
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_126($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $$byval_copy16 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $29 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $97 = 0, $ReallocAsyncCtx12 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9935
 STACKTOP = STACKTOP + 48 | 0; //@line 9936
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 9936
 $$byval_copy16 = sp + 20 | 0; //@line 9937
 $$byval_copy = sp; //@line 9938
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9940
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9942
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9944
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9946
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9948
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9950
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9952
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9954
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9956
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9958
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9960
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9962
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9964
 if ((HEAP32[___async_retval >> 2] | 0) >= 0) {
  HEAP8[$24 >> 0] = (HEAP8[$24 >> 0] | 0) + 1 << 24 >> 24; //@line 9971
  $97 = HEAP8[$22 >> 0] | 0; //@line 9972
  if ($97 << 24 >> 24) {
   HEAP8[$22 >> 0] = $97 + -1 << 24 >> 24; //@line 9976
  }
  _free($6); //@line 9978
  HEAP32[$4 + 76 >> 2] = 5e3; //@line 9980
  STACKTOP = sp; //@line 9981
  return;
 }
 HEAP8[$16 >> 0] = (HEAP8[$16 >> 0] | 0) + 1 << 24 >> 24; //@line 9985
 HEAP32[$18 >> 2] = 0; //@line 9986
 HEAP32[$18 + 4 >> 2] = 0; //@line 9986
 HEAP32[$18 + 8 >> 2] = 0; //@line 9986
 HEAP32[$18 + 12 >> 2] = 0; //@line 9986
 HEAP32[$18 + 16 >> 2] = 0; //@line 9986
 HEAP32[$$byval_copy16 >> 2] = HEAP32[$20 >> 2]; //@line 9987
 HEAP32[$$byval_copy16 + 4 >> 2] = HEAP32[$20 + 4 >> 2]; //@line 9987
 HEAP32[$$byval_copy16 + 8 >> 2] = HEAP32[$20 + 8 >> 2]; //@line 9987
 HEAP32[$$byval_copy16 + 12 >> 2] = HEAP32[$20 + 12 >> 2]; //@line 9987
 HEAP32[$$byval_copy16 + 16 >> 2] = HEAP32[$20 + 16 >> 2]; //@line 9987
 __ZN13SocketAddressC2E10nsapi_addrt($10, $$byval_copy16, 0); //@line 9988
 do {
  if (HEAP8[$22 >> 0] | 0) {
   $28 = HEAP32[$26 >> 2] | 0; //@line 9993
   $29 = HEAP8[$16 >> 0] | 0; //@line 9994
   if (($29 & 255) > 9) {
    if (!(HEAP8[$24 >> 0] | 0)) {
     break;
    }
    HEAP8[$16 >> 0] = 0; //@line 10002
    HEAP8[$24 >> 0] = 0; //@line 10003
    $35 = 0; //@line 10004
   } else {
    if (($29 & 255) < 5) {
     $35 = $29; //@line 10008
    } else {
     $56 = 648 + ((($29 & 255) + -5 | 0) * 20 | 0) | 0; //@line 10012
     HEAP32[$$byval_copy >> 2] = HEAP32[$56 >> 2]; //@line 10013
     HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$56 + 4 >> 2]; //@line 10013
     HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$56 + 8 >> 2]; //@line 10013
     HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$56 + 12 >> 2]; //@line 10013
     HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$56 + 16 >> 2]; //@line 10013
     __ZN13SocketAddress8set_addrE10nsapi_addr($10, $$byval_copy); //@line 10014
     __ZN13SocketAddress8set_portEt($10, 53); //@line 10015
     $75 = HEAP32[$12 >> 2] | 0; //@line 10016
     $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 10017
     $76 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($75, $10, $6, $14) | 0; //@line 10018
     if (___async) {
      HEAP32[$ReallocAsyncCtx12 >> 2] = 254; //@line 10021
      $77 = $ReallocAsyncCtx12 + 4 | 0; //@line 10022
      HEAP32[$77 >> 2] = $2; //@line 10023
      $78 = $ReallocAsyncCtx12 + 8 | 0; //@line 10024
      HEAP32[$78 >> 2] = $4; //@line 10025
      $79 = $ReallocAsyncCtx12 + 12 | 0; //@line 10026
      HEAP32[$79 >> 2] = $6; //@line 10027
      $80 = $ReallocAsyncCtx12 + 16 | 0; //@line 10028
      HEAP32[$80 >> 2] = $8; //@line 10029
      $81 = $ReallocAsyncCtx12 + 20 | 0; //@line 10030
      HEAP32[$81 >> 2] = $10; //@line 10031
      $82 = $ReallocAsyncCtx12 + 24 | 0; //@line 10032
      HEAP32[$82 >> 2] = $12; //@line 10033
      $83 = $ReallocAsyncCtx12 + 28 | 0; //@line 10034
      HEAP32[$83 >> 2] = $14; //@line 10035
      $84 = $ReallocAsyncCtx12 + 32 | 0; //@line 10036
      HEAP32[$84 >> 2] = $16; //@line 10037
      $85 = $ReallocAsyncCtx12 + 36 | 0; //@line 10038
      HEAP32[$85 >> 2] = $18; //@line 10039
      $86 = $ReallocAsyncCtx12 + 40 | 0; //@line 10040
      HEAP32[$86 >> 2] = $20; //@line 10041
      $87 = $ReallocAsyncCtx12 + 44 | 0; //@line 10042
      HEAP32[$87 >> 2] = $22; //@line 10043
      $88 = $ReallocAsyncCtx12 + 48 | 0; //@line 10044
      HEAP32[$88 >> 2] = $24; //@line 10045
      $89 = $ReallocAsyncCtx12 + 52 | 0; //@line 10046
      HEAP32[$89 >> 2] = $26; //@line 10047
      sp = STACKTOP; //@line 10048
      STACKTOP = sp; //@line 10049
      return;
     }
     HEAP32[___async_retval >> 2] = $76; //@line 10052
     ___async_unwind = 0; //@line 10053
     HEAP32[$ReallocAsyncCtx12 >> 2] = 254; //@line 10054
     $77 = $ReallocAsyncCtx12 + 4 | 0; //@line 10055
     HEAP32[$77 >> 2] = $2; //@line 10056
     $78 = $ReallocAsyncCtx12 + 8 | 0; //@line 10057
     HEAP32[$78 >> 2] = $4; //@line 10058
     $79 = $ReallocAsyncCtx12 + 12 | 0; //@line 10059
     HEAP32[$79 >> 2] = $6; //@line 10060
     $80 = $ReallocAsyncCtx12 + 16 | 0; //@line 10061
     HEAP32[$80 >> 2] = $8; //@line 10062
     $81 = $ReallocAsyncCtx12 + 20 | 0; //@line 10063
     HEAP32[$81 >> 2] = $10; //@line 10064
     $82 = $ReallocAsyncCtx12 + 24 | 0; //@line 10065
     HEAP32[$82 >> 2] = $12; //@line 10066
     $83 = $ReallocAsyncCtx12 + 28 | 0; //@line 10067
     HEAP32[$83 >> 2] = $14; //@line 10068
     $84 = $ReallocAsyncCtx12 + 32 | 0; //@line 10069
     HEAP32[$84 >> 2] = $16; //@line 10070
     $85 = $ReallocAsyncCtx12 + 36 | 0; //@line 10071
     HEAP32[$85 >> 2] = $18; //@line 10072
     $86 = $ReallocAsyncCtx12 + 40 | 0; //@line 10073
     HEAP32[$86 >> 2] = $20; //@line 10074
     $87 = $ReallocAsyncCtx12 + 44 | 0; //@line 10075
     HEAP32[$87 >> 2] = $22; //@line 10076
     $88 = $ReallocAsyncCtx12 + 48 | 0; //@line 10077
     HEAP32[$88 >> 2] = $24; //@line 10078
     $89 = $ReallocAsyncCtx12 + 52 | 0; //@line 10079
     HEAP32[$89 >> 2] = $26; //@line 10080
     sp = STACKTOP; //@line 10081
     STACKTOP = sp; //@line 10082
     return;
    }
   }
   $38 = HEAP32[(HEAP32[$28 >> 2] | 0) + 28 >> 2] | 0; //@line 10088
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(56) | 0; //@line 10089
   $39 = FUNCTION_TABLE_iiii[$38 & 31]($28, $35 & 255, $10) | 0; //@line 10090
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 248; //@line 10093
    $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 10094
    HEAP32[$40 >> 2] = $2; //@line 10095
    $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 10096
    HEAP32[$41 >> 2] = $4; //@line 10097
    $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 10098
    HEAP32[$42 >> 2] = $6; //@line 10099
    $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 10100
    HEAP32[$43 >> 2] = $8; //@line 10101
    $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 10102
    HEAP32[$44 >> 2] = $10; //@line 10103
    $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 10104
    HEAP32[$45 >> 2] = $12; //@line 10105
    $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 10106
    HEAP32[$46 >> 2] = $14; //@line 10107
    $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 10108
    HEAP32[$47 >> 2] = $16; //@line 10109
    $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 10110
    HEAP32[$48 >> 2] = $18; //@line 10111
    $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 10112
    HEAP32[$49 >> 2] = $20; //@line 10113
    $50 = $ReallocAsyncCtx4 + 44 | 0; //@line 10114
    HEAP32[$50 >> 2] = $22; //@line 10115
    $51 = $ReallocAsyncCtx4 + 48 | 0; //@line 10116
    HEAP32[$51 >> 2] = $24; //@line 10117
    $52 = $ReallocAsyncCtx4 + 52 | 0; //@line 10118
    HEAP32[$52 >> 2] = $26; //@line 10119
    sp = STACKTOP; //@line 10120
    STACKTOP = sp; //@line 10121
    return;
   }
   HEAP32[___async_retval >> 2] = $39; //@line 10124
   ___async_unwind = 0; //@line 10125
   HEAP32[$ReallocAsyncCtx4 >> 2] = 248; //@line 10126
   $40 = $ReallocAsyncCtx4 + 4 | 0; //@line 10127
   HEAP32[$40 >> 2] = $2; //@line 10128
   $41 = $ReallocAsyncCtx4 + 8 | 0; //@line 10129
   HEAP32[$41 >> 2] = $4; //@line 10130
   $42 = $ReallocAsyncCtx4 + 12 | 0; //@line 10131
   HEAP32[$42 >> 2] = $6; //@line 10132
   $43 = $ReallocAsyncCtx4 + 16 | 0; //@line 10133
   HEAP32[$43 >> 2] = $8; //@line 10134
   $44 = $ReallocAsyncCtx4 + 20 | 0; //@line 10135
   HEAP32[$44 >> 2] = $10; //@line 10136
   $45 = $ReallocAsyncCtx4 + 24 | 0; //@line 10137
   HEAP32[$45 >> 2] = $12; //@line 10138
   $46 = $ReallocAsyncCtx4 + 28 | 0; //@line 10139
   HEAP32[$46 >> 2] = $14; //@line 10140
   $47 = $ReallocAsyncCtx4 + 32 | 0; //@line 10141
   HEAP32[$47 >> 2] = $16; //@line 10142
   $48 = $ReallocAsyncCtx4 + 36 | 0; //@line 10143
   HEAP32[$48 >> 2] = $18; //@line 10144
   $49 = $ReallocAsyncCtx4 + 40 | 0; //@line 10145
   HEAP32[$49 >> 2] = $20; //@line 10146
   $50 = $ReallocAsyncCtx4 + 44 | 0; //@line 10147
   HEAP32[$50 >> 2] = $22; //@line 10148
   $51 = $ReallocAsyncCtx4 + 48 | 0; //@line 10149
   HEAP32[$51 >> 2] = $24; //@line 10150
   $52 = $ReallocAsyncCtx4 + 52 | 0; //@line 10151
   HEAP32[$52 >> 2] = $26; //@line 10152
   sp = STACKTOP; //@line 10153
   STACKTOP = sp; //@line 10154
   return;
  }
 } while (0);
 $57 = $4 + 28 | 0; //@line 10157
 $58 = HEAP32[$57 >> 2] | 0; //@line 10158
 if (!$58) {
  $69 = $2 + 12 | 0; //@line 10161
  HEAP32[$69 >> 2] = 0; //@line 10162
  $70 = HEAP32[$4 >> 2] | 0; //@line 10163
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 10164
  __ZL28nsapi_dns_query_async_deletei($70); //@line 10165
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 250; //@line 10168
   $71 = $ReallocAsyncCtx8 + 4 | 0; //@line 10169
   HEAP32[$71 >> 2] = $69; //@line 10170
   $72 = $ReallocAsyncCtx8 + 8 | 0; //@line 10171
   HEAP32[$72 >> 2] = $2; //@line 10172
   $73 = $ReallocAsyncCtx8 + 12 | 0; //@line 10173
   HEAP32[$73 >> 2] = $6; //@line 10174
   $74 = $ReallocAsyncCtx8 + 16 | 0; //@line 10175
   HEAP32[$74 >> 2] = $8; //@line 10176
   sp = STACKTOP; //@line 10177
   STACKTOP = sp; //@line 10178
   return;
  }
  ___async_unwind = 0; //@line 10180
  HEAP32[$ReallocAsyncCtx8 >> 2] = 250; //@line 10181
  $71 = $ReallocAsyncCtx8 + 4 | 0; //@line 10182
  HEAP32[$71 >> 2] = $69; //@line 10183
  $72 = $ReallocAsyncCtx8 + 8 | 0; //@line 10184
  HEAP32[$72 >> 2] = $2; //@line 10185
  $73 = $ReallocAsyncCtx8 + 12 | 0; //@line 10186
  HEAP32[$73 >> 2] = $6; //@line 10187
  $74 = $ReallocAsyncCtx8 + 16 | 0; //@line 10188
  HEAP32[$74 >> 2] = $8; //@line 10189
  sp = STACKTOP; //@line 10190
  STACKTOP = sp; //@line 10191
  return;
 } else {
  $62 = HEAP32[$58 + 4 >> 2] | 0; //@line 10195
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(28) | 0; //@line 10196
  FUNCTION_TABLE_vii[$62 & 7]($2, $4 + 16 | 0); //@line 10197
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 249; //@line 10200
   $63 = $ReallocAsyncCtx5 + 4 | 0; //@line 10201
   HEAP32[$63 >> 2] = $57; //@line 10202
   $64 = $ReallocAsyncCtx5 + 8 | 0; //@line 10203
   HEAP32[$64 >> 2] = $2; //@line 10204
   $65 = $ReallocAsyncCtx5 + 12 | 0; //@line 10205
   HEAP32[$65 >> 2] = $4; //@line 10206
   $66 = $ReallocAsyncCtx5 + 16 | 0; //@line 10207
   HEAP32[$66 >> 2] = $2; //@line 10208
   $67 = $ReallocAsyncCtx5 + 20 | 0; //@line 10209
   HEAP32[$67 >> 2] = $6; //@line 10210
   $68 = $ReallocAsyncCtx5 + 24 | 0; //@line 10211
   HEAP32[$68 >> 2] = $8; //@line 10212
   sp = STACKTOP; //@line 10213
   STACKTOP = sp; //@line 10214
   return;
  }
  ___async_unwind = 0; //@line 10216
  HEAP32[$ReallocAsyncCtx5 >> 2] = 249; //@line 10217
  $63 = $ReallocAsyncCtx5 + 4 | 0; //@line 10218
  HEAP32[$63 >> 2] = $57; //@line 10219
  $64 = $ReallocAsyncCtx5 + 8 | 0; //@line 10220
  HEAP32[$64 >> 2] = $2; //@line 10221
  $65 = $ReallocAsyncCtx5 + 12 | 0; //@line 10222
  HEAP32[$65 >> 2] = $4; //@line 10223
  $66 = $ReallocAsyncCtx5 + 16 | 0; //@line 10224
  HEAP32[$66 >> 2] = $2; //@line 10225
  $67 = $ReallocAsyncCtx5 + 20 | 0; //@line 10226
  HEAP32[$67 >> 2] = $6; //@line 10227
  $68 = $ReallocAsyncCtx5 + 24 | 0; //@line 10228
  HEAP32[$68 >> 2] = $8; //@line 10229
  sp = STACKTOP; //@line 10230
  STACKTOP = sp; //@line 10231
  return;
 }
}
function _hexfloat($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$0133 = 0, $$0142 = 0, $$0146 = 0, $$0148 = 0, $$0151 = 0.0, $$0152 = 0.0, $$0155 = 0.0, $$0159 = 0, $$0165 = 0.0, $$0166 = 0, $$0166169 = 0, $$0166170 = 0, $$1$ph = 0, $$1147 = 0, $$1149 = 0, $$1153 = 0.0, $$1156 = 0.0, $$1160 = 0, $$2 = 0, $$2$lcssa = 0, $$2144 = 0, $$2150 = 0, $$2154 = 0.0, $$2157 = 0.0, $$2161 = 0, $$3145 = 0, $$3158$lcssa = 0.0, $$3158179 = 0.0, $$3162$lcssa = 0, $$3162183 = 0, $$4 = 0.0, $$4163$lcssa = 0, $$4163178 = 0, $$5164 = 0, $$pre = 0, $$pre$phi201Z2D = 0.0, $104 = 0, $105 = 0, $106 = 0, $116 = 0, $117 = 0, $130 = 0, $132 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $141 = 0, $143 = 0, $153 = 0, $155 = 0, $166 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $176 = 0, $179 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $193 = 0.0, $194 = 0, $207 = 0.0, $21 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $29 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $41 = 0, $42 = 0, $46 = 0, $5 = 0, $51 = 0, $53 = 0, $6 = 0, $65 = 0.0, $7 = 0, $72 = 0, $74 = 0, $83 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $or$cond = 0, $or$cond168 = 0, label = 0, $105$looptemp = 0;
 $5 = $0 + 4 | 0; //@line 7915
 $6 = HEAP32[$5 >> 2] | 0; //@line 7916
 $7 = $0 + 100 | 0; //@line 7917
 if ($6 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
  HEAP32[$5 >> 2] = $6 + 1; //@line 7922
  $$0 = HEAPU8[$6 >> 0] | 0; //@line 7925
  $$0142 = 0; //@line 7925
 } else {
  $$0 = ___shgetc($0) | 0; //@line 7928
  $$0142 = 0; //@line 7928
 }
 L4 : while (1) {
  switch ($$0 | 0) {
  case 46:
   {
    label = 8; //@line 7933
    break L4;
    break;
   }
  case 48:
   {
    break;
   }
  default:
   {
    $$0146 = 0; //@line 7941
    $$0148 = 0; //@line 7941
    $$0152 = 1.0; //@line 7941
    $$0155 = 0.0; //@line 7941
    $$0159 = 0; //@line 7941
    $$2 = $$0; //@line 7941
    $$2144 = $$0142; //@line 7941
    $51 = 0; //@line 7941
    $53 = 0; //@line 7941
    $96 = 0; //@line 7941
    $98 = 0; //@line 7941
    break L4;
   }
  }
  $14 = HEAP32[$5 >> 2] | 0; //@line 7945
  if ($14 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $14 + 1; //@line 7950
   $$0 = HEAPU8[$14 >> 0] | 0; //@line 7953
   $$0142 = 1; //@line 7953
   continue;
  } else {
   $$0 = ___shgetc($0) | 0; //@line 7957
   $$0142 = 1; //@line 7957
   continue;
  }
 }
 if ((label | 0) == 8) {
  $21 = HEAP32[$5 >> 2] | 0; //@line 7962
  if ($21 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $21 + 1; //@line 7967
   $$1$ph = HEAPU8[$21 >> 0] | 0; //@line 7970
  } else {
   $$1$ph = ___shgetc($0) | 0; //@line 7973
  }
  if (($$1$ph | 0) == 48) {
   $36 = 0; //@line 7977
   $37 = 0; //@line 7977
   while (1) {
    $29 = HEAP32[$5 >> 2] | 0; //@line 7979
    if ($29 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
     HEAP32[$5 >> 2] = $29 + 1; //@line 7984
     $41 = HEAPU8[$29 >> 0] | 0; //@line 7987
    } else {
     $41 = ___shgetc($0) | 0; //@line 7990
    }
    $38 = _i64Add($36 | 0, $37 | 0, -1, -1) | 0; //@line 7992
    $39 = tempRet0; //@line 7993
    if (($41 | 0) == 48) {
     $36 = $38; //@line 7996
     $37 = $39; //@line 7996
    } else {
     $$0146 = 1; //@line 7998
     $$0148 = 0; //@line 7998
     $$0152 = 1.0; //@line 7998
     $$0155 = 0.0; //@line 7998
     $$0159 = 0; //@line 7998
     $$2 = $41; //@line 7998
     $$2144 = 1; //@line 7998
     $51 = 0; //@line 7998
     $53 = 0; //@line 7998
     $96 = $38; //@line 7998
     $98 = $39; //@line 7998
     break;
    }
   }
  } else {
   $$0146 = 1; //@line 8003
   $$0148 = 0; //@line 8003
   $$0152 = 1.0; //@line 8003
   $$0155 = 0.0; //@line 8003
   $$0159 = 0; //@line 8003
   $$2 = $$1$ph; //@line 8003
   $$2144 = $$0142; //@line 8003
   $51 = 0; //@line 8003
   $53 = 0; //@line 8003
   $96 = 0; //@line 8003
   $98 = 0; //@line 8003
  }
 }
 while (1) {
  $42 = $$2 + -48 | 0; //@line 8007
  $$pre = $$2 | 32; //@line 8009
  if ($42 >>> 0 < 10) {
   label = 20; //@line 8011
  } else {
   $46 = ($$2 | 0) == 46; //@line 8015
   if (!($46 | ($$pre + -97 | 0) >>> 0 < 6)) {
    $$2$lcssa = $$2; //@line 8018
    break;
   }
   if ($46) {
    if (!$$0146) {
     $$1147 = 1; //@line 8024
     $$2150 = $$0148; //@line 8024
     $$2154 = $$0152; //@line 8024
     $$2157 = $$0155; //@line 8024
     $$2161 = $$0159; //@line 8024
     $$3145 = $$2144; //@line 8024
     $211 = $53; //@line 8024
     $212 = $51; //@line 8024
     $213 = $53; //@line 8024
     $214 = $51; //@line 8024
    } else {
     $$2$lcssa = 46; //@line 8026
     break;
    }
   } else {
    label = 20; //@line 8030
   }
  }
  if ((label | 0) == 20) {
   label = 0; //@line 8034
   $$0133 = ($$2 | 0) > 57 ? $$pre + -87 | 0 : $42; //@line 8037
   do {
    if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
     $$1149 = $$0148; //@line 8047
     $$1153 = $$0152; //@line 8047
     $$1156 = $$0155; //@line 8047
     $$1160 = $$0133 + ($$0159 << 4) | 0; //@line 8047
    } else {
     if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 14) {
      $65 = $$0152 * .0625; //@line 8056
      $$1149 = $$0148; //@line 8059
      $$1153 = $65; //@line 8059
      $$1156 = $$0155 + $65 * +($$0133 | 0); //@line 8059
      $$1160 = $$0159; //@line 8059
      break;
     } else {
      $or$cond = ($$0148 | 0) != 0 | ($$0133 | 0) == 0; //@line 8064
      $$1149 = $or$cond ? $$0148 : 1; //@line 8069
      $$1153 = $$0152; //@line 8069
      $$1156 = $or$cond ? $$0155 : $$0155 + $$0152 * .5; //@line 8069
      $$1160 = $$0159; //@line 8069
      break;
     }
    }
   } while (0);
   $72 = _i64Add($53 | 0, $51 | 0, 1, 0) | 0; //@line 8074
   $$1147 = $$0146; //@line 8076
   $$2150 = $$1149; //@line 8076
   $$2154 = $$1153; //@line 8076
   $$2157 = $$1156; //@line 8076
   $$2161 = $$1160; //@line 8076
   $$3145 = 1; //@line 8076
   $211 = $96; //@line 8076
   $212 = $98; //@line 8076
   $213 = $72; //@line 8076
   $214 = tempRet0; //@line 8076
  }
  $74 = HEAP32[$5 >> 2] | 0; //@line 8078
  if ($74 >>> 0 < (HEAP32[$7 >> 2] | 0) >>> 0) {
   HEAP32[$5 >> 2] = $74 + 1; //@line 8083
   $$0146 = $$1147; //@line 8086
   $$0148 = $$2150; //@line 8086
   $$0152 = $$2154; //@line 8086
   $$0155 = $$2157; //@line 8086
   $$0159 = $$2161; //@line 8086
   $$2 = HEAPU8[$74 >> 0] | 0; //@line 8086
   $$2144 = $$3145; //@line 8086
   $51 = $214; //@line 8086
   $53 = $213; //@line 8086
   $96 = $211; //@line 8086
   $98 = $212; //@line 8086
   continue;
  } else {
   $$0146 = $$1147; //@line 8090
   $$0148 = $$2150; //@line 8090
   $$0152 = $$2154; //@line 8090
   $$0155 = $$2157; //@line 8090
   $$0159 = $$2161; //@line 8090
   $$2 = ___shgetc($0) | 0; //@line 8090
   $$2144 = $$3145; //@line 8090
   $51 = $214; //@line 8090
   $53 = $213; //@line 8090
   $96 = $211; //@line 8090
   $98 = $212; //@line 8090
   continue;
  }
 }
 do {
  if (!$$2144) {
   $83 = (HEAP32[$7 >> 2] | 0) == 0; //@line 8098
   if (!$83) {
    HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8102
   }
   if (!$4) {
    ___shlim($0, 0); //@line 8106
   } else {
    if (!$83) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8111
    }
    if (!(($$0146 | 0) == 0 | $83)) {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8118
    }
   }
   $$0165 = +($3 | 0) * 0.0; //@line 8123
  } else {
   $94 = ($$0146 | 0) == 0; //@line 8125
   $95 = $94 ? $53 : $96; //@line 8126
   $97 = $94 ? $51 : $98; //@line 8127
   if (($51 | 0) < 0 | ($51 | 0) == 0 & $53 >>> 0 < 8) {
    $$3162183 = $$0159; //@line 8134
    $105 = $53; //@line 8134
    $106 = $51; //@line 8134
    while (1) {
     $104 = $$3162183 << 4; //@line 8136
     $105$looptemp = $105;
     $105 = _i64Add($105 | 0, $106 | 0, 1, 0) | 0; //@line 8137
     if (!(($106 | 0) < 0 | ($106 | 0) == 0 & $105$looptemp >>> 0 < 7)) {
      $$3162$lcssa = $104; //@line 8147
      break;
     } else {
      $$3162183 = $104; //@line 8145
      $106 = tempRet0; //@line 8145
     }
    }
   } else {
    $$3162$lcssa = $$0159; //@line 8152
   }
   if (($$2$lcssa | 32 | 0) == 112) {
    $116 = _scanexp($0, $4) | 0; //@line 8157
    $117 = tempRet0; //@line 8158
    if (($116 | 0) == 0 & ($117 | 0) == -2147483648) {
     if (!$4) {
      ___shlim($0, 0); //@line 8165
      $$0165 = 0.0; //@line 8166
      break;
     }
     if (!(HEAP32[$7 >> 2] | 0)) {
      $134 = 0; //@line 8172
      $135 = 0; //@line 8172
     } else {
      HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8176
      $134 = 0; //@line 8177
      $135 = 0; //@line 8177
     }
    } else {
     $134 = $116; //@line 8180
     $135 = $117; //@line 8180
    }
   } else {
    if (!(HEAP32[$7 >> 2] | 0)) {
     $134 = 0; //@line 8186
     $135 = 0; //@line 8186
    } else {
     HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + -1; //@line 8190
     $134 = 0; //@line 8191
     $135 = 0; //@line 8191
    }
   }
   $130 = _bitshift64Shl($95 | 0, $97 | 0, 2) | 0; //@line 8194
   $132 = _i64Add($130 | 0, tempRet0 | 0, -32, -1) | 0; //@line 8196
   $136 = _i64Add($132 | 0, tempRet0 | 0, $134 | 0, $135 | 0) | 0; //@line 8198
   $137 = tempRet0; //@line 8199
   if (!$$3162$lcssa) {
    $$0165 = +($3 | 0) * 0.0; //@line 8204
    break;
   }
   $141 = 0 - $2 | 0; //@line 8207
   $143 = (($141 | 0) < 0) << 31 >> 31; //@line 8209
   if (($137 | 0) > ($143 | 0) | ($137 | 0) == ($143 | 0) & $136 >>> 0 > $141 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8217
    $$0165 = +($3 | 0) * 1.7976931348623157e+308 * 1.7976931348623157e+308; //@line 8221
    break;
   }
   $153 = $2 + -106 | 0; //@line 8224
   $155 = (($153 | 0) < 0) << 31 >> 31; //@line 8226
   if (($137 | 0) < ($155 | 0) | ($137 | 0) == ($155 | 0) & $136 >>> 0 < $153 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8234
    $$0165 = +($3 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308; //@line 8238
    break;
   }
   if (($$3162$lcssa | 0) > -1) {
    $$3158179 = $$0155; //@line 8243
    $$4163178 = $$3162$lcssa; //@line 8243
    $170 = $136; //@line 8243
    $171 = $137; //@line 8243
    while (1) {
     $166 = !($$3158179 >= .5); //@line 8245
     $$5164 = $$4163178 << 1 | ($166 ^ 1) & 1; //@line 8250
     $$4 = $$3158179 + ($166 ? $$3158179 : $$3158179 + -1.0); //@line 8252
     $172 = _i64Add($170 | 0, $171 | 0, -1, -1) | 0; //@line 8253
     $173 = tempRet0; //@line 8254
     if (($$5164 | 0) > -1) {
      $$3158179 = $$4; //@line 8257
      $$4163178 = $$5164; //@line 8257
      $170 = $172; //@line 8257
      $171 = $173; //@line 8257
     } else {
      $$3158$lcssa = $$4; //@line 8259
      $$4163$lcssa = $$5164; //@line 8259
      $181 = $172; //@line 8259
      $182 = $173; //@line 8259
      break;
     }
    }
   } else {
    $$3158$lcssa = $$0155; //@line 8264
    $$4163$lcssa = $$3162$lcssa; //@line 8264
    $181 = $136; //@line 8264
    $182 = $137; //@line 8264
   }
   $176 = (($1 | 0) < 0) << 31 >> 31; //@line 8267
   $179 = _i64Subtract(32, 0, $2 | 0, (($2 | 0) < 0) << 31 >> 31 | 0) | 0; //@line 8270
   $183 = _i64Add($179 | 0, tempRet0 | 0, $181 | 0, $182 | 0) | 0; //@line 8272
   $184 = tempRet0; //@line 8273
   if (($184 | 0) < ($176 | 0) | ($184 | 0) == ($176 | 0) & $183 >>> 0 < $1 >>> 0) {
    if (($183 | 0) > 0) {
     $$0166 = $183; //@line 8282
     label = 59; //@line 8283
    } else {
     $$0166170 = 0; //@line 8285
     $194 = 84; //@line 8285
     label = 61; //@line 8286
    }
   } else {
    $$0166 = $1; //@line 8289
    label = 59; //@line 8290
   }
   if ((label | 0) == 59) {
    if (($$0166 | 0) < 53) {
     $$0166170 = $$0166; //@line 8296
     $194 = 84 - $$0166 | 0; //@line 8296
     label = 61; //@line 8297
    } else {
     $$0151 = 0.0; //@line 8300
     $$0166169 = $$0166; //@line 8300
     $$pre$phi201Z2D = +($3 | 0); //@line 8300
    }
   }
   if ((label | 0) == 61) {
    $193 = +($3 | 0); //@line 8304
    $$0151 = +_copysignl(+_scalbn(1.0, $194), $193); //@line 8307
    $$0166169 = $$0166170; //@line 8307
    $$pre$phi201Z2D = $193; //@line 8307
   }
   $or$cond168 = ($$4163$lcssa & 1 | 0) == 0 & ($$3158$lcssa != 0.0 & ($$0166169 | 0) < 32); //@line 8314
   $207 = ($or$cond168 ? 0.0 : $$3158$lcssa) * $$pre$phi201Z2D + ($$0151 + $$pre$phi201Z2D * +(($$4163$lcssa + ($or$cond168 & 1) | 0) >>> 0)) - $$0151; //@line 8323
   if (!($207 != 0.0)) {
    HEAP32[(___errno_location() | 0) >> 2] = 34; //@line 8327
   }
   $$0165 = +_scalbnl($207, $181); //@line 8330
  }
 } while (0);
 return +$$0165;
}
function _twoway_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0166 = 0, $$0168 = 0, $$0169 = 0, $$0169$be = 0, $$0170 = 0, $$0175$ph$ph$lcssa216 = 0, $$0175$ph$ph$lcssa216328 = 0, $$0175$ph$ph254 = 0, $$0179242 = 0, $$0183$ph197$ph253 = 0, $$0183$ph197248 = 0, $$0183$ph260 = 0, $$0185$ph$lcssa = 0, $$0185$ph$lcssa327 = 0, $$0185$ph259 = 0, $$0187219$ph325326 = 0, $$0187263 = 0, $$1176$$0175 = 0, $$1176$ph$ph$lcssa208 = 0, $$1176$ph$ph233 = 0, $$1180222 = 0, $$1184$ph193$ph232 = 0, $$1184$ph193227 = 0, $$1184$ph239 = 0, $$1186$$0185 = 0, $$1186$ph$lcssa = 0, $$1186$ph238 = 0, $$2181$sink = 0, $$3 = 0, $$3173 = 0, $$3178 = 0, $$3182221 = 0, $$4 = 0, $$pr = 0, $10 = 0, $105 = 0, $111 = 0, $113 = 0, $118 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $14 = 0, $2 = 0, $23 = 0, $25 = 0, $27 = 0, $3 = 0, $32 = 0, $34 = 0, $37 = 0, $4 = 0, $41 = 0, $45 = 0, $50 = 0, $52 = 0, $53 = 0, $56 = 0, $60 = 0, $68 = 0, $70 = 0, $74 = 0, $78 = 0, $79 = 0, $80 = 0, $81 = 0, $83 = 0, $86 = 0, $93 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12956
 STACKTOP = STACKTOP + 1056 | 0; //@line 12957
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(1056); //@line 12957
 $2 = sp + 1024 | 0; //@line 12958
 $3 = sp; //@line 12959
 HEAP32[$2 >> 2] = 0; //@line 12960
 HEAP32[$2 + 4 >> 2] = 0; //@line 12960
 HEAP32[$2 + 8 >> 2] = 0; //@line 12960
 HEAP32[$2 + 12 >> 2] = 0; //@line 12960
 HEAP32[$2 + 16 >> 2] = 0; //@line 12960
 HEAP32[$2 + 20 >> 2] = 0; //@line 12960
 HEAP32[$2 + 24 >> 2] = 0; //@line 12960
 HEAP32[$2 + 28 >> 2] = 0; //@line 12960
 $4 = HEAP8[$1 >> 0] | 0; //@line 12961
 L1 : do {
  if (!($4 << 24 >> 24)) {
   $$0175$ph$ph$lcssa216328 = 1; //@line 12965
   $$0185$ph$lcssa327 = -1; //@line 12965
   $$0187219$ph325326 = 0; //@line 12965
   $$1176$ph$ph$lcssa208 = 1; //@line 12965
   $$1186$ph$lcssa = -1; //@line 12965
   label = 26; //@line 12966
  } else {
   $$0187263 = 0; //@line 12968
   $10 = $4; //@line 12968
   do {
    if (!(HEAP8[$0 + $$0187263 >> 0] | 0)) {
     $$3 = 0; //@line 12974
     break L1;
    }
    $14 = $2 + ((($10 & 255) >>> 5 & 255) << 2) | 0; //@line 12982
    HEAP32[$14 >> 2] = HEAP32[$14 >> 2] | 1 << ($10 & 31); //@line 12985
    $$0187263 = $$0187263 + 1 | 0; //@line 12986
    HEAP32[$3 + (($10 & 255) << 2) >> 2] = $$0187263; //@line 12989
    $10 = HEAP8[$1 + $$0187263 >> 0] | 0; //@line 12991
   } while ($10 << 24 >> 24 != 0);
   $23 = $$0187263 >>> 0 > 1; //@line 12999
   if ($23) {
    $$0183$ph260 = 0; //@line 13001
    $$0185$ph259 = -1; //@line 13001
    $130 = 1; //@line 13001
    L6 : while (1) {
     $$0175$ph$ph254 = 1; //@line 13003
     $$0183$ph197$ph253 = $$0183$ph260; //@line 13003
     $131 = $130; //@line 13003
     while (1) {
      $$0183$ph197248 = $$0183$ph197$ph253; //@line 13005
      $132 = $131; //@line 13005
      L10 : while (1) {
       $$0179242 = 1; //@line 13007
       $25 = $132; //@line 13007
       while (1) {
        $32 = HEAP8[$1 + ($$0179242 + $$0185$ph259) >> 0] | 0; //@line 13011
        $34 = HEAP8[$1 + $25 >> 0] | 0; //@line 13013
        if ($32 << 24 >> 24 != $34 << 24 >> 24) {
         break L10;
        }
        if (($$0179242 | 0) == ($$0175$ph$ph254 | 0)) {
         break;
        }
        $$0179242 = $$0179242 + 1 | 0; //@line 13019
        $27 = $$0179242 + $$0183$ph197248 | 0; //@line 13023
        if ($27 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 13028
         $$0185$ph$lcssa = $$0185$ph259; //@line 13028
         break L6;
        } else {
         $25 = $27; //@line 13026
        }
       }
       $37 = $$0175$ph$ph254 + $$0183$ph197248 | 0; //@line 13032
       $132 = $37 + 1 | 0; //@line 13033
       if ($132 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216 = $$0175$ph$ph254; //@line 13038
        $$0185$ph$lcssa = $$0185$ph259; //@line 13038
        break L6;
       } else {
        $$0183$ph197248 = $37; //@line 13036
       }
      }
      $41 = $25 - $$0185$ph259 | 0; //@line 13043
      if (($32 & 255) <= ($34 & 255)) {
       break;
      }
      $131 = $25 + 1 | 0; //@line 13047
      if ($131 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216 = $41; //@line 13052
       $$0185$ph$lcssa = $$0185$ph259; //@line 13052
       break L6;
      } else {
       $$0175$ph$ph254 = $41; //@line 13050
       $$0183$ph197$ph253 = $25; //@line 13050
      }
     }
     $130 = $$0183$ph197248 + 2 | 0; //@line 13057
     if ($130 >>> 0 >= $$0187263 >>> 0) {
      $$0175$ph$ph$lcssa216 = 1; //@line 13062
      $$0185$ph$lcssa = $$0183$ph197248; //@line 13062
      break;
     } else {
      $$0183$ph260 = $$0183$ph197248 + 1 | 0; //@line 13060
      $$0185$ph259 = $$0183$ph197248; //@line 13060
     }
    }
    if ($23) {
     $$1184$ph239 = 0; //@line 13067
     $$1186$ph238 = -1; //@line 13067
     $133 = 1; //@line 13067
     while (1) {
      $$1176$ph$ph233 = 1; //@line 13069
      $$1184$ph193$ph232 = $$1184$ph239; //@line 13069
      $135 = $133; //@line 13069
      while (1) {
       $$1184$ph193227 = $$1184$ph193$ph232; //@line 13071
       $134 = $135; //@line 13071
       L25 : while (1) {
        $$1180222 = 1; //@line 13073
        $52 = $134; //@line 13073
        while (1) {
         $50 = HEAP8[$1 + ($$1180222 + $$1186$ph238) >> 0] | 0; //@line 13077
         $53 = HEAP8[$1 + $52 >> 0] | 0; //@line 13079
         if ($50 << 24 >> 24 != $53 << 24 >> 24) {
          break L25;
         }
         if (($$1180222 | 0) == ($$1176$ph$ph233 | 0)) {
          break;
         }
         $$1180222 = $$1180222 + 1 | 0; //@line 13085
         $45 = $$1180222 + $$1184$ph193227 | 0; //@line 13089
         if ($45 >>> 0 >= $$0187263 >>> 0) {
          $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13094
          $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13094
          $$0187219$ph325326 = $$0187263; //@line 13094
          $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 13094
          $$1186$ph$lcssa = $$1186$ph238; //@line 13094
          label = 26; //@line 13095
          break L1;
         } else {
          $52 = $45; //@line 13092
         }
        }
        $56 = $$1176$ph$ph233 + $$1184$ph193227 | 0; //@line 13099
        $134 = $56 + 1 | 0; //@line 13100
        if ($134 >>> 0 >= $$0187263 >>> 0) {
         $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13105
         $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13105
         $$0187219$ph325326 = $$0187263; //@line 13105
         $$1176$ph$ph$lcssa208 = $$1176$ph$ph233; //@line 13105
         $$1186$ph$lcssa = $$1186$ph238; //@line 13105
         label = 26; //@line 13106
         break L1;
        } else {
         $$1184$ph193227 = $56; //@line 13103
        }
       }
       $60 = $52 - $$1186$ph238 | 0; //@line 13111
       if (($50 & 255) >= ($53 & 255)) {
        break;
       }
       $135 = $52 + 1 | 0; //@line 13115
       if ($135 >>> 0 >= $$0187263 >>> 0) {
        $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13120
        $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13120
        $$0187219$ph325326 = $$0187263; //@line 13120
        $$1176$ph$ph$lcssa208 = $60; //@line 13120
        $$1186$ph$lcssa = $$1186$ph238; //@line 13120
        label = 26; //@line 13121
        break L1;
       } else {
        $$1176$ph$ph233 = $60; //@line 13118
        $$1184$ph193$ph232 = $52; //@line 13118
       }
      }
      $133 = $$1184$ph193227 + 2 | 0; //@line 13126
      if ($133 >>> 0 >= $$0187263 >>> 0) {
       $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13131
       $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13131
       $$0187219$ph325326 = $$0187263; //@line 13131
       $$1176$ph$ph$lcssa208 = 1; //@line 13131
       $$1186$ph$lcssa = $$1184$ph193227; //@line 13131
       label = 26; //@line 13132
       break;
      } else {
       $$1184$ph239 = $$1184$ph193227 + 1 | 0; //@line 13129
       $$1186$ph238 = $$1184$ph193227; //@line 13129
      }
     }
    } else {
     $$0175$ph$ph$lcssa216328 = $$0175$ph$ph$lcssa216; //@line 13137
     $$0185$ph$lcssa327 = $$0185$ph$lcssa; //@line 13137
     $$0187219$ph325326 = $$0187263; //@line 13137
     $$1176$ph$ph$lcssa208 = 1; //@line 13137
     $$1186$ph$lcssa = -1; //@line 13137
     label = 26; //@line 13138
    }
   } else {
    $$0175$ph$ph$lcssa216328 = 1; //@line 13141
    $$0185$ph$lcssa327 = -1; //@line 13141
    $$0187219$ph325326 = $$0187263; //@line 13141
    $$1176$ph$ph$lcssa208 = 1; //@line 13141
    $$1186$ph$lcssa = -1; //@line 13141
    label = 26; //@line 13142
   }
  }
 } while (0);
 L35 : do {
  if ((label | 0) == 26) {
   $68 = ($$1186$ph$lcssa + 1 | 0) >>> 0 > ($$0185$ph$lcssa327 + 1 | 0) >>> 0; //@line 13150
   $$1176$$0175 = $68 ? $$1176$ph$ph$lcssa208 : $$0175$ph$ph$lcssa216328; //@line 13151
   $$1186$$0185 = $68 ? $$1186$ph$lcssa : $$0185$ph$lcssa327; //@line 13152
   $70 = $$1186$$0185 + 1 | 0; //@line 13154
   if (!(_memcmp($1, $1 + $$1176$$0175 | 0, $70) | 0)) {
    $$0168 = $$0187219$ph325326 - $$1176$$0175 | 0; //@line 13159
    $$3178 = $$1176$$0175; //@line 13159
   } else {
    $74 = $$0187219$ph325326 - $$1186$$0185 + -1 | 0; //@line 13162
    $$0168 = 0; //@line 13166
    $$3178 = ($$1186$$0185 >>> 0 > $74 >>> 0 ? $$1186$$0185 : $74) + 1 | 0; //@line 13166
   }
   $78 = $$0187219$ph325326 | 63; //@line 13168
   $79 = $$0187219$ph325326 + -1 | 0; //@line 13169
   $80 = ($$0168 | 0) != 0; //@line 13170
   $81 = $$0187219$ph325326 - $$3178 | 0; //@line 13171
   $$0166 = $0; //@line 13172
   $$0169 = 0; //@line 13172
   $$0170 = $0; //@line 13172
   while (1) {
    $83 = $$0166; //@line 13175
    do {
     if (($$0170 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
      $86 = _memchr($$0170, 0, $78) | 0; //@line 13180
      if (!$86) {
       $$3173 = $$0170 + $78 | 0; //@line 13184
       break;
      } else {
       if (($86 - $83 | 0) >>> 0 < $$0187219$ph325326 >>> 0) {
        $$3 = 0; //@line 13191
        break L35;
       } else {
        $$3173 = $86; //@line 13194
        break;
       }
      }
     } else {
      $$3173 = $$0170; //@line 13199
     }
    } while (0);
    $93 = HEAP8[$$0166 + $79 >> 0] | 0; //@line 13203
    L49 : do {
     if (!(1 << ($93 & 31) & HEAP32[$2 + ((($93 & 255) >>> 5 & 255) << 2) >> 2])) {
      $$0169$be = 0; //@line 13215
      $$2181$sink = $$0187219$ph325326; //@line 13215
     } else {
      $105 = $$0187219$ph325326 - (HEAP32[$3 + (($93 & 255) << 2) >> 2] | 0) | 0; //@line 13220
      if ($105 | 0) {
       $$0169$be = 0; //@line 13228
       $$2181$sink = $80 & ($$0169 | 0) != 0 & $105 >>> 0 < $$3178 >>> 0 ? $81 : $105; //@line 13228
       break;
      }
      $111 = $70 >>> 0 > $$0169 >>> 0 ? $70 : $$0169; //@line 13232
      $113 = HEAP8[$1 + $111 >> 0] | 0; //@line 13234
      L54 : do {
       if (!($113 << 24 >> 24)) {
        $$4 = $70; //@line 13238
       } else {
        $$3182221 = $111; //@line 13240
        $$pr = $113; //@line 13240
        while (1) {
         if ($$pr << 24 >> 24 != (HEAP8[$$0166 + $$3182221 >> 0] | 0)) {
          break;
         }
         $118 = $$3182221 + 1 | 0; //@line 13248
         $$pr = HEAP8[$1 + $118 >> 0] | 0; //@line 13250
         if (!($$pr << 24 >> 24)) {
          $$4 = $70; //@line 13253
          break L54;
         } else {
          $$3182221 = $118; //@line 13256
         }
        }
        $$0169$be = 0; //@line 13260
        $$2181$sink = $$3182221 - $$1186$$0185 | 0; //@line 13260
        break L49;
       }
      } while (0);
      while (1) {
       if ($$4 >>> 0 <= $$0169 >>> 0) {
        $$3 = $$0166; //@line 13267
        break L35;
       }
       $$4 = $$4 + -1 | 0; //@line 13270
       if ((HEAP8[$1 + $$4 >> 0] | 0) != (HEAP8[$$0166 + $$4 >> 0] | 0)) {
        $$0169$be = $$0168; //@line 13279
        $$2181$sink = $$3178; //@line 13279
        break;
       }
      }
     }
    } while (0);
    $$0166 = $$0166 + $$2181$sink | 0; //@line 13286
    $$0169 = $$0169$be; //@line 13286
    $$0170 = $$3173; //@line 13286
   }
  }
 } while (0);
 STACKTOP = sp; //@line 13290
 return $$3 | 0; //@line 13290
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$011 = 0, $$013 = 0, $$112 = 0, $$byval_copy42 = 0, $104 = 0, $107 = 0, $112 = 0, $115 = 0, $13 = 0, $16 = 0, $17 = 0, $23 = 0, $24 = 0, $28 = 0, $29 = 0, $4 = 0, $44 = 0, $5 = 0, $54 = 0, $55 = 0, $58 = 0, $6 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $8 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $94 = 0, $97 = 0, $AsyncCtx = 0, $AsyncCtx12 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx24 = 0, $AsyncCtx27 = 0, $AsyncCtx31 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3058
 STACKTOP = STACKTOP + 224 | 0; //@line 3059
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 3059
 $$byval_copy42 = sp + 204 | 0; //@line 3060
 $4 = sp + 120 | 0; //@line 3061
 $5 = sp + 184 | 0; //@line 3062
 $6 = sp + 56 | 0; //@line 3063
 $7 = sp + 32 | 0; //@line 3064
 $8 = sp + 16 | 0; //@line 3065
 $9 = sp; //@line 3066
 HEAP32[$5 >> 2] = 0; //@line 3067
 HEAP32[$5 + 4 >> 2] = 0; //@line 3067
 HEAP32[$5 + 8 >> 2] = 0; //@line 3067
 HEAP32[$5 + 12 >> 2] = 0; //@line 3067
 HEAP32[$5 + 16 >> 2] = 0; //@line 3067
 HEAP32[$$byval_copy42 >> 2] = HEAP32[$5 >> 2]; //@line 3068
 HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 3068
 HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 3068
 HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 3068
 HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 3068
 __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy42, 0); //@line 3069
 if (!(HEAP8[$1 >> 0] | 0)) {
  $$013 = -3003; //@line 3073
  STACKTOP = sp; //@line 3074
  return $$013 | 0; //@line 3074
 }
 $13 = ($3 | 0) == 0; //@line 3077
 if (__ZN13SocketAddress14set_ip_addressEPKc($4, $1) | 0) {
  if (!$13) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($4) | 0) != ($3 | 0)) {
    $$013 = -3009; //@line 3083
    STACKTOP = sp; //@line 3084
    return $$013 | 0; //@line 3084
   }
  }
  $16 = $2 + 12 | 0; //@line 3087
  $17 = HEAP32[$16 >> 2] | 0; //@line 3088
  do {
   if (!$17) {
    $AsyncCtx31 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3092
    _mbed_assert_internal(3978, 3983, 1677); //@line 3093
    if (___async) {
     HEAP32[$AsyncCtx31 >> 2] = 91; //@line 3096
     HEAP32[$AsyncCtx31 + 4 >> 2] = $16; //@line 3098
     HEAP32[$AsyncCtx31 + 8 >> 2] = $2; //@line 3100
     HEAP32[$AsyncCtx31 + 12 >> 2] = $4; //@line 3102
     HEAP32[$AsyncCtx31 + 16 >> 2] = $4; //@line 3104
     sp = STACKTOP; //@line 3105
     STACKTOP = sp; //@line 3106
     return 0; //@line 3106
    } else {
     _emscripten_free_async_context($AsyncCtx31 | 0); //@line 3108
     $24 = HEAP32[$16 >> 2] | 0; //@line 3110
     break;
    }
   } else {
    $24 = $17; //@line 3114
   }
  } while (0);
  $23 = HEAP32[$24 >> 2] | 0; //@line 3117
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 3118
  FUNCTION_TABLE_viii[$23 & 0]($2, 0, $4); //@line 3119
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 92; //@line 3122
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3124
   sp = STACKTOP; //@line 3125
   STACKTOP = sp; //@line 3126
   return 0; //@line 3126
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3128
  $$013 = 0; //@line 3129
  STACKTOP = sp; //@line 3130
  return $$013 | 0; //@line 3130
 }
 if ($13) {
  HEAP32[$7 >> 2] = 0; //@line 3133
  HEAP32[$7 + 4 >> 2] = 0; //@line 3133
  HEAP32[$7 + 8 >> 2] = 0; //@line 3133
  HEAP32[$7 + 12 >> 2] = 0; //@line 3133
  HEAP32[$7 + 16 >> 2] = 0; //@line 3133
  HEAP32[$$byval_copy42 >> 2] = HEAP32[$7 >> 2]; //@line 3134
  HEAP32[$$byval_copy42 + 4 >> 2] = HEAP32[$7 + 4 >> 2]; //@line 3134
  HEAP32[$$byval_copy42 + 8 >> 2] = HEAP32[$7 + 8 >> 2]; //@line 3134
  HEAP32[$$byval_copy42 + 12 >> 2] = HEAP32[$7 + 12 >> 2]; //@line 3134
  HEAP32[$$byval_copy42 + 16 >> 2] = HEAP32[$7 + 16 >> 2]; //@line 3134
  __ZN13SocketAddressC2E10nsapi_addrt($6, $$byval_copy42, 0); //@line 3135
  $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3138
  $AsyncCtx2 = _emscripten_alloc_async_context(44, sp) | 0; //@line 3139
  $29 = FUNCTION_TABLE_ii[$28 & 31]($0) | 0; //@line 3140
  if (___async) {
   HEAP32[$AsyncCtx2 >> 2] = 93; //@line 3143
   HEAP32[$AsyncCtx2 + 4 >> 2] = $8; //@line 3145
   HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy42; //@line 3147
   HEAP32[$AsyncCtx2 + 12 >> 2] = $9; //@line 3149
   HEAP32[$AsyncCtx2 + 16 >> 2] = $2; //@line 3151
   HEAP32[$AsyncCtx2 + 20 >> 2] = $6; //@line 3153
   HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3155
   HEAP32[$AsyncCtx2 + 28 >> 2] = $0; //@line 3157
   HEAP32[$AsyncCtx2 + 32 >> 2] = $6; //@line 3159
   HEAP32[$AsyncCtx2 + 36 >> 2] = $4; //@line 3161
   HEAP32[$AsyncCtx2 + 40 >> 2] = $1; //@line 3163
   sp = STACKTOP; //@line 3164
   STACKTOP = sp; //@line 3165
   return 0; //@line 3165
  }
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3167
  if (__ZN13SocketAddress14set_ip_addressEPKc($6, $29) | 0) {
   $$011 = __ZNK13SocketAddress14get_ip_versionEv($6) | 0; //@line 3171
  } else {
   $$011 = 0; //@line 3173
  }
  $$112 = $$011; //@line 3175
 } else {
  $$112 = $3; //@line 3177
 }
 $44 = HEAP32[(HEAP32[$0 >> 2] | 0) + 96 >> 2] | 0; //@line 3181
 $AsyncCtx6 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3182
 FUNCTION_TABLE_vii[$44 & 7]($$byval_copy42, $0); //@line 3183
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 94; //@line 3186
  HEAP32[$AsyncCtx6 + 4 >> 2] = $8; //@line 3188
  HEAP32[$AsyncCtx6 + 8 >> 2] = $$byval_copy42; //@line 3190
  HEAP32[$AsyncCtx6 + 12 >> 2] = $9; //@line 3192
  HEAP32[$AsyncCtx6 + 16 >> 2] = $$byval_copy42; //@line 3194
  HEAP32[$AsyncCtx6 + 20 >> 2] = $2; //@line 3196
  HEAP32[$AsyncCtx6 + 24 >> 2] = $4; //@line 3198
  HEAP32[$AsyncCtx6 + 28 >> 2] = $0; //@line 3200
  HEAP32[$AsyncCtx6 + 32 >> 2] = $1; //@line 3202
  HEAP32[$AsyncCtx6 + 36 >> 2] = $$112; //@line 3204
  sp = STACKTOP; //@line 3205
  STACKTOP = sp; //@line 3206
  return 0; //@line 3206
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 3208
 $54 = $2 + 12 | 0; //@line 3209
 $55 = HEAP32[$54 >> 2] | 0; //@line 3210
 do {
  if (!$55) {
   $69 = 0; //@line 3214
  } else {
   $58 = HEAP32[$55 + 4 >> 2] | 0; //@line 3217
   $AsyncCtx9 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3218
   FUNCTION_TABLE_vii[$58 & 7]($8, $2); //@line 3219
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 95; //@line 3222
    HEAP32[$AsyncCtx9 + 4 >> 2] = $8; //@line 3224
    HEAP32[$AsyncCtx9 + 8 >> 2] = $$byval_copy42; //@line 3226
    HEAP32[$AsyncCtx9 + 12 >> 2] = $9; //@line 3228
    HEAP32[$AsyncCtx9 + 16 >> 2] = $$byval_copy42; //@line 3230
    HEAP32[$AsyncCtx9 + 20 >> 2] = $54; //@line 3232
    HEAP32[$AsyncCtx9 + 24 >> 2] = $4; //@line 3234
    HEAP32[$AsyncCtx9 + 28 >> 2] = $0; //@line 3236
    HEAP32[$AsyncCtx9 + 32 >> 2] = $1; //@line 3238
    HEAP32[$AsyncCtx9 + 36 >> 2] = $$112; //@line 3240
    sp = STACKTOP; //@line 3241
    STACKTOP = sp; //@line 3242
    return 0; //@line 3242
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 3244
    $69 = HEAP32[$54 >> 2] | 0; //@line 3246
    break;
   }
  }
 } while (0);
 $68 = $8 + 12 | 0; //@line 3251
 HEAP32[$68 >> 2] = $69; //@line 3252
 $70 = $$byval_copy42 + 12 | 0; //@line 3253
 $71 = HEAP32[$70 >> 2] | 0; //@line 3254
 do {
  if (!$71) {
   $85 = 0; //@line 3258
  } else {
   $74 = HEAP32[$71 + 4 >> 2] | 0; //@line 3261
   $AsyncCtx12 = _emscripten_alloc_async_context(40, sp) | 0; //@line 3262
   FUNCTION_TABLE_vii[$74 & 7]($9, $$byval_copy42); //@line 3263
   if (___async) {
    HEAP32[$AsyncCtx12 >> 2] = 96; //@line 3266
    HEAP32[$AsyncCtx12 + 4 >> 2] = $70; //@line 3268
    HEAP32[$AsyncCtx12 + 8 >> 2] = $4; //@line 3270
    HEAP32[$AsyncCtx12 + 12 >> 2] = $$byval_copy42; //@line 3272
    HEAP32[$AsyncCtx12 + 16 >> 2] = $8; //@line 3274
    HEAP32[$AsyncCtx12 + 20 >> 2] = $68; //@line 3276
    HEAP32[$AsyncCtx12 + 24 >> 2] = $9; //@line 3278
    HEAP32[$AsyncCtx12 + 28 >> 2] = $0; //@line 3280
    HEAP32[$AsyncCtx12 + 32 >> 2] = $1; //@line 3282
    HEAP32[$AsyncCtx12 + 36 >> 2] = $$112; //@line 3284
    sp = STACKTOP; //@line 3285
    STACKTOP = sp; //@line 3286
    return 0; //@line 3286
   } else {
    _emscripten_free_async_context($AsyncCtx12 | 0); //@line 3288
    $85 = HEAP32[$70 >> 2] | 0; //@line 3290
    break;
   }
  }
 } while (0);
 $84 = $9 + 12 | 0; //@line 3295
 HEAP32[$84 >> 2] = $85; //@line 3296
 $AsyncCtx27 = _emscripten_alloc_async_context(32, sp) | 0; //@line 3297
 $86 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $8, $9, $$112) | 0; //@line 3298
 if (___async) {
  HEAP32[$AsyncCtx27 >> 2] = 97; //@line 3301
  HEAP32[$AsyncCtx27 + 4 >> 2] = $84; //@line 3303
  HEAP32[$AsyncCtx27 + 8 >> 2] = $68; //@line 3305
  HEAP32[$AsyncCtx27 + 12 >> 2] = $9; //@line 3307
  HEAP32[$AsyncCtx27 + 16 >> 2] = $70; //@line 3309
  HEAP32[$AsyncCtx27 + 20 >> 2] = $8; //@line 3311
  HEAP32[$AsyncCtx27 + 24 >> 2] = $$byval_copy42; //@line 3313
  HEAP32[$AsyncCtx27 + 28 >> 2] = $4; //@line 3315
  sp = STACKTOP; //@line 3316
  STACKTOP = sp; //@line 3317
  return 0; //@line 3317
 }
 _emscripten_free_async_context($AsyncCtx27 | 0); //@line 3319
 $94 = HEAP32[$84 >> 2] | 0; //@line 3320
 do {
  if ($94 | 0) {
   $97 = HEAP32[$94 + 8 >> 2] | 0; //@line 3325
   $AsyncCtx16 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3326
   FUNCTION_TABLE_vi[$97 & 511]($9); //@line 3327
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 98; //@line 3330
    HEAP32[$AsyncCtx16 + 4 >> 2] = $68; //@line 3332
    HEAP32[$AsyncCtx16 + 8 >> 2] = $70; //@line 3334
    HEAP32[$AsyncCtx16 + 12 >> 2] = $8; //@line 3336
    HEAP32[$AsyncCtx16 + 16 >> 2] = $$byval_copy42; //@line 3338
    HEAP32[$AsyncCtx16 + 20 >> 2] = $86; //@line 3340
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 3342
    sp = STACKTOP; //@line 3343
    STACKTOP = sp; //@line 3344
    return 0; //@line 3344
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 3346
    break;
   }
  }
 } while (0);
 $104 = HEAP32[$68 >> 2] | 0; //@line 3351
 do {
  if ($104 | 0) {
   $107 = HEAP32[$104 + 8 >> 2] | 0; //@line 3356
   $AsyncCtx20 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3357
   FUNCTION_TABLE_vi[$107 & 511]($8); //@line 3358
   if (___async) {
    HEAP32[$AsyncCtx20 >> 2] = 99; //@line 3361
    HEAP32[$AsyncCtx20 + 4 >> 2] = $70; //@line 3363
    HEAP32[$AsyncCtx20 + 8 >> 2] = $$byval_copy42; //@line 3365
    HEAP32[$AsyncCtx20 + 12 >> 2] = $86; //@line 3367
    HEAP32[$AsyncCtx20 + 16 >> 2] = $4; //@line 3369
    sp = STACKTOP; //@line 3370
    STACKTOP = sp; //@line 3371
    return 0; //@line 3371
   } else {
    _emscripten_free_async_context($AsyncCtx20 | 0); //@line 3373
    break;
   }
  }
 } while (0);
 $112 = HEAP32[$70 >> 2] | 0; //@line 3378
 do {
  if ($112 | 0) {
   $115 = HEAP32[$112 + 8 >> 2] | 0; //@line 3383
   $AsyncCtx24 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3384
   FUNCTION_TABLE_vi[$115 & 511]($$byval_copy42); //@line 3385
   if (___async) {
    HEAP32[$AsyncCtx24 >> 2] = 100; //@line 3388
    HEAP32[$AsyncCtx24 + 4 >> 2] = $$byval_copy42; //@line 3390
    HEAP32[$AsyncCtx24 + 8 >> 2] = $86; //@line 3392
    HEAP32[$AsyncCtx24 + 12 >> 2] = $4; //@line 3394
    sp = STACKTOP; //@line 3395
    STACKTOP = sp; //@line 3396
    return 0; //@line 3396
   } else {
    _emscripten_free_async_context($AsyncCtx24 | 0); //@line 3398
    break;
   }
  }
 } while (0);
 $$013 = $86; //@line 3403
 STACKTOP = sp; //@line 3404
 return $$013 | 0; //@line 3404
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_102($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $49 = 0, $51 = 0, $53 = 0, $59 = 0, $6 = 0, $60 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6427
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6429
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6431
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6433
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6435
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6437
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6439
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6441
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6443
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6445
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6447
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6449
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6451
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6453
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 6455
 $30 = HEAP16[$0 + 60 >> 1] | 0; //@line 6457
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 6459
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6461
 $49 = $28 + 64 | 0; //@line 6462
 HEAP32[$49 >> 2] = $AsyncRetVal; //@line 6463
 $51 = __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($2, $30, $28 + 68 | 0, $AsyncRetVal, $32) | 0; //@line 6465
 if (($51 | 0) < 0) {
  $53 = HEAP32[$49 >> 2] | 0; //@line 6468
  if ($53 | 0) {
   __ZdaPv($53); //@line 6471
  }
  HEAP32[$49 >> 2] = 0; //@line 6473
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 6474
  $34 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 6475
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 6478
   $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 6479
   HEAP32[$35 >> 2] = $2; //@line 6480
   $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 6481
   HEAP32[$36 >> 2] = $4; //@line 6482
   $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 6483
   HEAP32[$37 >> 2] = $6; //@line 6484
   $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 6485
   HEAP32[$38 >> 2] = $8; //@line 6486
   $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 6487
   HEAP32[$39 >> 2] = $10; //@line 6488
   $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 6489
   HEAP32[$40 >> 2] = $12; //@line 6490
   $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 6491
   HEAP32[$41 >> 2] = $14; //@line 6492
   $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 6493
   HEAP32[$42 >> 2] = $16; //@line 6494
   $43 = $ReallocAsyncCtx6 + 36 | 0; //@line 6495
   HEAP32[$43 >> 2] = $18; //@line 6496
   $44 = $ReallocAsyncCtx6 + 40 | 0; //@line 6497
   HEAP32[$44 >> 2] = $20; //@line 6498
   $45 = $ReallocAsyncCtx6 + 44 | 0; //@line 6499
   HEAP32[$45 >> 2] = $22; //@line 6500
   $46 = $ReallocAsyncCtx6 + 48 | 0; //@line 6501
   HEAP32[$46 >> 2] = $24; //@line 6502
   $47 = $ReallocAsyncCtx6 + 52 | 0; //@line 6503
   HEAP32[$47 >> 2] = $26; //@line 6504
   sp = STACKTOP; //@line 6505
   return;
  }
  HEAP32[___async_retval >> 2] = $34; //@line 6509
  ___async_unwind = 0; //@line 6510
  HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 6511
  $35 = $ReallocAsyncCtx6 + 4 | 0; //@line 6512
  HEAP32[$35 >> 2] = $2; //@line 6513
  $36 = $ReallocAsyncCtx6 + 8 | 0; //@line 6514
  HEAP32[$36 >> 2] = $4; //@line 6515
  $37 = $ReallocAsyncCtx6 + 12 | 0; //@line 6516
  HEAP32[$37 >> 2] = $6; //@line 6517
  $38 = $ReallocAsyncCtx6 + 16 | 0; //@line 6518
  HEAP32[$38 >> 2] = $8; //@line 6519
  $39 = $ReallocAsyncCtx6 + 20 | 0; //@line 6520
  HEAP32[$39 >> 2] = $10; //@line 6521
  $40 = $ReallocAsyncCtx6 + 24 | 0; //@line 6522
  HEAP32[$40 >> 2] = $12; //@line 6523
  $41 = $ReallocAsyncCtx6 + 28 | 0; //@line 6524
  HEAP32[$41 >> 2] = $14; //@line 6525
  $42 = $ReallocAsyncCtx6 + 32 | 0; //@line 6526
  HEAP32[$42 >> 2] = $16; //@line 6527
  $43 = $ReallocAsyncCtx6 + 36 | 0; //@line 6528
  HEAP32[$43 >> 2] = $18; //@line 6529
  $44 = $ReallocAsyncCtx6 + 40 | 0; //@line 6530
  HEAP32[$44 >> 2] = $20; //@line 6531
  $45 = $ReallocAsyncCtx6 + 44 | 0; //@line 6532
  HEAP32[$45 >> 2] = $22; //@line 6533
  $46 = $ReallocAsyncCtx6 + 48 | 0; //@line 6534
  HEAP32[$46 >> 2] = $24; //@line 6535
  $47 = $ReallocAsyncCtx6 + 52 | 0; //@line 6536
  HEAP32[$47 >> 2] = $26; //@line 6537
  sp = STACKTOP; //@line 6538
  return;
 }
 HEAP8[$28 + 86 >> 0] = $51; //@line 6543
 HEAP32[$28 + 4 >> 2] = -3009; //@line 6545
 HEAP32[$28 + 76 >> 2] = 0; //@line 6547
 $59 = $28 + 44 | 0; //@line 6548
 $60 = HEAP32[$59 >> 2] | 0; //@line 6549
 if (!$60) {
  HEAP32[$10 >> 2] = 0; //@line 6552
  $80 = HEAP32[$28 >> 2] | 0; //@line 6553
  HEAP32[$12 >> 2] = 0; //@line 6554
  HEAP32[$14 >> 2] = 188; //@line 6555
  HEAP32[$16 >> 2] = $80; //@line 6556
  HEAP32[$18 >> 2] = 764; //@line 6557
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 6558
  __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 0, $22) | 0; //@line 6559
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 6562
   $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 6563
   HEAP32[$81 >> 2] = $2; //@line 6564
   $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 6565
   HEAP32[$82 >> 2] = $4; //@line 6566
   $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 6567
   HEAP32[$83 >> 2] = $6; //@line 6568
   $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 6569
   HEAP32[$84 >> 2] = $8; //@line 6570
   $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 6571
   HEAP32[$85 >> 2] = $10; //@line 6572
   $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 6573
   HEAP32[$86 >> 2] = $12; //@line 6574
   $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 6575
   HEAP32[$87 >> 2] = $14; //@line 6576
   $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 6577
   HEAP32[$88 >> 2] = $16; //@line 6578
   $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 6579
   HEAP32[$89 >> 2] = $18; //@line 6580
   $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 6581
   HEAP32[$90 >> 2] = $20; //@line 6582
   $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 6583
   HEAP32[$91 >> 2] = $22; //@line 6584
   $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 6585
   HEAP32[$92 >> 2] = $24; //@line 6586
   $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 6587
   HEAP32[$93 >> 2] = $26; //@line 6588
   sp = STACKTOP; //@line 6589
   return;
  }
  ___async_unwind = 0; //@line 6592
  HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 6593
  $81 = $ReallocAsyncCtx5 + 4 | 0; //@line 6594
  HEAP32[$81 >> 2] = $2; //@line 6595
  $82 = $ReallocAsyncCtx5 + 8 | 0; //@line 6596
  HEAP32[$82 >> 2] = $4; //@line 6597
  $83 = $ReallocAsyncCtx5 + 12 | 0; //@line 6598
  HEAP32[$83 >> 2] = $6; //@line 6599
  $84 = $ReallocAsyncCtx5 + 16 | 0; //@line 6600
  HEAP32[$84 >> 2] = $8; //@line 6601
  $85 = $ReallocAsyncCtx5 + 20 | 0; //@line 6602
  HEAP32[$85 >> 2] = $10; //@line 6603
  $86 = $ReallocAsyncCtx5 + 24 | 0; //@line 6604
  HEAP32[$86 >> 2] = $12; //@line 6605
  $87 = $ReallocAsyncCtx5 + 28 | 0; //@line 6606
  HEAP32[$87 >> 2] = $14; //@line 6607
  $88 = $ReallocAsyncCtx5 + 32 | 0; //@line 6608
  HEAP32[$88 >> 2] = $16; //@line 6609
  $89 = $ReallocAsyncCtx5 + 36 | 0; //@line 6610
  HEAP32[$89 >> 2] = $18; //@line 6611
  $90 = $ReallocAsyncCtx5 + 40 | 0; //@line 6612
  HEAP32[$90 >> 2] = $20; //@line 6613
  $91 = $ReallocAsyncCtx5 + 44 | 0; //@line 6614
  HEAP32[$91 >> 2] = $22; //@line 6615
  $92 = $ReallocAsyncCtx5 + 48 | 0; //@line 6616
  HEAP32[$92 >> 2] = $24; //@line 6617
  $93 = $ReallocAsyncCtx5 + 52 | 0; //@line 6618
  HEAP32[$93 >> 2] = $26; //@line 6619
  sp = STACKTOP; //@line 6620
  return;
 } else {
  $64 = HEAP32[$60 + 4 >> 2] | 0; //@line 6625
  $ReallocAsyncCtx = _emscripten_realloc_async_context(64) | 0; //@line 6626
  FUNCTION_TABLE_vii[$64 & 7]($4, $28 + 32 | 0); //@line 6627
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 258; //@line 6630
   $65 = $ReallocAsyncCtx + 4 | 0; //@line 6631
   HEAP32[$65 >> 2] = $2; //@line 6632
   $66 = $ReallocAsyncCtx + 8 | 0; //@line 6633
   HEAP32[$66 >> 2] = $4; //@line 6634
   $67 = $ReallocAsyncCtx + 12 | 0; //@line 6635
   HEAP32[$67 >> 2] = $6; //@line 6636
   $68 = $ReallocAsyncCtx + 16 | 0; //@line 6637
   HEAP32[$68 >> 2] = $8; //@line 6638
   $69 = $ReallocAsyncCtx + 20 | 0; //@line 6639
   HEAP32[$69 >> 2] = $10; //@line 6640
   $70 = $ReallocAsyncCtx + 24 | 0; //@line 6641
   HEAP32[$70 >> 2] = $28; //@line 6642
   $71 = $ReallocAsyncCtx + 28 | 0; //@line 6643
   HEAP32[$71 >> 2] = $12; //@line 6644
   $72 = $ReallocAsyncCtx + 32 | 0; //@line 6645
   HEAP32[$72 >> 2] = $14; //@line 6646
   $73 = $ReallocAsyncCtx + 36 | 0; //@line 6647
   HEAP32[$73 >> 2] = $16; //@line 6648
   $74 = $ReallocAsyncCtx + 40 | 0; //@line 6649
   HEAP32[$74 >> 2] = $18; //@line 6650
   $75 = $ReallocAsyncCtx + 44 | 0; //@line 6651
   HEAP32[$75 >> 2] = $20; //@line 6652
   $76 = $ReallocAsyncCtx + 48 | 0; //@line 6653
   HEAP32[$76 >> 2] = $22; //@line 6654
   $77 = $ReallocAsyncCtx + 52 | 0; //@line 6655
   HEAP32[$77 >> 2] = $24; //@line 6656
   $78 = $ReallocAsyncCtx + 56 | 0; //@line 6657
   HEAP32[$78 >> 2] = $59; //@line 6658
   $79 = $ReallocAsyncCtx + 60 | 0; //@line 6659
   HEAP32[$79 >> 2] = $26; //@line 6660
   sp = STACKTOP; //@line 6661
   return;
  }
  ___async_unwind = 0; //@line 6664
  HEAP32[$ReallocAsyncCtx >> 2] = 258; //@line 6665
  $65 = $ReallocAsyncCtx + 4 | 0; //@line 6666
  HEAP32[$65 >> 2] = $2; //@line 6667
  $66 = $ReallocAsyncCtx + 8 | 0; //@line 6668
  HEAP32[$66 >> 2] = $4; //@line 6669
  $67 = $ReallocAsyncCtx + 12 | 0; //@line 6670
  HEAP32[$67 >> 2] = $6; //@line 6671
  $68 = $ReallocAsyncCtx + 16 | 0; //@line 6672
  HEAP32[$68 >> 2] = $8; //@line 6673
  $69 = $ReallocAsyncCtx + 20 | 0; //@line 6674
  HEAP32[$69 >> 2] = $10; //@line 6675
  $70 = $ReallocAsyncCtx + 24 | 0; //@line 6676
  HEAP32[$70 >> 2] = $28; //@line 6677
  $71 = $ReallocAsyncCtx + 28 | 0; //@line 6678
  HEAP32[$71 >> 2] = $12; //@line 6679
  $72 = $ReallocAsyncCtx + 32 | 0; //@line 6680
  HEAP32[$72 >> 2] = $14; //@line 6681
  $73 = $ReallocAsyncCtx + 36 | 0; //@line 6682
  HEAP32[$73 >> 2] = $16; //@line 6683
  $74 = $ReallocAsyncCtx + 40 | 0; //@line 6684
  HEAP32[$74 >> 2] = $18; //@line 6685
  $75 = $ReallocAsyncCtx + 44 | 0; //@line 6686
  HEAP32[$75 >> 2] = $20; //@line 6687
  $76 = $ReallocAsyncCtx + 48 | 0; //@line 6688
  HEAP32[$76 >> 2] = $22; //@line 6689
  $77 = $ReallocAsyncCtx + 52 | 0; //@line 6690
  HEAP32[$77 >> 2] = $24; //@line 6691
  $78 = $ReallocAsyncCtx + 56 | 0; //@line 6692
  HEAP32[$78 >> 2] = $59; //@line 6693
  $79 = $ReallocAsyncCtx + 60 | 0; //@line 6694
  HEAP32[$79 >> 2] = $26; //@line 6695
  sp = STACKTOP; //@line 6696
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_73($0) {
 $0 = $0 | 0;
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $10 = 0, $105 = 0, $108 = 0, $110 = 0, $118 = 0, $12 = 0, $121 = 0, $123 = 0, $131 = 0, $134 = 0, $136 = 0, $14 = 0, $149 = 0, $150 = 0, $151 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $30 = 0, $31 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $48 = 0, $55 = 0, $57 = 0, $58 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $74 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $92 = 0, $93 = 0, $95 = 0, $97 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3177
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3179
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3181
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3183
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3185
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3187
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3189
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3191
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3193
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3195
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3197
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3199
 HEAP32[HEAP32[$0 + 48 >> 2] >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] >> 2]; //@line 3205
 HEAP32[$2 + 8 >> 2] = $4; //@line 3207
 HEAP32[$2 + 48 >> 2] = $20; //@line 3209
 HEAP32[$2 + 52 >> 2] = $22; //@line 3211
 $30 = $2 + 56 | 0; //@line 3212
 HEAP32[$30 >> 2] = 0; //@line 3213
 $31 = $2 + 60 | 0; //@line 3214
 HEAP32[$31 >> 2] = 0; //@line 3215
 HEAP32[$2 + 64 >> 2] = 0; //@line 3217
 HEAP8[$2 + 82 >> 0] = 0; //@line 3219
 HEAP8[$2 + 83 >> 0] = 1; //@line 3221
 HEAP8[$2 + 84 >> 0] = 3; //@line 3223
 HEAP8[$2 + 85 >> 0] = 0; //@line 3225
 HEAP16[$2 + 80 >> 1] = 0; //@line 3227
 HEAP32[$2 + 76 >> 2] = 0; //@line 3229
 $39 = $2 + 72 | 0; //@line 3230
 HEAP32[$39 >> 2] = 15500; //@line 3231
 HEAP8[$2 + 86 >> 0] = 0; //@line 3233
 HEAP32[$2 + 88 >> 2] = 0; //@line 3235
 $42 = HEAP32[187] | 0; //@line 3236
 HEAP32[187] = $42 + 1; //@line 3238
 HEAP32[$2 >> 2] = ($42 | 0) > 32767 ? 1 : $42; //@line 3241
 $45 = HEAP32[1949] | 0; //@line 3242
 if (!$45) {
  $$1 = 0; //@line 3245
  $95 = 0; //@line 3245
 } else {
  $48 = HEAP32[$45 + 56 >> 2] | 0; //@line 3248
  if (!$48) {
   $$1 = 1; //@line 3251
   $95 = 0; //@line 3251
  } else {
   if ((HEAP32[$45 + 8 >> 2] | 0) == ($4 | 0)) {
    HEAP32[$30 >> 2] = $48; //@line 3257
    HEAP32[$31 >> 2] = HEAP32[$45 + 60 >> 2]; //@line 3260
    $$1 = 1; //@line 3261
    $95 = $48; //@line 3261
   } else {
    $$1 = 1; //@line 3263
    $95 = 0; //@line 3263
   }
  }
 }
 $55 = HEAP32[1950] | 0; //@line 3267
 if (!$55) {
  $$1$1 = $$1; //@line 3270
  $108 = $95; //@line 3270
 } else {
  if (!$95) {
   $97 = HEAP32[$55 + 56 >> 2] | 0; //@line 3275
   if (!$97) {
    $149 = 0; //@line 3278
   } else {
    if ((HEAP32[$55 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$30 >> 2] = $97; //@line 3284
     HEAP32[$31 >> 2] = HEAP32[$55 + 60 >> 2]; //@line 3287
     $149 = $97; //@line 3288
    } else {
     $149 = 0; //@line 3290
    }
   }
  } else {
   $149 = $95; //@line 3294
  }
  $$1$1 = $$1 + 1 | 0; //@line 3297
  $108 = $149; //@line 3297
 }
 $105 = HEAP32[1951] | 0; //@line 3299
 if (!$105) {
  $$1$2 = $$1$1; //@line 3302
  $121 = $108; //@line 3302
 } else {
  if (!$108) {
   $110 = HEAP32[$105 + 56 >> 2] | 0; //@line 3307
   if (!$110) {
    $150 = 0; //@line 3310
   } else {
    if ((HEAP32[$105 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$30 >> 2] = $110; //@line 3316
     HEAP32[$31 >> 2] = HEAP32[$105 + 60 >> 2]; //@line 3319
     $150 = $110; //@line 3320
    } else {
     $150 = 0; //@line 3322
    }
   }
  } else {
   $150 = $108; //@line 3326
  }
  $$1$2 = $$1$1 + 1 | 0; //@line 3329
  $121 = $150; //@line 3329
 }
 $118 = HEAP32[1952] | 0; //@line 3331
 if (!$118) {
  $$1$3 = $$1$2; //@line 3334
  $134 = $121; //@line 3334
 } else {
  if (!$121) {
   $123 = HEAP32[$118 + 56 >> 2] | 0; //@line 3339
   if (!$123) {
    $151 = 0; //@line 3342
   } else {
    if ((HEAP32[$118 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$30 >> 2] = $123; //@line 3348
     HEAP32[$31 >> 2] = HEAP32[$118 + 60 >> 2]; //@line 3351
     $151 = $123; //@line 3352
    } else {
     $151 = 0; //@line 3354
    }
   }
  } else {
   $151 = $121; //@line 3358
  }
  $$1$3 = $$1$2 + 1 | 0; //@line 3361
  $134 = $151; //@line 3361
 }
 $131 = HEAP32[1953] | 0; //@line 3363
 if (!$131) {
  $$1$4 = $$1$3; //@line 3366
 } else {
  if (!$134) {
   $136 = HEAP32[$131 + 56 >> 2] | 0; //@line 3371
   if ($136 | 0) {
    if ((HEAP32[$131 + 8 >> 2] | 0) == ($4 | 0)) {
     HEAP32[$30 >> 2] = $136; //@line 3378
     HEAP32[$31 >> 2] = HEAP32[$131 + 60 >> 2]; //@line 3381
    }
   }
  }
  $$1$4 = $$1$3 + 1 | 0; //@line 3386
 }
 HEAP32[7796 + ($8 << 2) >> 2] = $2; //@line 3389
 HEAP32[$39 >> 2] = ($$1$4 * 500 | 0) + 15500; //@line 3392
 if (HEAP8[8676] | 0) {
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 3396
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 3397
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3400
   $92 = $ReallocAsyncCtx13 + 4 | 0; //@line 3401
   HEAP32[$92 >> 2] = $2; //@line 3402
   $93 = $ReallocAsyncCtx13 + 8 | 0; //@line 3403
   HEAP32[$93 >> 2] = $16; //@line 3404
   sp = STACKTOP; //@line 3405
   return;
  }
  ___async_unwind = 0; //@line 3408
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3409
  $92 = $ReallocAsyncCtx13 + 4 | 0; //@line 3410
  HEAP32[$92 >> 2] = $2; //@line 3411
  $93 = $ReallocAsyncCtx13 + 8 | 0; //@line 3412
  HEAP32[$93 >> 2] = $16; //@line 3413
  sp = STACKTOP; //@line 3414
  return;
 }
 $57 = $2 + 44 | 0; //@line 3417
 $58 = HEAP32[$57 >> 2] | 0; //@line 3418
 if (!$58) {
  $72 = $14 + 12 | 0; //@line 3421
  HEAP32[$72 >> 2] = 0; //@line 3422
  $74 = $18 + 4 | 0; //@line 3424
  HEAP32[$74 >> 2] = 0; //@line 3426
  HEAP32[$74 + 4 >> 2] = 0; //@line 3429
  HEAP32[$18 >> 2] = 3; //@line 3430
  $78 = $18 + 12 | 0; //@line 3431
  HEAP32[$78 >> 2] = 752; //@line 3432
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 3433
  $79 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($14, 100, $18) | 0; //@line 3434
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 3437
   $80 = $ReallocAsyncCtx14 + 4 | 0; //@line 3438
   HEAP32[$80 >> 2] = $2; //@line 3439
   $81 = $ReallocAsyncCtx14 + 8 | 0; //@line 3440
   HEAP32[$81 >> 2] = $6; //@line 3441
   $82 = $ReallocAsyncCtx14 + 12 | 0; //@line 3442
   HEAP32[$82 >> 2] = $16; //@line 3443
   $83 = $ReallocAsyncCtx14 + 16 | 0; //@line 3444
   HEAP32[$83 >> 2] = $10; //@line 3445
   $84 = $ReallocAsyncCtx14 + 20 | 0; //@line 3446
   HEAP32[$84 >> 2] = $57; //@line 3447
   $85 = $ReallocAsyncCtx14 + 24 | 0; //@line 3448
   HEAP32[$85 >> 2] = $12; //@line 3449
   $86 = $ReallocAsyncCtx14 + 28 | 0; //@line 3450
   HEAP32[$86 >> 2] = $2; //@line 3451
   $87 = $ReallocAsyncCtx14 + 32 | 0; //@line 3452
   HEAP32[$87 >> 2] = $14; //@line 3453
   $88 = $ReallocAsyncCtx14 + 36 | 0; //@line 3454
   HEAP32[$88 >> 2] = $72; //@line 3455
   $89 = $ReallocAsyncCtx14 + 40 | 0; //@line 3456
   HEAP32[$89 >> 2] = $18; //@line 3457
   $90 = $ReallocAsyncCtx14 + 44 | 0; //@line 3458
   HEAP32[$90 >> 2] = $78; //@line 3459
   sp = STACKTOP; //@line 3460
   return;
  }
  HEAP32[___async_retval >> 2] = $79; //@line 3464
  ___async_unwind = 0; //@line 3465
  HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 3466
  $80 = $ReallocAsyncCtx14 + 4 | 0; //@line 3467
  HEAP32[$80 >> 2] = $2; //@line 3468
  $81 = $ReallocAsyncCtx14 + 8 | 0; //@line 3469
  HEAP32[$81 >> 2] = $6; //@line 3470
  $82 = $ReallocAsyncCtx14 + 12 | 0; //@line 3471
  HEAP32[$82 >> 2] = $16; //@line 3472
  $83 = $ReallocAsyncCtx14 + 16 | 0; //@line 3473
  HEAP32[$83 >> 2] = $10; //@line 3474
  $84 = $ReallocAsyncCtx14 + 20 | 0; //@line 3475
  HEAP32[$84 >> 2] = $57; //@line 3476
  $85 = $ReallocAsyncCtx14 + 24 | 0; //@line 3477
  HEAP32[$85 >> 2] = $12; //@line 3478
  $86 = $ReallocAsyncCtx14 + 28 | 0; //@line 3479
  HEAP32[$86 >> 2] = $2; //@line 3480
  $87 = $ReallocAsyncCtx14 + 32 | 0; //@line 3481
  HEAP32[$87 >> 2] = $14; //@line 3482
  $88 = $ReallocAsyncCtx14 + 36 | 0; //@line 3483
  HEAP32[$88 >> 2] = $72; //@line 3484
  $89 = $ReallocAsyncCtx14 + 40 | 0; //@line 3485
  HEAP32[$89 >> 2] = $18; //@line 3486
  $90 = $ReallocAsyncCtx14 + 44 | 0; //@line 3487
  HEAP32[$90 >> 2] = $78; //@line 3488
  sp = STACKTOP; //@line 3489
  return;
 } else {
  $61 = HEAP32[$58 + 4 >> 2] | 0; //@line 3493
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 3494
  FUNCTION_TABLE_vii[$61 & 7]($14, $10); //@line 3495
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 3498
   $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 3499
   HEAP32[$62 >> 2] = $2; //@line 3500
   $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 3501
   HEAP32[$63 >> 2] = $6; //@line 3502
   $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 3503
   HEAP32[$64 >> 2] = $10; //@line 3504
   $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 3505
   HEAP32[$65 >> 2] = $57; //@line 3506
   $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 3507
   HEAP32[$66 >> 2] = $12; //@line 3508
   $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 3509
   HEAP32[$67 >> 2] = $14; //@line 3510
   $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 3511
   HEAP32[$68 >> 2] = $16; //@line 3512
   $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 3513
   HEAP32[$69 >> 2] = $18; //@line 3514
   $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 3515
   HEAP32[$70 >> 2] = $2; //@line 3516
   $71 = $ReallocAsyncCtx6 + 40 | 0; //@line 3517
   HEAP32[$71 >> 2] = $57; //@line 3518
   sp = STACKTOP; //@line 3519
   return;
  }
  ___async_unwind = 0; //@line 3522
  HEAP32[$ReallocAsyncCtx6 >> 2] = 178; //@line 3523
  $62 = $ReallocAsyncCtx6 + 4 | 0; //@line 3524
  HEAP32[$62 >> 2] = $2; //@line 3525
  $63 = $ReallocAsyncCtx6 + 8 | 0; //@line 3526
  HEAP32[$63 >> 2] = $6; //@line 3527
  $64 = $ReallocAsyncCtx6 + 12 | 0; //@line 3528
  HEAP32[$64 >> 2] = $10; //@line 3529
  $65 = $ReallocAsyncCtx6 + 16 | 0; //@line 3530
  HEAP32[$65 >> 2] = $57; //@line 3531
  $66 = $ReallocAsyncCtx6 + 20 | 0; //@line 3532
  HEAP32[$66 >> 2] = $12; //@line 3533
  $67 = $ReallocAsyncCtx6 + 24 | 0; //@line 3534
  HEAP32[$67 >> 2] = $14; //@line 3535
  $68 = $ReallocAsyncCtx6 + 28 | 0; //@line 3536
  HEAP32[$68 >> 2] = $16; //@line 3537
  $69 = $ReallocAsyncCtx6 + 32 | 0; //@line 3538
  HEAP32[$69 >> 2] = $18; //@line 3539
  $70 = $ReallocAsyncCtx6 + 36 | 0; //@line 3540
  HEAP32[$70 >> 2] = $2; //@line 3541
  $71 = $ReallocAsyncCtx6 + 40 | 0; //@line 3542
  HEAP32[$71 >> 2] = $57; //@line 3543
  sp = STACKTOP; //@line 3544
  return;
 }
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_206($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $4 = 0, $41 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $73 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 16283
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16285
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16287
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16289
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16291
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16293
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16295
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16297
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16299
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16301
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16303
 if ($AsyncRetVal | 0) {
  $23 = HEAP32[(HEAP32[$4 >> 2] | 0) + 4 >> 2] | 0; //@line 16308
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(16) | 0; //@line 16309
  FUNCTION_TABLE_vi[$23 & 511]($18); //@line 16310
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 219; //@line 16313
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 16314
   HEAP32[$24 >> 2] = $6; //@line 16315
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 16316
   HEAP32[$25 >> 2] = $16; //@line 16317
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 16318
   HEAP32[$26 >> 2] = $AsyncRetVal; //@line 16319
   sp = STACKTOP; //@line 16320
   return;
  }
  ___async_unwind = 0; //@line 16323
  HEAP32[$ReallocAsyncCtx4 >> 2] = 219; //@line 16324
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 16325
  HEAP32[$24 >> 2] = $6; //@line 16326
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 16327
  HEAP32[$25 >> 2] = $16; //@line 16328
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 16329
  HEAP32[$26 >> 2] = $AsyncRetVal; //@line 16330
  sp = STACKTOP; //@line 16331
  return;
 }
 __ZN6Socket11set_timeoutEi($8, 0); //@line 16334
 $27 = HEAP32[$10 >> 2] | 0; //@line 16335
 $29 = $27; //@line 16337
 if (!$27) {
  $ReallocAsyncCtx11 = _emscripten_realloc_async_context(32) | 0; //@line 16339
  $30 = __Znwj(20) | 0; //@line 16340
  if (___async) {
   HEAP32[$ReallocAsyncCtx11 >> 2] = 225; //@line 16343
   $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 16344
   HEAP32[$31 >> 2] = $2; //@line 16345
   $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 16346
   HEAP32[$32 >> 2] = $4; //@line 16347
   $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 16348
   HEAP32[$33 >> 2] = $6; //@line 16349
   $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 16350
   HEAP32[$34 >> 2] = $10; //@line 16351
   $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 16352
   HEAP32[$35 >> 2] = $12; //@line 16353
   $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 16354
   HEAP32[$36 >> 2] = $14; //@line 16355
   $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 16356
   HEAP32[$37 >> 2] = $8; //@line 16357
   sp = STACKTOP; //@line 16358
   return;
  }
  HEAP32[___async_retval >> 2] = $30; //@line 16362
  ___async_unwind = 0; //@line 16363
  HEAP32[$ReallocAsyncCtx11 >> 2] = 225; //@line 16364
  $31 = $ReallocAsyncCtx11 + 4 | 0; //@line 16365
  HEAP32[$31 >> 2] = $2; //@line 16366
  $32 = $ReallocAsyncCtx11 + 8 | 0; //@line 16367
  HEAP32[$32 >> 2] = $4; //@line 16368
  $33 = $ReallocAsyncCtx11 + 12 | 0; //@line 16369
  HEAP32[$33 >> 2] = $6; //@line 16370
  $34 = $ReallocAsyncCtx11 + 16 | 0; //@line 16371
  HEAP32[$34 >> 2] = $10; //@line 16372
  $35 = $ReallocAsyncCtx11 + 20 | 0; //@line 16373
  HEAP32[$35 >> 2] = $12; //@line 16374
  $36 = $ReallocAsyncCtx11 + 24 | 0; //@line 16375
  HEAP32[$36 >> 2] = $14; //@line 16376
  $37 = $ReallocAsyncCtx11 + 28 | 0; //@line 16377
  HEAP32[$37 >> 2] = $8; //@line 16378
  sp = STACKTOP; //@line 16379
  return;
 }
 $39 = $6 + 32 | 0; //@line 16382
 do {
  if (($27 | 0) == ($39 | 0)) {
   $73 = $27; //@line 16386
   $75 = $29; //@line 16386
  } else {
   $41 = $27 + 12 | 0; //@line 16388
   $42 = HEAP32[$41 >> 2] | 0; //@line 16389
   if ($42 | 0) {
    $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 16393
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(44) | 0; //@line 16394
    FUNCTION_TABLE_vi[$45 & 511]($27); //@line 16395
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 226; //@line 16398
     $46 = $ReallocAsyncCtx8 + 4 | 0; //@line 16399
     HEAP32[$46 >> 2] = $14; //@line 16400
     $47 = $ReallocAsyncCtx8 + 8 | 0; //@line 16401
     HEAP32[$47 >> 2] = $2; //@line 16402
     $48 = $ReallocAsyncCtx8 + 12 | 0; //@line 16403
     HEAP32[$48 >> 2] = $4; //@line 16404
     $49 = $ReallocAsyncCtx8 + 16 | 0; //@line 16405
     HEAP32[$49 >> 2] = $6; //@line 16406
     $50 = $ReallocAsyncCtx8 + 20 | 0; //@line 16407
     HEAP32[$50 >> 2] = $27; //@line 16408
     $51 = $ReallocAsyncCtx8 + 24 | 0; //@line 16409
     HEAP32[$51 >> 2] = $39; //@line 16410
     $52 = $ReallocAsyncCtx8 + 28 | 0; //@line 16411
     HEAP32[$52 >> 2] = $12; //@line 16412
     $53 = $ReallocAsyncCtx8 + 32 | 0; //@line 16413
     HEAP32[$53 >> 2] = $8; //@line 16414
     $54 = $ReallocAsyncCtx8 + 36 | 0; //@line 16415
     HEAP32[$54 >> 2] = $41; //@line 16416
     $55 = $ReallocAsyncCtx8 + 40 | 0; //@line 16417
     HEAP32[$55 >> 2] = $10; //@line 16418
     sp = STACKTOP; //@line 16419
     return;
    }
    ___async_unwind = 0; //@line 16422
    HEAP32[$ReallocAsyncCtx8 >> 2] = 226; //@line 16423
    $46 = $ReallocAsyncCtx8 + 4 | 0; //@line 16424
    HEAP32[$46 >> 2] = $14; //@line 16425
    $47 = $ReallocAsyncCtx8 + 8 | 0; //@line 16426
    HEAP32[$47 >> 2] = $2; //@line 16427
    $48 = $ReallocAsyncCtx8 + 12 | 0; //@line 16428
    HEAP32[$48 >> 2] = $4; //@line 16429
    $49 = $ReallocAsyncCtx8 + 16 | 0; //@line 16430
    HEAP32[$49 >> 2] = $6; //@line 16431
    $50 = $ReallocAsyncCtx8 + 20 | 0; //@line 16432
    HEAP32[$50 >> 2] = $27; //@line 16433
    $51 = $ReallocAsyncCtx8 + 24 | 0; //@line 16434
    HEAP32[$51 >> 2] = $39; //@line 16435
    $52 = $ReallocAsyncCtx8 + 28 | 0; //@line 16436
    HEAP32[$52 >> 2] = $12; //@line 16437
    $53 = $ReallocAsyncCtx8 + 32 | 0; //@line 16438
    HEAP32[$53 >> 2] = $8; //@line 16439
    $54 = $ReallocAsyncCtx8 + 36 | 0; //@line 16440
    HEAP32[$54 >> 2] = $41; //@line 16441
    $55 = $ReallocAsyncCtx8 + 40 | 0; //@line 16442
    HEAP32[$55 >> 2] = $10; //@line 16443
    sp = STACKTOP; //@line 16444
    return;
   }
   $56 = $6 + 44 | 0; //@line 16447
   $57 = HEAP32[$56 >> 2] | 0; //@line 16448
   if (!$57) {
    HEAP32[$41 >> 2] = 0; //@line 16451
    $$pre85 = HEAP32[$10 >> 2] | 0; //@line 16452
    $73 = $$pre85; //@line 16454
    $75 = $$pre85; //@line 16454
    break;
   }
   $60 = HEAP32[$57 + 4 >> 2] | 0; //@line 16458
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 16459
   FUNCTION_TABLE_vii[$60 & 7]($27, $39); //@line 16460
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 16463
    $61 = $ReallocAsyncCtx9 + 4 | 0; //@line 16464
    HEAP32[$61 >> 2] = $56; //@line 16465
    $62 = $ReallocAsyncCtx9 + 8 | 0; //@line 16466
    HEAP32[$62 >> 2] = $41; //@line 16467
    $63 = $ReallocAsyncCtx9 + 12 | 0; //@line 16468
    HEAP32[$63 >> 2] = $10; //@line 16469
    $64 = $ReallocAsyncCtx9 + 16 | 0; //@line 16470
    HEAP32[$64 >> 2] = $12; //@line 16471
    $65 = $ReallocAsyncCtx9 + 20 | 0; //@line 16472
    HEAP32[$65 >> 2] = $14; //@line 16473
    $66 = $ReallocAsyncCtx9 + 24 | 0; //@line 16474
    HEAP32[$66 >> 2] = $8; //@line 16475
    $67 = $ReallocAsyncCtx9 + 28 | 0; //@line 16476
    HEAP32[$67 >> 2] = $2; //@line 16477
    $68 = $ReallocAsyncCtx9 + 32 | 0; //@line 16478
    HEAP32[$68 >> 2] = $4; //@line 16479
    $69 = $ReallocAsyncCtx9 + 36 | 0; //@line 16480
    HEAP32[$69 >> 2] = $6; //@line 16481
    sp = STACKTOP; //@line 16482
    return;
   }
   ___async_unwind = 0; //@line 16485
   HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 16486
   $61 = $ReallocAsyncCtx9 + 4 | 0; //@line 16487
   HEAP32[$61 >> 2] = $56; //@line 16488
   $62 = $ReallocAsyncCtx9 + 8 | 0; //@line 16489
   HEAP32[$62 >> 2] = $41; //@line 16490
   $63 = $ReallocAsyncCtx9 + 12 | 0; //@line 16491
   HEAP32[$63 >> 2] = $10; //@line 16492
   $64 = $ReallocAsyncCtx9 + 16 | 0; //@line 16493
   HEAP32[$64 >> 2] = $12; //@line 16494
   $65 = $ReallocAsyncCtx9 + 20 | 0; //@line 16495
   HEAP32[$65 >> 2] = $14; //@line 16496
   $66 = $ReallocAsyncCtx9 + 24 | 0; //@line 16497
   HEAP32[$66 >> 2] = $8; //@line 16498
   $67 = $ReallocAsyncCtx9 + 28 | 0; //@line 16499
   HEAP32[$67 >> 2] = $2; //@line 16500
   $68 = $ReallocAsyncCtx9 + 32 | 0; //@line 16501
   HEAP32[$68 >> 2] = $4; //@line 16502
   $69 = $ReallocAsyncCtx9 + 36 | 0; //@line 16503
   HEAP32[$69 >> 2] = $6; //@line 16504
   sp = STACKTOP; //@line 16505
   return;
  }
 } while (0);
 HEAP32[$73 + 16 >> 2] = HEAP32[$12 >> 2]; //@line 16511
 HEAP32[$14 + 8 >> 2] = 0; //@line 16513
 HEAP32[$14 >> 2] = 228; //@line 16514
 HEAP32[$14 + 4 >> 2] = $75; //@line 16516
 $76 = $14 + 12 | 0; //@line 16517
 HEAP32[$76 >> 2] = 764; //@line 16518
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 16519
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($8, $14); //@line 16520
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 16523
  $77 = $ReallocAsyncCtx18 + 4 | 0; //@line 16524
  HEAP32[$77 >> 2] = $76; //@line 16525
  $78 = $ReallocAsyncCtx18 + 8 | 0; //@line 16526
  HEAP32[$78 >> 2] = $2; //@line 16527
  $79 = $ReallocAsyncCtx18 + 12 | 0; //@line 16528
  HEAP32[$79 >> 2] = $4; //@line 16529
  $80 = $ReallocAsyncCtx18 + 16 | 0; //@line 16530
  HEAP32[$80 >> 2] = $14; //@line 16531
  $81 = $ReallocAsyncCtx18 + 20 | 0; //@line 16532
  HEAP32[$81 >> 2] = $6; //@line 16533
  sp = STACKTOP; //@line 16534
  return;
 }
 ___async_unwind = 0; //@line 16537
 HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 16538
 $77 = $ReallocAsyncCtx18 + 4 | 0; //@line 16539
 HEAP32[$77 >> 2] = $76; //@line 16540
 $78 = $ReallocAsyncCtx18 + 8 | 0; //@line 16541
 HEAP32[$78 >> 2] = $2; //@line 16542
 $79 = $ReallocAsyncCtx18 + 12 | 0; //@line 16543
 HEAP32[$79 >> 2] = $4; //@line 16544
 $80 = $ReallocAsyncCtx18 + 16 | 0; //@line 16545
 HEAP32[$80 >> 2] = $14; //@line 16546
 $81 = $ReallocAsyncCtx18 + 20 | 0; //@line 16547
 HEAP32[$81 >> 2] = $6; //@line 16548
 sp = STACKTOP; //@line 16549
 return;
}
function __ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$2 = 0, $$2$1 = 0, $$2$us = 0, $$2$us$1 = 0, $$pre = 0, $$pre33 = 0, $$pre34 = 0, $$pre35 = 0, $$pre36 = 0, $$pre37 = 0, $10 = 0, $101 = 0, $103 = 0, $104 = 0, $106 = 0, $111 = 0, $118 = 0, $12 = 0, $122 = 0, $128 = 0, $129 = 0, $131 = 0, $132 = 0, $134 = 0, $139 = 0, $152 = 0, $157 = 0, $160 = 0, $163 = 0, $165 = 0, $166 = 0, $168 = 0, $17 = 0, $173 = 0, $186 = 0, $191 = 0, $194 = 0, $24 = 0, $28 = 0, $34 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $47 = 0, $54 = 0, $57 = 0, $6 = 0, $65 = 0, $7 = 0, $71 = 0, $73 = 0, $74 = 0, $76 = 0, $81 = 0, $88 = 0, $9 = 0, $92 = 0, $98 = 0, label = 0;
 $4 = ($2 | 0) == 0; //@line 6392
 $6 = (HEAP32[1946] | 0) == 0; //@line 6394
 if (!$1) {
  do {
   if ($6) {
    $$2$us = -3006; //@line 6398
   } else {
    $7 = _emscripten_asm_const_i(8) | 0; //@line 6400
    $9 = (($7 | 0) < 0) << 31 >> 31; //@line 6402
    $10 = HEAP32[1946] | 0; //@line 6403
    $12 = $10 + 24 | 0; //@line 6405
    $17 = HEAP32[$12 + 4 >> 2] | 0; //@line 6410
    $24 = HEAP32[$10 + 20 >> 2] | 0; //@line 6417
    if ($17 >>> 0 < $9 >>> 0 | (($17 | 0) == ($9 | 0) ? (HEAP32[$12 >> 2] | 0) >>> 0 < $7 >>> 0 : 0)) {
     if (!$24) {
      $34 = $10; //@line 6421
      label = 11; //@line 6422
     } else {
      __ZdlPv($24); //@line 6424
      $$pre35 = HEAP32[1946] | 0; //@line 6425
      if ($$pre35 | 0) {
       $34 = $$pre35; //@line 6428
       label = 11; //@line 6429
      }
     }
     if ((label | 0) == 11) {
      __ZdlPv($34); //@line 6433
     }
     HEAP32[1946] = 0; //@line 6435
     $$2$us = -3006; //@line 6436
     break;
    } else {
     if (_strcmp($24, $0) | 0) {
      $$2$us = -3006; //@line 6442
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$10 >> 2]; //@line 6446
      HEAP32[$2 + 4 >> 2] = HEAP32[$10 + 4 >> 2]; //@line 6446
      HEAP32[$2 + 8 >> 2] = HEAP32[$10 + 8 >> 2]; //@line 6446
      HEAP32[$2 + 12 >> 2] = HEAP32[$10 + 12 >> 2]; //@line 6446
      HEAP32[$2 + 16 >> 2] = HEAP32[$10 + 16 >> 2]; //@line 6446
     }
     $28 = $10 + 32 | 0; //@line 6449
     HEAP32[$28 >> 2] = $7; //@line 6451
     HEAP32[$28 + 4 >> 2] = $9; //@line 6454
     $$2$us = 0; //@line 6455
     break;
    }
   }
  } while (0);
  do {
   if (!(HEAP32[1947] | 0)) {
    $$2$us$1 = $$2$us; //@line 6464
   } else {
    $71 = _emscripten_asm_const_i(8) | 0; //@line 6466
    $73 = (($71 | 0) < 0) << 31 >> 31; //@line 6468
    $74 = HEAP32[1947] | 0; //@line 6469
    $76 = $74 + 24 | 0; //@line 6471
    $81 = HEAP32[$76 + 4 >> 2] | 0; //@line 6476
    $88 = HEAP32[$74 + 20 >> 2] | 0; //@line 6483
    if ($81 >>> 0 < $73 >>> 0 | (($81 | 0) == ($73 | 0) ? (HEAP32[$76 >> 2] | 0) >>> 0 < $71 >>> 0 : 0)) {
     if (!$88) {
      $98 = $74; //@line 6487
      label = 33; //@line 6488
     } else {
      __ZdlPv($88); //@line 6490
      $$pre36 = HEAP32[1947] | 0; //@line 6491
      if ($$pre36 | 0) {
       $98 = $$pre36; //@line 6494
       label = 33; //@line 6495
      }
     }
     if ((label | 0) == 33) {
      __ZdlPv($98); //@line 6499
     }
     HEAP32[1947] = 0; //@line 6501
     $$2$us$1 = $$2$us; //@line 6502
     break;
    } else {
     if (_strcmp($88, $0) | 0) {
      $$2$us$1 = $$2$us; //@line 6508
      break;
     }
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$74 >> 2]; //@line 6512
      HEAP32[$2 + 4 >> 2] = HEAP32[$74 + 4 >> 2]; //@line 6512
      HEAP32[$2 + 8 >> 2] = HEAP32[$74 + 8 >> 2]; //@line 6512
      HEAP32[$2 + 12 >> 2] = HEAP32[$74 + 12 >> 2]; //@line 6512
      HEAP32[$2 + 16 >> 2] = HEAP32[$74 + 16 >> 2]; //@line 6512
     }
     $92 = $74 + 32 | 0; //@line 6515
     HEAP32[$92 >> 2] = $71; //@line 6517
     HEAP32[$92 + 4 >> 2] = $73; //@line 6520
     $$2$us$1 = 0; //@line 6521
     break;
    }
   }
  } while (0);
  if (!(HEAP32[1948] | 0)) {
   $$0$lcssa = $$2$us$1; //@line 6529
   return $$0$lcssa | 0; //@line 6530
  }
  $101 = _emscripten_asm_const_i(8) | 0; //@line 6532
  $103 = (($101 | 0) < 0) << 31 >> 31; //@line 6534
  $104 = HEAP32[1948] | 0; //@line 6535
  $106 = $104 + 24 | 0; //@line 6537
  $111 = HEAP32[$106 + 4 >> 2] | 0; //@line 6542
  $118 = HEAP32[$104 + 20 >> 2] | 0; //@line 6549
  if ($111 >>> 0 < $103 >>> 0 | (($111 | 0) == ($103 | 0) ? (HEAP32[$106 >> 2] | 0) >>> 0 < $101 >>> 0 : 0)) {
   if (!$118) {
    $128 = $104; //@line 6553
    label = 43; //@line 6554
   } else {
    __ZdlPv($118); //@line 6556
    $$pre37 = HEAP32[1948] | 0; //@line 6557
    if ($$pre37 | 0) {
     $128 = $$pre37; //@line 6560
     label = 43; //@line 6561
    }
   }
   if ((label | 0) == 43) {
    __ZdlPv($128); //@line 6565
   }
   HEAP32[1948] = 0; //@line 6567
   $$0$lcssa = $$2$us$1; //@line 6568
   return $$0$lcssa | 0; //@line 6569
  }
  if (_strcmp($118, $0) | 0) {
   $$0$lcssa = $$2$us$1; //@line 6574
   return $$0$lcssa | 0; //@line 6575
  }
  if (!$4) {
   HEAP32[$2 >> 2] = HEAP32[$104 >> 2]; //@line 6578
   HEAP32[$2 + 4 >> 2] = HEAP32[$104 + 4 >> 2]; //@line 6578
   HEAP32[$2 + 8 >> 2] = HEAP32[$104 + 8 >> 2]; //@line 6578
   HEAP32[$2 + 12 >> 2] = HEAP32[$104 + 12 >> 2]; //@line 6578
   HEAP32[$2 + 16 >> 2] = HEAP32[$104 + 16 >> 2]; //@line 6578
  }
  $122 = $104 + 32 | 0; //@line 6581
  HEAP32[$122 >> 2] = $101; //@line 6583
  HEAP32[$122 + 4 >> 2] = $103; //@line 6586
  $$0$lcssa = 0; //@line 6587
  return $$0$lcssa | 0; //@line 6588
 }
 do {
  if ($6) {
   $$2 = -3006; //@line 6592
  } else {
   $37 = _emscripten_asm_const_i(8) | 0; //@line 6594
   $39 = (($37 | 0) < 0) << 31 >> 31; //@line 6596
   $40 = HEAP32[1946] | 0; //@line 6597
   $42 = $40 + 24 | 0; //@line 6599
   $47 = HEAP32[$42 + 4 >> 2] | 0; //@line 6604
   if ($47 >>> 0 < $39 >>> 0 | (($47 | 0) == ($39 | 0) ? (HEAP32[$42 >> 2] | 0) >>> 0 < $37 >>> 0 : 0)) {
    $54 = HEAP32[$40 + 20 >> 2] | 0; //@line 6612
    if (!$54) {
     $57 = $40; //@line 6615
     label = 18; //@line 6616
    } else {
     __ZdlPv($54); //@line 6618
     $$pre = HEAP32[1946] | 0; //@line 6619
     if ($$pre | 0) {
      $57 = $$pre; //@line 6622
      label = 18; //@line 6623
     }
    }
    if ((label | 0) == 18) {
     __ZdlPv($57); //@line 6627
    }
    HEAP32[1946] = 0; //@line 6629
    $$2 = -3006; //@line 6630
    break;
   }
   if ((HEAP32[$40 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$40 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$40 >> 2]; //@line 6642
      HEAP32[$2 + 4 >> 2] = HEAP32[$40 + 4 >> 2]; //@line 6642
      HEAP32[$2 + 8 >> 2] = HEAP32[$40 + 8 >> 2]; //@line 6642
      HEAP32[$2 + 12 >> 2] = HEAP32[$40 + 12 >> 2]; //@line 6642
      HEAP32[$2 + 16 >> 2] = HEAP32[$40 + 16 >> 2]; //@line 6642
     }
     $65 = $40 + 32 | 0; //@line 6645
     HEAP32[$65 >> 2] = $37; //@line 6647
     HEAP32[$65 + 4 >> 2] = $39; //@line 6650
     $$2 = 0; //@line 6651
    } else {
     $$2 = -3006; //@line 6653
    }
   } else {
    $$2 = -3006; //@line 6656
   }
  }
 } while (0);
 do {
  if (!(HEAP32[1947] | 0)) {
   $$2$1 = $$2; //@line 6664
  } else {
   $129 = _emscripten_asm_const_i(8) | 0; //@line 6666
   $131 = (($129 | 0) < 0) << 31 >> 31; //@line 6668
   $132 = HEAP32[1947] | 0; //@line 6669
   $134 = $132 + 24 | 0; //@line 6671
   $139 = HEAP32[$134 + 4 >> 2] | 0; //@line 6676
   if ($139 >>> 0 < $131 >>> 0 | (($139 | 0) == ($131 | 0) ? (HEAP32[$134 >> 2] | 0) >>> 0 < $129 >>> 0 : 0)) {
    $157 = HEAP32[$132 + 20 >> 2] | 0; //@line 6684
    if (!$157) {
     $160 = $132; //@line 6687
     label = 53; //@line 6688
    } else {
     __ZdlPv($157); //@line 6690
     $$pre33 = HEAP32[1947] | 0; //@line 6691
     if ($$pre33 | 0) {
      $160 = $$pre33; //@line 6694
      label = 53; //@line 6695
     }
    }
    if ((label | 0) == 53) {
     __ZdlPv($160); //@line 6699
    }
    HEAP32[1947] = 0; //@line 6701
    $$2$1 = $$2; //@line 6702
    break;
   }
   if ((HEAP32[$132 >> 2] | 0) == ($1 | 0)) {
    if (!(_strcmp(HEAP32[$132 + 20 >> 2] | 0, $0) | 0)) {
     if (!$4) {
      HEAP32[$2 >> 2] = HEAP32[$132 >> 2]; //@line 6714
      HEAP32[$2 + 4 >> 2] = HEAP32[$132 + 4 >> 2]; //@line 6714
      HEAP32[$2 + 8 >> 2] = HEAP32[$132 + 8 >> 2]; //@line 6714
      HEAP32[$2 + 12 >> 2] = HEAP32[$132 + 12 >> 2]; //@line 6714
      HEAP32[$2 + 16 >> 2] = HEAP32[$132 + 16 >> 2]; //@line 6714
     }
     $152 = $132 + 32 | 0; //@line 6717
     HEAP32[$152 >> 2] = $129; //@line 6719
     HEAP32[$152 + 4 >> 2] = $131; //@line 6722
     $$2$1 = 0; //@line 6723
    } else {
     $$2$1 = $$2; //@line 6725
    }
   } else {
    $$2$1 = $$2; //@line 6728
   }
  }
 } while (0);
 if (!(HEAP32[1948] | 0)) {
  $$0$lcssa = $$2$1; //@line 6735
  return $$0$lcssa | 0; //@line 6736
 }
 $163 = _emscripten_asm_const_i(8) | 0; //@line 6738
 $165 = (($163 | 0) < 0) << 31 >> 31; //@line 6740
 $166 = HEAP32[1948] | 0; //@line 6741
 $168 = $166 + 24 | 0; //@line 6743
 $173 = HEAP32[$168 + 4 >> 2] | 0; //@line 6748
 if ($173 >>> 0 < $165 >>> 0 | (($173 | 0) == ($165 | 0) ? (HEAP32[$168 >> 2] | 0) >>> 0 < $163 >>> 0 : 0)) {
  $191 = HEAP32[$166 + 20 >> 2] | 0; //@line 6756
  if (!$191) {
   $194 = $166; //@line 6759
   label = 64; //@line 6760
  } else {
   __ZdlPv($191); //@line 6762
   $$pre34 = HEAP32[1948] | 0; //@line 6763
   if ($$pre34 | 0) {
    $194 = $$pre34; //@line 6766
    label = 64; //@line 6767
   }
  }
  if ((label | 0) == 64) {
   __ZdlPv($194); //@line 6771
  }
  HEAP32[1948] = 0; //@line 6773
  $$0$lcssa = $$2$1; //@line 6774
  return $$0$lcssa | 0; //@line 6775
 }
 if ((HEAP32[$166 >> 2] | 0) != ($1 | 0)) {
  $$0$lcssa = $$2$1; //@line 6780
  return $$0$lcssa | 0; //@line 6781
 }
 if (_strcmp(HEAP32[$166 + 20 >> 2] | 0, $0) | 0) {
  $$0$lcssa = $$2$1; //@line 6788
  return $$0$lcssa | 0; //@line 6789
 }
 if (!$4) {
  HEAP32[$2 >> 2] = HEAP32[$166 >> 2]; //@line 6792
  HEAP32[$2 + 4 >> 2] = HEAP32[$166 + 4 >> 2]; //@line 6792
  HEAP32[$2 + 8 >> 2] = HEAP32[$166 + 8 >> 2]; //@line 6792
  HEAP32[$2 + 12 >> 2] = HEAP32[$166 + 12 >> 2]; //@line 6792
  HEAP32[$2 + 16 >> 2] = HEAP32[$166 + 16 >> 2]; //@line 6792
 }
 $186 = $166 + 32 | 0; //@line 6795
 HEAP32[$186 >> 2] = $163; //@line 6797
 HEAP32[$186 + 4 >> 2] = $165; //@line 6800
 $$0$lcssa = 0; //@line 6801
 return $$0$lcssa | 0; //@line 6802
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0; //@line 17386
 $n_sroa_1_4_extract_shift$0 = $a$1; //@line 17387
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0; //@line 17388
 $d_sroa_0_0_extract_trunc = $b$0; //@line 17389
 $d_sroa_1_4_extract_shift$0 = $b$1; //@line 17390
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0; //@line 17391
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0; //@line 17393
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 17396
    HEAP32[$rem + 4 >> 2] = 0; //@line 17397
   }
   $_0$1 = 0; //@line 17399
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 17400
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17401
  } else {
   if (!$4) {
    $_0$1 = 0; //@line 17404
    $_0$0 = 0; //@line 17405
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17406
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 17408
   HEAP32[$rem + 4 >> 2] = $a$1 & 0; //@line 17409
   $_0$1 = 0; //@line 17410
   $_0$0 = 0; //@line 17411
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17412
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0; //@line 17415
 do {
  if (!$d_sroa_0_0_extract_trunc) {
   if ($17) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0); //@line 17420
     HEAP32[$rem + 4 >> 2] = 0; //@line 17421
    }
    $_0$1 = 0; //@line 17423
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0; //@line 17424
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17425
   }
   if (!$n_sroa_0_0_extract_trunc) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = 0; //@line 17429
     HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0); //@line 17430
    }
    $_0$1 = 0; //@line 17432
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0; //@line 17433
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17434
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0; //@line 17436
   if (!($37 & $d_sroa_1_4_extract_trunc)) {
    if ($rem | 0) {
     HEAP32[$rem >> 2] = $a$0 | 0; //@line 17439
     HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0; //@line 17440
    }
    $_0$1 = 0; //@line 17442
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0); //@line 17443
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17444
   }
   $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 17447
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0; //@line 17449
    $58 = 31 - $51 | 0; //@line 17450
    $sr_1_ph = $57; //@line 17451
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0); //@line 17452
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0); //@line 17453
    $q_sroa_0_1_ph = 0; //@line 17454
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58; //@line 17455
    break;
   }
   if (!$rem) {
    $_0$1 = 0; //@line 17459
    $_0$0 = 0; //@line 17460
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17461
   }
   HEAP32[$rem >> 2] = $a$0 | 0; //@line 17463
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 17464
   $_0$1 = 0; //@line 17465
   $_0$0 = 0; //@line 17466
   return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17467
  } else {
   if (!$17) {
    $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 17471
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0; //@line 17473
     $126 = 31 - $119 | 0; //@line 17474
     $130 = $119 - 31 >> 31; //@line 17475
     $sr_1_ph = $125; //@line 17476
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126; //@line 17477
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130; //@line 17478
     $q_sroa_0_1_ph = 0; //@line 17479
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126; //@line 17480
     break;
    }
    if (!$rem) {
     $_0$1 = 0; //@line 17484
     $_0$0 = 0; //@line 17485
     return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17486
    }
    HEAP32[$rem >> 2] = $a$0 | 0; //@line 17488
    HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 17489
    $_0$1 = 0; //@line 17490
    $_0$0 = 0; //@line 17491
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17492
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0; //@line 17494
   if ($66 & $d_sroa_0_0_extract_trunc | 0) {
    $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0; //@line 17497
    $89 = 64 - $88 | 0; //@line 17498
    $91 = 32 - $88 | 0; //@line 17499
    $92 = $91 >> 31; //@line 17500
    $95 = $88 - 32 | 0; //@line 17501
    $105 = $95 >> 31; //@line 17502
    $sr_1_ph = $88; //@line 17503
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105; //@line 17504
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0); //@line 17505
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92; //@line 17506
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31; //@line 17507
    break;
   }
   if ($rem | 0) {
    HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc; //@line 17511
    HEAP32[$rem + 4 >> 2] = 0; //@line 17512
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0; //@line 17515
    $_0$0 = $a$0 | 0 | 0; //@line 17516
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17517
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0; //@line 17519
    $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0; //@line 17520
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0; //@line 17521
    return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17522
   }
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph; //@line 17527
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph; //@line 17528
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph; //@line 17529
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph; //@line 17530
  $carry_0_lcssa$1 = 0; //@line 17531
  $carry_0_lcssa$0 = 0; //@line 17532
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0; //@line 17534
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0; //@line 17535
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0; //@line 17536
  $137$1 = tempRet0; //@line 17537
  $q_sroa_1_1198 = $q_sroa_1_1_ph; //@line 17538
  $q_sroa_0_1199 = $q_sroa_0_1_ph; //@line 17539
  $r_sroa_1_1200 = $r_sroa_1_1_ph; //@line 17540
  $r_sroa_0_1201 = $r_sroa_0_1_ph; //@line 17541
  $sr_1202 = $sr_1_ph; //@line 17542
  $carry_0203 = 0; //@line 17543
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1; //@line 17545
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1; //@line 17546
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0; //@line 17547
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0; //@line 17548
   _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0; //@line 17549
   $150$1 = tempRet0; //@line 17550
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1; //@line 17551
   $carry_0203 = $151$0 & 1; //@line 17552
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0; //@line 17554
   $r_sroa_1_1200 = tempRet0; //@line 17555
   $sr_1202 = $sr_1202 - 1 | 0; //@line 17556
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198; //@line 17568
  $q_sroa_0_1_lcssa = $q_sroa_0_1199; //@line 17569
  $r_sroa_1_1_lcssa = $r_sroa_1_1200; //@line 17570
  $r_sroa_0_1_lcssa = $r_sroa_0_1201; //@line 17571
  $carry_0_lcssa$1 = 0; //@line 17572
  $carry_0_lcssa$0 = $carry_0203; //@line 17573
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa; //@line 17575
 $q_sroa_0_0_insert_ext75$1 = 0; //@line 17576
 if ($rem | 0) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa; //@line 17579
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa; //@line 17580
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1; //@line 17582
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0; //@line 17583
 return (tempRet0 = $_0$1, $_0$0) | 0; //@line 17584
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $$081$off0 = 0, $$084 = 0, $$085$off0 = 0, $$1 = 0, $$182$off0 = 0, $$186$off0 = 0, $$2 = 0, $$283$off0 = 0, $100 = 0, $104 = 0, $105 = 0, $106 = 0, $122 = 0, $13 = 0, $136 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $61 = 0, $69 = 0, $72 = 0, $73 = 0, $81 = 0, $84 = 0, $87 = 0, $90 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 15144
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 15150
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 15159
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 15164
      $19 = $1 + 44 | 0; //@line 15165
      if ((HEAP32[$19 >> 2] | 0) == 4) {
       break;
      }
      $25 = $0 + 16 + (HEAP32[$0 + 12 >> 2] << 3) | 0; //@line 15174
      $26 = $1 + 52 | 0; //@line 15175
      $27 = $1 + 53 | 0; //@line 15176
      $28 = $1 + 54 | 0; //@line 15177
      $29 = $0 + 8 | 0; //@line 15178
      $30 = $1 + 24 | 0; //@line 15179
      $$081$off0 = 0; //@line 15180
      $$084 = $0 + 16 | 0; //@line 15180
      $$085$off0 = 0; //@line 15180
      L10 : while (1) {
       if ($$084 >>> 0 >= $25 >>> 0) {
        $$283$off0 = $$081$off0; //@line 15184
        label = 20; //@line 15185
        break;
       }
       HEAP8[$26 >> 0] = 0; //@line 15188
       HEAP8[$27 >> 0] = 0; //@line 15189
       $AsyncCtx15 = _emscripten_alloc_async_context(56, sp) | 0; //@line 15190
       __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$084, $1, $2, $2, 1, $4); //@line 15191
       if (___async) {
        label = 12; //@line 15194
        break;
       }
       _emscripten_free_async_context($AsyncCtx15 | 0); //@line 15197
       if (HEAP8[$28 >> 0] | 0) {
        $$283$off0 = $$081$off0; //@line 15201
        label = 20; //@line 15202
        break;
       }
       do {
        if (!(HEAP8[$27 >> 0] | 0)) {
         $$182$off0 = $$081$off0; //@line 15209
         $$186$off0 = $$085$off0; //@line 15209
        } else {
         if (!(HEAP8[$26 >> 0] | 0)) {
          if (!(HEAP32[$29 >> 2] & 1)) {
           $$283$off0 = 1; //@line 15218
           label = 20; //@line 15219
           break L10;
          } else {
           $$182$off0 = 1; //@line 15222
           $$186$off0 = $$085$off0; //@line 15222
           break;
          }
         }
         if ((HEAP32[$30 >> 2] | 0) == 1) {
          label = 25; //@line 15229
          break L10;
         }
         if (!(HEAP32[$29 >> 2] & 2)) {
          label = 25; //@line 15236
          break L10;
         } else {
          $$182$off0 = 1; //@line 15239
          $$186$off0 = 1; //@line 15239
         }
        }
       } while (0);
       $$081$off0 = $$182$off0; //@line 15244
       $$084 = $$084 + 8 | 0; //@line 15244
       $$085$off0 = $$186$off0; //@line 15244
      }
      if ((label | 0) == 12) {
       HEAP32[$AsyncCtx15 >> 2] = 356; //@line 15247
       HEAP32[$AsyncCtx15 + 4 >> 2] = $19; //@line 15249
       HEAP32[$AsyncCtx15 + 8 >> 2] = $28; //@line 15251
       HEAP32[$AsyncCtx15 + 12 >> 2] = $29; //@line 15253
       HEAP32[$AsyncCtx15 + 16 >> 2] = $26; //@line 15255
       HEAP32[$AsyncCtx15 + 20 >> 2] = $30; //@line 15257
       HEAP32[$AsyncCtx15 + 24 >> 2] = $2; //@line 15259
       HEAP32[$AsyncCtx15 + 28 >> 2] = $13; //@line 15261
       HEAP32[$AsyncCtx15 + 32 >> 2] = $1; //@line 15263
       HEAP8[$AsyncCtx15 + 36 >> 0] = $$085$off0 & 1; //@line 15266
       HEAP8[$AsyncCtx15 + 37 >> 0] = $$081$off0 & 1; //@line 15269
       HEAP32[$AsyncCtx15 + 40 >> 2] = $$084; //@line 15271
       HEAP32[$AsyncCtx15 + 44 >> 2] = $25; //@line 15273
       HEAP32[$AsyncCtx15 + 48 >> 2] = $27; //@line 15275
       HEAP8[$AsyncCtx15 + 52 >> 0] = $4 & 1; //@line 15278
       sp = STACKTOP; //@line 15279
       return;
      }
      do {
       if ((label | 0) == 20) {
        if (!$$085$off0) {
         HEAP32[$13 >> 2] = $2; //@line 15285
         $61 = $1 + 40 | 0; //@line 15286
         HEAP32[$61 >> 2] = (HEAP32[$61 >> 2] | 0) + 1; //@line 15289
         if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
          if ((HEAP32[$30 >> 2] | 0) == 2) {
           HEAP8[$28 >> 0] = 1; //@line 15297
           if ($$283$off0) {
            label = 25; //@line 15299
            break;
           } else {
            $69 = 4; //@line 15302
            break;
           }
          }
         }
        }
        if ($$283$off0) {
         label = 25; //@line 15309
        } else {
         $69 = 4; //@line 15311
        }
       }
      } while (0);
      if ((label | 0) == 25) {
       $69 = 3; //@line 15316
      }
      HEAP32[$19 >> 2] = $69; //@line 15318
      break;
     }
    }
    if (($3 | 0) != 1) {
     break;
    }
    HEAP32[$1 + 32 >> 2] = 1; //@line 15327
    break;
   }
   $72 = HEAP32[$0 + 12 >> 2] | 0; //@line 15332
   $73 = $0 + 16 + ($72 << 3) | 0; //@line 15333
   $AsyncCtx11 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15334
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0 + 16 | 0, $1, $2, $3, $4); //@line 15335
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 357; //@line 15338
    HEAP32[$AsyncCtx11 + 4 >> 2] = $73; //@line 15340
    HEAP32[$AsyncCtx11 + 8 >> 2] = $1; //@line 15342
    HEAP32[$AsyncCtx11 + 12 >> 2] = $2; //@line 15344
    HEAP32[$AsyncCtx11 + 16 >> 2] = $3; //@line 15346
    HEAP8[$AsyncCtx11 + 20 >> 0] = $4 & 1; //@line 15349
    HEAP32[$AsyncCtx11 + 24 >> 2] = $0; //@line 15351
    HEAP32[$AsyncCtx11 + 28 >> 2] = $72; //@line 15353
    sp = STACKTOP; //@line 15354
    return;
   }
   _emscripten_free_async_context($AsyncCtx11 | 0); //@line 15357
   $81 = $0 + 24 | 0; //@line 15358
   if (($72 | 0) > 1) {
    $84 = HEAP32[$0 + 8 >> 2] | 0; //@line 15362
    if (!($84 & 2)) {
     $87 = $1 + 36 | 0; //@line 15366
     if ((HEAP32[$87 >> 2] | 0) != 1) {
      if (!($84 & 1)) {
       $106 = $1 + 54 | 0; //@line 15373
       $$2 = $81; //@line 15374
       while (1) {
        if (HEAP8[$106 >> 0] | 0) {
         break L1;
        }
        if ((HEAP32[$87 >> 2] | 0) == 1) {
         break L1;
        }
        $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 15386
        __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$2, $1, $2, $3, $4); //@line 15387
        if (___async) {
         break;
        }
        _emscripten_free_async_context($AsyncCtx | 0); //@line 15392
        $136 = $$2 + 8 | 0; //@line 15393
        if ($136 >>> 0 < $73 >>> 0) {
         $$2 = $136; //@line 15396
        } else {
         break L1;
        }
       }
       HEAP32[$AsyncCtx >> 2] = 360; //@line 15401
       HEAP32[$AsyncCtx + 4 >> 2] = $$2; //@line 15403
       HEAP32[$AsyncCtx + 8 >> 2] = $73; //@line 15405
       HEAP32[$AsyncCtx + 12 >> 2] = $106; //@line 15407
       HEAP32[$AsyncCtx + 16 >> 2] = $87; //@line 15409
       HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 15411
       HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 15413
       HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 15415
       HEAP8[$AsyncCtx + 32 >> 0] = $4 & 1; //@line 15418
       sp = STACKTOP; //@line 15419
       return;
      }
      $104 = $1 + 24 | 0; //@line 15422
      $105 = $1 + 54 | 0; //@line 15423
      $$1 = $81; //@line 15424
      while (1) {
       if (HEAP8[$105 >> 0] | 0) {
        break L1;
       }
       if ((HEAP32[$87 >> 2] | 0) == 1) {
        if ((HEAP32[$104 >> 2] | 0) == 1) {
         break L1;
        }
       }
       $AsyncCtx3 = _emscripten_alloc_async_context(40, sp) | 0; //@line 15440
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$1, $1, $2, $3, $4); //@line 15441
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15446
       $122 = $$1 + 8 | 0; //@line 15447
       if ($122 >>> 0 < $73 >>> 0) {
        $$1 = $122; //@line 15450
       } else {
        break L1;
       }
      }
      HEAP32[$AsyncCtx3 >> 2] = 359; //@line 15455
      HEAP32[$AsyncCtx3 + 4 >> 2] = $$1; //@line 15457
      HEAP32[$AsyncCtx3 + 8 >> 2] = $73; //@line 15459
      HEAP32[$AsyncCtx3 + 12 >> 2] = $105; //@line 15461
      HEAP32[$AsyncCtx3 + 16 >> 2] = $87; //@line 15463
      HEAP32[$AsyncCtx3 + 20 >> 2] = $104; //@line 15465
      HEAP32[$AsyncCtx3 + 24 >> 2] = $1; //@line 15467
      HEAP32[$AsyncCtx3 + 28 >> 2] = $2; //@line 15469
      HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 15471
      HEAP8[$AsyncCtx3 + 36 >> 0] = $4 & 1; //@line 15474
      sp = STACKTOP; //@line 15475
      return;
     }
    }
    $90 = $1 + 54 | 0; //@line 15479
    $$0 = $81; //@line 15480
    while (1) {
     if (HEAP8[$90 >> 0] | 0) {
      break L1;
     }
     $AsyncCtx7 = _emscripten_alloc_async_context(32, sp) | 0; //@line 15487
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($$0, $1, $2, $3, $4); //@line 15488
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 15493
     $100 = $$0 + 8 | 0; //@line 15494
     if ($100 >>> 0 < $73 >>> 0) {
      $$0 = $100; //@line 15497
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx7 >> 2] = 358; //@line 15502
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$0; //@line 15504
    HEAP32[$AsyncCtx7 + 8 >> 2] = $73; //@line 15506
    HEAP32[$AsyncCtx7 + 12 >> 2] = $90; //@line 15508
    HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 15510
    HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 15512
    HEAP32[$AsyncCtx7 + 24 >> 2] = $3; //@line 15514
    HEAP8[$AsyncCtx7 + 28 >> 0] = $4 & 1; //@line 15517
    sp = STACKTOP; //@line 15518
    return;
   }
  }
 } while (0);
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_103($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $42 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6707
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6709
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6711
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6713
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6715
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6717
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6719
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6721
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6723
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6725
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6727
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6729
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6731
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6733
 $42 = HEAP32[$18 >> 2] | 0; //@line 6734
 if ($42 | 0) {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 6738
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(56) | 0; //@line 6739
  FUNCTION_TABLE_vi[$45 & 511]($8); //@line 6740
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 260; //@line 6743
   $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 6744
   HEAP32[$46 >> 2] = $2; //@line 6745
   $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 6746
   HEAP32[$47 >> 2] = $4; //@line 6747
   $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 6748
   HEAP32[$48 >> 2] = $6; //@line 6749
   $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 6750
   HEAP32[$49 >> 2] = $8; //@line 6751
   $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 6752
   HEAP32[$50 >> 2] = $10; //@line 6753
   $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 6754
   HEAP32[$51 >> 2] = $12; //@line 6755
   $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 6756
   HEAP32[$52 >> 2] = $14; //@line 6757
   $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 6758
   HEAP32[$53 >> 2] = $16; //@line 6759
   $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 6760
   HEAP32[$54 >> 2] = $18; //@line 6761
   $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 6762
   HEAP32[$55 >> 2] = $20; //@line 6763
   $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 6764
   HEAP32[$56 >> 2] = $22; //@line 6765
   $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 6766
   HEAP32[$57 >> 2] = $24; //@line 6767
   $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 6768
   HEAP32[$58 >> 2] = $26; //@line 6769
   sp = STACKTOP; //@line 6770
   return;
  }
  ___async_unwind = 0; //@line 6773
  HEAP32[$ReallocAsyncCtx2 >> 2] = 260; //@line 6774
  $46 = $ReallocAsyncCtx2 + 4 | 0; //@line 6775
  HEAP32[$46 >> 2] = $2; //@line 6776
  $47 = $ReallocAsyncCtx2 + 8 | 0; //@line 6777
  HEAP32[$47 >> 2] = $4; //@line 6778
  $48 = $ReallocAsyncCtx2 + 12 | 0; //@line 6779
  HEAP32[$48 >> 2] = $6; //@line 6780
  $49 = $ReallocAsyncCtx2 + 16 | 0; //@line 6781
  HEAP32[$49 >> 2] = $8; //@line 6782
  $50 = $ReallocAsyncCtx2 + 20 | 0; //@line 6783
  HEAP32[$50 >> 2] = $10; //@line 6784
  $51 = $ReallocAsyncCtx2 + 24 | 0; //@line 6785
  HEAP32[$51 >> 2] = $12; //@line 6786
  $52 = $ReallocAsyncCtx2 + 28 | 0; //@line 6787
  HEAP32[$52 >> 2] = $14; //@line 6788
  $53 = $ReallocAsyncCtx2 + 32 | 0; //@line 6789
  HEAP32[$53 >> 2] = $16; //@line 6790
  $54 = $ReallocAsyncCtx2 + 36 | 0; //@line 6791
  HEAP32[$54 >> 2] = $18; //@line 6792
  $55 = $ReallocAsyncCtx2 + 40 | 0; //@line 6793
  HEAP32[$55 >> 2] = $20; //@line 6794
  $56 = $ReallocAsyncCtx2 + 44 | 0; //@line 6795
  HEAP32[$56 >> 2] = $22; //@line 6796
  $57 = $ReallocAsyncCtx2 + 48 | 0; //@line 6797
  HEAP32[$57 >> 2] = $24; //@line 6798
  $58 = $ReallocAsyncCtx2 + 52 | 0; //@line 6799
  HEAP32[$58 >> 2] = $26; //@line 6800
  sp = STACKTOP; //@line 6801
  return;
 }
 $59 = HEAP32[$6 >> 2] | 0; //@line 6804
 if (!$59) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 6807
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 6808
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 6811
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 6812
   HEAP32[$28 >> 2] = $2; //@line 6813
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 6814
   HEAP32[$29 >> 2] = $4; //@line 6815
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 6816
   HEAP32[$30 >> 2] = $6; //@line 6817
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 6818
   HEAP32[$31 >> 2] = $8; //@line 6819
   $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 6820
   HEAP32[$32 >> 2] = $10; //@line 6821
   $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 6822
   HEAP32[$33 >> 2] = $12; //@line 6823
   $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 6824
   HEAP32[$34 >> 2] = $14; //@line 6825
   $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 6826
   HEAP32[$35 >> 2] = $16; //@line 6827
   $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 6828
   HEAP32[$36 >> 2] = $18; //@line 6829
   $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 6830
   HEAP32[$37 >> 2] = $20; //@line 6831
   $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 6832
   HEAP32[$38 >> 2] = $22; //@line 6833
   $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 6834
   HEAP32[$39 >> 2] = $24; //@line 6835
   $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 6836
   HEAP32[$40 >> 2] = $26; //@line 6837
   sp = STACKTOP; //@line 6838
   return;
  }
  HEAP32[___async_retval >> 2] = $27; //@line 6842
  ___async_unwind = 0; //@line 6843
  HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 6844
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 6845
  HEAP32[$28 >> 2] = $2; //@line 6846
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 6847
  HEAP32[$29 >> 2] = $4; //@line 6848
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 6849
  HEAP32[$30 >> 2] = $6; //@line 6850
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 6851
  HEAP32[$31 >> 2] = $8; //@line 6852
  $32 = $ReallocAsyncCtx6 + 20 | 0; //@line 6853
  HEAP32[$32 >> 2] = $10; //@line 6854
  $33 = $ReallocAsyncCtx6 + 24 | 0; //@line 6855
  HEAP32[$33 >> 2] = $12; //@line 6856
  $34 = $ReallocAsyncCtx6 + 28 | 0; //@line 6857
  HEAP32[$34 >> 2] = $14; //@line 6858
  $35 = $ReallocAsyncCtx6 + 32 | 0; //@line 6859
  HEAP32[$35 >> 2] = $16; //@line 6860
  $36 = $ReallocAsyncCtx6 + 36 | 0; //@line 6861
  HEAP32[$36 >> 2] = $18; //@line 6862
  $37 = $ReallocAsyncCtx6 + 40 | 0; //@line 6863
  HEAP32[$37 >> 2] = $20; //@line 6864
  $38 = $ReallocAsyncCtx6 + 44 | 0; //@line 6865
  HEAP32[$38 >> 2] = $22; //@line 6866
  $39 = $ReallocAsyncCtx6 + 48 | 0; //@line 6867
  HEAP32[$39 >> 2] = $24; //@line 6868
  $40 = $ReallocAsyncCtx6 + 52 | 0; //@line 6869
  HEAP32[$40 >> 2] = $26; //@line 6870
  sp = STACKTOP; //@line 6871
  return;
 } else {
  $62 = HEAP32[$59 + 8 >> 2] | 0; //@line 6875
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 6876
  FUNCTION_TABLE_vi[$62 & 511]($4); //@line 6877
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 261; //@line 6880
   $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 6881
   HEAP32[$63 >> 2] = $2; //@line 6882
   $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 6883
   HEAP32[$64 >> 2] = $4; //@line 6884
   $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 6885
   HEAP32[$65 >> 2] = $6; //@line 6886
   $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 6887
   HEAP32[$66 >> 2] = $8; //@line 6888
   $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 6889
   HEAP32[$67 >> 2] = $10; //@line 6890
   $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 6891
   HEAP32[$68 >> 2] = $12; //@line 6892
   $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 6893
   HEAP32[$69 >> 2] = $14; //@line 6894
   $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 6895
   HEAP32[$70 >> 2] = $16; //@line 6896
   $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 6897
   HEAP32[$71 >> 2] = $18; //@line 6898
   $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 6899
   HEAP32[$72 >> 2] = $20; //@line 6900
   $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 6901
   HEAP32[$73 >> 2] = $22; //@line 6902
   $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 6903
   HEAP32[$74 >> 2] = $24; //@line 6904
   $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 6905
   HEAP32[$75 >> 2] = $26; //@line 6906
   sp = STACKTOP; //@line 6907
   return;
  }
  ___async_unwind = 0; //@line 6910
  HEAP32[$ReallocAsyncCtx3 >> 2] = 261; //@line 6911
  $63 = $ReallocAsyncCtx3 + 4 | 0; //@line 6912
  HEAP32[$63 >> 2] = $2; //@line 6913
  $64 = $ReallocAsyncCtx3 + 8 | 0; //@line 6914
  HEAP32[$64 >> 2] = $4; //@line 6915
  $65 = $ReallocAsyncCtx3 + 12 | 0; //@line 6916
  HEAP32[$65 >> 2] = $6; //@line 6917
  $66 = $ReallocAsyncCtx3 + 16 | 0; //@line 6918
  HEAP32[$66 >> 2] = $8; //@line 6919
  $67 = $ReallocAsyncCtx3 + 20 | 0; //@line 6920
  HEAP32[$67 >> 2] = $10; //@line 6921
  $68 = $ReallocAsyncCtx3 + 24 | 0; //@line 6922
  HEAP32[$68 >> 2] = $12; //@line 6923
  $69 = $ReallocAsyncCtx3 + 28 | 0; //@line 6924
  HEAP32[$69 >> 2] = $14; //@line 6925
  $70 = $ReallocAsyncCtx3 + 32 | 0; //@line 6926
  HEAP32[$70 >> 2] = $16; //@line 6927
  $71 = $ReallocAsyncCtx3 + 36 | 0; //@line 6928
  HEAP32[$71 >> 2] = $18; //@line 6929
  $72 = $ReallocAsyncCtx3 + 40 | 0; //@line 6930
  HEAP32[$72 >> 2] = $20; //@line 6931
  $73 = $ReallocAsyncCtx3 + 44 | 0; //@line 6932
  HEAP32[$73 >> 2] = $22; //@line 6933
  $74 = $ReallocAsyncCtx3 + 48 | 0; //@line 6934
  HEAP32[$74 >> 2] = $24; //@line 6935
  $75 = $ReallocAsyncCtx3 + 52 | 0; //@line 6936
  HEAP32[$75 >> 2] = $26; //@line 6937
  sp = STACKTOP; //@line 6938
  return;
 }
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$048$i = 0, $$1105 = 0, $$3100 = 0, $$byval_copy = 0, $$sroa$0$0$in$lcssa$i = 0, $$sroa$0$0$in47$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $62 = 0, $64 = 0, $65 = 0, $66 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 7722
 STACKTOP = STACKTOP + 32 | 0; //@line 7723
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7723
 $$byval_copy = sp; //@line 7724
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7726
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7728
 $6 = HEAP8[$0 + 12 >> 0] | 0; //@line 7730
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7732
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7734
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7736
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7738
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 7740
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 7742
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 7744
 $22 = HEAP8[$0 + 44 >> 0] | 0; //@line 7746
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 7748
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 7750
 $28 = HEAP8[$0 + 56 >> 0] | 0; //@line 7752
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 7754
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 7756
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 7758
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 7760
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 7762
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 7764
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 7766
 $44 = HEAP8[$0 + 88 >> 0] | 0; //@line 7768
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 7770
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 7772
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 7774
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 7776
 $54 = HEAP32[$0 + 108 >> 2] | 0; //@line 7778
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  $59 = 648 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 7785
  HEAP32[$$byval_copy >> 2] = HEAP32[$59 >> 2]; //@line 7786
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$59 + 4 >> 2]; //@line 7786
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$59 + 8 >> 2]; //@line 7786
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$59 + 12 >> 2]; //@line 7786
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$59 + 16 >> 2]; //@line 7786
  __ZN13SocketAddress8set_addrE10nsapi_addr($24, $$byval_copy); //@line 7787
  $$1105 = $22; //@line 7788
  $$3100 = 5; //@line 7788
 } else {
  $$1105 = $22; //@line 7790
  $$3100 = $28; //@line 7790
 }
 __ZN13SocketAddress8set_portEt($24, 53); //@line 7792
 HEAP8[$8 >> 0] = 0; //@line 7793
 HEAP8[$30 >> 0] = 1; //@line 7794
 HEAP8[$32 >> 0] = 1; //@line 7795
 HEAP8[$34 >> 0] = 0; //@line 7796
 HEAP8[$36 >> 0] = 0; //@line 7797
 HEAP8[$38 >> 0] = 1; //@line 7798
 HEAP8[$40 >> 0] = 0; //@line 7799
 HEAP8[$40 + 1 >> 0] = 0; //@line 7799
 HEAP8[$40 + 2 >> 0] = 0; //@line 7799
 HEAP8[$40 + 3 >> 0] = 0; //@line 7799
 HEAP8[$40 + 4 >> 0] = 0; //@line 7799
 HEAP8[$40 + 5 >> 0] = 0; //@line 7799
 if (!(HEAP8[$16 >> 0] | 0)) {
  $$sroa$0$0$in$lcssa$i = $42; //@line 7803
 } else {
  $$048$i = $16; //@line 7805
  $$sroa$0$0$in47$i = $42; //@line 7805
  while (1) {
   $62 = _strcspn($$048$i, 5075) | 0; //@line 7807
   $64 = $$sroa$0$0$in47$i + 1 | 0; //@line 7809
   HEAP8[$$sroa$0$0$in47$i >> 0] = $62; //@line 7810
   $65 = $62 & 255; //@line 7811
   _memcpy($64 | 0, $$048$i | 0, $65 | 0) | 0; //@line 7812
   $66 = $64 + $65 | 0; //@line 7813
   $$048$i = $$048$i + ($62 + ((HEAP8[$$048$i + $62 >> 0] | 0) == 46 & 1)) | 0; //@line 7819
   if (!(HEAP8[$$048$i >> 0] | 0)) {
    $$sroa$0$0$in$lcssa$i = $66; //@line 7823
    break;
   } else {
    $$sroa$0$0$in47$i = $66; //@line 7826
   }
  }
 }
 HEAP8[$$sroa$0$0$in$lcssa$i >> 0] = 0; //@line 7831
 HEAP8[$$sroa$0$0$in$lcssa$i + 1 >> 0] = 0; //@line 7833
 HEAP8[$$sroa$0$0$in$lcssa$i + 2 >> 0] = $44; //@line 7835
 HEAP8[$$sroa$0$0$in$lcssa$i + 3 >> 0] = 0; //@line 7837
 HEAP8[$$sroa$0$0$in$lcssa$i + 4 >> 0] = 1; //@line 7840
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(108) | 0; //@line 7842
 $82 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($12, $24, $8, $$sroa$0$0$in$lcssa$i + 5 - $46 | 0) | 0; //@line 7843
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 7846
  $83 = $ReallocAsyncCtx4 + 4 | 0; //@line 7847
  HEAP32[$83 >> 2] = $2; //@line 7848
  $84 = $ReallocAsyncCtx4 + 8 | 0; //@line 7849
  HEAP32[$84 >> 2] = $4; //@line 7850
  $85 = $ReallocAsyncCtx4 + 12 | 0; //@line 7851
  HEAP32[$85 >> 2] = $8; //@line 7852
  $86 = $ReallocAsyncCtx4 + 16 | 0; //@line 7853
  HEAP32[$86 >> 2] = $10; //@line 7854
  $87 = $ReallocAsyncCtx4 + 20 | 0; //@line 7855
  HEAP32[$87 >> 2] = $12; //@line 7856
  $88 = $ReallocAsyncCtx4 + 24 | 0; //@line 7857
  HEAP32[$88 >> 2] = $26; //@line 7858
  $89 = $ReallocAsyncCtx4 + 28 | 0; //@line 7859
  HEAP8[$89 >> 0] = $$3100; //@line 7860
  $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 7861
  HEAP32[$90 >> 2] = $14; //@line 7862
  $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 7863
  HEAP32[$91 >> 2] = $16; //@line 7864
  $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 7865
  HEAP32[$92 >> 2] = $18; //@line 7866
  $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 7867
  HEAP32[$93 >> 2] = $20; //@line 7868
  $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 7869
  HEAP32[$94 >> 2] = $24; //@line 7870
  $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 7871
  HEAP32[$95 >> 2] = $30; //@line 7872
  $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 7873
  HEAP32[$96 >> 2] = $32; //@line 7874
  $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 7875
  HEAP32[$97 >> 2] = $34; //@line 7876
  $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 7877
  HEAP32[$98 >> 2] = $36; //@line 7878
  $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 7879
  HEAP32[$99 >> 2] = $38; //@line 7880
  $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 7881
  HEAP32[$100 >> 2] = $40; //@line 7882
  $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 7883
  HEAP32[$101 >> 2] = $42; //@line 7884
  $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 7885
  HEAP8[$102 >> 0] = $44; //@line 7886
  $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 7887
  HEAP32[$103 >> 2] = $46; //@line 7888
  $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 7889
  HEAP32[$104 >> 2] = $48; //@line 7890
  $105 = $ReallocAsyncCtx4 + 92 | 0; //@line 7891
  HEAP32[$105 >> 2] = $50; //@line 7892
  $106 = $ReallocAsyncCtx4 + 96 | 0; //@line 7893
  HEAP32[$106 >> 2] = $52; //@line 7894
  $107 = $ReallocAsyncCtx4 + 100 | 0; //@line 7895
  HEAP32[$107 >> 2] = $54; //@line 7896
  $108 = $ReallocAsyncCtx4 + 104 | 0; //@line 7897
  HEAP8[$108 >> 0] = $6; //@line 7898
  $109 = $ReallocAsyncCtx4 + 105 | 0; //@line 7899
  HEAP8[$109 >> 0] = $$1105; //@line 7900
  sp = STACKTOP; //@line 7901
  STACKTOP = sp; //@line 7902
  return;
 }
 HEAP32[___async_retval >> 2] = $82; //@line 7905
 ___async_unwind = 0; //@line 7906
 HEAP32[$ReallocAsyncCtx4 >> 2] = 157; //@line 7907
 $83 = $ReallocAsyncCtx4 + 4 | 0; //@line 7908
 HEAP32[$83 >> 2] = $2; //@line 7909
 $84 = $ReallocAsyncCtx4 + 8 | 0; //@line 7910
 HEAP32[$84 >> 2] = $4; //@line 7911
 $85 = $ReallocAsyncCtx4 + 12 | 0; //@line 7912
 HEAP32[$85 >> 2] = $8; //@line 7913
 $86 = $ReallocAsyncCtx4 + 16 | 0; //@line 7914
 HEAP32[$86 >> 2] = $10; //@line 7915
 $87 = $ReallocAsyncCtx4 + 20 | 0; //@line 7916
 HEAP32[$87 >> 2] = $12; //@line 7917
 $88 = $ReallocAsyncCtx4 + 24 | 0; //@line 7918
 HEAP32[$88 >> 2] = $26; //@line 7919
 $89 = $ReallocAsyncCtx4 + 28 | 0; //@line 7920
 HEAP8[$89 >> 0] = $$3100; //@line 7921
 $90 = $ReallocAsyncCtx4 + 32 | 0; //@line 7922
 HEAP32[$90 >> 2] = $14; //@line 7923
 $91 = $ReallocAsyncCtx4 + 36 | 0; //@line 7924
 HEAP32[$91 >> 2] = $16; //@line 7925
 $92 = $ReallocAsyncCtx4 + 40 | 0; //@line 7926
 HEAP32[$92 >> 2] = $18; //@line 7927
 $93 = $ReallocAsyncCtx4 + 44 | 0; //@line 7928
 HEAP32[$93 >> 2] = $20; //@line 7929
 $94 = $ReallocAsyncCtx4 + 48 | 0; //@line 7930
 HEAP32[$94 >> 2] = $24; //@line 7931
 $95 = $ReallocAsyncCtx4 + 52 | 0; //@line 7932
 HEAP32[$95 >> 2] = $30; //@line 7933
 $96 = $ReallocAsyncCtx4 + 56 | 0; //@line 7934
 HEAP32[$96 >> 2] = $32; //@line 7935
 $97 = $ReallocAsyncCtx4 + 60 | 0; //@line 7936
 HEAP32[$97 >> 2] = $34; //@line 7937
 $98 = $ReallocAsyncCtx4 + 64 | 0; //@line 7938
 HEAP32[$98 >> 2] = $36; //@line 7939
 $99 = $ReallocAsyncCtx4 + 68 | 0; //@line 7940
 HEAP32[$99 >> 2] = $38; //@line 7941
 $100 = $ReallocAsyncCtx4 + 72 | 0; //@line 7942
 HEAP32[$100 >> 2] = $40; //@line 7943
 $101 = $ReallocAsyncCtx4 + 76 | 0; //@line 7944
 HEAP32[$101 >> 2] = $42; //@line 7945
 $102 = $ReallocAsyncCtx4 + 80 | 0; //@line 7946
 HEAP8[$102 >> 0] = $44; //@line 7947
 $103 = $ReallocAsyncCtx4 + 84 | 0; //@line 7948
 HEAP32[$103 >> 2] = $46; //@line 7949
 $104 = $ReallocAsyncCtx4 + 88 | 0; //@line 7950
 HEAP32[$104 >> 2] = $48; //@line 7951
 $105 = $ReallocAsyncCtx4 + 92 | 0; //@line 7952
 HEAP32[$105 >> 2] = $50; //@line 7953
 $106 = $ReallocAsyncCtx4 + 96 | 0; //@line 7954
 HEAP32[$106 >> 2] = $52; //@line 7955
 $107 = $ReallocAsyncCtx4 + 100 | 0; //@line 7956
 HEAP32[$107 >> 2] = $54; //@line 7957
 $108 = $ReallocAsyncCtx4 + 104 | 0; //@line 7958
 HEAP8[$108 >> 0] = $6; //@line 7959
 $109 = $ReallocAsyncCtx4 + 105 | 0; //@line 7960
 HEAP8[$109 >> 0] = $$1105; //@line 7961
 sp = STACKTOP; //@line 7962
 STACKTOP = sp; //@line 7963
 return;
}
function __ZL30nsapi_dns_query_async_responsePv($0) {
 $0 = $0 | 0;
 var $$048 = 0, $$049 = 0, $$051 = 0, $$byval_copy27 = 0, $$lcssa = 0, $$pr$i = 0, $$pre = 0, $1 = 0, $14 = 0, $15 = 0, $16 = 0, $19 = 0, $2 = 0, $26 = 0, $27 = 0, $3 = 0, $33 = 0, $34 = 0, $36 = 0, $41 = 0, $45 = 0, $47 = 0, $54 = 0, $55 = 0, $59 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $77 = 0, $79 = 0, $85 = 0, $91 = 0, $95 = 0, $99 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx19 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, $AsyncCtx9 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12016
 STACKTOP = STACKTOP + 48 | 0; //@line 12017
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 12017
 $$byval_copy27 = sp + 20 | 0; //@line 12018
 $1 = sp; //@line 12019
 $2 = $0; //@line 12020
 $3 = HEAP32[1949] | 0; //@line 12021
 if (!$3) {
  label = 3; //@line 12024
 } else {
  if ((HEAP32[$3 >> 2] | 0) == ($2 | 0)) {
   $$lcssa = $3; //@line 12029
  } else {
   label = 3; //@line 12031
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = HEAP32[1950] | 0; //@line 12036
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $7; //@line 12042
     break;
    }
   }
   $91 = HEAP32[1951] | 0; //@line 12046
   if ($91 | 0) {
    if ((HEAP32[$91 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $91; //@line 12052
     break;
    }
   }
   $95 = HEAP32[1952] | 0; //@line 12056
   if ($95 | 0) {
    if ((HEAP32[$95 >> 2] | 0) == ($2 | 0)) {
     $$lcssa = $95; //@line 12062
     break;
    }
   }
   $99 = HEAP32[1953] | 0; //@line 12066
   if (!$99) {
    STACKTOP = sp; //@line 12069
    return;
   }
   if ((HEAP32[$99 >> 2] | 0) == ($2 | 0)) {
    $$lcssa = $99; //@line 12074
   } else {
    STACKTOP = sp; //@line 12076
    return;
   }
  }
 } while (0);
 if ((HEAP32[$$lcssa + 88 >> 2] | 0) != 1) {
  STACKTOP = sp; //@line 12084
  return;
 }
 $14 = $$lcssa + 86 | 0; //@line 12088
 $15 = HEAP8[$14 >> 0] | 0; //@line 12089
 $16 = $15 & 255; //@line 12090
 if (!($15 << 24 >> 24)) {
  $$048 = 0; //@line 12093
  $$049 = HEAP32[$$lcssa + 4 >> 2] | 0; //@line 12093
 } else {
  $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 12096
  $19 = __ZnajRKSt9nothrow_t($16 << 6, 9717) | 0; //@line 12097
  if (___async) {
   HEAP32[$AsyncCtx13 >> 2] = 263; //@line 12100
   HEAP32[$AsyncCtx13 + 4 >> 2] = $1; //@line 12102
   HEAP32[$AsyncCtx13 + 8 >> 2] = $16; //@line 12104
   HEAP32[$AsyncCtx13 + 12 >> 2] = $14; //@line 12106
   HEAP32[$AsyncCtx13 + 16 >> 2] = $$lcssa; //@line 12108
   HEAP32[$AsyncCtx13 + 20 >> 2] = $$byval_copy27; //@line 12110
   sp = STACKTOP; //@line 12111
   STACKTOP = sp; //@line 12112
   return;
  }
  _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12114
  if (!$19) {
   $41 = 0; //@line 12117
  } else {
   $26 = $19 + ($16 << 6) | 0; //@line 12119
   $27 = $19; //@line 12120
   do {
    HEAP32[$1 >> 2] = 0; //@line 12122
    HEAP32[$1 + 4 >> 2] = 0; //@line 12122
    HEAP32[$1 + 8 >> 2] = 0; //@line 12122
    HEAP32[$1 + 12 >> 2] = 0; //@line 12122
    HEAP32[$1 + 16 >> 2] = 0; //@line 12122
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$1 >> 2]; //@line 12123
    HEAP32[$$byval_copy27 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 12123
    HEAP32[$$byval_copy27 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 12123
    HEAP32[$$byval_copy27 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 12123
    HEAP32[$$byval_copy27 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 12123
    __ZN13SocketAddressC2E10nsapi_addrt($27, $$byval_copy27, 0); //@line 12124
    $27 = $27 + 64 | 0; //@line 12125
   } while (($27 | 0) != ($26 | 0));
   $41 = $19; //@line 12128
  }
  $$pre = $$lcssa + 64 | 0; //@line 12137
  if (HEAP8[$14 >> 0] | 0) {
   $$051 = 0; //@line 12139
   do {
    $45 = $41 + ($$051 << 6) | 0; //@line 12141
    $47 = (HEAP32[$$pre >> 2] | 0) + ($$051 * 20 | 0) | 0; //@line 12143
    HEAP32[$$byval_copy27 >> 2] = HEAP32[$47 >> 2]; //@line 12144
    HEAP32[$$byval_copy27 + 4 >> 2] = HEAP32[$47 + 4 >> 2]; //@line 12144
    HEAP32[$$byval_copy27 + 8 >> 2] = HEAP32[$47 + 8 >> 2]; //@line 12144
    HEAP32[$$byval_copy27 + 12 >> 2] = HEAP32[$47 + 12 >> 2]; //@line 12144
    HEAP32[$$byval_copy27 + 16 >> 2] = HEAP32[$47 + 16 >> 2]; //@line 12144
    __ZN13SocketAddress8set_addrE10nsapi_addr($45, $$byval_copy27); //@line 12145
    $$051 = $$051 + 1 | 0; //@line 12146
   } while (($$051 | 0) < (HEAPU8[$14 >> 0] | 0));
  }
  $33 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 12158
  $34 = HEAP32[$$pre >> 2] | 0; //@line 12159
  $36 = HEAP32[$$lcssa + 68 >> 2] | 0; //@line 12161
  $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12162
  __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($33, $34, $36); //@line 12163
  if (___async) {
   HEAP32[$AsyncCtx9 >> 2] = 264; //@line 12166
   HEAP32[$AsyncCtx9 + 4 >> 2] = $$lcssa; //@line 12168
   HEAP32[$AsyncCtx9 + 8 >> 2] = $14; //@line 12170
   HEAP32[$AsyncCtx9 + 12 >> 2] = $$byval_copy27; //@line 12172
   HEAP32[$AsyncCtx9 + 16 >> 2] = $41; //@line 12174
   sp = STACKTOP; //@line 12175
   STACKTOP = sp; //@line 12176
   return;
  }
  _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12178
  if (!(HEAP32[$$lcssa + 48 >> 2] | 0)) {
   $$048 = $41; //@line 12183
   $$049 = 0; //@line 12183
  } else {
   $$048 = $41; //@line 12187
   $$049 = HEAPU8[$14 >> 0] | 0; //@line 12187
  }
 }
 $54 = $$lcssa + 28 | 0; //@line 12190
 $55 = HEAP32[$54 >> 2] | 0; //@line 12191
 do {
  if (!$55) {
   $67 = 0; //@line 12195
  } else {
   $59 = HEAP32[$55 + 4 >> 2] | 0; //@line 12199
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 12200
   FUNCTION_TABLE_vii[$59 & 7]($$byval_copy27, $$lcssa + 16 | 0); //@line 12201
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 265; //@line 12204
    HEAP32[$AsyncCtx + 4 >> 2] = $54; //@line 12206
    HEAP32[$AsyncCtx + 8 >> 2] = $$byval_copy27; //@line 12208
    HEAP32[$AsyncCtx + 12 >> 2] = $$lcssa; //@line 12210
    HEAP32[$AsyncCtx + 16 >> 2] = $$byval_copy27; //@line 12212
    HEAP32[$AsyncCtx + 20 >> 2] = $$048; //@line 12214
    HEAP32[$AsyncCtx + 24 >> 2] = $$049; //@line 12216
    sp = STACKTOP; //@line 12217
    STACKTOP = sp; //@line 12218
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12220
    $67 = HEAP32[$54 >> 2] | 0; //@line 12222
    break;
   }
  }
 } while (0);
 $66 = $$byval_copy27 + 12 | 0; //@line 12227
 HEAP32[$66 >> 2] = $67; //@line 12228
 $68 = HEAP32[$$lcssa >> 2] | 0; //@line 12229
 $AsyncCtx16 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12230
 __ZL28nsapi_dns_query_async_deletei($68); //@line 12231
 if (___async) {
  HEAP32[$AsyncCtx16 >> 2] = 266; //@line 12234
  HEAP32[$AsyncCtx16 + 4 >> 2] = $66; //@line 12236
  HEAP32[$AsyncCtx16 + 8 >> 2] = $$byval_copy27; //@line 12238
  HEAP32[$AsyncCtx16 + 12 >> 2] = $$048; //@line 12240
  HEAP32[$AsyncCtx16 + 16 >> 2] = $$049; //@line 12242
  sp = STACKTOP; //@line 12243
  STACKTOP = sp; //@line 12244
  return;
 }
 _emscripten_free_async_context($AsyncCtx16 | 0); //@line 12246
 $AsyncCtx19 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12247
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 12248
 if (___async) {
  HEAP32[$AsyncCtx19 >> 2] = 267; //@line 12251
  HEAP32[$AsyncCtx19 + 4 >> 2] = $66; //@line 12253
  HEAP32[$AsyncCtx19 + 8 >> 2] = $$byval_copy27; //@line 12255
  HEAP32[$AsyncCtx19 + 12 >> 2] = $$048; //@line 12257
  HEAP32[$AsyncCtx19 + 16 >> 2] = $$049; //@line 12259
  sp = STACKTOP; //@line 12260
  STACKTOP = sp; //@line 12261
  return;
 }
 _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12263
 $77 = HEAP32[$66 >> 2] | 0; //@line 12264
 do {
  if ($77 | 0) {
   $79 = HEAP32[$77 >> 2] | 0; //@line 12268
   $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12269
   FUNCTION_TABLE_viii[$79 & 0]($$byval_copy27, $$049, $$048); //@line 12270
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 268; //@line 12273
    HEAP32[$AsyncCtx2 + 4 >> 2] = $66; //@line 12275
    HEAP32[$AsyncCtx2 + 8 >> 2] = $$byval_copy27; //@line 12277
    HEAP32[$AsyncCtx2 + 12 >> 2] = $$048; //@line 12279
    sp = STACKTOP; //@line 12280
    STACKTOP = sp; //@line 12281
    return;
   }
   _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12283
   $$pr$i = HEAP32[$66 >> 2] | 0; //@line 12284
   if ($$pr$i | 0) {
    $85 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 12288
    $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 12289
    FUNCTION_TABLE_vi[$85 & 511]($$byval_copy27); //@line 12290
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 269; //@line 12293
     HEAP32[$AsyncCtx6 + 4 >> 2] = $$byval_copy27; //@line 12295
     HEAP32[$AsyncCtx6 + 8 >> 2] = $$048; //@line 12297
     sp = STACKTOP; //@line 12298
     STACKTOP = sp; //@line 12299
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 12301
     break;
    }
   }
  }
 } while (0);
 if (!$$048) {
  STACKTOP = sp; //@line 12309
  return;
 }
 __ZdaPv($$048); //@line 12311
 STACKTOP = sp; //@line 12312
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$0$i20 = 0, $$06 = 0, $10 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $31 = 0, $34 = 0, $4 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $50 = 0, $53 = 0, $57 = 0, $58 = 0, $59 = 0, $65 = 0, $68 = 0, $75 = 0, $76 = 0, $79 = 0, $80 = 0, $83 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx17 = 0, $AsyncCtx2 = 0, $AsyncCtx20 = 0, $AsyncCtx23 = 0, $AsyncCtx26 = 0, $AsyncCtx29 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 3511
 STACKTOP = STACKTOP + 32 | 0; //@line 3512
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3512
 $3 = sp + 16 | 0; //@line 3513
 $4 = sp; //@line 3514
 if (!(HEAP8[7552] | 0)) {
  if (___cxa_guard_acquire(7552) | 0) {
   HEAP32[1941] = __ZN4mbed16mbed_event_queueEv() | 0; //@line 3522
  }
 }
 $10 = HEAP32[1941] | 0; //@line 3525
 if (!$10) {
  $$06 = -3007; //@line 3528
  STACKTOP = sp; //@line 3529
  return $$06 | 0; //@line 3529
 }
 $13 = $2 + 12 | 0; //@line 3532
 $14 = HEAP32[$13 >> 2] | 0; //@line 3533
 $15 = ($14 | 0) == 0; //@line 3534
 if (($1 | 0) > 0) {
  do {
   if ($15) {
    $23 = 0; //@line 3538
   } else {
    $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 3541
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 3542
    FUNCTION_TABLE_vii[$17 & 7]($3, $2); //@line 3543
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 102; //@line 3546
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 3548
     HEAP32[$AsyncCtx + 8 >> 2] = $10; //@line 3550
     HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 3552
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 3554
     sp = STACKTOP; //@line 3555
     STACKTOP = sp; //@line 3556
     return 0; //@line 3556
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 3558
     $23 = HEAP32[$13 >> 2] | 0; //@line 3560
     break;
    }
   }
  } while (0);
  $22 = $3 + 12 | 0; //@line 3565
  HEAP32[$22 >> 2] = $23; //@line 3566
  $AsyncCtx29 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3567
  $24 = _equeue_alloc($10, 16) | 0; //@line 3568
  if (___async) {
   HEAP32[$AsyncCtx29 >> 2] = 103; //@line 3571
   HEAP32[$AsyncCtx29 + 4 >> 2] = $22; //@line 3573
   HEAP32[$AsyncCtx29 + 8 >> 2] = $1; //@line 3575
   HEAP32[$AsyncCtx29 + 12 >> 2] = $10; //@line 3577
   HEAP32[$AsyncCtx29 + 16 >> 2] = $3; //@line 3579
   HEAP32[$AsyncCtx29 + 20 >> 2] = $22; //@line 3581
   sp = STACKTOP; //@line 3582
   STACKTOP = sp; //@line 3583
   return 0; //@line 3583
  }
  _emscripten_free_async_context($AsyncCtx29 | 0); //@line 3585
  do {
   if (!$24) {
    $$0$i = 0; //@line 3589
   } else {
    $31 = HEAP32[$22 >> 2] | 0; //@line 3591
    do {
     if (!$31) {
      $42 = 0; //@line 3595
     } else {
      $34 = HEAP32[$31 + 4 >> 2] | 0; //@line 3598
      $AsyncCtx2 = _emscripten_alloc_async_context(28, sp) | 0; //@line 3599
      FUNCTION_TABLE_vii[$34 & 7]($24, $3); //@line 3600
      if (___async) {
       HEAP32[$AsyncCtx2 >> 2] = 104; //@line 3603
       HEAP32[$AsyncCtx2 + 4 >> 2] = $22; //@line 3605
       HEAP32[$AsyncCtx2 + 8 >> 2] = $24; //@line 3607
       HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 3609
       HEAP32[$AsyncCtx2 + 16 >> 2] = $10; //@line 3611
       HEAP32[$AsyncCtx2 + 20 >> 2] = $22; //@line 3613
       HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3615
       sp = STACKTOP; //@line 3616
       STACKTOP = sp; //@line 3617
       return 0; //@line 3617
      } else {
       _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3619
       $42 = HEAP32[$22 >> 2] | 0; //@line 3621
       break;
      }
     }
    } while (0);
    HEAP32[$24 + 12 >> 2] = $42; //@line 3627
    _equeue_event_delay($24, $1); //@line 3628
    _equeue_event_dtor($24, 105); //@line 3629
    $AsyncCtx23 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3630
    $43 = _equeue_post($10, 106, $24) | 0; //@line 3631
    if (___async) {
     HEAP32[$AsyncCtx23 >> 2] = 107; //@line 3634
     HEAP32[$AsyncCtx23 + 4 >> 2] = $22; //@line 3636
     HEAP32[$AsyncCtx23 + 8 >> 2] = $3; //@line 3638
     sp = STACKTOP; //@line 3639
     STACKTOP = sp; //@line 3640
     return 0; //@line 3640
    } else {
     _emscripten_free_async_context($AsyncCtx23 | 0); //@line 3642
     $$0$i = $43; //@line 3643
     break;
    }
   }
  } while (0);
  $46 = ($$0$i | 0) == 0; //@line 3648
  $47 = HEAP32[$22 >> 2] | 0; //@line 3649
  do {
   if ($47 | 0) {
    $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 3654
    $AsyncCtx6 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3655
    FUNCTION_TABLE_vi[$50 & 511]($3); //@line 3656
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 108; //@line 3659
     HEAP8[$AsyncCtx6 + 4 >> 0] = $46 & 1; //@line 3662
     sp = STACKTOP; //@line 3663
     STACKTOP = sp; //@line 3664
     return 0; //@line 3664
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 3666
     break;
    }
   }
  } while (0);
  if ($46) {
   $$06 = -3007; //@line 3672
   STACKTOP = sp; //@line 3673
   return $$06 | 0; //@line 3673
  }
 } else {
  do {
   if ($15) {
    $58 = 0; //@line 3678
   } else {
    $53 = HEAP32[$14 + 4 >> 2] | 0; //@line 3681
    $AsyncCtx10 = _emscripten_alloc_async_context(16, sp) | 0; //@line 3682
    FUNCTION_TABLE_vii[$53 & 7]($4, $2); //@line 3683
    if (___async) {
     HEAP32[$AsyncCtx10 >> 2] = 109; //@line 3686
     HEAP32[$AsyncCtx10 + 4 >> 2] = $4; //@line 3688
     HEAP32[$AsyncCtx10 + 8 >> 2] = $13; //@line 3690
     HEAP32[$AsyncCtx10 + 12 >> 2] = $10; //@line 3692
     sp = STACKTOP; //@line 3693
     STACKTOP = sp; //@line 3694
     return 0; //@line 3694
    } else {
     _emscripten_free_async_context($AsyncCtx10 | 0); //@line 3696
     $58 = HEAP32[$13 >> 2] | 0; //@line 3698
     break;
    }
   }
  } while (0);
  $57 = $4 + 12 | 0; //@line 3703
  HEAP32[$57 >> 2] = $58; //@line 3704
  $AsyncCtx26 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3705
  $59 = _equeue_alloc($10, 16) | 0; //@line 3706
  if (___async) {
   HEAP32[$AsyncCtx26 >> 2] = 110; //@line 3709
   HEAP32[$AsyncCtx26 + 4 >> 2] = $57; //@line 3711
   HEAP32[$AsyncCtx26 + 8 >> 2] = $10; //@line 3713
   HEAP32[$AsyncCtx26 + 12 >> 2] = $4; //@line 3715
   HEAP32[$AsyncCtx26 + 16 >> 2] = $57; //@line 3717
   sp = STACKTOP; //@line 3718
   STACKTOP = sp; //@line 3719
   return 0; //@line 3719
  }
  _emscripten_free_async_context($AsyncCtx26 | 0); //@line 3721
  do {
   if (!$59) {
    $$0$i20 = 0; //@line 3725
   } else {
    $65 = HEAP32[$57 >> 2] | 0; //@line 3727
    do {
     if (!$65) {
      $75 = 0; //@line 3731
     } else {
      $68 = HEAP32[$65 + 4 >> 2] | 0; //@line 3734
      $AsyncCtx13 = _emscripten_alloc_async_context(24, sp) | 0; //@line 3735
      FUNCTION_TABLE_vii[$68 & 7]($59, $4); //@line 3736
      if (___async) {
       HEAP32[$AsyncCtx13 >> 2] = 111; //@line 3739
       HEAP32[$AsyncCtx13 + 4 >> 2] = $57; //@line 3741
       HEAP32[$AsyncCtx13 + 8 >> 2] = $59; //@line 3743
       HEAP32[$AsyncCtx13 + 12 >> 2] = $10; //@line 3745
       HEAP32[$AsyncCtx13 + 16 >> 2] = $57; //@line 3747
       HEAP32[$AsyncCtx13 + 20 >> 2] = $4; //@line 3749
       sp = STACKTOP; //@line 3750
       STACKTOP = sp; //@line 3751
       return 0; //@line 3751
      } else {
       _emscripten_free_async_context($AsyncCtx13 | 0); //@line 3753
       $75 = HEAP32[$57 >> 2] | 0; //@line 3755
       break;
      }
     }
    } while (0);
    HEAP32[$59 + 12 >> 2] = $75; //@line 3761
    _equeue_event_dtor($59, 105); //@line 3762
    $AsyncCtx20 = _emscripten_alloc_async_context(12, sp) | 0; //@line 3763
    $76 = _equeue_post($10, 106, $59) | 0; //@line 3764
    if (___async) {
     HEAP32[$AsyncCtx20 >> 2] = 112; //@line 3767
     HEAP32[$AsyncCtx20 + 4 >> 2] = $57; //@line 3769
     HEAP32[$AsyncCtx20 + 8 >> 2] = $4; //@line 3771
     sp = STACKTOP; //@line 3772
     STACKTOP = sp; //@line 3773
     return 0; //@line 3773
    } else {
     _emscripten_free_async_context($AsyncCtx20 | 0); //@line 3775
     $$0$i20 = $76; //@line 3776
     break;
    }
   }
  } while (0);
  $79 = ($$0$i20 | 0) == 0; //@line 3781
  $80 = HEAP32[$57 >> 2] | 0; //@line 3782
  do {
   if ($80 | 0) {
    $83 = HEAP32[$80 + 8 >> 2] | 0; //@line 3787
    $AsyncCtx17 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3788
    FUNCTION_TABLE_vi[$83 & 511]($4); //@line 3789
    if (___async) {
     HEAP32[$AsyncCtx17 >> 2] = 113; //@line 3792
     HEAP8[$AsyncCtx17 + 4 >> 0] = $79 & 1; //@line 3795
     sp = STACKTOP; //@line 3796
     STACKTOP = sp; //@line 3797
     return 0; //@line 3797
    } else {
     _emscripten_free_async_context($AsyncCtx17 | 0); //@line 3799
     break;
    }
   }
  } while (0);
  if ($79) {
   $$06 = -3007; //@line 3805
   STACKTOP = sp; //@line 3806
   return $$06 | 0; //@line 3806
  }
 }
 $$06 = 0; //@line 3809
 STACKTOP = sp; //@line 3810
 return $$06 | 0; //@line 3810
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_104($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $10 = 0, $100 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $41 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $63 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $88 = 0, $94 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6950
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6952
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6954
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6956
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6958
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6960
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6962
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6964
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6966
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6968
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6970
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6972
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6974
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6976
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($2); //@line 6981
  return;
 }
 $33 = (HEAPU8[$2 >> 0] | 0) << 8 | (HEAPU8[$26 >> 0] | 0); //@line 6989
 $34 = $33 & 65535; //@line 6990
 $35 = HEAP32[1949] | 0; //@line 6991
 if (!$35) {
  label = 4; //@line 6994
 } else {
  if (($33 | 0) == (HEAPU16[$35 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $35; //@line 7001
   label = 5; //@line 7002
  } else {
   label = 4; //@line 7004
  }
 }
 do {
  if ((label | 0) == 4) {
   $41 = HEAP32[1950] | 0; //@line 7009
   if ($41 | 0) {
    if (($33 | 0) == (HEAPU16[$41 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $41; //@line 7017
     label = 5; //@line 7018
     break;
    }
   }
   $88 = HEAP32[1951] | 0; //@line 7022
   if ($88 | 0) {
    if (($33 | 0) == (HEAPU16[$88 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $88; //@line 7030
     label = 5; //@line 7031
     break;
    }
   }
   $94 = HEAP32[1952] | 0; //@line 7035
   if ($94 | 0) {
    if (($33 | 0) == (HEAPU16[$94 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $94; //@line 7043
     label = 5; //@line 7044
     break;
    }
   }
   $100 = HEAP32[1953] | 0; //@line 7048
   if ($100 | 0) {
    if (($33 | 0) == (HEAPU16[$100 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $100; //@line 7056
     label = 5; //@line 7057
    }
   }
  }
 } while (0);
 if ((label | 0) == 5) {
  if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
   $63 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 7068
   $$ = $63 >>> 0 > 1 ? $63 : 1; //@line 7070
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 7074
   $66 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 9717) | 0; //@line 7075
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 7078
    $67 = $ReallocAsyncCtx4 + 4 | 0; //@line 7079
    HEAP32[$67 >> 2] = $2; //@line 7080
    $68 = $ReallocAsyncCtx4 + 8 | 0; //@line 7081
    HEAP32[$68 >> 2] = $4; //@line 7082
    $69 = $ReallocAsyncCtx4 + 12 | 0; //@line 7083
    HEAP32[$69 >> 2] = $6; //@line 7084
    $70 = $ReallocAsyncCtx4 + 16 | 0; //@line 7085
    HEAP32[$70 >> 2] = $8; //@line 7086
    $71 = $ReallocAsyncCtx4 + 20 | 0; //@line 7087
    HEAP32[$71 >> 2] = $10; //@line 7088
    $72 = $ReallocAsyncCtx4 + 24 | 0; //@line 7089
    HEAP32[$72 >> 2] = $12; //@line 7090
    $73 = $ReallocAsyncCtx4 + 28 | 0; //@line 7091
    HEAP32[$73 >> 2] = $14; //@line 7092
    $74 = $ReallocAsyncCtx4 + 32 | 0; //@line 7093
    HEAP32[$74 >> 2] = $16; //@line 7094
    $75 = $ReallocAsyncCtx4 + 36 | 0; //@line 7095
    HEAP32[$75 >> 2] = $18; //@line 7096
    $76 = $ReallocAsyncCtx4 + 40 | 0; //@line 7097
    HEAP32[$76 >> 2] = $20; //@line 7098
    $77 = $ReallocAsyncCtx4 + 44 | 0; //@line 7099
    HEAP32[$77 >> 2] = $22; //@line 7100
    $78 = $ReallocAsyncCtx4 + 48 | 0; //@line 7101
    HEAP32[$78 >> 2] = $24; //@line 7102
    $79 = $ReallocAsyncCtx4 + 52 | 0; //@line 7103
    HEAP32[$79 >> 2] = $26; //@line 7104
    $80 = $ReallocAsyncCtx4 + 56 | 0; //@line 7105
    HEAP32[$80 >> 2] = $$lcssa; //@line 7106
    $81 = $ReallocAsyncCtx4 + 60 | 0; //@line 7107
    HEAP16[$81 >> 1] = $34; //@line 7108
    $82 = $ReallocAsyncCtx4 + 64 | 0; //@line 7109
    HEAP32[$82 >> 2] = $$; //@line 7110
    sp = STACKTOP; //@line 7111
    return;
   }
   HEAP32[___async_retval >> 2] = $66; //@line 7115
   ___async_unwind = 0; //@line 7116
   HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 7117
   $67 = $ReallocAsyncCtx4 + 4 | 0; //@line 7118
   HEAP32[$67 >> 2] = $2; //@line 7119
   $68 = $ReallocAsyncCtx4 + 8 | 0; //@line 7120
   HEAP32[$68 >> 2] = $4; //@line 7121
   $69 = $ReallocAsyncCtx4 + 12 | 0; //@line 7122
   HEAP32[$69 >> 2] = $6; //@line 7123
   $70 = $ReallocAsyncCtx4 + 16 | 0; //@line 7124
   HEAP32[$70 >> 2] = $8; //@line 7125
   $71 = $ReallocAsyncCtx4 + 20 | 0; //@line 7126
   HEAP32[$71 >> 2] = $10; //@line 7127
   $72 = $ReallocAsyncCtx4 + 24 | 0; //@line 7128
   HEAP32[$72 >> 2] = $12; //@line 7129
   $73 = $ReallocAsyncCtx4 + 28 | 0; //@line 7130
   HEAP32[$73 >> 2] = $14; //@line 7131
   $74 = $ReallocAsyncCtx4 + 32 | 0; //@line 7132
   HEAP32[$74 >> 2] = $16; //@line 7133
   $75 = $ReallocAsyncCtx4 + 36 | 0; //@line 7134
   HEAP32[$75 >> 2] = $18; //@line 7135
   $76 = $ReallocAsyncCtx4 + 40 | 0; //@line 7136
   HEAP32[$76 >> 2] = $20; //@line 7137
   $77 = $ReallocAsyncCtx4 + 44 | 0; //@line 7138
   HEAP32[$77 >> 2] = $22; //@line 7139
   $78 = $ReallocAsyncCtx4 + 48 | 0; //@line 7140
   HEAP32[$78 >> 2] = $24; //@line 7141
   $79 = $ReallocAsyncCtx4 + 52 | 0; //@line 7142
   HEAP32[$79 >> 2] = $26; //@line 7143
   $80 = $ReallocAsyncCtx4 + 56 | 0; //@line 7144
   HEAP32[$80 >> 2] = $$lcssa; //@line 7145
   $81 = $ReallocAsyncCtx4 + 60 | 0; //@line 7146
   HEAP16[$81 >> 1] = $34; //@line 7147
   $82 = $ReallocAsyncCtx4 + 64 | 0; //@line 7148
   HEAP32[$82 >> 2] = $$; //@line 7149
   sp = STACKTOP; //@line 7150
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 7154
 $46 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 7155
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 7158
  $47 = $ReallocAsyncCtx6 + 4 | 0; //@line 7159
  HEAP32[$47 >> 2] = $2; //@line 7160
  $48 = $ReallocAsyncCtx6 + 8 | 0; //@line 7161
  HEAP32[$48 >> 2] = $4; //@line 7162
  $49 = $ReallocAsyncCtx6 + 12 | 0; //@line 7163
  HEAP32[$49 >> 2] = $6; //@line 7164
  $50 = $ReallocAsyncCtx6 + 16 | 0; //@line 7165
  HEAP32[$50 >> 2] = $8; //@line 7166
  $51 = $ReallocAsyncCtx6 + 20 | 0; //@line 7167
  HEAP32[$51 >> 2] = $10; //@line 7168
  $52 = $ReallocAsyncCtx6 + 24 | 0; //@line 7169
  HEAP32[$52 >> 2] = $12; //@line 7170
  $53 = $ReallocAsyncCtx6 + 28 | 0; //@line 7171
  HEAP32[$53 >> 2] = $14; //@line 7172
  $54 = $ReallocAsyncCtx6 + 32 | 0; //@line 7173
  HEAP32[$54 >> 2] = $16; //@line 7174
  $55 = $ReallocAsyncCtx6 + 36 | 0; //@line 7175
  HEAP32[$55 >> 2] = $18; //@line 7176
  $56 = $ReallocAsyncCtx6 + 40 | 0; //@line 7177
  HEAP32[$56 >> 2] = $20; //@line 7178
  $57 = $ReallocAsyncCtx6 + 44 | 0; //@line 7179
  HEAP32[$57 >> 2] = $22; //@line 7180
  $58 = $ReallocAsyncCtx6 + 48 | 0; //@line 7181
  HEAP32[$58 >> 2] = $24; //@line 7182
  $59 = $ReallocAsyncCtx6 + 52 | 0; //@line 7183
  HEAP32[$59 >> 2] = $26; //@line 7184
  sp = STACKTOP; //@line 7185
  return;
 }
 HEAP32[___async_retval >> 2] = $46; //@line 7189
 ___async_unwind = 0; //@line 7190
 HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 7191
 $47 = $ReallocAsyncCtx6 + 4 | 0; //@line 7192
 HEAP32[$47 >> 2] = $2; //@line 7193
 $48 = $ReallocAsyncCtx6 + 8 | 0; //@line 7194
 HEAP32[$48 >> 2] = $4; //@line 7195
 $49 = $ReallocAsyncCtx6 + 12 | 0; //@line 7196
 HEAP32[$49 >> 2] = $6; //@line 7197
 $50 = $ReallocAsyncCtx6 + 16 | 0; //@line 7198
 HEAP32[$50 >> 2] = $8; //@line 7199
 $51 = $ReallocAsyncCtx6 + 20 | 0; //@line 7200
 HEAP32[$51 >> 2] = $10; //@line 7201
 $52 = $ReallocAsyncCtx6 + 24 | 0; //@line 7202
 HEAP32[$52 >> 2] = $12; //@line 7203
 $53 = $ReallocAsyncCtx6 + 28 | 0; //@line 7204
 HEAP32[$53 >> 2] = $14; //@line 7205
 $54 = $ReallocAsyncCtx6 + 32 | 0; //@line 7206
 HEAP32[$54 >> 2] = $16; //@line 7207
 $55 = $ReallocAsyncCtx6 + 36 | 0; //@line 7208
 HEAP32[$55 >> 2] = $18; //@line 7209
 $56 = $ReallocAsyncCtx6 + 40 | 0; //@line 7210
 HEAP32[$56 >> 2] = $20; //@line 7211
 $57 = $ReallocAsyncCtx6 + 44 | 0; //@line 7212
 HEAP32[$57 >> 2] = $22; //@line 7213
 $58 = $ReallocAsyncCtx6 + 48 | 0; //@line 7214
 HEAP32[$58 >> 2] = $24; //@line 7215
 $59 = $ReallocAsyncCtx6 + 52 | 0; //@line 7216
 HEAP32[$59 >> 2] = $26; //@line 7217
 sp = STACKTOP; //@line 7218
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_105($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $$sroa_idx5$i$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $28 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $49 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $74 = 0, $8 = 0, $80 = 0, $86 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 7229
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7231
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7233
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7235
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7237
 if ((HEAP32[___async_retval >> 2] | 0) < 12) {
  _free($2); //@line 7242
  return;
 }
 $11 = $2 + 1 | 0; //@line 7245
 $12 = $4 + 12 | 0; //@line 7246
 $13 = $6 + 8 | 0; //@line 7247
 $$sroa_idx5$i$i = $6 + 4 | 0; //@line 7248
 $14 = $6 + 12 | 0; //@line 7249
 $20 = (HEAPU8[$2 >> 0] | 0) << 8 | (HEAPU8[$11 >> 0] | 0); //@line 7255
 $21 = $20 & 65535; //@line 7256
 $22 = HEAP32[1949] | 0; //@line 7257
 if (!$22) {
  label = 6; //@line 7260
 } else {
  if (($20 | 0) == (HEAPU16[$22 + 80 >> 1] | 0 | 0)) {
   $$lcssa = $22; //@line 7267
   label = 7; //@line 7268
  } else {
   label = 6; //@line 7270
  }
 }
 do {
  if ((label | 0) == 6) {
   $28 = HEAP32[1950] | 0; //@line 7275
   if ($28 | 0) {
    if (($20 | 0) == (HEAPU16[$28 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $28; //@line 7283
     label = 7; //@line 7284
     break;
    }
   }
   $74 = HEAP32[1951] | 0; //@line 7288
   if ($74 | 0) {
    if (($20 | 0) == (HEAPU16[$74 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $74; //@line 7296
     label = 7; //@line 7297
     break;
    }
   }
   $80 = HEAP32[1952] | 0; //@line 7301
   if ($80 | 0) {
    if (($20 | 0) == (HEAPU16[$80 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $80; //@line 7309
     label = 7; //@line 7310
     break;
    }
   }
   $86 = HEAP32[1953] | 0; //@line 7314
   if ($86 | 0) {
    if (($20 | 0) == (HEAPU16[$86 + 80 >> 1] | 0 | 0)) {
     $$lcssa = $86; //@line 7322
     label = 7; //@line 7323
    }
   }
  }
 } while (0);
 if ((label | 0) == 7) {
  if ((HEAP32[$$lcssa + 88 >> 2] | 0) == 1) {
   $49 = HEAP32[$$lcssa + 48 >> 2] | 0; //@line 7334
   $$ = $49 >>> 0 > 1 ? $49 : 1; //@line 7336
   $ReallocAsyncCtx4 = _emscripten_realloc_async_context(68) | 0; //@line 7340
   $52 = __ZnajRKSt9nothrow_t($$ >>> 0 > 214748364 ? -1 : $$ * 20 | 0, 9717) | 0; //@line 7341
   if (___async) {
    HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 7344
    $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 7345
    HEAP32[$53 >> 2] = $2; //@line 7346
    $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 7347
    HEAP32[$54 >> 2] = $4; //@line 7348
    $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 7349
    HEAP32[$55 >> 2] = $12; //@line 7350
    $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 7351
    HEAP32[$56 >> 2] = $6; //@line 7352
    $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 7353
    HEAP32[$57 >> 2] = $12; //@line 7354
    $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 7355
    HEAP32[$58 >> 2] = $13; //@line 7356
    $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 7357
    HEAP32[$59 >> 2] = $6; //@line 7358
    $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 7359
    HEAP32[$60 >> 2] = $$sroa_idx5$i$i; //@line 7360
    $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 7361
    HEAP32[$61 >> 2] = $14; //@line 7362
    $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 7363
    HEAP32[$62 >> 2] = $4; //@line 7364
    $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 7365
    HEAP32[$63 >> 2] = $6; //@line 7366
    $64 = $ReallocAsyncCtx4 + 48 | 0; //@line 7367
    HEAP32[$64 >> 2] = $8; //@line 7368
    $65 = $ReallocAsyncCtx4 + 52 | 0; //@line 7369
    HEAP32[$65 >> 2] = $11; //@line 7370
    $66 = $ReallocAsyncCtx4 + 56 | 0; //@line 7371
    HEAP32[$66 >> 2] = $$lcssa; //@line 7372
    $67 = $ReallocAsyncCtx4 + 60 | 0; //@line 7373
    HEAP16[$67 >> 1] = $21; //@line 7374
    $68 = $ReallocAsyncCtx4 + 64 | 0; //@line 7375
    HEAP32[$68 >> 2] = $$; //@line 7376
    sp = STACKTOP; //@line 7377
    return;
   }
   HEAP32[___async_retval >> 2] = $52; //@line 7381
   ___async_unwind = 0; //@line 7382
   HEAP32[$ReallocAsyncCtx4 >> 2] = 257; //@line 7383
   $53 = $ReallocAsyncCtx4 + 4 | 0; //@line 7384
   HEAP32[$53 >> 2] = $2; //@line 7385
   $54 = $ReallocAsyncCtx4 + 8 | 0; //@line 7386
   HEAP32[$54 >> 2] = $4; //@line 7387
   $55 = $ReallocAsyncCtx4 + 12 | 0; //@line 7388
   HEAP32[$55 >> 2] = $12; //@line 7389
   $56 = $ReallocAsyncCtx4 + 16 | 0; //@line 7390
   HEAP32[$56 >> 2] = $6; //@line 7391
   $57 = $ReallocAsyncCtx4 + 20 | 0; //@line 7392
   HEAP32[$57 >> 2] = $12; //@line 7393
   $58 = $ReallocAsyncCtx4 + 24 | 0; //@line 7394
   HEAP32[$58 >> 2] = $13; //@line 7395
   $59 = $ReallocAsyncCtx4 + 28 | 0; //@line 7396
   HEAP32[$59 >> 2] = $6; //@line 7397
   $60 = $ReallocAsyncCtx4 + 32 | 0; //@line 7398
   HEAP32[$60 >> 2] = $$sroa_idx5$i$i; //@line 7399
   $61 = $ReallocAsyncCtx4 + 36 | 0; //@line 7400
   HEAP32[$61 >> 2] = $14; //@line 7401
   $62 = $ReallocAsyncCtx4 + 40 | 0; //@line 7402
   HEAP32[$62 >> 2] = $4; //@line 7403
   $63 = $ReallocAsyncCtx4 + 44 | 0; //@line 7404
   HEAP32[$63 >> 2] = $6; //@line 7405
   $64 = $ReallocAsyncCtx4 + 48 | 0; //@line 7406
   HEAP32[$64 >> 2] = $8; //@line 7407
   $65 = $ReallocAsyncCtx4 + 52 | 0; //@line 7408
   HEAP32[$65 >> 2] = $11; //@line 7409
   $66 = $ReallocAsyncCtx4 + 56 | 0; //@line 7410
   HEAP32[$66 >> 2] = $$lcssa; //@line 7411
   $67 = $ReallocAsyncCtx4 + 60 | 0; //@line 7412
   HEAP16[$67 >> 1] = $21; //@line 7413
   $68 = $ReallocAsyncCtx4 + 64 | 0; //@line 7414
   HEAP32[$68 >> 2] = $$; //@line 7415
   sp = STACKTOP; //@line 7416
   return;
  }
 }
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 7420
 $33 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($8, 0, $2, 512) | 0; //@line 7421
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 7424
  $34 = $ReallocAsyncCtx6 + 4 | 0; //@line 7425
  HEAP32[$34 >> 2] = $2; //@line 7426
  $35 = $ReallocAsyncCtx6 + 8 | 0; //@line 7427
  HEAP32[$35 >> 2] = $4; //@line 7428
  $36 = $ReallocAsyncCtx6 + 12 | 0; //@line 7429
  HEAP32[$36 >> 2] = $12; //@line 7430
  $37 = $ReallocAsyncCtx6 + 16 | 0; //@line 7431
  HEAP32[$37 >> 2] = $6; //@line 7432
  $38 = $ReallocAsyncCtx6 + 20 | 0; //@line 7433
  HEAP32[$38 >> 2] = $12; //@line 7434
  $39 = $ReallocAsyncCtx6 + 24 | 0; //@line 7435
  HEAP32[$39 >> 2] = $13; //@line 7436
  $40 = $ReallocAsyncCtx6 + 28 | 0; //@line 7437
  HEAP32[$40 >> 2] = $6; //@line 7438
  $41 = $ReallocAsyncCtx6 + 32 | 0; //@line 7439
  HEAP32[$41 >> 2] = $$sroa_idx5$i$i; //@line 7440
  $42 = $ReallocAsyncCtx6 + 36 | 0; //@line 7441
  HEAP32[$42 >> 2] = $14; //@line 7442
  $43 = $ReallocAsyncCtx6 + 40 | 0; //@line 7443
  HEAP32[$43 >> 2] = $4; //@line 7444
  $44 = $ReallocAsyncCtx6 + 44 | 0; //@line 7445
  HEAP32[$44 >> 2] = $6; //@line 7446
  $45 = $ReallocAsyncCtx6 + 48 | 0; //@line 7447
  HEAP32[$45 >> 2] = $8; //@line 7448
  $46 = $ReallocAsyncCtx6 + 52 | 0; //@line 7449
  HEAP32[$46 >> 2] = $11; //@line 7450
  sp = STACKTOP; //@line 7451
  return;
 }
 HEAP32[___async_retval >> 2] = $33; //@line 7455
 ___async_unwind = 0; //@line 7456
 HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 7457
 $34 = $ReallocAsyncCtx6 + 4 | 0; //@line 7458
 HEAP32[$34 >> 2] = $2; //@line 7459
 $35 = $ReallocAsyncCtx6 + 8 | 0; //@line 7460
 HEAP32[$35 >> 2] = $4; //@line 7461
 $36 = $ReallocAsyncCtx6 + 12 | 0; //@line 7462
 HEAP32[$36 >> 2] = $12; //@line 7463
 $37 = $ReallocAsyncCtx6 + 16 | 0; //@line 7464
 HEAP32[$37 >> 2] = $6; //@line 7465
 $38 = $ReallocAsyncCtx6 + 20 | 0; //@line 7466
 HEAP32[$38 >> 2] = $12; //@line 7467
 $39 = $ReallocAsyncCtx6 + 24 | 0; //@line 7468
 HEAP32[$39 >> 2] = $13; //@line 7469
 $40 = $ReallocAsyncCtx6 + 28 | 0; //@line 7470
 HEAP32[$40 >> 2] = $6; //@line 7471
 $41 = $ReallocAsyncCtx6 + 32 | 0; //@line 7472
 HEAP32[$41 >> 2] = $$sroa_idx5$i$i; //@line 7473
 $42 = $ReallocAsyncCtx6 + 36 | 0; //@line 7474
 HEAP32[$42 >> 2] = $14; //@line 7475
 $43 = $ReallocAsyncCtx6 + 40 | 0; //@line 7476
 HEAP32[$43 >> 2] = $4; //@line 7477
 $44 = $ReallocAsyncCtx6 + 44 | 0; //@line 7478
 HEAP32[$44 >> 2] = $6; //@line 7479
 $45 = $ReallocAsyncCtx6 + 48 | 0; //@line 7480
 HEAP32[$45 >> 2] = $8; //@line 7481
 $46 = $ReallocAsyncCtx6 + 52 | 0; //@line 7482
 HEAP32[$46 >> 2] = $11; //@line 7483
 sp = STACKTOP; //@line 7484
 return;
}
function _mbed_die() {
 var $0 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx19 = 0, $AsyncCtx23 = 0, $AsyncCtx27 = 0, $AsyncCtx3 = 0, $AsyncCtx31 = 0, $AsyncCtx35 = 0, $AsyncCtx39 = 0, $AsyncCtx43 = 0, $AsyncCtx47 = 0, $AsyncCtx51 = 0, $AsyncCtx55 = 0, $AsyncCtx59 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12727
 STACKTOP = STACKTOP + 32 | 0; //@line 12728
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12728
 $0 = sp; //@line 12729
 _gpio_init_out($0, 50); //@line 12730
 while (1) {
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12733
  $AsyncCtx59 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12734
  _wait_ms(150); //@line 12735
  if (___async) {
   label = 3; //@line 12738
   break;
  }
  _emscripten_free_async_context($AsyncCtx59 | 0); //@line 12741
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12743
  $AsyncCtx55 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12744
  _wait_ms(150); //@line 12745
  if (___async) {
   label = 5; //@line 12748
   break;
  }
  _emscripten_free_async_context($AsyncCtx55 | 0); //@line 12751
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12753
  $AsyncCtx51 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12754
  _wait_ms(150); //@line 12755
  if (___async) {
   label = 7; //@line 12758
   break;
  }
  _emscripten_free_async_context($AsyncCtx51 | 0); //@line 12761
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12763
  $AsyncCtx47 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12764
  _wait_ms(150); //@line 12765
  if (___async) {
   label = 9; //@line 12768
   break;
  }
  _emscripten_free_async_context($AsyncCtx47 | 0); //@line 12771
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12773
  $AsyncCtx43 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12774
  _wait_ms(150); //@line 12775
  if (___async) {
   label = 11; //@line 12778
   break;
  }
  _emscripten_free_async_context($AsyncCtx43 | 0); //@line 12781
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12783
  $AsyncCtx39 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12784
  _wait_ms(150); //@line 12785
  if (___async) {
   label = 13; //@line 12788
   break;
  }
  _emscripten_free_async_context($AsyncCtx39 | 0); //@line 12791
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12793
  $AsyncCtx35 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12794
  _wait_ms(150); //@line 12795
  if (___async) {
   label = 15; //@line 12798
   break;
  }
  _emscripten_free_async_context($AsyncCtx35 | 0); //@line 12801
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12803
  $AsyncCtx31 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12804
  _wait_ms(150); //@line 12805
  if (___async) {
   label = 17; //@line 12808
   break;
  }
  _emscripten_free_async_context($AsyncCtx31 | 0); //@line 12811
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12813
  $AsyncCtx27 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12814
  _wait_ms(400); //@line 12815
  if (___async) {
   label = 19; //@line 12818
   break;
  }
  _emscripten_free_async_context($AsyncCtx27 | 0); //@line 12821
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12823
  $AsyncCtx23 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12824
  _wait_ms(400); //@line 12825
  if (___async) {
   label = 21; //@line 12828
   break;
  }
  _emscripten_free_async_context($AsyncCtx23 | 0); //@line 12831
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12833
  $AsyncCtx19 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12834
  _wait_ms(400); //@line 12835
  if (___async) {
   label = 23; //@line 12838
   break;
  }
  _emscripten_free_async_context($AsyncCtx19 | 0); //@line 12841
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12843
  $AsyncCtx15 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12844
  _wait_ms(400); //@line 12845
  if (___async) {
   label = 25; //@line 12848
   break;
  }
  _emscripten_free_async_context($AsyncCtx15 | 0); //@line 12851
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12853
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12854
  _wait_ms(400); //@line 12855
  if (___async) {
   label = 27; //@line 12858
   break;
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 12861
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12863
  $AsyncCtx7 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12864
  _wait_ms(400); //@line 12865
  if (___async) {
   label = 29; //@line 12868
   break;
  }
  _emscripten_free_async_context($AsyncCtx7 | 0); //@line 12871
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 1) | 0; //@line 12873
  $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12874
  _wait_ms(400); //@line 12875
  if (___async) {
   label = 31; //@line 12878
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 12881
  _emscripten_asm_const_iii(9, HEAP32[$0 >> 2] | 0, 0) | 0; //@line 12883
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 12884
  _wait_ms(400); //@line 12885
  if (___async) {
   label = 33; //@line 12888
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12891
 }
 switch (label | 0) {
 case 3:
  {
   HEAP32[$AsyncCtx59 >> 2] = 281; //@line 12895
   HEAP32[$AsyncCtx59 + 4 >> 2] = $0; //@line 12897
   sp = STACKTOP; //@line 12898
   STACKTOP = sp; //@line 12899
   return;
  }
 case 5:
  {
   HEAP32[$AsyncCtx55 >> 2] = 282; //@line 12903
   HEAP32[$AsyncCtx55 + 4 >> 2] = $0; //@line 12905
   sp = STACKTOP; //@line 12906
   STACKTOP = sp; //@line 12907
   return;
  }
 case 7:
  {
   HEAP32[$AsyncCtx51 >> 2] = 283; //@line 12911
   HEAP32[$AsyncCtx51 + 4 >> 2] = $0; //@line 12913
   sp = STACKTOP; //@line 12914
   STACKTOP = sp; //@line 12915
   return;
  }
 case 9:
  {
   HEAP32[$AsyncCtx47 >> 2] = 284; //@line 12919
   HEAP32[$AsyncCtx47 + 4 >> 2] = $0; //@line 12921
   sp = STACKTOP; //@line 12922
   STACKTOP = sp; //@line 12923
   return;
  }
 case 11:
  {
   HEAP32[$AsyncCtx43 >> 2] = 285; //@line 12927
   HEAP32[$AsyncCtx43 + 4 >> 2] = $0; //@line 12929
   sp = STACKTOP; //@line 12930
   STACKTOP = sp; //@line 12931
   return;
  }
 case 13:
  {
   HEAP32[$AsyncCtx39 >> 2] = 286; //@line 12935
   HEAP32[$AsyncCtx39 + 4 >> 2] = $0; //@line 12937
   sp = STACKTOP; //@line 12938
   STACKTOP = sp; //@line 12939
   return;
  }
 case 15:
  {
   HEAP32[$AsyncCtx35 >> 2] = 287; //@line 12943
   HEAP32[$AsyncCtx35 + 4 >> 2] = $0; //@line 12945
   sp = STACKTOP; //@line 12946
   STACKTOP = sp; //@line 12947
   return;
  }
 case 17:
  {
   HEAP32[$AsyncCtx31 >> 2] = 288; //@line 12951
   HEAP32[$AsyncCtx31 + 4 >> 2] = $0; //@line 12953
   sp = STACKTOP; //@line 12954
   STACKTOP = sp; //@line 12955
   return;
  }
 case 19:
  {
   HEAP32[$AsyncCtx27 >> 2] = 289; //@line 12959
   HEAP32[$AsyncCtx27 + 4 >> 2] = $0; //@line 12961
   sp = STACKTOP; //@line 12962
   STACKTOP = sp; //@line 12963
   return;
  }
 case 21:
  {
   HEAP32[$AsyncCtx23 >> 2] = 290; //@line 12967
   HEAP32[$AsyncCtx23 + 4 >> 2] = $0; //@line 12969
   sp = STACKTOP; //@line 12970
   STACKTOP = sp; //@line 12971
   return;
  }
 case 23:
  {
   HEAP32[$AsyncCtx19 >> 2] = 291; //@line 12975
   HEAP32[$AsyncCtx19 + 4 >> 2] = $0; //@line 12977
   sp = STACKTOP; //@line 12978
   STACKTOP = sp; //@line 12979
   return;
  }
 case 25:
  {
   HEAP32[$AsyncCtx15 >> 2] = 292; //@line 12983
   HEAP32[$AsyncCtx15 + 4 >> 2] = $0; //@line 12985
   sp = STACKTOP; //@line 12986
   STACKTOP = sp; //@line 12987
   return;
  }
 case 27:
  {
   HEAP32[$AsyncCtx11 >> 2] = 293; //@line 12991
   HEAP32[$AsyncCtx11 + 4 >> 2] = $0; //@line 12993
   sp = STACKTOP; //@line 12994
   STACKTOP = sp; //@line 12995
   return;
  }
 case 29:
  {
   HEAP32[$AsyncCtx7 >> 2] = 294; //@line 12999
   HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 13001
   sp = STACKTOP; //@line 13002
   STACKTOP = sp; //@line 13003
   return;
  }
 case 31:
  {
   HEAP32[$AsyncCtx3 >> 2] = 295; //@line 13007
   HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 13009
   sp = STACKTOP; //@line 13010
   STACKTOP = sp; //@line 13011
   return;
  }
 case 33:
  {
   HEAP32[$AsyncCtx >> 2] = 296; //@line 13015
   HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 13017
   sp = STACKTOP; //@line 13018
   STACKTOP = sp; //@line 13019
   return;
  }
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_82($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $53 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $61 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 4751
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 4753
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4755
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4757
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4759
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4761
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 4763
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 4765
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 4767
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 4769
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 4771
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 4775
 $24 = HEAP32[HEAP32[$0 + 44 >> 2] >> 2] | 0; //@line 4776
 if ($24 | 0) {
  $27 = HEAP32[$24 + 8 >> 2] | 0; //@line 4780
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(44) | 0; //@line 4781
  FUNCTION_TABLE_vi[$27 & 511]($20); //@line 4782
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 180; //@line 4785
   $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 4786
   HEAP32[$28 >> 2] = $2; //@line 4787
   $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 4788
   HEAP32[$29 >> 2] = $4; //@line 4789
   $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 4790
   HEAP32[$30 >> 2] = $8; //@line 4791
   $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 4792
   HEAP32[$31 >> 2] = $10; //@line 4793
   $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 4794
   HEAP32[$32 >> 2] = $12; //@line 4795
   $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 4796
   HEAP32[$33 >> 2] = $16; //@line 4797
   $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 4798
   HEAP32[$34 >> 2] = $AsyncRetVal; //@line 4799
   $35 = $ReallocAsyncCtx7 + 32 | 0; //@line 4800
   HEAP32[$35 >> 2] = $18; //@line 4801
   $36 = $ReallocAsyncCtx7 + 36 | 0; //@line 4802
   HEAP32[$36 >> 2] = $6; //@line 4803
   $37 = $ReallocAsyncCtx7 + 40 | 0; //@line 4804
   HEAP32[$37 >> 2] = $14; //@line 4805
   sp = STACKTOP; //@line 4806
   return;
  }
  ___async_unwind = 0; //@line 4809
  HEAP32[$ReallocAsyncCtx7 >> 2] = 180; //@line 4810
  $28 = $ReallocAsyncCtx7 + 4 | 0; //@line 4811
  HEAP32[$28 >> 2] = $2; //@line 4812
  $29 = $ReallocAsyncCtx7 + 8 | 0; //@line 4813
  HEAP32[$29 >> 2] = $4; //@line 4814
  $30 = $ReallocAsyncCtx7 + 12 | 0; //@line 4815
  HEAP32[$30 >> 2] = $8; //@line 4816
  $31 = $ReallocAsyncCtx7 + 16 | 0; //@line 4817
  HEAP32[$31 >> 2] = $10; //@line 4818
  $32 = $ReallocAsyncCtx7 + 20 | 0; //@line 4819
  HEAP32[$32 >> 2] = $12; //@line 4820
  $33 = $ReallocAsyncCtx7 + 24 | 0; //@line 4821
  HEAP32[$33 >> 2] = $16; //@line 4822
  $34 = $ReallocAsyncCtx7 + 28 | 0; //@line 4823
  HEAP32[$34 >> 2] = $AsyncRetVal; //@line 4824
  $35 = $ReallocAsyncCtx7 + 32 | 0; //@line 4825
  HEAP32[$35 >> 2] = $18; //@line 4826
  $36 = $ReallocAsyncCtx7 + 36 | 0; //@line 4827
  HEAP32[$36 >> 2] = $6; //@line 4828
  $37 = $ReallocAsyncCtx7 + 40 | 0; //@line 4829
  HEAP32[$37 >> 2] = $14; //@line 4830
  sp = STACKTOP; //@line 4831
  return;
 }
 $38 = ($AsyncRetVal | 0) == 0; //@line 4834
 $39 = HEAP32[$18 >> 2] | 0; //@line 4835
 if ($39 | 0) {
  $42 = HEAP32[$39 + 8 >> 2] | 0; //@line 4839
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 4840
  FUNCTION_TABLE_vi[$42 & 511]($16); //@line 4841
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 4844
   $43 = $ReallocAsyncCtx8 + 4 | 0; //@line 4845
   HEAP32[$43 >> 2] = $2; //@line 4846
   $44 = $ReallocAsyncCtx8 + 8 | 0; //@line 4847
   HEAP32[$44 >> 2] = $4; //@line 4848
   $45 = $ReallocAsyncCtx8 + 12 | 0; //@line 4849
   HEAP32[$45 >> 2] = $8; //@line 4850
   $46 = $ReallocAsyncCtx8 + 16 | 0; //@line 4851
   HEAP32[$46 >> 2] = $10; //@line 4852
   $47 = $ReallocAsyncCtx8 + 20 | 0; //@line 4853
   HEAP32[$47 >> 2] = $12; //@line 4854
   $48 = $ReallocAsyncCtx8 + 24 | 0; //@line 4855
   $$expand_i1_val = $38 & 1; //@line 4856
   HEAP8[$48 >> 0] = $$expand_i1_val; //@line 4857
   $49 = $ReallocAsyncCtx8 + 28 | 0; //@line 4858
   HEAP32[$49 >> 2] = $6; //@line 4859
   $50 = $ReallocAsyncCtx8 + 32 | 0; //@line 4860
   HEAP32[$50 >> 2] = $14; //@line 4861
   sp = STACKTOP; //@line 4862
   return;
  }
  ___async_unwind = 0; //@line 4865
  HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 4866
  $43 = $ReallocAsyncCtx8 + 4 | 0; //@line 4867
  HEAP32[$43 >> 2] = $2; //@line 4868
  $44 = $ReallocAsyncCtx8 + 8 | 0; //@line 4869
  HEAP32[$44 >> 2] = $4; //@line 4870
  $45 = $ReallocAsyncCtx8 + 12 | 0; //@line 4871
  HEAP32[$45 >> 2] = $8; //@line 4872
  $46 = $ReallocAsyncCtx8 + 16 | 0; //@line 4873
  HEAP32[$46 >> 2] = $10; //@line 4874
  $47 = $ReallocAsyncCtx8 + 20 | 0; //@line 4875
  HEAP32[$47 >> 2] = $12; //@line 4876
  $48 = $ReallocAsyncCtx8 + 24 | 0; //@line 4877
  $$expand_i1_val = $38 & 1; //@line 4878
  HEAP8[$48 >> 0] = $$expand_i1_val; //@line 4879
  $49 = $ReallocAsyncCtx8 + 28 | 0; //@line 4880
  HEAP32[$49 >> 2] = $6; //@line 4881
  $50 = $ReallocAsyncCtx8 + 32 | 0; //@line 4882
  HEAP32[$50 >> 2] = $14; //@line 4883
  sp = STACKTOP; //@line 4884
  return;
 }
 if ($38) {
  HEAP8[8676] = 1; //@line 4888
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 4889
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 4890
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 4893
   $67 = $ReallocAsyncCtx13 + 4 | 0; //@line 4894
   HEAP32[$67 >> 2] = $14; //@line 4895
   $68 = $ReallocAsyncCtx13 + 8 | 0; //@line 4896
   HEAP32[$68 >> 2] = $6; //@line 4897
   sp = STACKTOP; //@line 4898
   return;
  }
  ___async_unwind = 0; //@line 4901
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 4902
  $67 = $ReallocAsyncCtx13 + 4 | 0; //@line 4903
  HEAP32[$67 >> 2] = $14; //@line 4904
  $68 = $ReallocAsyncCtx13 + 8 | 0; //@line 4905
  HEAP32[$68 >> 2] = $6; //@line 4906
  sp = STACKTOP; //@line 4907
  return;
 }
 $51 = HEAP32[$12 >> 2] | 0; //@line 4910
 if ($51 | 0) {
  __ZdlPv($51); //@line 4913
 }
 $53 = HEAP32[$10 >> 2] | 0; //@line 4915
 if ($53 | 0) {
  $56 = HEAP32[$53 + 8 >> 2] | 0; //@line 4919
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 4920
  FUNCTION_TABLE_vi[$56 & 511]($8); //@line 4921
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 4924
   $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 4925
   HEAP32[$57 >> 2] = $2; //@line 4926
   $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 4927
   HEAP32[$58 >> 2] = $4; //@line 4928
   $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 4929
   HEAP32[$59 >> 2] = $6; //@line 4930
   sp = STACKTOP; //@line 4931
   return;
  }
  ___async_unwind = 0; //@line 4934
  HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 4935
  $57 = $ReallocAsyncCtx9 + 4 | 0; //@line 4936
  HEAP32[$57 >> 2] = $2; //@line 4937
  $58 = $ReallocAsyncCtx9 + 8 | 0; //@line 4938
  HEAP32[$58 >> 2] = $4; //@line 4939
  $59 = $ReallocAsyncCtx9 + 12 | 0; //@line 4940
  HEAP32[$59 >> 2] = $6; //@line 4941
  sp = STACKTOP; //@line 4942
  return;
 }
 $61 = HEAP32[$2 + 28 >> 2] | 0; //@line 4946
 if (!$61) {
  __ZdlPv($2); //@line 4949
  HEAP32[___async_retval >> 2] = -3007; //@line 4951
  return;
 }
 $64 = HEAP32[$61 + 8 >> 2] | 0; //@line 4955
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 4956
 FUNCTION_TABLE_vi[$64 & 511]($4); //@line 4957
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 4960
  $65 = $ReallocAsyncCtx10 + 4 | 0; //@line 4961
  HEAP32[$65 >> 2] = $2; //@line 4962
  $66 = $ReallocAsyncCtx10 + 8 | 0; //@line 4963
  HEAP32[$66 >> 2] = $6; //@line 4964
  sp = STACKTOP; //@line 4965
  return;
 }
 ___async_unwind = 0; //@line 4968
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 4969
 $65 = $ReallocAsyncCtx10 + 4 | 0; //@line 4970
 HEAP32[$65 >> 2] = $2; //@line 4971
 $66 = $ReallocAsyncCtx10 + 8 | 0; //@line 4972
 HEAP32[$66 >> 2] = $6; //@line 4973
 sp = STACKTOP; //@line 4974
 return;
}
function ___floatscan($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107127 = 0, $$0113 = 0, $$0114 = 0.0, $$1$lcssa = 0, $$1108 = 0, $$1128 = 0, $$2 = 0, $$2109125 = 0, $$3110 = 0, $$3126 = 0, $$4 = 0, $$4111 = 0, $$5 = 0, $$6 = 0, $$in = 0, $102 = 0, $118 = 0, $12 = 0, $126 = 0, $18 = 0, $19 = 0, $3 = 0, $32 = 0, $39 = 0, $4 = 0, $42 = 0, $45 = 0, $5 = 0, $63 = 0, $70 = 0, $72 = 0, $80 = 0, $85 = 0, $93 = 0, label = 0;
 switch ($1 | 0) {
 case 0:
  {
   $$0105$ph = -149; //@line 7509
   $$0106$ph = 24; //@line 7509
   label = 4; //@line 7510
   break;
  }
 case 1:
  {
   $$0105$ph = -1074; //@line 7514
   $$0106$ph = 53; //@line 7514
   label = 4; //@line 7515
   break;
  }
 case 2:
  {
   $$0105$ph = -1074; //@line 7519
   $$0106$ph = 53; //@line 7519
   label = 4; //@line 7520
   break;
  }
 default:
  {
   $$0114 = 0.0; //@line 7524
  }
 }
 L4 : do {
  if ((label | 0) == 4) {
   $3 = $0 + 4 | 0; //@line 7529
   $4 = $0 + 100 | 0; //@line 7530
   do {
    $5 = HEAP32[$3 >> 2] | 0; //@line 7532
    if ($5 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $5 + 1; //@line 7537
     $12 = HEAPU8[$5 >> 0] | 0; //@line 7540
    } else {
     $12 = ___shgetc($0) | 0; //@line 7543
    }
   } while ((_isspace($12) | 0) != 0);
   L13 : do {
    switch ($12 | 0) {
    case 43:
    case 45:
     {
      $18 = 1 - ((($12 | 0) == 45 & 1) << 1) | 0; //@line 7557
      $19 = HEAP32[$3 >> 2] | 0; //@line 7558
      if ($19 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $19 + 1; //@line 7563
       $$0 = HEAPU8[$19 >> 0] | 0; //@line 7566
       $$0113 = $18; //@line 7566
       break L13;
      } else {
       $$0 = ___shgetc($0) | 0; //@line 7570
       $$0113 = $18; //@line 7570
       break L13;
      }
      break;
     }
    default:
     {
      $$0 = $12; //@line 7576
      $$0113 = 1; //@line 7576
     }
    }
   } while (0);
   $$0107127 = 0; //@line 7580
   $$1128 = $$0; //@line 7580
   while (1) {
    if (($$1128 | 32 | 0) != (HEAP8[4268 + $$0107127 >> 0] | 0)) {
     $$0107$lcssa = $$0107127; //@line 7588
     $$1$lcssa = $$1128; //@line 7588
     break;
    }
    do {
     if ($$0107127 >>> 0 < 7) {
      $32 = HEAP32[$3 >> 2] | 0; //@line 7594
      if ($32 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $32 + 1; //@line 7599
       $$2 = HEAPU8[$32 >> 0] | 0; //@line 7602
       break;
      } else {
       $$2 = ___shgetc($0) | 0; //@line 7606
       break;
      }
     } else {
      $$2 = $$1128; //@line 7610
     }
    } while (0);
    $39 = $$0107127 + 1 | 0; //@line 7613
    if ($39 >>> 0 < 8) {
     $$0107127 = $39; //@line 7616
     $$1128 = $$2; //@line 7616
    } else {
     $$0107$lcssa = $39; //@line 7618
     $$1$lcssa = $$2; //@line 7618
     break;
    }
   }
   L29 : do {
    switch ($$0107$lcssa | 0) {
    case 8:
     {
      break;
     }
    case 3:
     {
      label = 23; //@line 7628
      break;
     }
    default:
     {
      $42 = ($2 | 0) != 0; //@line 7633
      if ($42 & $$0107$lcssa >>> 0 > 3) {
       if (($$0107$lcssa | 0) == 8) {
        break L29;
       } else {
        label = 23; //@line 7640
        break L29;
       }
      }
      L34 : do {
       if (!$$0107$lcssa) {
        $$2109125 = 0; //@line 7647
        $$3126 = $$1$lcssa; //@line 7647
        while (1) {
         if (($$3126 | 32 | 0) != (HEAP8[5051 + $$2109125 >> 0] | 0)) {
          $$3110 = $$2109125; //@line 7655
          $$5 = $$3126; //@line 7655
          break L34;
         }
         do {
          if ($$2109125 >>> 0 < 2) {
           $63 = HEAP32[$3 >> 2] | 0; //@line 7661
           if ($63 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $63 + 1; //@line 7666
            $$4 = HEAPU8[$63 >> 0] | 0; //@line 7669
            break;
           } else {
            $$4 = ___shgetc($0) | 0; //@line 7673
            break;
           }
          } else {
           $$4 = $$3126; //@line 7677
          }
         } while (0);
         $70 = $$2109125 + 1 | 0; //@line 7680
         if ($70 >>> 0 < 3) {
          $$2109125 = $70; //@line 7683
          $$3126 = $$4; //@line 7683
         } else {
          $$3110 = $70; //@line 7685
          $$5 = $$4; //@line 7685
          break;
         }
        }
       } else {
        $$3110 = $$0107$lcssa; //@line 7690
        $$5 = $$1$lcssa; //@line 7690
       }
      } while (0);
      switch ($$3110 | 0) {
      case 3:
       {
        $72 = HEAP32[$3 >> 2] | 0; //@line 7695
        if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
         HEAP32[$3 >> 2] = $72 + 1; //@line 7700
         $80 = HEAPU8[$72 >> 0] | 0; //@line 7703
        } else {
         $80 = ___shgetc($0) | 0; //@line 7706
        }
        if (($80 | 0) == 40) {
         $$4111 = 1; //@line 7710
        } else {
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$0114 = nan; //@line 7715
          break L4;
         }
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7720
         $$0114 = nan; //@line 7721
         break L4;
        }
        while (1) {
         $85 = HEAP32[$3 >> 2] | 0; //@line 7725
         if ($85 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $85 + 1; //@line 7730
          $93 = HEAPU8[$85 >> 0] | 0; //@line 7733
         } else {
          $93 = ___shgetc($0) | 0; //@line 7736
         }
         if (!(($93 + -48 | 0) >>> 0 < 10 | ($93 + -65 | 0) >>> 0 < 26)) {
          if (!(($93 | 0) == 95 | ($93 + -97 | 0) >>> 0 < 26)) {
           break;
          }
         }
         $$4111 = $$4111 + 1 | 0; //@line 7753
        }
        if (($93 | 0) == 41) {
         $$0114 = nan; //@line 7757
         break L4;
        }
        $102 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7761
        if (!$102) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7765
        }
        if (!$42) {
         HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7769
         ___shlim($0, 0); //@line 7770
         $$0114 = 0.0; //@line 7771
         break L4;
        }
        if (!$$4111) {
         $$0114 = nan; //@line 7776
         break L4;
        } else {
         $$in = $$4111; //@line 7779
        }
        while (1) {
         $$in = $$in + -1 | 0; //@line 7782
         if (!$102) {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7786
         }
         if (!$$in) {
          $$0114 = nan; //@line 7790
          break L4;
         }
        }
        break;
       }
      case 0:
       {
        if (($$5 | 0) == 48) {
         $118 = HEAP32[$3 >> 2] | 0; //@line 7801
         if ($118 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $118 + 1; //@line 7806
          $126 = HEAPU8[$118 >> 0] | 0; //@line 7809
         } else {
          $126 = ___shgetc($0) | 0; //@line 7812
         }
         if (($126 | 32 | 0) == 120) {
          $$0114 = +_hexfloat($0, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7818
          break L4;
         }
         if (!(HEAP32[$4 >> 2] | 0)) {
          $$6 = 48; //@line 7824
         } else {
          HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7828
          $$6 = 48; //@line 7829
         }
        } else {
         $$6 = $$5; //@line 7832
        }
        $$0114 = +_decfloat($0, $$6, $$0106$ph, $$0105$ph, $$0113, $2); //@line 7835
        break L4;
        break;
       }
      default:
       {
        if (HEAP32[$4 >> 2] | 0) {
         HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7845
        }
        HEAP32[(___errno_location() | 0) >> 2] = 22; //@line 7848
        ___shlim($0, 0); //@line 7849
        $$0114 = 0.0; //@line 7850
        break L4;
       }
      }
     }
    }
   } while (0);
   if ((label | 0) == 23) {
    $45 = (HEAP32[$4 >> 2] | 0) == 0; //@line 7859
    if (!$45) {
     HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7863
    }
    if (($2 | 0) != 0 & $$0107$lcssa >>> 0 > 3) {
     $$1108 = $$0107$lcssa; //@line 7869
     do {
      if (!$45) {
       HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1; //@line 7874
      }
      $$1108 = $$1108 + -1 | 0; //@line 7876
     } while ($$1108 >>> 0 > 3);
    }
   }
   $$0114 = +($$0113 | 0) * inf; //@line 7889
  }
 } while (0);
 return +$$0114;
}
function _try_realloc_chunk($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1272 = 0, $$1275 = 0, $$2 = 0, $$3 = 0, $$pre$phiZ2D = 0, $101 = 0, $103 = 0, $106 = 0, $108 = 0, $11 = 0, $111 = 0, $114 = 0, $115 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $121 = 0, $123 = 0, $124 = 0, $129 = 0, $130 = 0, $144 = 0, $147 = 0, $148 = 0, $154 = 0, $165 = 0, $168 = 0, $175 = 0, $2 = 0, $24 = 0, $26 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $40 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $54 = 0, $6 = 0, $60 = 0, $67 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $8 = 0, $81 = 0, $83 = 0, $96 = 0, $storemerge = 0, $storemerge4 = 0;
 $2 = $0 + 4 | 0; //@line 3211
 $3 = HEAP32[$2 >> 2] | 0; //@line 3212
 $4 = $3 & -8; //@line 3213
 $5 = $0 + $4 | 0; //@line 3214
 $6 = HEAP32[1961] | 0; //@line 3215
 $8 = $3 & 3; //@line 3217
 if (!(($8 | 0) != 1 & $6 >>> 0 <= $0 >>> 0 & $5 >>> 0 > $0 >>> 0)) {
  _abort(); //@line 3223
 }
 $11 = $5 + 4 | 0; //@line 3226
 $12 = HEAP32[$11 >> 2] | 0; //@line 3227
 if (!($12 & 1)) {
  _abort(); //@line 3231
 }
 if (!$8) {
  if ($1 >>> 0 < 256) {
   $$2 = 0; //@line 3238
   return $$2 | 0; //@line 3239
  }
  if ($4 >>> 0 >= ($1 + 4 | 0) >>> 0) {
   if (($4 - $1 | 0) >>> 0 <= HEAP32[2077] << 1 >>> 0) {
    $$2 = $0; //@line 3249
    return $$2 | 0; //@line 3250
   }
  }
  $$2 = 0; //@line 3253
  return $$2 | 0; //@line 3254
 }
 if ($4 >>> 0 >= $1 >>> 0) {
  $24 = $4 - $1 | 0; //@line 3258
  if ($24 >>> 0 <= 15) {
   $$2 = $0; //@line 3261
   return $$2 | 0; //@line 3262
  }
  $26 = $0 + $1 | 0; //@line 3264
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3268
  HEAP32[$26 + 4 >> 2] = $24 | 3; //@line 3271
  HEAP32[$11 >> 2] = HEAP32[$11 >> 2] | 1; //@line 3274
  _dispose_chunk($26, $24); //@line 3275
  $$2 = $0; //@line 3276
  return $$2 | 0; //@line 3277
 }
 if ((HEAP32[1963] | 0) == ($5 | 0)) {
  $37 = (HEAP32[1960] | 0) + $4 | 0; //@line 3283
  $39 = $37 - $1 | 0; //@line 3285
  $40 = $0 + $1 | 0; //@line 3286
  if ($37 >>> 0 <= $1 >>> 0) {
   $$2 = 0; //@line 3288
   return $$2 | 0; //@line 3289
  }
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3296
  HEAP32[$40 + 4 >> 2] = $39 | 1; //@line 3297
  HEAP32[1963] = $40; //@line 3298
  HEAP32[1960] = $39; //@line 3299
  $$2 = $0; //@line 3300
  return $$2 | 0; //@line 3301
 }
 if ((HEAP32[1962] | 0) == ($5 | 0)) {
  $49 = (HEAP32[1959] | 0) + $4 | 0; //@line 3307
  if ($49 >>> 0 < $1 >>> 0) {
   $$2 = 0; //@line 3310
   return $$2 | 0; //@line 3311
  }
  $51 = $49 - $1 | 0; //@line 3313
  if ($51 >>> 0 > 15) {
   $53 = $0 + $1 | 0; //@line 3316
   $54 = $0 + $49 | 0; //@line 3317
   HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3321
   HEAP32[$53 + 4 >> 2] = $51 | 1; //@line 3324
   HEAP32[$54 >> 2] = $51; //@line 3325
   $60 = $54 + 4 | 0; //@line 3326
   HEAP32[$60 >> 2] = HEAP32[$60 >> 2] & -2; //@line 3329
   $storemerge = $53; //@line 3330
   $storemerge4 = $51; //@line 3330
  } else {
   HEAP32[$2 >> 2] = $3 & 1 | $49 | 2; //@line 3335
   $67 = $0 + $49 + 4 | 0; //@line 3337
   HEAP32[$67 >> 2] = HEAP32[$67 >> 2] | 1; //@line 3340
   $storemerge = 0; //@line 3341
   $storemerge4 = 0; //@line 3341
  }
  HEAP32[1959] = $storemerge4; //@line 3343
  HEAP32[1962] = $storemerge; //@line 3344
  $$2 = $0; //@line 3345
  return $$2 | 0; //@line 3346
 }
 if ($12 & 2 | 0) {
  $$2 = 0; //@line 3351
  return $$2 | 0; //@line 3352
 }
 $73 = ($12 & -8) + $4 | 0; //@line 3355
 if ($73 >>> 0 < $1 >>> 0) {
  $$2 = 0; //@line 3358
  return $$2 | 0; //@line 3359
 }
 $75 = $73 - $1 | 0; //@line 3361
 $76 = $12 >>> 3; //@line 3362
 L49 : do {
  if ($12 >>> 0 < 256) {
   $79 = HEAP32[$5 + 8 >> 2] | 0; //@line 3367
   $81 = HEAP32[$5 + 12 >> 2] | 0; //@line 3369
   $83 = 7868 + ($76 << 1 << 2) | 0; //@line 3371
   if (($79 | 0) != ($83 | 0)) {
    if ($6 >>> 0 > $79 >>> 0) {
     _abort(); //@line 3376
    }
    if ((HEAP32[$79 + 12 >> 2] | 0) != ($5 | 0)) {
     _abort(); //@line 3383
    }
   }
   if (($81 | 0) == ($79 | 0)) {
    HEAP32[1957] = HEAP32[1957] & ~(1 << $76); //@line 3393
    break;
   }
   if (($81 | 0) == ($83 | 0)) {
    $$pre$phiZ2D = $81 + 8 | 0; //@line 3399
   } else {
    if ($6 >>> 0 > $81 >>> 0) {
     _abort(); //@line 3403
    }
    $96 = $81 + 8 | 0; //@line 3406
    if ((HEAP32[$96 >> 2] | 0) == ($5 | 0)) {
     $$pre$phiZ2D = $96; //@line 3410
    } else {
     _abort(); //@line 3412
    }
   }
   HEAP32[$79 + 12 >> 2] = $81; //@line 3417
   HEAP32[$$pre$phiZ2D >> 2] = $79; //@line 3418
  } else {
   $101 = HEAP32[$5 + 24 >> 2] | 0; //@line 3421
   $103 = HEAP32[$5 + 12 >> 2] | 0; //@line 3423
   do {
    if (($103 | 0) == ($5 | 0)) {
     $114 = $5 + 16 | 0; //@line 3427
     $115 = $114 + 4 | 0; //@line 3428
     $116 = HEAP32[$115 >> 2] | 0; //@line 3429
     if (!$116) {
      $118 = HEAP32[$114 >> 2] | 0; //@line 3432
      if (!$118) {
       $$3 = 0; //@line 3435
       break;
      } else {
       $$1272 = $118; //@line 3438
       $$1275 = $114; //@line 3438
      }
     } else {
      $$1272 = $116; //@line 3441
      $$1275 = $115; //@line 3441
     }
     while (1) {
      $120 = $$1272 + 20 | 0; //@line 3444
      $121 = HEAP32[$120 >> 2] | 0; //@line 3445
      if ($121 | 0) {
       $$1272 = $121; //@line 3448
       $$1275 = $120; //@line 3448
       continue;
      }
      $123 = $$1272 + 16 | 0; //@line 3451
      $124 = HEAP32[$123 >> 2] | 0; //@line 3452
      if (!$124) {
       break;
      } else {
       $$1272 = $124; //@line 3457
       $$1275 = $123; //@line 3457
      }
     }
     if ($6 >>> 0 > $$1275 >>> 0) {
      _abort(); //@line 3462
     } else {
      HEAP32[$$1275 >> 2] = 0; //@line 3465
      $$3 = $$1272; //@line 3466
      break;
     }
    } else {
     $106 = HEAP32[$5 + 8 >> 2] | 0; //@line 3471
     if ($6 >>> 0 > $106 >>> 0) {
      _abort(); //@line 3474
     }
     $108 = $106 + 12 | 0; //@line 3477
     if ((HEAP32[$108 >> 2] | 0) != ($5 | 0)) {
      _abort(); //@line 3481
     }
     $111 = $103 + 8 | 0; //@line 3484
     if ((HEAP32[$111 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$108 >> 2] = $103; //@line 3488
      HEAP32[$111 >> 2] = $106; //@line 3489
      $$3 = $103; //@line 3490
      break;
     } else {
      _abort(); //@line 3493
     }
    }
   } while (0);
   if ($101 | 0) {
    $129 = HEAP32[$5 + 28 >> 2] | 0; //@line 3501
    $130 = 8132 + ($129 << 2) | 0; //@line 3502
    do {
     if ((HEAP32[$130 >> 2] | 0) == ($5 | 0)) {
      HEAP32[$130 >> 2] = $$3; //@line 3507
      if (!$$3) {
       HEAP32[1958] = HEAP32[1958] & ~(1 << $129); //@line 3514
       break L49;
      }
     } else {
      if ((HEAP32[1961] | 0) >>> 0 > $101 >>> 0) {
       _abort(); //@line 3521
      } else {
       HEAP32[$101 + 16 + (((HEAP32[$101 + 16 >> 2] | 0) != ($5 | 0) & 1) << 2) >> 2] = $$3; //@line 3529
       if (!$$3) {
        break L49;
       } else {
        break;
       }
      }
     }
    } while (0);
    $144 = HEAP32[1961] | 0; //@line 3539
    if ($144 >>> 0 > $$3 >>> 0) {
     _abort(); //@line 3542
    }
    HEAP32[$$3 + 24 >> 2] = $101; //@line 3546
    $147 = $5 + 16 | 0; //@line 3547
    $148 = HEAP32[$147 >> 2] | 0; //@line 3548
    do {
     if ($148 | 0) {
      if ($144 >>> 0 > $148 >>> 0) {
       _abort(); //@line 3554
      } else {
       HEAP32[$$3 + 16 >> 2] = $148; //@line 3558
       HEAP32[$148 + 24 >> 2] = $$3; //@line 3560
       break;
      }
     }
    } while (0);
    $154 = HEAP32[$147 + 4 >> 2] | 0; //@line 3566
    if ($154 | 0) {
     if ((HEAP32[1961] | 0) >>> 0 > $154 >>> 0) {
      _abort(); //@line 3572
     } else {
      HEAP32[$$3 + 20 >> 2] = $154; //@line 3576
      HEAP32[$154 + 24 >> 2] = $$3; //@line 3578
      break;
     }
    }
   }
  }
 } while (0);
 if ($75 >>> 0 < 16) {
  HEAP32[$2 >> 2] = $73 | $3 & 1 | 2; //@line 3590
  $165 = $0 + $73 + 4 | 0; //@line 3592
  HEAP32[$165 >> 2] = HEAP32[$165 >> 2] | 1; //@line 3595
  $$2 = $0; //@line 3596
  return $$2 | 0; //@line 3597
 } else {
  $168 = $0 + $1 | 0; //@line 3599
  HEAP32[$2 >> 2] = $3 & 1 | $1 | 2; //@line 3603
  HEAP32[$168 + 4 >> 2] = $75 | 3; //@line 3606
  $175 = $0 + $73 + 4 | 0; //@line 3608
  HEAP32[$175 >> 2] = HEAP32[$175 >> 2] | 1; //@line 3611
  _dispose_chunk($168, $75); //@line 3612
  $$2 = $0; //@line 3613
  return $$2 | 0; //@line 3614
 }
 return 0; //@line 3616
}
function _fmod($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27586 = 0, $$376$lcssa = 0, $$37683 = 0, $$lcssa = 0, $101 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $11 = 0, $110 = 0, $111 = 0, $116 = 0, $118 = 0, $12 = 0, $120 = 0, $123 = 0, $125 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $150 = 0, $153 = 0, $154 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $160 = 0, $18 = 0, $2 = 0, $20 = 0, $27 = 0.0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $41 = 0, $42 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $59 = 0, $6 = 0, $64 = 0, $65 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $97 = 0, $99 = 0, label = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9447
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9447
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9448
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9449
 $4 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9449
 $5 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9450
 $6 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 9451
 $8 = $6 & 2047; //@line 9453
 $9 = _bitshift64Lshr($4 | 0, $5 | 0, 52) | 0; //@line 9454
 $11 = $9 & 2047; //@line 9456
 $12 = $3 & -2147483648; //@line 9457
 $13 = _bitshift64Shl($4 | 0, $5 | 0, 1) | 0; //@line 9458
 $14 = tempRet0; //@line 9459
 L1 : do {
  if (($13 | 0) == 0 & ($14 | 0) == 0) {
   label = 3; //@line 9465
  } else {
   $18 = ___DOUBLE_BITS_563($1) | 0; //@line 9467
   $20 = tempRet0 & 2147483647; //@line 9469
   if (($8 | 0) == 2047 | ($20 >>> 0 > 2146435072 | ($20 | 0) == 2146435072 & $18 >>> 0 > 0)) {
    label = 3; //@line 9478
   } else {
    $29 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0; //@line 9480
    $30 = tempRet0; //@line 9481
    if (!($30 >>> 0 > $14 >>> 0 | ($30 | 0) == ($14 | 0) & $29 >>> 0 > $13 >>> 0)) {
     return +(($29 | 0) == ($13 | 0) & ($30 | 0) == ($14 | 0) ? $0 * 0.0 : $0);
    }
    if (!$8) {
     $41 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0; //@line 9497
     $42 = tempRet0; //@line 9498
     if (($42 | 0) > -1 | ($42 | 0) == -1 & $41 >>> 0 > 4294967295) {
      $$073100 = 0; //@line 9505
      $49 = $41; //@line 9505
      $50 = $42; //@line 9505
      while (1) {
       $48 = $$073100 + -1 | 0; //@line 9507
       $49 = _bitshift64Shl($49 | 0, $50 | 0, 1) | 0; //@line 9508
       $50 = tempRet0; //@line 9509
       if (!(($50 | 0) > -1 | ($50 | 0) == -1 & $49 >>> 0 > 4294967295)) {
        $$073$lcssa = $48; //@line 9518
        break;
       } else {
        $$073100 = $48; //@line 9516
       }
      }
     } else {
      $$073$lcssa = 0; //@line 9523
     }
     $59 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $$073$lcssa | 0) | 0; //@line 9526
     $$174 = $$073$lcssa; //@line 9528
     $87 = $59; //@line 9528
     $88 = tempRet0; //@line 9528
    } else {
     $$174 = $8; //@line 9532
     $87 = $2; //@line 9532
     $88 = $3 & 1048575 | 1048576; //@line 9532
    }
    if (!$11) {
     $64 = _bitshift64Shl($4 | 0, $5 | 0, 12) | 0; //@line 9536
     $65 = tempRet0; //@line 9537
     if (($65 | 0) > -1 | ($65 | 0) == -1 & $64 >>> 0 > 4294967295) {
      $$07194 = 0; //@line 9544
      $72 = $64; //@line 9544
      $73 = $65; //@line 9544
      while (1) {
       $71 = $$07194 + -1 | 0; //@line 9546
       $72 = _bitshift64Shl($72 | 0, $73 | 0, 1) | 0; //@line 9547
       $73 = tempRet0; //@line 9548
       if (!(($73 | 0) > -1 | ($73 | 0) == -1 & $72 >>> 0 > 4294967295)) {
        $$071$lcssa = $71; //@line 9557
        break;
       } else {
        $$07194 = $71; //@line 9555
       }
      }
     } else {
      $$071$lcssa = 0; //@line 9562
     }
     $82 = _bitshift64Shl($4 | 0, $5 | 0, 1 - $$071$lcssa | 0) | 0; //@line 9565
     $$172$ph = $$071$lcssa; //@line 9567
     $89 = $82; //@line 9567
     $90 = tempRet0; //@line 9567
    } else {
     $$172$ph = $11; //@line 9571
     $89 = $4; //@line 9571
     $90 = $5 & 1048575 | 1048576; //@line 9571
    }
    $91 = _i64Subtract($87 | 0, $88 | 0, $89 | 0, $90 | 0) | 0; //@line 9574
    $92 = tempRet0; //@line 9575
    $97 = ($92 | 0) > -1 | ($92 | 0) == -1 & $91 >>> 0 > 4294967295; //@line 9580
    L23 : do {
     if (($$174 | 0) > ($$172$ph | 0)) {
      $$27586 = $$174; //@line 9583
      $101 = $92; //@line 9583
      $156 = $97; //@line 9583
      $157 = $87; //@line 9583
      $158 = $88; //@line 9583
      $99 = $91; //@line 9583
      while (1) {
       if ($156) {
        if (($99 | 0) == 0 & ($101 | 0) == 0) {
         break;
        } else {
         $104 = $99; //@line 9592
         $105 = $101; //@line 9592
        }
       } else {
        $104 = $157; //@line 9595
        $105 = $158; //@line 9595
       }
       $106 = _bitshift64Shl($104 | 0, $105 | 0, 1) | 0; //@line 9597
       $107 = tempRet0; //@line 9598
       $108 = $$27586 + -1 | 0; //@line 9599
       $110 = _i64Subtract($106 | 0, $107 | 0, $89 | 0, $90 | 0) | 0; //@line 9601
       $111 = tempRet0; //@line 9602
       $116 = ($111 | 0) > -1 | ($111 | 0) == -1 & $110 >>> 0 > 4294967295; //@line 9607
       if (($108 | 0) > ($$172$ph | 0)) {
        $$27586 = $108; //@line 9609
        $101 = $111; //@line 9609
        $156 = $116; //@line 9609
        $157 = $106; //@line 9609
        $158 = $107; //@line 9609
        $99 = $110; //@line 9609
       } else {
        $$275$lcssa = $108; //@line 9611
        $$lcssa = $116; //@line 9611
        $118 = $110; //@line 9611
        $120 = $111; //@line 9611
        $159 = $106; //@line 9611
        $160 = $107; //@line 9611
        break L23;
       }
      }
      $$070 = $0 * 0.0; //@line 9616
      break L1;
     } else {
      $$275$lcssa = $$174; //@line 9619
      $$lcssa = $97; //@line 9619
      $118 = $91; //@line 9619
      $120 = $92; //@line 9619
      $159 = $87; //@line 9619
      $160 = $88; //@line 9619
     }
    } while (0);
    if ($$lcssa) {
     if (($118 | 0) == 0 & ($120 | 0) == 0) {
      $$070 = $0 * 0.0; //@line 9628
      break;
     } else {
      $123 = $120; //@line 9631
      $125 = $118; //@line 9631
     }
    } else {
     $123 = $160; //@line 9634
     $125 = $159; //@line 9634
    }
    if ($123 >>> 0 < 1048576 | ($123 | 0) == 1048576 & $125 >>> 0 < 0) {
     $$37683 = $$275$lcssa; //@line 9642
     $130 = $125; //@line 9642
     $131 = $123; //@line 9642
     while (1) {
      $132 = _bitshift64Shl($130 | 0, $131 | 0, 1) | 0; //@line 9644
      $133 = tempRet0; //@line 9645
      $134 = $$37683 + -1 | 0; //@line 9646
      if ($133 >>> 0 < 1048576 | ($133 | 0) == 1048576 & $132 >>> 0 < 0) {
       $$37683 = $134; //@line 9653
       $130 = $132; //@line 9653
       $131 = $133; //@line 9653
      } else {
       $$376$lcssa = $134; //@line 9655
       $141 = $132; //@line 9655
       $142 = $133; //@line 9655
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa; //@line 9660
     $141 = $125; //@line 9660
     $142 = $123; //@line 9660
    }
    if (($$376$lcssa | 0) > 0) {
     $143 = _i64Add($141 | 0, $142 | 0, 0, -1048576) | 0; //@line 9664
     $144 = tempRet0; //@line 9665
     $145 = _bitshift64Shl($$376$lcssa | 0, 0, 52) | 0; //@line 9666
     $153 = $144 | tempRet0; //@line 9670
     $154 = $143 | $145; //@line 9670
    } else {
     $150 = _bitshift64Lshr($141 | 0, $142 | 0, 1 - $$376$lcssa | 0) | 0; //@line 9673
     $153 = tempRet0; //@line 9675
     $154 = $150; //@line 9675
    }
    HEAP32[tempDoublePtr >> 2] = $154; //@line 9678
    HEAP32[tempDoublePtr + 4 >> 2] = $153 | $12; //@line 9678
    $$070 = +HEAPF64[tempDoublePtr >> 3]; //@line 9679
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $27 = $0 * $1; //@line 9684
  $$070 = $27 / $27; //@line 9686
 }
 return +$$070;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_198($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $51 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15762
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15764
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15766
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15768
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15770
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15772
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15774
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15776
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15778
 HEAP32[$AsyncRetVal >> 2] = 0; //@line 15779
 HEAP32[$AsyncRetVal + 4 >> 2] = 0; //@line 15779
 HEAP32[$AsyncRetVal + 8 >> 2] = 0; //@line 15779
 HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 15779
 HEAP32[$8 >> 2] = $AsyncRetVal; //@line 15780
 $17 = $6 + 32 | 0; //@line 15782
 do {
  if (($AsyncRetVal | 0) == ($17 | 0)) {
   $51 = $AsyncRetVal; //@line 15786
   $53 = $AsyncRetVal; //@line 15786
  } else {
   $19 = $AsyncRetVal + 12 | 0; //@line 15788
   $20 = HEAP32[$19 >> 2] | 0; //@line 15789
   if ($20 | 0) {
    $23 = HEAP32[$20 + 8 >> 2] | 0; //@line 15793
    $ReallocAsyncCtx8 = _emscripten_realloc_async_context(44) | 0; //@line 15794
    FUNCTION_TABLE_vi[$23 & 511]($AsyncRetVal); //@line 15795
    if (___async) {
     HEAP32[$ReallocAsyncCtx8 >> 2] = 226; //@line 15798
     $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 15799
     HEAP32[$24 >> 2] = $12; //@line 15800
     $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 15801
     HEAP32[$25 >> 2] = $2; //@line 15802
     $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 15803
     HEAP32[$26 >> 2] = $4; //@line 15804
     $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 15805
     HEAP32[$27 >> 2] = $6; //@line 15806
     $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 15807
     HEAP32[$28 >> 2] = $AsyncRetVal; //@line 15808
     $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 15809
     HEAP32[$29 >> 2] = $17; //@line 15810
     $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 15811
     HEAP32[$30 >> 2] = $10; //@line 15812
     $31 = $ReallocAsyncCtx8 + 32 | 0; //@line 15813
     HEAP32[$31 >> 2] = $14; //@line 15814
     $32 = $ReallocAsyncCtx8 + 36 | 0; //@line 15815
     HEAP32[$32 >> 2] = $19; //@line 15816
     $33 = $ReallocAsyncCtx8 + 40 | 0; //@line 15817
     HEAP32[$33 >> 2] = $8; //@line 15818
     sp = STACKTOP; //@line 15819
     return;
    }
    ___async_unwind = 0; //@line 15822
    HEAP32[$ReallocAsyncCtx8 >> 2] = 226; //@line 15823
    $24 = $ReallocAsyncCtx8 + 4 | 0; //@line 15824
    HEAP32[$24 >> 2] = $12; //@line 15825
    $25 = $ReallocAsyncCtx8 + 8 | 0; //@line 15826
    HEAP32[$25 >> 2] = $2; //@line 15827
    $26 = $ReallocAsyncCtx8 + 12 | 0; //@line 15828
    HEAP32[$26 >> 2] = $4; //@line 15829
    $27 = $ReallocAsyncCtx8 + 16 | 0; //@line 15830
    HEAP32[$27 >> 2] = $6; //@line 15831
    $28 = $ReallocAsyncCtx8 + 20 | 0; //@line 15832
    HEAP32[$28 >> 2] = $AsyncRetVal; //@line 15833
    $29 = $ReallocAsyncCtx8 + 24 | 0; //@line 15834
    HEAP32[$29 >> 2] = $17; //@line 15835
    $30 = $ReallocAsyncCtx8 + 28 | 0; //@line 15836
    HEAP32[$30 >> 2] = $10; //@line 15837
    $31 = $ReallocAsyncCtx8 + 32 | 0; //@line 15838
    HEAP32[$31 >> 2] = $14; //@line 15839
    $32 = $ReallocAsyncCtx8 + 36 | 0; //@line 15840
    HEAP32[$32 >> 2] = $19; //@line 15841
    $33 = $ReallocAsyncCtx8 + 40 | 0; //@line 15842
    HEAP32[$33 >> 2] = $8; //@line 15843
    sp = STACKTOP; //@line 15844
    return;
   }
   $34 = $6 + 44 | 0; //@line 15847
   $35 = HEAP32[$34 >> 2] | 0; //@line 15848
   if (!$35) {
    HEAP32[$19 >> 2] = 0; //@line 15851
    $$pre85 = HEAP32[$8 >> 2] | 0; //@line 15852
    $51 = $$pre85; //@line 15854
    $53 = $$pre85; //@line 15854
    break;
   }
   $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 15858
   $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 15859
   FUNCTION_TABLE_vii[$38 & 7]($AsyncRetVal, $17); //@line 15860
   if (___async) {
    HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 15863
    $39 = $ReallocAsyncCtx9 + 4 | 0; //@line 15864
    HEAP32[$39 >> 2] = $34; //@line 15865
    $40 = $ReallocAsyncCtx9 + 8 | 0; //@line 15866
    HEAP32[$40 >> 2] = $19; //@line 15867
    $41 = $ReallocAsyncCtx9 + 12 | 0; //@line 15868
    HEAP32[$41 >> 2] = $8; //@line 15869
    $42 = $ReallocAsyncCtx9 + 16 | 0; //@line 15870
    HEAP32[$42 >> 2] = $10; //@line 15871
    $43 = $ReallocAsyncCtx9 + 20 | 0; //@line 15872
    HEAP32[$43 >> 2] = $12; //@line 15873
    $44 = $ReallocAsyncCtx9 + 24 | 0; //@line 15874
    HEAP32[$44 >> 2] = $14; //@line 15875
    $45 = $ReallocAsyncCtx9 + 28 | 0; //@line 15876
    HEAP32[$45 >> 2] = $2; //@line 15877
    $46 = $ReallocAsyncCtx9 + 32 | 0; //@line 15878
    HEAP32[$46 >> 2] = $4; //@line 15879
    $47 = $ReallocAsyncCtx9 + 36 | 0; //@line 15880
    HEAP32[$47 >> 2] = $6; //@line 15881
    sp = STACKTOP; //@line 15882
    return;
   }
   ___async_unwind = 0; //@line 15885
   HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 15886
   $39 = $ReallocAsyncCtx9 + 4 | 0; //@line 15887
   HEAP32[$39 >> 2] = $34; //@line 15888
   $40 = $ReallocAsyncCtx9 + 8 | 0; //@line 15889
   HEAP32[$40 >> 2] = $19; //@line 15890
   $41 = $ReallocAsyncCtx9 + 12 | 0; //@line 15891
   HEAP32[$41 >> 2] = $8; //@line 15892
   $42 = $ReallocAsyncCtx9 + 16 | 0; //@line 15893
   HEAP32[$42 >> 2] = $10; //@line 15894
   $43 = $ReallocAsyncCtx9 + 20 | 0; //@line 15895
   HEAP32[$43 >> 2] = $12; //@line 15896
   $44 = $ReallocAsyncCtx9 + 24 | 0; //@line 15897
   HEAP32[$44 >> 2] = $14; //@line 15898
   $45 = $ReallocAsyncCtx9 + 28 | 0; //@line 15899
   HEAP32[$45 >> 2] = $2; //@line 15900
   $46 = $ReallocAsyncCtx9 + 32 | 0; //@line 15901
   HEAP32[$46 >> 2] = $4; //@line 15902
   $47 = $ReallocAsyncCtx9 + 36 | 0; //@line 15903
   HEAP32[$47 >> 2] = $6; //@line 15904
   sp = STACKTOP; //@line 15905
   return;
  }
 } while (0);
 HEAP32[$51 + 16 >> 2] = HEAP32[$10 >> 2]; //@line 15911
 HEAP32[$12 + 8 >> 2] = 0; //@line 15913
 HEAP32[$12 >> 2] = 228; //@line 15914
 HEAP32[$12 + 4 >> 2] = $53; //@line 15916
 $54 = $12 + 12 | 0; //@line 15917
 HEAP32[$54 >> 2] = 764; //@line 15918
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 15919
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($14, $12); //@line 15920
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 15923
  $55 = $ReallocAsyncCtx18 + 4 | 0; //@line 15924
  HEAP32[$55 >> 2] = $54; //@line 15925
  $56 = $ReallocAsyncCtx18 + 8 | 0; //@line 15926
  HEAP32[$56 >> 2] = $2; //@line 15927
  $57 = $ReallocAsyncCtx18 + 12 | 0; //@line 15928
  HEAP32[$57 >> 2] = $4; //@line 15929
  $58 = $ReallocAsyncCtx18 + 16 | 0; //@line 15930
  HEAP32[$58 >> 2] = $12; //@line 15931
  $59 = $ReallocAsyncCtx18 + 20 | 0; //@line 15932
  HEAP32[$59 >> 2] = $6; //@line 15933
  sp = STACKTOP; //@line 15934
  return;
 }
 ___async_unwind = 0; //@line 15937
 HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 15938
 $55 = $ReallocAsyncCtx18 + 4 | 0; //@line 15939
 HEAP32[$55 >> 2] = $54; //@line 15940
 $56 = $ReallocAsyncCtx18 + 8 | 0; //@line 15941
 HEAP32[$56 >> 2] = $2; //@line 15942
 $57 = $ReallocAsyncCtx18 + 12 | 0; //@line 15943
 HEAP32[$57 >> 2] = $4; //@line 15944
 $58 = $ReallocAsyncCtx18 + 16 | 0; //@line 15945
 HEAP32[$58 >> 2] = $12; //@line 15946
 $59 = $ReallocAsyncCtx18 + 20 | 0; //@line 15947
 HEAP32[$59 >> 2] = $6; //@line 15948
 sp = STACKTOP; //@line 15949
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_146($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12011
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12013
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12015
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12017
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12019
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12021
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12023
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12025
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12027
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12029
 $19 = $10 + 12 | 0; //@line 12030
 $20 = HEAP32[$19 >> 2] | 0; //@line 12031
 if ($20 | 0) {
  $23 = HEAP32[$20 + 4 >> 2] | 0; //@line 12035
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(40) | 0; //@line 12036
  FUNCTION_TABLE_vii[$23 & 7]($2, $10); //@line 12037
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 12040
   $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 12041
   HEAP32[$24 >> 2] = $2; //@line 12042
   $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 12043
   HEAP32[$25 >> 2] = $4; //@line 12044
   $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 12045
   HEAP32[$26 >> 2] = $6; //@line 12046
   $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 12047
   HEAP32[$27 >> 2] = $8; //@line 12048
   $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 12049
   HEAP32[$28 >> 2] = $19; //@line 12050
   $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 12051
   HEAP32[$29 >> 2] = $12; //@line 12052
   $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 12053
   HEAP32[$30 >> 2] = $14; //@line 12054
   $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 12055
   HEAP32[$31 >> 2] = $16; //@line 12056
   $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 12057
   HEAP32[$32 >> 2] = $18; //@line 12058
   sp = STACKTOP; //@line 12059
   return;
  }
  ___async_unwind = 0; //@line 12062
  HEAP32[$ReallocAsyncCtx4 >> 2] = 95; //@line 12063
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 12064
  HEAP32[$24 >> 2] = $2; //@line 12065
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 12066
  HEAP32[$25 >> 2] = $4; //@line 12067
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 12068
  HEAP32[$26 >> 2] = $6; //@line 12069
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 12070
  HEAP32[$27 >> 2] = $8; //@line 12071
  $28 = $ReallocAsyncCtx4 + 20 | 0; //@line 12072
  HEAP32[$28 >> 2] = $19; //@line 12073
  $29 = $ReallocAsyncCtx4 + 24 | 0; //@line 12074
  HEAP32[$29 >> 2] = $12; //@line 12075
  $30 = $ReallocAsyncCtx4 + 28 | 0; //@line 12076
  HEAP32[$30 >> 2] = $14; //@line 12077
  $31 = $ReallocAsyncCtx4 + 32 | 0; //@line 12078
  HEAP32[$31 >> 2] = $16; //@line 12079
  $32 = $ReallocAsyncCtx4 + 36 | 0; //@line 12080
  HEAP32[$32 >> 2] = $18; //@line 12081
  sp = STACKTOP; //@line 12082
  return;
 }
 $33 = $2 + 12 | 0; //@line 12085
 HEAP32[$33 >> 2] = 0; //@line 12086
 $34 = $4 + 12 | 0; //@line 12087
 $35 = HEAP32[$34 >> 2] | 0; //@line 12088
 if (!$35) {
  $48 = $6 + 12 | 0; //@line 12091
  HEAP32[$48 >> 2] = 0; //@line 12092
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 12093
  $49 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $2, $6, $18) | 0; //@line 12094
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 12097
   $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 12098
   HEAP32[$50 >> 2] = $48; //@line 12099
   $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 12100
   HEAP32[$51 >> 2] = $33; //@line 12101
   $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 12102
   HEAP32[$52 >> 2] = $6; //@line 12103
   $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 12104
   HEAP32[$53 >> 2] = $34; //@line 12105
   $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 12106
   HEAP32[$54 >> 2] = $2; //@line 12107
   $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 12108
   HEAP32[$55 >> 2] = $8; //@line 12109
   $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 12110
   HEAP32[$56 >> 2] = $12; //@line 12111
   sp = STACKTOP; //@line 12112
   return;
  }
  HEAP32[___async_retval >> 2] = $49; //@line 12116
  ___async_unwind = 0; //@line 12117
  HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 12118
  $50 = $ReallocAsyncCtx9 + 4 | 0; //@line 12119
  HEAP32[$50 >> 2] = $48; //@line 12120
  $51 = $ReallocAsyncCtx9 + 8 | 0; //@line 12121
  HEAP32[$51 >> 2] = $33; //@line 12122
  $52 = $ReallocAsyncCtx9 + 12 | 0; //@line 12123
  HEAP32[$52 >> 2] = $6; //@line 12124
  $53 = $ReallocAsyncCtx9 + 16 | 0; //@line 12125
  HEAP32[$53 >> 2] = $34; //@line 12126
  $54 = $ReallocAsyncCtx9 + 20 | 0; //@line 12127
  HEAP32[$54 >> 2] = $2; //@line 12128
  $55 = $ReallocAsyncCtx9 + 24 | 0; //@line 12129
  HEAP32[$55 >> 2] = $8; //@line 12130
  $56 = $ReallocAsyncCtx9 + 28 | 0; //@line 12131
  HEAP32[$56 >> 2] = $12; //@line 12132
  sp = STACKTOP; //@line 12133
  return;
 } else {
  $38 = HEAP32[$35 + 4 >> 2] | 0; //@line 12137
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 12138
  FUNCTION_TABLE_vii[$38 & 7]($6, $8); //@line 12139
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 12142
   $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 12143
   HEAP32[$39 >> 2] = $34; //@line 12144
   $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 12145
   HEAP32[$40 >> 2] = $12; //@line 12146
   $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 12147
   HEAP32[$41 >> 2] = $8; //@line 12148
   $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 12149
   HEAP32[$42 >> 2] = $2; //@line 12150
   $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 12151
   HEAP32[$43 >> 2] = $33; //@line 12152
   $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 12153
   HEAP32[$44 >> 2] = $6; //@line 12154
   $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 12155
   HEAP32[$45 >> 2] = $14; //@line 12156
   $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 12157
   HEAP32[$46 >> 2] = $16; //@line 12158
   $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 12159
   HEAP32[$47 >> 2] = $18; //@line 12160
   sp = STACKTOP; //@line 12161
   return;
  }
  ___async_unwind = 0; //@line 12164
  HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 12165
  $39 = $ReallocAsyncCtx5 + 4 | 0; //@line 12166
  HEAP32[$39 >> 2] = $34; //@line 12167
  $40 = $ReallocAsyncCtx5 + 8 | 0; //@line 12168
  HEAP32[$40 >> 2] = $12; //@line 12169
  $41 = $ReallocAsyncCtx5 + 12 | 0; //@line 12170
  HEAP32[$41 >> 2] = $8; //@line 12171
  $42 = $ReallocAsyncCtx5 + 16 | 0; //@line 12172
  HEAP32[$42 >> 2] = $2; //@line 12173
  $43 = $ReallocAsyncCtx5 + 20 | 0; //@line 12174
  HEAP32[$43 >> 2] = $33; //@line 12175
  $44 = $ReallocAsyncCtx5 + 24 | 0; //@line 12176
  HEAP32[$44 >> 2] = $6; //@line 12177
  $45 = $ReallocAsyncCtx5 + 28 | 0; //@line 12178
  HEAP32[$45 >> 2] = $14; //@line 12179
  $46 = $ReallocAsyncCtx5 + 32 | 0; //@line 12180
  HEAP32[$46 >> 2] = $16; //@line 12181
  $47 = $ReallocAsyncCtx5 + 36 | 0; //@line 12182
  HEAP32[$47 >> 2] = $18; //@line 12183
  sp = STACKTOP; //@line 12184
  return;
 }
}
function __ZL28nsapi_dns_query_async_deletei($0) {
 $0 = $0 | 0;
 var $$04011$lcssa = 0, $$1$off0 = 0, $$1$off0$1 = 0, $$1$off0$2 = 0, $$1$off0$3 = 0, $$lcssa = 0, $$pre$phiZ2D = 0, $1 = 0, $105 = 0, $109 = 0, $113 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $25 = 0, $29 = 0, $33 = 0, $36 = 0, $39 = 0, $44 = 0, $47 = 0, $5 = 0, $50 = 0, $54 = 0, $58 = 0, $62 = 0, $7 = 0, $73 = 0, $83 = 0, $93 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx15 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10435
 $1 = HEAP32[1949] | 0; //@line 10436
 $2 = ($1 | 0) == 0; //@line 10437
 if ($2) {
  label = 4; //@line 10439
 } else {
  if ((HEAP32[$1 >> 2] | 0) == ($0 | 0)) {
   $$04011$lcssa = 0; //@line 10444
   $$lcssa = $1; //@line 10444
  } else {
   label = 4; //@line 10446
  }
 }
 do {
  if ((label | 0) == 4) {
   $7 = HEAP32[1950] | 0; //@line 10451
   if ($7 | 0) {
    if ((HEAP32[$7 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 1; //@line 10457
     $$lcssa = $7; //@line 10457
     break;
    }
   }
   $105 = HEAP32[1951] | 0; //@line 10461
   if ($105 | 0) {
    if ((HEAP32[$105 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 2; //@line 10467
     $$lcssa = $105; //@line 10467
     break;
    }
   }
   $109 = HEAP32[1952] | 0; //@line 10471
   if ($109 | 0) {
    if ((HEAP32[$109 >> 2] | 0) == ($0 | 0)) {
     $$04011$lcssa = 3; //@line 10477
     $$lcssa = $109; //@line 10477
     break;
    }
   }
   $113 = HEAP32[1953] | 0; //@line 10481
   if (!$113) {
    return;
   }
   if ((HEAP32[$113 >> 2] | 0) == ($0 | 0)) {
    $$04011$lcssa = 4; //@line 10489
    $$lcssa = $113; //@line 10489
   } else {
    return;
   }
  }
 } while (0);
 $5 = $$lcssa + 8 | 0; //@line 10495
 if ($2 | ($1 | 0) == ($$lcssa | 0)) {
  $$1$off0 = 1; //@line 10499
 } else {
  if (!(HEAP32[$1 + 56 >> 2] | 0)) {
   $$1$off0 = 1; //@line 10505
  } else {
   $$1$off0 = (HEAP32[$1 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10511
  }
 }
 $16 = HEAP32[1950] | 0; //@line 10514
 if (($16 | 0) == 0 | ($16 | 0) == ($$lcssa | 0)) {
  $$1$off0$1 = $$1$off0; //@line 10519
 } else {
  if (!(HEAP32[$16 + 56 >> 2] | 0)) {
   $$1$off0$1 = $$1$off0; //@line 10525
  } else {
   $$1$off0$1 = $$1$off0 & (HEAP32[$16 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10532
  }
 }
 $73 = HEAP32[1951] | 0; //@line 10535
 if (($73 | 0) == 0 | ($73 | 0) == ($$lcssa | 0)) {
  $$1$off0$2 = $$1$off0$1; //@line 10540
 } else {
  if (!(HEAP32[$73 + 56 >> 2] | 0)) {
   $$1$off0$2 = $$1$off0$1; //@line 10546
  } else {
   $$1$off0$2 = $$1$off0$1 & (HEAP32[$73 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10553
  }
 }
 $83 = HEAP32[1952] | 0; //@line 10556
 if (($83 | 0) == 0 | ($83 | 0) == ($$lcssa | 0)) {
  $$1$off0$3 = $$1$off0$2; //@line 10561
 } else {
  if (!(HEAP32[$83 + 56 >> 2] | 0)) {
   $$1$off0$3 = $$1$off0$2; //@line 10567
  } else {
   $$1$off0$3 = $$1$off0$2 & (HEAP32[$83 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0); //@line 10574
  }
 }
 $93 = HEAP32[1953] | 0; //@line 10577
 if (($93 | 0) == 0 | ($93 | 0) == ($$lcssa | 0)) {
  label = 47; //@line 10582
 } else {
  if (!(HEAP32[$93 + 56 >> 2] | 0)) {
   label = 47; //@line 10588
  } else {
   if ($$1$off0$3 & (HEAP32[$93 + 8 >> 2] | 0) != (HEAP32[$5 >> 2] | 0)) {
    label = 8; //@line 10596
   }
  }
 }
 if ((label | 0) == 47) {
  if ($$1$off0$3) {
   label = 8; //@line 10602
  }
 }
 if ((label | 0) == 8) {
  $19 = $$lcssa + 56 | 0; //@line 10606
  $20 = HEAP32[$19 >> 2] | 0; //@line 10607
  if ($20 | 0) {
   $AsyncCtx15 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10610
   __ZN6Socket5closeEv($20) | 0; //@line 10611
   if (___async) {
    HEAP32[$AsyncCtx15 >> 2] = 233; //@line 10614
    HEAP32[$AsyncCtx15 + 4 >> 2] = $$lcssa; //@line 10616
    HEAP32[$AsyncCtx15 + 8 >> 2] = $$04011$lcssa; //@line 10618
    HEAP32[$AsyncCtx15 + 12 >> 2] = $19; //@line 10620
    sp = STACKTOP; //@line 10621
    return;
   }
   _emscripten_free_async_context($AsyncCtx15 | 0); //@line 10624
   $25 = HEAP32[$19 >> 2] | 0; //@line 10625
   do {
    if ($25 | 0) {
     $29 = HEAP32[(HEAP32[$25 >> 2] | 0) + 4 >> 2] | 0; //@line 10631
     $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 10632
     FUNCTION_TABLE_vi[$29 & 511]($25); //@line 10633
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 234; //@line 10636
      HEAP32[$AsyncCtx + 4 >> 2] = $$lcssa; //@line 10638
      HEAP32[$AsyncCtx + 8 >> 2] = $$04011$lcssa; //@line 10640
      sp = STACKTOP; //@line 10641
      return;
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10644
      break;
     }
    }
   } while (0);
   $33 = HEAP32[$$lcssa + 60 >> 2] | 0; //@line 10650
   if ($33 | 0) {
    $36 = HEAP32[$33 + 12 >> 2] | 0; //@line 10654
    do {
     if (!$36) {
      $$pre$phiZ2D = $33; //@line 10658
     } else {
      $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 10661
      $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 10662
      FUNCTION_TABLE_vi[$39 & 511]($33); //@line 10663
      if (___async) {
       HEAP32[$AsyncCtx3 >> 2] = 235; //@line 10666
       HEAP32[$AsyncCtx3 + 4 >> 2] = $33; //@line 10668
       HEAP32[$AsyncCtx3 + 8 >> 2] = $$lcssa; //@line 10670
       HEAP32[$AsyncCtx3 + 12 >> 2] = $$04011$lcssa; //@line 10672
       sp = STACKTOP; //@line 10673
       return;
      } else {
       _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10676
       $$pre$phiZ2D = $33; //@line 10677
       break;
      }
     }
    } while (0);
    __ZdlPv($$pre$phiZ2D); //@line 10682
   }
  }
 }
 $44 = HEAP32[$$lcssa + 64 >> 2] | 0; //@line 10687
 if ($44 | 0) {
  __ZdaPv($44); //@line 10690
 }
 $47 = HEAP32[$$lcssa + 12 >> 2] | 0; //@line 10693
 if ($47 | 0) {
  __ZdlPv($47); //@line 10696
 }
 $50 = HEAP32[$$lcssa + 44 >> 2] | 0; //@line 10699
 do {
  if ($50 | 0) {
   $54 = HEAP32[$50 + 8 >> 2] | 0; //@line 10705
   $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10706
   FUNCTION_TABLE_vi[$54 & 511]($$lcssa + 32 | 0); //@line 10707
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 236; //@line 10710
    HEAP32[$AsyncCtx7 + 4 >> 2] = $$lcssa; //@line 10712
    HEAP32[$AsyncCtx7 + 8 >> 2] = $$04011$lcssa; //@line 10714
    sp = STACKTOP; //@line 10715
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10718
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$$lcssa + 28 >> 2] | 0; //@line 10724
 do {
  if ($58 | 0) {
   $62 = HEAP32[$58 + 8 >> 2] | 0; //@line 10730
   $AsyncCtx11 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10731
   FUNCTION_TABLE_vi[$62 & 511]($$lcssa + 16 | 0); //@line 10732
   if (___async) {
    HEAP32[$AsyncCtx11 >> 2] = 237; //@line 10735
    HEAP32[$AsyncCtx11 + 4 >> 2] = $$lcssa; //@line 10737
    HEAP32[$AsyncCtx11 + 8 >> 2] = $$04011$lcssa; //@line 10739
    sp = STACKTOP; //@line 10740
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx11 | 0); //@line 10743
    break;
   }
  }
 } while (0);
 __ZdlPv($$lcssa); //@line 10748
 HEAP32[7796 + ($$04011$lcssa << 2) >> 2] = 0; //@line 10750
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv() {
 var $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$433 = 0, $$124 = 0, $$124$1 = 0, $$124$2 = 0, $$124$3 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $15 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $32 = 0, $35 = 0, $38 = 0, $41 = 0, $42 = 0, $43 = 0, $47 = 0, $48 = 0, $49 = 0, $53 = 0, $54 = 0, $55 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 9413
 STACKTOP = STACKTOP + 32 | 0; //@line 9414
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9414
 $0 = sp + 16 | 0; //@line 9415
 $1 = sp; //@line 9416
 $2 = HEAP32[1949] | 0; //@line 9417
 L1 : do {
  if (!$2) {
   $$1 = 0; //@line 9421
   $$124 = 2147483647; //@line 9421
  } else {
   switch (HEAP32[$2 + 88 >> 2] | 0) {
   case 0:
    {
     $$1 = $2; //@line 9428
     $$124 = HEAP32[$2 >> 2] | 0; //@line 9428
     break L1;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9433
     return;
    }
   default:
    {
     $$1 = 0; //@line 9437
     $$124 = 2147483647; //@line 9437
     break L1;
    }
   }
  }
 } while (0);
 $7 = HEAP32[1950] | 0; //@line 9443
 L7 : do {
  if (!$7) {
   $$1$1 = $$1; //@line 9447
   $$124$1 = $$124; //@line 9447
  } else {
   switch (HEAP32[$7 + 88 >> 2] | 0) {
   case 0:
    {
     $41 = HEAP32[$7 >> 2] | 0; //@line 9453
     $42 = ($41 | 0) > ($$124 | 0); //@line 9454
     $$1$1 = $42 ? $$1 : $7; //@line 9457
     $$124$1 = $42 ? $$124 : $41; //@line 9457
     break L7;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9462
     return;
    }
   default:
    {
     $$1$1 = $$1; //@line 9466
     $$124$1 = $$124; //@line 9466
     break L7;
    }
   }
  }
 } while (0);
 $43 = HEAP32[1951] | 0; //@line 9472
 L13 : do {
  if (!$43) {
   $$1$2 = $$1$1; //@line 9476
   $$124$2 = $$124$1; //@line 9476
  } else {
   switch (HEAP32[$43 + 88 >> 2] | 0) {
   case 0:
    {
     $47 = HEAP32[$43 >> 2] | 0; //@line 9482
     $48 = ($47 | 0) > ($$124$1 | 0); //@line 9483
     $$1$2 = $48 ? $$1$1 : $43; //@line 9486
     $$124$2 = $48 ? $$124$1 : $47; //@line 9486
     break L13;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9491
     return;
    }
   default:
    {
     $$1$2 = $$1$1; //@line 9495
     $$124$2 = $$124$1; //@line 9495
     break L13;
    }
   }
  }
 } while (0);
 $49 = HEAP32[1952] | 0; //@line 9501
 L19 : do {
  if (!$49) {
   $$1$3 = $$1$2; //@line 9505
   $$124$3 = $$124$2; //@line 9505
  } else {
   switch (HEAP32[$49 + 88 >> 2] | 0) {
   case 0:
    {
     $53 = HEAP32[$49 >> 2] | 0; //@line 9511
     $54 = ($53 | 0) > ($$124$2 | 0); //@line 9512
     $$1$3 = $54 ? $$1$2 : $49; //@line 9515
     $$124$3 = $54 ? $$124$2 : $53; //@line 9515
     break L19;
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9520
     return;
    }
   default:
    {
     $$1$3 = $$1$2; //@line 9524
     $$124$3 = $$124$2; //@line 9524
     break L19;
    }
   }
  }
 } while (0);
 $55 = HEAP32[1953] | 0; //@line 9530
 L25 : do {
  if (!$55) {
   label = 31; //@line 9534
  } else {
   switch (HEAP32[$55 + 88 >> 2] | 0) {
   case 0:
    {
     if ((HEAP32[$55 >> 2] | 0) > ($$124$3 | 0)) {
      label = 31; //@line 9543
      break L25;
     } else {
      $$1$433 = $55; //@line 9546
      break L25;
     }
     break;
    }
   case 1:
    {
     STACKTOP = sp; //@line 9552
     return;
    }
   default:
    {
     label = 31; //@line 9556
     break L25;
    }
   }
  }
 } while (0);
 if ((label | 0) == 31) {
  if (!$$1$3) {
   STACKTOP = sp; //@line 9565
   return;
  } else {
   $$1$433 = $$1$3; //@line 9567
  }
 }
 HEAP32[$$1$433 + 88 >> 2] = 1; //@line 9571
 $10 = $$1$433 + 44 | 0; //@line 9572
 $11 = HEAP32[$10 >> 2] | 0; //@line 9573
 do {
  if (!$11) {
   $21 = 0; //@line 9577
  } else {
   $15 = HEAP32[$11 + 4 >> 2] | 0; //@line 9581
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 9582
   FUNCTION_TABLE_vii[$15 & 7]($0, $$1$433 + 32 | 0); //@line 9583
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 207; //@line 9586
    HEAP32[$AsyncCtx + 4 >> 2] = $10; //@line 9588
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 9590
    HEAP32[$AsyncCtx + 12 >> 2] = $$1$433; //@line 9592
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 9594
    sp = STACKTOP; //@line 9595
    STACKTOP = sp; //@line 9596
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 9598
    $21 = HEAP32[$10 >> 2] | 0; //@line 9600
    break;
   }
  }
 } while (0);
 $20 = $0 + 12 | 0; //@line 9605
 HEAP32[$20 >> 2] = $21; //@line 9606
 $22 = HEAP32[$$1$433 >> 2] | 0; //@line 9607
 HEAP32[$1 + 8 >> 2] = 0; //@line 9609
 HEAP32[$1 >> 2] = 208; //@line 9610
 HEAP32[$1 + 4 >> 2] = $22; //@line 9612
 $24 = $1 + 12 | 0; //@line 9613
 HEAP32[$24 >> 2] = 764; //@line 9614
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9615
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, 0, $1) | 0; //@line 9616
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 209; //@line 9619
  HEAP32[$AsyncCtx10 + 4 >> 2] = $24; //@line 9621
  HEAP32[$AsyncCtx10 + 8 >> 2] = $20; //@line 9623
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 9625
  HEAP32[$AsyncCtx10 + 16 >> 2] = $0; //@line 9627
  sp = STACKTOP; //@line 9628
  STACKTOP = sp; //@line 9629
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 9631
 $29 = HEAP32[$24 >> 2] | 0; //@line 9632
 do {
  if ($29 | 0) {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 9637
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9638
   FUNCTION_TABLE_vi[$32 & 511]($1); //@line 9639
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 210; //@line 9642
    HEAP32[$AsyncCtx3 + 4 >> 2] = $20; //@line 9644
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 9646
    sp = STACKTOP; //@line 9647
    STACKTOP = sp; //@line 9648
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9650
    break;
   }
  }
 } while (0);
 $35 = HEAP32[$20 >> 2] | 0; //@line 9655
 if (!$35) {
  STACKTOP = sp; //@line 9658
  return;
 }
 $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 9661
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9662
 FUNCTION_TABLE_vi[$38 & 511]($0); //@line 9663
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 211; //@line 9666
  sp = STACKTOP; //@line 9667
  STACKTOP = sp; //@line 9668
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9670
 STACKTOP = sp; //@line 9671
 return;
}
function __ZN6Socket4openEP12NetworkStack($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$1 = 0, $$pre = 0, $$pre$i$i = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $34 = 0, $35 = 0, $38 = 0, $4 = 0, $48 = 0, $49 = 0, $60 = 0, $61 = 0, $67 = 0, $70 = 0, $71 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx8 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4081
 STACKTOP = STACKTOP + 32 | 0; //@line 4082
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4082
 $2 = sp + 16 | 0; //@line 4083
 $3 = sp; //@line 4084
 $4 = $0 + 4 | 0; //@line 4085
 if (($1 | 0) == 0 | (HEAP32[$4 >> 2] | 0) != 0) {
  $$1 = -3003; //@line 4091
  STACKTOP = sp; //@line 4092
  return $$1 | 0; //@line 4092
 }
 HEAP32[$4 >> 2] = $1; //@line 4094
 $10 = HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] | 0; //@line 4097
 $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 8 >> 2] | 0; //@line 4100
 $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 4101
 $14 = FUNCTION_TABLE_ii[$13 & 31]($0) | 0; //@line 4102
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 121; //@line 4105
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 4107
  HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 4109
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 4111
  HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 4113
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 4115
  HEAP32[$AsyncCtx + 24 >> 2] = $10; //@line 4117
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 4119
  sp = STACKTOP; //@line 4120
  STACKTOP = sp; //@line 4121
  return 0; //@line 4121
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 4123
 $AsyncCtx2 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4124
 $22 = FUNCTION_TABLE_iiii[$10 & 31]($1, $2, $14) | 0; //@line 4125
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 122; //@line 4128
  HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 4130
  HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4132
  HEAP32[$AsyncCtx2 + 12 >> 2] = $3; //@line 4134
  HEAP32[$AsyncCtx2 + 16 >> 2] = $4; //@line 4136
  HEAP32[$AsyncCtx2 + 20 >> 2] = $2; //@line 4138
  sp = STACKTOP; //@line 4139
  STACKTOP = sp; //@line 4140
  return 0; //@line 4140
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4142
 do {
  if (!$22) {
   $30 = $0 + 8 | 0; //@line 4147
   HEAP32[$30 >> 2] = HEAP32[$2 >> 2]; //@line 4148
   $31 = $3 + 12 | 0; //@line 4149
   HEAP32[$3 >> 2] = 12; //@line 4150
   HEAP32[$3 + 4 >> 2] = 1; //@line 4152
   HEAP32[$3 + 8 >> 2] = $0; //@line 4154
   HEAP32[$31 >> 2] = 588; //@line 4155
   $32 = $0 + 16 | 0; //@line 4156
   do {
    if (($32 | 0) == ($3 | 0)) {
     $60 = 588; //@line 4160
     label = 16; //@line 4161
    } else {
     $34 = $0 + 28 | 0; //@line 4163
     $35 = HEAP32[$34 >> 2] | 0; //@line 4164
     if (!$35) {
      $48 = 588; //@line 4167
     } else {
      $38 = HEAP32[$35 + 8 >> 2] | 0; //@line 4170
      $AsyncCtx5 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4171
      FUNCTION_TABLE_vi[$38 & 511]($32); //@line 4172
      if (___async) {
       HEAP32[$AsyncCtx5 >> 2] = 123; //@line 4175
       HEAP32[$AsyncCtx5 + 4 >> 2] = $31; //@line 4177
       HEAP32[$AsyncCtx5 + 8 >> 2] = $34; //@line 4179
       HEAP32[$AsyncCtx5 + 12 >> 2] = $32; //@line 4181
       HEAP32[$AsyncCtx5 + 16 >> 2] = $3; //@line 4183
       HEAP32[$AsyncCtx5 + 20 >> 2] = $4; //@line 4185
       HEAP32[$AsyncCtx5 + 24 >> 2] = $30; //@line 4187
       HEAP32[$AsyncCtx5 + 28 >> 2] = $2; //@line 4189
       sp = STACKTOP; //@line 4190
       STACKTOP = sp; //@line 4191
       return 0; //@line 4191
      }
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4193
      $$pre = HEAP32[$31 >> 2] | 0; //@line 4194
      if (!$$pre) {
       HEAP32[$34 >> 2] = 0; //@line 4197
       break;
      } else {
       $48 = $$pre; //@line 4200
      }
     }
     $49 = HEAP32[$48 + 4 >> 2] | 0; //@line 4204
     $AsyncCtx8 = _emscripten_alloc_async_context(32, sp) | 0; //@line 4205
     FUNCTION_TABLE_vii[$49 & 7]($32, $3); //@line 4206
     if (___async) {
      HEAP32[$AsyncCtx8 >> 2] = 124; //@line 4209
      HEAP32[$AsyncCtx8 + 4 >> 2] = $31; //@line 4211
      HEAP32[$AsyncCtx8 + 8 >> 2] = $34; //@line 4213
      HEAP32[$AsyncCtx8 + 12 >> 2] = $3; //@line 4215
      HEAP32[$AsyncCtx8 + 16 >> 2] = $4; //@line 4217
      HEAP32[$AsyncCtx8 + 20 >> 2] = $30; //@line 4219
      HEAP32[$AsyncCtx8 + 24 >> 2] = $32; //@line 4221
      HEAP32[$AsyncCtx8 + 28 >> 2] = $2; //@line 4223
      sp = STACKTOP; //@line 4224
      STACKTOP = sp; //@line 4225
      return 0; //@line 4225
     } else {
      _emscripten_free_async_context($AsyncCtx8 | 0); //@line 4227
      $$pre$i$i = HEAP32[$31 >> 2] | 0; //@line 4228
      HEAP32[$34 >> 2] = $$pre$i$i; //@line 4230
      if (!$$pre$i$i) {
       break;
      } else {
       $60 = $$pre$i$i; //@line 4235
       label = 16; //@line 4236
       break;
      }
     }
    }
   } while (0);
   do {
    if ((label | 0) == 16) {
     $61 = HEAP32[$60 + 8 >> 2] | 0; //@line 4245
     $AsyncCtx11 = _emscripten_alloc_async_context(24, sp) | 0; //@line 4246
     FUNCTION_TABLE_vi[$61 & 511]($3); //@line 4247
     if (___async) {
      HEAP32[$AsyncCtx11 >> 2] = 125; //@line 4250
      HEAP32[$AsyncCtx11 + 4 >> 2] = $3; //@line 4252
      HEAP32[$AsyncCtx11 + 8 >> 2] = $4; //@line 4254
      HEAP32[$AsyncCtx11 + 12 >> 2] = $30; //@line 4256
      HEAP32[$AsyncCtx11 + 16 >> 2] = $32; //@line 4258
      HEAP32[$AsyncCtx11 + 20 >> 2] = $2; //@line 4260
      sp = STACKTOP; //@line 4261
      STACKTOP = sp; //@line 4262
      return 0; //@line 4262
     } else {
      _emscripten_free_async_context($AsyncCtx11 | 0); //@line 4264
      break;
     }
    }
   } while (0);
   $67 = HEAP32[$4 >> 2] | 0; //@line 4269
   $70 = HEAP32[(HEAP32[$67 >> 2] | 0) + 84 >> 2] | 0; //@line 4272
   $71 = HEAP32[$30 >> 2] | 0; //@line 4273
   $AsyncCtx14 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4274
   FUNCTION_TABLE_viiii[$70 & 7]($67, $71, 126, $32); //@line 4275
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 127; //@line 4278
    HEAP32[$AsyncCtx14 + 4 >> 2] = $2; //@line 4280
    sp = STACKTOP; //@line 4281
    STACKTOP = sp; //@line 4282
    return 0; //@line 4282
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 4284
    $$0 = 0; //@line 4285
    break;
   }
  } else {
   $$0 = $22; //@line 4289
  }
 } while (0);
 $$1 = $$0; //@line 4292
 STACKTOP = sp; //@line 4293
 return $$1 | 0; //@line 4293
}
function __ZN6Socket4openEP12NetworkStack__async_cb_140($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11558
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11560
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11562
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11564
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11566
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11568
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11570
 if ($AsyncRetVal | 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 11574
  return;
 }
 $14 = $4 + 8 | 0; //@line 11578
 HEAP32[$14 >> 2] = HEAP32[$2 >> 2]; //@line 11579
 $15 = $6 + 12 | 0; //@line 11580
 HEAP32[$6 >> 2] = 12; //@line 11581
 HEAP32[$6 + 4 >> 2] = 1; //@line 11583
 HEAP32[$6 + 8 >> 2] = $4; //@line 11585
 HEAP32[$15 >> 2] = 588; //@line 11586
 $16 = $4 + 16 | 0; //@line 11587
 if (($16 | 0) == ($6 | 0)) {
  $40 = HEAP32[149] | 0; //@line 11591
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 11592
  FUNCTION_TABLE_vi[$40 & 511]($6); //@line 11593
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 11596
   $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 11597
   HEAP32[$41 >> 2] = $6; //@line 11598
   $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 11599
   HEAP32[$42 >> 2] = $8; //@line 11600
   $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 11601
   HEAP32[$43 >> 2] = $14; //@line 11602
   $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 11603
   HEAP32[$44 >> 2] = $16; //@line 11604
   $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 11605
   HEAP32[$45 >> 2] = $10; //@line 11606
   sp = STACKTOP; //@line 11607
   return;
  }
  ___async_unwind = 0; //@line 11610
  HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 11611
  $41 = $ReallocAsyncCtx5 + 4 | 0; //@line 11612
  HEAP32[$41 >> 2] = $6; //@line 11613
  $42 = $ReallocAsyncCtx5 + 8 | 0; //@line 11614
  HEAP32[$42 >> 2] = $8; //@line 11615
  $43 = $ReallocAsyncCtx5 + 12 | 0; //@line 11616
  HEAP32[$43 >> 2] = $14; //@line 11617
  $44 = $ReallocAsyncCtx5 + 16 | 0; //@line 11618
  HEAP32[$44 >> 2] = $16; //@line 11619
  $45 = $ReallocAsyncCtx5 + 20 | 0; //@line 11620
  HEAP32[$45 >> 2] = $10; //@line 11621
  sp = STACKTOP; //@line 11622
  return;
 }
 $18 = $4 + 28 | 0; //@line 11625
 $19 = HEAP32[$18 >> 2] | 0; //@line 11626
 if (!$19) {
  $31 = HEAP32[148] | 0; //@line 11630
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 11631
  FUNCTION_TABLE_vii[$31 & 7]($16, $6); //@line 11632
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 11635
   $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 11636
   HEAP32[$32 >> 2] = $15; //@line 11637
   $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 11638
   HEAP32[$33 >> 2] = $18; //@line 11639
   $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 11640
   HEAP32[$34 >> 2] = $6; //@line 11641
   $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 11642
   HEAP32[$35 >> 2] = $8; //@line 11643
   $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 11644
   HEAP32[$36 >> 2] = $14; //@line 11645
   $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 11646
   HEAP32[$37 >> 2] = $16; //@line 11647
   $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 11648
   HEAP32[$38 >> 2] = $10; //@line 11649
   sp = STACKTOP; //@line 11650
   return;
  }
  ___async_unwind = 0; //@line 11653
  HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 11654
  $32 = $ReallocAsyncCtx4 + 4 | 0; //@line 11655
  HEAP32[$32 >> 2] = $15; //@line 11656
  $33 = $ReallocAsyncCtx4 + 8 | 0; //@line 11657
  HEAP32[$33 >> 2] = $18; //@line 11658
  $34 = $ReallocAsyncCtx4 + 12 | 0; //@line 11659
  HEAP32[$34 >> 2] = $6; //@line 11660
  $35 = $ReallocAsyncCtx4 + 16 | 0; //@line 11661
  HEAP32[$35 >> 2] = $8; //@line 11662
  $36 = $ReallocAsyncCtx4 + 20 | 0; //@line 11663
  HEAP32[$36 >> 2] = $14; //@line 11664
  $37 = $ReallocAsyncCtx4 + 24 | 0; //@line 11665
  HEAP32[$37 >> 2] = $16; //@line 11666
  $38 = $ReallocAsyncCtx4 + 28 | 0; //@line 11667
  HEAP32[$38 >> 2] = $10; //@line 11668
  sp = STACKTOP; //@line 11669
  return;
 } else {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 11673
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 11674
  FUNCTION_TABLE_vi[$22 & 511]($16); //@line 11675
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 123; //@line 11678
   $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 11679
   HEAP32[$23 >> 2] = $15; //@line 11680
   $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 11681
   HEAP32[$24 >> 2] = $18; //@line 11682
   $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 11683
   HEAP32[$25 >> 2] = $16; //@line 11684
   $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 11685
   HEAP32[$26 >> 2] = $6; //@line 11686
   $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 11687
   HEAP32[$27 >> 2] = $8; //@line 11688
   $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 11689
   HEAP32[$28 >> 2] = $14; //@line 11690
   $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 11691
   HEAP32[$29 >> 2] = $10; //@line 11692
   sp = STACKTOP; //@line 11693
   return;
  }
  ___async_unwind = 0; //@line 11696
  HEAP32[$ReallocAsyncCtx3 >> 2] = 123; //@line 11697
  $23 = $ReallocAsyncCtx3 + 4 | 0; //@line 11698
  HEAP32[$23 >> 2] = $15; //@line 11699
  $24 = $ReallocAsyncCtx3 + 8 | 0; //@line 11700
  HEAP32[$24 >> 2] = $18; //@line 11701
  $25 = $ReallocAsyncCtx3 + 12 | 0; //@line 11702
  HEAP32[$25 >> 2] = $16; //@line 11703
  $26 = $ReallocAsyncCtx3 + 16 | 0; //@line 11704
  HEAP32[$26 >> 2] = $6; //@line 11705
  $27 = $ReallocAsyncCtx3 + 20 | 0; //@line 11706
  HEAP32[$27 >> 2] = $8; //@line 11707
  $28 = $ReallocAsyncCtx3 + 24 | 0; //@line 11708
  HEAP32[$28 >> 2] = $14; //@line 11709
  $29 = $ReallocAsyncCtx3 + 28 | 0; //@line 11710
  HEAP32[$29 >> 2] = $10; //@line 11711
  sp = STACKTOP; //@line 11712
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 24374
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24376
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24378
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24380
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24382
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 24385
 $11 = $8 + 12 | 0; //@line 24386
 HEAP32[$11 >> 2] = $$pre$i; //@line 24387
 $12 = $6 + 12 | 0; //@line 24388
 $13 = HEAP32[$12 >> 2] | 0; //@line 24389
 $15 = $$pre$i; //@line 24391
 if (!$13) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(36) | 0; //@line 24393
  _mbed_assert_internal(3978, 3983, 1677); //@line 24394
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 271; //@line 24397
   $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 24398
   HEAP32[$16 >> 2] = $12; //@line 24399
   $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 24400
   HEAP32[$17 >> 2] = $11; //@line 24401
   $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 24402
   HEAP32[$18 >> 2] = $6; //@line 24403
   $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 24404
   HEAP32[$19 >> 2] = $2; //@line 24405
   $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 24406
   HEAP32[$20 >> 2] = $4; //@line 24407
   $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 24408
   HEAP32[$21 >> 2] = $8; //@line 24409
   $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 24410
   HEAP32[$22 >> 2] = $2; //@line 24411
   $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 24412
   HEAP32[$23 >> 2] = $11; //@line 24413
   sp = STACKTOP; //@line 24414
   return;
  }
  ___async_unwind = 0; //@line 24417
  HEAP32[$ReallocAsyncCtx6 >> 2] = 271; //@line 24418
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 24419
  HEAP32[$16 >> 2] = $12; //@line 24420
  $17 = $ReallocAsyncCtx6 + 8 | 0; //@line 24421
  HEAP32[$17 >> 2] = $11; //@line 24422
  $18 = $ReallocAsyncCtx6 + 12 | 0; //@line 24423
  HEAP32[$18 >> 2] = $6; //@line 24424
  $19 = $ReallocAsyncCtx6 + 16 | 0; //@line 24425
  HEAP32[$19 >> 2] = $2; //@line 24426
  $20 = $ReallocAsyncCtx6 + 20 | 0; //@line 24427
  HEAP32[$20 >> 2] = $4; //@line 24428
  $21 = $ReallocAsyncCtx6 + 24 | 0; //@line 24429
  HEAP32[$21 >> 2] = $8; //@line 24430
  $22 = $ReallocAsyncCtx6 + 28 | 0; //@line 24431
  HEAP32[$22 >> 2] = $2; //@line 24432
  $23 = $ReallocAsyncCtx6 + 32 | 0; //@line 24433
  HEAP32[$23 >> 2] = $11; //@line 24434
  sp = STACKTOP; //@line 24435
  return;
 }
 $24 = HEAP32[$13 >> 2] | 0; //@line 24438
 if (!$15) {
  $36 = $2 + 12 | 0; //@line 24441
  HEAP32[$36 >> 2] = 0; //@line 24442
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 24443
  $37 = FUNCTION_TABLE_iiii[$24 & 31]($6, $4, $2) | 0; //@line 24444
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 24447
   $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 24448
   HEAP32[$38 >> 2] = $36; //@line 24449
   $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 24450
   HEAP32[$39 >> 2] = $2; //@line 24451
   $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 24452
   HEAP32[$40 >> 2] = $11; //@line 24453
   $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 24454
   HEAP32[$41 >> 2] = $8; //@line 24455
   sp = STACKTOP; //@line 24456
   return;
  }
  HEAP32[___async_retval >> 2] = $37; //@line 24460
  ___async_unwind = 0; //@line 24461
  HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 24462
  $38 = $ReallocAsyncCtx3 + 4 | 0; //@line 24463
  HEAP32[$38 >> 2] = $36; //@line 24464
  $39 = $ReallocAsyncCtx3 + 8 | 0; //@line 24465
  HEAP32[$39 >> 2] = $2; //@line 24466
  $40 = $ReallocAsyncCtx3 + 12 | 0; //@line 24467
  HEAP32[$40 >> 2] = $11; //@line 24468
  $41 = $ReallocAsyncCtx3 + 16 | 0; //@line 24469
  HEAP32[$41 >> 2] = $8; //@line 24470
  sp = STACKTOP; //@line 24471
  return;
 } else {
  $27 = HEAP32[$15 + 4 >> 2] | 0; //@line 24475
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 24476
  FUNCTION_TABLE_vii[$27 & 7]($2, $8); //@line 24477
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 272; //@line 24480
   $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 24481
   HEAP32[$28 >> 2] = $11; //@line 24482
   $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 24483
   HEAP32[$29 >> 2] = $2; //@line 24484
   $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 24485
   HEAP32[$30 >> 2] = $6; //@line 24486
   $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 24487
   HEAP32[$31 >> 2] = $4; //@line 24488
   $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 24489
   HEAP32[$32 >> 2] = $24; //@line 24490
   $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 24491
   HEAP32[$33 >> 2] = $2; //@line 24492
   $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 24493
   HEAP32[$34 >> 2] = $11; //@line 24494
   $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 24495
   HEAP32[$35 >> 2] = $8; //@line 24496
   sp = STACKTOP; //@line 24497
   return;
  }
  ___async_unwind = 0; //@line 24500
  HEAP32[$ReallocAsyncCtx2 >> 2] = 272; //@line 24501
  $28 = $ReallocAsyncCtx2 + 4 | 0; //@line 24502
  HEAP32[$28 >> 2] = $11; //@line 24503
  $29 = $ReallocAsyncCtx2 + 8 | 0; //@line 24504
  HEAP32[$29 >> 2] = $2; //@line 24505
  $30 = $ReallocAsyncCtx2 + 12 | 0; //@line 24506
  HEAP32[$30 >> 2] = $6; //@line 24507
  $31 = $ReallocAsyncCtx2 + 16 | 0; //@line 24508
  HEAP32[$31 >> 2] = $4; //@line 24509
  $32 = $ReallocAsyncCtx2 + 20 | 0; //@line 24510
  HEAP32[$32 >> 2] = $24; //@line 24511
  $33 = $ReallocAsyncCtx2 + 24 | 0; //@line 24512
  HEAP32[$33 >> 2] = $2; //@line 24513
  $34 = $ReallocAsyncCtx2 + 28 | 0; //@line 24514
  HEAP32[$34 >> 2] = $11; //@line 24515
  $35 = $ReallocAsyncCtx2 + 32 | 0; //@line 24516
  HEAP32[$35 >> 2] = $8; //@line 24517
  sp = STACKTOP; //@line 24518
  return;
 }
}
function __ZL17dns_scan_responsePKhtPjP10nsapi_addrj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0100152 = 0, $$0103157 = 0, $$0104151 = 0, $$0105150 = 0, $$0136$lcssa = 0, $$0136156 = 0, $$098 = 0, $$1 = 0, $$1106 = 0, $$1137$lcssa = 0, $$1137154 = 0, $$2149 = 0, $$4 = 0, $$7 = 0, $103 = 0, $106 = 0, $111 = 0, $112 = 0, $116 = 0, $23 = 0, $30 = 0, $37 = 0, $41 = 0, $47 = 0, $48 = 0, $51 = 0, $55 = 0, $59 = 0, $62 = 0, $64 = 0, $65 = 0, $77 = 0, $85 = 0, label = 0;
 $23 = (HEAPU8[$0 + 4 >> 0] | 0) << 8 | (HEAPU8[$0 + 5 >> 0] | 0); //@line 6840
 $30 = (HEAPU8[$0 + 6 >> 0] | 0) << 8 | (HEAPU8[$0 + 7 >> 0] | 0); //@line 6847
 if (!((HEAP8[$0 + 2 >> 0] & -8) << 24 >> 24 == -128 ? (((HEAPU8[$0 >> 0] | 0) << 8 | (HEAPU8[$0 + 1 >> 0] | 0)) & 65535) << 16 >> 16 == $1 << 16 >> 16 : 0)) {
  $$098 = -1; //@line 6853
  return $$098 | 0; //@line 6854
 }
 $37 = $0 + 12 | 0; //@line 6858
 if (HEAP8[$0 + 3 >> 0] & 15) {
  $$098 = 0; //@line 6862
  return $$098 | 0; //@line 6863
 }
 if (!$23) {
  $$0136$lcssa = $37; //@line 6867
 } else {
  $$0103157 = 0; //@line 6869
  $$0136156 = $37; //@line 6869
  while (1) {
   $41 = HEAP8[$$0136156 >> 0] | 0; //@line 6871
   if (!($41 << 24 >> 24)) {
    $$1137$lcssa = $$0136156; //@line 6874
   } else {
    $$1137154 = $$0136156; //@line 6876
    $47 = $41; //@line 6876
    while (1) {
     $48 = $$1137154 + 1 + ($47 & 255) | 0; //@line 6880
     $47 = HEAP8[$48 >> 0] | 0; //@line 6881
     if (!($47 << 24 >> 24)) {
      $$1137$lcssa = $48; //@line 6884
      break;
     } else {
      $$1137154 = $48; //@line 6887
     }
    }
   }
   $51 = $$1137$lcssa + 5 | 0; //@line 6891
   $$0103157 = $$0103157 + 1 | 0; //@line 6892
   if (($$0103157 | 0) >= ($23 | 0)) {
    $$0136$lcssa = $51; //@line 6897
    break;
   } else {
    $$0136156 = $51; //@line 6895
   }
  }
 }
 if (($4 | 0) != 0 & ($30 | 0) != 0) {
  $$0100152 = $3; //@line 6906
  $$0104151 = 0; //@line 6906
  $$0105150 = 0; //@line 6906
  $$2149 = $$0136$lcssa; //@line 6906
 } else {
  $$098 = 0; //@line 6908
  return $$098 | 0; //@line 6909
 }
 while (1) {
  $55 = HEAP8[$$2149 >> 0] | 0; //@line 6913
  do {
   if (!($55 << 24 >> 24)) {
    $$4 = $$2149 + 1 | 0; //@line 6917
   } else {
    $59 = $55 & 255; //@line 6920
    $62 = $$2149; //@line 6920
    while (1) {
     if ($59 & 192 | 0) {
      label = 11; //@line 6925
      break;
     }
     $64 = $62 + 1 + $59 | 0; //@line 6929
     $65 = HEAP8[$64 >> 0] | 0; //@line 6930
     if (!($65 << 24 >> 24)) {
      label = 13; //@line 6934
      break;
     } else {
      $59 = $65 & 255; //@line 6937
      $62 = $64; //@line 6937
     }
    }
    if ((label | 0) == 11) {
     label = 0; //@line 6941
     $$4 = $62 + 2 | 0; //@line 6943
     break;
    } else if ((label | 0) == 13) {
     label = 0; //@line 6947
     $$4 = $64 + 1 | 0; //@line 6949
     break;
    }
   }
  } while (0);
  $77 = ((HEAPU8[$$4 >> 0] | 0) << 8 | (HEAPU8[$$4 + 1 >> 0] | 0)) & 65535; //@line 6962
  $85 = (HEAPU8[$$4 + 2 >> 0] | 0) << 8 | (HEAPU8[$$4 + 3 >> 0] | 0); //@line 6970
  $103 = (HEAPU8[$$4 + 5 >> 0] | 0) << 16 | (HEAPU8[$$4 + 4 >> 0] | 0) << 24 | (HEAPU8[$$4 + 6 >> 0] | 0) << 8 | (HEAPU8[$$4 + 7 >> 0] | 0); //@line 6988
  $106 = $$4 + 10 | 0; //@line 6991
  $111 = (HEAPU8[$$4 + 8 >> 0] | 0) << 8 | (HEAPU8[$$4 + 9 >> 0] | 0); //@line 6996
  $112 = $111 & 65535; //@line 6997
  if (!$$0104151) {
   HEAP32[$2 >> 2] = $103 >>> 0 < 2147483647 ? $103 : 2147483647; //@line 7002
  }
  $116 = ($85 | 0) == 1; //@line 7005
  do {
   if ($77 << 16 >> 16 == 1 & $116 & $112 << 16 >> 16 == 4) {
    HEAP32[$$0100152 >> 2] = 1; //@line 7011
    HEAP8[$$0100152 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 7015
    HEAP8[$$0100152 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 7019
    HEAP8[$$0100152 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 7023
    HEAP8[$$0100152 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 7026
    $$1 = $$0100152 + 20 | 0; //@line 7030
    $$1106 = $$0105150 + 1 | 0; //@line 7030
    $$7 = $$4 + 14 | 0; //@line 7030
   } else {
    if ($77 << 16 >> 16 == 28 & $116 & $112 << 16 >> 16 == 16) {
     HEAP32[$$0100152 >> 2] = 2; //@line 7037
     HEAP8[$$0100152 + 4 >> 0] = HEAP8[$106 >> 0] | 0; //@line 7041
     HEAP8[$$0100152 + 5 >> 0] = HEAP8[$$4 + 11 >> 0] | 0; //@line 7045
     HEAP8[$$0100152 + 6 >> 0] = HEAP8[$$4 + 12 >> 0] | 0; //@line 7049
     HEAP8[$$0100152 + 7 >> 0] = HEAP8[$$4 + 13 >> 0] | 0; //@line 7053
     HEAP8[$$0100152 + 8 >> 0] = HEAP8[$$4 + 14 >> 0] | 0; //@line 7057
     HEAP8[$$0100152 + 9 >> 0] = HEAP8[$$4 + 15 >> 0] | 0; //@line 7061
     HEAP8[$$0100152 + 10 >> 0] = HEAP8[$$4 + 16 >> 0] | 0; //@line 7065
     HEAP8[$$0100152 + 11 >> 0] = HEAP8[$$4 + 17 >> 0] | 0; //@line 7069
     HEAP8[$$0100152 + 12 >> 0] = HEAP8[$$4 + 18 >> 0] | 0; //@line 7073
     HEAP8[$$0100152 + 13 >> 0] = HEAP8[$$4 + 19 >> 0] | 0; //@line 7077
     HEAP8[$$0100152 + 14 >> 0] = HEAP8[$$4 + 20 >> 0] | 0; //@line 7081
     HEAP8[$$0100152 + 15 >> 0] = HEAP8[$$4 + 21 >> 0] | 0; //@line 7085
     HEAP8[$$0100152 + 16 >> 0] = HEAP8[$$4 + 22 >> 0] | 0; //@line 7089
     HEAP8[$$0100152 + 17 >> 0] = HEAP8[$$4 + 23 >> 0] | 0; //@line 7093
     HEAP8[$$0100152 + 18 >> 0] = HEAP8[$$4 + 24 >> 0] | 0; //@line 7097
     HEAP8[$$0100152 + 19 >> 0] = HEAP8[$$4 + 25 >> 0] | 0; //@line 7100
     $$1 = $$0100152 + 20 | 0; //@line 7104
     $$1106 = $$0105150 + 1 | 0; //@line 7104
     $$7 = $$4 + 26 | 0; //@line 7104
     break;
    } else {
     $$1 = $$0100152; //@line 7108
     $$1106 = $$0105150; //@line 7108
     $$7 = $106 + $111 | 0; //@line 7108
     break;
    }
   }
  } while (0);
  $$0104151 = $$0104151 + 1 | 0; //@line 7113
  if (!($$1106 >>> 0 < $4 >>> 0 & ($$0104151 | 0) < ($30 | 0))) {
   $$098 = $$1106; //@line 7120
   break;
  } else {
   $$0100152 = $$1; //@line 7118
   $$0105150 = $$1106; //@line 7118
   $$2149 = $$7; //@line 7118
  }
 }
 return $$098 | 0; //@line 7124
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_75($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $12 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $44 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3627
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3629
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3631
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3633
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3635
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3637
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3639
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3645
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3647
 $21 = (HEAP32[$0 + 28 >> 2] | 0) == 0; //@line 3648
 $22 = HEAP32[HEAP32[$0 + 32 >> 2] >> 2] | 0; //@line 3649
 if ($22 | 0) {
  $25 = HEAP32[$22 + 8 >> 2] | 0; //@line 3653
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(36) | 0; //@line 3654
  FUNCTION_TABLE_vi[$25 & 511]($12); //@line 3655
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 3658
   $26 = $ReallocAsyncCtx8 + 4 | 0; //@line 3659
   HEAP32[$26 >> 2] = $2; //@line 3660
   $27 = $ReallocAsyncCtx8 + 8 | 0; //@line 3661
   HEAP32[$27 >> 2] = $4; //@line 3662
   $28 = $ReallocAsyncCtx8 + 12 | 0; //@line 3663
   HEAP32[$28 >> 2] = $6; //@line 3664
   $29 = $ReallocAsyncCtx8 + 16 | 0; //@line 3665
   HEAP32[$29 >> 2] = $8; //@line 3666
   $30 = $ReallocAsyncCtx8 + 20 | 0; //@line 3667
   HEAP32[$30 >> 2] = $10; //@line 3668
   $31 = $ReallocAsyncCtx8 + 24 | 0; //@line 3669
   $$expand_i1_val = $21 & 1; //@line 3670
   HEAP8[$31 >> 0] = $$expand_i1_val; //@line 3671
   $32 = $ReallocAsyncCtx8 + 28 | 0; //@line 3672
   HEAP32[$32 >> 2] = $18; //@line 3673
   $33 = $ReallocAsyncCtx8 + 32 | 0; //@line 3674
   HEAP32[$33 >> 2] = $20; //@line 3675
   sp = STACKTOP; //@line 3676
   return;
  }
  ___async_unwind = 0; //@line 3679
  HEAP32[$ReallocAsyncCtx8 >> 2] = 181; //@line 3680
  $26 = $ReallocAsyncCtx8 + 4 | 0; //@line 3681
  HEAP32[$26 >> 2] = $2; //@line 3682
  $27 = $ReallocAsyncCtx8 + 8 | 0; //@line 3683
  HEAP32[$27 >> 2] = $4; //@line 3684
  $28 = $ReallocAsyncCtx8 + 12 | 0; //@line 3685
  HEAP32[$28 >> 2] = $6; //@line 3686
  $29 = $ReallocAsyncCtx8 + 16 | 0; //@line 3687
  HEAP32[$29 >> 2] = $8; //@line 3688
  $30 = $ReallocAsyncCtx8 + 20 | 0; //@line 3689
  HEAP32[$30 >> 2] = $10; //@line 3690
  $31 = $ReallocAsyncCtx8 + 24 | 0; //@line 3691
  $$expand_i1_val = $21 & 1; //@line 3692
  HEAP8[$31 >> 0] = $$expand_i1_val; //@line 3693
  $32 = $ReallocAsyncCtx8 + 28 | 0; //@line 3694
  HEAP32[$32 >> 2] = $18; //@line 3695
  $33 = $ReallocAsyncCtx8 + 32 | 0; //@line 3696
  HEAP32[$33 >> 2] = $20; //@line 3697
  sp = STACKTOP; //@line 3698
  return;
 }
 if ($21) {
  HEAP8[8676] = 1; //@line 3702
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 3703
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 3704
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3707
   $50 = $ReallocAsyncCtx13 + 4 | 0; //@line 3708
   HEAP32[$50 >> 2] = $20; //@line 3709
   $51 = $ReallocAsyncCtx13 + 8 | 0; //@line 3710
   HEAP32[$51 >> 2] = $18; //@line 3711
   sp = STACKTOP; //@line 3712
   return;
  }
  ___async_unwind = 0; //@line 3715
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3716
  $50 = $ReallocAsyncCtx13 + 4 | 0; //@line 3717
  HEAP32[$50 >> 2] = $20; //@line 3718
  $51 = $ReallocAsyncCtx13 + 8 | 0; //@line 3719
  HEAP32[$51 >> 2] = $18; //@line 3720
  sp = STACKTOP; //@line 3721
  return;
 }
 $34 = HEAP32[$10 >> 2] | 0; //@line 3724
 if ($34 | 0) {
  __ZdlPv($34); //@line 3727
 }
 $36 = HEAP32[$8 >> 2] | 0; //@line 3729
 if ($36 | 0) {
  $39 = HEAP32[$36 + 8 >> 2] | 0; //@line 3733
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 3734
  FUNCTION_TABLE_vi[$39 & 511]($6); //@line 3735
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 3738
   $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 3739
   HEAP32[$40 >> 2] = $2; //@line 3740
   $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 3741
   HEAP32[$41 >> 2] = $4; //@line 3742
   $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 3743
   HEAP32[$42 >> 2] = $18; //@line 3744
   sp = STACKTOP; //@line 3745
   return;
  }
  ___async_unwind = 0; //@line 3748
  HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 3749
  $40 = $ReallocAsyncCtx9 + 4 | 0; //@line 3750
  HEAP32[$40 >> 2] = $2; //@line 3751
  $41 = $ReallocAsyncCtx9 + 8 | 0; //@line 3752
  HEAP32[$41 >> 2] = $4; //@line 3753
  $42 = $ReallocAsyncCtx9 + 12 | 0; //@line 3754
  HEAP32[$42 >> 2] = $18; //@line 3755
  sp = STACKTOP; //@line 3756
  return;
 }
 $44 = HEAP32[$2 + 28 >> 2] | 0; //@line 3760
 if (!$44) {
  __ZdlPv($2); //@line 3763
  HEAP32[___async_retval >> 2] = -3007; //@line 3765
  return;
 }
 $47 = HEAP32[$44 + 8 >> 2] | 0; //@line 3769
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 3770
 FUNCTION_TABLE_vi[$47 & 511]($4); //@line 3771
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3774
  $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 3775
  HEAP32[$48 >> 2] = $2; //@line 3776
  $49 = $ReallocAsyncCtx10 + 8 | 0; //@line 3777
  HEAP32[$49 >> 2] = $18; //@line 3778
  sp = STACKTOP; //@line 3779
  return;
 }
 ___async_unwind = 0; //@line 3782
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3783
 $48 = $ReallocAsyncCtx10 + 4 | 0; //@line 3784
 HEAP32[$48 >> 2] = $2; //@line 3785
 $49 = $ReallocAsyncCtx10 + 8 | 0; //@line 3786
 HEAP32[$49 >> 2] = $18; //@line 3787
 sp = STACKTOP; //@line 3788
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $20 = 0, $29 = 0, $3 = 0, $30 = 0, $32 = 0, $34 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $50 = 0, $53 = 0, $58 = 0, $6 = 0, $61 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx16 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12322
 STACKTOP = STACKTOP + 32 | 0; //@line 12323
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 12323
 $3 = sp + 16 | 0; //@line 12324
 $4 = sp; //@line 12325
 $5 = $2 + 12 | 0; //@line 12326
 $6 = HEAP32[$5 >> 2] | 0; //@line 12327
 do {
  if (!$6) {
   $16 = 0; //@line 12331
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 12334
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 12335
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 12336
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 270; //@line 12339
    HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 12341
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 12343
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 12345
    HEAP32[$AsyncCtx + 16 >> 2] = $4; //@line 12347
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 12349
    sp = STACKTOP; //@line 12350
    STACKTOP = sp; //@line 12351
    return 0; //@line 12351
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12353
    $16 = HEAP32[$5 >> 2] | 0; //@line 12355
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 12360
 HEAP32[$15 >> 2] = $16; //@line 12361
 $17 = $0 + 12 | 0; //@line 12362
 $18 = HEAP32[$17 >> 2] | 0; //@line 12363
 $20 = $16; //@line 12365
 do {
  if (!$18) {
   $AsyncCtx16 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12368
   _mbed_assert_internal(3978, 3983, 1677); //@line 12369
   if (___async) {
    HEAP32[$AsyncCtx16 >> 2] = 271; //@line 12372
    HEAP32[$AsyncCtx16 + 4 >> 2] = $17; //@line 12374
    HEAP32[$AsyncCtx16 + 8 >> 2] = $15; //@line 12376
    HEAP32[$AsyncCtx16 + 12 >> 2] = $0; //@line 12378
    HEAP32[$AsyncCtx16 + 16 >> 2] = $3; //@line 12380
    HEAP32[$AsyncCtx16 + 20 >> 2] = $1; //@line 12382
    HEAP32[$AsyncCtx16 + 24 >> 2] = $4; //@line 12384
    HEAP32[$AsyncCtx16 + 28 >> 2] = $3; //@line 12386
    HEAP32[$AsyncCtx16 + 32 >> 2] = $15; //@line 12388
    sp = STACKTOP; //@line 12389
    STACKTOP = sp; //@line 12390
    return 0; //@line 12390
   } else {
    _emscripten_free_async_context($AsyncCtx16 | 0); //@line 12392
    $30 = HEAP32[$17 >> 2] | 0; //@line 12395
    $32 = HEAP32[$15 >> 2] | 0; //@line 12395
    break;
   }
  } else {
   $30 = $18; //@line 12399
   $32 = $20; //@line 12399
  }
 } while (0);
 $29 = HEAP32[$30 >> 2] | 0; //@line 12402
 do {
  if (!$32) {
   $44 = 0; //@line 12406
  } else {
   $34 = HEAP32[$32 + 4 >> 2] | 0; //@line 12409
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 12410
   FUNCTION_TABLE_vii[$34 & 7]($3, $4); //@line 12411
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 272; //@line 12414
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 12416
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 12418
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 12420
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 12422
    HEAP32[$AsyncCtx2 + 20 >> 2] = $29; //@line 12424
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 12426
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 12428
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 12430
    sp = STACKTOP; //@line 12431
    STACKTOP = sp; //@line 12432
    return 0; //@line 12432
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12434
    $44 = HEAP32[$15 >> 2] | 0; //@line 12436
    break;
   }
  }
 } while (0);
 $43 = $3 + 12 | 0; //@line 12441
 HEAP32[$43 >> 2] = $44; //@line 12442
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12443
 $45 = FUNCTION_TABLE_iiii[$29 & 31]($0, $1, $3) | 0; //@line 12444
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 273; //@line 12447
  HEAP32[$AsyncCtx5 + 4 >> 2] = $43; //@line 12449
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 12451
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 12453
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 12455
  sp = STACKTOP; //@line 12456
  STACKTOP = sp; //@line 12457
  return 0; //@line 12457
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12459
 $50 = HEAP32[$43 >> 2] | 0; //@line 12460
 do {
  if ($50 | 0) {
   $53 = HEAP32[$50 + 8 >> 2] | 0; //@line 12465
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 12466
   FUNCTION_TABLE_vi[$53 & 511]($3); //@line 12467
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 274; //@line 12470
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 12472
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 12474
    HEAP32[$AsyncCtx9 + 12 >> 2] = $45; //@line 12476
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 12478
    sp = STACKTOP; //@line 12479
    STACKTOP = sp; //@line 12480
    return 0; //@line 12480
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 12482
    break;
   }
  }
 } while (0);
 $58 = HEAP32[$15 >> 2] | 0; //@line 12487
 if (!$58) {
  STACKTOP = sp; //@line 12490
  return $45 | 0; //@line 12490
 }
 $61 = HEAP32[$58 + 8 >> 2] | 0; //@line 12493
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12494
 FUNCTION_TABLE_vi[$61 & 511]($4); //@line 12495
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 275; //@line 12498
  HEAP32[$AsyncCtx13 + 4 >> 2] = $45; //@line 12500
  sp = STACKTOP; //@line 12501
  STACKTOP = sp; //@line 12502
  return 0; //@line 12502
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 12504
 STACKTOP = sp; //@line 12505
 return $45 | 0; //@line 12505
}
function __ZN13SocketAddress14set_ip_addressEPKc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$016$i = 0, $$02537$i = 0, $$02636$i = 0, $$1$1$i = 0, $$1$2$i = 0, $$1$3$i = 0, $$1$i = 0, $2 = 0, $26 = 0, $35 = 0, $4 = 0, $45 = 0, $56 = 0, $6 = 0, $68 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4580
 STACKTOP = STACKTOP + 32 | 0; //@line 4581
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4581
 $vararg_buffer7 = sp + 24 | 0; //@line 4582
 $vararg_buffer4 = sp + 16 | 0; //@line 4583
 $vararg_buffer1 = sp + 8 | 0; //@line 4584
 $vararg_buffer = sp; //@line 4585
 $2 = sp + 28 | 0; //@line 4586
 HEAP8[$0 >> 0] = 0; //@line 4587
 L1 : do {
  if ($1 | 0) {
   $4 = HEAP8[$1 >> 0] | 0; //@line 4591
   do {
    if ($4 << 24 >> 24) {
     $$016$i = 0; //@line 4595
     $6 = $4; //@line 4595
     while (1) {
      if (!($6 << 24 >> 24 == 46 | ($6 + -48 & 255) < 10)) {
       $$02537$i = 0; //@line 4602
       $$02636$i = 0; //@line 4602
       $56 = $4; //@line 4602
       break;
      }
      $9 = $$016$i + 1 | 0; //@line 4605
      $6 = HEAP8[$1 + $9 >> 0] | 0; //@line 4607
      if (!($6 << 24 >> 24)) {
       label = 5; //@line 4610
       break;
      } else {
       $$016$i = $9; //@line 4613
      }
     }
     if ((label | 0) == 5) {
      if (($$016$i | 0) <= -1) {
       break;
      }
      if ((HEAP8[$1 + $$016$i >> 0] | 0) == 46) {
       $$02537$i = 0; //@line 4625
       $$02636$i = 0; //@line 4625
       $56 = $4; //@line 4625
      } else {
       break;
      }
     }
     do {
      if (!(($56 + -48 & 255) < 10 | ($56 + -97 & 255) < 6)) {
       switch ($56 << 24 >> 24) {
       case 58:
       case 65:
       case 66:
       case 67:
       case 68:
       case 69:
       case 70:
        {
         break;
        }
       default:
        {
         break L1;
        }
       }
      }
      $$02636$i = $$02636$i + ($56 << 24 >> 24 == 58 & 1) | 0; //@line 4648
      $$02537$i = $$02537$i + 1 | 0; //@line 4649
      $56 = HEAP8[$1 + $$02537$i >> 0] | 0; //@line 4651
     } while ($56 << 24 >> 24 != 0);
     if (($$02636$i | 0) <= 1) {
      break L1;
     }
     HEAP32[$0 + 40 >> 2] = 2; //@line 4664
     _stoip6($1, _strlen($1) | 0, $0 + 44 | 0); //@line 4667
     $$0 = 1; //@line 4668
     STACKTOP = sp; //@line 4669
     return $$0 | 0; //@line 4669
    }
   } while (0);
   HEAP32[$0 + 40 >> 2] = 1; //@line 4673
   HEAP32[$vararg_buffer >> 2] = $2; //@line 4674
   L19 : do {
    if ((_sscanf($1, 3659, $vararg_buffer) | 0) >= 1) {
     HEAP8[$0 + 44 >> 0] = HEAP32[$2 >> 2]; //@line 4682
     $$1$i = 0; //@line 4683
     L21 : while (1) {
      switch (HEAP8[$1 + $$1$i >> 0] | 0) {
      case 0:
       {
        break L19;
        break;
       }
      case 46:
       {
        break L21;
        break;
       }
      default:
       {}
      }
      $$1$i = $$1$i + 1 | 0; //@line 4700
     }
     $26 = $$1$i + 1 | 0; //@line 4702
     HEAP32[$vararg_buffer1 >> 2] = $2; //@line 4704
     if ((_sscanf($1 + $26 | 0, 3659, $vararg_buffer1) | 0) >= 1) {
      HEAP8[$0 + 45 >> 0] = HEAP32[$2 >> 2]; //@line 4711
      $$1$1$i = $26; //@line 4712
      L26 : while (1) {
       switch (HEAP8[$1 + $$1$1$i >> 0] | 0) {
       case 0:
        {
         break L19;
         break;
        }
       case 46:
        {
         break L26;
         break;
        }
       default:
        {}
       }
       $$1$1$i = $$1$1$i + 1 | 0; //@line 4729
      }
      $35 = $$1$1$i + 1 | 0; //@line 4731
      HEAP32[$vararg_buffer4 >> 2] = $2; //@line 4733
      if ((_sscanf($1 + $35 | 0, 3659, $vararg_buffer4) | 0) >= 1) {
       HEAP8[$0 + 46 >> 0] = HEAP32[$2 >> 2]; //@line 4740
       $$1$2$i = $35; //@line 4741
       L31 : while (1) {
        switch (HEAP8[$1 + $$1$2$i >> 0] | 0) {
        case 0:
         {
          break L19;
          break;
         }
        case 46:
         {
          break L31;
          break;
         }
        default:
         {}
        }
        $$1$2$i = $$1$2$i + 1 | 0; //@line 4758
       }
       $45 = $$1$2$i + 1 | 0; //@line 4760
       HEAP32[$vararg_buffer7 >> 2] = $2; //@line 4762
       if ((_sscanf($1 + $45 | 0, 3659, $vararg_buffer7) | 0) >= 1) {
        HEAP8[$0 + 47 >> 0] = HEAP32[$2 >> 2]; //@line 4769
        $$1$3$i = $45; //@line 4770
        L36 : while (1) {
         switch (HEAP8[$1 + $$1$3$i >> 0] | 0) {
         case 0:
          {
           break L19;
           break;
          }
         case 46:
          {
           break L36;
           break;
          }
         default:
          {}
         }
         $$1$3$i = $$1$3$i + 1 | 0; //@line 4787
        }
        $$0 = 1; //@line 4789
        STACKTOP = sp; //@line 4790
        return $$0 | 0; //@line 4790
       }
      }
     }
    }
   } while (0);
   $$0 = 1; //@line 4796
   STACKTOP = sp; //@line 4797
   return $$0 | 0; //@line 4797
  }
 } while (0);
 $68 = $0 + 40 | 0; //@line 4800
 HEAP32[$68 >> 2] = 0; //@line 4801
 HEAP32[$68 + 4 >> 2] = 0; //@line 4801
 HEAP32[$68 + 8 >> 2] = 0; //@line 4801
 HEAP32[$68 + 12 >> 2] = 0; //@line 4801
 HEAP32[$68 + 16 >> 2] = 0; //@line 4801
 $$0 = 0; //@line 4802
 STACKTOP = sp; //@line 4803
 return $$0 | 0; //@line 4803
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_199($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx15 = 0, $ReallocAsyncCtx19 = 0, sp = 0;
 sp = STACKTOP; //@line 15957
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15959
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15961
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15963
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15965
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15967
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15969
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15971
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15973
 if ($AsyncRetVal | 0) {
  __ZN9UDPSocketC2Ev($AsyncRetVal); //@line 15976
  $17 = HEAP32[$10 >> 2] | 0; //@line 15977
  $ReallocAsyncCtx19 = _emscripten_realloc_async_context(40) | 0; //@line 15978
  $18 = __ZN6Socket4openEP12NetworkStack($AsyncRetVal, $17) | 0; //@line 15979
  if (___async) {
   HEAP32[$ReallocAsyncCtx19 >> 2] = 213; //@line 15982
   $19 = $ReallocAsyncCtx19 + 4 | 0; //@line 15983
   HEAP32[$19 >> 2] = $2; //@line 15984
   $20 = $ReallocAsyncCtx19 + 8 | 0; //@line 15985
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 15986
   $21 = $ReallocAsyncCtx19 + 12 | 0; //@line 15987
   HEAP32[$21 >> 2] = $4; //@line 15988
   $22 = $ReallocAsyncCtx19 + 16 | 0; //@line 15989
   HEAP32[$22 >> 2] = $AsyncRetVal; //@line 15990
   $23 = $ReallocAsyncCtx19 + 20 | 0; //@line 15991
   HEAP32[$23 >> 2] = $8; //@line 15992
   $24 = $ReallocAsyncCtx19 + 24 | 0; //@line 15993
   HEAP32[$24 >> 2] = $10; //@line 15994
   $25 = $ReallocAsyncCtx19 + 28 | 0; //@line 15995
   HEAP32[$25 >> 2] = $12; //@line 15996
   $26 = $ReallocAsyncCtx19 + 32 | 0; //@line 15997
   HEAP32[$26 >> 2] = $14; //@line 15998
   $27 = $ReallocAsyncCtx19 + 36 | 0; //@line 15999
   HEAP32[$27 >> 2] = $AsyncRetVal; //@line 16000
   sp = STACKTOP; //@line 16001
   return;
  }
  HEAP32[___async_retval >> 2] = $18; //@line 16005
  ___async_unwind = 0; //@line 16006
  HEAP32[$ReallocAsyncCtx19 >> 2] = 213; //@line 16007
  $19 = $ReallocAsyncCtx19 + 4 | 0; //@line 16008
  HEAP32[$19 >> 2] = $2; //@line 16009
  $20 = $ReallocAsyncCtx19 + 8 | 0; //@line 16010
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 16011
  $21 = $ReallocAsyncCtx19 + 12 | 0; //@line 16012
  HEAP32[$21 >> 2] = $4; //@line 16013
  $22 = $ReallocAsyncCtx19 + 16 | 0; //@line 16014
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 16015
  $23 = $ReallocAsyncCtx19 + 20 | 0; //@line 16016
  HEAP32[$23 >> 2] = $8; //@line 16017
  $24 = $ReallocAsyncCtx19 + 24 | 0; //@line 16018
  HEAP32[$24 >> 2] = $10; //@line 16019
  $25 = $ReallocAsyncCtx19 + 28 | 0; //@line 16020
  HEAP32[$25 >> 2] = $12; //@line 16021
  $26 = $ReallocAsyncCtx19 + 32 | 0; //@line 16022
  HEAP32[$26 >> 2] = $14; //@line 16023
  $27 = $ReallocAsyncCtx19 + 36 | 0; //@line 16024
  HEAP32[$27 >> 2] = $AsyncRetVal; //@line 16025
  sp = STACKTOP; //@line 16026
  return;
 }
 $29 = $4 + 28 | 0; //@line 16029
 $30 = HEAP32[$29 >> 2] | 0; //@line 16030
 if (!$30) {
  $39 = $6 + 12 | 0; //@line 16033
  HEAP32[$39 >> 2] = 0; //@line 16034
  $40 = HEAP32[$4 >> 2] | 0; //@line 16035
  $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 16036
  __ZL28nsapi_dns_query_async_deletei($40); //@line 16037
  if (___async) {
   HEAP32[$ReallocAsyncCtx15 >> 2] = 215; //@line 16040
   $41 = $ReallocAsyncCtx15 + 4 | 0; //@line 16041
   HEAP32[$41 >> 2] = $39; //@line 16042
   $42 = $ReallocAsyncCtx15 + 8 | 0; //@line 16043
   HEAP32[$42 >> 2] = $6; //@line 16044
   sp = STACKTOP; //@line 16045
   return;
  }
  ___async_unwind = 0; //@line 16048
  HEAP32[$ReallocAsyncCtx15 >> 2] = 215; //@line 16049
  $41 = $ReallocAsyncCtx15 + 4 | 0; //@line 16050
  HEAP32[$41 >> 2] = $39; //@line 16051
  $42 = $ReallocAsyncCtx15 + 8 | 0; //@line 16052
  HEAP32[$42 >> 2] = $6; //@line 16053
  sp = STACKTOP; //@line 16054
  return;
 } else {
  $34 = HEAP32[$30 + 4 >> 2] | 0; //@line 16059
  $ReallocAsyncCtx = _emscripten_realloc_async_context(20) | 0; //@line 16060
  FUNCTION_TABLE_vii[$34 & 7]($6, $4 + 16 | 0); //@line 16061
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 214; //@line 16064
   $35 = $ReallocAsyncCtx + 4 | 0; //@line 16065
   HEAP32[$35 >> 2] = $29; //@line 16066
   $36 = $ReallocAsyncCtx + 8 | 0; //@line 16067
   HEAP32[$36 >> 2] = $6; //@line 16068
   $37 = $ReallocAsyncCtx + 12 | 0; //@line 16069
   HEAP32[$37 >> 2] = $4; //@line 16070
   $38 = $ReallocAsyncCtx + 16 | 0; //@line 16071
   HEAP32[$38 >> 2] = $6; //@line 16072
   sp = STACKTOP; //@line 16073
   return;
  }
  ___async_unwind = 0; //@line 16076
  HEAP32[$ReallocAsyncCtx >> 2] = 214; //@line 16077
  $35 = $ReallocAsyncCtx + 4 | 0; //@line 16078
  HEAP32[$35 >> 2] = $29; //@line 16079
  $36 = $ReallocAsyncCtx + 8 | 0; //@line 16080
  HEAP32[$36 >> 2] = $6; //@line 16081
  $37 = $ReallocAsyncCtx + 12 | 0; //@line 16082
  HEAP32[$37 >> 2] = $4; //@line 16083
  $38 = $ReallocAsyncCtx + 16 | 0; //@line 16084
  HEAP32[$38 >> 2] = $6; //@line 16085
  sp = STACKTOP; //@line 16086
  return;
 }
}
function _mbed_vtracef__async_cb_131($0) {
 $0 = $0 | 0;
 var $$10 = 0, $$3147168 = 0, $$3169 = 0, $$5156 = 0, $$5156$ = 0, $$expand_i1_val = 0, $12 = 0, $16 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $67 = 0, $68 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $79 = 0, $8 = 0, $80 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 10859
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 10861
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10863
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 10867
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 10871
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 10875
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 10879
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 10881
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 10883
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 10885
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 10887
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 10891
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 10893
 $36 = HEAP8[$0 + 72 >> 0] & 1; //@line 10896
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 10898
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 10900
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 10902
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 10908
 HEAP32[$38 >> 2] = HEAP32[___async_retval >> 2]; //@line 10911
 $50 = _snprintf($40, $42, 3526, $38) | 0; //@line 10912
 $$10 = ($50 | 0) >= ($42 | 0) ? 0 : $50; //@line 10914
 $53 = $40 + $$10 | 0; //@line 10916
 $54 = $42 - $$10 | 0; //@line 10917
 if (($$10 | 0) > 0) {
  if (($54 | 0) > 0) {
   $$3147168 = $54; //@line 10921
   $$3169 = $53; //@line 10921
   label = 4; //@line 10922
  }
 } else {
  $$3147168 = $42; //@line 10925
  $$3169 = $40; //@line 10925
  label = 4; //@line 10926
 }
 if ((label | 0) == 4) {
  $56 = $48 + -2 | 0; //@line 10929
  switch ($56 >>> 1 | $56 << 31 | 0) {
  case 0:
   {
    HEAP32[$12 >> 2] = $4; //@line 10935
    $$5156 = _snprintf($$3169, $$3147168, 3529, $12) | 0; //@line 10937
    break;
   }
  case 1:
   {
    HEAP32[$16 >> 2] = $4; //@line 10941
    $$5156 = _snprintf($$3169, $$3147168, 3544, $16) | 0; //@line 10943
    break;
   }
  case 3:
   {
    HEAP32[$2 >> 2] = $4; //@line 10947
    $$5156 = _snprintf($$3169, $$3147168, 3559, $2) | 0; //@line 10949
    break;
   }
  case 7:
   {
    HEAP32[$8 >> 2] = $4; //@line 10953
    $$5156 = _snprintf($$3169, $$3147168, 3574, $8) | 0; //@line 10955
    break;
   }
  default:
   {
    $$5156 = _snprintf($$3169, $$3147168, 3589, $28) | 0; //@line 10960
   }
  }
  $$5156$ = ($$5156 | 0) < ($$3147168 | 0) ? $$5156 : 0; //@line 10964
  $67 = $$3169 + $$5156$ | 0; //@line 10966
  $68 = $$3147168 - $$5156$ | 0; //@line 10967
  if (($$5156$ | 0) > 0 & ($68 | 0) > 0) {
   $ReallocAsyncCtx10 = _emscripten_realloc_async_context(32) | 0; //@line 10971
   $70 = _vsnprintf($67, $68, $20, $22) | 0; //@line 10972
   if (___async) {
    HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 10975
    $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 10976
    HEAP32[$71 >> 2] = $68; //@line 10977
    $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 10978
    HEAP32[$72 >> 2] = $67; //@line 10979
    $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 10980
    HEAP32[$73 >> 2] = $24; //@line 10981
    $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 10982
    HEAP32[$74 >> 2] = $26; //@line 10983
    $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 10984
    HEAP32[$75 >> 2] = $32; //@line 10985
    $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 10986
    HEAP32[$76 >> 2] = $34; //@line 10987
    $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 10988
    $$expand_i1_val = $36 & 1; //@line 10989
    HEAP8[$77 >> 0] = $$expand_i1_val; //@line 10990
    sp = STACKTOP; //@line 10991
    return;
   }
   HEAP32[___async_retval >> 2] = $70; //@line 10995
   ___async_unwind = 0; //@line 10996
   HEAP32[$ReallocAsyncCtx10 >> 2] = 71; //@line 10997
   $71 = $ReallocAsyncCtx10 + 4 | 0; //@line 10998
   HEAP32[$71 >> 2] = $68; //@line 10999
   $72 = $ReallocAsyncCtx10 + 8 | 0; //@line 11000
   HEAP32[$72 >> 2] = $67; //@line 11001
   $73 = $ReallocAsyncCtx10 + 12 | 0; //@line 11002
   HEAP32[$73 >> 2] = $24; //@line 11003
   $74 = $ReallocAsyncCtx10 + 16 | 0; //@line 11004
   HEAP32[$74 >> 2] = $26; //@line 11005
   $75 = $ReallocAsyncCtx10 + 20 | 0; //@line 11006
   HEAP32[$75 >> 2] = $32; //@line 11007
   $76 = $ReallocAsyncCtx10 + 24 | 0; //@line 11008
   HEAP32[$76 >> 2] = $34; //@line 11009
   $77 = $ReallocAsyncCtx10 + 28 | 0; //@line 11010
   $$expand_i1_val = $36 & 1; //@line 11011
   HEAP8[$77 >> 0] = $$expand_i1_val; //@line 11012
   sp = STACKTOP; //@line 11013
   return;
  }
 }
 $79 = HEAP32[133] | 0; //@line 11017
 $80 = HEAP32[126] | 0; //@line 11018
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 11019
 FUNCTION_TABLE_vi[$79 & 511]($80); //@line 11020
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 11023
  sp = STACKTOP; //@line 11024
  return;
 }
 ___async_unwind = 0; //@line 11027
 HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 11028
 sp = STACKTOP; //@line 11029
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_147($0) {
 $0 = $0 | 0;
 var $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12193
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12195
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12197
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12199
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12201
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12205
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12207
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12209
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12211
 $19 = $2 + 12 | 0; //@line 12213
 HEAP32[$19 >> 2] = HEAP32[HEAP32[$0 + 20 >> 2] >> 2]; //@line 12214
 $20 = $4 + 12 | 0; //@line 12215
 $21 = HEAP32[$20 >> 2] | 0; //@line 12216
 if (!$21) {
  $34 = $6 + 12 | 0; //@line 12219
  HEAP32[$34 >> 2] = 0; //@line 12220
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 12221
  $35 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $2, $6, $18) | 0; //@line 12222
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 12225
   $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 12226
   HEAP32[$36 >> 2] = $34; //@line 12227
   $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 12228
   HEAP32[$37 >> 2] = $19; //@line 12229
   $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 12230
   HEAP32[$38 >> 2] = $6; //@line 12231
   $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 12232
   HEAP32[$39 >> 2] = $20; //@line 12233
   $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 12234
   HEAP32[$40 >> 2] = $2; //@line 12235
   $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 12236
   HEAP32[$41 >> 2] = $8; //@line 12237
   $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 12238
   HEAP32[$42 >> 2] = $12; //@line 12239
   sp = STACKTOP; //@line 12240
   return;
  }
  HEAP32[___async_retval >> 2] = $35; //@line 12244
  ___async_unwind = 0; //@line 12245
  HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 12246
  $36 = $ReallocAsyncCtx9 + 4 | 0; //@line 12247
  HEAP32[$36 >> 2] = $34; //@line 12248
  $37 = $ReallocAsyncCtx9 + 8 | 0; //@line 12249
  HEAP32[$37 >> 2] = $19; //@line 12250
  $38 = $ReallocAsyncCtx9 + 12 | 0; //@line 12251
  HEAP32[$38 >> 2] = $6; //@line 12252
  $39 = $ReallocAsyncCtx9 + 16 | 0; //@line 12253
  HEAP32[$39 >> 2] = $20; //@line 12254
  $40 = $ReallocAsyncCtx9 + 20 | 0; //@line 12255
  HEAP32[$40 >> 2] = $2; //@line 12256
  $41 = $ReallocAsyncCtx9 + 24 | 0; //@line 12257
  HEAP32[$41 >> 2] = $8; //@line 12258
  $42 = $ReallocAsyncCtx9 + 28 | 0; //@line 12259
  HEAP32[$42 >> 2] = $12; //@line 12260
  sp = STACKTOP; //@line 12261
  return;
 } else {
  $24 = HEAP32[$21 + 4 >> 2] | 0; //@line 12265
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 12266
  FUNCTION_TABLE_vii[$24 & 7]($6, $8); //@line 12267
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 12270
   $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 12271
   HEAP32[$25 >> 2] = $20; //@line 12272
   $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 12273
   HEAP32[$26 >> 2] = $12; //@line 12274
   $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 12275
   HEAP32[$27 >> 2] = $8; //@line 12276
   $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 12277
   HEAP32[$28 >> 2] = $2; //@line 12278
   $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 12279
   HEAP32[$29 >> 2] = $19; //@line 12280
   $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 12281
   HEAP32[$30 >> 2] = $6; //@line 12282
   $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 12283
   HEAP32[$31 >> 2] = $14; //@line 12284
   $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 12285
   HEAP32[$32 >> 2] = $16; //@line 12286
   $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 12287
   HEAP32[$33 >> 2] = $18; //@line 12288
   sp = STACKTOP; //@line 12289
   return;
  }
  ___async_unwind = 0; //@line 12292
  HEAP32[$ReallocAsyncCtx5 >> 2] = 96; //@line 12293
  $25 = $ReallocAsyncCtx5 + 4 | 0; //@line 12294
  HEAP32[$25 >> 2] = $20; //@line 12295
  $26 = $ReallocAsyncCtx5 + 8 | 0; //@line 12296
  HEAP32[$26 >> 2] = $12; //@line 12297
  $27 = $ReallocAsyncCtx5 + 12 | 0; //@line 12298
  HEAP32[$27 >> 2] = $8; //@line 12299
  $28 = $ReallocAsyncCtx5 + 16 | 0; //@line 12300
  HEAP32[$28 >> 2] = $2; //@line 12301
  $29 = $ReallocAsyncCtx5 + 20 | 0; //@line 12302
  HEAP32[$29 >> 2] = $19; //@line 12303
  $30 = $ReallocAsyncCtx5 + 24 | 0; //@line 12304
  HEAP32[$30 >> 2] = $6; //@line 12305
  $31 = $ReallocAsyncCtx5 + 28 | 0; //@line 12306
  HEAP32[$31 >> 2] = $14; //@line 12307
  $32 = $ReallocAsyncCtx5 + 32 | 0; //@line 12308
  HEAP32[$32 >> 2] = $16; //@line 12309
  $33 = $ReallocAsyncCtx5 + 36 | 0; //@line 12310
  HEAP32[$33 >> 2] = $18; //@line 12311
  sp = STACKTOP; //@line 12312
  return;
 }
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$unpack$i = 0, $$unpack4$i = 0, $15 = 0, $16 = 0, $20 = 0, $3 = 0, $30 = 0, $36 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $47 = 0, $5 = 0, $50 = 0, $55 = 0, $58 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, $AsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3820
 STACKTOP = STACKTOP + 32 | 0; //@line 3821
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 3821
 $3 = sp + 16 | 0; //@line 3822
 $4 = sp; //@line 3823
 $5 = $2 + 12 | 0; //@line 3824
 $6 = HEAP32[$5 >> 2] | 0; //@line 3825
 do {
  if (!$6) {
   $16 = 0; //@line 3829
  } else {
   $9 = HEAP32[$6 + 4 >> 2] | 0; //@line 3832
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 3833
   FUNCTION_TABLE_vii[$9 & 7]($4, $2); //@line 3834
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 114; //@line 3837
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3839
    HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 3841
    HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 3843
    HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 3845
    HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 3847
    sp = STACKTOP; //@line 3848
    STACKTOP = sp; //@line 3849
    return 0; //@line 3849
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 3851
    $16 = HEAP32[$5 >> 2] | 0; //@line 3853
    break;
   }
  }
 } while (0);
 $15 = $4 + 12 | 0; //@line 3858
 HEAP32[$15 >> 2] = $16; //@line 3859
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 3862
 $$unpack4$i = HEAP32[$0 + 4 >> 2] | 0; //@line 3864
 $20 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 3866
 if (!($$unpack4$i & 1)) {
  $36 = $$unpack$i; //@line 3872
 } else {
  $36 = HEAP32[(HEAP32[$20 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 3877
 }
 do {
  if (!$16) {
   $41 = 0; //@line 3882
  } else {
   $30 = HEAP32[$16 + 4 >> 2] | 0; //@line 3885
   $AsyncCtx2 = _emscripten_alloc_async_context(36, sp) | 0; //@line 3886
   FUNCTION_TABLE_vii[$30 & 7]($3, $4); //@line 3887
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 115; //@line 3890
    HEAP32[$AsyncCtx2 + 4 >> 2] = $15; //@line 3892
    HEAP32[$AsyncCtx2 + 8 >> 2] = $3; //@line 3894
    HEAP32[$AsyncCtx2 + 12 >> 2] = $20; //@line 3896
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 3898
    HEAP32[$AsyncCtx2 + 20 >> 2] = $36; //@line 3900
    HEAP32[$AsyncCtx2 + 24 >> 2] = $3; //@line 3902
    HEAP32[$AsyncCtx2 + 28 >> 2] = $15; //@line 3904
    HEAP32[$AsyncCtx2 + 32 >> 2] = $4; //@line 3906
    sp = STACKTOP; //@line 3907
    STACKTOP = sp; //@line 3908
    return 0; //@line 3908
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 3910
    $41 = HEAP32[$15 >> 2] | 0; //@line 3912
    break;
   }
  }
 } while (0);
 $40 = $3 + 12 | 0; //@line 3917
 HEAP32[$40 >> 2] = $41; //@line 3918
 $AsyncCtx5 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3919
 $42 = FUNCTION_TABLE_iiii[$36 & 31]($20, $1, $3) | 0; //@line 3920
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 116; //@line 3923
  HEAP32[$AsyncCtx5 + 4 >> 2] = $40; //@line 3925
  HEAP32[$AsyncCtx5 + 8 >> 2] = $3; //@line 3927
  HEAP32[$AsyncCtx5 + 12 >> 2] = $15; //@line 3929
  HEAP32[$AsyncCtx5 + 16 >> 2] = $4; //@line 3931
  sp = STACKTOP; //@line 3932
  STACKTOP = sp; //@line 3933
  return 0; //@line 3933
 }
 _emscripten_free_async_context($AsyncCtx5 | 0); //@line 3935
 $47 = HEAP32[$40 >> 2] | 0; //@line 3936
 do {
  if ($47 | 0) {
   $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 3941
   $AsyncCtx9 = _emscripten_alloc_async_context(20, sp) | 0; //@line 3942
   FUNCTION_TABLE_vi[$50 & 511]($3); //@line 3943
   if (___async) {
    HEAP32[$AsyncCtx9 >> 2] = 117; //@line 3946
    HEAP32[$AsyncCtx9 + 4 >> 2] = $3; //@line 3948
    HEAP32[$AsyncCtx9 + 8 >> 2] = $15; //@line 3950
    HEAP32[$AsyncCtx9 + 12 >> 2] = $42; //@line 3952
    HEAP32[$AsyncCtx9 + 16 >> 2] = $4; //@line 3954
    sp = STACKTOP; //@line 3955
    STACKTOP = sp; //@line 3956
    return 0; //@line 3956
   } else {
    _emscripten_free_async_context($AsyncCtx9 | 0); //@line 3958
    break;
   }
  }
 } while (0);
 $55 = HEAP32[$15 >> 2] | 0; //@line 3963
 if (!$55) {
  STACKTOP = sp; //@line 3966
  return $42 | 0; //@line 3966
 }
 $58 = HEAP32[$55 + 8 >> 2] | 0; //@line 3969
 $AsyncCtx13 = _emscripten_alloc_async_context(8, sp) | 0; //@line 3970
 FUNCTION_TABLE_vi[$58 & 511]($4); //@line 3971
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 118; //@line 3974
  HEAP32[$AsyncCtx13 + 4 >> 2] = $42; //@line 3976
  sp = STACKTOP; //@line 3977
  STACKTOP = sp; //@line 3978
  return 0; //@line 3978
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 3980
 STACKTOP = sp; //@line 3981
 return $42 | 0; //@line 3981
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_152($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12518
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12522
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12524
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12526
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12528
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12530
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12532
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 12534
 $16 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12535
 if ($16 | 0) {
  $19 = HEAP32[$16 + 8 >> 2] | 0; //@line 12539
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(28) | 0; //@line 12540
  FUNCTION_TABLE_vi[$19 & 511]($6); //@line 12541
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 98; //@line 12544
   $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 12545
   HEAP32[$20 >> 2] = $4; //@line 12546
   $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 12547
   HEAP32[$21 >> 2] = $8; //@line 12548
   $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 12549
   HEAP32[$22 >> 2] = $10; //@line 12550
   $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 12551
   HEAP32[$23 >> 2] = $12; //@line 12552
   $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 12553
   HEAP32[$24 >> 2] = $AsyncRetVal; //@line 12554
   $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 12555
   HEAP32[$25 >> 2] = $14; //@line 12556
   sp = STACKTOP; //@line 12557
   return;
  }
  ___async_unwind = 0; //@line 12560
  HEAP32[$ReallocAsyncCtx6 >> 2] = 98; //@line 12561
  $20 = $ReallocAsyncCtx6 + 4 | 0; //@line 12562
  HEAP32[$20 >> 2] = $4; //@line 12563
  $21 = $ReallocAsyncCtx6 + 8 | 0; //@line 12564
  HEAP32[$21 >> 2] = $8; //@line 12565
  $22 = $ReallocAsyncCtx6 + 12 | 0; //@line 12566
  HEAP32[$22 >> 2] = $10; //@line 12567
  $23 = $ReallocAsyncCtx6 + 16 | 0; //@line 12568
  HEAP32[$23 >> 2] = $12; //@line 12569
  $24 = $ReallocAsyncCtx6 + 20 | 0; //@line 12570
  HEAP32[$24 >> 2] = $AsyncRetVal; //@line 12571
  $25 = $ReallocAsyncCtx6 + 24 | 0; //@line 12572
  HEAP32[$25 >> 2] = $14; //@line 12573
  sp = STACKTOP; //@line 12574
  return;
 }
 $26 = HEAP32[$4 >> 2] | 0; //@line 12577
 if ($26 | 0) {
  $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 12581
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 12582
  FUNCTION_TABLE_vi[$29 & 511]($10); //@line 12583
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 12586
   $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 12587
   HEAP32[$30 >> 2] = $8; //@line 12588
   $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 12589
   HEAP32[$31 >> 2] = $12; //@line 12590
   $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 12591
   HEAP32[$32 >> 2] = $AsyncRetVal; //@line 12592
   $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 12593
   HEAP32[$33 >> 2] = $14; //@line 12594
   sp = STACKTOP; //@line 12595
   return;
  }
  ___async_unwind = 0; //@line 12598
  HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 12599
  $30 = $ReallocAsyncCtx7 + 4 | 0; //@line 12600
  HEAP32[$30 >> 2] = $8; //@line 12601
  $31 = $ReallocAsyncCtx7 + 8 | 0; //@line 12602
  HEAP32[$31 >> 2] = $12; //@line 12603
  $32 = $ReallocAsyncCtx7 + 12 | 0; //@line 12604
  HEAP32[$32 >> 2] = $AsyncRetVal; //@line 12605
  $33 = $ReallocAsyncCtx7 + 16 | 0; //@line 12606
  HEAP32[$33 >> 2] = $14; //@line 12607
  sp = STACKTOP; //@line 12608
  return;
 }
 $34 = HEAP32[$8 >> 2] | 0; //@line 12611
 if (!$34) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 12615
  return;
 }
 $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 12619
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 12620
 FUNCTION_TABLE_vi[$37 & 511]($12); //@line 12621
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 12624
  $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 12625
  HEAP32[$38 >> 2] = $12; //@line 12626
  $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 12627
  HEAP32[$39 >> 2] = $AsyncRetVal; //@line 12628
  $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 12629
  HEAP32[$40 >> 2] = $14; //@line 12630
  sp = STACKTOP; //@line 12631
  return;
 }
 ___async_unwind = 0; //@line 12634
 HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 12635
 $38 = $ReallocAsyncCtx8 + 4 | 0; //@line 12636
 HEAP32[$38 >> 2] = $12; //@line 12637
 $39 = $ReallocAsyncCtx8 + 8 | 0; //@line 12638
 HEAP32[$39 >> 2] = $AsyncRetVal; //@line 12639
 $40 = $ReallocAsyncCtx8 + 12 | 0; //@line 12640
 HEAP32[$40 >> 2] = $14; //@line 12641
 sp = STACKTOP; //@line 12642
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $11 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $33 = 0, $34 = 0, $35 = 0, $40 = 0, $43 = 0, $47 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx13 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7335
 STACKTOP = STACKTOP + 32 | 0; //@line 7336
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 7336
 $5 = sp + 16 | 0; //@line 7337
 $6 = sp; //@line 7338
 $7 = $2 + 12 | 0; //@line 7339
 $8 = HEAP32[$7 >> 2] | 0; //@line 7340
 do {
  if (!$8) {
   $20 = 0; //@line 7344
  } else {
   $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 7347
   $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 7348
   FUNCTION_TABLE_vii[$11 & 7]($5, $2); //@line 7349
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 165; //@line 7352
    HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 7354
    HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 7356
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 7358
    HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 7360
    HEAP32[$AsyncCtx + 20 >> 2] = $0; //@line 7362
    HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 7364
    HEAP32[$AsyncCtx + 28 >> 2] = $4; //@line 7366
    sp = STACKTOP; //@line 7367
    STACKTOP = sp; //@line 7368
    return 0; //@line 7368
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7370
    $20 = HEAP32[$7 >> 2] | 0; //@line 7372
    break;
   }
  }
 } while (0);
 $19 = $5 + 12 | 0; //@line 7377
 HEAP32[$19 >> 2] = $20; //@line 7378
 $21 = $3 + 12 | 0; //@line 7379
 $22 = HEAP32[$21 >> 2] | 0; //@line 7380
 do {
  if (!$22) {
   $34 = 0; //@line 7384
  } else {
   $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 7387
   $AsyncCtx2 = _emscripten_alloc_async_context(32, sp) | 0; //@line 7388
   FUNCTION_TABLE_vii[$25 & 7]($6, $3); //@line 7389
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 166; //@line 7392
    HEAP32[$AsyncCtx2 + 4 >> 2] = $21; //@line 7394
    HEAP32[$AsyncCtx2 + 8 >> 2] = $6; //@line 7396
    HEAP32[$AsyncCtx2 + 12 >> 2] = $0; //@line 7398
    HEAP32[$AsyncCtx2 + 16 >> 2] = $1; //@line 7400
    HEAP32[$AsyncCtx2 + 20 >> 2] = $5; //@line 7402
    HEAP32[$AsyncCtx2 + 24 >> 2] = $4; //@line 7404
    HEAP32[$AsyncCtx2 + 28 >> 2] = $19; //@line 7406
    sp = STACKTOP; //@line 7407
    STACKTOP = sp; //@line 7408
    return 0; //@line 7408
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 7410
    $34 = HEAP32[$21 >> 2] | 0; //@line 7412
    break;
   }
  }
 } while (0);
 $33 = $6 + 12 | 0; //@line 7417
 HEAP32[$33 >> 2] = $34; //@line 7418
 $AsyncCtx13 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7419
 $35 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($0, $1, $5, 0, $6, $4) | 0; //@line 7420
 if (___async) {
  HEAP32[$AsyncCtx13 >> 2] = 167; //@line 7423
  HEAP32[$AsyncCtx13 + 4 >> 2] = $33; //@line 7425
  HEAP32[$AsyncCtx13 + 8 >> 2] = $19; //@line 7427
  HEAP32[$AsyncCtx13 + 12 >> 2] = $6; //@line 7429
  HEAP32[$AsyncCtx13 + 16 >> 2] = $5; //@line 7431
  sp = STACKTOP; //@line 7432
  STACKTOP = sp; //@line 7433
  return 0; //@line 7433
 }
 _emscripten_free_async_context($AsyncCtx13 | 0); //@line 7435
 $40 = HEAP32[$33 >> 2] | 0; //@line 7436
 do {
  if ($40 | 0) {
   $43 = HEAP32[$40 + 8 >> 2] | 0; //@line 7441
   $AsyncCtx6 = _emscripten_alloc_async_context(16, sp) | 0; //@line 7442
   FUNCTION_TABLE_vi[$43 & 511]($6); //@line 7443
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 168; //@line 7446
    HEAP32[$AsyncCtx6 + 4 >> 2] = $19; //@line 7448
    HEAP32[$AsyncCtx6 + 8 >> 2] = $35; //@line 7450
    HEAP32[$AsyncCtx6 + 12 >> 2] = $5; //@line 7452
    sp = STACKTOP; //@line 7453
    STACKTOP = sp; //@line 7454
    return 0; //@line 7454
   } else {
    _emscripten_free_async_context($AsyncCtx6 | 0); //@line 7456
    break;
   }
  }
 } while (0);
 $47 = HEAP32[$19 >> 2] | 0; //@line 7461
 if (!$47) {
  STACKTOP = sp; //@line 7464
  return $35 | 0; //@line 7464
 }
 $50 = HEAP32[$47 + 8 >> 2] | 0; //@line 7467
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 7468
 FUNCTION_TABLE_vi[$50 & 511]($5); //@line 7469
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 169; //@line 7472
  HEAP32[$AsyncCtx10 + 4 >> 2] = $35; //@line 7474
  sp = STACKTOP; //@line 7475
  STACKTOP = sp; //@line 7476
  return 0; //@line 7476
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 7478
 STACKTOP = sp; //@line 7479
 return $35 | 0; //@line 7479
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_195($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15539
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15541
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15543
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15545
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15547
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15549
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15551
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15553
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15555
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15557
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 15559
 $21 = $8 + 44 | 0; //@line 15560
 $22 = HEAP32[$21 >> 2] | 0; //@line 15561
 if ($22 | 0) {
  $25 = HEAP32[$22 + 4 >> 2] | 0; //@line 15565
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(40) | 0; //@line 15566
  FUNCTION_TABLE_vii[$25 & 7]($10, $12); //@line 15567
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 15570
   $26 = $ReallocAsyncCtx9 + 4 | 0; //@line 15571
   HEAP32[$26 >> 2] = $21; //@line 15572
   $27 = $ReallocAsyncCtx9 + 8 | 0; //@line 15573
   HEAP32[$27 >> 2] = $18; //@line 15574
   $28 = $ReallocAsyncCtx9 + 12 | 0; //@line 15575
   HEAP32[$28 >> 2] = $20; //@line 15576
   $29 = $ReallocAsyncCtx9 + 16 | 0; //@line 15577
   HEAP32[$29 >> 2] = $14; //@line 15578
   $30 = $ReallocAsyncCtx9 + 20 | 0; //@line 15579
   HEAP32[$30 >> 2] = $2; //@line 15580
   $31 = $ReallocAsyncCtx9 + 24 | 0; //@line 15581
   HEAP32[$31 >> 2] = $16; //@line 15582
   $32 = $ReallocAsyncCtx9 + 28 | 0; //@line 15583
   HEAP32[$32 >> 2] = $4; //@line 15584
   $33 = $ReallocAsyncCtx9 + 32 | 0; //@line 15585
   HEAP32[$33 >> 2] = $6; //@line 15586
   $34 = $ReallocAsyncCtx9 + 36 | 0; //@line 15587
   HEAP32[$34 >> 2] = $8; //@line 15588
   sp = STACKTOP; //@line 15589
   return;
  }
  ___async_unwind = 0; //@line 15592
  HEAP32[$ReallocAsyncCtx9 >> 2] = 227; //@line 15593
  $26 = $ReallocAsyncCtx9 + 4 | 0; //@line 15594
  HEAP32[$26 >> 2] = $21; //@line 15595
  $27 = $ReallocAsyncCtx9 + 8 | 0; //@line 15596
  HEAP32[$27 >> 2] = $18; //@line 15597
  $28 = $ReallocAsyncCtx9 + 12 | 0; //@line 15598
  HEAP32[$28 >> 2] = $20; //@line 15599
  $29 = $ReallocAsyncCtx9 + 16 | 0; //@line 15600
  HEAP32[$29 >> 2] = $14; //@line 15601
  $30 = $ReallocAsyncCtx9 + 20 | 0; //@line 15602
  HEAP32[$30 >> 2] = $2; //@line 15603
  $31 = $ReallocAsyncCtx9 + 24 | 0; //@line 15604
  HEAP32[$31 >> 2] = $16; //@line 15605
  $32 = $ReallocAsyncCtx9 + 28 | 0; //@line 15606
  HEAP32[$32 >> 2] = $4; //@line 15607
  $33 = $ReallocAsyncCtx9 + 32 | 0; //@line 15608
  HEAP32[$33 >> 2] = $6; //@line 15609
  $34 = $ReallocAsyncCtx9 + 36 | 0; //@line 15610
  HEAP32[$34 >> 2] = $8; //@line 15611
  sp = STACKTOP; //@line 15612
  return;
 }
 HEAP32[$18 >> 2] = 0; //@line 15615
 $$pre85 = HEAP32[$20 >> 2] | 0; //@line 15616
 HEAP32[$$pre85 + 16 >> 2] = HEAP32[$14 >> 2]; //@line 15620
 HEAP32[$2 + 8 >> 2] = 0; //@line 15622
 HEAP32[$2 >> 2] = 228; //@line 15623
 HEAP32[$2 + 4 >> 2] = $$pre85; //@line 15625
 $39 = $2 + 12 | 0; //@line 15626
 HEAP32[$39 >> 2] = 764; //@line 15627
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 15628
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($16, $2); //@line 15629
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 15632
  $40 = $ReallocAsyncCtx18 + 4 | 0; //@line 15633
  HEAP32[$40 >> 2] = $39; //@line 15634
  $41 = $ReallocAsyncCtx18 + 8 | 0; //@line 15635
  HEAP32[$41 >> 2] = $4; //@line 15636
  $42 = $ReallocAsyncCtx18 + 12 | 0; //@line 15637
  HEAP32[$42 >> 2] = $6; //@line 15638
  $43 = $ReallocAsyncCtx18 + 16 | 0; //@line 15639
  HEAP32[$43 >> 2] = $2; //@line 15640
  $44 = $ReallocAsyncCtx18 + 20 | 0; //@line 15641
  HEAP32[$44 >> 2] = $8; //@line 15642
  sp = STACKTOP; //@line 15643
  return;
 }
 ___async_unwind = 0; //@line 15646
 HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 15647
 $40 = $ReallocAsyncCtx18 + 4 | 0; //@line 15648
 HEAP32[$40 >> 2] = $39; //@line 15649
 $41 = $ReallocAsyncCtx18 + 8 | 0; //@line 15650
 HEAP32[$41 >> 2] = $4; //@line 15651
 $42 = $ReallocAsyncCtx18 + 12 | 0; //@line 15652
 HEAP32[$42 >> 2] = $6; //@line 15653
 $43 = $ReallocAsyncCtx18 + 16 | 0; //@line 15654
 HEAP32[$43 >> 2] = $2; //@line 15655
 $44 = $ReallocAsyncCtx18 + 20 | 0; //@line 15656
 HEAP32[$44 >> 2] = $8; //@line 15657
 sp = STACKTOP; //@line 15658
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$04 = 0, $11 = 0, $15 = 0, $16 = 0, $19 = 0, $22 = 0, $24 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $34 = 0, $37 = 0, $4 = 0, $7 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx11 = 0, $AsyncCtx14 = 0, $AsyncCtx17 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9267
 STACKTOP = STACKTOP + 32 | 0; //@line 9268
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9268
 $3 = sp + 16 | 0; //@line 9269
 $4 = sp; //@line 9270
 $7 = $2 + 12 | 0; //@line 9273
 $8 = HEAP32[$7 >> 2] | 0; //@line 9274
 $9 = ($8 | 0) == 0; //@line 9275
 if (!(HEAP32[1945] | 0)) {
  do {
   if ($9) {
    $30 = 0; //@line 9279
   } else {
    $24 = HEAP32[$8 + 4 >> 2] | 0; //@line 9282
    $AsyncCtx7 = _emscripten_alloc_async_context(20, sp) | 0; //@line 9283
    FUNCTION_TABLE_vii[$24 & 7]($4, $2); //@line 9284
    if (___async) {
     HEAP32[$AsyncCtx7 >> 2] = 204; //@line 9287
     HEAP32[$AsyncCtx7 + 4 >> 2] = $7; //@line 9289
     HEAP32[$AsyncCtx7 + 8 >> 2] = $4; //@line 9291
     HEAP32[$AsyncCtx7 + 12 >> 2] = $0; //@line 9293
     HEAP32[$AsyncCtx7 + 16 >> 2] = $1; //@line 9295
     sp = STACKTOP; //@line 9296
     STACKTOP = sp; //@line 9297
     return 0; //@line 9297
    } else {
     _emscripten_free_async_context($AsyncCtx7 | 0); //@line 9299
     $30 = HEAP32[$7 >> 2] | 0; //@line 9301
     break;
    }
   }
  } while (0);
  $29 = $4 + 12 | 0; //@line 9306
  HEAP32[$29 >> 2] = $30; //@line 9307
  $AsyncCtx14 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9308
  $31 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($0, $1, $4) | 0; //@line 9309
  if (___async) {
   HEAP32[$AsyncCtx14 >> 2] = 205; //@line 9312
   HEAP32[$AsyncCtx14 + 4 >> 2] = $29; //@line 9314
   HEAP32[$AsyncCtx14 + 8 >> 2] = $4; //@line 9316
   sp = STACKTOP; //@line 9317
   STACKTOP = sp; //@line 9318
   return 0; //@line 9318
  }
  _emscripten_free_async_context($AsyncCtx14 | 0); //@line 9320
  $34 = HEAP32[$29 >> 2] | 0; //@line 9321
  if (!$34) {
   $$04 = $31; //@line 9324
   STACKTOP = sp; //@line 9325
   return $$04 | 0; //@line 9325
  }
  $37 = HEAP32[$34 + 8 >> 2] | 0; //@line 9328
  $AsyncCtx11 = _emscripten_alloc_async_context(8, sp) | 0; //@line 9329
  FUNCTION_TABLE_vi[$37 & 511]($4); //@line 9330
  if (___async) {
   HEAP32[$AsyncCtx11 >> 2] = 206; //@line 9333
   HEAP32[$AsyncCtx11 + 4 >> 2] = $31; //@line 9335
   sp = STACKTOP; //@line 9336
   STACKTOP = sp; //@line 9337
   return 0; //@line 9337
  }
  _emscripten_free_async_context($AsyncCtx11 | 0); //@line 9339
  $$04 = $31; //@line 9340
  STACKTOP = sp; //@line 9341
  return $$04 | 0; //@line 9341
 } else {
  do {
   if ($9) {
    $16 = 0; //@line 9345
   } else {
    $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 9348
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 9349
    FUNCTION_TABLE_vii[$11 & 7]($3, $2); //@line 9350
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 201; //@line 9353
     HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 9355
     HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 9357
     HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 9359
     sp = STACKTOP; //@line 9360
     STACKTOP = sp; //@line 9361
     return 0; //@line 9361
    } else {
     _emscripten_free_async_context($AsyncCtx | 0); //@line 9363
     $16 = HEAP32[$7 >> 2] | 0; //@line 9365
     break;
    }
   }
  } while (0);
  $15 = $3 + 12 | 0; //@line 9370
  HEAP32[$15 >> 2] = $16; //@line 9371
  $AsyncCtx17 = _emscripten_alloc_async_context(12, sp) | 0; //@line 9372
  __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(7768, $1, $3) | 0; //@line 9373
  if (___async) {
   HEAP32[$AsyncCtx17 >> 2] = 202; //@line 9376
   HEAP32[$AsyncCtx17 + 4 >> 2] = $15; //@line 9378
   HEAP32[$AsyncCtx17 + 8 >> 2] = $3; //@line 9380
   sp = STACKTOP; //@line 9381
   STACKTOP = sp; //@line 9382
   return 0; //@line 9382
  }
  _emscripten_free_async_context($AsyncCtx17 | 0); //@line 9384
  $19 = HEAP32[$15 >> 2] | 0; //@line 9385
  if (!$19) {
   $$04 = 0; //@line 9388
   STACKTOP = sp; //@line 9389
   return $$04 | 0; //@line 9389
  }
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 9392
  $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 9393
  FUNCTION_TABLE_vi[$22 & 511]($3); //@line 9394
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 203; //@line 9397
   sp = STACKTOP; //@line 9398
   STACKTOP = sp; //@line 9399
   return 0; //@line 9399
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 9401
  $$04 = 0; //@line 9402
  STACKTOP = sp; //@line 9403
  return $$04 | 0; //@line 9403
 }
 return 0; //@line 9405
}
function __ZN9TCPSocket7connectEPKct__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$expand_i1_val = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $42 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 5476
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5478
 $4 = HEAP16[$0 + 8 >> 1] | 0; //@line 5480
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5482
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5484
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5486
 if (HEAP32[___async_retval >> 2] | 0) {
  $$0 = -3009; //@line 5491
  $42 = ___async_retval; //@line 5492
  HEAP32[$42 >> 2] = $$0; //@line 5493
  return;
 }
 __ZN13SocketAddress8set_portEt($2, $4); //@line 5496
 $13 = $6 + 57 | 0; //@line 5497
 if (HEAP8[$13 >> 0] | 0) {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 5501
  _mbed_assert_internal(3685, 3705, 52); //@line 5502
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 5505
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 5506
   HEAP32[$16 >> 2] = $13; //@line 5507
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 5508
   HEAP32[$17 >> 2] = $6; //@line 5509
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 5510
   HEAP32[$18 >> 2] = $10; //@line 5511
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 5512
   HEAP32[$19 >> 2] = $2; //@line 5513
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 5514
   HEAP32[$20 >> 2] = $8; //@line 5515
   sp = STACKTOP; //@line 5516
   return;
  }
  ___async_unwind = 0; //@line 5519
  HEAP32[$ReallocAsyncCtx3 >> 2] = 142; //@line 5520
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 5521
  HEAP32[$16 >> 2] = $13; //@line 5522
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 5523
  HEAP32[$17 >> 2] = $6; //@line 5524
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 5525
  HEAP32[$18 >> 2] = $10; //@line 5526
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 5527
  HEAP32[$19 >> 2] = $2; //@line 5528
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 5529
  HEAP32[$20 >> 2] = $8; //@line 5530
  sp = STACKTOP; //@line 5531
  return;
 }
 HEAP8[$13 >> 0] = 1; //@line 5534
 $21 = $6 + 8 | 0; //@line 5535
 $22 = $6 + 52 | 0; //@line 5536
 $23 = $6 + 12 | 0; //@line 5537
 $24 = HEAP32[$21 >> 2] | 0; //@line 5538
 if (!$24) {
  HEAP8[$13 >> 0] = 0; //@line 5541
  $$0 = 0 & -3005 == -3015 ? 0 : -3005; //@line 5545
  $42 = ___async_retval; //@line 5546
  HEAP32[$42 >> 2] = $$0; //@line 5547
  return;
 }
 HEAP32[$22 >> 2] = 0; //@line 5550
 $26 = HEAP32[$10 >> 2] | 0; //@line 5551
 $29 = HEAP32[(HEAP32[$26 >> 2] | 0) + 60 >> 2] | 0; //@line 5554
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 5555
 $30 = FUNCTION_TABLE_iiii[$29 & 31]($26, $24, $2) | 0; //@line 5556
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 5559
  $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 5560
  HEAP32[$31 >> 2] = $23; //@line 5561
  $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 5562
  HEAP32[$32 >> 2] = $21; //@line 5563
  $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 5564
  HEAP32[$33 >> 2] = $13; //@line 5565
  $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 5566
  $$expand_i1_val = 0; //@line 5567
  HEAP8[$34 >> 0] = $$expand_i1_val; //@line 5568
  $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 5569
  HEAP32[$35 >> 2] = $8; //@line 5570
  $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 5571
  HEAP32[$36 >> 2] = $22; //@line 5572
  $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 5573
  HEAP32[$37 >> 2] = $10; //@line 5574
  $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 5575
  HEAP32[$38 >> 2] = $2; //@line 5576
  sp = STACKTOP; //@line 5577
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 5581
 ___async_unwind = 0; //@line 5582
 HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 5583
 $31 = $ReallocAsyncCtx2 + 4 | 0; //@line 5584
 HEAP32[$31 >> 2] = $23; //@line 5585
 $32 = $ReallocAsyncCtx2 + 8 | 0; //@line 5586
 HEAP32[$32 >> 2] = $21; //@line 5587
 $33 = $ReallocAsyncCtx2 + 12 | 0; //@line 5588
 HEAP32[$33 >> 2] = $13; //@line 5589
 $34 = $ReallocAsyncCtx2 + 16 | 0; //@line 5590
 $$expand_i1_val = 0; //@line 5591
 HEAP8[$34 >> 0] = $$expand_i1_val; //@line 5592
 $35 = $ReallocAsyncCtx2 + 20 | 0; //@line 5593
 HEAP32[$35 >> 2] = $8; //@line 5594
 $36 = $ReallocAsyncCtx2 + 24 | 0; //@line 5595
 HEAP32[$36 >> 2] = $22; //@line 5596
 $37 = $ReallocAsyncCtx2 + 28 | 0; //@line 5597
 HEAP32[$37 >> 2] = $10; //@line 5598
 $38 = $ReallocAsyncCtx2 + 32 | 0; //@line 5599
 HEAP32[$38 >> 2] = $2; //@line 5600
 sp = STACKTOP; //@line 5601
 return;
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_161($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $29 = 0, $32 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $40 = 0, $44 = 0, $45 = 0, $46 = 0, $7 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13189
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13191
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13193
 $7 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 13196
 if ($7 | 0) {
  $11 = HEAP32[(HEAP32[$7 >> 2] | 0) + 4 >> 2] | 0; //@line 13201
  $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 13202
  FUNCTION_TABLE_vi[$11 & 511]($7); //@line 13203
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 234; //@line 13206
   $12 = $ReallocAsyncCtx + 4 | 0; //@line 13207
   HEAP32[$12 >> 2] = $2; //@line 13208
   $13 = $ReallocAsyncCtx + 8 | 0; //@line 13209
   HEAP32[$13 >> 2] = $4; //@line 13210
   sp = STACKTOP; //@line 13211
   return;
  }
  ___async_unwind = 0; //@line 13214
  HEAP32[$ReallocAsyncCtx >> 2] = 234; //@line 13215
  $12 = $ReallocAsyncCtx + 4 | 0; //@line 13216
  HEAP32[$12 >> 2] = $2; //@line 13217
  $13 = $ReallocAsyncCtx + 8 | 0; //@line 13218
  HEAP32[$13 >> 2] = $4; //@line 13219
  sp = STACKTOP; //@line 13220
  return;
 }
 $15 = HEAP32[$2 + 60 >> 2] | 0; //@line 13224
 do {
  if ($15 | 0) {
   $18 = HEAP32[$15 + 12 >> 2] | 0; //@line 13229
   if (!$18) {
    __ZdlPv($15); //@line 13232
    break;
   }
   $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 13236
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 13237
   FUNCTION_TABLE_vi[$21 & 511]($15); //@line 13238
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 13241
    $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 13242
    HEAP32[$22 >> 2] = $15; //@line 13243
    $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 13244
    HEAP32[$23 >> 2] = $2; //@line 13245
    $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 13246
    HEAP32[$24 >> 2] = $4; //@line 13247
    sp = STACKTOP; //@line 13248
    return;
   }
   ___async_unwind = 0; //@line 13251
   HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 13252
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 13253
   HEAP32[$22 >> 2] = $15; //@line 13254
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 13255
   HEAP32[$23 >> 2] = $2; //@line 13256
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 13257
   HEAP32[$24 >> 2] = $4; //@line 13258
   sp = STACKTOP; //@line 13259
   return;
  }
 } while (0);
 $26 = HEAP32[$2 + 64 >> 2] | 0; //@line 13264
 if ($26 | 0) {
  __ZdaPv($26); //@line 13267
 }
 $29 = HEAP32[$2 + 12 >> 2] | 0; //@line 13270
 if ($29 | 0) {
  __ZdlPv($29); //@line 13273
 }
 $32 = HEAP32[$2 + 44 >> 2] | 0; //@line 13276
 if ($32 | 0) {
  $36 = HEAP32[$32 + 8 >> 2] | 0; //@line 13281
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 13282
  FUNCTION_TABLE_vi[$36 & 511]($2 + 32 | 0); //@line 13283
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 13286
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 13287
   HEAP32[$37 >> 2] = $2; //@line 13288
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 13289
   HEAP32[$38 >> 2] = $4; //@line 13290
   sp = STACKTOP; //@line 13291
   return;
  }
  ___async_unwind = 0; //@line 13294
  HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 13295
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 13296
  HEAP32[$37 >> 2] = $2; //@line 13297
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 13298
  HEAP32[$38 >> 2] = $4; //@line 13299
  sp = STACKTOP; //@line 13300
  return;
 }
 $40 = HEAP32[$2 + 28 >> 2] | 0; //@line 13304
 if (!$40) {
  __ZdlPv($2); //@line 13307
  HEAP32[7796 + ($4 << 2) >> 2] = 0; //@line 13309
  return;
 }
 $44 = HEAP32[$40 + 8 >> 2] | 0; //@line 13314
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 13315
 FUNCTION_TABLE_vi[$44 & 511]($2 + 16 | 0); //@line 13316
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 13319
  $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 13320
  HEAP32[$45 >> 2] = $2; //@line 13321
  $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 13322
  HEAP32[$46 >> 2] = $4; //@line 13323
  sp = STACKTOP; //@line 13324
  return;
 }
 ___async_unwind = 0; //@line 13327
 HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 13328
 $45 = $ReallocAsyncCtx4 + 4 | 0; //@line 13329
 HEAP32[$45 >> 2] = $2; //@line 13330
 $46 = $ReallocAsyncCtx4 + 8 | 0; //@line 13331
 HEAP32[$46 >> 2] = $4; //@line 13332
 sp = STACKTOP; //@line 13333
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_9($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 16249
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16251
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16253
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16255
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16257
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16259
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16261
 if (!$AsyncRetVal) {
  $28 = 0 == 0; //@line 16264
  $29 = HEAP32[$2 >> 2] | 0; //@line 16265
  if (!$29) {
   if ($28) {
    $$06 = -3007; //@line 16269
    $34 = ___async_retval; //@line 16270
    HEAP32[$34 >> 2] = $$06; //@line 16271
    return;
   }
   $$06 = 0; //@line 16274
   $34 = ___async_retval; //@line 16275
   HEAP32[$34 >> 2] = $$06; //@line 16276
   return;
  } else {
   $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 16280
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 16281
   FUNCTION_TABLE_vi[$32 & 511]($8); //@line 16282
   if (___async) {
    HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 16285
    $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 16286
    $$expand_i1_val = $28 & 1; //@line 16287
    HEAP8[$33 >> 0] = $$expand_i1_val; //@line 16288
    sp = STACKTOP; //@line 16289
    return;
   }
   ___async_unwind = 0; //@line 16292
   HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 16293
   $33 = $ReallocAsyncCtx3 + 4 | 0; //@line 16294
   $$expand_i1_val = $28 & 1; //@line 16295
   HEAP8[$33 >> 0] = $$expand_i1_val; //@line 16296
   sp = STACKTOP; //@line 16297
   return;
  }
 } else {
  $13 = HEAP32[$2 >> 2] | 0; //@line 16301
  if (!$13) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 16305
   _equeue_event_delay($AsyncRetVal, $4); //@line 16306
   _equeue_event_dtor($AsyncRetVal, 105); //@line 16307
   $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 16308
   $24 = _equeue_post($6, 106, $AsyncRetVal) | 0; //@line 16309
   if (___async) {
    HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 16312
    $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 16313
    HEAP32[$25 >> 2] = $2; //@line 16314
    $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 16315
    HEAP32[$26 >> 2] = $8; //@line 16316
    sp = STACKTOP; //@line 16317
    return;
   }
   HEAP32[___async_retval >> 2] = $24; //@line 16321
   ___async_unwind = 0; //@line 16322
   HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 16323
   $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 16324
   HEAP32[$25 >> 2] = $2; //@line 16325
   $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 16326
   HEAP32[$26 >> 2] = $8; //@line 16327
   sp = STACKTOP; //@line 16328
   return;
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 16332
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 16333
   FUNCTION_TABLE_vii[$16 & 7]($AsyncRetVal, $8); //@line 16334
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 16337
    $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 16338
    HEAP32[$17 >> 2] = $10; //@line 16339
    $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 16340
    HEAP32[$18 >> 2] = $AsyncRetVal; //@line 16341
    $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 16342
    HEAP32[$19 >> 2] = $4; //@line 16343
    $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 16344
    HEAP32[$20 >> 2] = $6; //@line 16345
    $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 16346
    HEAP32[$21 >> 2] = $2; //@line 16347
    $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 16348
    HEAP32[$22 >> 2] = $8; //@line 16349
    sp = STACKTOP; //@line 16350
    return;
   }
   ___async_unwind = 0; //@line 16353
   HEAP32[$ReallocAsyncCtx2 >> 2] = 104; //@line 16354
   $17 = $ReallocAsyncCtx2 + 4 | 0; //@line 16355
   HEAP32[$17 >> 2] = $10; //@line 16356
   $18 = $ReallocAsyncCtx2 + 8 | 0; //@line 16357
   HEAP32[$18 >> 2] = $AsyncRetVal; //@line 16358
   $19 = $ReallocAsyncCtx2 + 12 | 0; //@line 16359
   HEAP32[$19 >> 2] = $4; //@line 16360
   $20 = $ReallocAsyncCtx2 + 16 | 0; //@line 16361
   HEAP32[$20 >> 2] = $6; //@line 16362
   $21 = $ReallocAsyncCtx2 + 20 | 0; //@line 16363
   HEAP32[$21 >> 2] = $2; //@line 16364
   $22 = $ReallocAsyncCtx2 + 24 | 0; //@line 16365
   HEAP32[$22 >> 2] = $8; //@line 16366
   sp = STACKTOP; //@line 16367
   return;
  }
 }
}
function __ZN9TCPSocket7connectEPKct($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$0$off0$i = 0, $$08$i = 0, $$byval_copy = 0, $16 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5236
 STACKTOP = STACKTOP + 112 | 0; //@line 5237
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 5237
 $$byval_copy = sp + 88 | 0; //@line 5238
 $3 = sp + 24 | 0; //@line 5239
 $4 = sp; //@line 5240
 HEAP32[$4 >> 2] = 0; //@line 5241
 HEAP32[$4 + 4 >> 2] = 0; //@line 5241
 HEAP32[$4 + 8 >> 2] = 0; //@line 5241
 HEAP32[$4 + 12 >> 2] = 0; //@line 5241
 HEAP32[$4 + 16 >> 2] = 0; //@line 5241
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 5242
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 5242
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 5242
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 5242
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 5242
 __ZN13SocketAddressC2E10nsapi_addrt($3, $$byval_copy, 0); //@line 5243
 $5 = $0 + 4 | 0; //@line 5244
 $6 = HEAP32[$5 >> 2] | 0; //@line 5245
 $8 = HEAP32[HEAP32[$6 >> 2] >> 2] | 0; //@line 5247
 $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 5248
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($6, $1, $3, 0) | 0; //@line 5249
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 141; //@line 5252
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 5254
  HEAP16[$AsyncCtx + 8 >> 1] = $2; //@line 5256
  HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 5258
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 5260
  HEAP32[$AsyncCtx + 20 >> 2] = $5; //@line 5262
  sp = STACKTOP; //@line 5263
  STACKTOP = sp; //@line 5264
  return 0; //@line 5264
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5266
 if ($9 | 0) {
  $$0 = -3009; //@line 5269
  STACKTOP = sp; //@line 5270
  return $$0 | 0; //@line 5270
 }
 __ZN13SocketAddress8set_portEt($3, $2); //@line 5272
 $16 = $0 + 57 | 0; //@line 5273
 do {
  if (HEAP8[$16 >> 0] | 0) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5278
   _mbed_assert_internal(3685, 3705, 52); //@line 5279
   if (___async) {
    HEAP32[$AsyncCtx7 >> 2] = 142; //@line 5282
    HEAP32[$AsyncCtx7 + 4 >> 2] = $16; //@line 5284
    HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 5286
    HEAP32[$AsyncCtx7 + 12 >> 2] = $5; //@line 5288
    HEAP32[$AsyncCtx7 + 16 >> 2] = $3; //@line 5290
    HEAP32[$AsyncCtx7 + 20 >> 2] = $3; //@line 5292
    sp = STACKTOP; //@line 5293
    STACKTOP = sp; //@line 5294
    return 0; //@line 5294
   } else {
    _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5296
    break;
   }
  }
 } while (0);
 HEAP8[$16 >> 0] = 1; //@line 5301
 $24 = $0 + 8 | 0; //@line 5302
 $25 = $0 + 52 | 0; //@line 5303
 $26 = $0 + 12 | 0; //@line 5304
 $$0$off0$i = 0; //@line 5305
 while (1) {
  $27 = HEAP32[$24 >> 2] | 0; //@line 5307
  if (!$27) {
   $$08$i = -3005; //@line 5310
   break;
  }
  HEAP32[$25 >> 2] = 0; //@line 5313
  $29 = HEAP32[$5 >> 2] | 0; //@line 5314
  $32 = HEAP32[(HEAP32[$29 >> 2] | 0) + 60 >> 2] | 0; //@line 5317
  $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 5318
  $33 = FUNCTION_TABLE_iiii[$32 & 31]($29, $27, $3) | 0; //@line 5319
  if (___async) {
   label = 11; //@line 5322
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5325
  if ((HEAP32[$26 >> 2] | 0) != 0 & ($33 | 1 | 0) == -3013) {
   $$0$off0$i = 1; //@line 5332
  } else {
   $$08$i = $33; //@line 5334
   break;
  }
 }
 if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 143; //@line 5339
  HEAP32[$AsyncCtx3 + 4 >> 2] = $26; //@line 5341
  HEAP32[$AsyncCtx3 + 8 >> 2] = $24; //@line 5343
  HEAP32[$AsyncCtx3 + 12 >> 2] = $16; //@line 5345
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$0$off0$i & 1; //@line 5348
  HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 5350
  HEAP32[$AsyncCtx3 + 24 >> 2] = $25; //@line 5352
  HEAP32[$AsyncCtx3 + 28 >> 2] = $5; //@line 5354
  HEAP32[$AsyncCtx3 + 32 >> 2] = $3; //@line 5356
  sp = STACKTOP; //@line 5357
  STACKTOP = sp; //@line 5358
  return 0; //@line 5358
 }
 HEAP8[$16 >> 0] = 0; //@line 5360
 $$0 = $$0$off0$i & ($$08$i | 0) == -3015 ? 0 : $$08$i; //@line 5364
 STACKTOP = sp; //@line 5365
 return $$0 | 0; //@line 5365
}
function __Z28nsapi_dns_query_async_canceli($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$lcssa = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i$i = 0, $1 = 0, $11 = 0, $13 = 0, $14 = 0, $17 = 0, $2 = 0, $24 = 0, $31 = 0, $35 = 0, $39 = 0, $43 = 0, $6 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 12544
 STACKTOP = STACKTOP + 16 | 0; //@line 12545
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12545
 $1 = sp; //@line 12546
 $2 = HEAP32[1949] | 0; //@line 12547
 if (!$2) {
  label = 3; //@line 12550
 } else {
  if ((HEAP32[$2 >> 2] | 0) == ($0 | 0)) {
   $$lcssa = $2; //@line 12555
  } else {
   label = 3; //@line 12557
  }
 }
 do {
  if ((label | 0) == 3) {
   $6 = HEAP32[1950] | 0; //@line 12562
   if ($6 | 0) {
    if ((HEAP32[$6 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $6; //@line 12568
     break;
    }
   }
   $35 = HEAP32[1951] | 0; //@line 12572
   if ($35 | 0) {
    if ((HEAP32[$35 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $35; //@line 12578
     break;
    }
   }
   $39 = HEAP32[1952] | 0; //@line 12582
   if ($39 | 0) {
    if ((HEAP32[$39 >> 2] | 0) == ($0 | 0)) {
     $$lcssa = $39; //@line 12588
     break;
    }
   }
   $43 = HEAP32[1953] | 0; //@line 12592
   if (!$43) {
    $$0 = -3003; //@line 12595
    STACKTOP = sp; //@line 12596
    return $$0 | 0; //@line 12596
   }
   if ((HEAP32[$43 >> 2] | 0) == ($0 | 0)) {
    $$lcssa = $43; //@line 12601
   } else {
    $$0 = -3003; //@line 12603
    STACKTOP = sp; //@line 12604
    return $$0 | 0; //@line 12604
   }
  }
 } while (0);
 $8 = $$lcssa + 88 | 0; //@line 12608
 if ((HEAP32[$8 >> 2] | 0) == 2) {
  $$0 = -3003; //@line 12612
  STACKTOP = sp; //@line 12613
  return $$0 | 0; //@line 12613
 }
 HEAP32[$8 >> 2] = 2; //@line 12615
 HEAP32[$1 >> 2] = 0; //@line 12616
 HEAP32[$1 + 4 >> 2] = 0; //@line 12616
 HEAP32[$1 + 8 >> 2] = 0; //@line 12616
 HEAP32[$1 + 12 >> 2] = 0; //@line 12616
 $11 = $$lcssa + 16 | 0; //@line 12617
 do {
  if (($11 | 0) != ($1 | 0)) {
   $13 = $$lcssa + 28 | 0; //@line 12621
   $14 = HEAP32[$13 >> 2] | 0; //@line 12622
   if ($14 | 0) {
    $17 = HEAP32[$14 + 8 >> 2] | 0; //@line 12626
    $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 12627
    FUNCTION_TABLE_vi[$17 & 511]($11); //@line 12628
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 277; //@line 12631
     HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 12633
     HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 12635
     HEAP32[$AsyncCtx + 12 >> 2] = $11; //@line 12637
     HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 12639
     sp = STACKTOP; //@line 12640
     STACKTOP = sp; //@line 12641
     return 0; //@line 12641
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 12643
    $$phi$trans$insert = $1 + 12 | 0; //@line 12644
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 12645
    if ($$pre | 0) {
     $24 = HEAP32[$$pre + 4 >> 2] | 0; //@line 12649
     $AsyncCtx2 = _emscripten_alloc_async_context(16, sp) | 0; //@line 12650
     FUNCTION_TABLE_vii[$24 & 7]($11, $1); //@line 12651
     if (___async) {
      HEAP32[$AsyncCtx2 >> 2] = 278; //@line 12654
      HEAP32[$AsyncCtx2 + 4 >> 2] = $$phi$trans$insert; //@line 12656
      HEAP32[$AsyncCtx2 + 8 >> 2] = $13; //@line 12658
      HEAP32[$AsyncCtx2 + 12 >> 2] = $1; //@line 12660
      sp = STACKTOP; //@line 12661
      STACKTOP = sp; //@line 12662
      return 0; //@line 12662
     }
     _emscripten_free_async_context($AsyncCtx2 | 0); //@line 12664
     $$pre$i$i = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 12665
     HEAP32[$13 >> 2] = $$pre$i$i; //@line 12666
     if (!$$pre$i$i) {
      break;
     }
     $31 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 12673
     $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 12674
     FUNCTION_TABLE_vi[$31 & 511]($1); //@line 12675
     if (___async) {
      HEAP32[$AsyncCtx5 >> 2] = 279; //@line 12678
      HEAP32[$AsyncCtx5 + 4 >> 2] = $1; //@line 12680
      sp = STACKTOP; //@line 12681
      STACKTOP = sp; //@line 12682
      return 0; //@line 12682
     } else {
      _emscripten_free_async_context($AsyncCtx5 | 0); //@line 12684
      break;
     }
    }
   }
   HEAP32[$13 >> 2] = 0; //@line 12689
  }
 } while (0);
 $$0 = 0; //@line 12692
 STACKTOP = sp; //@line 12693
 return $$0 | 0; //@line 12693
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_172($0) {
 $0 = $0 | 0;
 var $$085$off0$reg2mem$0 = 0, $$182$off0 = 0, $$186$off0 = 0, $$283$off0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $4 = 0, $59 = 0, $6 = 0, $67 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14573
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14575
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14577
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14579
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14581
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14583
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14585
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14587
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14589
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 14592
 $20 = HEAP8[$0 + 37 >> 0] & 1; //@line 14595
 $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 14597
 $24 = HEAP32[$0 + 44 >> 2] | 0; //@line 14599
 $26 = HEAP32[$0 + 48 >> 2] | 0; //@line 14601
 $28 = HEAP8[$0 + 52 >> 0] & 1; //@line 14604
 L2 : do {
  if (!(HEAP8[$4 >> 0] | 0)) {
   do {
    if (!(HEAP8[$26 >> 0] | 0)) {
     $$182$off0 = $20; //@line 14613
     $$186$off0 = $18; //@line 14613
    } else {
     if (!(HEAP8[$8 >> 0] | 0)) {
      if (!(HEAP32[$6 >> 2] & 1)) {
       $$085$off0$reg2mem$0 = $18; //@line 14622
       $$283$off0 = 1; //@line 14622
       label = 13; //@line 14623
       break L2;
      } else {
       $$182$off0 = 1; //@line 14626
       $$186$off0 = $18; //@line 14626
       break;
      }
     }
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      label = 18; //@line 14633
      break L2;
     }
     if (!(HEAP32[$6 >> 2] & 2)) {
      label = 18; //@line 14640
      break L2;
     } else {
      $$182$off0 = 1; //@line 14643
      $$186$off0 = 1; //@line 14643
     }
    }
   } while (0);
   $30 = $22 + 8 | 0; //@line 14647
   if ($30 >>> 0 < $24 >>> 0) {
    HEAP8[$8 >> 0] = 0; //@line 14650
    HEAP8[$26 >> 0] = 0; //@line 14651
    $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 14652
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($30, $16, $12, $12, 1, $28); //@line 14653
    if (!___async) {
     ___async_unwind = 0; //@line 14656
    }
    HEAP32[$ReallocAsyncCtx5 >> 2] = 356; //@line 14658
    HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 14660
    HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 14662
    HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 14664
    HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 14666
    HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 14668
    HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 14670
    HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 14672
    HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 14674
    HEAP8[$ReallocAsyncCtx5 + 36 >> 0] = $$186$off0 & 1; //@line 14677
    HEAP8[$ReallocAsyncCtx5 + 37 >> 0] = $$182$off0 & 1; //@line 14680
    HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $30; //@line 14682
    HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 14684
    HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 14686
    HEAP8[$ReallocAsyncCtx5 + 52 >> 0] = $28 & 1; //@line 14689
    sp = STACKTOP; //@line 14690
    return;
   } else {
    $$085$off0$reg2mem$0 = $$186$off0; //@line 14693
    $$283$off0 = $$182$off0; //@line 14693
    label = 13; //@line 14694
   }
  } else {
   $$085$off0$reg2mem$0 = $18; //@line 14697
   $$283$off0 = $20; //@line 14697
   label = 13; //@line 14698
  }
 } while (0);
 do {
  if ((label | 0) == 13) {
   if (!$$085$off0$reg2mem$0) {
    HEAP32[$14 >> 2] = $12; //@line 14704
    $59 = $16 + 40 | 0; //@line 14705
    HEAP32[$59 >> 2] = (HEAP32[$59 >> 2] | 0) + 1; //@line 14708
    if ((HEAP32[$16 + 36 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 2) {
      HEAP8[$4 >> 0] = 1; //@line 14716
      if ($$283$off0) {
       label = 18; //@line 14718
       break;
      } else {
       $67 = 4; //@line 14721
       break;
      }
     }
    }
   }
   if ($$283$off0) {
    label = 18; //@line 14728
   } else {
    $67 = 4; //@line 14730
   }
  }
 } while (0);
 if ((label | 0) == 18) {
  $67 = 3; //@line 14735
 }
 HEAP32[$2 >> 2] = $67; //@line 14737
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_8($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $25 = 0, $26 = 0, $29 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 16128
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16130
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16132
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16134
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16136
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16138
 if (!$AsyncRetVal) {
  $25 = 0 == 0; //@line 16141
  $26 = HEAP32[$2 >> 2] | 0; //@line 16142
  if (!$26) {
   if ($25) {
    $$06 = -3007; //@line 16146
    $31 = ___async_retval; //@line 16147
    HEAP32[$31 >> 2] = $$06; //@line 16148
    return;
   }
   $$06 = 0; //@line 16151
   $31 = ___async_retval; //@line 16152
   HEAP32[$31 >> 2] = $$06; //@line 16153
   return;
  } else {
   $29 = HEAP32[$26 + 8 >> 2] | 0; //@line 16157
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 16158
   FUNCTION_TABLE_vi[$29 & 511]($6); //@line 16159
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 16162
    $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 16163
    $$expand_i1_val = $25 & 1; //@line 16164
    HEAP8[$30 >> 0] = $$expand_i1_val; //@line 16165
    sp = STACKTOP; //@line 16166
    return;
   }
   ___async_unwind = 0; //@line 16169
   HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 16170
   $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 16171
   $$expand_i1_val = $25 & 1; //@line 16172
   HEAP8[$30 >> 0] = $$expand_i1_val; //@line 16173
   sp = STACKTOP; //@line 16174
   return;
  }
 } else {
  $11 = HEAP32[$2 >> 2] | 0; //@line 16178
  if (!$11) {
   HEAP32[$AsyncRetVal + 12 >> 2] = 0; //@line 16182
   _equeue_event_dtor($AsyncRetVal, 105); //@line 16183
   $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 16184
   $21 = _equeue_post($4, 106, $AsyncRetVal) | 0; //@line 16185
   if (___async) {
    HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 16188
    $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 16189
    HEAP32[$22 >> 2] = $2; //@line 16190
    $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 16191
    HEAP32[$23 >> 2] = $6; //@line 16192
    sp = STACKTOP; //@line 16193
    return;
   }
   HEAP32[___async_retval >> 2] = $21; //@line 16197
   ___async_unwind = 0; //@line 16198
   HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 16199
   $22 = $ReallocAsyncCtx7 + 4 | 0; //@line 16200
   HEAP32[$22 >> 2] = $2; //@line 16201
   $23 = $ReallocAsyncCtx7 + 8 | 0; //@line 16202
   HEAP32[$23 >> 2] = $6; //@line 16203
   sp = STACKTOP; //@line 16204
   return;
  } else {
   $14 = HEAP32[$11 + 4 >> 2] | 0; //@line 16208
   $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 16209
   FUNCTION_TABLE_vii[$14 & 7]($AsyncRetVal, $6); //@line 16210
   if (___async) {
    HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 16213
    $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 16214
    HEAP32[$15 >> 2] = $8; //@line 16215
    $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 16216
    HEAP32[$16 >> 2] = $AsyncRetVal; //@line 16217
    $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 16218
    HEAP32[$17 >> 2] = $4; //@line 16219
    $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 16220
    HEAP32[$18 >> 2] = $2; //@line 16221
    $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 16222
    HEAP32[$19 >> 2] = $6; //@line 16223
    sp = STACKTOP; //@line 16224
    return;
   }
   ___async_unwind = 0; //@line 16227
   HEAP32[$ReallocAsyncCtx5 >> 2] = 111; //@line 16228
   $15 = $ReallocAsyncCtx5 + 4 | 0; //@line 16229
   HEAP32[$15 >> 2] = $8; //@line 16230
   $16 = $ReallocAsyncCtx5 + 8 | 0; //@line 16231
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 16232
   $17 = $ReallocAsyncCtx5 + 12 | 0; //@line 16233
   HEAP32[$17 >> 2] = $4; //@line 16234
   $18 = $ReallocAsyncCtx5 + 16 | 0; //@line 16235
   HEAP32[$18 >> 2] = $2; //@line 16236
   $19 = $ReallocAsyncCtx5 + 20 | 0; //@line 16237
   HEAP32[$19 >> 2] = $6; //@line 16238
   sp = STACKTOP; //@line 16239
   return;
  }
 }
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb($0) {
 $0 = $0 | 0;
 var $$pre$i = 0, $$unpack$i = 0, $$unpack4$i = 0, $11 = 0, $15 = 0, $18 = 0, $2 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 205
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 207
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 209
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 211
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 213
 $$pre$i = HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0; //@line 216
 $11 = $2 + 12 | 0; //@line 217
 HEAP32[$11 >> 2] = $$pre$i; //@line 218
 $$unpack$i = HEAP32[$8 >> 2] | 0; //@line 221
 $$unpack4$i = HEAP32[$8 + 4 >> 2] | 0; //@line 223
 $15 = (HEAP32[$8 + 8 >> 2] | 0) + ($$unpack4$i >> 1) | 0; //@line 225
 $18 = $$pre$i; //@line 228
 if (!($$unpack4$i & 1)) {
  $31 = $$unpack$i; //@line 231
 } else {
  $31 = HEAP32[(HEAP32[$15 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 236
 }
 if (!$$pre$i) {
  $35 = $4 + 12 | 0; //@line 240
  HEAP32[$35 >> 2] = 0; //@line 241
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 242
  $36 = FUNCTION_TABLE_iiii[$31 & 31]($15, $6, $4) | 0; //@line 243
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 246
   $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 247
   HEAP32[$37 >> 2] = $35; //@line 248
   $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 249
   HEAP32[$38 >> 2] = $4; //@line 250
   $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 251
   HEAP32[$39 >> 2] = $11; //@line 252
   $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 253
   HEAP32[$40 >> 2] = $2; //@line 254
   sp = STACKTOP; //@line 255
   return;
  }
  HEAP32[___async_retval >> 2] = $36; //@line 259
  ___async_unwind = 0; //@line 260
  HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 261
  $37 = $ReallocAsyncCtx3 + 4 | 0; //@line 262
  HEAP32[$37 >> 2] = $35; //@line 263
  $38 = $ReallocAsyncCtx3 + 8 | 0; //@line 264
  HEAP32[$38 >> 2] = $4; //@line 265
  $39 = $ReallocAsyncCtx3 + 12 | 0; //@line 266
  HEAP32[$39 >> 2] = $11; //@line 267
  $40 = $ReallocAsyncCtx3 + 16 | 0; //@line 268
  HEAP32[$40 >> 2] = $2; //@line 269
  sp = STACKTOP; //@line 270
  return;
 } else {
  $25 = HEAP32[$18 + 4 >> 2] | 0; //@line 274
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 275
  FUNCTION_TABLE_vii[$25 & 7]($4, $2); //@line 276
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 279
   $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 280
   HEAP32[$26 >> 2] = $11; //@line 281
   $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 282
   HEAP32[$27 >> 2] = $4; //@line 283
   $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 284
   HEAP32[$28 >> 2] = $15; //@line 285
   $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 286
   HEAP32[$29 >> 2] = $6; //@line 287
   $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 288
   HEAP32[$30 >> 2] = $31; //@line 289
   $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 290
   HEAP32[$32 >> 2] = $4; //@line 291
   $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 292
   HEAP32[$33 >> 2] = $11; //@line 293
   $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 294
   HEAP32[$34 >> 2] = $2; //@line 295
   sp = STACKTOP; //@line 296
   return;
  }
  ___async_unwind = 0; //@line 299
  HEAP32[$ReallocAsyncCtx2 >> 2] = 115; //@line 300
  $26 = $ReallocAsyncCtx2 + 4 | 0; //@line 301
  HEAP32[$26 >> 2] = $11; //@line 302
  $27 = $ReallocAsyncCtx2 + 8 | 0; //@line 303
  HEAP32[$27 >> 2] = $4; //@line 304
  $28 = $ReallocAsyncCtx2 + 12 | 0; //@line 305
  HEAP32[$28 >> 2] = $15; //@line 306
  $29 = $ReallocAsyncCtx2 + 16 | 0; //@line 307
  HEAP32[$29 >> 2] = $6; //@line 308
  $30 = $ReallocAsyncCtx2 + 20 | 0; //@line 309
  HEAP32[$30 >> 2] = $31; //@line 310
  $32 = $ReallocAsyncCtx2 + 24 | 0; //@line 311
  HEAP32[$32 >> 2] = $4; //@line 312
  $33 = $ReallocAsyncCtx2 + 28 | 0; //@line 313
  HEAP32[$33 >> 2] = $11; //@line 314
  $34 = $ReallocAsyncCtx2 + 32 | 0; //@line 315
  HEAP32[$34 >> 2] = $2; //@line 316
  sp = STACKTOP; //@line 317
  return;
 }
}
function _scanexp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $100 = 0, $101 = 0, $11 = 0, $13 = 0, $14 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $61 = 0, $63 = 0, $64 = 0, $65 = 0, $80 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 $2 = $0 + 4 | 0; //@line 9183
 $3 = HEAP32[$2 >> 2] | 0; //@line 9184
 $4 = $0 + 100 | 0; //@line 9185
 if ($3 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
  HEAP32[$2 >> 2] = $3 + 1; //@line 9190
  $11 = HEAPU8[$3 >> 0] | 0; //@line 9193
 } else {
  $11 = ___shgetc($0) | 0; //@line 9196
 }
 switch ($11 | 0) {
 case 43:
 case 45:
  {
   $13 = ($11 | 0) == 45 & 1; //@line 9201
   $14 = HEAP32[$2 >> 2] | 0; //@line 9202
   if ($14 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $14 + 1; //@line 9207
    $22 = HEAPU8[$14 >> 0] | 0; //@line 9210
   } else {
    $22 = ___shgetc($0) | 0; //@line 9213
   }
   if (($1 | 0) != 0 & ($22 + -48 | 0) >>> 0 > 9) {
    if (!(HEAP32[$4 >> 2] | 0)) {
     $$0 = $13; //@line 9223
     $$049 = $22; //@line 9223
    } else {
     HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9227
     $$0 = $13; //@line 9228
     $$049 = $22; //@line 9228
    }
   } else {
    $$0 = $13; //@line 9231
    $$049 = $22; //@line 9231
   }
   break;
  }
 default:
  {
   $$0 = 0; //@line 9236
   $$049 = $11; //@line 9236
  }
 }
 if (($$049 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$4 >> 2] | 0)) {
   $100 = -2147483648; //@line 9245
   $101 = 0; //@line 9245
  } else {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9249
   $100 = -2147483648; //@line 9250
   $101 = 0; //@line 9250
  }
 } else {
  $$04860 = 0; //@line 9253
  $$159 = $$049; //@line 9253
  while (1) {
   $$04860 = $$159 + -48 + ($$04860 * 10 | 0) | 0; //@line 9257
   $38 = HEAP32[$2 >> 2] | 0; //@line 9258
   if ($38 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$2 >> 2] = $38 + 1; //@line 9263
    $$1$be = HEAPU8[$38 >> 0] | 0; //@line 9266
   } else {
    $$1$be = ___shgetc($0) | 0; //@line 9269
   }
   if (!(($$1$be + -48 | 0) >>> 0 < 10 & ($$04860 | 0) < 214748364)) {
    break;
   } else {
    $$159 = $$1$be; //@line 9276
   }
  }
  $50 = (($$04860 | 0) < 0) << 31 >> 31; //@line 9282
  if (($$1$be + -48 | 0) >>> 0 < 10) {
   $$254 = $$1$be; //@line 9286
   $55 = $$04860; //@line 9286
   $56 = $50; //@line 9286
   while (1) {
    $57 = ___muldi3($55 | 0, $56 | 0, 10, 0) | 0; //@line 9288
    $58 = tempRet0; //@line 9289
    $61 = _i64Add($$254 | 0, (($$254 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0; //@line 9292
    $63 = _i64Add($61 | 0, tempRet0 | 0, $57 | 0, $58 | 0) | 0; //@line 9294
    $64 = tempRet0; //@line 9295
    $65 = HEAP32[$2 >> 2] | 0; //@line 9296
    if ($65 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $65 + 1; //@line 9301
     $$2$be = HEAPU8[$65 >> 0] | 0; //@line 9304
    } else {
     $$2$be = ___shgetc($0) | 0; //@line 9307
    }
    if (($$2$be + -48 | 0) >>> 0 < 10 & (($64 | 0) < 21474836 | ($64 | 0) == 21474836 & $63 >>> 0 < 2061584302)) {
     $$254 = $$2$be; //@line 9318
     $55 = $63; //@line 9318
     $56 = $64; //@line 9318
    } else {
     $$2$lcssa = $$2$be; //@line 9320
     $94 = $63; //@line 9320
     $95 = $64; //@line 9320
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be; //@line 9325
   $94 = $$04860; //@line 9325
   $95 = $50; //@line 9325
  }
  if (($$2$lcssa + -48 | 0) >>> 0 < 10) {
   do {
    $80 = HEAP32[$2 >> 2] | 0; //@line 9331
    if ($80 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$2 >> 2] = $80 + 1; //@line 9336
     $$3$be = HEAPU8[$80 >> 0] | 0; //@line 9339
    } else {
     $$3$be = ___shgetc($0) | 0; //@line 9342
    }
   } while (($$3$be + -48 | 0) >>> 0 < 10);
  }
  if (HEAP32[$4 >> 2] | 0) {
   HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + -1; //@line 9356
  }
  $93 = ($$0 | 0) != 0; //@line 9358
  $96 = _i64Subtract(0, 0, $94 | 0, $95 | 0) | 0; //@line 9359
  $100 = $93 ? tempRet0 : $95; //@line 9363
  $101 = $93 ? $96 : $94; //@line 9363
 }
 tempRet0 = $100; //@line 9365
 return $101 | 0; //@line 9366
}
function _ip6tos($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$049$be78 = 0, $$04962 = 0, $$05075 = 0, $$05274 = 0, $$05573 = 0, $$05872 = 0, $$1 = 0, $$151$lcssa = 0, $$15165 = 0, $$15364 = 0, $$2 = 0, $$254 = 0, $$257 = 0, $$260 = 0, $$3 = 0, $$461 = 0, $$lcssa = 0, $$shrunk = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $23 = 0, $29 = 0, $3 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $42 = 0, $45 = 0, $57 = 0, $59 = 0, $9 = 0, $indvars$iv = 0, $indvars$iv$next = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 2389
 STACKTOP = STACKTOP + 16 | 0; //@line 2390
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2390
 $vararg_buffer = sp; //@line 2391
 $$05075 = 0; //@line 2392
 $$05274 = $0; //@line 2392
 $$05573 = 1; //@line 2392
 $$05872 = -1; //@line 2392
 $15 = 0; //@line 2392
 while (1) {
  $9 = $$05274 + 2 | 0; //@line 2398
  if (!((HEAPU8[$$05274 >> 0] | 0) << 8 | (HEAPU8[$$05274 + 1 >> 0] | 0))) {
   $14 = $15 + 1 | 0; //@line 2404
   $16 = $14 & 255; //@line 2405
   $17 = $14 & 255; //@line 2406
   L5 : do {
    if (($16 & 255) < 8) {
     $$15165 = $16; //@line 2410
     $$15364 = $9; //@line 2410
     $indvars$iv = $17; //@line 2410
     while (1) {
      $23 = $$15364 + 2 | 0; //@line 2416
      if ((HEAPU8[$$15364 >> 0] | 0) << 8 | (HEAPU8[$$15364 + 1 >> 0] | 0) | 0) {
       $$151$lcssa = $indvars$iv & 255; //@line 2423
       $$254 = $23; //@line 2423
       $$lcssa = $indvars$iv; //@line 2423
       break L5;
      }
      $indvars$iv$next = $indvars$iv + 1 | 0; //@line 2426
      $29 = $$15165 + 1 << 24 >> 24; //@line 2427
      if ($indvars$iv$next >>> 0 < 8) {
       $$15165 = $29; //@line 2430
       $$15364 = $23; //@line 2430
       $indvars$iv = $indvars$iv$next; //@line 2430
      } else {
       $$151$lcssa = $29; //@line 2432
       $$254 = $23; //@line 2432
       $$lcssa = $indvars$iv$next; //@line 2432
       break;
      }
     }
    } else {
     $$151$lcssa = $16; //@line 2437
     $$254 = $9; //@line 2437
     $$lcssa = $17; //@line 2437
    }
   } while (0);
   $31 = $$lcssa - $15 | 0; //@line 2440
   $33 = ($31 | 0) > ($$05573 & 255 | 0); //@line 2442
   $$2 = $$151$lcssa; //@line 2446
   $$257 = $33 ? $31 & 255 : $$05573; //@line 2446
   $$260 = $33 ? $$05075 : $$05872; //@line 2446
   $$3 = $$254; //@line 2446
  } else {
   $$2 = $$05075; //@line 2448
   $$257 = $$05573; //@line 2448
   $$260 = $$05872; //@line 2448
   $$3 = $9; //@line 2448
  }
  $35 = $$2 + 1 << 24 >> 24; //@line 2450
  if (($35 & 255) < 8) {
   $$05075 = $35; //@line 2454
   $$05274 = $$3; //@line 2454
   $$05573 = $$257; //@line 2454
   $$05872 = $$260; //@line 2454
   $15 = $35 & 255; //@line 2454
  } else {
   break;
  }
 }
 $2 = $$257 & 255; //@line 2459
 $3 = $2 << 1; //@line 2460
 $4 = $$260 << 24 >> 24 == 0; //@line 2461
 $$04962 = $1; //@line 2462
 $$461 = $0; //@line 2462
 $$shrunk = 0; //@line 2462
 while (1) {
  $42 = $$shrunk & 255; //@line 2464
  if ($$shrunk << 24 >> 24 != $$260 << 24 >> 24) {
   $57 = $$shrunk + 1 << 24 >> 24; //@line 2474
   HEAP32[$vararg_buffer >> 2] = (HEAPU8[$$461 >> 0] | 0) << 8 | (HEAPU8[$$461 + 1 >> 0] | 0); //@line 2475
   $59 = $$04962 + (_sprintf($$04962, 3609, $vararg_buffer) | 0) | 0; //@line 2477
   if ($57 << 24 >> 24 == 8) {
    $$049$be78 = $59; //@line 2480
    label = 9; //@line 2481
    break;
   }
   HEAP8[$59 >> 0] = 58; //@line 2486
   $$04962 = $59 + 1 | 0; //@line 2487
   $$461 = $$461 + 2 | 0; //@line 2487
   $$shrunk = $57; //@line 2487
   continue;
  }
  if ($4) {
   HEAP8[$$04962 >> 0] = 58; //@line 2492
   $$1 = $$04962 + 1 | 0; //@line 2493
  } else {
   $$1 = $$04962; //@line 2495
  }
  $45 = $$1 + 1 | 0; //@line 2497
  HEAP8[$$1 >> 0] = 58; //@line 2498
  $$shrunk = $42 + $2 & 255; //@line 2501
  if (($$shrunk & 255) >= 8) {
   $$049$be78 = $45; //@line 2506
   label = 9; //@line 2507
   break;
  } else {
   $$04962 = $45; //@line 2504
   $$461 = $$461 + $3 | 0; //@line 2504
  }
 }
 if ((label | 0) == 9) {
  HEAP8[$$049$be78 >> 0] = 0; //@line 2512
  STACKTOP = sp; //@line 2517
  return $$049$be78 - $1 & 255 | 0; //@line 2517
 }
 return 0; //@line 2519
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_171($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $18 = 0, $2 = 0, $21 = 0, $24 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14417
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14419
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14421
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14423
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14425
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 14428
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14430
 $15 = $12 + 24 | 0; //@line 14433
 do {
  if ((HEAP32[$0 + 28 >> 2] | 0) > 1) {
   $18 = HEAP32[$12 + 8 >> 2] | 0; //@line 14438
   if (!($18 & 2)) {
    $21 = $4 + 36 | 0; //@line 14442
    if ((HEAP32[$21 >> 2] | 0) != 1) {
     if (!($18 & 1)) {
      $38 = $4 + 54 | 0; //@line 14449
      if (HEAP8[$38 >> 0] | 0) {
       break;
      }
      if ((HEAP32[$21 >> 2] | 0) == 1) {
       break;
      }
      $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 14460
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 14461
      if (!___async) {
       ___async_unwind = 0; //@line 14464
      }
      HEAP32[$ReallocAsyncCtx >> 2] = 360; //@line 14466
      HEAP32[$ReallocAsyncCtx + 4 >> 2] = $15; //@line 14468
      HEAP32[$ReallocAsyncCtx + 8 >> 2] = $2; //@line 14470
      HEAP32[$ReallocAsyncCtx + 12 >> 2] = $38; //@line 14472
      HEAP32[$ReallocAsyncCtx + 16 >> 2] = $21; //@line 14474
      HEAP32[$ReallocAsyncCtx + 20 >> 2] = $4; //@line 14476
      HEAP32[$ReallocAsyncCtx + 24 >> 2] = $6; //@line 14478
      HEAP32[$ReallocAsyncCtx + 28 >> 2] = $8; //@line 14480
      HEAP8[$ReallocAsyncCtx + 32 >> 0] = $10 & 1; //@line 14483
      sp = STACKTOP; //@line 14484
      return;
     }
     $36 = $4 + 24 | 0; //@line 14487
     $37 = $4 + 54 | 0; //@line 14488
     if (HEAP8[$37 >> 0] | 0) {
      break;
     }
     if ((HEAP32[$21 >> 2] | 0) == 1) {
      if ((HEAP32[$36 >> 2] | 0) == 1) {
       break;
      }
     }
     $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 14503
     __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 14504
     if (!___async) {
      ___async_unwind = 0; //@line 14507
     }
     HEAP32[$ReallocAsyncCtx2 >> 2] = 359; //@line 14509
     HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $15; //@line 14511
     HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $2; //@line 14513
     HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $37; //@line 14515
     HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $21; //@line 14517
     HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $36; //@line 14519
     HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $4; //@line 14521
     HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $6; //@line 14523
     HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $8; //@line 14525
     HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $10 & 1; //@line 14528
     sp = STACKTOP; //@line 14529
     return;
    }
   }
   $24 = $4 + 54 | 0; //@line 14533
   if (!(HEAP8[$24 >> 0] | 0)) {
    $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 14537
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($15, $4, $6, $8, $10); //@line 14538
    if (!___async) {
     ___async_unwind = 0; //@line 14541
    }
    HEAP32[$ReallocAsyncCtx3 >> 2] = 358; //@line 14543
    HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $15; //@line 14545
    HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $2; //@line 14547
    HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $24; //@line 14549
    HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $4; //@line 14551
    HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $6; //@line 14553
    HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $8; //@line 14555
    HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $10 & 1; //@line 14558
    sp = STACKTOP; //@line 14559
    return;
   }
  }
 } while (0);
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $31 = 0, $32 = 0, $33 = 0, $62 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14982
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14987
 } else {
  $9 = $1 + 52 | 0; //@line 14989
  $10 = HEAP8[$9 >> 0] | 0; //@line 14990
  $11 = $1 + 53 | 0; //@line 14991
  $12 = HEAP8[$11 >> 0] | 0; //@line 14992
  $15 = HEAP32[$0 + 12 >> 2] | 0; //@line 14995
  $16 = $0 + 16 + ($15 << 3) | 0; //@line 14996
  HEAP8[$9 >> 0] = 0; //@line 14997
  HEAP8[$11 >> 0] = 0; //@line 14998
  $AsyncCtx3 = _emscripten_alloc_async_context(52, sp) | 0; //@line 14999
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0 + 16 | 0, $1, $2, $3, $4, $5); //@line 15000
  if (___async) {
   HEAP32[$AsyncCtx3 >> 2] = 354; //@line 15003
   HEAP32[$AsyncCtx3 + 4 >> 2] = $15; //@line 15005
   HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15007
   HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15009
   HEAP8[$AsyncCtx3 + 16 >> 0] = $10; //@line 15011
   HEAP32[$AsyncCtx3 + 20 >> 2] = $9; //@line 15013
   HEAP8[$AsyncCtx3 + 24 >> 0] = $12; //@line 15015
   HEAP32[$AsyncCtx3 + 28 >> 2] = $11; //@line 15017
   HEAP32[$AsyncCtx3 + 32 >> 2] = $2; //@line 15019
   HEAP32[$AsyncCtx3 + 36 >> 2] = $3; //@line 15021
   HEAP32[$AsyncCtx3 + 40 >> 2] = $4; //@line 15023
   HEAP8[$AsyncCtx3 + 44 >> 0] = $5 & 1; //@line 15026
   HEAP32[$AsyncCtx3 + 48 >> 2] = $16; //@line 15028
   sp = STACKTOP; //@line 15029
   return;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15032
  L7 : do {
   if (($15 | 0) > 1) {
    $31 = $1 + 24 | 0; //@line 15037
    $32 = $0 + 8 | 0; //@line 15038
    $33 = $1 + 54 | 0; //@line 15039
    $$0 = $0 + 24 | 0; //@line 15040
    while (1) {
     if (HEAP8[$33 >> 0] | 0) {
      break L7;
     }
     if (!(HEAP8[$9 >> 0] | 0)) {
      if (HEAP8[$11 >> 0] | 0) {
       if (!(HEAP32[$32 >> 2] & 1)) {
        break L7;
       }
      }
     } else {
      if ((HEAP32[$31 >> 2] | 0) == 1) {
       break L7;
      }
      if (!(HEAP32[$32 >> 2] & 2)) {
       break L7;
      }
     }
     HEAP8[$9 >> 0] = 0; //@line 15073
     HEAP8[$11 >> 0] = 0; //@line 15074
     $AsyncCtx = _emscripten_alloc_async_context(60, sp) | 0; //@line 15075
     __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($$0, $1, $2, $3, $4, $5); //@line 15076
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15081
     $62 = $$0 + 8 | 0; //@line 15082
     if ($62 >>> 0 < $16 >>> 0) {
      $$0 = $62; //@line 15085
     } else {
      break L7;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 355; //@line 15090
    HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 15092
    HEAP32[$AsyncCtx + 8 >> 2] = $16; //@line 15094
    HEAP32[$AsyncCtx + 12 >> 2] = $33; //@line 15096
    HEAP8[$AsyncCtx + 16 >> 0] = $10; //@line 15098
    HEAP32[$AsyncCtx + 20 >> 2] = $9; //@line 15100
    HEAP8[$AsyncCtx + 24 >> 0] = $12; //@line 15102
    HEAP32[$AsyncCtx + 28 >> 2] = $11; //@line 15104
    HEAP32[$AsyncCtx + 32 >> 2] = $31; //@line 15106
    HEAP32[$AsyncCtx + 36 >> 2] = $32; //@line 15108
    HEAP32[$AsyncCtx + 40 >> 2] = $1; //@line 15110
    HEAP32[$AsyncCtx + 44 >> 2] = $2; //@line 15112
    HEAP32[$AsyncCtx + 48 >> 2] = $3; //@line 15114
    HEAP32[$AsyncCtx + 52 >> 2] = $4; //@line 15116
    HEAP8[$AsyncCtx + 56 >> 0] = $5 & 1; //@line 15119
    sp = STACKTOP; //@line 15120
    return;
   }
  } while (0);
  HEAP8[$9 >> 0] = $10; //@line 15124
  HEAP8[$11 >> 0] = $12; //@line 15125
 }
 return;
}
function _pop_arg_673($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $108 = 0, $109 = 0.0, $115 = 0, $116 = 0.0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $40 = 0, $41 = 0, $43 = 0, $46 = 0, $47 = 0, $56 = 0, $57 = 0, $59 = 0, $62 = 0, $71 = 0, $72 = 0, $73 = 0, $82 = 0, $83 = 0, $85 = 0, $88 = 0, $9 = 0, $97 = 0, $98 = 0, $99 = 0;
 L1 : do {
  if ($1 >>> 0 <= 20) {
   do {
    switch ($1 | 0) {
    case 9:
     {
      $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11057
      $10 = HEAP32[$9 >> 2] | 0; //@line 11058
      HEAP32[$2 >> 2] = $9 + 4; //@line 11060
      HEAP32[$0 >> 2] = $10; //@line 11061
      break L1;
      break;
     }
    case 10:
     {
      $16 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11077
      $17 = HEAP32[$16 >> 2] | 0; //@line 11078
      HEAP32[$2 >> 2] = $16 + 4; //@line 11080
      $20 = $0; //@line 11083
      HEAP32[$20 >> 2] = $17; //@line 11085
      HEAP32[$20 + 4 >> 2] = (($17 | 0) < 0) << 31 >> 31; //@line 11088
      break L1;
      break;
     }
    case 11:
     {
      $29 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11104
      $30 = HEAP32[$29 >> 2] | 0; //@line 11105
      HEAP32[$2 >> 2] = $29 + 4; //@line 11107
      $31 = $0; //@line 11108
      HEAP32[$31 >> 2] = $30; //@line 11110
      HEAP32[$31 + 4 >> 2] = 0; //@line 11113
      break L1;
      break;
     }
    case 12:
     {
      $40 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11129
      $41 = $40; //@line 11130
      $43 = HEAP32[$41 >> 2] | 0; //@line 11132
      $46 = HEAP32[$41 + 4 >> 2] | 0; //@line 11135
      HEAP32[$2 >> 2] = $40 + 8; //@line 11137
      $47 = $0; //@line 11138
      HEAP32[$47 >> 2] = $43; //@line 11140
      HEAP32[$47 + 4 >> 2] = $46; //@line 11143
      break L1;
      break;
     }
    case 13:
     {
      $56 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11159
      $57 = HEAP32[$56 >> 2] | 0; //@line 11160
      HEAP32[$2 >> 2] = $56 + 4; //@line 11162
      $59 = ($57 & 65535) << 16 >> 16; //@line 11164
      $62 = $0; //@line 11167
      HEAP32[$62 >> 2] = $59; //@line 11169
      HEAP32[$62 + 4 >> 2] = (($59 | 0) < 0) << 31 >> 31; //@line 11172
      break L1;
      break;
     }
    case 14:
     {
      $71 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11188
      $72 = HEAP32[$71 >> 2] | 0; //@line 11189
      HEAP32[$2 >> 2] = $71 + 4; //@line 11191
      $73 = $0; //@line 11193
      HEAP32[$73 >> 2] = $72 & 65535; //@line 11195
      HEAP32[$73 + 4 >> 2] = 0; //@line 11198
      break L1;
      break;
     }
    case 15:
     {
      $82 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11214
      $83 = HEAP32[$82 >> 2] | 0; //@line 11215
      HEAP32[$2 >> 2] = $82 + 4; //@line 11217
      $85 = ($83 & 255) << 24 >> 24; //@line 11219
      $88 = $0; //@line 11222
      HEAP32[$88 >> 2] = $85; //@line 11224
      HEAP32[$88 + 4 >> 2] = (($85 | 0) < 0) << 31 >> 31; //@line 11227
      break L1;
      break;
     }
    case 16:
     {
      $97 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 11243
      $98 = HEAP32[$97 >> 2] | 0; //@line 11244
      HEAP32[$2 >> 2] = $97 + 4; //@line 11246
      $99 = $0; //@line 11248
      HEAP32[$99 >> 2] = $98 & 255; //@line 11250
      HEAP32[$99 + 4 >> 2] = 0; //@line 11253
      break L1;
      break;
     }
    case 17:
     {
      $108 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11269
      $109 = +HEAPF64[$108 >> 3]; //@line 11270
      HEAP32[$2 >> 2] = $108 + 8; //@line 11272
      HEAPF64[$0 >> 3] = $109; //@line 11273
      break L1;
      break;
     }
    case 18:
     {
      $115 = (HEAP32[$2 >> 2] | 0) + (8 - 1) & ~(8 - 1); //@line 11289
      $116 = +HEAPF64[$115 >> 3]; //@line 11290
      HEAP32[$2 >> 2] = $115 + 8; //@line 11292
      HEAPF64[$0 >> 3] = $116; //@line 11293
      break L1;
      break;
     }
    default:
     {
      break L1;
     }
    }
   } while (0);
  }
 } while (0);
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$2 = 0, $$pr = 0, $10 = 0, $12 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $21 = 0, $27 = 0, $30 = 0, $31 = 0, $33 = 0, $34 = 0, $40 = 0, $42 = 0, $43 = 0, $45 = 0, $47 = 0, $49 = 0, $54 = 0, $59 = 0, $61 = 0, $64 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $75 = 0, $80 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7135
 if (!$2) {
  return;
 }
 if (!(__ZL20nsapi_dns_cache_findPKc13nsapi_versionP10nsapi_addr($0, HEAP32[$1 >> 2] | 0, 0) | 0)) {
  return;
 }
 $7 = HEAP32[1946] | 0; //@line 7146
 if (!$7) {
  $$2 = 0; //@line 7149
 } else {
  $10 = $7 + 32 | 0; //@line 7152
  $12 = HEAP32[$10 >> 2] | 0; //@line 7154
  $15 = HEAP32[$10 + 4 >> 2] | 0; //@line 7157
  $16 = HEAP32[1947] | 0; //@line 7158
  if (!$16) {
   $$2 = 1; //@line 7161
  } else {
   $59 = $16 + 32 | 0; //@line 7164
   $61 = HEAP32[$59 >> 2] | 0; //@line 7166
   $64 = HEAP32[$59 + 4 >> 2] | 0; //@line 7169
   $69 = $64 >>> 0 > $15 >>> 0 | ($64 | 0) == ($15 | 0) & $61 >>> 0 > $12 >>> 0; //@line 7174
   $70 = HEAP32[1948] | 0; //@line 7175
   if (!$70) {
    $$2 = 2; //@line 7178
   } else {
    $73 = $69 ? $15 : $64; //@line 7183
    $75 = $70 + 32 | 0; //@line 7185
    $80 = HEAP32[$75 + 4 >> 2] | 0; //@line 7190
    $$2 = $80 >>> 0 > $73 >>> 0 | (($80 | 0) == ($73 | 0) ? (HEAP32[$75 >> 2] | 0) >>> 0 > ($69 ? $12 : $61) >>> 0 : 0) ? ($69 ^ 1) & 1 : 2; //@line 7197
   }
  }
 }
 $18 = 7784 + ($$2 << 2) | 0; //@line 7201
 $19 = HEAP32[$18 >> 2] | 0; //@line 7202
 do {
  if (!$19) {
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 7206
   $21 = __ZnwjRKSt9nothrow_t(40, 9717) | 0; //@line 7207
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 162; //@line 7210
    HEAP32[$AsyncCtx + 4 >> 2] = $18; //@line 7212
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 7214
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 7216
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 7218
    sp = STACKTOP; //@line 7219
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 7222
    HEAP32[$18 >> 2] = $21; //@line 7223
    $30 = $21; //@line 7224
    $31 = $21; //@line 7224
    break;
   }
  } else {
   $27 = HEAP32[$19 + 20 >> 2] | 0; //@line 7229
   if (!$27) {
    $$pr = $19; //@line 7232
   } else {
    __ZdlPv($27); //@line 7234
    $$pr = HEAP32[$18 >> 2] | 0; //@line 7236
   }
   $30 = $$pr; //@line 7238
   $31 = $$pr; //@line 7238
  }
 } while (0);
 if (!$30) {
  return;
 }
 HEAP32[$31 >> 2] = HEAP32[$1 >> 2]; //@line 7245
 HEAP32[$31 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 7245
 HEAP32[$31 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 7245
 HEAP32[$31 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 7245
 HEAP32[$31 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 7245
 $33 = (_strlen($0) | 0) + 1 | 0; //@line 7247
 $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 7248
 $34 = __ZnajRKSt9nothrow_t($33, 9717) | 0; //@line 7249
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 163; //@line 7252
  HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 7254
  HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 7256
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 7258
  HEAP32[$AsyncCtx3 + 16 >> 2] = $18; //@line 7260
  sp = STACKTOP; //@line 7261
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 7264
 HEAP32[$30 + 20 >> 2] = $34; //@line 7266
 _strcpy($34, $0) | 0; //@line 7267
 $40 = _emscripten_asm_const_i(8) | 0; //@line 7268
 $42 = (($40 | 0) < 0) << 31 >> 31; //@line 7270
 $43 = ___muldi3($2 | 0, 0, 1e3, 0) | 0; //@line 7271
 $45 = _i64Add($43 | 0, tempRet0 | 0, $40 | 0, $42 | 0) | 0; //@line 7273
 $47 = HEAP32[$18 >> 2] | 0; //@line 7275
 $49 = $47 + 24 | 0; //@line 7277
 HEAP32[$49 >> 2] = $45; //@line 7279
 HEAP32[$49 + 4 >> 2] = tempRet0; //@line 7282
 $54 = $47 + 32 | 0; //@line 7284
 HEAP32[$54 >> 2] = $40; //@line 7286
 HEAP32[$54 + 4 >> 2] = $42; //@line 7289
 return;
}
function __ZN9TCPSocket4sendEPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$024 = 0, $$1 = 0, $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $37 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 24121
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24123
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24125
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24127
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24129
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24131
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24133
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24135
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24137
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24139
 if (($AsyncRetVal | 0) > -1) {
  $37 = $AsyncRetVal + $2 | 0; //@line 24142
  if ($37 >>> 0 < $4 >>> 0) {
   $$1 = $37; //@line 24145
   label = 8; //@line 24146
  } else {
   $$024 = $AsyncRetVal; //@line 24148
   $$2 = $37; //@line 24148
  }
 } else {
  $$1 = $2; //@line 24151
  label = 8; //@line 24152
 }
 if ((label | 0) == 8) {
  if (!(HEAP32[$6 >> 2] | 0)) {
   $$024 = $AsyncRetVal; //@line 24158
   $$2 = $$1; //@line 24158
  } else {
   if (($AsyncRetVal | 0) != -3001 & ($AsyncRetVal | 0) < 0) {
    $$024 = $AsyncRetVal; //@line 24164
    $$2 = $$1; //@line 24164
   } else {
    $18 = HEAP32[$10 >> 2] | 0; //@line 24166
    if (!$18) {
     $$024 = -3005; //@line 24169
     $$2 = $$1; //@line 24169
    } else {
     HEAP32[$12 >> 2] = 0; //@line 24171
     $20 = HEAP32[$14 >> 2] | 0; //@line 24172
     $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 68 >> 2] | 0; //@line 24175
     $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 24178
     $26 = FUNCTION_TABLE_iiiii[$23 & 15]($20, $18, $16 + $$1 | 0, $4 - $$1 | 0) | 0; //@line 24179
     if (___async) {
      HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 24182
      $27 = $ReallocAsyncCtx + 4 | 0; //@line 24183
      HEAP32[$27 >> 2] = $$1; //@line 24184
      $28 = $ReallocAsyncCtx + 8 | 0; //@line 24185
      HEAP32[$28 >> 2] = $4; //@line 24186
      $29 = $ReallocAsyncCtx + 12 | 0; //@line 24187
      HEAP32[$29 >> 2] = $6; //@line 24188
      $30 = $ReallocAsyncCtx + 16 | 0; //@line 24189
      HEAP32[$30 >> 2] = $8; //@line 24190
      $31 = $ReallocAsyncCtx + 20 | 0; //@line 24191
      HEAP32[$31 >> 2] = $10; //@line 24192
      $32 = $ReallocAsyncCtx + 24 | 0; //@line 24193
      HEAP32[$32 >> 2] = $12; //@line 24194
      $33 = $ReallocAsyncCtx + 28 | 0; //@line 24195
      HEAP32[$33 >> 2] = $14; //@line 24196
      $34 = $ReallocAsyncCtx + 32 | 0; //@line 24197
      HEAP32[$34 >> 2] = $16; //@line 24198
      sp = STACKTOP; //@line 24199
      return;
     }
     HEAP32[___async_retval >> 2] = $26; //@line 24203
     ___async_unwind = 0; //@line 24204
     HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 24205
     $27 = $ReallocAsyncCtx + 4 | 0; //@line 24206
     HEAP32[$27 >> 2] = $$1; //@line 24207
     $28 = $ReallocAsyncCtx + 8 | 0; //@line 24208
     HEAP32[$28 >> 2] = $4; //@line 24209
     $29 = $ReallocAsyncCtx + 12 | 0; //@line 24210
     HEAP32[$29 >> 2] = $6; //@line 24211
     $30 = $ReallocAsyncCtx + 16 | 0; //@line 24212
     HEAP32[$30 >> 2] = $8; //@line 24213
     $31 = $ReallocAsyncCtx + 20 | 0; //@line 24214
     HEAP32[$31 >> 2] = $10; //@line 24215
     $32 = $ReallocAsyncCtx + 24 | 0; //@line 24216
     HEAP32[$32 >> 2] = $12; //@line 24217
     $33 = $ReallocAsyncCtx + 28 | 0; //@line 24218
     HEAP32[$33 >> 2] = $14; //@line 24219
     $34 = $ReallocAsyncCtx + 32 | 0; //@line 24220
     HEAP32[$34 >> 2] = $16; //@line 24221
     sp = STACKTOP; //@line 24222
     return;
    }
   }
  }
 }
 HEAP8[$8 >> 0] = 0; //@line 24228
 HEAP32[___async_retval >> 2] = ($$024 | 0) < 1 & ($$024 | 0) != -3001 ? $$024 : ($$2 | 0) == 0 ? -3001 : $$2; //@line 24236
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5213
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5217
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5219
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5221
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5223
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5225
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5227
 $15 = $4 + 12 | 0; //@line 5229
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 5230
 $16 = $6 + 12 | 0; //@line 5231
 $17 = HEAP32[$16 >> 2] | 0; //@line 5232
 if (!$17) {
  $28 = $8 + 12 | 0; //@line 5235
  HEAP32[$28 >> 2] = 0; //@line 5236
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 5237
  $29 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($10, $12, $4, 0, $8, $14) | 0; //@line 5238
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 5241
   $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 5242
   HEAP32[$30 >> 2] = $28; //@line 5243
   $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 5244
   HEAP32[$31 >> 2] = $15; //@line 5245
   $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 5246
   HEAP32[$32 >> 2] = $8; //@line 5247
   $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 5248
   HEAP32[$33 >> 2] = $4; //@line 5249
   sp = STACKTOP; //@line 5250
   return;
  }
  HEAP32[___async_retval >> 2] = $29; //@line 5254
  ___async_unwind = 0; //@line 5255
  HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 5256
  $30 = $ReallocAsyncCtx5 + 4 | 0; //@line 5257
  HEAP32[$30 >> 2] = $28; //@line 5258
  $31 = $ReallocAsyncCtx5 + 8 | 0; //@line 5259
  HEAP32[$31 >> 2] = $15; //@line 5260
  $32 = $ReallocAsyncCtx5 + 12 | 0; //@line 5261
  HEAP32[$32 >> 2] = $8; //@line 5262
  $33 = $ReallocAsyncCtx5 + 16 | 0; //@line 5263
  HEAP32[$33 >> 2] = $4; //@line 5264
  sp = STACKTOP; //@line 5265
  return;
 } else {
  $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 5269
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(32) | 0; //@line 5270
  FUNCTION_TABLE_vii[$20 & 7]($8, $6); //@line 5271
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 166; //@line 5274
   $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 5275
   HEAP32[$21 >> 2] = $16; //@line 5276
   $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 5277
   HEAP32[$22 >> 2] = $8; //@line 5278
   $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 5279
   HEAP32[$23 >> 2] = $10; //@line 5280
   $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 5281
   HEAP32[$24 >> 2] = $12; //@line 5282
   $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 5283
   HEAP32[$25 >> 2] = $4; //@line 5284
   $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 5285
   HEAP32[$26 >> 2] = $14; //@line 5286
   $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 5287
   HEAP32[$27 >> 2] = $15; //@line 5288
   sp = STACKTOP; //@line 5289
   return;
  }
  ___async_unwind = 0; //@line 5292
  HEAP32[$ReallocAsyncCtx2 >> 2] = 166; //@line 5293
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 5294
  HEAP32[$21 >> 2] = $16; //@line 5295
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 5296
  HEAP32[$22 >> 2] = $8; //@line 5297
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 5298
  HEAP32[$23 >> 2] = $10; //@line 5299
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 5300
  HEAP32[$24 >> 2] = $12; //@line 5301
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 5302
  HEAP32[$25 >> 2] = $4; //@line 5303
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 5304
  HEAP32[$26 >> 2] = $14; //@line 5305
  $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 5306
  HEAP32[$27 >> 2] = $15; //@line 5307
  sp = STACKTOP; //@line 5308
  return;
 }
}
function _vfprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $$0 = 0, $$1 = 0, $13 = 0, $14 = 0, $19 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $29 = 0, $3 = 0, $32 = 0, $4 = 0, $43 = 0, $5 = 0, $51 = 0, $6 = 0, $AsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 9957
 STACKTOP = STACKTOP + 224 | 0; //@line 9958
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(224); //@line 9958
 $3 = sp + 120 | 0; //@line 9959
 $4 = sp + 80 | 0; //@line 9960
 $5 = sp; //@line 9961
 $6 = sp + 136 | 0; //@line 9962
 dest = $4; //@line 9963
 stop = dest + 40 | 0; //@line 9963
 do {
  HEAP32[dest >> 2] = 0; //@line 9963
  dest = dest + 4 | 0; //@line 9963
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 9965
 if ((_printf_core(0, $1, $3, $5, $4) | 0) < 0) {
  $$0 = -1; //@line 9969
 } else {
  if ((HEAP32[$0 + 76 >> 2] | 0) > -1) {
   $43 = ___lockfile($0) | 0; //@line 9976
  } else {
   $43 = 0; //@line 9978
  }
  $13 = HEAP32[$0 >> 2] | 0; //@line 9980
  $14 = $13 & 32; //@line 9981
  if ((HEAP8[$0 + 74 >> 0] | 0) < 1) {
   HEAP32[$0 >> 2] = $13 & -33; //@line 9987
  }
  $19 = $0 + 48 | 0; //@line 9989
  do {
   if (!(HEAP32[$19 >> 2] | 0)) {
    $23 = $0 + 44 | 0; //@line 9994
    $24 = HEAP32[$23 >> 2] | 0; //@line 9995
    HEAP32[$23 >> 2] = $6; //@line 9996
    $25 = $0 + 28 | 0; //@line 9997
    HEAP32[$25 >> 2] = $6; //@line 9998
    $26 = $0 + 20 | 0; //@line 9999
    HEAP32[$26 >> 2] = $6; //@line 10000
    HEAP32[$19 >> 2] = 80; //@line 10001
    $28 = $0 + 16 | 0; //@line 10003
    HEAP32[$28 >> 2] = $6 + 80; //@line 10004
    $29 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10005
    if (!$24) {
     $$1 = $29; //@line 10008
    } else {
     $32 = HEAP32[$0 + 36 >> 2] | 0; //@line 10011
     $AsyncCtx = _emscripten_alloc_async_context(64, sp) | 0; //@line 10012
     FUNCTION_TABLE_iiii[$32 & 31]($0, 0, 0) | 0; //@line 10013
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 327; //@line 10016
      HEAP32[$AsyncCtx + 4 >> 2] = $26; //@line 10018
      HEAP32[$AsyncCtx + 8 >> 2] = $29; //@line 10020
      HEAP32[$AsyncCtx + 12 >> 2] = $24; //@line 10022
      HEAP32[$AsyncCtx + 16 >> 2] = $23; //@line 10024
      HEAP32[$AsyncCtx + 20 >> 2] = $19; //@line 10026
      HEAP32[$AsyncCtx + 24 >> 2] = $28; //@line 10028
      HEAP32[$AsyncCtx + 28 >> 2] = $25; //@line 10030
      HEAP32[$AsyncCtx + 32 >> 2] = $0; //@line 10032
      HEAP32[$AsyncCtx + 36 >> 2] = $14; //@line 10034
      HEAP32[$AsyncCtx + 40 >> 2] = $43; //@line 10036
      HEAP32[$AsyncCtx + 44 >> 2] = $0; //@line 10038
      HEAP32[$AsyncCtx + 48 >> 2] = $6; //@line 10040
      HEAP32[$AsyncCtx + 52 >> 2] = $5; //@line 10042
      HEAP32[$AsyncCtx + 56 >> 2] = $4; //@line 10044
      HEAP32[$AsyncCtx + 60 >> 2] = $3; //@line 10046
      sp = STACKTOP; //@line 10047
      STACKTOP = sp; //@line 10048
      return 0; //@line 10048
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 10050
      $$ = (HEAP32[$26 >> 2] | 0) == 0 ? -1 : $29; //@line 10053
      HEAP32[$23 >> 2] = $24; //@line 10054
      HEAP32[$19 >> 2] = 0; //@line 10055
      HEAP32[$28 >> 2] = 0; //@line 10056
      HEAP32[$25 >> 2] = 0; //@line 10057
      HEAP32[$26 >> 2] = 0; //@line 10058
      $$1 = $$; //@line 10059
      break;
     }
    }
   } else {
    $$1 = _printf_core($0, $1, $3, $5, $4) | 0; //@line 10065
   }
  } while (0);
  $51 = HEAP32[$0 >> 2] | 0; //@line 10068
  HEAP32[$0 >> 2] = $51 | $14; //@line 10073
  if ($43 | 0) {
   ___unlockfile($0); //@line 10076
  }
  $$0 = ($51 & 32 | 0) == 0 ? $$1 : -1; //@line 10078
 }
 STACKTOP = sp; //@line 10080
 return $$0 | 0; //@line 10080
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_14($0) {
 $0 = $0 | 0;
 var $$pre74 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 18352
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 18354
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 18356
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 18358
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 18360
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 18362
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 18364
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 18366
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 18368
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 18370
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 18372
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 18374
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 18376
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 18378
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 18380
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 18382
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 18384
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 18386
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 18388
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 18390
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 18392
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 18394
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 18396
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 18400
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 18402
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 18404
 $$pre74 = HEAP32[$48 >> 2] | 0; //@line 18406
 HEAP32[$10 >> 2] = HEAP32[HEAP32[$0 + 92 >> 2] >> 2]; //@line 18407
 $53 = HEAP32[$$pre74 >> 2] | 0; //@line 18408
 HEAP32[$12 >> 2] = 0; //@line 18409
 HEAP32[$14 >> 2] = 193; //@line 18410
 HEAP32[$16 >> 2] = $53; //@line 18411
 HEAP32[$18 >> 2] = 764; //@line 18412
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(104) | 0; //@line 18413
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($20, 0, $22) | 0; //@line 18414
 if (!___async) {
  ___async_unwind = 0; //@line 18417
 }
 HEAP32[$ReallocAsyncCtx13 >> 2] = 194; //@line 18419
 HEAP32[$ReallocAsyncCtx13 + 4 >> 2] = $24; //@line 18421
 HEAP32[$ReallocAsyncCtx13 + 8 >> 2] = $2; //@line 18423
 HEAP32[$ReallocAsyncCtx13 + 12 >> 2] = $4; //@line 18425
 HEAP32[$ReallocAsyncCtx13 + 16 >> 2] = $6; //@line 18427
 HEAP32[$ReallocAsyncCtx13 + 20 >> 2] = $8; //@line 18429
 HEAP32[$ReallocAsyncCtx13 + 24 >> 2] = $10; //@line 18431
 HEAP32[$ReallocAsyncCtx13 + 28 >> 2] = $12; //@line 18433
 HEAP32[$ReallocAsyncCtx13 + 32 >> 2] = $14; //@line 18435
 HEAP32[$ReallocAsyncCtx13 + 36 >> 2] = $16; //@line 18437
 HEAP32[$ReallocAsyncCtx13 + 40 >> 2] = $18; //@line 18439
 HEAP32[$ReallocAsyncCtx13 + 44 >> 2] = $20; //@line 18441
 HEAP32[$ReallocAsyncCtx13 + 48 >> 2] = $22; //@line 18443
 HEAP32[$ReallocAsyncCtx13 + 52 >> 2] = $26; //@line 18445
 HEAP32[$ReallocAsyncCtx13 + 56 >> 2] = $28; //@line 18447
 HEAP32[$ReallocAsyncCtx13 + 60 >> 2] = $30; //@line 18449
 HEAP32[$ReallocAsyncCtx13 + 64 >> 2] = $32; //@line 18451
 HEAP32[$ReallocAsyncCtx13 + 68 >> 2] = $34; //@line 18453
 HEAP32[$ReallocAsyncCtx13 + 72 >> 2] = $36; //@line 18455
 HEAP32[$ReallocAsyncCtx13 + 76 >> 2] = $38; //@line 18457
 HEAP32[$ReallocAsyncCtx13 + 80 >> 2] = $40; //@line 18459
 HEAP32[$ReallocAsyncCtx13 + 84 >> 2] = $42; //@line 18461
 HEAP32[$ReallocAsyncCtx13 + 88 >> 2] = $44; //@line 18463
 HEAP32[$ReallocAsyncCtx13 + 92 >> 2] = $48; //@line 18465
 HEAP32[$ReallocAsyncCtx13 + 96 >> 2] = $50; //@line 18467
 HEAP32[$ReallocAsyncCtx13 + 100 >> 2] = $52; //@line 18469
 sp = STACKTOP; //@line 18470
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_66($0) {
 $0 = $0 | 0;
 var $$051 = 0, $$byval_copy11 = 0, $$pre = 0, $10 = 0, $13 = 0, $14 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 1356
 STACKTOP = STACKTOP + 32 | 0; //@line 1357
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 1357
 $$byval_copy11 = sp; //@line 1358
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1360
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1364
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1366
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1368
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1370
 if (!$AsyncRetVal) {
  $28 = 0; //@line 1373
 } else {
  $13 = $AsyncRetVal + (HEAP32[$0 + 8 >> 2] << 6) | 0; //@line 1375
  $14 = $AsyncRetVal; //@line 1376
  do {
   HEAP32[$2 >> 2] = 0; //@line 1378
   HEAP32[$2 + 4 >> 2] = 0; //@line 1378
   HEAP32[$2 + 8 >> 2] = 0; //@line 1378
   HEAP32[$2 + 12 >> 2] = 0; //@line 1378
   HEAP32[$2 + 16 >> 2] = 0; //@line 1378
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$2 >> 2]; //@line 1379
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 1379
   HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 1379
   HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 1379
   HEAP32[$$byval_copy11 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 1379
   __ZN13SocketAddressC2E10nsapi_addrt($14, $$byval_copy11, 0); //@line 1380
   $14 = $14 + 64 | 0; //@line 1381
  } while (($14 | 0) != ($13 | 0));
  $28 = $AsyncRetVal; //@line 1384
 }
 $$pre = $8 + 64 | 0; //@line 1393
 if (HEAP8[$6 >> 0] | 0) {
  $$051 = 0; //@line 1395
  do {
   $29 = $28 + ($$051 << 6) | 0; //@line 1397
   $31 = (HEAP32[$$pre >> 2] | 0) + ($$051 * 20 | 0) | 0; //@line 1399
   HEAP32[$$byval_copy11 >> 2] = HEAP32[$31 >> 2]; //@line 1400
   HEAP32[$$byval_copy11 + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 1400
   HEAP32[$$byval_copy11 + 8 >> 2] = HEAP32[$31 + 8 >> 2]; //@line 1400
   HEAP32[$$byval_copy11 + 12 >> 2] = HEAP32[$31 + 12 >> 2]; //@line 1400
   HEAP32[$$byval_copy11 + 16 >> 2] = HEAP32[$31 + 16 >> 2]; //@line 1400
   __ZN13SocketAddress8set_addrE10nsapi_addr($29, $$byval_copy11); //@line 1401
   $$051 = $$051 + 1 | 0; //@line 1402
  } while (($$051 | 0) < (HEAPU8[$6 >> 0] | 0));
 }
 $20 = HEAP32[$8 + 12 >> 2] | 0; //@line 1414
 $21 = HEAP32[$$pre >> 2] | 0; //@line 1415
 $23 = HEAP32[$8 + 68 >> 2] | 0; //@line 1417
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 1418
 __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj($20, $21, $23); //@line 1419
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 264; //@line 1422
  $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 1423
  HEAP32[$24 >> 2] = $8; //@line 1424
  $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 1425
  HEAP32[$25 >> 2] = $6; //@line 1426
  $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 1427
  HEAP32[$26 >> 2] = $10; //@line 1428
  $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 1429
  HEAP32[$27 >> 2] = $28; //@line 1430
  sp = STACKTOP; //@line 1431
  STACKTOP = sp; //@line 1432
  return;
 }
 ___async_unwind = 0; //@line 1434
 HEAP32[$ReallocAsyncCtx4 >> 2] = 264; //@line 1435
 $24 = $ReallocAsyncCtx4 + 4 | 0; //@line 1436
 HEAP32[$24 >> 2] = $8; //@line 1437
 $25 = $ReallocAsyncCtx4 + 8 | 0; //@line 1438
 HEAP32[$25 >> 2] = $6; //@line 1439
 $26 = $ReallocAsyncCtx4 + 12 | 0; //@line 1440
 HEAP32[$26 >> 2] = $10; //@line 1441
 $27 = $ReallocAsyncCtx4 + 16 | 0; //@line 1442
 HEAP32[$27 >> 2] = $28; //@line 1443
 sp = STACKTOP; //@line 1444
 STACKTOP = sp; //@line 1445
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $52 = 0, $53 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 16469
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16471
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16473
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16475
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16477
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16479
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16481
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 16483
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16485
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 16487
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 16489
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 16491
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 16493
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 16497
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 16499
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 16501
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 16503
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 16505
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 16507
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 16509
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 16511
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 16513
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 16515
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 16517
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 16519
 $52 = HEAP32[$0 + 104 >> 2] | 0; //@line 16521
 $$pre = HEAP32[$24 >> 2] | 0; //@line 16523
 HEAP32[$38 >> 2] = HEAP32[HEAP32[$0 + 52 >> 2] >> 2]; //@line 16524
 $53 = HEAP32[$$pre >> 2] | 0; //@line 16525
 HEAP32[$40 >> 2] = 0; //@line 16526
 HEAP32[$42 >> 2] = 188; //@line 16527
 HEAP32[$44 >> 2] = $53; //@line 16528
 HEAP32[$6 >> 2] = 764; //@line 16529
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(104) | 0; //@line 16530
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($46, 0, $48) | 0; //@line 16531
 if (!___async) {
  ___async_unwind = 0; //@line 16534
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 189; //@line 16536
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $28; //@line 16538
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $2; //@line 16540
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $4; //@line 16542
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $6; //@line 16544
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $8; //@line 16546
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $10; //@line 16548
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $12; //@line 16550
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $14; //@line 16552
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $16; //@line 16554
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $18; //@line 16556
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $20; //@line 16558
 HEAP32[$ReallocAsyncCtx14 + 48 >> 2] = $22; //@line 16560
 HEAP32[$ReallocAsyncCtx14 + 52 >> 2] = $30; //@line 16562
 HEAP32[$ReallocAsyncCtx14 + 56 >> 2] = $32; //@line 16564
 HEAP32[$ReallocAsyncCtx14 + 60 >> 2] = $34; //@line 16566
 HEAP32[$ReallocAsyncCtx14 + 64 >> 2] = $36; //@line 16568
 HEAP32[$ReallocAsyncCtx14 + 68 >> 2] = $38; //@line 16570
 HEAP32[$ReallocAsyncCtx14 + 72 >> 2] = $40; //@line 16572
 HEAP32[$ReallocAsyncCtx14 + 76 >> 2] = $42; //@line 16574
 HEAP32[$ReallocAsyncCtx14 + 80 >> 2] = $44; //@line 16576
 HEAP32[$ReallocAsyncCtx14 + 84 >> 2] = $46; //@line 16578
 HEAP32[$ReallocAsyncCtx14 + 88 >> 2] = $48; //@line 16580
 HEAP32[$ReallocAsyncCtx14 + 92 >> 2] = $24; //@line 16582
 HEAP32[$ReallocAsyncCtx14 + 96 >> 2] = $50; //@line 16584
 HEAP32[$ReallocAsyncCtx14 + 100 >> 2] = $52; //@line 16586
 sp = STACKTOP; //@line 16587
 return;
}
function ___dynamic_cast($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $24 = 0, $30 = 0, $33 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14517
 STACKTOP = STACKTOP + 64 | 0; //@line 14518
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14518
 $4 = sp; //@line 14519
 $5 = HEAP32[$0 >> 2] | 0; //@line 14520
 $8 = $0 + (HEAP32[$5 + -8 >> 2] | 0) | 0; //@line 14523
 $10 = HEAP32[$5 + -4 >> 2] | 0; //@line 14525
 HEAP32[$4 >> 2] = $2; //@line 14526
 HEAP32[$4 + 4 >> 2] = $0; //@line 14528
 HEAP32[$4 + 8 >> 2] = $1; //@line 14530
 HEAP32[$4 + 12 >> 2] = $3; //@line 14532
 $14 = $4 + 16 | 0; //@line 14533
 $15 = $4 + 20 | 0; //@line 14534
 $16 = $4 + 24 | 0; //@line 14535
 $17 = $4 + 28 | 0; //@line 14536
 $18 = $4 + 32 | 0; //@line 14537
 $19 = $4 + 40 | 0; //@line 14538
 dest = $14; //@line 14539
 stop = dest + 36 | 0; //@line 14539
 do {
  HEAP32[dest >> 2] = 0; //@line 14539
  dest = dest + 4 | 0; //@line 14539
 } while ((dest | 0) < (stop | 0));
 HEAP16[$14 + 36 >> 1] = 0; //@line 14539
 HEAP8[$14 + 38 >> 0] = 0; //@line 14539
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($10, $2, 0) | 0) {
   HEAP32[$4 + 48 >> 2] = 1; //@line 14544
   $24 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14547
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14548
   FUNCTION_TABLE_viiiiii[$24 & 3]($10, $4, $8, $8, 1, 0); //@line 14549
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 346; //@line 14552
    HEAP32[$AsyncCtx + 4 >> 2] = $16; //@line 14554
    HEAP32[$AsyncCtx + 8 >> 2] = $8; //@line 14556
    HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 14558
    sp = STACKTOP; //@line 14559
    STACKTOP = sp; //@line 14560
    return 0; //@line 14560
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14562
    $$0 = (HEAP32[$16 >> 2] | 0) == 1 ? $8 : 0; //@line 14566
    break;
   }
  } else {
   $30 = $4 + 36 | 0; //@line 14570
   $33 = HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] | 0; //@line 14573
   $AsyncCtx3 = _emscripten_alloc_async_context(36, sp) | 0; //@line 14574
   FUNCTION_TABLE_viiiii[$33 & 3]($10, $4, $8, 1, 0); //@line 14575
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 347; //@line 14578
    HEAP32[$AsyncCtx3 + 4 >> 2] = $30; //@line 14580
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 14582
    HEAP32[$AsyncCtx3 + 12 >> 2] = $19; //@line 14584
    HEAP32[$AsyncCtx3 + 16 >> 2] = $17; //@line 14586
    HEAP32[$AsyncCtx3 + 20 >> 2] = $18; //@line 14588
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 14590
    HEAP32[$AsyncCtx3 + 28 >> 2] = $16; //@line 14592
    HEAP32[$AsyncCtx3 + 32 >> 2] = $14; //@line 14594
    sp = STACKTOP; //@line 14595
    STACKTOP = sp; //@line 14596
    return 0; //@line 14596
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14598
   switch (HEAP32[$30 >> 2] | 0) {
   case 0:
    {
     $$0 = (HEAP32[$19 >> 2] | 0) == 1 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1 ? HEAP32[$15 >> 2] | 0 : 0; //@line 14612
     break L1;
     break;
    }
   case 1:
    {
     break;
    }
   default:
    {
     $$0 = 0; //@line 14620
     break L1;
    }
   }
   if ((HEAP32[$16 >> 2] | 0) != 1) {
    if (!((HEAP32[$19 >> 2] | 0) == 0 & (HEAP32[$17 >> 2] | 0) == 1 & (HEAP32[$18 >> 2] | 0) == 1)) {
     $$0 = 0; //@line 14636
     break;
    }
   }
   $$0 = HEAP32[$14 >> 2] | 0; //@line 14641
  }
 } while (0);
 STACKTOP = sp; //@line 14644
 return $$0 | 0; //@line 14644
}
function __ZL28nsapi_dns_query_async_deletei__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $17 = 0, $2 = 0, $20 = 0, $23 = 0, $27 = 0, $28 = 0, $29 = 0, $31 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12927
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12929
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12931
 $6 = HEAP32[$2 + 60 >> 2] | 0; //@line 12933
 do {
  if ($6 | 0) {
   $9 = HEAP32[$6 + 12 >> 2] | 0; //@line 12938
   if (!$9) {
    __ZdlPv($6); //@line 12941
    break;
   }
   $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 12945
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 12946
   FUNCTION_TABLE_vi[$12 & 511]($6); //@line 12947
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 12950
    $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 12951
    HEAP32[$13 >> 2] = $6; //@line 12952
    $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 12953
    HEAP32[$14 >> 2] = $2; //@line 12954
    $15 = $ReallocAsyncCtx2 + 12 | 0; //@line 12955
    HEAP32[$15 >> 2] = $4; //@line 12956
    sp = STACKTOP; //@line 12957
    return;
   }
   ___async_unwind = 0; //@line 12960
   HEAP32[$ReallocAsyncCtx2 >> 2] = 235; //@line 12961
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 12962
   HEAP32[$13 >> 2] = $6; //@line 12963
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 12964
   HEAP32[$14 >> 2] = $2; //@line 12965
   $15 = $ReallocAsyncCtx2 + 12 | 0; //@line 12966
   HEAP32[$15 >> 2] = $4; //@line 12967
   sp = STACKTOP; //@line 12968
   return;
  }
 } while (0);
 $17 = HEAP32[$2 + 64 >> 2] | 0; //@line 12973
 if ($17 | 0) {
  __ZdaPv($17); //@line 12976
 }
 $20 = HEAP32[$2 + 12 >> 2] | 0; //@line 12979
 if ($20 | 0) {
  __ZdlPv($20); //@line 12982
 }
 $23 = HEAP32[$2 + 44 >> 2] | 0; //@line 12985
 if ($23 | 0) {
  $27 = HEAP32[$23 + 8 >> 2] | 0; //@line 12990
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 12991
  FUNCTION_TABLE_vi[$27 & 511]($2 + 32 | 0); //@line 12992
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 12995
   $28 = $ReallocAsyncCtx3 + 4 | 0; //@line 12996
   HEAP32[$28 >> 2] = $2; //@line 12997
   $29 = $ReallocAsyncCtx3 + 8 | 0; //@line 12998
   HEAP32[$29 >> 2] = $4; //@line 12999
   sp = STACKTOP; //@line 13000
   return;
  }
  ___async_unwind = 0; //@line 13003
  HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 13004
  $28 = $ReallocAsyncCtx3 + 4 | 0; //@line 13005
  HEAP32[$28 >> 2] = $2; //@line 13006
  $29 = $ReallocAsyncCtx3 + 8 | 0; //@line 13007
  HEAP32[$29 >> 2] = $4; //@line 13008
  sp = STACKTOP; //@line 13009
  return;
 }
 $31 = HEAP32[$2 + 28 >> 2] | 0; //@line 13013
 if (!$31) {
  __ZdlPv($2); //@line 13016
  HEAP32[7796 + ($4 << 2) >> 2] = 0; //@line 13018
  return;
 }
 $35 = HEAP32[$31 + 8 >> 2] | 0; //@line 13023
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 13024
 FUNCTION_TABLE_vi[$35 & 511]($2 + 16 | 0); //@line 13025
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 13028
  $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 13029
  HEAP32[$36 >> 2] = $2; //@line 13030
  $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 13031
  HEAP32[$37 >> 2] = $4; //@line 13032
  sp = STACKTOP; //@line 13033
  return;
 }
 ___async_unwind = 0; //@line 13036
 HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 13037
 $36 = $ReallocAsyncCtx4 + 4 | 0; //@line 13038
 HEAP32[$36 >> 2] = $2; //@line 13039
 $37 = $ReallocAsyncCtx4 + 8 | 0; //@line 13040
 HEAP32[$37 >> 2] = $4; //@line 13041
 sp = STACKTOP; //@line 13042
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_76($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $27 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 3796
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3798
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3800
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3802
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3804
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3806
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3811
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3813
 if (HEAP8[$0 + 24 >> 0] & 1) {
  HEAP8[8676] = 1; //@line 3815
  $ReallocAsyncCtx13 = _emscripten_realloc_async_context(12) | 0; //@line 3816
  __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 3817
  if (___async) {
   HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3820
   $33 = $ReallocAsyncCtx13 + 4 | 0; //@line 3821
   HEAP32[$33 >> 2] = $16; //@line 3822
   $34 = $ReallocAsyncCtx13 + 8 | 0; //@line 3823
   HEAP32[$34 >> 2] = $14; //@line 3824
   sp = STACKTOP; //@line 3825
   return;
  }
  ___async_unwind = 0; //@line 3828
  HEAP32[$ReallocAsyncCtx13 >> 2] = 184; //@line 3829
  $33 = $ReallocAsyncCtx13 + 4 | 0; //@line 3830
  HEAP32[$33 >> 2] = $16; //@line 3831
  $34 = $ReallocAsyncCtx13 + 8 | 0; //@line 3832
  HEAP32[$34 >> 2] = $14; //@line 3833
  sp = STACKTOP; //@line 3834
  return;
 }
 $17 = HEAP32[$10 >> 2] | 0; //@line 3837
 if ($17 | 0) {
  __ZdlPv($17); //@line 3840
 }
 $19 = HEAP32[$8 >> 2] | 0; //@line 3842
 if ($19 | 0) {
  $22 = HEAP32[$19 + 8 >> 2] | 0; //@line 3846
  $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 3847
  FUNCTION_TABLE_vi[$22 & 511]($6); //@line 3848
  if (___async) {
   HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 3851
   $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 3852
   HEAP32[$23 >> 2] = $2; //@line 3853
   $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 3854
   HEAP32[$24 >> 2] = $4; //@line 3855
   $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 3856
   HEAP32[$25 >> 2] = $14; //@line 3857
   sp = STACKTOP; //@line 3858
   return;
  }
  ___async_unwind = 0; //@line 3861
  HEAP32[$ReallocAsyncCtx9 >> 2] = 182; //@line 3862
  $23 = $ReallocAsyncCtx9 + 4 | 0; //@line 3863
  HEAP32[$23 >> 2] = $2; //@line 3864
  $24 = $ReallocAsyncCtx9 + 8 | 0; //@line 3865
  HEAP32[$24 >> 2] = $4; //@line 3866
  $25 = $ReallocAsyncCtx9 + 12 | 0; //@line 3867
  HEAP32[$25 >> 2] = $14; //@line 3868
  sp = STACKTOP; //@line 3869
  return;
 }
 $27 = HEAP32[$2 + 28 >> 2] | 0; //@line 3873
 if (!$27) {
  __ZdlPv($2); //@line 3876
  HEAP32[___async_retval >> 2] = -3007; //@line 3878
  return;
 }
 $30 = HEAP32[$27 + 8 >> 2] | 0; //@line 3882
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 3883
 FUNCTION_TABLE_vi[$30 & 511]($4); //@line 3884
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3887
  $31 = $ReallocAsyncCtx10 + 4 | 0; //@line 3888
  HEAP32[$31 >> 2] = $2; //@line 3889
  $32 = $ReallocAsyncCtx10 + 8 | 0; //@line 3890
  HEAP32[$32 >> 2] = $14; //@line 3891
  sp = STACKTOP; //@line 3892
  return;
 }
 ___async_unwind = 0; //@line 3895
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3896
 $31 = $ReallocAsyncCtx10 + 4 | 0; //@line 3897
 HEAP32[$31 >> 2] = $2; //@line 3898
 $32 = $ReallocAsyncCtx10 + 8 | 0; //@line 3899
 HEAP32[$32 >> 2] = $14; //@line 3900
 sp = STACKTOP; //@line 3901
 return;
}
function _stoip6($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$0$lcssa6667 = 0, $$015$i = 0, $$016$i = 0, $$04857 = 0, $$049 = 0, $$050$lcssa = 0, $$05056 = 0, $$052$lcssa = 0, $$052$lcssa6568 = 0, $$05255 = 0, $$058 = 0, $$1 = 0, $$151 = 0, $$sink18$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $21 = 0, $22 = 0, $27 = 0, $29 = 0, $36 = 0, $39 = 0, $4 = 0, $42 = 0, $44 = 0, $6 = 0, $9 = 0;
 if ($1 >>> 0 > 39) {
  return;
 }
 $4 = $0; //@line 2534
 do {
  if (!$1) {
   $$0$lcssa6667 = $2; //@line 2538
   $$052$lcssa6568 = 0; //@line 2538
  } else {
   $$04857 = $0; //@line 2540
   $$05056 = -1; //@line 2540
   $$05255 = 0; //@line 2540
   $$058 = $2; //@line 2540
   while (1) {
    $6 = HEAP8[$$04857 >> 0] | 0; //@line 2542
    if ($$05255 << 24 >> 24 < 8 & $6 << 24 >> 24 != 0) {
     $$049 = $$04857; //@line 2547
     $9 = $6; //@line 2547
    } else {
     $$0$lcssa = $$058; //@line 2549
     $$050$lcssa = $$05056; //@line 2549
     $$052$lcssa = $$05255; //@line 2549
     break;
    }
    L7 : while (1) {
     switch ($9 << 24 >> 24) {
     case 58:
     case 0:
      {
       $$015$i = $$04857; //@line 2555
       $$016$i = 0; //@line 2555
       $13 = $6; //@line 2555
       break L7;
       break;
      }
     default:
      {}
     }
     $10 = $$049 + 1 | 0; //@line 2562
     $$049 = $10; //@line 2564
     $9 = HEAP8[$10 >> 0] | 0; //@line 2564
    }
    while (1) {
     $11 = $$015$i + 1 | 0; //@line 2567
     $12 = $13 << 24 >> 24; //@line 2568
     if (($13 + -48 & 255) < 10) {
      $$sink18$i = -48; //@line 2572
     } else {
      if (($13 + -65 & 255) < 6) {
       $$sink18$i = -55; //@line 2577
      } else {
       if (($13 + -97 & 255) < 6) {
        $$sink18$i = 65449; //@line 2582
       } else {
        break;
       }
      }
     }
     $$015$i = $11; //@line 2594
     $$016$i = ($$sink18$i + $12 | ($$016$i & 65535) << 4) & 65535; //@line 2594
     $13 = HEAP8[$11 >> 0] | 0; //@line 2594
    }
    $21 = _common_write_16_bit($$016$i, $$058) | 0; //@line 2596
    $22 = $$05255 + 1 << 24 >> 24; //@line 2597
    if (($$049 - $4 | 0) >>> 0 < $1 >>> 0) {
     if ((HEAP8[$$049 >> 0] | 0) == 58) {
      $27 = $$049 + 1 | 0; //@line 2605
      $29 = (HEAP8[$27 >> 0] | 0) == 58; //@line 2607
      $$1 = $29 ? $27 : $$049; //@line 2610
      $$151 = $29 ? $22 : $$05056; //@line 2610
     } else {
      $$1 = $$049; //@line 2612
      $$151 = $$05056; //@line 2612
     }
    } else {
     $$1 = $$049; //@line 2615
     $$151 = $$05056; //@line 2615
    }
    $$04857 = $$1 + 1 | 0; //@line 2617
    if (($$04857 - $4 | 0) >>> 0 >= $1 >>> 0) {
     $$0$lcssa = $21; //@line 2624
     $$050$lcssa = $$151; //@line 2624
     $$052$lcssa = $22; //@line 2624
     break;
    } else {
     $$05056 = $$151; //@line 2622
     $$05255 = $22; //@line 2622
     $$058 = $21; //@line 2622
    }
   }
   if ($$050$lcssa << 24 >> 24 == -1) {
    if ($$052$lcssa << 24 >> 24 != 8) {
     $$0$lcssa6667 = $$0$lcssa; //@line 2632
     $$052$lcssa6568 = $$052$lcssa; //@line 2632
     break;
    }
    return;
   } else {
    $36 = $$050$lcssa << 24 >> 24 << 1; //@line 2638
    $39 = 8 - ($$052$lcssa << 24 >> 24) << 1; //@line 2641
    $42 = $39 & 254; //@line 2644
    $44 = $2 + ($36 & 254) | 0; //@line 2646
    _memmove($44 + $42 | 0, $44 | 0, 16 - $36 - $39 & 254 | 0) | 0; //@line 2649
    _memset($44 | 0, 0, $42 | 0) | 0; //@line 2650
    return;
   }
  }
 } while (0);
 _memset($$0$lcssa6667 | 0, 0, 16 - ($$052$lcssa6568 << 24 >> 24 << 1) | 0) | 0; //@line 2658
 return;
}
function _memchr($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $11 = 0, $12 = 0, $16 = 0, $18 = 0, $20 = 0, $23 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $7 = 0, $8 = 0, label = 0;
 $3 = $1 & 255; //@line 9829
 $7 = ($2 | 0) != 0; //@line 9833
 L1 : do {
  if ($7 & ($0 & 3 | 0) != 0) {
   $8 = $1 & 255; //@line 9837
   $$03555 = $0; //@line 9838
   $$03654 = $2; //@line 9838
   while (1) {
    if ((HEAP8[$$03555 >> 0] | 0) == $8 << 24 >> 24) {
     $$035$lcssa65 = $$03555; //@line 9843
     $$036$lcssa64 = $$03654; //@line 9843
     label = 6; //@line 9844
     break L1;
    }
    $11 = $$03555 + 1 | 0; //@line 9847
    $12 = $$03654 + -1 | 0; //@line 9848
    $16 = ($12 | 0) != 0; //@line 9852
    if ($16 & ($11 & 3 | 0) != 0) {
     $$03555 = $11; //@line 9855
     $$03654 = $12; //@line 9855
    } else {
     $$035$lcssa = $11; //@line 9857
     $$036$lcssa = $12; //@line 9857
     $$lcssa = $16; //@line 9857
     label = 5; //@line 9858
     break;
    }
   }
  } else {
   $$035$lcssa = $0; //@line 9863
   $$036$lcssa = $2; //@line 9863
   $$lcssa = $7; //@line 9863
   label = 5; //@line 9864
  }
 } while (0);
 if ((label | 0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa; //@line 9869
   $$036$lcssa64 = $$036$lcssa; //@line 9869
   label = 6; //@line 9870
  } else {
   $$2 = $$035$lcssa; //@line 9872
   $$3 = 0; //@line 9872
  }
 }
 L8 : do {
  if ((label | 0) == 6) {
   $18 = $1 & 255; //@line 9878
   if ((HEAP8[$$035$lcssa65 >> 0] | 0) == $18 << 24 >> 24) {
    $$2 = $$035$lcssa65; //@line 9881
    $$3 = $$036$lcssa64; //@line 9881
   } else {
    $20 = Math_imul($3, 16843009) | 0; //@line 9883
    L11 : do {
     if ($$036$lcssa64 >>> 0 > 3) {
      $$046 = $$035$lcssa65; //@line 9887
      $$13745 = $$036$lcssa64; //@line 9887
      while (1) {
       $23 = HEAP32[$$046 >> 2] ^ $20; //@line 9890
       if (($23 & -2139062144 ^ -2139062144) & $23 + -16843009 | 0) {
        break;
       }
       $29 = $$046 + 4 | 0; //@line 9899
       $30 = $$13745 + -4 | 0; //@line 9900
       if ($30 >>> 0 > 3) {
        $$046 = $29; //@line 9903
        $$13745 = $30; //@line 9903
       } else {
        $$0$lcssa = $29; //@line 9905
        $$137$lcssa = $30; //@line 9905
        label = 11; //@line 9906
        break L11;
       }
      }
      $$140 = $$046; //@line 9910
      $$23839 = $$13745; //@line 9910
     } else {
      $$0$lcssa = $$035$lcssa65; //@line 9912
      $$137$lcssa = $$036$lcssa64; //@line 9912
      label = 11; //@line 9913
     }
    } while (0);
    if ((label | 0) == 11) {
     if (!$$137$lcssa) {
      $$2 = $$0$lcssa; //@line 9919
      $$3 = 0; //@line 9919
      break;
     } else {
      $$140 = $$0$lcssa; //@line 9922
      $$23839 = $$137$lcssa; //@line 9922
     }
    }
    while (1) {
     if ((HEAP8[$$140 >> 0] | 0) == $18 << 24 >> 24) {
      $$2 = $$140; //@line 9929
      $$3 = $$23839; //@line 9929
      break L8;
     }
     $35 = $$140 + 1 | 0; //@line 9932
     $$23839 = $$23839 + -1 | 0; //@line 9933
     if (!$$23839) {
      $$2 = $35; //@line 9936
      $$3 = 0; //@line 9936
      break;
     } else {
      $$140 = $35; //@line 9939
     }
    }
   }
  }
 } while (0);
 return ($$3 | 0 ? $$2 : 0) | 0; //@line 9947
}
function _mbed_vtracef__async_cb_136($0) {
 $0 = $0 | 0;
 var $$13 = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $18 = 0, $19 = 0, $2 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $34 = 0, $35 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11189
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11191
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11195
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11197
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11199
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11201
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 11204
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11206
 $$13 = ($AsyncRetVal | 0) >= ($2 | 0) ? 0 : $AsyncRetVal; //@line 11208
 $18 = (HEAP32[$0 + 8 >> 2] | 0) + $$13 | 0; //@line 11210
 $19 = $2 - $$13 | 0; //@line 11211
 do {
  if (($$13 | 0) > 0) {
   $21 = HEAP32[132] | 0; //@line 11215
   if (!(($19 | 0) > 0 & ($21 | 0) != 0)) {
    if (($$13 | 0) < 1 | ($19 | 0) < 1 | $14 ^ 1) {
     break;
    }
    _snprintf($18, $19, 3604, $10) | 0; //@line 11227
    break;
   }
   $ReallocAsyncCtx6 = _emscripten_realloc_async_context(32) | 0; //@line 11230
   $23 = FUNCTION_TABLE_i[$21 & 0]() | 0; //@line 11231
   if (___async) {
    HEAP32[$ReallocAsyncCtx6 >> 2] = 72; //@line 11234
    $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 11235
    HEAP32[$24 >> 2] = $6; //@line 11236
    $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 11237
    HEAP32[$25 >> 2] = $18; //@line 11238
    $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 11239
    HEAP32[$26 >> 2] = $19; //@line 11240
    $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 11241
    HEAP32[$27 >> 2] = $8; //@line 11242
    $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 11243
    $$expand_i1_val = $14 & 1; //@line 11244
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 11245
    $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 11246
    HEAP32[$29 >> 2] = $10; //@line 11247
    $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 11248
    HEAP32[$30 >> 2] = $12; //@line 11249
    sp = STACKTOP; //@line 11250
    return;
   }
   HEAP32[___async_retval >> 2] = $23; //@line 11254
   ___async_unwind = 0; //@line 11255
   HEAP32[$ReallocAsyncCtx6 >> 2] = 72; //@line 11256
   $24 = $ReallocAsyncCtx6 + 4 | 0; //@line 11257
   HEAP32[$24 >> 2] = $6; //@line 11258
   $25 = $ReallocAsyncCtx6 + 8 | 0; //@line 11259
   HEAP32[$25 >> 2] = $18; //@line 11260
   $26 = $ReallocAsyncCtx6 + 12 | 0; //@line 11261
   HEAP32[$26 >> 2] = $19; //@line 11262
   $27 = $ReallocAsyncCtx6 + 16 | 0; //@line 11263
   HEAP32[$27 >> 2] = $8; //@line 11264
   $28 = $ReallocAsyncCtx6 + 20 | 0; //@line 11265
   $$expand_i1_val = $14 & 1; //@line 11266
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 11267
   $29 = $ReallocAsyncCtx6 + 24 | 0; //@line 11268
   HEAP32[$29 >> 2] = $10; //@line 11269
   $30 = $ReallocAsyncCtx6 + 28 | 0; //@line 11270
   HEAP32[$30 >> 2] = $12; //@line 11271
   sp = STACKTOP; //@line 11272
   return;
  }
 } while (0);
 $34 = HEAP32[133] | 0; //@line 11276
 $35 = HEAP32[126] | 0; //@line 11277
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 11278
 FUNCTION_TABLE_vi[$34 & 511]($35); //@line 11279
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 11282
  sp = STACKTOP; //@line 11283
  return;
 }
 ___async_unwind = 0; //@line 11286
 HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 11287
 sp = STACKTOP; //@line 11288
 return;
}
function _fflush($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $12 = 0, $13 = 0, $25 = 0, $28 = 0, $34 = 0, $5 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, $phitmp = 0, sp = 0;
 sp = STACKTOP; //@line 5358
 do {
  if (!$0) {
   do {
    if (!(HEAP32[476] | 0)) {
     $34 = 0; //@line 5366
    } else {
     $12 = HEAP32[476] | 0; //@line 5368
     $AsyncCtx10 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5369
     $13 = _fflush($12) | 0; //@line 5370
     if (___async) {
      HEAP32[$AsyncCtx10 >> 2] = 323; //@line 5373
      sp = STACKTOP; //@line 5374
      return 0; //@line 5375
     } else {
      _emscripten_free_async_context($AsyncCtx10 | 0); //@line 5377
      $34 = $13; //@line 5378
      break;
     }
    }
   } while (0);
   $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 5384
   L9 : do {
    if (!$$02325) {
     $$024$lcssa = $34; //@line 5388
    } else {
     $$02327 = $$02325; //@line 5390
     $$02426 = $34; //@line 5390
     while (1) {
      if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
       $28 = ___lockfile($$02327) | 0; //@line 5397
      } else {
       $28 = 0; //@line 5399
      }
      if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
       $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5407
       $25 = ___fflush_unlocked($$02327) | 0; //@line 5408
       if (___async) {
        break;
       }
       _emscripten_free_async_context($AsyncCtx | 0); //@line 5413
       $$1 = $25 | $$02426; //@line 5415
      } else {
       $$1 = $$02426; //@line 5417
      }
      if ($28 | 0) {
       ___unlockfile($$02327); //@line 5421
      }
      $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 5424
      if (!$$023) {
       $$024$lcssa = $$1; //@line 5427
       break L9;
      } else {
       $$02327 = $$023; //@line 5430
       $$02426 = $$1; //@line 5430
      }
     }
     HEAP32[$AsyncCtx >> 2] = 324; //@line 5433
     HEAP32[$AsyncCtx + 4 >> 2] = $$02426; //@line 5435
     HEAP32[$AsyncCtx + 8 >> 2] = $28; //@line 5437
     HEAP32[$AsyncCtx + 12 >> 2] = $$02327; //@line 5439
     sp = STACKTOP; //@line 5440
     return 0; //@line 5441
    }
   } while (0);
   ___ofl_unlock(); //@line 5444
   $$0 = $$024$lcssa; //@line 5445
  } else {
   if ((HEAP32[$0 + 76 >> 2] | 0) <= -1) {
    $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5451
    $5 = ___fflush_unlocked($0) | 0; //@line 5452
    if (___async) {
     HEAP32[$AsyncCtx6 >> 2] = 321; //@line 5455
     sp = STACKTOP; //@line 5456
     return 0; //@line 5457
    } else {
     _emscripten_free_async_context($AsyncCtx6 | 0); //@line 5459
     $$0 = $5; //@line 5460
     break;
    }
   }
   $phitmp = (___lockfile($0) | 0) == 0; //@line 5465
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5466
   $7 = ___fflush_unlocked($0) | 0; //@line 5467
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 322; //@line 5470
    HEAP8[$AsyncCtx3 + 4 >> 0] = $phitmp & 1; //@line 5473
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5475
    sp = STACKTOP; //@line 5476
    return 0; //@line 5477
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5479
   if ($phitmp) {
    $$0 = $7; //@line 5481
   } else {
    ___unlockfile($0); //@line 5483
    $$0 = $7; //@line 5484
   }
  }
 } while (0);
 return $$0 | 0; //@line 5488
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $13 = 0, $19 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $39 = 0, $50 = 0, $53 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 14699
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14705
  } else {
   if (!(__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0)) {
    $50 = HEAP32[$0 + 8 >> 2] | 0; //@line 14711
    $53 = HEAP32[(HEAP32[$50 >> 2] | 0) + 24 >> 2] | 0; //@line 14714
    $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14715
    FUNCTION_TABLE_viiiii[$53 & 3]($50, $1, $2, $3, $4); //@line 14716
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 350; //@line 14719
     sp = STACKTOP; //@line 14720
     return;
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14723
     break;
    }
   }
   if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
    $13 = $1 + 20 | 0; //@line 14731
    if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
     HEAP32[$1 + 32 >> 2] = $3; //@line 14736
     $19 = $1 + 44 | 0; //@line 14737
     if ((HEAP32[$19 >> 2] | 0) == 4) {
      break;
     }
     $22 = $1 + 52 | 0; //@line 14743
     HEAP8[$22 >> 0] = 0; //@line 14744
     $23 = $1 + 53 | 0; //@line 14745
     HEAP8[$23 >> 0] = 0; //@line 14746
     $25 = HEAP32[$0 + 8 >> 2] | 0; //@line 14748
     $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 20 >> 2] | 0; //@line 14751
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14752
     FUNCTION_TABLE_viiiiii[$28 & 3]($25, $1, $2, $2, 1, $4); //@line 14753
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 349; //@line 14756
      HEAP32[$AsyncCtx + 4 >> 2] = $23; //@line 14758
      HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14760
      HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 14762
      HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 14764
      HEAP32[$AsyncCtx + 20 >> 2] = $22; //@line 14766
      HEAP32[$AsyncCtx + 24 >> 2] = $19; //@line 14768
      sp = STACKTOP; //@line 14769
      return;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 14772
     if (!(HEAP8[$23 >> 0] | 0)) {
      $$037$off038 = 4; //@line 14776
      label = 13; //@line 14777
     } else {
      if (!(HEAP8[$22 >> 0] | 0)) {
       $$037$off038 = 3; //@line 14782
       label = 13; //@line 14783
      } else {
       $$037$off039 = 3; //@line 14785
      }
     }
     if ((label | 0) == 13) {
      HEAP32[$13 >> 2] = $2; //@line 14789
      $39 = $1 + 40 | 0; //@line 14790
      HEAP32[$39 >> 2] = (HEAP32[$39 >> 2] | 0) + 1; //@line 14793
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14803
        $$037$off039 = $$037$off038; //@line 14804
       } else {
        $$037$off039 = $$037$off038; //@line 14806
       }
      } else {
       $$037$off039 = $$037$off038; //@line 14809
      }
     }
     HEAP32[$19 >> 2] = $$037$off039; //@line 14812
     break;
    }
   }
   if (($3 | 0) == 1) {
    HEAP32[$1 + 32 >> 2] = 1; //@line 14819
   }
  }
 } while (0);
 return;
}
function __ZN9TCPSocket7connectEPKct__async_cb_91($0) {
 $0 = $0 | 0;
 var $$0$off0$i$reg2mem$0 = 0, $$08$i = 0, $$expand_i1_val = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5609
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5611
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5613
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5615
 $8 = HEAP8[$0 + 16 >> 0] & 1; //@line 5618
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5620
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5622
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5624
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 5626
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5628
 if ((HEAP32[$2 >> 2] | 0) != 0 & ($AsyncRetVal | 1 | 0) == -3013) {
  $18 = HEAP32[$4 >> 2] | 0; //@line 5635
  if (!$18) {
   $$0$off0$i$reg2mem$0 = 1; //@line 5638
   $$08$i = -3005; //@line 5638
  } else {
   HEAP32[$12 >> 2] = 0; //@line 5640
   $20 = HEAP32[$14 >> 2] | 0; //@line 5641
   $23 = HEAP32[(HEAP32[$20 >> 2] | 0) + 60 >> 2] | 0; //@line 5644
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 5645
   $24 = FUNCTION_TABLE_iiii[$23 & 31]($20, $18, $16) | 0; //@line 5646
   if (___async) {
    HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 5649
    $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 5650
    HEAP32[$25 >> 2] = $2; //@line 5651
    $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 5652
    HEAP32[$26 >> 2] = $4; //@line 5653
    $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 5654
    HEAP32[$27 >> 2] = $6; //@line 5655
    $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 5656
    $$expand_i1_val = 1; //@line 5657
    HEAP8[$28 >> 0] = $$expand_i1_val; //@line 5658
    $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 5659
    HEAP32[$29 >> 2] = $10; //@line 5660
    $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 5661
    HEAP32[$30 >> 2] = $12; //@line 5662
    $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 5663
    HEAP32[$31 >> 2] = $14; //@line 5664
    $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 5665
    HEAP32[$32 >> 2] = $16; //@line 5666
    sp = STACKTOP; //@line 5667
    return;
   }
   HEAP32[___async_retval >> 2] = $24; //@line 5671
   ___async_unwind = 0; //@line 5672
   HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 5673
   $25 = $ReallocAsyncCtx2 + 4 | 0; //@line 5674
   HEAP32[$25 >> 2] = $2; //@line 5675
   $26 = $ReallocAsyncCtx2 + 8 | 0; //@line 5676
   HEAP32[$26 >> 2] = $4; //@line 5677
   $27 = $ReallocAsyncCtx2 + 12 | 0; //@line 5678
   HEAP32[$27 >> 2] = $6; //@line 5679
   $28 = $ReallocAsyncCtx2 + 16 | 0; //@line 5680
   $$expand_i1_val = 1; //@line 5681
   HEAP8[$28 >> 0] = $$expand_i1_val; //@line 5682
   $29 = $ReallocAsyncCtx2 + 20 | 0; //@line 5683
   HEAP32[$29 >> 2] = $10; //@line 5684
   $30 = $ReallocAsyncCtx2 + 24 | 0; //@line 5685
   HEAP32[$30 >> 2] = $12; //@line 5686
   $31 = $ReallocAsyncCtx2 + 28 | 0; //@line 5687
   HEAP32[$31 >> 2] = $14; //@line 5688
   $32 = $ReallocAsyncCtx2 + 32 | 0; //@line 5689
   HEAP32[$32 >> 2] = $16; //@line 5690
   sp = STACKTOP; //@line 5691
   return;
  }
 } else {
  $$0$off0$i$reg2mem$0 = $8; //@line 5695
  $$08$i = $AsyncRetVal; //@line 5695
 }
 HEAP8[$6 >> 0] = 0; //@line 5697
 HEAP32[___async_retval >> 2] = $$0$off0$i$reg2mem$0 & ($$08$i | 0) == -3015 ? 0 : $$08$i; //@line 5702
 return;
}
function _mbed_vtracef__async_cb_137($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $50 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 11298
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11300
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11302
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11304
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11306
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11308
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11310
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11312
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 11314
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 11316
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 11318
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 11320
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 11322
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 11324
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 11326
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 11328
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 11330
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 11332
 $36 = HEAP8[$0 + 72 >> 0] & 1; //@line 11335
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 11337
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 11339
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 11341
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 11343
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 11345
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 11347
 $50 = HEAP32[$0 + 100 >> 2] | 0; //@line 11349
 $55 = ($50 | 0 ? 4 : 0) + $50 + (HEAP32[___async_retval >> 2] | 0) | 0; //@line 11355
 $56 = HEAP32[131] | 0; //@line 11356
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(100) | 0; //@line 11357
 $57 = FUNCTION_TABLE_ii[$56 & 31]($55) | 0; //@line 11358
 if (!___async) {
  HEAP32[___async_retval >> 2] = $57; //@line 11362
  ___async_unwind = 0; //@line 11363
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 70; //@line 11365
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 11367
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 11369
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 11371
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 11373
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 11375
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $12; //@line 11377
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $14; //@line 11379
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $16; //@line 11381
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $18; //@line 11383
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $20; //@line 11385
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $22; //@line 11387
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $24; //@line 11389
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $26; //@line 11391
 HEAP32[$ReallocAsyncCtx5 + 56 >> 2] = $28; //@line 11393
 HEAP32[$ReallocAsyncCtx5 + 60 >> 2] = $30; //@line 11395
 HEAP32[$ReallocAsyncCtx5 + 64 >> 2] = $32; //@line 11397
 HEAP32[$ReallocAsyncCtx5 + 68 >> 2] = $34; //@line 11399
 HEAP8[$ReallocAsyncCtx5 + 72 >> 0] = $36 & 1; //@line 11402
 HEAP32[$ReallocAsyncCtx5 + 76 >> 2] = $38; //@line 11404
 HEAP32[$ReallocAsyncCtx5 + 80 >> 2] = $40; //@line 11406
 HEAP32[$ReallocAsyncCtx5 + 84 >> 2] = $42; //@line 11408
 HEAP32[$ReallocAsyncCtx5 + 88 >> 2] = $44; //@line 11410
 HEAP32[$ReallocAsyncCtx5 + 92 >> 2] = $46; //@line 11412
 HEAP32[$ReallocAsyncCtx5 + 96 >> 2] = $48; //@line 11414
 sp = STACKTOP; //@line 11415
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_65($0) {
 $0 = $0 | 0;
 var $$049 = 0, $14 = 0, $15 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1255
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1257
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1261
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1263
 if (!(HEAP32[$2 + 48 >> 2] | 0)) {
  $$049 = 0; //@line 1268
 } else {
  $$049 = HEAPU8[HEAP32[$0 + 8 >> 2] >> 0] | 0; //@line 1272
 }
 $14 = $2 + 28 | 0; //@line 1274
 $15 = HEAP32[$14 >> 2] | 0; //@line 1275
 if (!$15) {
  $26 = $6 + 12 | 0; //@line 1278
  HEAP32[$26 >> 2] = 0; //@line 1279
  $27 = HEAP32[$2 >> 2] | 0; //@line 1280
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 1281
  __ZL28nsapi_dns_query_async_deletei($27); //@line 1282
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 266; //@line 1285
   $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 1286
   HEAP32[$28 >> 2] = $26; //@line 1287
   $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 1288
   HEAP32[$29 >> 2] = $6; //@line 1289
   $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 1290
   HEAP32[$30 >> 2] = $8; //@line 1291
   $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 1292
   HEAP32[$31 >> 2] = $$049; //@line 1293
   sp = STACKTOP; //@line 1294
   return;
  }
  ___async_unwind = 0; //@line 1297
  HEAP32[$ReallocAsyncCtx6 >> 2] = 266; //@line 1298
  $28 = $ReallocAsyncCtx6 + 4 | 0; //@line 1299
  HEAP32[$28 >> 2] = $26; //@line 1300
  $29 = $ReallocAsyncCtx6 + 8 | 0; //@line 1301
  HEAP32[$29 >> 2] = $6; //@line 1302
  $30 = $ReallocAsyncCtx6 + 12 | 0; //@line 1303
  HEAP32[$30 >> 2] = $8; //@line 1304
  $31 = $ReallocAsyncCtx6 + 16 | 0; //@line 1305
  HEAP32[$31 >> 2] = $$049; //@line 1306
  sp = STACKTOP; //@line 1307
  return;
 } else {
  $19 = HEAP32[$15 + 4 >> 2] | 0; //@line 1312
  $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 1313
  FUNCTION_TABLE_vii[$19 & 7]($6, $2 + 16 | 0); //@line 1314
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 265; //@line 1317
   $20 = $ReallocAsyncCtx + 4 | 0; //@line 1318
   HEAP32[$20 >> 2] = $14; //@line 1319
   $21 = $ReallocAsyncCtx + 8 | 0; //@line 1320
   HEAP32[$21 >> 2] = $6; //@line 1321
   $22 = $ReallocAsyncCtx + 12 | 0; //@line 1322
   HEAP32[$22 >> 2] = $2; //@line 1323
   $23 = $ReallocAsyncCtx + 16 | 0; //@line 1324
   HEAP32[$23 >> 2] = $6; //@line 1325
   $24 = $ReallocAsyncCtx + 20 | 0; //@line 1326
   HEAP32[$24 >> 2] = $8; //@line 1327
   $25 = $ReallocAsyncCtx + 24 | 0; //@line 1328
   HEAP32[$25 >> 2] = $$049; //@line 1329
   sp = STACKTOP; //@line 1330
   return;
  }
  ___async_unwind = 0; //@line 1333
  HEAP32[$ReallocAsyncCtx >> 2] = 265; //@line 1334
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 1335
  HEAP32[$20 >> 2] = $14; //@line 1336
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 1337
  HEAP32[$21 >> 2] = $6; //@line 1338
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 1339
  HEAP32[$22 >> 2] = $2; //@line 1340
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 1341
  HEAP32[$23 >> 2] = $6; //@line 1342
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 1343
  HEAP32[$24 >> 2] = $8; //@line 1344
  $25 = $ReallocAsyncCtx + 24 | 0; //@line 1345
  HEAP32[$25 >> 2] = $$049; //@line 1346
  sp = STACKTOP; //@line 1347
  return;
 }
}
function _equeue_enqueue($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$051$ph = 0, $$05157 = 0, $$0515859 = 0, $$053 = 0, $13 = 0, $14 = 0, $16 = 0, $24 = 0, $25 = 0, $27 = 0, $29 = 0, $33 = 0, $34 = 0, $42 = 0, $43 = 0, $46 = 0, $47 = 0, $49 = 0, $54 = 0, $65 = 0, $67 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1417
 $13 = $1 - (HEAP32[$0 + 12 >> 2] | 0) | HEAPU8[$1 + 4 >> 0] << HEAP32[$0 + 16 >> 2]; //@line 1428
 $14 = $1 + 20 | 0; //@line 1429
 $16 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1431
 HEAP32[$14 >> 2] = ($16 & ~($16 >> 31)) + $2; //@line 1436
 HEAP8[$1 + 5 >> 0] = HEAP8[$0 + 9 >> 0] | 0; //@line 1440
 $24 = $0 + 128 | 0; //@line 1441
 _equeue_mutex_lock($24); //@line 1442
 $25 = HEAP32[$0 >> 2] | 0; //@line 1443
 L1 : do {
  if (!$25) {
   $$051$ph = $0; //@line 1447
   label = 5; //@line 1448
  } else {
   $27 = HEAP32[$14 >> 2] | 0; //@line 1450
   $$053 = $0; //@line 1451
   $29 = $25; //@line 1451
   while (1) {
    if (((HEAP32[$29 + 20 >> 2] | 0) - $27 | 0) >= 0) {
     break;
    }
    $33 = $29 + 8 | 0; //@line 1460
    $34 = HEAP32[$33 >> 2] | 0; //@line 1461
    if (!$34) {
     $$051$ph = $33; //@line 1464
     label = 5; //@line 1465
     break L1;
    } else {
     $$053 = $33; //@line 1468
     $29 = $34; //@line 1468
    }
   }
   if ((HEAP32[$29 + 20 >> 2] | 0) != (HEAP32[$14 >> 2] | 0)) {
    $49 = $1 + 8 | 0; //@line 1476
    HEAP32[$49 >> 2] = $29; //@line 1477
    HEAP32[$29 + 16 >> 2] = $49; //@line 1479
    $$0515859 = $$053; //@line 1480
    label = 11; //@line 1481
    break;
   }
   $42 = HEAP32[$29 + 8 >> 2] | 0; //@line 1485
   $43 = $1 + 8 | 0; //@line 1486
   HEAP32[$43 >> 2] = $42; //@line 1487
   if ($42 | 0) {
    HEAP32[$42 + 16 >> 2] = $43; //@line 1491
   }
   $46 = HEAP32[$$053 >> 2] | 0; //@line 1493
   $47 = $1 + 12 | 0; //@line 1494
   HEAP32[$47 >> 2] = $46; //@line 1495
   HEAP32[$46 + 16 >> 2] = $47; //@line 1497
   $$05157 = $$053; //@line 1498
  }
 } while (0);
 if ((label | 0) == 5) {
  HEAP32[$1 + 8 >> 2] = 0; //@line 1503
  $$0515859 = $$051$ph; //@line 1504
  label = 11; //@line 1505
 }
 if ((label | 0) == 11) {
  HEAP32[$1 + 12 >> 2] = 0; //@line 1509
  $$05157 = $$0515859; //@line 1510
 }
 HEAP32[$$05157 >> 2] = $1; //@line 1512
 HEAP32[$1 + 16 >> 2] = $$05157; //@line 1514
 $54 = HEAP32[$0 + 40 >> 2] | 0; //@line 1516
 if (!$54) {
  _equeue_mutex_unlock($24); //@line 1519
  return $13 | 0; //@line 1520
 }
 if (!(HEAP8[$0 + 36 >> 0] | 0)) {
  _equeue_mutex_unlock($24); //@line 1526
  return $13 | 0; //@line 1527
 }
 if ((HEAP32[$0 >> 2] | 0) != ($1 | 0)) {
  _equeue_mutex_unlock($24); //@line 1532
  return $13 | 0; //@line 1533
 }
 if (HEAP32[$1 + 12 >> 2] | 0) {
  _equeue_mutex_unlock($24); //@line 1539
  return $13 | 0; //@line 1540
 }
 $65 = HEAP32[$0 + 44 >> 2] | 0; //@line 1543
 $67 = (HEAP32[$14 >> 2] | 0) - $2 | 0; //@line 1545
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1549
 FUNCTION_TABLE_vii[$54 & 7]($65, $67 & ~($67 >> 31)); //@line 1550
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 61; //@line 1553
  HEAP32[$AsyncCtx + 4 >> 2] = $24; //@line 1555
  HEAP32[$AsyncCtx + 8 >> 2] = $13; //@line 1557
  sp = STACKTOP; //@line 1558
  return 0; //@line 1559
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 1561
 _equeue_mutex_unlock($24); //@line 1562
 return $13 | 0; //@line 1563
}
function __ZL37nsapi_dns_query_async_socket_callbackPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $23 = 0, $26 = 0, $29 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 10758
 STACKTOP = STACKTOP + 32 | 0; //@line 10759
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 10759
 $1 = sp + 16 | 0; //@line 10760
 $2 = sp; //@line 10761
 if (!$0) {
  STACKTOP = sp; //@line 10764
  return;
 }
 $4 = $0 + 12 | 0; //@line 10766
 $5 = HEAP32[$4 >> 2] | 0; //@line 10767
 do {
  if (!$5) {
   $14 = 0; //@line 10771
  } else {
   $8 = HEAP32[$5 + 4 >> 2] | 0; //@line 10774
   $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 10775
   FUNCTION_TABLE_vii[$8 & 7]($1, $0); //@line 10776
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 238; //@line 10779
    HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 10781
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 10783
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 10785
    HEAP32[$AsyncCtx + 16 >> 2] = $2; //@line 10787
    sp = STACKTOP; //@line 10788
    STACKTOP = sp; //@line 10789
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 10791
    $14 = HEAP32[$4 >> 2] | 0; //@line 10793
    break;
   }
  }
 } while (0);
 $13 = $1 + 12 | 0; //@line 10798
 HEAP32[$13 >> 2] = $14; //@line 10799
 $16 = HEAP32[$0 + 16 >> 2] | 0; //@line 10801
 HEAP32[$2 + 8 >> 2] = 0; //@line 10803
 HEAP32[$2 >> 2] = 239; //@line 10804
 HEAP32[$2 + 4 >> 2] = $16; //@line 10806
 $18 = $2 + 12 | 0; //@line 10807
 HEAP32[$18 >> 2] = 776; //@line 10808
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 10809
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($1, 0, $2) | 0; //@line 10810
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 240; //@line 10813
  HEAP32[$AsyncCtx10 + 4 >> 2] = $18; //@line 10815
  HEAP32[$AsyncCtx10 + 8 >> 2] = $13; //@line 10817
  HEAP32[$AsyncCtx10 + 12 >> 2] = $2; //@line 10819
  HEAP32[$AsyncCtx10 + 16 >> 2] = $1; //@line 10821
  sp = STACKTOP; //@line 10822
  STACKTOP = sp; //@line 10823
  return;
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 10825
 $23 = HEAP32[$18 >> 2] | 0; //@line 10826
 do {
  if ($23 | 0) {
   $26 = HEAP32[$23 + 8 >> 2] | 0; //@line 10831
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 10832
   FUNCTION_TABLE_vi[$26 & 511]($2); //@line 10833
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 241; //@line 10836
    HEAP32[$AsyncCtx3 + 4 >> 2] = $13; //@line 10838
    HEAP32[$AsyncCtx3 + 8 >> 2] = $1; //@line 10840
    sp = STACKTOP; //@line 10841
    STACKTOP = sp; //@line 10842
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 10844
    break;
   }
  }
 } while (0);
 $29 = HEAP32[$13 >> 2] | 0; //@line 10849
 if (!$29) {
  STACKTOP = sp; //@line 10852
  return;
 }
 $32 = HEAP32[$29 + 8 >> 2] | 0; //@line 10855
 $AsyncCtx7 = _emscripten_alloc_async_context(4, sp) | 0; //@line 10856
 FUNCTION_TABLE_vi[$32 & 511]($1); //@line 10857
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 242; //@line 10860
  sp = STACKTOP; //@line 10861
  STACKTOP = sp; //@line 10862
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 10864
 STACKTOP = sp; //@line 10865
 return;
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $12 = 0, $22 = 0, $23 = 0, $25 = 0, $28 = 0, $29 = 0, $3 = 0, $36 = 0, $39 = 0, $40 = 0, $7 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx14 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, sp = 0;
 sp = STACKTOP; //@line 14011
 STACKTOP = STACKTOP + 48 | 0; //@line 14012
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 14012
 $vararg_buffer10 = sp + 32 | 0; //@line 14013
 $vararg_buffer7 = sp + 24 | 0; //@line 14014
 $vararg_buffer3 = sp + 16 | 0; //@line 14015
 $vararg_buffer = sp; //@line 14016
 $0 = sp + 36 | 0; //@line 14017
 $1 = ___cxa_get_globals_fast() | 0; //@line 14018
 if ($1 | 0) {
  $3 = HEAP32[$1 >> 2] | 0; //@line 14021
  if ($3 | 0) {
   $7 = $3 + 48 | 0; //@line 14026
   $9 = HEAP32[$7 >> 2] | 0; //@line 14028
   $12 = HEAP32[$7 + 4 >> 2] | 0; //@line 14031
   if (!(($9 & -256 | 0) == 1126902528 & ($12 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer7 >> 2] = 7105; //@line 14037
    _abort_message(7055, $vararg_buffer7); //@line 14038
   }
   if (($9 | 0) == 1126902529 & ($12 | 0) == 1129074247) {
    $22 = HEAP32[$3 + 44 >> 2] | 0; //@line 14047
   } else {
    $22 = $3 + 80 | 0; //@line 14049
   }
   HEAP32[$0 >> 2] = $22; //@line 14051
   $23 = HEAP32[$3 >> 2] | 0; //@line 14052
   $25 = HEAP32[$23 + 4 >> 2] | 0; //@line 14054
   $28 = HEAP32[(HEAP32[30] | 0) + 16 >> 2] | 0; //@line 14057
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 14058
   $29 = FUNCTION_TABLE_iiii[$28 & 31](120, $23, $0) | 0; //@line 14059
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 340; //@line 14062
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 14064
    HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer3; //@line 14066
    HEAP32[$AsyncCtx + 12 >> 2] = $25; //@line 14068
    HEAP32[$AsyncCtx + 16 >> 2] = $vararg_buffer3; //@line 14070
    HEAP32[$AsyncCtx + 20 >> 2] = $vararg_buffer; //@line 14072
    HEAP32[$AsyncCtx + 24 >> 2] = $vararg_buffer; //@line 14074
    sp = STACKTOP; //@line 14075
    STACKTOP = sp; //@line 14076
    return;
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 14078
   if (!$29) {
    HEAP32[$vararg_buffer3 >> 2] = 7105; //@line 14080
    HEAP32[$vararg_buffer3 + 4 >> 2] = $25; //@line 14082
    _abort_message(7014, $vararg_buffer3); //@line 14083
   }
   $36 = HEAP32[$0 >> 2] | 0; //@line 14086
   $39 = HEAP32[(HEAP32[$36 >> 2] | 0) + 8 >> 2] | 0; //@line 14089
   $AsyncCtx14 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14090
   $40 = FUNCTION_TABLE_ii[$39 & 31]($36) | 0; //@line 14091
   if (___async) {
    HEAP32[$AsyncCtx14 >> 2] = 341; //@line 14094
    HEAP32[$AsyncCtx14 + 4 >> 2] = $vararg_buffer; //@line 14096
    HEAP32[$AsyncCtx14 + 8 >> 2] = $25; //@line 14098
    HEAP32[$AsyncCtx14 + 12 >> 2] = $vararg_buffer; //@line 14100
    sp = STACKTOP; //@line 14101
    STACKTOP = sp; //@line 14102
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx14 | 0); //@line 14104
    HEAP32[$vararg_buffer >> 2] = 7105; //@line 14105
    HEAP32[$vararg_buffer + 4 >> 2] = $25; //@line 14107
    HEAP32[$vararg_buffer + 8 >> 2] = $40; //@line 14109
    _abort_message(6969, $vararg_buffer); //@line 14110
   }
  }
 }
 _abort_message(7093, $vararg_buffer10); //@line 14115
}
function _main__async_cb_61($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $26 = 0, $30 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 981
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 983
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 985
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 987
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 989
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 991
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 993
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 995
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 997
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 999
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1003
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 1007
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1011
 $30 = __ZN17EthernetInterface11get_gatewayEv(788) | 0; //@line 1012
 HEAP32[$18 >> 2] = $16 | 0 ? $16 : 4091; //@line 1015
 _printf(4096, $18) | 0; //@line 1016
 HEAP32[$22 >> 2] = $AsyncRetVal | 0 ? $AsyncRetVal : 4091; //@line 1019
 _printf(4112, $22) | 0; //@line 1020
 HEAP32[$26 >> 2] = $30 | 0 ? $30 : 4091; //@line 1023
 _printf(4129, $26) | 0; //@line 1024
 __ZN9TCPSocketC2Ev($2); //@line 1025
 $39 = HEAP32[(HEAP32[197] | 0) + 88 >> 2] | 0; //@line 1028
 $ReallocAsyncCtx = _emscripten_realloc_async_context(40) | 0; //@line 1029
 $40 = FUNCTION_TABLE_ii[$39 & 31](788) | 0; //@line 1030
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 309; //@line 1033
  $41 = $ReallocAsyncCtx + 4 | 0; //@line 1034
  HEAP32[$41 >> 2] = $2; //@line 1035
  $42 = $ReallocAsyncCtx + 8 | 0; //@line 1036
  HEAP32[$42 >> 2] = $2; //@line 1037
  $43 = $ReallocAsyncCtx + 12 | 0; //@line 1038
  HEAP32[$43 >> 2] = $2; //@line 1039
  $44 = $ReallocAsyncCtx + 16 | 0; //@line 1040
  HEAP32[$44 >> 2] = $4; //@line 1041
  $45 = $ReallocAsyncCtx + 20 | 0; //@line 1042
  HEAP32[$45 >> 2] = $6; //@line 1043
  $46 = $ReallocAsyncCtx + 24 | 0; //@line 1044
  HEAP32[$46 >> 2] = $8; //@line 1045
  $47 = $ReallocAsyncCtx + 28 | 0; //@line 1046
  HEAP32[$47 >> 2] = $10; //@line 1047
  $48 = $ReallocAsyncCtx + 32 | 0; //@line 1048
  HEAP32[$48 >> 2] = $12; //@line 1049
  $49 = $ReallocAsyncCtx + 36 | 0; //@line 1050
  HEAP32[$49 >> 2] = $14; //@line 1051
  sp = STACKTOP; //@line 1052
  return;
 }
 HEAP32[___async_retval >> 2] = $40; //@line 1056
 ___async_unwind = 0; //@line 1057
 HEAP32[$ReallocAsyncCtx >> 2] = 309; //@line 1058
 $41 = $ReallocAsyncCtx + 4 | 0; //@line 1059
 HEAP32[$41 >> 2] = $2; //@line 1060
 $42 = $ReallocAsyncCtx + 8 | 0; //@line 1061
 HEAP32[$42 >> 2] = $2; //@line 1062
 $43 = $ReallocAsyncCtx + 12 | 0; //@line 1063
 HEAP32[$43 >> 2] = $2; //@line 1064
 $44 = $ReallocAsyncCtx + 16 | 0; //@line 1065
 HEAP32[$44 >> 2] = $4; //@line 1066
 $45 = $ReallocAsyncCtx + 20 | 0; //@line 1067
 HEAP32[$45 >> 2] = $6; //@line 1068
 $46 = $ReallocAsyncCtx + 24 | 0; //@line 1069
 HEAP32[$46 >> 2] = $8; //@line 1070
 $47 = $ReallocAsyncCtx + 28 | 0; //@line 1071
 HEAP32[$47 >> 2] = $10; //@line 1072
 $48 = $ReallocAsyncCtx + 32 | 0; //@line 1073
 HEAP32[$48 >> 2] = $12; //@line 1074
 $49 = $ReallocAsyncCtx + 36 | 0; //@line 1075
 HEAP32[$49 >> 2] = $14; //@line 1076
 sp = STACKTOP; //@line 1077
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $15 = 0, $16 = 0, $17 = 0, $20 = 0, $27 = 0, $28 = 0, $29 = 0, $32 = 0, $35 = 0, $4 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx3 = 0, $AsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 2775
 STACKTOP = STACKTOP + 16 | 0; //@line 2776
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 2776
 $4 = sp; //@line 2777
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2780
 $AsyncCtx = _emscripten_alloc_async_context(20, sp) | 0; //@line 2781
 $8 = FUNCTION_TABLE_ii[$7 & 31]($0) | 0; //@line 2782
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 81; //@line 2785
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 2787
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 2789
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 2791
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 2793
  sp = STACKTOP; //@line 2794
  STACKTOP = sp; //@line 2795
  return 0; //@line 2795
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2797
 $15 = HEAP32[(HEAP32[$8 >> 2] | 0) + 4 >> 2] | 0; //@line 2800
 $16 = $2 + 12 | 0; //@line 2801
 $17 = HEAP32[$16 >> 2] | 0; //@line 2802
 do {
  if (!$17) {
   $28 = 0; //@line 2806
  } else {
   $20 = HEAP32[$17 + 4 >> 2] | 0; //@line 2809
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 2810
   FUNCTION_TABLE_vii[$20 & 7]($4, $2); //@line 2811
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 82; //@line 2814
    HEAP32[$AsyncCtx3 + 4 >> 2] = $16; //@line 2816
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 2818
    HEAP32[$AsyncCtx3 + 12 >> 2] = $8; //@line 2820
    HEAP32[$AsyncCtx3 + 16 >> 2] = $1; //@line 2822
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 2824
    HEAP32[$AsyncCtx3 + 24 >> 2] = $15; //@line 2826
    sp = STACKTOP; //@line 2827
    STACKTOP = sp; //@line 2828
    return 0; //@line 2828
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 2830
    $28 = HEAP32[$16 >> 2] | 0; //@line 2832
    break;
   }
  }
 } while (0);
 $27 = $4 + 12 | 0; //@line 2837
 HEAP32[$27 >> 2] = $28; //@line 2838
 $AsyncCtx6 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2839
 $29 = FUNCTION_TABLE_iiiii[$15 & 15]($8, $1, $4, $3) | 0; //@line 2840
 if (___async) {
  HEAP32[$AsyncCtx6 >> 2] = 83; //@line 2843
  HEAP32[$AsyncCtx6 + 4 >> 2] = $27; //@line 2845
  HEAP32[$AsyncCtx6 + 8 >> 2] = $4; //@line 2847
  sp = STACKTOP; //@line 2848
  STACKTOP = sp; //@line 2849
  return 0; //@line 2849
 }
 _emscripten_free_async_context($AsyncCtx6 | 0); //@line 2851
 $32 = HEAP32[$27 >> 2] | 0; //@line 2852
 if (!$32) {
  STACKTOP = sp; //@line 2855
  return $29 | 0; //@line 2855
 }
 $35 = HEAP32[$32 + 8 >> 2] | 0; //@line 2858
 $AsyncCtx10 = _emscripten_alloc_async_context(8, sp) | 0; //@line 2859
 FUNCTION_TABLE_vi[$35 & 511]($4); //@line 2860
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 84; //@line 2863
  HEAP32[$AsyncCtx10 + 4 >> 2] = $29; //@line 2865
  sp = STACKTOP; //@line 2866
  STACKTOP = sp; //@line 2867
  return 0; //@line 2867
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 2869
 STACKTOP = sp; //@line 2870
 return $29 | 0; //@line 2870
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1$i = 0, $14 = 0, $15 = 0, $23 = 0, $31 = 0, $32 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 820
 $5 = $0 + -4 | 0; //@line 821
 $6 = $1 + 8 | 0; //@line 822
 do {
  if (!(HEAP8[$6 >> 0] | 0)) {
   label = 7; //@line 827
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$6 >> 0] | 0)) {
     label = 7; //@line 835
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 841
   _puts(2646) | 0; //@line 842
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 53; //@line 845
    sp = STACKTOP; //@line 846
    return 0; //@line 847
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 849
   $$1$i = -3012; //@line 850
   return $$1$i | 0; //@line 851
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $14 = HEAP32[(HEAP32[$5 >> 2] | 0) + 108 >> 2] | 0; //@line 858
   $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 859
   $15 = FUNCTION_TABLE_iiii[$14 & 31]($5, $1, $2) | 0; //@line 860
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 54; //@line 863
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 865
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 867
    HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 869
    HEAP32[$AsyncCtx + 16 >> 2] = $5; //@line 871
    HEAP32[$AsyncCtx + 20 >> 2] = $3; //@line 873
    HEAP32[$AsyncCtx + 24 >> 2] = $4; //@line 875
    sp = STACKTOP; //@line 876
    return 0; //@line 877
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 879
   if (($15 | 0) < 0) {
    $$1$i = $15; //@line 882
    return $$1$i | 0; //@line 883
   } else {
    $23 = $1 + 12 | 0; //@line 885
    dest = $23; //@line 886
    src = $2; //@line 886
    stop = dest + 60 | 0; //@line 886
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 886
     dest = dest + 4 | 0; //@line 886
     src = src + 4 | 0; //@line 886
    } while ((dest | 0) < (stop | 0));
    HEAP16[$23 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 886
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(24, sp) | 0; //@line 891
 _wait_ms(1); //@line 892
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 55; //@line 895
  HEAP32[$AsyncCtx10 + 4 >> 2] = $5; //@line 897
  HEAP32[$AsyncCtx10 + 8 >> 2] = $5; //@line 899
  HEAP32[$AsyncCtx10 + 12 >> 2] = $1; //@line 901
  HEAP32[$AsyncCtx10 + 16 >> 2] = $3; //@line 903
  HEAP32[$AsyncCtx10 + 20 >> 2] = $4; //@line 905
  sp = STACKTOP; //@line 906
  return 0; //@line 907
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 909
 $31 = HEAP32[(HEAP32[$5 >> 2] | 0) + 116 >> 2] | 0; //@line 912
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 913
 $32 = FUNCTION_TABLE_iiiii[$31 & 15]($5, $1, $3, $4) | 0; //@line 914
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 56; //@line 917
  sp = STACKTOP; //@line 918
  return 0; //@line 919
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 921
 $$1$i = $32; //@line 922
 return $$1$i | 0; //@line 923
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23938
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23940
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23942
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23944
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23946
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23948
 $12 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 4 >> 2] | 0; //@line 23951
 $13 = $2 + 12 | 0; //@line 23952
 $14 = HEAP32[$13 >> 2] | 0; //@line 23953
 if (!$14) {
  $24 = $4 + 12 | 0; //@line 23956
  HEAP32[$24 >> 2] = 0; //@line 23957
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 23958
  $25 = FUNCTION_TABLE_iiiii[$12 & 15]($AsyncRetVal, $6, $4, $8) | 0; //@line 23959
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 23962
   $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 23963
   HEAP32[$26 >> 2] = $24; //@line 23964
   $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 23965
   HEAP32[$27 >> 2] = $4; //@line 23966
   sp = STACKTOP; //@line 23967
   return;
  }
  HEAP32[___async_retval >> 2] = $25; //@line 23971
  ___async_unwind = 0; //@line 23972
  HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 23973
  $26 = $ReallocAsyncCtx3 + 4 | 0; //@line 23974
  HEAP32[$26 >> 2] = $24; //@line 23975
  $27 = $ReallocAsyncCtx3 + 8 | 0; //@line 23976
  HEAP32[$27 >> 2] = $4; //@line 23977
  sp = STACKTOP; //@line 23978
  return;
 } else {
  $17 = HEAP32[$14 + 4 >> 2] | 0; //@line 23982
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(28) | 0; //@line 23983
  FUNCTION_TABLE_vii[$17 & 7]($4, $2); //@line 23984
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 82; //@line 23987
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 23988
   HEAP32[$18 >> 2] = $13; //@line 23989
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 23990
   HEAP32[$19 >> 2] = $4; //@line 23991
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 23992
   HEAP32[$20 >> 2] = $AsyncRetVal; //@line 23993
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 23994
   HEAP32[$21 >> 2] = $6; //@line 23995
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 23996
   HEAP32[$22 >> 2] = $8; //@line 23997
   $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 23998
   HEAP32[$23 >> 2] = $12; //@line 23999
   sp = STACKTOP; //@line 24000
   return;
  }
  ___async_unwind = 0; //@line 24003
  HEAP32[$ReallocAsyncCtx2 >> 2] = 82; //@line 24004
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 24005
  HEAP32[$18 >> 2] = $13; //@line 24006
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 24007
  HEAP32[$19 >> 2] = $4; //@line 24008
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 24009
  HEAP32[$20 >> 2] = $AsyncRetVal; //@line 24010
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 24011
  HEAP32[$21 >> 2] = $6; //@line 24012
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 24013
  HEAP32[$22 >> 2] = $8; //@line 24014
  $23 = $ReallocAsyncCtx2 + 24 | 0; //@line 24015
  HEAP32[$23 >> 2] = $12; //@line 24016
  sp = STACKTOP; //@line 24017
  return;
 }
}
function _mbed_error_vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13576
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13578
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13580
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13582
 if (($AsyncRetVal | 0) <= 0) {
  return;
 }
 if (!(HEAP32[1954] | 0)) {
  _serial_init(7820, 2, 3); //@line 13590
 }
 $9 = HEAP8[$4 >> 0] | 0; //@line 13592
 if (0 == 13 | $9 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 13598
  _serial_putc(7820, $9 << 24 >> 24); //@line 13599
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 300; //@line 13602
   $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 13603
   HEAP32[$18 >> 2] = 0; //@line 13604
   $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 13605
   HEAP32[$19 >> 2] = $AsyncRetVal; //@line 13606
   $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 13607
   HEAP32[$20 >> 2] = $2; //@line 13608
   $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 13609
   HEAP8[$21 >> 0] = $9; //@line 13610
   $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 13611
   HEAP32[$22 >> 2] = $4; //@line 13612
   sp = STACKTOP; //@line 13613
   return;
  }
  ___async_unwind = 0; //@line 13616
  HEAP32[$ReallocAsyncCtx2 >> 2] = 300; //@line 13617
  $18 = $ReallocAsyncCtx2 + 4 | 0; //@line 13618
  HEAP32[$18 >> 2] = 0; //@line 13619
  $19 = $ReallocAsyncCtx2 + 8 | 0; //@line 13620
  HEAP32[$19 >> 2] = $AsyncRetVal; //@line 13621
  $20 = $ReallocAsyncCtx2 + 12 | 0; //@line 13622
  HEAP32[$20 >> 2] = $2; //@line 13623
  $21 = $ReallocAsyncCtx2 + 16 | 0; //@line 13624
  HEAP8[$21 >> 0] = $9; //@line 13625
  $22 = $ReallocAsyncCtx2 + 20 | 0; //@line 13626
  HEAP32[$22 >> 2] = $4; //@line 13627
  sp = STACKTOP; //@line 13628
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 13631
  _serial_putc(7820, 13); //@line 13632
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 299; //@line 13635
   $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 13636
   HEAP8[$12 >> 0] = $9; //@line 13637
   $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 13638
   HEAP32[$13 >> 2] = 0; //@line 13639
   $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 13640
   HEAP32[$14 >> 2] = $AsyncRetVal; //@line 13641
   $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 13642
   HEAP32[$15 >> 2] = $2; //@line 13643
   $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 13644
   HEAP32[$16 >> 2] = $4; //@line 13645
   sp = STACKTOP; //@line 13646
   return;
  }
  ___async_unwind = 0; //@line 13649
  HEAP32[$ReallocAsyncCtx3 >> 2] = 299; //@line 13650
  $12 = $ReallocAsyncCtx3 + 4 | 0; //@line 13651
  HEAP8[$12 >> 0] = $9; //@line 13652
  $13 = $ReallocAsyncCtx3 + 8 | 0; //@line 13653
  HEAP32[$13 >> 2] = 0; //@line 13654
  $14 = $ReallocAsyncCtx3 + 12 | 0; //@line 13655
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 13656
  $15 = $ReallocAsyncCtx3 + 16 | 0; //@line 13657
  HEAP32[$15 >> 2] = $2; //@line 13658
  $16 = $ReallocAsyncCtx3 + 20 | 0; //@line 13659
  HEAP32[$16 >> 2] = $4; //@line 13660
  sp = STACKTOP; //@line 13661
  return;
 }
}
function _mbed_error_vfprintf__async_cb_166($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13669
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13673
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13675
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13679
 $12 = (HEAP32[$0 + 4 >> 2] | 0) + 1 | 0; //@line 13680
 if (($12 | 0) == ($4 | 0)) {
  return;
 }
 $13 = HEAP8[$10 + $12 >> 0] | 0; //@line 13686
 if ((HEAP8[$0 + 16 >> 0] | 0) == 13 | $13 << 24 >> 24 != 10) {
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 13692
  _serial_putc(7820, $13 << 24 >> 24); //@line 13693
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 300; //@line 13696
   $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 13697
   HEAP32[$22 >> 2] = $12; //@line 13698
   $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 13699
   HEAP32[$23 >> 2] = $4; //@line 13700
   $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 13701
   HEAP32[$24 >> 2] = $6; //@line 13702
   $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 13703
   HEAP8[$25 >> 0] = $13; //@line 13704
   $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 13705
   HEAP32[$26 >> 2] = $10; //@line 13706
   sp = STACKTOP; //@line 13707
   return;
  }
  ___async_unwind = 0; //@line 13710
  HEAP32[$ReallocAsyncCtx2 >> 2] = 300; //@line 13711
  $22 = $ReallocAsyncCtx2 + 4 | 0; //@line 13712
  HEAP32[$22 >> 2] = $12; //@line 13713
  $23 = $ReallocAsyncCtx2 + 8 | 0; //@line 13714
  HEAP32[$23 >> 2] = $4; //@line 13715
  $24 = $ReallocAsyncCtx2 + 12 | 0; //@line 13716
  HEAP32[$24 >> 2] = $6; //@line 13717
  $25 = $ReallocAsyncCtx2 + 16 | 0; //@line 13718
  HEAP8[$25 >> 0] = $13; //@line 13719
  $26 = $ReallocAsyncCtx2 + 20 | 0; //@line 13720
  HEAP32[$26 >> 2] = $10; //@line 13721
  sp = STACKTOP; //@line 13722
  return;
 } else {
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(24) | 0; //@line 13725
  _serial_putc(7820, 13); //@line 13726
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 299; //@line 13729
   $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 13730
   HEAP8[$16 >> 0] = $13; //@line 13731
   $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 13732
   HEAP32[$17 >> 2] = $12; //@line 13733
   $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 13734
   HEAP32[$18 >> 2] = $4; //@line 13735
   $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 13736
   HEAP32[$19 >> 2] = $6; //@line 13737
   $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 13738
   HEAP32[$20 >> 2] = $10; //@line 13739
   sp = STACKTOP; //@line 13740
   return;
  }
  ___async_unwind = 0; //@line 13743
  HEAP32[$ReallocAsyncCtx3 >> 2] = 299; //@line 13744
  $16 = $ReallocAsyncCtx3 + 4 | 0; //@line 13745
  HEAP8[$16 >> 0] = $13; //@line 13746
  $17 = $ReallocAsyncCtx3 + 8 | 0; //@line 13747
  HEAP32[$17 >> 2] = $12; //@line 13748
  $18 = $ReallocAsyncCtx3 + 12 | 0; //@line 13749
  HEAP32[$18 >> 2] = $4; //@line 13750
  $19 = $ReallocAsyncCtx3 + 16 | 0; //@line 13751
  HEAP32[$19 >> 2] = $6; //@line 13752
  $20 = $ReallocAsyncCtx3 + 20 | 0; //@line 13753
  HEAP32[$20 >> 2] = $10; //@line 13754
  sp = STACKTOP; //@line 13755
  return;
 }
}
function _mbrtowc($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $$0 = 0, $$03952 = 0, $$04051 = 0, $$04350 = 0, $$1 = 0, $$141 = 0, $$144 = 0, $$2 = 0, $$47 = 0, $12 = 0, $21 = 0, $22 = 0, $26 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $4 = 0, $44 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 6766
 STACKTOP = STACKTOP + 16 | 0; //@line 6767
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6767
 $4 = sp; //@line 6768
 $$ = ($3 | 0) == 0 ? 8404 : $3; //@line 6770
 $6 = HEAP32[$$ >> 2] | 0; //@line 6771
 L1 : do {
  if (!$1) {
   if (!$6) {
    $$0 = 0; //@line 6777
   } else {
    label = 17; //@line 6779
   }
  } else {
   $$47 = ($0 | 0) == 0 ? $4 : $0; //@line 6783
   if (!$2) {
    $$0 = -2; //@line 6786
   } else {
    if (!$6) {
     $12 = HEAP8[$1 >> 0] | 0; //@line 6790
     if ($12 << 24 >> 24 > -1) {
      HEAP32[$$47 >> 2] = $12 & 255; //@line 6794
      $$0 = $12 << 24 >> 24 != 0 & 1; //@line 6797
      break;
     }
     $21 = (HEAP32[HEAP32[(___pthread_self_913() | 0) + 188 >> 2] >> 2] | 0) == 0; //@line 6804
     $22 = HEAP8[$1 >> 0] | 0; //@line 6805
     if ($21) {
      HEAP32[$$47 >> 2] = $22 << 24 >> 24 & 57343; //@line 6809
      $$0 = 1; //@line 6810
      break;
     }
     $26 = ($22 & 255) + -194 | 0; //@line 6814
     if ($26 >>> 0 > 50) {
      label = 17; //@line 6817
      break;
     }
     $30 = HEAP32[1908 + ($26 << 2) >> 2] | 0; //@line 6822
     $31 = $2 + -1 | 0; //@line 6823
     if (!$31) {
      $$2 = $30; //@line 6826
     } else {
      $$03952 = $1 + 1 | 0; //@line 6828
      $$04051 = $30; //@line 6828
      $$04350 = $31; //@line 6828
      label = 11; //@line 6829
     }
    } else {
     $$03952 = $1; //@line 6832
     $$04051 = $6; //@line 6832
     $$04350 = $2; //@line 6832
     label = 11; //@line 6833
    }
    L14 : do {
     if ((label | 0) == 11) {
      $33 = HEAP8[$$03952 >> 0] | 0; //@line 6837
      $35 = ($33 & 255) >>> 3; //@line 6839
      if (($35 + -16 | $35 + ($$04051 >> 26)) >>> 0 > 7) {
       label = 17; //@line 6846
       break L1;
      } else {
       $$1 = $$03952; //@line 6849
       $$141 = $$04051; //@line 6849
       $$144 = $$04350; //@line 6849
       $44 = $33; //@line 6849
      }
      while (1) {
       $$1 = $$1 + 1 | 0; //@line 6853
       $$141 = ($44 & 255) + -128 | $$141 << 6; //@line 6856
       $$144 = $$144 + -1 | 0; //@line 6857
       if (($$141 | 0) >= 0) {
        break;
       }
       if (!$$144) {
        $$2 = $$141; //@line 6864
        break L14;
       }
       $44 = HEAP8[$$1 >> 0] | 0; //@line 6867
       if (($44 & -64) << 24 >> 24 != -128) {
        label = 17; //@line 6873
        break L1;
       }
      }
      HEAP32[$$ >> 2] = 0; //@line 6877
      HEAP32[$$47 >> 2] = $$141; //@line 6878
      $$0 = $2 - $$144 | 0; //@line 6880
      break L1;
     }
    } while (0);
    HEAP32[$$ >> 2] = $$2; //@line 6884
    $$0 = -2; //@line 6885
   }
  }
 } while (0);
 if ((label | 0) == 17) {
  HEAP32[$$ >> 2] = 0; //@line 6890
  HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 6892
  $$0 = -1; //@line 6893
 }
 STACKTOP = sp; //@line 6895
 return $$0 | 0; //@line 6895
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_100($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $42 = 0, $45 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6242
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6244
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6246
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6248
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6250
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6252
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6254
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6256
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6258
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6260
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6262
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6264
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6266
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6268
 $42 = HEAP32[$6 >> 2] | 0; //@line 6269
 if (!$42) {
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 6272
  $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 6273
  if (!___async) {
   HEAP32[___async_retval >> 2] = $27; //@line 6277
   ___async_unwind = 0; //@line 6278
  }
  HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 6280
  HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 6282
  HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 6284
  HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 6286
  HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 6288
  HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 6290
  HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 6292
  HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 6294
  HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 6296
  HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 6298
  HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 6300
  HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 6302
  HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 6304
  HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 6306
  sp = STACKTOP; //@line 6307
  return;
 } else {
  $45 = HEAP32[$42 + 8 >> 2] | 0; //@line 6311
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(56) | 0; //@line 6312
  FUNCTION_TABLE_vi[$45 & 511]($4); //@line 6313
  if (!___async) {
   ___async_unwind = 0; //@line 6316
  }
  HEAP32[$ReallocAsyncCtx3 >> 2] = 261; //@line 6318
  HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 6320
  HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 6322
  HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 6324
  HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 6326
  HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 6328
  HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 6330
  HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $14; //@line 6332
  HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $16; //@line 6334
  HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $18; //@line 6336
  HEAP32[$ReallocAsyncCtx3 + 40 >> 2] = $20; //@line 6338
  HEAP32[$ReallocAsyncCtx3 + 44 >> 2] = $22; //@line 6340
  HEAP32[$ReallocAsyncCtx3 + 48 >> 2] = $24; //@line 6342
  HEAP32[$ReallocAsyncCtx3 + 52 >> 2] = $26; //@line 6344
  sp = STACKTOP; //@line 6345
  return;
 }
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_20($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $34 = 0, $36 = 0, $38 = 0, $4 = 0, $40 = 0, $42 = 0, $44 = 0, $46 = 0, $48 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 20317
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 20319
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20321
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20323
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 20325
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 20327
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 20329
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 20331
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 20333
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 20335
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 20337
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 20339
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 20341
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 20343
 $28 = HEAP32[$0 + 56 >> 2] | 0; //@line 20345
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 20347
 $32 = HEAP32[$0 + 64 >> 2] | 0; //@line 20349
 $34 = HEAP32[$0 + 68 >> 2] | 0; //@line 20351
 $36 = HEAP32[$0 + 72 >> 2] | 0; //@line 20353
 $38 = HEAP32[$0 + 76 >> 2] | 0; //@line 20355
 $40 = HEAP32[$0 + 80 >> 2] | 0; //@line 20357
 $42 = HEAP32[$0 + 84 >> 2] | 0; //@line 20359
 $44 = HEAP32[$0 + 88 >> 2] | 0; //@line 20361
 $46 = HEAP32[$0 + 92 >> 2] | 0; //@line 20363
 $48 = HEAP32[$0 + 96 >> 2] | 0; //@line 20365
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(100) | 0; //@line 20366
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 20367
 if (!___async) {
  ___async_unwind = 0; //@line 20370
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 186; //@line 20372
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 20374
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 20376
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 20378
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 20380
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $10; //@line 20382
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $12; //@line 20384
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $14; //@line 20386
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $16; //@line 20388
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $18; //@line 20390
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $20; //@line 20392
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $22; //@line 20394
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $24; //@line 20396
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $26; //@line 20398
 HEAP32[$ReallocAsyncCtx11 + 56 >> 2] = $28; //@line 20400
 HEAP32[$ReallocAsyncCtx11 + 60 >> 2] = $30; //@line 20402
 HEAP32[$ReallocAsyncCtx11 + 64 >> 2] = $32; //@line 20404
 HEAP32[$ReallocAsyncCtx11 + 68 >> 2] = $34; //@line 20406
 HEAP32[$ReallocAsyncCtx11 + 72 >> 2] = $36; //@line 20408
 HEAP32[$ReallocAsyncCtx11 + 76 >> 2] = $38; //@line 20410
 HEAP32[$ReallocAsyncCtx11 + 80 >> 2] = $40; //@line 20412
 HEAP32[$ReallocAsyncCtx11 + 84 >> 2] = $42; //@line 20414
 HEAP32[$ReallocAsyncCtx11 + 88 >> 2] = $44; //@line 20416
 HEAP32[$ReallocAsyncCtx11 + 92 >> 2] = $46; //@line 20418
 HEAP32[$ReallocAsyncCtx11 + 96 >> 2] = $48; //@line 20420
 sp = STACKTOP; //@line 20421
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_141($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11720
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11722
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11724
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11726
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11728
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11730
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11732
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11734
 $$pre = HEAP32[$2 >> 2] | 0; //@line 11735
 if ($$pre | 0) {
  $17 = HEAP32[$$pre + 4 >> 2] | 0; //@line 11739
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(32) | 0; //@line 11740
  FUNCTION_TABLE_vii[$17 & 7]($6, $8); //@line 11741
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 11744
   $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 11745
   HEAP32[$18 >> 2] = $2; //@line 11746
   $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 11747
   HEAP32[$19 >> 2] = $4; //@line 11748
   $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 11749
   HEAP32[$20 >> 2] = $8; //@line 11750
   $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 11751
   HEAP32[$21 >> 2] = $10; //@line 11752
   $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 11753
   HEAP32[$22 >> 2] = $12; //@line 11754
   $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 11755
   HEAP32[$23 >> 2] = $6; //@line 11756
   $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 11757
   HEAP32[$24 >> 2] = $14; //@line 11758
   sp = STACKTOP; //@line 11759
   return;
  }
  ___async_unwind = 0; //@line 11762
  HEAP32[$ReallocAsyncCtx4 >> 2] = 124; //@line 11763
  $18 = $ReallocAsyncCtx4 + 4 | 0; //@line 11764
  HEAP32[$18 >> 2] = $2; //@line 11765
  $19 = $ReallocAsyncCtx4 + 8 | 0; //@line 11766
  HEAP32[$19 >> 2] = $4; //@line 11767
  $20 = $ReallocAsyncCtx4 + 12 | 0; //@line 11768
  HEAP32[$20 >> 2] = $8; //@line 11769
  $21 = $ReallocAsyncCtx4 + 16 | 0; //@line 11770
  HEAP32[$21 >> 2] = $10; //@line 11771
  $22 = $ReallocAsyncCtx4 + 20 | 0; //@line 11772
  HEAP32[$22 >> 2] = $12; //@line 11773
  $23 = $ReallocAsyncCtx4 + 24 | 0; //@line 11774
  HEAP32[$23 >> 2] = $6; //@line 11775
  $24 = $ReallocAsyncCtx4 + 28 | 0; //@line 11776
  HEAP32[$24 >> 2] = $14; //@line 11777
  sp = STACKTOP; //@line 11778
  return;
 }
 HEAP32[$4 >> 2] = 0; //@line 11781
 $25 = HEAP32[$10 >> 2] | 0; //@line 11782
 $28 = HEAP32[(HEAP32[$25 >> 2] | 0) + 84 >> 2] | 0; //@line 11785
 $29 = HEAP32[$12 >> 2] | 0; //@line 11786
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11787
 FUNCTION_TABLE_viiii[$28 & 7]($25, $29, 126, $6); //@line 11788
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 11791
  $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 11792
  HEAP32[$30 >> 2] = $14; //@line 11793
  sp = STACKTOP; //@line 11794
  return;
 }
 ___async_unwind = 0; //@line 11797
 HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 11798
 $30 = $ReallocAsyncCtx6 + 4 | 0; //@line 11799
 HEAP32[$30 >> 2] = $14; //@line 11800
 sp = STACKTOP; //@line 11801
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$1 = 0, $13 = 0, $14 = 0, $21 = 0, $28 = 0, $29 = 0, $5 = 0, $AsyncCtx = 0, $AsyncCtx10 = 0, $AsyncCtx2 = 0, $AsyncCtx6 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 416
 $5 = $1 + 8 | 0; //@line 417
 do {
  if (!(HEAP8[$5 >> 0] | 0)) {
   label = 7; //@line 422
  } else {
   if (!(__ZneRK13SocketAddressS1_($1 + 12 | 0, $2) | 0)) {
    if (!(HEAP8[$5 >> 0] | 0)) {
     label = 7; //@line 430
     break;
    } else {
     break;
    }
   }
   $AsyncCtx6 = _emscripten_alloc_async_context(4, sp) | 0; //@line 436
   _puts(2646) | 0; //@line 437
   if (___async) {
    HEAP32[$AsyncCtx6 >> 2] = 40; //@line 440
    sp = STACKTOP; //@line 441
    return 0; //@line 442
   }
   _emscripten_free_async_context($AsyncCtx6 | 0); //@line 444
   $$1 = -3012; //@line 445
   return $$1 | 0; //@line 446
  }
 } while (0);
 do {
  if ((label | 0) == 7) {
   $13 = HEAP32[(HEAP32[$0 >> 2] | 0) + 108 >> 2] | 0; //@line 453
   $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 454
   $14 = FUNCTION_TABLE_iiii[$13 & 31]($0, $1, $2) | 0; //@line 455
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 41; //@line 458
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 460
    HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 462
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 464
    HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 466
    HEAP32[$AsyncCtx + 20 >> 2] = $4; //@line 468
    sp = STACKTOP; //@line 469
    return 0; //@line 470
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 472
   if (($14 | 0) < 0) {
    $$1 = $14; //@line 475
    return $$1 | 0; //@line 476
   } else {
    $21 = $1 + 12 | 0; //@line 478
    dest = $21; //@line 479
    src = $2; //@line 479
    stop = dest + 60 | 0; //@line 479
    do {
     HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 479
     dest = dest + 4 | 0; //@line 479
     src = src + 4 | 0; //@line 479
    } while ((dest | 0) < (stop | 0));
    HEAP16[$21 + 60 >> 1] = HEAP16[$2 + 60 >> 1] | 0; //@line 479
    break;
   }
  }
 } while (0);
 $AsyncCtx10 = _emscripten_alloc_async_context(20, sp) | 0; //@line 484
 _wait_ms(1); //@line 485
 if (___async) {
  HEAP32[$AsyncCtx10 >> 2] = 42; //@line 488
  HEAP32[$AsyncCtx10 + 4 >> 2] = $0; //@line 490
  HEAP32[$AsyncCtx10 + 8 >> 2] = $1; //@line 492
  HEAP32[$AsyncCtx10 + 12 >> 2] = $3; //@line 494
  HEAP32[$AsyncCtx10 + 16 >> 2] = $4; //@line 496
  sp = STACKTOP; //@line 497
  return 0; //@line 498
 }
 _emscripten_free_async_context($AsyncCtx10 | 0); //@line 500
 $28 = HEAP32[(HEAP32[$0 >> 2] | 0) + 116 >> 2] | 0; //@line 503
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 504
 $29 = FUNCTION_TABLE_iiiii[$28 & 15]($0, $1, $3, $4) | 0; //@line 505
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 43; //@line 508
  sp = STACKTOP; //@line 509
  return 0; //@line 510
 }
 _emscripten_free_async_context($AsyncCtx2 | 0); //@line 512
 $$1 = $29; //@line 513
 return $$1 | 0; //@line 514
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $$010 = 0, $$1 = 0, $$byval_copy = 0, $14 = 0, $15 = 0, $24 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 2969
 STACKTOP = STACKTOP + 112 | 0; //@line 2970
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(112); //@line 2970
 $$byval_copy = sp + 88 | 0; //@line 2971
 $4 = sp + 24 | 0; //@line 2972
 $5 = sp; //@line 2973
 if (!(HEAP8[$1 >> 0] | 0)) {
  $$010 = -3003; //@line 2977
  STACKTOP = sp; //@line 2978
  return $$010 | 0; //@line 2978
 }
 $9 = ($3 | 0) == 0; //@line 2981
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, $1) | 0) {
  if (!$9) {
   if ((__ZNK13SocketAddress14get_ip_versionEv($2) | 0) != ($3 | 0)) {
    $$010 = -3009; //@line 2987
    STACKTOP = sp; //@line 2988
    return $$010 | 0; //@line 2988
   }
  }
  $$010 = 0; //@line 2991
  STACKTOP = sp; //@line 2992
  return $$010 | 0; //@line 2992
 }
 if ($9) {
  HEAP32[$5 >> 2] = 0; //@line 2995
  HEAP32[$5 + 4 >> 2] = 0; //@line 2995
  HEAP32[$5 + 8 >> 2] = 0; //@line 2995
  HEAP32[$5 + 12 >> 2] = 0; //@line 2995
  HEAP32[$5 + 16 >> 2] = 0; //@line 2995
  HEAP32[$$byval_copy >> 2] = HEAP32[$5 >> 2]; //@line 2996
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$5 + 4 >> 2]; //@line 2996
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$5 + 8 >> 2]; //@line 2996
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$5 + 12 >> 2]; //@line 2996
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$5 + 16 >> 2]; //@line 2996
  __ZN13SocketAddressC2E10nsapi_addrt($4, $$byval_copy, 0); //@line 2997
  $14 = HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] | 0; //@line 3000
  $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 3001
  $15 = FUNCTION_TABLE_ii[$14 & 31]($0) | 0; //@line 3002
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 89; //@line 3005
   HEAP32[$AsyncCtx + 4 >> 2] = $4; //@line 3007
   HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 3009
   HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 3011
   HEAP32[$AsyncCtx + 16 >> 2] = $0; //@line 3013
   HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 3015
   HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 3017
   sp = STACKTOP; //@line 3018
   STACKTOP = sp; //@line 3019
   return 0; //@line 3019
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3021
  if (__ZN13SocketAddress14set_ip_addressEPKc($4, $15) | 0) {
   $$0 = __ZNK13SocketAddress14get_ip_versionEv($4) | 0; //@line 3025
  } else {
   $$0 = 0; //@line 3027
  }
  $$1 = $$0; //@line 3029
 } else {
  $$1 = $3; //@line 3031
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 3033
 $24 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $$1) | 0; //@line 3034
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 90; //@line 3037
  sp = STACKTOP; //@line 3038
  STACKTOP = sp; //@line 3039
  return 0; //@line 3039
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 3041
 $$010 = $24; //@line 3042
 STACKTOP = sp; //@line 3043
 return $$010 | 0; //@line 3043
}
function ___stdio_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $12 = 0, $13 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $5 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4388
 STACKTOP = STACKTOP + 48 | 0; //@line 4389
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 4389
 $vararg_buffer3 = sp + 16 | 0; //@line 4390
 $vararg_buffer = sp; //@line 4391
 $3 = sp + 32 | 0; //@line 4392
 $4 = $0 + 28 | 0; //@line 4393
 $5 = HEAP32[$4 >> 2] | 0; //@line 4394
 HEAP32[$3 >> 2] = $5; //@line 4395
 $7 = $0 + 20 | 0; //@line 4397
 $9 = (HEAP32[$7 >> 2] | 0) - $5 | 0; //@line 4399
 HEAP32[$3 + 4 >> 2] = $9; //@line 4400
 HEAP32[$3 + 8 >> 2] = $1; //@line 4402
 HEAP32[$3 + 12 >> 2] = $2; //@line 4404
 $12 = $9 + $2 | 0; //@line 4405
 $13 = $0 + 60 | 0; //@line 4406
 HEAP32[$vararg_buffer >> 2] = HEAP32[$13 >> 2]; //@line 4409
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 4411
 HEAP32[$vararg_buffer + 8 >> 2] = 2; //@line 4413
 $17 = ___syscall_ret(___syscall146(146, $vararg_buffer | 0) | 0) | 0; //@line 4415
 L1 : do {
  if (($12 | 0) == ($17 | 0)) {
   label = 3; //@line 4419
  } else {
   $$04756 = 2; //@line 4421
   $$04855 = $12; //@line 4421
   $$04954 = $3; //@line 4421
   $27 = $17; //@line 4421
   while (1) {
    if (($27 | 0) < 0) {
     break;
    }
    $$04855 = $$04855 - $27 | 0; //@line 4427
    $37 = HEAP32[$$04954 + 4 >> 2] | 0; //@line 4429
    $38 = $27 >>> 0 > $37 >>> 0; //@line 4430
    $$150 = $38 ? $$04954 + 8 | 0 : $$04954; //@line 4432
    $$1 = $$04756 + ($38 << 31 >> 31) | 0; //@line 4434
    $$0 = $27 - ($38 ? $37 : 0) | 0; //@line 4436
    HEAP32[$$150 >> 2] = (HEAP32[$$150 >> 2] | 0) + $$0; //@line 4439
    $44 = $$150 + 4 | 0; //@line 4440
    HEAP32[$44 >> 2] = (HEAP32[$44 >> 2] | 0) - $$0; //@line 4443
    HEAP32[$vararg_buffer3 >> 2] = HEAP32[$13 >> 2]; //@line 4446
    HEAP32[$vararg_buffer3 + 4 >> 2] = $$150; //@line 4448
    HEAP32[$vararg_buffer3 + 8 >> 2] = $$1; //@line 4450
    $27 = ___syscall_ret(___syscall146(146, $vararg_buffer3 | 0) | 0) | 0; //@line 4452
    if (($$04855 | 0) == ($27 | 0)) {
     label = 3; //@line 4455
     break L1;
    } else {
     $$04756 = $$1; //@line 4458
     $$04954 = $$150; //@line 4458
    }
   }
   HEAP32[$0 + 16 >> 2] = 0; //@line 4462
   HEAP32[$4 >> 2] = 0; //@line 4463
   HEAP32[$7 >> 2] = 0; //@line 4464
   HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 32; //@line 4467
   if (($$04756 | 0) == 2) {
    $$051 = 0; //@line 4470
   } else {
    $$051 = $2 - (HEAP32[$$04954 + 4 >> 2] | 0) | 0; //@line 4475
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $20 = HEAP32[$0 + 44 >> 2] | 0; //@line 4481
  HEAP32[$0 + 16 >> 2] = $20 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4486
  $25 = $20; //@line 4487
  HEAP32[$4 >> 2] = $25; //@line 4488
  HEAP32[$7 >> 2] = $25; //@line 4489
  $$051 = $2; //@line 4490
 }
 STACKTOP = sp; //@line 4492
 return $$051 | 0; //@line 4492
}
function __ZN9TCPSocket4sendEPKvj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$024 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $22 = 0, $3 = 0, $32 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5374
 $3 = $0 + 57 | 0; //@line 5375
 do {
  if (HEAP8[$3 >> 0] | 0) {
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5380
   _mbed_assert_internal(3685, 3705, 125); //@line 5381
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 144; //@line 5384
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 5386
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5388
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5390
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 5392
    sp = STACKTOP; //@line 5393
    return 0; //@line 5394
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5396
    break;
   }
  }
 } while (0);
 HEAP8[$3 >> 0] = 1; //@line 5401
 $10 = $0 + 8 | 0; //@line 5402
 $11 = $0 + 52 | 0; //@line 5403
 $12 = $0 + 4 | 0; //@line 5404
 $13 = $0 + 12 | 0; //@line 5405
 $$0 = 0; //@line 5406
 while (1) {
  $14 = HEAP32[$10 >> 2] | 0; //@line 5408
  if (!$14) {
   $$024 = -3005; //@line 5411
   $$2 = $$0; //@line 5411
   label = 13; //@line 5412
   break;
  }
  HEAP32[$11 >> 2] = 0; //@line 5415
  $16 = HEAP32[$12 >> 2] | 0; //@line 5416
  $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 68 >> 2] | 0; //@line 5419
  $AsyncCtx = _emscripten_alloc_async_context(36, sp) | 0; //@line 5422
  $22 = FUNCTION_TABLE_iiiii[$19 & 15]($16, $14, $1 + $$0 | 0, $2 - $$0 | 0) | 0; //@line 5423
  if (___async) {
   label = 8; //@line 5426
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5429
  if (($22 | 0) > -1) {
   $32 = $22 + $$0 | 0; //@line 5432
   if ($32 >>> 0 < $2 >>> 0) {
    $$1 = $32; //@line 5435
   } else {
    $$024 = $22; //@line 5437
    $$2 = $32; //@line 5437
    label = 13; //@line 5438
    break;
   }
  } else {
   $$1 = $$0; //@line 5442
  }
  if (!(HEAP32[$13 >> 2] | 0)) {
   $$024 = $22; //@line 5447
   $$2 = $$1; //@line 5447
   label = 13; //@line 5448
   break;
  }
  if (($22 | 0) != -3001 & ($22 | 0) < 0) {
   $$024 = $22; //@line 5455
   $$2 = $$1; //@line 5455
   label = 13; //@line 5456
   break;
  } else {
   $$0 = $$1; //@line 5459
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx >> 2] = 145; //@line 5463
  HEAP32[$AsyncCtx + 4 >> 2] = $$0; //@line 5465
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 5467
  HEAP32[$AsyncCtx + 12 >> 2] = $13; //@line 5469
  HEAP32[$AsyncCtx + 16 >> 2] = $3; //@line 5471
  HEAP32[$AsyncCtx + 20 >> 2] = $10; //@line 5473
  HEAP32[$AsyncCtx + 24 >> 2] = $11; //@line 5475
  HEAP32[$AsyncCtx + 28 >> 2] = $12; //@line 5477
  HEAP32[$AsyncCtx + 32 >> 2] = $1; //@line 5479
  sp = STACKTOP; //@line 5480
  return 0; //@line 5481
 } else if ((label | 0) == 13) {
  HEAP8[$3 >> 0] = 0; //@line 5484
  return (($$024 | 0) < 1 & ($$024 | 0) != -3001 ? $$024 : ($$2 | 0) == 0 ? -3001 : $$2) | 0; //@line 5491
 }
 return 0; //@line 5493
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_191($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 15384
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15386
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15388
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15390
 $7 = $2 + 28 | 0; //@line 15391
 $8 = HEAP32[$7 >> 2] | 0; //@line 15392
 if (!$8) {
  $18 = $4 + 12 | 0; //@line 15395
  HEAP32[$18 >> 2] = 0; //@line 15396
  $19 = HEAP32[$2 >> 2] | 0; //@line 15397
  $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 15398
  __ZL28nsapi_dns_query_async_deletei($19); //@line 15399
  if (___async) {
   HEAP32[$ReallocAsyncCtx14 >> 2] = 221; //@line 15402
   $20 = $ReallocAsyncCtx14 + 4 | 0; //@line 15403
   HEAP32[$20 >> 2] = $18; //@line 15404
   $21 = $ReallocAsyncCtx14 + 8 | 0; //@line 15405
   HEAP32[$21 >> 2] = $4; //@line 15406
   $22 = $ReallocAsyncCtx14 + 12 | 0; //@line 15407
   HEAP32[$22 >> 2] = $6; //@line 15408
   sp = STACKTOP; //@line 15409
   return;
  }
  ___async_unwind = 0; //@line 15412
  HEAP32[$ReallocAsyncCtx14 >> 2] = 221; //@line 15413
  $20 = $ReallocAsyncCtx14 + 4 | 0; //@line 15414
  HEAP32[$20 >> 2] = $18; //@line 15415
  $21 = $ReallocAsyncCtx14 + 8 | 0; //@line 15416
  HEAP32[$21 >> 2] = $4; //@line 15417
  $22 = $ReallocAsyncCtx14 + 12 | 0; //@line 15418
  HEAP32[$22 >> 2] = $6; //@line 15419
  sp = STACKTOP; //@line 15420
  return;
 } else {
  $12 = HEAP32[$8 + 4 >> 2] | 0; //@line 15425
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 15426
  FUNCTION_TABLE_vii[$12 & 7]($4, $2 + 16 | 0); //@line 15427
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 220; //@line 15430
   $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 15431
   HEAP32[$13 >> 2] = $7; //@line 15432
   $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 15433
   HEAP32[$14 >> 2] = $4; //@line 15434
   $15 = $ReallocAsyncCtx5 + 12 | 0; //@line 15435
   HEAP32[$15 >> 2] = $2; //@line 15436
   $16 = $ReallocAsyncCtx5 + 16 | 0; //@line 15437
   HEAP32[$16 >> 2] = $4; //@line 15438
   $17 = $ReallocAsyncCtx5 + 20 | 0; //@line 15439
   HEAP32[$17 >> 2] = $6; //@line 15440
   sp = STACKTOP; //@line 15441
   return;
  }
  ___async_unwind = 0; //@line 15444
  HEAP32[$ReallocAsyncCtx5 >> 2] = 220; //@line 15445
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 15446
  HEAP32[$13 >> 2] = $7; //@line 15447
  $14 = $ReallocAsyncCtx5 + 8 | 0; //@line 15448
  HEAP32[$14 >> 2] = $4; //@line 15449
  $15 = $ReallocAsyncCtx5 + 12 | 0; //@line 15450
  HEAP32[$15 >> 2] = $2; //@line 15451
  $16 = $ReallocAsyncCtx5 + 16 | 0; //@line 15452
  HEAP32[$16 >> 2] = $4; //@line 15453
  $17 = $ReallocAsyncCtx5 + 20 | 0; //@line 15454
  HEAP32[$17 >> 2] = $6; //@line 15455
  sp = STACKTOP; //@line 15456
  return;
 }
}
function __ZN9TCPSocket7connectEPKct__async_cb_92($0) {
 $0 = $0 | 0;
 var $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5709
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5711
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5713
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5715
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5717
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5719
 HEAP8[$2 >> 0] = 1; //@line 5720
 $11 = $4 + 8 | 0; //@line 5721
 $12 = $4 + 52 | 0; //@line 5722
 $13 = $4 + 12 | 0; //@line 5723
 $14 = HEAP32[$11 >> 2] | 0; //@line 5724
 if (!$14) {
  HEAP8[$2 >> 0] = 0; //@line 5727
  HEAP32[___async_retval >> 2] = 0 & -3005 == -3015 ? 0 : -3005; //@line 5732
  return;
 }
 HEAP32[$12 >> 2] = 0; //@line 5735
 $16 = HEAP32[$6 >> 2] | 0; //@line 5736
 $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 60 >> 2] | 0; //@line 5739
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 5740
 $20 = FUNCTION_TABLE_iiii[$19 & 31]($16, $14, $8) | 0; //@line 5741
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 5744
  $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 5745
  HEAP32[$21 >> 2] = $13; //@line 5746
  $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 5747
  HEAP32[$22 >> 2] = $11; //@line 5748
  $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 5749
  HEAP32[$23 >> 2] = $2; //@line 5750
  $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 5751
  $$expand_i1_val = 0; //@line 5752
  HEAP8[$24 >> 0] = $$expand_i1_val; //@line 5753
  $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 5754
  HEAP32[$25 >> 2] = $10; //@line 5755
  $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 5756
  HEAP32[$26 >> 2] = $12; //@line 5757
  $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 5758
  HEAP32[$27 >> 2] = $6; //@line 5759
  $28 = $ReallocAsyncCtx2 + 32 | 0; //@line 5760
  HEAP32[$28 >> 2] = $8; //@line 5761
  sp = STACKTOP; //@line 5762
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 5766
 ___async_unwind = 0; //@line 5767
 HEAP32[$ReallocAsyncCtx2 >> 2] = 143; //@line 5768
 $21 = $ReallocAsyncCtx2 + 4 | 0; //@line 5769
 HEAP32[$21 >> 2] = $13; //@line 5770
 $22 = $ReallocAsyncCtx2 + 8 | 0; //@line 5771
 HEAP32[$22 >> 2] = $11; //@line 5772
 $23 = $ReallocAsyncCtx2 + 12 | 0; //@line 5773
 HEAP32[$23 >> 2] = $2; //@line 5774
 $24 = $ReallocAsyncCtx2 + 16 | 0; //@line 5775
 $$expand_i1_val = 0; //@line 5776
 HEAP8[$24 >> 0] = $$expand_i1_val; //@line 5777
 $25 = $ReallocAsyncCtx2 + 20 | 0; //@line 5778
 HEAP32[$25 >> 2] = $10; //@line 5779
 $26 = $ReallocAsyncCtx2 + 24 | 0; //@line 5780
 HEAP32[$26 >> 2] = $12; //@line 5781
 $27 = $ReallocAsyncCtx2 + 28 | 0; //@line 5782
 HEAP32[$27 >> 2] = $6; //@line 5783
 $28 = $ReallocAsyncCtx2 + 32 | 0; //@line 5784
 HEAP32[$28 >> 2] = $8; //@line 5785
 sp = STACKTOP; //@line 5786
 return;
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14745
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14747
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14749
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14751
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14753
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14755
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14757
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14759
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14761
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 14767
  $34 = ___async_retval; //@line 14768
  HEAP32[$34 >> 2] = $$2; //@line 14769
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 14772
 if (!$16) {
  $$2 = -3005; //@line 14775
  $34 = ___async_retval; //@line 14776
  HEAP32[$34 >> 2] = $$2; //@line 14777
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 14780
 $18 = HEAP32[$8 >> 2] | 0; //@line 14781
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 80 >> 2] | 0; //@line 14784
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 14785
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 14786
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 154; //@line 14789
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 14790
  HEAP32[$23 >> 2] = $2; //@line 14791
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 14792
  HEAP32[$24 >> 2] = $4; //@line 14793
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 14794
  HEAP32[$25 >> 2] = $6; //@line 14795
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 14796
  HEAP32[$26 >> 2] = $8; //@line 14797
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 14798
  HEAP32[$27 >> 2] = $10; //@line 14799
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 14800
  HEAP32[$28 >> 2] = $12; //@line 14801
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 14802
  HEAP32[$29 >> 2] = $14; //@line 14803
  sp = STACKTOP; //@line 14804
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 14808
 ___async_unwind = 0; //@line 14809
 HEAP32[$ReallocAsyncCtx >> 2] = 154; //@line 14810
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 14811
 HEAP32[$23 >> 2] = $2; //@line 14812
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 14813
 HEAP32[$24 >> 2] = $4; //@line 14814
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 14815
 HEAP32[$25 >> 2] = $6; //@line 14816
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 14817
 HEAP32[$26 >> 2] = $8; //@line 14818
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 14819
 HEAP32[$27 >> 2] = $10; //@line 14820
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 14821
 HEAP32[$28 >> 2] = $12; //@line 14822
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 14823
 HEAP32[$29 >> 2] = $14; //@line 14824
 sp = STACKTOP; //@line 14825
 return;
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $$2 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14030
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14032
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14034
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14036
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14038
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14040
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14042
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14044
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 14046
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$2 = $AsyncRetVal; //@line 14052
  $34 = ___async_retval; //@line 14053
  HEAP32[$34 >> 2] = $$2; //@line 14054
  return;
 }
 $16 = HEAP32[$4 >> 2] | 0; //@line 14057
 if (!$16) {
  $$2 = -3005; //@line 14060
  $34 = ___async_retval; //@line 14061
  HEAP32[$34 >> 2] = $$2; //@line 14062
  return;
 }
 HEAP32[$6 >> 2] = 0; //@line 14065
 $18 = HEAP32[$8 >> 2] | 0; //@line 14066
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 76 >> 2] | 0; //@line 14069
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 14070
 $22 = FUNCTION_TABLE_iiiiii[$21 & 7]($18, $16, $10, $12, $14) | 0; //@line 14071
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 153; //@line 14074
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 14075
  HEAP32[$23 >> 2] = $2; //@line 14076
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 14077
  HEAP32[$24 >> 2] = $4; //@line 14078
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 14079
  HEAP32[$25 >> 2] = $6; //@line 14080
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 14081
  HEAP32[$26 >> 2] = $8; //@line 14082
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 14083
  HEAP32[$27 >> 2] = $10; //@line 14084
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 14085
  HEAP32[$28 >> 2] = $12; //@line 14086
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 14087
  HEAP32[$29 >> 2] = $14; //@line 14088
  sp = STACKTOP; //@line 14089
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 14093
 ___async_unwind = 0; //@line 14094
 HEAP32[$ReallocAsyncCtx >> 2] = 153; //@line 14095
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 14096
 HEAP32[$23 >> 2] = $2; //@line 14097
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 14098
 HEAP32[$24 >> 2] = $4; //@line 14099
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 14100
 HEAP32[$25 >> 2] = $6; //@line 14101
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 14102
 HEAP32[$26 >> 2] = $8; //@line 14103
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 14104
 HEAP32[$27 >> 2] = $10; //@line 14105
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 14106
 HEAP32[$28 >> 2] = $12; //@line 14107
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 14108
 HEAP32[$29 >> 2] = $14; //@line 14109
 sp = STACKTOP; //@line 14110
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_149($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12372
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12376
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12378
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12380
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12382
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12384
 $13 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12385
 if ($13 | 0) {
  $16 = HEAP32[$13 + 8 >> 2] | 0; //@line 12389
  $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 12390
  FUNCTION_TABLE_vi[$16 & 511]($6); //@line 12391
  if (___async) {
   HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 12394
   $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 12395
   HEAP32[$17 >> 2] = $4; //@line 12396
   $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 12397
   HEAP32[$18 >> 2] = $8; //@line 12398
   $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 12399
   HEAP32[$19 >> 2] = $10; //@line 12400
   $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 12401
   HEAP32[$20 >> 2] = $12; //@line 12402
   sp = STACKTOP; //@line 12403
   return;
  }
  ___async_unwind = 0; //@line 12406
  HEAP32[$ReallocAsyncCtx7 >> 2] = 99; //@line 12407
  $17 = $ReallocAsyncCtx7 + 4 | 0; //@line 12408
  HEAP32[$17 >> 2] = $4; //@line 12409
  $18 = $ReallocAsyncCtx7 + 8 | 0; //@line 12410
  HEAP32[$18 >> 2] = $8; //@line 12411
  $19 = $ReallocAsyncCtx7 + 12 | 0; //@line 12412
  HEAP32[$19 >> 2] = $10; //@line 12413
  $20 = $ReallocAsyncCtx7 + 16 | 0; //@line 12414
  HEAP32[$20 >> 2] = $12; //@line 12415
  sp = STACKTOP; //@line 12416
  return;
 }
 $21 = HEAP32[$4 >> 2] | 0; //@line 12419
 if (!$21) {
  HEAP32[___async_retval >> 2] = $10; //@line 12423
  return;
 }
 $24 = HEAP32[$21 + 8 >> 2] | 0; //@line 12427
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 12428
 FUNCTION_TABLE_vi[$24 & 511]($8); //@line 12429
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 12432
  $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 12433
  HEAP32[$25 >> 2] = $8; //@line 12434
  $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 12435
  HEAP32[$26 >> 2] = $10; //@line 12436
  $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 12437
  HEAP32[$27 >> 2] = $12; //@line 12438
  sp = STACKTOP; //@line 12439
  return;
 }
 ___async_unwind = 0; //@line 12442
 HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 12443
 $25 = $ReallocAsyncCtx8 + 4 | 0; //@line 12444
 HEAP32[$25 >> 2] = $8; //@line 12445
 $26 = $ReallocAsyncCtx8 + 8 | 0; //@line 12446
 HEAP32[$26 >> 2] = $10; //@line 12447
 $27 = $ReallocAsyncCtx8 + 12 | 0; //@line 12448
 HEAP32[$27 >> 2] = $12; //@line 12449
 sp = STACKTOP; //@line 12450
 return;
}
function __ZN9TCPSocket4sendEPKvj__async_cb_39($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 24243
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 24245
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24247
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24249
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24251
 HEAP8[$2 >> 0] = 1; //@line 24252
 $9 = $4 + 8 | 0; //@line 24253
 $10 = $4 + 52 | 0; //@line 24254
 $11 = $4 + 4 | 0; //@line 24255
 $12 = $4 + 12 | 0; //@line 24256
 $13 = HEAP32[$9 >> 2] | 0; //@line 24257
 if (!$13) {
  HEAP8[$2 >> 0] = 0; //@line 24260
  HEAP32[___async_retval >> 2] = -3005 < 1 & -3005 != -3001 ? -3005 : 0 == 0 ? -3001 : 0; //@line 24268
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 24271
 $15 = HEAP32[$11 >> 2] | 0; //@line 24272
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 68 >> 2] | 0; //@line 24275
 $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 24277
 $20 = FUNCTION_TABLE_iiiii[$18 & 15]($15, $13, $6, $8 - 0 | 0) | 0; //@line 24278
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 24281
  $21 = $ReallocAsyncCtx + 4 | 0; //@line 24282
  HEAP32[$21 >> 2] = 0; //@line 24283
  $22 = $ReallocAsyncCtx + 8 | 0; //@line 24284
  HEAP32[$22 >> 2] = $8; //@line 24285
  $23 = $ReallocAsyncCtx + 12 | 0; //@line 24286
  HEAP32[$23 >> 2] = $12; //@line 24287
  $24 = $ReallocAsyncCtx + 16 | 0; //@line 24288
  HEAP32[$24 >> 2] = $2; //@line 24289
  $25 = $ReallocAsyncCtx + 20 | 0; //@line 24290
  HEAP32[$25 >> 2] = $9; //@line 24291
  $26 = $ReallocAsyncCtx + 24 | 0; //@line 24292
  HEAP32[$26 >> 2] = $10; //@line 24293
  $27 = $ReallocAsyncCtx + 28 | 0; //@line 24294
  HEAP32[$27 >> 2] = $11; //@line 24295
  $28 = $ReallocAsyncCtx + 32 | 0; //@line 24296
  HEAP32[$28 >> 2] = $6; //@line 24297
  sp = STACKTOP; //@line 24298
  return;
 }
 HEAP32[___async_retval >> 2] = $20; //@line 24302
 ___async_unwind = 0; //@line 24303
 HEAP32[$ReallocAsyncCtx >> 2] = 145; //@line 24304
 $21 = $ReallocAsyncCtx + 4 | 0; //@line 24305
 HEAP32[$21 >> 2] = 0; //@line 24306
 $22 = $ReallocAsyncCtx + 8 | 0; //@line 24307
 HEAP32[$22 >> 2] = $8; //@line 24308
 $23 = $ReallocAsyncCtx + 12 | 0; //@line 24309
 HEAP32[$23 >> 2] = $12; //@line 24310
 $24 = $ReallocAsyncCtx + 16 | 0; //@line 24311
 HEAP32[$24 >> 2] = $2; //@line 24312
 $25 = $ReallocAsyncCtx + 20 | 0; //@line 24313
 HEAP32[$25 >> 2] = $9; //@line 24314
 $26 = $ReallocAsyncCtx + 24 | 0; //@line 24315
 HEAP32[$26 >> 2] = $10; //@line 24316
 $27 = $ReallocAsyncCtx + 28 | 0; //@line 24317
 HEAP32[$27 >> 2] = $11; //@line 24318
 $28 = $ReallocAsyncCtx + 32 | 0; //@line 24319
 HEAP32[$28 >> 2] = $6; //@line 24320
 sp = STACKTOP; //@line 24321
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_118($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 9626
 STACKTOP = STACKTOP + 32 | 0; //@line 9627
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 9627
 $$byval_copy = sp; //@line 9628
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9630
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9632
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9634
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9636
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9638
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9640
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 9642
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 9644
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 9646
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 9648
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 9650
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 9652
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 9654
 if ((HEAP32[___async_retval >> 2] | 0) < 0) {
  HEAP8[$16 >> 0] = 5; //@line 9659
  $31 = 648 + ((5 + -5 | 0) * 20 | 0) | 0; //@line 9662
  HEAP32[$$byval_copy >> 2] = HEAP32[$31 >> 2]; //@line 9663
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$31 + 4 >> 2]; //@line 9663
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$31 + 8 >> 2]; //@line 9663
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$31 + 12 >> 2]; //@line 9663
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$31 + 16 >> 2]; //@line 9663
  __ZN13SocketAddress8set_addrE10nsapi_addr($10, $$byval_copy); //@line 9664
 }
 __ZN13SocketAddress8set_portEt($10, 53); //@line 9666
 $32 = HEAP32[$12 >> 2] | 0; //@line 9667
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 9668
 $33 = __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($32, $10, $6, $14) | 0; //@line 9669
 if (!___async) {
  HEAP32[___async_retval >> 2] = $33; //@line 9673
  ___async_unwind = 0; //@line 9674
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 254; //@line 9676
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 9678
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 9680
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 9682
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 9684
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 9686
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 9688
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 9690
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 9692
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $18; //@line 9694
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $20; //@line 9696
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $22; //@line 9698
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $24; //@line 9700
 HEAP32[$ReallocAsyncCtx12 + 52 >> 2] = $26; //@line 9702
 sp = STACKTOP; //@line 9703
 STACKTOP = sp; //@line 9704
 return;
}
function __ZN9TCPSocket4recvEPvj__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 41
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 43
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 45
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 47
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 49
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 51
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 53
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 55
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 57
 if (($AsyncRetVal | 0) != -3001 | (HEAP32[$2 >> 2] | 0) == 0) {
  $$0 = $AsyncRetVal; //@line 63
  HEAP8[$4 >> 0] = 0; //@line 64
  $34 = ___async_retval; //@line 65
  HEAP32[$34 >> 2] = $$0; //@line 66
  return;
 }
 $16 = HEAP32[$6 >> 2] | 0; //@line 69
 if (!$16) {
  $$0 = -3005; //@line 72
  HEAP8[$4 >> 0] = 0; //@line 73
  $34 = ___async_retval; //@line 74
  HEAP32[$34 >> 2] = $$0; //@line 75
  return;
 }
 HEAP32[$8 >> 2] = 0; //@line 78
 $18 = HEAP32[$10 >> 2] | 0; //@line 79
 $21 = HEAP32[(HEAP32[$18 >> 2] | 0) + 72 >> 2] | 0; //@line 82
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 83
 $22 = FUNCTION_TABLE_iiiii[$21 & 15]($18, $16, $12, $14) | 0; //@line 84
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 87
  $23 = $ReallocAsyncCtx + 4 | 0; //@line 88
  HEAP32[$23 >> 2] = $2; //@line 89
  $24 = $ReallocAsyncCtx + 8 | 0; //@line 90
  HEAP32[$24 >> 2] = $4; //@line 91
  $25 = $ReallocAsyncCtx + 12 | 0; //@line 92
  HEAP32[$25 >> 2] = $6; //@line 93
  $26 = $ReallocAsyncCtx + 16 | 0; //@line 94
  HEAP32[$26 >> 2] = $8; //@line 95
  $27 = $ReallocAsyncCtx + 20 | 0; //@line 96
  HEAP32[$27 >> 2] = $10; //@line 97
  $28 = $ReallocAsyncCtx + 24 | 0; //@line 98
  HEAP32[$28 >> 2] = $12; //@line 99
  $29 = $ReallocAsyncCtx + 28 | 0; //@line 100
  HEAP32[$29 >> 2] = $14; //@line 101
  sp = STACKTOP; //@line 102
  return;
 }
 HEAP32[___async_retval >> 2] = $22; //@line 106
 ___async_unwind = 0; //@line 107
 HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 108
 $23 = $ReallocAsyncCtx + 4 | 0; //@line 109
 HEAP32[$23 >> 2] = $2; //@line 110
 $24 = $ReallocAsyncCtx + 8 | 0; //@line 111
 HEAP32[$24 >> 2] = $4; //@line 112
 $25 = $ReallocAsyncCtx + 12 | 0; //@line 113
 HEAP32[$25 >> 2] = $6; //@line 114
 $26 = $ReallocAsyncCtx + 16 | 0; //@line 115
 HEAP32[$26 >> 2] = $8; //@line 116
 $27 = $ReallocAsyncCtx + 20 | 0; //@line 117
 HEAP32[$27 >> 2] = $10; //@line 118
 $28 = $ReallocAsyncCtx + 24 | 0; //@line 119
 HEAP32[$28 >> 2] = $12; //@line 120
 $29 = $ReallocAsyncCtx + 28 | 0; //@line 121
 HEAP32[$29 >> 2] = $14; //@line 122
 sp = STACKTOP; //@line 123
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_142($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $12 = 0, $14 = 0, $15 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $29 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11808
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11814
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11816
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11818
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11820
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11822
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 11823
 $15 = $$pre$i$i; //@line 11824
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 11825
 if (!$$pre$i$i) {
  $24 = HEAP32[$8 >> 2] | 0; //@line 11828
  $27 = HEAP32[(HEAP32[$24 >> 2] | 0) + 84 >> 2] | 0; //@line 11831
  $28 = HEAP32[$10 >> 2] | 0; //@line 11832
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11833
  FUNCTION_TABLE_viiii[$27 & 7]($24, $28, 126, $12); //@line 11834
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 11837
   $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 11838
   HEAP32[$29 >> 2] = $14; //@line 11839
   sp = STACKTOP; //@line 11840
   return;
  }
  ___async_unwind = 0; //@line 11843
  HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 11844
  $29 = $ReallocAsyncCtx6 + 4 | 0; //@line 11845
  HEAP32[$29 >> 2] = $14; //@line 11846
  sp = STACKTOP; //@line 11847
  return;
 } else {
  $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 11851
  $ReallocAsyncCtx5 = _emscripten_realloc_async_context(24) | 0; //@line 11852
  FUNCTION_TABLE_vi[$18 & 511]($6); //@line 11853
  if (___async) {
   HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 11856
   $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 11857
   HEAP32[$19 >> 2] = $6; //@line 11858
   $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 11859
   HEAP32[$20 >> 2] = $8; //@line 11860
   $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 11861
   HEAP32[$21 >> 2] = $10; //@line 11862
   $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 11863
   HEAP32[$22 >> 2] = $12; //@line 11864
   $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 11865
   HEAP32[$23 >> 2] = $14; //@line 11866
   sp = STACKTOP; //@line 11867
   return;
  }
  ___async_unwind = 0; //@line 11870
  HEAP32[$ReallocAsyncCtx5 >> 2] = 125; //@line 11871
  $19 = $ReallocAsyncCtx5 + 4 | 0; //@line 11872
  HEAP32[$19 >> 2] = $6; //@line 11873
  $20 = $ReallocAsyncCtx5 + 8 | 0; //@line 11874
  HEAP32[$20 >> 2] = $8; //@line 11875
  $21 = $ReallocAsyncCtx5 + 12 | 0; //@line 11876
  HEAP32[$21 >> 2] = $10; //@line 11877
  $22 = $ReallocAsyncCtx5 + 16 | 0; //@line 11878
  HEAP32[$22 >> 2] = $12; //@line 11879
  $23 = $ReallocAsyncCtx5 + 20 | 0; //@line 11880
  HEAP32[$23 >> 2] = $14; //@line 11881
  sp = STACKTOP; //@line 11882
  return;
 }
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_45($0) {
 $0 = $0 | 0;
 var $$pre = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $20 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24694
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24698
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24700
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24702
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24704
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24706
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24708
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24710
 $$pre = HEAP32[$4 >> 2] | 0; //@line 24712
 $17 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 24713
 if ($$pre | 0) {
  $20 = HEAP32[$$pre + 4 >> 2] | 0; //@line 24717
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(36) | 0; //@line 24718
  FUNCTION_TABLE_vii[$20 & 7]($14, $12); //@line 24719
  if (!___async) {
   ___async_unwind = 0; //@line 24722
  }
  HEAP32[$ReallocAsyncCtx2 >> 2] = 272; //@line 24724
  HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $16; //@line 24726
  HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $8; //@line 24728
  HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 24730
  HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $10; //@line 24732
  HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $17; //@line 24734
  HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $14; //@line 24736
  HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $4; //@line 24738
  HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $12; //@line 24740
  sp = STACKTOP; //@line 24741
  return;
 }
 $29 = $8 + 12 | 0; //@line 24744
 HEAP32[$29 >> 2] = 0; //@line 24745
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 24746
 $30 = FUNCTION_TABLE_iiii[$17 & 31]($6, $10, $8) | 0; //@line 24747
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 24750
  $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 24751
  HEAP32[$31 >> 2] = $29; //@line 24752
  $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 24753
  HEAP32[$32 >> 2] = $14; //@line 24754
  $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 24755
  HEAP32[$33 >> 2] = $4; //@line 24756
  $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 24757
  HEAP32[$34 >> 2] = $12; //@line 24758
  sp = STACKTOP; //@line 24759
  return;
 }
 HEAP32[___async_retval >> 2] = $30; //@line 24763
 ___async_unwind = 0; //@line 24764
 HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 24765
 $31 = $ReallocAsyncCtx3 + 4 | 0; //@line 24766
 HEAP32[$31 >> 2] = $29; //@line 24767
 $32 = $ReallocAsyncCtx3 + 8 | 0; //@line 24768
 HEAP32[$32 >> 2] = $14; //@line 24769
 $33 = $ReallocAsyncCtx3 + 12 | 0; //@line 24770
 HEAP32[$33 >> 2] = $4; //@line 24771
 $34 = $ReallocAsyncCtx3 + 16 | 0; //@line 24772
 HEAP32[$34 >> 2] = $12; //@line 24773
 sp = STACKTOP; //@line 24774
 return;
}
function _mbed_error_vfprintf($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01213 = 0, $$014 = 0, $2 = 0, $24 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, label = 0, sp = 0, $$01213$looptemp = 0;
 sp = STACKTOP; //@line 13051
 STACKTOP = STACKTOP + 128 | 0; //@line 13052
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 13052
 $2 = sp; //@line 13053
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13054
 $3 = _vsnprintf($2, 128, $0, $1) | 0; //@line 13055
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 298; //@line 13058
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 13060
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 13062
  sp = STACKTOP; //@line 13063
  STACKTOP = sp; //@line 13064
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 13066
 if (($3 | 0) <= 0) {
  STACKTOP = sp; //@line 13069
  return;
 }
 if (!(HEAP32[1954] | 0)) {
  _serial_init(7820, 2, 3); //@line 13074
  $$01213 = 0; //@line 13075
  $$014 = 0; //@line 13075
 } else {
  $$01213 = 0; //@line 13077
  $$014 = 0; //@line 13077
 }
 while (1) {
  $$01213$looptemp = $$01213;
  $$01213 = HEAP8[$2 + $$014 >> 0] | 0; //@line 13081
  if (!($$01213$looptemp << 24 >> 24 == 13 | $$01213 << 24 >> 24 != 10)) {
   $AsyncCtx7 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13086
   _serial_putc(7820, 13); //@line 13087
   if (___async) {
    label = 8; //@line 13090
    break;
   }
   _emscripten_free_async_context($AsyncCtx7 | 0); //@line 13093
  }
  $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 13096
  _serial_putc(7820, $$01213 << 24 >> 24); //@line 13097
  if (___async) {
   label = 11; //@line 13100
   break;
  }
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13103
  $24 = $$014 + 1 | 0; //@line 13104
  if (($24 | 0) == ($3 | 0)) {
   label = 13; //@line 13107
   break;
  } else {
   $$014 = $24; //@line 13110
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx7 >> 2] = 299; //@line 13114
  HEAP8[$AsyncCtx7 + 4 >> 0] = $$01213; //@line 13116
  HEAP32[$AsyncCtx7 + 8 >> 2] = $$014; //@line 13118
  HEAP32[$AsyncCtx7 + 12 >> 2] = $3; //@line 13120
  HEAP32[$AsyncCtx7 + 16 >> 2] = $2; //@line 13122
  HEAP32[$AsyncCtx7 + 20 >> 2] = $2; //@line 13124
  sp = STACKTOP; //@line 13125
  STACKTOP = sp; //@line 13126
  return;
 } else if ((label | 0) == 11) {
  HEAP32[$AsyncCtx3 >> 2] = 300; //@line 13129
  HEAP32[$AsyncCtx3 + 4 >> 2] = $$014; //@line 13131
  HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 13133
  HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 13135
  HEAP8[$AsyncCtx3 + 16 >> 0] = $$01213; //@line 13137
  HEAP32[$AsyncCtx3 + 20 >> 2] = $2; //@line 13139
  sp = STACKTOP; //@line 13140
  STACKTOP = sp; //@line 13141
  return;
 } else if ((label | 0) == 13) {
  STACKTOP = sp; //@line 13144
  return;
 }
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_168($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13916
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13920
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13922
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 13924
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13926
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 13928
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13930
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13932
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13934
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13936
 $22 = HEAP8[$0 + 44 >> 0] & 1; //@line 13939
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13941
 do {
  if ((HEAP32[$0 + 4 >> 2] | 0) > 1) {
   $26 = $4 + 24 | 0; //@line 13945
   $27 = $6 + 24 | 0; //@line 13946
   $28 = $4 + 8 | 0; //@line 13947
   $29 = $6 + 54 | 0; //@line 13948
   if (!(HEAP8[$29 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$28 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$27 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$28 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 13978
    HEAP8[$14 >> 0] = 0; //@line 13979
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 13980
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($26, $6, $16, $18, $20, $22); //@line 13981
    if (!___async) {
     ___async_unwind = 0; //@line 13984
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 355; //@line 13986
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $26; //@line 13988
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $24; //@line 13990
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $29; //@line 13992
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 13994
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 13996
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 13998
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 14000
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $27; //@line 14002
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $28; //@line 14004
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $6; //@line 14006
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $16; //@line 14008
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $18; //@line 14010
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $20; //@line 14012
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $22 & 1; //@line 14015
    sp = STACKTOP; //@line 14016
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 14021
 HEAP8[$14 >> 0] = $12; //@line 14022
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $43 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13800
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13804
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13806
 $8 = HEAP8[$0 + 16 >> 0] | 0; //@line 13808
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13810
 $12 = HEAP8[$0 + 24 >> 0] | 0; //@line 13812
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 13814
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 13816
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 13818
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 13820
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 13822
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 13824
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 13826
 $28 = HEAP8[$0 + 56 >> 0] & 1; //@line 13829
 $43 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 13830
 do {
  if ($43 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if (!(HEAP8[$10 >> 0] | 0)) {
     if (HEAP8[$14 >> 0] | 0) {
      if (!(HEAP32[$18 >> 2] & 1)) {
       break;
      }
     }
    } else {
     if ((HEAP32[$16 >> 2] | 0) == 1) {
      break;
     }
     if (!(HEAP32[$18 >> 2] & 2)) {
      break;
     }
    }
    HEAP8[$10 >> 0] = 0; //@line 13863
    HEAP8[$14 >> 0] = 0; //@line 13864
    $ReallocAsyncCtx = _emscripten_realloc_async_context(60) | 0; //@line 13865
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($43, $20, $22, $24, $26, $28); //@line 13866
    if (!___async) {
     ___async_unwind = 0; //@line 13869
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 355; //@line 13871
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $43; //@line 13873
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 13875
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 13877
    HEAP8[$ReallocAsyncCtx + 16 >> 0] = $8; //@line 13879
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 13881
    HEAP8[$ReallocAsyncCtx + 24 >> 0] = $12; //@line 13883
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 13885
    HEAP32[$ReallocAsyncCtx + 32 >> 2] = $16; //@line 13887
    HEAP32[$ReallocAsyncCtx + 36 >> 2] = $18; //@line 13889
    HEAP32[$ReallocAsyncCtx + 40 >> 2] = $20; //@line 13891
    HEAP32[$ReallocAsyncCtx + 44 >> 2] = $22; //@line 13893
    HEAP32[$ReallocAsyncCtx + 48 >> 2] = $24; //@line 13895
    HEAP32[$ReallocAsyncCtx + 52 >> 2] = $26; //@line 13897
    HEAP8[$ReallocAsyncCtx + 56 >> 0] = $28 & 1; //@line 13900
    sp = STACKTOP; //@line 13901
    return;
   }
  }
 } while (0);
 HEAP8[$10 >> 0] = $8; //@line 13906
 HEAP8[$14 >> 0] = $12; //@line 13907
 return;
}
function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0, aligned_dest_end = 0, block_aligned_dest_end = 0, dest_end = 0;
 if ((num | 0) >= 8192) {
  return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0; //@line 17693
 }
 ret = dest | 0; //@line 17696
 dest_end = dest + num | 0; //@line 17697
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0; //@line 17701
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 17702
   dest = dest + 1 | 0; //@line 17703
   src = src + 1 | 0; //@line 17704
   num = num - 1 | 0; //@line 17705
  }
  aligned_dest_end = dest_end & -4 | 0; //@line 17707
  block_aligned_dest_end = aligned_dest_end - 64 | 0; //@line 17708
  while ((dest | 0) <= (block_aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 17710
   HEAP32[dest + 4 >> 2] = HEAP32[src + 4 >> 2]; //@line 17711
   HEAP32[dest + 8 >> 2] = HEAP32[src + 8 >> 2]; //@line 17712
   HEAP32[dest + 12 >> 2] = HEAP32[src + 12 >> 2]; //@line 17713
   HEAP32[dest + 16 >> 2] = HEAP32[src + 16 >> 2]; //@line 17714
   HEAP32[dest + 20 >> 2] = HEAP32[src + 20 >> 2]; //@line 17715
   HEAP32[dest + 24 >> 2] = HEAP32[src + 24 >> 2]; //@line 17716
   HEAP32[dest + 28 >> 2] = HEAP32[src + 28 >> 2]; //@line 17717
   HEAP32[dest + 32 >> 2] = HEAP32[src + 32 >> 2]; //@line 17718
   HEAP32[dest + 36 >> 2] = HEAP32[src + 36 >> 2]; //@line 17719
   HEAP32[dest + 40 >> 2] = HEAP32[src + 40 >> 2]; //@line 17720
   HEAP32[dest + 44 >> 2] = HEAP32[src + 44 >> 2]; //@line 17721
   HEAP32[dest + 48 >> 2] = HEAP32[src + 48 >> 2]; //@line 17722
   HEAP32[dest + 52 >> 2] = HEAP32[src + 52 >> 2]; //@line 17723
   HEAP32[dest + 56 >> 2] = HEAP32[src + 56 >> 2]; //@line 17724
   HEAP32[dest + 60 >> 2] = HEAP32[src + 60 >> 2]; //@line 17725
   dest = dest + 64 | 0; //@line 17726
   src = src + 64 | 0; //@line 17727
  }
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 17730
   dest = dest + 4 | 0; //@line 17731
   src = src + 4 | 0; //@line 17732
  }
 } else {
  aligned_dest_end = dest_end - 4 | 0; //@line 17736
  while ((dest | 0) < (aligned_dest_end | 0)) {
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 17738
   HEAP8[dest + 1 >> 0] = HEAP8[src + 1 >> 0] | 0; //@line 17739
   HEAP8[dest + 2 >> 0] = HEAP8[src + 2 >> 0] | 0; //@line 17740
   HEAP8[dest + 3 >> 0] = HEAP8[src + 3 >> 0] | 0; //@line 17741
   dest = dest + 4 | 0; //@line 17742
   src = src + 4 | 0; //@line 17743
  }
 }
 while ((dest | 0) < (dest_end | 0)) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 17748
  dest = dest + 1 | 0; //@line 17749
  src = src + 1 | 0; //@line 17750
 }
 return ret | 0; //@line 17752
}
function ___stpcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $11 = 0, $12 = 0, $16 = 0, $2 = 0, $22 = 0, $23 = 0, $24 = 0, $31 = 0, $34 = 0, $35 = 0, $9 = 0, label = 0;
 $2 = $1; //@line 13468
 L1 : do {
  if (!(($2 ^ $0) & 3)) {
   if (!($2 & 3)) {
    $$026$lcssa = $1; //@line 13478
    $$027$lcssa = $0; //@line 13478
   } else {
    $$02642 = $1; //@line 13480
    $$02741 = $0; //@line 13480
    while (1) {
     $9 = HEAP8[$$02642 >> 0] | 0; //@line 13482
     HEAP8[$$02741 >> 0] = $9; //@line 13483
     if (!($9 << 24 >> 24)) {
      $$029 = $$02741; //@line 13486
      break L1;
     }
     $11 = $$02642 + 1 | 0; //@line 13489
     $12 = $$02741 + 1 | 0; //@line 13490
     if (!($11 & 3)) {
      $$026$lcssa = $11; //@line 13495
      $$027$lcssa = $12; //@line 13495
      break;
     } else {
      $$02642 = $11; //@line 13498
      $$02741 = $12; //@line 13498
     }
    }
   }
   $16 = HEAP32[$$026$lcssa >> 2] | 0; //@line 13502
   if (!(($16 & -2139062144 ^ -2139062144) & $16 + -16843009)) {
    $$02536 = $$027$lcssa; //@line 13509
    $$037 = $$026$lcssa; //@line 13509
    $24 = $16; //@line 13509
    while (1) {
     $22 = $$037 + 4 | 0; //@line 13511
     $23 = $$02536 + 4 | 0; //@line 13512
     HEAP32[$$02536 >> 2] = $24; //@line 13513
     $24 = HEAP32[$22 >> 2] | 0; //@line 13514
     if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
      $$0$lcssa = $22; //@line 13523
      $$025$lcssa = $23; //@line 13523
      break;
     } else {
      $$02536 = $23; //@line 13521
      $$037 = $22; //@line 13521
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa; //@line 13528
    $$025$lcssa = $$027$lcssa; //@line 13528
   }
   $$1$ph = $$0$lcssa; //@line 13530
   $$128$ph = $$025$lcssa; //@line 13530
   label = 8; //@line 13531
  } else {
   $$1$ph = $1; //@line 13533
   $$128$ph = $0; //@line 13533
   label = 8; //@line 13534
  }
 } while (0);
 if ((label | 0) == 8) {
  $31 = HEAP8[$$1$ph >> 0] | 0; //@line 13538
  HEAP8[$$128$ph >> 0] = $31; //@line 13539
  if (!($31 << 24 >> 24)) {
   $$029 = $$128$ph; //@line 13542
  } else {
   $$12834 = $$128$ph; //@line 13544
   $$135 = $$1$ph; //@line 13544
   while (1) {
    $$135 = $$135 + 1 | 0; //@line 13546
    $34 = $$12834 + 1 | 0; //@line 13547
    $35 = HEAP8[$$135 >> 0] | 0; //@line 13548
    HEAP8[$34 >> 0] = $35; //@line 13549
    if (!($35 << 24 >> 24)) {
     $$029 = $34; //@line 13552
     break;
    } else {
     $$12834 = $34; //@line 13555
    }
   }
  }
 }
 return $$029 | 0; //@line 13560
}
function _equeue_alloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $10 = 0, $11 = 0, $14 = 0, $17 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 1269
 do {
  if (HEAP8[$0 + 184 >> 0] | 0) {
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 1275
   _wait_ms(10); //@line 1276
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 59; //@line 1279
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 1281
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 1283
    sp = STACKTOP; //@line 1284
    return 0; //@line 1285
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 1287
    break;
   }
  }
 } while (0);
 $8 = $1 + 39 & -4; //@line 1293
 $9 = $0 + 156 | 0; //@line 1294
 _equeue_mutex_lock($9); //@line 1295
 $10 = $0 + 24 | 0; //@line 1296
 $11 = HEAP32[$10 >> 2] | 0; //@line 1297
 L7 : do {
  if (!$11) {
   label = 11; //@line 1301
  } else {
   $$03842$i = $10; //@line 1303
   $14 = $11; //@line 1303
   while (1) {
    if ((HEAP32[$14 >> 2] | 0) >>> 0 >= $8 >>> 0) {
     break;
    }
    $20 = $14 + 8 | 0; //@line 1310
    $21 = HEAP32[$20 >> 2] | 0; //@line 1311
    if (!$21) {
     label = 11; //@line 1314
     break L7;
    } else {
     $$03842$i = $20; //@line 1317
     $14 = $21; //@line 1317
    }
   }
   $17 = HEAP32[$14 + 12 >> 2] | 0; //@line 1321
   if (!$17) {
    $$038$sink$i = $$03842$i; //@line 1324
   } else {
    HEAP32[$$03842$i >> 2] = $17; //@line 1326
    $$038$sink$i = $17 + 8 | 0; //@line 1328
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$14 + 8 >> 2]; //@line 1332
   _equeue_mutex_unlock($9); //@line 1333
   $$1$i9 = $14; //@line 1334
  }
 } while (0);
 do {
  if ((label | 0) == 11) {
   $23 = $0 + 28 | 0; //@line 1339
   $24 = HEAP32[$23 >> 2] | 0; //@line 1340
   if ($24 >>> 0 < $8 >>> 0) {
    _equeue_mutex_unlock($9); //@line 1343
    $$0 = 0; //@line 1344
    return $$0 | 0; //@line 1345
   } else {
    $26 = $0 + 32 | 0; //@line 1347
    $27 = HEAP32[$26 >> 2] | 0; //@line 1348
    HEAP32[$26 >> 2] = $27 + $8; //@line 1350
    HEAP32[$23 >> 2] = $24 - $8; //@line 1352
    HEAP32[$27 >> 2] = $8; //@line 1353
    HEAP8[$27 + 4 >> 0] = 1; //@line 1355
    _equeue_mutex_unlock($9); //@line 1356
    if (!$27) {
     $$0 = 0; //@line 1359
    } else {
     $$1$i9 = $27; //@line 1361
     break;
    }
    return $$0 | 0; //@line 1364
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 1369
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 1371
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 1373
 $$0 = $$1$i9 + 36 | 0; //@line 1375
 return $$0 | 0; //@line 1376
}
function __ZN9TCPSocket4recvEPvj__async_cb_47($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 130
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 132
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 134
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 136
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 138
 HEAP8[$2 >> 0] = 1; //@line 139
 $9 = $4 + 8 | 0; //@line 140
 $10 = $4 + 52 | 0; //@line 141
 $11 = $4 + 4 | 0; //@line 142
 $12 = $4 + 12 | 0; //@line 143
 $13 = HEAP32[$9 >> 2] | 0; //@line 144
 if (!$13) {
  HEAP8[$2 >> 0] = 0; //@line 147
  HEAP32[___async_retval >> 2] = -3005; //@line 149
  return;
 }
 HEAP32[$10 >> 2] = 0; //@line 152
 $15 = HEAP32[$11 >> 2] | 0; //@line 153
 $18 = HEAP32[(HEAP32[$15 >> 2] | 0) + 72 >> 2] | 0; //@line 156
 $ReallocAsyncCtx = _emscripten_realloc_async_context(32) | 0; //@line 157
 $19 = FUNCTION_TABLE_iiiii[$18 & 15]($15, $13, $6, $8) | 0; //@line 158
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 161
  $20 = $ReallocAsyncCtx + 4 | 0; //@line 162
  HEAP32[$20 >> 2] = $12; //@line 163
  $21 = $ReallocAsyncCtx + 8 | 0; //@line 164
  HEAP32[$21 >> 2] = $2; //@line 165
  $22 = $ReallocAsyncCtx + 12 | 0; //@line 166
  HEAP32[$22 >> 2] = $9; //@line 167
  $23 = $ReallocAsyncCtx + 16 | 0; //@line 168
  HEAP32[$23 >> 2] = $10; //@line 169
  $24 = $ReallocAsyncCtx + 20 | 0; //@line 170
  HEAP32[$24 >> 2] = $11; //@line 171
  $25 = $ReallocAsyncCtx + 24 | 0; //@line 172
  HEAP32[$25 >> 2] = $6; //@line 173
  $26 = $ReallocAsyncCtx + 28 | 0; //@line 174
  HEAP32[$26 >> 2] = $8; //@line 175
  sp = STACKTOP; //@line 176
  return;
 }
 HEAP32[___async_retval >> 2] = $19; //@line 180
 ___async_unwind = 0; //@line 181
 HEAP32[$ReallocAsyncCtx >> 2] = 147; //@line 182
 $20 = $ReallocAsyncCtx + 4 | 0; //@line 183
 HEAP32[$20 >> 2] = $12; //@line 184
 $21 = $ReallocAsyncCtx + 8 | 0; //@line 185
 HEAP32[$21 >> 2] = $2; //@line 186
 $22 = $ReallocAsyncCtx + 12 | 0; //@line 187
 HEAP32[$22 >> 2] = $9; //@line 188
 $23 = $ReallocAsyncCtx + 16 | 0; //@line 189
 HEAP32[$23 >> 2] = $10; //@line 190
 $24 = $ReallocAsyncCtx + 20 | 0; //@line 191
 HEAP32[$24 >> 2] = $11; //@line 192
 $25 = $ReallocAsyncCtx + 24 | 0; //@line 193
 HEAP32[$25 >> 2] = $6; //@line 194
 $26 = $ReallocAsyncCtx + 28 | 0; //@line 195
 HEAP32[$26 >> 2] = $8; //@line 196
 sp = STACKTOP; //@line 197
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_42($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24570
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24574
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24576
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24578
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24580
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24581
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 24585
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 24586
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 24587
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 24590
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 24591
   HEAP32[$14 >> 2] = $4; //@line 24592
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 24593
   HEAP32[$15 >> 2] = $6; //@line 24594
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 24595
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 24596
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 24597
   HEAP32[$17 >> 2] = $8; //@line 24598
   sp = STACKTOP; //@line 24599
   return;
  }
  ___async_unwind = 0; //@line 24602
  HEAP32[$ReallocAsyncCtx4 >> 2] = 274; //@line 24603
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 24604
  HEAP32[$14 >> 2] = $4; //@line 24605
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 24606
  HEAP32[$15 >> 2] = $6; //@line 24607
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 24608
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 24609
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 24610
  HEAP32[$17 >> 2] = $8; //@line 24611
  sp = STACKTOP; //@line 24612
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 24615
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 24619
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 24623
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24624
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 24625
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 24628
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 24629
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 24630
  sp = STACKTOP; //@line 24631
  return;
 }
 ___async_unwind = 0; //@line 24634
 HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 24635
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 24636
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 24637
 sp = STACKTOP; //@line 24638
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$2 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 14200
 STACKTOP = STACKTOP + 64 | 0; //@line 14201
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(64); //@line 14201
 $3 = sp; //@line 14202
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, 0) | 0) {
  $$2 = 1; //@line 14205
 } else {
  if (!$1) {
   $$2 = 0; //@line 14209
  } else {
   $AsyncCtx3 = _emscripten_alloc_async_context(16, sp) | 0; //@line 14211
   $6 = ___dynamic_cast($1, 144, 128, 0) | 0; //@line 14212
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 344; //@line 14215
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 14217
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 14219
    HEAP32[$AsyncCtx3 + 12 >> 2] = $2; //@line 14221
    sp = STACKTOP; //@line 14222
    STACKTOP = sp; //@line 14223
    return 0; //@line 14223
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 14225
   if (!$6) {
    $$2 = 0; //@line 14228
   } else {
    dest = $3 + 4 | 0; //@line 14231
    stop = dest + 52 | 0; //@line 14231
    do {
     HEAP32[dest >> 2] = 0; //@line 14231
     dest = dest + 4 | 0; //@line 14231
    } while ((dest | 0) < (stop | 0));
    HEAP32[$3 >> 2] = $6; //@line 14232
    HEAP32[$3 + 8 >> 2] = $0; //@line 14234
    HEAP32[$3 + 12 >> 2] = -1; //@line 14236
    HEAP32[$3 + 48 >> 2] = 1; //@line 14238
    $17 = HEAP32[(HEAP32[$6 >> 2] | 0) + 28 >> 2] | 0; //@line 14241
    $18 = HEAP32[$2 >> 2] | 0; //@line 14242
    $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 14243
    FUNCTION_TABLE_viiii[$17 & 7]($6, $3, $18, 1); //@line 14244
    if (___async) {
     HEAP32[$AsyncCtx >> 2] = 345; //@line 14247
     HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 14249
     HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 14251
     HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 14253
     sp = STACKTOP; //@line 14254
     STACKTOP = sp; //@line 14255
     return 0; //@line 14255
    }
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14257
    if ((HEAP32[$3 + 24 >> 2] | 0) == 1) {
     HEAP32[$2 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 14264
     $$0 = 1; //@line 14265
    } else {
     $$0 = 0; //@line 14267
    }
    $$2 = $$0; //@line 14269
   }
  }
 }
 STACKTOP = sp; //@line 14273
 return $$2 | 0; //@line 14273
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_49($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $21 = 0, $22 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 369
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 373
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 375
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 377
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 379
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 380
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 384
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 385
  FUNCTION_TABLE_vi[$13 & 511]($4); //@line 386
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 389
   $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 390
   HEAP32[$14 >> 2] = $4; //@line 391
   $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 392
   HEAP32[$15 >> 2] = $6; //@line 393
   $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 394
   HEAP32[$16 >> 2] = $AsyncRetVal; //@line 395
   $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 396
   HEAP32[$17 >> 2] = $8; //@line 397
   sp = STACKTOP; //@line 398
   return;
  }
  ___async_unwind = 0; //@line 401
  HEAP32[$ReallocAsyncCtx4 >> 2] = 117; //@line 402
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 403
  HEAP32[$14 >> 2] = $4; //@line 404
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 405
  HEAP32[$15 >> 2] = $6; //@line 406
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 407
  HEAP32[$16 >> 2] = $AsyncRetVal; //@line 408
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 409
  HEAP32[$17 >> 2] = $8; //@line 410
  sp = STACKTOP; //@line 411
  return;
 }
 $18 = HEAP32[$6 >> 2] | 0; //@line 414
 if (!$18) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 418
  return;
 }
 $21 = HEAP32[$18 + 8 >> 2] | 0; //@line 422
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 423
 FUNCTION_TABLE_vi[$21 & 511]($8); //@line 424
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 427
  $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 428
  HEAP32[$22 >> 2] = $AsyncRetVal; //@line 429
  sp = STACKTOP; //@line 430
  return;
 }
 ___async_unwind = 0; //@line 433
 HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 434
 $22 = $ReallocAsyncCtx5 + 4 | 0; //@line 435
 HEAP32[$22 >> 2] = $AsyncRetVal; //@line 436
 sp = STACKTOP; //@line 437
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_79($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $25 = 0, $29 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 3964
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3966
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3968
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3970
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3972
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3974
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3976
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3978
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3980
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3982
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 3984
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 3986
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 3988
 if (!$AsyncRetVal) {
  HEAP32[___async_retval >> 2] = -3007; //@line 3992
  return;
 }
 $25 = $AsyncRetVal + 16 | 0; //@line 3995
 HEAP32[$25 >> 2] = 0; //@line 3996
 HEAP32[$25 + 4 >> 2] = 0; //@line 3996
 HEAP32[$25 + 8 >> 2] = 0; //@line 3996
 HEAP32[$25 + 12 >> 2] = 0; //@line 3996
 HEAP32[$25 + 16 >> 2] = 0; //@line 3996
 HEAP32[$25 + 20 >> 2] = 0; //@line 3996
 HEAP32[$25 + 24 >> 2] = 0; //@line 3996
 HEAP32[$25 + 28 >> 2] = 0; //@line 3996
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(52) | 0; //@line 4000
 $29 = __ZnajRKSt9nothrow_t(($8 | 0) < -1 ? -1 : $8 + 1 | 0, 9717) | 0; //@line 4001
 if (!___async) {
  HEAP32[___async_retval >> 2] = $29; //@line 4005
  ___async_unwind = 0; //@line 4006
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 173; //@line 4008
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 4010
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $AsyncRetVal; //@line 4012
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $25; //@line 4014
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $4; //@line 4016
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $6; //@line 4018
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $10; //@line 4020
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $12; //@line 4022
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $14; //@line 4024
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $16; //@line 4026
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $18; //@line 4028
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $20; //@line 4030
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $22; //@line 4032
 sp = STACKTOP; //@line 4033
 return;
}
function _vsnprintf($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $11 = 0, $14 = 0, $16 = 0, $17 = 0, $19 = 0, $26 = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 13362
 STACKTOP = STACKTOP + 128 | 0; //@line 13363
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 13363
 $4 = sp + 124 | 0; //@line 13364
 $5 = sp; //@line 13365
 dest = $5; //@line 13366
 src = 2396; //@line 13366
 stop = dest + 124 | 0; //@line 13366
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 13366
  dest = dest + 4 | 0; //@line 13366
  src = src + 4 | 0; //@line 13366
 } while ((dest | 0) < (stop | 0));
 if (($1 + -1 | 0) >>> 0 > 2147483646) {
  if (!$1) {
   $$014 = $4; //@line 13372
   $$015 = 1; //@line 13372
   label = 4; //@line 13373
  } else {
   HEAP32[(___errno_location() | 0) >> 2] = 75; //@line 13376
   $$0 = -1; //@line 13377
  }
 } else {
  $$014 = $0; //@line 13380
  $$015 = $1; //@line 13380
  label = 4; //@line 13381
 }
 if ((label | 0) == 4) {
  $11 = -2 - $$014 | 0; //@line 13385
  $$$015 = $$015 >>> 0 > $11 >>> 0 ? $11 : $$015; //@line 13387
  HEAP32[$5 + 48 >> 2] = $$$015; //@line 13389
  $14 = $5 + 20 | 0; //@line 13390
  HEAP32[$14 >> 2] = $$014; //@line 13391
  HEAP32[$5 + 44 >> 2] = $$014; //@line 13393
  $16 = $$014 + $$$015 | 0; //@line 13394
  $17 = $5 + 16 | 0; //@line 13395
  HEAP32[$17 >> 2] = $16; //@line 13396
  HEAP32[$5 + 28 >> 2] = $16; //@line 13398
  $AsyncCtx = _emscripten_alloc_async_context(24, sp) | 0; //@line 13399
  $19 = _vfprintf($5, $2, $3) | 0; //@line 13400
  if (___async) {
   HEAP32[$AsyncCtx >> 2] = 329; //@line 13403
   HEAP32[$AsyncCtx + 4 >> 2] = $$$015; //@line 13405
   HEAP32[$AsyncCtx + 8 >> 2] = $5; //@line 13407
   HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 13409
   HEAP32[$AsyncCtx + 16 >> 2] = $14; //@line 13411
   HEAP32[$AsyncCtx + 20 >> 2] = $17; //@line 13413
   sp = STACKTOP; //@line 13414
   STACKTOP = sp; //@line 13415
   return 0; //@line 13415
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13417
  if (!$$$015) {
   $$0 = $19; //@line 13420
  } else {
   $26 = HEAP32[$14 >> 2] | 0; //@line 13422
   HEAP8[$26 + ((($26 | 0) == (HEAP32[$17 >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 13427
   $$0 = $19; //@line 13428
  }
 }
 STACKTOP = sp; //@line 13431
 return $$0 | 0; //@line 13431
}
function _equeue_alloc__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$038$sink$i = 0, $$03842$i = 0, $$1$i9 = 0, $12 = 0, $15 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $24 = 0, $25 = 0, $34 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14128
 $6 = (HEAP32[$0 + 4 >> 2] | 0) + 39 & -4; //@line 14130
 $7 = $4 + 156 | 0; //@line 14131
 _equeue_mutex_lock($7); //@line 14132
 $8 = $4 + 24 | 0; //@line 14133
 $9 = HEAP32[$8 >> 2] | 0; //@line 14134
 L3 : do {
  if (!$9) {
   label = 9; //@line 14138
  } else {
   $$03842$i = $8; //@line 14140
   $12 = $9; //@line 14140
   while (1) {
    if ((HEAP32[$12 >> 2] | 0) >>> 0 >= $6 >>> 0) {
     break;
    }
    $18 = $12 + 8 | 0; //@line 14147
    $19 = HEAP32[$18 >> 2] | 0; //@line 14148
    if (!$19) {
     label = 9; //@line 14151
     break L3;
    } else {
     $$03842$i = $18; //@line 14154
     $12 = $19; //@line 14154
    }
   }
   $15 = HEAP32[$12 + 12 >> 2] | 0; //@line 14158
   if (!$15) {
    $$038$sink$i = $$03842$i; //@line 14161
   } else {
    HEAP32[$$03842$i >> 2] = $15; //@line 14163
    $$038$sink$i = $15 + 8 | 0; //@line 14165
   }
   HEAP32[$$038$sink$i >> 2] = HEAP32[$12 + 8 >> 2]; //@line 14169
   _equeue_mutex_unlock($7); //@line 14170
   $$1$i9 = $12; //@line 14171
  }
 } while (0);
 do {
  if ((label | 0) == 9) {
   $21 = $4 + 28 | 0; //@line 14176
   $22 = HEAP32[$21 >> 2] | 0; //@line 14177
   if ($22 >>> 0 < $6 >>> 0) {
    _equeue_mutex_unlock($7); //@line 14180
    $$0 = 0; //@line 14181
    $34 = ___async_retval; //@line 14182
    HEAP32[$34 >> 2] = $$0; //@line 14183
    return;
   } else {
    $24 = $4 + 32 | 0; //@line 14186
    $25 = HEAP32[$24 >> 2] | 0; //@line 14187
    HEAP32[$24 >> 2] = $25 + $6; //@line 14189
    HEAP32[$21 >> 2] = $22 - $6; //@line 14191
    HEAP32[$25 >> 2] = $6; //@line 14192
    HEAP8[$25 + 4 >> 0] = 1; //@line 14194
    _equeue_mutex_unlock($7); //@line 14195
    if (!$25) {
     $$0 = 0; //@line 14198
    } else {
     $$1$i9 = $25; //@line 14200
     break;
    }
    $34 = ___async_retval; //@line 14203
    HEAP32[$34 >> 2] = $$0; //@line 14204
    return;
   }
  }
 } while (0);
 HEAP32[$$1$i9 + 20 >> 2] = 0; //@line 14210
 HEAP32[$$1$i9 + 24 >> 2] = -1; //@line 14212
 HEAP32[$$1$i9 + 28 >> 2] = 0; //@line 14214
 $$0 = $$1$i9 + 36 | 0; //@line 14216
 $34 = ___async_retval; //@line 14217
 HEAP32[$34 >> 2] = $$0; //@line 14218
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $10 = 0, $19 = 0, $28 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15532
 L1 : do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 15538
  } else {
   $9 = HEAP32[$0 + 12 >> 2] | 0; //@line 15542
   $10 = $0 + 16 + ($9 << 3) | 0; //@line 15543
   $AsyncCtx3 = _emscripten_alloc_async_context(28, sp) | 0; //@line 15544
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0 + 16 | 0, $1, $2, $3); //@line 15545
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 361; //@line 15548
    HEAP32[$AsyncCtx3 + 4 >> 2] = $9; //@line 15550
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 15552
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 15554
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 15556
    HEAP32[$AsyncCtx3 + 20 >> 2] = $3; //@line 15558
    HEAP32[$AsyncCtx3 + 24 >> 2] = $10; //@line 15560
    sp = STACKTOP; //@line 15561
    return;
   }
   _emscripten_free_async_context($AsyncCtx3 | 0); //@line 15564
   if (($9 | 0) > 1) {
    $19 = $1 + 54 | 0; //@line 15568
    $$0 = $0 + 24 | 0; //@line 15569
    while (1) {
     $AsyncCtx = _emscripten_alloc_async_context(28, sp) | 0; //@line 15571
     __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($$0, $1, $2, $3); //@line 15572
     if (___async) {
      break;
     }
     _emscripten_free_async_context($AsyncCtx | 0); //@line 15577
     if (HEAP8[$19 >> 0] | 0) {
      break L1;
     }
     $28 = $$0 + 8 | 0; //@line 15583
     if ($28 >>> 0 < $10 >>> 0) {
      $$0 = $28; //@line 15586
     } else {
      break L1;
     }
    }
    HEAP32[$AsyncCtx >> 2] = 362; //@line 15591
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 15593
    HEAP32[$AsyncCtx + 8 >> 2] = $$0; //@line 15595
    HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 15597
    HEAP32[$AsyncCtx + 16 >> 2] = $1; //@line 15599
    HEAP32[$AsyncCtx + 20 >> 2] = $2; //@line 15601
    HEAP32[$AsyncCtx + 24 >> 2] = $3; //@line 15603
    sp = STACKTOP; //@line 15604
    return;
   }
  }
 } while (0);
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 622
 STACKTOP = STACKTOP + 48 | 0; //@line 623
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 623
 $$byval_copy = sp + 20 | 0; //@line 624
 $3 = sp; //@line 625
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 626
 $4 = __Znwj(76) | 0; //@line 627
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 47; //@line 630
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 632
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 634
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 636
  sp = STACKTOP; //@line 637
  STACKTOP = sp; //@line 638
  return 0; //@line 638
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 640
 dest = $4; //@line 641
 stop = dest + 76 | 0; //@line 641
 do {
  HEAP32[dest >> 2] = 0; //@line 641
  dest = dest + 4 | 0; //@line 641
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 642
 HEAP32[$3 >> 2] = 0; //@line 643
 HEAP32[$3 + 4 >> 2] = 0; //@line 643
 HEAP32[$3 + 8 >> 2] = 0; //@line 643
 HEAP32[$3 + 12 >> 2] = 0; //@line 643
 HEAP32[$3 + 16 >> 2] = 0; //@line 643
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 644
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 644
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 644
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 644
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 644
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 645
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 646
 if (($9 | 0) == -1) {
  $$0$i = -3001; //@line 649
  STACKTOP = sp; //@line 650
  return $$0$i | 0; //@line 650
 }
 HEAP32[$4 >> 2] = $9; //@line 652
 HEAP8[$4 + 8 >> 0] = 0; //@line 654
 HEAP32[$4 + 4 >> 2] = $2; //@line 656
 HEAP32[$1 >> 2] = $4; //@line 657
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 658
 _wait_ms(1); //@line 659
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 48; //@line 662
  sp = STACKTOP; //@line 663
  STACKTOP = sp; //@line 664
  return 0; //@line 664
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 666
 $$0$i = 0; //@line 667
 STACKTOP = sp; //@line 668
 return $$0$i | 0; //@line 668
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $$byval_copy = 0, $3 = 0, $4 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 219
 STACKTOP = STACKTOP + 48 | 0; //@line 220
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 220
 $$byval_copy = sp + 20 | 0; //@line 221
 $3 = sp; //@line 222
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 223
 $4 = __Znwj(76) | 0; //@line 224
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 34; //@line 227
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 229
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 231
  HEAP32[$AsyncCtx + 12 >> 2] = $1; //@line 233
  sp = STACKTOP; //@line 234
  STACKTOP = sp; //@line 235
  return 0; //@line 235
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 237
 dest = $4; //@line 238
 stop = dest + 76 | 0; //@line 238
 do {
  HEAP32[dest >> 2] = 0; //@line 238
  dest = dest + 4 | 0; //@line 238
 } while ((dest | 0) < (stop | 0));
 $8 = $4 + 12 | 0; //@line 239
 HEAP32[$3 >> 2] = 0; //@line 240
 HEAP32[$3 + 4 >> 2] = 0; //@line 240
 HEAP32[$3 + 8 >> 2] = 0; //@line 240
 HEAP32[$3 + 12 >> 2] = 0; //@line 240
 HEAP32[$3 + 16 >> 2] = 0; //@line 240
 HEAP32[$$byval_copy >> 2] = HEAP32[$3 >> 2]; //@line 241
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$3 + 4 >> 2]; //@line 241
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$3 + 8 >> 2]; //@line 241
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$3 + 12 >> 2]; //@line 241
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$3 + 16 >> 2]; //@line 241
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 242
 $9 = _emscripten_asm_const_ii(3, $2 | 0) | 0; //@line 243
 if (($9 | 0) == -1) {
  $$0 = -3001; //@line 246
  STACKTOP = sp; //@line 247
  return $$0 | 0; //@line 247
 }
 HEAP32[$4 >> 2] = $9; //@line 249
 HEAP8[$4 + 8 >> 0] = 0; //@line 251
 HEAP32[$4 + 4 >> 2] = $2; //@line 253
 HEAP32[$1 >> 2] = $4; //@line 254
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 255
 _wait_ms(1); //@line 256
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 35; //@line 259
  sp = STACKTOP; //@line 260
  STACKTOP = sp; //@line 261
  return 0; //@line 261
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 263
 $$0 = 0; //@line 264
 STACKTOP = sp; //@line 265
 return $$0 | 0; //@line 265
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_158($0) {
 $0 = $0 | 0;
 var $11 = 0, $14 = 0, $18 = 0, $19 = 0, $20 = 0, $22 = 0, $26 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13049
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13053
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13055
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 13056
 $8 = HEAP32[$4 + 64 >> 2] | 0; //@line 13058
 if ($8 | 0) {
  __ZdaPv($8); //@line 13061
 }
 $11 = HEAP32[$4 + 12 >> 2] | 0; //@line 13064
 if ($11 | 0) {
  __ZdlPv($11); //@line 13067
 }
 $14 = HEAP32[$4 + 44 >> 2] | 0; //@line 13070
 if ($14 | 0) {
  $18 = HEAP32[$14 + 8 >> 2] | 0; //@line 13075
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 13076
  FUNCTION_TABLE_vi[$18 & 511]($4 + 32 | 0); //@line 13077
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 13080
   $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 13081
   HEAP32[$19 >> 2] = $4; //@line 13082
   $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 13083
   HEAP32[$20 >> 2] = $6; //@line 13084
   sp = STACKTOP; //@line 13085
   return;
  }
  ___async_unwind = 0; //@line 13088
  HEAP32[$ReallocAsyncCtx3 >> 2] = 236; //@line 13089
  $19 = $ReallocAsyncCtx3 + 4 | 0; //@line 13090
  HEAP32[$19 >> 2] = $4; //@line 13091
  $20 = $ReallocAsyncCtx3 + 8 | 0; //@line 13092
  HEAP32[$20 >> 2] = $6; //@line 13093
  sp = STACKTOP; //@line 13094
  return;
 }
 $22 = HEAP32[$4 + 28 >> 2] | 0; //@line 13098
 if (!$22) {
  __ZdlPv($4); //@line 13101
  HEAP32[7796 + ($6 << 2) >> 2] = 0; //@line 13103
  return;
 }
 $26 = HEAP32[$22 + 8 >> 2] | 0; //@line 13108
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 13109
 FUNCTION_TABLE_vi[$26 & 511]($4 + 16 | 0); //@line 13110
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 13113
  $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 13114
  HEAP32[$27 >> 2] = $4; //@line 13115
  $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 13116
  HEAP32[$28 >> 2] = $6; //@line 13117
  sp = STACKTOP; //@line 13118
  return;
 }
 ___async_unwind = 0; //@line 13121
 HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 13122
 $27 = $ReallocAsyncCtx4 + 4 | 0; //@line 13123
 HEAP32[$27 >> 2] = $4; //@line 13124
 $28 = $ReallocAsyncCtx4 + 8 | 0; //@line 13125
 HEAP32[$28 >> 2] = $6; //@line 13126
 sp = STACKTOP; //@line 13127
 return;
}
function __ZN9TCPSocket4recvEPvj($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $20 = 0, $3 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5501
 $3 = $0 + 56 | 0; //@line 5502
 do {
  if (HEAP8[$3 >> 0] | 0) {
   $AsyncCtx3 = _emscripten_alloc_async_context(20, sp) | 0; //@line 5507
   _mbed_assert_internal(3802, 3705, 190); //@line 5508
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 146; //@line 5511
    HEAP32[$AsyncCtx3 + 4 >> 2] = $3; //@line 5513
    HEAP32[$AsyncCtx3 + 8 >> 2] = $0; //@line 5515
    HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5517
    HEAP32[$AsyncCtx3 + 16 >> 2] = $2; //@line 5519
    sp = STACKTOP; //@line 5520
    return 0; //@line 5521
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5523
    break;
   }
  }
 } while (0);
 HEAP8[$3 >> 0] = 1; //@line 5528
 $10 = $0 + 8 | 0; //@line 5529
 $11 = $0 + 52 | 0; //@line 5530
 $12 = $0 + 4 | 0; //@line 5531
 $13 = $0 + 12 | 0; //@line 5532
 while (1) {
  $14 = HEAP32[$10 >> 2] | 0; //@line 5534
  if (!$14) {
   $$0 = -3005; //@line 5537
   label = 10; //@line 5538
   break;
  }
  HEAP32[$11 >> 2] = 0; //@line 5541
  $16 = HEAP32[$12 >> 2] | 0; //@line 5542
  $19 = HEAP32[(HEAP32[$16 >> 2] | 0) + 72 >> 2] | 0; //@line 5545
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5546
  $20 = FUNCTION_TABLE_iiiii[$19 & 15]($16, $14, $1, $2) | 0; //@line 5547
  if (___async) {
   label = 8; //@line 5550
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5553
  if (($20 | 0) != -3001 | (HEAP32[$13 >> 2] | 0) == 0) {
   $$0 = $20; //@line 5559
   label = 10; //@line 5560
   break;
  }
 }
 if ((label | 0) == 8) {
  HEAP32[$AsyncCtx >> 2] = 147; //@line 5565
  HEAP32[$AsyncCtx + 4 >> 2] = $13; //@line 5567
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 5569
  HEAP32[$AsyncCtx + 12 >> 2] = $10; //@line 5571
  HEAP32[$AsyncCtx + 16 >> 2] = $11; //@line 5573
  HEAP32[$AsyncCtx + 20 >> 2] = $12; //@line 5575
  HEAP32[$AsyncCtx + 24 >> 2] = $1; //@line 5577
  HEAP32[$AsyncCtx + 28 >> 2] = $2; //@line 5579
  sp = STACKTOP; //@line 5580
  return 0; //@line 5581
 } else if ((label | 0) == 10) {
  HEAP8[$3 >> 0] = 0; //@line 5584
  return $$0 | 0; //@line 5585
 }
 return 0; //@line 5587
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_90($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 5404
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5408
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5410
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5412
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5414
 $10 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5415
 if ($10 | 0) {
  $13 = HEAP32[$10 + 8 >> 2] | 0; //@line 5419
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(16) | 0; //@line 5420
  FUNCTION_TABLE_vi[$13 & 511]($6); //@line 5421
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 168; //@line 5424
   $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 5425
   HEAP32[$14 >> 2] = $4; //@line 5426
   $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 5427
   HEAP32[$15 >> 2] = $AsyncRetVal; //@line 5428
   $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 5429
   HEAP32[$16 >> 2] = $8; //@line 5430
   sp = STACKTOP; //@line 5431
   return;
  }
  ___async_unwind = 0; //@line 5434
  HEAP32[$ReallocAsyncCtx3 >> 2] = 168; //@line 5435
  $14 = $ReallocAsyncCtx3 + 4 | 0; //@line 5436
  HEAP32[$14 >> 2] = $4; //@line 5437
  $15 = $ReallocAsyncCtx3 + 8 | 0; //@line 5438
  HEAP32[$15 >> 2] = $AsyncRetVal; //@line 5439
  $16 = $ReallocAsyncCtx3 + 12 | 0; //@line 5440
  HEAP32[$16 >> 2] = $8; //@line 5441
  sp = STACKTOP; //@line 5442
  return;
 }
 $17 = HEAP32[$4 >> 2] | 0; //@line 5445
 if (!$17) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 5449
  return;
 }
 $20 = HEAP32[$17 + 8 >> 2] | 0; //@line 5453
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 5454
 FUNCTION_TABLE_vi[$20 & 511]($8); //@line 5455
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 5458
  $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 5459
  HEAP32[$21 >> 2] = $AsyncRetVal; //@line 5460
  sp = STACKTOP; //@line 5461
  return;
 }
 ___async_unwind = 0; //@line 5464
 HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 5465
 $21 = $ReallocAsyncCtx4 + 4 | 0; //@line 5466
 HEAP32[$21 >> 2] = $AsyncRetVal; //@line 5467
 sp = STACKTOP; //@line 5468
 return;
}
function _fputc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13634
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 13639
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 13644
  } else {
   $20 = $0 & 255; //@line 13646
   $21 = $0 & 255; //@line 13647
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 13653
   } else {
    $26 = $1 + 20 | 0; //@line 13655
    $27 = HEAP32[$26 >> 2] | 0; //@line 13656
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 13662
     HEAP8[$27 >> 0] = $20; //@line 13663
     $34 = $21; //@line 13664
    } else {
     label = 12; //@line 13666
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13671
     $32 = ___overflow($1, $0) | 0; //@line 13672
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 334; //@line 13675
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13677
      sp = STACKTOP; //@line 13678
      return 0; //@line 13679
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 13681
      $34 = $32; //@line 13682
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 13687
   $$0 = $34; //@line 13688
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 13693
   $8 = $0 & 255; //@line 13694
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 13700
    $14 = HEAP32[$13 >> 2] | 0; //@line 13701
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 13707
     HEAP8[$14 >> 0] = $7; //@line 13708
     $$0 = $8; //@line 13709
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 13713
   $19 = ___overflow($1, $0) | 0; //@line 13714
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 333; //@line 13717
    sp = STACKTOP; //@line 13718
    return 0; //@line 13719
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13721
    $$0 = $19; //@line 13722
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 13727
}
function ___mo_lookup($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$090 = 0, $$094 = 0, $$4 = 0, $10 = 0, $13 = 0, $17 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $31 = 0, $35 = 0, $4 = 0, $44 = 0, $46 = 0, $49 = 0, $53 = 0, $63 = 0, $7 = 0;
 $4 = (HEAP32[$0 >> 2] | 0) + 1794895138 | 0; //@line 5109
 $7 = _swapc(HEAP32[$0 + 8 >> 2] | 0, $4) | 0; //@line 5112
 $10 = _swapc(HEAP32[$0 + 12 >> 2] | 0, $4) | 0; //@line 5115
 $13 = _swapc(HEAP32[$0 + 16 >> 2] | 0, $4) | 0; //@line 5118
 L1 : do {
  if ($7 >>> 0 < $1 >>> 2 >>> 0) {
   $17 = $1 - ($7 << 2) | 0; //@line 5124
   if ($10 >>> 0 < $17 >>> 0 & $13 >>> 0 < $17 >>> 0) {
    if (!(($13 | $10) & 3)) {
     $23 = $10 >>> 2; //@line 5133
     $24 = $13 >>> 2; //@line 5134
     $$090 = 0; //@line 5135
     $$094 = $7; //@line 5135
     while (1) {
      $25 = $$094 >>> 1; //@line 5137
      $26 = $$090 + $25 | 0; //@line 5138
      $27 = $26 << 1; //@line 5139
      $28 = $27 + $23 | 0; //@line 5140
      $31 = _swapc(HEAP32[$0 + ($28 << 2) >> 2] | 0, $4) | 0; //@line 5143
      $35 = _swapc(HEAP32[$0 + ($28 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5147
      if (!($35 >>> 0 < $1 >>> 0 & $31 >>> 0 < ($1 - $35 | 0) >>> 0)) {
       $$4 = 0; //@line 5153
       break L1;
      }
      if (HEAP8[$0 + ($35 + $31) >> 0] | 0) {
       $$4 = 0; //@line 5161
       break L1;
      }
      $44 = _strcmp($2, $0 + $35 | 0) | 0; //@line 5165
      if (!$44) {
       break;
      }
      $63 = ($44 | 0) < 0; //@line 5171
      if (($$094 | 0) == 1) {
       $$4 = 0; //@line 5176
       break L1;
      } else {
       $$090 = $63 ? $$090 : $26; //@line 5179
       $$094 = $63 ? $25 : $$094 - $25 | 0; //@line 5179
      }
     }
     $46 = $27 + $24 | 0; //@line 5182
     $49 = _swapc(HEAP32[$0 + ($46 << 2) >> 2] | 0, $4) | 0; //@line 5185
     $53 = _swapc(HEAP32[$0 + ($46 + 1 << 2) >> 2] | 0, $4) | 0; //@line 5189
     if ($53 >>> 0 < $1 >>> 0 & $49 >>> 0 < ($1 - $53 | 0) >>> 0) {
      $$4 = (HEAP8[$0 + ($53 + $49) >> 0] | 0) == 0 ? $0 + $53 | 0 : 0; //@line 5201
     } else {
      $$4 = 0; //@line 5203
     }
    } else {
     $$4 = 0; //@line 5206
    }
   } else {
    $$4 = 0; //@line 5209
   }
  } else {
   $$4 = 0; //@line 5212
  }
 } while (0);
 return $$4 | 0; //@line 5215
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_196($0) {
 $0 = $0 | 0;
 var $$pre85 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx18 = 0, sp = 0;
 sp = STACKTOP; //@line 15665
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15671
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15673
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15675
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15677
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 15679
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 15681
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 15683
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15685
 $$pre85 = HEAP32[$6 >> 2] | 0; //@line 15686
 HEAP32[$$pre85 + 16 >> 2] = HEAP32[$8 >> 2]; //@line 15690
 HEAP32[$10 + 8 >> 2] = 0; //@line 15692
 HEAP32[$10 >> 2] = 228; //@line 15693
 HEAP32[$10 + 4 >> 2] = $$pre85; //@line 15695
 $23 = $10 + 12 | 0; //@line 15696
 HEAP32[$23 >> 2] = 764; //@line 15697
 $ReallocAsyncCtx18 = _emscripten_realloc_async_context(24) | 0; //@line 15698
 __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($12, $10); //@line 15699
 if (___async) {
  HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 15702
  $24 = $ReallocAsyncCtx18 + 4 | 0; //@line 15703
  HEAP32[$24 >> 2] = $23; //@line 15704
  $25 = $ReallocAsyncCtx18 + 8 | 0; //@line 15705
  HEAP32[$25 >> 2] = $14; //@line 15706
  $26 = $ReallocAsyncCtx18 + 12 | 0; //@line 15707
  HEAP32[$26 >> 2] = $16; //@line 15708
  $27 = $ReallocAsyncCtx18 + 16 | 0; //@line 15709
  HEAP32[$27 >> 2] = $10; //@line 15710
  $28 = $ReallocAsyncCtx18 + 20 | 0; //@line 15711
  HEAP32[$28 >> 2] = $18; //@line 15712
  sp = STACKTOP; //@line 15713
  return;
 }
 ___async_unwind = 0; //@line 15716
 HEAP32[$ReallocAsyncCtx18 >> 2] = 229; //@line 15717
 $24 = $ReallocAsyncCtx18 + 4 | 0; //@line 15718
 HEAP32[$24 >> 2] = $23; //@line 15719
 $25 = $ReallocAsyncCtx18 + 8 | 0; //@line 15720
 HEAP32[$25 >> 2] = $14; //@line 15721
 $26 = $ReallocAsyncCtx18 + 12 | 0; //@line 15722
 HEAP32[$26 >> 2] = $16; //@line 15723
 $27 = $ReallocAsyncCtx18 + 16 | 0; //@line 15724
 HEAP32[$27 >> 2] = $10; //@line 15725
 $28 = $ReallocAsyncCtx18 + 20 | 0; //@line 15726
 HEAP32[$28 >> 2] = $18; //@line 15727
 sp = STACKTOP; //@line 15728
 return;
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $30 = 0, $31 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 6162
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6164
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6166
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6168
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6170
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6172
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6174
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6176
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6178
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6180
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6182
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6184
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6186
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6188
 $30 = HEAP32[$0 + 60 >> 2] | 0; //@line 6192
 HEAP32[$10 >> 2] = HEAP32[HEAP32[$0 + 56 >> 2] >> 2]; //@line 6194
 $31 = HEAP32[$12 >> 2] | 0; //@line 6195
 HEAP32[$14 >> 2] = 0; //@line 6196
 HEAP32[$16 >> 2] = 188; //@line 6197
 HEAP32[$18 >> 2] = $31; //@line 6198
 HEAP32[$20 >> 2] = 764; //@line 6199
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(56) | 0; //@line 6200
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($22, 0, $24) | 0; //@line 6201
 if (!___async) {
  ___async_unwind = 0; //@line 6204
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 259; //@line 6206
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 6208
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $4; //@line 6210
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $6; //@line 6212
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $8; //@line 6214
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $10; //@line 6216
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $14; //@line 6218
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $16; //@line 6220
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $18; //@line 6222
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 6224
 HEAP32[$ReallocAsyncCtx5 + 40 >> 2] = $22; //@line 6226
 HEAP32[$ReallocAsyncCtx5 + 44 >> 2] = $24; //@line 6228
 HEAP32[$ReallocAsyncCtx5 + 48 >> 2] = $26; //@line 6230
 HEAP32[$ReallocAsyncCtx5 + 52 >> 2] = $30; //@line 6232
 sp = STACKTOP; //@line 6233
 return;
}
function _putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $13 = 0, $14 = 0, $19 = 0, $20 = 0, $21 = 0, $26 = 0, $27 = 0, $32 = 0, $34 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4774
 if ((HEAP32[$1 + 76 >> 2] | 0) < 0) {
  label = 3; //@line 4779
 } else {
  if (!(___lockfile($1) | 0)) {
   label = 3; //@line 4784
  } else {
   $20 = $0 & 255; //@line 4786
   $21 = $0 & 255; //@line 4787
   if (($21 | 0) == (HEAP8[$1 + 75 >> 0] | 0)) {
    label = 12; //@line 4793
   } else {
    $26 = $1 + 20 | 0; //@line 4795
    $27 = HEAP32[$26 >> 2] | 0; //@line 4796
    if ($27 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$26 >> 2] = $27 + 1; //@line 4802
     HEAP8[$27 >> 0] = $20; //@line 4803
     $34 = $21; //@line 4804
    } else {
     label = 12; //@line 4806
    }
   }
   do {
    if ((label | 0) == 12) {
     $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4811
     $32 = ___overflow($1, $0) | 0; //@line 4812
     if (___async) {
      HEAP32[$AsyncCtx >> 2] = 319; //@line 4815
      HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4817
      sp = STACKTOP; //@line 4818
      return 0; //@line 4819
     } else {
      _emscripten_free_async_context($AsyncCtx | 0); //@line 4821
      $34 = $32; //@line 4822
      break;
     }
    }
   } while (0);
   ___unlockfile($1); //@line 4827
   $$0 = $34; //@line 4828
  }
 }
 do {
  if ((label | 0) == 3) {
   $7 = $0 & 255; //@line 4833
   $8 = $0 & 255; //@line 4834
   if (($8 | 0) != (HEAP8[$1 + 75 >> 0] | 0)) {
    $13 = $1 + 20 | 0; //@line 4840
    $14 = HEAP32[$13 >> 2] | 0; //@line 4841
    if ($14 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$13 >> 2] = $14 + 1; //@line 4847
     HEAP8[$14 >> 0] = $7; //@line 4848
     $$0 = $8; //@line 4849
     break;
    }
   }
   $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4853
   $19 = ___overflow($1, $0) | 0; //@line 4854
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 318; //@line 4857
    sp = STACKTOP; //@line 4858
    return 0; //@line 4859
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4861
    $$0 = $19; //@line 4862
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 4867
}
function ___fflush_unlocked($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $22 = 0, $3 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5494
 $1 = $0 + 20 | 0; //@line 5495
 $3 = $0 + 28 | 0; //@line 5497
 do {
  if ((HEAP32[$1 >> 2] | 0) >>> 0 > (HEAP32[$3 >> 2] | 0) >>> 0) {
   $7 = HEAP32[$0 + 36 >> 2] | 0; //@line 5503
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 5504
   FUNCTION_TABLE_iiii[$7 & 31]($0, 0, 0) | 0; //@line 5505
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 325; //@line 5508
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 5510
    HEAP32[$AsyncCtx + 8 >> 2] = $0; //@line 5512
    HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 5514
    sp = STACKTOP; //@line 5515
    return 0; //@line 5516
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5518
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = -1; //@line 5522
     break;
    } else {
     label = 5; //@line 5525
     break;
    }
   }
  } else {
   label = 5; //@line 5530
  }
 } while (0);
 if ((label | 0) == 5) {
  $13 = $0 + 4 | 0; //@line 5534
  $14 = HEAP32[$13 >> 2] | 0; //@line 5535
  $15 = $0 + 8 | 0; //@line 5536
  $16 = HEAP32[$15 >> 2] | 0; //@line 5537
  do {
   if ($14 >>> 0 < $16 >>> 0) {
    $22 = HEAP32[$0 + 40 >> 2] | 0; //@line 5545
    $AsyncCtx3 = _emscripten_alloc_async_context(24, sp) | 0; //@line 5546
    FUNCTION_TABLE_iiii[$22 & 31]($0, $14 - $16 | 0, 1) | 0; //@line 5547
    if (___async) {
     HEAP32[$AsyncCtx3 >> 2] = 326; //@line 5550
     HEAP32[$AsyncCtx3 + 4 >> 2] = $0; //@line 5552
     HEAP32[$AsyncCtx3 + 8 >> 2] = $3; //@line 5554
     HEAP32[$AsyncCtx3 + 12 >> 2] = $1; //@line 5556
     HEAP32[$AsyncCtx3 + 16 >> 2] = $15; //@line 5558
     HEAP32[$AsyncCtx3 + 20 >> 2] = $13; //@line 5560
     sp = STACKTOP; //@line 5561
     return 0; //@line 5562
    } else {
     _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5564
     break;
    }
   }
  } while (0);
  HEAP32[$0 + 16 >> 2] = 0; //@line 5570
  HEAP32[$3 >> 2] = 0; //@line 5571
  HEAP32[$1 >> 2] = 0; //@line 5572
  HEAP32[$15 >> 2] = 0; //@line 5573
  HEAP32[$13 >> 2] = 0; //@line 5574
  $$0 = 0; //@line 5575
 }
 return $$0 | 0; //@line 5577
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 17199
 STACKTOP = STACKTOP + 32 | 0; //@line 17200
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 17200
 $$byval_copy = sp; //@line 17201
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17203
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17205
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17207
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17209
 dest = $AsyncRetVal; //@line 17210
 stop = dest + 76 | 0; //@line 17210
 do {
  HEAP32[dest >> 2] = 0; //@line 17210
  dest = dest + 4 | 0; //@line 17210
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 17211
 HEAP32[$2 >> 2] = 0; //@line 17212
 HEAP32[$2 + 4 >> 2] = 0; //@line 17212
 HEAP32[$2 + 8 >> 2] = 0; //@line 17212
 HEAP32[$2 + 12 >> 2] = 0; //@line 17212
 HEAP32[$2 + 16 >> 2] = 0; //@line 17212
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 17213
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 17213
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 17213
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 17213
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 17213
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 17214
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 17215
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 17219
  STACKTOP = sp; //@line 17220
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 17222
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 17224
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 17226
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 17227
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 17228
 _wait_ms(1); //@line 17229
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 48; //@line 17232
  sp = STACKTOP; //@line 17233
  STACKTOP = sp; //@line 17234
  return;
 }
 ___async_unwind = 0; //@line 17236
 HEAP32[$ReallocAsyncCtx2 >> 2] = 48; //@line 17237
 sp = STACKTOP; //@line 17238
 STACKTOP = sp; //@line 17239
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 16829
 STACKTOP = STACKTOP + 32 | 0; //@line 16830
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 16830
 $$byval_copy = sp; //@line 16831
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16833
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16835
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16837
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 16839
 dest = $AsyncRetVal; //@line 16840
 stop = dest + 76 | 0; //@line 16840
 do {
  HEAP32[dest >> 2] = 0; //@line 16840
  dest = dest + 4 | 0; //@line 16840
 } while ((dest | 0) < (stop | 0));
 $8 = $AsyncRetVal + 12 | 0; //@line 16841
 HEAP32[$2 >> 2] = 0; //@line 16842
 HEAP32[$2 + 4 >> 2] = 0; //@line 16842
 HEAP32[$2 + 8 >> 2] = 0; //@line 16842
 HEAP32[$2 + 12 >> 2] = 0; //@line 16842
 HEAP32[$2 + 16 >> 2] = 0; //@line 16842
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 16843
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 16843
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 16843
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 16843
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 16843
 __ZN13SocketAddressC2E10nsapi_addrt($8, $$byval_copy, 0); //@line 16844
 $9 = _emscripten_asm_const_ii(3, $4 | 0) | 0; //@line 16845
 if (($9 | 0) == -1) {
  HEAP32[___async_retval >> 2] = -3001; //@line 16849
  STACKTOP = sp; //@line 16850
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = $9; //@line 16852
 HEAP8[$AsyncRetVal + 8 >> 0] = 0; //@line 16854
 HEAP32[$AsyncRetVal + 4 >> 2] = $4; //@line 16856
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 16857
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16858
 _wait_ms(1); //@line 16859
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 35; //@line 16862
  sp = STACKTOP; //@line 16863
  STACKTOP = sp; //@line 16864
  return;
 }
 ___async_unwind = 0; //@line 16866
 HEAP32[$ReallocAsyncCtx2 >> 2] = 35; //@line 16867
 sp = STACKTOP; //@line 16868
 STACKTOP = sp; //@line 16869
 return;
}
function __ZN6Socket5closeEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$pre = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $21 = 0, $4 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, $AsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 4390
 $1 = $0 + 8 | 0; //@line 4391
 $2 = HEAP32[$1 >> 2] | 0; //@line 4392
 $$pre = $0 + 4 | 0; //@line 4394
 do {
  if (!$2) {
   $$0 = 0; //@line 4397
  } else {
   $4 = HEAP32[$$pre >> 2] | 0; //@line 4399
   $7 = HEAP32[(HEAP32[$4 >> 2] | 0) + 84 >> 2] | 0; //@line 4402
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4403
   FUNCTION_TABLE_viiii[$7 & 7]($4, $2, 0, 0); //@line 4404
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 131; //@line 4407
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4409
    HEAP32[$AsyncCtx + 8 >> 2] = $$pre; //@line 4411
    HEAP32[$AsyncCtx + 12 >> 2] = $0; //@line 4413
    sp = STACKTOP; //@line 4414
    return 0; //@line 4415
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4417
   $11 = HEAP32[$1 >> 2] | 0; //@line 4418
   HEAP32[$1 >> 2] = 0; //@line 4419
   $12 = HEAP32[$$pre >> 2] | 0; //@line 4420
   $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 48 >> 2] | 0; //@line 4423
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4424
   $16 = FUNCTION_TABLE_iii[$15 & 15]($12, $11) | 0; //@line 4425
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 132; //@line 4428
    HEAP32[$AsyncCtx2 + 4 >> 2] = $$pre; //@line 4430
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4432
    sp = STACKTOP; //@line 4433
    return 0; //@line 4434
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4436
    $$0 = $16; //@line 4437
    break;
   }
  }
 } while (0);
 HEAP32[$$pre >> 2] = 0; //@line 4442
 $21 = HEAP32[(HEAP32[$0 >> 2] | 0) + 12 >> 2] | 0; //@line 4445
 $AsyncCtx5 = _emscripten_alloc_async_context(8, sp) | 0; //@line 4446
 FUNCTION_TABLE_vi[$21 & 511]($0); //@line 4447
 if (___async) {
  HEAP32[$AsyncCtx5 >> 2] = 133; //@line 4450
  HEAP32[$AsyncCtx5 + 4 >> 2] = $$0; //@line 4452
  sp = STACKTOP; //@line 4453
  return 0; //@line 4454
 } else {
  _emscripten_free_async_context($AsyncCtx5 | 0); //@line 4456
  return $$0 | 0; //@line 4457
 }
 return 0; //@line 4459
}
function __ZNK13SocketAddresscvbEv($0) {
 $0 = $0 | 0;
 var $12 = 0;
 switch (HEAP32[$0 + 40 >> 2] | 0) {
 case 1:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 4905
    return $12 | 0; //@line 4906
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 4912
    return $12 | 0; //@line 4913
   }
   if (!(HEAP8[$0 + 46 >> 0] | 0)) {
    return (HEAP8[$0 + 47 >> 0] | 0) != 0 | 0; //@line 4922
   } else {
    $12 = 1; //@line 4924
    return $12 | 0; //@line 4925
   }
   break;
  }
 case 2:
  {
   if (HEAP8[$0 + 44 >> 0] | 0) {
    $12 = 1; //@line 4934
    return $12 | 0; //@line 4935
   }
   if (HEAP8[$0 + 45 >> 0] | 0) {
    $12 = 1; //@line 4941
    return $12 | 0; //@line 4942
   }
   if (HEAP8[$0 + 46 >> 0] | 0) {
    $12 = 1; //@line 4948
    return $12 | 0; //@line 4949
   }
   if (HEAP8[$0 + 47 >> 0] | 0) {
    $12 = 1; //@line 4955
    return $12 | 0; //@line 4956
   }
   if (HEAP8[$0 + 48 >> 0] | 0) {
    $12 = 1; //@line 4962
    return $12 | 0; //@line 4963
   }
   if (HEAP8[$0 + 49 >> 0] | 0) {
    $12 = 1; //@line 4969
    return $12 | 0; //@line 4970
   }
   if (HEAP8[$0 + 50 >> 0] | 0) {
    $12 = 1; //@line 4976
    return $12 | 0; //@line 4977
   }
   if (HEAP8[$0 + 51 >> 0] | 0) {
    $12 = 1; //@line 4983
    return $12 | 0; //@line 4984
   }
   if (HEAP8[$0 + 52 >> 0] | 0) {
    $12 = 1; //@line 4990
    return $12 | 0; //@line 4991
   }
   if (HEAP8[$0 + 53 >> 0] | 0) {
    $12 = 1; //@line 4997
    return $12 | 0; //@line 4998
   }
   if (HEAP8[$0 + 54 >> 0] | 0) {
    $12 = 1; //@line 5004
    return $12 | 0; //@line 5005
   }
   if (HEAP8[$0 + 55 >> 0] | 0) {
    $12 = 1; //@line 5011
    return $12 | 0; //@line 5012
   }
   if (HEAP8[$0 + 56 >> 0] | 0) {
    $12 = 1; //@line 5018
    return $12 | 0; //@line 5019
   }
   if (HEAP8[$0 + 57 >> 0] | 0) {
    $12 = 1; //@line 5025
    return $12 | 0; //@line 5026
   }
   if (HEAP8[$0 + 58 >> 0] | 0) {
    $12 = 1; //@line 5032
    return $12 | 0; //@line 5033
   }
   $12 = (HEAP8[$0 + 59 >> 0] | 0) != 0; //@line 5038
   return $12 | 0; //@line 5039
  }
 default:
  {
   $12 = 0; //@line 5043
   return $12 | 0; //@line 5044
  }
 }
 return 0; //@line 5047
}
function __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $12 = 0, $15 = 0, $6 = 0, $7 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, sp = 0;
 sp = STACKTOP; //@line 1020
 STACKTOP = STACKTOP + 48 | 0; //@line 1021
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 1021
 $vararg_buffer12 = sp + 32 | 0; //@line 1022
 $vararg_buffer8 = sp + 24 | 0; //@line 1023
 $vararg_buffer4 = sp + 16 | 0; //@line 1024
 $vararg_buffer = sp; //@line 1025
 $6 = $4 & 255; //@line 1026
 $7 = $5 & 255; //@line 1027
 HEAP32[$vararg_buffer >> 2] = $2; //@line 1028
 HEAP32[$vararg_buffer + 4 >> 2] = $3; //@line 1030
 HEAP32[$vararg_buffer + 8 >> 2] = $6; //@line 1032
 HEAP32[$vararg_buffer + 12 >> 2] = $7; //@line 1034
 _mbed_tracef(16, 3305, 3310, $vararg_buffer); //@line 1035
 $9 = HEAP32[$0 + 752 >> 2] | 0; //@line 1037
 if (($9 | 0) != ($6 | 0)) {
  HEAP32[$vararg_buffer4 >> 2] = $9; //@line 1040
  HEAP32[$vararg_buffer4 + 4 >> 2] = $6; //@line 1042
  _mbed_tracef(16, 3305, 3351, $vararg_buffer4); //@line 1043
  STACKTOP = sp; //@line 1044
  return;
 }
 $12 = HEAP32[$0 + 756 >> 2] | 0; //@line 1047
 if (($12 | 0) != ($7 | 0)) {
  HEAP32[$vararg_buffer8 >> 2] = $12; //@line 1050
  HEAP32[$vararg_buffer8 + 4 >> 2] = $7; //@line 1052
  _mbed_tracef(16, 3305, 3398, $vararg_buffer8); //@line 1053
  STACKTOP = sp; //@line 1054
  return;
 }
 $15 = HEAP32[$0 + 692 >> 2] | 0; //@line 1057
 if (($15 | 0) == ($3 | 0)) {
  _memcpy($0 + 792 | 0, $1 | 0, $2 | 0) | 0; //@line 1061
  HEAP8[$0 + 782 >> 0] = $2; //@line 1064
  HEAP8[$0 + 781 >> 0] = -35; //@line 1066
  HEAP8[$0 + 780 >> 0] = -5; //@line 1068
  HEAP8[$0 + 783 >> 0] = 1; //@line 1070
  HEAP32[$0 + 784 >> 2] = _emscripten_asm_const_i(8) | 0; //@line 1073
  STACKTOP = sp; //@line 1074
  return;
 } else {
  HEAP32[$vararg_buffer12 >> 2] = $15; //@line 1076
  HEAP32[$vararg_buffer12 + 4 >> 2] = $3; //@line 1078
  _mbed_tracef(16, 3305, 3445, $vararg_buffer12); //@line 1079
  STACKTOP = sp; //@line 1080
  return;
 }
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_74($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 3553
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3555
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3557
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3559
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 3561
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 3563
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 3565
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 3567
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 3569
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 3571
 $21 = $12 + 12 | 0; //@line 3575
 HEAP32[$21 >> 2] = HEAP32[HEAP32[$0 + 40 >> 2] >> 2]; //@line 3576
 $23 = $16 + 4 | 0; //@line 3578
 HEAP32[$23 >> 2] = 0; //@line 3580
 HEAP32[$23 + 4 >> 2] = 0; //@line 3583
 HEAP32[$16 >> 2] = 3; //@line 3584
 $27 = $16 + 12 | 0; //@line 3585
 HEAP32[$27 >> 2] = 752; //@line 3586
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(48) | 0; //@line 3587
 $28 = __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($12, 100, $16) | 0; //@line 3588
 if (!___async) {
  HEAP32[___async_retval >> 2] = $28; //@line 3592
  ___async_unwind = 0; //@line 3593
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 179; //@line 3595
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $2; //@line 3597
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $4; //@line 3599
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $14; //@line 3601
 HEAP32[$ReallocAsyncCtx14 + 16 >> 2] = $6; //@line 3603
 HEAP32[$ReallocAsyncCtx14 + 20 >> 2] = $8; //@line 3605
 HEAP32[$ReallocAsyncCtx14 + 24 >> 2] = $10; //@line 3607
 HEAP32[$ReallocAsyncCtx14 + 28 >> 2] = $18; //@line 3609
 HEAP32[$ReallocAsyncCtx14 + 32 >> 2] = $12; //@line 3611
 HEAP32[$ReallocAsyncCtx14 + 36 >> 2] = $21; //@line 3613
 HEAP32[$ReallocAsyncCtx14 + 40 >> 2] = $16; //@line 3615
 HEAP32[$ReallocAsyncCtx14 + 44 >> 2] = $27; //@line 3617
 sp = STACKTOP; //@line 3618
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7491
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7493
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7495
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7497
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7499
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7501
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 7502
 if (!$AsyncRetVal) {
  return;
 }
 HEAP32[$AsyncRetVal >> 2] = HEAP32[$4 >> 2]; //@line 7507
 HEAP32[$AsyncRetVal + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 7507
 HEAP32[$AsyncRetVal + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 7507
 HEAP32[$AsyncRetVal + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 7507
 HEAP32[$AsyncRetVal + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 7507
 $12 = (_strlen($6) | 0) + 1 | 0; //@line 7509
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(20) | 0; //@line 7510
 $13 = __ZnajRKSt9nothrow_t($12, 9717) | 0; //@line 7511
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 163; //@line 7514
  $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 7515
  HEAP32[$14 >> 2] = $AsyncRetVal; //@line 7516
  $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 7517
  HEAP32[$15 >> 2] = $6; //@line 7518
  $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 7519
  HEAP32[$16 >> 2] = $8; //@line 7520
  $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 7521
  HEAP32[$17 >> 2] = $2; //@line 7522
  sp = STACKTOP; //@line 7523
  return;
 }
 HEAP32[___async_retval >> 2] = $13; //@line 7527
 ___async_unwind = 0; //@line 7528
 HEAP32[$ReallocAsyncCtx2 >> 2] = 163; //@line 7529
 $14 = $ReallocAsyncCtx2 + 4 | 0; //@line 7530
 HEAP32[$14 >> 2] = $AsyncRetVal; //@line 7531
 $15 = $ReallocAsyncCtx2 + 8 | 0; //@line 7532
 HEAP32[$15 >> 2] = $6; //@line 7533
 $16 = $ReallocAsyncCtx2 + 12 | 0; //@line 7534
 HEAP32[$16 >> 2] = $8; //@line 7535
 $17 = $ReallocAsyncCtx2 + 16 | 0; //@line 7536
 HEAP32[$17 >> 2] = $2; //@line 7537
 sp = STACKTOP; //@line 7538
 return;
}
function _main__async_cb_62($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 1085
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1087
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1089
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1091
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1093
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1095
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1097
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 1099
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 1101
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 1103
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 1105
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 1107
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 1109
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 1111
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1113
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(60) | 0; //@line 1114
 $28 = __ZN17EthernetInterface15get_mac_addressEv(788) | 0; //@line 1115
 if (!___async) {
  HEAP32[___async_retval >> 2] = $28; //@line 1119
  ___async_unwind = 0; //@line 1120
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 308; //@line 1122
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 1124
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 1126
 HEAP32[$ReallocAsyncCtx11 + 12 >> 2] = $6; //@line 1128
 HEAP32[$ReallocAsyncCtx11 + 16 >> 2] = $8; //@line 1130
 HEAP32[$ReallocAsyncCtx11 + 20 >> 2] = $10; //@line 1132
 HEAP32[$ReallocAsyncCtx11 + 24 >> 2] = $12; //@line 1134
 HEAP32[$ReallocAsyncCtx11 + 28 >> 2] = $14; //@line 1136
 HEAP32[$ReallocAsyncCtx11 + 32 >> 2] = $AsyncRetVal; //@line 1138
 HEAP32[$ReallocAsyncCtx11 + 36 >> 2] = $16; //@line 1140
 HEAP32[$ReallocAsyncCtx11 + 40 >> 2] = $18; //@line 1142
 HEAP32[$ReallocAsyncCtx11 + 44 >> 2] = $20; //@line 1144
 HEAP32[$ReallocAsyncCtx11 + 48 >> 2] = $22; //@line 1146
 HEAP32[$ReallocAsyncCtx11 + 52 >> 2] = $24; //@line 1148
 HEAP32[$ReallocAsyncCtx11 + 56 >> 2] = $26; //@line 1150
 sp = STACKTOP; //@line 1151
 return;
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 5104
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5106
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5108
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5110
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5112
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5114
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5116
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 5120
  return;
 }
 $13 = $2 + 12 | 0; //@line 5123
 dest = $13; //@line 5124
 src = $4; //@line 5124
 stop = dest + 60 | 0; //@line 5124
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 5124
  dest = dest + 4 | 0; //@line 5124
  src = src + 4 | 0; //@line 5124
 } while ((dest | 0) < (stop | 0));
 HEAP16[$13 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 5124
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 5125
 _wait_ms(1); //@line 5126
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 42; //@line 5129
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 5130
  HEAP32[$14 >> 2] = $6; //@line 5131
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 5132
  HEAP32[$15 >> 2] = $2; //@line 5133
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 5134
  HEAP32[$16 >> 2] = $8; //@line 5135
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 5136
  HEAP32[$17 >> 2] = $10; //@line 5137
  sp = STACKTOP; //@line 5138
  return;
 }
 ___async_unwind = 0; //@line 5141
 HEAP32[$ReallocAsyncCtx4 >> 2] = 42; //@line 5142
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 5143
 HEAP32[$14 >> 2] = $6; //@line 5144
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 5145
 HEAP32[$15 >> 2] = $2; //@line 5146
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 5147
 HEAP32[$16 >> 2] = $8; //@line 5148
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 5149
 HEAP32[$17 >> 2] = $10; //@line 5150
 sp = STACKTOP; //@line 5151
 return;
}
function ___strchrnul($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $2 = 0, $24 = 0, $25 = 0, $31 = 0, $38 = 0, $39 = 0, $7 = 0;
 $2 = $1 & 255; //@line 5258
 L1 : do {
  if (!$2) {
   $$0 = $0 + (_strlen($0) | 0) | 0; //@line 5264
  } else {
   if (!($0 & 3)) {
    $$030$lcssa = $0; //@line 5270
   } else {
    $7 = $1 & 255; //@line 5272
    $$03039 = $0; //@line 5273
    while (1) {
     $10 = HEAP8[$$03039 >> 0] | 0; //@line 5275
     if ($10 << 24 >> 24 == 0 ? 1 : $10 << 24 >> 24 == $7 << 24 >> 24) {
      $$0 = $$03039; //@line 5280
      break L1;
     }
     $13 = $$03039 + 1 | 0; //@line 5283
     if (!($13 & 3)) {
      $$030$lcssa = $13; //@line 5288
      break;
     } else {
      $$03039 = $13; //@line 5291
     }
    }
   }
   $17 = Math_imul($2, 16843009) | 0; //@line 5295
   $18 = HEAP32[$$030$lcssa >> 2] | 0; //@line 5296
   L10 : do {
    if (!(($18 & -2139062144 ^ -2139062144) & $18 + -16843009)) {
     $$02936 = $$030$lcssa; //@line 5304
     $25 = $18; //@line 5304
     while (1) {
      $24 = $25 ^ $17; //@line 5306
      if (($24 & -2139062144 ^ -2139062144) & $24 + -16843009 | 0) {
       $$029$lcssa = $$02936; //@line 5313
       break L10;
      }
      $31 = $$02936 + 4 | 0; //@line 5316
      $25 = HEAP32[$31 >> 2] | 0; //@line 5317
      if (($25 & -2139062144 ^ -2139062144) & $25 + -16843009 | 0) {
       $$029$lcssa = $31; //@line 5326
       break;
      } else {
       $$02936 = $31; //@line 5324
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa; //@line 5331
    }
   } while (0);
   $38 = $1 & 255; //@line 5334
   $$1 = $$029$lcssa; //@line 5335
   while (1) {
    $39 = HEAP8[$$1 >> 0] | 0; //@line 5337
    if ($39 << 24 >> 24 == 0 ? 1 : $39 << 24 >> 24 == $38 << 24 >> 24) {
     $$0 = $$1; //@line 5343
     break;
    } else {
     $$1 = $$1 + 1 | 0; //@line 5346
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 5351
}
function __ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_101($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 6354
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6356
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6358
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6360
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6362
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6364
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6366
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 6368
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 6370
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 6372
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 6374
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 6376
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 6378
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 6380
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(56) | 0; //@line 6381
 $27 = __ZN9UDPSocket8recvfromEP13SocketAddressPvj($24, 0, $2, 512) | 0; //@line 6382
 if (!___async) {
  HEAP32[___async_retval >> 2] = $27; //@line 6386
  ___async_unwind = 0; //@line 6387
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 256; //@line 6389
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 6391
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 6393
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 6395
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 6397
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $10; //@line 6399
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $12; //@line 6401
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $14; //@line 6403
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $16; //@line 6405
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $18; //@line 6407
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $20; //@line 6409
 HEAP32[$ReallocAsyncCtx6 + 44 >> 2] = $22; //@line 6411
 HEAP32[$ReallocAsyncCtx6 + 48 >> 2] = $24; //@line 6413
 HEAP32[$ReallocAsyncCtx6 + 52 >> 2] = $26; //@line 6415
 sp = STACKTOP; //@line 6416
 return;
}
function ___shgetc($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert29 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $21 = 0, $26 = 0, $27 = 0, $29 = 0, $35 = 0, $36 = 0, $7 = 0, label = 0;
 $1 = $0 + 104 | 0; //@line 6584
 $2 = HEAP32[$1 >> 2] | 0; //@line 6585
 if (!$2) {
  label = 3; //@line 6588
 } else {
  if ((HEAP32[$0 + 108 >> 2] | 0) < ($2 | 0)) {
   label = 3; //@line 6594
  } else {
   label = 4; //@line 6596
  }
 }
 if ((label | 0) == 3) {
  $7 = ___uflow($0) | 0; //@line 6600
  if (($7 | 0) < 0) {
   label = 4; //@line 6603
  } else {
   $10 = HEAP32[$1 >> 2] | 0; //@line 6605
   $$phi$trans$insert = $0 + 8 | 0; //@line 6607
   if (!$10) {
    $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6609
    $$sink = $$pre; //@line 6610
    $26 = $$pre; //@line 6610
   } else {
    $12 = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 6612
    $14 = HEAP32[$0 + 4 >> 2] | 0; //@line 6614
    $19 = $10 - (HEAP32[$0 + 108 >> 2] | 0) | 0; //@line 6619
    $21 = $12; //@line 6621
    if (($12 - $14 | 0) < ($19 | 0)) {
     $$sink = $21; //@line 6623
     $26 = $21; //@line 6623
    } else {
     $$sink = $14 + ($19 + -1) | 0; //@line 6627
     $26 = $21; //@line 6627
    }
   }
   HEAP32[$0 + 100 >> 2] = $$sink; //@line 6631
   $$phi$trans$insert29 = $0 + 4 | 0; //@line 6633
   if (!$26) {
    $36 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6636
   } else {
    $27 = HEAP32[$$phi$trans$insert29 >> 2] | 0; //@line 6638
    $29 = $0 + 108 | 0; //@line 6640
    HEAP32[$29 >> 2] = $26 + 1 - $27 + (HEAP32[$29 >> 2] | 0); //@line 6645
    $36 = $27; //@line 6647
   }
   $35 = $36 + -1 | 0; //@line 6649
   if (($7 | 0) == (HEAPU8[$35 >> 0] | 0 | 0)) {
    $$0 = $7; //@line 6654
   } else {
    HEAP8[$35 >> 0] = $7; //@line 6657
    $$0 = $7; //@line 6658
   }
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$0 + 100 >> 2] = 0; //@line 6664
  $$0 = -1; //@line 6665
 }
 return $$0 | 0; //@line 6667
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_205($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 16220
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16224
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16226
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16228
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16230
 $11 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16231
 if ($11 | 0) {
  $14 = HEAP32[$11 + 8 >> 2] | 0; //@line 16235
  $ReallocAsyncCtx10 = _emscripten_realloc_async_context(16) | 0; //@line 16236
  FUNCTION_TABLE_vi[$14 & 511]($8); //@line 16237
  if (___async) {
   HEAP32[$ReallocAsyncCtx10 >> 2] = 230; //@line 16240
   $15 = $ReallocAsyncCtx10 + 4 | 0; //@line 16241
   HEAP32[$15 >> 2] = $4; //@line 16242
   $16 = $ReallocAsyncCtx10 + 8 | 0; //@line 16243
   HEAP32[$16 >> 2] = $6; //@line 16244
   $17 = $ReallocAsyncCtx10 + 12 | 0; //@line 16245
   HEAP32[$17 >> 2] = $10; //@line 16246
   sp = STACKTOP; //@line 16247
   return;
  }
  ___async_unwind = 0; //@line 16250
  HEAP32[$ReallocAsyncCtx10 >> 2] = 230; //@line 16251
  $15 = $ReallocAsyncCtx10 + 4 | 0; //@line 16252
  HEAP32[$15 >> 2] = $4; //@line 16253
  $16 = $ReallocAsyncCtx10 + 8 | 0; //@line 16254
  HEAP32[$16 >> 2] = $6; //@line 16255
  $17 = $ReallocAsyncCtx10 + 12 | 0; //@line 16256
  HEAP32[$17 >> 2] = $10; //@line 16257
  sp = STACKTOP; //@line 16258
  return;
 }
 HEAP32[$4 >> 2] = $6; //@line 16261
 $18 = HEAP32[$10 >> 2] | 0; //@line 16262
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 16263
 __ZL26nsapi_dns_query_async_sendPv($18); //@line 16264
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 16267
  sp = STACKTOP; //@line 16268
  return;
 }
 ___async_unwind = 0; //@line 16271
 HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 16272
 sp = STACKTOP; //@line 16273
 return;
}
function ___fwritex($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$038 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $28 = 0, $3 = 0, $31 = 0, $4 = 0, $9 = 0, label = 0;
 $3 = $2 + 16 | 0; //@line 5000
 $4 = HEAP32[$3 >> 2] | 0; //@line 5001
 if (!$4) {
  if (!(___towrite($2) | 0)) {
   $12 = HEAP32[$3 >> 2] | 0; //@line 5008
   label = 5; //@line 5009
  } else {
   $$1 = 0; //@line 5011
  }
 } else {
  $12 = $4; //@line 5015
  label = 5; //@line 5016
 }
 L5 : do {
  if ((label | 0) == 5) {
   $9 = $2 + 20 | 0; //@line 5020
   $10 = HEAP32[$9 >> 2] | 0; //@line 5021
   $14 = $10; //@line 5024
   if (($12 - $10 | 0) >>> 0 < $1 >>> 0) {
    $$1 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $1) | 0; //@line 5029
    break;
   }
   L10 : do {
    if ((HEAP8[$2 + 75 >> 0] | 0) > -1) {
     $$038 = $1; //@line 5037
     while (1) {
      if (!$$038) {
       $$139 = 0; //@line 5041
       $$141 = $0; //@line 5041
       $$143 = $1; //@line 5041
       $31 = $14; //@line 5041
       break L10;
      }
      $22 = $$038 + -1 | 0; //@line 5044
      if ((HEAP8[$0 + $22 >> 0] | 0) == 10) {
       break;
      } else {
       $$038 = $22; //@line 5051
      }
     }
     $28 = FUNCTION_TABLE_iiii[HEAP32[$2 + 36 >> 2] & 31]($2, $0, $$038) | 0; //@line 5056
     if ($28 >>> 0 < $$038 >>> 0) {
      $$1 = $28; //@line 5059
      break L5;
     }
     $$139 = $$038; //@line 5065
     $$141 = $0 + $$038 | 0; //@line 5065
     $$143 = $1 - $$038 | 0; //@line 5065
     $31 = HEAP32[$9 >> 2] | 0; //@line 5065
    } else {
     $$139 = 0; //@line 5067
     $$141 = $0; //@line 5067
     $$143 = $1; //@line 5067
     $31 = $14; //@line 5067
    }
   } while (0);
   _memcpy($31 | 0, $$141 | 0, $$143 | 0) | 0; //@line 5070
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + $$143; //@line 5073
   $$1 = $$139 + $$143 | 0; //@line 5075
  }
 } while (0);
 return $$1 | 0; //@line 5078
}
function _main__async_cb_52($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx6 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 556
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 558
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 560
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 562
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 564
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 566
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 568
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 570
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 572
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 574
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 576
 dest = $AsyncRetVal; //@line 577
 src = 4156; //@line 577
 stop = dest + 40 | 0; //@line 577
 do {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 577
  dest = dest + 1 | 0; //@line 577
  src = src + 1 | 0; //@line 577
 } while ((dest | 0) < (stop | 0));
 $20 = _strlen($AsyncRetVal) | 0; //@line 578
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(44) | 0; //@line 579
 $21 = __ZN9TCPSocket4sendEPKvj($2, $AsyncRetVal, $20) | 0; //@line 580
 if (!___async) {
  HEAP32[___async_retval >> 2] = $21; //@line 584
  ___async_unwind = 0; //@line 585
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 313; //@line 587
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $AsyncRetVal; //@line 589
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 591
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 593
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $2; //@line 595
 HEAP32[$ReallocAsyncCtx6 + 20 >> 2] = $8; //@line 597
 HEAP32[$ReallocAsyncCtx6 + 24 >> 2] = $10; //@line 599
 HEAP32[$ReallocAsyncCtx6 + 28 >> 2] = $12; //@line 601
 HEAP32[$ReallocAsyncCtx6 + 32 >> 2] = $14; //@line 603
 HEAP32[$ReallocAsyncCtx6 + 36 >> 2] = $16; //@line 605
 HEAP32[$ReallocAsyncCtx6 + 40 >> 2] = $18; //@line 607
 sp = STACKTOP; //@line 608
 return;
}
function _main__async_cb_54($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $27 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 636
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 638
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 640
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 642
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 644
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 646
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 648
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 650
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 652
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 654
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 656
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 658
 $24 = HEAP32[$0 + 48 >> 2] | 0; //@line 660
 $26 = HEAP32[$0 + 52 >> 2] | 0; //@line 662
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(56) | 0; //@line 663
 $27 = __ZN17EthernetInterface14get_ip_addressEv(788) | 0; //@line 664
 if (!___async) {
  HEAP32[___async_retval >> 2] = $27; //@line 668
  ___async_unwind = 0; //@line 669
 }
 HEAP32[$ReallocAsyncCtx12 >> 2] = 307; //@line 671
 HEAP32[$ReallocAsyncCtx12 + 4 >> 2] = $2; //@line 673
 HEAP32[$ReallocAsyncCtx12 + 8 >> 2] = $4; //@line 675
 HEAP32[$ReallocAsyncCtx12 + 12 >> 2] = $6; //@line 677
 HEAP32[$ReallocAsyncCtx12 + 16 >> 2] = $8; //@line 679
 HEAP32[$ReallocAsyncCtx12 + 20 >> 2] = $10; //@line 681
 HEAP32[$ReallocAsyncCtx12 + 24 >> 2] = $12; //@line 683
 HEAP32[$ReallocAsyncCtx12 + 28 >> 2] = $14; //@line 685
 HEAP32[$ReallocAsyncCtx12 + 32 >> 2] = $16; //@line 687
 HEAP32[$ReallocAsyncCtx12 + 36 >> 2] = $18; //@line 689
 HEAP32[$ReallocAsyncCtx12 + 40 >> 2] = $20; //@line 691
 HEAP32[$ReallocAsyncCtx12 + 44 >> 2] = $22; //@line 693
 HEAP32[$ReallocAsyncCtx12 + 48 >> 2] = $24; //@line 695
 HEAP32[$ReallocAsyncCtx12 + 52 >> 2] = $26; //@line 697
 sp = STACKTOP; //@line 698
 return;
}
function _main__async_cb_55($0) {
 $0 = $0 | 0;
 var $10 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $22 = 0, $24 = 0, $28 = 0, $29 = 0, $30 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 705
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 707
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 709
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 711
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 715
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 719
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 721
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 723
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 725
 $22 = (_strstr($2, 4196) | 0) - $4 | 0; //@line 728
 HEAP32[$6 >> 2] = $AsyncRetVal; //@line 729
 HEAP32[$6 + 4 >> 2] = $22; //@line 731
 HEAP32[$6 + 8 >> 2] = $2; //@line 733
 _printf(4215, $6) | 0; //@line 734
 $24 = (_strstr($2, 4231) | 0) + 4 | 0; //@line 736
 HEAP32[$10 >> 2] = $AsyncRetVal + $4 - $24; //@line 740
 HEAP32[$10 + 4 >> 2] = $24; //@line 742
 _printf(4236, $10) | 0; //@line 743
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(16) | 0; //@line 744
 __ZN6Socket5closeEv($14) | 0; //@line 745
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 315; //@line 748
  $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 749
  HEAP32[$28 >> 2] = $2; //@line 750
  $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 751
  HEAP32[$29 >> 2] = $16; //@line 752
  $30 = $ReallocAsyncCtx9 + 12 | 0; //@line 753
  HEAP32[$30 >> 2] = $18; //@line 754
  sp = STACKTOP; //@line 755
  return;
 }
 ___async_unwind = 0; //@line 758
 HEAP32[$ReallocAsyncCtx9 >> 2] = 315; //@line 759
 $28 = $ReallocAsyncCtx9 + 4 | 0; //@line 760
 HEAP32[$28 >> 2] = $2; //@line 761
 $29 = $ReallocAsyncCtx9 + 8 | 0; //@line 762
 HEAP32[$29 >> 2] = $16; //@line 763
 $30 = $ReallocAsyncCtx9 + 12 | 0; //@line 764
 HEAP32[$30 >> 2] = $18; //@line 765
 sp = STACKTOP; //@line 766
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_169($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14288
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14292
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14294
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14296
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14298
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14300
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14302
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 14304
 $18 = HEAP8[$0 + 36 >> 0] & 1; //@line 14307
 $25 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 14308
 do {
  if ($25 >>> 0 < $4 >>> 0) {
   if (!(HEAP8[$6 >> 0] | 0)) {
    if ((HEAP32[$8 >> 2] | 0) == 1) {
     if ((HEAP32[$10 >> 2] | 0) == 1) {
      break;
     }
    }
    $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 14324
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($25, $12, $14, $16, $18); //@line 14325
    if (!___async) {
     ___async_unwind = 0; //@line 14328
    }
    HEAP32[$ReallocAsyncCtx2 >> 2] = 359; //@line 14330
    HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $25; //@line 14332
    HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 14334
    HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 14336
    HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 14338
    HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 14340
    HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 14342
    HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 14344
    HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 14346
    HEAP8[$ReallocAsyncCtx2 + 36 >> 0] = $18 & 1; //@line 14349
    sp = STACKTOP; //@line 14350
    return;
   }
  }
 } while (0);
 return;
}
function _strcspn($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$01824 = 0, $$019$sink = 0, $$01922 = 0, $10 = 0, $12 = 0, $15 = 0, $19 = 0, $2 = 0, $25 = 0, $3 = 0, $34 = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13798
 STACKTOP = STACKTOP + 32 | 0; //@line 13799
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 13799
 $2 = sp; //@line 13800
 $3 = HEAP8[$1 >> 0] | 0; //@line 13801
 L1 : do {
  if (!($3 << 24 >> 24)) {
   label = 3; //@line 13805
  } else {
   if (!(HEAP8[$1 + 1 >> 0] | 0)) {
    label = 3; //@line 13811
   } else {
    _memset($2 | 0, 0, 32) | 0; //@line 13813
    $10 = HEAP8[$1 >> 0] | 0; //@line 13814
    if ($10 << 24 >> 24) {
     $$01824 = $1; //@line 13817
     $15 = $10; //@line 13817
     do {
      $19 = $2 + ((($15 & 255) >>> 5 & 255) << 2) | 0; //@line 13824
      HEAP32[$19 >> 2] = HEAP32[$19 >> 2] | 1 << ($15 & 31); //@line 13827
      $$01824 = $$01824 + 1 | 0; //@line 13828
      $15 = HEAP8[$$01824 >> 0] | 0; //@line 13829
     } while ($15 << 24 >> 24 != 0);
    }
    $12 = HEAP8[$0 >> 0] | 0; //@line 13838
    if (!($12 << 24 >> 24)) {
     $$019$sink = $0; //@line 13841
    } else {
     $$01922 = $0; //@line 13843
     $25 = $12; //@line 13843
     while (1) {
      if (HEAP32[$2 + ((($25 & 255) >>> 5 & 255) << 2) >> 2] & 1 << ($25 & 31) | 0) {
       $$019$sink = $$01922; //@line 13855
       break L1;
      }
      $34 = $$01922 + 1 | 0; //@line 13858
      $25 = HEAP8[$34 >> 0] | 0; //@line 13859
      if (!($25 << 24 >> 24)) {
       $$019$sink = $34; //@line 13862
       break;
      } else {
       $$01922 = $34; //@line 13865
      }
     }
    }
   }
  }
 } while (0);
 if ((label | 0) == 3) {
  $$019$sink = ___strchrnul($0, $3 << 24 >> 24) | 0; //@line 13875
 }
 STACKTOP = sp; //@line 13880
 return $$019$sink - $0 | 0; //@line 13880
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 12680
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12684
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12686
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12688
 $9 = $4 + 12 | 0; //@line 12690
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 12691
 $11 = HEAP32[$6 + 16 >> 2] | 0; //@line 12693
 HEAP32[$8 + 8 >> 2] = 0; //@line 12695
 HEAP32[$8 >> 2] = 239; //@line 12696
 HEAP32[$8 + 4 >> 2] = $11; //@line 12698
 $13 = $8 + 12 | 0; //@line 12699
 HEAP32[$13 >> 2] = 776; //@line 12700
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 12701
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 12702
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 240; //@line 12705
  $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 12706
  HEAP32[$14 >> 2] = $13; //@line 12707
  $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 12708
  HEAP32[$15 >> 2] = $9; //@line 12709
  $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 12710
  HEAP32[$16 >> 2] = $8; //@line 12711
  $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 12712
  HEAP32[$17 >> 2] = $4; //@line 12713
  sp = STACKTOP; //@line 12714
  return;
 }
 ___async_unwind = 0; //@line 12717
 HEAP32[$ReallocAsyncCtx4 >> 2] = 240; //@line 12718
 $14 = $ReallocAsyncCtx4 + 4 | 0; //@line 12719
 HEAP32[$14 >> 2] = $13; //@line 12720
 $15 = $ReallocAsyncCtx4 + 8 | 0; //@line 12721
 HEAP32[$15 >> 2] = $9; //@line 12722
 $16 = $ReallocAsyncCtx4 + 12 | 0; //@line 12723
 HEAP32[$16 >> 2] = $8; //@line 12724
 $17 = $ReallocAsyncCtx4 + 16 | 0; //@line 12725
 HEAP32[$17 >> 2] = $4; //@line 12726
 sp = STACKTOP; //@line 12727
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 16883
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16887
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16889
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16891
 $9 = $4 + 12 | 0; //@line 16893
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 16894
 $10 = HEAP32[$6 >> 2] | 0; //@line 16895
 HEAP32[$8 + 8 >> 2] = 0; //@line 16897
 HEAP32[$8 >> 2] = 208; //@line 16898
 HEAP32[$8 + 4 >> 2] = $10; //@line 16900
 $12 = $8 + 12 | 0; //@line 16901
 HEAP32[$12 >> 2] = 764; //@line 16902
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(20) | 0; //@line 16903
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 0, $8) | 0; //@line 16904
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 209; //@line 16907
  $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 16908
  HEAP32[$13 >> 2] = $12; //@line 16909
  $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 16910
  HEAP32[$14 >> 2] = $9; //@line 16911
  $15 = $ReallocAsyncCtx4 + 12 | 0; //@line 16912
  HEAP32[$15 >> 2] = $8; //@line 16913
  $16 = $ReallocAsyncCtx4 + 16 | 0; //@line 16914
  HEAP32[$16 >> 2] = $4; //@line 16915
  sp = STACKTOP; //@line 16916
  return;
 }
 ___async_unwind = 0; //@line 16919
 HEAP32[$ReallocAsyncCtx4 >> 2] = 209; //@line 16920
 $13 = $ReallocAsyncCtx4 + 4 | 0; //@line 16921
 HEAP32[$13 >> 2] = $12; //@line 16922
 $14 = $ReallocAsyncCtx4 + 8 | 0; //@line 16923
 HEAP32[$14 >> 2] = $9; //@line 16924
 $15 = $ReallocAsyncCtx4 + 12 | 0; //@line 16925
 HEAP32[$15 >> 2] = $8; //@line 16926
 $16 = $ReallocAsyncCtx4 + 16 | 0; //@line 16927
 HEAP32[$16 >> 2] = $4; //@line 16928
 sp = STACKTOP; //@line 16929
 return;
}
function _main__async_cb_56($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $24 = 0, $25 = 0, $26 = 0, $4 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 774
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 776
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 778
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 782
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 784
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 786
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 788
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 790
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 792
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 794
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 796
 $24 = $2; //@line 799
 $25 = (_strstr($2, 4196) | 0) - $24 | 0; //@line 800
 HEAP32[$4 >> 2] = $AsyncRetVal; //@line 801
 HEAP32[$4 + 4 >> 2] = $25; //@line 803
 HEAP32[$4 + 8 >> 2] = $2; //@line 805
 _printf(4199, $4) | 0; //@line 806
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(40) | 0; //@line 807
 $26 = __ZN9TCPSocket4recvEPvj($8, $2, 256) | 0; //@line 808
 if (!___async) {
  HEAP32[___async_retval >> 2] = $26; //@line 812
  ___async_unwind = 0; //@line 813
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 314; //@line 815
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $2; //@line 817
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $24; //@line 819
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $10; //@line 821
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $12; //@line 823
 HEAP32[$ReallocAsyncCtx5 + 20 >> 2] = $14; //@line 825
 HEAP32[$ReallocAsyncCtx5 + 24 >> 2] = $16; //@line 827
 HEAP32[$ReallocAsyncCtx5 + 28 >> 2] = $18; //@line 829
 HEAP32[$ReallocAsyncCtx5 + 32 >> 2] = $8; //@line 831
 HEAP32[$ReallocAsyncCtx5 + 36 >> 2] = $20; //@line 833
 sp = STACKTOP; //@line 834
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_17($0) {
 $0 = $0 | 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 20228
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20232
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 20234
 $7 = $4 + 12 | 0; //@line 20236
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 20237
 $9 = $6 + 4 | 0; //@line 20239
 HEAP32[$9 >> 2] = 0; //@line 20241
 HEAP32[$9 + 4 >> 2] = 0; //@line 20244
 HEAP32[$6 >> 2] = 3; //@line 20245
 $13 = $6 + 12 | 0; //@line 20246
 HEAP32[$13 >> 2] = 752; //@line 20247
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(20) | 0; //@line 20248
 __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2_($4, 100, $6) | 0; //@line 20249
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 20252
  $14 = $ReallocAsyncCtx12 + 4 | 0; //@line 20253
  HEAP32[$14 >> 2] = $13; //@line 20254
  $15 = $ReallocAsyncCtx12 + 8 | 0; //@line 20255
  HEAP32[$15 >> 2] = $7; //@line 20256
  $16 = $ReallocAsyncCtx12 + 12 | 0; //@line 20257
  HEAP32[$16 >> 2] = $6; //@line 20258
  $17 = $ReallocAsyncCtx12 + 16 | 0; //@line 20259
  HEAP32[$17 >> 2] = $4; //@line 20260
  sp = STACKTOP; //@line 20261
  return;
 }
 ___async_unwind = 0; //@line 20264
 HEAP32[$ReallocAsyncCtx12 >> 2] = 198; //@line 20265
 $14 = $ReallocAsyncCtx12 + 4 | 0; //@line 20266
 HEAP32[$14 >> 2] = $13; //@line 20267
 $15 = $ReallocAsyncCtx12 + 8 | 0; //@line 20268
 HEAP32[$15 >> 2] = $7; //@line 20269
 $16 = $ReallocAsyncCtx12 + 12 | 0; //@line 20270
 HEAP32[$16 >> 2] = $6; //@line 20271
 $17 = $ReallocAsyncCtx12 + 16 | 0; //@line 20272
 HEAP32[$17 >> 2] = $4; //@line 20273
 sp = STACKTOP; //@line 20274
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_156($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12768
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12772
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12774
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12776
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12777
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 12781
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 12782
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 12783
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 241; //@line 12786
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 12787
   HEAP32[$13 >> 2] = $4; //@line 12788
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 12789
   HEAP32[$14 >> 2] = $8; //@line 12790
   sp = STACKTOP; //@line 12791
   return;
  }
  ___async_unwind = 0; //@line 12794
  HEAP32[$ReallocAsyncCtx2 >> 2] = 241; //@line 12795
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 12796
  HEAP32[$13 >> 2] = $4; //@line 12797
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 12798
  HEAP32[$14 >> 2] = $8; //@line 12799
  sp = STACKTOP; //@line 12800
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 12803
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 12809
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12810
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 12811
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 242; //@line 12814
  sp = STACKTOP; //@line 12815
  return;
 }
 ___async_unwind = 0; //@line 12818
 HEAP32[$ReallocAsyncCtx3 >> 2] = 242; //@line 12819
 sp = STACKTOP; //@line 12820
 return;
}
function ___overflow($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $12 = 0, $13 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 4886
 STACKTOP = STACKTOP + 16 | 0; //@line 4887
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4887
 $2 = sp; //@line 4888
 $3 = $1 & 255; //@line 4889
 HEAP8[$2 >> 0] = $3; //@line 4890
 $4 = $0 + 16 | 0; //@line 4891
 $5 = HEAP32[$4 >> 2] | 0; //@line 4892
 if (!$5) {
  if (!(___towrite($0) | 0)) {
   $12 = HEAP32[$4 >> 2] | 0; //@line 4899
   label = 4; //@line 4900
  } else {
   $$0 = -1; //@line 4902
  }
 } else {
  $12 = $5; //@line 4905
  label = 4; //@line 4906
 }
 do {
  if ((label | 0) == 4) {
   $9 = $0 + 20 | 0; //@line 4910
   $10 = HEAP32[$9 >> 2] | 0; //@line 4911
   if ($10 >>> 0 < $12 >>> 0) {
    $13 = $1 & 255; //@line 4914
    if (($13 | 0) != (HEAP8[$0 + 75 >> 0] | 0)) {
     HEAP32[$9 >> 2] = $10 + 1; //@line 4921
     HEAP8[$10 >> 0] = $3; //@line 4922
     $$0 = $13; //@line 4923
     break;
    }
   }
   $20 = HEAP32[$0 + 36 >> 2] | 0; //@line 4928
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4929
   $21 = FUNCTION_TABLE_iiii[$20 & 31]($0, $2, 1) | 0; //@line 4930
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 320; //@line 4933
    HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 4935
    sp = STACKTOP; //@line 4936
    STACKTOP = sp; //@line 4937
    return 0; //@line 4937
   }
   _emscripten_free_async_context($AsyncCtx | 0); //@line 4939
   if (($21 | 0) == 1) {
    $$0 = HEAPU8[$2 >> 0] | 0; //@line 4944
   } else {
    $$0 = -1; //@line 4946
   }
  }
 } while (0);
 STACKTOP = sp; //@line 4950
 return $$0 | 0; //@line 4950
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_213($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16970
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16974
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16976
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16978
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16979
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 16983
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 16984
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 16985
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 210; //@line 16988
   $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 16989
   HEAP32[$13 >> 2] = $4; //@line 16990
   $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 16991
   HEAP32[$14 >> 2] = $8; //@line 16992
   sp = STACKTOP; //@line 16993
   return;
  }
  ___async_unwind = 0; //@line 16996
  HEAP32[$ReallocAsyncCtx2 >> 2] = 210; //@line 16997
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 16998
  HEAP32[$13 >> 2] = $4; //@line 16999
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 17000
  HEAP32[$14 >> 2] = $8; //@line 17001
  sp = STACKTOP; //@line 17002
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 17005
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 17011
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 17012
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 17013
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 17016
  sp = STACKTOP; //@line 17017
  return;
 }
 ___async_unwind = 0; //@line 17020
 HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 17021
 sp = STACKTOP; //@line 17022
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_145($0) {
 $0 = $0 | 0;
 var $$011 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $24 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 11946
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11948
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11950
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11952
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11954
 $12 = HEAP32[$0 + 28 >> 2] | 0; //@line 11958
 $14 = HEAP32[$0 + 32 >> 2] | 0; //@line 11960
 $16 = HEAP32[$0 + 36 >> 2] | 0; //@line 11962
 $18 = HEAP32[$0 + 40 >> 2] | 0; //@line 11964
 if (__ZN13SocketAddress14set_ip_addressEPKc($14, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$011 = __ZNK13SocketAddress14get_ip_versionEv($14) | 0; //@line 11970
 } else {
  $$011 = 0; //@line 11972
 }
 $24 = HEAP32[(HEAP32[$12 >> 2] | 0) + 96 >> 2] | 0; //@line 11976
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(40) | 0; //@line 11977
 FUNCTION_TABLE_vii[$24 & 7]($4, $12); //@line 11978
 if (!___async) {
  ___async_unwind = 0; //@line 11981
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 94; //@line 11983
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $2; //@line 11985
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 11987
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 11989
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $4; //@line 11991
 HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $8; //@line 11993
 HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $16; //@line 11995
 HEAP32[$ReallocAsyncCtx3 + 28 >> 2] = $12; //@line 11997
 HEAP32[$ReallocAsyncCtx3 + 32 >> 2] = $18; //@line 11999
 HEAP32[$ReallocAsyncCtx3 + 36 >> 2] = $$011; //@line 12001
 sp = STACKTOP; //@line 12002
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_22($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 21235
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 21239
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 21241
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 21243
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 21244
 if ($9 | 0) {
  $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 21248
  $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 21249
  FUNCTION_TABLE_vi[$12 & 511]($6); //@line 21250
  if (___async) {
   HEAP32[$ReallocAsyncCtx8 >> 2] = 199; //@line 21253
   $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 21254
   HEAP32[$13 >> 2] = $4; //@line 21255
   $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 21256
   HEAP32[$14 >> 2] = $8; //@line 21257
   sp = STACKTOP; //@line 21258
   return;
  }
  ___async_unwind = 0; //@line 21261
  HEAP32[$ReallocAsyncCtx8 >> 2] = 199; //@line 21262
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 21263
  HEAP32[$13 >> 2] = $4; //@line 21264
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 21265
  HEAP32[$14 >> 2] = $8; //@line 21266
  sp = STACKTOP; //@line 21267
  return;
 }
 $15 = HEAP32[$4 >> 2] | 0; //@line 21270
 if (!$15) {
  return;
 }
 $18 = HEAP32[$15 + 8 >> 2] | 0; //@line 21276
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 21277
 FUNCTION_TABLE_vi[$18 & 511]($8); //@line 21278
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 200; //@line 21281
  sp = STACKTOP; //@line 21282
  return;
 }
 ___async_unwind = 0; //@line 21285
 HEAP32[$ReallocAsyncCtx9 >> 2] = 200; //@line 21286
 sp = STACKTOP; //@line 21287
 return;
}
function _fflush__async_cb_216($0) {
 $0 = $0 | 0;
 var $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $13 = 0, $16 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 17128
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17130
 $$02325 = HEAP32[(___ofl_lock() | 0) >> 2] | 0; //@line 17132
 L3 : do {
  if (!$$02325) {
   $$024$lcssa = $AsyncRetVal; //@line 17136
  } else {
   $$02327 = $$02325; //@line 17138
   $$02426 = $AsyncRetVal; //@line 17138
   while (1) {
    if ((HEAP32[$$02327 + 76 >> 2] | 0) > -1) {
     $16 = ___lockfile($$02327) | 0; //@line 17145
    } else {
     $16 = 0; //@line 17147
    }
    if ((HEAP32[$$02327 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327 + 28 >> 2] | 0) >>> 0) {
     break;
    }
    if ($16 | 0) {
     ___unlockfile($$02327); //@line 17159
    }
    $$023 = HEAP32[$$02327 + 56 >> 2] | 0; //@line 17162
    if (!$$023) {
     $$024$lcssa = $$02426; //@line 17165
     break L3;
    } else {
     $$02327 = $$023; //@line 17168
    }
   }
   $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 17171
   $13 = ___fflush_unlocked($$02327) | 0; //@line 17172
   if (!___async) {
    HEAP32[___async_retval >> 2] = $13; //@line 17176
    ___async_unwind = 0; //@line 17177
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 324; //@line 17179
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$02426; //@line 17181
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $16; //@line 17183
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327; //@line 17185
   sp = STACKTOP; //@line 17186
   return;
  }
 } while (0);
 ___ofl_unlock(); //@line 17190
 HEAP32[___async_retval >> 2] = $$024$lcssa; //@line 17192
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $12 = 0, $13 = 0, $16 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4477
 $2 = $0 + 32 | 0; //@line 4478
 if (($2 | 0) == ($1 | 0)) {
  return;
 }
 $4 = $0 + 44 | 0; //@line 4483
 $5 = HEAP32[$4 >> 2] | 0; //@line 4484
 do {
  if ($5 | 0) {
   $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 4489
   $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 4490
   FUNCTION_TABLE_vi[$8 & 511]($2); //@line 4491
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 134; //@line 4494
    HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 4496
    HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 4498
    HEAP32[$AsyncCtx + 12 >> 2] = $2; //@line 4500
    sp = STACKTOP; //@line 4501
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4504
    break;
   }
  }
 } while (0);
 $12 = $1 + 12 | 0; //@line 4509
 $13 = HEAP32[$12 >> 2] | 0; //@line 4510
 do {
  if (!$13) {
   $19 = 0; //@line 4514
  } else {
   $16 = HEAP32[$13 + 4 >> 2] | 0; //@line 4517
   $AsyncCtx3 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4518
   FUNCTION_TABLE_vii[$16 & 7]($2, $1); //@line 4519
   if (___async) {
    HEAP32[$AsyncCtx3 >> 2] = 135; //@line 4522
    HEAP32[$AsyncCtx3 + 4 >> 2] = $12; //@line 4524
    HEAP32[$AsyncCtx3 + 8 >> 2] = $4; //@line 4526
    sp = STACKTOP; //@line 4527
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4530
    $19 = HEAP32[$12 >> 2] | 0; //@line 4532
    break;
   }
  }
 } while (0);
 HEAP32[$4 >> 2] = $19; //@line 4537
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_148($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 12320
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12322
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12324
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12326
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12328
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12330
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12332
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12334
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12336
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12338
 $19 = $12 + 12 | 0; //@line 12340
 HEAP32[$19 >> 2] = HEAP32[$2 >> 2]; //@line 12341
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(32) | 0; //@line 12342
 $20 = __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version($14, $16, $8, $12, $18) | 0; //@line 12343
 if (!___async) {
  HEAP32[___async_retval >> 2] = $20; //@line 12347
  ___async_unwind = 0; //@line 12348
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 97; //@line 12350
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $19; //@line 12352
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $10; //@line 12354
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $12; //@line 12356
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $2; //@line 12358
 HEAP32[$ReallocAsyncCtx9 + 20 >> 2] = $8; //@line 12360
 HEAP32[$ReallocAsyncCtx9 + 24 >> 2] = $6; //@line 12362
 HEAP32[$ReallocAsyncCtx9 + 28 >> 2] = $4; //@line 12364
 sp = STACKTOP; //@line 12365
 return;
}
function __ZN9UDPSocket8recvfromEP13SocketAddressPvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5793
 $4 = $0 + 8 | 0; //@line 5794
 $5 = $0 + 52 | 0; //@line 5795
 $6 = $0 + 4 | 0; //@line 5796
 $7 = $0 + 12 | 0; //@line 5797
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 5799
  if (!$8) {
   $$2 = -3005; //@line 5802
   label = 6; //@line 5803
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 5806
  $10 = HEAP32[$6 >> 2] | 0; //@line 5807
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 80 >> 2] | 0; //@line 5810
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5811
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 5812
  if (___async) {
   label = 4; //@line 5815
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5818
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 5824
   label = 6; //@line 5825
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 154; //@line 5830
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 5832
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5834
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 5836
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 5838
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 5840
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 5842
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 5844
  sp = STACKTOP; //@line 5845
  return 0; //@line 5846
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 5849
 }
 return 0; //@line 5851
}
function __ZN9UDPSocket6sendtoERK13SocketAddressPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$2 = 0, $10 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 5726
 $4 = $0 + 8 | 0; //@line 5727
 $5 = $0 + 52 | 0; //@line 5728
 $6 = $0 + 4 | 0; //@line 5729
 $7 = $0 + 12 | 0; //@line 5730
 while (1) {
  $8 = HEAP32[$4 >> 2] | 0; //@line 5732
  if (!$8) {
   $$2 = -3005; //@line 5735
   label = 6; //@line 5736
   break;
  }
  HEAP32[$5 >> 2] = 0; //@line 5739
  $10 = HEAP32[$6 >> 2] | 0; //@line 5740
  $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 76 >> 2] | 0; //@line 5743
  $AsyncCtx = _emscripten_alloc_async_context(32, sp) | 0; //@line 5744
  $14 = FUNCTION_TABLE_iiiiii[$13 & 7]($10, $8, $1, $2, $3) | 0; //@line 5745
  if (___async) {
   label = 4; //@line 5748
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5751
  if (($14 | 0) != -3001 | (HEAP32[$7 >> 2] | 0) == 0) {
   $$2 = $14; //@line 5757
   label = 6; //@line 5758
   break;
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$AsyncCtx >> 2] = 153; //@line 5763
  HEAP32[$AsyncCtx + 4 >> 2] = $7; //@line 5765
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 5767
  HEAP32[$AsyncCtx + 12 >> 2] = $5; //@line 5769
  HEAP32[$AsyncCtx + 16 >> 2] = $6; //@line 5771
  HEAP32[$AsyncCtx + 20 >> 2] = $1; //@line 5773
  HEAP32[$AsyncCtx + 24 >> 2] = $2; //@line 5775
  HEAP32[$AsyncCtx + 28 >> 2] = $3; //@line 5777
  sp = STACKTOP; //@line 5778
  return 0; //@line 5779
 } else if ((label | 0) == 6) {
  return $$2 | 0; //@line 5782
 }
 return 0; //@line 5784
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $21 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14225
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14229
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14231
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14233
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14235
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14237
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 14239
 $16 = HEAP8[$0 + 32 >> 0] & 1; //@line 14242
 $21 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 14243
 if ($21 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   if ((HEAP32[$8 >> 2] | 0) != 1) {
    $ReallocAsyncCtx = _emscripten_realloc_async_context(36) | 0; //@line 14252
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($21, $10, $12, $14, $16); //@line 14253
    if (!___async) {
     ___async_unwind = 0; //@line 14256
    }
    HEAP32[$ReallocAsyncCtx >> 2] = 360; //@line 14258
    HEAP32[$ReallocAsyncCtx + 4 >> 2] = $21; //@line 14260
    HEAP32[$ReallocAsyncCtx + 8 >> 2] = $4; //@line 14262
    HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 14264
    HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 14266
    HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 14268
    HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 14270
    HEAP32[$ReallocAsyncCtx + 28 >> 2] = $14; //@line 14272
    HEAP8[$ReallocAsyncCtx + 32 >> 0] = $16 & 1; //@line 14275
    sp = STACKTOP; //@line 14276
    return;
   }
  }
 }
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb($0) {
 $0 = $0 | 0;
 var $$phi$trans$insert = 0, $$pre = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23500
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23504
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23506
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23508
 $$phi$trans$insert = (HEAP32[$0 + 4 >> 2] | 0) + 12 | 0; //@line 23509
 $$pre = HEAP32[$$phi$trans$insert >> 2] | 0; //@line 23510
 if (!$$pre) {
  HEAP32[$4 >> 2] = 0; //@line 23513
  HEAP32[___async_retval >> 2] = 0; //@line 23515
  return;
 }
 $11 = HEAP32[$$pre + 4 >> 2] | 0; //@line 23519
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 23520
 FUNCTION_TABLE_vii[$11 & 7]($6, $8); //@line 23521
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 278; //@line 23524
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 23525
  HEAP32[$12 >> 2] = $$phi$trans$insert; //@line 23526
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 23527
  HEAP32[$13 >> 2] = $4; //@line 23528
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 23529
  HEAP32[$14 >> 2] = $8; //@line 23530
  sp = STACKTOP; //@line 23531
  return;
 }
 ___async_unwind = 0; //@line 23534
 HEAP32[$ReallocAsyncCtx2 >> 2] = 278; //@line 23535
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 23536
 HEAP32[$12 >> 2] = $$phi$trans$insert; //@line 23537
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 23538
 HEAP32[$13 >> 2] = $4; //@line 23539
 $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 23540
 HEAP32[$14 >> 2] = $8; //@line 23541
 sp = STACKTOP; //@line 23542
 return;
}
function _fflush__async_cb($0) {
 $0 = $0 | 0;
 var $$02327$reg2mem$0 = 0, $$1 = 0, $$reg2mem$0 = 0, $17 = 0, $20 = 0, $ReallocAsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 17029
 $$02327$reg2mem$0 = HEAP32[$0 + 12 >> 2] | 0; //@line 17039
 $$1 = HEAP32[___async_retval >> 2] | HEAP32[$0 + 4 >> 2]; //@line 17039
 $$reg2mem$0 = HEAP32[$0 + 8 >> 2] | 0; //@line 17039
 while (1) {
  if ($$reg2mem$0 | 0) {
   ___unlockfile($$02327$reg2mem$0); //@line 17043
  }
  $$02327$reg2mem$0 = HEAP32[$$02327$reg2mem$0 + 56 >> 2] | 0; //@line 17046
  if (!$$02327$reg2mem$0) {
   label = 12; //@line 17049
   break;
  }
  if ((HEAP32[$$02327$reg2mem$0 + 76 >> 2] | 0) > -1) {
   $20 = ___lockfile($$02327$reg2mem$0) | 0; //@line 17057
  } else {
   $20 = 0; //@line 17059
  }
  if ((HEAP32[$$02327$reg2mem$0 + 20 >> 2] | 0) >>> 0 > (HEAP32[$$02327$reg2mem$0 + 28 >> 2] | 0) >>> 0) {
   break;
  } else {
   $$reg2mem$0 = $20; //@line 17069
  }
 }
 if ((label | 0) == 12) {
  ___ofl_unlock(); //@line 17073
  HEAP32[___async_retval >> 2] = $$1; //@line 17075
  return;
 }
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 17078
 $17 = ___fflush_unlocked($$02327$reg2mem$0) | 0; //@line 17079
 if (!___async) {
  HEAP32[___async_retval >> 2] = $17; //@line 17083
  ___async_unwind = 0; //@line 17084
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 324; //@line 17086
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $$1; //@line 17088
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $20; //@line 17090
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $$02327$reg2mem$0; //@line 17092
 sp = STACKTOP; //@line 17093
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 6035
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 6037
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6039
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6041
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6043
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6045
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 6047
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 6049
 if (($AsyncRetVal | 0) < 0) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 6053
  return;
 }
 $15 = $2 + 12 | 0; //@line 6056
 dest = $15; //@line 6057
 src = $4; //@line 6057
 stop = dest + 60 | 0; //@line 6057
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 6057
  dest = dest + 4 | 0; //@line 6057
  src = src + 4 | 0; //@line 6057
 } while ((dest | 0) < (stop | 0));
 HEAP16[$15 + 60 >> 1] = HEAP16[$4 + 60 >> 1] | 0; //@line 6057
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(24) | 0; //@line 6058
 _wait_ms(1); //@line 6059
 if (!___async) {
  ___async_unwind = 0; //@line 6062
 }
 HEAP32[$ReallocAsyncCtx4 >> 2] = 55; //@line 6064
 HEAP32[$ReallocAsyncCtx4 + 4 >> 2] = $6; //@line 6066
 HEAP32[$ReallocAsyncCtx4 + 8 >> 2] = $8; //@line 6068
 HEAP32[$ReallocAsyncCtx4 + 12 >> 2] = $2; //@line 6070
 HEAP32[$ReallocAsyncCtx4 + 16 >> 2] = $10; //@line 6072
 HEAP32[$ReallocAsyncCtx4 + 20 >> 2] = $12; //@line 6074
 sp = STACKTOP; //@line 6075
 return;
}
function ___fflush_unlocked__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23666
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23668
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23670
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23672
 do {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $$0 = -1; //@line 23677
  } else {
   $9 = $4 + 4 | 0; //@line 23679
   $10 = HEAP32[$9 >> 2] | 0; //@line 23680
   $11 = $4 + 8 | 0; //@line 23681
   $12 = HEAP32[$11 >> 2] | 0; //@line 23682
   if ($10 >>> 0 >= $12 >>> 0) {
    HEAP32[$4 + 16 >> 2] = 0; //@line 23686
    HEAP32[$6 >> 2] = 0; //@line 23687
    HEAP32[$2 >> 2] = 0; //@line 23688
    HEAP32[$11 >> 2] = 0; //@line 23689
    HEAP32[$9 >> 2] = 0; //@line 23690
    $$0 = 0; //@line 23691
    break;
   }
   $18 = HEAP32[$4 + 40 >> 2] | 0; //@line 23698
   $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 23699
   FUNCTION_TABLE_iiii[$18 & 31]($4, $10 - $12 | 0, 1) | 0; //@line 23700
   if (!___async) {
    ___async_unwind = 0; //@line 23703
   }
   HEAP32[$ReallocAsyncCtx2 >> 2] = 326; //@line 23705
   HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 23707
   HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 23709
   HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $2; //@line 23711
   HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $11; //@line 23713
   HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $9; //@line 23715
   sp = STACKTOP; //@line 23716
   return;
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 23721
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $14 = 0, $5 = 0, $8 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 933
 $5 = $0 + -4 | 0; //@line 934
 $8 = HEAP32[(HEAP32[$5 >> 2] | 0) + 120 >> 2] | 0; //@line 937
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 938
 $9 = FUNCTION_TABLE_iiiii[$8 & 15]($5, $1, $3, $4) | 0; //@line 939
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 57; //@line 942
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 944
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 946
  sp = STACKTOP; //@line 947
  return 0; //@line 948
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 950
 if (($2 | 0) != 0 & ($9 | 0) > -1) {
  $14 = $1 + 12 | 0; //@line 955
  dest = $2; //@line 956
  src = $14; //@line 956
  stop = dest + 60 | 0; //@line 956
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 956
   dest = dest + 4 | 0; //@line 956
   src = src + 4 | 0; //@line 956
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$14 + 60 >> 1] | 0; //@line 956
 }
 $AsyncCtx2 = _emscripten_alloc_async_context(8, sp) | 0; //@line 958
 _wait_ms(1); //@line 959
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 58; //@line 962
  HEAP32[$AsyncCtx2 + 4 >> 2] = $9; //@line 964
  sp = STACKTOP; //@line 965
  return 0; //@line 966
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 968
  return $9 | 0; //@line 969
 }
 return 0; //@line 971
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
 end = ptr + num | 0; //@line 3
 value = value & 255; //@line 5
 if ((num | 0) >= 67) {
  while (ptr & 3) {
   HEAP8[ptr >> 0] = value; //@line 8
   ptr = ptr + 1 | 0; //@line 9
  }
  aligned_end = end & -4 | 0; //@line 12
  block_aligned_end = aligned_end - 64 | 0; //@line 13
  value4 = value | value << 8 | value << 16 | value << 24; //@line 14
  while ((ptr | 0) <= (block_aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 17
   HEAP32[ptr + 4 >> 2] = value4; //@line 18
   HEAP32[ptr + 8 >> 2] = value4; //@line 19
   HEAP32[ptr + 12 >> 2] = value4; //@line 20
   HEAP32[ptr + 16 >> 2] = value4; //@line 21
   HEAP32[ptr + 20 >> 2] = value4; //@line 22
   HEAP32[ptr + 24 >> 2] = value4; //@line 23
   HEAP32[ptr + 28 >> 2] = value4; //@line 24
   HEAP32[ptr + 32 >> 2] = value4; //@line 25
   HEAP32[ptr + 36 >> 2] = value4; //@line 26
   HEAP32[ptr + 40 >> 2] = value4; //@line 27
   HEAP32[ptr + 44 >> 2] = value4; //@line 28
   HEAP32[ptr + 48 >> 2] = value4; //@line 29
   HEAP32[ptr + 52 >> 2] = value4; //@line 30
   HEAP32[ptr + 56 >> 2] = value4; //@line 31
   HEAP32[ptr + 60 >> 2] = value4; //@line 32
   ptr = ptr + 64 | 0; //@line 33
  }
  while ((ptr | 0) < (aligned_end | 0)) {
   HEAP32[ptr >> 2] = value4; //@line 37
   ptr = ptr + 4 | 0; //@line 38
  }
 }
 while ((ptr | 0) < (end | 0)) {
  HEAP8[ptr >> 0] = value; //@line 43
  ptr = ptr + 1 | 0; //@line 44
 }
 return end - num | 0; //@line 46
}
function _equeue_create($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $$033$i = 0, $$034$i = 0, $2 = 0, $21 = 0, $23 = 0, $27 = 0, $30 = 0, $5 = 0, $6 = 0;
 $2 = _malloc($1) | 0; //@line 1120
 if (!$2) {
  $$0 = -1; //@line 1123
  return $$0 | 0; //@line 1124
 }
 HEAP32[$0 + 12 >> 2] = $2; //@line 1127
 $5 = $0 + 20 | 0; //@line 1128
 HEAP32[$5 >> 2] = 0; //@line 1129
 $6 = $0 + 16 | 0; //@line 1130
 HEAP32[$6 >> 2] = 0; //@line 1131
 if ($1 | 0) {
  $$034$i = $1; //@line 1134
  $23 = 0; //@line 1134
  do {
   $23 = $23 + 1 | 0; //@line 1136
   $$034$i = $$034$i >>> 1; //@line 1137
  } while (($$034$i | 0) != 0);
  HEAP32[$6 >> 2] = $23; //@line 1145
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1148
 HEAP32[$0 + 28 >> 2] = $1; //@line 1150
 HEAP32[$0 + 32 >> 2] = $2; //@line 1152
 HEAP32[$0 >> 2] = 0; //@line 1153
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1156
 HEAP8[$0 + 9 >> 0] = 0; //@line 1158
 HEAP8[$0 + 8 >> 0] = 0; //@line 1160
 HEAP8[$0 + 36 >> 0] = 0; //@line 1162
 HEAP32[$0 + 40 >> 2] = 0; //@line 1164
 HEAP32[$0 + 44 >> 2] = 0; //@line 1166
 HEAP8[$0 + 184 >> 0] = 0; //@line 1168
 $21 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1170
 if (($21 | 0) < 0) {
  $$033$i = $21; //@line 1173
 } else {
  $27 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1176
  if (($27 | 0) < 0) {
   $$033$i = $27; //@line 1179
  } else {
   $30 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1182
   $$033$i = ($30 | 0) < 0 ? $30 : 0; //@line 1185
  }
 }
 HEAP32[$5 >> 2] = $2; //@line 1188
 $$0 = $$033$i; //@line 1189
 return $$0 | 0; //@line 1190
}
function __ZN9UDPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5593
 HEAP32[$0 >> 2] = 632; //@line 5594
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5595
 __ZN6Socket5closeEv($0) | 0; //@line 5596
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 148; //@line 5599
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5601
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 5603
  sp = STACKTOP; //@line 5604
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5607
 HEAP32[$0 >> 2] = 572; //@line 5608
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 5610
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 5616
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5617
   FUNCTION_TABLE_vi[$8 & 511]($0 + 32 | 0); //@line 5618
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 149; //@line 5621
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5623
    sp = STACKTOP; //@line 5624
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5627
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 5633
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 5640
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5641
 FUNCTION_TABLE_vi[$15 & 511]($0 + 16 | 0); //@line 5642
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 150; //@line 5645
  sp = STACKTOP; //@line 5646
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5649
 return;
}
function __ZN9TCPSocketD2Ev($0) {
 $0 = $0 | 0;
 var $11 = 0, $15 = 0, $4 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, $AsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 5099
 HEAP32[$0 >> 2] = 608; //@line 5100
 $AsyncCtx7 = _emscripten_alloc_async_context(12, sp) | 0; //@line 5101
 __ZN6Socket5closeEv($0) | 0; //@line 5102
 if (___async) {
  HEAP32[$AsyncCtx7 >> 2] = 136; //@line 5105
  HEAP32[$AsyncCtx7 + 4 >> 2] = $0; //@line 5107
  HEAP32[$AsyncCtx7 + 8 >> 2] = $0; //@line 5109
  sp = STACKTOP; //@line 5110
  return;
 }
 _emscripten_free_async_context($AsyncCtx7 | 0); //@line 5113
 HEAP32[$0 >> 2] = 572; //@line 5114
 $4 = HEAP32[$0 + 44 >> 2] | 0; //@line 5116
 do {
  if ($4 | 0) {
   $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 5122
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5123
   FUNCTION_TABLE_vi[$8 & 511]($0 + 32 | 0); //@line 5124
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 137; //@line 5127
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5129
    sp = STACKTOP; //@line 5130
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 5133
    break;
   }
  }
 } while (0);
 $11 = HEAP32[$0 + 28 >> 2] | 0; //@line 5139
 if (!$11) {
  return;
 }
 $15 = HEAP32[$11 + 8 >> 2] | 0; //@line 5146
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 5147
 FUNCTION_TABLE_vi[$15 & 511]($0 + 16 | 0); //@line 5148
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 138; //@line 5151
  sp = STACKTOP; //@line 5152
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 5155
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 523
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 120 >> 2] | 0; //@line 526
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 527
 $8 = FUNCTION_TABLE_iiiii[$7 & 15]($0, $1, $3, $4) | 0; //@line 528
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 44; //@line 531
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 533
  HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 535
  sp = STACKTOP; //@line 536
  return 0; //@line 537
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 539
 if (($2 | 0) != 0 & ($8 | 0) > -1) {
  $13 = $1 + 12 | 0; //@line 544
  dest = $2; //@line 545
  src = $13; //@line 545
  stop = dest + 60 | 0; //@line 545
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 545
   dest = dest + 4 | 0; //@line 545
   src = src + 4 | 0; //@line 545
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$13 + 60 >> 1] | 0; //@line 545
 }
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 547
 _wait_ms(1); //@line 548
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 45; //@line 551
  HEAP32[$AsyncCtx3 + 4 >> 2] = $8; //@line 553
  sp = STACKTOP; //@line 554
  return 0; //@line 555
 } else {
  _emscripten_free_async_context($AsyncCtx3 | 0); //@line 557
  return $8 | 0; //@line 558
 }
 return 0; //@line 560
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$byval_copy = 0, $4 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 7298
 STACKTOP = STACKTOP + 48 | 0; //@line 7299
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 7299
 $$byval_copy = sp + 20 | 0; //@line 7300
 $4 = sp; //@line 7301
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 7302
 $5 = __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version($0, $1, $4, 1, $3) | 0; //@line 7303
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 164; //@line 7306
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 7308
  HEAP32[$AsyncCtx + 8 >> 2] = $4; //@line 7310
  HEAP32[$AsyncCtx + 12 >> 2] = $4; //@line 7312
  sp = STACKTOP; //@line 7313
  STACKTOP = sp; //@line 7314
  return 0; //@line 7314
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 7316
  HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 7317
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 7317
  HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 7317
  HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 7317
  HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 7317
  __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 7318
  STACKTOP = sp; //@line 7321
  return (($5 | 0) < 0 ? $5 : 0) | 0; //@line 7321
 }
 return 0; //@line 7323
}
function _wcrtomb($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0;
 do {
  if (!$0) {
   $$0 = 1; //@line 12508
  } else {
   if ($1 >>> 0 < 128) {
    HEAP8[$0 >> 0] = $1; //@line 12513
    $$0 = 1; //@line 12514
    break;
   }
   if (!(HEAP32[HEAP32[(___pthread_self_910() | 0) + 188 >> 2] >> 2] | 0)) {
    if (($1 & -128 | 0) == 57216) {
     HEAP8[$0 >> 0] = $1; //@line 12527
     $$0 = 1; //@line 12528
     break;
    } else {
     HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12532
     $$0 = -1; //@line 12533
     break;
    }
   }
   if ($1 >>> 0 < 2048) {
    HEAP8[$0 >> 0] = $1 >>> 6 | 192; //@line 12543
    HEAP8[$0 + 1 >> 0] = $1 & 63 | 128; //@line 12547
    $$0 = 2; //@line 12548
    break;
   }
   if ($1 >>> 0 < 55296 | ($1 & -8192 | 0) == 57344) {
    HEAP8[$0 >> 0] = $1 >>> 12 | 224; //@line 12560
    HEAP8[$0 + 1 >> 0] = $1 >>> 6 & 63 | 128; //@line 12566
    HEAP8[$0 + 2 >> 0] = $1 & 63 | 128; //@line 12570
    $$0 = 3; //@line 12571
    break;
   }
   if (($1 + -65536 | 0) >>> 0 < 1048576) {
    HEAP8[$0 >> 0] = $1 >>> 18 | 240; //@line 12581
    HEAP8[$0 + 1 >> 0] = $1 >>> 12 & 63 | 128; //@line 12587
    HEAP8[$0 + 2 >> 0] = $1 >>> 6 & 63 | 128; //@line 12593
    HEAP8[$0 + 3 >> 0] = $1 & 63 | 128; //@line 12597
    $$0 = 4; //@line 12598
    break;
   } else {
    HEAP32[(___errno_location() | 0) >> 2] = 84; //@line 12602
    $$0 = -1; //@line 12603
    break;
   }
  }
 } while (0);
 return $$0 | 0; //@line 12608
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_25($0) {
 $0 = $0 | 0;
 var $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 23432
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23434
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23436
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23438
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23440
 if (!$AsyncRetVal) {
  HEAP8[___async_retval >> 0] = 0; //@line 23445
  return;
 }
 dest = $2 + 4 | 0; //@line 23449
 stop = dest + 52 | 0; //@line 23449
 do {
  HEAP32[dest >> 2] = 0; //@line 23449
  dest = dest + 4 | 0; //@line 23449
 } while ((dest | 0) < (stop | 0));
 HEAP32[$2 >> 2] = $AsyncRetVal; //@line 23450
 HEAP32[$2 + 8 >> 2] = $4; //@line 23452
 HEAP32[$2 + 12 >> 2] = -1; //@line 23454
 HEAP32[$2 + 48 >> 2] = 1; //@line 23456
 $15 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 28 >> 2] | 0; //@line 23459
 $16 = HEAP32[$6 >> 2] | 0; //@line 23460
 $ReallocAsyncCtx = _emscripten_realloc_async_context(16) | 0; //@line 23461
 FUNCTION_TABLE_viiii[$15 & 7]($AsyncRetVal, $2, $16, 1); //@line 23462
 if (!___async) {
  ___async_unwind = 0; //@line 23465
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 345; //@line 23467
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 23469
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $6; //@line 23471
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $2; //@line 23473
 sp = STACKTOP; //@line 23474
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_150($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 12456
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12460
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12462
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12464
 $9 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12465
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 12469
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 12473
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(16) | 0; //@line 12474
 FUNCTION_TABLE_vi[$12 & 511]($4); //@line 12475
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 12478
  $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 12479
  HEAP32[$13 >> 2] = $4; //@line 12480
  $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 12481
  HEAP32[$14 >> 2] = $6; //@line 12482
  $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 12483
  HEAP32[$15 >> 2] = $8; //@line 12484
  sp = STACKTOP; //@line 12485
  return;
 }
 ___async_unwind = 0; //@line 12488
 HEAP32[$ReallocAsyncCtx8 >> 2] = 100; //@line 12489
 $13 = $ReallocAsyncCtx8 + 4 | 0; //@line 12490
 HEAP32[$13 >> 2] = $4; //@line 12491
 $14 = $ReallocAsyncCtx8 + 8 | 0; //@line 12492
 HEAP32[$14 >> 2] = $6; //@line 12493
 $15 = $ReallocAsyncCtx8 + 12 | 0; //@line 12494
 HEAP32[$15 >> 2] = $8; //@line 12495
 sp = STACKTOP; //@line 12496
 return;
}
function _main__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 502
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 504
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 506
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 508
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 510
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 512
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 514
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 516
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 518
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 520
 $20 = __Z18nsapi_create_stackP12NetworkStack(HEAP32[___async_retval >> 2] | 0) | 0; //@line 523
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(40) | 0; //@line 524
 __ZN6Socket4openEP12NetworkStack($6, $20) | 0; //@line 525
 if (!___async) {
  ___async_unwind = 0; //@line 528
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 310; //@line 530
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 532
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $8; //@line 534
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $10; //@line 536
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $12; //@line 538
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $14; //@line 540
 HEAP32[$ReallocAsyncCtx10 + 24 >> 2] = $16; //@line 542
 HEAP32[$ReallocAsyncCtx10 + 28 >> 2] = $18; //@line 544
 HEAP32[$ReallocAsyncCtx10 + 32 >> 2] = $6; //@line 546
 HEAP32[$ReallocAsyncCtx10 + 36 >> 2] = $4; //@line 548
 sp = STACKTOP; //@line 549
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_68($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1480
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1482
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1484
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1486
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1488
 $9 = HEAP32[$2 >> 2] | 0; //@line 1489
 if (!$9) {
  if (!$6) {
   return;
  }
  __ZdaPv($6); //@line 1496
  return;
 } else {
  $11 = HEAP32[$9 >> 2] | 0; //@line 1499
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 1500
  FUNCTION_TABLE_viii[$11 & 0]($4, $8, $6); //@line 1501
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 268; //@line 1504
   $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 1505
   HEAP32[$12 >> 2] = $2; //@line 1506
   $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 1507
   HEAP32[$13 >> 2] = $4; //@line 1508
   $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 1509
   HEAP32[$14 >> 2] = $6; //@line 1510
   sp = STACKTOP; //@line 1511
   return;
  }
  ___async_unwind = 0; //@line 1514
  HEAP32[$ReallocAsyncCtx2 >> 2] = 268; //@line 1515
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 1516
  HEAP32[$12 >> 2] = $2; //@line 1517
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 1518
  HEAP32[$13 >> 2] = $4; //@line 1519
  $14 = $ReallocAsyncCtx2 + 12 | 0; //@line 1520
  HEAP32[$14 >> 2] = $6; //@line 1521
  sp = STACKTOP; //@line 1522
  return;
 }
}
function __ZN9TCPSocketD2Ev__async_cb_165($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13490
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13494
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 572; //@line 13495
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 13497
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 13502
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 13503
  FUNCTION_TABLE_vi[$10 & 511]($4 + 32 | 0); //@line 13504
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 137; //@line 13507
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 13508
   HEAP32[$11 >> 2] = $4; //@line 13509
   sp = STACKTOP; //@line 13510
   return;
  }
  ___async_unwind = 0; //@line 13513
  HEAP32[$ReallocAsyncCtx >> 2] = 137; //@line 13514
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 13515
  HEAP32[$11 >> 2] = $4; //@line 13516
  sp = STACKTOP; //@line 13517
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 13521
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 13528
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 13529
 FUNCTION_TABLE_vi[$17 & 511]($4 + 16 | 0); //@line 13530
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 13533
  sp = STACKTOP; //@line 13534
  return;
 }
 ___async_unwind = 0; //@line 13537
 HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 13538
 sp = STACKTOP; //@line 13539
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_11($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $13 = 0, $17 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16410
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16414
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 572; //@line 16415
 $6 = HEAP32[$4 + 44 >> 2] | 0; //@line 16417
 if ($6 | 0) {
  $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 16422
  $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 16423
  FUNCTION_TABLE_vi[$10 & 511]($4 + 32 | 0); //@line 16424
  if (___async) {
   HEAP32[$ReallocAsyncCtx >> 2] = 149; //@line 16427
   $11 = $ReallocAsyncCtx + 4 | 0; //@line 16428
   HEAP32[$11 >> 2] = $4; //@line 16429
   sp = STACKTOP; //@line 16430
   return;
  }
  ___async_unwind = 0; //@line 16433
  HEAP32[$ReallocAsyncCtx >> 2] = 149; //@line 16434
  $11 = $ReallocAsyncCtx + 4 | 0; //@line 16435
  HEAP32[$11 >> 2] = $4; //@line 16436
  sp = STACKTOP; //@line 16437
  return;
 }
 $13 = HEAP32[$4 + 28 >> 2] | 0; //@line 16441
 if (!$13) {
  return;
 }
 $17 = HEAP32[$13 + 8 >> 2] | 0; //@line 16448
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16449
 FUNCTION_TABLE_vi[$17 & 511]($4 + 16 | 0); //@line 16450
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 16453
  sp = STACKTOP; //@line 16454
  return;
 }
 ___async_unwind = 0; //@line 16457
 HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 16458
 sp = STACKTOP; //@line 16459
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_170($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14361
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 14365
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 14367
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 14369
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 14371
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 14373
 $14 = HEAP8[$0 + 28 >> 0] & 1; //@line 14376
 $17 = (HEAP32[$0 + 4 >> 2] | 0) + 8 | 0; //@line 14377
 if ($17 >>> 0 < $4 >>> 0) {
  if (!(HEAP8[$6 >> 0] | 0)) {
   $ReallocAsyncCtx3 = _emscripten_realloc_async_context(32) | 0; //@line 14383
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($17, $8, $10, $12, $14); //@line 14384
   if (!___async) {
    ___async_unwind = 0; //@line 14387
   }
   HEAP32[$ReallocAsyncCtx3 >> 2] = 358; //@line 14389
   HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 14391
   HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $4; //@line 14393
   HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $6; //@line 14395
   HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $8; //@line 14397
   HEAP32[$ReallocAsyncCtx3 + 20 >> 2] = $10; //@line 14399
   HEAP32[$ReallocAsyncCtx3 + 24 >> 2] = $12; //@line 14401
   HEAP8[$ReallocAsyncCtx3 + 28 >> 0] = $14 & 1; //@line 14404
   sp = STACKTOP; //@line 14405
   return;
  }
 }
 return;
}
function __ZNK13SocketAddress14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $$0 = 0, $11 = 0, $14 = 0, $17 = 0, $2 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4826
 STACKTOP = STACKTOP + 16 | 0; //@line 4827
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4827
 $vararg_buffer = sp; //@line 4828
 $2 = HEAP32[$0 + 40 >> 2] | 0; //@line 4830
 if (!$2) {
  $$0 = 0; //@line 4833
  STACKTOP = sp; //@line 4834
  return $$0 | 0; //@line 4834
 }
 if (HEAP8[$0 >> 0] | 0) {
  $$0 = $0; //@line 4839
  STACKTOP = sp; //@line 4840
  return $$0 | 0; //@line 4840
 }
 switch ($2 | 0) {
 case 1:
  {
   $11 = HEAPU8[$0 + 45 >> 0] | 0; //@line 4849
   $14 = HEAPU8[$0 + 46 >> 0] | 0; //@line 4852
   $17 = HEAPU8[$0 + 47 >> 0] | 0; //@line 4855
   HEAP32[$vararg_buffer >> 2] = HEAPU8[$0 + 44 >> 0]; //@line 4856
   HEAP32[$vararg_buffer + 4 >> 2] = $11; //@line 4858
   HEAP32[$vararg_buffer + 8 >> 2] = $14; //@line 4860
   HEAP32[$vararg_buffer + 12 >> 2] = $17; //@line 4862
   _sprintf($0, 3662, $vararg_buffer) | 0; //@line 4863
   $$0 = $0; //@line 4864
   STACKTOP = sp; //@line 4865
   return $$0 | 0; //@line 4865
  }
 case 2:
  {
   _ip6tos($0 + 44 | 0, $0) | 0; //@line 4870
   $$0 = $0; //@line 4871
   STACKTOP = sp; //@line 4872
   return $$0 | 0; //@line 4872
  }
 default:
  {
   $$0 = $0; //@line 4876
   STACKTOP = sp; //@line 4877
   return $$0 | 0; //@line 4877
  }
 }
 return 0; //@line 4880
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_36($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24025
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24029
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24031
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24033
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24035
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24037
 $13 = $4 + 12 | 0; //@line 24039
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24040
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 24041
 $14 = FUNCTION_TABLE_iiiii[$12 & 15]($6, $8, $4, $10) | 0; //@line 24042
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 24045
  $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 24046
  HEAP32[$15 >> 2] = $13; //@line 24047
  $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 24048
  HEAP32[$16 >> 2] = $4; //@line 24049
  sp = STACKTOP; //@line 24050
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 24054
 ___async_unwind = 0; //@line 24055
 HEAP32[$ReallocAsyncCtx3 >> 2] = 83; //@line 24056
 $15 = $ReallocAsyncCtx3 + 4 | 0; //@line 24057
 HEAP32[$15 >> 2] = $13; //@line 24058
 $16 = $ReallocAsyncCtx3 + 8 | 0; //@line 24059
 HEAP32[$16 >> 2] = $4; //@line 24060
 sp = STACKTOP; //@line 24061
 return;
}
function _main__async_cb_57($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 841
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 843
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 845
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 847
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 849
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 851
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 853
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 855
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 857
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 859
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(40) | 0; //@line 860
 $19 = __Znaj(256) | 0; //@line 861
 if (!___async) {
  HEAP32[___async_retval >> 2] = $19; //@line 865
  ___async_unwind = 0; //@line 866
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 312; //@line 868
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 870
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 872
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 874
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 876
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 878
 HEAP32[$ReallocAsyncCtx2 + 24 >> 2] = $12; //@line 880
 HEAP32[$ReallocAsyncCtx2 + 28 >> 2] = $14; //@line 882
 HEAP32[$ReallocAsyncCtx2 + 32 >> 2] = $16; //@line 884
 HEAP32[$ReallocAsyncCtx2 + 36 >> 2] = $18; //@line 886
 sp = STACKTOP; //@line 887
 return;
}
function _equeue_create_inplace($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$033 = 0, $$034 = 0, $20 = 0, $22 = 0, $26 = 0, $29 = 0, $5 = 0;
 HEAP32[$0 + 12 >> 2] = $2; //@line 1200
 HEAP32[$0 + 20 >> 2] = 0; //@line 1202
 $5 = $0 + 16 | 0; //@line 1203
 HEAP32[$5 >> 2] = 0; //@line 1204
 if ($1 | 0) {
  $$034 = $1; //@line 1207
  $22 = 0; //@line 1207
  do {
   $22 = $22 + 1 | 0; //@line 1209
   $$034 = $$034 >>> 1; //@line 1210
  } while (($$034 | 0) != 0);
  HEAP32[$5 >> 2] = $22; //@line 1218
 }
 HEAP32[$0 + 24 >> 2] = 0; //@line 1221
 HEAP32[$0 + 28 >> 2] = $1; //@line 1223
 HEAP32[$0 + 32 >> 2] = $2; //@line 1225
 HEAP32[$0 >> 2] = 0; //@line 1226
 HEAP32[$0 + 4 >> 2] = _equeue_tick() | 0; //@line 1229
 HEAP8[$0 + 9 >> 0] = 0; //@line 1231
 HEAP8[$0 + 8 >> 0] = 0; //@line 1233
 HEAP8[$0 + 36 >> 0] = 0; //@line 1235
 HEAP32[$0 + 40 >> 2] = 0; //@line 1237
 HEAP32[$0 + 44 >> 2] = 0; //@line 1239
 HEAP8[$0 + 184 >> 0] = 0; //@line 1241
 $20 = _equeue_sema_create($0 + 48 | 0) | 0; //@line 1243
 if (($20 | 0) < 0) {
  $$033 = $20; //@line 1246
  return $$033 | 0; //@line 1247
 }
 $26 = _equeue_mutex_create($0 + 128 | 0) | 0; //@line 1250
 if (($26 | 0) < 0) {
  $$033 = $26; //@line 1253
  return $$033 | 0; //@line 1254
 }
 $29 = _equeue_mutex_create($0 + 156 | 0) | 0; //@line 1257
 $$033 = ($29 | 0) < 0 ? $29 : 0; //@line 1260
 return $$033 | 0; //@line 1261
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_7($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16079
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16083
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 16086
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16087
 if (!$7) {
  if ($6) {
   $$06 = -3007; //@line 16091
   $12 = ___async_retval; //@line 16092
   HEAP32[$12 >> 2] = $$06; //@line 16093
   return;
  }
  $$06 = 0; //@line 16096
  $12 = ___async_retval; //@line 16097
  HEAP32[$12 >> 2] = $$06; //@line 16098
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 16102
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 16103
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 16104
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 16107
   $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 16108
   $$expand_i1_val = $6 & 1; //@line 16109
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 16110
   sp = STACKTOP; //@line 16111
   return;
  }
  ___async_unwind = 0; //@line 16114
  HEAP32[$ReallocAsyncCtx3 >> 2] = 108; //@line 16115
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 16116
  $$expand_i1_val = $6 & 1; //@line 16117
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 16118
  sp = STACKTOP; //@line 16119
  return;
 }
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_6($0) {
 $0 = $0 | 0;
 var $$06 = 0, $$expand_i1_val = 0, $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16032
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16036
 $6 = (HEAP32[___async_retval >> 2] | 0) == 0; //@line 16039
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16040
 if (!$7) {
  if ($6) {
   $$06 = -3007; //@line 16044
   $12 = ___async_retval; //@line 16045
   HEAP32[$12 >> 2] = $$06; //@line 16046
   return;
  }
  $$06 = 0; //@line 16049
  $12 = ___async_retval; //@line 16050
  HEAP32[$12 >> 2] = $$06; //@line 16051
  return;
 } else {
  $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 16055
  $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 16056
  FUNCTION_TABLE_vi[$10 & 511]($4); //@line 16057
  if (___async) {
   HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 16060
   $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 16061
   $$expand_i1_val = $6 & 1; //@line 16062
   HEAP8[$11 >> 0] = $$expand_i1_val; //@line 16063
   sp = STACKTOP; //@line 16064
   return;
  }
  ___async_unwind = 0; //@line 16067
  HEAP32[$ReallocAsyncCtx6 >> 2] = 113; //@line 16068
  $11 = $ReallocAsyncCtx6 + 4 | 0; //@line 16069
  $$expand_i1_val = $6 & 1; //@line 16070
  HEAP8[$11 >> 0] = $$expand_i1_val; //@line 16071
  sp = STACKTOP; //@line 16072
  return;
 }
}
function _fmt_u($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $26 = 0, $8 = 0, $9 = 0, $8$looptemp = 0;
 if ($1 >>> 0 > 0 | ($1 | 0) == 0 & $0 >>> 0 > 4294967295) {
  $$0914 = $2; //@line 11392
  $8 = $0; //@line 11392
  $9 = $1; //@line 11392
  while (1) {
   $10 = ___uremdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11394
   $$0914 = $$0914 + -1 | 0; //@line 11398
   HEAP8[$$0914 >> 0] = $10 & 255 | 48; //@line 11399
   $8$looptemp = $8;
   $8 = ___udivdi3($8 | 0, $9 | 0, 10, 0) | 0; //@line 11400
   if (!($9 >>> 0 > 9 | ($9 | 0) == 9 & $8$looptemp >>> 0 > 4294967295)) {
    break;
   } else {
    $9 = tempRet0; //@line 11408
   }
  }
  $$010$lcssa$off0 = $8; //@line 11413
  $$09$lcssa = $$0914; //@line 11413
 } else {
  $$010$lcssa$off0 = $0; //@line 11415
  $$09$lcssa = $2; //@line 11415
 }
 if (!$$010$lcssa$off0) {
  $$1$lcssa = $$09$lcssa; //@line 11419
 } else {
  $$012 = $$010$lcssa$off0; //@line 11421
  $$111 = $$09$lcssa; //@line 11421
  while (1) {
   $26 = $$111 + -1 | 0; //@line 11426
   HEAP8[$26 >> 0] = ($$012 >>> 0) % 10 | 0 | 48; //@line 11427
   if ($$012 >>> 0 < 10) {
    $$1$lcssa = $26; //@line 11431
    break;
   } else {
    $$012 = ($$012 >>> 0) / 10 | 0; //@line 11434
    $$111 = $26; //@line 11434
   }
  }
 }
 return $$1$lcssa | 0; //@line 11438
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_1($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 15882
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15886
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15888
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15890
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15892
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 15894
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15897
 _equeue_event_delay($4, $6); //@line 15898
 _equeue_event_dtor($4, 105); //@line 15899
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(12) | 0; //@line 15900
 $14 = _equeue_post($8, 106, $4) | 0; //@line 15901
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 15904
  $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 15905
  HEAP32[$15 >> 2] = $10; //@line 15906
  $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 15907
  HEAP32[$16 >> 2] = $12; //@line 15908
  sp = STACKTOP; //@line 15909
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 15913
 ___async_unwind = 0; //@line 15914
 HEAP32[$ReallocAsyncCtx8 >> 2] = 107; //@line 15915
 $15 = $ReallocAsyncCtx8 + 4 | 0; //@line 15916
 HEAP32[$15 >> 2] = $10; //@line 15917
 $16 = $ReallocAsyncCtx8 + 8 | 0; //@line 15918
 HEAP32[$16 >> 2] = $12; //@line 15919
 sp = STACKTOP; //@line 15920
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_120($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 9748
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9752
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9754
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9756
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9757
 if (!$$pr$i) {
  _free($6); //@line 9760
  return;
 }
 $11 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 9764
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(16) | 0; //@line 9765
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 9766
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 253; //@line 9769
  $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 9770
  HEAP32[$12 >> 2] = $4; //@line 9771
  $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 9772
  HEAP32[$13 >> 2] = $6; //@line 9773
  $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 9774
  HEAP32[$14 >> 2] = $8; //@line 9775
  sp = STACKTOP; //@line 9776
  return;
 }
 ___async_unwind = 0; //@line 9779
 HEAP32[$ReallocAsyncCtx7 >> 2] = 253; //@line 9780
 $12 = $ReallocAsyncCtx7 + 4 | 0; //@line 9781
 HEAP32[$12 >> 2] = $4; //@line 9782
 $13 = $ReallocAsyncCtx7 + 8 | 0; //@line 9783
 HEAP32[$13 >> 2] = $6; //@line 9784
 $14 = $ReallocAsyncCtx7 + 12 | 0; //@line 9785
 HEAP32[$14 >> 2] = $8; //@line 9786
 sp = STACKTOP; //@line 9787
 return;
}
function _main__async_cb_60($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 929
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 931
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 933
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 935
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 937
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 939
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 941
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 943
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 945
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 947
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(40) | 0; //@line 948
 __ZN9TCPSocket7connectEPKct($2, 4142, 80) | 0; //@line 949
 if (!___async) {
  ___async_unwind = 0; //@line 952
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 311; //@line 954
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 956
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 958
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 960
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 962
 HEAP32[$ReallocAsyncCtx7 + 20 >> 2] = $10; //@line 964
 HEAP32[$ReallocAsyncCtx7 + 24 >> 2] = $12; //@line 966
 HEAP32[$ReallocAsyncCtx7 + 28 >> 2] = $14; //@line 968
 HEAP32[$ReallocAsyncCtx7 + 32 >> 2] = $16; //@line 970
 HEAP32[$ReallocAsyncCtx7 + 36 >> 2] = $18; //@line 972
 sp = STACKTOP; //@line 973
 return;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 5316
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5320
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5322
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5324
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 5326
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 5328
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 5330
 $15 = $4 + 12 | 0; //@line 5332
 HEAP32[$15 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 5333
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(20) | 0; //@line 5334
 $16 = __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version($6, $8, $10, 0, $4, $12) | 0; //@line 5335
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 5339
  ___async_unwind = 0; //@line 5340
 }
 HEAP32[$ReallocAsyncCtx5 >> 2] = 167; //@line 5342
 HEAP32[$ReallocAsyncCtx5 + 4 >> 2] = $15; //@line 5344
 HEAP32[$ReallocAsyncCtx5 + 8 >> 2] = $14; //@line 5346
 HEAP32[$ReallocAsyncCtx5 + 12 >> 2] = $4; //@line 5348
 HEAP32[$ReallocAsyncCtx5 + 16 >> 2] = $10; //@line 5350
 sp = STACKTOP; //@line 5351
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16619
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16621
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16625
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16627
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16629
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16631
 if (!(HEAP8[$2 >> 0] | 0)) {
  $13 = (HEAP32[$0 + 8 >> 2] | 0) + 8 | 0; //@line 16635
  if ($13 >>> 0 < $6 >>> 0) {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 16638
   __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($13, $8, $10, $12); //@line 16639
   if (!___async) {
    ___async_unwind = 0; //@line 16642
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 16644
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 16646
   HEAP32[$ReallocAsyncCtx + 8 >> 2] = $13; //@line 16648
   HEAP32[$ReallocAsyncCtx + 12 >> 2] = $6; //@line 16650
   HEAP32[$ReallocAsyncCtx + 16 >> 2] = $8; //@line 16652
   HEAP32[$ReallocAsyncCtx + 20 >> 2] = $10; //@line 16654
   HEAP32[$ReallocAsyncCtx + 24 >> 2] = $12; //@line 16656
   sp = STACKTOP; //@line 16657
   return;
  }
 }
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_77($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 3907
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 3909
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 3911
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 3913
 $8 = HEAP32[$2 + 28 >> 2] | 0; //@line 3915
 if (!$8) {
  __ZdlPv($2); //@line 3918
  HEAP32[___async_retval >> 2] = -3007; //@line 3920
  return;
 }
 $11 = HEAP32[$8 + 8 >> 2] | 0; //@line 3924
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(12) | 0; //@line 3925
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 3926
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3929
  $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 3930
  HEAP32[$12 >> 2] = $2; //@line 3931
  $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 3932
  HEAP32[$13 >> 2] = $6; //@line 3933
  sp = STACKTOP; //@line 3934
  return;
 }
 ___async_unwind = 0; //@line 3937
 HEAP32[$ReallocAsyncCtx10 >> 2] = 183; //@line 3938
 $12 = $ReallocAsyncCtx10 + 4 | 0; //@line 3939
 HEAP32[$12 >> 2] = $2; //@line 3940
 $13 = $ReallocAsyncCtx10 + 8 | 0; //@line 3941
 HEAP32[$13 >> 2] = $6; //@line 3942
 sp = STACKTOP; //@line 3943
 return;
}
function _strlen($0) {
 $0 = $0 | 0;
 var $$0 = 0, $$015$lcssa = 0, $$01519 = 0, $$1$lcssa = 0, $$pn = 0, $$sink = 0, $1 = 0, $10 = 0, $19 = 0, $23 = 0, $6 = 0, label = 0;
 $1 = $0; //@line 4652
 L1 : do {
  if (!($1 & 3)) {
   $$015$lcssa = $0; //@line 4657
   label = 4; //@line 4658
  } else {
   $$01519 = $0; //@line 4660
   $23 = $1; //@line 4660
   while (1) {
    if (!(HEAP8[$$01519 >> 0] | 0)) {
     $$sink = $23; //@line 4665
     break L1;
    }
    $6 = $$01519 + 1 | 0; //@line 4668
    $23 = $6; //@line 4669
    if (!($23 & 3)) {
     $$015$lcssa = $6; //@line 4673
     label = 4; //@line 4674
     break;
    } else {
     $$01519 = $6; //@line 4677
    }
   }
  }
 } while (0);
 if ((label | 0) == 4) {
  $$0 = $$015$lcssa; //@line 4683
  while (1) {
   $10 = HEAP32[$$0 >> 2] | 0; //@line 4685
   if (!(($10 & -2139062144 ^ -2139062144) & $10 + -16843009)) {
    $$0 = $$0 + 4 | 0; //@line 4693
   } else {
    break;
   }
  }
  if (!(($10 & 255) << 24 >> 24)) {
   $$1$lcssa = $$0; //@line 4701
  } else {
   $$pn = $$0; //@line 4703
   while (1) {
    $19 = $$pn + 1 | 0; //@line 4705
    if (!(HEAP8[$19 >> 0] | 0)) {
     $$1$lcssa = $19; //@line 4709
     break;
    } else {
     $$pn = $19; //@line 4712
    }
   }
  }
  $$sink = $$1$lcssa; //@line 4717
 }
 return $$sink - $1 | 0; //@line 4720
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $10 = 0, $11 = 0, $21 = 0, $22 = 0, $28 = 0, $30 = 0;
 HEAP8[$1 + 53 >> 0] = 1; //@line 14447
 do {
  if ((HEAP32[$1 + 4 >> 2] | 0) == ($3 | 0)) {
   HEAP8[$1 + 52 >> 0] = 1; //@line 14454
   $10 = $1 + 16 | 0; //@line 14455
   $11 = HEAP32[$10 >> 2] | 0; //@line 14456
   if (!$11) {
    HEAP32[$10 >> 2] = $2; //@line 14459
    HEAP32[$1 + 24 >> 2] = $4; //@line 14461
    HEAP32[$1 + 36 >> 2] = 1; //@line 14463
    if (!(($4 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0)) {
     break;
    }
    HEAP8[$1 + 54 >> 0] = 1; //@line 14473
    break;
   }
   if (($11 | 0) != ($2 | 0)) {
    $30 = $1 + 36 | 0; //@line 14478
    HEAP32[$30 >> 2] = (HEAP32[$30 >> 2] | 0) + 1; //@line 14481
    HEAP8[$1 + 54 >> 0] = 1; //@line 14483
    break;
   }
   $21 = $1 + 24 | 0; //@line 14486
   $22 = HEAP32[$21 >> 2] | 0; //@line 14487
   if (($22 | 0) == 2) {
    HEAP32[$21 >> 2] = $4; //@line 14490
    $28 = $4; //@line 14491
   } else {
    $28 = $22; //@line 14493
   }
   if (($28 | 0) == 1 ? (HEAP32[$1 + 48 >> 2] | 0) == 1 : 0) {
    HEAP8[$1 + 54 >> 0] = 1; //@line 14502
   }
  }
 } while (0);
 return;
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 5802
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5804
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5808
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 5813
  dest = $2; //@line 5814
  src = $8; //@line 5814
  stop = dest + 60 | 0; //@line 5814
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 5814
   dest = dest + 4 | 0; //@line 5814
   src = src + 4 | 0; //@line 5814
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 5814
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 5816
 _wait_ms(1); //@line 5817
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 58; //@line 5820
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 5821
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 5822
  sp = STACKTOP; //@line 5823
  return;
 }
 ___async_unwind = 0; //@line 5826
 HEAP32[$ReallocAsyncCtx2 >> 2] = 58; //@line 5827
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 5828
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 5829
 sp = STACKTOP; //@line 5830
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP; //@line 5852
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5854
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5858
 if (($2 | 0) != 0 & ($AsyncRetVal | 0) > -1) {
  $8 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 5863
  dest = $2; //@line 5864
  src = $8; //@line 5864
  stop = dest + 60 | 0; //@line 5864
  do {
   HEAP32[dest >> 2] = HEAP32[src >> 2]; //@line 5864
   dest = dest + 4 | 0; //@line 5864
   src = src + 4 | 0; //@line 5864
  } while ((dest | 0) < (stop | 0));
  HEAP16[$2 + 60 >> 1] = HEAP16[$8 + 60 >> 1] | 0; //@line 5864
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 5866
 _wait_ms(1); //@line 5867
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 5870
  $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 5871
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 5872
  sp = STACKTOP; //@line 5873
  return;
 }
 ___async_unwind = 0; //@line 5876
 HEAP32[$ReallocAsyncCtx2 >> 2] = 45; //@line 5877
 $9 = $ReallocAsyncCtx2 + 4 | 0; //@line 5878
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 5879
 sp = STACKTOP; //@line 5880
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_4($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15975
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15979
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15981
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15983
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15985
 HEAP32[$4 + 12 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15988
 _equeue_event_dtor($4, 105); //@line 15989
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(12) | 0; //@line 15990
 $12 = _equeue_post($6, 106, $4) | 0; //@line 15991
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 15994
  $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 15995
  HEAP32[$13 >> 2] = $8; //@line 15996
  $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 15997
  HEAP32[$14 >> 2] = $10; //@line 15998
  sp = STACKTOP; //@line 15999
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 16003
 ___async_unwind = 0; //@line 16004
 HEAP32[$ReallocAsyncCtx7 >> 2] = 112; //@line 16005
 $13 = $ReallocAsyncCtx7 + 4 | 0; //@line 16006
 HEAP32[$13 >> 2] = $8; //@line 16007
 $14 = $ReallocAsyncCtx7 + 8 | 0; //@line 16008
 HEAP32[$14 >> 2] = $10; //@line 16009
 sp = STACKTOP; //@line 16010
 return;
}
function _puts($0) {
 $0 = $0 | 0;
 var $1 = 0, $11 = 0, $12 = 0, $17 = 0, $19 = 0, $22 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13733
 $1 = HEAP32[444] | 0; //@line 13734
 if ((HEAP32[$1 + 76 >> 2] | 0) > -1) {
  $19 = ___lockfile($1) | 0; //@line 13740
 } else {
  $19 = 0; //@line 13742
 }
 do {
  if ((_fputs($0, $1) | 0) < 0) {
   $22 = -1; //@line 13748
  } else {
   if ((HEAP8[$1 + 75 >> 0] | 0) != 10) {
    $11 = $1 + 20 | 0; //@line 13754
    $12 = HEAP32[$11 >> 2] | 0; //@line 13755
    if ($12 >>> 0 < (HEAP32[$1 + 16 >> 2] | 0) >>> 0) {
     HEAP32[$11 >> 2] = $12 + 1; //@line 13761
     HEAP8[$12 >> 0] = 10; //@line 13762
     $22 = 0; //@line 13763
     break;
    }
   }
   $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 13767
   $17 = ___overflow($1, 10) | 0; //@line 13768
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 335; //@line 13771
    HEAP32[$AsyncCtx + 4 >> 2] = $19; //@line 13773
    HEAP32[$AsyncCtx + 8 >> 2] = $1; //@line 13775
    sp = STACKTOP; //@line 13776
    return 0; //@line 13777
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 13779
    $22 = $17 >> 31; //@line 13781
    break;
   }
  }
 } while (0);
 if ($19 | 0) {
  ___unlockfile($1); //@line 13788
 }
 return $22 | 0; //@line 13790
}
function __ZN6Socket5closeEv__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 7614
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7616
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7618
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7620
 $7 = HEAP32[$2 >> 2] | 0; //@line 7621
 HEAP32[$2 >> 2] = 0; //@line 7622
 $8 = HEAP32[$4 >> 2] | 0; //@line 7623
 $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 48 >> 2] | 0; //@line 7626
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 7627
 $12 = FUNCTION_TABLE_iii[$11 & 15]($8, $7) | 0; //@line 7628
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 132; //@line 7631
  $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 7632
  HEAP32[$13 >> 2] = $4; //@line 7633
  $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 7634
  HEAP32[$14 >> 2] = $6; //@line 7635
  sp = STACKTOP; //@line 7636
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 7640
 ___async_unwind = 0; //@line 7641
 HEAP32[$ReallocAsyncCtx2 >> 2] = 132; //@line 7642
 $13 = $ReallocAsyncCtx2 + 4 | 0; //@line 7643
 HEAP32[$13 >> 2] = $4; //@line 7644
 $14 = $ReallocAsyncCtx2 + 8 | 0; //@line 7645
 HEAP32[$14 >> 2] = $6; //@line 7646
 sp = STACKTOP; //@line 7647
 return;
}
function _mbed_vtracef__async_cb_132($0) {
 $0 = $0 | 0;
 var $$18 = 0, $10 = 0, $12 = 0, $16 = 0, $19 = 0, $2 = 0, $20 = 0, $23 = 0, $24 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 11036
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11038
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11040
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11042
 $10 = HEAP8[$0 + 20 >> 0] & 1; //@line 11047
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11049
 HEAP32[$2 >> 2] = HEAP32[___async_retval >> 2]; //@line 11054
 $16 = _snprintf($4, $6, 3526, $2) | 0; //@line 11055
 $$18 = ($16 | 0) >= ($6 | 0) ? 0 : $16; //@line 11057
 $19 = $4 + $$18 | 0; //@line 11059
 $20 = $6 - $$18 | 0; //@line 11060
 if (($$18 | 0) > 0) {
  if (!(($$18 | 0) < 1 | ($20 | 0) < 1 | $10 ^ 1)) {
   _snprintf($19, $20, 3604, $12) | 0; //@line 11068
  }
 }
 $23 = HEAP32[133] | 0; //@line 11071
 $24 = HEAP32[126] | 0; //@line 11072
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(4) | 0; //@line 11073
 FUNCTION_TABLE_vi[$23 & 511]($24); //@line 11074
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 11077
  sp = STACKTOP; //@line 11078
  return;
 }
 ___async_unwind = 0; //@line 11081
 HEAP32[$ReallocAsyncCtx7 >> 2] = 73; //@line 11082
 sp = STACKTOP; //@line 11083
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_32($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 23815
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23819
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23821
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23823
 $9 = $4 + 12 | 0; //@line 23825
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23826
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 23827
 $10 = __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_($6, $8, $4) | 0; //@line 23828
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 205; //@line 23831
  $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 23832
  HEAP32[$11 >> 2] = $9; //@line 23833
  $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 23834
  HEAP32[$12 >> 2] = $4; //@line 23835
  sp = STACKTOP; //@line 23836
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 23840
 ___async_unwind = 0; //@line 23841
 HEAP32[$ReallocAsyncCtx5 >> 2] = 205; //@line 23842
 $11 = $ReallocAsyncCtx5 + 4 | 0; //@line 23843
 HEAP32[$11 >> 2] = $9; //@line 23844
 $12 = $ReallocAsyncCtx5 + 8 | 0; //@line 23845
 HEAP32[$12 >> 2] = $4; //@line 23846
 sp = STACKTOP; //@line 23847
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_48($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 325
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 329
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 331
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 333
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 335
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 337
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 339
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 341
 $17 = $4 + 12 | 0; //@line 343
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 344
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 345
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 346
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 350
  ___async_unwind = 0; //@line 351
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 116; //@line 353
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 355
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 357
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 359
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 361
 sp = STACKTOP; //@line 362
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 11514
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11516
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11518
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 11520
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11522
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11524
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 11526
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 11528
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 11530
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 11531
 $16 = FUNCTION_TABLE_iiii[$12 & 31]($10, $2, $AsyncRetVal) | 0; //@line 11532
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 11536
  ___async_unwind = 0; //@line 11537
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 122; //@line 11539
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $2; //@line 11541
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $4; //@line 11543
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $6; //@line 11545
 HEAP32[$ReallocAsyncCtx2 + 16 >> 2] = $8; //@line 11547
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $14; //@line 11549
 sp = STACKTOP; //@line 11550
 return;
}
function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_208($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 16667
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16673
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16675
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16677
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 16679
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 1) {
  return;
 }
 $14 = (HEAP32[$0 + 8 >> 2] | 0) + 24 | 0; //@line 16684
 $ReallocAsyncCtx = _emscripten_realloc_async_context(28) | 0; //@line 16686
 __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($14, $6, $8, $10); //@line 16687
 if (!___async) {
  ___async_unwind = 0; //@line 16690
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 362; //@line 16692
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $6 + 54; //@line 16694
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $14; //@line 16696
 HEAP32[$ReallocAsyncCtx + 12 >> 2] = $12; //@line 16698
 HEAP32[$ReallocAsyncCtx + 16 >> 2] = $6; //@line 16700
 HEAP32[$ReallocAsyncCtx + 20 >> 2] = $8; //@line 16702
 HEAP32[$ReallocAsyncCtx + 24 >> 2] = $10; //@line 16704
 sp = STACKTOP; //@line 16705
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_41($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 24526
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24530
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24532
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24534
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 24536
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 24538
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 24540
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 24542
 $17 = $4 + 12 | 0; //@line 24544
 HEAP32[$17 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 24545
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(20) | 0; //@line 24546
 $18 = FUNCTION_TABLE_iiii[$10 & 31]($6, $8, $4) | 0; //@line 24547
 if (!___async) {
  HEAP32[___async_retval >> 2] = $18; //@line 24551
  ___async_unwind = 0; //@line 24552
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 273; //@line 24554
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $17; //@line 24556
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $12; //@line 24558
 HEAP32[$ReallocAsyncCtx3 + 12 >> 2] = $14; //@line 24560
 HEAP32[$ReallocAsyncCtx3 + 16 >> 2] = $16; //@line 24562
 sp = STACKTOP; //@line 24563
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5908
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5910
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5912
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5914
 $7 = $2 + 12 | 0; //@line 5915
 $8 = HEAP32[$7 >> 2] | 0; //@line 5916
 if (!$8) {
  HEAP32[$4 >> 2] = 0; //@line 5919
  return;
 }
 $11 = HEAP32[$8 + 4 >> 2] | 0; //@line 5923
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 5924
 FUNCTION_TABLE_vii[$11 & 7]($6, $2); //@line 5925
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 5928
  $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 5929
  HEAP32[$12 >> 2] = $7; //@line 5930
  $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 5931
  HEAP32[$13 >> 2] = $4; //@line 5932
  sp = STACKTOP; //@line 5933
  return;
 }
 ___async_unwind = 0; //@line 5936
 HEAP32[$ReallocAsyncCtx2 >> 2] = 135; //@line 5937
 $12 = $ReallocAsyncCtx2 + 4 | 0; //@line 5938
 HEAP32[$12 >> 2] = $7; //@line 5939
 $13 = $ReallocAsyncCtx2 + 8 | 0; //@line 5940
 HEAP32[$13 >> 2] = $4; //@line 5941
 sp = STACKTOP; //@line 5942
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2733
 $6 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2736
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 2737
 $7 = FUNCTION_TABLE_ii[$6 & 31]($0) | 0; //@line 2738
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 79; //@line 2741
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2743
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 2745
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 2747
  sp = STACKTOP; //@line 2748
  return 0; //@line 2749
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2751
 $12 = HEAP32[HEAP32[$7 >> 2] >> 2] | 0; //@line 2753
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2754
 $13 = FUNCTION_TABLE_iiiii[$12 & 15]($7, $1, $2, $3) | 0; //@line 2755
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 80; //@line 2758
  sp = STACKTOP; //@line 2759
  return 0; //@line 2760
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2762
  return $13 | 0; //@line 2763
 }
 return 0; //@line 2765
}
function __ZL25default_terminate_handlerv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 17253
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17255
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17257
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 17259
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 17261
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 17263
 if (!(HEAP8[___async_retval >> 0] & 1)) {
  HEAP32[$4 >> 2] = 7105; //@line 17268
  HEAP32[$4 + 4 >> 2] = $6; //@line 17270
  _abort_message(7014, $4); //@line 17271
 }
 $12 = HEAP32[$2 >> 2] | 0; //@line 17274
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 8 >> 2] | 0; //@line 17277
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(16) | 0; //@line 17278
 $16 = FUNCTION_TABLE_ii[$15 & 31]($12) | 0; //@line 17279
 if (!___async) {
  HEAP32[___async_retval >> 2] = $16; //@line 17283
  ___async_unwind = 0; //@line 17284
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 341; //@line 17286
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $8; //@line 17288
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 17290
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $10; //@line 17292
 sp = STACKTOP; //@line 17293
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_63($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $10 = 0, $11 = 0, $4 = 0, $6 = 0, $9 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 1196
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1200
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1202
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 1203
 if (!$$pr$i) {
  if (!$6) {
   return;
  }
  __ZdaPv($6); //@line 1210
  return;
 } else {
  $9 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 1214
  $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 1215
  FUNCTION_TABLE_vi[$9 & 511]($4); //@line 1216
  if (___async) {
   HEAP32[$ReallocAsyncCtx3 >> 2] = 269; //@line 1219
   $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 1220
   HEAP32[$10 >> 2] = $4; //@line 1221
   $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 1222
   HEAP32[$11 >> 2] = $6; //@line 1223
   sp = STACKTOP; //@line 1224
   return;
  }
  ___async_unwind = 0; //@line 1227
  HEAP32[$ReallocAsyncCtx3 >> 2] = 269; //@line 1228
  $10 = $ReallocAsyncCtx3 + 4 | 0; //@line 1229
  HEAP32[$10 >> 2] = $4; //@line 1230
  $11 = $ReallocAsyncCtx3 + 8 | 0; //@line 1231
  HEAP32[$11 >> 2] = $6; //@line 1232
  sp = STACKTOP; //@line 1233
  return;
 }
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_159($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 13133
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13135
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13137
 $6 = HEAP32[$2 + 28 >> 2] | 0; //@line 13139
 if (!$6) {
  __ZdlPv($2); //@line 13142
  HEAP32[7796 + ($4 << 2) >> 2] = 0; //@line 13144
  return;
 }
 $10 = HEAP32[$6 + 8 >> 2] | 0; //@line 13149
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(12) | 0; //@line 13150
 FUNCTION_TABLE_vi[$10 & 511]($2 + 16 | 0); //@line 13151
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 13154
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 13155
  HEAP32[$11 >> 2] = $2; //@line 13156
  $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 13157
  HEAP32[$12 >> 2] = $4; //@line 13158
  sp = STACKTOP; //@line 13159
  return;
 }
 ___async_unwind = 0; //@line 13162
 HEAP32[$ReallocAsyncCtx4 >> 2] = 237; //@line 13163
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 13164
 HEAP32[$11 >> 2] = $2; //@line 13165
 $12 = $ReallocAsyncCtx4 + 8 | 0; //@line 13166
 HEAP32[$12 >> 2] = $4; //@line 13167
 sp = STACKTOP; //@line 13168
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 var $$037$off038 = 0, $$037$off039 = 0, $12 = 0, $17 = 0, $4 = 0, $6 = 0, $8 = 0, label = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13354
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13356
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13358
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 13362
 if (!(HEAP8[HEAP32[$0 + 4 >> 2] >> 0] | 0)) {
  $$037$off038 = 4; //@line 13366
  label = 4; //@line 13367
 } else {
  if (!(HEAP8[HEAP32[$0 + 20 >> 2] >> 0] | 0)) {
   $$037$off038 = 3; //@line 13372
   label = 4; //@line 13373
  } else {
   $$037$off039 = 3; //@line 13375
  }
 }
 if ((label | 0) == 4) {
  HEAP32[$6 >> 2] = $4; //@line 13379
  $17 = $8 + 40 | 0; //@line 13380
  HEAP32[$17 >> 2] = (HEAP32[$17 >> 2] | 0) + 1; //@line 13383
  if ((HEAP32[$8 + 36 >> 2] | 0) == 1) {
   if ((HEAP32[$8 + 24 >> 2] | 0) == 2) {
    HEAP8[$8 + 54 >> 0] = 1; //@line 13393
    $$037$off039 = $$037$off038; //@line 13394
   } else {
    $$037$off039 = $$037$off038; //@line 13396
   }
  } else {
   $$037$off039 = $$037$off038; //@line 13399
  }
 }
 HEAP32[$12 >> 2] = $$037$off039; //@line 13402
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $13 = 0, $19 = 0;
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $4) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi(0, $1, $2, $3); //@line 14306
  } else {
   if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 >> 2] | 0, $4) | 0) {
    if ((HEAP32[$1 + 16 >> 2] | 0) != ($2 | 0)) {
     $13 = $1 + 20 | 0; //@line 14315
     if ((HEAP32[$13 >> 2] | 0) != ($2 | 0)) {
      HEAP32[$1 + 32 >> 2] = $3; //@line 14320
      HEAP32[$13 >> 2] = $2; //@line 14321
      $19 = $1 + 40 | 0; //@line 14322
      HEAP32[$19 >> 2] = (HEAP32[$19 >> 2] | 0) + 1; //@line 14325
      if ((HEAP32[$1 + 36 >> 2] | 0) == 1) {
       if ((HEAP32[$1 + 24 >> 2] | 0) == 2) {
        HEAP8[$1 + 54 >> 0] = 1; //@line 14335
       }
      }
      HEAP32[$1 + 44 >> 2] = 4; //@line 14339
      break;
     }
    }
    if (($3 | 0) == 1) {
     HEAP32[$1 + 32 >> 2] = 1; //@line 14346
    }
   }
  }
 } while (0);
 return;
}
function ___strerror_l($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $7 = 0, label = 0, $$113$looptemp = 0;
 $$016 = 0; //@line 12628
 while (1) {
  if ((HEAPU8[5077 + $$016 >> 0] | 0) == ($0 | 0)) {
   label = 2; //@line 12635
   break;
  }
  $7 = $$016 + 1 | 0; //@line 12638
  if (($7 | 0) == 87) {
   $$01214 = 5165; //@line 12641
   $$115 = 87; //@line 12641
   label = 5; //@line 12642
   break;
  } else {
   $$016 = $7; //@line 12645
  }
 }
 if ((label | 0) == 2) {
  if (!$$016) {
   $$012$lcssa = 5165; //@line 12651
  } else {
   $$01214 = 5165; //@line 12653
   $$115 = $$016; //@line 12653
   label = 5; //@line 12654
  }
 }
 if ((label | 0) == 5) {
  while (1) {
   label = 0; //@line 12659
   $$113 = $$01214; //@line 12660
   do {
    $$113$looptemp = $$113;
    $$113 = $$113 + 1 | 0; //@line 12664
   } while ((HEAP8[$$113$looptemp >> 0] | 0) != 0);
   $$115 = $$115 + -1 | 0; //@line 12671
   if (!$$115) {
    $$012$lcssa = $$113; //@line 12674
    break;
   } else {
    $$01214 = $$113; //@line 12677
    label = 5; //@line 12678
   }
  }
 }
 return ___lctrans($$012$lcssa, HEAP32[$1 + 20 >> 2] | 0) | 0; //@line 12685
}
function __ZL28nsapi_dns_query_async_createPv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 15306
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15312
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15314
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 15316
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15317
 $10 = HEAP32[$6 >> 2] | 0; //@line 15318
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(12) | 0; //@line 15319
 __ZL28nsapi_dns_query_async_deletei($10); //@line 15320
 if (___async) {
  HEAP32[$ReallocAsyncCtx15 >> 2] = 215; //@line 15323
  $11 = $ReallocAsyncCtx15 + 4 | 0; //@line 15324
  HEAP32[$11 >> 2] = $9; //@line 15325
  $12 = $ReallocAsyncCtx15 + 8 | 0; //@line 15326
  HEAP32[$12 >> 2] = $8; //@line 15327
  sp = STACKTOP; //@line 15328
  return;
 }
 ___async_unwind = 0; //@line 15331
 HEAP32[$ReallocAsyncCtx15 >> 2] = 215; //@line 15332
 $11 = $ReallocAsyncCtx15 + 4 | 0; //@line 15333
 HEAP32[$11 >> 2] = $9; //@line 15334
 $12 = $ReallocAsyncCtx15 + 8 | 0; //@line 15335
 HEAP32[$12 >> 2] = $8; //@line 15336
 sp = STACKTOP; //@line 15337
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_114($0) {
 $0 = $0 | 0;
 var $$4$ = 0, $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 9078
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9082
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9084
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 9086
 $$4$ = ($AsyncRetVal | 0) == 0 ? HEAP32[$0 + 4 >> 2] | 0 : $AsyncRetVal; //@line 9088
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(12) | 0; //@line 9089
 __ZN9UDPSocketD2Ev($4); //@line 9090
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 9093
  $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 9094
  HEAP32[$9 >> 2] = $6; //@line 9095
  $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 9096
  HEAP32[$10 >> 2] = $$4$; //@line 9097
  sp = STACKTOP; //@line 9098
  return;
 }
 ___async_unwind = 0; //@line 9101
 HEAP32[$ReallocAsyncCtx5 >> 2] = 161; //@line 9102
 $9 = $ReallocAsyncCtx5 + 4 | 0; //@line 9103
 HEAP32[$9 >> 2] = $6; //@line 9104
 $10 = $ReallocAsyncCtx5 + 8 | 0; //@line 9105
 HEAP32[$10 >> 2] = $$4$; //@line 9106
 sp = STACKTOP; //@line 9107
 return;
}
function _strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $2 = 0, $5 = 0;
 $2 = HEAP8[$1 >> 0] | 0; //@line 12701
 do {
  if (!($2 << 24 >> 24)) {
   $$0 = $0; //@line 12705
  } else {
   $5 = _strchr($0, $2 << 24 >> 24) | 0; //@line 12708
   if (!$5) {
    $$0 = 0; //@line 12711
   } else {
    if (!(HEAP8[$1 + 1 >> 0] | 0)) {
     $$0 = $5; //@line 12717
    } else {
     if (!(HEAP8[$5 + 1 >> 0] | 0)) {
      $$0 = 0; //@line 12723
     } else {
      if (!(HEAP8[$1 + 2 >> 0] | 0)) {
       $$0 = _twobyte_strstr($5, $1) | 0; //@line 12730
       break;
      }
      if (!(HEAP8[$5 + 2 >> 0] | 0)) {
       $$0 = 0; //@line 12737
      } else {
       if (!(HEAP8[$1 + 3 >> 0] | 0)) {
        $$0 = _threebyte_strstr($5, $1) | 0; //@line 12744
        break;
       }
       if (!(HEAP8[$5 + 3 >> 0] | 0)) {
        $$0 = 0; //@line 12751
       } else {
        if (!(HEAP8[$1 + 4 >> 0] | 0)) {
         $$0 = _fourbyte_strstr($5, $1) | 0; //@line 12758
         break;
        } else {
         $$0 = _twoway_strstr($5, $1) | 0; //@line 12762
         break;
        }
       }
      }
     }
    }
   }
  }
 } while (0);
 return $$0 | 0; //@line 12772
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_203($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 16147
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16149
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16151
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16153
 $7 = HEAP32[$2 >> 2] | 0; //@line 16154
 if (!$7) {
  return;
 }
 $9 = HEAP32[$7 >> 2] | 0; //@line 16159
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 16160
 FUNCTION_TABLE_viii[$9 & 0]($4, $6, 0); //@line 16161
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 223; //@line 16164
  $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 16165
  HEAP32[$10 >> 2] = $2; //@line 16166
  $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 16167
  HEAP32[$11 >> 2] = $4; //@line 16168
  sp = STACKTOP; //@line 16169
  return;
 }
 ___async_unwind = 0; //@line 16172
 HEAP32[$ReallocAsyncCtx6 >> 2] = 223; //@line 16173
 $10 = $ReallocAsyncCtx6 + 4 | 0; //@line 16174
 HEAP32[$10 >> 2] = $2; //@line 16175
 $11 = $ReallocAsyncCtx6 + 8 | 0; //@line 16176
 HEAP32[$11 >> 2] = $4; //@line 16177
 sp = STACKTOP; //@line 16178
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2687
 $1 = $0 + 12 | 0; //@line 2688
 $2 = HEAP32[$1 >> 2] | 0; //@line 2689
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 2693
   _mbed_assert_internal(3978, 3983, 528); //@line 2694
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 77; //@line 2697
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 2699
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 2701
    sp = STACKTOP; //@line 2702
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2705
    $7 = HEAP32[$1 >> 2] | 0; //@line 2707
    break;
   }
  } else {
   $7 = $2; //@line 2711
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 2714
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2715
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 2716
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 78; //@line 2719
  sp = STACKTOP; //@line 2720
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 2723
  return;
 }
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 9547
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9553
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9555
 $9 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 9557
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9558
 $10 = HEAP32[$6 >> 2] | 0; //@line 9559
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 9560
 __ZL28nsapi_dns_query_async_deletei($10); //@line 9561
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 244; //@line 9564
  $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 9565
  HEAP32[$11 >> 2] = $9; //@line 9566
  $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 9567
  HEAP32[$12 >> 2] = $8; //@line 9568
  sp = STACKTOP; //@line 9569
  return;
 }
 ___async_unwind = 0; //@line 9572
 HEAP32[$ReallocAsyncCtx9 >> 2] = 244; //@line 9573
 $11 = $ReallocAsyncCtx9 + 4 | 0; //@line 9574
 HEAP32[$11 >> 2] = $9; //@line 9575
 $12 = $ReallocAsyncCtx9 + 8 | 0; //@line 9576
 HEAP32[$12 >> 2] = $8; //@line 9577
 sp = STACKTOP; //@line 9578
 return;
}
function _fourbyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$lcssa = 0, $$sink21$lcssa = 0, $$sink2123 = 0, $18 = 0, $32 = 0, $33 = 0, $35 = 0, $39 = 0, $40 = 0, $41 = 0;
 $18 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8 | (HEAPU8[$1 + 3 >> 0] | 0); //@line 12897
 $32 = $0 + 3 | 0; //@line 12911
 $33 = HEAP8[$32 >> 0] | 0; //@line 12912
 $35 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | (HEAPU8[$0 + 2 >> 0] | 0) << 8 | $33 & 255; //@line 12914
 if ($33 << 24 >> 24 == 0 | ($35 | 0) == ($18 | 0)) {
  $$lcssa = $33; //@line 12919
  $$sink21$lcssa = $32; //@line 12919
 } else {
  $$sink2123 = $32; //@line 12921
  $39 = $35; //@line 12921
  while (1) {
   $40 = $$sink2123 + 1 | 0; //@line 12924
   $41 = HEAP8[$40 >> 0] | 0; //@line 12925
   $39 = $39 << 8 | $41 & 255; //@line 12927
   if ($41 << 24 >> 24 == 0 | ($39 | 0) == ($18 | 0)) {
    $$lcssa = $41; //@line 12932
    $$sink21$lcssa = $40; //@line 12932
    break;
   } else {
    $$sink2123 = $40; //@line 12935
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$sink21$lcssa + -3 | 0 : 0) | 0; //@line 12942
}
function _mbed_vtracef__async_cb_138($0) {
 $0 = $0 | 0;
 var $3 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx2 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 11421
 $3 = HEAP32[134] | 0; //@line 11425
 if (HEAP8[$0 + 4 >> 0] & 1 & ($3 | 0) != 0) {
  $5 = HEAP32[126] | 0; //@line 11429
  $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 11430
  FUNCTION_TABLE_vi[$3 & 511]($5); //@line 11431
  if (___async) {
   HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 11434
   sp = STACKTOP; //@line 11435
   return;
  }
  ___async_unwind = 0; //@line 11438
  HEAP32[$ReallocAsyncCtx2 >> 2] = 66; //@line 11439
  sp = STACKTOP; //@line 11440
  return;
 } else {
  $6 = HEAP32[133] | 0; //@line 11443
  $7 = HEAP32[126] | 0; //@line 11444
  $ReallocAsyncCtx4 = _emscripten_realloc_async_context(4) | 0; //@line 11445
  FUNCTION_TABLE_vi[$6 & 511]($7); //@line 11446
  if (___async) {
   HEAP32[$ReallocAsyncCtx4 >> 2] = 68; //@line 11449
   sp = STACKTOP; //@line 11450
   return;
  }
  ___async_unwind = 0; //@line 11453
  HEAP32[$ReallocAsyncCtx4 >> 2] = 68; //@line 11454
  sp = STACKTOP; //@line 11455
  return;
 }
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv($0) {
 $0 = $0 | 0;
 var $1 = 0, $2 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 4298
 $1 = $0 + 12 | 0; //@line 4299
 $2 = HEAP32[$1 >> 2] | 0; //@line 4300
 do {
  if (!$2) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 4304
   _mbed_assert_internal(3978, 3983, 528); //@line 4305
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 128; //@line 4308
    HEAP32[$AsyncCtx2 + 4 >> 2] = $1; //@line 4310
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 4312
    sp = STACKTOP; //@line 4313
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 4316
    $7 = HEAP32[$1 >> 2] | 0; //@line 4318
    break;
   }
  } else {
   $7 = $2; //@line 4322
  }
 } while (0);
 $6 = HEAP32[$7 >> 2] | 0; //@line 4325
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4326
 FUNCTION_TABLE_vi[$6 & 511]($0); //@line 4327
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 129; //@line 4330
  sp = STACKTOP; //@line 4331
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4334
  return;
 }
}
function _invoke_ticker($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13225
 $2 = $0 + 12 | 0; //@line 13227
 $3 = HEAP32[$2 >> 2] | 0; //@line 13228
 do {
  if (!$3) {
   $AsyncCtx2 = _emscripten_alloc_async_context(12, sp) | 0; //@line 13232
   _mbed_assert_internal(3978, 3983, 528); //@line 13233
   if (___async) {
    HEAP32[$AsyncCtx2 >> 2] = 303; //@line 13236
    HEAP32[$AsyncCtx2 + 4 >> 2] = $2; //@line 13238
    HEAP32[$AsyncCtx2 + 8 >> 2] = $0; //@line 13240
    sp = STACKTOP; //@line 13241
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx2 | 0); //@line 13244
    $8 = HEAP32[$2 >> 2] | 0; //@line 13246
    break;
   }
  } else {
   $8 = $3; //@line 13250
  }
 } while (0);
 $7 = HEAP32[$8 >> 2] | 0; //@line 13253
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13255
 FUNCTION_TABLE_vi[$7 & 511]($0); //@line 13256
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 304; //@line 13259
  sp = STACKTOP; //@line 13260
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13263
  return;
 }
}
function __ZN6SocketD2Ev($0) {
 $0 = $0 | 0;
 var $13 = 0, $2 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 4021
 HEAP32[$0 >> 2] = 572; //@line 4022
 $2 = HEAP32[$0 + 44 >> 2] | 0; //@line 4024
 do {
  if ($2 | 0) {
   $6 = HEAP32[$2 + 8 >> 2] | 0; //@line 4030
   $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 4031
   FUNCTION_TABLE_vi[$6 & 511]($0 + 32 | 0); //@line 4032
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 119; //@line 4035
    HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 4037
    sp = STACKTOP; //@line 4038
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 4041
    break;
   }
  }
 } while (0);
 $9 = HEAP32[$0 + 28 >> 2] | 0; //@line 4047
 if (!$9) {
  return;
 }
 $13 = HEAP32[$9 + 8 >> 2] | 0; //@line 4054
 $AsyncCtx3 = _emscripten_alloc_async_context(4, sp) | 0; //@line 4055
 FUNCTION_TABLE_vi[$13 & 511]($0 + 16 | 0); //@line 4056
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 120; //@line 4059
  sp = STACKTOP; //@line 4060
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 4063
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_37($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 24067
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 24071
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24073
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 24074
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 24078
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 24082
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 24083
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 24084
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 84; //@line 24087
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 24088
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24089
  sp = STACKTOP; //@line 24090
  return;
 }
 ___async_unwind = 0; //@line 24093
 HEAP32[$ReallocAsyncCtx4 >> 2] = 84; //@line 24094
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 24095
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 24096
 sp = STACKTOP; //@line 24097
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_204($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16184
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16186
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16188
 $5 = HEAP32[$2 >> 2] | 0; //@line 16189
 if (!$5) {
  return;
 }
 $7 = HEAP32[$5 >> 2] | 0; //@line 16194
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 16195
 FUNCTION_TABLE_viii[$7 & 0]($4, -3007, 0); //@line 16196
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 217; //@line 16199
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 16200
  HEAP32[$8 >> 2] = $2; //@line 16201
  $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 16202
  HEAP32[$9 >> 2] = $4; //@line 16203
  sp = STACKTOP; //@line 16204
  return;
 }
 ___async_unwind = 0; //@line 16207
 HEAP32[$ReallocAsyncCtx2 >> 2] = 217; //@line 16208
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 16209
 HEAP32[$8 >> 2] = $2; //@line 16210
 $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 16211
 HEAP32[$9 >> 2] = $4; //@line 16212
 sp = STACKTOP; //@line 16213
 return;
}
function _abort_message($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14139
 STACKTOP = STACKTOP + 16 | 0; //@line 14140
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14140
 $1 = sp; //@line 14141
 HEAP32[$1 >> 2] = $varargs; //@line 14142
 $2 = HEAP32[412] | 0; //@line 14143
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 14144
 _vfprintf($2, $0, $1) | 0; //@line 14145
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 342; //@line 14148
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 14150
  sp = STACKTOP; //@line 14151
  STACKTOP = sp; //@line 14152
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 14154
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 14155
 _fputc(10, $2) | 0; //@line 14156
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 343; //@line 14159
  sp = STACKTOP; //@line 14160
  STACKTOP = sp; //@line 14161
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 14163
  _abort(); //@line 14164
 }
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $14 = 0, $2 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 15238
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15240
 $6 = HEAP32[$0 + 16 >> 2] | 0; //@line 15244
 $8 = HEAP32[$0 + 20 >> 2] | 0; //@line 15246
 $10 = HEAP32[$0 + 24 >> 2] | 0; //@line 15248
 if (__ZN13SocketAddress14set_ip_addressEPKc($2, HEAP32[___async_retval >> 2] | 0) | 0) {
  $$0 = __ZNK13SocketAddress14get_ip_versionEv($2) | 0; //@line 15254
 } else {
  $$0 = 0; //@line 15256
 }
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 15258
 $14 = __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version($6, $8, $10, $$0) | 0; //@line 15259
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 90; //@line 15262
  sp = STACKTOP; //@line 15263
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 15267
 ___async_unwind = 0; //@line 15268
 HEAP32[$ReallocAsyncCtx2 >> 2] = 90; //@line 15269
 sp = STACKTOP; //@line 15270
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_125($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 9895
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9897
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9899
 $5 = HEAP32[$2 >> 2] | 0; //@line 9900
 if (!$5) {
  return;
 }
 $7 = HEAP32[$5 >> 2] | 0; //@line 9905
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(12) | 0; //@line 9906
 FUNCTION_TABLE_viii[$7 & 0]($4, -3007, 0); //@line 9907
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 246; //@line 9910
  $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 9911
  HEAP32[$8 >> 2] = $2; //@line 9912
  $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 9913
  HEAP32[$9 >> 2] = $4; //@line 9914
  sp = STACKTOP; //@line 9915
  return;
 }
 ___async_unwind = 0; //@line 9918
 HEAP32[$ReallocAsyncCtx2 >> 2] = 246; //@line 9919
 $8 = $ReallocAsyncCtx2 + 4 | 0; //@line 9920
 HEAP32[$8 >> 2] = $2; //@line 9921
 $9 = $ReallocAsyncCtx2 + 8 | 0; //@line 9922
 HEAP32[$9 >> 2] = $4; //@line 9923
 sp = STACKTOP; //@line 9924
 return;
}
function _threebyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$016$lcssa = 0, $$01618 = 0, $$019 = 0, $$lcssa = 0, $14 = 0, $23 = 0, $24 = 0, $27 = 0, $30 = 0, $31 = 0;
 $14 = (HEAPU8[$1 + 1 >> 0] | 0) << 16 | (HEAPU8[$1 >> 0] | 0) << 24 | (HEAPU8[$1 + 2 >> 0] | 0) << 8; //@line 12831
 $23 = $0 + 2 | 0; //@line 12840
 $24 = HEAP8[$23 >> 0] | 0; //@line 12841
 $27 = (HEAPU8[$0 + 1 >> 0] | 0) << 16 | (HEAPU8[$0 >> 0] | 0) << 24 | ($24 & 255) << 8; //@line 12844
 if (($27 | 0) == ($14 | 0) | $24 << 24 >> 24 == 0) {
  $$016$lcssa = $23; //@line 12849
  $$lcssa = $24; //@line 12849
 } else {
  $$01618 = $23; //@line 12851
  $$019 = $27; //@line 12851
  while (1) {
   $30 = $$01618 + 1 | 0; //@line 12853
   $31 = HEAP8[$30 >> 0] | 0; //@line 12854
   $$019 = ($$019 | $31 & 255) << 8; //@line 12857
   if (($$019 | 0) == ($14 | 0) | $31 << 24 >> 24 == 0) {
    $$016$lcssa = $30; //@line 12862
    $$lcssa = $31; //@line 12862
    break;
   } else {
    $$01618 = $30; //@line 12865
   }
  }
 }
 return ($$lcssa << 24 >> 24 ? $$016$lcssa + -2 | 0 : 0) | 0; //@line 12872
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_34($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 23863
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23867
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23869
 $6 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23870
 if (!$6) {
  HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 23874
  return;
 }
 $9 = HEAP32[$6 + 8 >> 2] | 0; //@line 23878
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 23879
 FUNCTION_TABLE_vi[$9 & 511]($4); //@line 23880
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 23883
  $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 23884
  HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23885
  sp = STACKTOP; //@line 23886
  return;
 }
 ___async_unwind = 0; //@line 23889
 HEAP32[$ReallocAsyncCtx4 >> 2] = 206; //@line 23890
 $10 = $ReallocAsyncCtx4 + 4 | 0; //@line 23891
 HEAP32[$10 >> 2] = $AsyncRetVal; //@line 23892
 sp = STACKTOP; //@line 23893
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2911
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2914
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2915
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 2916
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 87; //@line 2919
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2921
  sp = STACKTOP; //@line 2922
  return 0; //@line 2923
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2925
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 12 >> 2] | 0; //@line 2928
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2929
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 2930
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 88; //@line 2933
  sp = STACKTOP; //@line 2934
  return 0; //@line 2935
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2937
  return $10 | 0; //@line 2938
 }
 return 0; //@line 2940
}
function _frexp($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$016 = 0.0, $2 = 0, $3 = 0, $4 = 0, $9 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12459
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12459
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12460
 $4 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0; //@line 12461
 switch ($4 & 2047) {
 case 0:
  {
   if ($0 != 0.0) {
    $9 = +_frexp($0 * 18446744073709552000.0, $1); //@line 12470
    $$016 = $9; //@line 12473
    $storemerge = (HEAP32[$1 >> 2] | 0) + -64 | 0; //@line 12473
   } else {
    $$016 = $0; //@line 12475
    $storemerge = 0; //@line 12475
   }
   HEAP32[$1 >> 2] = $storemerge; //@line 12477
   $$0 = $$016; //@line 12478
   break;
  }
 case 2047:
  {
   $$0 = $0; //@line 12482
   break;
  }
 default:
  {
   HEAP32[$1 >> 2] = ($4 & 2047) + -1022; //@line 12488
   HEAP32[tempDoublePtr >> 2] = $2; //@line 12491
   HEAP32[tempDoublePtr + 4 >> 2] = $3 & -2146435073 | 1071644672; //@line 12491
   $$0 = +HEAPF64[tempDoublePtr >> 3]; //@line 12492
  }
 }
 return +$$0;
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_88($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 5357
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5361
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5363
 $7 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 5364
 if (!$7) {
  HEAP32[___async_retval >> 2] = $4; //@line 5368
  return;
 }
 $10 = HEAP32[$7 + 8 >> 2] | 0; //@line 5372
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 5373
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 5374
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 5377
  $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 5378
  HEAP32[$11 >> 2] = $4; //@line 5379
  sp = STACKTOP; //@line 5380
  return;
 }
 ___async_unwind = 0; //@line 5383
 HEAP32[$ReallocAsyncCtx4 >> 2] = 169; //@line 5384
 $11 = $ReallocAsyncCtx4 + 4 | 0; //@line 5385
 HEAP32[$11 >> 2] = $4; //@line 5386
 sp = STACKTOP; //@line 5387
 return;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $4 = 0, $5 = 0, $9 = 0, $AsyncCtx = 0, $AsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 2876
 $4 = HEAP32[(HEAP32[$0 >> 2] | 0) + 88 >> 2] | 0; //@line 2879
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 2880
 $5 = FUNCTION_TABLE_ii[$4 & 31]($0) | 0; //@line 2881
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 85; //@line 2884
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 2886
  sp = STACKTOP; //@line 2887
  return 0; //@line 2888
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2890
 $9 = HEAP32[(HEAP32[$5 >> 2] | 0) + 8 >> 2] | 0; //@line 2893
 $AsyncCtx2 = _emscripten_alloc_async_context(4, sp) | 0; //@line 2894
 $10 = FUNCTION_TABLE_iii[$9 & 15]($5, $1) | 0; //@line 2895
 if (___async) {
  HEAP32[$AsyncCtx2 >> 2] = 86; //@line 2898
  sp = STACKTOP; //@line 2899
  return 0; //@line 2900
 } else {
  _emscripten_free_async_context($AsyncCtx2 | 0); //@line 2902
  return $10 | 0; //@line 2903
 }
 return 0; //@line 2905
}
function ___cxa_can_catch($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15777
 STACKTOP = STACKTOP + 16 | 0; //@line 15778
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 15778
 $3 = sp; //@line 15779
 HEAP32[$3 >> 2] = HEAP32[$2 >> 2]; //@line 15781
 $7 = HEAP32[(HEAP32[$0 >> 2] | 0) + 16 >> 2] | 0; //@line 15784
 $AsyncCtx = _emscripten_alloc_async_context(16, sp) | 0; //@line 15785
 $8 = FUNCTION_TABLE_iiii[$7 & 31]($0, $1, $3) | 0; //@line 15786
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 366; //@line 15789
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 15791
  HEAP32[$AsyncCtx + 8 >> 2] = $2; //@line 15793
  HEAP32[$AsyncCtx + 12 >> 2] = $3; //@line 15795
  sp = STACKTOP; //@line 15796
  STACKTOP = sp; //@line 15797
  return 0; //@line 15797
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 15799
 if ($8) {
  HEAP32[$2 >> 2] = HEAP32[$3 >> 2]; //@line 15803
 }
 STACKTOP = sp; //@line 15805
 return $8 & 1 | 0; //@line 15805
}
function _scalbn($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $12 = 0, $14 = 0, $17 = 0, $18 = 0, $3 = 0.0, $5 = 0, $7 = 0;
 if (($1 | 0) > 1023) {
  $3 = $0 * 8.98846567431158e+307; //@line 9376
  $5 = ($1 | 0) > 2046; //@line 9378
  $7 = $1 + -2046 | 0; //@line 9380
  $$0 = $5 ? $3 * 8.98846567431158e+307 : $3; //@line 9385
  $$020 = $5 ? ($7 | 0) < 1023 ? $7 : 1023 : $1 + -1023 | 0; //@line 9385
 } else {
  if (($1 | 0) < -1022) {
   $10 = $0 * 2.2250738585072014e-308; //@line 9389
   $12 = ($1 | 0) < -2044; //@line 9391
   $14 = $1 + 2044 | 0; //@line 9393
   $$0 = $12 ? $10 * 2.2250738585072014e-308 : $10; //@line 9398
   $$020 = $12 ? ($14 | 0) > -1022 ? $14 : -1022 : $1 + 1022 | 0; //@line 9398
  } else {
   $$0 = $0; //@line 9400
   $$020 = $1; //@line 9400
  }
 }
 $17 = _bitshift64Shl($$020 + 1023 | 0, 0, 52) | 0; //@line 9404
 $18 = tempRet0; //@line 9405
 HEAP32[tempDoublePtr >> 2] = $17; //@line 9406
 HEAP32[tempDoublePtr + 4 >> 2] = $18; //@line 9406
 return +($$0 * +HEAPF64[tempDoublePtr >> 3]);
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 15844
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15846
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15848
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15852
 $9 = $2 + 12 | 0; //@line 15854
 HEAP32[$9 >> 2] = HEAP32[HEAP32[$0 + 12 >> 2] >> 2]; //@line 15855
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(24) | 0; //@line 15856
 $10 = _equeue_alloc($4, 16) | 0; //@line 15857
 if (!___async) {
  HEAP32[___async_retval >> 2] = $10; //@line 15861
  ___async_unwind = 0; //@line 15862
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 103; //@line 15864
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $9; //@line 15866
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $8; //@line 15868
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $4; //@line 15870
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $2; //@line 15872
 HEAP32[$ReallocAsyncCtx10 + 20 >> 2] = $9; //@line 15874
 sp = STACKTOP; //@line 15875
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 1158
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1164
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1166
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 1168
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 1170
 $13 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 1172
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 1173
 $14 = HEAP32[$6 >> 2] | 0; //@line 1174
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 1175
 __ZL28nsapi_dns_query_async_deletei($14); //@line 1176
 if (!___async) {
  ___async_unwind = 0; //@line 1179
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 266; //@line 1181
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $13; //@line 1183
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $8; //@line 1185
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $10; //@line 1187
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $12; //@line 1189
 sp = STACKTOP; //@line 1190
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_119($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $13 = 0, $14 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 9710
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9716
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9718
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 9720
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 9722
 $13 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 9724
 HEAP32[$13 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 9725
 $14 = HEAP32[$6 >> 2] | 0; //@line 9726
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(20) | 0; //@line 9727
 __ZL28nsapi_dns_query_async_deletei($14); //@line 9728
 if (!___async) {
  ___async_unwind = 0; //@line 9731
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 250; //@line 9733
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $13; //@line 9735
 HEAP32[$ReallocAsyncCtx8 + 8 >> 2] = $8; //@line 9737
 HEAP32[$ReallocAsyncCtx8 + 12 >> 2] = $10; //@line 9739
 HEAP32[$ReallocAsyncCtx8 + 16 >> 2] = $12; //@line 9741
 sp = STACKTOP; //@line 9742
 return;
}
function _vfprintf__async_cb($0) {
 $0 = $0 | 0;
 var $$ = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $33 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12855
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 12863
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 12865
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 12867
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 12869
 $18 = HEAP32[$0 + 36 >> 2] | 0; //@line 12871
 $20 = HEAP32[$0 + 40 >> 2] | 0; //@line 12873
 $22 = HEAP32[$0 + 44 >> 2] | 0; //@line 12875
 $$ = (HEAP32[$2 >> 2] | 0) == 0 ? -1 : HEAP32[$0 + 8 >> 2] | 0; //@line 12886
 HEAP32[HEAP32[$0 + 16 >> 2] >> 2] = HEAP32[$0 + 12 >> 2]; //@line 12887
 HEAP32[$10 >> 2] = 0; //@line 12888
 HEAP32[$12 >> 2] = 0; //@line 12889
 HEAP32[$14 >> 2] = 0; //@line 12890
 HEAP32[$2 >> 2] = 0; //@line 12891
 $33 = HEAP32[$16 >> 2] | 0; //@line 12892
 HEAP32[$16 >> 2] = $33 | $18; //@line 12897
 if ($20 | 0) {
  ___unlockfile($22); //@line 12900
 }
 HEAP32[___async_retval >> 2] = ($33 & 32 | 0) == 0 ? $$ : -1; //@line 12903
 return;
}
function _mbed_vtracef__async_cb_135($0) {
 $0 = $0 | 0;
 var $$pre = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 11152
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 11156
 if ((HEAP32[$0 + 4 >> 2] | 0) <= 2) {
  return;
 }
 $5 = $4 + -1 | 0; //@line 11161
 $$pre = HEAP32[136] | 0; //@line 11162
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 11163
 FUNCTION_TABLE_v[$$pre & 7](); //@line 11164
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 11167
  $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 11168
  HEAP32[$6 >> 2] = $4; //@line 11169
  $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 11170
  HEAP32[$7 >> 2] = $5; //@line 11171
  sp = STACKTOP; //@line 11172
  return;
 }
 ___async_unwind = 0; //@line 11175
 HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 11176
 $6 = $ReallocAsyncCtx9 + 4 | 0; //@line 11177
 HEAP32[$6 >> 2] = $4; //@line 11178
 $7 = $ReallocAsyncCtx9 + 8 | 0; //@line 11179
 HEAP32[$7 >> 2] = $5; //@line 11180
 sp = STACKTOP; //@line 11181
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_50($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 443
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 449
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 451
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 452
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 456
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 460
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 461
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 462
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 465
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 466
  HEAP32[$13 >> 2] = $6; //@line 467
  sp = STACKTOP; //@line 468
  return;
 }
 ___async_unwind = 0; //@line 471
 HEAP32[$ReallocAsyncCtx5 >> 2] = 118; //@line 472
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 473
 HEAP32[$13 >> 2] = $6; //@line 474
 sp = STACKTOP; //@line 475
 return;
}
function __Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $$byval_copy = 0, $2 = 0, $4 = 0, $AsyncRetVal = 0, sp = 0;
 sp = STACKTOP; //@line 5010
 STACKTOP = STACKTOP + 32 | 0; //@line 5011
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 5011
 $$byval_copy = sp; //@line 5012
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5014
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5016
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 5020
 HEAP32[$$byval_copy >> 2] = HEAP32[$4 >> 2]; //@line 5021
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$4 + 4 >> 2]; //@line 5021
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$4 + 8 >> 2]; //@line 5021
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$4 + 12 >> 2]; //@line 5021
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$4 + 16 >> 2]; //@line 5021
 __ZN13SocketAddress8set_addrE10nsapi_addr($2, $$byval_copy); //@line 5022
 HEAP32[___async_retval >> 2] = ($AsyncRetVal | 0) < 0 ? $AsyncRetVal : 0; //@line 5026
 STACKTOP = sp; //@line 5027
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_143($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $14 = 0, $15 = 0, $16 = 0, $8 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 11889
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 11897
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 11899
 $11 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 11900
 $14 = HEAP32[(HEAP32[$11 >> 2] | 0) + 84 >> 2] | 0; //@line 11903
 $15 = HEAP32[HEAP32[$0 + 12 >> 2] >> 2] | 0; //@line 11904
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 11905
 FUNCTION_TABLE_viiii[$14 & 7]($11, $15, 126, $8); //@line 11906
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 11909
  $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 11910
  HEAP32[$16 >> 2] = $10; //@line 11911
  sp = STACKTOP; //@line 11912
  return;
 }
 ___async_unwind = 0; //@line 11915
 HEAP32[$ReallocAsyncCtx6 >> 2] = 127; //@line 11916
 $16 = $ReallocAsyncCtx6 + 4 | 0; //@line 11917
 HEAP32[$16 >> 2] = $10; //@line 11918
 sp = STACKTOP; //@line 11919
 return;
}
function __Z28nsapi_dns_query_async_canceli__async_cb_26($0) {
 $0 = $0 | 0;
 var $$pre$i$i = 0, $10 = 0, $11 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 23548
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23554
 $$pre$i$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23555
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = $$pre$i$i; //@line 23556
 if (!$$pre$i$i) {
  HEAP32[___async_retval >> 2] = 0; //@line 23560
  return;
 }
 $10 = HEAP32[$$pre$i$i + 8 >> 2] | 0; //@line 23565
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 23566
 FUNCTION_TABLE_vi[$10 & 511]($6); //@line 23567
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 279; //@line 23570
  $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 23571
  HEAP32[$11 >> 2] = $6; //@line 23572
  sp = STACKTOP; //@line 23573
  return;
 }
 ___async_unwind = 0; //@line 23576
 HEAP32[$ReallocAsyncCtx3 >> 2] = 279; //@line 23577
 $11 = $ReallocAsyncCtx3 + 4 | 0; //@line 23578
 HEAP32[$11 >> 2] = $6; //@line 23579
 sp = STACKTOP; //@line 23580
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $10 = 0, $13 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14662
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
   __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14668
  } else {
   $10 = HEAP32[$0 + 8 >> 2] | 0; //@line 14671
   $13 = HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] | 0; //@line 14674
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14675
   FUNCTION_TABLE_viiiiii[$13 & 3]($10, $1, $2, $3, $4, $5); //@line 14676
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 348; //@line 14679
    sp = STACKTOP; //@line 14680
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14683
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_vtracef__async_cb_134($0) {
 $0 = $0 | 0;
 var $$pre = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 11119
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 11121
 if (($2 | 0) <= 1) {
  return;
 }
 $4 = $2 + -1 | 0; //@line 11126
 $$pre = HEAP32[136] | 0; //@line 11127
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(12) | 0; //@line 11128
 FUNCTION_TABLE_v[$$pre & 7](); //@line 11129
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 11132
  $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 11133
  HEAP32[$5 >> 2] = $2; //@line 11134
  $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 11135
  HEAP32[$6 >> 2] = $4; //@line 11136
  sp = STACKTOP; //@line 11137
  return;
 }
 ___async_unwind = 0; //@line 11140
 HEAP32[$ReallocAsyncCtx9 >> 2] = 75; //@line 11141
 $5 = $ReallocAsyncCtx9 + 4 | 0; //@line 11142
 HEAP32[$5 >> 2] = $2; //@line 11143
 $6 = $ReallocAsyncCtx9 + 8 | 0; //@line 11144
 HEAP32[$6 >> 2] = $4; //@line 11145
 sp = STACKTOP; //@line 11146
 return;
}
function __ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_106($0) {
 $0 = $0 | 0;
 var $11 = 0, $13 = 0, $14 = 0, $16 = 0, $18 = 0, $20 = 0, $25 = 0, $4 = 0, $6 = 0, $8 = 0, $AsyncRetVal = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7549
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 7551
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 7553
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7555
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 20 >> 2] = $AsyncRetVal; //@line 7557
 _strcpy($AsyncRetVal, $4) | 0; //@line 7558
 $11 = _emscripten_asm_const_i(8) | 0; //@line 7559
 $13 = (($11 | 0) < 0) << 31 >> 31; //@line 7561
 $14 = ___muldi3($6 | 0, 0, 1e3, 0) | 0; //@line 7562
 $16 = _i64Add($14 | 0, tempRet0 | 0, $11 | 0, $13 | 0) | 0; //@line 7564
 $18 = HEAP32[$8 >> 2] | 0; //@line 7566
 $20 = $18 + 24 | 0; //@line 7568
 HEAP32[$20 >> 2] = $16; //@line 7570
 HEAP32[$20 + 4 >> 2] = tempRet0; //@line 7573
 $25 = $18 + 32 | 0; //@line 7575
 HEAP32[$25 >> 2] = $11; //@line 7577
 HEAP32[$25 + 4 >> 2] = $13; //@line 7580
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_43($0) {
 $0 = $0 | 0;
 var $12 = 0, $13 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 24644
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 24650
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 24652
 $9 = HEAP32[HEAP32[$0 + 8 >> 2] >> 2] | 0; //@line 24653
 if (!$9) {
  HEAP32[___async_retval >> 2] = $6; //@line 24657
  return;
 }
 $12 = HEAP32[$9 + 8 >> 2] | 0; //@line 24661
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 24662
 FUNCTION_TABLE_vi[$12 & 511]($8); //@line 24663
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 24666
  $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 24667
  HEAP32[$13 >> 2] = $6; //@line 24668
  sp = STACKTOP; //@line 24669
  return;
 }
 ___async_unwind = 0; //@line 24672
 HEAP32[$ReallocAsyncCtx5 >> 2] = 275; //@line 24673
 $13 = $ReallocAsyncCtx5 + 4 | 0; //@line 24674
 HEAP32[$13 >> 2] = $6; //@line 24675
 sp = STACKTOP; //@line 24676
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_124($0) {
 $0 = $0 | 0;
 var $11 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 9858
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9860
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9862
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9864
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9866
 $9 = HEAP32[$2 >> 2] | 0; //@line 9867
 if (!$9) {
  _free($6); //@line 9870
  return;
 }
 $11 = HEAP32[$9 >> 2] | 0; //@line 9873
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(20) | 0; //@line 9874
 FUNCTION_TABLE_viii[$11 & 0]($4, -3019, 0); //@line 9875
 if (!___async) {
  ___async_unwind = 0; //@line 9878
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 252; //@line 9880
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 9882
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 9884
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $6; //@line 9886
 HEAP32[$ReallocAsyncCtx6 + 16 >> 2] = $8; //@line 9888
 sp = STACKTOP; //@line 9889
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_153($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0, $9 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12648
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12652
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 12654
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 12656
 $9 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 12658
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 12659
 FUNCTION_TABLE_viii[$9 & 0]($4, 0, $6); //@line 12660
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 92; //@line 12663
  $10 = $ReallocAsyncCtx + 4 | 0; //@line 12664
  HEAP32[$10 >> 2] = $8; //@line 12665
  sp = STACKTOP; //@line 12666
  return;
 }
 ___async_unwind = 0; //@line 12669
 HEAP32[$ReallocAsyncCtx >> 2] = 92; //@line 12670
 $10 = $ReallocAsyncCtx + 4 | 0; //@line 12671
 HEAP32[$10 >> 2] = $8; //@line 12672
 sp = STACKTOP; //@line 12673
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 var $$0 = 0, $14 = 0, $17 = 0, $7 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15661
 $7 = HEAP32[$0 + 4 >> 2] | 0; //@line 15663
 $8 = $7 >> 8; //@line 15664
 if (!($7 & 1)) {
  $$0 = $8; //@line 15668
 } else {
  $$0 = HEAP32[(HEAP32[$3 >> 2] | 0) + $8 >> 2] | 0; //@line 15673
 }
 $14 = HEAP32[$0 >> 2] | 0; //@line 15675
 $17 = HEAP32[(HEAP32[$14 >> 2] | 0) + 20 >> 2] | 0; //@line 15678
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15683
 FUNCTION_TABLE_viiiiii[$17 & 3]($14, $1, $2, $3 + $$0 | 0, $7 & 2 | 0 ? $4 : 2, $5); //@line 15684
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 364; //@line 15687
  sp = STACKTOP; //@line 15688
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15691
  return;
 }
}
function __Znwj($0) {
 $0 = $0 | 0;
 var $$ = 0, $$lcssa = 0, $2 = 0, $4 = 0, $AsyncCtx = 0, label = 0, sp = 0;
 sp = STACKTOP; //@line 13885
 $$ = ($0 | 0) == 0 ? 1 : $0; //@line 13887
 while (1) {
  $2 = _malloc($$) | 0; //@line 13889
  if ($2 | 0) {
   $$lcssa = $2; //@line 13892
   label = 7; //@line 13893
   break;
  }
  $4 = __ZSt15get_new_handlerv() | 0; //@line 13896
  if (!$4) {
   $$lcssa = 0; //@line 13899
   label = 7; //@line 13900
   break;
  }
  $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13903
  FUNCTION_TABLE_v[$4 & 7](); //@line 13904
  if (___async) {
   label = 5; //@line 13907
   break;
  }
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13910
 }
 if ((label | 0) == 5) {
  HEAP32[$AsyncCtx >> 2] = 336; //@line 13913
  HEAP32[$AsyncCtx + 4 >> 2] = $$; //@line 13915
  sp = STACKTOP; //@line 13916
  return 0; //@line 13917
 } else if ((label | 0) == 7) {
  return $$lcssa | 0; //@line 13920
 }
 return 0; //@line 13922
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $11 = 0, $8 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14831
 do {
  if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
   __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14837
  } else {
   $8 = HEAP32[$0 + 8 >> 2] | 0; //@line 14840
   $11 = HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] | 0; //@line 14843
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 14844
   FUNCTION_TABLE_viiii[$11 & 7]($8, $1, $2, $3); //@line 14845
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 351; //@line 14848
    sp = STACKTOP; //@line 14849
    return;
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 14852
    break;
   }
  }
 } while (0);
 return;
}
function _mbed_error_vfprintf__async_cb_167($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13762
 $2 = HEAP8[$0 + 4 >> 0] | 0; //@line 13764
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13766
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 13768
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 13770
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 13772
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(24) | 0; //@line 13774
 _serial_putc(7820, $2 << 24 >> 24); //@line 13775
 if (!___async) {
  ___async_unwind = 0; //@line 13778
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 300; //@line 13780
 HEAP32[$ReallocAsyncCtx2 + 4 >> 2] = $4; //@line 13782
 HEAP32[$ReallocAsyncCtx2 + 8 >> 2] = $6; //@line 13784
 HEAP32[$ReallocAsyncCtx2 + 12 >> 2] = $8; //@line 13786
 HEAP8[$ReallocAsyncCtx2 + 16 >> 0] = $2; //@line 13788
 HEAP32[$ReallocAsyncCtx2 + 20 >> 2] = $10; //@line 13790
 sp = STACKTOP; //@line 13791
 return;
}
function ___dynamic_cast__async_cb_209($0) {
 $0 = $0 | 0;
 var $$0 = 0, $10 = 0, $16 = 0, $6 = 0, $8 = 0;
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16767
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 16769
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 16771
 $16 = HEAP32[$0 + 32 >> 2] | 0; //@line 16777
 L2 : do {
  switch (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) {
  case 0:
   {
    $$0 = (HEAP32[$6 >> 2] | 0) == 1 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1 ? HEAP32[HEAP32[$0 + 24 >> 2] >> 2] | 0 : 0; //@line 16792
    break;
   }
  case 1:
   {
    if ((HEAP32[HEAP32[$0 + 28 >> 2] >> 2] | 0) != 1) {
     if (!((HEAP32[$6 >> 2] | 0) == 0 & (HEAP32[$8 >> 2] | 0) == 1 & (HEAP32[$10 >> 2] | 0) == 1)) {
      $$0 = 0; //@line 16808
      break L2;
     }
    }
    $$0 = HEAP32[$16 >> 2] | 0; //@line 16813
    break;
   }
  default:
   {
    $$0 = 0; //@line 16817
   }
  }
 } while (0);
 HEAP32[___async_retval >> 2] = $$0; //@line 16822
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0 = 0, $13 = 0, $16 = 0, $6 = 0, $7 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15703
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 15705
 $7 = $6 >> 8; //@line 15706
 if (!($6 & 1)) {
  $$0 = $7; //@line 15710
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $7 >> 2] | 0; //@line 15715
 }
 $13 = HEAP32[$0 >> 2] | 0; //@line 15717
 $16 = HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] | 0; //@line 15720
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15725
 FUNCTION_TABLE_viiiii[$16 & 3]($13, $1, $2 + $$0 | 0, $6 & 2 | 0 ? $3 : 2, $4); //@line 15726
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 365; //@line 15729
  sp = STACKTOP; //@line 15730
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15733
  return;
 }
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_192($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 15463
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15469
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 15471
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 15473
 $11 = (HEAP32[$0 + 8 >> 2] | 0) + 12 | 0; //@line 15475
 HEAP32[$11 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 15476
 $12 = HEAP32[$6 >> 2] | 0; //@line 15477
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(16) | 0; //@line 15478
 __ZL28nsapi_dns_query_async_deletei($12); //@line 15479
 if (!___async) {
  ___async_unwind = 0; //@line 15482
 }
 HEAP32[$ReallocAsyncCtx14 >> 2] = 221; //@line 15484
 HEAP32[$ReallocAsyncCtx14 + 4 >> 2] = $11; //@line 15486
 HEAP32[$ReallocAsyncCtx14 + 8 >> 2] = $8; //@line 15488
 HEAP32[$ReallocAsyncCtx14 + 12 >> 2] = $10; //@line 15490
 sp = STACKTOP; //@line 15491
 return;
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 var $10 = 0, $2 = 0, $4 = 0, $6 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23606
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23608
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23610
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23612
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23614
 $9 = HEAP32[HEAP32[$AsyncRetVal >> 2] >> 2] | 0; //@line 23616
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23617
 $10 = FUNCTION_TABLE_iiiii[$9 & 15]($AsyncRetVal, $2, $4, $6) | 0; //@line 23618
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 80; //@line 23621
  sp = STACKTOP; //@line 23622
  return;
 }
 HEAP32[___async_retval >> 2] = $10; //@line 23626
 ___async_unwind = 0; //@line 23627
 HEAP32[$ReallocAsyncCtx2 >> 2] = 80; //@line 23628
 sp = STACKTOP; //@line 23629
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_110($0) {
 $0 = $0 | 0;
 var $10 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 7969
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 7971
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 7979
 $12 = HEAP32[$0 + 24 >> 2] | 0; //@line 7981
 $14 = HEAP32[$0 + 28 >> 2] | 0; //@line 7983
 _free(HEAP32[$0 + 16 >> 2] | 0); //@line 7984
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(16) | 0; //@line 7985
 $15 = __ZN6Socket5closeEv($10) | 0; //@line 7986
 if (!___async) {
  HEAP32[___async_retval >> 2] = $15; //@line 7990
  ___async_unwind = 0; //@line 7991
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 160; //@line 7993
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $2; //@line 7995
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $12; //@line 7997
 HEAP32[$ReallocAsyncCtx6 + 12 >> 2] = $14; //@line 7999
 sp = STACKTOP; //@line 8000
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $12 = 0, $15 = 0, $5 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15618
 $5 = HEAP32[$0 + 4 >> 2] | 0; //@line 15620
 $6 = $5 >> 8; //@line 15621
 if (!($5 & 1)) {
  $$0 = $6; //@line 15625
 } else {
  $$0 = HEAP32[(HEAP32[$2 >> 2] | 0) + $6 >> 2] | 0; //@line 15630
 }
 $12 = HEAP32[$0 >> 2] | 0; //@line 15632
 $15 = HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] | 0; //@line 15635
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15640
 FUNCTION_TABLE_viiii[$15 & 7]($12, $1, $2 + $$0 | 0, $5 & 2 | 0 ? $3 : 2); //@line 15641
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 363; //@line 15644
  sp = STACKTOP; //@line 15645
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 15648
  return;
 }
}
function __ZN6Socket5closeEv__async_cb_107($0) {
 $0 = $0 | 0;
 var $4 = 0, $8 = 0, $9 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 7653
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 7657
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7659
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = 0; //@line 7660
 $8 = HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] | 0; //@line 7663
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 7664
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 7665
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 133; //@line 7668
  $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 7669
  HEAP32[$9 >> 2] = $AsyncRetVal; //@line 7670
  sp = STACKTOP; //@line 7671
  return;
 }
 ___async_unwind = 0; //@line 7674
 HEAP32[$ReallocAsyncCtx3 >> 2] = 133; //@line 7675
 $9 = $ReallocAsyncCtx3 + 4 | 0; //@line 7676
 HEAP32[$9 >> 2] = $AsyncRetVal; //@line 7677
 sp = STACKTOP; //@line 7678
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_3($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15942
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15944
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15948
 $7 = $2 + 12 | 0; //@line 15950
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 8 >> 2] >> 2]; //@line 15951
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(20) | 0; //@line 15952
 $8 = _equeue_alloc($6, 16) | 0; //@line 15953
 if (!___async) {
  HEAP32[___async_retval >> 2] = $8; //@line 15957
  ___async_unwind = 0; //@line 15958
 }
 HEAP32[$ReallocAsyncCtx9 >> 2] = 110; //@line 15960
 HEAP32[$ReallocAsyncCtx9 + 4 >> 2] = $7; //@line 15962
 HEAP32[$ReallocAsyncCtx9 + 8 >> 2] = $6; //@line 15964
 HEAP32[$ReallocAsyncCtx9 + 12 >> 2] = $2; //@line 15966
 HEAP32[$ReallocAsyncCtx9 + 16 >> 2] = $7; //@line 15968
 sp = STACKTOP; //@line 15969
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_98($0) {
 $0 = $0 | 0;
 var $10 = 0, $13 = 0, $14 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 6099
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6103
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 6105
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 6107
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 6109
 $13 = HEAP32[(HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) + 116 >> 2] | 0; //@line 6112
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 6113
 $14 = FUNCTION_TABLE_iiiii[$13 & 15]($4, $6, $8, $10) | 0; //@line 6114
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 56; //@line 6117
  sp = STACKTOP; //@line 6118
  return;
 }
 HEAP32[___async_retval >> 2] = $14; //@line 6122
 ___async_unwind = 0; //@line 6123
 HEAP32[$ReallocAsyncCtx2 >> 2] = 56; //@line 6124
 sp = STACKTOP; //@line 6125
 return;
}
function _pad_676($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 var $$0$lcssa = 0, $$011 = 0, $14 = 0, $5 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 11457
 STACKTOP = STACKTOP + 256 | 0; //@line 11458
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(256); //@line 11458
 $5 = sp; //@line 11459
 if (($2 | 0) > ($3 | 0) & ($4 & 73728 | 0) == 0) {
  $9 = $2 - $3 | 0; //@line 11465
  _memset($5 | 0, $1 << 24 >> 24 | 0, ($9 >>> 0 < 256 ? $9 : 256) | 0) | 0; //@line 11469
  if ($9 >>> 0 > 255) {
   $14 = $2 - $3 | 0; //@line 11472
   $$011 = $9; //@line 11473
   do {
    _out_670($0, $5, 256); //@line 11475
    $$011 = $$011 + -256 | 0; //@line 11476
   } while ($$011 >>> 0 > 255);
   $$0$lcssa = $14 & 255; //@line 11485
  } else {
   $$0$lcssa = $9; //@line 11487
  }
  _out_670($0, $5, $$0$lcssa); //@line 11489
 }
 STACKTOP = sp; //@line 11491
 return;
}
function ___toread($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $15 = 0, $23 = 0, $3 = 0, $7 = 0, $9 = 0;
 $1 = $0 + 74 | 0; //@line 9750
 $3 = HEAP8[$1 >> 0] | 0; //@line 9752
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 9756
 $7 = $0 + 20 | 0; //@line 9757
 $9 = $0 + 28 | 0; //@line 9759
 if ((HEAP32[$7 >> 2] | 0) >>> 0 > (HEAP32[$9 >> 2] | 0) >>> 0) {
  FUNCTION_TABLE_iiii[HEAP32[$0 + 36 >> 2] & 31]($0, 0, 0) | 0; //@line 9765
 }
 HEAP32[$0 + 16 >> 2] = 0; //@line 9768
 HEAP32[$9 >> 2] = 0; //@line 9769
 HEAP32[$7 >> 2] = 0; //@line 9770
 $15 = HEAP32[$0 >> 2] | 0; //@line 9771
 if (!($15 & 4)) {
  $23 = (HEAP32[$0 + 44 >> 2] | 0) + (HEAP32[$0 + 48 >> 2] | 0) | 0; //@line 9779
  HEAP32[$0 + 8 >> 2] = $23; //@line 9781
  HEAP32[$0 + 4 >> 2] = $23; //@line 9783
  $$0 = $15 << 27 >> 31; //@line 9786
 } else {
  HEAP32[$0 >> 2] = $15 | 32; //@line 9789
  $$0 = -1; //@line 9790
 }
 return $$0 | 0; //@line 9792
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_83($0) {
 $0 = $0 | 0;
 var $10 = 0, $11 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4980
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 4984
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 4986
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 4988
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 4990
 $11 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 4992
 $ReallocAsyncCtx = _emscripten_realloc_async_context(12) | 0; //@line 4993
 FUNCTION_TABLE_viii[$11 & 0]($4, 0, $6); //@line 4994
 if (!___async) {
  ___async_unwind = 0; //@line 4997
 }
 HEAP32[$ReallocAsyncCtx >> 2] = 171; //@line 4999
 HEAP32[$ReallocAsyncCtx + 4 >> 2] = $8; //@line 5001
 HEAP32[$ReallocAsyncCtx + 8 >> 2] = $10; //@line 5003
 sp = STACKTOP; //@line 5004
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_193($0) {
 $0 = $0 | 0;
 var $$pr$i72 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15497
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15501
 $$pr$i72 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15502
 if (!$$pr$i72) {
  return;
 }
 $7 = HEAP32[$$pr$i72 + 8 >> 2] | 0; //@line 15508
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 15509
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 15510
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 224; //@line 15513
  $8 = $ReallocAsyncCtx7 + 4 | 0; //@line 15514
  HEAP32[$8 >> 2] = $4; //@line 15515
  sp = STACKTOP; //@line 15516
  return;
 }
 ___async_unwind = 0; //@line 15519
 HEAP32[$ReallocAsyncCtx7 >> 2] = 224; //@line 15520
 $8 = $ReallocAsyncCtx7 + 4 | 0; //@line 15521
 HEAP32[$8 >> 2] = $4; //@line 15522
 sp = STACKTOP; //@line 15523
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$i = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 720
 $3 = HEAP32[$1 >> 2] | 0; //@line 721
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 723
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0$i = -3012; //@line 729
  return $$0$i | 0; //@line 730
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 732
 _wait_ms(1); //@line 733
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 50; //@line 736
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 738
  sp = STACKTOP; //@line 739
  return 0; //@line 740
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 742
 HEAP8[$1 + 8 >> 0] = 1; //@line 744
 $$0$i = 0; //@line 745
 return $$0$i | 0; //@line 746
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_189($0) {
 $0 = $0 | 0;
 var $$pr$i = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 15343
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 15347
 $$pr$i = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 15348
 if (!$$pr$i) {
  return;
 }
 $7 = HEAP32[$$pr$i + 8 >> 2] | 0; //@line 15354
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 15355
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 15356
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 15359
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 15360
  HEAP32[$8 >> 2] = $4; //@line 15361
  sp = STACKTOP; //@line 15362
  return;
 }
 ___async_unwind = 0; //@line 15365
 HEAP32[$ReallocAsyncCtx3 >> 2] = 218; //@line 15366
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 15367
 HEAP32[$8 >> 2] = $4; //@line 15368
 sp = STACKTOP; //@line 15369
 return;
}
function _realloc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $11 = 0, $14 = 0, $17 = 0, $22 = 0;
 if (!$0) {
  $$1 = _malloc($1) | 0; //@line 3155
  return $$1 | 0; //@line 3156
 }
 if ($1 >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12; //@line 3161
  $$1 = 0; //@line 3162
  return $$1 | 0; //@line 3163
 }
 $11 = _try_realloc_chunk($0 + -8 | 0, $1 >>> 0 < 11 ? 16 : $1 + 11 & -8) | 0; //@line 3170
 if ($11 | 0) {
  $$1 = $11 + 8 | 0; //@line 3174
  return $$1 | 0; //@line 3175
 }
 $14 = _malloc($1) | 0; //@line 3177
 if (!$14) {
  $$1 = 0; //@line 3180
  return $$1 | 0; //@line 3181
 }
 $17 = HEAP32[$0 + -4 >> 2] | 0; //@line 3184
 $22 = ($17 & -8) - (($17 & 3 | 0) == 0 ? 8 : 4) | 0; //@line 3189
 _memcpy($14 | 0, $0 | 0, ($22 >>> 0 < $1 >>> 0 ? $22 : $1) | 0) | 0; //@line 3192
 _free($0); //@line 3193
 $$1 = $14; //@line 3194
 return $$1 | 0; //@line 3195
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_86($0) {
 $0 = $0 | 0;
 var $11 = 0, $12 = 0, $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 5175
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5177
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5179
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 5181
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 5183
 $11 = HEAP32[(HEAP32[$2 >> 2] | 0) + 116 >> 2] | 0; //@line 5186
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 5187
 $12 = FUNCTION_TABLE_iiiii[$11 & 15]($2, $4, $6, $8) | 0; //@line 5188
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 43; //@line 5191
  sp = STACKTOP; //@line 5192
  return;
 }
 HEAP32[___async_retval >> 2] = $12; //@line 5196
 ___async_unwind = 0; //@line 5197
 HEAP32[$ReallocAsyncCtx2 >> 2] = 43; //@line 5198
 sp = STACKTOP; //@line 5199
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_116($0) {
 $0 = $0 | 0;
 var $$pr$i52 = 0, $4 = 0, $7 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 9584
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9588
 $$pr$i52 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 9589
 if (!$$pr$i52) {
  return;
 }
 $7 = HEAP32[$$pr$i52 + 8 >> 2] | 0; //@line 9595
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 9596
 FUNCTION_TABLE_vi[$7 & 511]($4); //@line 9597
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 247; //@line 9600
  $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 9601
  HEAP32[$8 >> 2] = $4; //@line 9602
  sp = STACKTOP; //@line 9603
  return;
 }
 ___async_unwind = 0; //@line 9606
 HEAP32[$ReallocAsyncCtx3 >> 2] = 247; //@line 9607
 $8 = $ReallocAsyncCtx3 + 4 | 0; //@line 9608
 HEAP32[$8 >> 2] = $4; //@line 9609
 sp = STACKTOP; //@line 9610
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0 = 0, $3 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 317
 $3 = HEAP32[$1 >> 2] | 0; //@line 318
 $5 = __ZNK13SocketAddress14get_ip_addressEv($2) | 0; //@line 320
 if (_emscripten_asm_const_iiii(5, $3 | 0, $5 | 0, (__ZNK13SocketAddress8get_portEv($2) | 0) & 65535 | 0) | 0) {
  $$0 = -3012; //@line 326
  return $$0 | 0; //@line 327
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 329
 _wait_ms(1); //@line 330
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 37; //@line 333
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 335
  sp = STACKTOP; //@line 336
  return 0; //@line 337
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 339
 HEAP8[$1 + 8 >> 0] = 1; //@line 341
 $$0 = 0; //@line 342
 return $$0 | 0; //@line 343
}
function _mbed_assert_internal($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 12700
 STACKTOP = STACKTOP + 16 | 0; //@line 12701
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 12701
 $vararg_buffer = sp; //@line 12702
 HEAP32[$vararg_buffer >> 2] = $0; //@line 12703
 HEAP32[$vararg_buffer + 4 >> 2] = $1; //@line 12705
 HEAP32[$vararg_buffer + 8 >> 2] = $2; //@line 12707
 _mbed_error_printf(3855, $vararg_buffer); //@line 12708
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12709
 _mbed_die(); //@line 12710
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 280; //@line 12713
  sp = STACKTOP; //@line 12714
  STACKTOP = sp; //@line 12715
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12717
  STACKTOP = sp; //@line 12718
  return;
 }
}
function ___stdio_seek($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $3 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4499
 STACKTOP = STACKTOP + 32 | 0; //@line 4500
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4500
 $vararg_buffer = sp; //@line 4501
 $3 = sp + 20 | 0; //@line 4502
 HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4506
 HEAP32[$vararg_buffer + 4 >> 2] = 0; //@line 4508
 HEAP32[$vararg_buffer + 8 >> 2] = $1; //@line 4510
 HEAP32[$vararg_buffer + 12 >> 2] = $3; //@line 4512
 HEAP32[$vararg_buffer + 16 >> 2] = $2; //@line 4514
 if ((___syscall_ret(___syscall140(140, $vararg_buffer | 0) | 0) | 0) < 0) {
  HEAP32[$3 >> 2] = -1; //@line 4519
  $10 = -1; //@line 4520
 } else {
  $10 = HEAP32[$3 >> 2] | 0; //@line 4523
 }
 STACKTOP = sp; //@line 4525
 return $10 | 0; //@line 4525
}
function __ZN12NetworkStack14add_dns_serverERK13SocketAddress($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 3428
 STACKTOP = STACKTOP + 48 | 0; //@line 3429
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(48); //@line 3429
 $$byval_copy = sp + 20 | 0; //@line 3430
 $2 = sp; //@line 3431
 __ZNK13SocketAddress8get_addrEv($2, $1); //@line 3432
 HEAP32[$$byval_copy >> 2] = HEAP32[$2 >> 2]; //@line 3433
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 3433
 HEAP32[$$byval_copy + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 3433
 HEAP32[$$byval_copy + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 3433
 HEAP32[$$byval_copy + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 3433
 $3 = _nsapi_dns_add_server($$byval_copy) | 0; //@line 3434
 STACKTOP = sp; //@line 3435
 return $3 | 0; //@line 3435
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_122($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 9806
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9808
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9810
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 9812
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 9814
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(20) | 0; //@line 9815
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9816
 if (!___async) {
  ___async_unwind = 0; //@line 9819
 }
 HEAP32[$ReallocAsyncCtx10 >> 2] = 251; //@line 9821
 HEAP32[$ReallocAsyncCtx10 + 4 >> 2] = $2; //@line 9823
 HEAP32[$ReallocAsyncCtx10 + 8 >> 2] = $4; //@line 9825
 HEAP32[$ReallocAsyncCtx10 + 12 >> 2] = $6; //@line 9827
 HEAP32[$ReallocAsyncCtx10 + 16 >> 2] = $8; //@line 9829
 sp = STACKTOP; //@line 9830
 return;
}
function _printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13609
 STACKTOP = STACKTOP + 16 | 0; //@line 13610
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13610
 $1 = sp; //@line 13611
 HEAP32[$1 >> 2] = $varargs; //@line 13612
 $2 = HEAP32[444] | 0; //@line 13613
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13614
 $3 = _vfprintf($2, $0, $1) | 0; //@line 13615
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 332; //@line 13618
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13620
  sp = STACKTOP; //@line 13621
  STACKTOP = sp; //@line 13622
  return 0; //@line 13622
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13624
  STACKTOP = sp; //@line 13625
  return $3 | 0; //@line 13625
 }
 return 0; //@line 13627
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_67($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $8 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 1450
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1452
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1454
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 1456
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 1458
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(20) | 0; //@line 1459
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 1460
 if (!___async) {
  ___async_unwind = 0; //@line 1463
 }
 HEAP32[$ReallocAsyncCtx7 >> 2] = 267; //@line 1465
 HEAP32[$ReallocAsyncCtx7 + 4 >> 2] = $2; //@line 1467
 HEAP32[$ReallocAsyncCtx7 + 8 >> 2] = $4; //@line 1469
 HEAP32[$ReallocAsyncCtx7 + 12 >> 2] = $6; //@line 1471
 HEAP32[$ReallocAsyncCtx7 + 16 >> 2] = $8; //@line 1473
 sp = STACKTOP; //@line 1474
 return;
}
function _snprintf($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13336
 STACKTOP = STACKTOP + 16 | 0; //@line 13337
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13337
 $3 = sp; //@line 13338
 HEAP32[$3 >> 2] = $varargs; //@line 13339
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13340
 $4 = _vsnprintf($0, $1, $2, $3) | 0; //@line 13341
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 328; //@line 13344
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 13346
  sp = STACKTOP; //@line 13347
  STACKTOP = sp; //@line 13348
  return 0; //@line 13348
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13350
  STACKTOP = sp; //@line 13351
  return $4 | 0; //@line 13351
 }
 return 0; //@line 13353
}
function _mbed_vtracef__async_cb_133($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 11089
 HEAP32[130] = HEAP32[128]; //@line 11091
 $2 = HEAP32[136] | 0; //@line 11092
 if (!$2) {
  return;
 }
 $4 = HEAP32[137] | 0; //@line 11097
 HEAP32[137] = 0; //@line 11098
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 11099
 FUNCTION_TABLE_v[$2 & 7](); //@line 11100
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 11103
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 11104
  HEAP32[$5 >> 2] = $4; //@line 11105
  sp = STACKTOP; //@line 11106
  return;
 }
 ___async_unwind = 0; //@line 11109
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 11110
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 11111
 HEAP32[$5 >> 2] = $4; //@line 11112
 sp = STACKTOP; //@line 11113
 return;
}
function _mbed_vtracef__async_cb_130($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 10825
 HEAP32[130] = HEAP32[128]; //@line 10827
 $2 = HEAP32[136] | 0; //@line 10828
 if (!$2) {
  return;
 }
 $4 = HEAP32[137] | 0; //@line 10833
 HEAP32[137] = 0; //@line 10834
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 10835
 FUNCTION_TABLE_v[$2 & 7](); //@line 10836
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 10839
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 10840
  HEAP32[$5 >> 2] = $4; //@line 10841
  sp = STACKTOP; //@line 10842
  return;
 }
 ___async_unwind = 0; //@line 10845
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 10846
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 10847
 HEAP32[$5 >> 2] = $4; //@line 10848
 sp = STACKTOP; //@line 10849
 return;
}
function _mbed_vtracef__async_cb_129($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $5 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 10795
 HEAP32[130] = HEAP32[128]; //@line 10797
 $2 = HEAP32[136] | 0; //@line 10798
 if (!$2) {
  return;
 }
 $4 = HEAP32[137] | 0; //@line 10803
 HEAP32[137] = 0; //@line 10804
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 10805
 FUNCTION_TABLE_v[$2 & 7](); //@line 10806
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 10809
  $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 10810
  HEAP32[$5 >> 2] = $4; //@line 10811
  sp = STACKTOP; //@line 10812
  return;
 }
 ___async_unwind = 0; //@line 10815
 HEAP32[$ReallocAsyncCtx8 >> 2] = 74; //@line 10816
 $5 = $ReallocAsyncCtx8 + 4 | 0; //@line 10817
 HEAP32[$5 >> 2] = $4; //@line 10818
 sp = STACKTOP; //@line 10819
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv($0) {
 $0 = $0 | 0;
 var $$unpack$i = 0, $$unpack2$i = 0, $11 = 0, $4 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 4341
 $$unpack$i = HEAP32[$0 >> 2] | 0; //@line 4344
 $$unpack2$i = HEAP32[$0 + 4 >> 2] | 0; //@line 4346
 $4 = (HEAP32[$0 + 8 >> 2] | 0) + ($$unpack2$i >> 1) | 0; //@line 4348
 if (!($$unpack2$i & 1)) {
  $11 = $$unpack$i; //@line 4353
 } else {
  $11 = HEAP32[(HEAP32[$4 >> 2] | 0) + $$unpack$i >> 2] | 0; //@line 4358
 }
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 4360
 FUNCTION_TABLE_vi[$11 & 511]($4); //@line 4361
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 130; //@line 4364
  sp = STACKTOP; //@line 4365
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 4368
  return;
 }
}
function _sprintf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13567
 STACKTOP = STACKTOP + 16 | 0; //@line 13568
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13568
 $2 = sp; //@line 13569
 HEAP32[$2 >> 2] = $varargs; //@line 13570
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13571
 $3 = _vsprintf($0, $1, $2) | 0; //@line 13572
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 330; //@line 13575
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 13577
  sp = STACKTOP; //@line 13578
  STACKTOP = sp; //@line 13579
  return 0; //@line 13579
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13581
  STACKTOP = sp; //@line 13582
  return $3 | 0; //@line 13582
 }
 return 0; //@line 13584
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $10 = 0, $13 = 0, $4 = 0, $5 = 0;
 $4 = $1 + 16 | 0; //@line 14384
 $5 = HEAP32[$4 >> 2] | 0; //@line 14385
 do {
  if (!$5) {
   HEAP32[$4 >> 2] = $2; //@line 14389
   HEAP32[$1 + 24 >> 2] = $3; //@line 14391
   HEAP32[$1 + 36 >> 2] = 1; //@line 14393
  } else {
   if (($5 | 0) != ($2 | 0)) {
    $13 = $1 + 36 | 0; //@line 14397
    HEAP32[$13 >> 2] = (HEAP32[$13 >> 2] | 0) + 1; //@line 14400
    HEAP32[$1 + 24 >> 2] = 2; //@line 14402
    HEAP8[$1 + 54 >> 0] = 1; //@line 14404
    break;
   }
   $10 = $1 + 24 | 0; //@line 14407
   if ((HEAP32[$10 >> 2] | 0) == 2) {
    HEAP32[$10 >> 2] = $3; //@line 14411
   }
  }
 } while (0);
 return;
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 1529
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 1531
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 1533
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 12 >> 2] | 0; //@line 1536
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 1537
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 1538
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 88; //@line 1541
  sp = STACKTOP; //@line 1542
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 1546
 ___async_unwind = 0; //@line 1547
 HEAP32[$ReallocAsyncCtx2 >> 2] = 88; //@line 1548
 sp = STACKTOP; //@line 1549
 return;
}
function _equeue_post($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $4 = 0, $6 = 0, $9 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1383
 $4 = _equeue_tick() | 0; //@line 1385
 HEAP32[$2 + -4 >> 2] = $1; //@line 1387
 $6 = $2 + -16 | 0; //@line 1388
 HEAP32[$6 >> 2] = (HEAP32[$6 >> 2] | 0) + $4; //@line 1391
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1392
 $9 = _equeue_enqueue($0, $2 + -36 | 0, $4) | 0; //@line 1393
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 60; //@line 1396
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 1398
  sp = STACKTOP; //@line 1399
  return 0; //@line 1400
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1402
  _equeue_sema_signal($0 + 48 | 0); //@line 1404
  return $9 | 0; //@line 1405
 }
 return 0; //@line 1407
}
function __ZneRK13SocketAddressS1_($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0$i = 0, $10 = 0, $11 = 0, $5 = 0, label = 0;
 if (__ZNK13SocketAddresscvbEv($0) | 0) {
  label = 3; //@line 5056
 } else {
  if (__ZNK13SocketAddresscvbEv($1) | 0) {
   label = 3; //@line 5060
  } else {
   $$0$i = 1; //@line 5062
  }
 }
 do {
  if ((label | 0) == 3) {
   $5 = HEAP32[$0 + 40 >> 2] | 0; //@line 5068
   if (($5 | 0) == (HEAP32[$1 + 40 >> 2] | 0)) {
    $10 = $0 + 44 | 0; //@line 5074
    $11 = $1 + 44 | 0; //@line 5075
    if (($5 | 0) == 1) {
     $$0$i = (_memcmp($10, $11, 4) | 0) == 0; //@line 5079
     break;
    } else {
     $$0$i = (_memcmp($10, $11, 16) | 0) == 0; //@line 5084
     break;
    }
   } else {
    $$0$i = 0; //@line 5088
   }
  }
 } while (0);
 return $$0$i ^ 1 | 0; //@line 5093
}
function _serial_putc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, $AsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 13197
 $2 = HEAP32[444] | 0; //@line 13198
 $AsyncCtx3 = _emscripten_alloc_async_context(8, sp) | 0; //@line 13199
 _putc($1, $2) | 0; //@line 13200
 if (___async) {
  HEAP32[$AsyncCtx3 >> 2] = 301; //@line 13203
  HEAP32[$AsyncCtx3 + 4 >> 2] = $2; //@line 13205
  sp = STACKTOP; //@line 13206
  return;
 }
 _emscripten_free_async_context($AsyncCtx3 | 0); //@line 13209
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13210
 _fflush($2) | 0; //@line 13211
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 302; //@line 13214
  sp = STACKTOP; //@line 13215
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13218
  return;
 }
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $7 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 23780
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23784
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23786
 $7 = $4 + 12 | 0; //@line 23788
 HEAP32[$7 >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 23789
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(12) | 0; //@line 23790
 __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2_(7768, $6, $4) | 0; //@line 23791
 if (!___async) {
  ___async_unwind = 0; //@line 23794
 }
 HEAP32[$ReallocAsyncCtx6 >> 2] = 202; //@line 23796
 HEAP32[$ReallocAsyncCtx6 + 4 >> 2] = $7; //@line 23798
 HEAP32[$ReallocAsyncCtx6 + 8 >> 2] = $4; //@line 23800
 sp = STACKTOP; //@line 23801
 return;
}
function __ZSt11__terminatePFvvE($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 14934
 STACKTOP = STACKTOP + 16 | 0; //@line 14935
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14935
 $vararg_buffer = sp; //@line 14936
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 14937
 FUNCTION_TABLE_v[$0 & 7](); //@line 14938
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 353; //@line 14941
  HEAP32[$AsyncCtx + 4 >> 2] = $vararg_buffer; //@line 14943
  HEAP32[$AsyncCtx + 8 >> 2] = $vararg_buffer; //@line 14945
  sp = STACKTOP; //@line 14946
  STACKTOP = sp; //@line 14947
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 14949
  _abort_message(7396, $vararg_buffer); //@line 14950
 }
}
function __Znwj__async_cb($0) {
 $0 = $0 | 0;
 var $$lcssa = 0, $2 = 0, $3 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5070
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5072
 $3 = _malloc($2) | 0; //@line 5073
 if (!$3) {
  $5 = __ZSt15get_new_handlerv() | 0; //@line 5076
  if (!$5) {
   $$lcssa = 0; //@line 5079
  } else {
   $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 5081
   FUNCTION_TABLE_v[$5 & 7](); //@line 5082
   if (!___async) {
    ___async_unwind = 0; //@line 5085
   }
   HEAP32[$ReallocAsyncCtx >> 2] = 336; //@line 5087
   HEAP32[$ReallocAsyncCtx + 4 >> 2] = $2; //@line 5089
   sp = STACKTOP; //@line 5090
   return;
  }
 } else {
  $$lcssa = $3; //@line 5094
 }
 HEAP32[___async_retval >> 2] = $$lcssa; //@line 5097
 return;
}
function _strcmp($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $2 = 0, $3 = 0, $8 = 0, $9 = 0;
 $2 = HEAP8[$0 >> 0] | 0; //@line 4606
 $3 = HEAP8[$1 >> 0] | 0; //@line 4607
 if ($2 << 24 >> 24 == 0 ? 1 : $2 << 24 >> 24 != $3 << 24 >> 24) {
  $$lcssa = $3; //@line 4612
  $$lcssa8 = $2; //@line 4612
 } else {
  $$011 = $1; //@line 4614
  $$0710 = $0; //@line 4614
  do {
   $$0710 = $$0710 + 1 | 0; //@line 4616
   $$011 = $$011 + 1 | 0; //@line 4617
   $8 = HEAP8[$$0710 >> 0] | 0; //@line 4618
   $9 = HEAP8[$$011 >> 0] | 0; //@line 4619
  } while (!($8 << 24 >> 24 == 0 ? 1 : $8 << 24 >> 24 != $9 << 24 >> 24));
  $$lcssa = $9; //@line 4624
  $$lcssa8 = $8; //@line 4624
 }
 return ($$lcssa8 & 255) - ($$lcssa & 255) | 0; //@line 4634
}
function _memcmp($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $14 = 0, $4 = 0, $5 = 0;
 L1 : do {
  if (!$2) {
   $14 = 0; //@line 13301
  } else {
   $$01318 = $0; //@line 13303
   $$01417 = $2; //@line 13303
   $$019 = $1; //@line 13303
   while (1) {
    $4 = HEAP8[$$01318 >> 0] | 0; //@line 13305
    $5 = HEAP8[$$019 >> 0] | 0; //@line 13306
    if ($4 << 24 >> 24 != $5 << 24 >> 24) {
     break;
    }
    $$01417 = $$01417 + -1 | 0; //@line 13311
    if (!$$01417) {
     $14 = 0; //@line 13316
     break L1;
    } else {
     $$01318 = $$01318 + 1 | 0; //@line 13319
     $$019 = $$019 + 1 | 0; //@line 13319
    }
   }
   $14 = ($4 & 255) - ($5 & 255) | 0; //@line 13325
  }
 } while (0);
 return $14 | 0; //@line 13328
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $6 = 0, $7 = 0, $AsyncRetVal = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 3
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 7
 $6 = HEAP32[(HEAP32[$AsyncRetVal >> 2] | 0) + 8 >> 2] | 0; //@line 10
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 11
 $7 = FUNCTION_TABLE_iii[$6 & 15]($AsyncRetVal, $2) | 0; //@line 12
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 86; //@line 15
  sp = STACKTOP; //@line 16
  return;
 }
 HEAP32[___async_retval >> 2] = $7; //@line 20
 ___async_unwind = 0; //@line 21
 HEAP32[$ReallocAsyncCtx2 >> 2] = 86; //@line 22
 sp = STACKTOP; //@line 23
 return;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_35($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 23899
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23903
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 23904
 if (!$5) {
  HEAP32[___async_retval >> 2] = 0; //@line 23908
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 23912
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 23913
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 23914
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 203; //@line 23917
  sp = STACKTOP; //@line 23918
  return;
 }
 ___async_unwind = 0; //@line 23921
 HEAP32[$ReallocAsyncCtx2 >> 2] = 203; //@line 23922
 sp = STACKTOP; //@line 23923
 return;
}
function _mbed_die__async_cb_186($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx14 = 0, sp = 0;
 sp = STACKTOP; //@line 15192
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15194
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15196
 $ReallocAsyncCtx14 = _emscripten_realloc_async_context(8) | 0; //@line 15197
 _wait_ms(150); //@line 15198
 if (___async) {
  HEAP32[$ReallocAsyncCtx14 >> 2] = 283; //@line 15201
  $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 15202
  HEAP32[$4 >> 2] = $2; //@line 15203
  sp = STACKTOP; //@line 15204
  return;
 }
 ___async_unwind = 0; //@line 15207
 HEAP32[$ReallocAsyncCtx14 >> 2] = 283; //@line 15208
 $4 = $ReallocAsyncCtx14 + 4 | 0; //@line 15209
 HEAP32[$4 >> 2] = $2; //@line 15210
 sp = STACKTOP; //@line 15211
 return;
}
function _mbed_die__async_cb_185($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 15167
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15169
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15171
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(8) | 0; //@line 15172
 _wait_ms(150); //@line 15173
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 284; //@line 15176
  $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 15177
  HEAP32[$4 >> 2] = $2; //@line 15178
  sp = STACKTOP; //@line 15179
  return;
 }
 ___async_unwind = 0; //@line 15182
 HEAP32[$ReallocAsyncCtx13 >> 2] = 284; //@line 15183
 $4 = $ReallocAsyncCtx13 + 4 | 0; //@line 15184
 HEAP32[$4 >> 2] = $2; //@line 15185
 sp = STACKTOP; //@line 15186
 return;
}
function _mbed_die__async_cb_184($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx12 = 0, sp = 0;
 sp = STACKTOP; //@line 15142
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15144
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15146
 $ReallocAsyncCtx12 = _emscripten_realloc_async_context(8) | 0; //@line 15147
 _wait_ms(150); //@line 15148
 if (___async) {
  HEAP32[$ReallocAsyncCtx12 >> 2] = 285; //@line 15151
  $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 15152
  HEAP32[$4 >> 2] = $2; //@line 15153
  sp = STACKTOP; //@line 15154
  return;
 }
 ___async_unwind = 0; //@line 15157
 HEAP32[$ReallocAsyncCtx12 >> 2] = 285; //@line 15158
 $4 = $ReallocAsyncCtx12 + 4 | 0; //@line 15159
 HEAP32[$4 >> 2] = $2; //@line 15160
 sp = STACKTOP; //@line 15161
 return;
}
function _mbed_die__async_cb_183($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 15117
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15119
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15121
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(8) | 0; //@line 15122
 _wait_ms(150); //@line 15123
 if (___async) {
  HEAP32[$ReallocAsyncCtx11 >> 2] = 286; //@line 15126
  $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 15127
  HEAP32[$4 >> 2] = $2; //@line 15128
  sp = STACKTOP; //@line 15129
  return;
 }
 ___async_unwind = 0; //@line 15132
 HEAP32[$ReallocAsyncCtx11 >> 2] = 286; //@line 15133
 $4 = $ReallocAsyncCtx11 + 4 | 0; //@line 15134
 HEAP32[$4 >> 2] = $2; //@line 15135
 sp = STACKTOP; //@line 15136
 return;
}
function _mbed_die__async_cb_182($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx10 = 0, sp = 0;
 sp = STACKTOP; //@line 15092
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15094
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15096
 $ReallocAsyncCtx10 = _emscripten_realloc_async_context(8) | 0; //@line 15097
 _wait_ms(150); //@line 15098
 if (___async) {
  HEAP32[$ReallocAsyncCtx10 >> 2] = 287; //@line 15101
  $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 15102
  HEAP32[$4 >> 2] = $2; //@line 15103
  sp = STACKTOP; //@line 15104
  return;
 }
 ___async_unwind = 0; //@line 15107
 HEAP32[$ReallocAsyncCtx10 >> 2] = 287; //@line 15108
 $4 = $ReallocAsyncCtx10 + 4 | 0; //@line 15109
 HEAP32[$4 >> 2] = $2; //@line 15110
 sp = STACKTOP; //@line 15111
 return;
}
function _mbed_tracef($0, $1, $2, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $varargs = $varargs | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1674
 STACKTOP = STACKTOP + 16 | 0; //@line 1675
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1675
 $3 = sp; //@line 1676
 HEAP32[$3 >> 2] = $varargs; //@line 1677
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 1678
 _mbed_vtracef($0, $1, $2, $3); //@line 1679
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 63; //@line 1682
  HEAP32[$AsyncCtx + 4 >> 2] = $3; //@line 1684
  sp = STACKTOP; //@line 1685
  STACKTOP = sp; //@line 1686
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1688
  STACKTOP = sp; //@line 1689
  return;
 }
}
function _mbed_die__async_cb_181($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 15067
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15069
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15071
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(8) | 0; //@line 15072
 _wait_ms(150); //@line 15073
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 288; //@line 15076
  $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 15077
  HEAP32[$4 >> 2] = $2; //@line 15078
  sp = STACKTOP; //@line 15079
  return;
 }
 ___async_unwind = 0; //@line 15082
 HEAP32[$ReallocAsyncCtx9 >> 2] = 288; //@line 15083
 $4 = $ReallocAsyncCtx9 + 4 | 0; //@line 15084
 HEAP32[$4 >> 2] = $2; //@line 15085
 sp = STACKTOP; //@line 15086
 return;
}
function _mbed_die__async_cb_180($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 15042
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15044
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 15046
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 15047
 _wait_ms(400); //@line 15048
 if (___async) {
  HEAP32[$ReallocAsyncCtx8 >> 2] = 289; //@line 15051
  $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 15052
  HEAP32[$4 >> 2] = $2; //@line 15053
  sp = STACKTOP; //@line 15054
  return;
 }
 ___async_unwind = 0; //@line 15057
 HEAP32[$ReallocAsyncCtx8 >> 2] = 289; //@line 15058
 $4 = $ReallocAsyncCtx8 + 4 | 0; //@line 15059
 HEAP32[$4 >> 2] = $2; //@line 15060
 sp = STACKTOP; //@line 15061
 return;
}
function _mbed_die__async_cb_179($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx7 = 0, sp = 0;
 sp = STACKTOP; //@line 15017
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15019
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15021
 $ReallocAsyncCtx7 = _emscripten_realloc_async_context(8) | 0; //@line 15022
 _wait_ms(400); //@line 15023
 if (___async) {
  HEAP32[$ReallocAsyncCtx7 >> 2] = 290; //@line 15026
  $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 15027
  HEAP32[$4 >> 2] = $2; //@line 15028
  sp = STACKTOP; //@line 15029
  return;
 }
 ___async_unwind = 0; //@line 15032
 HEAP32[$ReallocAsyncCtx7 >> 2] = 290; //@line 15033
 $4 = $ReallocAsyncCtx7 + 4 | 0; //@line 15034
 HEAP32[$4 >> 2] = $2; //@line 15035
 sp = STACKTOP; //@line 15036
 return;
}
function _mbed_die__async_cb_178($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx6 = 0, sp = 0;
 sp = STACKTOP; //@line 14992
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14994
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 14996
 $ReallocAsyncCtx6 = _emscripten_realloc_async_context(8) | 0; //@line 14997
 _wait_ms(400); //@line 14998
 if (___async) {
  HEAP32[$ReallocAsyncCtx6 >> 2] = 291; //@line 15001
  $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 15002
  HEAP32[$4 >> 2] = $2; //@line 15003
  sp = STACKTOP; //@line 15004
  return;
 }
 ___async_unwind = 0; //@line 15007
 HEAP32[$ReallocAsyncCtx6 >> 2] = 291; //@line 15008
 $4 = $ReallocAsyncCtx6 + 4 | 0; //@line 15009
 HEAP32[$4 >> 2] = $2; //@line 15010
 sp = STACKTOP; //@line 15011
 return;
}
function _mbed_die__async_cb_177($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx5 = 0, sp = 0;
 sp = STACKTOP; //@line 14967
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14969
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 14971
 $ReallocAsyncCtx5 = _emscripten_realloc_async_context(8) | 0; //@line 14972
 _wait_ms(400); //@line 14973
 if (___async) {
  HEAP32[$ReallocAsyncCtx5 >> 2] = 292; //@line 14976
  $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 14977
  HEAP32[$4 >> 2] = $2; //@line 14978
  sp = STACKTOP; //@line 14979
  return;
 }
 ___async_unwind = 0; //@line 14982
 HEAP32[$ReallocAsyncCtx5 >> 2] = 292; //@line 14983
 $4 = $ReallocAsyncCtx5 + 4 | 0; //@line 14984
 HEAP32[$4 >> 2] = $2; //@line 14985
 sp = STACKTOP; //@line 14986
 return;
}
function _mbed_die__async_cb_176($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx4 = 0, sp = 0;
 sp = STACKTOP; //@line 14942
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14944
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 14946
 $ReallocAsyncCtx4 = _emscripten_realloc_async_context(8) | 0; //@line 14947
 _wait_ms(400); //@line 14948
 if (___async) {
  HEAP32[$ReallocAsyncCtx4 >> 2] = 293; //@line 14951
  $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 14952
  HEAP32[$4 >> 2] = $2; //@line 14953
  sp = STACKTOP; //@line 14954
  return;
 }
 ___async_unwind = 0; //@line 14957
 HEAP32[$ReallocAsyncCtx4 >> 2] = 293; //@line 14958
 $4 = $ReallocAsyncCtx4 + 4 | 0; //@line 14959
 HEAP32[$4 >> 2] = $2; //@line 14960
 sp = STACKTOP; //@line 14961
 return;
}
function _mbed_die__async_cb_175($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 14917
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14919
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 14921
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(8) | 0; //@line 14922
 _wait_ms(400); //@line 14923
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 294; //@line 14926
  $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 14927
  HEAP32[$4 >> 2] = $2; //@line 14928
  sp = STACKTOP; //@line 14929
  return;
 }
 ___async_unwind = 0; //@line 14932
 HEAP32[$ReallocAsyncCtx3 >> 2] = 294; //@line 14933
 $4 = $ReallocAsyncCtx3 + 4 | 0; //@line 14934
 HEAP32[$4 >> 2] = $2; //@line 14935
 sp = STACKTOP; //@line 14936
 return;
}
function _mbed_die__async_cb_174($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 14892
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14894
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 14896
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(8) | 0; //@line 14897
 _wait_ms(400); //@line 14898
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 14901
  $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 14902
  HEAP32[$4 >> 2] = $2; //@line 14903
  sp = STACKTOP; //@line 14904
  return;
 }
 ___async_unwind = 0; //@line 14907
 HEAP32[$ReallocAsyncCtx2 >> 2] = 295; //@line 14908
 $4 = $ReallocAsyncCtx2 + 4 | 0; //@line 14909
 HEAP32[$4 >> 2] = $2; //@line 14910
 sp = STACKTOP; //@line 14911
 return;
}
function ___stdout_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $14 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4558
 STACKTOP = STACKTOP + 32 | 0; //@line 4559
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(32); //@line 4559
 $vararg_buffer = sp; //@line 4560
 HEAP32[$0 + 36 >> 2] = 12; //@line 4563
 if (!(HEAP32[$0 >> 2] & 64)) {
  HEAP32[$vararg_buffer >> 2] = HEAP32[$0 + 60 >> 2]; //@line 4571
  HEAP32[$vararg_buffer + 4 >> 2] = 21523; //@line 4573
  HEAP32[$vararg_buffer + 8 >> 2] = sp + 16; //@line 4575
  if (___syscall54(54, $vararg_buffer | 0) | 0) {
   HEAP8[$0 + 75 >> 0] = -1; //@line 4580
  }
 }
 $14 = ___stdio_write($0, $1, $2) | 0; //@line 4583
 STACKTOP = sp; //@line 4584
 return $14 | 0; //@line 4584
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_201($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $6 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 16099
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16101
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16103
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 16105
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(16) | 0; //@line 16106
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 16107
 if (!___async) {
  ___async_unwind = 0; //@line 16110
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 222; //@line 16112
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 16114
 HEAP32[$ReallocAsyncCtx16 + 8 >> 2] = $4; //@line 16116
 HEAP32[$ReallocAsyncCtx16 + 12 >> 2] = $6; //@line 16118
 sp = STACKTOP; //@line 16119
 return;
}
function _mbed_die__async_cb_173($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 14867
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14869
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 14871
 $ReallocAsyncCtx = _emscripten_realloc_async_context(8) | 0; //@line 14872
 _wait_ms(400); //@line 14873
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 14876
  $4 = $ReallocAsyncCtx + 4 | 0; //@line 14877
  HEAP32[$4 >> 2] = $2; //@line 14878
  sp = STACKTOP; //@line 14879
  return;
 }
 ___async_unwind = 0; //@line 14882
 HEAP32[$ReallocAsyncCtx >> 2] = 296; //@line 14883
 $4 = $ReallocAsyncCtx + 4 | 0; //@line 14884
 HEAP32[$4 >> 2] = $2; //@line 14885
 sp = STACKTOP; //@line 14886
 return;
}
function _mbed_error_printf($0, $varargs) {
 $0 = $0 | 0;
 $varargs = $varargs | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13028
 STACKTOP = STACKTOP + 16 | 0; //@line 13029
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 13029
 $1 = sp; //@line 13030
 HEAP32[$1 >> 2] = $varargs; //@line 13031
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 13032
 _mbed_error_vfprintf($0, $1); //@line 13033
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 297; //@line 13036
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 13038
  sp = STACKTOP; //@line 13039
  STACKTOP = sp; //@line 13040
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13042
  STACKTOP = sp; //@line 13043
  return;
 }
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0$i = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 788
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 791
 if (($6 | 0) < 0) {
  $$0$i = -3001; //@line 794
  return $$0$i | 0; //@line 795
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 797
 _wait_ms(1); //@line 798
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 52; //@line 801
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 803
  sp = STACKTOP; //@line 804
  return 0; //@line 805
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 807
 $$0$i = $6; //@line 808
 return $$0$i | 0; //@line 809
}
function _store_int_728($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 L1 : do {
  if ($0 | 0) {
   switch ($1 | 0) {
   case -2:
    {
     HEAP8[$0 >> 0] = $2; //@line 6719
     break L1;
     break;
    }
   case -1:
    {
     HEAP16[$0 >> 1] = $2; //@line 6725
     break L1;
     break;
    }
   case 0:
    {
     HEAP32[$0 >> 2] = $2; //@line 6730
     break L1;
     break;
    }
   case 1:
    {
     HEAP32[$0 >> 2] = $2; //@line 6735
     break L1;
     break;
    }
   case 3:
    {
     $7 = $0; //@line 6740
     HEAP32[$7 >> 2] = $2; //@line 6742
     HEAP32[$7 + 4 >> 2] = $3; //@line 6745
     break L1;
     break;
    }
   default:
    {
     break L1;
    }
   }
  }
 } while (0);
 return;
}
function _vsscanf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $8 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP; //@line 5596
 STACKTOP = STACKTOP + 128 | 0; //@line 5597
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(128); //@line 5597
 $3 = sp; //@line 5598
 dest = $3; //@line 5599
 stop = dest + 124 | 0; //@line 5599
 do {
  HEAP32[dest >> 2] = 0; //@line 5599
  dest = dest + 4 | 0; //@line 5599
 } while ((dest | 0) < (stop | 0));
 HEAP32[$3 + 32 >> 2] = 17; //@line 5601
 HEAP32[$3 + 44 >> 2] = $0; //@line 5603
 HEAP32[$3 + 76 >> 2] = -1; //@line 5605
 HEAP32[$3 + 84 >> 2] = $0; //@line 5607
 $8 = _vfscanf($3, $1, $2) | 0; //@line 5608
 STACKTOP = sp; //@line 5609
 return $8 | 0; //@line 5609
}
function __ZN17EthernetInterface11socket_recvEPvS0_j($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$0 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 385
 $6 = _emscripten_asm_const_iiii(7, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 388
 if (($6 | 0) < 0) {
  $$0 = -3001; //@line 391
  return $$0 | 0; //@line 392
 }
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 394
 _wait_ms(1); //@line 395
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 39; //@line 398
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 400
  sp = STACKTOP; //@line 401
  return 0; //@line 402
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 404
 $$0 = $6; //@line 405
 return $$0 | 0; //@line 406
}
function __ZThn4_N17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 674
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 676
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 677
 _wait_ms(1); //@line 678
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 49; //@line 681
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 683
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 685
  sp = STACKTOP; //@line 686
  return 0; //@line 687
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 689
 HEAP8[$1 + 8 >> 0] = 0; //@line 691
 if (!$1) {
  return $3 | 0; //@line 694
 }
 __ZdlPv($1); //@line 696
 return $3 | 0; //@line 697
}
function __ZN17EthernetInterface12socket_closeEPv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 271
 $3 = _emscripten_asm_const_ii(4, HEAP32[$1 >> 2] | 0) | 0; //@line 273
 $AsyncCtx = _emscripten_alloc_async_context(12, sp) | 0; //@line 274
 _wait_ms(1); //@line 275
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 36; //@line 278
  HEAP32[$AsyncCtx + 4 >> 2] = $1; //@line 280
  HEAP32[$AsyncCtx + 8 >> 2] = $3; //@line 282
  sp = STACKTOP; //@line 283
  return 0; //@line 284
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 286
 HEAP8[$1 + 8 >> 0] = 0; //@line 288
 if (!$1) {
  return $3 | 0; //@line 291
 }
 __ZdlPv($1); //@line 293
 return $3 | 0; //@line 294
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_154($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 12733
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 12737
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 12738
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 12744
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 12745
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 12746
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 242; //@line 12749
  sp = STACKTOP; //@line 12750
  return;
 }
 ___async_unwind = 0; //@line 12753
 HEAP32[$ReallocAsyncCtx3 >> 2] = 242; //@line 12754
 sp = STACKTOP; //@line 12755
 return;
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_211($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 16935
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16939
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 16940
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 16946
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 16947
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 16948
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 16951
  sp = STACKTOP; //@line 16952
  return;
 }
 ___async_unwind = 0; //@line 16955
 HEAP32[$ReallocAsyncCtx3 >> 2] = 211; //@line 16956
 sp = STACKTOP; //@line 16957
 return;
}
function _fmt_x($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$05$lcssa = 0, $$056 = 0, $14 = 0, $15 = 0, $8 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$05$lcssa = $2; //@line 11318
 } else {
  $$056 = $2; //@line 11320
  $15 = $1; //@line 11320
  $8 = $0; //@line 11320
  while (1) {
   $14 = $$056 + -1 | 0; //@line 11328
   HEAP8[$14 >> 0] = HEAPU8[5059 + ($8 & 15) >> 0] | 0 | $3; //@line 11329
   $8 = _bitshift64Lshr($8 | 0, $15 | 0, 4) | 0; //@line 11330
   $15 = tempRet0; //@line 11331
   if (($8 | 0) == 0 & ($15 | 0) == 0) {
    $$05$lcssa = $14; //@line 11336
    break;
   } else {
    $$056 = $14; //@line 11339
   }
  }
 }
 return $$05$lcssa | 0; //@line 11343
}
function _fwrite($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $$ = 0, $11 = 0, $13 = 0, $15 = 0, $4 = 0, $phitmp = 0;
 $4 = Math_imul($2, $1) | 0; //@line 4740
 $$ = ($1 | 0) == 0 ? 0 : $2; //@line 4742
 if ((HEAP32[$3 + 76 >> 2] | 0) > -1) {
  $phitmp = (___lockfile($3) | 0) == 0; //@line 4748
  $11 = ___fwritex($0, $4, $3) | 0; //@line 4749
  if ($phitmp) {
   $13 = $11; //@line 4751
  } else {
   ___unlockfile($3); //@line 4753
   $13 = $11; //@line 4754
  }
 } else {
  $13 = ___fwritex($0, $4, $3) | 0; //@line 4758
 }
 if (($13 | 0) == ($4 | 0)) {
  $15 = $$; //@line 4762
 } else {
  $15 = ($13 >>> 0) / ($1 >>> 0) | 0; //@line 4765
 }
 return $15 | 0; //@line 4767
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_18($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $8 = 0, $ReallocAsyncCtx9 = 0, sp = 0;
 sp = STACKTOP; //@line 20280
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 20284
 $5 = HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0; //@line 20285
 if (!$5) {
  return;
 }
 $8 = HEAP32[$5 + 8 >> 2] | 0; //@line 20291
 $ReallocAsyncCtx9 = _emscripten_realloc_async_context(4) | 0; //@line 20292
 FUNCTION_TABLE_vi[$8 & 511]($4); //@line 20293
 if (___async) {
  HEAP32[$ReallocAsyncCtx9 >> 2] = 200; //@line 20296
  sp = STACKTOP; //@line 20297
  return;
 }
 ___async_unwind = 0; //@line 20300
 HEAP32[$ReallocAsyncCtx9 >> 2] = 200; //@line 20301
 sp = STACKTOP; //@line 20302
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $16 = 0, $17 = 0, $2 = 0, $5 = 0, sp = 0;
 sp = STACKTOP; //@line 14899
 $0 = ___cxa_get_globals_fast() | 0; //@line 14900
 if ($0 | 0) {
  $2 = HEAP32[$0 >> 2] | 0; //@line 14903
  if ($2 | 0) {
   $5 = $2 + 48 | 0; //@line 14907
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) {
    $16 = HEAP32[$2 + 12 >> 2] | 0; //@line 14919
    _emscripten_alloc_async_context(4, sp) | 0; //@line 14920
    __ZSt11__terminatePFvvE($16); //@line 14921
   }
  }
 }
 $17 = __ZSt13get_terminatev() | 0; //@line 14926
 _emscripten_alloc_async_context(4, sp) | 0; //@line 14927
 __ZSt11__terminatePFvvE($17); //@line 14928
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_197($0) {
 $0 = $0 | 0;
 var $6 = 0, $7 = 0, $ReallocAsyncCtx13 = 0, sp = 0;
 sp = STACKTOP; //@line 15734
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 15740
 HEAP32[HEAP32[$0 + 4 >> 2] >> 2] = HEAP32[$0 + 8 >> 2]; //@line 15741
 $7 = HEAP32[$6 >> 2] | 0; //@line 15742
 $ReallocAsyncCtx13 = _emscripten_realloc_async_context(4) | 0; //@line 15743
 __ZL26nsapi_dns_query_async_sendPv($7); //@line 15744
 if (___async) {
  HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 15747
  sp = STACKTOP; //@line 15748
  return;
 }
 ___async_unwind = 0; //@line 15751
 HEAP32[$ReallocAsyncCtx13 >> 2] = 231; //@line 15752
 sp = STACKTOP; //@line 15753
 return;
}
function _sbrk(increment) {
 increment = increment | 0;
 var oldDynamicTop = 0, newDynamicTop = 0;
 oldDynamicTop = HEAP32[DYNAMICTOP_PTR >> 2] | 0; //@line 62
 newDynamicTop = oldDynamicTop + increment | 0; //@line 63
 if ((increment | 0) > 0 & (newDynamicTop | 0) < (oldDynamicTop | 0) | (newDynamicTop | 0) < 0) {
  abortOnCannotGrowMemory() | 0; //@line 67
  ___setErrNo(12); //@line 68
  return -1;
 }
 HEAP32[DYNAMICTOP_PTR >> 2] = newDynamicTop; //@line 72
 if ((newDynamicTop | 0) > (getTotalMemory() | 0)) {
  if (!(enlargeMemory() | 0)) {
   HEAP32[DYNAMICTOP_PTR >> 2] = oldDynamicTop; //@line 76
   ___setErrNo(12); //@line 77
   return -1;
  }
 }
 return oldDynamicTop | 0; //@line 81
}
function __ZN9UDPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5680
 $1 = $0 + 52 | 0; //@line 5681
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 5684
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 5687
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 5697
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5698
 FUNCTION_TABLE_vi[$$pre & 511]($0 + 32 | 0); //@line 5699
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 152; //@line 5702
  sp = STACKTOP; //@line 5703
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5706
 return;
}
function __ZN9TCPSocket5eventEv($0) {
 $0 = $0 | 0;
 var $$pre = 0, $1 = 0, $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5186
 $1 = $0 + 52 | 0; //@line 5187
 HEAP32[$1 >> 2] = (HEAP32[$1 >> 2] | 0) + 1; //@line 5190
 $6 = HEAP32[$0 + 44 >> 2] | 0; //@line 5193
 if (!$6) {
  return;
 }
 if ((HEAP32[$1 >> 2] | 0) != 1) {
  return;
 }
 $$pre = HEAP32[$6 >> 2] | 0; //@line 5203
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 5204
 FUNCTION_TABLE_vi[$$pre & 511]($0 + 32 | 0); //@line 5205
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 140; //@line 5208
  sp = STACKTOP; //@line 5209
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 5212
 return;
}
function __ZN9UDPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16375
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16377
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 16379
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 16386
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16387
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 16388
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 16391
  sp = STACKTOP; //@line 16392
  return;
 }
 ___async_unwind = 0; //@line 16395
 HEAP32[$ReallocAsyncCtx2 >> 2] = 150; //@line 16396
 sp = STACKTOP; //@line 16397
 return;
}
function __ZN9TCPSocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13455
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13457
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 13459
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 13466
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 13467
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 13468
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 13471
  sp = STACKTOP; //@line 13472
  return;
 }
 ___async_unwind = 0; //@line 13475
 HEAP32[$ReallocAsyncCtx2 >> 2] = 138; //@line 13476
 sp = STACKTOP; //@line 13477
 return;
}
function __ZN6SocketD2Ev__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $8 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 16555
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16557
 $4 = HEAP32[$2 + 28 >> 2] | 0; //@line 16559
 if (!$4) {
  return;
 }
 $8 = HEAP32[$4 + 8 >> 2] | 0; //@line 16566
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 16567
 FUNCTION_TABLE_vi[$8 & 511]($2 + 16 | 0); //@line 16568
 if (___async) {
  HEAP32[$ReallocAsyncCtx2 >> 2] = 120; //@line 16571
  sp = STACKTOP; //@line 16572
  return;
 }
 ___async_unwind = 0; //@line 16575
 HEAP32[$ReallocAsyncCtx2 >> 2] = 120; //@line 16576
 sp = STACKTOP; //@line 16577
 return;
}
function ___towrite($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $14 = 0, $3 = 0, $7 = 0;
 $1 = $0 + 74 | 0; //@line 4957
 $3 = HEAP8[$1 >> 0] | 0; //@line 4959
 HEAP8[$1 >> 0] = $3 + 255 | $3; //@line 4963
 $7 = HEAP32[$0 >> 2] | 0; //@line 4964
 if (!($7 & 8)) {
  HEAP32[$0 + 8 >> 2] = 0; //@line 4969
  HEAP32[$0 + 4 >> 2] = 0; //@line 4971
  $14 = HEAP32[$0 + 44 >> 2] | 0; //@line 4973
  HEAP32[$0 + 28 >> 2] = $14; //@line 4975
  HEAP32[$0 + 20 >> 2] = $14; //@line 4977
  HEAP32[$0 + 16 >> 2] = $14 + (HEAP32[$0 + 48 >> 2] | 0); //@line 4983
  $$0 = 0; //@line 4984
 } else {
  HEAP32[$0 >> 2] = $7 | 32; //@line 4987
  $$0 = -1; //@line 4988
 }
 return $$0 | 0; //@line 4990
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 763
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 766
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 767
 _wait_ms(1); //@line 768
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 51; //@line 771
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 773
  sp = STACKTOP; //@line 774
  return 0; //@line 775
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 777
  return $6 | 0; //@line 778
 }
 return 0; //@line 780
}
function ___string_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$027 = 0, $$027$ = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 $3 = $0 + 84 | 0; //@line 9800
 $4 = HEAP32[$3 >> 2] | 0; //@line 9801
 $5 = $2 + 256 | 0; //@line 9802
 $6 = _memchr($4, 0, $5) | 0; //@line 9803
 $$027 = ($6 | 0) == 0 ? $5 : $6 - $4 | 0; //@line 9808
 $$027$ = $$027 >>> 0 < $2 >>> 0 ? $$027 : $2; //@line 9810
 _memcpy($1 | 0, $4 | 0, $$027$ | 0) | 0; //@line 9811
 HEAP32[$0 + 4 >> 2] = $4 + $$027$; //@line 9814
 $14 = $4 + $$027 | 0; //@line 9815
 HEAP32[$0 + 8 >> 2] = $14; //@line 9817
 HEAP32[$3 >> 2] = $14; //@line 9818
 return $$027$ | 0; //@line 9819
}
function _twobyte_strstr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$sink$in = 0, $$sink17$sink = 0, $11 = 0, $12 = 0, $8 = 0;
 $8 = (HEAPU8[$1 >> 0] | 0) << 8 | (HEAPU8[$1 + 1 >> 0] | 0); //@line 12786
 $$sink$in = HEAPU8[$0 >> 0] | 0; //@line 12789
 $$sink17$sink = $0; //@line 12789
 while (1) {
  $11 = $$sink17$sink + 1 | 0; //@line 12791
  $12 = HEAP8[$11 >> 0] | 0; //@line 12792
  if (!($12 << 24 >> 24)) {
   break;
  }
  $$sink$in = $$sink$in << 8 & 65280 | $12 & 255; //@line 12800
  if (($$sink$in | 0) == ($8 | 0)) {
   break;
  } else {
   $$sink17$sink = $11; //@line 12805
  }
 }
 return ($12 << 24 >> 24 ? $$sink17$sink : 0) | 0; //@line 12810
}
function __ZN17EthernetInterface11socket_sendEPvPKvj($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $6 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 360
 $6 = _emscripten_asm_const_iiii(6, HEAP32[$1 >> 2] | 0, $2 | 0, $3 | 0) | 0; //@line 363
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 364
 _wait_ms(1); //@line 365
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 38; //@line 368
  HEAP32[$AsyncCtx + 4 >> 2] = $6; //@line 370
  sp = STACKTOP; //@line 371
  return 0; //@line 372
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 374
  return $6 | 0; //@line 375
 }
 return 0; //@line 377
}
function _fmt_o($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $7 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $$0$lcssa = $2; //@line 11355
 } else {
  $$06 = $2; //@line 11357
  $11 = $1; //@line 11357
  $7 = $0; //@line 11357
  while (1) {
   $10 = $$06 + -1 | 0; //@line 11362
   HEAP8[$10 >> 0] = $7 & 7 | 48; //@line 11363
   $7 = _bitshift64Lshr($7 | 0, $11 | 0, 3) | 0; //@line 11364
   $11 = tempRet0; //@line 11365
   if (($7 | 0) == 0 & ($11 | 0) == 0) {
    $$0$lcssa = $10; //@line 11370
    break;
   } else {
    $$06 = $10; //@line 11373
   }
  }
 }
 return $$0$lcssa | 0; //@line 11377
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_99($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 6137
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6141
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 6143
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 6144
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 6145
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 78; //@line 6148
  sp = STACKTOP; //@line 6149
  return;
 }
 ___async_unwind = 0; //@line 6152
 HEAP32[$ReallocAsyncCtx >> 2] = 78; //@line 6153
 sp = STACKTOP; //@line 6154
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_202($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx17 = 0, sp = 0;
 sp = STACKTOP; //@line 16125
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16127
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16129
 $ReallocAsyncCtx17 = _emscripten_realloc_async_context(12) | 0; //@line 16130
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 16131
 if (!___async) {
  ___async_unwind = 0; //@line 16134
 }
 HEAP32[$ReallocAsyncCtx17 >> 2] = 216; //@line 16136
 HEAP32[$ReallocAsyncCtx17 + 4 >> 2] = $2; //@line 16138
 HEAP32[$ReallocAsyncCtx17 + 8 >> 2] = $4; //@line 16140
 sp = STACKTOP; //@line 16141
 return;
}
function _arg_n_727($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0, $10 = 0, $2 = 0, $9 = 0, sp = 0;
 sp = STACKTOP; //@line 6674
 STACKTOP = STACKTOP + 16 | 0; //@line 6675
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 6675
 $2 = sp; //@line 6676
 HEAP32[$2 >> 2] = HEAP32[$0 >> 2]; //@line 6678
 $$0 = $1; //@line 6679
 while (1) {
  $9 = (HEAP32[$2 >> 2] | 0) + (4 - 1) & ~(4 - 1); //@line 6693
  $10 = HEAP32[$9 >> 2] | 0; //@line 6694
  HEAP32[$2 >> 2] = $9 + 4; //@line 6696
  if ($$0 >>> 0 > 1) {
   $$0 = $$0 + -1 | 0; //@line 6699
  } else {
   break;
  }
 }
 STACKTOP = sp; //@line 6704
 return $10 | 0; //@line 6704
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_123($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx11 = 0, sp = 0;
 sp = STACKTOP; //@line 9836
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 9838
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 9840
 $ReallocAsyncCtx11 = _emscripten_realloc_async_context(12) | 0; //@line 9841
 __ZL35nsapi_dns_query_async_initiate_nextv(); //@line 9842
 if (!___async) {
  ___async_unwind = 0; //@line 9845
 }
 HEAP32[$ReallocAsyncCtx11 >> 2] = 245; //@line 9847
 HEAP32[$ReallocAsyncCtx11 + 4 >> 2] = $2; //@line 9849
 HEAP32[$ReallocAsyncCtx11 + 8 >> 2] = $4; //@line 9851
 sp = STACKTOP; //@line 9852
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_127($0) {
 $0 = $0 | 0;
 var $4 = 0, $5 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10253
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 10257
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 10259
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 10260
 FUNCTION_TABLE_vi[$5 & 511]($4); //@line 10261
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 10264
  sp = STACKTOP; //@line 10265
  return;
 }
 ___async_unwind = 0; //@line 10268
 HEAP32[$ReallocAsyncCtx >> 2] = 129; //@line 10269
 sp = STACKTOP; //@line 10270
 return;
}
function ___cxa_is_pointer_type($0) {
 $0 = $0 | 0;
 var $2 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 15810
 do {
  if (!$0) {
   $3 = 0; //@line 15814
  } else {
   $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 15816
   $2 = ___dynamic_cast($0, 144, 200, 0) | 0; //@line 15817
   if (___async) {
    HEAP32[$AsyncCtx >> 2] = 367; //@line 15820
    sp = STACKTOP; //@line 15821
    return 0; //@line 15822
   } else {
    _emscripten_free_async_context($AsyncCtx | 0); //@line 15824
    $3 = ($2 | 0) != 0 & 1; //@line 15827
    break;
   }
  }
 } while (0);
 return $3 | 0; //@line 15832
}
function _main__async_cb_59($0) {
 $0 = $0 | 0;
 var $4 = 0, $6 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 903
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 907
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 909
 __ZdaPv(HEAP32[$0 + 4 >> 2] | 0); //@line 910
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(12) | 0; //@line 911
 _puts(4263) | 0; //@line 912
 if (!___async) {
  ___async_unwind = 0; //@line 915
 }
 HEAP32[$ReallocAsyncCtx3 >> 2] = 316; //@line 917
 HEAP32[$ReallocAsyncCtx3 + 4 >> 2] = $4; //@line 919
 HEAP32[$ReallocAsyncCtx3 + 8 >> 2] = $6; //@line 921
 sp = STACKTOP; //@line 922
 return;
}
function _invoke_ticker__async_cb_139($0) {
 $0 = $0 | 0;
 var $5 = 0, $6 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11480
 $5 = HEAP32[HEAP32[HEAP32[$0 + 4 >> 2] >> 2] >> 2] | 0; //@line 11486
 $6 = HEAP32[$0 + 8 >> 2] | 0; //@line 11487
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 11488
 FUNCTION_TABLE_vi[$5 & 511]($6); //@line 11489
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 304; //@line 11492
  sp = STACKTOP; //@line 11493
  return;
 }
 ___async_unwind = 0; //@line 11496
 HEAP32[$ReallocAsyncCtx >> 2] = 304; //@line 11497
 sp = STACKTOP; //@line 11498
 return;
}
function _getint_671($0) {
 $0 = $0 | 0;
 var $$0$lcssa = 0, $$04 = 0, $11 = 0, $12 = 0, $7 = 0;
 if (!(_isdigit(HEAP8[HEAP32[$0 >> 2] >> 0] | 0) | 0)) {
  $$0$lcssa = 0; //@line 10999
 } else {
  $$04 = 0; //@line 11001
  while (1) {
   $7 = HEAP32[$0 >> 2] | 0; //@line 11004
   $11 = ($$04 * 10 | 0) + -48 + (HEAP8[$7 >> 0] | 0) | 0; //@line 11008
   $12 = $7 + 1 | 0; //@line 11009
   HEAP32[$0 >> 2] = $12; //@line 11010
   if (!(_isdigit(HEAP8[$12 >> 0] | 0) | 0)) {
    $$0$lcssa = $11; //@line 11016
    break;
   } else {
    $$04 = $11; //@line 11019
   }
  }
 }
 return $$0$lcssa | 0; //@line 11023
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0; //@line 17341
 $y_sroa_0_0_extract_trunc = $b$0; //@line 17342
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0; //@line 17343
 $1$1 = tempRet0; //@line 17344
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0; //@line 17346
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 11966
 $1 = HEAP32[$0 >> 2] | 0; //@line 11967
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 11969
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 11970
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 11971
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 262; //@line 11974
  sp = STACKTOP; //@line 11975
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 11978
  return;
 }
}
function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest; //@line 17759
  src = src + num | 0; //@line 17760
  dest = dest + num | 0; //@line 17761
  while ((num | 0) > 0) {
   dest = dest - 1 | 0; //@line 17763
   src = src - 1 | 0; //@line 17764
   num = num - 1 | 0; //@line 17765
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0; //@line 17766
  }
  dest = ret; //@line 17768
 } else {
  _memcpy(dest, src, num) | 0; //@line 17770
 }
 return dest | 0; //@line 17772
}
function runPostSets() {}
function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535; //@line 17326
 $2 = $b & 65535; //@line 17327
 $3 = Math_imul($2, $1) | 0; //@line 17328
 $6 = $a >>> 16; //@line 17329
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0; //@line 17330
 $11 = $b >>> 16; //@line 17331
 $12 = Math_imul($11, $1) | 0; //@line 17332
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0; //@line 17333
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 10384
 $1 = HEAP32[$0 >> 2] | 0; //@line 10385
 $3 = HEAP32[$0 + 4 >> 2] | 0; //@line 10387
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 10388
 FUNCTION_TABLE_vi[$1 & 511]($3); //@line 10389
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 232; //@line 10392
  sp = STACKTOP; //@line 10393
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 10396
  return;
 }
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 593
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 595
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 596
 _wait_ms(1); //@line 597
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 46; //@line 600
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 602
  sp = STACKTOP; //@line 603
  return 0; //@line 604
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 606
  return $2 | 0; //@line 607
 }
 return 0; //@line 609
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv($0) {
 $0 = $0 | 0;
 var $2 = 0, $5 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 2664
 $2 = HEAP32[$0 + 12 >> 2] | 0; //@line 2666
 if (!$2) {
  return;
 }
 $5 = HEAP32[$2 + 8 >> 2] | 0; //@line 2672
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 2673
 FUNCTION_TABLE_vi[$5 & 511]($0); //@line 2674
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 76; //@line 2677
  sp = STACKTOP; //@line 2678
  return;
 }
 _emscripten_free_async_context($AsyncCtx | 0); //@line 2681
 return;
}
function __ZN6SocketC2Ev($0) {
 $0 = $0 | 0;
 var $4 = 0;
 HEAP32[$0 >> 2] = 572; //@line 4007
 HEAP32[$0 + 4 >> 2] = 0; //@line 4009
 HEAP32[$0 + 8 >> 2] = 0; //@line 4011
 HEAP32[$0 + 12 >> 2] = -1; //@line 4013
 $4 = $0 + 16 | 0; //@line 4014
 HEAP32[$4 >> 2] = 0; //@line 4015
 HEAP32[$4 + 4 >> 2] = 0; //@line 4015
 HEAP32[$4 + 8 >> 2] = 0; //@line 4015
 HEAP32[$4 + 12 >> 2] = 0; //@line 4015
 HEAP32[$4 + 16 >> 2] = 0; //@line 4015
 HEAP32[$4 + 20 >> 2] = 0; //@line 4015
 HEAP32[$4 + 24 >> 2] = 0; //@line 4015
 HEAP32[$4 + 28 >> 2] = 0; //@line 4015
 return;
}
function __ZN17EthernetInterface11get_netmaskEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 103
 $2 = _emscripten_asm_const_ii(2, 0) | 0; //@line 105
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 106
 _wait_ms(1); //@line 107
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 31; //@line 110
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 112
  sp = STACKTOP; //@line 113
  return 0; //@line 114
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 116
  return $2 | 0; //@line 117
 }
 return 0; //@line 119
}
function _mbed_die__async_cb_187($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx15 = 0, sp = 0;
 sp = STACKTOP; //@line 15217
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 15219
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 0) | 0; //@line 15221
 $ReallocAsyncCtx15 = _emscripten_realloc_async_context(8) | 0; //@line 15222
 _wait_ms(150); //@line 15223
 if (!___async) {
  ___async_unwind = 0; //@line 15226
 }
 HEAP32[$ReallocAsyncCtx15 >> 2] = 282; //@line 15228
 HEAP32[$ReallocAsyncCtx15 + 4 >> 2] = $2; //@line 15230
 sp = STACKTOP; //@line 15231
 return;
}
function __ZN17EthernetInterface15get_mac_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 61
 $2 = _emscripten_asm_const_ii(0, 0) | 0; //@line 63
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 64
 _wait_ms(1); //@line 65
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 29; //@line 68
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 70
  sp = STACKTOP; //@line 71
  return 0; //@line 72
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 74
  return $2 | 0; //@line 75
 }
 return 0; //@line 77
}
function __ZN17EthernetInterface14get_ip_addressEv($0) {
 $0 = $0 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 82
 $2 = _emscripten_asm_const_ii(1, 0) | 0; //@line 84
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 85
 _wait_ms(1); //@line 86
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 30; //@line 89
  HEAP32[$AsyncCtx + 4 >> 2] = $2; //@line 91
  sp = STACKTOP; //@line 92
  return 0; //@line 93
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 95
  return $2 | 0; //@line 96
 }
 return 0; //@line 98
}
function _mbed_die__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx16 = 0, sp = 0;
 sp = STACKTOP; //@line 14847
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 14849
 _emscripten_asm_const_iii(9, HEAP32[$2 >> 2] | 0, 1) | 0; //@line 14851
 $ReallocAsyncCtx16 = _emscripten_realloc_async_context(8) | 0; //@line 14852
 _wait_ms(150); //@line 14853
 if (!___async) {
  ___async_unwind = 0; //@line 14856
 }
 HEAP32[$ReallocAsyncCtx16 >> 2] = 281; //@line 14858
 HEAP32[$ReallocAsyncCtx16 + 4 >> 2] = $2; //@line 14860
 sp = STACKTOP; //@line 14861
 return;
}
function ___fflush_unlocked__async_cb_29($0) {
 $0 = $0 | 0;
 var $10 = 0, $4 = 0, $6 = 0, $8 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 23731
 $6 = HEAP32[$0 + 12 >> 2] | 0; //@line 23733
 $8 = HEAP32[$0 + 16 >> 2] | 0; //@line 23735
 $10 = HEAP32[$0 + 20 >> 2] | 0; //@line 23737
 HEAP32[(HEAP32[$0 + 4 >> 2] | 0) + 16 >> 2] = 0; //@line 23739
 HEAP32[$4 >> 2] = 0; //@line 23740
 HEAP32[$6 >> 2] = 0; //@line 23741
 HEAP32[$8 >> 2] = 0; //@line 23742
 HEAP32[$10 >> 2] = 0; //@line 23743
 HEAP32[___async_retval >> 2] = 0; //@line 23745
 return;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 3410
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 3411
 $2 = __Z28nsapi_dns_query_async_canceli($1) | 0; //@line 3412
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 101; //@line 3415
  sp = STACKTOP; //@line 3416
  return 0; //@line 3417
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 3419
  return $2 | 0; //@line 3420
 }
 return 0; //@line 3422
}
function _mbed_vtracef__async_cb_128($0) {
 $0 = $0 | 0;
 var $1 = 0, $ReallocAsyncCtx3 = 0, sp = 0;
 sp = STACKTOP; //@line 10777
 $1 = HEAP32[134] | 0; //@line 10778
 $ReallocAsyncCtx3 = _emscripten_realloc_async_context(4) | 0; //@line 10779
 FUNCTION_TABLE_vi[$1 & 511](3494); //@line 10780
 if (___async) {
  HEAP32[$ReallocAsyncCtx3 >> 2] = 67; //@line 10783
  sp = STACKTOP; //@line 10784
  return;
 }
 ___async_unwind = 0; //@line 10787
 HEAP32[$ReallocAsyncCtx3 >> 2] = 67; //@line 10788
 sp = STACKTOP; //@line 10789
 return;
}
function ___uflow($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP; //@line 9723
 STACKTOP = STACKTOP + 16 | 0; //@line 9724
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 9724
 $1 = sp; //@line 9725
 if (!(___toread($0) | 0)) {
  if ((FUNCTION_TABLE_iiii[HEAP32[$0 + 32 >> 2] & 31]($0, $1, 1) | 0) == 1) {
   $$0 = HEAPU8[$1 >> 0] | 0; //@line 9736
  } else {
   $$0 = -1; //@line 9738
  }
 } else {
  $$0 = -1; //@line 9741
 }
 STACKTOP = sp; //@line 9743
 return $$0 | 0; //@line 9743
}
function _vsprintf($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13591
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13592
 $3 = _vsnprintf($0, 2147483647, $1, $2) | 0; //@line 13593
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 331; //@line 13596
  sp = STACKTOP; //@line 13597
  return 0; //@line 13598
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13600
  return $3 | 0; //@line 13601
 }
 return 0; //@line 13603
}
function _main__async_cb_53($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $ReallocAsyncCtx8 = 0, sp = 0;
 sp = STACKTOP; //@line 614
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 616
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 618
 $ReallocAsyncCtx8 = _emscripten_realloc_async_context(8) | 0; //@line 619
 __ZN9TCPSocketD2Ev($2); //@line 620
 if (!___async) {
  ___async_unwind = 0; //@line 623
 }
 HEAP32[$ReallocAsyncCtx8 >> 2] = 317; //@line 625
 HEAP32[$ReallocAsyncCtx8 + 4 >> 2] = $4; //@line 627
 sp = STACKTOP; //@line 628
 return;
}
function _serial_putc__async_cb_157($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12832
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 12834
 $ReallocAsyncCtx = _emscripten_realloc_async_context(4) | 0; //@line 12835
 _fflush($2) | 0; //@line 12836
 if (___async) {
  HEAP32[$ReallocAsyncCtx >> 2] = 302; //@line 12839
  sp = STACKTOP; //@line 12840
  return;
 }
 ___async_unwind = 0; //@line 12843
 HEAP32[$ReallocAsyncCtx >> 2] = 302; //@line 12844
 sp = STACKTOP; //@line 12845
 return;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 133
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 134
 _puts(3131) | 0; //@line 135
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 32; //@line 138
  sp = STACKTOP; //@line 139
  return 0; //@line 140
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 142
  return 0; //@line 143
 }
 return 0; //@line 145
}
function __ZN13SocketAddressC2E10nsapi_addrt($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 HEAP8[$0 >> 0] = 0; //@line 4546
 $3 = $0 + 40 | 0; //@line 4547
 HEAP32[$3 >> 2] = HEAP32[$1 >> 2]; //@line 4548
 HEAP32[$3 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4548
 HEAP32[$3 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4548
 HEAP32[$3 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 4548
 HEAP32[$3 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 4548
 HEAP16[$0 + 60 >> 1] = $2; //@line 4550
 return;
}
function _copysign($0, $1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $8 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9704
 $2 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9704
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9705
 HEAPF64[tempDoublePtr >> 3] = $1; //@line 9706
 $8 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $3 & 2147483647; //@line 9710
 HEAP32[tempDoublePtr >> 2] = $2; //@line 9711
 HEAP32[tempDoublePtr + 4 >> 2] = $8; //@line 9711
 return +(+HEAPF64[tempDoublePtr >> 3]);
}
function _emscripten_async_resume() {
 ___async = 0; //@line 17659
 ___async_unwind = 1; //@line 17660
 while (1) {
  if (!___async_cur_frame) return;
  dynCall_vi(HEAP32[___async_cur_frame + 8 >> 2] | 0, ___async_cur_frame + 8 | 0); //@line 17666
  if (___async) return;
  if (!___async_unwind) {
   ___async_unwind = 1; //@line 17670
   continue;
  }
  stackRestore(HEAP32[___async_cur_frame + 4 >> 2] | 0); //@line 17674
  ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 17676
 }
}
function __ZnwjRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13928
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13929
 $2 = __Znwj($0) | 0; //@line 13930
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 337; //@line 13933
  sp = STACKTOP; //@line 13934
  return 0; //@line 13935
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13937
  return $2 | 0; //@line 13938
 }
 return 0; //@line 13940
}
function __ZnajRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13963
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13964
 $2 = __Znaj($0) | 0; //@line 13965
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 339; //@line 13968
  sp = STACKTOP; //@line 13969
  return 0; //@line 13970
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13972
  return $2 | 0; //@line 13973
 }
 return 0; //@line 13975
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 12510
 $1 = HEAP32[$0 >> 2] | 0; //@line 12511
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 12512
 FUNCTION_TABLE_v[$1 & 7](); //@line 12513
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 276; //@line 12516
  sp = STACKTOP; //@line 12517
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 12520
  return;
 }
}
function ___stdio_close($0) {
 $0 = $0 | 0;
 var $5 = 0, $vararg_buffer = 0, sp = 0;
 sp = STACKTOP; //@line 4369
 STACKTOP = STACKTOP + 16 | 0; //@line 4370
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 4370
 $vararg_buffer = sp; //@line 4371
 HEAP32[$vararg_buffer >> 2] = _dummy(HEAP32[$0 + 60 >> 2] | 0) | 0; //@line 4375
 $5 = ___syscall_ret(___syscall6(6, $vararg_buffer | 0) | 0) | 0; //@line 4377
 STACKTOP = sp; //@line 4378
 return $5 | 0; //@line 4378
}
function __ZN9UDPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5655
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5656
 __ZN9UDPSocketD2Ev($0); //@line 5657
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 151; //@line 5660
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5662
  sp = STACKTOP; //@line 5663
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5666
  __ZdlPv($0); //@line 5667
  return;
 }
}
function __ZN9TCPSocketD0Ev($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 5161
 $AsyncCtx = _emscripten_alloc_async_context(8, sp) | 0; //@line 5162
 __ZN9TCPSocketD2Ev($0); //@line 5163
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 139; //@line 5166
  HEAP32[$AsyncCtx + 4 >> 2] = $0; //@line 5168
  sp = STACKTOP; //@line 5169
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 5172
  __ZdlPv($0); //@line 5173
  return;
 }
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP; //@line 17601
 STACKTOP = STACKTOP + 16 | 0; //@line 17602
 $rem = __stackBase__ | 0; //@line 17603
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0; //@line 17604
 STACKTOP = __stackBase__; //@line 17605
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0; //@line 17606
}
function __ZN17EthernetInterface8set_dhcpEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 151
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 152
 _puts(3086) | 0; //@line 153
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 33; //@line 156
  sp = STACKTOP; //@line 157
  return 0; //@line 158
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 160
  return 0; //@line 161
 }
 return 0; //@line 163
}
function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0; //@line 17371
 if ((ret | 0) < 8) return ret | 0; //@line 17372
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0; //@line 17373
 if ((ret | 0) < 8) return ret + 8 | 0; //@line 17374
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0; //@line 17375
 if ((ret | 0) < 8) return ret + 16 | 0; //@line 17376
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0; //@line 17377
}
function __Znaj($0) {
 $0 = $0 | 0;
 var $1 = 0, $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13945
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13946
 $1 = __Znwj($0) | 0; //@line 13947
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 338; //@line 13950
  sp = STACKTOP; //@line 13951
  return 0; //@line 13952
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13954
  return $1 | 0; //@line 13955
 }
 return 0; //@line 13957
}
function __ZN13SocketAddress8set_addrE10nsapi_addr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 HEAP8[$0 >> 0] = 0; //@line 4558
 $2 = $0 + 40 | 0; //@line 4559
 HEAP32[$2 >> 2] = HEAP32[$1 >> 2]; //@line 4560
 HEAP32[$2 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4560
 HEAP32[$2 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4560
 HEAP32[$2 + 12 >> 2] = HEAP32[$1 + 12 >> 2]; //@line 4560
 HEAP32[$2 + 16 >> 2] = HEAP32[$1 + 16 >> 2]; //@line 4560
 return;
}
function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP; //@line 14120
 STACKTOP = STACKTOP + 16 | 0; //@line 14121
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14121
 if (!(_pthread_once(8408, 4) | 0)) {
  $3 = _pthread_getspecific(HEAP32[2103] | 0) | 0; //@line 14127
  STACKTOP = sp; //@line 14128
  return $3 | 0; //@line 14128
 } else {
  _abort_message(7244, sp); //@line 14130
 }
 return 0; //@line 14133
}
function __ZThn4_N17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $7 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 16591
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16593
 HEAP8[$2 + 8 >> 0] = 0; //@line 16595
 if (!$2) {
  $7 = ___async_retval; //@line 16598
  HEAP32[$7 >> 2] = $4; //@line 16599
  return;
 }
 __ZdlPv($2); //@line 16602
 $7 = ___async_retval; //@line 16603
 HEAP32[$7 >> 2] = $4; //@line 16604
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, $5) | 0) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $1, $2, $3, $4); //@line 14288
 }
 return;
}
function __ZL25default_terminate_handlerv__async_cb_218($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0, $AsyncRetVal = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 17301
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 17303
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17305
 HEAP32[$2 >> 2] = 7105; //@line 17306
 HEAP32[$2 + 4 >> 2] = $4; //@line 17308
 HEAP32[$2 + 8 >> 2] = $AsyncRetVal; //@line 17310
 _abort_message(6969, $2); //@line 17311
}
function _sscanf($0, $1, $varargs) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $varargs = $varargs | 0;
 var $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP; //@line 5584
 STACKTOP = STACKTOP + 16 | 0; //@line 5585
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 5585
 $2 = sp; //@line 5586
 HEAP32[$2 >> 2] = $varargs; //@line 5587
 $3 = _vsscanf($0, $1, $2) | 0; //@line 5588
 STACKTOP = sp; //@line 5589
 return $3 | 0; //@line 5589
}
function _sn_write($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $$ = 0, $5 = 0, $6 = 0, $7 = 0;
 $5 = $0 + 20 | 0; //@line 13441
 $6 = HEAP32[$5 >> 2] | 0; //@line 13442
 $7 = (HEAP32[$0 + 16 >> 2] | 0) - $6 | 0; //@line 13443
 $$ = $7 >>> 0 > $2 >>> 0 ? $2 : $7; //@line 13445
 _memcpy($6 | 0, $1 | 0, $$ | 0) | 0; //@line 13447
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$; //@line 13450
 return $2 | 0; //@line 13451
}
function __ZN6events10EventQueueC2EjPh($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $3 = 0;
 $3 = $0 + 188 | 0; //@line 1089
 HEAP32[$3 >> 2] = 0; //@line 1090
 HEAP32[$3 + 4 >> 2] = 0; //@line 1090
 HEAP32[$3 + 8 >> 2] = 0; //@line 1090
 HEAP32[$3 + 12 >> 2] = 0; //@line 1090
 if (!$2) {
  _equeue_create($0, $1) | 0; //@line 1093
  return;
 } else {
  _equeue_create_inplace($0, $1, $2) | 0; //@line 1096
  return;
 }
}
function _abort_message__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $ReallocAsyncCtx2 = 0, sp = 0;
 sp = STACKTOP; //@line 13432
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 13434
 $ReallocAsyncCtx2 = _emscripten_realloc_async_context(4) | 0; //@line 13435
 _fputc(10, $2) | 0; //@line 13436
 if (!___async) {
  ___async_unwind = 0; //@line 13439
 }
 HEAP32[$ReallocAsyncCtx2 >> 2] = 343; //@line 13441
 sp = STACKTOP; //@line 13442
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 23407
 if ((HEAP32[$2 + 24 >> 2] | 0) == 1) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[$2 + 16 >> 2]; //@line 23418
  $$0 = 1; //@line 23419
 } else {
  $$0 = 0; //@line 23421
 }
 HEAP8[___async_retval >> 0] = $$0 & 1; //@line 23425
 return;
}
function _vsnprintf__async_cb($0) {
 $0 = $0 | 0;
 var $13 = 0, $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 13558
 if (HEAP32[$0 + 4 >> 2] | 0) {
  $13 = HEAP32[HEAP32[$0 + 16 >> 2] >> 2] | 0; //@line 13561
  HEAP8[$13 + ((($13 | 0) == (HEAP32[HEAP32[$0 + 20 >> 2] >> 2] | 0)) << 31 >> 31) >> 0] = 0; //@line 13566
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 13569
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 14882
 STACKTOP = STACKTOP + 16 | 0; //@line 14883
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14883
 _free($0); //@line 14885
 if (!(_pthread_setspecific(HEAP32[2103] | 0, 0) | 0)) {
  STACKTOP = sp; //@line 14890
  return;
 } else {
  _abort_message(7343, sp); //@line 14892
 }
}
function _serial_init($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 var $10 = 0, $4 = 0, $9 = 0;
 HEAP32[$0 + 4 >> 2] = $2; //@line 13176
 HEAP32[$0 >> 2] = $1; //@line 13177
 HEAP32[1954] = 1; //@line 13178
 $4 = $0; //@line 13179
 $9 = HEAP32[$4 + 4 >> 2] | 0; //@line 13184
 $10 = 7820; //@line 13185
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2]; //@line 13187
 HEAP32[$10 + 4 >> 2] = $9; //@line 13190
 return;
}
function __ZNK13SocketAddress8get_addrEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = $1 + 40 | 0; //@line 4810
 HEAP32[$0 >> 2] = HEAP32[$2 >> 2]; //@line 4811
 HEAP32[$0 + 4 >> 2] = HEAP32[$2 + 4 >> 2]; //@line 4811
 HEAP32[$0 + 8 >> 2] = HEAP32[$2 + 8 >> 2]; //@line 4811
 HEAP32[$0 + 12 >> 2] = HEAP32[$2 + 12 >> 2]; //@line 4811
 HEAP32[$0 + 16 >> 2] = HEAP32[$2 + 16 >> 2]; //@line 4811
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 if (__ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, HEAP32[$1 + 8 >> 2] | 0, 0) | 0) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $1, $2, $3); //@line 14364
 }
 return;
}
function _wait_ms($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 13280
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 13281
 _emscripten_sleep($0 | 0); //@line 13282
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 305; //@line 13285
  sp = STACKTOP; //@line 13286
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 13289
  return;
 }
}
function _mbed_trace_default_print($0) {
 $0 = $0 | 0;
 var $AsyncCtx = 0, sp = 0;
 sp = STACKTOP; //@line 1655
 $AsyncCtx = _emscripten_alloc_async_context(4, sp) | 0; //@line 1656
 _puts($0) | 0; //@line 1657
 if (___async) {
  HEAP32[$AsyncCtx >> 2] = 62; //@line 1660
  sp = STACKTOP; //@line 1661
  return;
 } else {
  _emscripten_free_async_context($AsyncCtx | 0); //@line 1664
  return;
 }
}
function _equeue_sema_create($0) {
 $0 = $0 | 0;
 var $$0 = 0, $1 = 0, $4 = 0;
 $1 = _pthread_mutex_init($0 | 0, 0) | 0; //@line 1622
 if (!$1) {
  $4 = _pthread_cond_init($0 + 28 | 0, 0) | 0; //@line 1626
  if (!$4) {
   HEAP8[$0 + 76 >> 0] = 0; //@line 1630
   $$0 = 0; //@line 1631
  } else {
   $$0 = $4; //@line 1633
  }
 } else {
  $$0 = $1; //@line 1636
 }
 return $$0 | 0; //@line 1638
}
function _equeue_tick() {
 var $0 = 0, sp = 0;
 sp = STACKTOP; //@line 1585
 STACKTOP = STACKTOP + 16 | 0; //@line 1586
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 1586
 $0 = sp; //@line 1587
 _gettimeofday($0 | 0, 0) | 0; //@line 1588
 STACKTOP = sp; //@line 1595
 return ((HEAP32[$0 + 4 >> 2] | 0) / 1e3 | 0) + ((HEAP32[$0 >> 2] | 0) * 1e3 | 0) | 0; //@line 1595
}
function ___shlim($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $4 = 0, $6 = 0, $7 = 0;
 HEAP32[$0 + 104 >> 2] = $1; //@line 6559
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 6561
 $6 = HEAP32[$0 + 4 >> 2] | 0; //@line 6563
 $7 = $4 - $6 | 0; //@line 6564
 HEAP32[$0 + 108 >> 2] = $7; //@line 6566
 HEAP32[$0 + 100 >> 2] = ($1 | 0) != 0 & ($7 | 0) > ($1 | 0) ? $6 + $1 | 0 : $4; //@line 6575
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_below_dstEPNS_19__dynamic_cast_infoEPKvi($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $7 = 0;
 if ((HEAP32[$1 + 4 >> 2] | 0) == ($2 | 0)) {
  $7 = $1 + 28 | 0; //@line 14428
  if ((HEAP32[$7 >> 2] | 0) != 1) {
   HEAP32[$7 >> 2] = $3; //@line 14432
  }
 }
 return;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP; //@line 14867
 STACKTOP = STACKTOP + 16 | 0; //@line 14868
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(16); //@line 14868
 if (!(_pthread_key_create(8412, 352) | 0)) {
  STACKTOP = sp; //@line 14873
  return;
 } else {
  _abort_message(7293, sp); //@line 14875
 }
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 11987
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 11992
 $8 = $0; //@line 11993
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 11995
 HEAP32[$8 + 4 >> 2] = $7; //@line 11998
 return;
}
function _emscripten_alloc_async_context(len, sp) {
 len = len | 0;
 sp = sp | 0;
 var new_frame = 0;
 new_frame = stackAlloc(len + 8 | 0) | 0; //@line 17635
 HEAP32[new_frame + 4 >> 2] = sp; //@line 17637
 HEAP32[new_frame >> 2] = ___async_cur_frame; //@line 17639
 ___async_cur_frame = new_frame; //@line 17640
 return ___async_cur_frame + 8 | 0; //@line 17641
}
function _nsapi_dns_add_server($0) {
 $0 = $0 | 0;
 _memmove(668, 648, 80) | 0; //@line 5857
 HEAP32[162] = HEAP32[$0 >> 2]; //@line 5858
 HEAP32[163] = HEAP32[$0 + 4 >> 2]; //@line 5858
 HEAP32[164] = HEAP32[$0 + 8 >> 2]; //@line 5858
 HEAP32[165] = HEAP32[$0 + 12 >> 2]; //@line 5858
 HEAP32[166] = HEAP32[$0 + 16 >> 2]; //@line 5858
 return 0; //@line 5859
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0, $8 = 0;
 $2 = $1; //@line 10405
 $7 = HEAP32[$2 + 4 >> 2] | 0; //@line 10410
 $8 = $0; //@line 10411
 HEAP32[$8 >> 2] = HEAP32[$2 >> 2]; //@line 10413
 HEAP32[$8 + 4 >> 2] = $7; //@line 10416
 return;
}
function __ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $5 = 0;
 $4 = $0 + -4 | 0; //@line 980
 $5 = HEAP32[$1 >> 2] | 0; //@line 981
 HEAP32[$4 + 60 + ($5 << 3) >> 2] = $2; //@line 983
 HEAP32[$4 + 60 + ($5 << 3) + 4 >> 2] = $3; //@line 985
 return;
}
function __ZN17EthernetInterface12socket_closeEPv__async_cb($0) {
 $0 = $0 | 0;
 var $2 = 0, $4 = 0;
 $2 = HEAP32[$0 + 4 >> 2] | 0; //@line 5054
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 5056
 HEAP8[$2 + 8 >> 0] = 0; //@line 5058
 if ($2 | 0) {
  __ZdlPv($2); //@line 5061
 }
 HEAP32[___async_retval >> 2] = $4; //@line 5064
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 3988
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 3988
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 3988
 return;
}
function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits; //@line 17624
  return low << bits; //@line 17625
 }
 tempRet0 = low << bits - 32; //@line 17627
 return 0; //@line 17628
}
function ___cxa_can_catch__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP8[___async_retval >> 0] & 1; //@line 6003
 if ($AsyncRetVal) {
  HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 6007
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal & 1; //@line 6010
 return;
}
function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits; //@line 17613
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits; //@line 17614
 }
 tempRet0 = 0; //@line 17616
 return high >>> bits - 32 | 0; //@line 17617
}
function __ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 4377
 HEAP32[$0 + 4 >> 2] = HEAP32[$1 + 4 >> 2]; //@line 4377
 HEAP32[$0 + 8 >> 2] = HEAP32[$1 + 8 >> 2]; //@line 4377
 return;
}
function __ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0;
 $4 = HEAP32[$1 >> 2] | 0; //@line 569
 HEAP32[$0 + 60 + ($4 << 3) >> 2] = $2; //@line 571
 HEAP32[$0 + 60 + ($4 << 3) + 4 >> 2] = $3; //@line 573
 return;
}
function _fflush__async_cb_214($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 17106
 if (!(HEAP8[$0 + 4 >> 0] & 1)) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 17108
 }
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 17111
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_78($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 3954
 HEAP32[___async_retval >> 2] = -3007; //@line 3956
 return;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP; //@line 4
 STACKTOP = STACKTOP + size | 0; //@line 5
 STACKTOP = STACKTOP + 15 & -16; //@line 6
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abortStackOverflow(size | 0); //@line 7
 return ret | 0; //@line 9
}
function _equeue_post__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 15296
 _equeue_sema_signal((HEAP32[$0 + 4 >> 2] | 0) + 48 | 0); //@line 15298
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 15300
 return;
}
function _puts__async_cb($0) {
 $0 = $0 | 0;
 var $$lobit = 0;
 $$lobit = HEAP32[___async_retval >> 2] >> 31; //@line 5973
 if (HEAP32[$0 + 4 >> 2] | 0) {
  ___unlockfile(HEAP32[$0 + 8 >> 2] | 0); //@line 5976
 }
 HEAP32[___async_retval >> 2] = $$lobit; //@line 5979
 return;
}
function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0; //@line 130
}
function ___overflow__async_cb($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP32[___async_retval >> 2] | 0) == 1) {
  $$0 = HEAPU8[HEAP32[$0 + 4 >> 2] >> 0] | 0; //@line 5041
 } else {
  $$0 = -1; //@line 5043
 }
 HEAP32[___async_retval >> 2] = $$0; //@line 5046
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_5($0) {
 $0 = $0 | 0;
 var $$06 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$06 = -3007; //@line 16021
 } else {
  $$06 = 0; //@line 16023
 }
 HEAP32[___async_retval >> 2] = $$06; //@line 16026
 return;
}
function __ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_2($0) {
 $0 = $0 | 0;
 var $$06 = 0;
 if (HEAP8[$0 + 4 >> 0] & 1) {
  $$06 = -3007; //@line 15931
 } else {
  $$06 = 0; //@line 15933
 }
 HEAP32[___async_retval >> 2] = $$06; //@line 15936
 return;
}
function ___lctrans_impl($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$1) {
  $$0 = 0; //@line 5087
 } else {
  $$0 = ___mo_lookup(HEAP32[$1 >> 2] | 0, HEAP32[$1 + 4 >> 2] | 0, $0) | 0; //@line 5093
 }
 return ($$0 | 0 ? $$0 : $0) | 0; //@line 5097
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_81($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 4741
 return;
}
function _emscripten_free_async_context(ctx) {
 ctx = ctx | 0;
 assert((___async_cur_frame + 8 | 0) == (ctx | 0) | 0); //@line 17647
 stackRestore(___async_cur_frame | 0); //@line 17648
 ___async_cur_frame = HEAP32[___async_cur_frame >> 2] | 0; //@line 17649
}
function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0); //@line 179
}
function _fputc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 23761
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 23762
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 23764
 return;
}
function __ZN12NetworkStack20get_call_in_callbackEv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = 100; //@line 3493
 HEAP32[$0 + 4 >> 2] = 1; //@line 3495
 HEAP32[$0 + 8 >> 2] = $1; //@line 3497
 HEAP32[$0 + 12 >> 2] = 552; //@line 3498
 return;
}
function _putc__async_cb($0) {
 $0 = $0 | 0;
 var $AsyncRetVal = 0;
 $AsyncRetVal = HEAP32[___async_retval >> 2] | 0; //@line 24331
 ___unlockfile(HEAP32[$0 + 4 >> 2] | 0); //@line 24332
 HEAP32[___async_retval >> 2] = $AsyncRetVal; //@line 24334
 return;
}
function _gpio_init_out($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = $1; //@line 13152
 if (($1 | 0) == -1) {
  return;
 }
 HEAP32[$0 + 4 >> 2] = $1; //@line 13158
 _emscripten_asm_const_iii(10, $0 | 0, $1 | 0) | 0; //@line 13159
 return;
}
function ___DOUBLE_BITS_677($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 12440
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 12440
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 12442
 return $1 | 0; //@line 12443
}
function ___DOUBLE_BITS_563($0) {
 $0 = +$0;
 var $1 = 0;
 HEAPF64[tempDoublePtr >> 3] = $0; //@line 9694
 $1 = HEAP32[tempDoublePtr >> 2] | 0; //@line 9694
 tempRet0 = HEAP32[tempDoublePtr + 4 >> 2] | 0; //@line 9696
 return $1 | 0; //@line 9697
}
function __ZN9TCPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 5219
 HEAP32[$0 >> 2] = 608; //@line 5220
 HEAP32[$0 + 52 >> 2] = 0; //@line 5222
 HEAP8[$0 + 56 >> 0] = 0; //@line 5224
 HEAP8[$0 + 57 >> 0] = 0; //@line 5226
 return;
}
function _equeue_sema_signal($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1644
 HEAP8[$0 + 76 >> 0] = 1; //@line 1646
 _pthread_cond_signal($0 + 28 | 0) | 0; //@line 1648
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1649
 return;
}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0; //@line 17364
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0; //@line 17365
 return (tempRet0 = h, a - c >>> 0 | 0) | 0; //@line 17366
}
function ___syscall_ret($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ($0 >>> 0 > 4294963200) {
  HEAP32[(___errno_location() | 0) >> 2] = 0 - $0; //@line 4535
  $$0 = -1; //@line 4536
 } else {
  $$0 = $0; //@line 4538
 }
 return $$0 | 0; //@line 4540
}
function __ZL28nsapi_dns_query_async_deletei__async_cb_160($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 13178
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 13179
 HEAP32[7796 + ($4 << 2) >> 2] = 0; //@line 13181
 return;
}
function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0; //@line 123
}
function __Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_89($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5397
 return;
}
function _equeue_enqueue__async_cb($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 16727
 _equeue_mutex_unlock(HEAP32[$0 + 4 >> 2] | 0); //@line 16728
 HEAP32[___async_retval >> 2] = $4; //@line 16730
 return;
}
function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0); //@line 172
}
function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 var sp = 0;
 sp = STACKTOP; //@line 991
 ___cxa_begin_catch($0 | 0) | 0; //@line 992
 _emscripten_alloc_async_context(4, sp) | 0; //@line 993
 __ZSt9terminatev(); //@line 994
}
function _handle_lora_downlink($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 __ZN16SX1276_LoRaRadio8rx_frameEPhjjhh($0, $1, $2, $3, $4, $5); //@line 1008
 return;
}
function ___cxa_guard_acquire($0) {
 $0 = $0 | 0;
 var $$0 = 0;
 if ((HEAP8[$0 >> 0] | 0) == 1) {
  $$0 = 0; //@line 15744
 } else {
  HEAP8[$0 >> 0] = 1; //@line 15746
  $$0 = 1; //@line 15747
 }
 return $$0 | 0; //@line 15749
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_51($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 485
 return;
}
function __Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 1571
 return;
}
function __ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 24354
 HEAP32[___async_retval >> 2] = 0; //@line 24356
 return;
}
function __ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb($0) {
 $0 = $0 | 0;
 HEAP8[(HEAP32[$0 + 4 >> 2] | 0) + 8 >> 0] = 1; //@line 23649
 HEAP32[___async_retval >> 2] = 0; //@line 23651
 return;
}
function __ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_38($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 24107
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_151($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 12510
 return;
}
function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0; //@line 116
}
function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0; //@line 17356
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0; //@line 17358
}
function __ZN4mbed16mbed_event_queueEv() {
 if (!(HEAP8[7544] | 0)) {
  if (___cxa_guard_acquire(7544) | 0) {
   __ZN6events10EventQueueC2EjPh(7560, 256, 8420); //@line 1109
  }
 }
 return 7560; //@line 1112
}
function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0); //@line 165
}
function __ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_28($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 23639
 return;
}
function _wctomb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$0 = 0;
 if (!$0) {
  $$0 = 0; //@line 11500
 } else {
  $$0 = _wcrtomb($0, $1, 0) | 0; //@line 11503
 }
 return $$0 | 0; //@line 11505
}
function _strchr($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = ___strchrnul($0, $1) | 0; //@line 5232
 return ((HEAP8[$2 >> 0] | 0) == ($1 & 255) << 24 >> 24 ? $2 : 0) | 0; //@line 5237
}
function __ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_188($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 15280
 return;
}
function __ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_113($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 8 >> 2]; //@line 9072
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_96($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 6085
 return;
}
function __ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 11939
 return;
}
function __ZL30nsapi_dns_query_async_responsePv__async_cb_64($0) {
 $0 = $0 | 0;
 var $4 = 0;
 $4 = HEAP32[$0 + 8 >> 2] | 0; //@line 1244
 if ($4 | 0) {
  __ZdaPv($4); //@line 1247
 }
 return;
}
function _common_write_16_bit($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP8[$1 >> 0] = ($0 & 65535) >>> 8; //@line 2375
 HEAP8[$1 + 1 >> 0] = $0; //@line 2378
 return $1 + 2 | 0; //@line 2379
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_84($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5161
 return;
}
function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0; //@line 109
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 return ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0; //@line 17593
}
function __ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_93($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5840
 return;
}
function ___dynamic_cast__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[HEAP32[$0 + 4 >> 2] >> 2] | 0) == 1 ? HEAP32[$0 + 8 >> 2] | 0 : 0; //@line 16753
 return;
}
function _fputs($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0;
 $2 = _strlen($0) | 0; //@line 4727
 return ((_fwrite($0, 1, $2, $1) | 0) != ($2 | 0)) << 31 >> 31 | 0; //@line 4731
}
function __ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_69($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 1559
 return;
}
function __ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_94($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 5890
 return;
}
function b53(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(3); //@line 321
 return 0; //@line 321
}
function b52(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(0); //@line 318
 return 0; //@line 318
}
function _mbsinit($0) {
 $0 = $0 | 0;
 var $4 = 0;
 if (!$0) {
  $4 = 1; //@line 6903
 } else {
  $4 = (HEAP32[$0 >> 2] | 0) == 0 & 1; //@line 6908
 }
 return $4 | 0; //@line 6910
}
function _emscripten_realloc_async_context(len) {
 len = len | 0;
 stackRestore(___async_cur_frame | 0); //@line 17654
 return (stackAlloc(len + 8 | 0) | 0) + 8 | 0; //@line 17655
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_33($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 23857
 return;
}
function __ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_46($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 33
 return;
}
function __ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_95($0) {
 $0 = $0 | 0;
 HEAP32[HEAP32[$0 + 8 >> 2] >> 2] = HEAP32[HEAP32[$0 + 4 >> 2] >> 2]; //@line 5954
 return;
}
function __ZN12NetworkStack10getsockoptEPviiS0_Pj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase; //@line 21
 STACK_MAX = stackMax; //@line 22
}
function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 0](a1 | 0, a2 | 0, a3 | 0); //@line 158
}
function __ZN12NetworkStack10setsockoptEPviiPKvj($0, $1, $2, $3, $4, $5) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 $5 = $5 | 0;
 return -3002;
}
function __ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 10280
 return;
}
function __ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_97($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 6093
 return;
}
function __ZN9UDPSocketC2Ev($0) {
 $0 = $0 | 0;
 __ZN6SocketC2Ev($0); //@line 5713
 HEAP32[$0 >> 2] = 632; //@line 5714
 HEAP32[$0 + 52 >> 2] = 0; //@line 5716
 return;
}
function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14967
 __ZdlPv($0); //@line 14968
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14650
 __ZdlPv($0); //@line 14651
 return;
}
function _swapc($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $3 = 0;
 $3 = _llvm_bswap_i32($0 | 0) | 0; //@line 5223
 return (($1 | 0) == 0 ? $0 : $3) | 0; //@line 5225
}
function __ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_85($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = -3012; //@line 5169
 return;
}
function __ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($0) {
 $0 = $0 | 0;
 __ZN10__cxxabiv116__shim_type_infoD2Ev($0); //@line 14178
 __ZdlPv($0); //@line 14179
 return;
}
function __ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 23493
 return;
}
function __ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 7590
 return;
}
function __ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_217($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 17246
 return;
}
function _out_670($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 if (!(HEAP32[$0 >> 2] & 32)) {
  ___fwritex($1, $2, $0) | 0; //@line 10985
 }
 return;
}
function __ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 10241
 return;
}
function __ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_44($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 24686
 return;
}
function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw; //@line 32
  threwValue = value; //@line 33
 }
}
function b50(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(7); //@line 315
 return 0; //@line 315
}
function b49(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_iiiiii(0); //@line 312
 return 0; //@line 312
}
function ___cxa_is_pointer_type__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = (HEAP32[___async_retval >> 2] | 0) != 0 & 1; //@line 7602
 return;
}
function __ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress($0, $1, $2, $3) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 return -3002;
}
function __Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_31($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 23809
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 >> 2] = HEAP32[$1 >> 2]; //@line 12530
 return;
}
function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 15](a1 | 0, a2 | 0) | 0; //@line 102
}
function b216(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(0); //@line 792
}
function __ZN17EthernetInterface15get_mac_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 14835
 return;
}
function __ZN17EthernetInterface11socket_sendEPvPKvj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 6028
 return;
}
function __ZN17EthernetInterface11socket_recvEPvS0_j__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 7698
 return;
}
function __ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_210($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 16876
 return;
}
function __ZN10__cxxabiv18is_equalEPKSt9type_infoS2_b($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ($0 | 0) == ($1 | 0) | 0; //@line 14375
}
function __ZN17EthernetInterface14get_ip_addressEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 24366
 return;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[2104] | 0; //@line 15766
 HEAP32[2104] = $0 + 0; //@line 15768
 return $0 | 0; //@line 15770
}
function __ZN12NetworkStack11setstackoptEiiPKvj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZN12NetworkStack11getstackoptEiiPvPj($0, $1, $2, $3, $4) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 $4 = $4 | 0;
 return -3002;
}
function __ZSt13get_terminatev() {
 var $0 = 0;
 $0 = HEAP32[630] | 0; //@line 14957
 HEAP32[630] = $0 + 0; //@line 14959
 return $0 | 0; //@line 14961
}
function __ZN17EthernetInterface11get_netmaskEv__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 495
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 7](a1 | 0, a2 | 0); //@line 151
}
function __ZnajRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 12919
 return;
}
function __ZN6Socket11set_timeoutEi($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + 12 >> 2] = ($1 | 0) > -1 ? $1 : -1; //@line 4469
 return;
}
function __ZnwjRKSt9nothrow_t__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5796
 return;
}
function __ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 23931
 return;
}
function b47(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(15); //@line 309
 return 0; //@line 309
}
function b46(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(14); //@line 306
 return 0; //@line 306
}
function b45(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(13); //@line 303
 return 0; //@line 303
}
function b44(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(12); //@line 300
 return 0; //@line 300
}
function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function b43(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_iiiii(0); //@line 297
 return 0; //@line 297
}
function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0; //@line 17681
}
function __ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_162($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function b214(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(0); //@line 789
}
function __ZN6Socket5closeEv__async_cb_108($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[$0 + 4 >> 2]; //@line 7688
 return;
}
function __ZN17EthernetInterface11socket_bindEPvRK13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function _fflush__async_cb_215($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 17121
 return;
}
function _strerror($0) {
 $0 = $0 | 0;
 return ___strerror_l($0, HEAP32[(___pthread_self_85() | 0) + 188 >> 2] | 0) | 0; //@line 11448
}
function __Z28nsapi_dns_query_async_canceli__async_cb_27($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 23590
 return;
}
function _vsprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 23600
 return;
}
function _snprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 16717
 return;
}
function _fputc__async_cb_30($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 23774
 return;
}
function __ZN6Socket4openEP12NetworkStack__async_cb_144($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 11929
 return;
}
function _sprintf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13426
 return;
}
function _putc__async_cb_40($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 24344
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12NetworkStack14get_dns_serverEiP13SocketAddress($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_121($0) {
 $0 = $0 | 0;
 _free(HEAP32[$0 + 8 >> 2] | 0); //@line 9800
 return;
}
function _printf__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 5902
 return;
}
function __Znaj__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = HEAP32[___async_retval >> 2]; //@line 13343
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterface8set_dhcpEb__async_cb($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 6018
 return;
}
function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 31](a1 | 0) | 0; //@line 95
}
function __ZThn4_N17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN13SocketAddress8set_portEt($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP16[$0 + 60 >> 1] = $1; //@line 4569
 return;
}
function _do_read($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return ___string_read($0, $1, $2) | 0; //@line 5618
}
function __ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt11__terminatePFvvE__async_cb($0) {
 $0 = $0 | 0;
 _abort_message(7396, HEAP32[$0 + 4 >> 2] | 0); //@line 11507
}
function b41(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(31); //@line 294
 return 0; //@line 294
}
function b40(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(30); //@line 291
 return 0; //@line 291
}
function b39(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(29); //@line 288
 return 0; //@line 288
}
function b38(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(28); //@line 285
 return 0; //@line 285
}
function b37(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(27); //@line 282
 return 0; //@line 282
}
function b36(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(26); //@line 279
 return 0; //@line 279
}
function b35(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(25); //@line 276
 return 0; //@line 276
}
function b34(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(24); //@line 273
 return 0; //@line 273
}
function b33(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(23); //@line 270
 return 0; //@line 270
}
function b32(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(22); //@line 267
 return 0; //@line 267
}
function b31(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(21); //@line 264
 return 0; //@line 264
}
function b30(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(20); //@line 261
 return 0; //@line 261
}
function b29(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(19); //@line 258
 return 0; //@line 258
}
function b28(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(18); //@line 255
 return 0; //@line 255
}
function b27(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0); //@line 252
 return 0; //@line 252
}
function _strcpy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 ___stpcpy($0, $1) | 0; //@line 13458
 return $0 | 0; //@line 13459
}
function __ZN17EthernetInterface13socket_listenEPvi($0, $1, $2) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return;
}
function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 511](a1 | 0); //@line 144
}
function b212(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(7); //@line 786
}
function b211(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(6); //@line 783
}
function b210(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(0); //@line 780
}
function _equeue_event_delay($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -16 >> 2] = $1; //@line 1571
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_($0) {
 $0 = $0 | 0;
 return;
}
function _equeue_event_dtor($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 HEAP32[$0 + -8 >> 2] = $1; //@line 1580
 return;
}
function __ZN9UDPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 23483
 return;
}
function __ZNK13SocketAddress14get_ip_versionEv($0) {
 $0 = $0 | 0;
 return HEAP32[$0 + 40 >> 2] | 0; //@line 4888
}
function __ZN9TCPSocketD0Ev__async_cb($0) {
 $0 = $0 | 0;
 __ZdlPv(HEAP32[$0 + 4 >> 2] | 0); //@line 5988
 return;
}
function __ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _isspace($0) {
 $0 = $0 | 0;
 return (($0 | 0) == 32 | ($0 + -9 | 0) >>> 0 < 5) & 1 | 0; //@line 4645
}
function ___lctrans($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return ___lctrans_impl($0, $1) | 0; //@line 12693
}
function _equeue_mutex_unlock($0) {
 $0 = $0 | 0;
 _pthread_mutex_unlock($0 | 0) | 0; //@line 1615
 return;
}
function __ZNK13SocketAddress8get_portEv($0) {
 $0 = $0 | 0;
 return HEAP16[$0 + 60 >> 1] | 0; //@line 4820
}
function _equeue_mutex_create($0) {
 $0 = $0 | 0;
 return _pthread_mutex_init($0 | 0, 0) | 0; //@line 1602
}
function __ZdlPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdlPv($0); //@line 13989
 return;
}
function __ZdaPvRKSt9nothrow_t($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 __ZdaPv($0); //@line 14004
 return;
}
function __ZThn4_N17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0 + -4 | 0); //@line 587
 return;
}
function b25(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(15); //@line 249
 return 0; //@line 249
}
function b24(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(14); //@line 246
 return 0; //@line 246
}
function b23(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(13); //@line 243
 return 0; //@line 243
}
function b22(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(12); //@line 240
 return 0; //@line 240
}
function b21(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(11); //@line 237
 return 0; //@line 237
}
function b20(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(10); //@line 234
 return 0; //@line 234
}
function b19(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(9); //@line 231
 return 0; //@line 231
}
function b18(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(0); //@line 228
 return 0; //@line 228
}
function _main__async_cb_58($0) {
 $0 = $0 | 0;
 HEAP32[___async_retval >> 2] = 0; //@line 897
 return;
}
function _equeue_mutex_lock($0) {
 $0 = $0 | 0;
 _pthread_mutex_lock($0 | 0) | 0; //@line 1608
 return;
}
function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 0]() | 0; //@line 88
}
function b208(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(0); //@line 777
}
function __ZN16NetworkInterface12set_blockingEb($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 return -3002;
}
function __ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_155($0) {
 $0 = $0 | 0;
 return;
}
function __ZN17EthernetInterface9get_stackEv($0) {
 $0 = $0 | 0;
 return $0 + 4 | 0; //@line 212
}
function __Z18nsapi_create_stackP12NetworkStack($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 4001
}
function __ZL35nsapi_dns_query_async_initiate_nextv__async_cb_212($0) {
 $0 = $0 | 0;
 return;
}
function __ZN12NetworkStack19onboardNetworkStackEv($0) {
 $0 = $0 | 0;
 return 0; //@line 615
}
function __ZNK16NetworkInterface21get_connection_statusEv($0) {
 $0 = $0 | 0;
 return -3002;
}
function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 7](); //@line 137
}
function __ZN16NetworkInterface13wifiInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 187
}
function __ZN16NetworkInterface13meshInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 193
}
function __ZN16NetworkInterface13emacInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 205
}
function __ZN17EthernetInterfaceD0Ev($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 55
 return;
}
function __ZN17EthernetInterface11get_gatewayEv($0) {
 $0 = $0 | 0;
 return 0; //@line 125
}
function __ZN16NetworkInterface12ethInterfaceEv($0) {
 $0 = $0 | 0;
 return 0; //@line 181
}
function __ZN16NetworkInterface12cellularBaseEv($0) {
 $0 = $0 | 0;
 return 0; //@line 199
}
function _isdigit($0) {
 $0 = $0 | 0;
 return ($0 + -48 | 0) >>> 0 < 10 | 0; //@line 4593
}
function __ZN17EthernetInterface10disconnectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 175
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_200($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_194($0) {
 $0 = $0 | 0;
 return;
}
function __ZL28nsapi_dns_query_async_createPv__async_cb_190($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv($0) {
 $0 = $0 | 0;
 return;
}
function __ZL29nsapi_dns_query_async_timeoutv__async_cb_19($0) {
 $0 = $0 | 0;
 return;
}
function __ZL26nsapi_dns_query_async_sendPv__async_cb_117($0) {
 $0 = $0 | 0;
 return;
}
function b16(p0) {
 p0 = p0 | 0;
 nullFunc_ii(31); //@line 225
 return 0; //@line 225
}
function b15(p0) {
 p0 = p0 | 0;
 nullFunc_ii(30); //@line 222
 return 0; //@line 222
}
function b14(p0) {
 p0 = p0 | 0;
 nullFunc_ii(29); //@line 219
 return 0; //@line 219
}
function b13(p0) {
 p0 = p0 | 0;
 nullFunc_ii(28); //@line 216
 return 0; //@line 216
}
function b12(p0) {
 p0 = p0 | 0;
 nullFunc_ii(27); //@line 213
 return 0; //@line 213
}
function b11(p0) {
 p0 = p0 | 0;
 nullFunc_ii(26); //@line 210
 return 0; //@line 210
}
function b10(p0) {
 p0 = p0 | 0;
 nullFunc_ii(25); //@line 207
 return 0; //@line 207
}
function __ZN17EthernetInterface7connectEv($0) {
 $0 = $0 | 0;
 return 0; //@line 169
}
function b9(p0) {
 p0 = p0 | 0;
 nullFunc_ii(24); //@line 204
 return 0; //@line 204
}
function b8(p0) {
 p0 = p0 | 0;
 nullFunc_ii(23); //@line 201
 return 0; //@line 201
}
function b7(p0) {
 p0 = p0 | 0;
 nullFunc_ii(22); //@line 198
 return 0; //@line 198
}
function b6(p0) {
 p0 = p0 | 0;
 nullFunc_ii(21); //@line 195
 return 0; //@line 195
}
function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(20); //@line 192
 return 0; //@line 192
}
function b4(p0) {
 p0 = p0 | 0;
 nullFunc_ii(19); //@line 189
 return 0; //@line 189
}
function b3(p0) {
 p0 = p0 | 0;
 nullFunc_ii(0); //@line 186
 return 0; //@line 186
}
function _copysignl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_copysign($0, $1));
}
function _abort_message__async_cb_163($0) {
 $0 = $0 | 0;
 _abort(); //@line 13449
}
function b206(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(0); //@line 774
}
function _scalbnl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_scalbn($0, $1));
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_lock() {
 ___lock(8392); //@line 5242
 return 8400; //@line 5243
}
function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value; //@line 39
}
function _frexpl($0, $1) {
 $0 = +$0;
 $1 = $1 | 0;
 return +(+_frexp($0, $1));
}
function __ZN9UDPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 1; //@line 5675
}
function __ZN9TCPSocket9get_protoEv($0) {
 $0 = $0 | 0;
 return 0; //@line 5181
}
function ___cxa_pure_virtual__wrapper() {
 ___cxa_pure_virtual(); //@line 327
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function ___pthread_self_910() {
 return _pthread_self() | 0; //@line 12614
}
function _fmodl($0, $1) {
 $0 = +$0;
 $1 = +$1;
 return +(+_fmod($0, $1));
}
function ___pthread_self_913() {
 return _pthread_self() | 0; //@line 9718
}
function ___pthread_self_85() {
 return _pthread_self() | 0; //@line 12620
}
function _mbed_trace_default_print__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZdaPv($0) {
 $0 = $0 | 0;
 __ZdlPv($0); //@line 13996
 return;
}
function stackRestore(top) {
 top = top | 0;
 STACKTOP = top; //@line 16
}
function __ZN6SocketD0Ev($0) {
 $0 = $0 | 0;
 _llvm_trap(); //@line 4070
}
function __ZdlPv($0) {
 $0 = $0 | 0;
 _free($0); //@line 13981
 return;
}
function __ZThn4_N17EthernetInterfaceD1Ev($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9TCPSocketD2Ev__async_cb_164($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9TCPSocket5eventEv__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_unlock(x) {
 x = x | 0;
 return 0; //@line 54
}
function _mbed_assert_internal__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZN9UDPSocketD2Ev__async_cb_10($0) {
 $0 = $0 | 0;
 return;
}
function _pthread_mutex_lock(x) {
 x = x | 0;
 return 0; //@line 50
}
function _handle_interrupt_in($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
}
function __ZN6SocketD2Ev__async_cb_207($0) {
 $0 = $0 | 0;
 return;
}
function b1() {
 nullFunc_i(0); //@line 183
 return 0; //@line 183
}
function _mbed_error_printf__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___ofl_unlock() {
 ___unlock(8392); //@line 5248
 return;
}
function __ZN17EthernetInterfaceD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function b204(p0) {
 p0 = p0 | 0;
 nullFunc_vi(511); //@line 771
}
function b203(p0) {
 p0 = p0 | 0;
 nullFunc_vi(510); //@line 768
}
function b202(p0) {
 p0 = p0 | 0;
 nullFunc_vi(509); //@line 765
}
function b201(p0) {
 p0 = p0 | 0;
 nullFunc_vi(508); //@line 762
}
function b200(p0) {
 p0 = p0 | 0;
 nullFunc_vi(507); //@line 759
}
function b199(p0) {
 p0 = p0 | 0;
 nullFunc_vi(506); //@line 756
}
function b198(p0) {
 p0 = p0 | 0;
 nullFunc_vi(505); //@line 753
}
function b197(p0) {
 p0 = p0 | 0;
 nullFunc_vi(504); //@line 750
}
function b196(p0) {
 p0 = p0 | 0;
 nullFunc_vi(503); //@line 747
}
function b195(p0) {
 p0 = p0 | 0;
 nullFunc_vi(502); //@line 744
}
function b194(p0) {
 p0 = p0 | 0;
 nullFunc_vi(501); //@line 741
}
function b193(p0) {
 p0 = p0 | 0;
 nullFunc_vi(500); //@line 738
}
function b192(p0) {
 p0 = p0 | 0;
 nullFunc_vi(499); //@line 735
}
function b191(p0) {
 p0 = p0 | 0;
 nullFunc_vi(498); //@line 732
}
function b190(p0) {
 p0 = p0 | 0;
 nullFunc_vi(497); //@line 729
}
function b189(p0) {
 p0 = p0 | 0;
 nullFunc_vi(496); //@line 726
}
function b188(p0) {
 p0 = p0 | 0;
 nullFunc_vi(495); //@line 723
}
function b187(p0) {
 p0 = p0 | 0;
 nullFunc_vi(494); //@line 720
}
function b186(p0) {
 p0 = p0 | 0;
 nullFunc_vi(493); //@line 717
}
function b185(p0) {
 p0 = p0 | 0;
 nullFunc_vi(492); //@line 714
}
function b184(p0) {
 p0 = p0 | 0;
 nullFunc_vi(491); //@line 711
}
function b183(p0) {
 p0 = p0 | 0;
 nullFunc_vi(490); //@line 708
}
function b182(p0) {
 p0 = p0 | 0;
 nullFunc_vi(489); //@line 705
}
function b181(p0) {
 p0 = p0 | 0;
 nullFunc_vi(488); //@line 702
}
function b180(p0) {
 p0 = p0 | 0;
 nullFunc_vi(487); //@line 699
}
function b179(p0) {
 p0 = p0 | 0;
 nullFunc_vi(486); //@line 696
}
function b178(p0) {
 p0 = p0 | 0;
 nullFunc_vi(485); //@line 693
}
function b177(p0) {
 p0 = p0 | 0;
 nullFunc_vi(484); //@line 690
}
function b176(p0) {
 p0 = p0 | 0;
 nullFunc_vi(483); //@line 687
}
function b175(p0) {
 p0 = p0 | 0;
 nullFunc_vi(482); //@line 684
}
function b174(p0) {
 p0 = p0 | 0;
 nullFunc_vi(481); //@line 681
}
function b173(p0) {
 p0 = p0 | 0;
 nullFunc_vi(480); //@line 678
}
function b172(p0) {
 p0 = p0 | 0;
 nullFunc_vi(479); //@line 675
}
function b171(p0) {
 p0 = p0 | 0;
 nullFunc_vi(478); //@line 672
}
function b170(p0) {
 p0 = p0 | 0;
 nullFunc_vi(477); //@line 669
}
function b169(p0) {
 p0 = p0 | 0;
 nullFunc_vi(476); //@line 666
}
function b168(p0) {
 p0 = p0 | 0;
 nullFunc_vi(475); //@line 663
}
function b167(p0) {
 p0 = p0 | 0;
 nullFunc_vi(474); //@line 660
}
function b166(p0) {
 p0 = p0 | 0;
 nullFunc_vi(473); //@line 657
}
function b165(p0) {
 p0 = p0 | 0;
 nullFunc_vi(472); //@line 654
}
function b164(p0) {
 p0 = p0 | 0;
 nullFunc_vi(471); //@line 651
}
function b163(p0) {
 p0 = p0 | 0;
 nullFunc_vi(470); //@line 648
}
function b162(p0) {
 p0 = p0 | 0;
 nullFunc_vi(469); //@line 645
}
function b161(p0) {
 p0 = p0 | 0;
 nullFunc_vi(468); //@line 642
}
function b160(p0) {
 p0 = p0 | 0;
 nullFunc_vi(467); //@line 639
}
function b159(p0) {
 p0 = p0 | 0;
 nullFunc_vi(466); //@line 636
}
function b158(p0) {
 p0 = p0 | 0;
 nullFunc_vi(465); //@line 633
}
function b157(p0) {
 p0 = p0 | 0;
 nullFunc_vi(464); //@line 630
}
function b156(p0) {
 p0 = p0 | 0;
 nullFunc_vi(463); //@line 627
}
function b155(p0) {
 p0 = p0 | 0;
 nullFunc_vi(462); //@line 624
}
function b154(p0) {
 p0 = p0 | 0;
 nullFunc_vi(461); //@line 621
}
function b153(p0) {
 p0 = p0 | 0;
 nullFunc_vi(460); //@line 618
}
function b152(p0) {
 p0 = p0 | 0;
 nullFunc_vi(459); //@line 615
}
function b151(p0) {
 p0 = p0 | 0;
 nullFunc_vi(458); //@line 612
}
function b150(p0) {
 p0 = p0 | 0;
 nullFunc_vi(457); //@line 609
}
function b149(p0) {
 p0 = p0 | 0;
 nullFunc_vi(456); //@line 606
}
function b148(p0) {
 p0 = p0 | 0;
 nullFunc_vi(455); //@line 603
}
function b147(p0) {
 p0 = p0 | 0;
 nullFunc_vi(454); //@line 600
}
function b146(p0) {
 p0 = p0 | 0;
 nullFunc_vi(453); //@line 597
}
function b145(p0) {
 p0 = p0 | 0;
 nullFunc_vi(452); //@line 594
}
function b144(p0) {
 p0 = p0 | 0;
 nullFunc_vi(451); //@line 591
}
function b143(p0) {
 p0 = p0 | 0;
 nullFunc_vi(450); //@line 588
}
function b142(p0) {
 p0 = p0 | 0;
 nullFunc_vi(449); //@line 585
}
function b141(p0) {
 p0 = p0 | 0;
 nullFunc_vi(448); //@line 582
}
function b140(p0) {
 p0 = p0 | 0;
 nullFunc_vi(447); //@line 579
}
function b139(p0) {
 p0 = p0 | 0;
 nullFunc_vi(446); //@line 576
}
function b138(p0) {
 p0 = p0 | 0;
 nullFunc_vi(445); //@line 573
}
function b137(p0) {
 p0 = p0 | 0;
 nullFunc_vi(444); //@line 570
}
function b136(p0) {
 p0 = p0 | 0;
 nullFunc_vi(443); //@line 567
}
function b135(p0) {
 p0 = p0 | 0;
 nullFunc_vi(442); //@line 564
}
function b134(p0) {
 p0 = p0 | 0;
 nullFunc_vi(441); //@line 561
}
function b133(p0) {
 p0 = p0 | 0;
 nullFunc_vi(440); //@line 558
}
function b132(p0) {
 p0 = p0 | 0;
 nullFunc_vi(439); //@line 555
}
function b131(p0) {
 p0 = p0 | 0;
 nullFunc_vi(438); //@line 552
}
function b130(p0) {
 p0 = p0 | 0;
 nullFunc_vi(437); //@line 549
}
function b129(p0) {
 p0 = p0 | 0;
 nullFunc_vi(436); //@line 546
}
function b128(p0) {
 p0 = p0 | 0;
 nullFunc_vi(435); //@line 543
}
function b127(p0) {
 p0 = p0 | 0;
 nullFunc_vi(434); //@line 540
}
function b126(p0) {
 p0 = p0 | 0;
 nullFunc_vi(433); //@line 537
}
function b125(p0) {
 p0 = p0 | 0;
 nullFunc_vi(432); //@line 534
}
function b124(p0) {
 p0 = p0 | 0;
 nullFunc_vi(431); //@line 531
}
function b123(p0) {
 p0 = p0 | 0;
 nullFunc_vi(430); //@line 528
}
function b122(p0) {
 p0 = p0 | 0;
 nullFunc_vi(429); //@line 525
}
function b121(p0) {
 p0 = p0 | 0;
 nullFunc_vi(428); //@line 522
}
function b120(p0) {
 p0 = p0 | 0;
 nullFunc_vi(427); //@line 519
}
function b119(p0) {
 p0 = p0 | 0;
 nullFunc_vi(426); //@line 516
}
function b118(p0) {
 p0 = p0 | 0;
 nullFunc_vi(425); //@line 513
}
function b117(p0) {
 p0 = p0 | 0;
 nullFunc_vi(424); //@line 510
}
function b116(p0) {
 p0 = p0 | 0;
 nullFunc_vi(423); //@line 507
}
function b115(p0) {
 p0 = p0 | 0;
 nullFunc_vi(422); //@line 504
}
function b114(p0) {
 p0 = p0 | 0;
 nullFunc_vi(421); //@line 501
}
function b113(p0) {
 p0 = p0 | 0;
 nullFunc_vi(420); //@line 498
}
function b112(p0) {
 p0 = p0 | 0;
 nullFunc_vi(419); //@line 495
}
function b111(p0) {
 p0 = p0 | 0;
 nullFunc_vi(418); //@line 492
}
function b110(p0) {
 p0 = p0 | 0;
 nullFunc_vi(417); //@line 489
}
function b109(p0) {
 p0 = p0 | 0;
 nullFunc_vi(416); //@line 486
}
function b108(p0) {
 p0 = p0 | 0;
 nullFunc_vi(415); //@line 483
}
function b107(p0) {
 p0 = p0 | 0;
 nullFunc_vi(414); //@line 480
}
function b106(p0) {
 p0 = p0 | 0;
 nullFunc_vi(413); //@line 477
}
function b105(p0) {
 p0 = p0 | 0;
 nullFunc_vi(412); //@line 474
}
function b104(p0) {
 p0 = p0 | 0;
 nullFunc_vi(411); //@line 471
}
function b103(p0) {
 p0 = p0 | 0;
 nullFunc_vi(410); //@line 468
}
function b102(p0) {
 p0 = p0 | 0;
 nullFunc_vi(409); //@line 465
}
function b101(p0) {
 p0 = p0 | 0;
 nullFunc_vi(408); //@line 462
}
function b100(p0) {
 p0 = p0 | 0;
 nullFunc_vi(407); //@line 459
}
function _dummy($0) {
 $0 = $0 | 0;
 return $0 | 0; //@line 4551
}
function ___lockfile($0) {
 $0 = $0 | 0;
 return 0; //@line 4879
}
function b99(p0) {
 p0 = p0 | 0;
 nullFunc_vi(406); //@line 456
}
function b98(p0) {
 p0 = p0 | 0;
 nullFunc_vi(405); //@line 453
}
function b97(p0) {
 p0 = p0 | 0;
 nullFunc_vi(404); //@line 450
}
function b96(p0) {
 p0 = p0 | 0;
 nullFunc_vi(403); //@line 447
}
function b95(p0) {
 p0 = p0 | 0;
 nullFunc_vi(402); //@line 444
}
function b94(p0) {
 p0 = p0 | 0;
 nullFunc_vi(401); //@line 441
}
function b93(p0) {
 p0 = p0 | 0;
 nullFunc_vi(400); //@line 438
}
function b92(p0) {
 p0 = p0 | 0;
 nullFunc_vi(399); //@line 435
}
function b91(p0) {
 p0 = p0 | 0;
 nullFunc_vi(398); //@line 432
}
function b90(p0) {
 p0 = p0 | 0;
 nullFunc_vi(397); //@line 429
}
function b89(p0) {
 p0 = p0 | 0;
 nullFunc_vi(396); //@line 426
}
function b88(p0) {
 p0 = p0 | 0;
 nullFunc_vi(395); //@line 423
}
function b87(p0) {
 p0 = p0 | 0;
 nullFunc_vi(394); //@line 420
}
function b86(p0) {
 p0 = p0 | 0;
 nullFunc_vi(393); //@line 417
}
function b85(p0) {
 p0 = p0 | 0;
 nullFunc_vi(392); //@line 414
}
function b84(p0) {
 p0 = p0 | 0;
 nullFunc_vi(391); //@line 411
}
function b83(p0) {
 p0 = p0 | 0;
 nullFunc_vi(390); //@line 408
}
function b82(p0) {
 p0 = p0 | 0;
 nullFunc_vi(389); //@line 405
}
function b81(p0) {
 p0 = p0 | 0;
 nullFunc_vi(388); //@line 402
}
function b80(p0) {
 p0 = p0 | 0;
 nullFunc_vi(387); //@line 399
}
function b79(p0) {
 p0 = p0 | 0;
 nullFunc_vi(386); //@line 396
}
function b78(p0) {
 p0 = p0 | 0;
 nullFunc_vi(385); //@line 393
}
function b77(p0) {
 p0 = p0 | 0;
 nullFunc_vi(384); //@line 390
}
function b76(p0) {
 p0 = p0 | 0;
 nullFunc_vi(383); //@line 387
}
function b75(p0) {
 p0 = p0 | 0;
 nullFunc_vi(382); //@line 384
}
function b74(p0) {
 p0 = p0 | 0;
 nullFunc_vi(381); //@line 381
}
function b73(p0) {
 p0 = p0 | 0;
 nullFunc_vi(380); //@line 378
}
function b72(p0) {
 p0 = p0 | 0;
 nullFunc_vi(379); //@line 375
}
function b71(p0) {
 p0 = p0 | 0;
 nullFunc_vi(378); //@line 372
}
function b70(p0) {
 p0 = p0 | 0;
 nullFunc_vi(377); //@line 369
}
function b69(p0) {
 p0 = p0 | 0;
 nullFunc_vi(376); //@line 366
}
function b68(p0) {
 p0 = p0 | 0;
 nullFunc_vi(375); //@line 363
}
function b67(p0) {
 p0 = p0 | 0;
 nullFunc_vi(374); //@line 360
}
function b66(p0) {
 p0 = p0 | 0;
 nullFunc_vi(373); //@line 357
}
function b65(p0) {
 p0 = p0 | 0;
 nullFunc_vi(372); //@line 354
}
function b64(p0) {
 p0 = p0 | 0;
 nullFunc_vi(371); //@line 351
}
function b63(p0) {
 p0 = p0 | 0;
 nullFunc_vi(370); //@line 348
}
function b62(p0) {
 p0 = p0 | 0;
 nullFunc_vi(369); //@line 345
}
function b61(p0) {
 p0 = p0 | 0;
 nullFunc_vi(368); //@line 342
}
function _invoke_ticker__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___clang_call_terminate__async_cb($0) {
 $0 = $0 | 0;
}
function b60(p0) {
 p0 = p0 | 0;
 nullFunc_vi(0); //@line 339
}
function _serial_putc__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function _mbed_tracef__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function __ZSt9terminatev__async_cb_109($0) {
 $0 = $0 | 0;
}
function ___cxa_guard_release($0) {
 $0 = $0 | 0;
 return;
}
function __ZNSt9type_infoD2Ev($0) {
 $0 = $0 | 0;
 return;
}
function getTempRet0() {
 return tempRet0 | 0; //@line 42
}
function ___errno_location() {
 return 8388; //@line 4545
}
function _wait_ms__async_cb($0) {
 $0 = $0 | 0;
 return;
}
function ___cxa_guard_abort($0) {
 $0 = $0 | 0;
 return;
}
function stackSave() {
 return STACKTOP | 0; //@line 12
}
function _core_util_critical_section_enter() {
 return;
}
function __ZSt9terminatev__async_cb($0) {
 $0 = $0 | 0;
}
function _core_util_critical_section_exit() {
 return;
}
function _pthread_self() {
 return 2112; //@line 4598
}
function ___unlockfile($0) {
 $0 = $0 | 0;
 return;
}
function setAsync() {
 ___async = 1; //@line 26
}
function b58() {
 nullFunc_v(7); //@line 336
}
function b57() {
 nullFunc_v(6); //@line 333
}
function b56() {
 nullFunc_v(5); //@line 330
}
function b55() {
 nullFunc_v(0); //@line 324
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_i = [b1];
var FUNCTION_TABLE_ii = [b3,__ZN17EthernetInterface15get_mac_addressEv,__ZN17EthernetInterface14get_ip_addressEv,__ZN17EthernetInterface11get_netmaskEv,__ZN17EthernetInterface11get_gatewayEv,__ZN17EthernetInterface7connectEv,__ZN17EthernetInterface10disconnectEv,__ZNK16NetworkInterface21get_connection_statusEv,__ZN16NetworkInterface12ethInterfaceEv,__ZN16NetworkInterface13wifiInterfaceEv,__ZN16NetworkInterface13meshInterfaceEv,__ZN16NetworkInterface12cellularBaseEv,__ZN16NetworkInterface13emacInterfaceEv,__ZN17EthernetInterface9get_stackEv,__ZThn4_N17EthernetInterface14get_ip_addressEv,__ZN12NetworkStack19onboardNetworkStackEv,__ZN9TCPSocket9get_protoEv,__ZN9UDPSocket9get_protoEv,___stdio_close,b4,b5,b6,b7,b8,b9,b10,b11,b12,b13
,b14,b15,b16];
var FUNCTION_TABLE_iii = [b18,__ZN16NetworkInterface26gethostbyname_async_cancelEi,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress,__ZN17EthernetInterface8set_dhcpEb,__ZN16NetworkInterface12set_blockingEb,__ZN17EthernetInterface12socket_closeEPv,__ZN12NetworkStack26gethostbyname_async_cancelEi,__ZN12NetworkStack14add_dns_serverERK13SocketAddress,__ZThn4_N17EthernetInterface12socket_closeEPv,b19,b20,b21,b22,b23,b24,b25];
var FUNCTION_TABLE_iiii = [b27,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZN17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZN17EthernetInterface13socket_listenEPvi,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack14get_dns_serverEiP13SocketAddress,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol,__ZThn4_N17EthernetInterface11socket_bindEPvRK13SocketAddress,__ZThn4_N17EthernetInterface13socket_listenEPvi,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2_,___stdio_write,___stdio_seek,___stdout_write,_sn_write,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_do_read,b28,b29,b30,b31,b32,b33,b34,b35,b36,b37,b38
,b39,b40,b41];
var FUNCTION_TABLE_iiiii = [b43,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZN17EthernetInterface11set_networkEPKcS1_S1_,__ZN17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZN17EthernetInterface11socket_sendEPvPKvj,__ZN17EthernetInterface11socket_recvEPvS0_j,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version,__ZThn4_N17EthernetInterface13socket_acceptEPvPS0_P13SocketAddress,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j,b44,b45,b46,b47];
var FUNCTION_TABLE_iiiiii = [b49,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,__ZN12NetworkStack11setstackoptEiiPKvj,__ZN12NetworkStack11getstackoptEiiPvPj,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j,b50];
var FUNCTION_TABLE_iiiiiii = [b52,__ZN12NetworkStack10setsockoptEPviiPKvj,__ZN12NetworkStack10getsockoptEPviiS0_Pj,b53];
var FUNCTION_TABLE_v = [b55,___cxa_pure_virtual__wrapper,__ZL25default_terminate_handlerv,__ZL29nsapi_dns_query_async_timeoutv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b56,b57,b58];
var FUNCTION_TABLE_vi = [b60,__ZN17EthernetInterfaceD2Ev,__ZN17EthernetInterfaceD0Ev,__ZThn4_N17EthernetInterfaceD1Ev,__ZThn4_N17EthernetInterfaceD0Ev,_mbed_trace_default_print,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_dtorINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPv,__ZN6SocketD2Ev,__ZN6SocketD0Ev,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_14method_contextI6SocketMS5_FvvEEEEEvPv,__ZN9TCPSocketD2Ev,__ZN9TCPSocketD0Ev,__ZN9TCPSocket5eventEv,__ZN9UDPSocketD2Ev,__ZN9UDPSocketD0Ev,__ZN9UDPSocket5eventEv,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorIPS1_EEvPv,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvPvEvEEEEvS5_,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv,__ZN4mbed8CallbackIFvvEE13function_dtorINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPv,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev
,__ZN17EthernetInterface15get_mac_addressEv__async_cb,__ZN17EthernetInterface14get_ip_addressEv__async_cb,__ZN17EthernetInterface11get_netmaskEv__async_cb,__ZN17EthernetInterface11set_networkEPKcS1_S1___async_cb,__ZN17EthernetInterface8set_dhcpEb__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZN17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_210,__ZN17EthernetInterface12socket_closeEPv__async_cb,__ZN17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZN17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZN17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_85,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_86,__ZN17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_84,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZN17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_94,__ZThn4_N17EthernetInterface14get_ip_addressEv__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb,__ZThn4_N17EthernetInterface11socket_openEPPv14nsapi_protocol__async_cb_217,__ZThn4_N17EthernetInterface12socket_closeEPv__async_cb,__ZThn4_N17EthernetInterface14socket_connectEPvRK13SocketAddress__async_cb,__ZThn4_N17EthernetInterface11socket_sendEPvPKvj__async_cb,__ZThn4_N17EthernetInterface11socket_recvEPvS0_j__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_97,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_98,__ZThn4_N17EthernetInterface13socket_sendtoEPvRK13SocketAddressPKvj__async_cb_96,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb,__ZThn4_N17EthernetInterface15socket_recvfromEPvP13SocketAddressS0_j__async_cb_93
,_equeue_alloc__async_cb,_equeue_post__async_cb,_equeue_enqueue__async_cb,_mbed_trace_default_print__async_cb,_mbed_tracef__async_cb,_mbed_vtracef__async_cb,_mbed_vtracef__async_cb_138,_mbed_vtracef__async_cb_128,_mbed_vtracef__async_cb_129,_mbed_vtracef__async_cb_130,_mbed_vtracef__async_cb_137,_mbed_vtracef__async_cb_131,_mbed_vtracef__async_cb_136,_mbed_vtracef__async_cb_132,_mbed_vtracef__async_cb_133,_mbed_vtracef__async_cb_134,_mbed_vtracef__async_cb_135,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb_99,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN16NetworkInterface13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_28,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_36,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_37,__ZN16NetworkInterface19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_38,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb,__ZN16NetworkInterface26gethostbyname_async_cancelEi__async_cb_46,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb,__ZN16NetworkInterface14add_dns_serverERK13SocketAddress__async_cb_69
,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb,__ZN12NetworkStack13gethostbynameEPKcP13SocketAddress13nsapi_version__async_cb_188,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_153,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_145,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_146,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_147,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_148,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_152,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_149,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_150,__ZN12NetworkStack19gethostbyname_asyncEPKcN4mbed8CallbackIFviP13SocketAddressEEE13nsapi_version__async_cb_151,__ZN12NetworkStack26gethostbyname_async_cancelEi__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_9,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_1,__ZN6events10EventQueue13function_dtorIN4mbed8CallbackIFvvEEEEEvPv,__ZN6events10EventQueue13function_callIN4mbed8CallbackIFvvEEEEEvPv,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_7,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_2,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_3,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_8,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_4,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_6,__ZN12NetworkStack7call_inEiN4mbed8CallbackIFvvEEE__async_cb_5,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_48,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_49,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_50,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_callINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEiPKviS2___async_cb_51
,__ZN6SocketD2Ev__async_cb,__ZN6SocketD2Ev__async_cb_207,__ZN6Socket4openEP12NetworkStack__async_cb,__ZN6Socket4openEP12NetworkStack__async_cb_140,__ZN6Socket4openEP12NetworkStack__async_cb_141,__ZN6Socket4openEP12NetworkStack__async_cb_142,__ZN6Socket4openEP12NetworkStack__async_cb_143,__ZN4mbed8CallbackIFvvEE5thunkEPv,__ZN6Socket4openEP12NetworkStack__async_cb_144,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb_127,__ZN4mbed8CallbackIFvvEE5thunkEPv__async_cb,__ZN4mbed8CallbackIFvvEE13function_callINS2_14method_contextI6SocketMS5_FvvEEEEEvPKv__async_cb,__ZN6Socket5closeEv__async_cb,__ZN6Socket5closeEv__async_cb_107,__ZN6Socket5closeEv__async_cb_108,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb,__ZN6Socket5sigioEN4mbed8CallbackIFvvEEE__async_cb_95,__ZN9TCPSocketD2Ev__async_cb_165,__ZN9TCPSocketD2Ev__async_cb,__ZN9TCPSocketD2Ev__async_cb_164,__ZN9TCPSocketD0Ev__async_cb,__ZN9TCPSocket5eventEv__async_cb,__ZN9TCPSocket7connectEPKct__async_cb,__ZN9TCPSocket7connectEPKct__async_cb_92,__ZN9TCPSocket7connectEPKct__async_cb_91,__ZN9TCPSocket4sendEPKvj__async_cb_39,__ZN9TCPSocket4sendEPKvj__async_cb,__ZN9TCPSocket4recvEPvj__async_cb_47,__ZN9TCPSocket4recvEPvj__async_cb,__ZN9UDPSocketD2Ev__async_cb_11
,__ZN9UDPSocketD2Ev__async_cb,__ZN9UDPSocketD2Ev__async_cb_10,__ZN9UDPSocketD0Ev__async_cb,__ZN9UDPSocket5eventEv__async_cb,__ZN9UDPSocket6sendtoERK13SocketAddressPKvj__async_cb,__ZN9UDPSocket8recvfromEP13SocketAddressPvj__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_115,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_112,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_111,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_110,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_114,__ZL24nsapi_dns_query_multipleP12NetworkStackPKcP10nsapi_addrj13nsapi_version__async_cb_113,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb,__ZL19nsapi_dns_cache_addPKcP10nsapi_addrj__async_cb_106,__Z15nsapi_dns_queryP12NetworkStackPKcP13SocketAddress13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_87,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_90,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_88,__Z21nsapi_dns_query_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEENS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_89,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_83,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_79,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_80,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_70,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_71,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_72,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_73,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_74
,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_82,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_75,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_76,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_77,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_78,__Z30nsapi_dns_query_multiple_asyncP12NetworkStackPKcN4mbed8CallbackIFviP13SocketAddressEEEjNS4_IFiiNS4_IFvvEEEEEE13nsapi_version__async_cb_81,__ZL29nsapi_dns_query_async_timeoutv__async_cb_20,__ZL29nsapi_dns_query_async_timeoutv__async_cb_21,__ZL29nsapi_dns_query_async_timeoutv__async_cb,__ZL30nsapi_dns_query_async_responsePv,__ZL29nsapi_dns_query_async_timeoutv__async_cb_24,__ZL29nsapi_dns_query_async_timeoutv__async_cb_12,__ZL29nsapi_dns_query_async_timeoutv__async_cb_13,__ZL29nsapi_dns_query_async_timeoutv__async_cb_14,__ZL26nsapi_dns_query_async_sendPv,__ZL29nsapi_dns_query_async_timeoutv__async_cb_23,__ZL29nsapi_dns_query_async_timeoutv__async_cb_15,__ZL29nsapi_dns_query_async_timeoutv__async_cb_16,__ZL29nsapi_dns_query_async_timeoutv__async_cb_17,__ZL29nsapi_dns_query_async_timeoutv__async_cb_22,__ZL29nsapi_dns_query_async_timeoutv__async_cb_18,__ZL29nsapi_dns_query_async_timeoutv__async_cb_19,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_35,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_31,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_32,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_34,__Z17nsapi_dns_call_inN4mbed8CallbackIFiiNS0_IFvvEEEEEEiS2___async_cb_33,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb,__ZL28nsapi_dns_query_async_createPv
,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_213,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_211,__ZL35nsapi_dns_query_async_initiate_nextv__async_cb_212,__ZL28nsapi_dns_query_async_createPv__async_cb_199,__ZL28nsapi_dns_query_async_createPv__async_cb_206,__ZL28nsapi_dns_query_async_createPv__async_cb,__ZL28nsapi_dns_query_async_createPv__async_cb_202,__ZL28nsapi_dns_query_async_createPv__async_cb_204,__ZL28nsapi_dns_query_async_createPv__async_cb_189,__ZL28nsapi_dns_query_async_createPv__async_cb_190,__ZL28nsapi_dns_query_async_createPv__async_cb_191,__ZL28nsapi_dns_query_async_createPv__async_cb_192,__ZL28nsapi_dns_query_async_createPv__async_cb_201,__ZL28nsapi_dns_query_async_createPv__async_cb_203,__ZL28nsapi_dns_query_async_createPv__async_cb_193,__ZL28nsapi_dns_query_async_createPv__async_cb_194,__ZL28nsapi_dns_query_async_createPv__async_cb_198,__ZL28nsapi_dns_query_async_createPv__async_cb_195,__ZL28nsapi_dns_query_async_createPv__async_cb_196,__ZL37nsapi_dns_query_async_socket_callbackPv,__ZL28nsapi_dns_query_async_createPv__async_cb_205,__ZL28nsapi_dns_query_async_createPv__async_cb_197,__ZL28nsapi_dns_query_async_createPv__async_cb_200,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvPvEvEEEEvPKv__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_161,__ZL28nsapi_dns_query_async_deletei__async_cb,__ZL28nsapi_dns_query_async_deletei__async_cb_158,__ZL28nsapi_dns_query_async_deletei__async_cb_159,__ZL28nsapi_dns_query_async_deletei__async_cb_160,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb
,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_156,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_154,__ZL37nsapi_dns_query_async_socket_callbackPv__async_cb_155,__ZL26nsapi_dns_query_async_sendPv__async_cb,__ZL26nsapi_dns_query_async_sendPv__async_cb_123,__ZL26nsapi_dns_query_async_sendPv__async_cb_125,__ZL26nsapi_dns_query_async_sendPv__async_cb_116,__ZL26nsapi_dns_query_async_sendPv__async_cb_117,__ZL26nsapi_dns_query_async_sendPv__async_cb_118,__ZL26nsapi_dns_query_async_sendPv__async_cb_119,__ZL26nsapi_dns_query_async_sendPv__async_cb_122,__ZL26nsapi_dns_query_async_sendPv__async_cb_124,__ZL26nsapi_dns_query_async_sendPv__async_cb_120,__ZL26nsapi_dns_query_async_sendPv__async_cb_121,__ZL26nsapi_dns_query_async_sendPv__async_cb_126,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_105,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_104,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_102,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_103,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_100,__ZL44nsapi_dns_query_async_socket_callback_handleP12NetworkStack__async_cb_101,__ZN4mbed8CallbackIFvvEE13function_callINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPKv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_66,__ZL30nsapi_dns_query_async_responsePv__async_cb_65,__ZL30nsapi_dns_query_async_responsePv__async_cb,__ZL30nsapi_dns_query_async_responsePv__async_cb_67,__ZL30nsapi_dns_query_async_responsePv__async_cb_68,__ZL30nsapi_dns_query_async_responsePv__async_cb_63
,__ZL30nsapi_dns_query_async_responsePv__async_cb_64,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_45,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_41,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_42,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_43,__ZNK4mbed8CallbackIFiiNS0_IFvvEEEEEclEiS2___async_cb_44,__ZN4mbed8CallbackIFvvEE13function_callIPS1_EEvPKv__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb,__Z28nsapi_dns_query_async_canceli__async_cb_26,__Z28nsapi_dns_query_async_canceli__async_cb_27,_mbed_assert_internal__async_cb,_mbed_die__async_cb_187,_mbed_die__async_cb_186,_mbed_die__async_cb_185,_mbed_die__async_cb_184,_mbed_die__async_cb_183,_mbed_die__async_cb_182,_mbed_die__async_cb_181,_mbed_die__async_cb_180,_mbed_die__async_cb_179,_mbed_die__async_cb_178,_mbed_die__async_cb_177,_mbed_die__async_cb_176,_mbed_die__async_cb_175,_mbed_die__async_cb_174,_mbed_die__async_cb_173,_mbed_die__async_cb,_mbed_error_printf__async_cb,_mbed_error_vfprintf__async_cb
,_mbed_error_vfprintf__async_cb_167,_mbed_error_vfprintf__async_cb_166,_serial_putc__async_cb_157,_serial_putc__async_cb,_invoke_ticker__async_cb_139,_invoke_ticker__async_cb,_wait_ms__async_cb,_main__async_cb_54,_main__async_cb_62,_main__async_cb_61,_main__async_cb,_main__async_cb_60,_main__async_cb_57,_main__async_cb_52,_main__async_cb_56,_main__async_cb_55,_main__async_cb_59,_main__async_cb_53,_main__async_cb_58,_putc__async_cb_40,_putc__async_cb,___overflow__async_cb,_fflush__async_cb_215,_fflush__async_cb_214,_fflush__async_cb_216,_fflush__async_cb,___fflush_unlocked__async_cb,___fflush_unlocked__async_cb_29,_vfprintf__async_cb,_snprintf__async_cb
,_vsnprintf__async_cb,_sprintf__async_cb,_vsprintf__async_cb,_printf__async_cb,_fputc__async_cb_30,_fputc__async_cb,_puts__async_cb,__Znwj__async_cb,__ZnwjRKSt9nothrow_t__async_cb,__Znaj__async_cb,__ZnajRKSt9nothrow_t__async_cb,__ZL25default_terminate_handlerv__async_cb,__ZL25default_terminate_handlerv__async_cb_218,_abort_message__async_cb,_abort_message__async_cb_163,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb_25,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv__async_cb,___dynamic_cast__async_cb,___dynamic_cast__async_cb_209,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_162,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,__ZSt11__terminatePFvvE__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb_168,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_172,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_171,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_170
,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb_169,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb_208,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib__async_cb,__ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib__async_cb,___cxa_can_catch__async_cb,___cxa_is_pointer_type__async_cb,b61,b62,b63,b64,b65,b66,b67,b68,b69,b70,b71,b72,b73,b74,b75,b76,b77,b78,b79,b80,b81
,b82,b83,b84,b85,b86,b87,b88,b89,b90,b91,b92,b93,b94,b95,b96,b97,b98,b99,b100,b101,b102,b103,b104,b105,b106,b107,b108,b109,b110,b111
,b112,b113,b114,b115,b116,b117,b118,b119,b120,b121,b122,b123,b124,b125,b126,b127,b128,b129,b130,b131,b132,b133,b134,b135,b136,b137,b138,b139,b140,b141
,b142,b143,b144,b145,b146,b147,b148,b149,b150,b151,b152,b153,b154,b155,b156,b157,b158,b159,b160,b161,b162,b163,b164,b165,b166,b167,b168,b169,b170,b171
,b172,b173,b174,b175,b176,b177,b178,b179,b180,b181,b182,b183,b184,b185,b186,b187,b188,b189,b190,b191,b192,b193,b194,b195,b196,b197,b198,b199,b200,b201
,b202,b203,b204];
var FUNCTION_TABLE_vii = [b206,__ZN16NetworkInterface6attachEN4mbed8CallbackIFv11nsapi_eventiEEE,__ZN12NetworkStack20get_call_in_callbackEv,__ZN4mbed8CallbackIFiiNS0_IFvvEEEEE13function_moveINS4_14method_contextI12NetworkStackMS7_FiiS2_EEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_14method_contextI6SocketMS5_FvvEEEEEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveIPS1_EEvPvPKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvPvEvEEEEvS5_PKv,__ZN4mbed8CallbackIFvvEE13function_moveINS2_16function_contextIPFvP12NetworkStackES5_EEEEvPvPKv];
var FUNCTION_TABLE_viii = [b208];
var FUNCTION_TABLE_viiii = [b210,__ZN17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZThn4_N17EthernetInterface13socket_attachEPvPFvS0_ES0_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b211,b212];
var FUNCTION_TABLE_viiiii = [b214,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_viiiiii = [b216,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];

  return { ___cxa_can_catch: ___cxa_can_catch, ___cxa_is_pointer_type: ___cxa_is_pointer_type, ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, ___uremdi3: ___uremdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _emscripten_alloc_async_context: _emscripten_alloc_async_context, _emscripten_async_resume: _emscripten_async_resume, _emscripten_free_async_context: _emscripten_free_async_context, _emscripten_realloc_async_context: _emscripten_realloc_async_context, _fflush: _fflush, _free: _free, _handle_interrupt_in: _handle_interrupt_in, _handle_lora_downlink: _handle_lora_downlink, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _invoke_ticker: _invoke_ticker, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _pthread_mutex_lock: _pthread_mutex_lock, _pthread_mutex_unlock: _pthread_mutex_unlock, _sbrk: _sbrk, dynCall_i: dynCall_i, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiii: dynCall_iiiiii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_v: dynCall_v, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, dynCall_viiiii: dynCall_viiiii, dynCall_viiiiii: dynCall_viiiiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setAsync: setAsync, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_can_catch.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____cxa_is_pointer_type.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____uremdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__emscripten_alloc_async_context = asm["_emscripten_alloc_async_context"]; asm["_emscripten_alloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_alloc_async_context.apply(null, arguments);
};

var real__emscripten_async_resume = asm["_emscripten_async_resume"]; asm["_emscripten_async_resume"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_async_resume.apply(null, arguments);
};

var real__emscripten_free_async_context = asm["_emscripten_free_async_context"]; asm["_emscripten_free_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_free_async_context.apply(null, arguments);
};

var real__emscripten_realloc_async_context = asm["_emscripten_realloc_async_context"]; asm["_emscripten_realloc_async_context"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__emscripten_realloc_async_context.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__handle_interrupt_in = asm["_handle_interrupt_in"]; asm["_handle_interrupt_in"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_interrupt_in.apply(null, arguments);
};

var real__handle_lora_downlink = asm["_handle_lora_downlink"]; asm["_handle_lora_downlink"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__handle_lora_downlink.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__invoke_ticker = asm["_invoke_ticker"]; asm["_invoke_ticker"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__invoke_ticker.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__pthread_mutex_lock = asm["_pthread_mutex_lock"]; asm["_pthread_mutex_lock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_lock.apply(null, arguments);
};

var real__pthread_mutex_unlock = asm["_pthread_mutex_unlock"]; asm["_pthread_mutex_unlock"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__pthread_mutex_unlock.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setAsync = asm["setAsync"]; asm["setAsync"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setAsync.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _emscripten_alloc_async_context = Module["_emscripten_alloc_async_context"] = asm["_emscripten_alloc_async_context"];
var _emscripten_async_resume = Module["_emscripten_async_resume"] = asm["_emscripten_async_resume"];
var _emscripten_free_async_context = Module["_emscripten_free_async_context"] = asm["_emscripten_free_async_context"];
var _emscripten_realloc_async_context = Module["_emscripten_realloc_async_context"] = asm["_emscripten_realloc_async_context"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _handle_interrupt_in = Module["_handle_interrupt_in"] = asm["_handle_interrupt_in"];
var _handle_lora_downlink = Module["_handle_lora_downlink"] = asm["_handle_lora_downlink"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _invoke_ticker = Module["_invoke_ticker"] = asm["_invoke_ticker"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _pthread_mutex_lock = Module["_pthread_mutex_lock"] = asm["_pthread_mutex_lock"];
var _pthread_mutex_unlock = Module["_pthread_mutex_unlock"] = asm["_pthread_mutex_unlock"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setAsync = Module["setAsync"] = asm["setAsync"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = flush_NO_FILESYSTEM;
    if (flush) flush(0);
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}






//# sourceMappingURL=network.js.map